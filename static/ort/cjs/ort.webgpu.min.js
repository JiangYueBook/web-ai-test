/*!
 * ONNX Runtime Web v1.17.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";var Wn=Object.defineProperty;var Hl=Object.getOwnPropertyDescriptor;var Ll=Object.getOwnPropertyNames;var Gl=Object.prototype.hasOwnProperty;var j=(e,t)=>()=>(e&&(t=e(e=0)),t);var Qt=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Nt=(e,t)=>{for(var r in t)Wn(e,r,{get:t[r],enumerable:!0})},Fl=(e,t,r,a)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Ll(t))!Gl.call(e,n)&&n!==r&&Wn(e,n,{get:()=>t[n],enumerable:!(a=Hl(t,n))||a.enumerable});return e};var Tt=e=>Fl(Wn({},"__esModule",{value:!0}),e);var Kr,Vt,Ot,Yr,Zr=j(()=>{"use strict";Kr=new Map,Vt=[],Ot=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let a=Kr.get(e);if(a===void 0)Kr.set(e,{backend:t,priority:r});else{if(a.priority>r)return;if(a.priority===r&&a.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let n=Vt.indexOf(e);n!==-1&&Vt.splice(n,1);for(let o=0;o<Vt.length;o++)if(Kr.get(Vt[o]).priority<=r){Vt.splice(o,0,e);return}Vt.push(e)}return}throw new TypeError("not a valid backend")},Yr=async e=>{let t=e.length===0?Vt:e,r=[];for(let a of t){let n=Kr.get(a);if(n){if(n.initialized)return n.backend;if(n.aborted)continue;let o=!!n.initPromise;try{return o||(n.initPromise=n.backend.init(a)),await n.initPromise,n.initialized=!0,n.backend}catch(u){o||r.push({name:a,err:u}),n.aborted=!0}finally{delete n.initPromise}}}throw new Error(`no available backend found. ERR: ${r.map(a=>`[${a.name}] ${a.err}`).join(", ")}`)}});var Ya=j(()=>{"use strict";Zr()});var Za,Xa=j(()=>{"use strict";Za="1.17.0"});var Qa,Ht,Nn=j(()=>{"use strict";Xa();Qa="warning",Ht={wasm:{},webgl:{},webgpu:{},versions:{common:Za},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Qa=e}},get logLevel(){return Qa}};Object.defineProperty(Ht,"logLevel",{enumerable:!0})});var Ee,Ja=j(()=>{"use strict";Nn();Ee=Ht});var ei,ti,ri=j(()=>{"use strict";ei=(e,t)=>{let r=document.createElement("canvas");r.width=e.dims[3],r.height=e.dims[2];let a=r.getContext("2d");if(a!=null){let n,o;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],o=e.dims[3]):(n=e.dims[3],o=e.dims[2]);let u=t?.format!==void 0?t.format:"RGB",l=t?.norm,i,c;l===void 0||l.mean===void 0?i=[255,255,255,255]:typeof l.mean=="number"?i=[l.mean,l.mean,l.mean,l.mean]:(i=[l.mean[0],l.mean[1],l.mean[2],0],l.mean[3]!==void 0&&(i[3]=l.mean[3])),l===void 0||l.bias===void 0?c=[0,0,0,0]:typeof l.bias=="number"?c=[l.bias,l.bias,l.bias,l.bias]:(c=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(c[3]=l.bias[3]));let m=o*n,f=0,h=m,w=m*2,b=-1;u==="RGBA"?(f=0,h=m,w=m*2,b=m*3):u==="RGB"?(f=0,h=m,w=m*2):u==="RBG"&&(f=0,w=m,h=m*2);for(let _=0;_<o;_++)for(let I=0;I<n;I++){let $=(e.data[f++]-c[0])*i[0],S=(e.data[h++]-c[1])*i[1],T=(e.data[w++]-c[2])*i[2],E=b===-1?255:(e.data[b++]-c[3])*i[3];a.fillStyle="rgba("+$+","+S+","+T+","+E+")",a.fillRect(I,_,1,1)}return r.toDataURL()}else throw new Error("Can not access image data")},ti=(e,t)=>{let r=document.createElement("canvas").getContext("2d"),a;if(r!=null){let n,o,u;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(n=e.dims[2],o=e.dims[1],u=e.dims[3]):(n=e.dims[3],o=e.dims[2],u=e.dims[1]);let l=t!==void 0&&t.format!==void 0?t.format:"RGB",i=t?.norm,c,m;i===void 0||i.mean===void 0?c=[255,255,255,255]:typeof i.mean=="number"?c=[i.mean,i.mean,i.mean,i.mean]:(c=[i.mean[0],i.mean[1],i.mean[2],255],i.mean[3]!==void 0&&(c[3]=i.mean[3])),i===void 0||i.bias===void 0?m=[0,0,0,0]:typeof i.bias=="number"?m=[i.bias,i.bias,i.bias,i.bias]:(m=[i.bias[0],i.bias[1],i.bias[2],0],i.bias[3]!==void 0&&(m[3]=i.bias[3]));let f=o*n;if(t!==void 0&&(t.format!==void 0&&u===4&&t.format!=="RGBA"||u===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let h=4,w=0,b=1,_=2,I=3,$=0,S=f,T=f*2,E=-1;l==="RGBA"?($=0,S=f,T=f*2,E=f*3):l==="RGB"?($=0,S=f,T=f*2):l==="RBG"&&($=0,T=f,S=f*2),a=r.createImageData(n,o);for(let M=0;M<o*n;w+=h,b+=h,_+=h,I+=h,M++)a.data[w]=(e.data[$++]-m[0])*c[0],a.data[b]=(e.data[S++]-m[1])*c[1],a.data[_]=(e.data[T++]-m[2])*c[2],a.data[I]=E===-1?255:(e.data[E++]-m[3])*c[3]}else throw new Error("Can not access image data");return a}});var Vn,ni,ai,ii,oi,si=j(()=>{"use strict";Xr();Vn=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:a}=t,n=t.norm??{mean:255,bias:0},o,u;typeof n.mean=="number"?o=[n.mean,n.mean,n.mean,n.mean]:o=[n.mean[0],n.mean[1],n.mean[2],n.mean[3]??255],typeof n.bias=="number"?u=[n.bias,n.bias,n.bias,n.bias]:u=[n.bias[0],n.bias[1],n.bias[2],n.bias[3]??0];let l=t.format!==void 0?t.format:"RGBA",i=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",c=r*a,m=i==="RGBA"?new Float32Array(c*4):new Float32Array(c*3),f=4,h=0,w=1,b=2,_=3,I=0,$=c,S=c*2,T=-1;l==="RGB"&&(f=3,h=0,w=1,b=2,_=-1),i==="RGBA"?T=c*3:i==="RBG"?(I=0,S=c,$=c*2):i==="BGR"&&(S=0,$=c,I=c*2);for(let M=0;M<c;M++,h+=f,b+=f,w+=f,_+=f)m[I++]=(e[h]+u[0])/o[0],m[$++]=(e[w]+u[1])/o[1],m[S++]=(e[b]+u[2])/o[2],T!==-1&&_!==-1&&(m[T++]=(e[_]+u[3])/o[3]);return i==="RGBA"?new Xe("float32",m,[1,4,r,a]):new Xe("float32",m,[1,3,r,a])},ni=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,a=typeof ImageData<"u"&&e instanceof ImageData,n=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,o=typeof e=="string",u,l=t??{};if(r){let i=document.createElement("canvas");i.width=e.width,i.height=e.height;let c=i.getContext("2d");if(c!=null){let m=e.height,f=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(m=t.resizedHeight,f=t.resizedWidth),t!==void 0){if(l=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");l.tensorFormat="RGBA",l.height=m,l.width=f}else l.tensorFormat="RGBA",l.height=m,l.width=f;c.drawImage(e,0,0),u=c.getImageData(0,0,f,m).data}else throw new Error("Can not access image data")}else if(a){let i,c;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(i=t.resizedHeight,c=t.resizedWidth):(i=e.height,c=e.width),t!==void 0&&(l=t),l.format="RGBA",l.height=i,l.width=c,t!==void 0){let m=document.createElement("canvas");m.width=c,m.height=i;let f=m.getContext("2d");if(f!=null)f.putImageData(e,0,0),u=f.getImageData(0,0,c,i).data;else throw new Error("Can not access image data")}else u=e.data}else if(n){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let i=document.createElement("canvas");i.width=e.width,i.height=e.height;let c=i.getContext("2d");if(c!=null){let m=e.height,f=e.width;return c.drawImage(e,0,0,f,m),u=c.getImageData(0,0,f,m).data,l.height=m,l.width=f,Vn(u,l)}else throw new Error("Can not access image data")}else{if(o)return new Promise((i,c)=>{let m=document.createElement("canvas"),f=m.getContext("2d");if(!e||!f)return c();let h=new Image;h.crossOrigin="Anonymous",h.src=e,h.onload=()=>{m.width=h.width,m.height=h.height,f.drawImage(h,0,0,m.width,m.height);let w=f.getImageData(0,0,m.width,m.height);l.height=m.height,l.width=m.width,i(Vn(w.data,l))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(u!==void 0)return Vn(u,l);throw new Error("Input data provided is not supported - aborted tensor creation")},ai=(e,t)=>{let{width:r,height:a,download:n,dispose:o}=t,u=[1,a,r,4];return new Xe({location:"texture",type:"float32",texture:e,dims:u,download:n,dispose:o})},ii=(e,t)=>{let{dataType:r,dims:a,download:n,dispose:o}=t;return new Xe({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:a,download:n,dispose:o})},oi=(e,t,r)=>new Xe({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})});var $r,Qr,ui,li,di=j(()=>{"use strict";$r=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["float16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),Qr=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),ui=!1,li=()=>{if(!ui){ui=!0;let e=typeof BigInt64Array<"u"&&typeof BigInt64Array.from=="function",t=typeof BigUint64Array<"u"&&typeof BigUint64Array.from=="function";e&&($r.set("int64",BigInt64Array),Qr.set(BigInt64Array,"int64")),t&&($r.set("uint64",BigUint64Array),Qr.set(BigUint64Array,"uint64"))}}});var ci,pi,mi=j(()=>{"use strict";Xr();ci=e=>{let t=1;for(let r=0;r<e.length;r++){let a=e[r];if(typeof a!="number"||!Number.isSafeInteger(a))throw new TypeError(`dims[${r}] must be an integer, got: ${a}`);if(a<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${a}`);t*=a}return t},pi=(e,t)=>{switch(e.location){case"cpu":return new Xe(e.type,e.data,t);case"cpu-pinned":return new Xe({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new Xe({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new Xe({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}});var Xe,Xr=j(()=>{"use strict";ri();si();di();mi();Xe=class{constructor(t,r,a){li();let n,o;if(typeof t=="object"&&"location"in t)switch(this.dataLocation=t.location,n=t.type,o=t.dims,t.location){case"cpu-pinned":{let l=$r.get(n);if(!l)throw new TypeError(`unsupported type "${n}" to create tensor from pinned buffer`);if(!(t.data instanceof l))throw new TypeError(`buffer should be of type ${l.name}`);this.cpuData=t.data;break}case"texture":{if(n!=="float32")throw new TypeError(`unsupported type "${n}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case"gpu-buffer":{if(n!=="float32"&&n!=="float16"&&n!=="int32"&&n!=="int64"&&n!=="uint32"&&n!=="bool")throw new TypeError(`unsupported type "${n}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let l,i;if(typeof t=="string")if(n=t,i=a,t==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");l=r}else{let c=$r.get(t);if(c===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(r)){if(t==="float16")throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");t==="uint64"||t==="int64"?l=c.from(r,BigInt):l=c.from(r)}else if(r instanceof c)l=r;else throw new TypeError(`A ${n} tensor's data must be type of ${c}`)}else if(i=r,Array.isArray(t)){if(t.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let c=typeof t[0];if(c==="string")n="string",l=t;else if(c==="boolean")n="bool",l=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${c}.`)}else{let c=Qr.get(t.constructor);if(c===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);n=c,l=t}if(i===void 0)i=[l.length];else if(!Array.isArray(i))throw new TypeError("A tensor's dims must be a number array");o=i,this.cpuData=l,this.dataLocation="cpu"}let u=ci(o);if(this.cpuData&&u!==this.cpuData.length)throw new Error(`Tensor's size(${u}) does not match data length(${this.cpuData.length}).`);this.type=n,this.dims=o,this.size=u}static async fromImage(t,r){return ni(t,r)}static fromTexture(t,r){return ai(t,r)}static fromGpuBuffer(t,r){return ii(t,r)}static fromPinnedBuffer(t,r,a){return oi(t,r,a)}toDataURL(t){return ei(this,t)}toImageData(t){return ti(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,t&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return pi(this,t)}}});var Ke,Jr=j(()=>{"use strict";Xr();Ke=Xe});var Hn,fi,at,it,Ln=j(()=>{"use strict";Nn();Hn=(e,t)=>{Ht.wasm.trace&&console.timeStamp(`${e}::ORT::${t}`)},fi=(e,t)=>{let r=new Error().stack?.split(/\r\n|\r|\n/g)||[],a=!1;for(let n=0;n<r.length;n++){if(a&&!r[n].includes("TRACE_FUNC")){let o=`FUNC_${e}::${r[n].trim().split(" ")[1]}`;t&&(o+=`::${t}`),Hn("CPU",o);return}r[n].includes("TRACE_FUNC")&&(a=!0)}},at=e=>{Ht.wasm.trace&&fi("BEGIN",e)},it=e=>{Ht.wasm.trace&&fi("END",e)}});var en,hi=j(()=>{"use strict";Zr();Jr();Ln();en=class e{constructor(t){this.handler=t}async run(t,r,a){at();let n={},o={};if(typeof t!="object"||t===null||t instanceof Ke||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let u=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Ke)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");u=!1;for(let c of r){if(typeof c!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(c)===-1)throw new RangeError(`'fetches' contains invalid output name: ${c}.`);n[c]=null}if(typeof a=="object"&&a!==null)o=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else{let c=!1,m=Object.getOwnPropertyNames(r);for(let f of this.outputNames)if(m.indexOf(f)!==-1){let h=r[f];(h===null||h instanceof Ke)&&(c=!0,u=!1,n[f]=h)}if(c){if(typeof a=="object"&&a!==null)o=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else o=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let c of this.inputNames)if(typeof t[c]>"u")throw new Error(`input '${c}' is missing in 'feeds'.`);if(u)for(let c of this.outputNames)n[c]=null;let l=await this.handler.run(t,n,o),i={};for(let c in l)if(Object.hasOwnProperty.call(l,c)){let m=l[c];m instanceof Ke?i[c]=m:i[c]=new Ke(m.type,m.data,m.dims)}return it(),i}async release(){return this.handler.dispose()}static async create(t,r,a,n){at();let o,u={};if(typeof t=="string"){if(o=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(o=t,typeof r=="object"&&r!==null)u=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let f=t,h=0,w=t.byteLength;if(typeof r=="object"&&r!==null)u=r;else if(typeof r=="number"){if(h=r,!Number.isSafeInteger(h))throw new RangeError("'byteOffset' must be an integer.");if(h<0||h>=f.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${f.byteLength}).`);if(w=t.byteLength-h,typeof a=="number"){if(w=a,!Number.isSafeInteger(w))throw new RangeError("'byteLength' must be an integer.");if(w<=0||h+w>f.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${f.byteLength-h}].`);if(typeof n=="object"&&n!==null)u=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(typeof a<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");o=new Uint8Array(f,h,w)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let i=(u.executionProviders||[]).map(f=>typeof f=="string"?f:f.name),m=await(await Yr(i)).createInferenceSessionHandler(o,u);return it(),new e(m)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}});var gi,yi=j(()=>{"use strict";hi();gi=en});var bi=j(()=>{"use strict"});var ql,tn,wi=j(()=>{"use strict";Zr();Jr();ql="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",tn=class e{constructor(t,r,a){this.handler=t,this.hasOptimizerModel=r,this.hasEvalModel=a}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(t,r){let a=t.evalModel||"",n=t.optimizerModel||"",o=r||{},l=(o.executionProviders||[]).map(c=>typeof c=="string"?c:c.name),i=await Yr(l);if(i.createTrainingSessionHandler){let c=await i.createTrainingSessionHandler(t.checkpointState,t.trainModel,a,n,o);return new e(c,!!t.optimizerModel,!!t.evalModel)}else throw new Error(ql)}typeNarrowingForRunStep(t,r,a,n,o){let u={},l={};if(typeof a!="object"||a===null||a instanceof Ke||Array.isArray(a))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let i=!0;if(typeof n=="object"){if(n===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(n instanceof Ke)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(n)){if(n.length===0)throw new TypeError("'fetches' cannot be an empty array.");i=!1;for(let c of n){if(typeof c!="string")throw new TypeError("'fetches' must be a string array or an object.");if(r.indexOf(c)===-1)throw new RangeError(`'fetches' contains invalid output name: ${c}.`);u[c]=null}if(typeof o=="object"&&o!==null)l=o;else if(typeof o<"u")throw new TypeError("'options' must be an object.")}else{let c=!1,m=Object.getOwnPropertyNames(n);for(let f of r)if(m.indexOf(f)!==-1){let h=n[f];(h===null||h instanceof Ke)&&(c=!0,i=!1,u[f]=h)}if(c){if(typeof o=="object"&&o!==null)l=o;else if(typeof o<"u")throw new TypeError("'options' must be an object.")}else l=n}}else if(typeof n<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let c of t)if(typeof a[c]>"u")throw new Error(`input '${c}' is missing in 'feeds'.`);if(i)for(let c of r)u[c]=null;return[u,l]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let a in t)if(Object.hasOwnProperty.call(t,a)){let n=t[a];n instanceof Ke?r[a]=n:r[a]=new Ke(n.type,n.data,n.dims)}return r}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(t,r,a){let[n,o]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,t,r,a),u=await this.handler.runTrainStep(t,n,o);return this.convertHandlerReturnTypeToMapOfTensors(u)}async runOptimizerStep(t){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(t||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(t,r,a){if(this.hasEvalModel){let[n,o]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,t,r,a),u=await this.handler.runEvalStep(t,n,o);return this.convertHandlerReturnTypeToMapOfTensors(u)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let a=await this.getParametersSize(r);if(t.length!==4*a)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}});var vi,$i=j(()=>{"use strict";wi();vi=tn});var Gn={};Nt(Gn,{InferenceSession:()=>gi,TRACE:()=>Hn,TRACE_FUNC_BEGIN:()=>at,TRACE_FUNC_END:()=>it,Tensor:()=>Ke,TrainingSession:()=>vi,env:()=>Ee,registerBackend:()=>Ot});var ot=j(()=>{"use strict";Ya();Ja();yi();Jr();Ln();bi();$i()});var Fn={};Nt(Fn,{readFile:()=>jl});var jl,qn=j(()=>{jl=void 0});var jn={};Nt(jn,{join:()=>Kl});var Kl,Kn=j(()=>{Kl=void 0});var Ii=Qt((Si,Yn)=>{"use strict";var xi=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,a,n;r.ready=new Promise((d,g)=>{a=d,n=g}),r.jsepInit=(d,g,v,C,k,F,H,le)=>{r.Za=d,r.Oa=g,r.Qa=v,r.Ja=C,r.Pa=k,r.ra=F,r.Ra=H,r.Sa=le,g=(Q,ie,te)=>(...ye)=>{let xe=nt,R=ie?.();ye=Q(...ye);let se=ie?.();return R!==se&&(Q=se,te(R),ie=te=null),nt!=xe?Ur():ye},v=Q=>async(...ie)=>{try{if(r.Da)throw Error("Session already started");let te=r.Da={Ta:ie[0],errors:[]},ye=await Q(...ie);if(r.Da!==te)throw Error("Session mismatch");d.flush();let xe=te.errors;if(0<xe.length){let R=await Promise.all(xe);if(R=R.filter(se=>se),0<R.length)throw Error(R.join(`
`))}return ye}finally{r.Da=null}},r._OrtRun=v(g(r._OrtRun,()=>r._OrtRun,Q=>r._OrtRun=Q)),r._OrtRunWithBinding=v(g(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,Q=>r._OrtRunWithBinding=Q)),r._OrtBindInput=g(r._OrtBindInput,()=>r._OrtBindInput,Q=>r._OrtBindInput=Q),r.jsepRegisterBuffer=(Q,ie,te,ye)=>d.registerBuffer(Q,ie,te,ye),r.jsepUnregisterBuffers=Q=>{d.unregisterBuffers(Q)},r.jsepGetBuffer=Q=>d.getBuffer(Q),r.jsepCreateDownloader=(Q,ie,te)=>d.createDownloader(Q,ie,te)};var o=Object.assign({},r),u="./this.program",l=(d,g)=>{throw g},i=typeof window=="object",c=typeof importScripts=="function",m=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",f="",h,w,b;if(m){var _=(qn(),Tt(Fn)),I=(Kn(),Tt(jn));f=c?I.dirname(f)+"/":__dirname+"/",h=(d,g)=>(d=d.startsWith("file://")?new URL(d):I.normalize(d),_.readFileSync(d,g?void 0:"utf8")),b=d=>(d=h(d,!0),d.buffer||(d=new Uint8Array(d)),d),w=(d,g,v,C=!0)=>{d=d.startsWith("file://")?new URL(d):I.normalize(d),_.readFile(d,C?void 0:"utf8",(k,F)=>{k?v(k):g(C?F.buffer:F)})},!r.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),l=(d,g)=>{throw process.exitCode=d,g},r.inspect=()=>"[Emscripten Module object]"}else(i||c)&&(c?f=self.location.href:typeof document<"u"&&document.currentScript&&(f=document.currentScript.src),e&&(f=e),f.indexOf("blob:")!==0?f=f.substr(0,f.replace(/[?#].*/,"").lastIndexOf("/")+1):f="",h=d=>{var g=new XMLHttpRequest;return g.open("GET",d,!1),g.send(null),g.responseText},c&&(b=d=>{var g=new XMLHttpRequest;return g.open("GET",d,!1),g.responseType="arraybuffer",g.send(null),new Uint8Array(g.response)}),w=(d,g,v)=>{var C=new XMLHttpRequest;C.open("GET",d,!0),C.responseType="arraybuffer",C.onload=()=>{C.status==200||C.status==0&&C.response?g(C.response):v()},C.onerror=v,C.send(null)});var $=r.print||console.log.bind(console),S=r.printErr||console.error.bind(console);Object.assign(r,o),o=null,r.thisProgram&&(u=r.thisProgram),r.quit&&(l=r.quit);var T;r.wasmBinary&&(T=r.wasmBinary);var E=r.noExitRuntime||!0;typeof WebAssembly!="object"&&Le("no native wasm support detected");var M,A,N=!1,W,L,J,B,Y,pe,ee;function ve(){var d=M.buffer;r.HEAP8=L=new Int8Array(d),r.HEAP16=new Int16Array(d),r.HEAP32=B=new Int32Array(d),r.HEAPU8=J=new Uint8Array(d),r.HEAPU16=new Uint16Array(d),r.HEAPU32=Y=new Uint32Array(d),r.HEAPF32=pe=new Float32Array(d),r.HEAPF64=ee=new Float64Array(d)}var Z=[],be=[],Ie=[];function fe(){var d=r.preRun.shift();Z.unshift(d)}var ce=0,We=null,Pe=null;function Le(d){throw r.onAbort&&r.onAbort(d),d="Aborted("+d+")",S(d),N=!0,W=1,d=new WebAssembly.RuntimeError(d+". Build with -sASSERTIONS for more info."),n(d),d}function G(d){return d.startsWith("data:application/octet-stream;base64,")}var X;if(X="ort-wasm-simd.wasm",!G(X)){var he=X;X=r.locateFile?r.locateFile(he,f):f+he}function qe(d){if(d==X&&T)return new Uint8Array(T);if(b)return b(d);throw"both async and sync fetching of the wasm failed"}function Je(d){if(!T&&(i||c)){if(typeof fetch=="function"&&!d.startsWith("file://"))return fetch(d,{credentials:"same-origin"}).then(g=>{if(!g.ok)throw"failed to load wasm binary file at '"+d+"'";return g.arrayBuffer()}).catch(()=>qe(d));if(w)return new Promise((g,v)=>{w(d,C=>g(new Uint8Array(C)),v)})}return Promise.resolve().then(()=>qe(d))}function De(d,g,v){return Je(d).then(C=>WebAssembly.instantiate(C,g)).then(C=>C).then(v,C=>{S("failed to asynchronously prepare wasm: "+C),Le(C)})}function Ge(d,g){var v=X;return T||typeof WebAssembly.instantiateStreaming!="function"||G(v)||v.startsWith("file://")||m||typeof fetch!="function"?De(v,d,g):fetch(v,{credentials:"same-origin"}).then(C=>WebAssembly.instantiateStreaming(C,d).then(g,function(k){return S("wasm streaming compile failed: "+k),S("falling back to ArrayBuffer instantiation"),De(v,d,g)}))}var Ze,ct={923216:d=>{r.ra("Abs",d,void 0)},923267:d=>{r.ra("Neg",d,void 0)},923318:d=>{r.ra("Floor",d,void 0)},923371:d=>{r.ra("Ceil",d,void 0)},923423:d=>{r.ra("Reciprocal",d,void 0)},923481:d=>{r.ra("Sqrt",d,void 0)},923533:d=>{r.ra("Exp",d,void 0)},923584:d=>{r.ra("Erf",d,void 0)},923635:d=>{r.ra("Sigmoid",d,void 0)},923690:d=>{r.ra("Log",d,void 0)},923741:d=>{r.ra("Sin",d,void 0)},923792:d=>{r.ra("Cos",d,void 0)},923843:d=>{r.ra("Tan",d,void 0)},923894:d=>{r.ra("Asin",d,void 0)},923946:d=>{r.ra("Acos",d,void 0)},923998:d=>{r.ra("Atan",d,void 0)},924050:d=>{r.ra("Sinh",d,void 0)},924102:d=>{r.ra("Cosh",d,void 0)},924154:d=>{r.ra("Asinh",d,void 0)},924207:d=>{r.ra("Acosh",d,void 0)},924260:d=>{r.ra("Atanh",d,void 0)},924313:d=>{r.ra("Tanh",d,void 0)},924365:d=>{r.ra("Not",d,void 0)},924416:(d,g,v)=>{r.ra("Clip",d,{min:g,max:v})},924485:d=>{r.ra("Clip",d,void 0)},924537:(d,g)=>{r.ra("Elu",d,{alpha:g})},924595:d=>{r.ra("Relu",d,void 0)},924647:(d,g)=>{r.ra("LeakyRelu",d,{alpha:g})},924711:(d,g)=>{r.ra("ThresholdedRelu",d,{alpha:g})},924781:(d,g)=>{r.ra("Cast",d,{to:g})},924839:d=>{r.ra("Add",d,void 0)},924890:d=>{r.ra("Sub",d,void 0)},924941:d=>{r.ra("Mul",d,void 0)},924992:d=>{r.ra("Div",d,void 0)},925043:d=>{r.ra("Pow",d,void 0)},925094:d=>{r.ra("Equal",d,void 0)},925147:d=>{r.ra("Greater",d,void 0)},925202:d=>{r.ra("GreaterOrEqual",d,void 0)},925264:d=>{r.ra("Less",d,void 0)},925316:d=>{r.ra("LessOrEqual",d,void 0)},925375:(d,g,v,C,k)=>{r.ra("ReduceMean",d,{keepDims:!!g,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(k>>>0,k+C>>>0)):[]})},925539:(d,g,v,C,k)=>{r.ra("ReduceMax",d,{keepDims:!!g,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(k>>>0,k+C>>>0)):[]})},925702:(d,g,v,C,k)=>{r.ra("ReduceMin",d,{keepDims:!!g,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(k>>>0,k+C>>>0)):[]})},925865:(d,g,v,C,k)=>{r.ra("ReduceProd",d,{keepDims:!!g,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(k>>>0,k+C>>>0)):[]})},926029:(d,g,v,C,k)=>{r.ra("ReduceSum",d,{keepDims:!!g,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(k>>>0,k+C>>>0)):[]})},926192:(d,g,v,C,k)=>{r.ra("ReduceL1",d,{keepDims:!!g,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(k>>>0,k+C>>>0)):[]})},926354:(d,g,v,C,k)=>{r.ra("ReduceL2",d,{keepDims:!!g,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(k>>>0,k+C>>>0)):[]})},926516:(d,g,v,C,k)=>{r.ra("ReduceLogSum",d,{keepDims:!!g,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(k>>>0,k+C>>>0)):[]})},926682:(d,g,v,C,k)=>{r.ra("ReduceSumSquare",d,{keepDims:!!g,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(k>>>0,k+C>>>0)):[]})},926851:(d,g,v,C,k)=>{r.ra("ReduceLogSumExp",d,{keepDims:!!g,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(k>>>0,k+C>>>0)):[]})},927020:d=>{r.ra("Where",d,void 0)},927073:(d,g,v)=>{r.ra("Transpose",d,{perm:g?Array.from(B.subarray(v>>>0,v+g>>>0)):[]})},927186:(d,g,v,C,k,F,H,le,Q,ie,te,ye,xe,R,se)=>{r.ra("ConvTranspose",d,{format:Q?"NHWC":"NCHW",autoPad:g,dilations:[v],group:C,kernel_shape:[k],pads:[F,H],strides:[le],wIsConst:()=>!!L[ie>>>0],outputPadding:te?Array.from(B.subarray(ye>>>0,ye+te>>>0)):[],outputShape:xe?Array.from(B.subarray(R>>>0,R+xe>>>0)):[],activation:ze(se)})},927600:(d,g,v,C,k,F,H,le,Q,ie,te,ye,xe,R)=>{r.ra("ConvTranspose",d,{format:le?"NHWC":"NCHW",autoPad:g,dilations:Array.from(B.subarray(v>>>0,v+2>>>0)),group:C,kernelShape:Array.from(B.subarray(k>>>0,k+2>>>0)),pads:Array.from(B.subarray(F>>>0,F+4>>>0)),strides:Array.from(B.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!L[Q>>>0],outputPadding:0<ie?Array.from(B.subarray(te>>>0,te+ie>>>0)):[],outputShape:0<ye?Array.from(B.subarray(xe>>>0,xe+ye>>>0)):[],activation:ze(R)})},928157:(d,g,v,C,k,F,H,le,Q,ie,te,ye,xe,R,se)=>{r.ra("ConvTranspose",d,{format:Q?"NHWC":"NCHW",autoPad:g,dilations:[v],group:C,kernel_shape:[k],pads:[F,H],strides:[le],wIsConst:()=>!!L[ie>>>0],outputPadding:te?Array.from(B.subarray(ye>>>0,ye+te>>>0)):[],outputShape:xe?Array.from(B.subarray(R>>>0,R+xe>>>0)):[],activation:ze(se)})},928571:(d,g,v,C,k,F,H,le,Q,ie,te,ye,xe,R)=>{r.ra("ConvTranspose",d,{format:le?"NHWC":"NCHW",autoPad:g,dilations:Array.from(B.subarray(v>>>0,v+2>>>0)),group:C,kernelShape:Array.from(B.subarray(k>>>0,k+2>>>0)),pads:Array.from(B.subarray(F>>>0,F+4>>>0)),strides:Array.from(B.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!L[Q>>>0],outputPadding:0<ie?Array.from(B.subarray(te>>>0,te+ie>>>0)):[],outputShape:0<ye?Array.from(B.subarray(xe>>>0,xe+ye>>>0)):[],activation:ze(R)})},929128:(d,g)=>{r.ra("GlobalAveragePool",d,{format:g?"NHWC":"NCHW"})},929219:(d,g,v,C,k,F,H,le,Q,ie,te,ye,xe,R,se,$e)=>{r.ra("AveragePool",d,{format:$e?"NHWC":"NCHW",auto_pad:g,ceil_mode:v,count_include_pad:C,storage_order:k,dilations:[F,H],kernel_shape:[le,Q],pads:[ie,te,ye,xe],strides:[R,se]})},929503:(d,g)=>{r.ra("GlobalAveragePool",d,{format:g?"NHWC":"NCHW"})},929594:(d,g,v,C,k,F,H,le,Q,ie,te,ye,xe,R,se,$e)=>{r.ra("AveragePool",d,{format:$e?"NHWC":"NCHW",auto_pad:g,ceil_mode:v,count_include_pad:C,storage_order:k,dilations:[F,H],kernel_shape:[le,Q],pads:[ie,te,ye,xe],strides:[R,se]})},929878:(d,g)=>{r.ra("GlobalMaxPool",d,{format:g?"NHWC":"NCHW"})},929965:(d,g,v,C,k,F,H,le,Q,ie,te,ye,xe,R,se,$e)=>{r.ra("MaxPool",d,{format:$e?"NHWC":"NCHW",auto_pad:g,ceil_mode:v,count_include_pad:C,storage_order:k,dilations:[F,H],kernel_shape:[le,Q],pads:[ie,te,ye,xe],strides:[R,se]})},930245:(d,g)=>{r.ra("GlobalMaxPool",d,{format:g?"NHWC":"NCHW"})},930332:(d,g,v,C,k,F,H,le,Q,ie,te,ye,xe,R,se,$e)=>{r.ra("MaxPool",d,{format:$e?"NHWC":"NCHW",auto_pad:g,ceil_mode:v,count_include_pad:C,storage_order:k,dilations:[F,H],kernel_shape:[le,Q],pads:[ie,te,ye,xe],strides:[R,se]})},930612:(d,g,v,C,k)=>{r.ra("Gemm",d,{alpha:g,beta:v,transA:C,transB:k})},930716:d=>{r.ra("MatMul",d,void 0)},930770:(d,g,v,C)=>{r.ra("ArgMax",d,{keepDims:!!g,selectLastIndex:!!v,axis:C})},930878:(d,g,v,C)=>{r.ra("ArgMin",d,{keepDims:!!g,selectLastIndex:!!v,axis:C})},930986:(d,g)=>{r.ra("Softmax",d,{axis:g})},931049:(d,g)=>{r.ra("Concat",d,{axis:g})},931109:(d,g,v,C,k)=>{r.ra("Split",d,{axis:g,numOutputs:v,splitSizes:C?Array.from(B.subarray(k>>>0,k+C>>>0)):[]})},931254:d=>{r.ra("Expand",d,void 0)},931308:(d,g)=>{r.ra("Gather",d,{axis:Number(g)})},931379:(d,g)=>{r.ra("GatherElements",d,{axis:Number(g)})},931458:(d,g,v,C,k,F,H,le,Q,ie,te)=>{r.ra("Resize",d,{antialias:g,axes:v?Array.from(B.subarray(C>>>0,C+v>>>0)):[],coordinateTransformMode:ze(k),cubicCoeffA:F,excludeOutside:H,extrapolationValue:le,keepAspectRatioPolicy:ze(Q),mode:ze(ie),nearestMode:ze(te)})},931809:(d,g,v,C,k,F,H)=>{r.ra("Slice",d,{starts:g?Array.from(B.subarray(v>>>0,v+g>>>0)):[],ends:C?Array.from(B.subarray(k>>>0,k+C>>>0)):[],axes:F?Array.from(B.subarray(H>>>0,H+F>>>0)):[]})},932040:d=>{r.ra("Tile",d,void 0)},932092:(d,g,v)=>{r.ra("LayerNormalization",d,{axis:Number(g),epsilon:Number(v)})},932199:(d,g,v)=>{r.ra("InstanceNormalization",d,{epsilon:g,format:v?"NHWC":"NCHW"})},932313:(d,g,v)=>{r.ra("InstanceNormalization",d,{epsilon:g,format:v?"NHWC":"NCHW"})},932427:d=>{r.ra("Range",d,void 0)},932480:(d,g)=>{r.ra("Einsum",d,{equation:ze(g)})},932561:(d,g,v,C,k)=>{r.ra("Pad",d,{mode:g,value:v,pads:C?Array.from(B.subarray(k>>>0,k+C>>>0)):[]})},932693:(d,g,v,C,k,F)=>{r.ra("BatchNormalization",d,{epsilon:g,momentum:v,spatial:!!k,trainingMode:!!C,format:F?"NHWC":"NCHW"})},932862:(d,g,v,C,k,F)=>{r.ra("BatchNormalization",d,{epsilon:g,momentum:v,spatial:!!k,trainingMode:!!C,format:F?"NHWC":"NCHW"})},933031:(d,g,v)=>{r.ra("CumSum",d,{exclusive:Number(g),reverse:Number(v)})},933128:(d,g,v,C,k,F,H,le,Q)=>{r.ra("Attention",d,{numHeads:g,isUnidirectional:v,maskFilterValue:C,scale:k,doRotary:F,qkvHiddenSizes:H?Array.from(B.subarray(Number(le)>>>0,Number(le)+H>>>0)):[],pastPresentShareBuffer:!!Q})},933400:d=>{r.ra("Gelu",d,void 0)},933452:(d,g,v,C,k,F)=>{r.ra("MultiHeadAttention",d,{numHeads:g,isUnidirectional:v,maskFilterValue:C,scale:k,doRotary:F})},933611:d=>{r.ra("BiasAdd",d,void 0)},933666:d=>{r.ra("BiasSplitGelu",d,void 0)},933727:(d,g)=>{r.ra("SkipLayerNormalization",d,{epsilon:g})},933808:(d,g,v,C,k,F,H,le,Q,ie,te,ye,xe)=>{r.ra("Conv",d,{format:Q?"NHWC":"NCHW",auto_pad:g,dilations:[v],group:C,kernel_shape:[k],pads:F?Array.from(B.subarray(H>>>0,H+F>>>0)):[],strides:[le],w_is_const:()=>!!L[ie>>>0],activation:ze(te),activation_params:ye?Array.from(pe.subarray(xe>>>0,xe+ye>>>0)):[]})},934189:(d,g,v,C,k,F,H,le,Q,ie,te,ye,xe,R,se,$e)=>{r.ra("Conv",d,{format:ye?"NHWC":"NCHW",auto_pad:g,dilations:[v,C],group:k,kernel_shape:[F,H],pads:le?Array.from(B.subarray(Q>>>0,Q+le>>>0)):[],strides:[ie,te],w_is_const:()=>!!L[xe>>>0],activation:ze(R),activation_params:se?Array.from(pe.subarray($e>>>0,$e+se>>>0)):[]})},934591:d=>{r.Ra(d)},934625:(d,g)=>r.Sa(d,g,r.Da.Ta,r.Da.errors),934737:d=>r.Oa(d),934770:d=>r.Qa(d),934802:(d,g,v)=>{r.Ja(d,g,v,!0)},934841:(d,g,v)=>{r.Ja(d,g,v)}};function rt(d){this.name="ExitStatus",this.message=`Program terminated with exit(${d})`,this.status=d}var Pt=d=>{for(;0<d.length;)d.shift()(r)};function Bt(d){this.Ha=d-24,this.Ma=function(g){Y[this.Ha+4>>2>>>0]=g},this.La=function(g){Y[this.Ha+8>>2>>>0]=g},this.Ya=function(g,v){this.Ka(),this.Ma(g),this.La(v)},this.Ka=function(){Y[this.Ha+16>>2>>>0]=0}}var ar=0,kr=0,ut=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,ir=(d,g,v)=>{g>>>=0;var C=g+v;for(v=g;d[v]&&!(v>=C);)++v;if(16<v-g&&d.buffer&&ut)return ut.decode(d.subarray(g,v));for(C="";g<v;){var k=d[g++];if(k&128){var F=d[g++]&63;if((k&224)==192)C+=String.fromCharCode((k&31)<<6|F);else{var H=d[g++]&63;k=(k&240)==224?(k&15)<<12|F<<6|H:(k&7)<<18|F<<12|H<<6|d[g++]&63,65536>k?C+=String.fromCharCode(k):(k-=65536,C+=String.fromCharCode(55296|k>>10,56320|k&1023))}}else C+=String.fromCharCode(k)}return C},ze=(d,g)=>(d>>>=0)?ir(J,d,g):"",Ft=d=>{for(var g=0,v=0;v<d.length;++v){var C=d.charCodeAt(v);127>=C?g++:2047>=C?g+=2:55296<=C&&57343>=C?(g+=4,++v):g+=3}return g},or=(d,g,v,C)=>{if(v>>>=0,!(0<C))return 0;var k=v;C=v+C-1;for(var F=0;F<d.length;++F){var H=d.charCodeAt(F);if(55296<=H&&57343>=H){var le=d.charCodeAt(++F);H=65536+((H&1023)<<10)|le&1023}if(127>=H){if(v>=C)break;g[v++>>>0]=H}else{if(2047>=H){if(v+1>=C)break;g[v++>>>0]=192|H>>6}else{if(65535>=H){if(v+2>=C)break;g[v++>>>0]=224|H>>12}else{if(v+3>=C)break;g[v++>>>0]=240|H>>18,g[v++>>>0]=128|H>>12&63}g[v++>>>0]=128|H>>6&63}g[v++>>>0]=128|H&63}}return g[v>>>0]=0,v-k},_t=d=>d%4===0&&(d%100!==0||d%400===0),Rr=[0,31,60,91,121,152,182,213,244,274,305,335],xt=[0,31,59,90,120,151,181,212,243,273,304,334],qt=d=>{var g=Ft(d)+1,v=Zt(g);return v&&or(d,J,v,g),v},Ct=[],jt=(d,g)=>{Ct.length=0;var v;for(g>>=2;v=J[d++>>>0];)g+=v!=105&g,Ct.push(v==105?B[g>>>0]:ee[g++>>>1]),++g;return Ct},Kt={},sr=()=>{if(!Yt){var d={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:u||"./this.program"},g;for(g in Kt)Kt[g]===void 0?delete d[g]:d[g]=Kt[g];var v=[];for(g in d)v.push(`${g}=${d[g]}`);Yt=v}return Yt},Yt,Pr=[null,[],[]],je=[31,29,31,30,31,30,31,31,30,31,30,31],ur=[31,28,31,30,31,30,31,31,30,31,30,31];function lr(d){var g=Array(Ft(d)+1);return or(d,g,0,g.length),g}function ae(d,g,v,C){function k(R,se,$e){for(R=typeof R=="number"?R.toString():R||"";R.length<se;)R=$e[0]+R;return R}function F(R,se){return k(R,se,"0")}function H(R,se){function $e(vr){return 0>vr?-1:0<vr?1:0}var It;return(It=$e(R.getFullYear()-se.getFullYear()))===0&&(It=$e(R.getMonth()-se.getMonth()))===0&&(It=$e(R.getDate()-se.getDate())),It}function le(R){switch(R.getDay()){case 0:return new Date(R.getFullYear()-1,11,29);case 1:return R;case 2:return new Date(R.getFullYear(),0,3);case 3:return new Date(R.getFullYear(),0,2);case 4:return new Date(R.getFullYear(),0,1);case 5:return new Date(R.getFullYear()-1,11,31);case 6:return new Date(R.getFullYear()-1,11,30)}}function Q(R){var se=R.Ba;for(R=new Date(new Date(R.Ca+1900,0,1).getTime());0<se;){var $e=R.getMonth(),It=(_t(R.getFullYear())?je:ur)[$e];if(se>It-R.getDate())se-=It-R.getDate()+1,R.setDate(1),11>$e?R.setMonth($e+1):(R.setMonth(0),R.setFullYear(R.getFullYear()+1));else{R.setDate(R.getDate()+se);break}}return $e=new Date(R.getFullYear()+1,0,4),se=le(new Date(R.getFullYear(),0,4)),$e=le($e),0>=H(se,R)?0>=H($e,R)?R.getFullYear()+1:R.getFullYear():R.getFullYear()-1}d>>>=0,g>>>=0,v>>>=0,C>>>=0;var ie=B[C+40>>2>>>0];C={Wa:B[C>>2>>>0],Va:B[C+4>>2>>>0],Ea:B[C+8>>2>>>0],Ia:B[C+12>>2>>>0],Fa:B[C+16>>2>>>0],Ca:B[C+20>>2>>>0],wa:B[C+24>>2>>>0],Ba:B[C+28>>2>>>0],$a:B[C+32>>2>>>0],Ua:B[C+36>>2>>>0],Xa:ie?ze(ie):""},v=ze(v),ie={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var te in ie)v=v.replace(new RegExp(te,"g"),ie[te]);var ye="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),xe="January February March April May June July August September October November December".split(" ");ie={"%a":R=>ye[R.wa].substring(0,3),"%A":R=>ye[R.wa],"%b":R=>xe[R.Fa].substring(0,3),"%B":R=>xe[R.Fa],"%C":R=>F((R.Ca+1900)/100|0,2),"%d":R=>F(R.Ia,2),"%e":R=>k(R.Ia,2," "),"%g":R=>Q(R).toString().substring(2),"%G":R=>Q(R),"%H":R=>F(R.Ea,2),"%I":R=>(R=R.Ea,R==0?R=12:12<R&&(R-=12),F(R,2)),"%j":R=>{for(var se=0,$e=0;$e<=R.Fa-1;se+=(_t(R.Ca+1900)?je:ur)[$e++]);return F(R.Ia+se,3)},"%m":R=>F(R.Fa+1,2),"%M":R=>F(R.Va,2),"%n":()=>`
`,"%p":R=>0<=R.Ea&&12>R.Ea?"AM":"PM","%S":R=>F(R.Wa,2),"%t":()=>"	","%u":R=>R.wa||7,"%U":R=>F(Math.floor((R.Ba+7-R.wa)/7),2),"%V":R=>{var se=Math.floor((R.Ba+7-(R.wa+6)%7)/7);if(2>=(R.wa+371-R.Ba-2)%7&&se++,se)se==53&&($e=(R.wa+371-R.Ba)%7,$e==4||$e==3&&_t(R.Ca)||(se=1));else{se=52;var $e=(R.wa+7-R.Ba-1)%7;($e==4||$e==5&&_t(R.Ca%400-1))&&se++}return F(se,2)},"%w":R=>R.wa,"%W":R=>F(Math.floor((R.Ba+7-(R.wa+6)%7)/7),2),"%y":R=>(R.Ca+1900).toString().substring(2),"%Y":R=>R.Ca+1900,"%z":R=>{R=R.Ua;var se=0<=R;return R=Math.abs(R)/60,(se?"+":"-")+("0000"+(R/60*100+R%60)).slice(-4)},"%Z":R=>R.Xa,"%%":()=>"%"},v=v.replace(/%%/g,"\0\0");for(te in ie)v.includes(te)&&(v=v.replace(new RegExp(te,"g"),ie[te](C)));return v=v.replace(/\0\0/g,"%"),te=lr(v),te.length>g?0:(L.set(te,d>>>0),te.length-1)}function St(d){try{d()}catch(g){Le(g)}}function Br(d){var g={},v;for(v in d)(function(C){var k=d[C];g[C]=typeof k=="function"?function(){Dt.push(C);try{return k.apply(null,arguments)}finally{N||(Dt.pop()===C||Le(),nt&&pt===1&&Dt.length===0&&(pt=0,St(br),typeof Fibers<"u"&&Fibers.ab()))}}:k})(v);return g}var pt=0,nt=null,Dr=0,Dt=[],dr={},cr={},Mr=0,Mt=null,zr=[];function Ur(){return new Promise((d,g)=>{Mt={resolve:d,reject:g}})}function Wr(){var d=Zt(65548),g=d+12;Y[d>>2>>>0]=g,Y[d+4>>2>>>0]=g+65536,g=Dt[0];var v=dr[g];return v===void 0&&(v=Mr++,dr[g]=v,cr[v]=g),B[d+8>>2>>>0]=v,d}function Nr(d){if(!N){if(pt===0){var g=!1,v=!1;d((C=0)=>{if(!N&&(Dr=C,g=!0,v)){pt=2,St(()=>Xt(nt)),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.resume(),C=!1;try{var k=(0,A[cr[B[nt+8>>2>>>0]]])()}catch(le){k=le,C=!0}var F=!1;if(!nt){var H=Mt;H&&(Mt=null,(C?H.reject:H.resolve)(k),F=!0)}if(C&&!F)throw k}}),v=!0,g||(pt=1,nt=Wr(),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.pause(),St(()=>yr(nt)))}else pt===2?(pt=0,St(zt),pr(nt),nt=null,zr.forEach(C=>{if(!N)try{if(C(),!E)try{W=W=C=W,E||(r.onExit&&r.onExit(C),N=!0),l(C,new rt(C))}catch(k){k instanceof rt||k=="unwind"||l(1,k)}}catch(k){k instanceof rt||k=="unwind"||l(1,k)}})):Le(`invalid state: ${pt}`);return Dr}}function Vr(d){return Nr(g=>{d().then(g)})}var Hr={n:function(d,g,v){return Vr(async()=>{await r.Pa(d,g,v)})},a:function(d,g,v){throw d>>>=0,new Bt(d).Ya(g>>>0,v>>>0),ar=d,kr++,ar},g:function(){return 0},J:function(){},z:function(){},B:function(){},L:function(){return 0},H:function(){},C:function(){},G:function(){},l:function(){},A:function(){},x:function(){},I:function(){},y:function(){},m:()=>!0,q:function(d,g,v){d=g+2097152>>>0<4194305-!!d?(d>>>0)+4294967296*g:NaN,v>>>=0,d=new Date(1e3*d),B[v>>2>>>0]=d.getUTCSeconds(),B[v+4>>2>>>0]=d.getUTCMinutes(),B[v+8>>2>>>0]=d.getUTCHours(),B[v+12>>2>>>0]=d.getUTCDate(),B[v+16>>2>>>0]=d.getUTCMonth(),B[v+20>>2>>>0]=d.getUTCFullYear()-1900,B[v+24>>2>>>0]=d.getUTCDay(),B[v+28>>2>>>0]=(d.getTime()-Date.UTC(d.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(d,g,v){d=g+2097152>>>0<4194305-!!d?(d>>>0)+4294967296*g:NaN,v>>>=0,d=new Date(1e3*d),B[v>>2>>>0]=d.getSeconds(),B[v+4>>2>>>0]=d.getMinutes(),B[v+8>>2>>>0]=d.getHours(),B[v+12>>2>>>0]=d.getDate(),B[v+16>>2>>>0]=d.getMonth(),B[v+20>>2>>>0]=d.getFullYear()-1900,B[v+24>>2>>>0]=d.getDay(),B[v+28>>2>>>0]=(_t(d.getFullYear())?Rr:xt)[d.getMonth()]+d.getDate()-1|0,B[v+36>>2>>>0]=-(60*d.getTimezoneOffset()),g=new Date(d.getFullYear(),6,1).getTimezoneOffset();var C=new Date(d.getFullYear(),0,1).getTimezoneOffset();B[v+32>>2>>>0]=(g!=C&&d.getTimezoneOffset()==Math.min(C,g))|0},s:function(d){d>>>=0;var g=new Date(B[d+20>>2>>>0]+1900,B[d+16>>2>>>0],B[d+12>>2>>>0],B[d+8>>2>>>0],B[d+4>>2>>>0],B[d>>2>>>0],0),v=B[d+32>>2>>>0],C=g.getTimezoneOffset(),k=new Date(g.getFullYear(),6,1).getTimezoneOffset(),F=new Date(g.getFullYear(),0,1).getTimezoneOffset(),H=Math.min(F,k);return 0>v?B[d+32>>2>>>0]=+(k!=F&&H==C):0<v!=(H==C)&&(k=Math.max(F,k),g.setTime(g.getTime()+6e4*((0<v?H:k)-C))),B[d+24>>2>>>0]=g.getDay(),B[d+28>>2>>>0]=(_t(g.getFullYear())?Rr:xt)[g.getMonth()]+g.getDate()-1|0,B[d>>2>>>0]=g.getSeconds(),B[d+4>>2>>>0]=g.getMinutes(),B[d+8>>2>>>0]=g.getHours(),B[d+12>>2>>>0]=g.getDate(),B[d+16>>2>>>0]=g.getMonth(),B[d+20>>2>>>0]=g.getYear(),d=g.getTime()/1e3,mr((Ze=d,1<=+Math.abs(Ze)?0<Ze?+Math.floor(Ze/4294967296)>>>0:~~+Math.ceil((Ze-+(~~Ze>>>0))/4294967296)>>>0:0)),d>>>0},o:function(){return-52},p:function(){},v:function(d,g,v){function C(Q){return(Q=Q.toTimeString().match(/\(([A-Za-z ]+)\)$/))?Q[1]:"GMT"}v>>>=0;var k=new Date().getFullYear(),F=new Date(k,0,1),H=new Date(k,6,1);k=F.getTimezoneOffset();var le=H.getTimezoneOffset();Y[d>>>0>>2>>>0]=60*Math.max(k,le),B[g>>>0>>2>>>0]=+(k!=le),d=C(F),g=C(H),d=qt(d),g=qt(g),le<k?(Y[v>>2>>>0]=d,Y[v+4>>2>>>0]=g):(Y[v>>2>>>0]=g,Y[v+4>>2>>>0]=d)},e:()=>{Le("")},b:function(d,g,v){return d>>>=0,g=jt(g>>>0,v>>>0),ct[d].apply(null,g)},i:function(d,g,v){return d>>>=0,g=jt(g>>>0,v>>>0),ct[d].apply(null,g)},h:function(){return Date.now()},w:function(){return 4294901760},c:()=>performance.now(),K:function(d,g,v){return g>>>=0,J.copyWithin(d>>>0>>>0,g>>>0,g+(v>>>0)>>>0)},u:function(d){d>>>=0;var g=J.length;if(4294901760<d)return!1;for(var v=1;4>=v;v*=2){var C=g*(1+.2/v);C=Math.min(C,d+100663296);var k=Math;C=Math.max(d,C);e:{k=k.min.call(k,4294901760,C+(65536-C%65536)%65536)-M.buffer.byteLength+65535>>>16;try{M.grow(k),ve();var F=1;break e}catch{}F=void 0}if(F)return!0}return!1},D:function(d,g){d>>>=0,g>>>=0;var v=0;return sr().forEach(function(C,k){var F=g+v;for(k=Y[d+4*k>>2>>>0]=F,F=0;F<C.length;++F)L[k++>>0>>>0]=C.charCodeAt(F);L[k>>0>>>0]=0,v+=C.length+1}),0},E:function(d,g){d>>>=0,g>>>=0;var v=sr();Y[d>>2>>>0]=v.length;var C=0;return v.forEach(function(k){C+=k.length+1}),Y[g>>2>>>0]=C,0},f:()=>52,k:function(){return 52},t:function(){return 70},j:function(d,g,v,C){g>>>=0,v>>>=0,C>>>=0;for(var k=0,F=0;F<v;F++){var H=Y[g>>2>>>0],le=Y[g+4>>2>>>0];g+=8;for(var Q=0;Q<le;Q++){var ie=J[H+Q>>>0],te=Pr[d];ie===0||ie===10?((d===1?$:S)(ir(te,0)),te.length=0):te.push(ie)}k+=le}return Y[C>>2>>>0]=k,0},F:ae,d:function(d,g,v,C){return ae(d>>>0,g>>>0,v>>>0,C>>>0)}};(function(){function d(v){if(v=v.exports,v=Br(v),A=v=Et(v),M=A.M,ve(),be.unshift(A.N),ce--,r.monitorRunDependencies&&r.monitorRunDependencies(ce),ce==0&&(We!==null&&(clearInterval(We),We=null),Pe)){var C=Pe;Pe=null,C()}return v}var g={a:Hr};if(ce++,r.monitorRunDependencies&&r.monitorRunDependencies(ce),r.instantiateWasm)try{return r.instantiateWasm(g,d)}catch(v){S("Module.instantiateWasm callback failed with error: "+v),n(v)}return Ge(g,function(v){d(v.instance)}).catch(n),{}})(),r._OrtInit=(d,g)=>(r._OrtInit=A.O)(d,g),r._OrtGetLastError=(d,g)=>(r._OrtGetLastError=A.P)(d,g),r._OrtCreateSessionOptions=(d,g,v,C,k,F,H,le,Q,ie)=>(r._OrtCreateSessionOptions=A.Q)(d,g,v,C,k,F,H,le,Q,ie),r._OrtAppendExecutionProvider=(d,g)=>(r._OrtAppendExecutionProvider=A.R)(d,g),r._OrtAddFreeDimensionOverride=(d,g,v)=>(r._OrtAddFreeDimensionOverride=A.S)(d,g,v),r._OrtAddSessionConfigEntry=(d,g,v)=>(r._OrtAddSessionConfigEntry=A.T)(d,g,v),r._OrtReleaseSessionOptions=d=>(r._OrtReleaseSessionOptions=A.U)(d),r._OrtCreateSession=(d,g,v)=>(r._OrtCreateSession=A.V)(d,g,v),r._OrtReleaseSession=d=>(r._OrtReleaseSession=A.W)(d),r._OrtGetInputOutputCount=(d,g,v)=>(r._OrtGetInputOutputCount=A.X)(d,g,v),r._OrtGetInputName=(d,g)=>(r._OrtGetInputName=A.Y)(d,g),r._OrtGetOutputName=(d,g)=>(r._OrtGetOutputName=A.Z)(d,g),r._OrtFree=d=>(r._OrtFree=A._)(d),r._OrtCreateTensor=(d,g,v,C,k,F)=>(r._OrtCreateTensor=A.$)(d,g,v,C,k,F),r._OrtGetTensorData=(d,g,v,C,k)=>(r._OrtGetTensorData=A.aa)(d,g,v,C,k),r._OrtReleaseTensor=d=>(r._OrtReleaseTensor=A.ba)(d),r._OrtCreateRunOptions=(d,g,v,C)=>(r._OrtCreateRunOptions=A.ca)(d,g,v,C),r._OrtAddRunConfigEntry=(d,g,v)=>(r._OrtAddRunConfigEntry=A.da)(d,g,v),r._OrtReleaseRunOptions=d=>(r._OrtReleaseRunOptions=A.ea)(d),r._OrtCreateBinding=d=>(r._OrtCreateBinding=A.fa)(d),r._OrtBindInput=(d,g,v)=>(r._OrtBindInput=A.ga)(d,g,v),r._OrtBindOutput=(d,g,v,C)=>(r._OrtBindOutput=A.ha)(d,g,v,C),r._OrtClearBoundOutputs=d=>(r._OrtClearBoundOutputs=A.ia)(d),r._OrtReleaseBinding=d=>(r._OrtReleaseBinding=A.ja)(d),r._OrtRunWithBinding=(d,g,v,C,k)=>(r._OrtRunWithBinding=A.ka)(d,g,v,C,k),r._OrtRun=(d,g,v,C,k,F,H,le)=>(r._OrtRun=A.la)(d,g,v,C,k,F,H,le),r._OrtEndProfiling=d=>(r._OrtEndProfiling=A.ma)(d),r._JsepOutput=(d,g,v)=>(r._JsepOutput=A.na)(d,g,v),r._JsepGetNodeName=d=>(r._JsepGetNodeName=A.oa)(d);var Zt=r._malloc=d=>(Zt=r._malloc=A.pa)(d),pr=r._free=d=>(pr=r._free=A.qa)(d),mr=d=>(mr=A.sa)(d),fr=()=>(fr=A.ta)(),hr=d=>(hr=A.ua)(d),gr=d=>(gr=A.va)(d),yr=d=>(yr=A.xa)(d),br=()=>(br=A.ya)(),Xt=d=>(Xt=A.za)(d),zt=()=>(zt=A.Aa)();r.___start_em_js=934874,r.___stop_em_js=935035;function Et(d){d=Object.assign({},d);var g=C=>()=>C()>>>0,v=C=>k=>C(k)>>>0;return d.__errno_location=g(d.__errno_location),d.malloc=v(d.malloc),d.stackSave=g(d.stackSave),d.stackAlloc=v(d.stackAlloc),d}r.stackAlloc=gr,r.stackSave=fr,r.stackRestore=hr,r.UTF8ToString=ze,r.stringToUTF8=(d,g,v)=>or(d,J,g,v),r.lengthBytesUTF8=Ft;var Ut;Pe=function d(){Ut||wr(),Ut||(Pe=d)};function wr(){function d(){if(!Ut&&(Ut=!0,r.calledRun=!0,!N)){if(Pt(be),a(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),r.postRun)for(typeof r.postRun=="function"&&(r.postRun=[r.postRun]);r.postRun.length;){var g=r.postRun.shift();Ie.unshift(g)}Pt(Ie)}}if(!(0<ce)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)fe();Pt(Z),0<ce||(r.setStatus?(r.setStatus("Running..."),setTimeout(function(){setTimeout(function(){r.setStatus("")},1),d()},1)):d())}}if(r.preInit)for(typeof r.preInit=="function"&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.pop()();return wr(),t.ready}})();typeof Si=="object"&&typeof Yn=="object"?Yn.exports=xi:typeof define=="function"&&define.amd&&define([],()=>xi)});var Ci=Qt(()=>{});var Ei=Qt(()=>{});var Ai={};Nt(Ai,{cpus:()=>Yl});var Yl,Ti=j(()=>{Yl=void 0});var Ri=Qt((ki,Zn)=>{"use strict";var Oi=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return ve.buffer!=ce.buffer&&he(),ce}function a(){return ve.buffer!=ce.buffer&&he(),We}function n(){return ve.buffer!=ce.buffer&&he(),Pe}function o(){return ve.buffer!=ce.buffer&&he(),Le}function u(){return ve.buffer!=ce.buffer&&he(),G}function l(){return ve.buffer!=ce.buffer&&he(),X}var i=t,c,m;i.ready=new Promise((s,p)=>{c=s,m=p}),i.jsepInit=(s,p,y,x,O,D,V,oe)=>{i.Qb=s,i.xb=p,i.zb=y,i.kb=x,i.yb=O,i.Ea=D,i.Ab=V,i.Bb=oe,p=(re,ne,ue)=>(...Se)=>{let Ae=mt,P=ne?.();Se=re(...Se);let me=ne?.();return P!==me&&(re=me,ue(P),ne=ue=null),mt!=Ae?Bl():Se},y=re=>async(...ne)=>{try{if(i.bb)throw Error("Session already started");let ue=i.bb={Fb:ne[0],errors:[]},Se=await re(...ne);if(i.bb!==ue)throw Error("Session mismatch");s.flush();let Ae=ue.errors;if(0<Ae.length){let P=await Promise.all(Ae);if(P=P.filter(me=>me),0<P.length)throw Error(P.join(`
`))}return Se}finally{i.bb=null}},i._OrtRun=y(p(i._OrtRun,()=>i._OrtRun,re=>i._OrtRun=re)),i._OrtRunWithBinding=y(p(i._OrtRunWithBinding,()=>i._OrtRunWithBinding,re=>i._OrtRunWithBinding=re)),i._OrtBindInput=p(i._OrtBindInput,()=>i._OrtBindInput,re=>i._OrtBindInput=re),i.jsepRegisterBuffer=(re,ne,ue,Se)=>s.registerBuffer(re,ne,ue,Se),i.jsepUnregisterBuffers=re=>{s.unregisterBuffers(re)},i.jsepGetBuffer=re=>s.getBuffer(re),i.jsepCreateDownloader=(re,ne,ue)=>s.createDownloader(re,ne,ue)};var f=Object.assign({},i),h="./this.program",w=(s,p)=>{throw p},b=typeof window=="object",_=typeof importScripts=="function",I=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",$=i.ENVIRONMENT_IS_PTHREAD||!1,S="";function T(s){return i.locateFile?i.locateFile(s,S):S+s}var E,M,A;if(I){var N=(qn(),Tt(Fn)),W=(Kn(),Tt(jn));S=_?W.dirname(S)+"/":__dirname+"/",E=(p,y)=>(p=p.startsWith("file://")?new URL(p):W.normalize(p),N.readFileSync(p,y?void 0:"utf8")),A=p=>(p=E(p,!0),p.buffer||(p=new Uint8Array(p)),p),M=(p,y,x,O=!0)=>{p=p.startsWith("file://")?new URL(p):W.normalize(p),N.readFile(p,O?void 0:"utf8",(D,V)=>{D?x(D):y(O?V.buffer:V)})},!i.thisProgram&&1<process.argv.length&&(h=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),w=(p,y)=>{throw process.exitCode=p,y},i.inspect=()=>"[Emscripten Module object]";let s;try{s=Ci()}catch(p){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),p}global.Worker=s.Worker}else(b||_)&&(_?S=self.location.href:typeof document<"u"&&document.currentScript&&(S=document.currentScript.src),typeof e<"u"&&e&&(S=e),S.indexOf("blob:")!==0?S=S.substr(0,S.replace(/[?#].*/,"").lastIndexOf("/")+1):S="",I||(E=s=>{var p=new XMLHttpRequest;return p.open("GET",s,!1),p.send(null),p.responseText},_&&(A=s=>{var p=new XMLHttpRequest;return p.open("GET",s,!1),p.responseType="arraybuffer",p.send(null),new Uint8Array(p.response)}),M=(s,p,y)=>{var x=new XMLHttpRequest;x.open("GET",s,!0),x.responseType="arraybuffer",x.onload=()=>{x.status==200||x.status==0&&x.response?p(x.response):y()},x.onerror=y,x.send(null)}));I&&typeof performance>"u"&&(global.performance=Ei().performance);var L=console.log.bind(console),J=console.error.bind(console);I&&(L=(...s)=>N.writeSync(1,s.join(" ")+`
`),J=(...s)=>N.writeSync(2,s.join(" ")+`
`));var B=i.print||L,Y=i.printErr||J;Object.assign(i,f),f=null,i.thisProgram&&(h=i.thisProgram),i.quit&&(w=i.quit);var pe;i.wasmBinary&&(pe=i.wasmBinary);var ee=i.noExitRuntime||!0;typeof WebAssembly!="object"&&ut("no native wasm support detected");var ve,Z,be,Ie=!1,fe,ce,We,Pe,Le,G,X;function he(){var s=ve.buffer;i.HEAP8=ce=new Int8Array(s),i.HEAP16=new Int16Array(s),i.HEAP32=Pe=new Int32Array(s),i.HEAPU8=We=new Uint8Array(s),i.HEAPU16=new Uint16Array(s),i.HEAPU32=Le=new Uint32Array(s),i.HEAPF32=G=new Float32Array(s),i.HEAPF64=X=new Float64Array(s)}var qe=i.INITIAL_MEMORY||16777216;if(5242880<=qe||ut("INITIAL_MEMORY should be larger than STACK_SIZE, was "+qe+"! (STACK_SIZE=5242880)"),$)ve=i.wasmMemory;else if(i.wasmMemory)ve=i.wasmMemory;else if(ve=new WebAssembly.Memory({initial:qe/65536,maximum:65536,shared:!0}),!(ve.buffer instanceof SharedArrayBuffer))throw Y("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),I&&Y("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");he(),qe=ve.buffer.byteLength;var Je=[],De=[],Ge=[],Ze=0;function ct(){return ee||0<Ze}var rt=0,Pt=null,Bt=null;function ar(){rt++,i.monitorRunDependencies&&i.monitorRunDependencies(rt)}function kr(){if(rt--,i.monitorRunDependencies&&i.monitorRunDependencies(rt),rt==0&&(Pt!==null&&(clearInterval(Pt),Pt=null),Bt)){var s=Bt;Bt=null,s()}}function ut(s){throw i.onAbort&&i.onAbort(s),s="Aborted("+s+")",Y(s),Ie=!0,fe=1,s=new WebAssembly.RuntimeError(s+". Build with -sASSERTIONS for more info."),m(s),s}function ir(s){return s.startsWith("data:application/octet-stream;base64,")}var ze;ze="ort-wasm-simd-threaded.wasm",ir(ze)||(ze=T(ze));function Ft(s){if(s==ze&&pe)return new Uint8Array(pe);if(A)return A(s);throw"both async and sync fetching of the wasm failed"}function or(s){if(!pe&&(b||_)){if(typeof fetch=="function"&&!s.startsWith("file://"))return fetch(s,{credentials:"same-origin"}).then(p=>{if(!p.ok)throw"failed to load wasm binary file at '"+s+"'";return p.arrayBuffer()}).catch(()=>Ft(s));if(M)return new Promise((p,y)=>{M(s,x=>p(new Uint8Array(x)),y)})}return Promise.resolve().then(()=>Ft(s))}function _t(s,p,y){return or(s).then(x=>WebAssembly.instantiate(x,p)).then(x=>x).then(y,x=>{Y("failed to asynchronously prepare wasm: "+x),ut(x)})}function Rr(s,p){var y=ze;return pe||typeof WebAssembly.instantiateStreaming!="function"||ir(y)||y.startsWith("file://")||I||typeof fetch!="function"?_t(y,s,p):fetch(y,{credentials:"same-origin"}).then(x=>WebAssembly.instantiateStreaming(x,s).then(p,function(O){return Y("wasm streaming compile failed: "+O),Y("falling back to ArrayBuffer instantiation"),_t(y,s,p)}))}var xt,qt={924476:s=>{i.Ea("Abs",s,void 0)},924527:s=>{i.Ea("Neg",s,void 0)},924578:s=>{i.Ea("Floor",s,void 0)},924631:s=>{i.Ea("Ceil",s,void 0)},924683:s=>{i.Ea("Reciprocal",s,void 0)},924741:s=>{i.Ea("Sqrt",s,void 0)},924793:s=>{i.Ea("Exp",s,void 0)},924844:s=>{i.Ea("Erf",s,void 0)},924895:s=>{i.Ea("Sigmoid",s,void 0)},924950:s=>{i.Ea("Log",s,void 0)},925001:s=>{i.Ea("Sin",s,void 0)},925052:s=>{i.Ea("Cos",s,void 0)},925103:s=>{i.Ea("Tan",s,void 0)},925154:s=>{i.Ea("Asin",s,void 0)},925206:s=>{i.Ea("Acos",s,void 0)},925258:s=>{i.Ea("Atan",s,void 0)},925310:s=>{i.Ea("Sinh",s,void 0)},925362:s=>{i.Ea("Cosh",s,void 0)},925414:s=>{i.Ea("Asinh",s,void 0)},925467:s=>{i.Ea("Acosh",s,void 0)},925520:s=>{i.Ea("Atanh",s,void 0)},925573:s=>{i.Ea("Tanh",s,void 0)},925625:s=>{i.Ea("Not",s,void 0)},925676:(s,p,y)=>{i.Ea("Clip",s,{min:p,max:y})},925745:s=>{i.Ea("Clip",s,void 0)},925797:(s,p)=>{i.Ea("Elu",s,{alpha:p})},925855:s=>{i.Ea("Relu",s,void 0)},925907:(s,p)=>{i.Ea("LeakyRelu",s,{alpha:p})},925971:(s,p)=>{i.Ea("ThresholdedRelu",s,{alpha:p})},926041:(s,p)=>{i.Ea("Cast",s,{to:p})},926099:s=>{i.Ea("Add",s,void 0)},926150:s=>{i.Ea("Sub",s,void 0)},926201:s=>{i.Ea("Mul",s,void 0)},926252:s=>{i.Ea("Div",s,void 0)},926303:s=>{i.Ea("Pow",s,void 0)},926354:s=>{i.Ea("Equal",s,void 0)},926407:s=>{i.Ea("Greater",s,void 0)},926462:s=>{i.Ea("GreaterOrEqual",s,void 0)},926524:s=>{i.Ea("Less",s,void 0)},926576:s=>{i.Ea("LessOrEqual",s,void 0)},926635:(s,p,y,x,O)=>{i.Ea("ReduceMean",s,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:x?Array.from(n().subarray(O>>>0,O+x>>>0)):[]})},926799:(s,p,y,x,O)=>{i.Ea("ReduceMax",s,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:x?Array.from(n().subarray(O>>>0,O+x>>>0)):[]})},926962:(s,p,y,x,O)=>{i.Ea("ReduceMin",s,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:x?Array.from(n().subarray(O>>>0,O+x>>>0)):[]})},927125:(s,p,y,x,O)=>{i.Ea("ReduceProd",s,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:x?Array.from(n().subarray(O>>>0,O+x>>>0)):[]})},927289:(s,p,y,x,O)=>{i.Ea("ReduceSum",s,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:x?Array.from(n().subarray(O>>>0,O+x>>>0)):[]})},927452:(s,p,y,x,O)=>{i.Ea("ReduceL1",s,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:x?Array.from(n().subarray(O>>>0,O+x>>>0)):[]})},927614:(s,p,y,x,O)=>{i.Ea("ReduceL2",s,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:x?Array.from(n().subarray(O>>>0,O+x>>>0)):[]})},927776:(s,p,y,x,O)=>{i.Ea("ReduceLogSum",s,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:x?Array.from(n().subarray(O>>>0,O+x>>>0)):[]})},927942:(s,p,y,x,O)=>{i.Ea("ReduceSumSquare",s,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:x?Array.from(n().subarray(O>>>0,O+x>>>0)):[]})},928111:(s,p,y,x,O)=>{i.Ea("ReduceLogSumExp",s,{keepDims:!!p,noopWithEmptyAxes:!!y,axes:x?Array.from(n().subarray(O>>>0,O+x>>>0)):[]})},928280:s=>{i.Ea("Where",s,void 0)},928333:(s,p,y)=>{i.Ea("Transpose",s,{perm:p?Array.from(n().subarray(y>>>0,y+p>>>0)):[]})},928446:(s,p,y,x,O,D,V,oe,re,ne,ue,Se,Ae,P,me)=>{i.Ea("ConvTranspose",s,{format:re?"NHWC":"NCHW",autoPad:p,dilations:[y],group:x,kernel_shape:[O],pads:[D,V],strides:[oe],wIsConst:()=>!!r()[ne>>>0],outputPadding:ue?Array.from(n().subarray(Se>>>0,Se+ue>>>0)):[],outputShape:Ae?Array.from(n().subarray(P>>>0,P+Ae>>>0)):[],activation:je(me)})},928860:(s,p,y,x,O,D,V,oe,re,ne,ue,Se,Ae,P)=>{i.Ea("ConvTranspose",s,{format:oe?"NHWC":"NCHW",autoPad:p,dilations:Array.from(n().subarray(y>>>0,y+2>>>0)),group:x,kernelShape:Array.from(n().subarray(O>>>0,O+2>>>0)),pads:Array.from(n().subarray(D>>>0,D+4>>>0)),strides:Array.from(n().subarray(V>>>0,V+2>>>0)),wIsConst:()=>!!r()[re>>>0],outputPadding:0<ne?Array.from(n().subarray(ue>>>0,ue+ne>>>0)):[],outputShape:0<Se?Array.from(n().subarray(Ae>>>0,Ae+Se>>>0)):[],activation:je(P)})},929417:(s,p,y,x,O,D,V,oe,re,ne,ue,Se,Ae,P,me)=>{i.Ea("ConvTranspose",s,{format:re?"NHWC":"NCHW",autoPad:p,dilations:[y],group:x,kernel_shape:[O],pads:[D,V],strides:[oe],wIsConst:()=>!!r()[ne>>>0],outputPadding:ue?Array.from(n().subarray(Se>>>0,Se+ue>>>0)):[],outputShape:Ae?Array.from(n().subarray(P>>>0,P+Ae>>>0)):[],activation:je(me)})},929831:(s,p,y,x,O,D,V,oe,re,ne,ue,Se,Ae,P)=>{i.Ea("ConvTranspose",s,{format:oe?"NHWC":"NCHW",autoPad:p,dilations:Array.from(n().subarray(y>>>0,y+2>>>0)),group:x,kernelShape:Array.from(n().subarray(O>>>0,O+2>>>0)),pads:Array.from(n().subarray(D>>>0,D+4>>>0)),strides:Array.from(n().subarray(V>>>0,V+2>>>0)),wIsConst:()=>!!r()[re>>>0],outputPadding:0<ne?Array.from(n().subarray(ue>>>0,ue+ne>>>0)):[],outputShape:0<Se?Array.from(n().subarray(Ae>>>0,Ae+Se>>>0)):[],activation:je(P)})},930388:(s,p)=>{i.Ea("GlobalAveragePool",s,{format:p?"NHWC":"NCHW"})},930479:(s,p,y,x,O,D,V,oe,re,ne,ue,Se,Ae,P,me,Ce)=>{i.Ea("AveragePool",s,{format:Ce?"NHWC":"NCHW",auto_pad:p,ceil_mode:y,count_include_pad:x,storage_order:O,dilations:[D,V],kernel_shape:[oe,re],pads:[ne,ue,Se,Ae],strides:[P,me]})},930763:(s,p)=>{i.Ea("GlobalAveragePool",s,{format:p?"NHWC":"NCHW"})},930854:(s,p,y,x,O,D,V,oe,re,ne,ue,Se,Ae,P,me,Ce)=>{i.Ea("AveragePool",s,{format:Ce?"NHWC":"NCHW",auto_pad:p,ceil_mode:y,count_include_pad:x,storage_order:O,dilations:[D,V],kernel_shape:[oe,re],pads:[ne,ue,Se,Ae],strides:[P,me]})},931138:(s,p)=>{i.Ea("GlobalMaxPool",s,{format:p?"NHWC":"NCHW"})},931225:(s,p,y,x,O,D,V,oe,re,ne,ue,Se,Ae,P,me,Ce)=>{i.Ea("MaxPool",s,{format:Ce?"NHWC":"NCHW",auto_pad:p,ceil_mode:y,count_include_pad:x,storage_order:O,dilations:[D,V],kernel_shape:[oe,re],pads:[ne,ue,Se,Ae],strides:[P,me]})},931505:(s,p)=>{i.Ea("GlobalMaxPool",s,{format:p?"NHWC":"NCHW"})},931592:(s,p,y,x,O,D,V,oe,re,ne,ue,Se,Ae,P,me,Ce)=>{i.Ea("MaxPool",s,{format:Ce?"NHWC":"NCHW",auto_pad:p,ceil_mode:y,count_include_pad:x,storage_order:O,dilations:[D,V],kernel_shape:[oe,re],pads:[ne,ue,Se,Ae],strides:[P,me]})},931872:(s,p,y,x,O)=>{i.Ea("Gemm",s,{alpha:p,beta:y,transA:x,transB:O})},931976:s=>{i.Ea("MatMul",s,void 0)},932030:(s,p,y,x)=>{i.Ea("ArgMax",s,{keepDims:!!p,selectLastIndex:!!y,axis:x})},932138:(s,p,y,x)=>{i.Ea("ArgMin",s,{keepDims:!!p,selectLastIndex:!!y,axis:x})},932246:(s,p)=>{i.Ea("Softmax",s,{axis:p})},932309:(s,p)=>{i.Ea("Concat",s,{axis:p})},932369:(s,p,y,x,O)=>{i.Ea("Split",s,{axis:p,numOutputs:y,splitSizes:x?Array.from(n().subarray(O>>>0,O+x>>>0)):[]})},932514:s=>{i.Ea("Expand",s,void 0)},932568:(s,p)=>{i.Ea("Gather",s,{axis:Number(p)})},932639:(s,p)=>{i.Ea("GatherElements",s,{axis:Number(p)})},932718:(s,p,y,x,O,D,V,oe,re,ne,ue)=>{i.Ea("Resize",s,{antialias:p,axes:y?Array.from(n().subarray(x>>>0,x+y>>>0)):[],coordinateTransformMode:je(O),cubicCoeffA:D,excludeOutside:V,extrapolationValue:oe,keepAspectRatioPolicy:je(re),mode:je(ne),nearestMode:je(ue)})},933069:(s,p,y,x,O,D,V)=>{i.Ea("Slice",s,{starts:p?Array.from(n().subarray(y>>>0,y+p>>>0)):[],ends:x?Array.from(n().subarray(O>>>0,O+x>>>0)):[],axes:D?Array.from(n().subarray(V>>>0,V+D>>>0)):[]})},933300:s=>{i.Ea("Tile",s,void 0)},933352:(s,p,y)=>{i.Ea("LayerNormalization",s,{axis:Number(p),epsilon:Number(y)})},933459:(s,p,y)=>{i.Ea("InstanceNormalization",s,{epsilon:p,format:y?"NHWC":"NCHW"})},933573:(s,p,y)=>{i.Ea("InstanceNormalization",s,{epsilon:p,format:y?"NHWC":"NCHW"})},933687:s=>{i.Ea("Range",s,void 0)},933740:(s,p)=>{i.Ea("Einsum",s,{equation:je(p)})},933821:(s,p,y,x,O)=>{i.Ea("Pad",s,{mode:p,value:y,pads:x?Array.from(n().subarray(O>>>0,O+x>>>0)):[]})},933953:(s,p,y,x,O,D)=>{i.Ea("BatchNormalization",s,{epsilon:p,momentum:y,spatial:!!O,trainingMode:!!x,format:D?"NHWC":"NCHW"})},934122:(s,p,y,x,O,D)=>{i.Ea("BatchNormalization",s,{epsilon:p,momentum:y,spatial:!!O,trainingMode:!!x,format:D?"NHWC":"NCHW"})},934291:(s,p,y)=>{i.Ea("CumSum",s,{exclusive:Number(p),reverse:Number(y)})},934388:(s,p,y,x,O,D,V,oe,re)=>{i.Ea("Attention",s,{numHeads:p,isUnidirectional:y,maskFilterValue:x,scale:O,doRotary:D,qkvHiddenSizes:V?Array.from(n().subarray(Number(oe)>>>0,Number(oe)+V>>>0)):[],pastPresentShareBuffer:!!re})},934660:s=>{i.Ea("Gelu",s,void 0)},934712:(s,p,y,x,O,D)=>{i.Ea("MultiHeadAttention",s,{numHeads:p,isUnidirectional:y,maskFilterValue:x,scale:O,doRotary:D})},934871:s=>{i.Ea("BiasAdd",s,void 0)},934926:s=>{i.Ea("BiasSplitGelu",s,void 0)},934987:(s,p)=>{i.Ea("SkipLayerNormalization",s,{epsilon:p})},935068:(s,p,y,x,O,D,V,oe,re,ne,ue,Se,Ae)=>{i.Ea("Conv",s,{format:re?"NHWC":"NCHW",auto_pad:p,dilations:[y],group:x,kernel_shape:[O],pads:D?Array.from(n().subarray(V>>>0,V+D>>>0)):[],strides:[oe],w_is_const:()=>!!r()[ne>>>0],activation:je(ue),activation_params:Se?Array.from(u().subarray(Ae>>>0,Ae+Se>>>0)):[]})},935449:(s,p,y,x,O,D,V,oe,re,ne,ue,Se,Ae,P,me,Ce)=>{i.Ea("Conv",s,{format:Se?"NHWC":"NCHW",auto_pad:p,dilations:[y,x],group:O,kernel_shape:[D,V],pads:oe?Array.from(n().subarray(re>>>0,re+oe>>>0)):[],strides:[ne,ue],w_is_const:()=>!!r()[Ae>>>0],activation:je(P),activation_params:me?Array.from(u().subarray(Ce>>>0,Ce+me>>>0)):[]})},935851:s=>{i.Ab(s)},935885:(s,p)=>i.Bb(s,p,i.bb.Fb,i.bb.errors),935997:s=>i.xb(s),936030:s=>i.zb(s),936062:(s,p,y)=>{i.kb(s,p,y,!0)},936101:(s,p,y)=>{i.kb(s,p,y)}};function Ct(s){this.name="ExitStatus",this.message=`Program terminated with exit(${s})`,this.status=s}function jt(s){s.terminate(),s.onmessage=()=>{}}function Kt(s){(s=ae.Qa[s])||ut(),ae.Eb(s)}function sr(s){var p=ae.ub();if(!p)return 6;ae.Za.push(p),ae.Qa[s.Xa]=p,p.Xa=s.Xa;var y={cmd:"run",start_routine:s.Gb,arg:s.sb,pthread_ptr:s.Xa};return I&&p.unref(),p.postMessage(y,s.Mb),0}var Yt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Pr=(s,p,y)=>{p>>>=0;var x=p+y;for(y=p;s[y]&&!(y>=x);)++y;if(16<y-p&&s.buffer&&Yt)return Yt.decode(s.buffer instanceof SharedArrayBuffer?s.slice(p,y):s.subarray(p,y));for(x="";p<y;){var O=s[p++];if(O&128){var D=s[p++]&63;if((O&224)==192)x+=String.fromCharCode((O&31)<<6|D);else{var V=s[p++]&63;O=(O&240)==224?(O&15)<<12|D<<6|V:(O&7)<<18|D<<12|V<<6|s[p++]&63,65536>O?x+=String.fromCharCode(O):(O-=65536,x+=String.fromCharCode(55296|O>>10,56320|O&1023))}}else x+=String.fromCharCode(O)}return x},je=(s,p)=>(s>>>=0)?Pr(a(),s,p):"";function ur(s){if($)return H(1,1,s);fe=s,ct()||(ae.Hb(),i.onExit&&i.onExit(s),Ie=!0),w(s,new Ct(s))}var lr=s=>{if(fe=s,$)throw Br(s),"unwind";ur(s)},ae={Ya:[],Za:[],ob:[],Qa:{},gb:function(){$?ae.wb():ae.vb()},vb:function(){for(var s=i.numThreads;s--;)ae.jb();Je.unshift(()=>{ar(),ae.Cb(()=>kr())})},wb:function(){ae.receiveObjectTransfer=ae.Db,ae.threadInitTLS=ae.nb,ae.setExitStatus=ae.mb,ee=!1},mb:function(s){fe=s},Sb:["$terminateWorker"],Hb:function(){for(var s of ae.Za)jt(s);for(s of ae.Ya)jt(s);ae.Ya=[],ae.Za=[],ae.Qa=[]},Eb:function(s){var p=s.Xa;delete ae.Qa[p],ae.Ya.push(s),ae.Za.splice(ae.Za.indexOf(s),1),s.Xa=0,Dn(p)},Db:function(){},nb:function(){ae.ob.forEach(s=>s())},lb:s=>new Promise(p=>{s.onmessage=D=>{D=D.data;var V=D.cmd;if(D.targetThread&&D.targetThread!=Fr()){var oe=ae.Qa[D.Rb];oe?oe.postMessage(D,D.transferList):Y('Internal error! Worker sent a message "'+V+'" to target pthread '+D.targetThread+", but that thread no longer exists!")}else V==="checkMailbox"?zt():V==="spawnThread"?sr(D):V==="cleanupThread"?Kt(D.thread):V==="killThread"?(D=D.thread,V=ae.Qa[D],delete ae.Qa[D],jt(V),Dn(D),ae.Za.splice(ae.Za.indexOf(V),1),V.Xa=0):V==="cancelThread"?ae.Qa[D.thread].postMessage({cmd:"cancel"}):V==="loaded"?(s.loaded=!0,I&&!s.Xa&&s.unref(),p(s)):V==="alert"?alert("Thread "+D.threadId+": "+D.text):D.target==="setimmediate"?s.postMessage(D):V==="callHandler"?i[D.handler](...D.args):V&&Y("worker sent an unknown command "+V)},s.onerror=D=>{throw Y("worker sent an error! "+D.filename+":"+D.lineno+": "+D.message),D},I&&(s.on("message",function(D){s.onmessage({data:D})}),s.on("error",function(D){s.onerror(D)}));var y=[],x=["onExit","onAbort","print","printErr"],O;for(O of x)i.hasOwnProperty(O)&&y.push(O);s.postMessage({cmd:"load",handlers:y,urlOrBlob:i.mainScriptUrlOrBlob||e,wasmMemory:ve,wasmModule:be})}),Cb:function(s){if($)return s();Promise.all(ae.Ya.map(ae.lb)).then(s)},jb:function(){var s=T("ort-wasm-simd-threaded.worker.js");s=new Worker(s),ae.Ya.push(s)},ub:function(){return ae.Ya.length==0&&(ae.jb(),ae.lb(ae.Ya[0])),ae.Ya.pop()}};i.PThread=ae;var St=s=>{for(;0<s.length;)s.shift()(i)};i.establishStackSpace=function(){var s=Fr(),p=n()[s+52>>2>>>0];s=n()[s+56>>2>>>0],Va(p,p-s),qr(p)};function Br(s){if($)return H(2,0,s);lr(s)}i.invokeEntryPoint=function(s,p){s=Ha.apply(null,[s,p]),ct()?ae.mb(s):Mn(s)};function pt(s){this.fb=s-24,this.rb=function(p){o()[this.fb+4>>2>>>0]=p},this.qb=function(p){o()[this.fb+8>>2>>>0]=p},this.gb=function(p,y){this.pb(),this.rb(p),this.qb(y)},this.pb=function(){o()[this.fb+16>>2>>>0]=0}}var nt=0,Dr=0;function Dt(s,p,y,x){return $?H(3,1,s,p,y,x):dr(s,p,y,x)}function dr(s,p,y,x){if(s>>>=0,p>>>=0,y>>>=0,x>>>=0,typeof SharedArrayBuffer>"u")return Y("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var O=[];return $&&O.length===0?Dt(s,p,y,x):(s={Gb:y,Xa:s,sb:x,Mb:O},$?(s.Ob="spawnThread",postMessage(s,O),0):sr(s))}function cr(s,p,y){return $?H(4,1,s,p,y):0}function Mr(s,p){if($)return H(5,1,s,p)}var Mt=s=>{for(var p=0,y=0;y<s.length;++y){var x=s.charCodeAt(y);127>=x?p++:2047>=x?p+=2:55296<=x&&57343>=x?(p+=4,++y):p+=3}return p},zr=(s,p,y,x)=>{if(y>>>=0,!(0<x))return 0;var O=y;x=y+x-1;for(var D=0;D<s.length;++D){var V=s.charCodeAt(D);if(55296<=V&&57343>=V){var oe=s.charCodeAt(++D);V=65536+((V&1023)<<10)|oe&1023}if(127>=V){if(y>=x)break;p[y++>>>0]=V}else{if(2047>=V){if(y+1>=x)break;p[y++>>>0]=192|V>>6}else{if(65535>=V){if(y+2>=x)break;p[y++>>>0]=224|V>>12}else{if(y+3>=x)break;p[y++>>>0]=240|V>>18,p[y++>>>0]=128|V>>12&63}p[y++>>>0]=128|V>>6&63}p[y++>>>0]=128|V&63}}return p[y>>>0]=0,y-O},Ur=(s,p,y)=>zr(s,a(),p,y);function Wr(s,p){if($)return H(6,1,s,p)}function Nr(s,p,y){if($)return H(7,1,s,p,y)}function Vr(s,p,y){return $?H(8,1,s,p,y):0}function Hr(s,p){if($)return H(9,1,s,p)}function Zt(s,p,y){if($)return H(10,1,s,p,y)}function pr(s,p,y,x){if($)return H(11,1,s,p,y,x)}function mr(s,p,y,x){if($)return H(12,1,s,p,y,x)}function fr(s,p,y,x){if($)return H(13,1,s,p,y,x)}function hr(s){if($)return H(14,1,s)}function gr(s,p){if($)return H(15,1,s,p)}function yr(s,p,y){if($)return H(16,1,s,p,y)}var br=s=>{if(!Ie)try{if(s(),!ct())try{$?Mn(fe):lr(fe)}catch(p){p instanceof Ct||p=="unwind"||w(1,p)}}catch(p){p instanceof Ct||p=="unwind"||w(1,p)}};function Xt(s){s>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),s>>2,s).value.then(zt),s+=128,Atomics.store(n(),s>>2,1))}i.__emscripten_thread_mailbox_await=Xt;function zt(){var s=Fr();s&&(Xt(s),br(()=>Wa()))}i.checkMailbox=zt;var Et=s=>s%4===0&&(s%100!==0||s%400===0),Ut=[0,31,60,91,121,152,182,213,244,274,305,335],wr=[0,31,59,90,120,151,181,212,243,273,304,334];function d(s,p,y,x,O,D,V,oe){return $?H(17,1,s,p,y,x,O,D,V,oe):-52}function g(s,p,y,x,O,D,V){if($)return H(18,1,s,p,y,x,O,D,V)}var v=s=>{var p=Mt(s)+1,y=Bn(p);return y&&Ur(s,y,p),y},C=[],k=(s,p)=>{C.length=0;var y;for(p>>=2;y=a()[s++>>>0];)p+=y!=105&p,C.push(y==105?n()[p>>>0]:l()[p++>>>1]),++p;return C},F=s=>{var p=zn();return s=s(),qr(p),s};function H(s,p){var y=arguments.length-2,x=arguments;return F(()=>{for(var O=Un(8*y),D=O>>3,V=0;V<y;V++){var oe=x[2+V];l()[D+V>>>0]=oe}return Ua(s,y,O,p)})}var le=[],Q={},ie=()=>{if(!te){var s={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:h||"./this.program"},p;for(p in Q)Q[p]===void 0?delete s[p]:s[p]=Q[p];var y=[];for(p in s)y.push(`${p}=${s[p]}`);te=y}return te},te;function ye(s,p){if($)return H(19,1,s,p);s>>>=0,p>>>=0;var y=0;return ie().forEach(function(x,O){var D=p+y;for(O=o()[s+4*O>>2>>>0]=D,D=0;D<x.length;++D)r()[O++>>0>>>0]=x.charCodeAt(D);r()[O>>0>>>0]=0,y+=x.length+1}),0}function xe(s,p){if($)return H(20,1,s,p);s>>>=0,p>>>=0;var y=ie();o()[s>>2>>>0]=y.length;var x=0;return y.forEach(function(O){x+=O.length+1}),o()[p>>2>>>0]=x,0}function R(s){return $?H(21,1,s):52}function se(s,p,y,x){return $?H(22,1,s,p,y,x):52}function $e(s,p,y,x,O){return $?H(23,1,s,p,y,x,O):70}var It=[null,[],[]];function vr(s,p,y,x){if($)return H(24,1,s,p,y,x);p>>>=0,y>>>=0,x>>>=0;for(var O=0,D=0;D<y;D++){var V=o()[p>>2>>>0],oe=o()[p+4>>2>>>0];p+=8;for(var re=0;re<oe;re++){var ne=a()[V+re>>>0],ue=It[s];ne===0||ne===10?((s===1?B:Y)(Pr(ue,0)),ue.length=0):ue.push(ne)}O+=oe}return o()[x>>2>>>0]=O,0}var Oa=[31,29,31,30,31,30,31,31,30,31,30,31],ka=[31,28,31,30,31,30,31,31,30,31,30,31];function Tl(s){var p=Array(Mt(s)+1);return zr(s,p,0,p.length),p}var Ol=(s,p)=>{r().set(s,p>>>0)};function Ra(s,p,y,x){function O(P,me,Ce){for(P=typeof P=="number"?P.toString():P||"";P.length<me;)P=Ce[0]+P;return P}function D(P,me){return O(P,me,"0")}function V(P,me){function Ce(Ka){return 0>Ka?-1:0<Ka?1:0}var Wt;return(Wt=Ce(P.getFullYear()-me.getFullYear()))===0&&(Wt=Ce(P.getMonth()-me.getMonth()))===0&&(Wt=Ce(P.getDate()-me.getDate())),Wt}function oe(P){switch(P.getDay()){case 0:return new Date(P.getFullYear()-1,11,29);case 1:return P;case 2:return new Date(P.getFullYear(),0,3);case 3:return new Date(P.getFullYear(),0,2);case 4:return new Date(P.getFullYear(),0,1);case 5:return new Date(P.getFullYear()-1,11,31);case 6:return new Date(P.getFullYear()-1,11,30)}}function re(P){var me=P.$a;for(P=new Date(new Date(P.ab+1900,0,1).getTime());0<me;){var Ce=P.getMonth(),Wt=(Et(P.getFullYear())?Oa:ka)[Ce];if(me>Wt-P.getDate())me-=Wt-P.getDate()+1,P.setDate(1),11>Ce?P.setMonth(Ce+1):(P.setMonth(0),P.setFullYear(P.getFullYear()+1));else{P.setDate(P.getDate()+me);break}}return Ce=new Date(P.getFullYear()+1,0,4),me=oe(new Date(P.getFullYear(),0,4)),Ce=oe(Ce),0>=V(me,P)?0>=V(Ce,P)?P.getFullYear()+1:P.getFullYear():P.getFullYear()-1}s>>>=0,p>>>=0,y>>>=0,x>>>=0;var ne=n()[x+40>>2>>>0];x={Kb:n()[x>>2>>>0],Jb:n()[x+4>>2>>>0],cb:n()[x+8>>2>>>0],ib:n()[x+12>>2>>>0],eb:n()[x+16>>2>>>0],ab:n()[x+20>>2>>>0],Wa:n()[x+24>>2>>>0],$a:n()[x+28>>2>>>0],Tb:n()[x+32>>2>>>0],Ib:n()[x+36>>2>>>0],Lb:ne?je(ne):""},y=je(y),ne={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ue in ne)y=y.replace(new RegExp(ue,"g"),ne[ue]);var Se="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Ae="January February March April May June July August September October November December".split(" ");ne={"%a":P=>Se[P.Wa].substring(0,3),"%A":P=>Se[P.Wa],"%b":P=>Ae[P.eb].substring(0,3),"%B":P=>Ae[P.eb],"%C":P=>D((P.ab+1900)/100|0,2),"%d":P=>D(P.ib,2),"%e":P=>O(P.ib,2," "),"%g":P=>re(P).toString().substring(2),"%G":P=>re(P),"%H":P=>D(P.cb,2),"%I":P=>(P=P.cb,P==0?P=12:12<P&&(P-=12),D(P,2)),"%j":P=>{for(var me=0,Ce=0;Ce<=P.eb-1;me+=(Et(P.ab+1900)?Oa:ka)[Ce++]);return D(P.ib+me,3)},"%m":P=>D(P.eb+1,2),"%M":P=>D(P.Jb,2),"%n":()=>`
`,"%p":P=>0<=P.cb&&12>P.cb?"AM":"PM","%S":P=>D(P.Kb,2),"%t":()=>"	","%u":P=>P.Wa||7,"%U":P=>D(Math.floor((P.$a+7-P.Wa)/7),2),"%V":P=>{var me=Math.floor((P.$a+7-(P.Wa+6)%7)/7);if(2>=(P.Wa+371-P.$a-2)%7&&me++,me)me==53&&(Ce=(P.Wa+371-P.$a)%7,Ce==4||Ce==3&&Et(P.ab)||(me=1));else{me=52;var Ce=(P.Wa+7-P.$a-1)%7;(Ce==4||Ce==5&&Et(P.ab%400-1))&&me++}return D(me,2)},"%w":P=>P.Wa,"%W":P=>D(Math.floor((P.$a+7-(P.Wa+6)%7)/7),2),"%y":P=>(P.ab+1900).toString().substring(2),"%Y":P=>P.ab+1900,"%z":P=>{P=P.Ib;var me=0<=P;return P=Math.abs(P)/60,(me?"+":"-")+("0000"+(P/60*100+P%60)).slice(-4)},"%Z":P=>P.Lb,"%%":()=>"%"},y=y.replace(/%%/g,"\0\0");for(ue in ne)y.includes(ue)&&(y=y.replace(new RegExp(ue,"g"),ne[ue](x)));return y=y.replace(/\0\0/g,"%"),ue=Tl(y),ue.length>p?0:(Ol(ue,s),ue.length-1)}function Lr(s){try{s()}catch(p){ut(p)}}function kl(s){var p={},y;for(y in s)(function(x){var O=s[x];p[x]=typeof O=="function"?function(){Gr.push(x);try{return O.apply(null,arguments)}finally{Ie||(Gr.pop()===x||ut(),mt&&At===1&&Gr.length===0&&(At=0,Ze+=1,Lr(Ga),typeof Fibers<"u"&&Fibers.Ub()))}}:O})(y);return p}var At=0,mt=null,Pa=0,Gr=[],Ba={},Da={},Rl=0,Pn=null,Pl=[];function Bl(){return new Promise((s,p)=>{Pn={resolve:s,reject:p}})}function Dl(){var s=Bn(65548),p=s+12;o()[s>>2>>>0]=p,o()[s+4>>2>>>0]=p+65536,p=Gr[0];var y=Ba[p];return y===void 0&&(y=Rl++,Ba[p]=y,Da[y]=p),p=y,n()[s+8>>2>>>0]=p,s}function Ml(){var s=n()[mt+8>>2>>>0];return s=Z[Da[s]],--Ze,s()}function zl(s){if(!Ie){if(At===0){var p=!1,y=!1;s((x=0)=>{if(!Ie&&(Pa=x,p=!0,y)){At=2,Lr(()=>Fa(mt)),typeof Browser<"u"&&Browser.hb.tb&&Browser.hb.resume(),x=!1;try{var O=Ml()}catch(oe){O=oe,x=!0}var D=!1;if(!mt){var V=Pn;V&&(Pn=null,(x?V.reject:V.resolve)(O),D=!0)}if(x&&!D)throw O}}),y=!0,p||(At=1,mt=Dl(),typeof Browser<"u"&&Browser.hb.tb&&Browser.hb.pause(),Lr(()=>La(mt)))}else At===2?(At=0,Lr(qa),Ma(mt),mt=null,Pl.forEach(x=>br(x))):ut(`invalid state: ${At}`);return Pa}}function Ul(s){return zl(p=>{s().then(p)})}ae.gb();var Wl=[null,ur,Br,Dt,cr,Mr,Wr,Nr,Vr,Hr,Zt,pr,mr,fr,hr,gr,yr,d,g,ye,xe,R,se,$e,vr],Nl={r:function(s,p,y){return Ul(async()=>{await i.yb(s,p,y)})},b:function(s,p,y){throw s>>>=0,new pt(s).gb(p>>>0,y>>>0),nt=s,Dr++,nt},O:function(s){za(s>>>0,!_,1,!b,131072,!1),ae.nb()},l:function(s){s>>>=0,$?postMessage({cmd:"cleanupThread",thread:s}):Kt(s)},I:dr,i:cr,U:Mr,E:Wr,G:Nr,V:Vr,S:Hr,K:Zt,R:pr,p:mr,F:fr,C:hr,T:gr,D:yr,q:()=>!0,A:function(s,p){s>>>=0,s==p>>>0?setTimeout(()=>zt()):$?postMessage({targetThread:s,cmd:"checkMailbox"}):(s=ae.Qa[s])&&s.postMessage({cmd:"checkMailbox"})},M:function(){return-1},N:Xt,X:function(s){I&&ae.Qa[s>>>0].ref()},u:function(s,p,y){s=p+2097152>>>0<4194305-!!s?(s>>>0)+4294967296*p:NaN,y>>>=0,s=new Date(1e3*s),n()[y>>2>>>0]=s.getUTCSeconds(),n()[y+4>>2>>>0]=s.getUTCMinutes(),n()[y+8>>2>>>0]=s.getUTCHours(),n()[y+12>>2>>>0]=s.getUTCDate(),n()[y+16>>2>>>0]=s.getUTCMonth(),n()[y+20>>2>>>0]=s.getUTCFullYear()-1900,n()[y+24>>2>>>0]=s.getUTCDay(),s=(s.getTime()-Date.UTC(s.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[y+28>>2>>>0]=s},v:function(s,p,y){s=p+2097152>>>0<4194305-!!s?(s>>>0)+4294967296*p:NaN,y>>>=0,s=new Date(1e3*s),n()[y>>2>>>0]=s.getSeconds(),n()[y+4>>2>>>0]=s.getMinutes(),n()[y+8>>2>>>0]=s.getHours(),n()[y+12>>2>>>0]=s.getDate(),n()[y+16>>2>>>0]=s.getMonth(),n()[y+20>>2>>>0]=s.getFullYear()-1900,n()[y+24>>2>>>0]=s.getDay(),p=(Et(s.getFullYear())?Ut:wr)[s.getMonth()]+s.getDate()-1|0,n()[y+28>>2>>>0]=p,n()[y+36>>2>>>0]=-(60*s.getTimezoneOffset()),p=new Date(s.getFullYear(),6,1).getTimezoneOffset();var x=new Date(s.getFullYear(),0,1).getTimezoneOffset();s=(p!=x&&s.getTimezoneOffset()==Math.min(x,p))|0,n()[y+32>>2>>>0]=s},w:function(s){s>>>=0;var p=new Date(n()[s+20>>2>>>0]+1900,n()[s+16>>2>>>0],n()[s+12>>2>>>0],n()[s+8>>2>>>0],n()[s+4>>2>>>0],n()[s>>2>>>0],0),y=n()[s+32>>2>>>0],x=p.getTimezoneOffset(),O=new Date(p.getFullYear(),6,1).getTimezoneOffset(),D=new Date(p.getFullYear(),0,1).getTimezoneOffset(),V=Math.min(D,O);return 0>y?n()[s+32>>2>>>0]=+(O!=D&&V==x):0<y!=(V==x)&&(O=Math.max(D,O),p.setTime(p.getTime()+6e4*((0<y?V:O)-x))),n()[s+24>>2>>>0]=p.getDay(),y=(Et(p.getFullYear())?Ut:wr)[p.getMonth()]+p.getDate()-1|0,n()[s+28>>2>>>0]=y,n()[s>>2>>>0]=p.getSeconds(),n()[s+4>>2>>>0]=p.getMinutes(),n()[s+8>>2>>>0]=p.getHours(),n()[s+12>>2>>>0]=p.getDate(),n()[s+16>>2>>>0]=p.getMonth(),n()[s+20>>2>>>0]=p.getYear(),s=p.getTime()/1e3,Na((xt=s,1<=+Math.abs(xt)?0<xt?+Math.floor(xt/4294967296)>>>0:~~+Math.ceil((xt-+(~~xt>>>0))/4294967296)>>>0:0)),s>>>0},s:d,t:g,z:function(s,p,y){function x(ne){return(ne=ne.toTimeString().match(/\(([A-Za-z ]+)\)$/))?ne[1]:"GMT"}s>>>=0,p>>>=0,y>>>=0;var O=new Date().getFullYear(),D=new Date(O,0,1),V=new Date(O,6,1);O=D.getTimezoneOffset();var oe=V.getTimezoneOffset(),re=Math.max(O,oe);o()[s>>2>>>0]=60*re,n()[p>>2>>>0]=+(O!=oe),s=x(D),p=x(V),s=v(s),p=v(p),oe<O?(o()[y>>2>>>0]=s,o()[y+4>>2>>>0]=p):(o()[y>>2>>>0]=p,o()[y+4>>2>>>0]=s)},d:()=>{ut("")},c:function(s,p,y){return s>>>=0,p=k(p>>>0,y>>>0),qt[s].apply(null,p)},k:function(s,p,y){return s>>>=0,p=k(p>>>0,y>>>0),qt[s].apply(null,p)},m:function(){},j:function(){return Date.now()},W:()=>{throw Ze+=1,"unwind"},B:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),g:function(){return I?(Ti(),Tt(Ai)).cpus().length:navigator.hardwareConcurrency},L:function(s,p,y,x){for(ae.Pb=p>>>0,le.length=y,p=x>>>0>>3,x=0;x<y;x++)le[x]=l()[p+x>>>0];return(0>s?qt[-s-1]:Wl[s]).apply(null,le)},y:function(s){s>>>=0;var p=a().length;if(s<=p||4294901760<s)return!1;for(var y=1;4>=y;y*=2){var x=p*(1+.2/y);x=Math.min(x,s+100663296);var O=Math;x=Math.max(s,x);e:{O=O.min.call(O,4294901760,x+(65536-x%65536)%65536)-ve.buffer.byteLength+65535>>>16;try{ve.grow(O),he();var D=1;break e}catch{}D=void 0}if(D)return!0}return!1},P:ye,Q:xe,H:lr,h:R,o:se,x:$e,n:vr,a:ve||i.wasmMemory,J:Ra,e:function(s,p,y,x){return Ra(s>>>0,p>>>0,y>>>0,x>>>0)}};(function(){function s(y,x){return y=y.exports,y=kl(y),Z=y=Vl(y),ae.ob.push(Z.Da),De.unshift(Z.Y),be=x,kr(),y}var p={a:Nl};if(ar(),i.instantiateWasm)try{return i.instantiateWasm(p,s)}catch(y){Y("Module.instantiateWasm callback failed with error: "+y),m(y)}return Rr(p,function(y){s(y.instance,y.module)}).catch(m),{}})(),i._OrtInit=(s,p)=>(i._OrtInit=Z.Z)(s,p),i._OrtGetLastError=(s,p)=>(i._OrtGetLastError=Z._)(s,p),i._OrtCreateSessionOptions=(s,p,y,x,O,D,V,oe,re,ne)=>(i._OrtCreateSessionOptions=Z.$)(s,p,y,x,O,D,V,oe,re,ne),i._OrtAppendExecutionProvider=(s,p)=>(i._OrtAppendExecutionProvider=Z.aa)(s,p),i._OrtAddFreeDimensionOverride=(s,p,y)=>(i._OrtAddFreeDimensionOverride=Z.ba)(s,p,y),i._OrtAddSessionConfigEntry=(s,p,y)=>(i._OrtAddSessionConfigEntry=Z.ca)(s,p,y),i._OrtReleaseSessionOptions=s=>(i._OrtReleaseSessionOptions=Z.da)(s),i._OrtCreateSession=(s,p,y)=>(i._OrtCreateSession=Z.ea)(s,p,y),i._OrtReleaseSession=s=>(i._OrtReleaseSession=Z.fa)(s),i._OrtGetInputOutputCount=(s,p,y)=>(i._OrtGetInputOutputCount=Z.ga)(s,p,y),i._OrtGetInputName=(s,p)=>(i._OrtGetInputName=Z.ha)(s,p),i._OrtGetOutputName=(s,p)=>(i._OrtGetOutputName=Z.ia)(s,p),i._OrtFree=s=>(i._OrtFree=Z.ja)(s),i._OrtCreateTensor=(s,p,y,x,O,D)=>(i._OrtCreateTensor=Z.ka)(s,p,y,x,O,D),i._OrtGetTensorData=(s,p,y,x,O)=>(i._OrtGetTensorData=Z.la)(s,p,y,x,O),i._OrtReleaseTensor=s=>(i._OrtReleaseTensor=Z.ma)(s),i._OrtCreateRunOptions=(s,p,y,x)=>(i._OrtCreateRunOptions=Z.na)(s,p,y,x),i._OrtAddRunConfigEntry=(s,p,y)=>(i._OrtAddRunConfigEntry=Z.oa)(s,p,y),i._OrtReleaseRunOptions=s=>(i._OrtReleaseRunOptions=Z.pa)(s),i._OrtCreateBinding=s=>(i._OrtCreateBinding=Z.qa)(s),i._OrtBindInput=(s,p,y)=>(i._OrtBindInput=Z.ra)(s,p,y),i._OrtBindOutput=(s,p,y,x)=>(i._OrtBindOutput=Z.sa)(s,p,y,x),i._OrtClearBoundOutputs=s=>(i._OrtClearBoundOutputs=Z.ta)(s),i._OrtReleaseBinding=s=>(i._OrtReleaseBinding=Z.ua)(s),i._OrtRunWithBinding=(s,p,y,x,O)=>(i._OrtRunWithBinding=Z.va)(s,p,y,x,O),i._OrtRun=(s,p,y,x,O,D,V,oe)=>(i._OrtRun=Z.wa)(s,p,y,x,O,D,V,oe),i._OrtEndProfiling=s=>(i._OrtEndProfiling=Z.xa)(s),i._JsepOutput=(s,p,y)=>(i._JsepOutput=Z.ya)(s,p,y),i._JsepGetNodeName=s=>(i._JsepGetNodeName=Z.za)(s);var Fr=i._pthread_self=()=>(Fr=i._pthread_self=Z.Aa)(),Bn=i._malloc=s=>(Bn=i._malloc=Z.Ba)(s),Ma=i._free=s=>(Ma=i._free=Z.Ca)(s);i.__emscripten_tls_init=()=>(i.__emscripten_tls_init=Z.Da)();var za=i.__emscripten_thread_init=(s,p,y,x,O,D)=>(za=i.__emscripten_thread_init=Z.Fa)(s,p,y,x,O,D);i.__emscripten_thread_crashed=()=>(i.__emscripten_thread_crashed=Z.Ga)();var Ua=(s,p,y,x)=>(Ua=Z.Ha)(s,p,y,x),Dn=s=>(Dn=Z.Ia)(s),Mn=i.__emscripten_thread_exit=s=>(Mn=i.__emscripten_thread_exit=Z.Ja)(s),Wa=i.__emscripten_check_mailbox=()=>(Wa=i.__emscripten_check_mailbox=Z.Ka)(),Na=s=>(Na=Z.La)(s),Va=(s,p)=>(Va=Z.Ma)(s,p),zn=()=>(zn=Z.Na)(),qr=s=>(qr=Z.Oa)(s),Un=s=>(Un=Z.Pa)(s),Ha=i.dynCall_ii=(s,p)=>(Ha=i.dynCall_ii=Z.Ra)(s,p),La=s=>(La=Z.Sa)(s),Ga=()=>(Ga=Z.Ta)(),Fa=s=>(Fa=Z.Ua)(s),qa=()=>(qa=Z.Va)();i.___start_em_js=936134,i.___stop_em_js=936295;function Vl(s){s=Object.assign({},s);var p=x=>()=>x()>>>0,y=x=>O=>x(O)>>>0;return s.__errno_location=p(s.__errno_location),s.pthread_self=p(s.pthread_self),s.malloc=y(s.malloc),s.stackSave=p(s.stackSave),s.stackAlloc=y(s.stackAlloc),s}i.keepRuntimeAlive=ct,i.wasmMemory=ve,i.stackAlloc=Un,i.stackSave=zn,i.stackRestore=qr,i.UTF8ToString=je,i.stringToUTF8=Ur,i.lengthBytesUTF8=Mt,i.ExitStatus=Ct,i.PThread=ae;var jr;Bt=function s(){jr||ja(),jr||(Bt=s)};function ja(){function s(){if(!jr&&(jr=!0,i.calledRun=!0,!Ie)&&($||St(De),c(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),!$)){if(i.postRun)for(typeof i.postRun=="function"&&(i.postRun=[i.postRun]);i.postRun.length;){var p=i.postRun.shift();Ge.unshift(p)}St(Ge)}}if(!(0<rt))if($)c(i),$||St(De),startWorker(i);else{if(i.preRun)for(typeof i.preRun=="function"&&(i.preRun=[i.preRun]);i.preRun.length;)Je.unshift(i.preRun.shift());St(Je),0<rt||(i.setStatus?(i.setStatus("Running..."),setTimeout(function(){setTimeout(function(){i.setStatus("")},1),s()},1)):s())}}if(i.preInit)for(typeof i.preInit=="function"&&(i.preInit=[i.preInit]);0<i.preInit.length;)i.preInit.pop()();return ja(),t.ready}})();typeof ki=="object"&&typeof Zn=="object"?Zn.exports=Oi:typeof define=="function"&&define.amd&&define([],()=>Oi)});var Pi=Qt((Wm,Zl)=>{Zl.exports='"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(Module.__embind_initialize_bindings(),initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err(`worker.js received unknown command ${e.data.cmd}`),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\n'});var Di,Xl,Xn,Qn,rn,Bi,Ql,Jl,ed,Mi,Me,Jt=j(()=>{"use strict";Di=Ii();Xl=Ri(),Qn=!1,rn=!1,Bi=!1,Ql=()=>{try{return typeof SharedArrayBuffer>"u"?!1:(typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch{return!1}},Jl=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},ed=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Mi=async e=>{if(Qn)return Promise.resolve();if(rn)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Bi)throw new Error("previous call to 'initializeWebAssembly()' failed.");rn=!0;let t=e.initTimeout,r=e.numThreads,a=e.simd,n=r>1&&Ql(),o=a&&Jl(),u=e.wasmPaths,l=typeof u=="string"?u:void 0,i=ed(o,n),c=typeof u=="object"?u[i]:void 0,m=!1,f=[];if(t>0&&f.push(new Promise(h=>{setTimeout(()=>{m=!0,h()},t)})),f.push(new Promise((h,w)=>{let b=n?Xl:Di,_={locateFile:(I,$)=>{if(n&&I.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Pi()],{type:"text/javascript"}));if(I.endsWith(".wasm")){if(c)return c;let S=l??$;return i==="ort-wasm-simd.wasm"?S+"ort-wasm-simd.jsep.wasm":i==="ort-wasm-simd-threaded.wasm"?S+"ort-wasm-simd-threaded.jsep.wasm":S+i}return $+I}};if(n)if(_.numThreads=r,typeof Blob>"u")_.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let I=`var ortWasmThreaded=${b.toString()};`;_.mainScriptUrlOrBlob=new Blob([I],{type:"text/javascript"})}b(_).then(I=>{rn=!1,Qn=!0,Xn=I,h()},I=>{rn=!1,Bi=!0,w(I)})})),await Promise.race(f),m)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Me=()=>{if(Qn&&Xn)return Xn;throw new Error("WebAssembly is not initialized yet.")}});var Ue,_r,Oe,nn=j(()=>{"use strict";Jt();Ue=(e,t)=>{let r=Me(),a=r.lengthBytesUTF8(e)+1,n=r._malloc(a);return r.stringToUTF8(e,n,a),t.push(n),n},_r=(e,t,r,a)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,o])=>{let u=t?t+n:n;if(typeof o=="object")_r(o,u+".",r,a);else if(typeof o=="string"||typeof o=="number")a(u,o.toString());else if(typeof o=="boolean")a(u,o?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof o}`)})},Oe=e=>{let t=Me(),r=t.stackSave();try{let a=t.stackAlloc(8);t._OrtGetLastError(a,a+4);let n=t.HEAP32[a/4],o=t.HEAPU32[a/4+1],u=o?t.UTF8ToString(o):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}}});var zi,Ui=j(()=>{"use strict";Jt();nn();zi=e=>{let t=Me(),r=0,a=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let o=0;return e?.tag!==void 0&&(o=Ue(e.tag,a)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,o),r===0&&Oe("Can't create run options."),e?.extra!==void 0&&_r(e.extra,"",new WeakSet,(u,l)=>{let i=Ue(u,a),c=Ue(l,a);t._OrtAddRunConfigEntry(r,i,c)!==0&&Oe(`Can't set a run config entry: ${u} - ${l}.`)}),[r,a]}catch(o){throw r!==0&&t._OrtReleaseRunOptions(r),a.forEach(u=>t._free(u)),o}}});var td,rd,nd,ad,Wi,Ni=j(()=>{"use strict";Jt();nn();td=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},rd=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},nd=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},ad=(e,t,r)=>{for(let a of t){let n=typeof a=="string"?a:a.name;switch(n){case"xnnpack":n="XNNPACK";break;case"webnn":if(n="WEBNN",typeof a!="string"){let u=a;if(u?.deviceType){let l=Ue("deviceType",r),i=Ue(u.deviceType,r);Me()._OrtAddSessionConfigEntry(e,l,i)!==0&&Oe(`Can't set a session config entry: 'deviceType' - ${u.deviceType}.`)}if(u?.numThreads){let l=u.numThreads;(typeof l!="number"||!Number.isInteger(l)||l<0)&&(l=0);let i=Ue("numThreads",r),c=Ue(l.toString(),r);Me()._OrtAddSessionConfigEntry(e,i,c)!==0&&Oe(`Can't set a session config entry: 'numThreads' - ${u.numThreads}.`)}if(u?.powerPreference){let l=Ue("powerPreference",r),i=Ue(u.powerPreference,r);Me()._OrtAddSessionConfigEntry(e,l,i)!==0&&Oe(`Can't set a session config entry: 'powerPreference' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof a!="string"){let u=a;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${u.preferredLayout}`);let l=Ue("preferredLayout",r),i=Ue(u.preferredLayout,r);Me()._OrtAddSessionConfigEntry(e,l,i)!==0&&Oe(`Can't set a session config entry: 'preferredLayout' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let o=Ue(n,r);Me()._OrtAppendExecutionProvider(e,o)!==0&&Oe(`Can't append execution provider: ${n}.`)}},Wi=e=>{let t=Me(),r=0,a=[],n=e||{};nd(n);try{let o=td(n.graphOptimizationLevel??"all"),u=rd(n.executionMode??"sequential"),l=typeof n.logId=="string"?Ue(n.logId,a):0,i=n.logSeverityLevel??2;if(!Number.isInteger(i)||i<0||i>4)throw new Error(`log serverity level is not valid: ${i}`);let c=n.logVerbosityLevel??0;if(!Number.isInteger(c)||c<0||c>4)throw new Error(`log verbosity level is not valid: ${c}`);let m=typeof n.optimizedModelFilePath=="string"?Ue(n.optimizedModelFilePath,a):0;if(r=t._OrtCreateSessionOptions(o,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,l,i,c,m),r===0&&Oe("Can't create session options."),n.executionProviders&&ad(r,n.executionProviders,a),n.freeDimensionOverrides)for(let[f,h]of Object.entries(n.freeDimensionOverrides)){if(typeof f!="string")throw new Error(`free dimension override name must be a string: ${f}`);if(typeof h!="number"||!Number.isInteger(h)||h<0)throw new Error(`free dimension override value must be a non-negative integer: ${h}`);let w=Ue(f,a);t._OrtAddFreeDimensionOverride(r,w,h)!==0&&Oe(`Can't set a free dimension override: ${f} - ${h}.`)}return n.extra!==void 0&&_r(n.extra,"",new WeakSet,(f,h)=>{let w=Ue(f,a),b=Ue(h,a);t._OrtAddSessionConfigEntry(r,w,b)!==0&&Oe(`Can't set a session config entry: ${f} - ${h}.`)}),[r,a]}catch(o){throw r!==0&&t._OrtReleaseSessionOptions(r),a.forEach(u=>t._free(u)),o}}});var Jn,et,xr,an,Sr,on,ea,Be=j(()=>{"use strict";Jn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},et=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},xr=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],an=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Sr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},on=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",ea=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var id,od,Vi,Hi,Li,sd,Re,kt=j(()=>{"use strict";Be();id=["V","I","W","E","F"],od=(e,t)=>{console.log(`[${id[e]},${new Date().toISOString()}]${t}`)},Li=(e,t)=>{Vi=e,Hi=t},sd=(e,t)=>{let r=Sr(e),a=Sr(Vi);r>=a&&od(r,typeof t=="function"?t():t)},Re=(...e)=>{Hi&&sd(...e)}});var Gi,Fi=j(()=>{"use strict";Be();Gi=(e,t)=>new(an(t))(e)});var sn=j(()=>{"use strict"});var un,ud,qi,ra,ta,Ki,Yi=j(()=>{"use strict";kt();sn();un=e=>Math.ceil(e/16)*16,ud=1,qi=()=>ud++,ra=async(e,t,r,a)=>{let n=un(r),o=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,o,0,n),e.flush(),await o.mapAsync(GPUMapMode.READ);let l=o.getMappedRange();if(a){let i=a();return i.set(new Uint8Array(l,0,r)),i}else return new Uint8Array(l.slice(0,r))}finally{o.destroy()}},ta=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let a=r.buffer,n=r.byteOffset,o=r.byteLength,u=un(o),l=this.storageCache.get(t);if(!l)throw new Error("gpu data for uploading does not exist");if(l.originalSize!==o)throw new Error(`inconsistent data size. gpu data size=${l.originalSize}, data size=${o}`);let i=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),c=i.getMappedRange();new Uint8Array(c).set(new Uint8Array(a,n,o)),i.unmap();let m=this.backend.getCommandEncoder();this.backend.endComputePass(),m.copyBufferToBuffer(i,0,l.gpuData.buffer,0,u),Re("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(i)}memcpy(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(a.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let o=un(a.originalSize),u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(a.gpuData.buffer,0,n.gpuData.buffer,0,o)}registerExternalBuffer(t,r,a){let n;if(a){if(n=this.externalBuffers.get(a),n===void 0)throw new Error("previous buffer is not registered");if(t===a)return Re("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;this.externalBuffers.delete(a)}else n=qi();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Re("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Re("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let a=un(t),n,o=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(o||u){let i=o?this.freeBuffers:this.freeUniformBuffers,c=i.get(a);c||(c=[],i.set(a,c)),c.length>0?n=c.pop():n=this.backend.device.createBuffer({size:a,usage:r})}else n=this.backend.device.createBuffer({size:a,usage:r});let l={id:qi(),type:0,buffer:n};return this.storageCache.set(l.id,{gpuData:l,originalSize:t}),Re("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${l.id}`),l}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Re("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let a=this.storageCache.get(t);if(!a)throw new Error("data does not exist");await ra(this.backend,a.gpuData.buffer,a.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},Ki=(...e)=>new ta(...e)});var na,ge,Ve=j(()=>{"use strict";na=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},ge=e=>new na(e)});var aa,ft,U,Lt,ln,dn,cn,_e=j(()=>{"use strict";aa=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},ft=class{static calcShape(t,r,a=!1){let n=t.length,o=r.length;if(n===0)return r;if(o===0)return t;let u=Math.max(t.length,r.length),l=new Array(u);if(a){if(n<2||o<2)return;let i=aa.calcMatMulShape([t[n-2],t[n-1]],[r[o-2],r[o-1]]);if(i===void 0)return;[l[u-2],l[u-1]]=i}for(let i=a?3:1;i<=u;i++){let c=n-i<0?1:t[n-i],m=o-i<0?1:r[o-i];if(c!==m&&c>1&&m>1)return;l[u-i]=Math.max(c,m)}return l}static isValidBroadcast(t,r){let a=t.length,n=r.length;if(a>n)return!1;for(let o=1;o<=a;o++)if(t[a-o]!==1&&t[a-o]!==r[n-o])return!1;return!0}},U=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,a){let n=1;for(let o=r;o<a;o++){if(t[o]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[o]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let a=new Array(r);a[r-1]=1,a[r-2]=t[r-1];for(let n=r-3;n>=0;--n)a[n]=a[n+1]*t[n+1];return a}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(a=>this.normalizeAxis(a,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(a=>t[a]):t.slice().reverse()}static padShape(t,r){let a=t.length;return t.map((n,o)=>n+r[o]+r[o+a])}static areEqual(t,r){return t.length!==r.length?!1:t.every((a,n)=>a===r[n])}},Lt=class e{static adjustPoolAttributes(t,r,a,n,o,u){if(!t&&a.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let l=0;l<r.length-2;l++)l>=a.length?a.push(r[l+2]):a[l]=r[l+2];for(let l=0;l<a.length;l++)if(l<n.length){if(n[l]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let l=0;l<a.length;l++)if(l<o.length){if(o[l]<0)throw new Error("dilations should be greater than or equal to 1")}else o.push(1);for(let l=0;l<a.length*2;l++)if(l<u.length){if(u[l]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let l=0;l<a.length;l++){if(a[l]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[l]>=a[l]||u[l+a.length]>=a[l])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,a,n,o,u,l){if(l){if(o.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let i=0;i<t.length-2;i++)e.adjustPadAndReturnShape(t[i+(u?1:2)],r[i],a[i],n[i],o,i,i+t.length-2,l)}}static computePoolOutputShape(t,r,a,n,o,u,l){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let i=[r[0],r[1]];return e.computeShapeHelper(t,r,i,a,n,o,u,l),i}static computeConvOutputShape(t,r,a,n,o,u,l){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let i=[t[0],r[0]];return e.computeShapeHelper(!1,t,i,a,n,o,u,l),i}static computeShapeHelper(t,r,a,n,o,u,l,i){if(t)for(let c=0;c<r.length-2;c++)a.push(1);else for(let c=0;c<r.length-2;c++)a.push(e.adjustPadAndReturnShape(r[c+2],n[c],o[c],u[c],l,c,c+r.length-2,i))}static adjustPadAndReturnShape(t,r,a,n,o,u,l,i){let c=a*(n-1)+1;if(i&&i!=="NOTSET")switch(i){case"VALID":return o[u]=0,o[l]=0,Math.floor((t-c)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(a!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let f=((t+r-1)/r-1)*r+n-t;return o[u]=Math.floor(i==="SAME_LOWER"?(f+1)/2:f/2),o[l]=f-o[u],Math.floor((t+f-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+o[u]+o[l]-c)/r+1)}},ln=class{static getShapeOfGemmResult(t,r,a,n,o){if(t.length!==2||a.length!==2)throw new Error("shape need to be of size 2");let u,l,i;r?(u=t[1],l=t[0]):(u=t[0],l=t[1]);let c=-1;if(n?(i=a[0],c=1):(i=a[1],c=0),a[c]!==l)throw new Error("dimension mismatch");if(u<=0||i<=0||l<=0)throw new Error("invalid shape specified");if(o&&!ft.isValidBroadcast(o,[u,i]))throw new Error("gemm: invalid bias shape for broadcast");return[u,i,l]}},dn=-34028234663852886e22,cn=34028234663852886e22});var ld,oa,Ne,ht,q,He,Ye,lt,tt,de,sa,z,K,pn,ia,Zi,er,ke,we=j(()=>{"use strict";Be();_e();ld=64,oa=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Ne=(e,t=1)=>{let r=oa(e,t);return typeof r=="string"?r:r[0]},ht=(e,t=1)=>{let r=oa(e,t);return typeof r=="string"?r:r[1]},q=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:U.computeStrides(e)}],He=e=>e%4===0?4:e%2===0?2:1,Ye=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,lt=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,tt=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,de=(e,t,r)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?`${e}[(${t}) / 4][(${t}) % 4]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,sa=(e,t,r,a,n)=>{let o=typeof r=="number",u=o?r:r.length,l=[...new Array(u).keys()],i=u<2?"u32":u<=4?`vec${u}<u32>`:`array<u32, ${u}>`,c=oa(t,n),m=typeof c=="string"?c:c[1],f=typeof c=="string"?c:c[0],h={indices:i,value:m,storage:f,tensor:t},w=G=>typeof G=="string"?G:`${G}u`,b={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},_=o?"uniforms.":"",I=`${_}${e}_shape`,$=`${_}${e}_strides`,S="";for(let G=0;G<u-1;G++)S+=`
    let dim${G} = current / ${de($,G,u)};
    let rest${G} = current % ${de($,G,u)};
    indices[${G}] = dim${G};
    current = rest${G};
    `;S+=`indices[${u-1}] = current;`;let T=u<2?"":`
  fn o2i_${e}(offset: u32) -> ${h.indices} {
    var indices: ${h.indices};
    var current = offset;
    ${S}
    return indices;
  }`,E=G=>(b.offsetToIndices=!0,u<2?G:`o2i_${e}(${G})`),M=[];if(u>=2)for(let G=u-1;G>=0;G--)M.push(`${de($,G,u)} * (indices[${G}])`);let A=u<2?"":`
  fn i2o_${e}(indices: ${h.indices}) -> u32 {
    return ${M.join("+")};
  }`,N=G=>(b.indicesToOffset=!0,u<2?G:`i2o_${e}(${G})`),W=(...G)=>u===0?"0u":`${h.indices}(${G.map(w).join(",")})`,L=(G,X)=>u<2?`${G}`:`${de(G,X,u)}`,J=(G,X,he)=>u<2?`${G}=${he};`:`${de(G,X,u)}=${he};`,B={},Y=(G,X)=>{b.broadcastedIndicesToOffset=!0;let he=`${X.name}broadcastedIndicesTo${e}Offset`;if(he in B)return`${he}(${G})`;let qe=[];for(let Je=u-1;Je>=0;Je--){let De=X.indicesGet("outputIndices",Je+X.rank-u);qe.push(`${L($,Je)} * (${De} % ${L(I,Je)})`)}return B[he]=`fn ${he}(outputIndices: ${X.type.indices}) -> u32 {
             return ${qe.length>0?qe.join("+"):"0u"};
           }`,`${he}(${G})`},pe=(G,X)=>(()=>{if(h.storage===h.value)return`${e}[${G}]=${X};`;if(h.storage==="vec2<u32>"&&h.value==="i32")return`${e}[${G}]=vec2<u32>(u32(${X}), select(0u, 0xFFFFFFFFu, ${X} < 0));`;if(h.storage==="vec2<u32>"&&h.value==="u32")return`${e}[${G}]=vec2<u32>(u32(${X}), 0u);`;if(h.storage==="u32"&&h.value==="vec4<bool>")return`${e}[${G}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${X}));`;throw new Error(`not supported combination of storage type ${h.storage} and value type ${h.value} yet`)})(),ee=G=>(()=>{if(h.storage===h.value)return`${e}[${G}]`;if(h.storage==="vec2<u32>"&&h.value==="i32")return`i32(${e}[${G}].x)`;if(h.storage==="vec2<u32>"&&h.value==="u32")return`u32(${e}[${G}].x)`;if(h.storage==="u32"&&h.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${G}] & 0xFFu), bool(${e}[${G}] & 0xFF00u), bool(${e}[${G}] & 0xFF0000u), bool(${e}[${G}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${h.storage} and value type ${h.value} yet`)})(),ve=u<2?"":`
  fn get_${e}ByIndices(indices: ${h.indices}) -> ${m} {
    return ${ee(`i2o_${e}(indices)`)};
  }`,Z=u<2?"":(()=>{let G=l.map(he=>`d${he}: u32`).join(", "),X=l.map(he=>`d${he}`).join(", ");return`
  fn get_${e}(${G}) -> ${m} {
    return get_${e}ByIndices(${W(X)});
  }`})(),be=(...G)=>{if(G.length!==u)throw new Error(`indices length must be ${u}`);let X=G.map(w).join(",");return u===0?ee("0u"):u===1?ee(X[0]):(b.get=!0,b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}(${X})`)},Ie=G=>u<2?ee(G):(b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}ByIndices(${G})`),fe=u<2?"":`
  fn set_${e}ByIndices(indices: ${h.indices}, value: ${m}) {
    ${pe(`i2o_${e}(indices)`,"value")}
  }`,ce=u<2?"":(()=>{let G=l.map(he=>`d${he}: u32`).join(", "),X=l.map(he=>`d${he}`).join(", ");return`
  fn set_${e}(${G}, value: ${m}) {
    set_${e}ByIndices(${W(X)}, value);
  }`})();return{impl:()=>{let G=[],X=!1;return b.offsetToIndices&&(G.push(T),X=!0),b.indicesToOffset&&(G.push(A),X=!0),b.broadcastedIndicesToOffset&&(Object.values(B).forEach(he=>G.push(he)),X=!0),b.set&&(G.push(ce),X=!0),b.setByIndices&&(G.push(fe),X=!0),b.get&&(G.push(Z),X=!0),b.getByIndices&&(G.push(ve),X=!0),!o&&X&&G.unshift(`const ${I} = ${h.indices}(${r.join(",")});`,`const ${$} = ${h.indices}(${U.computeStrides(r).join(",")});`),G.join(`
`)},type:h,offsetToIndices:E,indicesToOffset:N,broadcastedIndicesToOffset:Y,indices:W,indicesGet:L,indicesSet:J,set:(...G)=>{if(G.length!==u+1)throw new Error(`indices length must be ${u}`);let X=G[u];if(typeof X!="string")throw new Error("value must be string");let he=G.slice(0,u).map(w).join(",");return u===0?pe("0u",X):u===1?pe(he[0],X):(b.set=!0,b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}(${he}, ${X})`)},setByOffset:pe,setByIndices:(G,X)=>u<2?pe(G,X):(b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}ByIndices(${G}, ${X});`),get:be,getByOffset:ee,getByIndices:Ie,usage:a,name:e,strides:$,shape:I,rank:u}},z=(e,t,r,a=1)=>sa(e,t,r,"input",a),K=(e,t,r,a=1)=>sa(e,t,r,"output",a),pn=(e,t,r,a=1)=>sa(e,t,r,"internal",a),ia=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=ld){let r=typeof t=="number"?t:t[0],a=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],o=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=o?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,l=o?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*a*n}u + local_idx;`;return`@compute @workgroup_size(${r}, ${a}, ${n})
  fn main(${u}) {
    ${l}
  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let a=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${a}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`
`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,a=1){return this.uniforms.push({name:t,type:r,length:a}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:a,length:n}of this.uniforms)if(n&&n>4)t.push(`${r}:array<vec4<${a}>, ${Math.ceil(n/4)}>`);else{let o=n==null||n===1?a:`vec${n}<${a}>`;t.push(`${r}:${o}`)}return`
      struct Uniforms { ${t.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`
`)+this.internalVariables.map(t=>t.impl()).join(`
`)}},Zi=e=>new ia(e),er=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;n++){let o=r-1-n,u=e[o]||1;(t[t.length-1-n]||1)>1&&u===1&&a.unshift(o)}return a},ke=e=>!0});var dd,Xi,cd,pd,dt,Qi,Ji,tr=j(()=>{"use strict";_e();Ve();we();dd=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},Xi=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,cd=(e,t)=>U.sortBasedOnPerm(e,Xi(e.length,t)),pd=(e,t,r,a)=>{let n=[];n.push(`fn perm(i: ${a.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let o=0;o<t;++o)n.push(r.indicesSet("a",e[o],`i[${o}]`));return n.push("return a;}"),n.join(`
`)},dt=(e,t)=>{let r=e.dataType,a=e.dims.length,n=Xi(a,t),o=ke(a),u=cd(e.dims,n),l=o?u.length:u,i=o?a:e.dims,c=K("output",r,l),m=z("a",r,i),f=h=>`
  ${h.registerUniform("output_size","u32").declareVariables(m,c)}

  ${pd(n,a,m,c)}

  ${h.mainStart()}
    ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${c.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${c.setByOffset("global_idx",m.getByIndices("aIndices"))}
  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:o?["rank"]:["dims"]},getRunData:h=>{let w=U.size(u);return{outputs:[{dims:u,dataType:h[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:o?[{type:"uint32",data:w},...q(h[0].dims),...q(u)]:[{type:"uint32",data:w}]}},getShaderSource:f}},Qi=(e,t)=>{dd(e.inputs),e.compute(dt(e.inputs[0],t.perm))},Ji=e=>ge({perm:e.perm})});var md,fd,hd,gd,yd,bd,wd,vd,$d,_d,gt,eo,to,ro,no,ao,io,oo,so,uo,lo,co=j(()=>{"use strict";_e();we();mn();tr();md={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},fd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},hd={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},gd={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},yd=(e,t)=>{let r=[];for(let a=t-e;a<t;++a)r.push(a);return r},bd=(e,t)=>{let r=[],a=e.length;for(let o=0;o<a;o++)t.indexOf(o)===-1&&r.push(e[o]);let n=t.map(o=>e[o]);return[r,n]},wd=(e,t)=>{let r=e.length+t.length,a=[],n=0;for(let o=0;o<r;o++)t.indexOf(o)===-1?a.push(e[n++]):a.push(1);return a},vd=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},$d=(e,t)=>{let r=[];if(!vd(e,t)){for(let a=0;a<t;++a)e.indexOf(a)===-1&&r.push(a);e.forEach(a=>r.push(a))}return r},_d=(e,t,r,a,n,o,u)=>{let l=r[0].dims,i=U.size(o),c=U.size(u),m=z("_A",r[0].dataType,l),f=K("output",n,o),h=32,w=`
          var<workgroup> aBestValues : array<${f.type.storage}, ${h}>;
       `;return{name:e,shaderCache:t,getShaderSource:_=>`
        ${_.registerUniform("reduceSize","u32").declareVariables(m,f)}
        ${w}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${_.mainStart(h)}

          let outputIndex = global_idx / ${h};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = ${f.type.storage}(${hd[a]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${h}) {
           let candidate = ${f.type.storage}(${m.getByOffset("offset + k")});
           bestValue = ${md[a]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${h}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${fd[a]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${f.setByOffset("outputIndex",`${a==="mean"?`bestValue / ${f.type.storage}(uniforms.reduceSize)`:`${gd[a]}`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:o,dataType:n}],dispatchGroup:{x:i},programUniforms:[{type:"uint32",data:c}]})}},gt=(e,t,r,a)=>{let n=e.inputs.length===1?r:ua(e.inputs,r),o=n.axes;o.length===0&&!n.noopWithEmptyAxes&&(o=e.inputs[0].dims.map((w,b)=>b));let u=U.normalizeAxes(o,e.inputs[0].dims.length),l=u,i=e.inputs[0],c=$d(l,e.inputs[0].dims.length);c.length>0&&(i=e.compute(dt(e.inputs[0],c),{inputs:[0],outputs:[-1]})[0],l=yd(l.length,i.dims.length));let[m,f]=bd(i.dims,l),h=m;n.keepDims&&(h=wd(m,u)),e.compute(_d(t,{hint:n.cacheKey,inputDependencies:["type"]},[i],a,e.inputs[0].dataType,h,f),{inputs:[i]})},eo=(e,t)=>{gt(e,"ReduceMeanShared",t,"mean")},to=(e,t)=>{gt(e,"ReduceL1Shared",t,"l1")},ro=(e,t)=>{gt(e,"ReduceL2Shared",t,"l2")},no=(e,t)=>{gt(e,"ReduceLogSumExpShared",t,"logSumExp")},ao=(e,t)=>{gt(e,"ReduceMaxShared",t,"max")},io=(e,t)=>{gt(e,"ReduceMinShared",t,"min")},oo=(e,t)=>{gt(e,"ReduceProdShared",t,"prod")},so=(e,t)=>{gt(e,"ReduceSumShared",t,"sum")},uo=(e,t)=>{gt(e,"ReduceSumSquareShared",t,"sumSquare")},lo=(e,t)=>{gt(e,"ReduceLogSumShared",t,"logSum")}});var yt,xd,fn,ua,bt,Sd,Id,Cd,Ed,Ad,Td,Od,kd,Rd,Pd,wt,po,mo,fo,ho,go,yo,bo,wo,vo,$o,mn=j(()=>{"use strict";_e();Ve();we();co();yt=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},xd=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],fn=(e,t,r,a,n,o,u=!1,l=!1)=>{let i=[],c=r[0].dims,m=c.length,f=U.normalizeAxes(n,m),h=!l&&f.length===0;c.forEach((I,$)=>{h||f.indexOf($)>=0?u&&i.push(1):i.push(I)});let w=i.length,b=U.size(i);return{name:e,shaderCache:t,getShaderSource:I=>{let $=[],S=z("_A",r[0].dataType,m),T=K("output",o,w),E=a(S,T,f),M=E[2];for(let A=0,N=0;A<m;A++)h||f.indexOf(A)>=0?(u&&N++,M=`for(var j${A}: u32 = 0; j${A} < ${c[A]}; j${A}++) {
                  ${E[2].includes("last_index")?`let last_index = j${A};`:""}
                  ${S.indicesSet("input_indices",A,`j${A}`)}
                  ${M}
                }`):($.push(`${S.indicesSet("input_indices",A,T.indicesGet("output_indices",N))};`),N++);return`

        ${I.registerUniform("output_size","u32").declareVariables(S,T)}

        ${I.mainStart()}
          ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${S.type.indices};
          let output_indices = ${T.offsetToIndices("global_idx")};

          ${$.join(`
`)}
          ${E[0]}       // init ops for reduce max/min
          ${E[1]}
          ${M}
          ${E[3]}
          ${E.length===4?T.setByOffset("global_idx","value"):E.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:i,dataType:o}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:[{type:"uint32",data:b},...q(c),...q(i)]})}},ua=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(a=>r.push(Number(a))),ge({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},bt=(e,t,r,a)=>{let n=e.inputs,o=n.length===1?r:ua(n,r);e.compute(fn(t,{hint:o.cacheKey,inputDependencies:["rank"]},[n[0]],o.noopWithEmptyAxes&&o.axes.length===0?xd:a,o.axes,n[0].dataType,o.keepDims,o.noopWithEmptyAxes),{inputs:[0]})},Sd=(e,t)=>{yt(e.inputs),bt(e,"ReduceLogSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByIndices("input_indices")};`,"value = log(value);"])},Id=(e,t)=>{yt(e.inputs),bt(e,"ReduceL1",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${a.getByIndices("input_indices")});`,""])},Cd=(e,t)=>{yt(e.inputs),bt(e,"ReduceL2",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Ed=(e,t)=>{yt(e.inputs),bt(e,"ReduceLogSumExp",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${a.getByIndices("input_indices")});`,"value = log(value);"])},Ad=(e,t)=>{yt(e.inputs),bt(e,"ReduceMax",t,(a,n,o)=>{let u=[];for(let l=0;l<a.rank;l++)(o.indexOf(l)>=0||o.length===0)&&u.push(a.indicesSet("input_indices",l,0));return[`${u.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};`,`value = max(value, ${a.getByIndices("input_indices")});`,""]})},Td=(e,t)=>{yt(e.inputs),bt(e,"ReduceMean",t,(a,n,o)=>{let u=1;for(let l=0;l<a.rank;l++)(o.indexOf(l)>=0||o.length===0)&&(u*=e.inputs[0].dims[l]);return["var sum = f32(0);","",`sum += f32(${a.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${u});`]})},Od=(e,t)=>{yt(e.inputs),bt(e,"ReduceMin",t,(a,n,o)=>{let u=[];for(let l=0;l<a.rank;l++)(o.indexOf(l)>=0||o.length===0)&&u.push(`input_indices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};`,`value = min(value, ${a.getByIndices("input_indices")});`,""]})},kd=(e,t)=>{yt(e.inputs),bt(e,"ReduceProd",t,(a,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${a.getByIndices("input_indices")};`,""])},Rd=(e,t)=>{yt(e.inputs),bt(e,"ReduceSum",t,(a,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${a.getByIndices("input_indices")};`,""])},Pd=(e,t)=>{yt(e.inputs),bt(e,"ReduceSumSquare",t,(a,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${a.getByIndices("input_indices")}; value += t * t;`,""])},wt=(e,t,r)=>{if(t.length===0)return r;let a=1,n=1;for(let o=0;o<t.length;o++)t.indexOf(o)===-1?a*=e[o]:n*=e[o];return n<32&&a>1024},po=(e,t)=>{wt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Td(e,t):eo(e,t)},mo=(e,t)=>{wt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Id(e,t):to(e,t)},fo=(e,t)=>{wt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Cd(e,t):ro(e,t)},ho=(e,t)=>{wt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ed(e,t):no(e,t)},go=(e,t)=>{wt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ad(e,t):ao(e,t)},yo=(e,t)=>{wt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Od(e,t):io(e,t)},bo=(e,t)=>{wt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?kd(e,t):oo(e,t)},wo=(e,t)=>{wt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Rd(e,t):so(e,t)},vo=(e,t)=>{wt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Pd(e,t):uo(e,t)},$o=(e,t)=>{wt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Sd(e,t):lo(e,t)}});var _o,xo,So,la,Io=j(()=>{"use strict";Be();Ve();mn();_o=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},xo=(e,t)=>{_o(e.inputs);let r=(a,n,o)=>{let u=[];for(let l=0;l<a.rank;l++)(o.indexOf(l)>=0||o.length===0)&&u.push(`input_indices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${a.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${a.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(fn("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},So=(e,t)=>{_o(e.inputs);let r=(a,n,o)=>{let u=[];for(let l=0;l<a.rank;l++)(o.indexOf(l)>=0||o.length===0)&&u.push(`input_indices[${l}] = 0;`);return[`${u.join(`
`)}`,`var value = ${a.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${a.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${a.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(fn("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},la=e=>ge(e)});var Bd,Dd,Md,zd,hn,Ud,Co,da=j(()=>{"use strict";Be();sn();we();Bd=(e,t)=>{let r=e[0],a=e[1],n=e[2],o=e[3],u=e[4],l=e[5];if(u&&l)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let i=r.dims[0],c=r.dims[1],m=r.dims[2];if(n.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(a.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(a.dims[0]!==m)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==a.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let f=n.dims[0]/3,h=f,w=h;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let T of t.qkvHiddenSizes)if(T%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");f=t.qkvHiddenSizes[0],h=t.qkvHiddenSizes[1],w=t.qkvHiddenSizes[2]}let b=c;if(f!==h)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==f+h+w)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let _=0;if(u){if(h!==w)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(u.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(u.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(u.dims[1]!==i)throw new Error('Input "past" second dimension must be batch_size');if(u.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(u.dims[4]!==h/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(_=u.dims[3])}let I=b+_,$=-1,S=0;if(o)throw new Error("Mask not supported");if(u)throw new Error("past is not supported");if(l)throw new Error("relativePositionBias is not supported");return{batchSize:i,sequenceLength:c,pastSequenceLength:_,kvSequenceLength:b,totalSequenceLength:I,maxSequenceLength:$,inputHiddenSize:m,hiddenSize:f,vHiddenSize:w,headSize:Math.floor(f/t.numHeads),vHeadSize:Math.floor(w/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:S,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Dd=(e,t,r,a)=>{let n=He(a),o=64,u=a/n;u<o?o=1:u/8<64&&(o=Math.ceil(u/8));let l=Math.ceil(a/n/o),c=[{type:et(t.dataType),data:1/a},{type:"uint32",data:u},{type:"uint32",data:l}],m=Ne(t.dataType,n),f=h=>{let w=K("x",t.dataType,t.dims,n),b="thread_max_vector";n===2?b="max(thread_max_vector.x, thread_max_vector.y)":n===4&&(b="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");let _=ht(t.dataType),I=[{name:"d_inv",type:_},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`
  var<workgroup> wgMax: array<f32, ${o}>;
  var<workgroup> wgSum: array<f32, ${o}>;
  ${h.registerUniforms(I).declareVariables(w)}
  ${h.mainStart([o,1,1])}
    let localOffset = local_idx * uniforms.elements_per_wg;
    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;

    var thread_max_vector = ${Ye("f32",n,"-3.402823e+38f")};
    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
      thread_max_vector = max(${lt(_,n,"x[offset + i]")}, thread_max_vector);
    }
    wgMax[local_idx] = ${b};
    workgroupBarrier();

    var maxValue = -3.402823e+38f;
    for (var i = 0u; i < ${o}; i++) {
      maxValue = max(wgMax[i], maxValue);
    }

    var sumVector = ${Ye("f32",n,"0")};
    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
      sumVector += exp(${lt(_,n,"x[offset + i]")} - maxValue);
    }
    wgSum[local_idx] = ${tt("sumVector",n)};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${o}; i++) {
      sum += wgSum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
        x[offset + i] = ${Ye("f32",n,"uniforms.d_inv")};
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
        let f32input = ${lt(_,n,"x[offset + i]")};
        x[offset + i] = ${w.type.value}(exp(f32input - maxValue) / sum);
      }
    }
  }`};e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${o};${m};${n}`},getShaderSource:f,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:c})},{inputs:[t],outputs:[]})},Md=(e,t,r,a,n,o)=>{let u=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],l=o.scale===0?1/Math.sqrt(n.headSize):o.scale,i=He(n.headSize),c=n.headSize/i,m=12,f={x:Math.ceil(n.totalSequenceLength/m),y:Math.ceil(n.sequenceLength/m),z:n.batchSize*n.numHeads},h=et(t.dataType),w=[{type:"uint32",data:n.sequenceLength},{type:"uint32",data:c},{type:"uint32",data:n.totalSequenceLength},{type:"uint32",data:n.kvSequenceLength},{type:h,data:l}],b=[t,r],_=$=>{let S=z("q",t.dataType,t.dims,i),T=z("key",r.dataType,r.dims,i),E=K("output",t.dataType,u),M=Ne(t.dataType),A=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:M}];return`
  const beta: ${M} = 1.0;
  const TILE_SIZE = ${m}u;

  var<workgroup> tileQ: array<${S.type.storage}, ${m*m}>;
  var<workgroup> tileK: array<${S.type.storage}, ${m*m}>;
  ${$.registerUniforms(A).declareVariables(S,T,E)}
  ${$.mainStart([m,m,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let lm = m + local_id.y;
    let ln = n + local_id.x;

    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;
    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;

    var value = ${Ye(M,i)};
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m + local_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];
      }

      workgroupBarrier();
    }

    let headOffset = headIdx * uniforms.M * uniforms.N;
    if (lm < uniforms.M && ln < uniforms.N) {
      let outputIdx = headOffset + lm * uniforms.N + ln;
      output[outputIdx] = ${tt("value",i)} * uniforms.alpha;
    }
  }`},I=e.compute({name:"AttentionProbs",shaderCache:{hint:`${i}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:f,programUniforms:w}),getShaderSource:_},{inputs:b,outputs:[-1]})[0];return Dd(e,I,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),I},zd=(e,t,r,a)=>{let n=[a.batchSize,a.sequenceLength,a.vHiddenSize],o=12,u={x:Math.ceil(a.vHeadSize/o),y:Math.ceil(a.sequenceLength/o),z:a.batchSize*a.numHeads},l=[{type:"uint32",data:a.sequenceLength},{type:"uint32",data:a.totalSequenceLength},{type:"uint32",data:a.vHeadSize},{type:"uint32",data:a.numHeads},{type:"uint32",data:a.vHiddenSize}],i=c=>{let m=z("probs",t.dataType,t.dims),f=z("v",r.dataType,r.dims),h=K("output",t.dataType,n),w=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}];return`
  const TILE_SIZE = ${o}u;
  var<workgroup> tileQ: array<${m.type.value}, ${o*o}>;
  var<workgroup> tileK: array<${m.type.value}, ${o*o}>;
  ${c.registerUniforms(w).declareVariables(m,f,h)}
  ${c.mainStart([o,o,1])}
   let headIdx = workgroup_id.z;
   let m = workgroup_id.y * TILE_SIZE + local_id.y;
   let n = workgroup_id.x * TILE_SIZE + local_id.x;

   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;
   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;

   var value = ${m.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
     if (m < uniforms.M && w + local_id.x < uniforms.K) {
       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
     }
     if (n < uniforms.N && w + local_id.y < uniforms.K) {
       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];
     }
     workgroupBarrier();
     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;
   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + currentBatchHeadNumber * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return e.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:u,programUniforms:l}),getShaderSource:i},{inputs:[t,r],outputs:[0]})[0]},hn=(e,t,r,a,n,o,u,l,i,c,m)=>{let f=Md(e,t,r,i,c,m);zd(e,f,a,c)},Ud=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],a=t.sequenceLength,n=t.inputHiddenSize,o=t.headSize,u=12,l={x:Math.ceil(t.headSize/u),y:Math.ceil(t.sequenceLength/u),z:t.batchSize*t.numHeads},i=[e.inputs[0],e.inputs[1],e.inputs[2]],c=[{type:"uint32",data:a},{type:"uint32",data:n},{type:"uint32",data:o},{type:"uint32",data:t.numHeads},{type:"uint32",data:t.headSize},{type:"uint32",data:t.hiddenSize},{type:"uint32",data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],m=f=>{let h=K("output_q",i[0].dataType,r),w=K("output_k",i[0].dataType,r),b=K("output_v",i[0].dataType,r),_=z("input",i[0].dataType,i[0].dims),I=z("weight",i[1].dataType,i[1].dims),$=z("bias",i[2].dataType,i[2].dims),S=_.type.storage,T=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${u}u;
  var<workgroup> tileInput: array<${S}, ${u*u}>;
  var<workgroup> tileWeightQ: array<${S}, ${u*u}>;
  var<workgroup> tileWeightK: array<${S}, ${u*u}>;
  var<workgroup> tileWeightV: array<${S}, ${u*u}>;
  ${f.registerUniforms(T).declareVariables(_,I,$,h,w,b)}
  ${f.mainStart([u,u,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE + local_id.y;
    let n = workgroup_id.x * TILE_SIZE + local_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${S}(0);
    var valueK = ${S}(0);
    var valueV = ${S}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:l,programUniforms:c}),getShaderSource:m},{inputs:i,outputs:[-1,-1,-1]})},Co=(e,t)=>{let r=Bd(e.inputs,t),[a,n,o]=Ud(e,r);return hn(e,a,n,o,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Wd,Nd,Vd,Eo,Ao=j(()=>{"use strict";ot();_e();Ve();we();Wd=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(a,n,o)=>{let u=n.length;if(u!==a.length)throw new Error(`${o}: num dimensions != ${u}`);n.forEach((l,i)=>{if(l!==a[i])throw new Error(`${o}: dim[${i}] do not match`)})};if(e[0].dims.length>1){let a=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,a,"Invalid input scale"),r(e[2].dims,a,"Invalid input B"),r(e[3].dims,a,"Invalid input mean"),r(e[4].dims,a,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Nd=(e,t)=>{let{epsilon:r,spatial:a,format:n}=t,o=e[0].dims,u=a?He(o[o.length-1]):1,l=n==="NHWC"&&o.length>1?u:1,i=U.size(o)/u,c=ke(o.length)&&a,m=c?o.length:o,f=z("x",e[0].dataType,e[0].dims,u),h=z("scale",e[1].dataType,e[1].dims,l),w=z("bias",e[2].dataType,e[2].dims,l),b=z("inputMean",e[3].dataType,e[3].dims,l),_=z("inputVar",e[4].dataType,e[4].dims,l),I=K("y",e[0].dataType,m,u),$=()=>{let T="";if(a)T=`let cOffset = ${o.length===1?"0u":n==="NHWC"?`outputIndices[${o.length-1}] / ${u}`:"outputIndices[1]"};`;else if(n==="NCHW")T=`
            ${I.indicesSet("outputIndices","0","0")}
            let cOffset = ${I.indicesToOffset("outputIndices")};`;else{T=`var cIndices = ${h.type.indices}(0);
                       cIndices[0] = outputIndices[${o.length-1}];`;for(let E=1;E<h.rank;E++)T+=`cIndices[${E}] = outputIndices[${E}];`;T+=`let cOffset = ${h.indicesToOffset("cIndices")};`}return T},S=T=>`
  const epsilon = ${r};
  ${T.registerUniform("outputSize","u32").declareVariables(f,h,w,b,_,I)}
  ${T.mainStart()}
  ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${I.offsetToIndices(`global_idx * ${u}`)};
    ${$()}
    let scale = ${h.getByOffset("cOffset")};
    let bias = ${w.getByOffset("cOffset")};
    let inputMean = ${b.getByOffset("cOffset")};
    let inputVar = ${_.getByOffset("cOffset")};
    let x = ${f.getByOffset("global_idx")};
    let value = (x - inputMean) / sqrt(inputVar + epsilon) * scale + bias;
    ${I.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${a}_${u}`,inputDependencies:c?["rank","type","type","type","type"]:void 0},getShaderSource:S,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:c?[{type:"uint32",data:i},...q(o)]:[{type:"uint32",data:i}]})}},Vd=e=>ge(e),Eo=(e,t)=>{let{inputs:r,outputCount:a}=e,n=Vd({...t,outputCount:a});if(Ee.webgpu.validateInputContent&&Wd(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Nd(r,n))}});var Hd,Ld,To,Oo=j(()=>{"use strict";_e();we();Hd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Ld=e=>{let t=e[0].dims,r=e[0].dims[2],a=U.size(t)/4,n=e[0].dataType,o=z("input",n,t,4),u=z("bias",n,[r],4),l=z("residual",n,t,4),i=K("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)}}),getShaderSource:m=>`
  const channels = ${r}u / 4;
  ${m.declareVariables(o,u,l,i)}

  ${m.mainStart()}
    ${m.guardAgainstOutOfBoundsWorkgroupSizes(a)}
    let value = ${o.getByOffset("global_idx")}
      + ${u.getByOffset("global_idx % channels")} + ${l.getByOffset("global_idx")};
    ${i.setByOffset("global_idx","value")}
  }`}},To=e=>{Hd(e.inputs),e.compute(Ld(e.inputs))}});var Gd,Te,ko,Ro,Po,Bo,Do,Mo,zo,Uo,Wo,Fd,No,Vo,Ho,Lo,gn,Go,yn,Fo,qo,jo,Ko,Yo,Zo,Xo,Qo,Jo,es,ts,rs,ns,as,is,os,ss,ca=j(()=>{"use strict";Be();_e();Ve();we();Gd=(e,t,r,a,n,o)=>{let u=Math.ceil(t/4),l="";typeof n=="string"?l=`${n}(a)`:l=n("a");let i=z("inputData",r,[u],4),c=K("outputData",a,[u],4);return`
      ${e.registerUniform("vec_size","u32").declareVariables(i,c)}

  ${o??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${i.getByOffset("global_idx")};
    ${c.setByOffset("global_idx",l)}
  }`},Te=(e,t,r,a,n,o=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>Gd(u,U.size(e.dims),e.dataType,o,r,a),getRunData:u=>({outputs:[{dims:e.dims,dataType:o}],dispatchGroup:{x:Math.ceil(U.size(u[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(U.size(e.dims)/4)}]})}),ko=e=>{e.compute(Te(e.inputs[0],"Abs","abs"))},Ro=e=>{e.compute(Te(e.inputs[0],"Acos","acos"))},Po=e=>{e.compute(Te(e.inputs[0],"Acosh","acosh"))},Bo=e=>{e.compute(Te(e.inputs[0],"Asin","asin"))},Do=e=>{e.compute(Te(e.inputs[0],"Asinh","asinh"))},Mo=e=>{e.compute(Te(e.inputs[0],"Atan","atan"))},zo=e=>{e.compute(Te(e.inputs[0],"Atanh","atanh"))},Uo=e=>ge(e),Wo=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(Te(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Fd=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:dn,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:cn;return ge({min:t,max:r})},No=(e,t)=>{let r=e.inputs.length===1?t:Fd(e.inputs),a=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`
    const clip_min_: vec4<${a}> = vec4(${a}(${r.min}));
    const clip_max_: vec4<${a}> = vec4(${a}(${r.max}));
`,r.cacheKey),{inputs:[0]})},Vo=e=>{e.compute(Te(e.inputs[0],"Ceil","ceil"))},Ho=e=>{e.compute(Te(e.inputs[0],"Cos","cos"))},Lo=e=>{e.compute(Te(e.inputs[0],"Cosh","cosh"))},gn=e=>ge(e),Go=(e,t)=>{let r=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Elu",a=>`elu_vf32(${a})`,`
  const elu_alpha_ = ${r}(${t.alpha});

  fn elu_f32(a: ${r}) -> ${r} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},yn=(e,t="f32")=>`
const r0: ${t} = 0.3275911;
const r1: ${t} = 0.254829592;
const r2: ${t} = -0.284496736;
const r3: ${t} = 1.421413741;
const r4: ${t} = -1.453152027;
const r5: ${t} = 1.061405429;

fn erf_vf32(v: ${e}) -> ${e} {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,Fo=e=>{let t=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,yn(`vec4<${t}>`,t)))},qo=e=>{e.compute(Te(e.inputs[0],"Exp","exp"))},jo=e=>{e.compute(Te(e.inputs[0],"Floor","floor"))},Ko=e=>{let t=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,yn(`vec4<${t}>`,t)))},Yo=(e,t)=>{let r=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"LeakyRelu",a=>`select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},Zo=e=>{e.compute(Te(e.inputs[0],"Not",t=>`!${t}`))},Xo=e=>{e.compute(Te(e.inputs[0],"Neg",t=>`-${t}`))},Qo=e=>{e.compute(Te(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},Jo=e=>{let t=ht(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},es=e=>{e.compute(Te(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},ts=e=>{e.compute(Te(e.inputs[0],"Sin","sin"))},rs=e=>{e.compute(Te(e.inputs[0],"Sinh","sinh"))},ns=e=>{e.compute(Te(e.inputs[0],"Sqrt","sqrt"))},as=e=>{e.compute(Te(e.inputs[0],"Tan","tan"))},is=e=>{e.compute(Te(e.inputs[0],"Tanh","tanh"))},os=(e,t)=>{let r=ht(e.inputs[0].dataType);return e.compute(Te(e.inputs[0],"ThresholdedRelu",a=>`select(vec4<${r}>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},ss=e=>{e.compute(Te(e.inputs[0],"Log","log"))}});var jd,Kd,us,ls=j(()=>{"use strict";_e();we();ca();jd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Kd=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=z("input",e[0].dataType,e[0].dims,4),a=z("bias",e[0].dataType,[e[0].dims[2]],4),n=K("output",e[0].dataType,t,4),o=U.size(t)/4,u=Ne(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:i=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${i.declareVariables(r,a,n)}

  ${yn(`vec4<${u}>`,u)}

  ${i.mainStart()}
    ${i.guardAgainstOutOfBoundsWorkgroupSizes(o)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${n.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},us=e=>{jd(e.inputs),e.compute(Kd(e.inputs))}});var Yd,Zd,vt,ds,cs,ps,ms,fs,hs,gs,ys,bs,ws,vs=j(()=>{"use strict";Be();_e();we();Yd=(e,t,r,a,n,o,u,l,i,c,m,f,h)=>{let w,b;typeof l=="string"?w=b=(A,N)=>`${l}((${A}),(${N}))`:typeof l=="function"?w=b=l:(w=l.scalar,b=l.vector);let _=f?t.length:t,I=f?r.length:r,$=f?a.length:a,S=K("outputData",m,$,4),T=z("aData",i,_,4),E=z("bData",c,I,4),M;if(n)if(o){let A=U.size(t)===1,N=U.size(r)===1,W=t.length>0&&t[t.length-1]%4===0,L=r.length>0&&r[r.length-1]%4===0;A||N?M=S.setByOffset("global_idx",b(A?`${T.type.value}(${T.getByOffset("0")}.x)`:T.getByOffset("global_idx"),N?`${E.type.value}(${E.getByOffset("0")}.x)`:E.getByOffset("global_idx"))):M=`
            let outputIndices = ${S.offsetToIndices("global_idx * 4u")};
            let offsetA = ${T.broadcastedIndicesToOffset("outputIndices",S)};
            let offsetB = ${E.broadcastedIndicesToOffset("outputIndices",S)};
            ${S.setByOffset("global_idx",b(u||W?T.getByOffset("offsetA / 4u"):`${T.type.value}(${T.getByOffset("offsetA / 4u")}[offsetA % 4u])`,u||L?E.getByOffset("offsetB / 4u"):`${E.type.value}(${E.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else M=S.setByOffset("global_idx",b(T.getByOffset("global_idx"),E.getByOffset("global_idx")));else{if(!o)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let A=(N,W,L="")=>{let J=`aData[indexA${W}][componentA${W}]`,B=`bData[indexB${W}][componentB${W}]`;return`
            let outputIndices${W} = ${S.offsetToIndices(`global_idx * 4u + ${W}u`)};
            let offsetA${W} = ${T.broadcastedIndicesToOffset(`outputIndices${W}`,S)};
            let offsetB${W} = ${E.broadcastedIndicesToOffset(`outputIndices${W}`,S)};
            let indexA${W} = offsetA${W} / 4u;
            let indexB${W} = offsetB${W} / 4u;
            let componentA${W} = offsetA${W} % 4u;
            let componentB${W} = offsetB${W} % 4u;
            ${N}[${W}] = ${L}(${w(J,B)});
          `};m===9?M=`
            var data = vec4<u32>(0);
            ${A("data",0,"u32")}
            ${A("data",1,"u32")}
            ${A("data",2,"u32")}
            ${A("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:M=`
            ${A("outputData[global_idx]",0)}
            ${A("outputData[global_idx]",1)}
            ${A("outputData[global_idx]",2)}
            ${A("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(T,E,S)}

        ${h??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${M}
      }`},Zd=(e,t,r,a,n,o,u=r.dataType)=>{let l=!U.areEqual(r.dims,a.dims),i=r.dims,c=U.size(r.dims),m=!1,f=!1,h=[l];if(l){let b=ft.calcShape(r.dims,a.dims,!1);if(!b)throw new Error("Can't perform binary op on the given tensors");i=b,c=U.size(i);let _=U.size(r.dims)===1,I=U.size(a.dims)===1,$=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,S=a.dims.length>0&&a.dims[a.dims.length-1]%4===0;h.push(_),h.push(I),h.push($),h.push(S);let T=1;for(let E=1;E<i.length;E++){let M=r.dims[r.dims.length-E]??1,A=a.dims[a.dims.length-E]??1;if(M===A)T*=M;else break}T%4===0?(f=!0,m=!0):(_||I||$||S)&&(m=!0)}else m=!0;h.push(m);let w=ke(r.dims.length)&&ke(a.dims.length)&&ke(i.length);return{name:e,shaderCache:{hint:t+h.map(b=>b.toString()).join("_"),inputDependencies:w?["rank","rank"]:["dims","dims"]},getShaderSource:b=>Yd(b,r.dims,a.dims,i,m,l,f,n,r.dataType,a.dataType,u,w,o),getRunData:()=>({outputs:[{dims:i,dataType:u}],dispatchGroup:{x:Math.ceil(c/64/4)},programUniforms:w?[{type:"uint32",data:Math.ceil(U.size(i)/4)},...q(r.dims),...q(a.dims),...q(i)]:[{type:"uint32",data:Math.ceil(U.size(i)/4)}]})}},vt=(e,t,r,a,n,o)=>{e.compute(Zd(t,n??"",e.inputs[0],e.inputs[1],r,a,o))},ds=e=>{vt(e,"Add",(t,r)=>`${t}+${r}`)},cs=e=>{vt(e,"Div",(t,r)=>`${t}/${r}`)},ps=e=>{vt(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},ms=e=>{vt(e,"Mul",(t,r)=>`${t}*${r}`)},fs=e=>{let t=z("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;vt(e,"Pow",{scalar:(a,n)=>`pow_custom(${a},${n})`,vector:(a,n)=>`pow_vector_custom(${a},${n})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},hs=e=>{vt(e,"Sub",(t,r)=>`${t}-${r}`)},gs=e=>{vt(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},ys=e=>{vt(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},bs=e=>{vt(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},ws=e=>{vt(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var Qd,Jd,ec,tc,$s,_s,xs=j(()=>{"use strict";_e();Ve();we();Qd=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let a of e){if(a.dataType!==t)throw new Error("input tensors should be one type");if(a.dims.length!==r)throw new Error("input tensors should have the same shape")}},Jd=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,ec=(e,t)=>{let r=e.length,a=[];for(let n=0;n<r;++n){let o=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?a.push(o):n===0?a.push(`if (inputIndex == ${n}u) { ${o} }`):n===r-1?a.push(`else { ${o} }`):a.push(`else if (inputIndex == ${n}) { ${o} }`)}return a.join(`
`)},tc=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn't match input dimensionality");let a=t<0?r.length+t:t,n=r.slice(0);for(let E=1;E<e.length;E++){let M=e[E].dims.slice();for(let A=0;A<r.length;A++)if(A===a)n[a]+=M[A];else if(r[A]!==M[A])throw new Error("non concat dimensions must match")}let o=U.size(n),u=new Array(e.length),l=new Array(e.length),i=e[0].dataType,c=0,m=[],f=[],h=[],w=[{type:"uint32",data:o}];for(let E=0;E<e.length;++E)c+=e[E].dims[a],u[E]=c,h.push(ke(e[E].dims.length)),f.push(h[E]?e[E].dims.length:e[E].dims),l[E]=z(`input${E}`,i,f[E]),m.push(h[E]?"rank":"dims"),w.push({type:"uint32",data:u[E]});for(let E=0;E<e.length;++E)h[E]&&w.push(...q(e[E].dims));let b=ke(n.length);b&&w.push(...q(n));let _=b?n.length:n,I=K("output",i,_),$=I.indicesGet("indices",a),S=Array.from(Array(u.length).keys()).map(E=>`uniforms.sizeInConcatAxis${E}`).join(","),T=E=>`

  ${(()=>{E.registerUniform("outputSize","u32");for(let M=0;M<e.length;M++)E.registerUniform(`sizeInConcatAxis${M}`,"u32");return E.declareVariables(...l,I)})()}

  ${Jd(u.length,S)}

  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${I.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${$});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${u.length}u>(${S});
      ${$} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${ec(l,I)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:m},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:w}),getShaderSource:T}},$s=(e,t)=>{Qd(e.inputs),e.compute(tc(e.inputs,t.axis))},_s=e=>ge({axis:e.axis})});var $t,bn,Rt=j(()=>{"use strict";_e();$t=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},bn=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,a]=e?.activation_params||[dn,cn];return{activation:t,clipMax:a,clipMin:r,activationCacheKey:`${t}:${r},${a}`}}return{activation:t,activationCacheKey:t}}});var Fe,wn,vn=j(()=>{"use strict";Fe=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},wn=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `});var $n,pa=j(()=>{"use strict";$n=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`});var rc,nc,Ir,Ss,ac,Cr,ic,_n,Er=j(()=>{"use strict";_e();we();Rt();vn();rc=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,nc=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,Ir=(e,t,r="f32",a,n=!1,o=32,u=!1,l=32)=>{let i=t[1]*e[1],c=t[0]*e[0],m=n?i:o,f=n?o:i,h=m/t[0],w=o/t[1];if(!((n&&h===4&&e[1]===4||!n&&(h===3||h===4))&&m%t[0]===0&&o%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${h} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${h} must be 3 or 4.
  tileAWidth ${m} must be divisible by workgroupSize[0]${t[0]}. tileInner ${o} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${h}<${r}>, ${m/h}>, ${f}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${c/e[0]}>, ${o}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${h};
const tileInner = ${o};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${u?"0":"i32(globalId.z)"};
  ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${i};

  let numTiles = ${u?`${Math.ceil(l/o)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
  var kStart = ${u?`i32(globalId.z) * ${l}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${w};
  for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${rc(n,a)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${a?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${h===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${nc(n,h)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},Ss=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,ac=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Cr=(e,t,r="f32",a,n=!1,o=32,u=!1,l=32,i=!1)=>{let c=e[1]*t[1],m=e[0]*t[0],f=n?c:o,h=n?o:c;if(!(h%t[1]===0&&f%t[0]===0&&o%t[1]===0))throw new Error(`tileAHight ${h} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${f} must be divisible by workgroupSize[0]${t[0]}, tileInner ${o} must be divisible by workgroupSize[1]${t[1]}`);let w=h/t[1],b=f/t[0],_=o/t[1],I=i?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${c};
    let globalColStart = i32(workgroupId.x) * ${m};

    // Loop over shared dimension.
    for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${h}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${f}; inputCol = inputCol + ${t[0]}) {
          ${Ss(n,a)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${m}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${a?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${c};

let tileRowA = i32(localId.y) * ${w};
let tileColA = i32(localId.x) * ${b};
let tileRowB = i32(localId.y) * ${_};
// Loop over shared dimension.
for (var t = 0; t < numTiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${b}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${Ss(n,a)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${_}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${a?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${ac(n)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${f}>, ${h}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${m}>, ${o}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${o};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${u?"0":"i32(globalId.z)"};
    ${a?`let batchIndices = ${a.offsetToIndices("u32(batch)")};`:""}
    let numTiles = ${u?`${Math.ceil(l/o)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
    var kStart = ${u?`i32(globalId.z) * ${l}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;

    // Without this initialization strange values show up in acc.
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = 0.0;
      }
    }
    ${I}
  }
`},ic=(e,t,r,a,n,o=!1)=>{let[u,l,i]=n,[c,m,f,h]=a,w=er(u,i),b=er(l,i),_=Ne(a[0].type.tensor),I=()=>{let T=m.rank,E=c.rank,M=`var aIndices: ${m.type.indices};`;for(let A=T-2-1,N=E-1;A>=0;A--,N--)M+=`
aIndices[${A}] = ${E>1?`batchIndices[${N}]`:"batchIndices"};`;return w.forEach(A=>{M+=`
aIndices[${A}] = 0;`}),M+=`
aIndices[${T-2}] = u32(row);
                   aIndices[${T-1}] = u32(colIn);`,M},$=()=>{let T=f.rank,E=c.rank,M=`var bIndices: ${f.type.indices};`;for(let A=T-2-1,N=E-1;A>=0;A--,N--)M+=`
bIndices[${A}] = ${E>1?`batchIndices[${N}]`:"batchIndices"};`;return b.forEach(A=>{M+=`
bIndices[${A}] = 0;`}),M+=`
bIndices[${T-2}] = u32(row);
                   bIndices[${T-1}] = u32(colIn);`,M};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${c.type.indices}) -> ${Fe(e,_)} {
      var value = ${Fe(e,_)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dimAOuter && col < uniforms.dimInner)
      {
        ${I()}
        value = ${m.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${c.type.indices}) -> ${Fe(e,_)} {
      var value = ${Fe(e,_)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dimInner && col < uniforms.dimBOuter)
      {
        ${$()}
        value = ${f.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Fe(e,_)}) {
      let col = colIn * ${e};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${o?"bias[colIn]":`${Fe(e,_)}(bias[row])`};`:""}
        ${r}
        ${h.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},_n=(e,t,r,a,n=!1)=>{let o=e[0].dims,u=e[1].dims,l=o.slice(0,-2),i=u.slice(0,-2),c=a?a.slice(0,-2):r.slice(0,-2),m=ke(c.length),f=m?c.length:c,h=pn("batchDims",e[0].dataType,f,1),w=U.size(c),b=o[o.length-2],_=o[o.length-1],I=u[u.length-1],$=_%4===0&&I%4===0,S=b<=8?[4,1,1]:[4,4,1],T=[8,8,1],E=[Math.ceil(I/T[0]/S[0]),Math.ceil(b/T[1]/S[1]),Math.ceil(w/T[2]/S[2])],M=Ne(e[0].dataType),A=$?4:1,N=[...l,b,_/A],W=ke(N.length),L=W?N.length:N,J=[...i,_,I/A],B=ke(J.length),Y=B?J.length:J,pe=[w,b,I/A],ee=z("a",e[0].dataType,L,A),ve=z("b",e[1].dataType,Y,A),Z=K("result",e[0].dataType,pe.length,A),be=[ee,ve],Ie=[{type:"int32",data:b},{type:"int32",data:I},{type:"int32",data:_}];m&&Ie.push(...q(c)),W&&Ie.push(...q(N)),B&&Ie.push(...q(J));let fe=[];fe.push(W?"rank":"dims"),fe.push(B?"rank":"dims");let ce=e.length>2,{activationFunction:We,applyActivation:Pe}=$t(t,Z.type.value),Le=ic(A,ce,Pe,[h,ee,ve,Z],[l,i,c],n);if(ce){let X=n?A:1;be.push(z("bias",e[2].dataType,e[2].dims.length,X)),Ie.push(...q(e[2].dims)),fe.push("rank")}Ie.push(...q(pe));let G=X=>`
  ${X.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(h).declareVariables(...be,Z)}
  ${We}
  ${Le}
  ${$?Ir(S,T,M,h):Cr(S,T,M,h)}
                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${S}${$}${n}`,inputDependencies:fe},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:Ie}),getShaderSource:G}}});var oc,Is,Cs=j(()=>{"use strict";kt();we();Rt();vn();pa();Er();oc=(e,t,r,a,n=!1,o,u=4,l=4,i=4,c="f32")=>{let m=B=>{switch(B){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${c}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${B} is not supported.`)}},f=B=>{switch(B){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${B} is not supported.`)}},h=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,w=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,b=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",_=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=e?"row":"col",$=e?"col":"row",S=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${I} / outWidth;
    let outCol = ${I} % outWidth;

    let WRow = ${$} / (filterDims[1] * inChannels);
    let WCol = ${$} / inChannels % filterDims[1];
    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];
    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];
    let xCh = ${$} % inChannels;
    var resData = ${Fe(u,c)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${b} && xCol >= 0 && xCol < ${_}) {
      ${h}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${m(u)}
    }
    return resData;`,T=e?t&&a?`
    let col = colIn * ${u};
    ${S}`:`
    let col = colIn * ${u};
    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
      ${S}
    }
    return ${Fe(u,c)}(0.0);`:a&&r?`
    let col = colIn * ${u};
    ${S}`:`
    let col = colIn * ${u};
    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
      ${S}
    }
    return ${Fe(u,c)}(0.0);`,E=`${f(l)}`,M=Fe(i,c),A=e?Fe(u,c):Fe(l,c),N=e?Fe(l,c):Fe(u,c),{activationFunction:W,applyActivation:L}=$t(o,M);return`
    ${W}
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${A} {
      ${e?T:E}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${N} {
      ${e?E:T}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${M}) {
      let col = colIn * ${i};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${w}
      ${wn(n)}
      ${L}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},Is=(e,t,r,a,n,o,u,l)=>{let i=t.format==="NHWC",c=i?e[0].dims[3]:e[0].dims[1],m=r[0],f=i?r[2]:r[3],h=i?r[1]:r[2],w=i?r[3]:r[1],b=i&&(c%4===0||c%3===0)&&w%4===0,_=i?w:f*h,I=i?f*h:w,$=[8,8,1],S=a<=8?[4,1,1]:[4,4,1],T=[Math.ceil(_/$[0]/S[0]),Math.ceil(I/$[1]/S[1]),Math.ceil(m/$[2]/S[2])];Re("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${T}`);let E=b?i&&c%4!==0?3:4:1,M=$[1]*S[1],A=$[0]*S[0],N=Math.max($[0]*E,$[1]),W=a%M===0,L=n%A===0,J=o%N===0,B=b?[E,4,4]:[1,1,1],Y=Ne(e[0].dataType),pe=b?4:1,ee=[{type:"int32",data:a},{type:"int32",data:n},{type:"int32",data:o}],ve=z("x",e[0].dataType,e[0].dims.length,E===3?1:E),Z=z("w",e[1].dataType,e[1].dims.length,pe),be=[ve,Z];ee.push(...q(e[0].dims)),ee.push(...q(e[1].dims));let Ie=`
      fn setOutputAtIndex(flatIndex : i32, value : ${b?`vec4<${Y}>`:Y}) {
        result[flatIndex] = ${b?`vec4<${Y}>`:Y}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${b?`vec4<${Y}>`:Y}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${b?"/ 4":""}, value);
      }`;if(u){let ce=z("bias",e[2].dataType,e[2].dims.length,pe);be.push(ce),ee.push(...q(e[2].dims)),Ie+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?`vec4<${Y}>`:Y} {
          return bias[coords.${i?"w":"y"}${b?"/ 4":""}];
        }`}let fe=K("result",e[0].dataType,r.length,pe);return ee.push(...q(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:T[0],y:T[1],z:T[2]},programUniforms:ee}),getShaderSource:ce=>`
        ${$n("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${ce.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...be,fe)}
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});
        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});
        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        ${Ie}
        ${oc(i,W,L,J,u,t,B[0],B[1],B[2],Y)}
            ${b?Ir(S,$,Y,void 0,!i,N):Cr(S,$,Y,void 0,!i,N,!1,void 0,l)}`}}});var ma,Es=j(()=>{"use strict";_e();we();ha();Rt();ma=(e,t,r)=>{let a=e.length>2,n=a?"value += b[output_channel];":"",o=e[0].dims,u=e[1].dims,l=u[0]/t.group,i=t.format==="NHWC",c=fa(o,u,t.dilations,t.pads,t.strides,i),m=U.size(c),f=K("output",e[0].dataType,c),{activationFunction:h,applyActivation:w}=$t(t,f.type.value),b=z("x",e[0].dataType,o),_=z("w",e[1].dataType,u),I=[b,_];a&&I.push(z("b",e[2].dataType,e[2].dims));let $=S=>`
  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);
  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);

  ${S.declareVariables(...I,f)}

  ${h}

  ${S.mainStart()}
    ${S.guardAgainstOutOfBoundsWorkgroupSizes(m)}

    let outputIndices = ${f.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${i?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${i?1:2}], outputIndices[${i?2:3}]) * strides - pads;
    let group_id: u32 = output_channel / ${l}u;

    var value: ${f.type.value} = ${f.type.value}(0);
    for (var wInChannel: u32 = 0u; wInChannel < ${u[1]}u; wInChannel++) {
      let input_channel = group_id * ${u[1]}u + wInChannel;
      for (var wHeight: u32 = 0u; wHeight < ${u[2]}u; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;

        if (xHeight < 0u || xHeight >= ${o[i?1:2]}u) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < ${u[3]}u; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;
          if (xWidth < 0u || xWidth >= ${o[i?2:3]}u) {
            continue;
          }

          let xVal = ${i?b.get("batch","xHeight","xWidth","input_channel"):b.get("batch","input_channel","xHeight","xWidth")};
          let wVal = ${_.get("output_channel","wInChannel","wHeight","wWidth")};
          value += xVal*wVal;
        }
      }
    }
    ${n}
    ${w}
    ${f.setByOffset("global_idx","value")}
  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(c):c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(m/64)}}),getShaderSource:$}}});var ga,sc,As,ya=j(()=>{"use strict";_e();Er();we();Rt();ga=(e,t,r,a,n=!1)=>{let o=e[0].dims,u=e[1].dims,l=o[o.length-2],i=u[u.length-1],c=o[o.length-1],m=He(i),f=He(c),h=He(l),w=U.size(r)/m/h,b=e.length>2,_=a?a.slice(0,-2):r.slice(0,-2),$=[U.size(_),l,i],S=[{type:"uint32",data:w},{type:"uint32",data:l},{type:"uint32",data:i},{type:"uint32",data:c},...q(_),...q(o),...q(u)];b&&S.push(...q(e[2].dims)),S.push(...q($));let T=E=>{let M=pn("batch_dims",e[0].dataType,_.length),A=z("a",e[0].dataType,o.length,f),N=z("b",e[1].dataType,u.length,m),W=K("output",e[0].dataType,$.length,m),{activationFunction:L,applyActivation:J}=$t(t,W.type.value),B=[A,N],Y="";if(b){let fe=n?m:1;B.push(z("bias",e[2].dataType,e[2].dims.length,fe)),Y=`${n?`value += bias[col / ${fe}];`:`value += ${W.type.value}(bias[row + i]);`}`}let pe=o.slice(0,-2),ee=u.slice(0,-2),ve=er(pe,_),Z=er(ee,_),be=(fe,ce)=>{let We=fe.rank,Pe=fe.name;if(We===2)return`var ${Pe}_indices = ${fe.type.indices}(0u, 0u);`;let Le=M.rank,G=`var ${Pe}_indices: ${fe.type.indices};`;for(let X=We-2-1,he=Le-1;X>=0;X--,he--)G+=`
${Pe}_indices[${X}] = ${Le>1?`batch_indices[${he}]`:"batch_indices"};`;return ce.forEach(X=>{G+=`
${Pe}_indices[${X}] = 0;`}),G+=`${Pe}_indices[${We-2}] = 0u;
                     ${Pe}_indices[${We-1}] = 0u;`,G},Ie=()=>{let fe=`var a_data: ${A.type.value};`;for(let ce=0;ce<f;ce++)fe+=`
              let b_data${ce} = b[(b_offset + (k + ${ce}) * uniforms.N + col) / ${m}];`;for(let ce=0;ce<h;ce++){fe+=`a_data = a[(a_offset + (row + ${ce}) * uniforms.K + k) / ${f}];`;for(let We=0;We<f;We++)fe+=`
            values[${ce}] = fma(${N.type.value}(a_data${f===1?"":`[${We}]`}), b_data${We}, values[${ce}]);
`}return fe};return`
  ${E.registerUniform("outputSize","u32").registerUniform("M","u32").registerUniform("N","u32").registerUniform("K","u32").registerInternalVariables(M).declareVariables(...B,W)}
  ${L}
  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    let col = (global_idx % (uniforms.N / ${m})) * ${m};
    var index1 = global_idx / (uniforms.N / ${m});
    let stride1 = uniforms.M / ${h};
    let row = (index1 % stride1) * ${h};
    let batch = index1 / stride1;

    ${r.length===2?"":`let batch_indices = ${M.offsetToIndices("batch")};`}
    ${be(A,ve)}
    let a_offset = ${A.indicesToOffset("a_indices")};
    ${be(N,Z)}
    let b_offset = ${N.indicesToOffset("b_indices")};
    var values: array<${W.type.value}, ${h}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${f}) {
      ${Ie()}
    }
    for (var i = 0u; i < ${h}u; i++) {
      var value = values[i];
      ${Y}
      ${J}
      let cur_indices = ${W.type.indices}(batch, row + i, col);
      let offset = ${W.indicesToOffset("cur_indices")};
      ${W.setByOffset(`offset / ${m}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activationCacheKey}_${m}_${f}_${h}_${n}`,inputDependencies:b?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:S}),getShaderSource:T}},sc=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},As=e=>{sc(e.inputs);let t=ft.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");let r=t[t.length-1],a=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&a<8?e.compute(ga(e.inputs,{activation:"",activationCacheKey:""},t)):e.compute(_n(e.inputs,{activation:"",activationCacheKey:""},t))}});var fa,Ts,uc,Os,ba,lc,dc,wa,ha=j(()=>{"use strict";_e();Ve();Cs();Er();Es();Rt();ya();tr();fa=(e,t,r,a,n,o)=>{let u=e[0],l=e.slice(o?1:2,o?3:4),i=l.length,c=t[0],f=t.slice(2).map((b,_)=>b+(b-1)*(r[_]-1)),w=l.map((b,_)=>b+a[_]+a[_+i]).map((b,_)=>Math.floor((b-f[_]+n[_])/n[_]));return w.splice(0,0,u),w.splice(o?3:1,0,c),w},Ts=[2,3,1,0],uc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[1]*t.group;if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Os=(e,t)=>{let r=e.kernelShape.slice();for(let o=2;o<t[1].dims.length;++o)r[o-2]===0&&(r[o-2]=t[1].dims[o]);let a=e.pads.slice();Lt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,a,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:a,cacheKey:e.cacheKey}),n},ba=e=>{let t=bn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,o=e.group,u=e.kernel_shape,l=e.pads,i=e.strides,c=e.w_is_const();return ge({autoPad:a,format:r,dilations:n,group:o,kernelShape:u,pads:l,strides:i,wIsConst:c,...t})},lc=(e,t,r)=>{let a=Os(r,t);if(r.group!==1){e.compute(ma(t,a));return}let n=r.format==="NHWC",o=t.length===3,u=t[0].dims[n?1:2],l=t[0].dims[n?2:3],i=t[0].dims[n?3:1],c=t[1].dims[2],m=t[1].dims[3],f=fa(t[0].dims,t[1].dims,r.dilations,a.pads,r.strides,n),h=f[n?1:2],w=f[n?2:3],b=f[n?3:1],_=n&&c===u&&m===l&&r.pads[0]===0&&r.pads[1]===0;if(_||c===1&&m===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let A=f[0],N,W,L,J=[];if(n){let pe=e.kernelCustomData.wT??e.compute(dt(t[1],Ts),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=pe),_){let ee=u*l*i;N=t[0].reshape([1,A,ee]),W=pe.reshape([1,ee,b]),L=[1,A,b]}else N=t[0].reshape([A,u*l,i]),W=pe.reshape([1,i,b]),L=[A,h*w,b];J.push(N),J.push(W)}else N=t[0].reshape([A,i,u*l]),W=t[1].reshape([1,b,i]),L=[A,b,h*w],J.push(W),J.push(N);o&&J.push(t[2]);let B=L[2],Y=J[0].dims[J[0].dims.length-1];B<8&&Y<8?e.compute(ga(J,a,f,L,n),{inputs:J}):e.compute(_n(J,a,f,L,n),{inputs:J});return}let I=!0,$=e.kernelCustomData.wT??e.compute(dt(t[1],Ts),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=$);let S=[t[0],$];o&&S.push(t[2]);let T=n?h*w:b,E=n?b:h*w,M=c*m*i;e.compute(Is(S,a,f,T,E,M,o,I),{inputs:S})},dc=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&a.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],o=[1].concat(t.strides),u=[1].concat(t.dilations),l=[1].concat(t.kernelShape),i=Os({...t,pads:n,strides:o,dilations:u,kernelShape:l},a);e.compute(ma(a,i,c=>r?[c[0],c[2],c[3]]:[]))},wa=(e,t)=>{uc(e.inputs,t),e.inputs[0].dims.length===3?dc(e,t):lc(e,e.inputs,t)}});var cc,ks,Rs=j(()=>{"use strict";kt();we();Rt();vn();pa();Er();cc=(e,t=!1,r,a=4)=>{let n=Fe(a,"f32"),o=S=>{switch(S){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];
            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];
            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];
            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${S} is not supported.`)}},u=e?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,l=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,i=e?"outBackprop[1]":"outBackprop[2]",c=e?"outBackprop[2]":"outBackprop[3]",m=e?"row":"col",f=e?"col":"row",h=`
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      let outRow = ${m} / outWidth;
      let outCol = ${m} % outWidth;

      let WRow = ${f} / (filterDims[1] * inChannels);
      let WCol = ${f} / inChannels % filterDims[1];
      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);
      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);
      if (xR < 0.0 || xR >= f32(${i}) || fract(xR) > 0.0) {
        return ${n}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${c}) || fract(xC) > 0.0) {
        return ${n}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${f} % inChannels;
      ${u}
      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${a}];`,w=e?`
      let col = colIn * ${a};
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${h}
      }
      return ${n}(0.0);`:`
      let col = colIn * ${a};
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${h}
      }
      return ${n}(0.0);`,b=`
      let col = colIn * ${a};
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);
      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];
      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${o(a)}
      }
      return ${n}(0.0);
      `,{activationFunction:_,applyActivation:I}=$t(r,n);return`
      ${_}
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?w:b}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {
    ${e?b:w}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {
    let col = colIn * ${a};
    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
      var value = valueInput;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${l}
      ${wn(t)}
      ${I}
      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${a}] = value;
    }
  }`},ks=(e,t,r,a,n,o,u,l)=>{let i=t.format==="NHWC",c=i?e[0].dims[3]:e[0].dims[1],m=r[0],f=i?r[2]:r[3],h=i?r[1]:r[2],w=i?r[3]:r[1],b=i?c%4===0&&w%4===0:f%4===0&&w%4===0,_=i?w:f*h,I=i?f*h:w,$=b?[8,8,1]:[_<=4||I<=4?4:16,_>4&&I<=4?4:16,1],S=b?[4,4,1]:[_<=4?1:4,_>4&&I<=4?1:4,1],T=[Math.ceil(_/$[0]/S[0]),Math.ceil(I/$[1]/S[1]),Math.ceil(m/$[2]/S[2])];Re("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${T}`);let E=b?4:1,M=Math.max($[0]*E,$[1]),A=b?4:1,N=[{type:"int32",data:a},{type:"int32",data:n},{type:"int32",data:o}],W=z("x",e[0].dataType,e[0].dims.length,A),L=z("w",e[1].dataType,e[1].dims.length,1),J=K("result",e[0].dataType,r.length,A),B=[W,L];N.push(...q(e[0].dims)),N.push(...q(e[1].dims));let Y="";if(u){let pe=z("bias",e[2].dataType,e[2].dims.length,A);B.push(pe),N.push(...q(e[2].dims)),Y+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?"vec4<f32>":"f32"} {
          return bias[coords.${i?"w":"y"}${b?"/ 4":""}];
        }`}return N.push(...q(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:T[0],y:T[1],z:T[2]},programUniforms:N}),getShaderSource:pe=>`
        ${$n("uniforms.result_strides")}
        ${pe.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...B,J)};
        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[i?1:2]}, ${t.kernelShape[i?2:3]});
        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(
              ${t.dilations[0]<=1?0:(t.kernelShape[i?1:2]-1)*(t.dilations[0]-1)},
              ${t.dilations[1]<=1?0:(t.kernelShape[i?2:3]-1)*(t.dilations[1]-1)});
        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,
                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);
        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        const dimAOuter : i32 = ${a};
        const dimBOuter : i32 = ${n};
        const dimInner : i32 = ${o};
        ${Y}
        ${cc(i,u,t,E)}
        ${b?Ir(S,$,"f32",void 0,!i,M):Cr(S,$,"f32",void 0,!i,M,!1,void 0,l)}`}}});var pc,va,Ps=j(()=>{"use strict";kt();_e();we();pc=(e,t,r,a,n,o,u=!1,l)=>{let i=r.format==="NHWC",c=i?1:2,m=i?2:3,f=i?3:1,h=U.size(a),w=u?2:1,b=r.group,_=t[1].dims,I=_[0]/b,$=_[1],S=`
  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${l}>`:l}) {
    result[flatIndex] = ${u?`vec4<${l}>`:l}(value);
  }`;n&&(S+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${l}>`:l} {
      return bias[coords.${i?"w":"y"}${u?"/ 4":""}];
    }`);let T=u?4:1,E=z("W",t[1].dataType,t[1].dims,T),M=z("Dy",t[0].dataType,t[0].dims,T),A=[M,E];n&&A.push(z("bias",t[2].dataType,[a[f]],T));let N=K("result",t[0].dataType,a,T),W=`{
        let batch: u32 = ${o?"global_id.z":"workgroup_id.z"} / outShape[1];
        let r = ${o?"global_id.z":"workgroup_id.z"} % outShape[1];
        let c = ${o?"global_id.y":"workgroup_id.y"} * ${w};
        let d1: u32 = ${o?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${l}>, ${w}>;
        for (var i = 0; i < ${w}; i++) {
          dotProd[i] = vec4<${l}>(0.0);
        }
        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {
          var dyR = (${l}(dyCorner.x) + ${l}(wR)) / ${l}(strides.x);
          let wRPerm = filterDims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${l}(outBackprop[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {
            let dyC = (${l}(dyCorner.y) + ${l}(wC)) / ${l}(strides.y);
            let dyC2 = (${l}(dyCorner.y) + 1.0 + ${l}(wC)) / ${l}(strides.y);
            let wCPerm = filterDims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${l}(outBackprop[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${l}(outBackprop[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${M.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${M.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${l}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = outBackprop[${f}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${M.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${M.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${l}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${w}; i = i + 1) {
          let value = dotProd[i] + ${n?"bias[c+i]":`vec4<${l}>(0.0)`};
          ${N.set("batch","r","c + i","d1","value")};
        }
      }`,L=`
          let outputIndices = ${N.offsetToIndices("global_idx")};
          let batch = ${N.indicesGet("outputIndices",0)};
          let d1 = ${N.indicesGet("outputIndices",f)};
          let r = ${N.indicesGet("outputIndices",c)};
          let c = ${N.indicesGet("outputIndices",m)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / ${$};
          let wOutChannel = d1 - groupId * ${$};
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = ${l}(0.0);
          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {
            if (wR % dilations.x != 0) {
              continue;
            }
            let dyR = (${l}(dyRCorner) + ${l}(wR)) / ${l}(strides[0]);
            let wRPerm = filterDims.x - 1 - wR / dilations.x;
            if (dyR < 0.0 || dyR >= ${l}(outBackprop[${c}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {
              if (wC % dilations.y != 0) {
                continue;
              }
              let dyC = (${l}(dyCCorner) + ${l}(wC)) / ${l}(strides.y);
              let wCPerm = filterDims.y - 1 - wC / dilations.y;
              if (dyC < 0.0 || dyC >= ${l}(outBackprop[${m}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * ${I};
              for (var d2: u32 = 0; d2 < ${I}; d2 = d2 + 1) {
                let xValue = ${i?M.get("batch","idyR","idyC","inputChannel"):M.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${E.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${n?"bias[d1]":`${l}(0.0)`};
          ${N.setByOffset("global_idx","value")};
        `;return`
  ${e.declareVariables(...A,N)}
  ${S}
  const outShape : vec4<u32> = vec4<u32>(${a.join(",")});
  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});
  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});
  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[i?1:2]}, ${r.kernelShape[i?2:3]});
  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});
  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(
          ${r.dilations[0]<=1?0:(r.kernelShape[i?1:2]-1)*(r.dilations[0]-1)},
          ${r.dilations[1]<=1?0:(r.kernelShape[i?2:3]-1)*(r.dilations[1]-1)});
  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,
                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);
    ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes(h)};
  ${u?W:L}}`},va=(e,t,r)=>{let a=e.length>2,n=t.outputShape,o=U.size(n),u=[Math.ceil(o/64),1,1];Re("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let l=Ne(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:i=>pc(i,e,t,n,a,u[1]===1&&u[2]===1,!1,l)}}});var mc,fc,hc,Bs,Ds,gc,yc,bc,wc,Ms,zs=j(()=>{"use strict";Ve();Rs();Ps();Rt();tr();mc=(e,t,r,a,n,o)=>(e-1)*t+r+(a-1)*n+1-o,fc=(e,t,r,a,n)=>{let o=Math.floor(e/2);t==="SAME_UPPER"?(r[a]=o,r[n]=e-o):t==="SAME_LOWER"&&(r[a]=e-o,r[n]=o)},hc=(e,t,r,a,n,o,u,l,i,c)=>{let m=e.length-2,f=c.length===0;if(i.length===0)for(let b=0;b<m;++b)i.push(0);let h=e[0],w=t[l?3:1]*n;for(let b=0,_=e.length-m-(l?1:0);b<m;++b,++_){let I=e[_],$=f?I*u[b]:c[b],S=mc(I,u[b],o[b],t[_],r[b],$);fc(S,a,o,b,b+m),f&&c.push(u[b]*(I-1)+i[b]+(t[_]-1)*r[b]+1-o[b]-o[b+m])}c.splice(0,0,h),c.splice(l?3:1,0,w)},Bs=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((h,w)=>h*w,1)===0){r.length=0;for(let h=2;h<t[1].dims.length;++h)r.push(t[1].dims[h])}let a=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(a?3:1,0,t[1].dims[1]);let n=e.pads.slice(),o=e.outputShape.slice(),u=e.outputPadding.slice(),l=t[0].dims,i=e.dilations.slice();if(i.reduce((h,w)=>h+w,0)===0){let h=t[0].dims.length-2;i=new Array(h).fill(1)}let c=e.strides.slice();if(c.reduce((h,w)=>h+w,0)===0){let h=t[0].dims.length-2;c=new Array(h).fill(1)}hc(l,r,i,e.autoPad,e.group,n,c,a,u,o);let m=Object.assign({},e),f=e.cacheKey+[r.join("n,"),n.join(","),c.join(","),u.join(","),o.join(","),i.join(",")].join("_");return Object.assign(m,{kernelShape:r,pads:n,outputPadding:u,outputShape:o,dilations:i,strides:c,cacheKey:f}),m},Ds=e=>{let t=bn(e),r=e.format,a=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,o=e.group,u=e.kernelShape,l=e.pads,i=e.strides,c=e.wIsConst(),m=e.outputPadding,f=e.outputShape;return ge({autoPad:a,format:r,dilations:n,group:o,kernelShape:u,outputPadding:m,outputShape:f,pads:l,strides:i,wIsConst:c,...t})},gc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],a=e[1].dims[0];if(r!==a)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let o=e[0].dims.length-2;if(t.dilations.reduce((m,f)=>m+f,0)>0&&t.dilations.length!==o)throw new Error(`dilations should be ${o}D`);if(t.strides.reduce((m,f)=>m+f,0)>0&&t.strides.length!==o)throw new Error(`strides should be ${o}D`);if(t.pads.reduce((m,f)=>m+f,0)>0&&t.pads.length!==o*2)throw new Error(`pads should be ${o*2}D`);if(t.outputPadding.length!==o&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${o}D`);if(t.kernelShape.reduce((m,f)=>m+f,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},yc=[2,3,1,0],bc=(e,t,r)=>{let a=Bs(r,t),n=r.format==="NHWC",o=a.outputShape,u=o[n?3:1],l=t[0].dims[n?3:1];if(a.group!==1||u===1&&l===1){e.compute(va(t,a));return}let i=o[n?1:2],c=o[n?2:3],m=t[1].dims[2],f=t[1].dims[3],h=n?i*c:u,w=n?u:i*c,b=m*f*l,_=!0,I=e.kernelCustomData.wT??e.compute(dt(t[1],yc),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=I);let $=[t[0],I],S=t.length===3;S&&(!n&&t[2].dims.length===1?$.push(t[2].reshape([t[2].dims[0],1,1])):$.push(t[2])),e.compute(ks($,a,o,h,w,b,S,_),{inputs:$})},wc=(e,t)=>{let r=t.format==="NHWC",a=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];a.length===3&&a.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let o=t.dilations;(o.length===0||o[0]===0)&&(o=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let l=t.pads;l.length===0&&(l=[0,0]),l=[0,l[0],0,l[1]],u=[1].concat(u),o=[1].concat(o),n=[1].concat(n);let i=Bs({...t,pads:l,strides:u,dilations:o,kernelShape:n},a);e.compute(va(a,i,c=>r?[c[0],c[2],c[3]]:[c[0],c[1],c[3]]))},Ms=(e,t)=>{gc(e.inputs,t),e.inputs[0].dims.length===3?wc(e,t):bc(e,e.inputs,t)}});var vc,Us,Ws,Ns=j(()=>{"use strict";Be();_e();Ve();we();vc=(e,t,r,a)=>{let n=U.size(t),o=t.length,u=z("input",e,o),l=K("output",e,o),i=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),c=U.normalizeAxis(i,o),m=f=>{let h=` i32(${u.indicesGet("inputIndices","uniforms.axis")}) `,w=de("uniforms.input_shape","uniforms.axis",o),b=a.reverse?h+(a.exclusive?" + 1":""):"0",_=a.reverse?w:h+(a.exclusive?"":" + 1");return`
                ${f.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(u,l)}
                ${f.mainStart()}
                  ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${l.offsetToIndices("global_idx")};
                  var sum = ${l.type.value}(0);
                  let first : i32 = ${b};
                  let last : i32 = ${_};
                  for (var i : i32 = first; i < last; i++) {
                    ${u.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${u.getByIndices("inputIndices")};
                  }
                  ${l.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:a.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:"uint32",data:n},{type:"int32",data:c},...q(t),...q(t)]}),getShaderSource:m}},Us=(e,t)=>{let r=e.inputs[0].dims,a=e.inputs[0].dataType,n=e.inputs[1];e.compute(vc(a,r,n,t),{inputs:[0]})},Ws=e=>{let t=e.exclusive===1,r=e.reverse===1;return ge({exclusive:t,reverse:r})}});var $a,xn,Vs,$c,_c,_a,xa,Hs,xc,Ls,Gs,Fs=j(()=>{"use strict";_e();Ve();we();$a="[a-zA-Z]|\\.\\.\\.",xn="("+$a+")+",Vs="^"+xn+"$",$c="("+xn+",)*"+xn,_c="^"+$c+"$",_a=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let a=this.symbolToIndices.get(t);a===void 0?a=[r]:a.push(r),this.symbolToIndices.set(t,a)}},xa=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[a,n]=r.includes("->")?r.split("->",2):[r,""];if(!a.match(RegExp(_c)))throw new Error("Invalid LHS term");if(a.split(",").forEach((l,i)=>{let c=t[i].dims.slice();if(!l.match(RegExp(Vs)))throw new Error("Invalid LHS term");let m=this.processTerm(l,!0,c,i);this.lhs.push(m)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([l,i])=>i.count===1||l==="...").map(([l])=>l).join("");else if(!n.match(RegExp(xn)))throw new Error("Invalid RHS");n.match(RegExp($a,"g"))?.forEach(l=>{if(l==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let i=this.symbolToInfo.get(l);if(i===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(i.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(t,r,a){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(a)}else n={count:1,dimValue:r,inputIndices:[a]};this.symbolToInfo.set(t,n)}processTerm(t,r,a,n=-1){let o=a.length,u=!1,l=[],i=0;if(!t.match(RegExp(Vs))&&!r&&t!=="")throw new Error("Invalid LHS term");let c=t.match(RegExp($a,"g")),m=new _a(n);return c?.forEach((f,h)=>{if(f==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let w=o-c.length+1;if(w<0)throw new Error("Ellipsis out of bounds");if(l=a.slice(i,i+w),this.hasEllipsis){if(this.ellipsisDims.length!==l.length||this.ellipsisDims.toString()!==l.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=l;else throw new Error("Ellipsis must be specified in the LHS");for(let b=0;b<l.length;b++){let _=String.fromCharCode("0".charCodeAt(0)+b);m.addSymbol(_,h+b),this.addSymbol(_,a[i++],n)}}else m.addSymbol(f,h+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(f,a[i++],n)}),m}},Hs=e=>e+"_max",xc=(e,t,r,a,n)=>{let u=t.map((w,b)=>e[b]?w.length:w).map((w,b)=>z(`input${b}`,r,w)),l=U.size(n),i=ke(n.length),c=i?n.length:n,m=K("output",r,c),f=[...a.symbolToInfo.keys()].filter(w=>!a.rhs.symbolToIndices.has(w)),h=w=>{let b=[],_="var prod = 1.0;",I="var sum = 0.0;",$="sum += prod;",S=[],T=[],E=[],M=[],A=a.symbolToInfo.size===a.rhs.symbolToIndices.size;a.symbolToInfo.forEach((W,L)=>{if(a.rhs.symbolToIndices.has(L)){let J=a.rhs.symbolToIndices.get(L)?.[0];J!==void 0&&a.lhs.forEach((B,Y)=>{if(W.inputIndices.includes(Y)){let pe=B.symbolToIndices.get(L);if(pe===void 0)throw new Error("Invalid symbol error");pe.forEach(ee=>{b.push(`${u[Y].indicesSet(`input${Y}Indices`,ee,m.indicesGet("outputIndices",J))}`)})}})}else a.lhs.forEach((J,B)=>{if(W.inputIndices.includes(B)){let Y=J.symbolToIndices.get(L);if(Y===void 0)throw new Error("Invalid symbol error");Y.forEach(pe=>{S.push(`${u[B].indicesSet(`input${B}Indices`,pe,`${L}`)}`)}),M.push(`prod *= ${u[B].getByIndices(`input${B}Indices`)};`)}}),T.push(`for(var ${L}: u32 = 0; ${L} < uniforms.${Hs(L)}; ${L}++) {`),E.push("}")});let N=A?[...b,`let sum = ${u.map((W,L)=>W.getByIndices(`input${L}Indices`)).join(" * ")};`]:[...b,I,...T,...S,_,...M,$,...E];return`
            ${w.registerUniforms(f.map(W=>({name:`${Hs(W)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...u,m)}

            ${w.mainStart()}
            ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${m.offsetToIndices("global_idx")};
            ${u.map((W,L)=>`var input${L}Indices: ${u[L].type.indices};`).join(`
`)}
            ${N.join(`
`)};
            ${m.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:a.equation,inputDependencies:e.map(w=>w?"rank":"dims")},getRunData:()=>{let w=f.filter(_=>a.symbolToInfo.has(_)).map(_=>({type:"uint32",data:a.symbolToInfo.get(_)?.dimValue||0}));w.push({type:"uint32",data:l});let b=t.filter((_,I)=>e[I]).map((_,I)=>[...q(_)]).reduce((_,I)=>_.concat(I),w);return i&&b.push(...q(n)),{outputs:[{dims:n,dataType:r}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:b}},getShaderSource:h}},Ls=(e,t)=>{let r=new xa(e.inputs,t.equation),a=e.inputs.map((u,l)=>ke(u.dims.length)),n=r.outputDims,o=e.inputs.map((u,l)=>u.dims);e.compute(xc(a,o,e.inputs[0].dataType,r,n))},Gs=e=>{let t=e.equation.replace(/\s+/g,"");return ge({equation:t})}});var Sc,qs,Ic,Cc,js,Ks=j(()=>{"use strict";Be();_e();we();Sc=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;a<r.length&&n<t.length;++a,++n)if(r[a]!==t[n]&&r[a]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},qs=(e,t)=>{let r=e.length-t.length,a=[];for(let n=0;n<r;++n)a.push(e[n]);for(let n=0;n<t.length;++n)a.push(t[n]===1?e[n+r]:t[n]);return a},Ic=(e,t)=>e.length>t.length?qs(e,t):qs(t,e),Cc=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),a=Ic(t,r),n=e[0].dataType,o=n===9?4:1,u=Math.ceil(U.size(a)/o),l=ke(t.length),i=ke(a.length),c=f=>{let h=l?t.length:t,w=i?a.length:a,b=z("input",n,h,o),_=K("output",n,w,o),I;if(n===9){let $=(S,T,E="")=>`
          let outputIndices${T} = ${_.offsetToIndices(`outputOffset + ${T}u`)};
          let offset${T} = ${b.broadcastedIndicesToOffset(`outputIndices${T}`,_)};
          let index${T} = offset${T} / 4u;
          let component${T} = offset${T} % 4u;
          ${S}[${T}] = ${E}(${b.getByOffset(`index${T}`)}[component${T}]);
        `;I=`
        let outputOffset = global_idx * ${o};
        var data = vec4<u32>(0);
        ${$("data",0,"u32")}
        ${$("data",1,"u32")}
        ${$("data",2,"u32")}
        ${$("data",3,"u32")}
        ${_.setByOffset("global_idx","data")}
      }`}else I=`
        let outputIndices = ${_.offsetToIndices("global_idx")};
        let inputOffset = ${b.broadcastedIndicesToOffset("outputIndices",_)};
        ${_.setByOffset("global_idx",b.getByOffset("inputOffset"))}
      }`;return`
    ${f.registerUniform("vec_size","u32").declareVariables(b,_)}
    ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${I}`},m=[{type:"uint32",data:u}];return l&&m.push(...q(t)),i&&m.push(...q(a)),{name:"Expand",shaderCache:{hint:`${a.length}`,inputDependencies:[l?"rank":"dims"]},getShaderSource:c,getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:m})}},js=e=>{Sc(e.inputs),e.compute(Cc(e.inputs),{inputs:[0]})}});var Ec,Ac,Ys,Zs,Xs=j(()=>{"use strict";Be();_e();Ve();we();Ec=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Ac=(e,t)=>{let r=e[0].dims,a=e[1].dims,n=r.length,o=U.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(o,1,...a);let l=r[o],i=e[0].dataType===9?4:1,c=Math.ceil(U.size(u)/i),m=ke(e[0].dims.length),f=m?e[0].dims.length:e[0].dims,h=ke(e[1].dims.length),w=h?e[1].dims.length:e[1].dims,b=ke(u.length),_=b?u.length:u,I=[{type:"uint32",data:c},{type:"int32",data:l},{type:"uint32",data:o}];m&&I.push(...q(e[0].dims)),h&&I.push(...q(e[1].dims)),b&&I.push(...q(u));let $=[];$.push(m?"rank":"dims"),$.push(h?"rank":"dims");let S=T=>{let E=z("data",e[0].dataType,f,i),M=z("inputIndices",e[1].dataType,w),A=K("output",e[0].dataType,_,i),N=L=>{let J=a.length,B=`var indicesIndices${L}  = ${M.type.indices}(0);`;for(let Y=0;Y<J;Y++)B+=`${J>1?`indicesIndices${L}[${Y}]`:`indicesIndices${L}`} = ${u.length>1?`outputIndices${L}[uniforms.axis + ${Y}]`:`outputIndices${L}`};`;B+=`
          var idx${L} = ${M.getByIndices(`indicesIndices${L}`)};
          if (idx${L} < 0) {
            idx${L} = idx${L} + uniforms.axisDimLimit;
          }
          var dataIndices${L} = ${E.type.indices}(0);
        `;for(let Y=0,pe=0;Y<n;Y++)Y===o?(B+=`${n>1?`dataIndices${L}[${Y}]`:`dataIndices${L}`} = u32(idx${L});`,pe+=J):(B+=`${n>1?`dataIndices${L}[${Y}]`:`dataIndices${L}`} = ${u.length>1?`outputIndices${L}[${pe}]`:`outputIndices${L}`};`,pe++);return B},W;if(e[0].dataType===9){let L=(J,B,Y="")=>`
          let outputIndices${B} = ${A.offsetToIndices(`outputOffset + ${B}u`)};
          ${N(B)};
          let offset${B} = ${E.indicesToOffset(`dataIndices${B}`)};
          let index${B} = offset${B} / 4u;
          let component${B} = offset${B} % 4u;
          ${J}[${B}] = ${Y}(${E.getByOffset(`index${B}`)}[component${B}]);
        `;W=`
        let outputOffset = global_idx * ${i};
        var value = vec4<u32>(0);
        ${L("value",0,"u32")}
        ${L("value",1,"u32")}
        ${L("value",2,"u32")}
        ${L("value",3,"u32")}
        ${A.setByOffset("global_idx","value")}
      `}else W=`
      let outputIndices = ${A.offsetToIndices("global_idx")};
      ${N("")};
      let value = ${E.getByIndices("dataIndices")};
      ${A.setByOffset("global_idx","value")};
      `;return`
      ${T.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(E,M,A)}
      ${T.mainStart()}
        ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${W}
      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:$},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:I}),getShaderSource:S}},Ys=e=>ge({axis:e.axis}),Zs=(e,t)=>{let r=e.inputs;Ec(r),e.compute(Ac(e.inputs,t))}});var Tc,Oc,Qs,Js,eu=j(()=>{"use strict";_e();Ve();we();Tc=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},Oc=(e,t)=>{let r=e[0].dims,a=e[0].dataType,n=r.length,o=e[1].dims,u=e[1].dataType,l=U.normalizeAxis(t.axis,n),i=r[l],c=o.slice(0),m=U.size(c),f=z("input",a,n),h=z("indicesInput",u,o.length),w=K("output",a,c.length),b=[{type:"uint32",data:m},{type:"int32",data:i},{type:"uint32",data:l}];return b.push(...q(r)),b.push(...q(o)),b.push(...q(c)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:b}),getShaderSource:$=>`
      ${$.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(f,h,w)}
      ${$.mainStart()}
      ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${w.offsetToIndices("global_idx")};

      var idx = ${h.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${f.type.indices}(outputIndices);
      ${f.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${f.getByIndices("inputIndices")};

      ${w.setByOffset("global_idx","value")};
  }`}},Qs=e=>ge({axis:e.axis}),Js=(e,t)=>{let r=e.inputs;Tc(r),e.compute(Oc(e.inputs,t))}});var kc,Rc,tu,ru,nu=j(()=>{"use strict";_e();we();kc=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Rc=(e,t)=>{let r=e[0].dims.slice(),a=e[1].dims.slice(),[n,o,u]=ln.getShapeOfGemmResult(r,t.transA,a,t.transB,e.length===3?e[2].dims:void 0),l=[n,o];if(!l)throw new Error("Can't use gemm on the given tensors");let i=U.size(l),c=[{type:"uint32",data:i},{type:"uint32",data:n},{type:"uint32",data:o},{type:"uint32",data:u},{type:"float32",data:t.alpha},{type:"float32",data:t.beta}],m=["type","type"];e.length===3&&(c.push(...q(e[2].dims)),m.push("rank")),c.push(...q(l));let f=h=>{let w="";t.transA&&t.transB?w="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?w="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?w="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(w="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let b=t.alpha===1?"":"value *= uniforms.alpha;",_=z("a",e[0].dataType,e[0].dims),I=z("b",e[1].dataType,e[1].dims),$=_.type.value,S=null,T=[_,I];e.length===3&&(S=z("c",e[2].dataType,e[2].dims.length),T.push(S));let E=K("output",e[0].dataType,l.length);T.push(E);let M=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${h.registerUniforms(M).declareVariables(...T)}

  ${h.mainStart()}
    ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${$}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${w}
    }

    ${b}
    ${(()=>S!=null?`let cOffset = ${S.broadcastedIndicesToOffset("vec2(m, n)",E)}; value += uniforms.beta * ${S.getByOffset("cOffset")};`:"")()}
    output[global_idx] = value;
  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:m},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:c}),getShaderSource:f}},tu=e=>{let t=e.transA,r=e.transB,a=e.alpha,n=e.beta;return{transA:t,transB:r,alpha:a,beta:n,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},ru=(e,t)=>{kc(e.inputs),e.compute(Rc(e.inputs,t))}});var Pc,Bc,Dc,au,iu=j(()=>{"use strict";Be();_e();we();Pc=(e,t)=>{let r=e[0].dims,a=r,n=2,o=U.sizeToDimension(r,n),u=U.sizeFromDimension(r,n),l=He(u),i=u/l,c=[r[0],r[1],i],m=["rank","type","type"],f=[{type:"uint32",data:u},{type:"uint32",data:i}];f.push(...q(c),...q(c));let h=w=>{let b=z("x",e[0].dataType,c.length,l),_=z("scale",e[1].dataType,e[1].dims),I=z("bias",e[2].dataType,e[2].dims),$=K("output",e[0].dataType,c.length,l),S=[b,_,I,$],T=b.type.value,E=l===1?"f32":`vec${l}<f32>`,M=64,A=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`
  var<workgroup> meanShared : f32;
  var<workgroup> squaredNormShared : f32;
  var<workgroup> workgroupShared : array<${E}, ${M}>;
  const workgroupSize = ${M}u;
  ${w.registerUniforms(A).declareVariables(...S)}
  ${w.mainStart(M)}
    let norm = global_idx / workgroupSize;
    let batch = norm / uniforms.x_shape[1];
    let channel = norm % uniforms.x_shape[1];
    let localIndex = local_id.x;

    // initialize workgroup memory
    var initial = ${E}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      initial = initial + ${E}(${b.get("batch","channel","h")});
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the mean of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      meanShared = ${tt("workgroupShared[0]",l)} / f32(uniforms.normSize);
    }
    workgroupBarrier();

    // reinitialize workgroup memory.
    initial = ${E}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let deviation =  ${E}(${b.get("batch","channel","h")}) - ${E}(meanShared);
      initial = initial + deviation * deviation;
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the sum of square of deviation of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      squaredNormShared = ${tt("workgroupShared[0]",l)};
    }
    workgroupBarrier();

    let invStdDev = 1 / sqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));
    let channelScale = invStdDev * f32(${_.getByOffset("channel")});
    let channelShift = f32(${I.getByOffset("channel")}) - meanShared * channelScale;
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let value = ${b.get("batch","channel","h")} * ${T}(${E}(channelScale)) + ${T}(${E}(channelShift));
      ${$.set("batch","channel","h","value")};
    }
  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${l}`,inputDependencies:m},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:o},programUniforms:f}),getShaderSource:h}},Bc=(e,t,r,a,n,o,u,l)=>{let i=He(u),c=64,m=i===1?"vec2f":`mat2x${i}f`,f=i===1?"f32":`vec${i}f`,h=(A,N)=>`${m}(${A}, ${N})`,w=n*u/i,b=Math.ceil(o/c),_=["type"],I=[{type:"uint32",data:b},{type:"uint32",data:o},{type:"uint32",data:Math.floor(u/i)},{type:"uint32",data:Math.floor(o*u/i)}],$=A=>{let N=z("input",t.dataType,t.dims,i);return`
  ${A.declareVariables(N)}
  @group(0) @binding(1) var<storage, read_write> output : array<${m}>;
  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};
  @group(0) @binding(2) var<uniform> uniforms: Uniforms;

  ${A.mainStart(c)}
    let currentImageNumber = global_idx / ${c} / uniforms.C;
    let currentChannelNumber = (global_idx / ${c}) % uniforms.C;
    let wgId = global_idx % ${c};
    let wgOffset = wgId * uniforms.wg_size;
    if (wgOffset >= uniforms.H) {
        return;
    }
    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);

    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;
    var sum = ${Ye("f32",i)};
    var squaredSum = ${Ye("f32",i)};
    for (var i: u32 = wgOffset; i < wgMax; i++) {
        let value = ${f}(input[offset + i * uniforms.C]);
        sum += value;
        squaredSum += value * value;
    }
    output[global_idx] = ${h("sum","squaredSum")};
  }`},S=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${i}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:[n,u,c,2],dataType:1}],dispatchGroup:{x:n*u/i},programUniforms:I}),getShaderSource:$},{inputs:[t],outputs:[-1]})[0],T=[{type:"uint32",data:w},{type:"uint32",data:o},{type:"uint32",data:Math.floor(u/i)},{type:"uint32",data:Math.floor(c*u/i)}],E=["type","type","type"],M=A=>{let N=z("scale",r.dataType,r.dims,i),W=z("bias",a.dataType,a.dims,i);return`
  @group(0) @binding(0) var<storage, read> input : array<${m}>;
  @group(0) @binding(1) var<storage, read> scale : array<${N.type.storage}>;
  @group(0) @binding(2) var<storage, read> bias : array<${W.type.storage}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${m}>;
  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};
  @group(0) @binding(4) var<uniform> uniforms: Uniforms;

  ${A.mainStart()}
    ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}
    let currentImageNumber = global_idx / uniforms.C;
    let currentChannelNumber = global_idx % uniforms.C;

    let offset = currentImageNumber * uniforms.image_size;
    var sum = ${Ye("f32",i)};
    var squaredSum = ${Ye("f32",i)};
    for (var i: u32 = 0; i < ${c}; i++) {
        let value = input[offset + i + currentChannelNumber * ${c}];
        sum += value[0];
        squaredSum += value[1];
    }
    sum = sum / f32(uniforms.H);
    squaredSum = squaredSum / f32(uniforms.H);
    let invStdDev = 1 / sqrt(squaredSum - sum * sum + f32(${l}));
    let channelScale = invStdDev * ${f}(scale[currentChannelNumber]);
    let channelShift = ${f}(bias[currentChannelNumber]) - sum * channelScale;

    output[global_idx] = ${h("channelScale","channelShift")};
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${i};${l}`,inputDependencies:E},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:T}),getShaderSource:M},{inputs:[S,r,a],outputs:[-1]})[0]},Dc=(e,t,r)=>{let a=t[0].dims,n=a,o=a[0],u=a[a.length-1],l=U.sizeFromDimension(a,1)/u,i=He(u),c=U.size(n)/i,m=[{type:"uint32",data:l},{type:"uint32",data:Math.floor(u/i)}],f=["type","type"],h=Bc(e,t[0],t[1],t[2],o,l,u,r.epsilon),w=b=>{let _=Ne(t[0].dataType),I=i===1?"vec2f":`mat2x${i}f`,$=i===1?_:`vec${i}<${_}>`,S=z("input",t[0].dataType,t[0].dims,i),T=K("output",t[0].dataType,n,i);return`
  @group(0) @binding(0) var<storage, read> input : array<${S.type.storage}>;
  @group(0) @binding(1) var<storage, read> scaleInput : array<${I}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${T.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${b.mainStart()}
    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);
    let currentChannelNumber = global_idx % uniforms.C;

    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;
    let scale = scaleInput[scaleOffset];
    output[global_idx] = fma(input[global_idx], ${$}(scale[0]), ${$}(scale[1]));
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${i}`,inputDependencies:f},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:m}),getShaderSource:w},{inputs:[t[0],h]})},au=(e,t)=>{t.format==="NHWC"?Dc(e,e.inputs,t):e.compute(Pc(e.inputs,t))}});var Mc,zc,ou,su=j(()=>{"use strict";Be();_e();we();Mc=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},zc=(e,t,r)=>{let a=e[0].dims,n=e[1],o=e[2],u=a,l=U.normalizeAxis(t.axis,a.length),i=U.sizeToDimension(a,l),c=U.sizeFromDimension(a,l),m=U.size(n.dims),f=o?U.size(o.dims):0;if(m!==c||o&&f!==c)throw new Error(`Size of X.shape()[axis:] == ${c}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${m} and bias size of ${f}`);let h=[];for(let E=0;E<a.length;++E)E<l?h.push(a[E]):h.push(1);let w=He(c),b=["type","type"],_=[{type:"uint32",data:i},{type:"float32",data:c},{type:"uint32",data:Math.floor(c/w)},{type:"float32",data:t.epsilon}];o&&b.push("type");let I=r>1,$=r>2,S=E=>{let M=Ne(e[0].dataType),A=[z("x",e[0].dataType,e[0].dims,w),z("scale",n.dataType,n.dims,w)];o&&A.push(z("bias",o.dataType,o.dims,w)),A.push(K("output",e[0].dataType,u,w)),I&&A.push(K("mean_data_output",1,h)),$&&A.push(K("inv_std_output",1,h));let N=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${E.registerUniforms(N).declareVariables(...A)}
  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var meanVector = ${Ye("f32",w)};
    var meanSquareVector = ${Ye("f32",w)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${lt(M,w,"x[h + offset]")};
      meanVector += value;
      meanSquareVector += value * value;
    }
    let mean = ${tt("meanVector",w)} / uniforms.norm_size;
    let meanSquare = sqrt(${tt("meanSquareVector",w)}
      / uniforms.norm_size - mean * mean + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${lt(M,w,"x[j + offset]")};
      let f32scale = ${lt(M,w,"scale[j]")};
      output[j + offset] = ${A[0].type.value}((f32input - mean) / meanSquare * f32scale
        ${o?`+ ${lt(M,w,"bias[j]")}`:""}
      );
    }

    ${I?"mean_data_output[global_idx] = mean":""};
    ${$?"inv_std_output[global_idx] = 1 / meanSquare":""};
  }`},T=[{dims:u,dataType:e[0].dataType}];return I&&T.push({dims:h,dataType:1}),$&&T.push({dims:h,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${w};${r}`,inputDependencies:b},getRunData:()=>({outputs:T,dispatchGroup:{x:Math.ceil(i/64)},programUniforms:_}),getShaderSource:S}},ou=(e,t)=>{Mc(e.inputs),e.compute(zc(e.inputs,t,e.outputCount))}});var Uc,lu,uu,Wc,Sa,du,cu=j(()=>{"use strict";_e();Ve();sn();da();we();tr();Uc=(e,t)=>{let r=e[0],a=e[1],n=e[2],o=e[3],u=e[4],l=e[5],i=e[6],c=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let m=!1,f=r.dims[0],h=r.dims[1],w=r.dims.length===3?m?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],b=h,_=0,I=0,$=Math.floor(w/t.numHeads);if(i&&c){if(i.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(c.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');_=i.dims[2],I=i.dims[2]}else if(i||c)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let S;if(a){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(a.dims.length<3||a.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==a.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(a.dims.length===3){if(a.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');S=2,b=a.dims[1]}else if(a.dims.length===5){if(a.dims[2]!==t.numHeads||a.dims[3]!==2||a.dims[4]!==$)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(n)throw new Error('Expect "value" be none when "key" has packed kv format.');S=5,b=a.dims[1]}else{if(a.dims[1]!==t.numHeads||a.dims[3]!==$)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');S=0,b=a.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');S=3}if(o){if(o.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let T=0;if(u){T=8;let W=u.dims;throw W.length===1?W[0]===f?T=1:W[0]===3*f+2&&(T=3):W.length===2&&W[0]===f&&W[1]===b&&(T=5),T===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error("Mask not supported")}let E=!1,M=w;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(n.dims.length===3){if(b!==n.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');M=n.dims[2]}else{if(b!==n.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');M=n.dims[1]*n.dims[3],E=!0}}let A=_+b,N=!1;if(u)throw new Error("Key padding mask is not supported");if(l)throw new Error("extraAddQk is not supported");if(i)throw new Error("pastKey is not supported");if(c)throw new Error("pastValue is not supported");return{batchSize:f,sequenceLength:h,pastSequenceLength:_,kvSequenceLength:b,totalSequenceLength:A,maxSequenceLength:I,inputHiddenSize:0,hiddenSize:w,vHiddenSize:M,headSize:$,vHeadSize:Math.floor(M/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:T,scale:t.scale,broadcastResPosBias:N,passPastInKv:E,qkvFormat:S}},lu=e=>ge({...e}),uu=ge({perm:[0,2,1,3]}),Wc=(e,t,r,a,n,o,u)=>{let l=[a,n,o],i=U.size(l),c=[{type:"uint32",data:i},{type:"uint32",data:u},{type:"uint32",data:o}],m=f=>{let h=K("qkv_with_bias",t.dataType,l),w=z("qkv",t.dataType,l),b=z("bias",r.dataType,l),_=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${f.registerUniforms(_).declareVariables(w,b,h)}
  ${f.mainStart()}
    ${f.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:l,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:c}),getShaderSource:m},{inputs:[t,r],outputs:[-1]})[0]},Sa=(e,t,r,a,n,o,u,l)=>{let i=o;if(u){if(a===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return i=Wc(e,o,u,t,a,r*n,l),i=i.reshape([t,a,r,n]),e.compute(dt(i,uu.perm),{inputs:[i],outputs:[-1]})[0]}else return o.dims.length===3&&(i=o.reshape([t,a,r,n])),e.compute(dt(i,uu.perm),{inputs:[i],outputs:[-1]})[0]},du=(e,t)=>{let r=Uc(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let a=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=Sa(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(a)return hn(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let o=Sa(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),u=Sa(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);hn(e,n,o,u,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Nc,Vc,Hc,Lc,Gc,Fc,qc,jc,pu,mu=j(()=>{"use strict";Be();_e();we();Nc=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Vc=(e,t,r)=>{let a="";for(let n=t-1;n>=0;--n)a+=`
            k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${de("uniforms.x_shape",n,t)})) {
              break;
            }
            offset += k * i32(${de("uniforms.x_strides",n,t)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${a}
            value = x[offset];
          }
      `},Hc=(e,t,r)=>{let a="";for(let n=t-1;n>=0;--n)a+=`
                k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${de("uniforms.x_shape",n,t)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${de("uniforms.x_shape",n,t)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${de("uniforms.x_strides",n,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${a}
              value = x[offset];
          `},Lc=(e,t,r)=>{let a="";for(let n=t-1;n>=0;--n)a+=`
                k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${de("uniforms.x_shape",n,t)})) {
                  k = i32(${de("uniforms.x_shape",n,t)}) - 1;
                }
                offset += k * i32(${de("uniforms.x_strides",n,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${a}
              value = x[offset];
          `},Gc=(e,t,r)=>{let a="";for(let n=t-1;n>=0;--n)a+=`
                k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};
                if (k < 0)  {
                  k += i32(${de("uniforms.x_shape",n,t)}]);
                }
                if (k >= i32(${de("uniforms.x_shape",n,t)})) {
                  k -= i32(${de("uniforms.x_shape",n,t)});
                }
                offset += k * i32(${de("uniforms.x_strides",n,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${a}
              value = x[offset];
          `},Fc=(e,t,r)=>{switch(r.mode){case 0:return Vc(e,t,r.pads.length);case 1:return Hc(e,t,r.pads.length);case 2:return Lc(e,t,r.pads.length);case 3:return Gc(e,t,r.pads.length);default:throw new Error("Invalid mode")}},qc=(e,t)=>{let r=U.padShape(e[0].dims.slice(),t.pads),a=e[0].dims,o=[{type:"uint32",data:U.size(r)},{type:"uint32",data:t.pads}];if(t.mode===0){let i=et(e[0].dataType);o.push({type:i,data:t.value})}o.push(...q(e[0].dims),...q(r));let u=["rank"],l=i=>{let c=K("output",e[0].dataType,r.length),m=z("x",e[0].dataType,a.length),f=m.type.value,h=Fc(c,a.length,t),w=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&w.push({name:"constant_value",type:f}),`
            ${i.registerUniforms(w).declareVariables(m,c)}
            ${i.mainStart()}
            ${i.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${c.offsetToIndices("global_idx")};

            var value = ${f}(0);
            ${h}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(U.size(r)/64)},programUniforms:o}),getShaderSource:l}},jc=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),a=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,o=new Int32Array(2*n).fill(0);if(e.length>=4){let l=e[3].getBigInt64Array();for(let i=0;i<l.length;i++)o[Number(l[i])]=Number(r[i]),o[Number(l[i])+n]=Number(r[i+l.length])}else r.forEach((l,i)=>o[Number(i)]=Number(l));let u=[];return o.forEach(l=>u.push(l)),{mode:t.mode,value:a,pads:u}}else return t},pu=(e,t)=>{Nc(e.inputs);let r=jc(e.inputs,t);e.compute(qc(e.inputs,r),{inputs:[0]})}});var Sn,fu,hu,gu,yu,Kc,Yc,bu,wu,vu,$u,_u,xu,Su,Iu,Cu,Eu,Au,Tu,Ou=j(()=>{"use strict";ot();_e();we();Sn=e=>{if(Ee.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},fu=(e,t,r)=>{let a=t.format==="NHWC",n=e.dims.slice();a&&n.splice(1,0,n.pop());let o=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),l=t.strides.slice(),i=o?t.dilations.slice():[],c=t.pads.slice();Lt.adjustPoolAttributes(r,n,u,l,i,c);let m=Lt.computePoolOutputShape(r,n,l,i,u,c,t.autoPad),f=Object.assign({},t);o?Object.assign(f,{kernelShape:u,strides:l,pads:c,dilations:i,cacheKey:t.cacheKey}):Object.assign(f,{kernelShape:u,strides:l,pads:c,cacheKey:t.cacheKey});let h=m.slice();return h.push(h.splice(1,1)[0]),[f,a?h:m]},hu=(e,t)=>{let r=t.format==="NHWC",a=U.size(e),n=U.size(t.kernelShape),o=[{type:"uint32",data:a},{type:"uint32",data:n}],u=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let l=t.kernelShape[t.kernelShape.length-1],i=t.strides[t.strides.length-1],c=t.pads[t.pads.length/2-1],m=t.pads[t.pads.length-1],f=!!(c+m);o.push({type:"uint32",data:l},{type:"uint32",data:i},{type:"uint32",data:c},{type:"uint32",data:m}),u.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let h=!1;if(t.kernelShape.length===2){let w=t.kernelShape[t.kernelShape.length-2],b=t.strides[t.strides.length-2],_=t.pads[t.pads.length/2-2],I=t.pads[t.pads.length-2];h=!!(_+I),o.push({type:"uint32",data:w},{type:"uint32",data:b},{type:"uint32",data:_},{type:"uint32",data:I}),u.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[o,u,!0,f,h]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let l=U.computeStrides(t.kernelShape);o.push({type:"uint32",data:l},{type:"uint32",data:t.pads},{type:"uint32",data:t.strides}),u.push({name:"kernelStrides",type:"u32",length:l.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let i=t.pads.reduce((c,m)=>c+m);return[o,u,!!i,!1,!1]}},gu=(e,t,r,a,n,o,u,l,i,c,m,f)=>{let h=n.format==="NHWC",w=t.type.value,b=K("output",t.type.tensor,a);if(n.kernelShape.length<=2){let _="",I="",$="",S=r-(h?2:1);if(m?_=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${S}] = indices[${S}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${S}] < 0 || xIndices[${S}]
                      >= uniforms.x_shape[${S}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${o}
                }`:_=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${S}] = indices[${S}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${o}
                }`,n.kernelShape.length===2){let E=r-(h?3:2);f?I=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${E}] < 0 || xIndices[${E}] >= uniforms.x_shape[${E}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:I=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;
                `,$=`
              }
            `}return`
            ${e.registerUniforms(i).declareVariables(t,b)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${b.offsetToIndices("global_idx")};
              var xIndices = ${b.offsetToIndices("global_idx")};

              var value = ${w}(${l});
              var pad = 0;
              ${I}
              ${_}
              ${$}
              ${u}

              output[global_idx] = value;
            }`}else{if(h)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let _=n.kernelShape.length,I=n.pads.length,$="";return c?$=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${o}
              }`:$=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${o}
            `,`
            ${e.registerUniforms(i).declareVariables(t,b)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${b.offsetToIndices("global_idx")};
              var xIndices = ${b.offsetToIndices("global_idx")};

              var offsets: array<u32, ${_}>;

              var value = ${w}(${l});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${_-1}u; j++) {
                  offsets[j] = offset / ${de("uniforms.kernelStrides","j",_)};
                  offset -= offsets[j] * ${de("uniforms.kernelStrides","j",_)};
                }
                offsets[${_-1}] = offset;

                isPad = false;
                for (var j = ${r-_}u; j < ${r}u; j++) {
                  xIndices[j] = indices[j] * ${de("uniforms.strides",`j - ${r-_}u`,_)}
                    + offsets[j - ${r-_}u] - ${de("uniforms.pads","j - 2u",I)};
                  ${$}
              }
              ${u}

              output[global_idx] = value;
            }`}},yu=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,Kc=e=>`${yu(e)};${e.countIncludePad}`,Yc=e=>`${yu(e)};${e.storageOrder};${e.dilations}`,bu=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),wu=(e,t,r,a)=>{let[n,o]=fu(t,a,r),u=z("x",t.dataType,t.dims.length),l=u.type.value,i="value += x_val;",c="";n.countIncludePad?c+=`value /= ${l}(uniforms.kernelSize);`:c+=`value /= ${l}(i32(uniforms.kernelSize) - pad);`;let[m,f,h,w,b]=hu(o,n);m.push(...q(t.dims),...q(o));let _=["rank"];return{name:e,shaderCache:{hint:`${a.cacheKey};${h};${w};${b}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:o,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(U.size(o)/64)},programUniforms:m}),getShaderSource:I=>gu(I,u,t.dims.length,o.length,n,i,c,0,f,h,w,b)}},vu=e=>{let t=e.count_include_pad!==0,r=bu(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let a={countIncludePad:t,...r,cacheKey:""};return{...a,cacheKey:Kc(a)}},$u=(e,t)=>{Sn(e.inputs),e.compute(wu("AveragePool",e.inputs[0],!1,t))},_u={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},xu=e=>{let t=e.format;return{format:t,..._u,cacheKey:t}},Su=(e,t)=>{Sn(e.inputs),e.compute(wu("GlobalAveragePool",e.inputs[0],!0,t))},Iu=(e,t,r,a)=>{let[n,o]=fu(t,a,r),u=`
      value = max(x_val, value);
    `,l="",i=z("x",t.dataType,t.dims.length),c=["rank"],[m,f,h,w,b]=hu(o,n);return m.push(...q(t.dims),...q(o)),{name:e,shaderCache:{hint:`${a.cacheKey};${h};${w};${b}`,inputDependencies:c},getRunData:()=>({outputs:[{dims:o,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(U.size(o)/64)},programUniforms:m}),getShaderSource:_=>gu(_,i,t.dims.length,o.length,n,u,l,-1e5,f,h,w,b)}},Cu=(e,t)=>{Sn(e.inputs),e.compute(Iu("MaxPool",e.inputs[0],!1,t))},Eu=e=>{let t=e.storage_order,r=e.dilations,a=bu(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(a.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let n={storageOrder:t,dilations:r,...a,cacheKey:""};return{...n,cacheKey:Yc(n)}},Au=e=>{let t=e.format;return{format:t,..._u,cacheKey:t}},Tu=(e,t)=>{Sn(e.inputs),e.compute(Iu("GlobalMaxPool",e.inputs[0],!0,t))}});var Xc,Qc,ku,Ru=j(()=>{"use strict";ot();Be();we();Xc=(e,t,r)=>{let a=e===t,n=e<t&&r<0,o=e>t&&r>0;if(a||n||o)throw new Error("Range these inputs' contents are invalid.")},Qc=(e,t,r,a)=>{let n=Math.abs(Math.ceil((t-e)/r)),o=[n],u=n,l=et(a),i=[{type:"uint32",data:u},{type:l,data:e},{type:l,data:r},...q(o)],c=m=>{let f=K("output",a,o.length),h=f.type.value,w=[{name:"outputSize",type:"u32"},{name:"start",type:h},{name:"delta",type:h}];return`
        ${m.registerUniforms(w).declareVariables(f)}
        ${m.mainStart()}
        ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${h}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${a}`},getShaderSource:c,getRunData:()=>({outputs:[{dims:o,dataType:a}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:i})}},ku=e=>{let t=0,r=0,a=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],a=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],a=e.inputs[2].getFloat32Array()[0]),Ee.webgpu.validateInputContent&&Xc(t,r,a),e.compute(Qc(t,r,a,e.inputs[0].dataType),{inputs:[]})}});var Jc,ep,tp,rp,np,ap,ip,op,sp,up,lp,Pu,dp,cp,pp,mp,fp,Bu,Du,Mu=j(()=>{"use strict";_e();Ve();we();Jc=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},ep=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let a=new Array(r).fill(1);return t.forEach((n,o)=>a[n]=e[o]),a},tp=(e,t,r,a,n,o)=>{let[u,l,i]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],c=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(m=>o.push(m));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(l>0&&e.length>l&&e[l].dims.length>0){if(e[l].getFloat32Array().forEach(m=>a.push(m)),a.length!==0&&a.length!==c&&r>=18&&a.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");Jc(a,t),t.axes.length>0&&ep(a,t.axes,c).forEach((m,f)=>a[f]=m)}if(i>0&&e.length>i&&(e[i].getBigInt64Array().forEach(m=>n.push(Number(m))),n.length!==c||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(a.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(n.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof a<"u"&&typeof n<"u"&&a.length>0&&n.length>c)throw new Error("Resize requires only of scales or sizes to be specified")},rp=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: ${t}, lengthResized: u32,
     lengthOriginal: u32, roiStart: ${t}, roiEnd: ${t}) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / xScale;`;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${t}(xResized) + 0.5) / xScale - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / xScale;`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating
                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
                    // offset-by-one error later in floor().
                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));
                    let fract =
                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);
                    return whole + fract;
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return roiStart * ${t}(lengthOriginal - 1) +
                        (${t}(xResized) * (roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /
                        ${t}(lengthResized - 1);
                  } else {
                    return 0.5 * (roiStart + roiEnd) * ${t}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = xScale * ${t}(lengthResized);
                  const adjustment = ${t}(lengthResized) / outputWidth;
                  const center = ${t}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${t}(xResized) + 0.5) / xScale) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / xScale) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",np=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",ap=(e,t,r)=>{let a=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?a:e.slice();return t.length>0?(t.forEach((o,u)=>{a[o]=n[u],a[u+r]=n[t.length+u]}),a):n},ip=(e,t,r,a)=>{let n=[];if(r.length>0)if(a.length>0){if(e.forEach(o=>n.push(o)),Math.max(...a)>e.length)throw new Error("axes is out of bound");a.forEach((o,u)=>n[o]=r[u])}else r.forEach(o=>n.push(o));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((o,u)=>Math.round(o*t[u]))}return n},op=(e,t,r)=>{let a=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(o=>t[o]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(o=>t[o]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(o=>t[o]=a),r.axes.forEach(o=>n[o]=Math.round(e[o]*t[o]))):(t.fill(a,0,t.length),n.forEach((o,u)=>n[u]=Math.round(o*t[u]))),n},sp=(e,t,r,a,n)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      var original_indices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${de("uniforms.scales","i",a)};
        var roi_low = ${de("uniforms.roi","i",n)};
        var roi_hi = ${de("uniforms.roi",`i + ${t.length}`,n)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${de("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${de("uniforms.output_shape","i",r.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,up=(e,t,r,a,n,o,u)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${a.length}; i++) {
        var output_index = ${t.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${de("uniforms.scales","i",n)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${de("uniforms.roi","i",o)};
          var roi_hi = ${de("uniforms.roi",`i + ${r.length}`,o)};
          var input_shape_i = ${de("uniforms.input_shape","i",r.length)};
          var output_shape_i = ${de("uniforms.output_shape","i",a.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${u} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i"," input_index")}
      }
      return input_indices;
    }`,lp=(e,t)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${de("uniforms.input_shape","i",t.length)}) {
          return false;
        }
      }
      return true;
    }`,Pu=(e,t,r,a)=>e.rank>a?`
    ${e.indicesSet("input_indices",t,"channel")};
    ${e.indicesSet("input_indices",r,"batch")};
`:"",dp=(e,t,r,a,n)=>{let[u,l,i,c]=r.length===2?[-1,0,1,-1]:[0,2,3,1],m=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${m} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",l,`max(0, min(row, ${r[l]} - 1))`)};
      ${e.indicesSet("input_indices",i,`max(0, min(col, ${r[i]} - 1))`)};
      ${Pu(e,c,u,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${m} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${m} = originalIndices[${l}];
      var col:${m} = originalIndices[${i}];
      ${a?`if (row < 0 || row > (${r[l]} - 1) || col < 0 || col > (${r[i]} - 1)) {
        return ${n};
      }`:""};
      row = max(0, min(row, ${r[l]} - 1));
      col = max(0, min(col, ${r[i]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${r.length>2?`u32(originalIndices[${c}])`:"0"};
      var batch: u32 =  ${r.length>2?`u32(originalIndices[${u}])`:"0"};
      var x11: ${m} = getInputValue(batch, channel, row1, col1);
      var x12: ${m} = getInputValue(batch, channel, row1, col2);
      var x21: ${m} = getInputValue(batch, channel, row2, col1);
      var x22: ${m} = getInputValue(batch, channel, row2, col2);
      var dx1: ${m} = abs(row - ${m}(row1));
      var dx2: ${m} = abs(${m}(row2) - row);
      var dy1: ${m} = abs(col - ${m}(col1));
      var dy2: ${m} = abs(${m}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},cp=(e,t,r,a,n,o,u,l,i,c)=>{let m=r.length===2,f=!0,[h,w]=m?[0,1]:f?[2,3]:[1,2],b=e.type.value,_=I=>{let $=I===h?"row":"col";return`
      fn ${$}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${b} {
        var output_index = ${t.indicesGet("output_indices",I)};
        var originalIdx: ${b} = getOriginalCoordinateFromResizedCoordinate(output_index, ${n[I]},
        ${a[I]}, ${r[I]}, ${o[I]}, ${o[I]} + ${r.length});
        var fractOriginalIdx: ${b} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${l} && (originalIdx < 0 || originalIdx > (${r[I]} - 1))) {
          return ${i};
        }
        var data: array<${b}, 4> = array<${b}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${$}: ${b} = originalIdx + ${b}(i);
          if (${$} < 0 || ${$} >= ${r[I]}) {
            ${(()=>c?`coefs[i + 1] = 0.0;
                        continue;`:l?`return ${i};`:`${$} = max(0, min(${$}, ${r[I]} - 1));`)()};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",I,`u32(${$})`)};
          data[i + 1] = ${I===h?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${_(h)};
    ${_(w)};
  fn getCubicInterpolationCoefs(s: ${b}) -> array<${b}, 4> {
    var absS = abs(s);
    var coeffs: array<${b}, 4> = array<${b}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${b} = 1.0 - absS;
    var twoMinusAbsS: ${b} = 2.0 - absS;
    var onePlusAbsS: ${b} = 1.0 + absS;
    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};
    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;
    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${b}, 4>, coefs: array<${b}, 4>) -> ${b} {
    var coefsSum: ${b} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${b} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},pp=(e,t,r,a,n)=>{let[u,l,i,c,m]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],f=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${f} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",l,`max(0, min(depth, ${r[l]} - 1))`)};
      ${e.indicesSet("input_indices",i,`max(0, min(height, ${r[i]} - 1))`)};
      ${e.indicesSet("input_indices",c,`max(0, min(width, ${r[c]} - 1))`)};
      ${Pu(e,m,u,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${f} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${f} = originalIndices[${l}];
      var height:${f} = originalIndices[${i}];
      var width:${f} = originalIndices[${c}];
      ${a?`if (depth < 0 || depth > (${r[l]} - 1) || height < 0 || height > (${r[i]} - 1) || width < 0 || (width > ${r[c]} - 1)) {
      return ${n};
        }`:""};

    depth = max(0, min(depth, ${r[l]} - 1));
      height = max(0, min(height, ${r[i]} - 1));
      width = max(0, min(width, ${r[c]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${r.length>3?`u32(originalIndices[${m}])`:"0"};
      var batch: u32 =  ${r.length>3?`u32(originalIndices[${u}])`:"0"};

      var x111: ${f} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${f} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${f} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${f} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${f} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${f} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${f} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${f} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${f} = abs(depth - ${f}(depth1));
      var dx2: ${f} = abs(${f}(depth2) - depth);
      var dy1: ${f} = abs(height - ${f}(height1));
      var dy2: ${f} = abs(${f}(height2) - height);
      var dz1: ${f} = abs(width - ${f}(width1));
      var dz2: ${f} = abs(${f}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},mp=(e,t,r,a,n,o)=>{let u=e.dims,l=ap(o,t.axes,u.length),i=ip(u,a,n,t.axes),c=a.slice();a.length===0&&(c=u.map((S,T)=>S===0?1:i[T]/S),t.keepAspectRatioPolicy!=="stretch"&&(i=op(u,c,t)));let m=K("output",e.dataType,i.length),f=z("input",e.dataType,u.length),h=U.size(i),w=u.length===i.length&&u.every((S,T)=>S===i[T]),b=t.coordinateTransformMode==="tf_crop_and_resize",_=t.extrapolationValue,I=f.type.value,$=S=>`
      ${w?"":`
      ${rp(t.coordinateTransformMode,I)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${lp(f,u)};
              ${np(t.nearestMode,r,I)};
              ${up(f,m,u,i,c.length,l.length,b)};
              `;case"linear":return`
              ${sp(m,u,i,c.length,l.length)};
              ${(()=>{if(u.length===2||u.length===4)return`${dp(f,m,u,b,_)}`;if(u.length===3||u.length===5)return`${pp(f,m,u,b,_)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(u.length===2||u.length===4)return`${cp(f,m,u,i,c,l,t.cubicCoeffA,b,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${S.registerUniform("output_size","u32").registerUniform("scales","f32",c.length).registerUniform("roi","f32",l.length).declareVariables(f,m)}
      ${S.mainStart()}
        ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${w?"output[global_idx] = input[global_idx];":`
        let output_indices = ${m.offsetToIndices("global_idx")};
        var input_indices: ${f.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${f.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${u.length===2||u.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${c.length>0?c:""}|${n.length>0?n:""}|${l.length>0?l:""}|${w}|${u}`,inputDependencies:["rank"]},getShaderSource:$,getRunData:()=>({outputs:[{dims:i,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:[{type:"uint32",data:h},{type:"float32",data:c},{type:"float32",data:l},...q(u),...q(i)]})}},fp=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Bu=(e,t)=>{let r=[],a=[],n=[],o=fp(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");tp(e.inputs,t,o,r,a,n),e.compute(mp(e.inputs[0],t,o,r,a,n),{inputs:[0]})},Du=e=>{let t=e.antialias,r=e.axes,a=e.coordinateTransformMode,n=e.cubicCoeffA,o=e.excludeOutside!==0,u=e.extrapolationValue,l=e.keepAspectRatioPolicy,i=e.mode,c=e.nearestMode===""?"simple":e.nearestMode;return ge({antialias:t,axes:r,coordinateTransformMode:a,cubicCoeffA:n,excludeOutside:o,extrapolationValue:u,keepAspectRatioPolicy:l,mode:i,nearestMode:c})}});var hp,gp,zu,Uu,Wu=j(()=>{"use strict";Be();_e();Ve();we();hp=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],a=e[2];if(t.dataType!==r.dataType||t.dataType!==a.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],o=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==o)throw new Error("Skip must have the same sequence length as input");if(a.dims.length!==1)throw new Error("Gamma must be 1D");if(a.dims[a.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},gp=(e,t,r,a)=>{let n=e[0].dims,o=U.size(n),u=n,l=o,i=n.slice(-1)[0],c=a?n.slice(0,-1).concat(1):[],m=e.length>3,f=e.length>4,h=a&&r>1,w=a&&r>2,b=r>3,_=He(i),I=[z("x",e[0].dataType,e[0].dims,_),z("skip",e[1].dataType,e[1].dims,_),z("gamma",e[2].dataType,e[2].dims,_)];m&&I.push(z("beta",e[3].dataType,e[3].dims,_)),f&&I.push(z("bias",e[4].dataType,e[4].dims,_)),I.push(K("output",e[0].dataType,u,_)),h&&I.push(K("meanOutput",1,c)),w&&I.push(K("invStdOutput",1,c)),b&&I.push(K("inputSkipBiasSum",e[0].dataType,u,_));let $=Ne(e[0].dataType),S=E=>`
      const hiddenSize: f32 = ${i};
      const hiddenSizeVectorized: u32 = ${i/_};
      const epsilon: f32 = ${t.epsilon};

      ${E.declareVariables(...I)}

      ${E.mainStart()}
        ${E.guardAgainstOutOfBoundsWorkgroupSizes(l/i)}
        let offset = global_idx * hiddenSizeVectorized;
        var sum = ${Ye("f32",_)};
        var squareSum = ${Ye("f32",_)};
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          let skipValue = skip[offset + i];
          let biasValue = ${f?"bias[i]":"0.0"};
          let inputValue = x[offset + i];
          let value = inputValue + skipValue + biasValue;
          ${b?"inputSkipBiasSum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32Value = ${lt($,_,"value")};
          sum += f32Value;
          squareSum += f32Value * f32Value;
        }
        let mean = ${tt("sum",_)} / hiddenSize;
        let variance = sqrt(${tt("squareSum",_)} / hiddenSize - mean * mean + epsilon);
        ${h?"meanOutput[global_idx] = mean;":""}
        ${w?"invStdOutput[global_idx] = 1.0 / variance;":""}
        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {
          output[offset + i] = (output[offset + i] - ${$}(mean)) / ${$}(variance) * gamma[i]
           + ${m?"beta[i]":"0.0"};
        }
      }`,T=[{dims:u,dataType:e[0].dataType}];return r>1&&T.push({dims:c,dataType:1}),r>2&&T.push({dims:c,dataType:1}),r>3&&T.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:S,getRunData:()=>({outputs:T,dispatchGroup:{x:Math.ceil(l/i/64)}})}},zu=(e,t)=>{hp(e.inputs);let a=[0];e.outputCount>1&&a.push(-3),e.outputCount>2&&a.push(-3),e.outputCount>3&&a.push(3),e.compute(gp(e.inputs,t,e.outputCount,!1),{outputs:a})},Uu=e=>{let t=e.epsilon;return ge({epsilon:t})}});var yp,In,bp,Nu,wp,vp,Vu,Hu,Lu=j(()=>{"use strict";Be();_e();Ve();we();yp=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,a)=>{if(e[a+1].dataType!==6&&e[a+1].dataType!==7)throw new Error(`Input ${a} must be an array of int32 or int64`)})},In=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(a=>r.push(Number(a)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(a=>r.push(Number(a)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},bp=(e,t)=>{if(e.length>1){let r=In(e,1),a=In(e,2),n=In(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),ge({starts:r,ends:a,axes:n})}else return t},Nu=(e,t,r,a,n)=>{let o=e;return e<0&&(o+=r[a[t]]),n[t]<0?Math.max(0,Math.min(o,r[a[t]]-1)):Math.max(0,Math.min(o,r[a[t]]))},wp=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${de("uniforms.input_shape","i",r.length)};
            let steps_i = ${de("uniforms.steps","i",r.length)};
            let signs_i = ${de("uniforms.signs","i",r.length)};
            let starts_i = ${de("uniforms.starts","i",r.length)};
            var output_index = ${t.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,vp=(e,t)=>{let r=e[0].dims,a=U.size(r),n=t.axes.length>0?U.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],o=In(e,4);o.forEach($=>$!==0||(()=>{throw new Error("step cannot be 0")})),o.length===0&&(o=Array(n.length).fill(1));let u=t.starts.map(($,S)=>Nu($,S,r,n,o)),l=t.ends.map(($,S)=>Nu($,S,r,n,o));if(n.length!==u.length||n.length!==l.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let $=0;$<r.length;++$)n.includes($)||(u.splice($,0,0),l.splice($,0,r[$]),o.splice($,0,1));let i=o.map($=>Math.sign($));o.forEach(($,S,T)=>{if($<0){let E=(l[S]-u[S])/$,M=u[S],A=M+E*o[S];u[S]=A,l[S]=M,T[S]=-$}});let c=r.slice(0);n.forEach(($,S)=>{c[$]=Math.ceil((l[$]-u[$])/o[$])});let m={dims:c,dataType:e[0].dataType},f=K("output",e[0].dataType,c.length),h=z("input",e[0].dataType,e[0].dims.length),w=U.size(c),b=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:u.length},{name:"signs",type:"i32",length:i.length},{name:"steps",type:"u32",length:o.length}],_=[{type:"uint32",data:w},{type:"uint32",data:u},{type:"int32",data:i},{type:"uint32",data:o},...q(e[0].dims),...q(c)],I=$=>`
      ${$.registerUniforms(b).declareVariables(h,f)}
        ${wp(h,f,r)}
        ${$.mainStart()}
          ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${f.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${f.setByOffset("global_idx",h.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${i.length}_${u.length}_${o.length}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[m],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:_})}},Vu=(e,t)=>{yp(e.inputs,t);let r=bp(e.inputs,t);e.compute(vp(e.inputs,r),{inputs:[0]})},Hu=e=>{let t=e.starts,r=e.ends,a=e.axes;return ge({starts:t,ends:r,axes:a})}});var $p,_p,Gu,Fu,qu=j(()=>{"use strict";_e();Ve();we();$p=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},_p=(e,t)=>{let r=e.dims,a=U.size(r),n=64,o=t.axis;if(o<0&&(o=r.length+o),o<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[o],l=a/u,i=He(u),c=u/i,m=(I,$)=>$===4?`max(max(${I}.x, ${I}.y), max(${I}.z, ${I}.w))`:$===2?`max(${I}.x, ${I}.y)`:$===3?`max(max(${I}.x, ${I}.y), ${I}.z)`:I,f=z("x",e.dataType,e.dims,i),h=K("result",e.dataType,e.dims,i),w=f.type.value,b=Ne(e.dataType)==="f32"?`var threadMax = ${w}(-3.402823e+38f);`:`var threadMax = ${w}(-65504.0h);`,_=I=>`
      var<workgroup> rowMaxShared : ${w};
      var<workgroup> rowSumShared : ${w};
      var<workgroup> threadShared : array<${w}, ${n}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${w} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${w}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${I.registerUniform("packedCols","i32").declareVariables(f,h)}
      ${I.mainStart()}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${n};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${b}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${w}(${m("threadShared[0]",i)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${w}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${w}(${tt("threadShared[0]",i)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`;return{name:"Softmax",shaderCache:{hint:`${i}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:l},programUniforms:[{type:"uint32",data:c}]}),getShaderSource:_}},Gu=(e,t)=>{$p(e.inputs),e.compute(_p(e.inputs[0],t))},Fu=e=>ge({axis:e.axis})});var xp,Sp,Ip,Cp,Ep,ju,Ku,Yu=j(()=>{"use strict";_e();Ve();we();xp=e=>{if(!e||e.length<1)throw new Error("too few inputs")},Sp=(e,t)=>{let r=[],a=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),a=r.length),ge({numOutputs:a,axis:t.axis,splitSizes:r})},Ip=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${de("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,Cp=e=>{let t=e.length,r=[];for(let a=0;a<t;++a){let n=e[a].setByIndices("indices","input[global_idx]");t===1?r.push(n):a===0?r.push(`if (output_number == ${a}u) { ${n} }`):a===t-1?r.push(`else { ${n} }`):r.push(`else if (output_number == ${a}) { ${n} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},Ep=(e,t)=>{let r=e[0].dims,a=U.size(r),n=e[0].dataType,o=U.normalizeAxis(t.axis,r.length),u=new Array(t.numOutputs),l=z("input",n,r),i=new Array(t.numOutputs),c=[],m=[],f=0,h=[{type:"uint32",data:a}];for(let b=0;b<t.numOutputs;b++){f+=t.splitSizes[b],i[b]=f;let _=r.slice();_[t.axis]=t.splitSizes[b],m.push(_),u[b]=K(`output${b}`,n,_),c.push({dims:m[b],dataType:e[0].dataType})}h.push({type:"uint32",data:i}),h.push(...q(r)),m.forEach(b=>h.push(...q(b)));let w=b=>`
  ${b.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",i.length).declareVariables(l,...u)}
  ${Ip(i.length)}
  ${Cp(u)}

  ${b.mainStart()}
    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${l.offsetToIndices("global_idx")};
    var index = ${l.indicesGet("indices",o)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${de("uniforms.size_in_split_axis","output_number - 1u",i.length)};
      ${l.indicesSet("indices",o,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:w,getRunData:()=>({outputs:c,dispatchGroup:{x:Math.ceil(a/64)},programUniforms:h})}},ju=(e,t)=>{xp(e.inputs);let r=e.inputs.length===1?t:Sp(e.inputs,t);e.compute(Ep(e.inputs,r),{inputs:[0]})},Ku=e=>{let t=e.axis,r=e.splitSizes,a=e.numOutputs<0?r.length:e.numOutputs;if(a!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return ge({axis:t,numOutputs:a,splitSizes:r})}});var Zu,Ap,Tp,Op,Xu,Qu=j(()=>{"use strict";Be();_e();we();Zu=e=>Array.from(e.getBigInt64Array(),Number),Ap=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Zu(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Tp=(e,t)=>{let r=[];for(let a=0;a<e.length;++a)r.push(e[a]*t[a]);return r},Op=e=>{let t=e[0].dims,r=Zu(e[1]),a=Tp(t,r),n=U.size(a),o=e[0].dataType,u=z("input",o,t.length),l=K("output",o,a.length),i=c=>`
      const inputShape = ${u.indices(...t)};
      ${c.registerUniform("output_size","u32").declareVariables(u,l)}
      ${c.mainStart()}
      ${c.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${l.offsetToIndices("global_idx")};
      var input_indices: ${u.type.indices};
      for (var i = 0; i < ${t.length}; i++) {
        let input_dim_i = ${u.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${l.indicesGet("output_indices","i")}  % input_dim_i;

        ${u.indicesSet("input_indices","i","input_dim_value")}
      }
      ${l.setByOffset("global_idx",u.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:"uint32",data:n},...q(e[0].dims),...q(a)]}),getShaderSource:i}},Xu=e=>{Ap(e.inputs),e.compute(Op(e.inputs),{inputs:[0]})}});var kp,Rp,Ju,el=j(()=>{"use strict";Be();_e();we();kp=(e,t,r,a,n)=>{let o=K("output_data",n,r.length,4),u=z("a_data",t[1].dataType,t[1].dims.length,4),l=z("b_data",t[2].dataType,t[2].dims.length,4),i=z("c_data",t[0].dataType,t[0].dims.length,4),c,m=(f,h,w)=>`select(${h}, ${f}, ${w})`;if(!a)c=o.setByOffset("global_idx",m(u.getByOffset("global_idx"),l.getByOffset("global_idx"),i.getByOffset("global_idx")));else{let f=(h,w,b="")=>{let _=`a_data[index_a${w}][component_a${w}]`,I=`b_data[index_b${w}][component_b${w}]`,$=`bool(c_data[index_c${w}] & ${4278190080>>>(3-w)*8}u)`;return`
            let output_indices${w} = ${o.offsetToIndices(`global_idx * 4u + ${w}u`)};
            let offset_a${w} = ${u.broadcastedIndicesToOffset(`output_indices${w}`,o)};
            let offset_b${w} = ${l.broadcastedIndicesToOffset(`output_indices${w}`,o)};
            let offset_c${w} = ${i.broadcastedIndicesToOffset(`output_indices${w}`,o)};
            let index_a${w} = offset_a${w} / 4u;
            let index_b${w} = offset_b${w} / 4u;
            let index_c${w} = offset_c${w} / 4u;
            let component_a${w} = offset_a${w} % 4u;
            let component_b${w} = offset_b${w} % 4u;
            ${h}[${w}] = ${b}(${m(_,I,$)});
          `};n===9?c=`
            var data = vec4<u32>(0);
            ${f("data",0,"u32")}
            ${f("data",1,"u32")}
            ${f("data",2,"u32")}
            ${f("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:c=`
            ${f("output_data[global_idx]",0)}
            ${f("output_data[global_idx]",1)}
            ${f("output_data[global_idx]",2)}
            ${f("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(i,u,l,o)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${c}
      }`},Rp=e=>{let t=e[1].dims,r=e[2].dims,a=e[0].dims,n=e[1].dataType,o=!(U.areEqual(t,r)&&U.areEqual(r,a)),u=t,l=U.size(t),i=Math.ceil(l/4);if(o){let c=ft.calcShape(ft.calcShape(t,r,!1),a,!1);if(!c)throw new Error("Can't perform where op on the given tensors");u=c,l=U.size(u)}return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:c=>kp(c,e,u,o,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(l/64/4)},programUniforms:[{type:"uint32",data:i},...q(a),...q(t),...q(r),...q(u)]})}},Ju=e=>{e.compute(Rp(e.inputs))}});var tl,rl=j(()=>{"use strict";Io();da();Ao();Oo();ls();vs();xs();ha();zs();Ns();Fs();Ks();Xs();eu();nu();iu();su();ya();cu();mu();Ou();Ru();mn();Mu();Wu();Lu();qu();Yu();Qu();tr();ca();el();tl=new Map([["Abs",[ko]],["Acos",[Ro]],["Acosh",[Po]],["Add",[ds]],["ArgMax",[So,la]],["ArgMin",[xo,la]],["Asin",[Bo]],["Asinh",[Do]],["Atan",[Mo]],["Atanh",[zo]],["Attention",[Co]],["AveragePool",[$u,vu]],["BatchNormalization",[Eo]],["BiasAdd",[To]],["BiasSplitGelu",[us]],["Cast",[Wo,Uo]],["Ceil",[Vo]],["Clip",[No]],["Concat",[$s,_s]],["Conv",[wa,ba]],["ConvTranspose",[Ms,Ds]],["Cos",[Ho]],["Cosh",[Lo]],["CumSum",[Us,Ws]],["Div",[cs]],["Einsum",[Ls,Gs]],["Elu",[Go,gn]],["Equal",[ps]],["Erf",[Fo]],["Exp",[qo]],["Expand",[js]],["Floor",[jo]],["FusedConv",[wa,ba]],["Gather",[Zs,Ys]],["GatherElements",[Js,Qs]],["Gelu",[Ko]],["Gemm",[ru,tu]],["GlobalAveragePool",[Su,xu]],["GlobalMaxPool",[Tu,Au]],["Greater",[gs]],["GreaterOrEqual",[bs]],["InstanceNormalization",[au]],["LayerNormalization",[ou]],["LeakyRelu",[Yo,gn]],["Less",[ys]],["LessOrEqual",[ws]],["Log",[ss]],["MatMul",[As]],["MaxPool",[Cu,Eu]],["Mul",[ms]],["MultiHeadAttention",[du,lu]],["Neg",[Xo]],["Not",[Zo]],["Pad",[pu]],["Pow",[fs]],["Range",[ku]],["Reciprocal",[Qo]],["ReduceMin",[yo]],["ReduceMean",[po]],["ReduceMax",[go]],["ReduceSum",[wo]],["ReduceProd",[bo]],["ReduceL1",[mo]],["ReduceL2",[fo]],["ReduceLogSum",[$o]],["ReduceLogSumExp",[ho]],["ReduceSumSquare",[vo]],["Relu",[Jo]],["Resize",[Bu,Du]],["Sigmoid",[es]],["Sin",[ts]],["Sinh",[rs]],["Slice",[Vu,Hu]],["SkipLayerNormalization",[zu,Uu]],["Split",[ju,Ku]],["Sqrt",[ns]],["Softmax",[Gu,Fu]],["Sub",[hs]],["Tan",[as]],["Tanh",[is]],["ThresholdedRelu",[os,gn]],["Tile",[Xu]],["Transpose",[Qi,Ji]],["Where",[Ju]]])});var Cn,nl=j(()=>{"use strict";ot();Be();kt();we();Cn=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,a,n,o,u,l){at(t.programInfo.name);let i=this.backend.device,c=this.backend.getComputePassEncoder();c.setPipeline(t.computePipeline);let m=[];for(let h of n)m.push({binding:m.length,resource:{buffer:h.buffer}});for(let h of o)m.push({binding:m.length,resource:{buffer:h.buffer}});l&&m.push({binding:m.length,resource:l});let f=i.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:m,label:t.programInfo.name});if(c.setBindGroup(0,f),c.dispatchWorkgroups(...u),this.backend.pendingDispatchNumber++,this.backend.isQueryEnabled()){typeof this.backend.queryData>"u"&&(this.backend.queryData=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));let h=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.querySet,0,2,this.backend.queryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.queryData.buffer,0,h.buffer,0,this.backend.querySetCount*8),this.backend.flush();let w=this.backend.currentKernelId,b=this.backend.kernels.get(w);h.buffer.mapAsync(GPUMapMode.READ).then(()=>{let _=new BigUint64Array(h.buffer.getMappedRange()),[I,$]=_,[S,T]=b;h.buffer.unmap(),typeof this.backend.queryTimeBase>"u"&&(this.backend.queryTimeBase=I);let E=Number(I-this.backend.queryTimeBase),M=Number($-this.backend.queryTimeBase);if(!Number.isSafeInteger(E)||!Number.isSafeInteger(M))throw new RangeError("incorrect timestamp range");if(this.backend.gpuDataManager.release(h.id),this.backend.env.webgpu.profiling?.ondata)this.backend.env.webgpu.profiling.ondata({version:1,inputsMetadata:r.map(A=>({dims:A.dims,dataType:et(A.dataType)})),outputsMetadata:a.map(A=>({dims:A.dims,dataType:et(A.dataType)})),kernelId:w,kernelType:S,kernelName:T,startTime:E,endTime:M});else{let A="";r.forEach((W,L)=>{A+=`input[${L}]: [${W.dims}] | ${et(W.dataType)}, `});let N="";a.forEach((W,L)=>{N+=`output[${L}]: [${W.dims}] | ${et(W.dataType)}, `}),console.log(`[profiling] kernel "${w}|${T}|${t.programInfo.name}" ${A}${N}execution time: ${M-E} ns`)}})}this.backend.pendingDispatchNumber>=16&&this.backend.flush(),it(t.programInfo.name)}dispose(){}build(t,r){at(t.name);let a=this.backend.device,n=[];a.features.has("shader-f16")&&n.push("enable f16;");let o=Zi(r),u=t.getShaderSource(o),l=`${n.join(`
`)}
${o.additionalImplementations}
${u}`,i=a.createShaderModule({code:l,label:t.name});Re("verbose",()=>`[WebGPU] ${t.name} shader code: ${l}`);let c=a.createComputePipeline({compute:{module:i,entryPoint:"main"},layout:"auto",label:t.name});return it(t.name),{programInfo:t,computePipeline:c}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,a=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,o=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=o&&a<=o&&n<=o)return[r,a,n];let u=r*a*n,l=Math.ceil(Math.sqrt(u));if(l>o){if(l=Math.ceil(Math.cbrt(u)),l>o)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[l,l,l]}else return[l,l,1]}}});var Pp,Bp,En,al=j(()=>{"use strict";ot();kt();Fi();Yi();rl();nl();Pp=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let a=0;a<e.length;++a){let n=e[a].dataType;switch(t[a]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let o=e[a].dims.length;r.push(`${n};${o}`);break}case"dims":{let o=e[a].dims.join(",");r.push(`${n};${o}`);break}default:throw new Error(`unsupported input dependency: ${t[a]}`)}}return r.join("|")},Bp=(e,t,r)=>{let a=e.name;return e.shaderCache?.hint&&(a+="["+e.shaderCache.hint+"]"),a+=":"+r+`:${Pp(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,a},En=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.pendingDispatchNumber=0;this.querySetCount=2;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,r){this.env=t;let a=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:a};r.features.has("timestamp-query")&&a.push("timestamp-query"),r.features.has("shader-f16")&&a.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=Ki(this),this.programManager=new Cn(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Li(t.logLevel,!!t.debug),this.device.onuncapturederror=o=>{o.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${o.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device})}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.isQueryEnabled()&&(typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.commandEncoder&&(this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0)}isQueryEnabled(){return this.device.features.has("timestamp-query")&&(this.env.webgpu.profiling?.mode==="default"||!this.env.webgpu.profiling?.mode&&this.env.webgpu.profilingMode==="default")}run(t,r,a,n,o){at(t.name);let u=[];for(let S=0;S<r.length;++S){let T=this.gpuDataManager.get(r[S].data);if(!T)throw new Error(`no GPU data for input: ${r[S].data}`);u[S]=T}let{outputs:l,dispatchGroup:i,programUniforms:c}=t.getRunData(r),m=a.length===0?l.map((S,T)=>T):a;if(m.length!==l.length)throw new Error(`Output size ${m.length} must be equal to ${l.length}.`);let f=[],h=[];for(let S=0;S<l.length;++S){if(!Number.isInteger(m[S])||m[S]<-3||m[S]>=l.length)throw new Error(`Invalid output index: ${m[S]}`);if(m[S]===-3)continue;let T=m[S]===-1,E=m[S]===-2,M=T||E?o(l[S].dataType,l[S].dims):n(m[S],l[S].dataType,l[S].dims),A=this.gpuDataManager.get(M.data);if(!A)throw new Error(`no GPU data for output: ${M.data}`);if(T&&this.temporaryData.push(A),E){let N=this.kernelPersistentData.get(this.currentKernelId);N||(N=[],this.kernelPersistentData.set(this.currentKernelId,N)),N.push(A)}f.push(M),h.push(A)}let w;if(c){let S=0,T=[];c.forEach(N=>{let W=typeof N.data=="number"?[N.data]:N.data;if(W.length===0)return;let L=W.length<=2?W.length*4:16;S=Math.ceil(S/L)*L,T.push(S),S+=W.length>4?Math.ceil(W.length/4)*16:W.length*4});let E=16;S=Math.ceil(S/E)*E;let M=new ArrayBuffer(S);c.forEach((N,W)=>{let L=T[W],J=typeof N.data=="number"?[N.data]:N.data;N.type==="int32"?new Int32Array(M,L,J.length).set(J):N.type==="uint32"?new Uint32Array(M,L,J.length).set(J):new Float32Array(M,L,J.length).set(J)});let A=this.gpuDataManager.create(S,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(A.buffer,0,M,0,S),this.gpuDataManager.release(A.id),w={offset:0,size:S,buffer:A.buffer}}let b=this.programManager.normalizeDispatchGroupSize(i),_=b[1]===1&&b[2]===1,I=Bp(t,r,_),$=this.programManager.getArtifact(I);return $||($=this.programManager.build(t,b),this.programManager.setArtifact(I,$),Re("info",()=>`[artifact] key: ${I}, programName: ${t.name}`)),Re("info",()=>`[ProgramManager] run "${t.name}" (key=${I}) with ${b[0]}x${b[1]}x${b[2]}`),this.programManager.run($,r,f,u,h,b,w),it(t.name),f}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,a,n){let o=tl.get(t);if(!o)throw new Error(`kernel not implemented: ${t}`);this.kernels.set(r,[t,n,o[0],[o[1],a]])}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let a of r)this.gpuDataManager.release(a.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,a){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let[o,u,l,i]=n;if(this.currentKernelId!==null)throw new Error(`kernel "[${o}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,i[0]&&(i[1]=i[0](i[1]),i[0]=void 0),Re("info",()=>`[WebGPU] Start to run kernel "[${o}] ${u}"...`);let c=this.env.debug;this.temporaryData=[];try{return c&&this.device.pushErrorScope("validation"),l(r,i[1]),0}catch(m){return a.push(Promise.resolve(`[WebGPU] Kernel "[${o}] ${u}" failed. ${m}`)),1}finally{c&&a.push(this.device.popErrorScope().then(m=>m?`GPU validation error for kernel "[${o}] ${u}": ${m.message}`:null));for(let m of this.temporaryData)this.gpuDataManager.release(m.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,a,n){let o=this.sessionExternalDataMapping.get(t);o||(o=new Map,this.sessionExternalDataMapping.set(t,o));let u=o.get(r),l=this.gpuDataManager.registerExternalBuffer(a,n,u?.[1]);return o.set(r,[l,a]),l}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(a=>this.gpuDataManager.unregisterExternalBuffer(a[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,a){return async()=>{let n=await ra(this,t,r);return Gi(n.buffer,a)}}}});var il={};Nt(il,{init:()=>Dp});var Ar,Ia,Dp,ol=j(()=>{"use strict";Be();al();kt();_e();Ar=class e{constructor(t,r,a,n){this.module=t;this.dataType=r;this.data=a;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=U.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=U.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=U.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(U.size(t)!==U.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},Ia=class{constructor(t,r,a){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,o=a>>>2;this.opKernelContext=n[o++];let u=n[o++];this.outputCount=n[o++],this.customDataOffset=n[o++],this.customDataSize=n[o++];let l=[];for(let i=0;i<u;i++){let c=n[o++],m=n[o++],f=n[o++],h=[];for(let w=0;w<f;w++)h.push(n[o++]);l.push(new Ar(t,c,m,h))}this.inputs=l}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let a=r?.inputs?.map(l=>typeof l=="number"?this.inputs[l]:l)??this.inputs,n=r?.outputs??[],o=(l,i,c)=>new Ar(this.module,i,this.output(l,c),c),u=(l,i)=>{let c=xr(l);if(!c)throw new Error(`Unsupported data type: ${l}`);let m=c*U.size(i);return new Ar(this.module,l,this.backend.gpuDataManager.create(m).id,i)};return this.backend.run(t,a,n,o,u)}output(t,r){let a=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),o=n>>2;this.module.HEAPU32[o++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[o++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel's output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(a)}}},Dp=async(e,t,r)=>{let a=e.jsepInit;if(!a)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");let n=new En;await n.initialize(t,r),a(n,o=>n.alloc(o),o=>n.free(o),(o,u,l,i=!1)=>{if(i)Re("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${o}, dst=${u}, size=${l}`),n.memcpy(o,u);else{Re("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${o}, gpuDataId=${u}, size=${l}`);let c=e.HEAPU8.subarray(o,o+l);n.upload(u,c)}},async(o,u,l)=>{Re("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${o}, dataOffset=${u}, size=${l}`),await n.download(o,()=>e.HEAPU8.subarray(u,u+l))},(o,u,l)=>n.createKernel(o,u,l,t.debug||n.isQueryEnabled()?e.UTF8ToString(e._JsepGetNodeName(u)):`${u}`),o=>n.releaseKernel(o),(o,u,l,i)=>{Re("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${l}, kernel=${o}, contextDataOffset=${u}`);let c=new Ia(e,n,u);return n.computeKernel(o,c,i)})}});var Mp,ul,ll,Tr,zp,Ca,dl,cl,sl,pl,ml,fl,hl=j(()=>{"use strict";Ui();Ni();Be();Jt();nn();Mp=(e,t)=>{Me()._OrtInit(e,t)!==0&&Oe("Can't initialize onnxruntime.")},ul=async e=>{Mp(e.wasm.numThreads,Sr(e.logLevel))},ll=async(e,t)=>{if(t==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.');if(!e.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");let a=(ol(),Tt(il)).init;await a(Me(),e,r)}},Tr=new Map,zp=e=>{let t=Me(),r=t.stackSave();try{let a=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,a,a+4)!==0&&Oe("Can't get session input/output count."),[t.HEAP32[a/4],t.HEAP32[a/4+1]]}finally{t.stackRestore(r)}},Ca=e=>{let t=Me(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},dl=(e,t)=>{let r,a,n=Me();Array.isArray(e)?[r,a]=e:e.buffer===n.HEAPU8.buffer?[r,a]=[e.byteOffset,e.byteLength]:[r,a]=Ca(e);let o=0,u=0,l=0,i=[],c=[],m=[];try{[u,i]=Wi(t),o=n._OrtCreateSession(r,a,u),o===0&&Oe("Can't create a session.");let[f,h]=zp(o),w=[],b=[],_=[];for(let $=0;$<f;$++){let S=n._OrtGetInputName(o,$);S===0&&Oe("Can't get an input name."),c.push(S),w.push(n.UTF8ToString(S))}for(let $=0;$<h;$++){let S=n._OrtGetOutputName(o,$);S===0&&Oe("Can't get an output name."),m.push(S);let T=n.UTF8ToString(S);b.push(T);{let E=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[T]??"cpu";if(E!=="cpu"&&E!=="cpu-pinned"&&E!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${E}.`);_.push(E)}}let I=null;return _.some($=>$==="gpu-buffer")&&(l=n._OrtCreateBinding(o),l===0&&Oe("Can't create IO binding."),I={handle:l,outputPreferredLocations:_,outputPreferredLocationsEncoded:_.map($=>ea($))}),Tr.set(o,[o,c,m,I]),[o,w,b]}catch(f){throw c.forEach(h=>n._OrtFree(h)),m.forEach(h=>n._OrtFree(h)),l!==0&&n._OrtReleaseBinding(l),o!==0&&n._OrtReleaseSession(o),f}finally{n._free(r),u!==0&&n._OrtReleaseSessionOptions(u),i.forEach(f=>n._free(f))}},cl=e=>{let t=Me(),r=Tr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[a,n,o,u]=r;u&&t._OrtReleaseBinding(u.handle),t.jsepUnregisterBuffers?.(e),n.forEach(l=>t._OrtFree(l)),o.forEach(l=>t._OrtFree(l)),t._OrtReleaseSession(a),Tr.delete(e)},sl=(e,t,r,a,n)=>{if(!e){t.push(0);return}let o=Me(),u=e[0],l=e[1],i=e[3],c,m;if(u==="string"&&i==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(i==="gpu-buffer"){let w=e[2].gpuBuffer,b=xr(Jn(u));m=l.reduce((_,I)=>_*I,1)*b,c=o.jsepRegisterBuffer(a,n,w,m)}else{let w=e[2];if(Array.isArray(w)){m=4*w.length,c=o._malloc(m),r.push(c);let b=c/4;for(let _=0;_<w.length;_++){if(typeof w[_]!="string")throw new TypeError(`tensor data at index ${_} is not a string`);o.HEAPU32[b++]=Ue(w[_],r)}}else m=w.byteLength,c=o._malloc(m),r.push(c),o.HEAPU8.set(new Uint8Array(w.buffer,w.byteOffset,m),c)}let f=o.stackSave(),h=o.stackAlloc(4*l.length);try{let w=h/4;l.forEach(_=>o.HEAP32[w++]=_);let b=o._OrtCreateTensor(Jn(u),c,m,h,l.length,ea(i));b===0&&Oe(`Can't create tensor for input/output. session=${a}, index=${n}.`),t.push(b)}finally{o.stackRestore(f)}},pl=async(e,t,r,a,n,o)=>{let u=Me(),l=Tr.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);let[i,c,m,f]=l,h=t.length,w=a.length,b=0,_=[],I=[],$=[],S=[],T=u.stackSave(),E=u.stackAlloc(h*4),M=u.stackAlloc(h*4),A=u.stackAlloc(w*4),N=u.stackAlloc(w*4);try{[b,_]=zi(o);for(let ee=0;ee<h;ee++)sl(r[ee],I,S,e,t[ee]);for(let ee=0;ee<w;ee++)sl(n[ee],$,S,e,h+a[ee]);let W=E/4,L=M/4,J=A/4,B=N/4;for(let ee=0;ee<h;ee++)u.HEAPU32[W++]=I[ee],u.HEAPU32[L++]=c[t[ee]];for(let ee=0;ee<w;ee++)u.HEAPU32[J++]=$[ee],u.HEAPU32[B++]=m[a[ee]];if(f){let{handle:ee,outputPreferredLocations:ve,outputPreferredLocationsEncoded:Z}=f;if(c.length!==h)throw new Error(`input count from feeds (${h}) is expected to be always equal to model's input count (${c.length}).`);for(let be=0;be<h;be++){let Ie=t[be];await u._OrtBindInput(ee,c[Ie],I[be])!==0&&Oe(`Can't bind input[${be}] for session=${e}.`)}for(let be=0;be<w;be++){let Ie=a[be];n[be]?.[3]?u._OrtBindOutput(ee,m[Ie],$[be],0)!==0&&Oe(`Can't bind pre-allocated output[${be}] for session=${e}.`):u._OrtBindOutput(ee,m[Ie],0,Z[Ie])!==0&&Oe(`Can't bind output[${be}] to ${ve[be]} for session=${e}.`)}}let Y;f?Y=await u._OrtRunWithBinding(i,f.handle,w,A,b):Y=await u._OrtRun(i,M,E,h,N,w,A,b),Y!==0&&Oe("failed to call OrtRun().");let pe=[];for(let ee=0;ee<w;ee++){let ve=u.HEAPU32[A/4+ee];if(ve===$[ee]){pe.push(n[ee]);continue}let Z=u.stackSave(),be=u.stackAlloc(4*4),Ie=!1,fe,ce=0;try{u._OrtGetTensorData(ve,be,be+4,be+8,be+12)!==0&&Oe(`Can't access output tensor data on index ${ee}.`);let Pe=be/4,Le=u.HEAPU32[Pe++];ce=u.HEAPU32[Pe++];let G=u.HEAPU32[Pe++],X=u.HEAPU32[Pe++],he=[];for(let De=0;De<X;De++)he.push(u.HEAPU32[G/4+De]);u._OrtFree(G);let qe=he.reduce((De,Ge)=>De*Ge,1);fe=et(Le);let Je=f?.outputPreferredLocations[a[ee]];if(fe==="string"){if(Je==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let De=[],Ge=ce/4;for(let Ze=0;Ze<qe;Ze++){let ct=u.HEAPU32[Ge++],rt=Ze===qe-1?void 0:u.HEAPU32[Ge]-ct;De.push(u.UTF8ToString(ct,rt))}pe.push([fe,he,De,"cpu"])}else if(Je==="gpu-buffer"&&qe>0){let De=u.jsepGetBuffer(ce),Ge=xr(Le);if(Ge===void 0||!on(fe))throw new Error(`Unsupported data type: ${fe}`);Ie=!0,pe.push([fe,he,{gpuBuffer:De,download:u.jsepCreateDownloader(De,qe*Ge,fe),dispose:()=>{u._OrtReleaseTensor(ve)}},"gpu-buffer"])}else{let De=an(fe),Ge=new De(qe);new Uint8Array(Ge.buffer,Ge.byteOffset,Ge.byteLength).set(u.HEAPU8.subarray(ce,ce+Ge.byteLength)),pe.push([fe,he,Ge,"cpu"])}}finally{u.stackRestore(Z),fe==="string"&&ce&&u._free(ce),Ie||u._OrtReleaseTensor(ve)}}return f&&u._OrtClearBoundOutputs(f.handle),pe}finally{u.stackRestore(T),I.forEach(W=>u._OrtReleaseTensor(W)),$.forEach(W=>u._OrtReleaseTensor(W)),S.forEach(W=>u._free(W)),b!==0&&u._OrtReleaseRunOptions(b),_.forEach(W=>u._free(W))}},ml=e=>{let t=Me(),r=Tr.get(e);if(!r)throw new Error("invalid session id");let a=r[0],n=t._OrtEndProfiling(a);n===0&&Oe("Can't get an profile file name."),t._OrtFree(n)},fl=e=>{let t=[];for(let r of e){let a=r[2];!Array.isArray(a)&&"buffer"in a&&t.push(a.buffer)}return t}});var gl=Qt((pw,Wp)=>{Wp.exports='/*!\n * ONNX Runtime Web v1.17.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";(()=>{var gn=Object.defineProperty;var Wu=Object.getOwnPropertyDescriptor;var Nu=Object.getOwnPropertyNames;var Hu=Object.prototype.hasOwnProperty;var Y=(e,t)=>()=>(e&&(t=e(e=0)),t);var dr=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),Mr=(e,t)=>{for(var r in t)gn(e,r,{get:t[r],enumerable:!0})},Gu=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of Nu(t))!Hu.call(e,n)&&n!==r&&gn(e,n,{get:()=>t[n],enumerable:!(o=Wu(t,n))||o.enumerable});return e};var Wt=e=>Gu(gn({},"__esModule",{value:!0}),e);var yn={};Mr(yn,{readFile:()=>Lu});var Lu,bn=Y(()=>{Lu=void 0});var wn={};Mr(wn,{join:()=>Fu});var Fu,vn=Y(()=>{Fu=void 0});var xo=dr((So,$n)=>{"use strict";var $o=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,o,n;r.ready=new Promise((l,m)=>{o=l,n=m}),r.jsepInit=(l,m,v,C,P,F,H,le)=>{r.Za=l,r.Oa=m,r.Qa=v,r.Ja=C,r.Pa=P,r.ra=F,r.Ra=H,r.Sa=le,m=(Q,ae,te)=>(...ye)=>{let xe=et,k=ae?.();ye=Q(...ye);let se=ae?.();return k!==se&&(Q=se,te(k),ae=te=null),et!=xe?Ir():ye},v=Q=>async(...ae)=>{try{if(r.Da)throw Error("Session already started");let te=r.Da={Ta:ae[0],errors:[]},ye=await Q(...ae);if(r.Da!==te)throw Error("Session mismatch");l.flush();let xe=te.errors;if(0<xe.length){let k=await Promise.all(xe);if(k=k.filter(se=>se),0<k.length)throw Error(k.join(`\n`))}return ye}finally{r.Da=null}},r._OrtRun=v(m(r._OrtRun,()=>r._OrtRun,Q=>r._OrtRun=Q)),r._OrtRunWithBinding=v(m(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,Q=>r._OrtRunWithBinding=Q)),r._OrtBindInput=m(r._OrtBindInput,()=>r._OrtBindInput,Q=>r._OrtBindInput=Q),r.jsepRegisterBuffer=(Q,ae,te,ye)=>l.registerBuffer(Q,ae,te,ye),r.jsepUnregisterBuffers=Q=>{l.unregisterBuffers(Q)},r.jsepGetBuffer=Q=>l.getBuffer(Q),r.jsepCreateDownloader=(Q,ae,te)=>l.createDownloader(Q,ae,te)};var s=Object.assign({},r),u="./this.program",d=(l,m)=>{throw m},a=typeof window=="object",p=typeof importScripts=="function",h=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",g="",y,w,b;if(h){var _=(bn(),Wt(yn)),I=(vn(),Wt(wn));g=p?I.dirname(g)+"/":__dirname+"/",y=(l,m)=>(l=l.startsWith("file://")?new URL(l):I.normalize(l),_.readFileSync(l,m?void 0:"utf8")),b=l=>(l=y(l,!0),l.buffer||(l=new Uint8Array(l)),l),w=(l,m,v,C=!0)=>{l=l.startsWith("file://")?new URL(l):I.normalize(l),_.readFile(l,C?void 0:"utf8",(P,F)=>{P?v(P):m(C?F.buffer:F)})},!r.thisProgram&&1<process.argv.length&&(u=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),d=(l,m)=>{throw process.exitCode=l,m},r.inspect=()=>"[Emscripten Module object]"}else(a||p)&&(p?g=self.location.href:typeof document<"u"&&document.currentScript&&(g=document.currentScript.src),e&&(g=e),g.indexOf("blob:")!==0?g=g.substr(0,g.replace(/[?#].*/,"").lastIndexOf("/")+1):g="",y=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.send(null),m.responseText},p&&(b=l=>{var m=new XMLHttpRequest;return m.open("GET",l,!1),m.responseType="arraybuffer",m.send(null),new Uint8Array(m.response)}),w=(l,m,v)=>{var C=new XMLHttpRequest;C.open("GET",l,!0),C.responseType="arraybuffer",C.onload=()=>{C.status==200||C.status==0&&C.response?m(C.response):v()},C.onerror=v,C.send(null)});var S=r.print||console.log.bind(console),x=r.printErr||console.error.bind(console);Object.assign(r,s),s=null,r.thisProgram&&(u=r.thisProgram),r.quit&&(d=r.quit);var O;r.wasmBinary&&(O=r.wasmBinary);var T=r.noExitRuntime||!0;typeof WebAssembly!="object"&&He("no native wasm support detected");var M,A,W=!1,V,G,J,B,K,pe,ee;function ve(){var l=M.buffer;r.HEAP8=G=new Int8Array(l),r.HEAP16=new Int16Array(l),r.HEAP32=B=new Int32Array(l),r.HEAPU8=J=new Uint8Array(l),r.HEAPU16=new Uint16Array(l),r.HEAPU32=K=new Uint32Array(l),r.HEAPF32=pe=new Float32Array(l),r.HEAPF64=ee=new Float64Array(l)}var Z=[],be=[],Ce=[];function fe(){var l=r.preRun.shift();Z.unshift(l)}var ce=0,Ue=null,ke=null;function He(l){throw r.onAbort&&r.onAbort(l),l="Aborted("+l+")",x(l),W=!0,V=1,l=new WebAssembly.RuntimeError(l+". Build with -sASSERTIONS for more info."),n(l),l}function L(l){return l.startsWith("data:application/octet-stream;base64,")}var X;if(X="ort-wasm-simd.wasm",!L(X)){var he=X;X=r.locateFile?r.locateFile(he,g):g+he}function Fe(l){if(l==X&&O)return new Uint8Array(O);if(b)return b(l);throw"both async and sync fetching of the wasm failed"}function Ze(l){if(!O&&(a||p)){if(typeof fetch=="function"&&!l.startsWith("file://"))return fetch(l,{credentials:"same-origin"}).then(m=>{if(!m.ok)throw"failed to load wasm binary file at \'"+l+"\'";return m.arrayBuffer()}).catch(()=>Fe(l));if(w)return new Promise((m,v)=>{w(l,C=>m(new Uint8Array(C)),v)})}return Promise.resolve().then(()=>Fe(l))}function Re(l,m,v){return Ze(l).then(C=>WebAssembly.instantiate(C,m)).then(C=>C).then(v,C=>{x("failed to asynchronously prepare wasm: "+C),He(C)})}function Ge(l,m){var v=X;return O||typeof WebAssembly.instantiateStreaming!="function"||L(v)||v.startsWith("file://")||h||typeof fetch!="function"?Re(v,l,m):fetch(v,{credentials:"same-origin"}).then(C=>WebAssembly.instantiateStreaming(C,l).then(m,function(P){return x("wasm streaming compile failed: "+P),x("falling back to ArrayBuffer instantiation"),Re(v,l,m)}))}var Ke,ot={923216:l=>{r.ra("Abs",l,void 0)},923267:l=>{r.ra("Neg",l,void 0)},923318:l=>{r.ra("Floor",l,void 0)},923371:l=>{r.ra("Ceil",l,void 0)},923423:l=>{r.ra("Reciprocal",l,void 0)},923481:l=>{r.ra("Sqrt",l,void 0)},923533:l=>{r.ra("Exp",l,void 0)},923584:l=>{r.ra("Erf",l,void 0)},923635:l=>{r.ra("Sigmoid",l,void 0)},923690:l=>{r.ra("Log",l,void 0)},923741:l=>{r.ra("Sin",l,void 0)},923792:l=>{r.ra("Cos",l,void 0)},923843:l=>{r.ra("Tan",l,void 0)},923894:l=>{r.ra("Asin",l,void 0)},923946:l=>{r.ra("Acos",l,void 0)},923998:l=>{r.ra("Atan",l,void 0)},924050:l=>{r.ra("Sinh",l,void 0)},924102:l=>{r.ra("Cosh",l,void 0)},924154:l=>{r.ra("Asinh",l,void 0)},924207:l=>{r.ra("Acosh",l,void 0)},924260:l=>{r.ra("Atanh",l,void 0)},924313:l=>{r.ra("Tanh",l,void 0)},924365:l=>{r.ra("Not",l,void 0)},924416:(l,m,v)=>{r.ra("Clip",l,{min:m,max:v})},924485:l=>{r.ra("Clip",l,void 0)},924537:(l,m)=>{r.ra("Elu",l,{alpha:m})},924595:l=>{r.ra("Relu",l,void 0)},924647:(l,m)=>{r.ra("LeakyRelu",l,{alpha:m})},924711:(l,m)=>{r.ra("ThresholdedRelu",l,{alpha:m})},924781:(l,m)=>{r.ra("Cast",l,{to:m})},924839:l=>{r.ra("Add",l,void 0)},924890:l=>{r.ra("Sub",l,void 0)},924941:l=>{r.ra("Mul",l,void 0)},924992:l=>{r.ra("Div",l,void 0)},925043:l=>{r.ra("Pow",l,void 0)},925094:l=>{r.ra("Equal",l,void 0)},925147:l=>{r.ra("Greater",l,void 0)},925202:l=>{r.ra("GreaterOrEqual",l,void 0)},925264:l=>{r.ra("Less",l,void 0)},925316:l=>{r.ra("LessOrEqual",l,void 0)},925375:(l,m,v,C,P)=>{r.ra("ReduceMean",l,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(P>>>0,P+C>>>0)):[]})},925539:(l,m,v,C,P)=>{r.ra("ReduceMax",l,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(P>>>0,P+C>>>0)):[]})},925702:(l,m,v,C,P)=>{r.ra("ReduceMin",l,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(P>>>0,P+C>>>0)):[]})},925865:(l,m,v,C,P)=>{r.ra("ReduceProd",l,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(P>>>0,P+C>>>0)):[]})},926029:(l,m,v,C,P)=>{r.ra("ReduceSum",l,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(P>>>0,P+C>>>0)):[]})},926192:(l,m,v,C,P)=>{r.ra("ReduceL1",l,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(P>>>0,P+C>>>0)):[]})},926354:(l,m,v,C,P)=>{r.ra("ReduceL2",l,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(P>>>0,P+C>>>0)):[]})},926516:(l,m,v,C,P)=>{r.ra("ReduceLogSum",l,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(P>>>0,P+C>>>0)):[]})},926682:(l,m,v,C,P)=>{r.ra("ReduceSumSquare",l,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(P>>>0,P+C>>>0)):[]})},926851:(l,m,v,C,P)=>{r.ra("ReduceLogSumExp",l,{keepDims:!!m,noopWithEmptyAxes:!!v,axes:C?Array.from(B.subarray(P>>>0,P+C>>>0)):[]})},927020:l=>{r.ra("Where",l,void 0)},927073:(l,m,v)=>{r.ra("Transpose",l,{perm:m?Array.from(B.subarray(v>>>0,v+m>>>0)):[]})},927186:(l,m,v,C,P,F,H,le,Q,ae,te,ye,xe,k,se)=>{r.ra("ConvTranspose",l,{format:Q?"NHWC":"NCHW",autoPad:m,dilations:[v],group:C,kernel_shape:[P],pads:[F,H],strides:[le],wIsConst:()=>!!G[ae>>>0],outputPadding:te?Array.from(B.subarray(ye>>>0,ye+te>>>0)):[],outputShape:xe?Array.from(B.subarray(k>>>0,k+xe>>>0)):[],activation:Me(se)})},927600:(l,m,v,C,P,F,H,le,Q,ae,te,ye,xe,k)=>{r.ra("ConvTranspose",l,{format:le?"NHWC":"NCHW",autoPad:m,dilations:Array.from(B.subarray(v>>>0,v+2>>>0)),group:C,kernelShape:Array.from(B.subarray(P>>>0,P+2>>>0)),pads:Array.from(B.subarray(F>>>0,F+4>>>0)),strides:Array.from(B.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!G[Q>>>0],outputPadding:0<ae?Array.from(B.subarray(te>>>0,te+ae>>>0)):[],outputShape:0<ye?Array.from(B.subarray(xe>>>0,xe+ye>>>0)):[],activation:Me(k)})},928157:(l,m,v,C,P,F,H,le,Q,ae,te,ye,xe,k,se)=>{r.ra("ConvTranspose",l,{format:Q?"NHWC":"NCHW",autoPad:m,dilations:[v],group:C,kernel_shape:[P],pads:[F,H],strides:[le],wIsConst:()=>!!G[ae>>>0],outputPadding:te?Array.from(B.subarray(ye>>>0,ye+te>>>0)):[],outputShape:xe?Array.from(B.subarray(k>>>0,k+xe>>>0)):[],activation:Me(se)})},928571:(l,m,v,C,P,F,H,le,Q,ae,te,ye,xe,k)=>{r.ra("ConvTranspose",l,{format:le?"NHWC":"NCHW",autoPad:m,dilations:Array.from(B.subarray(v>>>0,v+2>>>0)),group:C,kernelShape:Array.from(B.subarray(P>>>0,P+2>>>0)),pads:Array.from(B.subarray(F>>>0,F+4>>>0)),strides:Array.from(B.subarray(H>>>0,H+2>>>0)),wIsConst:()=>!!G[Q>>>0],outputPadding:0<ae?Array.from(B.subarray(te>>>0,te+ae>>>0)):[],outputShape:0<ye?Array.from(B.subarray(xe>>>0,xe+ye>>>0)):[],activation:Me(k)})},929128:(l,m)=>{r.ra("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},929219:(l,m,v,C,P,F,H,le,Q,ae,te,ye,xe,k,se,$e)=>{r.ra("AveragePool",l,{format:$e?"NHWC":"NCHW",auto_pad:m,ceil_mode:v,count_include_pad:C,storage_order:P,dilations:[F,H],kernel_shape:[le,Q],pads:[ae,te,ye,xe],strides:[k,se]})},929503:(l,m)=>{r.ra("GlobalAveragePool",l,{format:m?"NHWC":"NCHW"})},929594:(l,m,v,C,P,F,H,le,Q,ae,te,ye,xe,k,se,$e)=>{r.ra("AveragePool",l,{format:$e?"NHWC":"NCHW",auto_pad:m,ceil_mode:v,count_include_pad:C,storage_order:P,dilations:[F,H],kernel_shape:[le,Q],pads:[ae,te,ye,xe],strides:[k,se]})},929878:(l,m)=>{r.ra("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},929965:(l,m,v,C,P,F,H,le,Q,ae,te,ye,xe,k,se,$e)=>{r.ra("MaxPool",l,{format:$e?"NHWC":"NCHW",auto_pad:m,ceil_mode:v,count_include_pad:C,storage_order:P,dilations:[F,H],kernel_shape:[le,Q],pads:[ae,te,ye,xe],strides:[k,se]})},930245:(l,m)=>{r.ra("GlobalMaxPool",l,{format:m?"NHWC":"NCHW"})},930332:(l,m,v,C,P,F,H,le,Q,ae,te,ye,xe,k,se,$e)=>{r.ra("MaxPool",l,{format:$e?"NHWC":"NCHW",auto_pad:m,ceil_mode:v,count_include_pad:C,storage_order:P,dilations:[F,H],kernel_shape:[le,Q],pads:[ae,te,ye,xe],strides:[k,se]})},930612:(l,m,v,C,P)=>{r.ra("Gemm",l,{alpha:m,beta:v,transA:C,transB:P})},930716:l=>{r.ra("MatMul",l,void 0)},930770:(l,m,v,C)=>{r.ra("ArgMax",l,{keepDims:!!m,selectLastIndex:!!v,axis:C})},930878:(l,m,v,C)=>{r.ra("ArgMin",l,{keepDims:!!m,selectLastIndex:!!v,axis:C})},930986:(l,m)=>{r.ra("Softmax",l,{axis:m})},931049:(l,m)=>{r.ra("Concat",l,{axis:m})},931109:(l,m,v,C,P)=>{r.ra("Split",l,{axis:m,numOutputs:v,splitSizes:C?Array.from(B.subarray(P>>>0,P+C>>>0)):[]})},931254:l=>{r.ra("Expand",l,void 0)},931308:(l,m)=>{r.ra("Gather",l,{axis:Number(m)})},931379:(l,m)=>{r.ra("GatherElements",l,{axis:Number(m)})},931458:(l,m,v,C,P,F,H,le,Q,ae,te)=>{r.ra("Resize",l,{antialias:m,axes:v?Array.from(B.subarray(C>>>0,C+v>>>0)):[],coordinateTransformMode:Me(P),cubicCoeffA:F,excludeOutside:H,extrapolationValue:le,keepAspectRatioPolicy:Me(Q),mode:Me(ae),nearestMode:Me(te)})},931809:(l,m,v,C,P,F,H)=>{r.ra("Slice",l,{starts:m?Array.from(B.subarray(v>>>0,v+m>>>0)):[],ends:C?Array.from(B.subarray(P>>>0,P+C>>>0)):[],axes:F?Array.from(B.subarray(H>>>0,H+F>>>0)):[]})},932040:l=>{r.ra("Tile",l,void 0)},932092:(l,m,v)=>{r.ra("LayerNormalization",l,{axis:Number(m),epsilon:Number(v)})},932199:(l,m,v)=>{r.ra("InstanceNormalization",l,{epsilon:m,format:v?"NHWC":"NCHW"})},932313:(l,m,v)=>{r.ra("InstanceNormalization",l,{epsilon:m,format:v?"NHWC":"NCHW"})},932427:l=>{r.ra("Range",l,void 0)},932480:(l,m)=>{r.ra("Einsum",l,{equation:Me(m)})},932561:(l,m,v,C,P)=>{r.ra("Pad",l,{mode:m,value:v,pads:C?Array.from(B.subarray(P>>>0,P+C>>>0)):[]})},932693:(l,m,v,C,P,F)=>{r.ra("BatchNormalization",l,{epsilon:m,momentum:v,spatial:!!P,trainingMode:!!C,format:F?"NHWC":"NCHW"})},932862:(l,m,v,C,P,F)=>{r.ra("BatchNormalization",l,{epsilon:m,momentum:v,spatial:!!P,trainingMode:!!C,format:F?"NHWC":"NCHW"})},933031:(l,m,v)=>{r.ra("CumSum",l,{exclusive:Number(m),reverse:Number(v)})},933128:(l,m,v,C,P,F,H,le,Q)=>{r.ra("Attention",l,{numHeads:m,isUnidirectional:v,maskFilterValue:C,scale:P,doRotary:F,qkvHiddenSizes:H?Array.from(B.subarray(Number(le)>>>0,Number(le)+H>>>0)):[],pastPresentShareBuffer:!!Q})},933400:l=>{r.ra("Gelu",l,void 0)},933452:(l,m,v,C,P,F)=>{r.ra("MultiHeadAttention",l,{numHeads:m,isUnidirectional:v,maskFilterValue:C,scale:P,doRotary:F})},933611:l=>{r.ra("BiasAdd",l,void 0)},933666:l=>{r.ra("BiasSplitGelu",l,void 0)},933727:(l,m)=>{r.ra("SkipLayerNormalization",l,{epsilon:m})},933808:(l,m,v,C,P,F,H,le,Q,ae,te,ye,xe)=>{r.ra("Conv",l,{format:Q?"NHWC":"NCHW",auto_pad:m,dilations:[v],group:C,kernel_shape:[P],pads:F?Array.from(B.subarray(H>>>0,H+F>>>0)):[],strides:[le],w_is_const:()=>!!G[ae>>>0],activation:Me(te),activation_params:ye?Array.from(pe.subarray(xe>>>0,xe+ye>>>0)):[]})},934189:(l,m,v,C,P,F,H,le,Q,ae,te,ye,xe,k,se,$e)=>{r.ra("Conv",l,{format:ye?"NHWC":"NCHW",auto_pad:m,dilations:[v,C],group:P,kernel_shape:[F,H],pads:le?Array.from(B.subarray(Q>>>0,Q+le>>>0)):[],strides:[ae,te],w_is_const:()=>!!G[xe>>>0],activation:Me(k),activation_params:se?Array.from(pe.subarray($e>>>0,$e+se>>>0)):[]})},934591:l=>{r.Ra(l)},934625:(l,m)=>r.Sa(l,m,r.Da.Ta,r.Da.errors),934737:l=>r.Oa(l),934770:l=>r.Qa(l),934802:(l,m,v)=>{r.Ja(l,m,v,!0)},934841:(l,m,v)=>{r.Ja(l,m,v)}};function Je(l){this.name="ExitStatus",this.message=`Program terminated with exit(${l})`,this.status=l}var _t=l=>{for(;0<l.length;)l.shift()(r)};function Ct(l){this.Ha=l-24,this.Ma=function(m){K[this.Ha+4>>2>>>0]=m},this.La=function(m){K[this.Ha+8>>2>>>0]=m},this.Ya=function(m,v){this.Ka(),this.Ma(m),this.La(v)},this.Ka=function(){K[this.Ha+16>>2>>>0]=0}}var jt=0,wr=0,tt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Kt=(l,m,v)=>{m>>>=0;var C=m+v;for(v=m;l[v]&&!(v>=C);)++v;if(16<v-m&&l.buffer&&tt)return tt.decode(l.subarray(m,v));for(C="";m<v;){var P=l[m++];if(P&128){var F=l[m++]&63;if((P&224)==192)C+=String.fromCharCode((P&31)<<6|F);else{var H=l[m++]&63;P=(P&240)==224?(P&15)<<12|F<<6|H:(P&7)<<18|F<<12|H<<6|l[m++]&63,65536>P?C+=String.fromCharCode(P):(P-=65536,C+=String.fromCharCode(55296|P>>10,56320|P&1023))}}else C+=String.fromCharCode(P)}return C},Me=(l,m)=>(l>>>=0)?Kt(J,l,m):"",Rt=l=>{for(var m=0,v=0;v<l.length;++v){var C=l.charCodeAt(v);127>=C?m++:2047>=C?m+=2:55296<=C&&57343>=C?(m+=4,++v):m+=3}return m},Yt=(l,m,v,C)=>{if(v>>>=0,!(0<C))return 0;var P=v;C=v+C-1;for(var F=0;F<l.length;++F){var H=l.charCodeAt(F);if(55296<=H&&57343>=H){var le=l.charCodeAt(++F);H=65536+((H&1023)<<10)|le&1023}if(127>=H){if(v>=C)break;m[v++>>>0]=H}else{if(2047>=H){if(v+1>=C)break;m[v++>>>0]=192|H>>6}else{if(65535>=H){if(v+2>=C)break;m[v++>>>0]=224|H>>12}else{if(v+3>=C)break;m[v++>>>0]=240|H>>18,m[v++>>>0]=128|H>>12&63}m[v++>>>0]=128|H>>6&63}m[v++>>>0]=128|H&63}}return m[v>>>0]=0,v-P},ht=l=>l%4===0&&(l%100!==0||l%400===0),vr=[0,31,60,91,121,152,182,213,244,274,305,335],gt=[0,31,59,90,120,151,181,212,243,273,304,334],Bt=l=>{var m=Rt(l)+1,v=Ut(m);return v&&Yt(l,J,v,m),v},wt=[],Dt=(l,m)=>{wt.length=0;var v;for(m>>=2;v=J[l++>>>0];)m+=v!=105&m,wt.push(v==105?B[m>>>0]:ee[m++>>>1]),++m;return wt},Mt={},Zt=()=>{if(!zt){var l={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:u||"./this.program"},m;for(m in Mt)Mt[m]===void 0?delete l[m]:l[m]=Mt[m];var v=[];for(m in l)v.push(`${m}=${l[m]}`);zt=v}return zt},zt,$r=[null,[],[]],qe=[31,29,31,30,31,30,31,31,30,31,30,31],Xt=[31,28,31,30,31,30,31,31,30,31,30,31];function Qt(l){var m=Array(Rt(l)+1);return Yt(l,m,0,m.length),m}function oe(l,m,v,C){function P(k,se,$e){for(k=typeof k=="number"?k.toString():k||"";k.length<se;)k=$e[0]+k;return k}function F(k,se){return P(k,se,"0")}function H(k,se){function $e(lr){return 0>lr?-1:0<lr?1:0}var bt;return(bt=$e(k.getFullYear()-se.getFullYear()))===0&&(bt=$e(k.getMonth()-se.getMonth()))===0&&(bt=$e(k.getDate()-se.getDate())),bt}function le(k){switch(k.getDay()){case 0:return new Date(k.getFullYear()-1,11,29);case 1:return k;case 2:return new Date(k.getFullYear(),0,3);case 3:return new Date(k.getFullYear(),0,2);case 4:return new Date(k.getFullYear(),0,1);case 5:return new Date(k.getFullYear()-1,11,31);case 6:return new Date(k.getFullYear()-1,11,30)}}function Q(k){var se=k.Ba;for(k=new Date(new Date(k.Ca+1900,0,1).getTime());0<se;){var $e=k.getMonth(),bt=(ht(k.getFullYear())?qe:Xt)[$e];if(se>bt-k.getDate())se-=bt-k.getDate()+1,k.setDate(1),11>$e?k.setMonth($e+1):(k.setMonth(0),k.setFullYear(k.getFullYear()+1));else{k.setDate(k.getDate()+se);break}}return $e=new Date(k.getFullYear()+1,0,4),se=le(new Date(k.getFullYear(),0,4)),$e=le($e),0>=H(se,k)?0>=H($e,k)?k.getFullYear()+1:k.getFullYear():k.getFullYear()-1}l>>>=0,m>>>=0,v>>>=0,C>>>=0;var ae=B[C+40>>2>>>0];C={Wa:B[C>>2>>>0],Va:B[C+4>>2>>>0],Ea:B[C+8>>2>>>0],Ia:B[C+12>>2>>>0],Fa:B[C+16>>2>>>0],Ca:B[C+20>>2>>>0],wa:B[C+24>>2>>>0],Ba:B[C+28>>2>>>0],$a:B[C+32>>2>>>0],Ua:B[C+36>>2>>>0],Xa:ae?Me(ae):""},v=Me(v),ae={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var te in ae)v=v.replace(new RegExp(te,"g"),ae[te]);var ye="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),xe="January February March April May June July August September October November December".split(" ");ae={"%a":k=>ye[k.wa].substring(0,3),"%A":k=>ye[k.wa],"%b":k=>xe[k.Fa].substring(0,3),"%B":k=>xe[k.Fa],"%C":k=>F((k.Ca+1900)/100|0,2),"%d":k=>F(k.Ia,2),"%e":k=>P(k.Ia,2," "),"%g":k=>Q(k).toString().substring(2),"%G":k=>Q(k),"%H":k=>F(k.Ea,2),"%I":k=>(k=k.Ea,k==0?k=12:12<k&&(k-=12),F(k,2)),"%j":k=>{for(var se=0,$e=0;$e<=k.Fa-1;se+=(ht(k.Ca+1900)?qe:Xt)[$e++]);return F(k.Ia+se,3)},"%m":k=>F(k.Fa+1,2),"%M":k=>F(k.Va,2),"%n":()=>`\n`,"%p":k=>0<=k.Ea&&12>k.Ea?"AM":"PM","%S":k=>F(k.Wa,2),"%t":()=>"	","%u":k=>k.wa||7,"%U":k=>F(Math.floor((k.Ba+7-k.wa)/7),2),"%V":k=>{var se=Math.floor((k.Ba+7-(k.wa+6)%7)/7);if(2>=(k.wa+371-k.Ba-2)%7&&se++,se)se==53&&($e=(k.wa+371-k.Ba)%7,$e==4||$e==3&&ht(k.Ca)||(se=1));else{se=52;var $e=(k.wa+7-k.Ba-1)%7;($e==4||$e==5&&ht(k.Ca%400-1))&&se++}return F(se,2)},"%w":k=>k.wa,"%W":k=>F(Math.floor((k.Ba+7-(k.wa+6)%7)/7),2),"%y":k=>(k.Ca+1900).toString().substring(2),"%Y":k=>k.Ca+1900,"%z":k=>{k=k.Ua;var se=0<=k;return k=Math.abs(k)/60,(se?"+":"-")+("0000"+(k/60*100+k%60)).slice(-4)},"%Z":k=>k.Xa,"%%":()=>"%"},v=v.replace(/%%/g,"\\0\\0");for(te in ae)v.includes(te)&&(v=v.replace(new RegExp(te,"g"),ae[te](C)));return v=v.replace(/\\0\\0/g,"%"),te=Qt(v),te.length>m?0:(G.set(te,l>>>0),te.length-1)}function yt(l){try{l()}catch(m){He(m)}}function Sr(l){var m={},v;for(v in l)(function(C){var P=l[C];m[C]=typeof P=="function"?function(){It.push(C);try{return P.apply(null,arguments)}finally{W||(It.pop()===C||He(),et&&at===1&&It.length===0&&(at=0,yt(sr),typeof Fibers<"u"&&Fibers.ab()))}}:P})(v);return m}var at=0,et=null,xr=0,It=[],Jt={},er={},_r=0,At=null,Cr=[];function Ir(){return new Promise((l,m)=>{At={resolve:l,reject:m}})}function Ar(){var l=Ut(65548),m=l+12;K[l>>2>>>0]=m,K[l+4>>2>>>0]=m+65536,m=It[0];var v=Jt[m];return v===void 0&&(v=_r++,Jt[m]=v,er[v]=m),B[l+8>>2>>>0]=v,l}function Tr(l){if(!W){if(at===0){var m=!1,v=!1;l((C=0)=>{if(!W&&(xr=C,m=!0,v)){at=2,yt(()=>Vt(et)),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.resume(),C=!1;try{var P=(0,A[er[B[et+8>>2>>>0]]])()}catch(le){P=le,C=!0}var F=!1;if(!et){var H=At;H&&(At=null,(C?H.reject:H.resolve)(P),F=!0)}if(C&&!F)throw P}}),v=!0,m||(at=1,et=Ar(),typeof Browser<"u"&&Browser.Ga.Na&&Browser.Ga.pause(),yt(()=>ir(et)))}else at===2?(at=0,yt(Tt),tr(et),et=null,Cr.forEach(C=>{if(!W)try{if(C(),!T)try{V=V=C=V,T||(r.onExit&&r.onExit(C),W=!0),d(C,new Je(C))}catch(P){P instanceof Je||P=="unwind"||d(1,P)}}catch(P){P instanceof Je||P=="unwind"||d(1,P)}})):He(`invalid state: ${at}`);return xr}}function Er(l){return Tr(m=>{l().then(m)})}var Or={n:function(l,m,v){return Er(async()=>{await r.Pa(l,m,v)})},a:function(l,m,v){throw l>>>=0,new Ct(l).Ya(m>>>0,v>>>0),jt=l,wr++,jt},g:function(){return 0},J:function(){},z:function(){},B:function(){},L:function(){return 0},H:function(){},C:function(){},G:function(){},l:function(){},A:function(){},x:function(){},I:function(){},y:function(){},m:()=>!0,q:function(l,m,v){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,v>>>=0,l=new Date(1e3*l),B[v>>2>>>0]=l.getUTCSeconds(),B[v+4>>2>>>0]=l.getUTCMinutes(),B[v+8>>2>>>0]=l.getUTCHours(),B[v+12>>2>>>0]=l.getUTCDate(),B[v+16>>2>>>0]=l.getUTCMonth(),B[v+20>>2>>>0]=l.getUTCFullYear()-1900,B[v+24>>2>>>0]=l.getUTCDay(),B[v+28>>2>>>0]=(l.getTime()-Date.UTC(l.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},r:function(l,m,v){l=m+2097152>>>0<4194305-!!l?(l>>>0)+4294967296*m:NaN,v>>>=0,l=new Date(1e3*l),B[v>>2>>>0]=l.getSeconds(),B[v+4>>2>>>0]=l.getMinutes(),B[v+8>>2>>>0]=l.getHours(),B[v+12>>2>>>0]=l.getDate(),B[v+16>>2>>>0]=l.getMonth(),B[v+20>>2>>>0]=l.getFullYear()-1900,B[v+24>>2>>>0]=l.getDay(),B[v+28>>2>>>0]=(ht(l.getFullYear())?vr:gt)[l.getMonth()]+l.getDate()-1|0,B[v+36>>2>>>0]=-(60*l.getTimezoneOffset()),m=new Date(l.getFullYear(),6,1).getTimezoneOffset();var C=new Date(l.getFullYear(),0,1).getTimezoneOffset();B[v+32>>2>>>0]=(m!=C&&l.getTimezoneOffset()==Math.min(C,m))|0},s:function(l){l>>>=0;var m=new Date(B[l+20>>2>>>0]+1900,B[l+16>>2>>>0],B[l+12>>2>>>0],B[l+8>>2>>>0],B[l+4>>2>>>0],B[l>>2>>>0],0),v=B[l+32>>2>>>0],C=m.getTimezoneOffset(),P=new Date(m.getFullYear(),6,1).getTimezoneOffset(),F=new Date(m.getFullYear(),0,1).getTimezoneOffset(),H=Math.min(F,P);return 0>v?B[l+32>>2>>>0]=+(P!=F&&H==C):0<v!=(H==C)&&(P=Math.max(F,P),m.setTime(m.getTime()+6e4*((0<v?H:P)-C))),B[l+24>>2>>>0]=m.getDay(),B[l+28>>2>>>0]=(ht(m.getFullYear())?vr:gt)[m.getMonth()]+m.getDate()-1|0,B[l>>2>>>0]=m.getSeconds(),B[l+4>>2>>>0]=m.getMinutes(),B[l+8>>2>>>0]=m.getHours(),B[l+12>>2>>>0]=m.getDate(),B[l+16>>2>>>0]=m.getMonth(),B[l+20>>2>>>0]=m.getYear(),l=m.getTime()/1e3,rr((Ke=l,1<=+Math.abs(Ke)?0<Ke?+Math.floor(Ke/4294967296)>>>0:~~+Math.ceil((Ke-+(~~Ke>>>0))/4294967296)>>>0:0)),l>>>0},o:function(){return-52},p:function(){},v:function(l,m,v){function C(Q){return(Q=Q.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?Q[1]:"GMT"}v>>>=0;var P=new Date().getFullYear(),F=new Date(P,0,1),H=new Date(P,6,1);P=F.getTimezoneOffset();var le=H.getTimezoneOffset();K[l>>>0>>2>>>0]=60*Math.max(P,le),B[m>>>0>>2>>>0]=+(P!=le),l=C(F),m=C(H),l=Bt(l),m=Bt(m),le<P?(K[v>>2>>>0]=l,K[v+4>>2>>>0]=m):(K[v>>2>>>0]=m,K[v+4>>2>>>0]=l)},e:()=>{He("")},b:function(l,m,v){return l>>>=0,m=Dt(m>>>0,v>>>0),ot[l].apply(null,m)},i:function(l,m,v){return l>>>=0,m=Dt(m>>>0,v>>>0),ot[l].apply(null,m)},h:function(){return Date.now()},w:function(){return 4294901760},c:()=>performance.now(),K:function(l,m,v){return m>>>=0,J.copyWithin(l>>>0>>>0,m>>>0,m+(v>>>0)>>>0)},u:function(l){l>>>=0;var m=J.length;if(4294901760<l)return!1;for(var v=1;4>=v;v*=2){var C=m*(1+.2/v);C=Math.min(C,l+100663296);var P=Math;C=Math.max(l,C);e:{P=P.min.call(P,4294901760,C+(65536-C%65536)%65536)-M.buffer.byteLength+65535>>>16;try{M.grow(P),ve();var F=1;break e}catch{}F=void 0}if(F)return!0}return!1},D:function(l,m){l>>>=0,m>>>=0;var v=0;return Zt().forEach(function(C,P){var F=m+v;for(P=K[l+4*P>>2>>>0]=F,F=0;F<C.length;++F)G[P++>>0>>>0]=C.charCodeAt(F);G[P>>0>>>0]=0,v+=C.length+1}),0},E:function(l,m){l>>>=0,m>>>=0;var v=Zt();K[l>>2>>>0]=v.length;var C=0;return v.forEach(function(P){C+=P.length+1}),K[m>>2>>>0]=C,0},f:()=>52,k:function(){return 52},t:function(){return 70},j:function(l,m,v,C){m>>>=0,v>>>=0,C>>>=0;for(var P=0,F=0;F<v;F++){var H=K[m>>2>>>0],le=K[m+4>>2>>>0];m+=8;for(var Q=0;Q<le;Q++){var ae=J[H+Q>>>0],te=$r[l];ae===0||ae===10?((l===1?S:x)(Kt(te,0)),te.length=0):te.push(ae)}P+=le}return K[C>>2>>>0]=P,0},F:oe,d:function(l,m,v,C){return oe(l>>>0,m>>>0,v>>>0,C>>>0)}};(function(){function l(v){if(v=v.exports,v=Sr(v),A=v=vt(v),M=A.M,ve(),be.unshift(A.N),ce--,r.monitorRunDependencies&&r.monitorRunDependencies(ce),ce==0&&(Ue!==null&&(clearInterval(Ue),Ue=null),ke)){var C=ke;ke=null,C()}return v}var m={a:Or};if(ce++,r.monitorRunDependencies&&r.monitorRunDependencies(ce),r.instantiateWasm)try{return r.instantiateWasm(m,l)}catch(v){x("Module.instantiateWasm callback failed with error: "+v),n(v)}return Ge(m,function(v){l(v.instance)}).catch(n),{}})(),r._OrtInit=(l,m)=>(r._OrtInit=A.O)(l,m),r._OrtGetLastError=(l,m)=>(r._OrtGetLastError=A.P)(l,m),r._OrtCreateSessionOptions=(l,m,v,C,P,F,H,le,Q,ae)=>(r._OrtCreateSessionOptions=A.Q)(l,m,v,C,P,F,H,le,Q,ae),r._OrtAppendExecutionProvider=(l,m)=>(r._OrtAppendExecutionProvider=A.R)(l,m),r._OrtAddFreeDimensionOverride=(l,m,v)=>(r._OrtAddFreeDimensionOverride=A.S)(l,m,v),r._OrtAddSessionConfigEntry=(l,m,v)=>(r._OrtAddSessionConfigEntry=A.T)(l,m,v),r._OrtReleaseSessionOptions=l=>(r._OrtReleaseSessionOptions=A.U)(l),r._OrtCreateSession=(l,m,v)=>(r._OrtCreateSession=A.V)(l,m,v),r._OrtReleaseSession=l=>(r._OrtReleaseSession=A.W)(l),r._OrtGetInputOutputCount=(l,m,v)=>(r._OrtGetInputOutputCount=A.X)(l,m,v),r._OrtGetInputName=(l,m)=>(r._OrtGetInputName=A.Y)(l,m),r._OrtGetOutputName=(l,m)=>(r._OrtGetOutputName=A.Z)(l,m),r._OrtFree=l=>(r._OrtFree=A._)(l),r._OrtCreateTensor=(l,m,v,C,P,F)=>(r._OrtCreateTensor=A.$)(l,m,v,C,P,F),r._OrtGetTensorData=(l,m,v,C,P)=>(r._OrtGetTensorData=A.aa)(l,m,v,C,P),r._OrtReleaseTensor=l=>(r._OrtReleaseTensor=A.ba)(l),r._OrtCreateRunOptions=(l,m,v,C)=>(r._OrtCreateRunOptions=A.ca)(l,m,v,C),r._OrtAddRunConfigEntry=(l,m,v)=>(r._OrtAddRunConfigEntry=A.da)(l,m,v),r._OrtReleaseRunOptions=l=>(r._OrtReleaseRunOptions=A.ea)(l),r._OrtCreateBinding=l=>(r._OrtCreateBinding=A.fa)(l),r._OrtBindInput=(l,m,v)=>(r._OrtBindInput=A.ga)(l,m,v),r._OrtBindOutput=(l,m,v,C)=>(r._OrtBindOutput=A.ha)(l,m,v,C),r._OrtClearBoundOutputs=l=>(r._OrtClearBoundOutputs=A.ia)(l),r._OrtReleaseBinding=l=>(r._OrtReleaseBinding=A.ja)(l),r._OrtRunWithBinding=(l,m,v,C,P)=>(r._OrtRunWithBinding=A.ka)(l,m,v,C,P),r._OrtRun=(l,m,v,C,P,F,H,le)=>(r._OrtRun=A.la)(l,m,v,C,P,F,H,le),r._OrtEndProfiling=l=>(r._OrtEndProfiling=A.ma)(l),r._JsepOutput=(l,m,v)=>(r._JsepOutput=A.na)(l,m,v),r._JsepGetNodeName=l=>(r._JsepGetNodeName=A.oa)(l);var Ut=r._malloc=l=>(Ut=r._malloc=A.pa)(l),tr=r._free=l=>(tr=r._free=A.qa)(l),rr=l=>(rr=A.sa)(l),nr=()=>(nr=A.ta)(),or=l=>(or=A.ua)(l),ar=l=>(ar=A.va)(l),ir=l=>(ir=A.xa)(l),sr=()=>(sr=A.ya)(),Vt=l=>(Vt=A.za)(l),Tt=()=>(Tt=A.Aa)();r.___start_em_js=934874,r.___stop_em_js=935035;function vt(l){l=Object.assign({},l);var m=C=>()=>C()>>>0,v=C=>P=>C(P)>>>0;return l.__errno_location=m(l.__errno_location),l.malloc=v(l.malloc),l.stackSave=m(l.stackSave),l.stackAlloc=v(l.stackAlloc),l}r.stackAlloc=ar,r.stackSave=nr,r.stackRestore=or,r.UTF8ToString=Me,r.stringToUTF8=(l,m,v)=>Yt(l,J,m,v),r.lengthBytesUTF8=Rt;var Et;ke=function l(){Et||ur(),Et||(ke=l)};function ur(){function l(){if(!Et&&(Et=!0,r.calledRun=!0,!W)){if(_t(be),o(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),r.postRun)for(typeof r.postRun=="function"&&(r.postRun=[r.postRun]);r.postRun.length;){var m=r.postRun.shift();Ce.unshift(m)}_t(Ce)}}if(!(0<ce)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)fe();_t(Z),0<ce||(r.setStatus?(r.setStatus("Running..."),setTimeout(function(){setTimeout(function(){r.setStatus("")},1),l()},1)):l())}}if(r.preInit)for(typeof r.preInit=="function"&&(r.preInit=[r.preInit]);0<r.preInit.length;)r.preInit.pop()();return ur(),t.ready}})();typeof So=="object"&&typeof $n=="object"?$n.exports=$o:typeof define=="function"&&define.amd&&define([],()=>$o)});var _o=dr(()=>{});var Co=dr(()=>{});var Io={};Mr(Io,{cpus:()=>qu});var qu,Ao=Y(()=>{qu=void 0});var Oo=dr((Eo,Sn)=>{"use strict";var To=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return ve.buffer!=ce.buffer&&he(),ce}function o(){return ve.buffer!=ce.buffer&&he(),Ue}function n(){return ve.buffer!=ce.buffer&&he(),ke}function s(){return ve.buffer!=ce.buffer&&he(),He}function u(){return ve.buffer!=ce.buffer&&he(),L}function d(){return ve.buffer!=ce.buffer&&he(),X}var a=t,p,h;a.ready=new Promise((i,c)=>{p=i,h=c}),a.jsepInit=(i,c,f,$,E,D,N,ie)=>{a.Qb=i,a.xb=c,a.zb=f,a.kb=$,a.yb=E,a.Ea=D,a.Ab=N,a.Bb=ie,c=(re,ne,ue)=>(..._e)=>{let Ae=it,R=ne?.();_e=re(..._e);let me=ne?.();return R!==me&&(re=me,ue(R),ne=ue=null),it!=Ae?ku():_e},f=re=>async(...ne)=>{try{if(a.bb)throw Error("Session already started");let ue=a.bb={Fb:ne[0],errors:[]},_e=await re(...ne);if(a.bb!==ue)throw Error("Session mismatch");i.flush();let Ae=ue.errors;if(0<Ae.length){let R=await Promise.all(Ae);if(R=R.filter(me=>me),0<R.length)throw Error(R.join(`\n`))}return _e}finally{a.bb=null}},a._OrtRun=f(c(a._OrtRun,()=>a._OrtRun,re=>a._OrtRun=re)),a._OrtRunWithBinding=f(c(a._OrtRunWithBinding,()=>a._OrtRunWithBinding,re=>a._OrtRunWithBinding=re)),a._OrtBindInput=c(a._OrtBindInput,()=>a._OrtBindInput,re=>a._OrtBindInput=re),a.jsepRegisterBuffer=(re,ne,ue,_e)=>i.registerBuffer(re,ne,ue,_e),a.jsepUnregisterBuffers=re=>{i.unregisterBuffers(re)},a.jsepGetBuffer=re=>i.getBuffer(re),a.jsepCreateDownloader=(re,ne,ue)=>i.createDownloader(re,ne,ue)};var g=Object.assign({},a),y="./this.program",w=(i,c)=>{throw c},b=typeof window=="object",_=typeof importScripts=="function",I=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",S=a.ENVIRONMENT_IS_PTHREAD||!1,x="";function O(i){return a.locateFile?a.locateFile(i,x):x+i}var T,M,A;if(I){var W=(bn(),Wt(yn)),V=(vn(),Wt(wn));x=_?V.dirname(x)+"/":__dirname+"/",T=(c,f)=>(c=c.startsWith("file://")?new URL(c):V.normalize(c),W.readFileSync(c,f?void 0:"utf8")),A=c=>(c=T(c,!0),c.buffer||(c=new Uint8Array(c)),c),M=(c,f,$,E=!0)=>{c=c.startsWith("file://")?new URL(c):V.normalize(c),W.readFile(c,E?void 0:"utf8",(D,N)=>{D?$(D):f(E?N.buffer:N)})},!a.thisProgram&&1<process.argv.length&&(y=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),w=(c,f)=>{throw process.exitCode=c,f},a.inspect=()=>"[Emscripten Module object]";let i;try{i=_o()}catch(c){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),c}global.Worker=i.Worker}else(b||_)&&(_?x=self.location.href:typeof document<"u"&&document.currentScript&&(x=document.currentScript.src),typeof e<"u"&&e&&(x=e),x.indexOf("blob:")!==0?x=x.substr(0,x.replace(/[?#].*/,"").lastIndexOf("/")+1):x="",I||(T=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.send(null),c.responseText},_&&(A=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),M=(i,c,f)=>{var $=new XMLHttpRequest;$.open("GET",i,!0),$.responseType="arraybuffer",$.onload=()=>{$.status==200||$.status==0&&$.response?c($.response):f()},$.onerror=f,$.send(null)}));I&&typeof performance>"u"&&(global.performance=Co().performance);var G=console.log.bind(console),J=console.error.bind(console);I&&(G=(...i)=>W.writeSync(1,i.join(" ")+`\n`),J=(...i)=>W.writeSync(2,i.join(" ")+`\n`));var B=a.print||G,K=a.printErr||J;Object.assign(a,g),g=null,a.thisProgram&&(y=a.thisProgram),a.quit&&(w=a.quit);var pe;a.wasmBinary&&(pe=a.wasmBinary);var ee=a.noExitRuntime||!0;typeof WebAssembly!="object"&&tt("no native wasm support detected");var ve,Z,be,Ce=!1,fe,ce,Ue,ke,He,L,X;function he(){var i=ve.buffer;a.HEAP8=ce=new Int8Array(i),a.HEAP16=new Int16Array(i),a.HEAP32=ke=new Int32Array(i),a.HEAPU8=Ue=new Uint8Array(i),a.HEAPU16=new Uint16Array(i),a.HEAPU32=He=new Uint32Array(i),a.HEAPF32=L=new Float32Array(i),a.HEAPF64=X=new Float64Array(i)}var Fe=a.INITIAL_MEMORY||16777216;if(5242880<=Fe||tt("INITIAL_MEMORY should be larger than STACK_SIZE, was "+Fe+"! (STACK_SIZE=5242880)"),S)ve=a.wasmMemory;else if(a.wasmMemory)ve=a.wasmMemory;else if(ve=new WebAssembly.Memory({initial:Fe/65536,maximum:65536,shared:!0}),!(ve.buffer instanceof SharedArrayBuffer))throw K("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),I&&K("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");he(),Fe=ve.buffer.byteLength;var Ze=[],Re=[],Ge=[],Ke=0;function ot(){return ee||0<Ke}var Je=0,_t=null,Ct=null;function jt(){Je++,a.monitorRunDependencies&&a.monitorRunDependencies(Je)}function wr(){if(Je--,a.monitorRunDependencies&&a.monitorRunDependencies(Je),Je==0&&(_t!==null&&(clearInterval(_t),_t=null),Ct)){var i=Ct;Ct=null,i()}}function tt(i){throw a.onAbort&&a.onAbort(i),i="Aborted("+i+")",K(i),Ce=!0,fe=1,i=new WebAssembly.RuntimeError(i+". Build with -sASSERTIONS for more info."),h(i),i}function Kt(i){return i.startsWith("data:application/octet-stream;base64,")}var Me;Me="ort-wasm-simd-threaded.wasm",Kt(Me)||(Me=O(Me));function Rt(i){if(i==Me&&pe)return new Uint8Array(pe);if(A)return A(i);throw"both async and sync fetching of the wasm failed"}function Yt(i){if(!pe&&(b||_)){if(typeof fetch=="function"&&!i.startsWith("file://"))return fetch(i,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at \'"+i+"\'";return c.arrayBuffer()}).catch(()=>Rt(i));if(M)return new Promise((c,f)=>{M(i,$=>c(new Uint8Array($)),f)})}return Promise.resolve().then(()=>Rt(i))}function ht(i,c,f){return Yt(i).then($=>WebAssembly.instantiate($,c)).then($=>$).then(f,$=>{K("failed to asynchronously prepare wasm: "+$),tt($)})}function vr(i,c){var f=Me;return pe||typeof WebAssembly.instantiateStreaming!="function"||Kt(f)||f.startsWith("file://")||I||typeof fetch!="function"?ht(f,i,c):fetch(f,{credentials:"same-origin"}).then($=>WebAssembly.instantiateStreaming($,i).then(c,function(E){return K("wasm streaming compile failed: "+E),K("falling back to ArrayBuffer instantiation"),ht(f,i,c)}))}var gt,Bt={924476:i=>{a.Ea("Abs",i,void 0)},924527:i=>{a.Ea("Neg",i,void 0)},924578:i=>{a.Ea("Floor",i,void 0)},924631:i=>{a.Ea("Ceil",i,void 0)},924683:i=>{a.Ea("Reciprocal",i,void 0)},924741:i=>{a.Ea("Sqrt",i,void 0)},924793:i=>{a.Ea("Exp",i,void 0)},924844:i=>{a.Ea("Erf",i,void 0)},924895:i=>{a.Ea("Sigmoid",i,void 0)},924950:i=>{a.Ea("Log",i,void 0)},925001:i=>{a.Ea("Sin",i,void 0)},925052:i=>{a.Ea("Cos",i,void 0)},925103:i=>{a.Ea("Tan",i,void 0)},925154:i=>{a.Ea("Asin",i,void 0)},925206:i=>{a.Ea("Acos",i,void 0)},925258:i=>{a.Ea("Atan",i,void 0)},925310:i=>{a.Ea("Sinh",i,void 0)},925362:i=>{a.Ea("Cosh",i,void 0)},925414:i=>{a.Ea("Asinh",i,void 0)},925467:i=>{a.Ea("Acosh",i,void 0)},925520:i=>{a.Ea("Atanh",i,void 0)},925573:i=>{a.Ea("Tanh",i,void 0)},925625:i=>{a.Ea("Not",i,void 0)},925676:(i,c,f)=>{a.Ea("Clip",i,{min:c,max:f})},925745:i=>{a.Ea("Clip",i,void 0)},925797:(i,c)=>{a.Ea("Elu",i,{alpha:c})},925855:i=>{a.Ea("Relu",i,void 0)},925907:(i,c)=>{a.Ea("LeakyRelu",i,{alpha:c})},925971:(i,c)=>{a.Ea("ThresholdedRelu",i,{alpha:c})},926041:(i,c)=>{a.Ea("Cast",i,{to:c})},926099:i=>{a.Ea("Add",i,void 0)},926150:i=>{a.Ea("Sub",i,void 0)},926201:i=>{a.Ea("Mul",i,void 0)},926252:i=>{a.Ea("Div",i,void 0)},926303:i=>{a.Ea("Pow",i,void 0)},926354:i=>{a.Ea("Equal",i,void 0)},926407:i=>{a.Ea("Greater",i,void 0)},926462:i=>{a.Ea("GreaterOrEqual",i,void 0)},926524:i=>{a.Ea("Less",i,void 0)},926576:i=>{a.Ea("LessOrEqual",i,void 0)},926635:(i,c,f,$,E)=>{a.Ea("ReduceMean",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(E>>>0,E+$>>>0)):[]})},926799:(i,c,f,$,E)=>{a.Ea("ReduceMax",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(E>>>0,E+$>>>0)):[]})},926962:(i,c,f,$,E)=>{a.Ea("ReduceMin",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(E>>>0,E+$>>>0)):[]})},927125:(i,c,f,$,E)=>{a.Ea("ReduceProd",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(E>>>0,E+$>>>0)):[]})},927289:(i,c,f,$,E)=>{a.Ea("ReduceSum",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(E>>>0,E+$>>>0)):[]})},927452:(i,c,f,$,E)=>{a.Ea("ReduceL1",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(E>>>0,E+$>>>0)):[]})},927614:(i,c,f,$,E)=>{a.Ea("ReduceL2",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(E>>>0,E+$>>>0)):[]})},927776:(i,c,f,$,E)=>{a.Ea("ReduceLogSum",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(E>>>0,E+$>>>0)):[]})},927942:(i,c,f,$,E)=>{a.Ea("ReduceSumSquare",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(E>>>0,E+$>>>0)):[]})},928111:(i,c,f,$,E)=>{a.Ea("ReduceLogSumExp",i,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:$?Array.from(n().subarray(E>>>0,E+$>>>0)):[]})},928280:i=>{a.Ea("Where",i,void 0)},928333:(i,c,f)=>{a.Ea("Transpose",i,{perm:c?Array.from(n().subarray(f>>>0,f+c>>>0)):[]})},928446:(i,c,f,$,E,D,N,ie,re,ne,ue,_e,Ae,R,me)=>{a.Ea("ConvTranspose",i,{format:re?"NHWC":"NCHW",autoPad:c,dilations:[f],group:$,kernel_shape:[E],pads:[D,N],strides:[ie],wIsConst:()=>!!r()[ne>>>0],outputPadding:ue?Array.from(n().subarray(_e>>>0,_e+ue>>>0)):[],outputShape:Ae?Array.from(n().subarray(R>>>0,R+Ae>>>0)):[],activation:qe(me)})},928860:(i,c,f,$,E,D,N,ie,re,ne,ue,_e,Ae,R)=>{a.Ea("ConvTranspose",i,{format:ie?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(f>>>0,f+2>>>0)),group:$,kernelShape:Array.from(n().subarray(E>>>0,E+2>>>0)),pads:Array.from(n().subarray(D>>>0,D+4>>>0)),strides:Array.from(n().subarray(N>>>0,N+2>>>0)),wIsConst:()=>!!r()[re>>>0],outputPadding:0<ne?Array.from(n().subarray(ue>>>0,ue+ne>>>0)):[],outputShape:0<_e?Array.from(n().subarray(Ae>>>0,Ae+_e>>>0)):[],activation:qe(R)})},929417:(i,c,f,$,E,D,N,ie,re,ne,ue,_e,Ae,R,me)=>{a.Ea("ConvTranspose",i,{format:re?"NHWC":"NCHW",autoPad:c,dilations:[f],group:$,kernel_shape:[E],pads:[D,N],strides:[ie],wIsConst:()=>!!r()[ne>>>0],outputPadding:ue?Array.from(n().subarray(_e>>>0,_e+ue>>>0)):[],outputShape:Ae?Array.from(n().subarray(R>>>0,R+Ae>>>0)):[],activation:qe(me)})},929831:(i,c,f,$,E,D,N,ie,re,ne,ue,_e,Ae,R)=>{a.Ea("ConvTranspose",i,{format:ie?"NHWC":"NCHW",autoPad:c,dilations:Array.from(n().subarray(f>>>0,f+2>>>0)),group:$,kernelShape:Array.from(n().subarray(E>>>0,E+2>>>0)),pads:Array.from(n().subarray(D>>>0,D+4>>>0)),strides:Array.from(n().subarray(N>>>0,N+2>>>0)),wIsConst:()=>!!r()[re>>>0],outputPadding:0<ne?Array.from(n().subarray(ue>>>0,ue+ne>>>0)):[],outputShape:0<_e?Array.from(n().subarray(Ae>>>0,Ae+_e>>>0)):[],activation:qe(R)})},930388:(i,c)=>{a.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},930479:(i,c,f,$,E,D,N,ie,re,ne,ue,_e,Ae,R,me,Ie)=>{a.Ea("AveragePool",i,{format:Ie?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:E,dilations:[D,N],kernel_shape:[ie,re],pads:[ne,ue,_e,Ae],strides:[R,me]})},930763:(i,c)=>{a.Ea("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},930854:(i,c,f,$,E,D,N,ie,re,ne,ue,_e,Ae,R,me,Ie)=>{a.Ea("AveragePool",i,{format:Ie?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:E,dilations:[D,N],kernel_shape:[ie,re],pads:[ne,ue,_e,Ae],strides:[R,me]})},931138:(i,c)=>{a.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},931225:(i,c,f,$,E,D,N,ie,re,ne,ue,_e,Ae,R,me,Ie)=>{a.Ea("MaxPool",i,{format:Ie?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:E,dilations:[D,N],kernel_shape:[ie,re],pads:[ne,ue,_e,Ae],strides:[R,me]})},931505:(i,c)=>{a.Ea("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},931592:(i,c,f,$,E,D,N,ie,re,ne,ue,_e,Ae,R,me,Ie)=>{a.Ea("MaxPool",i,{format:Ie?"NHWC":"NCHW",auto_pad:c,ceil_mode:f,count_include_pad:$,storage_order:E,dilations:[D,N],kernel_shape:[ie,re],pads:[ne,ue,_e,Ae],strides:[R,me]})},931872:(i,c,f,$,E)=>{a.Ea("Gemm",i,{alpha:c,beta:f,transA:$,transB:E})},931976:i=>{a.Ea("MatMul",i,void 0)},932030:(i,c,f,$)=>{a.Ea("ArgMax",i,{keepDims:!!c,selectLastIndex:!!f,axis:$})},932138:(i,c,f,$)=>{a.Ea("ArgMin",i,{keepDims:!!c,selectLastIndex:!!f,axis:$})},932246:(i,c)=>{a.Ea("Softmax",i,{axis:c})},932309:(i,c)=>{a.Ea("Concat",i,{axis:c})},932369:(i,c,f,$,E)=>{a.Ea("Split",i,{axis:c,numOutputs:f,splitSizes:$?Array.from(n().subarray(E>>>0,E+$>>>0)):[]})},932514:i=>{a.Ea("Expand",i,void 0)},932568:(i,c)=>{a.Ea("Gather",i,{axis:Number(c)})},932639:(i,c)=>{a.Ea("GatherElements",i,{axis:Number(c)})},932718:(i,c,f,$,E,D,N,ie,re,ne,ue)=>{a.Ea("Resize",i,{antialias:c,axes:f?Array.from(n().subarray($>>>0,$+f>>>0)):[],coordinateTransformMode:qe(E),cubicCoeffA:D,excludeOutside:N,extrapolationValue:ie,keepAspectRatioPolicy:qe(re),mode:qe(ne),nearestMode:qe(ue)})},933069:(i,c,f,$,E,D,N)=>{a.Ea("Slice",i,{starts:c?Array.from(n().subarray(f>>>0,f+c>>>0)):[],ends:$?Array.from(n().subarray(E>>>0,E+$>>>0)):[],axes:D?Array.from(n().subarray(N>>>0,N+D>>>0)):[]})},933300:i=>{a.Ea("Tile",i,void 0)},933352:(i,c,f)=>{a.Ea("LayerNormalization",i,{axis:Number(c),epsilon:Number(f)})},933459:(i,c,f)=>{a.Ea("InstanceNormalization",i,{epsilon:c,format:f?"NHWC":"NCHW"})},933573:(i,c,f)=>{a.Ea("InstanceNormalization",i,{epsilon:c,format:f?"NHWC":"NCHW"})},933687:i=>{a.Ea("Range",i,void 0)},933740:(i,c)=>{a.Ea("Einsum",i,{equation:qe(c)})},933821:(i,c,f,$,E)=>{a.Ea("Pad",i,{mode:c,value:f,pads:$?Array.from(n().subarray(E>>>0,E+$>>>0)):[]})},933953:(i,c,f,$,E,D)=>{a.Ea("BatchNormalization",i,{epsilon:c,momentum:f,spatial:!!E,trainingMode:!!$,format:D?"NHWC":"NCHW"})},934122:(i,c,f,$,E,D)=>{a.Ea("BatchNormalization",i,{epsilon:c,momentum:f,spatial:!!E,trainingMode:!!$,format:D?"NHWC":"NCHW"})},934291:(i,c,f)=>{a.Ea("CumSum",i,{exclusive:Number(c),reverse:Number(f)})},934388:(i,c,f,$,E,D,N,ie,re)=>{a.Ea("Attention",i,{numHeads:c,isUnidirectional:f,maskFilterValue:$,scale:E,doRotary:D,qkvHiddenSizes:N?Array.from(n().subarray(Number(ie)>>>0,Number(ie)+N>>>0)):[],pastPresentShareBuffer:!!re})},934660:i=>{a.Ea("Gelu",i,void 0)},934712:(i,c,f,$,E,D)=>{a.Ea("MultiHeadAttention",i,{numHeads:c,isUnidirectional:f,maskFilterValue:$,scale:E,doRotary:D})},934871:i=>{a.Ea("BiasAdd",i,void 0)},934926:i=>{a.Ea("BiasSplitGelu",i,void 0)},934987:(i,c)=>{a.Ea("SkipLayerNormalization",i,{epsilon:c})},935068:(i,c,f,$,E,D,N,ie,re,ne,ue,_e,Ae)=>{a.Ea("Conv",i,{format:re?"NHWC":"NCHW",auto_pad:c,dilations:[f],group:$,kernel_shape:[E],pads:D?Array.from(n().subarray(N>>>0,N+D>>>0)):[],strides:[ie],w_is_const:()=>!!r()[ne>>>0],activation:qe(ue),activation_params:_e?Array.from(u().subarray(Ae>>>0,Ae+_e>>>0)):[]})},935449:(i,c,f,$,E,D,N,ie,re,ne,ue,_e,Ae,R,me,Ie)=>{a.Ea("Conv",i,{format:_e?"NHWC":"NCHW",auto_pad:c,dilations:[f,$],group:E,kernel_shape:[D,N],pads:ie?Array.from(n().subarray(re>>>0,re+ie>>>0)):[],strides:[ne,ue],w_is_const:()=>!!r()[Ae>>>0],activation:qe(R),activation_params:me?Array.from(u().subarray(Ie>>>0,Ie+me>>>0)):[]})},935851:i=>{a.Ab(i)},935885:(i,c)=>a.Bb(i,c,a.bb.Fb,a.bb.errors),935997:i=>a.xb(i),936030:i=>a.zb(i),936062:(i,c,f)=>{a.kb(i,c,f,!0)},936101:(i,c,f)=>{a.kb(i,c,f)}};function wt(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}function Dt(i){i.terminate(),i.onmessage=()=>{}}function Mt(i){(i=oe.Qa[i])||tt(),oe.Eb(i)}function Zt(i){var c=oe.ub();if(!c)return 6;oe.Za.push(c),oe.Qa[i.Xa]=c,c.Xa=i.Xa;var f={cmd:"run",start_routine:i.Gb,arg:i.sb,pthread_ptr:i.Xa};return I&&c.unref(),c.postMessage(f,i.Mb),0}var zt=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,$r=(i,c,f)=>{c>>>=0;var $=c+f;for(f=c;i[f]&&!(f>=$);)++f;if(16<f-c&&i.buffer&&zt)return zt.decode(i.buffer instanceof SharedArrayBuffer?i.slice(c,f):i.subarray(c,f));for($="";c<f;){var E=i[c++];if(E&128){var D=i[c++]&63;if((E&224)==192)$+=String.fromCharCode((E&31)<<6|D);else{var N=i[c++]&63;E=(E&240)==224?(E&15)<<12|D<<6|N:(E&7)<<18|D<<12|N<<6|i[c++]&63,65536>E?$+=String.fromCharCode(E):(E-=65536,$+=String.fromCharCode(55296|E>>10,56320|E&1023))}}else $+=String.fromCharCode(E)}return $},qe=(i,c)=>(i>>>=0)?$r(o(),i,c):"";function Xt(i){if(S)return H(1,1,i);fe=i,ot()||(oe.Hb(),a.onExit&&a.onExit(i),Ce=!0),w(i,new wt(i))}var Qt=i=>{if(fe=i,S)throw Sr(i),"unwind";Xt(i)},oe={Ya:[],Za:[],ob:[],Qa:{},gb:function(){S?oe.wb():oe.vb()},vb:function(){for(var i=a.numThreads;i--;)oe.jb();Ze.unshift(()=>{jt(),oe.Cb(()=>wr())})},wb:function(){oe.receiveObjectTransfer=oe.Db,oe.threadInitTLS=oe.nb,oe.setExitStatus=oe.mb,ee=!1},mb:function(i){fe=i},Sb:["$terminateWorker"],Hb:function(){for(var i of oe.Za)Dt(i);for(i of oe.Ya)Dt(i);oe.Ya=[],oe.Za=[],oe.Qa=[]},Eb:function(i){var c=i.Xa;delete oe.Qa[c],oe.Ya.push(i),oe.Za.splice(oe.Za.indexOf(i),1),i.Xa=0,pn(c)},Db:function(){},nb:function(){oe.ob.forEach(i=>i())},lb:i=>new Promise(c=>{i.onmessage=D=>{D=D.data;var N=D.cmd;if(D.targetThread&&D.targetThread!=Rr()){var ie=oe.Qa[D.Rb];ie?ie.postMessage(D,D.transferList):K(\'Internal error! Worker sent a message "\'+N+\'" to target pthread \'+D.targetThread+", but that thread no longer exists!")}else N==="checkMailbox"?Tt():N==="spawnThread"?Zt(D):N==="cleanupThread"?Mt(D.thread):N==="killThread"?(D=D.thread,N=oe.Qa[D],delete oe.Qa[D],Dt(N),pn(D),oe.Za.splice(oe.Za.indexOf(N),1),N.Xa=0):N==="cancelThread"?oe.Qa[D.thread].postMessage({cmd:"cancel"}):N==="loaded"?(i.loaded=!0,I&&!i.Xa&&i.unref(),c(i)):N==="alert"?alert("Thread "+D.threadId+": "+D.text):D.target==="setimmediate"?i.postMessage(D):N==="callHandler"?a[D.handler](...D.args):N&&K("worker sent an unknown command "+N)},i.onerror=D=>{throw K("worker sent an error! "+D.filename+":"+D.lineno+": "+D.message),D},I&&(i.on("message",function(D){i.onmessage({data:D})}),i.on("error",function(D){i.onerror(D)}));var f=[],$=["onExit","onAbort","print","printErr"],E;for(E of $)a.hasOwnProperty(E)&&f.push(E);i.postMessage({cmd:"load",handlers:f,urlOrBlob:a.mainScriptUrlOrBlob||e,wasmMemory:ve,wasmModule:be})}),Cb:function(i){if(S)return i();Promise.all(oe.Ya.map(oe.lb)).then(i)},jb:function(){var i=O("ort-wasm-simd-threaded.worker.js");i=new Worker(i),oe.Ya.push(i)},ub:function(){return oe.Ya.length==0&&(oe.jb(),oe.lb(oe.Ya[0])),oe.Ya.pop()}};a.PThread=oe;var yt=i=>{for(;0<i.length;)i.shift()(a)};a.establishStackSpace=function(){var i=Rr(),c=n()[i+52>>2>>>0];i=n()[i+56>>2>>>0],mo(c,c-i),Br(c)};function Sr(i){if(S)return H(2,0,i);Qt(i)}a.invokeEntryPoint=function(i,c){i=fo.apply(null,[i,c]),ot()?oe.mb(i):mn(i)};function at(i){this.fb=i-24,this.rb=function(c){s()[this.fb+4>>2>>>0]=c},this.qb=function(c){s()[this.fb+8>>2>>>0]=c},this.gb=function(c,f){this.pb(),this.rb(c),this.qb(f)},this.pb=function(){s()[this.fb+16>>2>>>0]=0}}var et=0,xr=0;function It(i,c,f,$){return S?H(3,1,i,c,f,$):Jt(i,c,f,$)}function Jt(i,c,f,$){if(i>>>=0,c>>>=0,f>>>=0,$>>>=0,typeof SharedArrayBuffer>"u")return K("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var E=[];return S&&E.length===0?It(i,c,f,$):(i={Gb:f,Xa:i,sb:$,Mb:E},S?(i.Ob="spawnThread",postMessage(i,E),0):Zt(i))}function er(i,c,f){return S?H(4,1,i,c,f):0}function _r(i,c){if(S)return H(5,1,i,c)}var At=i=>{for(var c=0,f=0;f<i.length;++f){var $=i.charCodeAt(f);127>=$?c++:2047>=$?c+=2:55296<=$&&57343>=$?(c+=4,++f):c+=3}return c},Cr=(i,c,f,$)=>{if(f>>>=0,!(0<$))return 0;var E=f;$=f+$-1;for(var D=0;D<i.length;++D){var N=i.charCodeAt(D);if(55296<=N&&57343>=N){var ie=i.charCodeAt(++D);N=65536+((N&1023)<<10)|ie&1023}if(127>=N){if(f>=$)break;c[f++>>>0]=N}else{if(2047>=N){if(f+1>=$)break;c[f++>>>0]=192|N>>6}else{if(65535>=N){if(f+2>=$)break;c[f++>>>0]=224|N>>12}else{if(f+3>=$)break;c[f++>>>0]=240|N>>18,c[f++>>>0]=128|N>>12&63}c[f++>>>0]=128|N>>6&63}c[f++>>>0]=128|N&63}}return c[f>>>0]=0,f-E},Ir=(i,c,f)=>Cr(i,o(),c,f);function Ar(i,c){if(S)return H(6,1,i,c)}function Tr(i,c,f){if(S)return H(7,1,i,c,f)}function Er(i,c,f){return S?H(8,1,i,c,f):0}function Or(i,c){if(S)return H(9,1,i,c)}function Ut(i,c,f){if(S)return H(10,1,i,c,f)}function tr(i,c,f,$){if(S)return H(11,1,i,c,f,$)}function rr(i,c,f,$){if(S)return H(12,1,i,c,f,$)}function nr(i,c,f,$){if(S)return H(13,1,i,c,f,$)}function or(i){if(S)return H(14,1,i)}function ar(i,c){if(S)return H(15,1,i,c)}function ir(i,c,f){if(S)return H(16,1,i,c,f)}var sr=i=>{if(!Ce)try{if(i(),!ot())try{S?mn(fe):Qt(fe)}catch(c){c instanceof wt||c=="unwind"||w(1,c)}}catch(c){c instanceof wt||c=="unwind"||w(1,c)}};function Vt(i){i>>>=0,typeof Atomics.Nb=="function"&&(Atomics.Nb(n(),i>>2,i).value.then(Tt),i+=128,Atomics.store(n(),i>>2,1))}a.__emscripten_thread_mailbox_await=Vt;function Tt(){var i=Rr();i&&(Vt(i),sr(()=>co()))}a.checkMailbox=Tt;var vt=i=>i%4===0&&(i%100!==0||i%400===0),Et=[0,31,60,91,121,152,182,213,244,274,305,335],ur=[0,31,59,90,120,151,181,212,243,273,304,334];function l(i,c,f,$,E,D,N,ie){return S?H(17,1,i,c,f,$,E,D,N,ie):-52}function m(i,c,f,$,E,D,N){if(S)return H(18,1,i,c,f,$,E,D,N)}var v=i=>{var c=At(i)+1,f=cn(c);return f&&Ir(i,f,c),f},C=[],P=(i,c)=>{C.length=0;var f;for(c>>=2;f=o()[i++>>>0];)c+=f!=105&c,C.push(f==105?n()[c>>>0]:d()[c++>>>1]),++c;return C},F=i=>{var c=fn();return i=i(),Br(c),i};function H(i,c){var f=arguments.length-2,$=arguments;return F(()=>{for(var E=hn(8*f),D=E>>3,N=0;N<f;N++){var ie=$[2+N];d()[D+N>>>0]=ie}return lo(i,f,E,c)})}var le=[],Q={},ae=()=>{if(!te){var i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:y||"./this.program"},c;for(c in Q)Q[c]===void 0?delete i[c]:i[c]=Q[c];var f=[];for(c in i)f.push(`${c}=${i[c]}`);te=f}return te},te;function ye(i,c){if(S)return H(19,1,i,c);i>>>=0,c>>>=0;var f=0;return ae().forEach(function($,E){var D=c+f;for(E=s()[i+4*E>>2>>>0]=D,D=0;D<$.length;++D)r()[E++>>0>>>0]=$.charCodeAt(D);r()[E>>0>>>0]=0,f+=$.length+1}),0}function xe(i,c){if(S)return H(20,1,i,c);i>>>=0,c>>>=0;var f=ae();s()[i>>2>>>0]=f.length;var $=0;return f.forEach(function(E){$+=E.length+1}),s()[c>>2>>>0]=$,0}function k(i){return S?H(21,1,i):52}function se(i,c,f,$){return S?H(22,1,i,c,f,$):52}function $e(i,c,f,$,E){return S?H(23,1,i,c,f,$,E):70}var bt=[null,[],[]];function lr(i,c,f,$){if(S)return H(24,1,i,c,f,$);c>>>=0,f>>>=0,$>>>=0;for(var E=0,D=0;D<f;D++){var N=s()[c>>2>>>0],ie=s()[c+4>>2>>>0];c+=8;for(var re=0;re<ie;re++){var ne=o()[N+re>>>0],ue=bt[i];ne===0||ne===10?((i===1?B:K)($r(ue,0)),ue.length=0):ue.push(ne)}E+=ie}return s()[$>>2>>>0]=E,0}var to=[31,29,31,30,31,30,31,31,30,31,30,31],ro=[31,28,31,30,31,30,31,31,30,31,30,31];function Au(i){var c=Array(At(i)+1);return Cr(i,c,0,c.length),c}var Tu=(i,c)=>{r().set(i,c>>>0)};function no(i,c,f,$){function E(R,me,Ie){for(R=typeof R=="number"?R.toString():R||"";R.length<me;)R=Ie[0]+R;return R}function D(R,me){return E(R,me,"0")}function N(R,me){function Ie(vo){return 0>vo?-1:0<vo?1:0}var Ot;return(Ot=Ie(R.getFullYear()-me.getFullYear()))===0&&(Ot=Ie(R.getMonth()-me.getMonth()))===0&&(Ot=Ie(R.getDate()-me.getDate())),Ot}function ie(R){switch(R.getDay()){case 0:return new Date(R.getFullYear()-1,11,29);case 1:return R;case 2:return new Date(R.getFullYear(),0,3);case 3:return new Date(R.getFullYear(),0,2);case 4:return new Date(R.getFullYear(),0,1);case 5:return new Date(R.getFullYear()-1,11,31);case 6:return new Date(R.getFullYear()-1,11,30)}}function re(R){var me=R.$a;for(R=new Date(new Date(R.ab+1900,0,1).getTime());0<me;){var Ie=R.getMonth(),Ot=(vt(R.getFullYear())?to:ro)[Ie];if(me>Ot-R.getDate())me-=Ot-R.getDate()+1,R.setDate(1),11>Ie?R.setMonth(Ie+1):(R.setMonth(0),R.setFullYear(R.getFullYear()+1));else{R.setDate(R.getDate()+me);break}}return Ie=new Date(R.getFullYear()+1,0,4),me=ie(new Date(R.getFullYear(),0,4)),Ie=ie(Ie),0>=N(me,R)?0>=N(Ie,R)?R.getFullYear()+1:R.getFullYear():R.getFullYear()-1}i>>>=0,c>>>=0,f>>>=0,$>>>=0;var ne=n()[$+40>>2>>>0];$={Kb:n()[$>>2>>>0],Jb:n()[$+4>>2>>>0],cb:n()[$+8>>2>>>0],ib:n()[$+12>>2>>>0],eb:n()[$+16>>2>>>0],ab:n()[$+20>>2>>>0],Wa:n()[$+24>>2>>>0],$a:n()[$+28>>2>>>0],Tb:n()[$+32>>2>>>0],Ib:n()[$+36>>2>>>0],Lb:ne?qe(ne):""},f=qe(f),ne={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ue in ne)f=f.replace(new RegExp(ue,"g"),ne[ue]);var _e="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Ae="January February March April May June July August September October November December".split(" ");ne={"%a":R=>_e[R.Wa].substring(0,3),"%A":R=>_e[R.Wa],"%b":R=>Ae[R.eb].substring(0,3),"%B":R=>Ae[R.eb],"%C":R=>D((R.ab+1900)/100|0,2),"%d":R=>D(R.ib,2),"%e":R=>E(R.ib,2," "),"%g":R=>re(R).toString().substring(2),"%G":R=>re(R),"%H":R=>D(R.cb,2),"%I":R=>(R=R.cb,R==0?R=12:12<R&&(R-=12),D(R,2)),"%j":R=>{for(var me=0,Ie=0;Ie<=R.eb-1;me+=(vt(R.ab+1900)?to:ro)[Ie++]);return D(R.ib+me,3)},"%m":R=>D(R.eb+1,2),"%M":R=>D(R.Jb,2),"%n":()=>`\n`,"%p":R=>0<=R.cb&&12>R.cb?"AM":"PM","%S":R=>D(R.Kb,2),"%t":()=>"	","%u":R=>R.Wa||7,"%U":R=>D(Math.floor((R.$a+7-R.Wa)/7),2),"%V":R=>{var me=Math.floor((R.$a+7-(R.Wa+6)%7)/7);if(2>=(R.Wa+371-R.$a-2)%7&&me++,me)me==53&&(Ie=(R.Wa+371-R.$a)%7,Ie==4||Ie==3&&vt(R.ab)||(me=1));else{me=52;var Ie=(R.Wa+7-R.$a-1)%7;(Ie==4||Ie==5&&vt(R.ab%400-1))&&me++}return D(me,2)},"%w":R=>R.Wa,"%W":R=>D(Math.floor((R.$a+7-(R.Wa+6)%7)/7),2),"%y":R=>(R.ab+1900).toString().substring(2),"%Y":R=>R.ab+1900,"%z":R=>{R=R.Ib;var me=0<=R;return R=Math.abs(R)/60,(me?"+":"-")+("0000"+(R/60*100+R%60)).slice(-4)},"%Z":R=>R.Lb,"%%":()=>"%"},f=f.replace(/%%/g,"\\0\\0");for(ue in ne)f.includes(ue)&&(f=f.replace(new RegExp(ue,"g"),ne[ue]($)));return f=f.replace(/\\0\\0/g,"%"),ue=Au(f),ue.length>c?0:(Tu(ue,i),ue.length-1)}function Pr(i){try{i()}catch(c){tt(c)}}function Eu(i){var c={},f;for(f in i)(function($){var E=i[$];c[$]=typeof E=="function"?function(){kr.push($);try{return E.apply(null,arguments)}finally{Ce||(kr.pop()===$||tt(),it&&$t===1&&kr.length===0&&($t=0,Ke+=1,Pr(go),typeof Fibers<"u"&&Fibers.Ub()))}}:E})(f);return c}var $t=0,it=null,oo=0,kr=[],ao={},io={},Ou=0,dn=null,Pu=[];function ku(){return new Promise((i,c)=>{dn={resolve:i,reject:c}})}function Ru(){var i=cn(65548),c=i+12;s()[i>>2>>>0]=c,s()[i+4>>2>>>0]=c+65536,c=kr[0];var f=ao[c];return f===void 0&&(f=Ou++,ao[c]=f,io[f]=c),c=f,n()[i+8>>2>>>0]=c,i}function Bu(){var i=n()[it+8>>2>>>0];return i=Z[io[i]],--Ke,i()}function Du(i){if(!Ce){if($t===0){var c=!1,f=!1;i(($=0)=>{if(!Ce&&(oo=$,c=!0,f)){$t=2,Pr(()=>yo(it)),typeof Browser<"u"&&Browser.hb.tb&&Browser.hb.resume(),$=!1;try{var E=Bu()}catch(ie){E=ie,$=!0}var D=!1;if(!it){var N=dn;N&&(dn=null,($?N.reject:N.resolve)(E),D=!0)}if($&&!D)throw E}}),f=!0,c||($t=1,it=Ru(),typeof Browser<"u"&&Browser.hb.tb&&Browser.hb.pause(),Pr(()=>ho(it)))}else $t===2?($t=0,Pr(bo),so(it),it=null,Pu.forEach($=>sr($))):tt(`invalid state: ${$t}`);return oo}}function Mu(i){return Du(c=>{i().then(c)})}oe.gb();var zu=[null,Xt,Sr,It,er,_r,Ar,Tr,Er,Or,Ut,tr,rr,nr,or,ar,ir,l,m,ye,xe,k,se,$e,lr],Uu={r:function(i,c,f){return Mu(async()=>{await a.yb(i,c,f)})},b:function(i,c,f){throw i>>>=0,new at(i).gb(c>>>0,f>>>0),et=i,xr++,et},O:function(i){uo(i>>>0,!_,1,!b,131072,!1),oe.nb()},l:function(i){i>>>=0,S?postMessage({cmd:"cleanupThread",thread:i}):Mt(i)},I:Jt,i:er,U:_r,E:Ar,G:Tr,V:Er,S:Or,K:Ut,R:tr,p:rr,F:nr,C:or,T:ar,D:ir,q:()=>!0,A:function(i,c){i>>>=0,i==c>>>0?setTimeout(()=>Tt()):S?postMessage({targetThread:i,cmd:"checkMailbox"}):(i=oe.Qa[i])&&i.postMessage({cmd:"checkMailbox"})},M:function(){return-1},N:Vt,X:function(i){I&&oe.Qa[i>>>0].ref()},u:function(i,c,f){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,f>>>=0,i=new Date(1e3*i),n()[f>>2>>>0]=i.getUTCSeconds(),n()[f+4>>2>>>0]=i.getUTCMinutes(),n()[f+8>>2>>>0]=i.getUTCHours(),n()[f+12>>2>>>0]=i.getUTCDate(),n()[f+16>>2>>>0]=i.getUTCMonth(),n()[f+20>>2>>>0]=i.getUTCFullYear()-1900,n()[f+24>>2>>>0]=i.getUTCDay(),i=(i.getTime()-Date.UTC(i.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[f+28>>2>>>0]=i},v:function(i,c,f){i=c+2097152>>>0<4194305-!!i?(i>>>0)+4294967296*c:NaN,f>>>=0,i=new Date(1e3*i),n()[f>>2>>>0]=i.getSeconds(),n()[f+4>>2>>>0]=i.getMinutes(),n()[f+8>>2>>>0]=i.getHours(),n()[f+12>>2>>>0]=i.getDate(),n()[f+16>>2>>>0]=i.getMonth(),n()[f+20>>2>>>0]=i.getFullYear()-1900,n()[f+24>>2>>>0]=i.getDay(),c=(vt(i.getFullYear())?Et:ur)[i.getMonth()]+i.getDate()-1|0,n()[f+28>>2>>>0]=c,n()[f+36>>2>>>0]=-(60*i.getTimezoneOffset()),c=new Date(i.getFullYear(),6,1).getTimezoneOffset();var $=new Date(i.getFullYear(),0,1).getTimezoneOffset();i=(c!=$&&i.getTimezoneOffset()==Math.min($,c))|0,n()[f+32>>2>>>0]=i},w:function(i){i>>>=0;var c=new Date(n()[i+20>>2>>>0]+1900,n()[i+16>>2>>>0],n()[i+12>>2>>>0],n()[i+8>>2>>>0],n()[i+4>>2>>>0],n()[i>>2>>>0],0),f=n()[i+32>>2>>>0],$=c.getTimezoneOffset(),E=new Date(c.getFullYear(),6,1).getTimezoneOffset(),D=new Date(c.getFullYear(),0,1).getTimezoneOffset(),N=Math.min(D,E);return 0>f?n()[i+32>>2>>>0]=+(E!=D&&N==$):0<f!=(N==$)&&(E=Math.max(D,E),c.setTime(c.getTime()+6e4*((0<f?N:E)-$))),n()[i+24>>2>>>0]=c.getDay(),f=(vt(c.getFullYear())?Et:ur)[c.getMonth()]+c.getDate()-1|0,n()[i+28>>2>>>0]=f,n()[i>>2>>>0]=c.getSeconds(),n()[i+4>>2>>>0]=c.getMinutes(),n()[i+8>>2>>>0]=c.getHours(),n()[i+12>>2>>>0]=c.getDate(),n()[i+16>>2>>>0]=c.getMonth(),n()[i+20>>2>>>0]=c.getYear(),i=c.getTime()/1e3,po((gt=i,1<=+Math.abs(gt)?0<gt?+Math.floor(gt/4294967296)>>>0:~~+Math.ceil((gt-+(~~gt>>>0))/4294967296)>>>0:0)),i>>>0},s:l,t:m,z:function(i,c,f){function $(ne){return(ne=ne.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?ne[1]:"GMT"}i>>>=0,c>>>=0,f>>>=0;var E=new Date().getFullYear(),D=new Date(E,0,1),N=new Date(E,6,1);E=D.getTimezoneOffset();var ie=N.getTimezoneOffset(),re=Math.max(E,ie);s()[i>>2>>>0]=60*re,n()[c>>2>>>0]=+(E!=ie),i=$(D),c=$(N),i=v(i),c=v(c),ie<E?(s()[f>>2>>>0]=i,s()[f+4>>2>>>0]=c):(s()[f>>2>>>0]=c,s()[f+4>>2>>>0]=i)},d:()=>{tt("")},c:function(i,c,f){return i>>>=0,c=P(c>>>0,f>>>0),Bt[i].apply(null,c)},k:function(i,c,f){return i>>>=0,c=P(c>>>0,f>>>0),Bt[i].apply(null,c)},m:function(){},j:function(){return Date.now()},W:()=>{throw Ke+=1,"unwind"},B:function(){return 4294901760},f:()=>performance.timeOrigin+performance.now(),g:function(){return I?(Ao(),Wt(Io)).cpus().length:navigator.hardwareConcurrency},L:function(i,c,f,$){for(oe.Pb=c>>>0,le.length=f,c=$>>>0>>3,$=0;$<f;$++)le[$]=d()[c+$>>>0];return(0>i?Bt[-i-1]:zu[i]).apply(null,le)},y:function(i){i>>>=0;var c=o().length;if(i<=c||4294901760<i)return!1;for(var f=1;4>=f;f*=2){var $=c*(1+.2/f);$=Math.min($,i+100663296);var E=Math;$=Math.max(i,$);e:{E=E.min.call(E,4294901760,$+(65536-$%65536)%65536)-ve.buffer.byteLength+65535>>>16;try{ve.grow(E),he();var D=1;break e}catch{}D=void 0}if(D)return!0}return!1},P:ye,Q:xe,H:Qt,h:k,o:se,x:$e,n:lr,a:ve||a.wasmMemory,J:no,e:function(i,c,f,$){return no(i>>>0,c>>>0,f>>>0,$>>>0)}};(function(){function i(f,$){return f=f.exports,f=Eu(f),Z=f=Vu(f),oe.ob.push(Z.Da),Re.unshift(Z.Y),be=$,wr(),f}var c={a:Uu};if(jt(),a.instantiateWasm)try{return a.instantiateWasm(c,i)}catch(f){K("Module.instantiateWasm callback failed with error: "+f),h(f)}return vr(c,function(f){i(f.instance,f.module)}).catch(h),{}})(),a._OrtInit=(i,c)=>(a._OrtInit=Z.Z)(i,c),a._OrtGetLastError=(i,c)=>(a._OrtGetLastError=Z._)(i,c),a._OrtCreateSessionOptions=(i,c,f,$,E,D,N,ie,re,ne)=>(a._OrtCreateSessionOptions=Z.$)(i,c,f,$,E,D,N,ie,re,ne),a._OrtAppendExecutionProvider=(i,c)=>(a._OrtAppendExecutionProvider=Z.aa)(i,c),a._OrtAddFreeDimensionOverride=(i,c,f)=>(a._OrtAddFreeDimensionOverride=Z.ba)(i,c,f),a._OrtAddSessionConfigEntry=(i,c,f)=>(a._OrtAddSessionConfigEntry=Z.ca)(i,c,f),a._OrtReleaseSessionOptions=i=>(a._OrtReleaseSessionOptions=Z.da)(i),a._OrtCreateSession=(i,c,f)=>(a._OrtCreateSession=Z.ea)(i,c,f),a._OrtReleaseSession=i=>(a._OrtReleaseSession=Z.fa)(i),a._OrtGetInputOutputCount=(i,c,f)=>(a._OrtGetInputOutputCount=Z.ga)(i,c,f),a._OrtGetInputName=(i,c)=>(a._OrtGetInputName=Z.ha)(i,c),a._OrtGetOutputName=(i,c)=>(a._OrtGetOutputName=Z.ia)(i,c),a._OrtFree=i=>(a._OrtFree=Z.ja)(i),a._OrtCreateTensor=(i,c,f,$,E,D)=>(a._OrtCreateTensor=Z.ka)(i,c,f,$,E,D),a._OrtGetTensorData=(i,c,f,$,E)=>(a._OrtGetTensorData=Z.la)(i,c,f,$,E),a._OrtReleaseTensor=i=>(a._OrtReleaseTensor=Z.ma)(i),a._OrtCreateRunOptions=(i,c,f,$)=>(a._OrtCreateRunOptions=Z.na)(i,c,f,$),a._OrtAddRunConfigEntry=(i,c,f)=>(a._OrtAddRunConfigEntry=Z.oa)(i,c,f),a._OrtReleaseRunOptions=i=>(a._OrtReleaseRunOptions=Z.pa)(i),a._OrtCreateBinding=i=>(a._OrtCreateBinding=Z.qa)(i),a._OrtBindInput=(i,c,f)=>(a._OrtBindInput=Z.ra)(i,c,f),a._OrtBindOutput=(i,c,f,$)=>(a._OrtBindOutput=Z.sa)(i,c,f,$),a._OrtClearBoundOutputs=i=>(a._OrtClearBoundOutputs=Z.ta)(i),a._OrtReleaseBinding=i=>(a._OrtReleaseBinding=Z.ua)(i),a._OrtRunWithBinding=(i,c,f,$,E)=>(a._OrtRunWithBinding=Z.va)(i,c,f,$,E),a._OrtRun=(i,c,f,$,E,D,N,ie)=>(a._OrtRun=Z.wa)(i,c,f,$,E,D,N,ie),a._OrtEndProfiling=i=>(a._OrtEndProfiling=Z.xa)(i),a._JsepOutput=(i,c,f)=>(a._JsepOutput=Z.ya)(i,c,f),a._JsepGetNodeName=i=>(a._JsepGetNodeName=Z.za)(i);var Rr=a._pthread_self=()=>(Rr=a._pthread_self=Z.Aa)(),cn=a._malloc=i=>(cn=a._malloc=Z.Ba)(i),so=a._free=i=>(so=a._free=Z.Ca)(i);a.__emscripten_tls_init=()=>(a.__emscripten_tls_init=Z.Da)();var uo=a.__emscripten_thread_init=(i,c,f,$,E,D)=>(uo=a.__emscripten_thread_init=Z.Fa)(i,c,f,$,E,D);a.__emscripten_thread_crashed=()=>(a.__emscripten_thread_crashed=Z.Ga)();var lo=(i,c,f,$)=>(lo=Z.Ha)(i,c,f,$),pn=i=>(pn=Z.Ia)(i),mn=a.__emscripten_thread_exit=i=>(mn=a.__emscripten_thread_exit=Z.Ja)(i),co=a.__emscripten_check_mailbox=()=>(co=a.__emscripten_check_mailbox=Z.Ka)(),po=i=>(po=Z.La)(i),mo=(i,c)=>(mo=Z.Ma)(i,c),fn=()=>(fn=Z.Na)(),Br=i=>(Br=Z.Oa)(i),hn=i=>(hn=Z.Pa)(i),fo=a.dynCall_ii=(i,c)=>(fo=a.dynCall_ii=Z.Ra)(i,c),ho=i=>(ho=Z.Sa)(i),go=()=>(go=Z.Ta)(),yo=i=>(yo=Z.Ua)(i),bo=()=>(bo=Z.Va)();a.___start_em_js=936134,a.___stop_em_js=936295;function Vu(i){i=Object.assign({},i);var c=$=>()=>$()>>>0,f=$=>E=>$(E)>>>0;return i.__errno_location=c(i.__errno_location),i.pthread_self=c(i.pthread_self),i.malloc=f(i.malloc),i.stackSave=c(i.stackSave),i.stackAlloc=f(i.stackAlloc),i}a.keepRuntimeAlive=ot,a.wasmMemory=ve,a.stackAlloc=hn,a.stackSave=fn,a.stackRestore=Br,a.UTF8ToString=qe,a.stringToUTF8=Ir,a.lengthBytesUTF8=At,a.ExitStatus=wt,a.PThread=oe;var Dr;Ct=function i(){Dr||wo(),Dr||(Ct=i)};function wo(){function i(){if(!Dr&&(Dr=!0,a.calledRun=!0,!Ce)&&(S||yt(Re),p(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),!S)){if(a.postRun)for(typeof a.postRun=="function"&&(a.postRun=[a.postRun]);a.postRun.length;){var c=a.postRun.shift();Ge.unshift(c)}yt(Ge)}}if(!(0<Je))if(S)p(a),S||yt(Re),startWorker(a);else{if(a.preRun)for(typeof a.preRun=="function"&&(a.preRun=[a.preRun]);a.preRun.length;)Ze.unshift(a.preRun.shift());yt(Ze),0<Je||(a.setStatus?(a.setStatus("Running..."),setTimeout(function(){setTimeout(function(){a.setStatus("")},1),i()},1)):i())}}if(a.preInit)for(typeof a.preInit=="function"&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();return wo(),t.ready}})();typeof Eo=="object"&&typeof Sn=="object"?Sn.exports=To:typeof define=="function"&&define.amd&&define([],()=>To)});var Po=dr((Gc,ju)=>{ju.exports=\'"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>(0,eval)(fs.readFileSync(e,"utf8")+"//# sourceURL="+e),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(Module.__embind_initialize_bindings(),initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err(`worker.js received unknown command ${e.data.cmd}`),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed&&Module.__emscripten_thread_crashed(),a}}self.onmessage=handleMessage;\\n\'});var Cn,Xe,pr,Ur,mr,zo,In,De=Y(()=>{"use strict";Cn=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},Xe=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},pr=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Ur=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},mr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},zo=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",In=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var Vr=Y(()=>{"use strict"});var Uo=Y(()=>{"use strict";Vr()});var Vo,Wo=Y(()=>{"use strict";Vo="1.17.0"});var No,Pt,An=Y(()=>{"use strict";Wo();No="warning",Pt={wasm:{},webgl:{},webgpu:{},versions:{common:Vo},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);No=e}},get logLevel(){return No}};Object.defineProperty(Pt,"logLevel",{enumerable:!0})});var Nt,Ho=Y(()=>{"use strict";An();Nt=Pt});var Go=Y(()=>{"use strict"});var Lo=Y(()=>{"use strict";Wr()});var qo=Y(()=>{"use strict"});var jo=Y(()=>{"use strict";Wr()});var Wr=Y(()=>{"use strict";Go();Lo();qo();jo()});var Nr=Y(()=>{"use strict";Wr()});var rl,Ko,Ht,Gt,Tn=Y(()=>{"use strict";An();rl=(e,t)=>{Pt.wasm.trace&&console.timeStamp(`${e}::ORT::${t}`)},Ko=(e,t)=>{let r=new Error().stack?.split(/\\r\\n|\\r|\\n/g)||[],o=!1;for(let n=0;n<r.length;n++){if(o&&!r[n].includes("TRACE_FUNC")){let s=`FUNC_${e}::${r[n].trim().split(" ")[1]}`;t&&(s+=`::${t}`),rl("CPU",s);return}r[n].includes("TRACE_FUNC")&&(o=!0)}},Ht=e=>{Pt.wasm.trace&&Ko("BEGIN",e)},Gt=e=>{Pt.wasm.trace&&Ko("END",e)}});var Yo=Y(()=>{"use strict";Vr();Nr();Tn()});var Zo=Y(()=>{"use strict";Yo()});var Xo=Y(()=>{"use strict"});var Qo=Y(()=>{"use strict";Vr();Nr()});var Jo=Y(()=>{"use strict";Qo()});var Lt=Y(()=>{"use strict";Uo();Ho();Zo();Nr();Tn();Xo();Jo()});var al,il,ea,ta,ra,sl,Pe,St=Y(()=>{"use strict";De();al=["V","I","W","E","F"],il=(e,t)=>{console.log(`[${al[e]},${new Date().toISOString()}]${t}`)},ra=(e,t)=>{ea=e,ta=t},sl=(e,t)=>{let r=mr(e),o=mr(ea);r>=o&&il(r,typeof t=="function"?t():t)},Pe=(...e)=>{ta&&sl(...e)}});var na,oa=Y(()=>{"use strict";De();na=(e,t)=>new(Ur(t))(e)});var Hr=Y(()=>{"use strict"});var Gr,ul,aa,On,En,sa,ua=Y(()=>{"use strict";St();Hr();Gr=e=>Math.ceil(e/16)*16,ul=1,aa=()=>ul++,On=async(e,t,r,o)=>{let n=Gr(r),s=e.device.createBuffer({size:n,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let u=e.getCommandEncoder();e.endComputePass(),u.copyBufferToBuffer(t,0,s,0,n),e.flush(),await s.mapAsync(GPUMapMode.READ);let d=s.getMappedRange();if(o){let a=o();return a.set(new Uint8Array(d,0,r)),a}else return new Uint8Array(d.slice(0,r))}finally{s.destroy()}},En=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let o=r.buffer,n=r.byteOffset,s=r.byteLength,u=Gr(s),d=this.storageCache.get(t);if(!d)throw new Error("gpu data for uploading does not exist");if(d.originalSize!==s)throw new Error(`inconsistent data size. gpu data size=${d.originalSize}, data size=${s}`);let a=this.backend.device.createBuffer({mappedAtCreation:!0,size:u,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),p=a.getMappedRange();new Uint8Array(p).set(new Uint8Array(o,n,s)),a.unmap();let h=this.backend.getCommandEncoder();this.backend.endComputePass(),h.copyBufferToBuffer(a,0,d.gpuData.buffer,0,u),Pe("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(a)}memcpy(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("source gpu data for memcpy does not exist");let n=this.storageCache.get(r);if(!n)throw new Error("destination gpu data for memcpy does not exist");if(o.originalSize!==n.originalSize)throw new Error("inconsistent source and destination gpu data size");let s=Gr(o.originalSize),u=this.backend.getCommandEncoder();this.backend.endComputePass(),u.copyBufferToBuffer(o.gpuData.buffer,0,n.gpuData.buffer,0,s)}registerExternalBuffer(t,r,o){let n;if(o){if(n=this.externalBuffers.get(o),n===void 0)throw new Error("previous buffer is not registered");if(t===o)return Pe("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, buffer is the same, skip.`),n;this.externalBuffers.delete(o)}else n=aa();return this.storageCache.set(n,{gpuData:{id:n,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,n),Pe("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${n}, registered.`),n}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),Pe("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let o=Gr(t),n,s=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,u=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(s||u){let a=s?this.freeBuffers:this.freeUniformBuffers,p=a.get(o);p||(p=[],a.set(o,p)),p.length>0?n=p.pop():n=this.backend.device.createBuffer({size:o,usage:r})}else n=this.backend.device.createBuffer({size:o,usage:r});let d={id:aa(),type:0,buffer:n};return this.storageCache.set(d.id,{gpuData:d,originalSize:t}),Pe("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${d.id}`),d}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return Pe("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("data does not exist");await On(this.backend,o.gpuData.buffer,o.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},sa=(...e)=>new En(...e)});var Pn,ge,We=Y(()=>{"use strict";Pn=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},ge=e=>new Pn(e)});var kn,st,U,kt,Lr,Fr,qr,Se=Y(()=>{"use strict";kn=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},st=class{static calcShape(t,r,o=!1){let n=t.length,s=r.length;if(n===0)return r;if(s===0)return t;let u=Math.max(t.length,r.length),d=new Array(u);if(o){if(n<2||s<2)return;let a=kn.calcMatMulShape([t[n-2],t[n-1]],[r[s-2],r[s-1]]);if(a===void 0)return;[d[u-2],d[u-1]]=a}for(let a=o?3:1;a<=u;a++){let p=n-a<0?1:t[n-a],h=s-a<0?1:r[s-a];if(p!==h&&p>1&&h>1)return;d[u-a]=Math.max(p,h)}return d}static isValidBroadcast(t,r){let o=t.length,n=r.length;if(o>n)return!1;for(let s=1;s<=o;s++)if(t[o-s]!==1&&t[o-s]!==r[n-s])return!1;return!0}},U=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,o){let n=1;for(let s=r;s<o;s++){if(t[s]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");n*=t[s]}return n}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let o=new Array(r);o[r-1]=1,o[r-2]=t[r-1];for(let n=r-3;n>=0;--n)o[n]=o[n+1]*t[n+1];return o}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(o=>this.normalizeAxis(o,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(o=>t[o]):t.slice().reverse()}static padShape(t,r){let o=t.length;return t.map((n,s)=>n+r[s]+r[s+o])}static areEqual(t,r){return t.length!==r.length?!1:t.every((o,n)=>o===r[n])}},kt=class e{static adjustPoolAttributes(t,r,o,n,s,u){if(!t&&o.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let d=0;d<r.length-2;d++)d>=o.length?o.push(r[d+2]):o[d]=r[d+2];for(let d=0;d<o.length;d++)if(d<n.length){if(n[d]<0)throw new Error("strides should be greater than or equal to 1")}else n.push(1);for(let d=0;d<o.length;d++)if(d<s.length){if(s[d]<0)throw new Error("dilations should be greater than or equal to 1")}else s.push(1);for(let d=0;d<o.length*2;d++)if(d<u.length){if(u[d]<0)throw new Error("pad should be greater than or equal to 1")}else u.push(0);for(let d=0;d<o.length;d++){if(o[d]<=0)throw new Error("kernel shapes need to be greater than 0");if(u[d]>=o[d]||u[d+o.length]>=o[d])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,o,n,s,u,d){if(d){if(s.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(n.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let a=0;a<t.length-2;a++)e.adjustPadAndReturnShape(t[a+(u?1:2)],r[a],o[a],n[a],s,a,a+t.length-2,d)}}static computePoolOutputShape(t,r,o,n,s,u,d){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let a=[r[0],r[1]];return e.computeShapeHelper(t,r,a,o,n,s,u,d),a}static computeConvOutputShape(t,r,o,n,s,u,d){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let a=[t[0],r[0]];return e.computeShapeHelper(!1,t,a,o,n,s,u,d),a}static computeShapeHelper(t,r,o,n,s,u,d,a){if(t)for(let p=0;p<r.length-2;p++)o.push(1);else for(let p=0;p<r.length-2;p++)o.push(e.adjustPadAndReturnShape(r[p+2],n[p],s[p],u[p],d,p,p+r.length-2,a))}static adjustPadAndReturnShape(t,r,o,n,s,u,d,a){let p=o*(n-1)+1;if(a&&a!=="NOTSET")switch(a){case"VALID":return s[u]=0,s[d]=0,Math.floor((t-p)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(o!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let g=((t+r-1)/r-1)*r+n-t;return s[u]=Math.floor(a==="SAME_LOWER"?(g+1)/2:g/2),s[d]=g-s[u],Math.floor((t+g-n)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+s[u]+s[d]-p)/r+1)}},Lr=class{static getShapeOfGemmResult(t,r,o,n,s){if(t.length!==2||o.length!==2)throw new Error("shape need to be of size 2");let u,d,a;r?(u=t[1],d=t[0]):(u=t[0],d=t[1]);let p=-1;if(n?(a=o[0],p=1):(a=o[1],p=0),o[p]!==d)throw new Error("dimension mismatch");if(u<=0||a<=0||d<=0)throw new Error("invalid shape specified");if(s&&!st.isValidBroadcast(s,[u,a]))throw new Error("gemm: invalid bias shape for broadcast");return[u,a,d]}},Fr=-34028234663852886e22,qr=34028234663852886e22});var ll,Bn,Ve,ut,q,Ne,je,rt,Qe,de,Dn,z,j,jr,Rn,la,Ft,Oe,we=Y(()=>{"use strict";De();Se();ll=64,Bn=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Ve=(e,t=1)=>{let r=Bn(e,t);return typeof r=="string"?r:r[0]},ut=(e,t=1)=>{let r=Bn(e,t);return typeof r=="string"?r:r[1]},q=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:U.computeStrides(e)}],Ne=e=>e%4===0?4:e%2===0?2:1,je=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,rt=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,Qe=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,de=(e,t,r)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?`${e}[(${t}) / 4][(${t}) % 4]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,Dn=(e,t,r,o,n)=>{let s=typeof r=="number",u=s?r:r.length,d=[...new Array(u).keys()],a=u<2?"u32":u<=4?`vec${u}<u32>`:`array<u32, ${u}>`,p=Bn(t,n),h=typeof p=="string"?p:p[1],g=typeof p=="string"?p:p[0],y={indices:a,value:h,storage:g,tensor:t},w=L=>typeof L=="string"?L:`${L}u`,b={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},_=s?"uniforms.":"",I=`${_}${e}_shape`,S=`${_}${e}_strides`,x="";for(let L=0;L<u-1;L++)x+=`\n    let dim${L} = current / ${de(S,L,u)};\n    let rest${L} = current % ${de(S,L,u)};\n    indices[${L}] = dim${L};\n    current = rest${L};\n    `;x+=`indices[${u-1}] = current;`;let O=u<2?"":`\n  fn o2i_${e}(offset: u32) -> ${y.indices} {\n    var indices: ${y.indices};\n    var current = offset;\n    ${x}\n    return indices;\n  }`,T=L=>(b.offsetToIndices=!0,u<2?L:`o2i_${e}(${L})`),M=[];if(u>=2)for(let L=u-1;L>=0;L--)M.push(`${de(S,L,u)} * (indices[${L}])`);let A=u<2?"":`\n  fn i2o_${e}(indices: ${y.indices}) -> u32 {\n    return ${M.join("+")};\n  }`,W=L=>(b.indicesToOffset=!0,u<2?L:`i2o_${e}(${L})`),V=(...L)=>u===0?"0u":`${y.indices}(${L.map(w).join(",")})`,G=(L,X)=>u<2?`${L}`:`${de(L,X,u)}`,J=(L,X,he)=>u<2?`${L}=${he};`:`${de(L,X,u)}=${he};`,B={},K=(L,X)=>{b.broadcastedIndicesToOffset=!0;let he=`${X.name}broadcastedIndicesTo${e}Offset`;if(he in B)return`${he}(${L})`;let Fe=[];for(let Ze=u-1;Ze>=0;Ze--){let Re=X.indicesGet("outputIndices",Ze+X.rank-u);Fe.push(`${G(S,Ze)} * (${Re} % ${G(I,Ze)})`)}return B[he]=`fn ${he}(outputIndices: ${X.type.indices}) -> u32 {\n             return ${Fe.length>0?Fe.join("+"):"0u"};\n           }`,`${he}(${L})`},pe=(L,X)=>(()=>{if(y.storage===y.value)return`${e}[${L}]=${X};`;if(y.storage==="vec2<u32>"&&y.value==="i32")return`${e}[${L}]=vec2<u32>(u32(${X}), select(0u, 0xFFFFFFFFu, ${X} < 0));`;if(y.storage==="vec2<u32>"&&y.value==="u32")return`${e}[${L}]=vec2<u32>(u32(${X}), 0u);`;if(y.storage==="u32"&&y.value==="vec4<bool>")return`${e}[${L}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${X}));`;throw new Error(`not supported combination of storage type ${y.storage} and value type ${y.value} yet`)})(),ee=L=>(()=>{if(y.storage===y.value)return`${e}[${L}]`;if(y.storage==="vec2<u32>"&&y.value==="i32")return`i32(${e}[${L}].x)`;if(y.storage==="vec2<u32>"&&y.value==="u32")return`u32(${e}[${L}].x)`;if(y.storage==="u32"&&y.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${L}] & 0xFFu), bool(${e}[${L}] & 0xFF00u), bool(${e}[${L}] & 0xFF0000u), bool(${e}[${L}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${y.storage} and value type ${y.value} yet`)})(),ve=u<2?"":`\n  fn get_${e}ByIndices(indices: ${y.indices}) -> ${h} {\n    return ${ee(`i2o_${e}(indices)`)};\n  }`,Z=u<2?"":(()=>{let L=d.map(he=>`d${he}: u32`).join(", "),X=d.map(he=>`d${he}`).join(", ");return`\n  fn get_${e}(${L}) -> ${h} {\n    return get_${e}ByIndices(${V(X)});\n  }`})(),be=(...L)=>{if(L.length!==u)throw new Error(`indices length must be ${u}`);let X=L.map(w).join(",");return u===0?ee("0u"):u===1?ee(X[0]):(b.get=!0,b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}(${X})`)},Ce=L=>u<2?ee(L):(b.getByIndices=!0,b.indicesToOffset=!0,`get_${e}ByIndices(${L})`),fe=u<2?"":`\n  fn set_${e}ByIndices(indices: ${y.indices}, value: ${h}) {\n    ${pe(`i2o_${e}(indices)`,"value")}\n  }`,ce=u<2?"":(()=>{let L=d.map(he=>`d${he}: u32`).join(", "),X=d.map(he=>`d${he}`).join(", ");return`\n  fn set_${e}(${L}, value: ${h}) {\n    set_${e}ByIndices(${V(X)}, value);\n  }`})();return{impl:()=>{let L=[],X=!1;return b.offsetToIndices&&(L.push(O),X=!0),b.indicesToOffset&&(L.push(A),X=!0),b.broadcastedIndicesToOffset&&(Object.values(B).forEach(he=>L.push(he)),X=!0),b.set&&(L.push(ce),X=!0),b.setByIndices&&(L.push(fe),X=!0),b.get&&(L.push(Z),X=!0),b.getByIndices&&(L.push(ve),X=!0),!s&&X&&L.unshift(`const ${I} = ${y.indices}(${r.join(",")});`,`const ${S} = ${y.indices}(${U.computeStrides(r).join(",")});`),L.join(`\n`)},type:y,offsetToIndices:T,indicesToOffset:W,broadcastedIndicesToOffset:K,indices:V,indicesGet:G,indicesSet:J,set:(...L)=>{if(L.length!==u+1)throw new Error(`indices length must be ${u}`);let X=L[u];if(typeof X!="string")throw new Error("value must be string");let he=L.slice(0,u).map(w).join(",");return u===0?pe("0u",X):u===1?pe(he[0],X):(b.set=!0,b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}(${he}, ${X})`)},setByOffset:pe,setByIndices:(L,X)=>u<2?pe(L,X):(b.setByIndices=!0,b.indicesToOffset=!0,`set_${e}ByIndices(${L}, ${X});`),get:be,getByOffset:ee,getByIndices:Ce,usage:o,name:e,strides:S,shape:I,rank:u}},z=(e,t,r,o=1)=>Dn(e,t,r,"input",o),j=(e,t,r,o=1)=>Dn(e,t,r,"output",o),jr=(e,t,r,o=1)=>Dn(e,t,r,"internal",o),Rn=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=ll){let r=typeof t=="number"?t:t[0],o=typeof t=="number"?1:t[1],n=typeof t=="number"?1:t[2],s=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,u=s?`@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`,d=s?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*o*n}u + local_idx;`;return`@compute @workgroup_size(${r}, ${o}, ${n})\n  fn main(${u}) {\n    ${d}\n  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let o=t.usage==="input"?"read":"read_write",n=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${o}> ${t.name}: array<${n}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`\n`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,o=1){return this.uniforms.push({name:t,type:r,length:o}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:o,length:n}of this.uniforms)if(n&&n>4)t.push(`${r}:array<vec4<${o}>, ${Math.ceil(n/4)}>`);else{let s=n==null||n===1?o:`vec${n}<${o}>`;t.push(`${r}:${s}`)}return`\n      struct Uniforms { ${t.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`\n`)+this.internalVariables.map(t=>t.impl()).join(`\n`)}},la=e=>new Rn(e),Ft=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;n++){let s=r-1-n,u=e[s]||1;(t[t.length-1-n]||1)>1&&u===1&&o.unshift(s)}return o},Oe=e=>!0});var dl,da,cl,pl,nt,ca,pa,qt=Y(()=>{"use strict";Se();We();we();dl=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},da=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,cl=(e,t)=>U.sortBasedOnPerm(e,da(e.length,t)),pl=(e,t,r,o)=>{let n=[];n.push(`fn perm(i: ${o.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);for(let s=0;s<t;++s)n.push(r.indicesSet("a",e[s],`i[${s}]`));return n.push("return a;}"),n.join(`\n`)},nt=(e,t)=>{let r=e.dataType,o=e.dims.length,n=da(o,t),s=Oe(o),u=cl(e.dims,n),d=s?u.length:u,a=s?o:e.dims,p=j("output",r,d),h=z("a",r,a),g=y=>`\n  ${y.registerUniform("output_size","u32").declareVariables(h,p)}\n\n  ${pl(n,o,h,p)}\n\n  ${y.mainStart()}\n    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${p.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${p.setByOffset("global_idx",h.getByIndices("aIndices"))}\n  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:s?["rank"]:["dims"]},getRunData:y=>{let w=U.size(u);return{outputs:[{dims:u,dataType:y[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:s?[{type:"uint32",data:w},...q(y[0].dims),...q(u)]:[{type:"uint32",data:w}]}},getShaderSource:g}},ca=(e,t)=>{dl(e.inputs),e.compute(nt(e.inputs[0],t.perm))},pa=e=>ge({perm:e.perm})});var ml,fl,hl,gl,yl,bl,wl,vl,$l,Sl,lt,ma,fa,ha,ga,ya,ba,wa,va,$a,Sa,xa=Y(()=>{"use strict";Se();we();Kr();qt();ml={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},fl={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},hl={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},gl={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},yl=(e,t)=>{let r=[];for(let o=t-e;o<t;++o)r.push(o);return r},bl=(e,t)=>{let r=[],o=e.length;for(let s=0;s<o;s++)t.indexOf(s)===-1&&r.push(e[s]);let n=t.map(s=>e[s]);return[r,n]},wl=(e,t)=>{let r=e.length+t.length,o=[],n=0;for(let s=0;s<r;s++)t.indexOf(s)===-1?o.push(e[n++]):o.push(1);return o},vl=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},$l=(e,t)=>{let r=[];if(!vl(e,t)){for(let o=0;o<t;++o)e.indexOf(o)===-1&&r.push(o);e.forEach(o=>r.push(o))}return r},Sl=(e,t,r,o,n,s,u)=>{let d=r[0].dims,a=U.size(s),p=U.size(u),h=z("_A",r[0].dataType,d),g=j("output",n,s),y=32,w=`\n          var<workgroup> aBestValues : array<${g.type.storage}, ${y}>;\n       `;return{name:e,shaderCache:t,getShaderSource:_=>`\n        ${_.registerUniform("reduceSize","u32").declareVariables(h,g)}\n        ${w}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${_.mainStart(y)}\n\n          let outputIndex = global_idx / ${y};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = ${g.type.storage}(${hl[o]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${y}) {\n           let candidate = ${g.type.storage}(${h.getByOffset("offset + k")});\n           bestValue = ${ml[o]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${y}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${fl[o]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${g.setByOffset("outputIndex",`${o==="mean"?`bestValue / ${g.type.storage}(uniforms.reduceSize)`:`${gl[o]}`}`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:s,dataType:n}],dispatchGroup:{x:a},programUniforms:[{type:"uint32",data:p}]})}},lt=(e,t,r,o)=>{let n=e.inputs.length===1?r:Mn(e.inputs,r),s=n.axes;s.length===0&&!n.noopWithEmptyAxes&&(s=e.inputs[0].dims.map((w,b)=>b));let u=U.normalizeAxes(s,e.inputs[0].dims.length),d=u,a=e.inputs[0],p=$l(d,e.inputs[0].dims.length);p.length>0&&(a=e.compute(nt(e.inputs[0],p),{inputs:[0],outputs:[-1]})[0],d=yl(d.length,a.dims.length));let[h,g]=bl(a.dims,d),y=h;n.keepDims&&(y=wl(h,u)),e.compute(Sl(t,{hint:n.cacheKey,inputDependencies:["type"]},[a],o,e.inputs[0].dataType,y,g),{inputs:[a]})},ma=(e,t)=>{lt(e,"ReduceMeanShared",t,"mean")},fa=(e,t)=>{lt(e,"ReduceL1Shared",t,"l1")},ha=(e,t)=>{lt(e,"ReduceL2Shared",t,"l2")},ga=(e,t)=>{lt(e,"ReduceLogSumExpShared",t,"logSumExp")},ya=(e,t)=>{lt(e,"ReduceMaxShared",t,"max")},ba=(e,t)=>{lt(e,"ReduceMinShared",t,"min")},wa=(e,t)=>{lt(e,"ReduceProdShared",t,"prod")},va=(e,t)=>{lt(e,"ReduceSumShared",t,"sum")},$a=(e,t)=>{lt(e,"ReduceSumSquareShared",t,"sumSquare")},Sa=(e,t)=>{lt(e,"ReduceLogSumShared",t,"logSum")}});var dt,xl,Yr,Mn,ct,_l,Cl,Il,Al,Tl,El,Ol,Pl,kl,Rl,pt,_a,Ca,Ia,Aa,Ta,Ea,Oa,Pa,ka,Ra,Kr=Y(()=>{"use strict";Se();We();we();xa();dt=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},xl=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],Yr=(e,t,r,o,n,s,u=!1,d=!1)=>{let a=[],p=r[0].dims,h=p.length,g=U.normalizeAxes(n,h),y=!d&&g.length===0;p.forEach((I,S)=>{y||g.indexOf(S)>=0?u&&a.push(1):a.push(I)});let w=a.length,b=U.size(a);return{name:e,shaderCache:t,getShaderSource:I=>{let S=[],x=z("_A",r[0].dataType,h),O=j("output",s,w),T=o(x,O,g),M=T[2];for(let A=0,W=0;A<h;A++)y||g.indexOf(A)>=0?(u&&W++,M=`for(var j${A}: u32 = 0; j${A} < ${p[A]}; j${A}++) {\n                  ${T[2].includes("last_index")?`let last_index = j${A};`:""}\n                  ${x.indicesSet("input_indices",A,`j${A}`)}\n                  ${M}\n                }`):(S.push(`${x.indicesSet("input_indices",A,O.indicesGet("output_indices",W))};`),W++);return`\n\n        ${I.registerUniform("output_size","u32").declareVariables(x,O)}\n\n        ${I.mainStart()}\n          ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var input_indices: ${x.type.indices};\n          let output_indices = ${O.offsetToIndices("global_idx")};\n\n          ${S.join(`\n`)}\n          ${T[0]}       // init ops for reduce max/min\n          ${T[1]}\n          ${M}\n          ${T[3]}\n          ${T.length===4?O.setByOffset("global_idx","value"):T.slice(4).join(`\n`)}\n        }`},getRunData:()=>({outputs:[{dims:a,dataType:s}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:[{type:"uint32",data:b},...q(p),...q(a)]})}},Mn=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(o=>r.push(Number(o))),ge({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},ct=(e,t,r,o)=>{let n=e.inputs,s=n.length===1?r:Mn(n,r);e.compute(Yr(t,{hint:s.cacheKey,inputDependencies:["rank"]},[n[0]],s.noopWithEmptyAxes&&s.axes.length===0?xl:o,s.axes,n[0].dataType,s.keepDims,s.noopWithEmptyAxes),{inputs:[0]})},_l=(e,t)=>{dt(e.inputs),ct(e,"ReduceLogSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,"value = log(value);"])},Cl=(e,t)=>{dt(e.inputs),ct(e,"ReduceL1",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += abs(${o.getByIndices("input_indices")});`,""])},Il=(e,t)=>{dt(e.inputs),ct(e,"ReduceL2",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},Al=(e,t)=>{dt(e.inputs),ct(e,"ReduceLogSumExp",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += exp(${o.getByIndices("input_indices")});`,"value = log(value);"])},Tl=(e,t)=>{dt(e.inputs),ct(e,"ReduceMax",t,(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(o.indicesSet("input_indices",d,0));return[`${u.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = max(value, ${o.getByIndices("input_indices")});`,""]})},El=(e,t)=>{dt(e.inputs),ct(e,"ReduceMean",t,(o,n,s)=>{let u=1;for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&(u*=e.inputs[0].dims[d]);return["var sum = f32(0);","",`sum += f32(${o.getByIndices("input_indices")});`,`let value = ${n.type.value}(sum / ${u});`]})},Ol=(e,t)=>{dt(e.inputs),ct(e,"ReduceMin",t,(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`input_indices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = min(value, ${o.getByIndices("input_indices")});`,""]})},Pl=(e,t)=>{dt(e.inputs),ct(e,"ReduceProd",t,(o,n)=>[`var value = ${n.type.storage}(1);`,"",`value *= ${o.getByIndices("input_indices")};`,""])},kl=(e,t)=>{dt(e.inputs),ct(e,"ReduceSum",t,(o,n)=>[`var value = ${n.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,""])},Rl=(e,t)=>{dt(e.inputs),ct(e,"ReduceSumSquare",t,(o,n)=>[`var t = ${n.type.value}(0); var value = ${n.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += t * t;`,""])},pt=(e,t,r)=>{if(t.length===0)return r;let o=1,n=1;for(let s=0;s<t.length;s++)t.indexOf(s)===-1?o*=e[s]:n*=e[s];return n<32&&o>1024},_a=(e,t)=>{pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?El(e,t):ma(e,t)},Ca=(e,t)=>{pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Cl(e,t):fa(e,t)},Ia=(e,t)=>{pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Il(e,t):ha(e,t)},Aa=(e,t)=>{pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Al(e,t):ga(e,t)},Ta=(e,t)=>{pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Tl(e,t):ya(e,t)},Ea=(e,t)=>{pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ol(e,t):ba(e,t)},Oa=(e,t)=>{pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Pl(e,t):wa(e,t)},Pa=(e,t)=>{pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?kl(e,t):va(e,t)},ka=(e,t)=>{pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Rl(e,t):$a(e,t)},Ra=(e,t)=>{pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?_l(e,t):Sa(e,t)}});var Ba,Da,Ma,zn,za=Y(()=>{"use strict";De();We();Kr();Ba=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},Da=(e,t)=>{Ba(e.inputs);let r=(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`input_indices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(Yr("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Ma=(e,t)=>{Ba(e.inputs);let r=(o,n,s)=>{let u=[];for(let d=0;d<o.rank;d++)(s.indexOf(d)>=0||s.length===0)&&u.push(`input_indices[${d}] = 0;`);return[`${u.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",n.setByOffset("global_idx","best_index")]};e.compute(Yr("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},zn=e=>ge(e)});var Bl,Dl,Ml,zl,Zr,Ul,Ua,Un=Y(()=>{"use strict";De();Hr();we();Bl=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],u=e[4],d=e[5];if(u&&d)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error(\'Input "input" must have 3 dimensions\');let a=r.dims[0],p=r.dims[1],h=r.dims[2];if(n.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimensions\');if(o.dims.length!==2)throw new Error(\'Input "weights" is expected to have 2 dimensions\');if(o.dims[0]!==h)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(n.dims[0]!==o.dims[1])throw new Error(\'Input "bias" dimension 0 should have same length as dimension 1 of input "weights"\');let g=n.dims[0]/3,y=g,w=y;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let O of t.qkvHiddenSizes)if(O%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");g=t.qkvHiddenSizes[0],y=t.qkvHiddenSizes[1],w=t.qkvHiddenSizes[2]}let b=p;if(g!==y)throw new Error("qkv_hidden_sizes first element should be same as the second");if(n.dims[0]!==g+y+w)throw new Error(\'Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes\');let _=0;if(u){if(y!==w)throw new Error(\'Input "past" expect k_hidden_size == v_hidden_size\');if(u.dims.length!==5)throw new Error(\'Input "past" must have 5 dimensions\');if(u.dims[0]!==2)throw new Error(\'Input "past" first dimension must be 2\');if(u.dims[1]!==a)throw new Error(\'Input "past" second dimension must be batch_size\');if(u.dims[2]!==t.numHeads)throw new Error(\'Input "past" third dimension must be num_heads\');if(u.dims[4]!==y/t.numHeads)throw new Error(\'Input "past" fifth dimension must be k_hidden_size / num_heads\');t.pastPresentShareBuffer||(_=u.dims[3])}let I=b+_,S=-1,x=0;if(s)throw new Error("Mask not supported");if(u)throw new Error("past is not supported");if(d)throw new Error("relativePositionBias is not supported");return{batchSize:a,sequenceLength:p,pastSequenceLength:_,kvSequenceLength:b,totalSequenceLength:I,maxSequenceLength:S,inputHiddenSize:h,hiddenSize:g,vHiddenSize:w,headSize:Math.floor(g/t.numHeads),vHeadSize:Math.floor(w/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:x,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Dl=(e,t,r,o)=>{let n=Ne(o),s=64,u=o/n;u<s?s=1:u/8<64&&(s=Math.ceil(u/8));let d=Math.ceil(o/n/s),p=[{type:Xe(t.dataType),data:1/o},{type:"uint32",data:u},{type:"uint32",data:d}],h=Ve(t.dataType,n),g=y=>{let w=j("x",t.dataType,t.dims,n),b="thread_max_vector";n===2?b="max(thread_max_vector.x, thread_max_vector.y)":n===4&&(b="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");let _=ut(t.dataType),I=[{name:"d_inv",type:_},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`\n  var<workgroup> wgMax: array<f32, ${s}>;\n  var<workgroup> wgSum: array<f32, ${s}>;\n  ${y.registerUniforms(I).declareVariables(w)}\n  ${y.mainStart([s,1,1])}\n    let localOffset = local_idx * uniforms.elements_per_wg;\n    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;\n\n    var thread_max_vector = ${je("f32",n,"-3.402823e+38f")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      thread_max_vector = max(${rt(_,n,"x[offset + i]")}, thread_max_vector);\n    }\n    wgMax[local_idx] = ${b};\n    workgroupBarrier();\n\n    var maxValue = -3.402823e+38f;\n    for (var i = 0u; i < ${s}; i++) {\n      maxValue = max(wgMax[i], maxValue);\n    }\n\n    var sumVector = ${je("f32",n,"0")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      sumVector += exp(${rt(_,n,"x[offset + i]")} - maxValue);\n    }\n    wgSum[local_idx] = ${Qe("sumVector",n)};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${s}; i++) {\n      sum += wgSum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        x[offset + i] = ${je("f32",n,"uniforms.d_inv")};\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        let f32input = ${rt(_,n,"x[offset + i]")};\n        x[offset + i] = ${w.type.value}(exp(f32input - maxValue) / sum);\n      }\n    }\n  }`};e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${s};${h};${n}`},getShaderSource:g,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:p})},{inputs:[t],outputs:[]})},Ml=(e,t,r,o,n,s)=>{let u=[n.batchSize,n.numHeads,n.sequenceLength,n.kvSequenceLength+n.pastSequenceLength],d=s.scale===0?1/Math.sqrt(n.headSize):s.scale,a=Ne(n.headSize),p=n.headSize/a,h=12,g={x:Math.ceil(n.totalSequenceLength/h),y:Math.ceil(n.sequenceLength/h),z:n.batchSize*n.numHeads},y=Xe(t.dataType),w=[{type:"uint32",data:n.sequenceLength},{type:"uint32",data:p},{type:"uint32",data:n.totalSequenceLength},{type:"uint32",data:n.kvSequenceLength},{type:y,data:d}],b=[t,r],_=S=>{let x=z("q",t.dataType,t.dims,a),O=z("key",r.dataType,r.dims,a),T=j("output",t.dataType,u),M=Ve(t.dataType),A=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:M}];return`\n  const beta: ${M} = 1.0;\n  const TILE_SIZE = ${h}u;\n\n  var<workgroup> tileQ: array<${x.type.storage}, ${h*h}>;\n  var<workgroup> tileK: array<${x.type.storage}, ${h*h}>;\n  ${S.registerUniforms(A).declareVariables(x,O,T)}\n  ${S.mainStart([h,h,1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let lm = m + local_id.y;\n    let ln = n + local_id.x;\n\n    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;\n    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;\n\n    var value = ${je(M,a)};\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m + local_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * uniforms.M * uniforms.N;\n    if (lm < uniforms.M && ln < uniforms.N) {\n      let outputIdx = headOffset + lm * uniforms.N + ln;\n      output[outputIdx] = ${Qe("value",a)} * uniforms.alpha;\n    }\n  }`},I=e.compute({name:"AttentionProbs",shaderCache:{hint:`${a}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType,gpuDataType:0}],dispatchGroup:g,programUniforms:w}),getShaderSource:_},{inputs:b,outputs:[-1]})[0];return Dl(e,I,n.batchSize*n.numHeads*n.sequenceLength,n.totalSequenceLength),I},zl=(e,t,r,o)=>{let n=[o.batchSize,o.sequenceLength,o.vHiddenSize],s=12,u={x:Math.ceil(o.vHeadSize/s),y:Math.ceil(o.sequenceLength/s),z:o.batchSize*o.numHeads},d=[{type:"uint32",data:o.sequenceLength},{type:"uint32",data:o.totalSequenceLength},{type:"uint32",data:o.vHeadSize},{type:"uint32",data:o.numHeads},{type:"uint32",data:o.vHiddenSize}],a=p=>{let h=z("probs",t.dataType,t.dims),g=z("v",r.dataType,r.dims),y=j("output",t.dataType,n),w=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}];return`\n  const TILE_SIZE = ${s}u;\n  var<workgroup> tileQ: array<${h.type.value}, ${s*s}>;\n  var<workgroup> tileK: array<${h.type.value}, ${s*s}>;\n  ${p.registerUniforms(w).declareVariables(h,g,y)}\n  ${p.mainStart([s,s,1])}\n   let headIdx = workgroup_id.z;\n   let m = workgroup_id.y * TILE_SIZE + local_id.y;\n   let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;\n   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;\n\n   var value = ${h.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n     if (m < uniforms.M && w + local_id.x < uniforms.K) {\n       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n     }\n     if (n < uniforms.N && w + local_id.y < uniforms.K) {\n       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];\n     }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;\n   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + currentBatchHeadNumber * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`};return e.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:n,dataType:t.dataType,gpuDataType:0}],dispatchGroup:u,programUniforms:d}),getShaderSource:a},{inputs:[t,r],outputs:[0]})[0]},Zr=(e,t,r,o,n,s,u,d,a,p,h)=>{let g=Ml(e,t,r,a,p,h);zl(e,g,o,p)},Ul=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],o=t.sequenceLength,n=t.inputHiddenSize,s=t.headSize,u=12,d={x:Math.ceil(t.headSize/u),y:Math.ceil(t.sequenceLength/u),z:t.batchSize*t.numHeads},a=[e.inputs[0],e.inputs[1],e.inputs[2]],p=[{type:"uint32",data:o},{type:"uint32",data:n},{type:"uint32",data:s},{type:"uint32",data:t.numHeads},{type:"uint32",data:t.headSize},{type:"uint32",data:t.hiddenSize},{type:"uint32",data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],h=g=>{let y=j("output_q",a[0].dataType,r),w=j("output_k",a[0].dataType,r),b=j("output_v",a[0].dataType,r),_=z("input",a[0].dataType,a[0].dims),I=z("weight",a[1].dataType,a[1].dims),S=z("bias",a[2].dataType,a[2].dims),x=_.type.storage,O=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`\n  const TILE_SIZE = ${u}u;\n  var<workgroup> tileInput: array<${x}, ${u*u}>;\n  var<workgroup> tileWeightQ: array<${x}, ${u*u}>;\n  var<workgroup> tileWeightK: array<${x}, ${u*u}>;\n  var<workgroup> tileWeightV: array<${x}, ${u*u}>;\n  ${g.registerUniforms(O).declareVariables(_,I,S,y,w,b)}\n  ${g.mainStart([u,u,1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = workgroup_id.y * TILE_SIZE + local_id.y;\n    let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${x}(0);\n    var valueK = ${x}(0);\n    var valueV = ${x}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:d,programUniforms:p}),getShaderSource:h},{inputs:a,outputs:[-1,-1,-1]})},Ua=(e,t)=>{let r=Bl(e.inputs,t),[o,n,s]=Ul(e,r);return Zr(e,o,n,s,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Vl,Wl,Nl,Va,Wa=Y(()=>{"use strict";Lt();Se();We();we();Vl=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(o,n,s)=>{let u=n.length;if(u!==o.length)throw new Error(`${s}: num dimensions != ${u}`);n.forEach((d,a)=>{if(d!==o[a])throw new Error(`${s}: dim[${a}] do not match`)})};if(e[0].dims.length>1){let o=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,o,"Invalid input scale"),r(e[2].dims,o,"Invalid input B"),r(e[3].dims,o,"Invalid input mean"),r(e[4].dims,o,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Wl=(e,t)=>{let{epsilon:r,spatial:o,format:n}=t,s=e[0].dims,u=o?Ne(s[s.length-1]):1,d=n==="NHWC"&&s.length>1?u:1,a=U.size(s)/u,p=Oe(s.length)&&o,h=p?s.length:s,g=z("x",e[0].dataType,e[0].dims,u),y=z("scale",e[1].dataType,e[1].dims,d),w=z("bias",e[2].dataType,e[2].dims,d),b=z("inputMean",e[3].dataType,e[3].dims,d),_=z("inputVar",e[4].dataType,e[4].dims,d),I=j("y",e[0].dataType,h,u),S=()=>{let O="";if(o)O=`let cOffset = ${s.length===1?"0u":n==="NHWC"?`outputIndices[${s.length-1}] / ${u}`:"outputIndices[1]"};`;else if(n==="NCHW")O=`\n            ${I.indicesSet("outputIndices","0","0")}\n            let cOffset = ${I.indicesToOffset("outputIndices")};`;else{O=`var cIndices = ${y.type.indices}(0);\n                       cIndices[0] = outputIndices[${s.length-1}];`;for(let T=1;T<y.rank;T++)O+=`cIndices[${T}] = outputIndices[${T}];`;O+=`let cOffset = ${y.indicesToOffset("cIndices")};`}return O},x=O=>`\n  const epsilon = ${r};\n  ${O.registerUniform("outputSize","u32").declareVariables(g,y,w,b,_,I)}\n  ${O.mainStart()}\n  ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${I.offsetToIndices(`global_idx * ${u}`)};\n    ${S()}\n    let scale = ${y.getByOffset("cOffset")};\n    let bias = ${w.getByOffset("cOffset")};\n    let inputMean = ${b.getByOffset("cOffset")};\n    let inputVar = ${_.getByOffset("cOffset")};\n    let x = ${g.getByOffset("global_idx")};\n    let value = (x - inputMean) / sqrt(inputVar + epsilon) * scale + bias;\n    ${I.setByOffset("global_idx","value")}\n  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${o}_${u}`,inputDependencies:p?["rank","type","type","type","type"]:void 0},getShaderSource:x,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:p?[{type:"uint32",data:a},...q(s)]:[{type:"uint32",data:a}]})}},Nl=e=>ge(e),Va=(e,t)=>{let{inputs:r,outputCount:o}=e,n=Nl({...t,outputCount:o});if(Nt.webgpu.validateInputContent&&Vl(r,n),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Wl(r,n))}});var Hl,Gl,Na,Ha=Y(()=>{"use strict";Se();we();Hl=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Gl=e=>{let t=e[0].dims,r=e[0].dims[2],o=U.size(t)/4,n=e[0].dataType,s=z("input",n,t,4),u=z("bias",n,[r],4),d=z("residual",n,t,4),a=j("output",n,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:h=>`\n  const channels = ${r}u / 4;\n  ${h.declareVariables(s,u,d,a)}\n\n  ${h.mainStart()}\n    ${h.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n    let value = ${s.getByOffset("global_idx")}\n      + ${u.getByOffset("global_idx % channels")} + ${d.getByOffset("global_idx")};\n    ${a.setByOffset("global_idx","value")}\n  }`}},Na=e=>{Hl(e.inputs),e.compute(Gl(e.inputs))}});var Ll,Te,Ga,La,Fa,qa,ja,Ka,Ya,Za,Xa,Fl,Qa,Ja,ei,ti,Xr,ri,Qr,ni,oi,ai,ii,si,ui,li,di,ci,pi,mi,fi,hi,gi,yi,bi,wi,Vn=Y(()=>{"use strict";De();Se();We();we();Ll=(e,t,r,o,n,s)=>{let u=Math.ceil(t/4),d="";typeof n=="string"?d=`${n}(a)`:d=n("a");let a=z("inputData",r,[u],4),p=j("outputData",o,[u],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(a,p)}\n\n  ${s??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${a.getByOffset("global_idx")};\n    ${p.setByOffset("global_idx",d)}\n  }`},Te=(e,t,r,o,n,s=e.dataType)=>({name:t,shaderCache:{hint:n,inputDependencies:["type"]},getShaderSource:u=>Ll(u,U.size(e.dims),e.dataType,s,r,o),getRunData:u=>({outputs:[{dims:e.dims,dataType:s}],dispatchGroup:{x:Math.ceil(U.size(u[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(U.size(e.dims)/4)}]})}),Ga=e=>{e.compute(Te(e.inputs[0],"Abs","abs"))},La=e=>{e.compute(Te(e.inputs[0],"Acos","acos"))},Fa=e=>{e.compute(Te(e.inputs[0],"Acosh","acosh"))},qa=e=>{e.compute(Te(e.inputs[0],"Asin","asin"))},ja=e=>{e.compute(Te(e.inputs[0],"Asinh","asinh"))},Ka=e=>{e.compute(Te(e.inputs[0],"Atan","atan"))},Ya=e=>{e.compute(Te(e.inputs[0],"Atanh","atanh"))},Za=e=>ge(e),Xa=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute \'to\' from \'Cast\' operator): ${t.to}`)}e.compute(Te(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Fl=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:Fr,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:qr;return ge({min:t,max:r})},Qa=(e,t)=>{let r=e.inputs.length===1?t:Fl(e.inputs),o=ut(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Clip",n=>`clamp(${n}, clip_min_, clip_max_)`,`\n    const clip_min_: vec4<${o}> = vec4(${o}(${r.min}));\n    const clip_max_: vec4<${o}> = vec4(${o}(${r.max}));\n`,r.cacheKey),{inputs:[0]})},Ja=e=>{e.compute(Te(e.inputs[0],"Ceil","ceil"))},ei=e=>{e.compute(Te(e.inputs[0],"Cos","cos"))},ti=e=>{e.compute(Te(e.inputs[0],"Cosh","cosh"))},Xr=e=>ge(e),ri=(e,t)=>{let r=ut(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Elu",o=>`elu_vf32(${o})`,`\n  const elu_alpha_ = ${r}(${t.alpha});\n\n  fn elu_f32(a: ${r}) -> ${r} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},Qr=(e,t="f32")=>`\nconst r0: ${t} = 0.3275911;\nconst r1: ${t} = 0.254829592;\nconst r2: ${t} = -0.284496736;\nconst r3: ${t} = 1.421413741;\nconst r4: ${t} = -1.453152027;\nconst r5: ${t} = 1.061405429;\n\nfn erf_vf32(v: ${e}) -> ${e} {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,ni=e=>{let t=ut(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,Qr(`vec4<${t}>`,t)))},oi=e=>{e.compute(Te(e.inputs[0],"Exp","exp"))},ai=e=>{e.compute(Te(e.inputs[0],"Floor","floor"))},ii=e=>{let t=ut(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,Qr(`vec4<${t}>`,t)))},si=(e,t)=>{let r=ut(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"LeakyRelu",o=>`select(leaky_relu_alpha_ * ${o}, ${o}, ${o} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},ui=e=>{e.compute(Te(e.inputs[0],"Not",t=>`!${t}`))},li=e=>{e.compute(Te(e.inputs[0],"Neg",t=>`-${t}`))},di=e=>{e.compute(Te(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},ci=e=>{let t=ut(e.inputs[0].dataType);e.compute(Te(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},pi=e=>{e.compute(Te(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},mi=e=>{e.compute(Te(e.inputs[0],"Sin","sin"))},fi=e=>{e.compute(Te(e.inputs[0],"Sinh","sinh"))},hi=e=>{e.compute(Te(e.inputs[0],"Sqrt","sqrt"))},gi=e=>{e.compute(Te(e.inputs[0],"Tan","tan"))},yi=e=>{e.compute(Te(e.inputs[0],"Tanh","tanh"))},bi=(e,t)=>{let r=ut(e.inputs[0].dataType);return e.compute(Te(e.inputs[0],"ThresholdedRelu",o=>`select(vec4<${r}>(0.0), ${o}, ${o} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},wi=e=>{e.compute(Te(e.inputs[0],"Log","log"))}});var jl,Kl,vi,$i=Y(()=>{"use strict";Se();we();Vn();jl=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Kl=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=z("input",e[0].dataType,e[0].dims,4),o=z("bias",e[0].dataType,[e[0].dims[2]],4),n=j("output",e[0].dataType,t,4),s=U.size(t)/4,u=Ve(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)}}),getShaderSource:a=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${a.declareVariables(r,o,n)}\n\n  ${Qr(`vec4<${u}>`,u)}\n\n  ${a.mainStart()}\n    ${a.guardAgainstOutOfBoundsWorkgroupSizes(s)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${n.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},vi=e=>{jl(e.inputs),e.compute(Kl(e.inputs))}});var Yl,Zl,mt,Si,xi,_i,Ci,Ii,Ai,Ti,Ei,Oi,Pi,ki=Y(()=>{"use strict";De();Se();we();Yl=(e,t,r,o,n,s,u,d,a,p,h,g,y)=>{let w,b;typeof d=="string"?w=b=(A,W)=>`${d}((${A}),(${W}))`:typeof d=="function"?w=b=d:(w=d.scalar,b=d.vector);let _=g?t.length:t,I=g?r.length:r,S=g?o.length:o,x=j("outputData",h,S,4),O=z("aData",a,_,4),T=z("bData",p,I,4),M;if(n)if(s){let A=U.size(t)===1,W=U.size(r)===1,V=t.length>0&&t[t.length-1]%4===0,G=r.length>0&&r[r.length-1]%4===0;A||W?M=x.setByOffset("global_idx",b(A?`${O.type.value}(${O.getByOffset("0")}.x)`:O.getByOffset("global_idx"),W?`${T.type.value}(${T.getByOffset("0")}.x)`:T.getByOffset("global_idx"))):M=`\n            let outputIndices = ${x.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${O.broadcastedIndicesToOffset("outputIndices",x)};\n            let offsetB = ${T.broadcastedIndicesToOffset("outputIndices",x)};\n            ${x.setByOffset("global_idx",b(u||V?O.getByOffset("offsetA / 4u"):`${O.type.value}(${O.getByOffset("offsetA / 4u")}[offsetA % 4u])`,u||G?T.getByOffset("offsetB / 4u"):`${T.type.value}(${T.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else M=x.setByOffset("global_idx",b(O.getByOffset("global_idx"),T.getByOffset("global_idx")));else{if(!s)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let A=(W,V,G="")=>{let J=`aData[indexA${V}][componentA${V}]`,B=`bData[indexB${V}][componentB${V}]`;return`\n            let outputIndices${V} = ${x.offsetToIndices(`global_idx * 4u + ${V}u`)};\n            let offsetA${V} = ${O.broadcastedIndicesToOffset(`outputIndices${V}`,x)};\n            let offsetB${V} = ${T.broadcastedIndicesToOffset(`outputIndices${V}`,x)};\n            let indexA${V} = offsetA${V} / 4u;\n            let indexB${V} = offsetB${V} / 4u;\n            let componentA${V} = offsetA${V} % 4u;\n            let componentB${V} = offsetB${V} % 4u;\n            ${W}[${V}] = ${G}(${w(J,B)});\n          `};h===9?M=`\n            var data = vec4<u32>(0);\n            ${A("data",0,"u32")}\n            ${A("data",1,"u32")}\n            ${A("data",2,"u32")}\n            ${A("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:M=`\n            ${A("outputData[global_idx]",0)}\n            ${A("outputData[global_idx]",1)}\n            ${A("outputData[global_idx]",2)}\n            ${A("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(O,T,x)}\n\n        ${y??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${M}\n      }`},Zl=(e,t,r,o,n,s,u=r.dataType)=>{let d=!U.areEqual(r.dims,o.dims),a=r.dims,p=U.size(r.dims),h=!1,g=!1,y=[d];if(d){let b=st.calcShape(r.dims,o.dims,!1);if(!b)throw new Error("Can\'t perform binary op on the given tensors");a=b,p=U.size(a);let _=U.size(r.dims)===1,I=U.size(o.dims)===1,S=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,x=o.dims.length>0&&o.dims[o.dims.length-1]%4===0;y.push(_),y.push(I),y.push(S),y.push(x);let O=1;for(let T=1;T<a.length;T++){let M=r.dims[r.dims.length-T]??1,A=o.dims[o.dims.length-T]??1;if(M===A)O*=M;else break}O%4===0?(g=!0,h=!0):(_||I||S||x)&&(h=!0)}else h=!0;y.push(h);let w=Oe(r.dims.length)&&Oe(o.dims.length)&&Oe(a.length);return{name:e,shaderCache:{hint:t+y.map(b=>b.toString()).join("_"),inputDependencies:w?["rank","rank"]:["dims","dims"]},getShaderSource:b=>Yl(b,r.dims,o.dims,a,h,d,g,n,r.dataType,o.dataType,u,w,s),getRunData:()=>({outputs:[{dims:a,dataType:u}],dispatchGroup:{x:Math.ceil(p/64/4)},programUniforms:w?[{type:"uint32",data:Math.ceil(U.size(a)/4)},...q(r.dims),...q(o.dims),...q(a)]:[{type:"uint32",data:Math.ceil(U.size(a)/4)}]})}},mt=(e,t,r,o,n,s)=>{e.compute(Zl(t,n??"",e.inputs[0],e.inputs[1],r,o,s))},Si=e=>{mt(e,"Add",(t,r)=>`${t}+${r}`)},xi=e=>{mt(e,"Div",(t,r)=>`${t}/${r}`)},_i=e=>{mt(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},Ci=e=>{mt(e,"Mul",(t,r)=>`${t}*${r}`)},Ii=e=>{let t=z("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;mt(e,"Pow",{scalar:(o,n)=>`pow_custom(${o},${n})`,vector:(o,n)=>`pow_vector_custom(${o},${n})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},Ai=e=>{mt(e,"Sub",(t,r)=>`${t}-${r}`)},Ti=e=>{mt(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},Ei=e=>{mt(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},Oi=e=>{mt(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},Pi=e=>{mt(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var Ql,Jl,ed,td,Ri,Bi,Di=Y(()=>{"use strict";Se();We();we();Ql=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let o of e){if(o.dataType!==t)throw new Error("input tensors should be one type");if(o.dims.length!==r)throw new Error("input tensors should have the same shape")}},Jl=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,ed=(e,t)=>{let r=e.length,o=[];for(let n=0;n<r;++n){let s=t.setByOffset("global_idx",e[n].getByIndices("indices"));r===1?o.push(s):n===0?o.push(`if (inputIndex == ${n}u) { ${s} }`):n===r-1?o.push(`else { ${s} }`):o.push(`else if (inputIndex == ${n}) { ${s} }`)}return o.join(`\n`)},td=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn\'t match input dimensionality");let o=t<0?r.length+t:t,n=r.slice(0);for(let T=1;T<e.length;T++){let M=e[T].dims.slice();for(let A=0;A<r.length;A++)if(A===o)n[o]+=M[A];else if(r[A]!==M[A])throw new Error("non concat dimensions must match")}let s=U.size(n),u=new Array(e.length),d=new Array(e.length),a=e[0].dataType,p=0,h=[],g=[],y=[],w=[{type:"uint32",data:s}];for(let T=0;T<e.length;++T)p+=e[T].dims[o],u[T]=p,y.push(Oe(e[T].dims.length)),g.push(y[T]?e[T].dims.length:e[T].dims),d[T]=z(`input${T}`,a,g[T]),h.push(y[T]?"rank":"dims"),w.push({type:"uint32",data:u[T]});for(let T=0;T<e.length;++T)y[T]&&w.push(...q(e[T].dims));let b=Oe(n.length);b&&w.push(...q(n));let _=b?n.length:n,I=j("output",a,_),S=I.indicesGet("indices",o),x=Array.from(Array(u.length).keys()).map(T=>`uniforms.sizeInConcatAxis${T}`).join(","),O=T=>`\n\n  ${(()=>{T.registerUniform("outputSize","u32");for(let M=0;M<e.length;M++)T.registerUniform(`sizeInConcatAxis${M}`,"u32");return T.declareVariables(...d,I)})()}\n\n  ${Jl(u.length,x)}\n\n  ${T.mainStart()}\n    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${I.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${S});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${u.length}u>(${x});\n      ${S} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${ed(d,I)}\n  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(s/64)},programUniforms:w}),getShaderSource:O}},Ri=(e,t)=>{Ql(e.inputs),e.compute(td(e.inputs,t.axis))},Bi=e=>ge({axis:e.axis})});var ft,Jr,xt=Y(()=>{"use strict";Se();ft=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},Jr=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,o]=e?.activation_params||[Fr,qr];return{activation:t,clipMax:o,clipMin:r,activationCacheKey:`${t}:${r},${o}`}}return{activation:t,activationCacheKey:t}}});var Le,en,tn=Y(()=>{"use strict";Le=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},en=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `});var rn,Wn=Y(()=>{"use strict";rn=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`});var rd,nd,fr,Mi,od,hr,ad,nn,gr=Y(()=>{"use strict";Se();we();xt();tn();rd=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,nd=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,fr=(e,t,r="f32",o,n=!1,s=32,u=!1,d=32)=>{let a=t[1]*e[1],p=t[0]*e[0],h=n?a:s,g=n?s:a,y=h/t[0],w=s/t[1];if(!((n&&y===4&&e[1]===4||!n&&(y===3||y===4))&&h%t[0]===0&&s%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${n} is true, innerElementSize ${y} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${y} must be 3 or 4.\n  tileAWidth ${h} must be divisible by workgroupSize[0]${t[0]}. tileInner ${s} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${y}<${r}>, ${h/y}>, ${g}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${r}>, ${p/e[0]}>, ${s}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${y};\nconst tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${u?"0":"i32(globalId.z)"};\n  ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${a};\n\n  let numTiles = ${u?`${Math.ceil(d/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n  var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};\n\n  var acc: array<vec4<${r}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${w};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${rd(n,o)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${o?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${y===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${nd(n,y)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},Mi=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,od=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",hr=(e,t,r="f32",o,n=!1,s=32,u=!1,d=32,a=!1)=>{let p=e[1]*t[1],h=e[0]*t[0],g=n?p:s,y=n?s:p;if(!(y%t[1]===0&&g%t[0]===0&&s%t[1]===0))throw new Error(`tileAHight ${y} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${g} must be divisible by workgroupSize[0]${t[0]}, tileInner ${s} must be divisible by workgroupSize[1]${t[1]}`);let w=y/t[1],b=g/t[0],_=s/t[1],I=a?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${p};\n    let globalColStart = i32(workgroupId.x) * ${h};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${y}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${g}; inputCol = inputCol + ${t[0]}) {\n          ${Mi(n,o)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${s}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${h}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${o?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${r}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${n?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${p};\n\nlet tileRowA = i32(localId.y) * ${w};\nlet tileColA = i32(localId.x) * ${b};\nlet tileRowB = i32(localId.y) * ${_};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${b}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${Mi(n,o)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${_}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${o?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${r}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${od(n)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${r}, ${g}>, ${y}>;\n  var<workgroup> mm_Bsub : array<array<${r}, ${h}>, ${s}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${s};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${u?"0":"i32(globalId.z)"};\n    ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n    let numTiles = ${u?`${Math.ceil(d/s)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n    var kStart = ${u?`i32(globalId.z) * ${d}`:"0"};\n\n    var acc : array<array<${r}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${I}\n  }\n`},ad=(e,t,r,o,n,s=!1)=>{let[u,d,a]=n,[p,h,g,y]=o,w=Ft(u,a),b=Ft(d,a),_=Ve(o[0].type.tensor),I=()=>{let O=h.rank,T=p.rank,M=`var aIndices: ${h.type.indices};`;for(let A=O-2-1,W=T-1;A>=0;A--,W--)M+=`\naIndices[${A}] = ${T>1?`batchIndices[${W}]`:"batchIndices"};`;return w.forEach(A=>{M+=`\naIndices[${A}] = 0;`}),M+=`\naIndices[${O-2}] = u32(row);\n                   aIndices[${O-1}] = u32(colIn);`,M},S=()=>{let O=g.rank,T=p.rank,M=`var bIndices: ${g.type.indices};`;for(let A=O-2-1,W=T-1;A>=0;A--,W--)M+=`\nbIndices[${A}] = ${T>1?`batchIndices[${W}]`:"batchIndices"};`;return b.forEach(A=>{M+=`\nbIndices[${A}] = 0;`}),M+=`\nbIndices[${O-2}] = u32(row);\n                   bIndices[${O-1}] = u32(colIn);`,M};return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Le(e,_)} {\n      var value = ${Le(e,_)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimAOuter && col < uniforms.dimInner)\n      {\n        ${I()}\n        value = ${h.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Le(e,_)} {\n      var value = ${Le(e,_)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimInner && col < uniforms.dimBOuter)\n      {\n        ${S()}\n        value = ${g.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Le(e,_)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${s?"bias[colIn]":`${Le(e,_)}(bias[row])`};`:""}\n        ${r}\n        ${y.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},nn=(e,t,r,o,n=!1)=>{let s=e[0].dims,u=e[1].dims,d=s.slice(0,-2),a=u.slice(0,-2),p=o?o.slice(0,-2):r.slice(0,-2),h=Oe(p.length),g=h?p.length:p,y=jr("batchDims",e[0].dataType,g,1),w=U.size(p),b=s[s.length-2],_=s[s.length-1],I=u[u.length-1],S=_%4===0&&I%4===0,x=b<=8?[4,1,1]:[4,4,1],O=[8,8,1],T=[Math.ceil(I/O[0]/x[0]),Math.ceil(b/O[1]/x[1]),Math.ceil(w/O[2]/x[2])],M=Ve(e[0].dataType),A=S?4:1,W=[...d,b,_/A],V=Oe(W.length),G=V?W.length:W,J=[...a,_,I/A],B=Oe(J.length),K=B?J.length:J,pe=[w,b,I/A],ee=z("a",e[0].dataType,G,A),ve=z("b",e[1].dataType,K,A),Z=j("result",e[0].dataType,pe.length,A),be=[ee,ve],Ce=[{type:"int32",data:b},{type:"int32",data:I},{type:"int32",data:_}];h&&Ce.push(...q(p)),V&&Ce.push(...q(W)),B&&Ce.push(...q(J));let fe=[];fe.push(V?"rank":"dims"),fe.push(B?"rank":"dims");let ce=e.length>2,{activationFunction:Ue,applyActivation:ke}=ft(t,Z.type.value),He=ad(A,ce,ke,[y,ee,ve,Z],[d,a,p],n);if(ce){let X=n?A:1;be.push(z("bias",e[2].dataType,e[2].dims.length,X)),Ce.push(...q(e[2].dims)),fe.push("rank")}Ce.push(...q(pe));let L=X=>`\n  ${X.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(y).declareVariables(...be,Z)}\n  ${Ue}\n  ${He}\n  ${S?fr(x,O,M,y):hr(x,O,M,y)}\n                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${x}${S}${n}`,inputDependencies:fe},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:T[0],y:T[1],z:T[2]},programUniforms:Ce}),getShaderSource:L}}});var id,zi,Ui=Y(()=>{"use strict";St();we();xt();tn();Wn();gr();id=(e,t,r,o,n=!1,s,u=4,d=4,a=4,p="f32")=>{let h=B=>{switch(B){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${p}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${B} is not supported.`)}},g=B=>{switch(B){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${B} is not supported.`)}},y=e?`\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `:`\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `,w=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,b=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",_=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",I=e?"row":"col",S=e?"col":"row",x=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${I} / outWidth;\n    let outCol = ${I} % outWidth;\n\n    let WRow = ${S} / (filterDims[1] * inChannels);\n    let WCol = ${S} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${S} % inChannels;\n    var resData = ${Le(u,p)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the \'same\' padding type.\n    if (xRow >= 0 && xRow < ${b} && xCol >= 0 && xCol < ${_}) {\n      ${y}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${h(u)}\n    }\n    return resData;`,O=e?t&&o?`\n    let col = colIn * ${u};\n    ${x}`:`\n    let col = colIn * ${u};\n    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n      ${x}\n    }\n    return ${Le(u,p)}(0.0);`:o&&r?`\n    let col = colIn * ${u};\n    ${x}`:`\n    let col = colIn * ${u};\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n      ${x}\n    }\n    return ${Le(u,p)}(0.0);`,T=`${g(d)}`,M=Le(a,p),A=e?Le(u,p):Le(d,p),W=e?Le(d,p):Le(u,p),{activationFunction:V,applyActivation:G}=ft(s,M);return`\n    ${V}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${A} {\n      ${e?O:T}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${W} {\n      ${e?T:O}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${M}) {\n      let col = colIn * ${a};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${w}\n      ${en(n)}\n      ${G}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},zi=(e,t,r,o,n,s,u,d)=>{let a=t.format==="NHWC",p=a?e[0].dims[3]:e[0].dims[1],h=r[0],g=a?r[2]:r[3],y=a?r[1]:r[2],w=a?r[3]:r[1],b=a&&(p%4===0||p%3===0)&&w%4===0,_=a?w:g*y,I=a?g*y:w,S=[8,8,1],x=o<=8?[4,1,1]:[4,4,1],O=[Math.ceil(_/S[0]/x[0]),Math.ceil(I/S[1]/x[1]),Math.ceil(h/S[2]/x[2])];Pe("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${O}`);let T=b?a&&p%4!==0?3:4:1,M=S[1]*x[1],A=S[0]*x[0],W=Math.max(S[0]*T,S[1]),V=o%M===0,G=n%A===0,J=s%W===0,B=b?[T,4,4]:[1,1,1],K=Ve(e[0].dataType),pe=b?4:1,ee=[{type:"int32",data:o},{type:"int32",data:n},{type:"int32",data:s}],ve=z("x",e[0].dataType,e[0].dims.length,T===3?1:T),Z=z("w",e[1].dataType,e[1].dims.length,pe),be=[ve,Z];ee.push(...q(e[0].dims)),ee.push(...q(e[1].dims));let Ce=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${b?`vec4<${K}>`:K}) {\n        result[flatIndex] = ${b?`vec4<${K}>`:K}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${b?`vec4<${K}>`:K}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${b?"/ 4":""}, value);\n      }`;if(u){let ce=z("bias",e[2].dataType,e[2].dims.length,pe);be.push(ce),ee.push(...q(e[2].dims)),Ce+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?`vec4<${K}>`:K} {\n          return bias[coords.${a?"w":"y"}${b?"/ 4":""}];\n        }`}let fe=j("result",e[0].dataType,r.length,pe);return ee.push(...q(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:O[0],y:O[1],z:O[2]},programUniforms:ee}),getShaderSource:ce=>`\n        ${rn("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${ce.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...be,fe)}\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        ${Ce}\n        ${id(a,V,G,J,u,t,B[0],B[1],B[2],K)}\n            ${b?fr(x,S,K,void 0,!a,W):hr(x,S,K,void 0,!a,W,!1,void 0,d)}`}}});var Nn,Vi=Y(()=>{"use strict";Se();we();Gn();xt();Nn=(e,t,r)=>{let o=e.length>2,n=o?"value += b[output_channel];":"",s=e[0].dims,u=e[1].dims,d=u[0]/t.group,a=t.format==="NHWC",p=Hn(s,u,t.dilations,t.pads,t.strides,a),h=U.size(p),g=j("output",e[0].dataType,p),{activationFunction:y,applyActivation:w}=ft(t,g.type.value),b=z("x",e[0].dataType,s),_=z("w",e[1].dataType,u),I=[b,_];o&&I.push(z("b",e[2].dataType,e[2].dims));let S=x=>`\n  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);\n  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);\n\n  ${x.declareVariables(...I,g)}\n\n  ${y}\n\n  ${x.mainStart()}\n    ${x.guardAgainstOutOfBoundsWorkgroupSizes(h)}\n\n    let outputIndices = ${g.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${a?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${a?1:2}], outputIndices[${a?2:3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${d}u;\n\n    var value: ${g.type.value} = ${g.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${u[1]}u; wInChannel++) {\n      let input_channel = group_id * ${u[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${u[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${s[a?1:2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${u[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${s[a?2:3]}u) {\n            continue;\n          }\n\n          let xVal = ${a?b.get("batch","xHeight","xWidth","input_channel"):b.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${_.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${n}\n    ${w}\n    ${g.setByOffset("global_idx","value")}\n  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(p):p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)}}),getShaderSource:S}}});var Ln,sd,Wi,Fn=Y(()=>{"use strict";Se();gr();we();xt();Ln=(e,t,r,o,n=!1)=>{let s=e[0].dims,u=e[1].dims,d=s[s.length-2],a=u[u.length-1],p=s[s.length-1],h=Ne(a),g=Ne(p),y=Ne(d),w=U.size(r)/h/y,b=e.length>2,_=o?o.slice(0,-2):r.slice(0,-2),S=[U.size(_),d,a],x=[{type:"uint32",data:w},{type:"uint32",data:d},{type:"uint32",data:a},{type:"uint32",data:p},...q(_),...q(s),...q(u)];b&&x.push(...q(e[2].dims)),x.push(...q(S));let O=T=>{let M=jr("batch_dims",e[0].dataType,_.length),A=z("a",e[0].dataType,s.length,g),W=z("b",e[1].dataType,u.length,h),V=j("output",e[0].dataType,S.length,h),{activationFunction:G,applyActivation:J}=ft(t,V.type.value),B=[A,W],K="";if(b){let fe=n?h:1;B.push(z("bias",e[2].dataType,e[2].dims.length,fe)),K=`${n?`value += bias[col / ${fe}];`:`value += ${V.type.value}(bias[row + i]);`}`}let pe=s.slice(0,-2),ee=u.slice(0,-2),ve=Ft(pe,_),Z=Ft(ee,_),be=(fe,ce)=>{let Ue=fe.rank,ke=fe.name;if(Ue===2)return`var ${ke}_indices = ${fe.type.indices}(0u, 0u);`;let He=M.rank,L=`var ${ke}_indices: ${fe.type.indices};`;for(let X=Ue-2-1,he=He-1;X>=0;X--,he--)L+=`\n${ke}_indices[${X}] = ${He>1?`batch_indices[${he}]`:"batch_indices"};`;return ce.forEach(X=>{L+=`\n${ke}_indices[${X}] = 0;`}),L+=`${ke}_indices[${Ue-2}] = 0u;\n                     ${ke}_indices[${Ue-1}] = 0u;`,L},Ce=()=>{let fe=`var a_data: ${A.type.value};`;for(let ce=0;ce<g;ce++)fe+=`\n              let b_data${ce} = b[(b_offset + (k + ${ce}) * uniforms.N + col) / ${h}];`;for(let ce=0;ce<y;ce++){fe+=`a_data = a[(a_offset + (row + ${ce}) * uniforms.K + k) / ${g}];`;for(let Ue=0;Ue<g;Ue++)fe+=`\n            values[${ce}] = fma(${W.type.value}(a_data${g===1?"":`[${Ue}]`}), b_data${Ue}, values[${ce}]);\n`}return fe};return`\n  ${T.registerUniform("outputSize","u32").registerUniform("M","u32").registerUniform("N","u32").registerUniform("K","u32").registerInternalVariables(M).declareVariables(...B,V)}\n  ${G}\n  ${T.mainStart()}\n    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    let col = (global_idx % (uniforms.N / ${h})) * ${h};\n    var index1 = global_idx / (uniforms.N / ${h});\n    let stride1 = uniforms.M / ${y};\n    let row = (index1 % stride1) * ${y};\n    let batch = index1 / stride1;\n\n    ${r.length===2?"":`let batch_indices = ${M.offsetToIndices("batch")};`}\n    ${be(A,ve)}\n    let a_offset = ${A.indicesToOffset("a_indices")};\n    ${be(W,Z)}\n    let b_offset = ${W.indicesToOffset("b_indices")};\n    var values: array<${V.type.value}, ${y}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${g}) {\n      ${Ce()}\n    }\n    for (var i = 0u; i < ${y}u; i++) {\n      var value = values[i];\n      ${K}\n      ${J}\n      let cur_indices = ${V.type.indices}(batch, row + i, col);\n      let offset = ${V.indicesToOffset("cur_indices")};\n      ${V.setByOffset(`offset / ${h}`,"value")};\n    }\n  }\n  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activationCacheKey}_${h}_${g}_${y}_${n}`,inputDependencies:b?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:x}),getShaderSource:O}},sd=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Wi=e=>{sd(e.inputs);let t=st.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can\'t use matmul on the given tensors");let r=t[t.length-1],o=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&o<8?e.compute(Ln(e.inputs,{activation:"",activationCacheKey:""},t)):e.compute(nn(e.inputs,{activation:"",activationCacheKey:""},t))}});var Hn,Ni,ud,Hi,qn,ld,dd,jn,Gn=Y(()=>{"use strict";Se();We();Ui();gr();Vi();xt();Fn();qt();Hn=(e,t,r,o,n,s)=>{let u=e[0],d=e.slice(s?1:2,s?3:4),a=d.length,p=t[0],g=t.slice(2).map((b,_)=>b+(b-1)*(r[_]-1)),w=d.map((b,_)=>b+o[_]+o[_+a]).map((b,_)=>Math.floor((b-g[_]+n[_])/n[_]));return w.splice(0,0,u),w.splice(s?3:1,0,p),w},Ni=[2,3,1,0],ud=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[1]*t.group;if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(`dilations should be ${n}D`);if(t.strides.length!==n)throw new Error(`strides should be ${n}D`);if(t.pads.length!==n*2)throw new Error(`pads should be ${n*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Hi=(e,t)=>{let r=e.kernelShape.slice();for(let s=2;s<t[1].dims.length;++s)r[s-2]===0&&(r[s-2]=t[1].dims[s]);let o=e.pads.slice();kt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,o,e.format==="NHWC",e.autoPad);let n=Object.assign({},e);return Object.assign(n,{kernelShape:r,pads:o,cacheKey:e.cacheKey}),n},qn=e=>{let t=Jr(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],n=e.dilations,s=e.group,u=e.kernel_shape,d=e.pads,a=e.strides,p=e.w_is_const();return ge({autoPad:o,format:r,dilations:n,group:s,kernelShape:u,pads:d,strides:a,wIsConst:p,...t})},ld=(e,t,r)=>{let o=Hi(r,t);if(r.group!==1){e.compute(Nn(t,o));return}let n=r.format==="NHWC",s=t.length===3,u=t[0].dims[n?1:2],d=t[0].dims[n?2:3],a=t[0].dims[n?3:1],p=t[1].dims[2],h=t[1].dims[3],g=Hn(t[0].dims,t[1].dims,r.dilations,o.pads,r.strides,n),y=g[n?1:2],w=g[n?2:3],b=g[n?3:1],_=n&&p===u&&h===d&&r.pads[0]===0&&r.pads[1]===0;if(_||p===1&&h===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let A=g[0],W,V,G,J=[];if(n){let pe=e.kernelCustomData.wT??e.compute(nt(t[1],Ni),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=pe),_){let ee=u*d*a;W=t[0].reshape([1,A,ee]),V=pe.reshape([1,ee,b]),G=[1,A,b]}else W=t[0].reshape([A,u*d,a]),V=pe.reshape([1,a,b]),G=[A,y*w,b];J.push(W),J.push(V)}else W=t[0].reshape([A,a,u*d]),V=t[1].reshape([1,b,a]),G=[A,b,y*w],J.push(V),J.push(W);s&&J.push(t[2]);let B=G[2],K=J[0].dims[J[0].dims.length-1];B<8&&K<8?e.compute(Ln(J,o,g,G,n),{inputs:J}):e.compute(nn(J,o,g,G,n),{inputs:J});return}let I=!0,S=e.kernelCustomData.wT??e.compute(nt(t[1],Ni),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=S);let x=[t[0],S];s&&x.push(t[2]);let O=n?y*w:b,T=n?b:y*w,M=p*h*a;e.compute(zi(x,o,g,O,T,M,s,I),{inputs:x})},dd=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&o.push(e.inputs[2]);let n=[0,t.pads[0],0,t.pads[1]],s=[1].concat(t.strides),u=[1].concat(t.dilations),d=[1].concat(t.kernelShape),a=Hi({...t,pads:n,strides:s,dilations:u,kernelShape:d},o);e.compute(Nn(o,a,p=>r?[p[0],p[2],p[3]]:[]))},jn=(e,t)=>{ud(e.inputs,t),e.inputs[0].dims.length===3?dd(e,t):ld(e,e.inputs,t)}});var cd,Gi,Li=Y(()=>{"use strict";St();we();xt();tn();Wn();gr();cd=(e,t=!1,r,o=4)=>{let n=Le(o,"f32"),s=x=>{switch(x){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${x} is not supported.`)}},u=e?`\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      `:`\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `,d=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,a=e?"outBackprop[1]":"outBackprop[2]",p=e?"outBackprop[2]":"outBackprop[3]",h=e?"row":"col",g=e?"col":"row",y=`\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${h} / outWidth;\n      let outCol = ${h} % outWidth;\n\n      let WRow = ${g} / (filterDims[1] * inChannels);\n      let WCol = ${g} / inChannels % filterDims[1];\n      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);\n      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);\n      if (xR < 0.0 || xR >= f32(${a}) || fract(xR) > 0.0) {\n        return ${n}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${p}) || fract(xC) > 0.0) {\n        return ${n}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${g} % inChannels;\n      ${u}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${o}];`,w=e?`\n      let col = colIn * ${o};\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${y}\n      }\n      return ${n}(0.0);`:`\n      let col = colIn * ${o};\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${y}\n      }\n      return ${n}(0.0);`,b=`\n      let col = colIn * ${o};\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);\n      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];\n      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${s(o)}\n      }\n      return ${n}(0.0);\n      `,{activationFunction:_,applyActivation:I}=ft(r,n);return`\n      ${_}\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?w:b}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?b:w}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {\n    let col = colIn * ${o};\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${d}\n      ${en(t)}\n      ${I}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${o}] = value;\n    }\n  }`},Gi=(e,t,r,o,n,s,u,d)=>{let a=t.format==="NHWC",p=a?e[0].dims[3]:e[0].dims[1],h=r[0],g=a?r[2]:r[3],y=a?r[1]:r[2],w=a?r[3]:r[1],b=a?p%4===0&&w%4===0:g%4===0&&w%4===0,_=a?w:g*y,I=a?g*y:w,S=b?[8,8,1]:[_<=4||I<=4?4:16,_>4&&I<=4?4:16,1],x=b?[4,4,1]:[_<=4?1:4,_>4&&I<=4?1:4,1],O=[Math.ceil(_/S[0]/x[0]),Math.ceil(I/S[1]/x[1]),Math.ceil(h/S[2]/x[2])];Pe("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${O}`);let T=b?4:1,M=Math.max(S[0]*T,S[1]),A=b?4:1,W=[{type:"int32",data:o},{type:"int32",data:n},{type:"int32",data:s}],V=z("x",e[0].dataType,e[0].dims.length,A),G=z("w",e[1].dataType,e[1].dims.length,1),J=j("result",e[0].dataType,r.length,A),B=[V,G];W.push(...q(e[0].dims)),W.push(...q(e[1].dims));let K="";if(u){let pe=z("bias",e[2].dataType,e[2].dims.length,A);B.push(pe),W.push(...q(e[2].dims)),K+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${b?"vec4<f32>":"f32"} {\n          return bias[coords.${a?"w":"y"}${b?"/ 4":""}];\n        }`}return W.push(...q(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:O[0],y:O[1],z:O[2]},programUniforms:W}),getShaderSource:pe=>`\n        ${rn("uniforms.result_strides")}\n        ${pe.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...B,J)};\n        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[a?1:2]}, ${t.kernelShape[a?2:3]});\n        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(\n              ${t.dilations[0]<=1?0:(t.kernelShape[a?1:2]-1)*(t.dilations[0]-1)},\n              ${t.dilations[1]<=1?0:(t.kernelShape[a?2:3]-1)*(t.dilations[1]-1)});\n        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,\n                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);\n        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        const dimAOuter : i32 = ${o};\n        const dimBOuter : i32 = ${n};\n        const dimInner : i32 = ${s};\n        ${K}\n        ${cd(a,u,t,T)}\n        ${b?fr(x,S,"f32",void 0,!a,M):hr(x,S,"f32",void 0,!a,M,!1,void 0,d)}`}}});var pd,Kn,Fi=Y(()=>{"use strict";St();Se();we();pd=(e,t,r,o,n,s,u=!1,d)=>{let a=r.format==="NHWC",p=a?1:2,h=a?2:3,g=a?3:1,y=U.size(o),w=u?2:1,b=r.group,_=t[1].dims,I=_[0]/b,S=_[1],x=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${u?`vec4<${d}>`:d}) {\n    result[flatIndex] = ${u?`vec4<${d}>`:d}(value);\n  }`;n&&(x+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${u?`vec4<${d}>`:d} {\n      return bias[coords.${a?"w":"y"}${u?"/ 4":""}];\n    }`);let O=u?4:1,T=z("W",t[1].dataType,t[1].dims,O),M=z("Dy",t[0].dataType,t[0].dims,O),A=[M,T];n&&A.push(z("bias",t[2].dataType,[o[g]],O));let W=j("result",t[0].dataType,o,O),V=`{\n        let batch: u32 = ${s?"global_id.z":"workgroup_id.z"} / outShape[1];\n        let r = ${s?"global_id.z":"workgroup_id.z"} % outShape[1];\n        let c = ${s?"global_id.y":"workgroup_id.y"} * ${w};\n        let d1: u32 = ${s?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${d}>, ${w}>;\n        for (var i = 0; i < ${w}; i++) {\n          dotProd[i] = vec4<${d}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\n          var dyR = (${d}(dyCorner.x) + ${d}(wR)) / ${d}(strides.x);\n          let wRPerm = filterDims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${d}(outBackprop[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\n            let dyC = (${d}(dyCorner.y) + ${d}(wC)) / ${d}(strides.y);\n            let dyC2 = (${d}(dyCorner.y) + 1.0 + ${d}(wC)) / ${d}(strides.y);\n            let wCPerm = filterDims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${d}(outBackprop[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${d}(outBackprop[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${M.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${M.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${d}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = outBackprop[${g}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${M.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${M.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${d}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${w}; i = i + 1) {\n          let value = dotProd[i] + ${n?"bias[c+i]":`vec4<${d}>(0.0)`};\n          ${W.set("batch","r","c + i","d1","value")};\n        }\n      }`,G=`\n          let outputIndices = ${W.offsetToIndices("global_idx")};\n          let batch = ${W.indicesGet("outputIndices",0)};\n          let d1 = ${W.indicesGet("outputIndices",g)};\n          let r = ${W.indicesGet("outputIndices",p)};\n          let c = ${W.indicesGet("outputIndices",h)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / ${S};\n          let wOutChannel = d1 - groupId * ${S};\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = ${d}(0.0);\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\n            if (wR % dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${d}(dyRCorner) + ${d}(wR)) / ${d}(strides[0]);\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\n            if (dyR < 0.0 || dyR >= ${d}(outBackprop[${p}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\n              if (wC % dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${d}(dyCCorner) + ${d}(wC)) / ${d}(strides.y);\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\n              if (dyC < 0.0 || dyC >= ${d}(outBackprop[${h}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * ${I};\n              for (var d2: u32 = 0; d2 < ${I}; d2 = d2 + 1) {\n                let xValue = ${a?M.get("batch","idyR","idyC","inputChannel"):M.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${T.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${n?"bias[d1]":`${d}(0.0)`};\n          ${W.setByOffset("global_idx","value")};\n        `;return`\n  ${e.declareVariables(...A,W)}\n  ${x}\n  const outShape : vec4<u32> = vec4<u32>(${o.join(",")});\n  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});\n  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});\n  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[a?1:2]}, ${r.kernelShape[a?2:3]});\n  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\n          ${r.dilations[0]<=1?0:(r.kernelShape[a?1:2]-1)*(r.dilations[0]-1)},\n          ${r.dilations[1]<=1?0:(r.kernelShape[a?2:3]-1)*(r.dilations[1]-1)});\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,\n                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(y)};\n  ${u?V:G}}`},Kn=(e,t,r)=>{let o=e.length>2,n=t.outputShape,s=U.size(n),u=[Math.ceil(s/64),1,1];Pe("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${u}`);let d=Ve(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:u[0],y:u[1],z:u[2]},outputs:[{dims:r?r(n):n,dataType:e[0].dataType}]}),getShaderSource:a=>pd(a,e,t,n,o,u[1]===1&&u[2]===1,!1,d)}}});var md,fd,hd,qi,ji,gd,yd,bd,wd,Ki,Yi=Y(()=>{"use strict";We();Li();Fi();xt();qt();md=(e,t,r,o,n,s)=>(e-1)*t+r+(o-1)*n+1-s,fd=(e,t,r,o,n)=>{let s=Math.floor(e/2);t==="SAME_UPPER"?(r[o]=s,r[n]=e-s):t==="SAME_LOWER"&&(r[o]=e-s,r[n]=s)},hd=(e,t,r,o,n,s,u,d,a,p)=>{let h=e.length-2,g=p.length===0;if(a.length===0)for(let b=0;b<h;++b)a.push(0);let y=e[0],w=t[d?3:1]*n;for(let b=0,_=e.length-h-(d?1:0);b<h;++b,++_){let I=e[_],S=g?I*u[b]:p[b],x=md(I,u[b],s[b],t[_],r[b],S);fd(x,o,s,b,b+h),g&&p.push(u[b]*(I-1)+a[b]+(t[_]-1)*r[b]+1-s[b]-s[b+h])}p.splice(0,0,y),p.splice(d?3:1,0,w)},qi=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((y,w)=>y*w,1)===0){r.length=0;for(let y=2;y<t[1].dims.length;++y)r.push(t[1].dims[y])}let o=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(o?3:1,0,t[1].dims[1]);let n=e.pads.slice(),s=e.outputShape.slice(),u=e.outputPadding.slice(),d=t[0].dims,a=e.dilations.slice();if(a.reduce((y,w)=>y+w,0)===0){let y=t[0].dims.length-2;a=new Array(y).fill(1)}let p=e.strides.slice();if(p.reduce((y,w)=>y+w,0)===0){let y=t[0].dims.length-2;p=new Array(y).fill(1)}hd(d,r,a,e.autoPad,e.group,n,p,o,u,s);let h=Object.assign({},e),g=e.cacheKey+[r.join("n,"),n.join(","),p.join(","),u.join(","),s.join(","),a.join(",")].join("_");return Object.assign(h,{kernelShape:r,pads:n,outputPadding:u,outputShape:s,dilations:a,strides:p,cacheKey:g}),h},ji=e=>{let t=Jr(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],n=e.dilations,s=e.group,u=e.kernelShape,d=e.pads,a=e.strides,p=e.wIsConst(),h=e.outputPadding,g=e.outputShape;return ge({autoPad:o,format:r,dilations:n,group:s,kernelShape:u,outputPadding:h,outputShape:g,pads:d,strides:a,wIsConst:p,...t})},gd=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[0];if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let n=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==n))throw new Error("invalid bias");let s=e[0].dims.length-2;if(t.dilations.reduce((h,g)=>h+g,0)>0&&t.dilations.length!==s)throw new Error(`dilations should be ${s}D`);if(t.strides.reduce((h,g)=>h+g,0)>0&&t.strides.length!==s)throw new Error(`strides should be ${s}D`);if(t.pads.reduce((h,g)=>h+g,0)>0&&t.pads.length!==s*2)throw new Error(`pads should be ${s*2}D`);if(t.outputPadding.length!==s&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${s}D`);if(t.kernelShape.reduce((h,g)=>h+g,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},yd=[2,3,1,0],bd=(e,t,r)=>{let o=qi(r,t),n=r.format==="NHWC",s=o.outputShape,u=s[n?3:1],d=t[0].dims[n?3:1];if(o.group!==1||u===1&&d===1){e.compute(Kn(t,o));return}let a=s[n?1:2],p=s[n?2:3],h=t[1].dims[2],g=t[1].dims[3],y=n?a*p:u,w=n?u:a*p,b=h*g*d,_=!0,I=e.kernelCustomData.wT??e.compute(nt(t[1],yd),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=I);let S=[t[0],I],x=t.length===3;x&&(!n&&t[2].dims.length===1?S.push(t[2].reshape([t[2].dims[0],1,1])):S.push(t[2])),e.compute(Gi(S,o,s,y,w,b,x,_),{inputs:S})},wd=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];o.length===3&&o.push(e.inputs[2]);let n=t.kernelShape;(n.length===0||n[0]===0)&&(n=[e.inputs[1].dims[2]]);let s=t.dilations;(s.length===0||s[0]===0)&&(s=[1]);let u=t.strides;(u.length===0||u[0]===0)&&(u=[1]);let d=t.pads;d.length===0&&(d=[0,0]),d=[0,d[0],0,d[1]],u=[1].concat(u),s=[1].concat(s),n=[1].concat(n);let a=qi({...t,pads:d,strides:u,dilations:s,kernelShape:n},o);e.compute(Kn(o,a,p=>r?[p[0],p[2],p[3]]:[p[0],p[1],p[3]]))},Ki=(e,t)=>{gd(e.inputs,t),e.inputs[0].dims.length===3?wd(e,t):bd(e,e.inputs,t)}});var vd,Zi,Xi,Qi=Y(()=>{"use strict";De();Se();We();we();vd=(e,t,r,o)=>{let n=U.size(t),s=t.length,u=z("input",e,s),d=j("output",e,s),a=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),p=U.normalizeAxis(a,s),h=g=>{let y=` i32(${u.indicesGet("inputIndices","uniforms.axis")}) `,w=de("uniforms.input_shape","uniforms.axis",s),b=o.reverse?y+(o.exclusive?" + 1":""):"0",_=o.reverse?w:y+(o.exclusive?"":" + 1");return`\n                ${g.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(u,d)}\n                ${g.mainStart()}\n                  ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n                  var inputIndices = ${d.offsetToIndices("global_idx")};\n                  var sum = ${d.type.value}(0);\n                  let first : i32 = ${b};\n                  let last : i32 = ${_};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${u.indicesSet("inputIndices","uniforms.axis","u32(i)")};\n                    sum = sum + ${u.getByIndices("inputIndices")};\n                  }\n                  ${d.setByOffset("global_idx","sum")};\n                }`};return{name:"CumSum",shaderCache:{hint:o.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:"uint32",data:n},{type:"int32",data:p},...q(t),...q(t)]}),getShaderSource:h}},Zi=(e,t)=>{let r=e.inputs[0].dims,o=e.inputs[0].dataType,n=e.inputs[1];e.compute(vd(o,r,n,t),{inputs:[0]})},Xi=e=>{let t=e.exclusive===1,r=e.reverse===1;return ge({exclusive:t,reverse:r})}});var Yn,on,Ji,$d,Sd,Zn,Xn,es,xd,ts,rs,ns=Y(()=>{"use strict";Se();We();we();Yn="[a-zA-Z]|\\\\.\\\\.\\\\.",on="("+Yn+")+",Ji="^"+on+"$",$d="("+on+",)*"+on,Sd="^"+$d+"$",Zn=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let o=this.symbolToIndices.get(t);o===void 0?o=[r]:o.push(r),this.symbolToIndices.set(t,o)}},Xn=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[o,n]=r.includes("->")?r.split("->",2):[r,""];if(!o.match(RegExp(Sd)))throw new Error("Invalid LHS term");if(o.split(",").forEach((d,a)=>{let p=t[a].dims.slice();if(!d.match(RegExp(Ji)))throw new Error("Invalid LHS term");let h=this.processTerm(d,!0,p,a);this.lhs.push(h)}),n==="")n+=[...this.symbolToInfo.entries()].filter(([d,a])=>a.count===1||d==="...").map(([d])=>d).join("");else if(!n.match(RegExp(on)))throw new Error("Invalid RHS");n.match(RegExp(Yn,"g"))?.forEach(d=>{if(d==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let a=this.symbolToInfo.get(d);if(a===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(a.dimValue)}}),this.rhs=this.processTerm(n,!1,this.outputDims)}addSymbol(t,r,o){let n=this.symbolToInfo.get(t);if(n!==void 0){if(n.dimValue!==r&&n.count!==1)throw new Error("Dimension mismatch");n.count++,n.inputIndices.push(o)}else n={count:1,dimValue:r,inputIndices:[o]};this.symbolToInfo.set(t,n)}processTerm(t,r,o,n=-1){let s=o.length,u=!1,d=[],a=0;if(!t.match(RegExp(Ji))&&!r&&t!=="")throw new Error("Invalid LHS term");let p=t.match(RegExp(Yn,"g")),h=new Zn(n);return p?.forEach((g,y)=>{if(g==="..."){if(u)throw new Error("Only one ellipsis is allowed per input term");u=!0;let w=s-p.length+1;if(w<0)throw new Error("Ellipsis out of bounds");if(d=o.slice(a,a+w),this.hasEllipsis){if(this.ellipsisDims.length!==d.length||this.ellipsisDims.toString()!==d.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=d;else throw new Error("Ellipsis must be specified in the LHS");for(let b=0;b<d.length;b++){let _=String.fromCharCode("0".charCodeAt(0)+b);h.addSymbol(_,y+b),this.addSymbol(_,o[a++],n)}}else h.addSymbol(g,y+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(g,o[a++],n)}),h}},es=e=>e+"_max",xd=(e,t,r,o,n)=>{let u=t.map((w,b)=>e[b]?w.length:w).map((w,b)=>z(`input${b}`,r,w)),d=U.size(n),a=Oe(n.length),p=a?n.length:n,h=j("output",r,p),g=[...o.symbolToInfo.keys()].filter(w=>!o.rhs.symbolToIndices.has(w)),y=w=>{let b=[],_="var prod = 1.0;",I="var sum = 0.0;",S="sum += prod;",x=[],O=[],T=[],M=[],A=o.symbolToInfo.size===o.rhs.symbolToIndices.size;o.symbolToInfo.forEach((V,G)=>{if(o.rhs.symbolToIndices.has(G)){let J=o.rhs.symbolToIndices.get(G)?.[0];J!==void 0&&o.lhs.forEach((B,K)=>{if(V.inputIndices.includes(K)){let pe=B.symbolToIndices.get(G);if(pe===void 0)throw new Error("Invalid symbol error");pe.forEach(ee=>{b.push(`${u[K].indicesSet(`input${K}Indices`,ee,h.indicesGet("outputIndices",J))}`)})}})}else o.lhs.forEach((J,B)=>{if(V.inputIndices.includes(B)){let K=J.symbolToIndices.get(G);if(K===void 0)throw new Error("Invalid symbol error");K.forEach(pe=>{x.push(`${u[B].indicesSet(`input${B}Indices`,pe,`${G}`)}`)}),M.push(`prod *= ${u[B].getByIndices(`input${B}Indices`)};`)}}),O.push(`for(var ${G}: u32 = 0; ${G} < uniforms.${es(G)}; ${G}++) {`),T.push("}")});let W=A?[...b,`let sum = ${u.map((V,G)=>V.getByIndices(`input${G}Indices`)).join(" * ")};`]:[...b,I,...O,...x,_,...M,S,...T];return`\n            ${w.registerUniforms(g.map(V=>({name:`${es(V)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...u,h)}\n\n            ${w.mainStart()}\n            ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${h.offsetToIndices("global_idx")};\n            ${u.map((V,G)=>`var input${G}Indices: ${u[G].type.indices};`).join(`\n`)}\n            ${W.join(`\n`)};\n            ${h.setByOffset("global_idx","sum")};\n          }`};return{name:"Einsum",shaderCache:{hint:o.equation,inputDependencies:e.map(w=>w?"rank":"dims")},getRunData:()=>{let w=g.filter(_=>o.symbolToInfo.has(_)).map(_=>({type:"uint32",data:o.symbolToInfo.get(_)?.dimValue||0}));w.push({type:"uint32",data:d});let b=t.filter((_,I)=>e[I]).map((_,I)=>[...q(_)]).reduce((_,I)=>_.concat(I),w);return a&&b.push(...q(n)),{outputs:[{dims:n,dataType:r}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:b}},getShaderSource:y}},ts=(e,t)=>{let r=new Xn(e.inputs,t.equation),o=e.inputs.map((u,d)=>Oe(u.dims.length)),n=r.outputDims,s=e.inputs.map((u,d)=>u.dims);e.compute(xd(o,s,e.inputs[0].dataType,r,n))},rs=e=>{let t=e.equation.replace(/\\s+/g,"");return ge({equation:t})}});var _d,os,Cd,Id,as,is=Y(()=>{"use strict";De();Se();we();_d=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=r.length<t.length?0:r.length-t.length,n=t.length<r.length?0:t.length-r.length;for(;o<r.length&&n<t.length;++o,++n)if(r[o]!==t[n]&&r[o]!==1&&t[n]!==1)throw new Error("Expand requires shape to be broadcastable to input")},os=(e,t)=>{let r=e.length-t.length,o=[];for(let n=0;n<r;++n)o.push(e[n]);for(let n=0;n<t.length;++n)o.push(t[n]===1?e[n+r]:t[n]);return o},Cd=(e,t)=>e.length>t.length?os(e,t):os(t,e),Id=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=Cd(t,r),n=e[0].dataType,s=n===9?4:1,u=Math.ceil(U.size(o)/s),d=Oe(t.length),a=Oe(o.length),p=g=>{let y=d?t.length:t,w=a?o.length:o,b=z("input",n,y,s),_=j("output",n,w,s),I;if(n===9){let S=(x,O,T="")=>`\n          let outputIndices${O} = ${_.offsetToIndices(`outputOffset + ${O}u`)};\n          let offset${O} = ${b.broadcastedIndicesToOffset(`outputIndices${O}`,_)};\n          let index${O} = offset${O} / 4u;\n          let component${O} = offset${O} % 4u;\n          ${x}[${O}] = ${T}(${b.getByOffset(`index${O}`)}[component${O}]);\n        `;I=`\n        let outputOffset = global_idx * ${s};\n        var data = vec4<u32>(0);\n        ${S("data",0,"u32")}\n        ${S("data",1,"u32")}\n        ${S("data",2,"u32")}\n        ${S("data",3,"u32")}\n        ${_.setByOffset("global_idx","data")}\n      }`}else I=`\n        let outputIndices = ${_.offsetToIndices("global_idx")};\n        let inputOffset = ${b.broadcastedIndicesToOffset("outputIndices",_)};\n        ${_.setByOffset("global_idx",b.getByOffset("inputOffset"))}\n      }`;return`\n    ${g.registerUniform("vec_size","u32").declareVariables(b,_)}\n    ${g.mainStart()}\n    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    ${I}`},h=[{type:"uint32",data:u}];return d&&h.push(...q(t)),a&&h.push(...q(o)),{name:"Expand",shaderCache:{hint:`${o.length}`,inputDependencies:[d?"rank":"dims"]},getShaderSource:p,getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:h})}},as=e=>{_d(e.inputs),e.compute(Id(e.inputs),{inputs:[0]})}});var Ad,Td,ss,us,ls=Y(()=>{"use strict";De();Se();We();we();Ad=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},Td=(e,t)=>{let r=e[0].dims,o=e[1].dims,n=r.length,s=U.normalizeAxis(t.axis,n),u=r.slice(0);u.splice(s,1,...o);let d=r[s],a=e[0].dataType===9?4:1,p=Math.ceil(U.size(u)/a),h=Oe(e[0].dims.length),g=h?e[0].dims.length:e[0].dims,y=Oe(e[1].dims.length),w=y?e[1].dims.length:e[1].dims,b=Oe(u.length),_=b?u.length:u,I=[{type:"uint32",data:p},{type:"int32",data:d},{type:"uint32",data:s}];h&&I.push(...q(e[0].dims)),y&&I.push(...q(e[1].dims)),b&&I.push(...q(u));let S=[];S.push(h?"rank":"dims"),S.push(y?"rank":"dims");let x=O=>{let T=z("data",e[0].dataType,g,a),M=z("inputIndices",e[1].dataType,w),A=j("output",e[0].dataType,_,a),W=G=>{let J=o.length,B=`var indicesIndices${G}  = ${M.type.indices}(0);`;for(let K=0;K<J;K++)B+=`${J>1?`indicesIndices${G}[${K}]`:`indicesIndices${G}`} = ${u.length>1?`outputIndices${G}[uniforms.axis + ${K}]`:`outputIndices${G}`};`;B+=`\n          var idx${G} = ${M.getByIndices(`indicesIndices${G}`)};\n          if (idx${G} < 0) {\n            idx${G} = idx${G} + uniforms.axisDimLimit;\n          }\n          var dataIndices${G} = ${T.type.indices}(0);\n        `;for(let K=0,pe=0;K<n;K++)K===s?(B+=`${n>1?`dataIndices${G}[${K}]`:`dataIndices${G}`} = u32(idx${G});`,pe+=J):(B+=`${n>1?`dataIndices${G}[${K}]`:`dataIndices${G}`} = ${u.length>1?`outputIndices${G}[${pe}]`:`outputIndices${G}`};`,pe++);return B},V;if(e[0].dataType===9){let G=(J,B,K="")=>`\n          let outputIndices${B} = ${A.offsetToIndices(`outputOffset + ${B}u`)};\n          ${W(B)};\n          let offset${B} = ${T.indicesToOffset(`dataIndices${B}`)};\n          let index${B} = offset${B} / 4u;\n          let component${B} = offset${B} % 4u;\n          ${J}[${B}] = ${K}(${T.getByOffset(`index${B}`)}[component${B}]);\n        `;V=`\n        let outputOffset = global_idx * ${a};\n        var value = vec4<u32>(0);\n        ${G("value",0,"u32")}\n        ${G("value",1,"u32")}\n        ${G("value",2,"u32")}\n        ${G("value",3,"u32")}\n        ${A.setByOffset("global_idx","value")}\n      `}else V=`\n      let outputIndices = ${A.offsetToIndices("global_idx")};\n      ${W("")};\n      let value = ${T.getByIndices("dataIndices")};\n      ${A.setByOffset("global_idx","value")};\n      `;return`\n      ${O.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(T,M,A)}\n      ${O.mainStart()}\n        ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        ${V}\n      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:S},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:I}),getShaderSource:x}},ss=e=>ge({axis:e.axis}),us=(e,t)=>{let r=e.inputs;Ad(r),e.compute(Td(e.inputs,t))}});var Ed,Od,ds,cs,ps=Y(()=>{"use strict";Se();We();we();Ed=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`)},Od=(e,t)=>{let r=e[0].dims,o=e[0].dataType,n=r.length,s=e[1].dims,u=e[1].dataType,d=U.normalizeAxis(t.axis,n),a=r[d],p=s.slice(0),h=U.size(p),g=z("input",o,n),y=z("indicesInput",u,s.length),w=j("output",o,p.length),b=[{type:"uint32",data:h},{type:"int32",data:a},{type:"uint32",data:d}];return b.push(...q(r)),b.push(...q(s)),b.push(...q(p)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:b}),getShaderSource:S=>`\n      ${S.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(g,y,w)}\n      ${S.mainStart()}\n      ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n      let outputIndices = ${w.offsetToIndices("global_idx")};\n\n      var idx = ${y.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${g.type.indices}(outputIndices);\n      ${g.indicesSet("inputIndices","uniforms.axis","u32(idx)")};\n      let value = ${g.getByIndices("inputIndices")};\n\n      ${w.setByOffset("global_idx","value")};\n  }`}},ds=e=>ge({axis:e.axis}),cs=(e,t)=>{let r=e.inputs;Ed(r),e.compute(Od(e.inputs,t))}});var Pd,kd,ms,fs,hs=Y(()=>{"use strict";Se();we();Pd=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},kd=(e,t)=>{let r=e[0].dims.slice(),o=e[1].dims.slice(),[n,s,u]=Lr.getShapeOfGemmResult(r,t.transA,o,t.transB,e.length===3?e[2].dims:void 0),d=[n,s];if(!d)throw new Error("Can\'t use gemm on the given tensors");let a=U.size(d),p=[{type:"uint32",data:a},{type:"uint32",data:n},{type:"uint32",data:s},{type:"uint32",data:u},{type:"float32",data:t.alpha},{type:"float32",data:t.beta}],h=["type","type"];e.length===3&&(p.push(...q(e[2].dims)),h.push("rank")),p.push(...q(d));let g=y=>{let w="";t.transA&&t.transB?w="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?w="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?w="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(w="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let b=t.alpha===1?"":"value *= uniforms.alpha;",_=z("a",e[0].dataType,e[0].dims),I=z("b",e[1].dataType,e[1].dims),S=_.type.value,x=null,O=[_,I];e.length===3&&(x=z("c",e[2].dataType,e[2].dims.length),O.push(x));let T=j("output",e[0].dataType,d.length);O.push(T);let M=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`\n  ${y.registerUniforms(M).declareVariables(...O)}\n\n  ${y.mainStart()}\n    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${S}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${w}\n    }\n\n    ${b}\n    ${(()=>x!=null?`let cOffset = ${x.broadcastedIndicesToOffset("vec2(m, n)",T)}; value += uniforms.beta * ${x.getByOffset("cOffset")};`:"")()}\n    output[global_idx] = value;\n  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:p}),getShaderSource:g}},ms=e=>{let t=e.transA,r=e.transB,o=e.alpha,n=e.beta;return{transA:t,transB:r,alpha:o,beta:n,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},fs=(e,t)=>{Pd(e.inputs),e.compute(kd(e.inputs,t))}});var Rd,Bd,Dd,gs,ys=Y(()=>{"use strict";De();Se();we();Rd=(e,t)=>{let r=e[0].dims,o=r,n=2,s=U.sizeToDimension(r,n),u=U.sizeFromDimension(r,n),d=Ne(u),a=u/d,p=[r[0],r[1],a],h=["rank","type","type"],g=[{type:"uint32",data:u},{type:"uint32",data:a}];g.push(...q(p),...q(p));let y=w=>{let b=z("x",e[0].dataType,p.length,d),_=z("scale",e[1].dataType,e[1].dims),I=z("bias",e[2].dataType,e[2].dims),S=j("output",e[0].dataType,p.length,d),x=[b,_,I,S],O=b.type.value,T=d===1?"f32":`vec${d}<f32>`,M=64,A=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`\n  var<workgroup> meanShared : f32;\n  var<workgroup> squaredNormShared : f32;\n  var<workgroup> workgroupShared : array<${T}, ${M}>;\n  const workgroupSize = ${M}u;\n  ${w.registerUniforms(A).declareVariables(...x)}\n  ${w.mainStart(M)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / uniforms.x_shape[1];\n    let channel = norm % uniforms.x_shape[1];\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial = ${T}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      initial = initial + ${T}(${b.get("batch","channel","h")});\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = ${Qe("workgroupShared[0]",d)} / f32(uniforms.normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = ${T}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let deviation =  ${T}(${b.get("batch","channel","h")}) - ${T}(meanShared);\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = ${Qe("workgroupShared[0]",d)};\n    }\n    workgroupBarrier();\n\n    let invStdDev = 1 / sqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));\n    let channelScale = invStdDev * f32(${_.getByOffset("channel")});\n    let channelShift = f32(${I.getByOffset("channel")}) - meanShared * channelScale;\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let value = ${b.get("batch","channel","h")} * ${O}(${T}(channelScale)) + ${O}(${T}(channelShift));\n      ${S.set("batch","channel","h","value")};\n    }\n  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${d}`,inputDependencies:h},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:s},programUniforms:g}),getShaderSource:y}},Bd=(e,t,r,o,n,s,u,d)=>{let a=Ne(u),p=64,h=a===1?"vec2f":`mat2x${a}f`,g=a===1?"f32":`vec${a}f`,y=(A,W)=>`${h}(${A}, ${W})`,w=n*u/a,b=Math.ceil(s/p),_=["type"],I=[{type:"uint32",data:b},{type:"uint32",data:s},{type:"uint32",data:Math.floor(u/a)},{type:"uint32",data:Math.floor(s*u/a)}],S=A=>{let W=z("input",t.dataType,t.dims,a);return`\n  ${A.declareVariables(W)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${h}>;\n  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};\n  @group(0) @binding(2) var<uniform> uniforms: Uniforms;\n\n  ${A.mainStart(p)}\n    let currentImageNumber = global_idx / ${p} / uniforms.C;\n    let currentChannelNumber = (global_idx / ${p}) % uniforms.C;\n    let wgId = global_idx % ${p};\n    let wgOffset = wgId * uniforms.wg_size;\n    if (wgOffset >= uniforms.H) {\n        return;\n    }\n    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);\n\n    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;\n    var sum = ${je("f32",a)};\n    var squaredSum = ${je("f32",a)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${g}(input[offset + i * uniforms.C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${y("sum","squaredSum")};\n  }`},x=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${a}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:[n,u,p,2],dataType:1}],dispatchGroup:{x:n*u/a},programUniforms:I}),getShaderSource:S},{inputs:[t],outputs:[-1]})[0],O=[{type:"uint32",data:w},{type:"uint32",data:s},{type:"uint32",data:Math.floor(u/a)},{type:"uint32",data:Math.floor(p*u/a)}],T=["type","type","type"],M=A=>{let W=z("scale",r.dataType,r.dims,a),V=z("bias",o.dataType,o.dims,a);return`\n  @group(0) @binding(0) var<storage, read> input : array<${h}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${W.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${V.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${h}>;\n  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};\n  @group(0) @binding(4) var<uniform> uniforms: Uniforms;\n\n  ${A.mainStart()}\n    ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}\n    let currentImageNumber = global_idx / uniforms.C;\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let offset = currentImageNumber * uniforms.image_size;\n    var sum = ${je("f32",a)};\n    var squaredSum = ${je("f32",a)};\n    for (var i: u32 = 0; i < ${p}; i++) {\n        let value = input[offset + i + currentChannelNumber * ${p}];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(uniforms.H);\n    squaredSum = squaredSum / f32(uniforms.H);\n    let invStdDev = 1 / sqrt(squaredSum - sum * sum + f32(${d}));\n    let channelScale = invStdDev * ${g}(scale[currentChannelNumber]);\n    let channelShift = ${g}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${y("channelScale","channelShift")};\n  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${a};${d}`,inputDependencies:T},getRunData:()=>({outputs:[{dims:[n,u,2],dataType:1}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:O}),getShaderSource:M},{inputs:[x,r,o],outputs:[-1]})[0]},Dd=(e,t,r)=>{let o=t[0].dims,n=o,s=o[0],u=o[o.length-1],d=U.sizeFromDimension(o,1)/u,a=Ne(u),p=U.size(n)/a,h=[{type:"uint32",data:d},{type:"uint32",data:Math.floor(u/a)}],g=["type","type"],y=Bd(e,t[0],t[1],t[2],s,d,u,r.epsilon),w=b=>{let _=Ve(t[0].dataType),I=a===1?"vec2f":`mat2x${a}f`,S=a===1?_:`vec${a}<${_}>`,x=z("input",t[0].dataType,t[0].dims,a),O=j("output",t[0].dataType,n,a);return`\n  @group(0) @binding(0) var<storage, read> input : array<${x.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${I}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${O.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${b.mainStart()}\n    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${S}(scale[0]), ${S}(scale[1]));\n  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${a}`,inputDependencies:g},getRunData:()=>({outputs:[{dims:n,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:h}),getShaderSource:w},{inputs:[t[0],y]})},gs=(e,t)=>{t.format==="NHWC"?Dd(e,e.inputs,t):e.compute(Rd(e.inputs,t))}});var Md,zd,bs,ws=Y(()=>{"use strict";De();Se();we();Md=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},zd=(e,t,r)=>{let o=e[0].dims,n=e[1],s=e[2],u=o,d=U.normalizeAxis(t.axis,o.length),a=U.sizeToDimension(o,d),p=U.sizeFromDimension(o,d),h=U.size(n.dims),g=s?U.size(s.dims):0;if(h!==p||s&&g!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${h} and bias size of ${g}`);let y=[];for(let T=0;T<o.length;++T)T<d?y.push(o[T]):y.push(1);let w=Ne(p),b=["type","type"],_=[{type:"uint32",data:a},{type:"float32",data:p},{type:"uint32",data:Math.floor(p/w)},{type:"float32",data:t.epsilon}];s&&b.push("type");let I=r>1,S=r>2,x=T=>{let M=Ve(e[0].dataType),A=[z("x",e[0].dataType,e[0].dims,w),z("scale",n.dataType,n.dims,w)];s&&A.push(z("bias",s.dataType,s.dims,w)),A.push(j("output",e[0].dataType,u,w)),I&&A.push(j("mean_data_output",1,y)),S&&A.push(j("inv_std_output",1,y));let W=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`\n  ${T.registerUniforms(W).declareVariables(...A)}\n  ${T.mainStart()}\n    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var meanVector = ${je("f32",w)};\n    var meanSquareVector = ${je("f32",w)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${rt(M,w,"x[h + offset]")};\n      meanVector += value;\n      meanSquareVector += value * value;\n    }\n    let mean = ${Qe("meanVector",w)} / uniforms.norm_size;\n    let meanSquare = sqrt(${Qe("meanSquareVector",w)}\n      / uniforms.norm_size - mean * mean + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${rt(M,w,"x[j + offset]")};\n      let f32scale = ${rt(M,w,"scale[j]")};\n      output[j + offset] = ${A[0].type.value}((f32input - mean) / meanSquare * f32scale\n        ${s?`+ ${rt(M,w,"bias[j]")}`:""}\n      );\n    }\n\n    ${I?"mean_data_output[global_idx] = mean":""};\n    ${S?"inv_std_output[global_idx] = 1 / meanSquare":""};\n  }`},O=[{dims:u,dataType:e[0].dataType}];return I&&O.push({dims:y,dataType:1}),S&&O.push({dims:y,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${w};${r}`,inputDependencies:b},getRunData:()=>({outputs:O,dispatchGroup:{x:Math.ceil(a/64)},programUniforms:_}),getShaderSource:x}},bs=(e,t)=>{Md(e.inputs),e.compute(zd(e.inputs,t,e.outputCount))}});var Ud,$s,vs,Vd,Qn,Ss,xs=Y(()=>{"use strict";Se();We();Hr();Un();we();qt();Ud=(e,t)=>{let r=e[0],o=e[1],n=e[2],s=e[3],u=e[4],d=e[5],a=e[6],p=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let h=!1,g=r.dims[0],y=r.dims[1],w=r.dims.length===3?h?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],b=y,_=0,I=0,S=Math.floor(w/t.numHeads);if(a&&p){if(a.dims.length!==4)throw new Error(\'Input "past_key" is expected to have 4 dimensions\');if(p.dims.length!==4)throw new Error(\'Input "past_value" is expected to have 4 dimensions\');_=a.dims[2],I=a.dims[2]}else if(a||p)throw new Error(\'Input "past_key" and "past_value" shall be both present or both absent\');let x;if(o){if(r.dims.length!==3)throw new Error(\'Input "query" is expected to have 3 dimensions when key is given\');if(o.dims.length<3||o.dims.length>5)throw new Error(\'Input "key" is expected to have 3, 4, or 5 dimensions\');if(r.dims[0]!==o.dims[0])throw new Error(\'Input "query" and "key" shall have same dim 0 (batch size)\');if(o.dims.length===3){if(o.dims[2]!==r.dims[2])throw new Error(\'Input "query" and "key" shall have same dim 2 (hidden_size)\');x=2,b=o.dims[1]}else if(o.dims.length===5){if(o.dims[2]!==t.numHeads||o.dims[3]!==2||o.dims[4]!==S)throw new Error(\'Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv\');if(n)throw new Error(\'Expect "value" be none when "key" has packed kv format.\');x=5,b=o.dims[1]}else{if(o.dims[1]!==t.numHeads||o.dims[3]!==S)throw new Error(\'Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key\');x=0,b=o.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error(\'Input "query" is expected to have 3 or 5 dimensions when key is empty\');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error(\'Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv\');x=3}if(s){if(s.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimension\');if(n&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let O=0;if(u){O=8;let V=u.dims;throw V.length===1?V[0]===g?O=1:V[0]===3*g+2&&(O=3):V.length===2&&V[0]===g&&V[1]===b&&(O=5),O===8?new Error(\'Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)\'):new Error("Mask not supported")}let T=!1,M=w;if(n){if(n.dims.length!==3&&n.dims.length!==4)throw new Error(\'Input "value" is expected to have 3 or 4 dimensions\');if(r.dims[0]!==n.dims[0])throw new Error(\'Input "query" and "value" shall have same dim 0 (batch_size)\');if(n.dims.length===3){if(b!==n.dims[1])throw new Error(\'Input "key" and "value" shall have the same dim 1 (kv_sequence_length)\');M=n.dims[2]}else{if(b!==n.dims[2])throw new Error(\'Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)\');M=n.dims[1]*n.dims[3],T=!0}}let A=_+b,W=!1;if(u)throw new Error("Key padding mask is not supported");if(d)throw new Error("extraAddQk is not supported");if(a)throw new Error("pastKey is not supported");if(p)throw new Error("pastValue is not supported");return{batchSize:g,sequenceLength:y,pastSequenceLength:_,kvSequenceLength:b,totalSequenceLength:A,maxSequenceLength:I,inputHiddenSize:0,hiddenSize:w,vHiddenSize:M,headSize:S,vHeadSize:Math.floor(M/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:O,scale:t.scale,broadcastResPosBias:W,passPastInKv:T,qkvFormat:x}},$s=e=>ge({...e}),vs=ge({perm:[0,2,1,3]}),Vd=(e,t,r,o,n,s,u)=>{let d=[o,n,s],a=U.size(d),p=[{type:"uint32",data:a},{type:"uint32",data:u},{type:"uint32",data:s}],h=g=>{let y=j("qkv_with_bias",t.dataType,d),w=z("qkv",t.dataType,d),b=z("bias",r.dataType,d),_=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`\n  ${g.registerUniforms(_).declareVariables(w,b,y)}\n  ${g.mainStart()}\n    ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:d,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:p}),getShaderSource:h},{inputs:[t,r],outputs:[-1]})[0]},Qn=(e,t,r,o,n,s,u,d)=>{let a=s;if(u){if(o===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return a=Vd(e,s,u,t,o,r*n,d),a=a.reshape([t,o,r,n]),e.compute(nt(a,vs.perm),{inputs:[a],outputs:[-1]})[0]}else return s.dims.length===3&&(a=s.reshape([t,o,r,n])),e.compute(nt(a,vs.perm),{inputs:[a],outputs:[-1]})[0]},Ss=(e,t)=>{let r=Ud(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let o=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,n=Qn(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(o)return Zr(e,n,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let s=Qn(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),u=Qn(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);Zr(e,n,s,u,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Wd,Nd,Hd,Gd,Ld,Fd,qd,jd,_s,Cs=Y(()=>{"use strict";De();Se();we();Wd=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Nd=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n            k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${de("uniforms.x_shape",n,t)})) {\n              break;\n            }\n            offset += k * i32(${de("uniforms.x_strides",n,t)});\n        `;return`\n          value = ${e.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${o}\n            value = x[offset];\n          }\n      `},Hd=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${de("uniforms.x_shape",n,t)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${de("uniforms.x_shape",n,t)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${de("uniforms.x_strides",n,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},Gd=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${de("uniforms.x_shape",n,t)})) {\n                  k = i32(${de("uniforms.x_shape",n,t)}) - 1;\n                }\n                offset += k * i32(${de("uniforms.x_strides",n,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},Ld=(e,t,r)=>{let o="";for(let n=t-1;n>=0;--n)o+=`\n                k = i32(${e.indicesGet("indices",n)}) - ${de("uniforms.pads",n,r)};\n                if (k < 0)  {\n                  k += i32(${de("uniforms.x_shape",n,t)}]);\n                }\n                if (k >= i32(${de("uniforms.x_shape",n,t)})) {\n                  k -= i32(${de("uniforms.x_shape",n,t)});\n                }\n                offset += k * i32(${de("uniforms.x_strides",n,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},Fd=(e,t,r)=>{switch(r.mode){case 0:return Nd(e,t,r.pads.length);case 1:return Hd(e,t,r.pads.length);case 2:return Gd(e,t,r.pads.length);case 3:return Ld(e,t,r.pads.length);default:throw new Error("Invalid mode")}},qd=(e,t)=>{let r=U.padShape(e[0].dims.slice(),t.pads),o=e[0].dims,s=[{type:"uint32",data:U.size(r)},{type:"uint32",data:t.pads}];if(t.mode===0){let a=Xe(e[0].dataType);s.push({type:a,data:t.value})}s.push(...q(e[0].dims),...q(r));let u=["rank"],d=a=>{let p=j("output",e[0].dataType,r.length),h=z("x",e[0].dataType,o.length),g=h.type.value,y=Fd(p,o.length,t),w=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&w.push({name:"constant_value",type:g}),`\n            ${a.registerUniforms(w).declareVariables(h,p)}\n            ${a.mainStart()}\n            ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n            let indices = ${p.offsetToIndices("global_idx")};\n\n            var value = ${g}(0);\n            ${y}\n            output[global_idx] = value;\n        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(U.size(r)/64)},programUniforms:s}),getShaderSource:d}},jd=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),o=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,n=e[0].dims.length,s=new Int32Array(2*n).fill(0);if(e.length>=4){let d=e[3].getBigInt64Array();for(let a=0;a<d.length;a++)s[Number(d[a])]=Number(r[a]),s[Number(d[a])+n]=Number(r[a+d.length])}else r.forEach((d,a)=>s[Number(a)]=Number(d));let u=[];return s.forEach(d=>u.push(d)),{mode:t.mode,value:o,pads:u}}else return t},_s=(e,t)=>{Wd(e.inputs);let r=jd(e.inputs,t);e.compute(qd(e.inputs,r),{inputs:[0]})}});var an,Is,As,Ts,Es,Kd,Yd,Os,Ps,ks,Rs,Bs,Ds,Ms,zs,Us,Vs,Ws,Ns,Hs=Y(()=>{"use strict";Lt();Se();we();an=e=>{if(Nt.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},Is=(e,t,r)=>{let o=t.format==="NHWC",n=e.dims.slice();o&&n.splice(1,0,n.pop());let s=Object.hasOwnProperty.call(t,"dilations"),u=t.kernelShape.slice(),d=t.strides.slice(),a=s?t.dilations.slice():[],p=t.pads.slice();kt.adjustPoolAttributes(r,n,u,d,a,p);let h=kt.computePoolOutputShape(r,n,d,a,u,p,t.autoPad),g=Object.assign({},t);s?Object.assign(g,{kernelShape:u,strides:d,pads:p,dilations:a,cacheKey:t.cacheKey}):Object.assign(g,{kernelShape:u,strides:d,pads:p,cacheKey:t.cacheKey});let y=h.slice();return y.push(y.splice(1,1)[0]),[g,o?y:h]},As=(e,t)=>{let r=t.format==="NHWC",o=U.size(e),n=U.size(t.kernelShape),s=[{type:"uint32",data:o},{type:"uint32",data:n}],u=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let d=t.kernelShape[t.kernelShape.length-1],a=t.strides[t.strides.length-1],p=t.pads[t.pads.length/2-1],h=t.pads[t.pads.length-1],g=!!(p+h);s.push({type:"uint32",data:d},{type:"uint32",data:a},{type:"uint32",data:p},{type:"uint32",data:h}),u.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let y=!1;if(t.kernelShape.length===2){let w=t.kernelShape[t.kernelShape.length-2],b=t.strides[t.strides.length-2],_=t.pads[t.pads.length/2-2],I=t.pads[t.pads.length-2];y=!!(_+I),s.push({type:"uint32",data:w},{type:"uint32",data:b},{type:"uint32",data:_},{type:"uint32",data:I}),u.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[s,u,!0,g,y]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let d=U.computeStrides(t.kernelShape);s.push({type:"uint32",data:d},{type:"uint32",data:t.pads},{type:"uint32",data:t.strides}),u.push({name:"kernelStrides",type:"u32",length:d.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let a=t.pads.reduce((p,h)=>p+h);return[s,u,!!a,!1,!1]}},Ts=(e,t,r,o,n,s,u,d,a,p,h,g)=>{let y=n.format==="NHWC",w=t.type.value,b=j("output",t.type.tensor,o);if(n.kernelShape.length<=2){let _="",I="",S="",x=r-(y?2:1);if(h?_=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${x}] = indices[${x}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${x}] < 0 || xIndices[${x}]\n                      >= uniforms.x_shape[${x}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`:_=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${x}] = indices[${x}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${s}\n                }`,n.kernelShape.length===2){let T=r-(y?3:2);g?I=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${T}] = indices[${T}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${T}] < 0 || xIndices[${T}] >= uniforms.x_shape[${T}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `:I=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${T}] = indices[${T}] * uniforms.sh - uniforms.phStart + j;\n                `,S=`\n              }\n            `}return`\n            ${e.registerUniforms(a).declareVariables(t,b)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n              let indices = ${b.offsetToIndices("global_idx")};\n              var xIndices = ${b.offsetToIndices("global_idx")};\n\n              var value = ${w}(${d});\n              var pad = 0;\n              ${I}\n              ${_}\n              ${S}\n              ${u}\n\n              output[global_idx] = value;\n            }`}else{if(y)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let _=n.kernelShape.length,I=n.pads.length,S="";return p?S=`\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${s}\n              }`:S=`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${s}\n            `,`\n            ${e.registerUniforms(a).declareVariables(t,b)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n              let indices = ${b.offsetToIndices("global_idx")};\n              var xIndices = ${b.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${_}>;\n\n              var value = ${w}(${d});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${_-1}u; j++) {\n                  offsets[j] = offset / ${de("uniforms.kernelStrides","j",_)};\n                  offset -= offsets[j] * ${de("uniforms.kernelStrides","j",_)};\n                }\n                offsets[${_-1}] = offset;\n\n                isPad = false;\n                for (var j = ${r-_}u; j < ${r}u; j++) {\n                  xIndices[j] = indices[j] * ${de("uniforms.strides",`j - ${r-_}u`,_)}\n                    + offsets[j - ${r-_}u] - ${de("uniforms.pads","j - 2u",I)};\n                  ${S}\n              }\n              ${u}\n\n              output[global_idx] = value;\n            }`}},Es=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,Kd=e=>`${Es(e)};${e.countIncludePad}`,Yd=e=>`${Es(e)};${e.storageOrder};${e.dilations}`,Os=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Ps=(e,t,r,o)=>{let[n,s]=Is(t,o,r),u=z("x",t.dataType,t.dims.length),d=u.type.value,a="value += x_val;",p="";n.countIncludePad?p+=`value /= ${d}(uniforms.kernelSize);`:p+=`value /= ${d}(i32(uniforms.kernelSize) - pad);`;let[h,g,y,w,b]=As(s,n);h.push(...q(t.dims),...q(s));let _=["rank"];return{name:e,shaderCache:{hint:`${o.cacheKey};${y};${w};${b}`,inputDependencies:_},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(U.size(s)/64)},programUniforms:h}),getShaderSource:I=>Ts(I,u,t.dims.length,s.length,n,a,p,0,g,y,w,b)}},ks=e=>{let t=e.count_include_pad!==0,r=Os(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let o={countIncludePad:t,...r,cacheKey:""};return{...o,cacheKey:Kd(o)}},Rs=(e,t)=>{an(e.inputs),e.compute(Ps("AveragePool",e.inputs[0],!1,t))},Bs={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},Ds=e=>{let t=e.format;return{format:t,...Bs,cacheKey:t}},Ms=(e,t)=>{an(e.inputs),e.compute(Ps("GlobalAveragePool",e.inputs[0],!0,t))},zs=(e,t,r,o)=>{let[n,s]=Is(t,o,r),u=`\n      value = max(x_val, value);\n    `,d="",a=z("x",t.dataType,t.dims.length),p=["rank"],[h,g,y,w,b]=As(s,n);return h.push(...q(t.dims),...q(s)),{name:e,shaderCache:{hint:`${o.cacheKey};${y};${w};${b}`,inputDependencies:p},getRunData:()=>({outputs:[{dims:s,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(U.size(s)/64)},programUniforms:h}),getShaderSource:_=>Ts(_,a,t.dims.length,s.length,n,u,d,-1e5,g,y,w,b)}},Us=(e,t)=>{an(e.inputs),e.compute(zs("MaxPool",e.inputs[0],!1,t))},Vs=e=>{let t=e.storage_order,r=e.dilations,o=Os(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(o.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let n={storageOrder:t,dilations:r,...o,cacheKey:""};return{...n,cacheKey:Yd(n)}},Ws=e=>{let t=e.format;return{format:t,...Bs,cacheKey:t}},Ns=(e,t)=>{an(e.inputs),e.compute(zs("GlobalMaxPool",e.inputs[0],!0,t))}});var Xd,Qd,Gs,Ls=Y(()=>{"use strict";Lt();De();we();Xd=(e,t,r)=>{let o=e===t,n=e<t&&r<0,s=e>t&&r>0;if(o||n||s)throw new Error("Range these inputs\' contents are invalid.")},Qd=(e,t,r,o)=>{let n=Math.abs(Math.ceil((t-e)/r)),s=[n],u=n,d=Xe(o),a=[{type:"uint32",data:u},{type:d,data:e},{type:d,data:r},...q(s)],p=h=>{let g=j("output",o,s.length),y=g.type.value,w=[{name:"outputSize",type:"u32"},{name:"start",type:y},{name:"delta",type:y}];return`\n        ${h.registerUniforms(w).declareVariables(g)}\n        ${h.mainStart()}\n        ${h.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        output[global_idx] = uniforms.start + ${y}(global_idx) * uniforms.delta;\n      }`};return{name:"Range",shaderCache:{hint:`${o}`},getShaderSource:p,getRunData:()=>({outputs:[{dims:s,dataType:o}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:a})}},Gs=e=>{let t=0,r=0,o=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],o=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],o=e.inputs[2].getFloat32Array()[0]),Nt.webgpu.validateInputContent&&Xd(t,r,o),e.compute(Qd(t,r,o,e.inputs[0].dataType),{inputs:[]})}});var Jd,ec,tc,rc,nc,oc,ac,ic,sc,uc,lc,Fs,dc,cc,pc,mc,fc,qs,js,Ks=Y(()=>{"use strict";Se();We();we();Jd=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},ec=(e,t,r)=>{t.every(n=>n>=0&&n<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let o=new Array(r).fill(1);return t.forEach((n,s)=>o[n]=e[s]),o},tc=(e,t,r,o,n,s)=>{let[u,d,a]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],p=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach(h=>s.push(h));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(d>0&&e.length>d&&e[d].dims.length>0){if(e[d].getFloat32Array().forEach(h=>o.push(h)),o.length!==0&&o.length!==p&&r>=18&&o.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");Jd(o,t),t.axes.length>0&&ec(o,t.axes,p).forEach((h,g)=>o[g]=h)}if(a>0&&e.length>a&&(e[a].getBigInt64Array().forEach(h=>n.push(Number(h))),n.length!==p||r>=18&&n.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(o.length!==t.axes.length)throw new Error(\'Resize requires "scales" input size to be of axes rank when axes attributes is specified\');if(n.length!==t.axes.length)throw new Error(\'Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified\')}if(typeof o<"u"&&typeof n<"u"&&o.length>0&&n.length>p)throw new Error("Resize requires only of scales or sizes to be specified")},rc=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: ${t}, lengthResized: u32,\n     lengthOriginal: u32, roiStart: ${t}, roiEnd: ${t}) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / xScale;`;case"pytorch_half_pixel":return`if (lengthResized > 1) {\n                    return (${t}(xResized) + 0.5) / xScale - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / xScale;`;case"align_corners":return`if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n                    // offset-by-one error later in floor().\n                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));\n                    let fract =\n                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);\n                    return whole + fract;\n                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {\n                    return roiStart * ${t}(lengthOriginal - 1) +\n                        (${t}(xResized) * (roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /\n                        ${t}(lengthResized - 1);\n                  } else {\n                    return 0.5 * (roiStart + roiEnd) * ${t}(lengthOriginal - 1);\n                  }`;case"half_pixel_symmetric":return`const outputWidth = xScale * ${t}(lengthResized);\n                  const adjustment = ${t}(lengthResized) / outputWidth;\n                  const center = ${t}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${t}(xResized) + 0.5) / xScale) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / xScale) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",nc=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",oc=(e,t,r)=>{let o=new Array(r).fill(0).concat(new Array(r).fill(1)),n=e.length===0?o:e.slice();return t.length>0?(t.forEach((s,u)=>{o[s]=n[u],o[u+r]=n[t.length+u]}),o):n},ac=(e,t,r,o)=>{let n=[];if(r.length>0)if(o.length>0){if(e.forEach(s=>n.push(s)),Math.max(...o)>e.length)throw new Error("axes is out of bound");o.forEach((s,u)=>n[s]=r[u])}else r.forEach(s=>n.push(s));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");n=e.map((s,u)=>Math.round(s*t[u]))}return n},ic=(e,t,r)=>{let o=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(s=>t[s]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(s=>t[s]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let n=e.slice();return r.axes.length>0?(r.axes.forEach(s=>t[s]=o),r.axes.forEach(s=>n[s]=Math.round(e[s]*t[s]))):(t.fill(o,0,t.length),n.forEach((s,u)=>n[u]=Math.round(s*t[u]))),n},sc=(e,t,r,o,n)=>`\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {\n      var original_indices: array<${e.type.value}, ${r.length}>;\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var output_index = ${e.indicesGet("output_indices","i")};\n        var scale = ${de("uniforms.scales","i",o)};\n        var roi_low = ${de("uniforms.roi","i",n)};\n        var roi_hi = ${de("uniforms.roi",`i + ${t.length}`,n)};\n        if (scale == 1.0) {\n          original_indices[i] = ${e.type.value}(output_index);\n        } else {\n          var input_shape_i = ${de("uniforms.input_shape","i",t.length)};\n          var output_shape_i = ${de("uniforms.output_shape","i",r.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`,uc=(e,t,r,o,n,s,u)=>`\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n      var input_indices: ${e.type.indices};\n      for (var i:u32 = 0; i < ${o.length}; i++) {\n        var output_index = ${t.indicesGet("output_indices","i")};\n        var input_index: u32;\n        var scale = ${de("uniforms.scales","i",n)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${de("uniforms.roi","i",s)};\n          var roi_hi = ${de("uniforms.roi",`i + ${r.length}`,s)};\n          var input_shape_i = ${de("uniforms.input_shape","i",r.length)};\n          var output_shape_i = ${de("uniforms.output_shape","i",o.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${u} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${e.indicesSet("input_indices","i"," input_index")}\n      }\n      return input_indices;\n    }`,lc=(e,t)=>`\n    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var input_index = ${e.indicesGet("input_indices","i")};\n        if (input_index < 0 || input_index >= ${de("uniforms.input_shape","i",t.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`,Fs=(e,t,r,o)=>e.rank>o?`\n    ${e.indicesSet("input_indices",t,"channel")};\n    ${e.indicesSet("input_indices",r,"batch")};\n`:"",dc=(e,t,r,o,n)=>{let[u,d,a,p]=r.length===2?[-1,0,1,-1]:[0,2,3,1],h=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${h} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",d,`max(0, min(row, ${r[d]} - 1))`)};\n      ${e.indicesSet("input_indices",a,`max(0, min(col, ${r[a]} - 1))`)};\n      ${Fs(e,p,u,2)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${h} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${h} = originalIndices[${d}];\n      var col:${h} = originalIndices[${a}];\n      ${o?`if (row < 0 || row > (${r[d]} - 1) || col < 0 || col > (${r[a]} - 1)) {\n        return ${n};\n      }`:""};\n      row = max(0, min(row, ${r[d]} - 1));\n      col = max(0, min(col, ${r[a]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${r.length>2?`u32(originalIndices[${p}])`:"0"};\n      var batch: u32 =  ${r.length>2?`u32(originalIndices[${u}])`:"0"};\n      var x11: ${h} = getInputValue(batch, channel, row1, col1);\n      var x12: ${h} = getInputValue(batch, channel, row1, col2);\n      var x21: ${h} = getInputValue(batch, channel, row2, col1);\n      var x22: ${h} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${h} = abs(row - ${h}(row1));\n      var dx2: ${h} = abs(${h}(row2) - row);\n      var dy1: ${h} = abs(col - ${h}(col1));\n      var dy2: ${h} = abs(${h}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},cc=(e,t,r,o,n,s,u,d,a,p)=>{let h=r.length===2,g=!0,[y,w]=h?[0,1]:g?[2,3]:[1,2],b=e.type.value,_=I=>{let S=I===y?"row":"col";return`\n      fn ${S}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${b} {\n        var output_index = ${t.indicesGet("output_indices",I)};\n        var originalIdx: ${b} = getOriginalCoordinateFromResizedCoordinate(output_index, ${n[I]},\n        ${o[I]}, ${r[I]}, ${s[I]}, ${s[I]} + ${r.length});\n        var fractOriginalIdx: ${b} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${d} && (originalIdx < 0 || originalIdx > (${r[I]} - 1))) {\n          return ${a};\n        }\n        var data: array<${b}, 4> = array<${b}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${S}: ${b} = originalIdx + ${b}(i);\n          if (${S} < 0 || ${S} >= ${r[I]}) {\n            ${(()=>p?`coefs[i + 1] = 0.0;\n                        continue;`:d?`return ${a};`:`${S} = max(0, min(${S}, ${r[I]} - 1));`)()};\n          }\n        var input_indices_copy: ${e.type.indices} = input_indices;\n          ${e.indicesSet("input_indices_copy",I,`u32(${S})`)};\n          data[i + 1] = ${I===y?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${_(y)};\n    ${_(w)};\n  fn getCubicInterpolationCoefs(s: ${b}) -> array<${b}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${b}, 4> = array<${b}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${b} = 1.0 - absS;\n    var twoMinusAbsS: ${b} = 2.0 - absS;\n    var onePlusAbsS: ${b} = 1.0 + absS;\n    coeffs[0] = ((${u} * onePlusAbsS - 5 * ${u}) * onePlusAbsS + 8 * ${u}) * onePlusAbsS - 4 * ${u};\n    coeffs[1] = ((${u} + 2) * absS - (${u} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${u} + 2) * oneMinusAbsS - (${u} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${u} * twoMinusAbsS - 5 * ${u}) * twoMinusAbsS + 8 * ${u}) * twoMinusAbsS - 4 * ${u};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${b}, 4>, coefs: array<${b}, 4>) -> ${b} {\n    var coefsSum: ${b} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${b} {\n    var input_indices: ${e.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `},pc=(e,t,r,o,n)=>{let[u,d,a,p,h]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],g=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${g} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",d,`max(0, min(depth, ${r[d]} - 1))`)};\n      ${e.indicesSet("input_indices",a,`max(0, min(height, ${r[a]} - 1))`)};\n      ${e.indicesSet("input_indices",p,`max(0, min(width, ${r[p]} - 1))`)};\n      ${Fs(e,h,u,3)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${g} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${g} = originalIndices[${d}];\n      var height:${g} = originalIndices[${a}];\n      var width:${g} = originalIndices[${p}];\n      ${o?`if (depth < 0 || depth > (${r[d]} - 1) || height < 0 || height > (${r[a]} - 1) || width < 0 || (width > ${r[p]} - 1)) {\n      return ${n};\n        }`:""};\n\n    depth = max(0, min(depth, ${r[d]} - 1));\n      height = max(0, min(height, ${r[a]} - 1));\n      width = max(0, min(width, ${r[p]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${r.length>3?`u32(originalIndices[${h}])`:"0"};\n      var batch: u32 =  ${r.length>3?`u32(originalIndices[${u}])`:"0"};\n\n      var x111: ${g} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${g} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${g} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${g} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${g} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${g} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${g} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${g} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${g} = abs(depth - ${g}(depth1));\n      var dx2: ${g} = abs(${g}(depth2) - depth);\n      var dy1: ${g} = abs(height - ${g}(height1));\n      var dy2: ${g} = abs(${g}(height2) - height);\n      var dz1: ${g} = abs(width - ${g}(width1));\n      var dz2: ${g} = abs(${g}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`},mc=(e,t,r,o,n,s)=>{let u=e.dims,d=oc(s,t.axes,u.length),a=ac(u,o,n,t.axes),p=o.slice();o.length===0&&(p=u.map((x,O)=>x===0?1:a[O]/x),t.keepAspectRatioPolicy!=="stretch"&&(a=ic(u,p,t)));let h=j("output",e.dataType,a.length),g=z("input",e.dataType,u.length),y=U.size(a),w=u.length===a.length&&u.every((x,O)=>x===a[O]),b=t.coordinateTransformMode==="tf_crop_and_resize",_=t.extrapolationValue,I=g.type.value,S=x=>`\n      ${w?"":`\n      ${rc(t.coordinateTransformMode,I)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${lc(g,u)};\n              ${nc(t.nearestMode,r,I)};\n              ${uc(g,h,u,a,p.length,d.length,b)};\n              `;case"linear":return`\n              ${sc(h,u,a,p.length,d.length)};\n              ${(()=>{if(u.length===2||u.length===4)return`${dc(g,h,u,b,_)}`;if(u.length===3||u.length===5)return`${pc(g,h,u,b,_)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};\n            `;case"cubic":return`\n            ${(()=>{if(u.length===2||u.length===4)return`${cc(g,h,u,a,p,d,t.cubicCoeffA,b,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${x.registerUniform("output_size","u32").registerUniform("scales","f32",p.length).registerUniform("roi","f32",d.length).declareVariables(g,h)}\n      ${x.mainStart()}\n        ${x.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n        ${w?"output[global_idx] = input[global_idx];":`\n        let output_indices = ${h.offsetToIndices("global_idx")};\n        var input_indices: ${g.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${g.getByIndices("input_indices")};\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return`output[global_idx] = ${u.length===2||u.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n`}\n      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${p.length>0?p:""}|${n.length>0?n:""}|${d.length>0?d:""}|${w}|${u}`,inputDependencies:["rank"]},getShaderSource:S,getRunData:()=>({outputs:[{dims:a,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(y/64)},programUniforms:[{type:"uint32",data:y},{type:"float32",data:p},{type:"float32",data:d},...q(u),...q(a)]})}},fc=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},qs=(e,t)=>{let r=[],o=[],n=[],s=fc(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");tc(e.inputs,t,s,r,o,n),e.compute(mc(e.inputs[0],t,s,r,o,n),{inputs:[0]})},js=e=>{let t=e.antialias,r=e.axes,o=e.coordinateTransformMode,n=e.cubicCoeffA,s=e.excludeOutside!==0,u=e.extrapolationValue,d=e.keepAspectRatioPolicy,a=e.mode,p=e.nearestMode===""?"simple":e.nearestMode;return ge({antialias:t,axes:r,coordinateTransformMode:o,cubicCoeffA:n,excludeOutside:s,extrapolationValue:u,keepAspectRatioPolicy:d,mode:a,nearestMode:p})}});var hc,gc,Ys,Zs,Xs=Y(()=>{"use strict";De();Se();We();we();hc=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],o=e[2];if(t.dataType!==r.dataType||t.dataType!==o.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let n=t.dims[t.dims.length-1],s=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==n)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==s)throw new Error("Skip must have the same sequence length as input");if(o.dims.length!==1)throw new Error("Gamma must be 1D");if(o.dims[o.dims.length-1]!==n)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let u=e[3];if(u.dims.length!==1)throw new Error("Beta must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let u=e[4];if(u.dims.length!==1)throw new Error("Bias must be 1D");if(u.dims[u.dims.length-1]!==n)throw new Error("Bias must have the same hidden size as input")}},gc=(e,t,r,o)=>{let n=e[0].dims,s=U.size(n),u=n,d=s,a=n.slice(-1)[0],p=o?n.slice(0,-1).concat(1):[],h=e.length>3,g=e.length>4,y=o&&r>1,w=o&&r>2,b=r>3,_=Ne(a),I=[z("x",e[0].dataType,e[0].dims,_),z("skip",e[1].dataType,e[1].dims,_),z("gamma",e[2].dataType,e[2].dims,_)];h&&I.push(z("beta",e[3].dataType,e[3].dims,_)),g&&I.push(z("bias",e[4].dataType,e[4].dims,_)),I.push(j("output",e[0].dataType,u,_)),y&&I.push(j("meanOutput",1,p)),w&&I.push(j("invStdOutput",1,p)),b&&I.push(j("inputSkipBiasSum",e[0].dataType,u,_));let S=Ve(e[0].dataType),x=T=>`\n      const hiddenSize: f32 = ${a};\n      const hiddenSizeVectorized: u32 = ${a/_};\n      const epsilon: f32 = ${t.epsilon};\n\n      ${T.declareVariables(...I)}\n\n      ${T.mainStart()}\n        ${T.guardAgainstOutOfBoundsWorkgroupSizes(d/a)}\n        let offset = global_idx * hiddenSizeVectorized;\n        var sum = ${je("f32",_)};\n        var squareSum = ${je("f32",_)};\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          let skipValue = skip[offset + i];\n          let biasValue = ${g?"bias[i]":"0.0"};\n          let inputValue = x[offset + i];\n          let value = inputValue + skipValue + biasValue;\n          ${b?"inputSkipBiasSum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32Value = ${rt(S,_,"value")};\n          sum += f32Value;\n          squareSum += f32Value * f32Value;\n        }\n        let mean = ${Qe("sum",_)} / hiddenSize;\n        let variance = sqrt(${Qe("squareSum",_)} / hiddenSize - mean * mean + epsilon);\n        ${y?"meanOutput[global_idx] = mean;":""}\n        ${w?"invStdOutput[global_idx] = 1.0 / variance;":""}\n        for (var i: u32 = 0; i < hiddenSizeVectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${S}(mean)) / ${S}(variance) * gamma[i]\n           + ${h?"beta[i]":"0.0"};\n        }\n      }`,O=[{dims:u,dataType:e[0].dataType}];return r>1&&O.push({dims:p,dataType:1}),r>2&&O.push({dims:p,dataType:1}),r>3&&O.push({dims:n,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:t.cacheKey},getShaderSource:x,getRunData:()=>({outputs:O,dispatchGroup:{x:Math.ceil(d/a/64)}})}},Ys=(e,t)=>{hc(e.inputs);let o=[0];e.outputCount>1&&o.push(-3),e.outputCount>2&&o.push(-3),e.outputCount>3&&o.push(3),e.compute(gc(e.inputs,t,e.outputCount,!1),{outputs:o})},Zs=e=>{let t=e.epsilon;return ge({epsilon:t})}});var yc,sn,bc,Qs,wc,vc,Js,eu,tu=Y(()=>{"use strict";De();Se();We();we();yc=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,o)=>{if(e[o+1].dataType!==6&&e[o+1].dataType!==7)throw new Error(`Input ${o} must be an array of int32 or int64`)})},sn=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(o=>r.push(Number(o)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(o=>r.push(Number(o)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},bc=(e,t)=>{if(e.length>1){let r=sn(e,1),o=sn(e,2),n=sn(e,3);return n.length===0&&(n=[...Array(e[0].dims.length).keys()]),ge({starts:r,ends:o,axes:n})}else return t},Qs=(e,t,r,o,n)=>{let s=e;return e<0&&(s+=r[o[t]]),n[t]<0?Math.max(0,Math.min(s,r[o[t]]-1)):Math.max(0,Math.min(s,r[o[t]]))},wc=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n          var input_indices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${r.length}; i >= 0; i--) {\n            let input_shape_i = ${de("uniforms.input_shape","i",r.length)};\n            let steps_i = ${de("uniforms.steps","i",r.length)};\n            let signs_i = ${de("uniforms.signs","i",r.length)};\n            let starts_i = ${de("uniforms.starts","i",r.length)};\n            var output_index = ${t.indicesGet("output_indices","i")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${e.indicesSet("input_indices","i","input_index")};\n          }\n          return input_indices;\n      }`,vc=(e,t)=>{let r=e[0].dims,o=U.size(r),n=t.axes.length>0?U.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],s=sn(e,4);s.forEach(S=>S!==0||(()=>{throw new Error("step cannot be 0")})),s.length===0&&(s=Array(n.length).fill(1));let u=t.starts.map((S,x)=>Qs(S,x,r,n,s)),d=t.ends.map((S,x)=>Qs(S,x,r,n,s));if(n.length!==u.length||n.length!==d.length)throw new Error("start, ends and axes should have the same number of elements");if(n.length!==r.length)for(let S=0;S<r.length;++S)n.includes(S)||(u.splice(S,0,0),d.splice(S,0,r[S]),s.splice(S,0,1));let a=s.map(S=>Math.sign(S));s.forEach((S,x,O)=>{if(S<0){let T=(d[x]-u[x])/S,M=u[x],A=M+T*s[x];u[x]=A,d[x]=M,O[x]=-S}});let p=r.slice(0);n.forEach((S,x)=>{p[S]=Math.ceil((d[S]-u[S])/s[S])});let h={dims:p,dataType:e[0].dataType},g=j("output",e[0].dataType,p.length),y=z("input",e[0].dataType,e[0].dims.length),w=U.size(p),b=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:u.length},{name:"signs",type:"i32",length:a.length},{name:"steps",type:"u32",length:s.length}],_=[{type:"uint32",data:w},{type:"uint32",data:u},{type:"int32",data:a},{type:"uint32",data:s},...q(e[0].dims),...q(p)],I=S=>`\n      ${S.registerUniforms(b).declareVariables(y,g)}\n        ${wc(y,g,r)}\n        ${S.mainStart()}\n          ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let output_indices = ${g.offsetToIndices("global_idx")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${g.setByOffset("global_idx",y.getByIndices("input_indices"))}\n      }`;return{name:"Slice",shaderCache:{hint:`${a.length}_${u.length}_${s.length}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[h],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:_})}},Js=(e,t)=>{yc(e.inputs,t);let r=bc(e.inputs,t);e.compute(vc(e.inputs,r),{inputs:[0]})},eu=e=>{let t=e.starts,r=e.ends,o=e.axes;return ge({starts:t,ends:r,axes:o})}});var $c,Sc,ru,nu,ou=Y(()=>{"use strict";Se();We();we();$c=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Sc=(e,t)=>{let r=e.dims,o=U.size(r),n=64,s=t.axis;if(s<0&&(s=r.length+s),s<r.length-1)throw new Error("softmax only supports last axis for now.");let u=r[s],d=o/u,a=Ne(u),p=u/a,h=(I,S)=>S===4?`max(max(${I}.x, ${I}.y), max(${I}.z, ${I}.w))`:S===2?`max(${I}.x, ${I}.y)`:S===3?`max(max(${I}.x, ${I}.y), ${I}.z)`:I,g=z("x",e.dataType,e.dims,a),y=j("result",e.dataType,e.dims,a),w=g.type.value,b=Ve(e.dataType)==="f32"?`var threadMax = ${w}(-3.402823e+38f);`:`var threadMax = ${w}(-65504.0h);`,_=I=>`\n      var<workgroup> rowMaxShared : ${w};\n      var<workgroup> rowSumShared : ${w};\n      var<workgroup> threadShared : array<${w}, ${n}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${w} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${w}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${I.registerUniform("packedCols","i32").declareVariables(g,y)}\n      ${I.mainStart()}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = ${n};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${b}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${w}(${h("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${w}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${w}(${Qe("threadShared[0]",a)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;return{name:"Softmax",shaderCache:{hint:`${a}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:d},programUniforms:[{type:"uint32",data:p}]}),getShaderSource:_}},ru=(e,t)=>{$c(e.inputs),e.compute(Sc(e.inputs[0],t))},nu=e=>ge({axis:e.axis})});var xc,_c,Cc,Ic,Ac,au,iu,su=Y(()=>{"use strict";Se();We();we();xc=e=>{if(!e||e.length<1)throw new Error("too few inputs")},_c=(e,t)=>{let r=[],o=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),o=r.length),ge({numOutputs:o,axis:t.axis,splitSizes:r})},Cc=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < ${de("uniforms.size_in_split_axis","i",e)}) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,Ic=e=>{let t=e.length,r=[];for(let o=0;o<t;++o){let n=e[o].setByIndices("indices","input[global_idx]");t===1?r.push(n):o===0?r.push(`if (output_number == ${o}u) { ${n} }`):o===t-1?r.push(`else { ${n} }`):r.push(`else if (output_number == ${o}) { ${n} }`)}return`\n      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${r.join(`\n`)}\n      }`},Ac=(e,t)=>{let r=e[0].dims,o=U.size(r),n=e[0].dataType,s=U.normalizeAxis(t.axis,r.length),u=new Array(t.numOutputs),d=z("input",n,r),a=new Array(t.numOutputs),p=[],h=[],g=0,y=[{type:"uint32",data:o}];for(let b=0;b<t.numOutputs;b++){g+=t.splitSizes[b],a[b]=g;let _=r.slice();_[t.axis]=t.splitSizes[b],h.push(_),u[b]=j(`output${b}`,n,_),p.push({dims:h[b],dataType:e[0].dataType})}y.push({type:"uint32",data:a}),y.push(...q(r)),h.forEach(b=>y.push(...q(b)));let w=b=>`\n  ${b.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",a.length).declareVariables(d,...u)}\n  ${Cc(a.length)}\n  ${Ic(u)}\n\n  ${b.mainStart()}\n    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}\n\n    var indices = ${d.offsetToIndices("global_idx")};\n    var index = ${d.indicesGet("indices",s)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${de("uniforms.size_in_split_axis","output_number - 1u",a.length)};\n      ${d.indicesSet("indices",s,"index")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:w,getRunData:()=>({outputs:p,dispatchGroup:{x:Math.ceil(o/64)},programUniforms:y})}},au=(e,t)=>{xc(e.inputs);let r=e.inputs.length===1?t:_c(e.inputs,t);e.compute(Ac(e.inputs,r),{inputs:[0]})},iu=e=>{let t=e.axis,r=e.splitSizes,o=e.numOutputs<0?r.length:e.numOutputs;if(o!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return ge({axis:t,numOutputs:o,splitSizes:r})}});var uu,Tc,Ec,Oc,lu,du=Y(()=>{"use strict";De();Se();we();uu=e=>Array.from(e.getBigInt64Array(),Number),Tc=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(uu(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Ec=(e,t)=>{let r=[];for(let o=0;o<e.length;++o)r.push(e[o]*t[o]);return r},Oc=e=>{let t=e[0].dims,r=uu(e[1]),o=Ec(t,r),n=U.size(o),s=e[0].dataType,u=z("input",s,t.length),d=j("output",s,o.length),a=p=>`\n      const inputShape = ${u.indices(...t)};\n      ${p.registerUniform("output_size","u32").declareVariables(u,d)}\n      ${p.mainStart()}\n      ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let output_indices = ${d.offsetToIndices("global_idx")};\n      var input_indices: ${u.type.indices};\n      for (var i = 0; i < ${t.length}; i++) {\n        let input_dim_i = ${u.indicesGet("uniforms.input_shape","i")};\n        let input_dim_value = ${d.indicesGet("output_indices","i")}  % input_dim_i;\n\n        ${u.indicesSet("input_indices","i","input_dim_value")}\n      }\n      ${d.setByOffset("global_idx",u.getByIndices("input_indices"))}\n    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:[{type:"uint32",data:n},...q(e[0].dims),...q(o)]}),getShaderSource:a}},lu=e=>{Tc(e.inputs),e.compute(Oc(e.inputs),{inputs:[0]})}});var Pc,kc,cu,pu=Y(()=>{"use strict";De();Se();we();Pc=(e,t,r,o,n)=>{let s=j("output_data",n,r.length,4),u=z("a_data",t[1].dataType,t[1].dims.length,4),d=z("b_data",t[2].dataType,t[2].dims.length,4),a=z("c_data",t[0].dataType,t[0].dims.length,4),p,h=(g,y,w)=>`select(${y}, ${g}, ${w})`;if(!o)p=s.setByOffset("global_idx",h(u.getByOffset("global_idx"),d.getByOffset("global_idx"),a.getByOffset("global_idx")));else{let g=(y,w,b="")=>{let _=`a_data[index_a${w}][component_a${w}]`,I=`b_data[index_b${w}][component_b${w}]`,S=`bool(c_data[index_c${w}] & ${4278190080>>>(3-w)*8}u)`;return`\n            let output_indices${w} = ${s.offsetToIndices(`global_idx * 4u + ${w}u`)};\n            let offset_a${w} = ${u.broadcastedIndicesToOffset(`output_indices${w}`,s)};\n            let offset_b${w} = ${d.broadcastedIndicesToOffset(`output_indices${w}`,s)};\n            let offset_c${w} = ${a.broadcastedIndicesToOffset(`output_indices${w}`,s)};\n            let index_a${w} = offset_a${w} / 4u;\n            let index_b${w} = offset_b${w} / 4u;\n            let index_c${w} = offset_c${w} / 4u;\n            let component_a${w} = offset_a${w} % 4u;\n            let component_b${w} = offset_b${w} % 4u;\n            ${y}[${w}] = ${b}(${h(_,I,S)});\n          `};n===9?p=`\n            var data = vec4<u32>(0);\n            ${g("data",0,"u32")}\n            ${g("data",1,"u32")}\n            ${g("data",2,"u32")}\n            ${g("data",3,"u32")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:p=`\n            ${g("output_data[global_idx]",0)}\n            ${g("output_data[global_idx]",1)}\n            ${g("output_data[global_idx]",2)}\n            ${g("output_data[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(a,u,d,s)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${p}\n      }`},kc=e=>{let t=e[1].dims,r=e[2].dims,o=e[0].dims,n=e[1].dataType,s=!(U.areEqual(t,r)&&U.areEqual(r,o)),u=t,d=U.size(t),a=Math.ceil(d/4);if(s){let p=st.calcShape(st.calcShape(t,r,!1),o,!1);if(!p)throw new Error("Can\'t perform where op on the given tensors");u=p,d=U.size(u)}return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:p=>Pc(p,e,u,s,n),getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(d/64/4)},programUniforms:[{type:"uint32",data:a},...q(o),...q(t),...q(r),...q(u)]})}},cu=e=>{e.compute(kc(e.inputs))}});var mu,fu=Y(()=>{"use strict";za();Un();Wa();Ha();$i();ki();Di();Gn();Yi();Qi();ns();is();ls();ps();hs();ys();ws();Fn();xs();Cs();Hs();Ls();Kr();Ks();Xs();tu();ou();su();du();qt();Vn();pu();mu=new Map([["Abs",[Ga]],["Acos",[La]],["Acosh",[Fa]],["Add",[Si]],["ArgMax",[Ma,zn]],["ArgMin",[Da,zn]],["Asin",[qa]],["Asinh",[ja]],["Atan",[Ka]],["Atanh",[Ya]],["Attention",[Ua]],["AveragePool",[Rs,ks]],["BatchNormalization",[Va]],["BiasAdd",[Na]],["BiasSplitGelu",[vi]],["Cast",[Xa,Za]],["Ceil",[Ja]],["Clip",[Qa]],["Concat",[Ri,Bi]],["Conv",[jn,qn]],["ConvTranspose",[Ki,ji]],["Cos",[ei]],["Cosh",[ti]],["CumSum",[Zi,Xi]],["Div",[xi]],["Einsum",[ts,rs]],["Elu",[ri,Xr]],["Equal",[_i]],["Erf",[ni]],["Exp",[oi]],["Expand",[as]],["Floor",[ai]],["FusedConv",[jn,qn]],["Gather",[us,ss]],["GatherElements",[cs,ds]],["Gelu",[ii]],["Gemm",[fs,ms]],["GlobalAveragePool",[Ms,Ds]],["GlobalMaxPool",[Ns,Ws]],["Greater",[Ti]],["GreaterOrEqual",[Oi]],["InstanceNormalization",[gs]],["LayerNormalization",[bs]],["LeakyRelu",[si,Xr]],["Less",[Ei]],["LessOrEqual",[Pi]],["Log",[wi]],["MatMul",[Wi]],["MaxPool",[Us,Vs]],["Mul",[Ci]],["MultiHeadAttention",[Ss,$s]],["Neg",[li]],["Not",[ui]],["Pad",[_s]],["Pow",[Ii]],["Range",[Gs]],["Reciprocal",[di]],["ReduceMin",[Ea]],["ReduceMean",[_a]],["ReduceMax",[Ta]],["ReduceSum",[Pa]],["ReduceProd",[Oa]],["ReduceL1",[Ca]],["ReduceL2",[Ia]],["ReduceLogSum",[Ra]],["ReduceLogSumExp",[Aa]],["ReduceSumSquare",[ka]],["Relu",[ci]],["Resize",[qs,js]],["Sigmoid",[pi]],["Sin",[mi]],["Sinh",[fi]],["Slice",[Js,eu]],["SkipLayerNormalization",[Ys,Zs]],["Split",[au,iu]],["Sqrt",[hi]],["Softmax",[ru,nu]],["Sub",[Ai]],["Tan",[gi]],["Tanh",[yi]],["ThresholdedRelu",[bi,Xr]],["Tile",[lu]],["Transpose",[ca,pa]],["Where",[cu]]])});var un,hu=Y(()=>{"use strict";Lt();De();St();we();un=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,o,n,s,u,d){Ht(t.programInfo.name);let a=this.backend.device,p=this.backend.getComputePassEncoder();p.setPipeline(t.computePipeline);let h=[];for(let y of n)h.push({binding:h.length,resource:{buffer:y.buffer}});for(let y of s)h.push({binding:h.length,resource:{buffer:y.buffer}});d&&h.push({binding:h.length,resource:d});let g=a.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:h,label:t.programInfo.name});if(p.setBindGroup(0,g),p.dispatchWorkgroups(...u),this.backend.pendingDispatchNumber++,this.backend.isQueryEnabled()){typeof this.backend.queryData>"u"&&(this.backend.queryData=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));let y=this.backend.gpuDataManager.create(this.backend.querySetCount*8,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.querySet,0,2,this.backend.queryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.queryData.buffer,0,y.buffer,0,this.backend.querySetCount*8),this.backend.flush();let w=this.backend.currentKernelId,b=this.backend.kernels.get(w);y.buffer.mapAsync(GPUMapMode.READ).then(()=>{let _=new BigUint64Array(y.buffer.getMappedRange()),[I,S]=_,[x,O]=b;y.buffer.unmap(),typeof this.backend.queryTimeBase>"u"&&(this.backend.queryTimeBase=I);let T=Number(I-this.backend.queryTimeBase),M=Number(S-this.backend.queryTimeBase);if(!Number.isSafeInteger(T)||!Number.isSafeInteger(M))throw new RangeError("incorrect timestamp range");if(this.backend.gpuDataManager.release(y.id),this.backend.env.webgpu.profiling?.ondata)this.backend.env.webgpu.profiling.ondata({version:1,inputsMetadata:r.map(A=>({dims:A.dims,dataType:Xe(A.dataType)})),outputsMetadata:o.map(A=>({dims:A.dims,dataType:Xe(A.dataType)})),kernelId:w,kernelType:x,kernelName:O,startTime:T,endTime:M});else{let A="";r.forEach((V,G)=>{A+=`input[${G}]: [${V.dims}] | ${Xe(V.dataType)}, `});let W="";o.forEach((V,G)=>{W+=`output[${G}]: [${V.dims}] | ${Xe(V.dataType)}, `}),console.log(`[profiling] kernel "${w}|${O}|${t.programInfo.name}" ${A}${W}execution time: ${M-T} ns`)}})}this.backend.pendingDispatchNumber>=16&&this.backend.flush(),Gt(t.programInfo.name)}dispose(){}build(t,r){Ht(t.name);let o=this.backend.device,n=[];o.features.has("shader-f16")&&n.push("enable f16;");let s=la(r),u=t.getShaderSource(s),d=`${n.join(`\n`)}\n${s.additionalImplementations}\n${u}`,a=o.createShaderModule({code:d,label:t.name});Pe("verbose",()=>`[WebGPU] ${t.name} shader code: ${d}`);let p=o.createComputePipeline({compute:{module:a,entryPoint:"main"},layout:"auto",label:t.name});return Gt(t.name),{programInfo:t,computePipeline:p}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,o=typeof t=="number"?1:t.y||1,n=typeof t=="number"?1:t.z||1,s=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=s&&o<=s&&n<=s)return[r,o,n];let u=r*o*n,d=Math.ceil(Math.sqrt(u));if(d>s){if(d=Math.ceil(Math.cbrt(u)),d>s)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[d,d,d]}else return[d,d,1]}}});var Rc,Bc,ln,gu=Y(()=>{"use strict";Lt();St();oa();ua();fu();hu();Rc=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let o=0;o<e.length;++o){let n=e[o].dataType;switch(t[o]){case"none":{r.push("");break}case"type":{r.push(`${n}`);break}case"rank":{let s=e[o].dims.length;r.push(`${n};${s}`);break}case"dims":{let s=e[o].dims.join(",");r.push(`${n};${s}`);break}default:throw new Error(`unsupported input dependency: ${t[o]}`)}}return r.join("|")},Bc=(e,t,r)=>{let o=e.name;return e.shaderCache?.hint&&(o+="["+e.shaderCache.hint+"]"),o+=":"+r+`:${Rc(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,o},ln=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.pendingDispatchNumber=0;this.querySetCount=2;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,r){this.env=t;let o=[],n={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:o};r.features.has("timestamp-query")&&o.push("timestamp-query"),r.features.has("shader-f16")&&o.push("shader-f16"),this.device=await r.requestDevice(n),this.gpuDataManager=sa(this),this.programManager=new un(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,ra(t.logLevel,!!t.debug),this.device.onuncapturederror=s=>{s.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${s.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device})}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.isQueryEnabled()&&(typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.querySetCount})),t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:0,endOfPassWriteIndex:1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){this.commandEncoder&&(this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0)}isQueryEnabled(){return this.device.features.has("timestamp-query")&&(this.env.webgpu.profiling?.mode==="default"||!this.env.webgpu.profiling?.mode&&this.env.webgpu.profilingMode==="default")}run(t,r,o,n,s){Ht(t.name);let u=[];for(let x=0;x<r.length;++x){let O=this.gpuDataManager.get(r[x].data);if(!O)throw new Error(`no GPU data for input: ${r[x].data}`);u[x]=O}let{outputs:d,dispatchGroup:a,programUniforms:p}=t.getRunData(r),h=o.length===0?d.map((x,O)=>O):o;if(h.length!==d.length)throw new Error(`Output size ${h.length} must be equal to ${d.length}.`);let g=[],y=[];for(let x=0;x<d.length;++x){if(!Number.isInteger(h[x])||h[x]<-3||h[x]>=d.length)throw new Error(`Invalid output index: ${h[x]}`);if(h[x]===-3)continue;let O=h[x]===-1,T=h[x]===-2,M=O||T?s(d[x].dataType,d[x].dims):n(h[x],d[x].dataType,d[x].dims),A=this.gpuDataManager.get(M.data);if(!A)throw new Error(`no GPU data for output: ${M.data}`);if(O&&this.temporaryData.push(A),T){let W=this.kernelPersistentData.get(this.currentKernelId);W||(W=[],this.kernelPersistentData.set(this.currentKernelId,W)),W.push(A)}g.push(M),y.push(A)}let w;if(p){let x=0,O=[];p.forEach(W=>{let V=typeof W.data=="number"?[W.data]:W.data;if(V.length===0)return;let G=V.length<=2?V.length*4:16;x=Math.ceil(x/G)*G,O.push(x),x+=V.length>4?Math.ceil(V.length/4)*16:V.length*4});let T=16;x=Math.ceil(x/T)*T;let M=new ArrayBuffer(x);p.forEach((W,V)=>{let G=O[V],J=typeof W.data=="number"?[W.data]:W.data;W.type==="int32"?new Int32Array(M,G,J.length).set(J):W.type==="uint32"?new Uint32Array(M,G,J.length).set(J):new Float32Array(M,G,J.length).set(J)});let A=this.gpuDataManager.create(x,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(A.buffer,0,M,0,x),this.gpuDataManager.release(A.id),w={offset:0,size:x,buffer:A.buffer}}let b=this.programManager.normalizeDispatchGroupSize(a),_=b[1]===1&&b[2]===1,I=Bc(t,r,_),S=this.programManager.getArtifact(I);return S||(S=this.programManager.build(t,b),this.programManager.setArtifact(I,S),Pe("info",()=>`[artifact] key: ${I}, programName: ${t.name}`)),Pe("info",()=>`[ProgramManager] run "${t.name}" (key=${I}) with ${b[0]}x${b[1]}x${b[2]}`),this.programManager.run(S,r,g,u,y,b,w),Gt(t.name),g}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,o,n){let s=mu.get(t);if(!s)throw new Error(`kernel not implemented: ${t}`);this.kernels.set(r,[t,n,s[0],[s[1],o]])}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let o of r)this.gpuDataManager.release(o.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,o){let n=this.kernels.get(t);if(!n)throw new Error(`kernel not created: ${t}`);let[s,u,d,a]=n;if(this.currentKernelId!==null)throw new Error(`kernel "[${s}] ${u}" is not allowed to be called recursively`);this.currentKernelId=t,a[0]&&(a[1]=a[0](a[1]),a[0]=void 0),Pe("info",()=>`[WebGPU] Start to run kernel "[${s}] ${u}"...`);let p=this.env.debug;this.temporaryData=[];try{return p&&this.device.pushErrorScope("validation"),d(r,a[1]),0}catch(h){return o.push(Promise.resolve(`[WebGPU] Kernel "[${s}] ${u}" failed. ${h}`)),1}finally{p&&o.push(this.device.popErrorScope().then(h=>h?`GPU validation error for kernel "[${s}] ${u}": ${h.message}`:null));for(let h of this.temporaryData)this.gpuDataManager.release(h.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,o,n){let s=this.sessionExternalDataMapping.get(t);s||(s=new Map,this.sessionExternalDataMapping.set(t,s));let u=s.get(r),d=this.gpuDataManager.registerExternalBuffer(o,n,u?.[1]);return s.set(r,[d,o]),d}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(o=>this.gpuDataManager.unregisterExternalBuffer(o[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,o){return async()=>{let n=await On(this,t,r);return na(n.buffer,o)}}}});var yu={};Mr(yu,{init:()=>Dc});var yr,Jn,Dc,bu=Y(()=>{"use strict";De();gu();St();Se();yr=class e{constructor(t,r,o,n){this.module=t;this.dataType=r;this.data=o;this.dims=n}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=U.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=U.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=U.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(U.size(t)!==U.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},Jn=class{constructor(t,r,o){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let n=t.HEAPU32,s=o>>>2;this.opKernelContext=n[s++];let u=n[s++];this.outputCount=n[s++],this.customDataOffset=n[s++],this.customDataSize=n[s++];let d=[];for(let a=0;a<u;a++){let p=n[s++],h=n[s++],g=n[s++],y=[];for(let w=0;w<g;w++)y.push(n[s++]);d.push(new yr(t,p,h,y))}this.inputs=d}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let o=r?.inputs?.map(d=>typeof d=="number"?this.inputs[d]:d)??this.inputs,n=r?.outputs??[],s=(d,a,p)=>new yr(this.module,a,this.output(d,p),p),u=(d,a)=>{let p=pr(d);if(!p)throw new Error(`Unsupported data type: ${d}`);let h=p*U.size(a);return new yr(this.module,d,this.backend.gpuDataManager.create(h).id,a)};return this.backend.run(t,o,n,s,u)}output(t,r){let o=this.module.stackSave();try{let n=this.module.stackAlloc((1+r.length)*4),s=n>>2;this.module.HEAPU32[s++]=r.length;for(let u=0;u<r.length;u++)this.module.HEAPU32[s++]=r[u];return this.module._JsepOutput(this.opKernelContext,t,n)}catch(n){throw new Error(`Failed to generate kernel\'s output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${n}`)}finally{this.module.stackRestore(o)}}},Dc=async(e,t,r)=>{let o=e.jsepInit;if(!o)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");let n=new ln;await n.initialize(t,r),o(n,s=>n.alloc(s),s=>n.free(s),(s,u,d,a=!1)=>{if(a)Pe("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${s}, dst=${u}, size=${d}`),n.memcpy(s,u);else{Pe("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${s}, gpuDataId=${u}, size=${d}`);let p=e.HEAPU8.subarray(s,s+d);n.upload(u,p)}},async(s,u,d)=>{Pe("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${s}, dataOffset=${u}, size=${d}`),await n.download(s,()=>e.HEAPU8.subarray(u,u+d))},(s,u,d)=>n.createKernel(s,u,d,t.debug||n.isQueryEnabled()?e.UTF8ToString(e._JsepGetNodeName(u)):`${u}`),s=>n.releaseKernel(s),(s,u,d,a)=>{Pe("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${d}, kernel=${s}, contextDataOffset=${u}`);let p=new Jn(e,n,u);return n.computeKernel(s,p,a)})}});var Ro;Ro=xo();var Ku=Oo(),xn,_n=!1,zr=!1,ko=!1,Yu=()=>{try{return typeof SharedArrayBuffer>"u"?!1:(typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch{return!1}},Zu=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Xu=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",Bo=async e=>{if(_n)return Promise.resolve();if(zr)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(ko)throw new Error("previous call to \'initializeWebAssembly()\' failed.");zr=!0;let t=e.initTimeout,r=e.numThreads,o=e.simd,n=r>1&&Yu(),s=o&&Zu(),u=e.wasmPaths,d=typeof u=="string"?u:void 0,a=Xu(s,n),p=typeof u=="object"?u[a]:void 0,h=!1,g=[];if(t>0&&g.push(new Promise(y=>{setTimeout(()=>{h=!0,y()},t)})),g.push(new Promise((y,w)=>{let b=n?Ku:Ro,_={locateFile:(I,S)=>{if(n&&I.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Po()],{type:"text/javascript"}));if(I.endsWith(".wasm")){if(p)return p;let x=d??S;return a==="ort-wasm-simd.wasm"?x+"ort-wasm-simd.jsep.wasm":a==="ort-wasm-simd-threaded.wasm"?x+"ort-wasm-simd-threaded.jsep.wasm":x+a}return S+I}};if(n)if(_.numThreads=r,typeof Blob>"u")_.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let I=`var ortWasmThreaded=${b.toString()};`;_.mainScriptUrlOrBlob=new Blob([I],{type:"text/javascript"})}b(_).then(I=>{zr=!1,_n=!0,xn=I,y()},I=>{zr=!1,ko=!0,w(I)})})),await Promise.race(g),h)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Be=()=>{if(_n&&xn)return xn;throw new Error("WebAssembly is not initialized yet.")};var ze=(e,t)=>{let r=Be(),o=r.lengthBytesUTF8(e)+1,n=r._malloc(o);return r.stringToUTF8(e,n,o),t.push(n),n},cr=(e,t,r,o)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([n,s])=>{let u=t?t+n:n;if(typeof s=="object")cr(s,u+".",r,o);else if(typeof s=="string"||typeof s=="number")o(u,s.toString());else if(typeof s=="boolean")o(u,s?"1":"0");else throw new Error(`Can\'t handle extra config type: ${typeof s}`)})},Ee=e=>{let t=Be(),r=t.stackSave();try{let o=t.stackAlloc(8);t._OrtGetLastError(o,o+4);let n=t.HEAP32[o/4],s=t.HEAPU32[o/4+1],u=s?t.UTF8ToString(s):"";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${u}`)}finally{t.stackRestore(r)}};var Do=e=>{let t=Be(),r=0,o=[],n=e||{};try{if(e?.logSeverityLevel===void 0)n.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)n.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(n.terminate=!1);let s=0;return e?.tag!==void 0&&(s=ze(e.tag,o)),r=t._OrtCreateRunOptions(n.logSeverityLevel,n.logVerbosityLevel,!!n.terminate,s),r===0&&Ee("Can\'t create run options."),e?.extra!==void 0&&cr(e.extra,"",new WeakSet,(u,d)=>{let a=ze(u,o),p=ze(d,o);t._OrtAddRunConfigEntry(r,a,p)!==0&&Ee(`Can\'t set a run config entry: ${u} - ${d}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseRunOptions(r),o.forEach(u=>t._free(u)),s}};var Qu=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Ju=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},el=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},tl=(e,t,r)=>{for(let o of t){let n=typeof o=="string"?o:o.name;switch(n){case"xnnpack":n="XNNPACK";break;case"webnn":if(n="WEBNN",typeof o!="string"){let u=o;if(u?.deviceType){let d=ze("deviceType",r),a=ze(u.deviceType,r);Be()._OrtAddSessionConfigEntry(e,d,a)!==0&&Ee(`Can\'t set a session config entry: \'deviceType\' - ${u.deviceType}.`)}if(u?.numThreads){let d=u.numThreads;(typeof d!="number"||!Number.isInteger(d)||d<0)&&(d=0);let a=ze("numThreads",r),p=ze(d.toString(),r);Be()._OrtAddSessionConfigEntry(e,a,p)!==0&&Ee(`Can\'t set a session config entry: \'numThreads\' - ${u.numThreads}.`)}if(u?.powerPreference){let d=ze("powerPreference",r),a=ze(u.powerPreference,r);Be()._OrtAddSessionConfigEntry(e,d,a)!==0&&Ee(`Can\'t set a session config entry: \'powerPreference\' - ${u.powerPreference}.`)}}break;case"webgpu":if(n="JS",typeof o!="string"){let u=o;if(u?.preferredLayout){if(u.preferredLayout!=="NCHW"&&u.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${u.preferredLayout}`);let d=ze("preferredLayout",r),a=ze(u.preferredLayout,r);Be()._OrtAddSessionConfigEntry(e,d,a)!==0&&Ee(`Can\'t set a session config entry: \'preferredLayout\' - ${u.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${n}`)}let s=ze(n,r);Be()._OrtAppendExecutionProvider(e,s)!==0&&Ee(`Can\'t append execution provider: ${n}.`)}},Mo=e=>{let t=Be(),r=0,o=[],n=e||{};el(n);try{let s=Qu(n.graphOptimizationLevel??"all"),u=Ju(n.executionMode??"sequential"),d=typeof n.logId=="string"?ze(n.logId,o):0,a=n.logSeverityLevel??2;if(!Number.isInteger(a)||a<0||a>4)throw new Error(`log serverity level is not valid: ${a}`);let p=n.logVerbosityLevel??0;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log verbosity level is not valid: ${p}`);let h=typeof n.optimizedModelFilePath=="string"?ze(n.optimizedModelFilePath,o):0;if(r=t._OrtCreateSessionOptions(s,!!n.enableCpuMemArena,!!n.enableMemPattern,u,!!n.enableProfiling,0,d,a,p,h),r===0&&Ee("Can\'t create session options."),n.executionProviders&&tl(r,n.executionProviders,o),n.freeDimensionOverrides)for(let[g,y]of Object.entries(n.freeDimensionOverrides)){if(typeof g!="string")throw new Error(`free dimension override name must be a string: ${g}`);if(typeof y!="number"||!Number.isInteger(y)||y<0)throw new Error(`free dimension override value must be a non-negative integer: ${y}`);let w=ze(g,o);t._OrtAddFreeDimensionOverride(r,w,y)!==0&&Ee(`Can\'t set a free dimension override: ${g} - ${y}.`)}return n.extra!==void 0&&cr(n.extra,"",new WeakSet,(g,y)=>{let w=ze(g,o),b=ze(y,o);t._OrtAddSessionConfigEntry(r,w,b)!==0&&Ee(`Can\'t set a session config entry: ${g} - ${y}.`)}),[r,o]}catch(s){throw r!==0&&t._OrtReleaseSessionOptions(r),o.forEach(u=>t._free(u)),s}};De();var Mc=(e,t)=>{Be()._OrtInit(e,t)!==0&&Ee("Can\'t initialize onnxruntime.")},vu=async e=>{Mc(e.wasm.numThreads,mr(e.logLevel))},$u=async(e,t)=>{if(t==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error(\'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.\');if(!e.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");let o=(bu(),Wt(yu)).init;await o(Be(),e,r)}},br=new Map,zc=e=>{let t=Be(),r=t.stackSave();try{let o=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,o,o+4)!==0&&Ee("Can\'t get session input/output count."),[t.HEAP32[o/4],t.HEAP32[o/4+1]]}finally{t.stackRestore(r)}},eo=e=>{let t=Be(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},Su=(e,t)=>{let r,o,n=Be();Array.isArray(e)?[r,o]=e:e.buffer===n.HEAPU8.buffer?[r,o]=[e.byteOffset,e.byteLength]:[r,o]=eo(e);let s=0,u=0,d=0,a=[],p=[],h=[];try{[u,a]=Mo(t),s=n._OrtCreateSession(r,o,u),s===0&&Ee("Can\'t create a session.");let[g,y]=zc(s),w=[],b=[],_=[];for(let S=0;S<g;S++){let x=n._OrtGetInputName(s,S);x===0&&Ee("Can\'t get an input name."),p.push(x),w.push(n.UTF8ToString(x))}for(let S=0;S<y;S++){let x=n._OrtGetOutputName(s,S);x===0&&Ee("Can\'t get an output name."),h.push(x);let O=n.UTF8ToString(x);b.push(O);{let T=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[O]??"cpu";if(T!=="cpu"&&T!=="cpu-pinned"&&T!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${T}.`);_.push(T)}}let I=null;return _.some(S=>S==="gpu-buffer")&&(d=n._OrtCreateBinding(s),d===0&&Ee("Can\'t create IO binding."),I={handle:d,outputPreferredLocations:_,outputPreferredLocationsEncoded:_.map(S=>In(S))}),br.set(s,[s,p,h,I]),[s,w,b]}catch(g){throw p.forEach(y=>n._OrtFree(y)),h.forEach(y=>n._OrtFree(y)),d!==0&&n._OrtReleaseBinding(d),s!==0&&n._OrtReleaseSession(s),g}finally{n._free(r),u!==0&&n._OrtReleaseSessionOptions(u),a.forEach(g=>n._free(g))}},xu=e=>{let t=Be(),r=br.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[o,n,s,u]=r;u&&t._OrtReleaseBinding(u.handle),t.jsepUnregisterBuffers?.(e),n.forEach(d=>t._OrtFree(d)),s.forEach(d=>t._OrtFree(d)),t._OrtReleaseSession(o),br.delete(e)},wu=(e,t,r,o,n)=>{if(!e){t.push(0);return}let s=Be(),u=e[0],d=e[1],a=e[3],p,h;if(u==="string"&&a==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(a==="gpu-buffer"){let w=e[2].gpuBuffer,b=pr(Cn(u));h=d.reduce((_,I)=>_*I,1)*b,p=s.jsepRegisterBuffer(o,n,w,h)}else{let w=e[2];if(Array.isArray(w)){h=4*w.length,p=s._malloc(h),r.push(p);let b=p/4;for(let _=0;_<w.length;_++){if(typeof w[_]!="string")throw new TypeError(`tensor data at index ${_} is not a string`);s.HEAPU32[b++]=ze(w[_],r)}}else h=w.byteLength,p=s._malloc(h),r.push(p),s.HEAPU8.set(new Uint8Array(w.buffer,w.byteOffset,h),p)}let g=s.stackSave(),y=s.stackAlloc(4*d.length);try{let w=y/4;d.forEach(_=>s.HEAP32[w++]=_);let b=s._OrtCreateTensor(Cn(u),p,h,y,d.length,In(a));b===0&&Ee(`Can\'t create tensor for input/output. session=${o}, index=${n}.`),t.push(b)}finally{s.stackRestore(g)}},_u=async(e,t,r,o,n,s)=>{let u=Be(),d=br.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);let[a,p,h,g]=d,y=t.length,w=o.length,b=0,_=[],I=[],S=[],x=[],O=u.stackSave(),T=u.stackAlloc(y*4),M=u.stackAlloc(y*4),A=u.stackAlloc(w*4),W=u.stackAlloc(w*4);try{[b,_]=Do(s);for(let ee=0;ee<y;ee++)wu(r[ee],I,x,e,t[ee]);for(let ee=0;ee<w;ee++)wu(n[ee],S,x,e,y+o[ee]);let V=T/4,G=M/4,J=A/4,B=W/4;for(let ee=0;ee<y;ee++)u.HEAPU32[V++]=I[ee],u.HEAPU32[G++]=p[t[ee]];for(let ee=0;ee<w;ee++)u.HEAPU32[J++]=S[ee],u.HEAPU32[B++]=h[o[ee]];if(g){let{handle:ee,outputPreferredLocations:ve,outputPreferredLocationsEncoded:Z}=g;if(p.length!==y)throw new Error(`input count from feeds (${y}) is expected to be always equal to model\'s input count (${p.length}).`);for(let be=0;be<y;be++){let Ce=t[be];await u._OrtBindInput(ee,p[Ce],I[be])!==0&&Ee(`Can\'t bind input[${be}] for session=${e}.`)}for(let be=0;be<w;be++){let Ce=o[be];n[be]?.[3]?u._OrtBindOutput(ee,h[Ce],S[be],0)!==0&&Ee(`Can\'t bind pre-allocated output[${be}] for session=${e}.`):u._OrtBindOutput(ee,h[Ce],0,Z[Ce])!==0&&Ee(`Can\'t bind output[${be}] to ${ve[be]} for session=${e}.`)}}let K;g?K=await u._OrtRunWithBinding(a,g.handle,w,A,b):K=await u._OrtRun(a,M,T,y,W,w,A,b),K!==0&&Ee("failed to call OrtRun().");let pe=[];for(let ee=0;ee<w;ee++){let ve=u.HEAPU32[A/4+ee];if(ve===S[ee]){pe.push(n[ee]);continue}let Z=u.stackSave(),be=u.stackAlloc(4*4),Ce=!1,fe,ce=0;try{u._OrtGetTensorData(ve,be,be+4,be+8,be+12)!==0&&Ee(`Can\'t access output tensor data on index ${ee}.`);let ke=be/4,He=u.HEAPU32[ke++];ce=u.HEAPU32[ke++];let L=u.HEAPU32[ke++],X=u.HEAPU32[ke++],he=[];for(let Re=0;Re<X;Re++)he.push(u.HEAPU32[L/4+Re]);u._OrtFree(L);let Fe=he.reduce((Re,Ge)=>Re*Ge,1);fe=Xe(He);let Ze=g?.outputPreferredLocations[o[ee]];if(fe==="string"){if(Ze==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Re=[],Ge=ce/4;for(let Ke=0;Ke<Fe;Ke++){let ot=u.HEAPU32[Ge++],Je=Ke===Fe-1?void 0:u.HEAPU32[Ge]-ot;Re.push(u.UTF8ToString(ot,Je))}pe.push([fe,he,Re,"cpu"])}else if(Ze==="gpu-buffer"&&Fe>0){let Re=u.jsepGetBuffer(ce),Ge=pr(He);if(Ge===void 0||!zo(fe))throw new Error(`Unsupported data type: ${fe}`);Ce=!0,pe.push([fe,he,{gpuBuffer:Re,download:u.jsepCreateDownloader(Re,Fe*Ge,fe),dispose:()=>{u._OrtReleaseTensor(ve)}},"gpu-buffer"])}else{let Re=Ur(fe),Ge=new Re(Fe);new Uint8Array(Ge.buffer,Ge.byteOffset,Ge.byteLength).set(u.HEAPU8.subarray(ce,ce+Ge.byteLength)),pe.push([fe,he,Ge,"cpu"])}}finally{u.stackRestore(Z),fe==="string"&&ce&&u._free(ce),Ce||u._OrtReleaseTensor(ve)}}return g&&u._OrtClearBoundOutputs(g.handle),pe}finally{u.stackRestore(O),I.forEach(V=>u._OrtReleaseTensor(V)),S.forEach(V=>u._OrtReleaseTensor(V)),x.forEach(V=>u._free(V)),b!==0&&u._OrtReleaseRunOptions(b),_.forEach(V=>u._free(V))}},Cu=e=>{let t=Be(),r=br.get(e);if(!r)throw new Error("invalid session id");let o=r[0],n=t._OrtEndProfiling(o);n===0&&Ee("Can\'t get an profile file name."),t._OrtFree(n)},Iu=e=>{let t=[];for(let r of e){let o=r[2];!Array.isArray(o)&&"buffer"in o&&t.push(o.buffer)}return t};self.onmessage=e=>{let{type:t,in:r}=e.data;try{switch(t){case"init-wasm":Bo(r.wasm).then(()=>{vu(r).then(()=>{postMessage({type:t})},o=>{postMessage({type:t,err:o})})},o=>{postMessage({type:t,err:o})});break;case"init-ep":{let{epName:o,env:n}=r;$u(n,o).then(()=>{postMessage({type:t})},s=>{postMessage({type:t,err:s})});break}case"copy-from":{let{buffer:o}=r,n=eo(o);postMessage({type:t,out:n});break}case"create":{let{model:o,options:n}=r,s=Su(o,n);postMessage({type:t,out:s});break}case"release":xu(r),postMessage({type:t});break;case"run":{let{sessionId:o,inputIndices:n,inputs:s,outputIndices:u,options:d}=r;_u(o,n,s,u,new Array(u.length).fill(null),d).then(a=>{a.some(p=>p[3]!=="cpu")?postMessage({type:t,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:t,out:a},Iu(a))},a=>{postMessage({type:t,err:a})});break}case"end-profiling":Cu(r),postMessage({type:t});break;default:}}catch(o){postMessage({type:t,err:o})}};})();\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n'});var Gt,st,Or,Tn,On,Ea,Aa,rr,nr,Np,An,yl,bl,wl,vl,$l,_l,xl,Ta=j(()=>{"use strict";ot();hl();Jt();Gt=()=>!!Ee.wasm.proxy&&typeof document<"u",Or=!1,Tn=!1,On=!1,Aa=new Map,rr=(e,t)=>{let r=Aa.get(e);r?r.push(t):Aa.set(e,[t])},nr=()=>{if(Or||!Tn||On||!st)throw new Error("worker not ready")},Np=e=>{switch(e.data.type){case"init-wasm":Or=!1,e.data.err?(On=!0,Ea[1](e.data.err)):(Tn=!0,Ea[0]());break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let t=Aa.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}default:}},An=typeof document<"u"?document?.currentScript?.src:void 0,yl=async()=>{if(!Tn){if(Or)throw new Error("multiple calls to 'initWasm()' detected.");if(On)throw new Error("previous call to 'initWasm()' failed.");if(Or=!0,Gt())return Ee.wasm.wasmPaths===void 0&&An&&An.indexOf("blob:")!==0&&(Ee.wasm.wasmPaths=An.substr(0,+An.lastIndexOf("/")+1)),new Promise((e,t)=>{st?.terminate();let r=URL.createObjectURL(new Blob([gl()],{type:"text/javascript"}));st=new Worker(r,{name:"ort-wasm-proxy-worker"}),st.onerror=n=>t(n),st.onmessage=Np,URL.revokeObjectURL(r),Ea=[e,t];let a={type:"init-wasm",in:Ee};st.postMessage(a)});try{await Mi(Ee.wasm),await ul(Ee),Tn=!0}catch(e){throw On=!0,e}finally{Or=!1}}},bl=async e=>{if(Gt())return nr(),new Promise((t,r)=>{rr("init-ep",[t,r]);let a={type:"init-ep",in:{epName:e,env:Ee}};st.postMessage(a)});await ll(Ee,e)},wl=async e=>Gt()?(nr(),new Promise((t,r)=>{rr("copy-from",[t,r]);let a={type:"copy-from",in:{buffer:e}};st.postMessage(a,[e.buffer])})):Ca(e),vl=async(e,t)=>{if(Gt()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return nr(),new Promise((r,a)=>{rr("create",[r,a]);let n={type:"create",in:{model:e,options:t}},o=[];e instanceof Uint8Array&&o.push(e.buffer),st.postMessage(n,o)})}else return dl(e,t)},$l=async e=>{if(Gt())return nr(),new Promise((t,r)=>{rr("release",[t,r]);let a={type:"release",in:e};st.postMessage(a)});cl(e)},_l=async(e,t,r,a,n,o)=>{if(Gt()){if(r.some(u=>u[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(n.some(u=>u))throw new Error("pre-allocated output tensor is not supported for proxy.");return nr(),new Promise((u,l)=>{rr("run",[u,l]);let i=r,c={type:"run",in:{sessionId:e,inputIndices:t,inputs:i,outputIndices:a,options:o}};st.postMessage(c,fl(i))})}else return pl(e,t,r,a,n,o)},xl=async e=>{if(Gt())return nr(),new Promise((t,r)=>{rr("end-profiling",[t,r]);let a={type:"end-profiling",in:e};st.postMessage(a)});ml(e)}});var Sl,Vp,kn,Il=j(()=>{"use strict";ot();Ta();Be();Sl=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},Vp=e=>{switch(e[3]){case"cpu":return new Ke(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!on(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:a,dispose:n}=e[2];return Ke.fromGpuBuffer(r,{dataType:t,dims:e[1],download:a,dispose:n})}default:throw new Error(`invalid data location: ${e[3]}`)}},kn=class{async fetchModelAndCopyToWasmMemory(t){let r=await fetch(t);if(r.status!==200)throw new Error(`failed to load model: ${t}`);let a=await r.arrayBuffer();return wl(new Uint8Array(a))}async loadModel(t,r){at();let a;typeof t=="string"?typeof process<"u"&&process.versions&&process.versions.node?a=await(void 0)(t):a=await this.fetchModelAndCopyToWasmMemory(t):a=t,[this.sessionId,this.inputNames,this.outputNames]=await vl(a,r),it()}async dispose(){return $l(this.sessionId)}async run(t,r,a){at();let n=[],o=[];Object.entries(t).forEach(h=>{let w=h[0],b=h[1],_=this.inputNames.indexOf(w);if(_===-1)throw new Error(`invalid input '${w}'`);n.push(b),o.push(_)});let u=[],l=[];Object.entries(r).forEach(h=>{let w=h[0],b=h[1],_=this.outputNames.indexOf(w);if(_===-1)throw new Error(`invalid output '${w}'`);u.push(b),l.push(_)});let i=n.map((h,w)=>Sl(h,()=>`input "${this.inputNames[o[w]]}"`)),c=u.map((h,w)=>h?Sl(h,()=>`output "${this.outputNames[l[w]]}"`):null),m=await _l(this.sessionId,o,i,l,c,a),f={};for(let h=0;h<m.length;h++)f[this.outputNames[l[h]]]=u[h]??Vp(m[h]);return it(),f}startProfiling(){}endProfiling(){xl(this.sessionId)}}});var Hp,Rn,Cl=j(()=>{"use strict";ot();Ta();Il();Hp=()=>{if((typeof Ee.wasm.initTimeout!="number"||Ee.wasm.initTimeout<0)&&(Ee.wasm.initTimeout=0),typeof Ee.wasm.simd!="boolean"&&(Ee.wasm.simd=!0),typeof Ee.wasm.proxy!="boolean"&&(Ee.wasm.proxy=!1),typeof Ee.wasm.trace!="boolean"&&(Ee.wasm.trace=!1),typeof Ee.wasm.numThreads!="number"||!Number.isInteger(Ee.wasm.numThreads)||Ee.wasm.numThreads<=0){let e=typeof navigator>"u"?(void 0)().length:navigator.hardwareConcurrency;Ee.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},Rn=class{async init(t){Hp(),await yl(),await bl(t)}async createInferenceSessionHandler(t,r){let a=new kn;return await a.loadModel(t,r),Promise.resolve(a)}}});var El={};Nt(El,{wasmBackend:()=>Lp});var Lp,Al=j(()=>{"use strict";Cl();Lp=new Rn});var Fp={};Nt(Fp,{InferenceSession:()=>gi,TRACE:()=>Hn,TRACE_FUNC_BEGIN:()=>at,TRACE_FUNC_END:()=>it,Tensor:()=>Ke,TrainingSession:()=>vi,default:()=>Gp,env:()=>Ee,registerBackend:()=>Ot});module.exports=Tt(Fp);ot();ot();ot();var _i="1.17.0";var Gp=Gn;{let e=(Al(),Tt(El)).wasmBackend;Ot("webgpu",e,5),Ot("cpu",e,10),Ot("wasm",e,10),Ot("xnnpack",e,9)}Object.defineProperty(Ee.versions,"web",{value:_i,enumerable:!0});
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
//# sourceMappingURL=ort.webgpu.min.js.map
