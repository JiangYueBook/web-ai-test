/*!
 * ONNX Runtime Web v1.18.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";var ort=(()=>{var Ii=Object.defineProperty;var Dd=Object.getOwnPropertyDescriptor;var zd=Object.getOwnPropertyNames;var Md=Object.prototype.hasOwnProperty;var ee=(e,t)=>()=>(e&&(t=e(e=0)),t);var vr=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),ir=(e,t)=>{for(var r in t)Ii(e,r,{get:t[r],enumerable:!0})},Ud=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of zd(t))!Md.call(e,a)&&a!==r&&Ii(e,a,{get:()=>t[a],enumerable:!(n=Dd(t,a))||n.enumerable});return e};var Ft=e=>Ud(Ii({},"__esModule",{value:!0}),e);var On,ar,jt,kn,Pn=ee(()=>{"use strict";On=new Map,ar=[],jt=(e,t,r)=>{if(t&&typeof t.init=="function"&&typeof t.createInferenceSessionHandler=="function"){let n=On.get(e);if(n===void 0)On.set(e,{backend:t,priority:r});else{if(n.priority>r)return;if(n.priority===r&&n.backend!==t)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){let a=ar.indexOf(e);a!==-1&&ar.splice(a,1);for(let u=0;u<ar.length;u++)if(On.get(ar[u]).priority<=r){ar.splice(u,0,e);return}ar.push(e)}return}throw new TypeError("not a valid backend")},kn=async e=>{let t=e.length===0?ar:e,r=[];for(let n of t){let a=On.get(n);if(a){if(a.initialized)return a.backend;if(a.aborted)continue;let u=!!a.initPromise;try{return u||(a.initPromise=a.backend.init(n)),await a.initPromise,a.initialized=!0,a.backend}catch(o){u||r.push({name:n,err:o}),a.aborted=!0}finally{delete a.initPromise}}}throw new Error(`no available backend found. ERR: ${r.map(n=>`[${n.name}] ${n.err}`).join(", ")}`)}});var qa=ee(()=>{"use strict";Pn()});var Ka,Ya=ee(()=>{"use strict";Ka="1.18.0"});var Za,or,Ai=ee(()=>{"use strict";Ya();Za="warning",or={wasm:{},webgl:{},webgpu:{},versions:{common:Ka},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Za=e}},get logLevel(){return Za}};Object.defineProperty(or,"logLevel",{enumerable:!0})});var Te,Qa=ee(()=>{"use strict";Ai();Te=or});var Xa,Ja,eo=ee(()=>{"use strict";Xa=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);r.width=e.dims[3],r.height=e.dims[2];let n=r.getContext("2d");if(n!=null){let a,u;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(a=e.dims[2],u=e.dims[3]):(a=e.dims[3],u=e.dims[2]);let o=t?.format!==void 0?t.format:"RGB",d=t?.norm,p,m;d===void 0||d.mean===void 0?p=[255,255,255,255]:typeof d.mean=="number"?p=[d.mean,d.mean,d.mean,d.mean]:(p=[d.mean[0],d.mean[1],d.mean[2],0],d.mean[3]!==void 0&&(p[3]=d.mean[3])),d===void 0||d.bias===void 0?m=[0,0,0,0]:typeof d.bias=="number"?m=[d.bias,d.bias,d.bias,d.bias]:(m=[d.bias[0],d.bias[1],d.bias[2],0],d.bias[3]!==void 0&&(m[3]=d.bias[3]));let l=u*a,y=0,b=l,v=l*2,$=-1;o==="RGBA"?(y=0,b=l,v=l*2,$=l*3):o==="RGB"?(y=0,b=l,v=l*2):o==="RBG"&&(y=0,v=l,b=l*2);for(let x=0;x<u;x++)for(let O=0;O<a;O++){let I=(e.data[y++]-m[0])*p[0],S=(e.data[b++]-m[1])*p[1],T=(e.data[v++]-m[2])*p[2],E=$===-1?255:(e.data[$++]-m[3])*p[3];n.fillStyle="rgba("+I+","+S+","+T+","+E+")",n.fillRect(O,x,1,1)}if("toDataURL"in r)return r.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},Ja=(e,t)=>{let r=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),n;if(r!=null){let a,u,o;t?.tensorLayout!==void 0&&t.tensorLayout==="NHWC"?(a=e.dims[2],u=e.dims[1],o=e.dims[3]):(a=e.dims[3],u=e.dims[2],o=e.dims[1]);let d=t!==void 0&&t.format!==void 0?t.format:"RGB",p=t?.norm,m,l;p===void 0||p.mean===void 0?m=[255,255,255,255]:typeof p.mean=="number"?m=[p.mean,p.mean,p.mean,p.mean]:(m=[p.mean[0],p.mean[1],p.mean[2],255],p.mean[3]!==void 0&&(m[3]=p.mean[3])),p===void 0||p.bias===void 0?l=[0,0,0,0]:typeof p.bias=="number"?l=[p.bias,p.bias,p.bias,p.bias]:(l=[p.bias[0],p.bias[1],p.bias[2],0],p.bias[3]!==void 0&&(l[3]=p.bias[3]));let y=u*a;if(t!==void 0&&(t.format!==void 0&&o===4&&t.format!=="RGBA"||o===3&&t.format!=="RGB"&&t.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let b=4,v=0,$=1,x=2,O=3,I=0,S=y,T=y*2,E=-1;d==="RGBA"?(I=0,S=y,T=y*2,E=y*3):d==="RGB"?(I=0,S=y,T=y*2):d==="RBG"&&(I=0,T=y,S=y*2),n=r.createImageData(a,u);for(let M=0;M<u*a;v+=b,$+=b,x+=b,O+=b,M++)n.data[v]=(e.data[I++]-l[0])*m[0],n.data[$]=(e.data[S++]-l[1])*m[1],n.data[x]=(e.data[T++]-l[2])*m[2],n.data[O]=E===-1?255:(e.data[E++]-l[3])*m[3]}else throw new Error("Can not access image data");return n}});var Ti,to,ro,no,io,ao=ee(()=>{"use strict";Rn();Ti=(e,t)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(t.height===void 0||t.width===void 0)throw new Error("Image height and width must be defined");if(t.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:r,width:n}=t,a=t.norm??{mean:255,bias:0},u,o;typeof a.mean=="number"?u=[a.mean,a.mean,a.mean,a.mean]:u=[a.mean[0],a.mean[1],a.mean[2],a.mean[3]??255],typeof a.bias=="number"?o=[a.bias,a.bias,a.bias,a.bias]:o=[a.bias[0],a.bias[1],a.bias[2],a.bias[3]??0];let d=t.format!==void 0?t.format:"RGBA",p=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:"RGB",m=r*n,l=p==="RGBA"?new Float32Array(m*4):new Float32Array(m*3),y=4,b=0,v=1,$=2,x=3,O=0,I=m,S=m*2,T=-1;d==="RGB"&&(y=3,b=0,v=1,$=2,x=-1),p==="RGBA"?T=m*3:p==="RBG"?(O=0,S=m,I=m*2):p==="BGR"&&(S=0,I=m,O=m*2);for(let M=0;M<m;M++,b+=y,$+=y,v+=y,x+=y)l[O++]=(e[b]+o[0])/u[0],l[I++]=(e[v]+o[1])/u[1],l[S++]=(e[$]+o[2])/u[2],T!==-1&&x!==-1&&(l[T++]=(e[x]+o[3])/u[3]);return p==="RGBA"?new at("float32",l,[1,4,r,n]):new at("float32",l,[1,3,r,n])},to=async(e,t)=>{let r=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,n=typeof ImageData<"u"&&e instanceof ImageData,a=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,u=typeof e=="string",o,d=t??{},p=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},m=l=>l instanceof HTMLCanvasElement||l instanceof OffscreenCanvas?l.getContext("2d"):null;if(r){let l=p();l.width=e.width,l.height=e.height;let y=m(l);if(y!=null){let b=e.height,v=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(b=t.resizedHeight,v=t.resizedWidth),t!==void 0){if(d=t,t.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");d.tensorFormat="RGBA",d.height=b,d.width=v}else d.tensorFormat="RGBA",d.height=b,d.width=v;y.drawImage(e,0,0),o=y.getImageData(0,0,v,b).data}else throw new Error("Can not access image data")}else if(n){let l,y;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(l=t.resizedHeight,y=t.resizedWidth):(l=e.height,y=e.width),t!==void 0&&(d=t),d.format="RGBA",d.height=l,d.width=y,t!==void 0){let b=p();b.width=y,b.height=l;let v=m(b);if(v!=null)v.putImageData(e,0,0),o=v.getImageData(0,0,y,l).data;else throw new Error("Can not access image data")}else o=e.data}else if(a){if(t===void 0)throw new Error("Please provide image config with format for Imagebitmap");let l=p();l.width=e.width,l.height=e.height;let y=m(l);if(y!=null){let b=e.height,v=e.width;return y.drawImage(e,0,0,v,b),o=y.getImageData(0,0,v,b).data,d.height=b,d.width=v,Ti(o,d)}else throw new Error("Can not access image data")}else{if(u)return new Promise((l,y)=>{let b=p(),v=m(b);if(!e||!v)return y();let $=new Image;$.crossOrigin="Anonymous",$.src=e,$.onload=()=>{b.width=$.width,b.height=$.height,v.drawImage($,0,0,b.width,b.height);let x=v.getImageData(0,0,b.width,b.height);d.height=b.height,d.width=b.width,l(Ti(x.data,d))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(o!==void 0)return Ti(o,d);throw new Error("Input data provided is not supported - aborted tensor creation")},ro=(e,t)=>{let{width:r,height:n,download:a,dispose:u}=t,o=[1,n,r,4];return new at({location:"texture",type:"float32",texture:e,dims:o,download:a,dispose:u})},no=(e,t)=>{let{dataType:r,dims:n,download:a,dispose:u}=t;return new at({location:"gpu-buffer",type:r??"float32",gpuBuffer:e,dims:n,download:a,dispose:u})},io=(e,t,r)=>new at({location:"cpu-pinned",type:e,data:t,dims:r??[t.length]})});var jr,Bn,oo,so,uo=ee(()=>{"use strict";jr=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["float16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array]]),Bn=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),oo=!1,so=()=>{if(!oo){oo=!0;let e=typeof BigInt64Array<"u"&&typeof BigInt64Array.from=="function",t=typeof BigUint64Array<"u"&&typeof BigUint64Array.from=="function";e&&(jr.set("int64",BigInt64Array),Bn.set(BigInt64Array,"int64")),t&&(jr.set("uint64",BigUint64Array),Bn.set(BigUint64Array,"uint64"))}}});var lo,co,po=ee(()=>{"use strict";Rn();lo=e=>{let t=1;for(let r=0;r<e.length;r++){let n=e[r];if(typeof n!="number"||!Number.isSafeInteger(n))throw new TypeError(`dims[${r}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${n}`);t*=n}return t},co=(e,t)=>{switch(e.location){case"cpu":return new at(e.type,e.data,t);case"cpu-pinned":return new at({location:"cpu-pinned",data:e.data,type:e.type,dims:t});case"texture":return new at({location:"texture",texture:e.texture,type:e.type,dims:t});case"gpu-buffer":return new at({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}});var at,Rn=ee(()=>{"use strict";eo();ao();uo();po();at=class{constructor(t,r,n){so();let a,u;if(typeof t=="object"&&"location"in t)switch(this.dataLocation=t.location,a=t.type,u=t.dims,t.location){case"cpu-pinned":{let d=jr.get(a);if(!d)throw new TypeError(`unsupported type "${a}" to create tensor from pinned buffer`);if(!(t.data instanceof d))throw new TypeError(`buffer should be of type ${d.name}`);this.cpuData=t.data;break}case"texture":{if(a!=="float32")throw new TypeError(`unsupported type "${a}" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case"gpu-buffer":{if(a!=="float32"&&a!=="float16"&&a!=="int32"&&a!=="int64"&&a!=="uint32"&&a!=="bool")throw new TypeError(`unsupported type "${a}" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let d,p;if(typeof t=="string")if(a=t,p=n,t==="string"){if(!Array.isArray(r))throw new TypeError("A string tensor's data must be a string array.");d=r}else{let m=jr.get(t);if(m===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(r)){if(t==="float16")throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");t==="uint64"||t==="int64"?d=m.from(r,BigInt):d=m.from(r)}else if(r instanceof m)d=r;else throw new TypeError(`A ${a} tensor's data must be type of ${m}`)}else if(p=r,Array.isArray(t)){if(t.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let m=typeof t[0];if(m==="string")a="string",d=t;else if(m==="boolean")a="bool",d=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${m}.`)}else{let m=Bn.get(t.constructor);if(m===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);a=m,d=t}if(p===void 0)p=[d.length];else if(!Array.isArray(p))throw new TypeError("A tensor's dims must be a number array");u=p,this.cpuData=d,this.dataLocation="cpu"}let o=lo(u);if(this.cpuData&&o!==this.cpuData.length)throw new Error(`Tensor's size(${o}) does not match data length(${this.cpuData.length}).`);this.type=a,this.dims=u,this.size=o}static async fromImage(t,r){return to(t,r)}static fromTexture(t,r){return ro(t,r)}static fromGpuBuffer(t,r){return no(t,r)}static fromPinnedBuffer(t,r,n){return io(t,r,n)}toDataURL(t){return Xa(this,t)}toImageData(t){return Ja(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}async getData(t){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=r,t&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return co(this,t)}}});var Xe,Dn=ee(()=>{"use strict";Rn();Xe=at});var qr,fo,ct,pt,Ei=ee(()=>{"use strict";Ai();qr=(e,t)=>{or.wasm.trace&&console.timeStamp(`${e}::ORT::${t}`)},fo=(e,t)=>{let r=new Error().stack?.split(/\r\n|\r|\n/g)||[],n=!1;for(let a=0;a<r.length;a++){if(n&&!r[a].includes("TRACE_FUNC")){let u=`FUNC_${e}::${r[a].trim().split(" ")[1]}`;t&&(u+=`::${t}`),qr("CPU",u);return}r[a].includes("TRACE_FUNC")&&(n=!0)}},ct=e=>{or.wasm.trace&&fo("BEGIN",e)},pt=e=>{or.wasm.trace&&fo("END",e)}});var zn,mo=ee(()=>{"use strict";Pn();Dn();Ei();zn=class e{constructor(t){this.handler=t}async run(t,r,n){ct();let a={},u={};if(typeof t!="object"||t===null||t instanceof Xe||Array.isArray(t))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let o=!0;if(typeof r=="object"){if(r===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(r instanceof Xe)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(r)){if(r.length===0)throw new TypeError("'fetches' cannot be an empty array.");o=!1;for(let m of r){if(typeof m!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(m)===-1)throw new RangeError(`'fetches' contains invalid output name: ${m}.`);a[m]=null}if(typeof n=="object"&&n!==null)u=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else{let m=!1,l=Object.getOwnPropertyNames(r);for(let y of this.outputNames)if(l.indexOf(y)!==-1){let b=r[y];(b===null||b instanceof Xe)&&(m=!0,o=!1,a[y]=b)}if(m){if(typeof n=="object"&&n!==null)u=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else u=r}}else if(typeof r<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let m of this.inputNames)if(typeof t[m]>"u")throw new Error(`input '${m}' is missing in 'feeds'.`);if(o)for(let m of this.outputNames)a[m]=null;let d=await this.handler.run(t,a,u),p={};for(let m in d)if(Object.hasOwnProperty.call(d,m)){let l=d[m];l instanceof Xe?p[m]=l:p[m]=new Xe(l.type,l.data,l.dims)}return pt(),p}async release(){return this.handler.dispose()}static async create(t,r,n,a){ct();let u,o={};if(typeof t=="string"){if(u=t,typeof r=="object"&&r!==null)o=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof Uint8Array){if(u=t,typeof r=="object"&&r!==null)o=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&t instanceof SharedArrayBuffer){let y=t,b=0,v=t.byteLength;if(typeof r=="object"&&r!==null)o=r;else if(typeof r=="number"){if(b=r,!Number.isSafeInteger(b))throw new RangeError("'byteOffset' must be an integer.");if(b<0||b>=y.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${y.byteLength}).`);if(v=t.byteLength-b,typeof n=="number"){if(v=n,!Number.isSafeInteger(v))throw new RangeError("'byteLength' must be an integer.");if(v<=0||b+v>y.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${y.byteLength-b}].`);if(typeof a=="object"&&a!==null)o=a;else if(typeof a<"u")throw new TypeError("'options' must be an object.")}else if(typeof n<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof r<"u")throw new TypeError("'options' must be an object.");u=new Uint8Array(y,b,v)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let p=(o.executionProviders||[]).map(y=>typeof y=="string"?y:y.name),l=await(await kn(p)).createInferenceSessionHandler(u,o);return pt(),new e(l)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}});var ho,go=ee(()=>{"use strict";mo();ho=zn});var yo=ee(()=>{"use strict"});var Wd,Mn,bo=ee(()=>{"use strict";Pn();Dn();Wd="Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.",Mn=class e{constructor(t,r,n){this.handler=t,this.hasOptimizerModel=r,this.hasEvalModel=n}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error("This training session has no evalModel loaded.")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error("This training session has no evalModel loaded.")}static async create(t,r){let n=t.evalModel||"",a=t.optimizerModel||"",u=r||{},d=(u.executionProviders||[]).map(m=>typeof m=="string"?m:m.name),p=await kn(d);if(p.createTrainingSessionHandler){let m=await p.createTrainingSessionHandler(t.checkpointState,t.trainModel,n,a,u);return new e(m,!!t.optimizerModel,!!t.evalModel)}else throw new Error(Wd)}typeNarrowingForRunStep(t,r,n,a,u){let o={},d={};if(typeof n!="object"||n===null||n instanceof Xe||Array.isArray(n))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let p=!0;if(typeof a=="object"){if(a===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(a instanceof Xe)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(a)){if(a.length===0)throw new TypeError("'fetches' cannot be an empty array.");p=!1;for(let m of a){if(typeof m!="string")throw new TypeError("'fetches' must be a string array or an object.");if(r.indexOf(m)===-1)throw new RangeError(`'fetches' contains invalid output name: ${m}.`);o[m]=null}if(typeof u=="object"&&u!==null)d=u;else if(typeof u<"u")throw new TypeError("'options' must be an object.")}else{let m=!1,l=Object.getOwnPropertyNames(a);for(let y of r)if(l.indexOf(y)!==-1){let b=a[y];(b===null||b instanceof Xe)&&(m=!0,p=!1,o[y]=b)}if(m){if(typeof u=="object"&&u!==null)d=u;else if(typeof u<"u")throw new TypeError("'options' must be an object.")}else d=a}}else if(typeof a<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let m of t)if(typeof n[m]>"u")throw new Error(`input '${m}' is missing in 'feeds'.`);if(p)for(let m of r)o[m]=null;return[o,d]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let n in t)if(Object.hasOwnProperty.call(t,n)){let a=t[n];a instanceof Xe?r[n]=a:r[n]=new Xe(a.type,a.data,a.dims)}return r}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(t,r,n){let[a,u]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,t,r,n),o=await this.handler.runTrainStep(t,a,u);return this.convertHandlerReturnTypeToMapOfTensors(o)}async runOptimizerStep(t){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(t||{});else throw new Error("This TrainingSession has no OptimizerModel loaded.")}async runEvalStep(t,r,n){if(this.hasEvalModel){let[a,u]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,t,r,n),o=await this.handler.runEvalStep(t,a,u);return this.convertHandlerReturnTypeToMapOfTensors(o)}else throw new Error("This TrainingSession has no EvalModel loaded.")}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let n=await this.getParametersSize(r);if(t.length!==4*n)throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}});var vo,wo=ee(()=>{"use strict";bo();vo=Mn});var Oi={};ir(Oi,{InferenceSession:()=>ho,TRACE:()=>qr,TRACE_FUNC_BEGIN:()=>ct,TRACE_FUNC_END:()=>pt,Tensor:()=>Xe,TrainingSession:()=>vo,env:()=>Te,registerBackend:()=>jt});var vt=ee(()=>{"use strict";qa();Qa();go();Dn();Ei();yo();wo()});var ki={};ir(ki,{createReadStream:()=>_o,readFile:()=>Nd,readFileSync:()=>Vd});var Nd,Vd,_o,Pi=ee(()=>{Nd=void 0,Vd=void 0,_o=void 0});var Ri={};ir(Ri,{join:()=>Hd});var Hd,Bi=ee(()=>{Hd=void 0});var Co=vr((xo,Di)=>{"use strict";var So=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,n,a;r.ready=new Promise((s,f)=>{n=s,a=f}),r.mountExternalData=(s,f)=>{(r.gb||(r.gb=new Map)).set(s,f)},r.unmountExternalData=()=>{delete r.gb},r.jsepInit=(s,f,g,_,A,z,L,J)=>{r.Fb=s,r.vb=f,r.xb=g,r.ob=_,r.wb=A,r.Sa=z,r.yb=L,r.zb=J,f=(Y,q,ae)=>(...me)=>{let Se=tt,P=q?.();me=Y(...me);let ue=q?.();return P!==ue&&(Y=ue,ae(P),q=ae=null),tt!=Se?pn():me},g=Y=>async(...q)=>{try{if(r.fb)throw Error("Session already started");let ae=r.fb={Ab:q[0],errors:[]},me=await Y(...q);if(r.fb!==ae)throw Error("Session mismatch");s.flush();let Se=ae.errors;if(0<Se.length){let P=await Promise.all(Se);if(P=P.filter(ue=>ue),0<P.length)throw Error(P.join(`
`))}return me}finally{r.fb=null}},r._OrtCreateSession=f(r._OrtCreateSession,()=>r._OrtCreateSession,Y=>r._OrtCreateSession=Y),r._OrtRun=g(f(r._OrtRun,()=>r._OrtRun,Y=>r._OrtRun=Y)),r._OrtRunWithBinding=g(f(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,Y=>r._OrtRunWithBinding=Y)),r._OrtBindInput=f(r._OrtBindInput,()=>r._OrtBindInput,Y=>r._OrtBindInput=Y),r.jsepRegisterBuffer=(Y,q,ae,me)=>s.registerBuffer(Y,q,ae,me),r.jsepUnregisterBuffers=Y=>{s.unregisterBuffers(Y)},r.jsepGetBuffer=Y=>s.getBuffer(Y),r.jsepCreateDownloader=(Y,q,ae)=>s.createDownloader(Y,q,ae),r.jsepOnRunStart=()=>s.onRunStart()};var u=Object.assign({},r),o="./this.program",d=(s,f)=>{throw f},p=typeof window=="object",m=typeof importScripts=="function",l=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",y="",b,v,$;if(l){var x=(Pi(),Ft(ki)),O=(Bi(),Ft(Ri));y=m?O.dirname(y)+"/":__dirname+"/",b=(s,f)=>(s=ie(s)?new URL(s):O.normalize(s),x.readFileSync(s,f?void 0:"utf8")),$=s=>(s=b(s,!0),s.buffer||(s=new Uint8Array(s)),s),v=(s,f,g,_=!0)=>{s=ie(s)?new URL(s):O.normalize(s),x.readFile(s,_?void 0:"utf8",(A,z)=>{A?g(A):f(_?z.buffer:z)})},!r.thisProgram&&1<process.argv.length&&(o=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),d=(s,f)=>{throw process.exitCode=s,f},r.inspect=()=>"[Emscripten Module object]"}else(p||m)&&(m?y=self.location.href:typeof document<"u"&&document.currentScript&&(y=document.currentScript.src),e&&(y=e),y.indexOf("blob:")!==0?y=y.substr(0,y.replace(/[?#].*/,"").lastIndexOf("/")+1):y="",b=s=>{var f=new XMLHttpRequest;return f.open("GET",s,!1),f.send(null),f.responseText},m&&($=s=>{var f=new XMLHttpRequest;return f.open("GET",s,!1),f.responseType="arraybuffer",f.send(null),new Uint8Array(f.response)}),v=(s,f,g)=>{var _=new XMLHttpRequest;_.open("GET",s,!0),_.responseType="arraybuffer",_.onload=()=>{_.status==200||_.status==0&&_.response?f(_.response):g()},_.onerror=g,_.send(null)});var I=console.log.bind(console),S=console.error.bind(console);Object.assign(r,u),u=null,typeof WebAssembly!="object"&&Ye("no native wasm support detected");var T,E=!1,M,B,N,H,X,D,j,se,be,re,$e;function Ge(){var s=T.buffer;r.HEAP8=B=new Int8Array(s),r.HEAP16=H=new Int16Array(s),r.HEAPU8=N=new Uint8Array(s),r.HEAPU16=X=new Uint16Array(s),r.HEAP32=D=new Int32Array(s),r.HEAPU32=j=new Uint32Array(s),r.HEAPF32=se=new Float32Array(s),r.HEAPF64=$e=new Float64Array(s),r.HEAP64=be=new BigInt64Array(s),r.HEAPU64=re=new BigUint64Array(s)}var ge=[],Ee=[],pe=[],ve=0,Ve=null,Me=null;function Ye(s){throw s="Aborted("+s+")",S(s),E=!0,M=1,s=new WebAssembly.RuntimeError(s+". Build with -sASSERTIONS for more info."),a(s),s}var F=s=>s.startsWith("data:application/octet-stream;base64,"),ie=s=>s.startsWith("file://"),he;if(he="ort-wasm-simd.wasm",!F(he)){var et=he;he=r.locateFile?r.locateFile(et,y):y+et}function st(s){if($)return $(s);throw"both async and sync fetching of the wasm failed"}function Re(s){if(p||m){if(typeof fetch=="function"&&!ie(s))return fetch(s,{credentials:"same-origin"}).then(f=>{if(!f.ok)throw"failed to load wasm binary file at '"+s+"'";return f.arrayBuffer()}).catch(()=>st(s));if(v)return new Promise((f,g)=>{v(s,_=>f(new Uint8Array(_)),g)})}return Promise.resolve().then(()=>st(s))}function Fe(s,f,g){return Re(s).then(_=>WebAssembly.instantiate(_,f)).then(_=>_).then(g,_=>{S(`failed to asynchronously prepare wasm: ${_}`),Ye(_)})}function Dt(s,f){var g=he;return typeof WebAssembly.instantiateStreaming!="function"||F(g)||ie(g)||l||typeof fetch!="function"?Fe(g,s,f):fetch(g,{credentials:"same-origin"}).then(_=>WebAssembly.instantiateStreaming(_,s).then(f,function(A){return S(`wasm streaming compile failed: ${A}`),S("falling back to ArrayBuffer instantiation"),Fe(g,s,f)}))}var zt={903448:(s,f,g,_)=>{if(typeof r>"u"||!r.gb)return 1;if(s=je(s>>>0),s.startsWith("./")&&(s=s.substring(2)),s=r.gb.get(s),!s)return 2;if(f>>>=0,g>>>=0,f+g>s.byteLength)return 3;try{return N.set(s.subarray(f,f+g),_>>>0>>>0),0}catch{return 4}},903949:s=>r.vb(s),903982:s=>r.xb(s),904014:(s,f,g)=>{r.ob(s,f,g,!0)},904053:(s,f,g)=>{r.ob(s,f,g)},904086:s=>{r.Sa("Abs",s,void 0)},904137:s=>{r.Sa("Neg",s,void 0)},904188:s=>{r.Sa("Floor",s,void 0)},904241:s=>{r.Sa("Ceil",s,void 0)},904293:s=>{r.Sa("Reciprocal",s,void 0)},904351:s=>{r.Sa("Sqrt",s,void 0)},904403:s=>{r.Sa("Exp",s,void 0)},904454:s=>{r.Sa("Erf",s,void 0)},904505:s=>{r.Sa("Sigmoid",s,void 0)},904560:(s,f,g)=>{r.Sa("HardSigmoid",s,{alpha:f,beta:g})},904639:s=>{r.Sa("Log",s,void 0)},904690:s=>{r.Sa("Sin",s,void 0)},904741:s=>{r.Sa("Cos",s,void 0)},904792:s=>{r.Sa("Tan",s,void 0)},904843:s=>{r.Sa("Asin",s,void 0)},904895:s=>{r.Sa("Acos",s,void 0)},904947:s=>{r.Sa("Atan",s,void 0)},904999:s=>{r.Sa("Sinh",s,void 0)},905051:s=>{r.Sa("Cosh",s,void 0)},905103:s=>{r.Sa("Asinh",s,void 0)},905156:s=>{r.Sa("Acosh",s,void 0)},905209:s=>{r.Sa("Atanh",s,void 0)},905262:s=>{r.Sa("Tanh",s,void 0)},905314:s=>{r.Sa("Not",s,void 0)},905365:(s,f,g)=>{r.Sa("Clip",s,{min:f,max:g})},905434:s=>{r.Sa("Clip",s,void 0)},905486:(s,f)=>{r.Sa("Elu",s,{alpha:f})},905544:s=>{r.Sa("Relu",s,void 0)},905596:(s,f)=>{r.Sa("LeakyRelu",s,{alpha:f})},905660:(s,f)=>{r.Sa("ThresholdedRelu",s,{alpha:f})},905730:(s,f)=>{r.Sa("Cast",s,{to:f})},905788:s=>{r.Sa("Add",s,void 0)},905839:s=>{r.Sa("Sub",s,void 0)},905890:s=>{r.Sa("Mul",s,void 0)},905941:s=>{r.Sa("Div",s,void 0)},905992:s=>{r.Sa("Pow",s,void 0)},906043:s=>{r.Sa("Equal",s,void 0)},906096:s=>{r.Sa("Greater",s,void 0)},906151:s=>{r.Sa("GreaterOrEqual",s,void 0)},906213:s=>{r.Sa("Less",s,void 0)},906265:s=>{r.Sa("LessOrEqual",s,void 0)},906324:(s,f,g,_,A)=>{r.Sa("ReduceMean",s,{keepDims:!!f,noopWithEmptyAxes:!!g,axes:_?Array.from(D.subarray(_>>>0,A>>>0)):[]})},906483:(s,f,g,_,A)=>{r.Sa("ReduceMax",s,{keepDims:!!f,noopWithEmptyAxes:!!g,axes:_?Array.from(D.subarray(_>>>0,A>>>0)):[]})},906641:(s,f,g,_,A)=>{r.Sa("ReduceMin",s,{keepDims:!!f,noopWithEmptyAxes:!!g,axes:_?Array.from(D.subarray(_>>>0,A>>>0)):[]})},906799:(s,f,g,_,A)=>{r.Sa("ReduceProd",s,{keepDims:!!f,noopWithEmptyAxes:!!g,axes:_?Array.from(D.subarray(_>>>0,A>>>0)):[]})},906958:(s,f,g,_,A)=>{r.Sa("ReduceSum",s,{keepDims:!!f,noopWithEmptyAxes:!!g,axes:_?Array.from(D.subarray(_>>>0,A>>>0)):[]})},907116:(s,f,g,_,A)=>{r.Sa("ReduceL1",s,{keepDims:!!f,noopWithEmptyAxes:!!g,axes:_?Array.from(D.subarray(_>>>0,A>>>0)):[]})},907273:(s,f,g,_,A)=>{r.Sa("ReduceL2",s,{keepDims:!!f,noopWithEmptyAxes:!!g,axes:_?Array.from(D.subarray(_>>>0,A>>>0)):[]})},907430:(s,f,g,_,A)=>{r.Sa("ReduceLogSum",s,{keepDims:!!f,noopWithEmptyAxes:!!g,axes:_?Array.from(D.subarray(_>>>0,A>>>0)):[]})},907591:(s,f,g,_,A)=>{r.Sa("ReduceSumSquare",s,{keepDims:!!f,noopWithEmptyAxes:!!g,axes:_?Array.from(D.subarray(_>>>0,A>>>0)):[]})},907755:(s,f,g,_,A)=>{r.Sa("ReduceLogSumExp",s,{keepDims:!!f,noopWithEmptyAxes:!!g,axes:_?Array.from(D.subarray(_>>>0,A>>>0)):[]})},907919:s=>{r.Sa("Where",s,void 0)},907972:(s,f,g)=>{r.Sa("Transpose",s,{perm:f?Array.from(D.subarray(f>>>0,g>>>0)):[]})},908080:(s,f,g,_,A,z,L,J,Y,q,ae,me,Se,P,ue)=>{r.Sa("ConvTranspose",s,{format:Y?"NHWC":"NCHW",autoPad:f,dilations:[g],group:_,kernel_shape:[A],pads:[z,L],strides:[J],wIsConst:()=>!!B[q>>>0],outputPadding:ae?Array.from(D.subarray(ae>>>0,me>>>0)):[],outputShape:Se?Array.from(D.subarray(Se>>>0,P>>>0)):[],activation:je(ue)})},908482:(s,f,g,_,A,z,L,J,Y,q,ae,me,Se,P)=>{r.Sa("ConvTranspose",s,{format:J?"NHWC":"NCHW",autoPad:f,dilations:Array.from(D.subarray(g>>>0,(g>>>0)+2>>>0)),group:_,kernelShape:Array.from(D.subarray(A>>>0,(A>>>0)+2>>>0)),pads:Array.from(D.subarray(z>>>0,(z>>>0)+4>>>0)),strides:Array.from(D.subarray(L>>>0,(L>>>0)+2>>>0)),wIsConst:()=>!!B[Y>>>0],outputPadding:q?Array.from(D.subarray(q>>>0,ae>>>0)):[],outputShape:me?Array.from(D.subarray(me>>>0,Se>>>0)):[],activation:je(P)})},909047:(s,f,g,_,A,z,L,J,Y,q,ae,me,Se,P,ue)=>{r.Sa("ConvTranspose",s,{format:Y?"NHWC":"NCHW",autoPad:f,dilations:[g],group:_,kernel_shape:[A],pads:[z,L],strides:[J],wIsConst:()=>!!B[q>>>0],outputPadding:ae?Array.from(D.subarray(ae>>>0,me>>>0)):[],outputShape:Se?Array.from(D.subarray(Se>>>0,P>>>0)):[],activation:je(ue)})},909449:(s,f,g,_,A,z,L,J,Y,q,ae,me,Se,P)=>{r.Sa("ConvTranspose",s,{format:J?"NHWC":"NCHW",autoPad:f,dilations:Array.from(D.subarray(g>>>0,(g>>>0)+2>>>0)),group:_,kernelShape:Array.from(D.subarray(A>>>0,(A>>>0)+2>>>0)),pads:Array.from(D.subarray(z>>>0,(z>>>0)+4>>>0)),strides:Array.from(D.subarray(L>>>0,(L>>>0)+2>>>0)),wIsConst:()=>!!B[Y>>>0],outputPadding:q?Array.from(D.subarray(q>>>0,ae>>>0)):[],outputShape:me?Array.from(D.subarray(me>>>0,Se>>>0)):[],activation:je(P)})},910014:(s,f)=>{r.Sa("GlobalAveragePool",s,{format:f?"NHWC":"NCHW"})},910105:(s,f,g,_,A,z,L,J,Y,q,ae,me,Se,P,ue,Ae)=>{r.Sa("AveragePool",s,{format:Ae?"NHWC":"NCHW",auto_pad:f,ceil_mode:g,count_include_pad:_,storage_order:A,dilations:[z,L],kernel_shape:[J,Y],pads:[q,ae,me,Se],strides:[P,ue]})},910389:(s,f)=>{r.Sa("GlobalAveragePool",s,{format:f?"NHWC":"NCHW"})},910480:(s,f,g,_,A,z,L,J,Y,q,ae,me,Se,P,ue,Ae)=>{r.Sa("AveragePool",s,{format:Ae?"NHWC":"NCHW",auto_pad:f,ceil_mode:g,count_include_pad:_,storage_order:A,dilations:[z,L],kernel_shape:[J,Y],pads:[q,ae,me,Se],strides:[P,ue]})},910764:(s,f)=>{r.Sa("GlobalMaxPool",s,{format:f?"NHWC":"NCHW"})},910851:(s,f,g,_,A,z,L,J,Y,q,ae,me,Se,P,ue,Ae)=>{r.Sa("MaxPool",s,{format:Ae?"NHWC":"NCHW",auto_pad:f,ceil_mode:g,count_include_pad:_,storage_order:A,dilations:[z,L],kernel_shape:[J,Y],pads:[q,ae,me,Se],strides:[P,ue]})},911131:(s,f)=>{r.Sa("GlobalMaxPool",s,{format:f?"NHWC":"NCHW"})},911218:(s,f,g,_,A,z,L,J,Y,q,ae,me,Se,P,ue,Ae)=>{r.Sa("MaxPool",s,{format:Ae?"NHWC":"NCHW",auto_pad:f,ceil_mode:g,count_include_pad:_,storage_order:A,dilations:[z,L],kernel_shape:[J,Y],pads:[q,ae,me,Se],strides:[P,ue]})},911498:(s,f,g,_,A)=>{r.Sa("Gemm",s,{alpha:f,beta:g,transA:_,transB:A})},911602:s=>{r.Sa("MatMul",s,void 0)},911656:(s,f,g,_)=>{r.Sa("ArgMax",s,{keepDims:!!f,selectLastIndex:!!g,axis:_})},911764:(s,f,g,_)=>{r.Sa("ArgMin",s,{keepDims:!!f,selectLastIndex:!!g,axis:_})},911872:(s,f)=>{r.Sa("Softmax",s,{axis:f})},911935:(s,f)=>{r.Sa("Concat",s,{axis:f})},911995:(s,f,g,_,A)=>{r.Sa("Split",s,{axis:f,numOutputs:g,splitSizes:_?Array.from(D.subarray(_>>>0,A>>>0)):[]})},912135:s=>{r.Sa("Expand",s,void 0)},912189:(s,f)=>{r.Sa("Gather",s,{axis:Number(f)})},912260:(s,f)=>{r.Sa("GatherElements",s,{axis:Number(f)})},912339:(s,f,g,_,A,z,L,J,Y,q,ae)=>{r.Sa("Resize",s,{antialias:f,axes:g?Array.from(D.subarray(g>>>0,_>>>0)):[],coordinateTransformMode:je(A),cubicCoeffA:z,excludeOutside:L,extrapolationValue:J,keepAspectRatioPolicy:je(Y),mode:je(q),nearestMode:je(ae)})},912685:(s,f,g,_,A,z,L)=>{r.Sa("Slice",s,{starts:f?Array.from(D.subarray(f>>>0,g>>>0)):[],ends:_?Array.from(D.subarray(_>>>0,A>>>0)):[],axes:z?Array.from(D.subarray(z>>>0,L>>>0)):[]})},912901:s=>{r.Sa("Tile",s,void 0)},912953:(s,f,g)=>{r.Sa("LayerNormalization",s,{axis:Number(f),epsilon:Number(g)})},913060:(s,f,g)=>{r.Sa("InstanceNormalization",s,{epsilon:f,format:g?"NHWC":"NCHW"})},913174:(s,f,g)=>{r.Sa("InstanceNormalization",s,{epsilon:f,format:g?"NHWC":"NCHW"})},913288:s=>{r.Sa("Range",s,void 0)},913341:(s,f)=>{r.Sa("Einsum",s,{equation:je(f)})},913422:(s,f,g,_,A)=>{r.Sa("Pad",s,{mode:f,value:g,pads:_?Array.from(D.subarray(_>>>0,A>>>0)):[]})},913549:(s,f,g,_,A,z)=>{r.Sa("BatchNormalization",s,{epsilon:f,momentum:g,spatial:!!A,trainingMode:!!_,format:z?"NHWC":"NCHW"})},913718:(s,f,g,_,A,z)=>{r.Sa("BatchNormalization",s,{epsilon:f,momentum:g,spatial:!!A,trainingMode:!!_,format:z?"NHWC":"NCHW"})},913887:(s,f,g)=>{r.Sa("CumSum",s,{exclusive:Number(f),reverse:Number(g)})},913984:(s,f,g,_,A,z,L,J,Y)=>{r.Sa("Attention",s,{numHeads:f,isUnidirectional:g,maskFilterValue:_,scale:A,doRotary:z,qkvHiddenSizes:L?Array.from(D.subarray(Number(J)>>>0,Number(J)+L>>>0)):[],pastPresentShareBuffer:!!Y})},914256:s=>{r.Sa("Gelu",s,void 0)},914308:(s,f,g,_,A,z)=>{r.Sa("MultiHeadAttention",s,{numHeads:f,isUnidirectional:g,maskFilterValue:_,scale:A,doRotary:z})},914467:s=>{r.Sa("BiasAdd",s,void 0)},914522:s=>{r.Sa("BiasSplitGelu",s,void 0)},914583:(s,f)=>{r.Sa("SkipLayerNormalization",s,{epsilon:f})},914664:(s,f,g,_,A,z,L,J,Y,q,ae,me,Se)=>{r.Sa("Conv",s,{format:Y?"NHWC":"NCHW",auto_pad:f,dilations:[g],group:_,kernel_shape:[A],pads:z?Array.from(D.subarray(z>>>0,L>>>0)):[],strides:[J],w_is_const:()=>!!B[q>>>0],activation:je(ae),activation_params:me?Array.from(se.subarray(me>>>0,Se>>>0)):[]})},915034:(s,f,g,_,A,z,L,J,Y,q,ae,me,Se,P,ue,Ae)=>{r.Sa("Conv",s,{format:me?"NHWC":"NCHW",auto_pad:f,dilations:[g,_],group:A,kernel_shape:[z,L],pads:J?Array.from(D.subarray(J>>>0,Y>>>0)):[],strides:[q,ae],w_is_const:()=>!!B[Se>>>0],activation:je(P),activation_params:ue?Array.from(se.subarray(ue>>>0,Ae>>>0)):[]})},915425:s=>{r.yb(s)},915459:(s,f)=>r.zb(s,f,r.fb.Ab,r.fb.errors)};function Yt(s){this.name="ExitStatus",this.message=`Program terminated with exit(${s})`,this.status=s}function Vt(s){this.cb=s-24,this.rb=function(f){j[this.cb+4>>>2>>>0]=f},this.qb=function(f){j[this.cb+8>>>2>>>0]=f},this.kb=function(f,g){this.jb(),this.rb(f),this.qb(g)},this.jb=function(){j[this.cb+16>>>2>>>0]=0}}var lr=0,Zt=0,Cr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Ht=(s,f,g)=>{f>>>=0;var _=f+g;for(g=f;s[g]&&!(g>=_);)++g;if(16<g-f&&s.buffer&&Cr)return Cr.decode(s.subarray(f,g));for(_="";f<g;){var A=s[f++];if(A&128){var z=s[f++]&63;if((A&224)==192)_+=String.fromCharCode((A&31)<<6|z);else{var L=s[f++]&63;A=(A&240)==224?(A&15)<<12|z<<6|L:(A&7)<<18|z<<12|L<<6|s[f++]&63,65536>A?_+=String.fromCharCode(A):(A-=65536,_+=String.fromCharCode(55296|A>>10,56320|A&1023))}}else _+=String.fromCharCode(A)}return _},je=(s,f)=>(s>>>=0)?Ht(N,s,f):"",Mt=s=>{for(var f=0,g=0;g<s.length;++g){var _=s.charCodeAt(g);127>=_?f++:2047>=_?f+=2:55296<=_&&57343>=_?(f+=4,++g):f+=3}return f},It=(s,f,g,_)=>{if(g>>>=0,!(0<_))return 0;var A=g;_=g+_-1;for(var z=0;z<s.length;++z){var L=s.charCodeAt(z);if(55296<=L&&57343>=L){var J=s.charCodeAt(++z);L=65536+((L&1023)<<10)|J&1023}if(127>=L){if(g>=_)break;f[g++>>>0]=L}else{if(2047>=L){if(g+1>=_)break;f[g++>>>0]=192|L>>6}else{if(65535>=L){if(g+2>=_)break;f[g++>>>0]=224|L>>12}else{if(g+3>=_)break;f[g++>>>0]=240|L>>18,f[g++>>>0]=128|L>>12&63}f[g++>>>0]=128|L>>6&63}f[g++>>>0]=128|L&63}}return f[g>>>0]=0,g-A},Ir=s=>{if(s===null)return"null";var f=typeof s;return f==="object"||f==="array"||f==="function"?s.toString():""+s},an,ut=s=>{for(var f="";N[s>>>0];)f+=an[N[s++>>>0]];return f},Ar={},Qt={},Tr={},yt;function on(s,f,g={}){var _=f.name;if(!s)throw new yt(`type "${_}" must have a positive integer typeid pointer`);if(Qt.hasOwnProperty(s)){if(g.tb)return;throw new yt(`Cannot register type '${_}' twice`)}Qt[s]=f,delete Tr[s],Ar.hasOwnProperty(s)&&(f=Ar[s],delete Ar[s],f.forEach(A=>A()))}function Ze(s,f,g={}){if(!("argPackAdvance"in f))throw new TypeError("registerType registeredInstance requires argPackAdvance");on(s,f,g)}var Er=(s,f,g)=>{switch(f){case 1:return g?_=>B[_>>>0>>>0]:_=>N[_>>>0>>>0];case 2:return g?_=>H[_>>>1>>>0]:_=>X[_>>>1>>>0];case 4:return g?_=>D[_>>>2>>>0]:_=>j[_>>>2>>>0];case 8:return g?_=>be[_>>>3]:_=>re[_>>>3];default:throw new TypeError(`invalid integer width (${f}): ${s}`)}};function Or(){this.$a=[void 0],this.nb=[]}var Pe=new Or;function kr(s){s>>>=0,s>=Pe.cb&&--Pe.get(s).pb===0&&Pe.jb(s)}var _e=s=>{if(!s)throw new yt("Cannot use deleted val. handle = "+s);return Pe.get(s).value},lt=s=>{switch(s){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return Pe.kb({pb:1,value:s})}};function dr(s){return this.fromWireType(D[s>>>2>>>0])}var Pr=(s,f)=>{switch(f){case 4:return function(g){return this.fromWireType(se[g>>>2>>>0])};case 8:return function(g){return this.fromWireType($e[g>>>3>>>0])};default:throw new TypeError(`invalid float width (${f}): ${s}`)}};function mi(s){return this.fromWireType(j[s>>>2>>>0])}var Rr=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,hi=(s,f)=>{for(var g=s>>1,_=g+f/2;!(g>=_)&&X[g>>>0];)++g;if(g<<=1,32<g-s&&Rr)return Rr.decode(N.subarray(s>>>0,g>>>0));for(g="",_=0;!(_>=f/2);++_){var A=H[s+2*_>>>1>>>0];if(A==0)break;g+=String.fromCharCode(A)}return g},fe=(s,f,g)=>{if(g??=2147483647,2>g)return 0;g-=2;var _=f;g=g<2*s.length?g/2:s.length;for(var A=0;A<g;++A)H[f>>>1>>>0]=s.charCodeAt(A),f+=2;return H[f>>>1>>>0]=0,f-_},cr=s=>2*s.length,sn=(s,f)=>{for(var g=0,_="";!(g>=f/4);){var A=D[s+4*g>>>2>>>0];if(A==0)break;++g,65536<=A?(A-=65536,_+=String.fromCharCode(55296|A>>10,56320|A&1023)):_+=String.fromCharCode(A)}return _},gi=(s,f,g)=>{if(f>>>=0,g??=2147483647,4>g)return 0;var _=f;g=_+g-4;for(var A=0;A<s.length;++A){var z=s.charCodeAt(A);if(55296<=z&&57343>=z){var L=s.charCodeAt(++A);z=65536+((z&1023)<<10)|L&1023}if(D[f>>>2>>>0]=z,f+=4,f+4>g)break}return D[f>>>2>>>0]=0,f-_},un=s=>{for(var f=0,g=0;g<s.length;++g){var _=s.charCodeAt(g);55296<=_&&57343>=_&&++g,f+=4}return f},Br=(s,f)=>{var g=Qt[s];if(g===void 0)throw s=tr(s),g=ut(s),dt(s),new yt(f+" has unknown type "+g);return g},Dr=(s,f,g)=>{var _=[];return s=s.toWireType(_,g),_.length&&(j[f>>>2>>>0]=lt(_)),s},Xt=s=>{try{s()}catch(f){Ye(f)}};function ln(){var s=le,f={};for(let[g,_]of Object.entries(s))f[g]=typeof _=="function"?function(){Lt.push(g);try{return _.apply(null,arguments)}finally{E||(Lt.pop(),tt&&$t===1&&Lt.length===0&&($t=0,Xt(xn),typeof Fibers<"u"&&Fibers.Hb()))}}:_;return f}var $t=0,tt=null,zr=0,Lt=[],Mr={},Ur={},dn=0,pr=null,cn=[];function pn(){return new Promise((s,f)=>{pr={resolve:s,reject:f}})}function fn(){var s=Gt(65548),f=s+12;j[s>>>2>>>0]=f,j[s+4>>>2>>>0]=f+65536,f=Lt[0];var g=Mr[f];return g===void 0&&(g=dn++,Mr[f]=g,Ur[g]=f),D[s+8>>>2>>>0]=g,s}function mn(s){if(!E){if($t===0){var f=!1,g=!1;s((_=0)=>{if(!E&&(zr=_,f=!0,g)){$t=2,Xt(()=>_t(tt)),typeof Browser<"u"&&Browser.lb.sb&&Browser.lb.resume(),_=!1;try{var A=(0,le[Ur[D[tt+8>>>2>>>0]]])()}catch(J){A=J,_=!0}var z=!1;if(!tt){var L=pr;L&&(pr=null,(_?L.reject:L.resolve)(A),z=!0)}if(_&&!z)throw A}}),g=!0,f||($t=1,tt=fn(),typeof Browser<"u"&&Browser.lb.sb&&Browser.lb.pause(),Xt(()=>rr(tt)))}else $t===2?($t=0,Xt(gt),dt(tt),tt=null,cn.forEach(_=>{if(!E)try{_();try{M=M=_=M,r.onExit?.(_),E=!0,d(_,new Yt(_))}catch(A){A instanceof Yt||A=="unwind"||d(1,A)}}catch(A){A instanceof Yt||A=="unwind"||d(1,A)}})):Ye(`invalid state: ${$t}`);return zr}}function Wr(s){return mn(f=>{s().then(f)})}var Jt=[],hn={},fr=s=>{var f=hn[s];return f===void 0?ut(s):f},Nr=()=>typeof globalThis=="object"?globalThis:Function("return this")(),ht=s=>{var f=Jt.length;return Jt.push(s),f},Vr=(s,f)=>{for(var g=Array(s),_=0;_<s;++_)g[_]=Br(j[f+4*_>>>2>>>0],"parameter "+_);return g},mr=(s,f)=>Object.defineProperty(f,"name",{value:s});function yi(s){var f=Function;if(!(f instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof f} which is not a function`);var g=mr(f.name||"unknownFunctionName",function(){});return g.prototype=f.prototype,g=new g,s=f.apply(g,s),s instanceof Object?s:g}var rt=s=>s%4===0&&(s%100!==0||s%400===0),gn=[0,31,60,91,121,152,182,213,244,274,305,335],bt=[0,31,59,90,120,151,181,212,243,273,304,334],Hr=s=>{var f=Mt(s)+1,g=Gt(f);return g&&It(s,N,g,f),g},hr=[],nt=(s,f)=>{hr.length=0;for(var g;g=N[s++>>>0];){var _=g!=105;_&=g!=112,f+=_&&f%8?4:0,hr.push(g==112?j[f>>>2>>>0]:g==106?be[f>>>3]:g==105?D[f>>>2>>>0]:$e[f>>>3>>>0]),f+=_?8:4}return hr},er={},Qe=()=>{if(!it){var s={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:o||"./this.program"},f;for(f in er)er[f]===void 0?delete s[f]:s[f]=er[f];var g=[];for(f in s)g.push(`${f}=${s[f]}`);it=g}return it},it,yn=[null,[],[]],bn=[31,29,31,30,31,30,31,31,30,31,30,31],vn=[31,28,31,30,31,30,31,31,30,31,30,31];function wn(s){var f=Array(Mt(s)+1);return It(s,f,0,f.length),f}function $n(s,f,g,_){function A(P,ue,Ae){for(P=typeof P=="number"?P.toString():P||"";P.length<ue;)P=Ae[0]+P;return P}function z(P,ue){return A(P,ue,"0")}function L(P,ue){function Ae(Nt){return 0>Nt?-1:0<Nt?1:0}var Wt;return(Wt=Ae(P.getFullYear()-ue.getFullYear()))===0&&(Wt=Ae(P.getMonth()-ue.getMonth()))===0&&(Wt=Ae(P.getDate()-ue.getDate())),Wt}function J(P){switch(P.getDay()){case 0:return new Date(P.getFullYear()-1,11,29);case 1:return P;case 2:return new Date(P.getFullYear(),0,3);case 3:return new Date(P.getFullYear(),0,2);case 4:return new Date(P.getFullYear(),0,1);case 5:return new Date(P.getFullYear()-1,11,31);case 6:return new Date(P.getFullYear()-1,11,30)}}function Y(P){var ue=P.ab;for(P=new Date(new Date(P.bb+1900,0,1).getTime());0<ue;){var Ae=P.getMonth(),Wt=(rt(P.getFullYear())?bn:vn)[Ae];if(ue>Wt-P.getDate())ue-=Wt-P.getDate()+1,P.setDate(1),11>Ae?P.setMonth(Ae+1):(P.setMonth(0),P.setFullYear(P.getFullYear()+1));else{P.setDate(P.getDate()+ue);break}}return Ae=new Date(P.getFullYear()+1,0,4),ue=J(new Date(P.getFullYear(),0,4)),Ae=J(Ae),0>=L(ue,P)?0>=L(Ae,P)?P.getFullYear()+1:P.getFullYear():P.getFullYear()-1}s>>>=0,f>>>=0,g>>>=0,_>>>=0;var q=j[_+40>>>2>>>0];_={Db:D[_>>>2>>>0],Cb:D[_+4>>>2>>>0],hb:D[_+8>>>2>>>0],mb:D[_+12>>>2>>>0],ib:D[_+16>>>2>>>0],bb:D[_+20>>>2>>>0],Wa:D[_+24>>>2>>>0],ab:D[_+28>>>2>>>0],Gb:D[_+32>>>2>>>0],Bb:D[_+36>>>2>>>0],Eb:q?je(q):""},g=je(g),q={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ae in q)g=g.replace(new RegExp(ae,"g"),q[ae]);var me="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Se="January February March April May June July August September October November December".split(" ");q={"%a":P=>me[P.Wa].substring(0,3),"%A":P=>me[P.Wa],"%b":P=>Se[P.ib].substring(0,3),"%B":P=>Se[P.ib],"%C":P=>z((P.bb+1900)/100|0,2),"%d":P=>z(P.mb,2),"%e":P=>A(P.mb,2," "),"%g":P=>Y(P).toString().substring(2),"%G":P=>Y(P),"%H":P=>z(P.hb,2),"%I":P=>(P=P.hb,P==0?P=12:12<P&&(P-=12),z(P,2)),"%j":P=>{for(var ue=0,Ae=0;Ae<=P.ib-1;ue+=(rt(P.bb+1900)?bn:vn)[Ae++]);return z(P.mb+ue,3)},"%m":P=>z(P.ib+1,2),"%M":P=>z(P.Cb,2),"%n":()=>`
`,"%p":P=>0<=P.hb&&12>P.hb?"AM":"PM","%S":P=>z(P.Db,2),"%t":()=>"	","%u":P=>P.Wa||7,"%U":P=>z(Math.floor((P.ab+7-P.Wa)/7),2),"%V":P=>{var ue=Math.floor((P.ab+7-(P.Wa+6)%7)/7);if(2>=(P.Wa+371-P.ab-2)%7&&ue++,ue)ue==53&&(Ae=(P.Wa+371-P.ab)%7,Ae==4||Ae==3&&rt(P.bb)||(ue=1));else{ue=52;var Ae=(P.Wa+7-P.ab-1)%7;(Ae==4||Ae==5&&rt(P.bb%400-1))&&ue++}return z(ue,2)},"%w":P=>P.Wa,"%W":P=>z(Math.floor((P.ab+7-(P.Wa+6)%7)/7),2),"%y":P=>(P.bb+1900).toString().substring(2),"%Y":P=>P.bb+1900,"%z":P=>{P=P.Bb;var ue=0<=P;return P=Math.abs(P)/60,(ue?"+":"-")+("0000"+(P/60*100+P%60)).slice(-4)},"%Z":P=>P.Eb,"%%":()=>"%"},g=g.replace(/%%/g,"\0\0");for(ae in q)g.includes(ae)&&(g=g.replace(new RegExp(ae,"g"),q[ae](_)));return g=g.replace(/\0\0/g,"%"),ae=wn(g),ae.length>f?0:(B.set(ae,s>>>0),ae.length-1)}for(var _n=Array(256),gr=0;256>gr;++gr)_n[gr]=String.fromCharCode(gr);an=_n,yt=r.BindingError=class extends Error{constructor(s){super(s),this.name="BindingError"}},r.InternalError=class extends Error{constructor(s){super(s),this.name="InternalError"}},Object.assign(Or.prototype,{get(s){return this.$a[s]},has(s){return this.$a[s]!==void 0},kb(s){var f=this.nb.pop()||this.$a.length;return this.$a[f]=s,f},jb(s){this.$a[s]=void 0,this.nb.push(s)}}),Pe.$a.push({value:void 0},{value:null},{value:!0},{value:!1}),Pe.cb=Pe.$a.length,r.count_emval_handles=()=>{for(var s=0,f=Pe.cb;f<Pe.$a.length;++f)Pe.$a[f]!==void 0&&++s;return s};var bi={ia:function(s,f,g){return Wr(async()=>{await r.wb(s,f,g)})},a:function(s,f,g){throw s>>>=0,new Vt(s).kb(f>>>0,g>>>0),lr=s,Zt++,lr},w:function(){return 0},ca:function(){},P:function(){},R:function(){},J:function(){return 0},aa:function(){},X:function(){},$:function(){},D:function(){},Q:function(){},N:function(){},ba:function(){},O:function(){},G:function(s,f,g,_,A){f>>>=0,f=ut(f);var z=f.indexOf("u")!=-1;z&&(A=(1n<<64n)-1n),Ze(s>>>0,{name:f,fromWireType:L=>L,toWireType:function(L,J){if(typeof J!="bigint"&&typeof J!="number")throw new TypeError(`Cannot convert "${Ir(J)}" to ${this.name}`);if(J<_||J>A)throw new TypeError(`Passing a number "${Ir(J)}" from JS side to C/C++ side to an argument of type "${f}", which is outside the valid range [${_}, ${A}]!`);return J},argPackAdvance:8,readValueFromPointer:Er(f,g>>>0,!z),eb:null})},ga:function(s,f,g,_){f=ut(f>>>0),Ze(s>>>0,{name:f,fromWireType:function(A){return!!A},toWireType:function(A,z){return z?g:_},argPackAdvance:8,readValueFromPointer:function(A){return this.fromWireType(N[A>>>0])},eb:null})},fa:function(s,f){f=ut(f>>>0),Ze(s>>>0,{name:f,fromWireType:g=>{var _=_e(g);return kr(g),_},toWireType:(g,_)=>lt(_),argPackAdvance:8,readValueFromPointer:dr,eb:null})},F:function(s,f,g){f=ut(f>>>0),Ze(s>>>0,{name:f,fromWireType:_=>_,toWireType:(_,A)=>A,argPackAdvance:8,readValueFromPointer:Pr(f,g>>>0),eb:null})},t:function(s,f,g,_,A){if(s>>>=0,g>>>=0,f=ut(f>>>0),A===-1&&(A=4294967295),A=J=>J,_===0){var z=32-8*g;A=J=>J<<z>>>z}var L=f.includes("unsigned")?function(J,Y){return Y>>>0}:function(J,Y){return Y};Ze(s,{name:f,fromWireType:A,toWireType:L,argPackAdvance:8,readValueFromPointer:Er(f,g,_!==0),eb:null})},n:function(s,f,g){function _(z){return new A(B.buffer,j[z+4>>>2>>>0],j[z>>>2>>>0])}var A=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][f];g=ut(g>>>0),Ze(s>>>0,{name:g,fromWireType:_,argPackAdvance:8,readValueFromPointer:_},{tb:!0})},H:function(s,f){f=ut(f>>>0);var g=f==="std::string";Ze(s>>>0,{name:f,fromWireType:function(_){var A=j[_>>>2>>>0],z=_+4;if(g)for(var L=z,J=0;J<=A;++J){var Y=z+J;if(J==A||N[Y>>>0]==0){if(L=je(L,Y-L),q===void 0)var q=L;else q+=String.fromCharCode(0),q+=L;L=Y+1}}else{for(q=Array(A),J=0;J<A;++J)q[J]=String.fromCharCode(N[z+J>>>0]);q=q.join("")}return dt(_),q},toWireType:function(_,A){A instanceof ArrayBuffer&&(A=new Uint8Array(A));var z=typeof A=="string";if(!(z||A instanceof Uint8Array||A instanceof Uint8ClampedArray||A instanceof Int8Array))throw new yt("Cannot pass non-string to std::string");var L=g&&z?Mt(A):A.length,J=Gt(4+L+1),Y=J+4;if(j[J>>>2>>>0]=L,g&&z)It(A,N,Y,L+1);else if(z)for(z=0;z<L;++z){var q=A.charCodeAt(z);if(255<q)throw dt(Y),new yt("String has UTF-16 code units that do not fit in 8 bits");N[Y+z>>>0]=q}else for(z=0;z<L;++z)N[Y+z>>>0]=A[z];return _!==null&&_.push(dt,J),J},argPackAdvance:8,readValueFromPointer:mi,eb(_){dt(_)}})},y:function(s,f,g){if(f>>>=0,g>>>=0,g=ut(g),f===2)var _=hi,A=fe,z=cr,L=()=>X,J=1;else f===4&&(_=sn,A=gi,z=un,L=()=>j,J=2);Ze(s>>>0,{name:g,fromWireType:Y=>{for(var q=j[Y>>>2>>>0],ae=L(),me,Se=Y+4,P=0;P<=q;++P){var ue=Y+4+P*f;(P==q||ae[ue>>>J]==0)&&(Se=_(Se,ue-Se),me===void 0?me=Se:(me+=String.fromCharCode(0),me+=Se),Se=ue+f)}return dt(Y),me},toWireType:(Y,q)=>{if(typeof q!="string")throw new yt(`Cannot pass non-string to C++ string type ${g}`);var ae=z(q),me=Gt(4+ae+f);return j[me>>>2]=ae>>J,A(q,me+4,ae+f),Y!==null&&Y.push(dt,me),me},argPackAdvance:8,readValueFromPointer:dr,eb(Y){dt(Y)}})},ha:function(s,f){f=ut(f>>>0),Ze(s>>>0,{ub:!0,name:f,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},da:()=>1,s:function(s,f,g){return f>>>=0,g>>>=0,s=_e(s>>>0),f=Br(f,"emval::as"),Dr(f,g,s)},v:function(s){return s>>>=0,Wr(()=>(s=_e(s),s.then(lt)))},o:function(s,f,g,_){return g>>>=0,_>>>=0,s=Jt[s>>>0],f=_e(f>>>0),s(null,f,g,_)},k:function(s,f,g,_,A){return g>>>=0,_>>>=0,A>>>=0,s=Jt[s>>>0],f=_e(f>>>0),g=fr(g),s(f,f[g],_,A)},b:kr,z:function(s,f){return f>>>=0,s=_e(s>>>0),f=_e(f),s==f},m:function(s){return s>>>=0,s===0?lt(Nr()):(s=fr(s),lt(Nr()[s]))},i:function(s,f,g){f=Vr(s,f>>>0);var _=f.shift();s--;var A=`return function (obj, func, destructorsRef, args) {
`,z=0,L=[];g===0&&L.push("obj");for(var J=["retType"],Y=[_],q=0;q<s;++q)L.push("arg"+q),J.push("argType"+q),Y.push(f[q]),A+=`  var arg${q} = argType${q}.readValueFromPointer(args${z?"+"+z:""});
`,z+=f[q].argPackAdvance;for(A+=`  var rv = ${g===1?"new func":"func.call"}(${L.join(", ")});
`,q=0;q<s;++q)f[q].deleteObject&&(A+=`  argType${q}.deleteObject(arg${q});
`);return _.ub||(J.push("emval_returnValue"),Y.push(Dr),A+=`  return emval_returnValue(retType, destructorsRef, rv);
`),J.push(A+`};
`),s=yi(J).apply(null,Y),g=`methodCaller<(${f.map(ae=>ae.name).join(", ")}) => ${_.name}>`,ht(mr(g,s))},r:function(s,f){return f>>>=0,s=_e(s>>>0),f=_e(f),lt(s[f])},e:function(s){s>>>=0,4<s&&(Pe.get(s).pb+=1)},u:function(){return lt([])},l:function(s){s=_e(s>>>0);for(var f=Array(s.length),g=0;g<s.length;g++)f[g]=s[g];return lt(f)},d:function(s){return lt(fr(s>>>0))},j:function(){return lt({})},h:function(s){s>>>=0;for(var f=_e(s);f.length;){var g=f.pop();f.pop()(g)}kr(s)},g:function(s,f,g){f>>>=0,g>>>=0,s=_e(s>>>0),f=_e(f),g=_e(g),s[f]=g},c:function(s,f){return f>>>=0,s=Br(s>>>0,"_emval_take_value"),s=s.readValueFromPointer(f),lt(s)},U:function(s,f){s=-9007199254740992>s||9007199254740992<s?NaN:Number(s),f>>>=0,s=new Date(1e3*s),D[f>>>2>>>0]=s.getUTCSeconds(),D[f+4>>>2>>>0]=s.getUTCMinutes(),D[f+8>>>2>>>0]=s.getUTCHours(),D[f+12>>>2>>>0]=s.getUTCDate(),D[f+16>>>2>>>0]=s.getUTCMonth(),D[f+20>>>2>>>0]=s.getUTCFullYear()-1900,D[f+24>>>2>>>0]=s.getUTCDay(),D[f+28>>>2>>>0]=(s.getTime()-Date.UTC(s.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},V:function(s,f){s=-9007199254740992>s||9007199254740992<s?NaN:Number(s),f>>>=0,s=new Date(1e3*s),D[f>>>2>>>0]=s.getSeconds(),D[f+4>>>2>>>0]=s.getMinutes(),D[f+8>>>2>>>0]=s.getHours(),D[f+12>>>2>>>0]=s.getDate(),D[f+16>>>2>>>0]=s.getMonth(),D[f+20>>>2>>>0]=s.getFullYear()-1900,D[f+24>>>2>>>0]=s.getDay(),D[f+28>>>2>>>0]=(rt(s.getFullYear())?gn:bt)[s.getMonth()]+s.getDate()-1|0,D[f+36>>>2>>>0]=-(60*s.getTimezoneOffset());var g=new Date(s.getFullYear(),6,1).getTimezoneOffset(),_=new Date(s.getFullYear(),0,1).getTimezoneOffset();D[f+32>>>2>>>0]=(g!=_&&s.getTimezoneOffset()==Math.min(_,g))|0},W:function(s){s>>>=0;var f=new Date(D[s+20>>>2>>>0]+1900,D[s+16>>>2>>>0],D[s+12>>>2>>>0],D[s+8>>>2>>>0],D[s+4>>>2>>>0],D[s>>>2>>>0],0),g=D[s+32>>>2>>>0],_=f.getTimezoneOffset(),A=new Date(f.getFullYear(),6,1).getTimezoneOffset(),z=new Date(f.getFullYear(),0,1).getTimezoneOffset(),L=Math.min(z,A);return 0>g?D[s+32>>>2>>>0]=+(A!=z&&L==_):0<g!=(L==_)&&(A=Math.max(z,A),f.setTime(f.getTime()+6e4*((0<g?L:A)-_))),D[s+24>>>2>>>0]=f.getDay(),D[s+28>>>2>>>0]=(rt(f.getFullYear())?gn:bt)[f.getMonth()]+f.getDate()-1|0,D[s>>>2>>>0]=f.getSeconds(),D[s+4>>>2>>>0]=f.getMinutes(),D[s+8>>>2>>>0]=f.getHours(),D[s+12>>>2>>>0]=f.getDate(),D[s+16>>>2>>>0]=f.getMonth(),D[s+20>>>2>>>0]=f.getYear(),s=f.getTime(),isNaN(s)?(D[Sn()>>>2>>>0]=61,s=-1):s/=1e3,BigInt(s)},S:function(){return-52},T:function(){},L:function(s,f,g){function _(Y){return(Y=Y.toTimeString().match(/\(([A-Za-z ]+)\)$/))?Y[1]:"GMT"}g>>>=0;var A=new Date().getFullYear(),z=new Date(A,0,1),L=new Date(A,6,1);A=z.getTimezoneOffset();var J=L.getTimezoneOffset();j[s>>>0>>>2>>>0]=60*Math.max(A,J),D[f>>>0>>>2>>>0]=+(A!=J),s=_(z),f=_(L),s=Hr(s),f=Hr(f),J<A?(j[g>>>2>>>0]=s,j[g+4>>>2>>>0]=f):(j[g>>>2>>>0]=f,j[g+4>>>2>>>0]=s)},A:()=>{Ye("")},f:function(s,f,g){return s>>>=0,f=nt(f>>>0,g>>>0),zt[s].apply(null,f)},I:function(s,f,g){return s>>>=0,f=nt(f>>>0,g>>>0),zt[s].apply(null,f)},E:()=>Date.now(),M:function(){return 4294901760},q:()=>performance.now(),K:function(s){s>>>=0;var f=N.length;if(4294901760<s)return!1;for(var g=1;4>=g;g*=2){var _=f*(1+.2/g);_=Math.min(_,s+100663296);var A=Math;_=Math.max(s,_);e:{A=(A.min.call(A,4294901760,_+(65536-_%65536)%65536)-T.buffer.byteLength+65535)/65536;try{T.grow(A),Ge();var z=1;break e}catch{}z=void 0}if(z)return!0}return!1},Z:function(s,f){s>>>=0,f>>>=0;var g=0;return Qe().forEach((_,A)=>{var z=f+g;for(A=j[s+4*A>>>2>>>0]=z,z=0;z<_.length;++z)B[A++>>>0>>>0]=_.charCodeAt(z);B[A>>>0>>>0]=0,g+=_.length+1}),0},_:function(s,f){s>>>=0,f>>>=0;var g=Qe();j[s>>>2>>>0]=g.length;var _=0;return g.forEach(A=>_+=A.length+1),j[f>>>2>>>0]=_,0},x:()=>52,C:function(){return 52},Y:function(){return 70},B:function(s,f,g,_){f>>>=0,g>>>=0,_>>>=0;for(var A=0,z=0;z<g;z++){var L=j[f>>>2>>>0],J=j[f+4>>>2>>>0];f+=8;for(var Y=0;Y<J;Y++){var q=N[L+Y>>>0],ae=yn[s];q===0||q===10?((s===1?I:S)(Ht(ae,0)),ae.length=0):ae.push(q)}A+=J}return j[_>>>2>>>0]=A,0},ea:$n,p:function(s,f,g,_){return $n(s>>>0,f>>>0,g>>>0,_>>>0)}},le=function(){function s(g){return le=g.exports,le=ln(),le=Cn(),T=le.ja,Ge(),Ee.unshift(le.ka),ve--,ve==0&&(Ve!==null&&(clearInterval(Ve),Ve=null),Me&&(g=Me,Me=null,g())),le}var f={a:bi};if(ve++,r.instantiateWasm)try{return r.instantiateWasm(f,s)}catch(g){S(`Module.instantiateWasm callback failed with error: ${g}`),a(g)}return Dt(f,function(g){s(g.instance)}).catch(a),{}}();r._OrtInit=(s,f)=>(r._OrtInit=le.la)(s,f),r._OrtGetLastError=(s,f)=>(r._OrtGetLastError=le.ma)(s,f),r._OrtCreateSessionOptions=(s,f,g,_,A,z,L,J,Y,q)=>(r._OrtCreateSessionOptions=le.na)(s,f,g,_,A,z,L,J,Y,q),r._OrtAppendExecutionProvider=(s,f)=>(r._OrtAppendExecutionProvider=le.oa)(s,f),r._OrtAddFreeDimensionOverride=(s,f,g)=>(r._OrtAddFreeDimensionOverride=le.pa)(s,f,g),r._OrtAddSessionConfigEntry=(s,f,g)=>(r._OrtAddSessionConfigEntry=le.qa)(s,f,g),r._OrtReleaseSessionOptions=s=>(r._OrtReleaseSessionOptions=le.ra)(s),r._OrtCreateSession=(s,f,g)=>(r._OrtCreateSession=le.sa)(s,f,g),r._OrtReleaseSession=s=>(r._OrtReleaseSession=le.ta)(s),r._OrtGetInputOutputCount=(s,f,g)=>(r._OrtGetInputOutputCount=le.ua)(s,f,g),r._OrtGetInputName=(s,f)=>(r._OrtGetInputName=le.va)(s,f),r._OrtGetOutputName=(s,f)=>(r._OrtGetOutputName=le.wa)(s,f),r._OrtFree=s=>(r._OrtFree=le.xa)(s),r._OrtCreateTensor=(s,f,g,_,A,z)=>(r._OrtCreateTensor=le.ya)(s,f,g,_,A,z),r._OrtGetTensorData=(s,f,g,_,A)=>(r._OrtGetTensorData=le.za)(s,f,g,_,A),r._OrtReleaseTensor=s=>(r._OrtReleaseTensor=le.Aa)(s),r._OrtCreateRunOptions=(s,f,g,_)=>(r._OrtCreateRunOptions=le.Ba)(s,f,g,_),r._OrtAddRunConfigEntry=(s,f,g)=>(r._OrtAddRunConfigEntry=le.Ca)(s,f,g),r._OrtReleaseRunOptions=s=>(r._OrtReleaseRunOptions=le.Da)(s),r._OrtCreateBinding=s=>(r._OrtCreateBinding=le.Ea)(s),r._OrtBindInput=(s,f,g)=>(r._OrtBindInput=le.Fa)(s,f,g),r._OrtBindOutput=(s,f,g,_)=>(r._OrtBindOutput=le.Ga)(s,f,g,_),r._OrtClearBoundOutputs=s=>(r._OrtClearBoundOutputs=le.Ha)(s),r._OrtReleaseBinding=s=>(r._OrtReleaseBinding=le.Ia)(s),r._OrtRunWithBinding=(s,f,g,_,A)=>(r._OrtRunWithBinding=le.Ja)(s,f,g,_,A),r._OrtRun=(s,f,g,_,A,z,L,J)=>(r._OrtRun=le.Ka)(s,f,g,_,A,z,L,J),r._OrtEndProfiling=s=>(r._OrtEndProfiling=le.La)(s),r._JsepOutput=(s,f,g)=>(r._JsepOutput=le.Ma)(s,f,g),r._JsepGetNodeName=s=>(r._JsepGetNodeName=le.Na)(s);var Sn=()=>(Sn=le.Oa)(),Gt=r._malloc=s=>(Gt=r._malloc=le.Pa)(s),dt=r._free=s=>(dt=r._free=le.Qa)(s),tr=s=>(tr=le.Ra)(s),yr=()=>(yr=le.Ta)(),br=s=>(br=le.Ua)(s),Lr=s=>(Lr=le.Va)(s),rr=s=>(rr=le.Xa)(s),xn=()=>(xn=le.Ya)(),_t=s=>(_t=le.Za)(s),gt=()=>(gt=le._a)();r.___start_em_js=915571,r.___stop_em_js=915732;function Cn(){var s=le;s=Object.assign({},s);var f=_=>()=>_()>>>0,g=_=>A=>_(A)>>>0;return s.Oa=f(s.Oa),s.Pa=g(s.Pa),s.Ra=g(s.Ra),s.Ta=f(s.Ta),s.Va=g(s.Va),s}r.stackAlloc=Lr,r.stackSave=yr,r.stackRestore=br,r.UTF8ToString=je,r.stringToUTF8=(s,f,g)=>It(s,N,f,g),r.lengthBytesUTF8=Mt;var Ut;Me=function s(){Ut||Gr(),Ut||(Me=s)};function Gr(){if(!(0<ve)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;){var s=r.preRun.shift();ge.unshift(s)}for(;0<ge.length;)ge.shift()(r);if(!(0<ve||Ut||(Ut=!0,r.calledRun=!0,E))){for(;0<Ee.length;)Ee.shift()(r);for(n(r);0<pe.length;)pe.shift()(r)}}}return Gr(),t.ready}})();typeof xo=="object"&&typeof Di=="object"?Di.exports=So:typeof define=="function"&&define.amd&&define([],()=>So)});var Io=vr(()=>{});var Ao=vr(()=>{});var To={};ir(To,{cpus:()=>Ld});var Ld,Eo=ee(()=>{Ld=void 0});var Po=vr((ko,zi)=>{"use strict";var Oo=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return $e.buffer!=pe.buffer&&Re(),pe}function n(){return $e.buffer!=pe.buffer&&Re(),ve}function a(){return $e.buffer!=pe.buffer&&Re(),Ve}function u(){return $e.buffer!=pe.buffer&&Re(),Me}function o(){return $e.buffer!=pe.buffer&&Re(),Ye}function d(){return $e.buffer!=pe.buffer&&Re(),F}function p(){return $e.buffer!=pe.buffer&&Re(),ie}function m(){return $e.buffer!=pe.buffer&&Re(),st}var l=t,y,b;l.ready=new Promise((i,c)=>{y=i,b=c}),l.mountExternalData=(i,c)=>{(l.Fb||(l.Fb=new Map)).set(i,c)},l.unmountExternalData=()=>{delete l.Fb},l.jsepInit=(i,c,h,w,C,k,U,G)=>{l.rc=i,l.$b=c,l.bc=h,l.Ob=w,l.ac=C,l.eb=k,l.cc=U,l.dc=G,c=(Q,Z,oe)=>(...ye)=>{let Ce=gt,R=Z?.();ye=Q(...ye);let de=Z?.();return R!==de&&(Q=de,oe(R),Z=oe=null),gt!=Ce?A():ye},h=Q=>async(...Z)=>{try{if(l.Eb)throw Error("Session already started");let oe=l.Eb={fc:Z[0],errors:[]},ye=await Q(...Z);if(l.Eb!==oe)throw Error("Session mismatch");i.flush();let Ce=oe.errors;if(0<Ce.length){let R=await Promise.all(Ce);if(R=R.filter(de=>de),0<R.length)throw Error(R.join(`
`))}return ye}finally{l.Eb=null}},l._OrtCreateSession=c(l._OrtCreateSession,()=>l._OrtCreateSession,Q=>l._OrtCreateSession=Q),l._OrtRun=h(c(l._OrtRun,()=>l._OrtRun,Q=>l._OrtRun=Q)),l._OrtRunWithBinding=h(c(l._OrtRunWithBinding,()=>l._OrtRunWithBinding,Q=>l._OrtRunWithBinding=Q)),l._OrtBindInput=c(l._OrtBindInput,()=>l._OrtBindInput,Q=>l._OrtBindInput=Q),l.jsepRegisterBuffer=(Q,Z,oe,ye)=>i.registerBuffer(Q,Z,oe,ye),l.jsepUnregisterBuffers=Q=>{i.unregisterBuffers(Q)},l.jsepGetBuffer=Q=>i.getBuffer(Q),l.jsepCreateDownloader=(Q,Z,oe)=>i.createDownloader(Q,Z,oe),l.jsepOnRunStart=()=>i.onRunStart()};var v=Object.assign({},l),$="./this.program",x=(i,c)=>{throw c},O=typeof window=="object",I=typeof importScripts=="function",S=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",T=l.ENVIRONMENT_IS_PTHREAD||!1,E="";function M(i){return l.locateFile?l.locateFile(i,E):E+i}var B,N,H;if(S){var X=(Pi(),Ft(ki)),D=(Bi(),Ft(Ri));E=I?D.dirname(E)+"/":__dirname+"/",B=(c,h)=>(c=Mt(c)?new URL(c):D.normalize(c),X.readFileSync(c,h?void 0:"utf8")),H=c=>(c=B(c,!0),c.buffer||(c=new Uint8Array(c)),c),N=(c,h,w,C=!0)=>{c=Mt(c)?new URL(c):D.normalize(c),X.readFile(c,C?void 0:"utf8",(k,U)=>{k?w(k):h(C?U.buffer:U)})},!l.thisProgram&&1<process.argv.length&&($=process.argv[1].replace(/\\/g,"/")),process.argv.slice(2),x=(c,h)=>{throw process.exitCode=c,h},l.inspect=()=>"[Emscripten Module object]";let i;try{i=Io()}catch(c){throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),c}global.Worker=i.Worker}else(O||I)&&(I?E=self.location.href:typeof document<"u"&&document.currentScript&&(E=document.currentScript.src),typeof e<"u"&&e&&(E=e),E.indexOf("blob:")!==0?E=E.substr(0,E.replace(/[?#].*/,"").lastIndexOf("/")+1):E="",S||(B=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.send(null),c.responseText},I&&(H=i=>{var c=new XMLHttpRequest;return c.open("GET",i,!1),c.responseType="arraybuffer",c.send(null),new Uint8Array(c.response)}),N=(i,c,h)=>{var w=new XMLHttpRequest;w.open("GET",i,!0),w.responseType="arraybuffer",w.onload=()=>{w.status==200||w.status==0&&w.response?c(w.response):h()},w.onerror=h,w.send(null)}));S&&typeof performance>"u"&&(global.performance=Ao().performance);var j=console.log.bind(console),se=console.error.bind(console);S&&(j=(...i)=>X.writeSync(1,i.join(" ")+`
`),se=(...i)=>X.writeSync(2,i.join(" ")+`
`));var be=j,re=se;Object.assign(l,v),v=null,typeof WebAssembly!="object"&&Ht("no native wasm support detected");var $e,Ge,ge=!1,Ee,pe,ve,Ve,Me,Ye,F,ie,he,et,st;function Re(){var i=$e.buffer;l.HEAP8=pe=new Int8Array(i),l.HEAP16=Ve=new Int16Array(i),l.HEAPU8=ve=new Uint8Array(i),l.HEAPU16=Me=new Uint16Array(i),l.HEAP32=Ye=new Int32Array(i),l.HEAPU32=F=new Uint32Array(i),l.HEAPF32=ie=new Float32Array(i),l.HEAPF64=st=new Float64Array(i),l.HEAP64=he=new BigInt64Array(i),l.HEAPU64=et=new BigUint64Array(i)}var Fe=16777216;if(T)$e=l.wasmMemory;else if(l.wasmMemory)$e=l.wasmMemory;else if($e=new WebAssembly.Memory({initial:Fe/65536,maximum:65536,shared:!0}),!($e.buffer instanceof SharedArrayBuffer))throw re("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),S&&re("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");Re(),Fe=$e.buffer.byteLength;var Dt=[],zt=[],Yt=[],Vt=0,lr=null,Zt=null;function Cr(){if(Vt--,Vt==0&&(lr!==null&&(clearInterval(lr),lr=null),Zt)){var i=Zt;Zt=null,i()}}function Ht(i){throw i="Aborted("+i+")",re(i),ge=!0,Ee=1,i=new WebAssembly.RuntimeError(i+". Build with -sASSERTIONS for more info."),b(i),i}var je=i=>i.startsWith("data:application/octet-stream;base64,"),Mt=i=>i.startsWith("file://"),It;It="ort-wasm-simd-threaded.wasm",je(It)||(It=M(It));function Ir(i){if(H)return H(i);throw"both async and sync fetching of the wasm failed"}function an(i){if(O||I){if(typeof fetch=="function"&&!Mt(i))return fetch(i,{credentials:"same-origin"}).then(c=>{if(!c.ok)throw"failed to load wasm binary file at '"+i+"'";return c.arrayBuffer()}).catch(()=>Ir(i));if(N)return new Promise((c,h)=>{N(i,w=>c(new Uint8Array(w)),h)})}return Promise.resolve().then(()=>Ir(i))}function ut(i,c,h){return an(i).then(w=>WebAssembly.instantiate(w,c)).then(w=>w).then(h,w=>{re(`failed to asynchronously prepare wasm: ${w}`),Ht(w)})}function Ar(i,c){var h=It;return typeof WebAssembly.instantiateStreaming!="function"||je(h)||Mt(h)||S||typeof fetch!="function"?ut(h,i,c):fetch(h,{credentials:"same-origin"}).then(w=>WebAssembly.instantiateStreaming(w,i).then(c,function(C){return re(`wasm streaming compile failed: ${C}`),re("falling back to ArrayBuffer instantiation"),ut(h,i,c)}))}var Qt={904332:(i,c,h,w)=>{if(typeof l>"u"||!l.Fb)return 1;if(i=Pe(i>>>0),i.startsWith("./")&&(i=i.substring(2)),i=l.Fb.get(i),!i)return 2;if(c>>>=0,h>>>=0,w>>>=0,c+h>i.byteLength)return 3;try{return n().set(i.subarray(c,c+h),w>>>0),0}catch{return 4}},904833:i=>l.$b(i),904866:i=>l.bc(i),904898:(i,c,h)=>{l.Ob(i,c,h,!0)},904937:(i,c,h)=>{l.Ob(i,c,h)},904970:i=>{l.eb("Abs",i,void 0)},905021:i=>{l.eb("Neg",i,void 0)},905072:i=>{l.eb("Floor",i,void 0)},905125:i=>{l.eb("Ceil",i,void 0)},905177:i=>{l.eb("Reciprocal",i,void 0)},905235:i=>{l.eb("Sqrt",i,void 0)},905287:i=>{l.eb("Exp",i,void 0)},905338:i=>{l.eb("Erf",i,void 0)},905389:i=>{l.eb("Sigmoid",i,void 0)},905444:(i,c,h)=>{l.eb("HardSigmoid",i,{alpha:c,beta:h})},905523:i=>{l.eb("Log",i,void 0)},905574:i=>{l.eb("Sin",i,void 0)},905625:i=>{l.eb("Cos",i,void 0)},905676:i=>{l.eb("Tan",i,void 0)},905727:i=>{l.eb("Asin",i,void 0)},905779:i=>{l.eb("Acos",i,void 0)},905831:i=>{l.eb("Atan",i,void 0)},905883:i=>{l.eb("Sinh",i,void 0)},905935:i=>{l.eb("Cosh",i,void 0)},905987:i=>{l.eb("Asinh",i,void 0)},906040:i=>{l.eb("Acosh",i,void 0)},906093:i=>{l.eb("Atanh",i,void 0)},906146:i=>{l.eb("Tanh",i,void 0)},906198:i=>{l.eb("Not",i,void 0)},906249:(i,c,h)=>{l.eb("Clip",i,{min:c,max:h})},906318:i=>{l.eb("Clip",i,void 0)},906370:(i,c)=>{l.eb("Elu",i,{alpha:c})},906428:i=>{l.eb("Relu",i,void 0)},906480:(i,c)=>{l.eb("LeakyRelu",i,{alpha:c})},906544:(i,c)=>{l.eb("ThresholdedRelu",i,{alpha:c})},906614:(i,c)=>{l.eb("Cast",i,{to:c})},906672:i=>{l.eb("Add",i,void 0)},906723:i=>{l.eb("Sub",i,void 0)},906774:i=>{l.eb("Mul",i,void 0)},906825:i=>{l.eb("Div",i,void 0)},906876:i=>{l.eb("Pow",i,void 0)},906927:i=>{l.eb("Equal",i,void 0)},906980:i=>{l.eb("Greater",i,void 0)},907035:i=>{l.eb("GreaterOrEqual",i,void 0)},907097:i=>{l.eb("Less",i,void 0)},907149:i=>{l.eb("LessOrEqual",i,void 0)},907208:(i,c,h,w,C)=>{l.eb("ReduceMean",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},907367:(i,c,h,w,C)=>{l.eb("ReduceMax",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},907525:(i,c,h,w,C)=>{l.eb("ReduceMin",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},907683:(i,c,h,w,C)=>{l.eb("ReduceProd",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},907842:(i,c,h,w,C)=>{l.eb("ReduceSum",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},908e3:(i,c,h,w,C)=>{l.eb("ReduceL1",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},908157:(i,c,h,w,C)=>{l.eb("ReduceL2",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},908314:(i,c,h,w,C)=>{l.eb("ReduceLogSum",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},908475:(i,c,h,w,C)=>{l.eb("ReduceSumSquare",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},908639:(i,c,h,w,C)=>{l.eb("ReduceLogSumExp",i,{keepDims:!!c,noopWithEmptyAxes:!!h,axes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},908803:i=>{l.eb("Where",i,void 0)},908856:(i,c,h)=>{l.eb("Transpose",i,{perm:c?Array.from(o().subarray(c>>>0,h>>>0)):[]})},908964:(i,c,h,w,C,k,U,G,Q,Z,oe,ye,Ce,R,de)=>{l.eb("ConvTranspose",i,{format:Q?"NHWC":"NCHW",autoPad:c,dilations:[h],group:w,kernel_shape:[C],pads:[k,U],strides:[G],wIsConst:()=>!!r()[Z>>>0],outputPadding:oe?Array.from(o().subarray(oe>>>0,ye>>>0)):[],outputShape:Ce?Array.from(o().subarray(Ce>>>0,R>>>0)):[],activation:Pe(de)})},909366:(i,c,h,w,C,k,U,G,Q,Z,oe,ye,Ce,R)=>{l.eb("ConvTranspose",i,{format:G?"NHWC":"NCHW",autoPad:c,dilations:Array.from(o().subarray(h>>>0,(h>>>0)+2>>>0)),group:w,kernelShape:Array.from(o().subarray(C>>>0,(C>>>0)+2>>>0)),pads:Array.from(o().subarray(k>>>0,(k>>>0)+4>>>0)),strides:Array.from(o().subarray(U>>>0,(U>>>0)+2>>>0)),wIsConst:()=>!!r()[Q>>>0],outputPadding:Z?Array.from(o().subarray(Z>>>0,oe>>>0)):[],outputShape:ye?Array.from(o().subarray(ye>>>0,Ce>>>0)):[],activation:Pe(R)})},909931:(i,c,h,w,C,k,U,G,Q,Z,oe,ye,Ce,R,de)=>{l.eb("ConvTranspose",i,{format:Q?"NHWC":"NCHW",autoPad:c,dilations:[h],group:w,kernel_shape:[C],pads:[k,U],strides:[G],wIsConst:()=>!!r()[Z>>>0],outputPadding:oe?Array.from(o().subarray(oe>>>0,ye>>>0)):[],outputShape:Ce?Array.from(o().subarray(Ce>>>0,R>>>0)):[],activation:Pe(de)})},910333:(i,c,h,w,C,k,U,G,Q,Z,oe,ye,Ce,R)=>{l.eb("ConvTranspose",i,{format:G?"NHWC":"NCHW",autoPad:c,dilations:Array.from(o().subarray(h>>>0,(h>>>0)+2>>>0)),group:w,kernelShape:Array.from(o().subarray(C>>>0,(C>>>0)+2>>>0)),pads:Array.from(o().subarray(k>>>0,(k>>>0)+4>>>0)),strides:Array.from(o().subarray(U>>>0,(U>>>0)+2>>>0)),wIsConst:()=>!!r()[Q>>>0],outputPadding:Z?Array.from(o().subarray(Z>>>0,oe>>>0)):[],outputShape:ye?Array.from(o().subarray(ye>>>0,Ce>>>0)):[],activation:Pe(R)})},910898:(i,c)=>{l.eb("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},910989:(i,c,h,w,C,k,U,G,Q,Z,oe,ye,Ce,R,de,Oe)=>{l.eb("AveragePool",i,{format:Oe?"NHWC":"NCHW",auto_pad:c,ceil_mode:h,count_include_pad:w,storage_order:C,dilations:[k,U],kernel_shape:[G,Q],pads:[Z,oe,ye,Ce],strides:[R,de]})},911273:(i,c)=>{l.eb("GlobalAveragePool",i,{format:c?"NHWC":"NCHW"})},911364:(i,c,h,w,C,k,U,G,Q,Z,oe,ye,Ce,R,de,Oe)=>{l.eb("AveragePool",i,{format:Oe?"NHWC":"NCHW",auto_pad:c,ceil_mode:h,count_include_pad:w,storage_order:C,dilations:[k,U],kernel_shape:[G,Q],pads:[Z,oe,ye,Ce],strides:[R,de]})},911648:(i,c)=>{l.eb("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},911735:(i,c,h,w,C,k,U,G,Q,Z,oe,ye,Ce,R,de,Oe)=>{l.eb("MaxPool",i,{format:Oe?"NHWC":"NCHW",auto_pad:c,ceil_mode:h,count_include_pad:w,storage_order:C,dilations:[k,U],kernel_shape:[G,Q],pads:[Z,oe,ye,Ce],strides:[R,de]})},912015:(i,c)=>{l.eb("GlobalMaxPool",i,{format:c?"NHWC":"NCHW"})},912102:(i,c,h,w,C,k,U,G,Q,Z,oe,ye,Ce,R,de,Oe)=>{l.eb("MaxPool",i,{format:Oe?"NHWC":"NCHW",auto_pad:c,ceil_mode:h,count_include_pad:w,storage_order:C,dilations:[k,U],kernel_shape:[G,Q],pads:[Z,oe,ye,Ce],strides:[R,de]})},912382:(i,c,h,w,C)=>{l.eb("Gemm",i,{alpha:c,beta:h,transA:w,transB:C})},912486:i=>{l.eb("MatMul",i,void 0)},912540:(i,c,h,w)=>{l.eb("ArgMax",i,{keepDims:!!c,selectLastIndex:!!h,axis:w})},912648:(i,c,h,w)=>{l.eb("ArgMin",i,{keepDims:!!c,selectLastIndex:!!h,axis:w})},912756:(i,c)=>{l.eb("Softmax",i,{axis:c})},912819:(i,c)=>{l.eb("Concat",i,{axis:c})},912879:(i,c,h,w,C)=>{l.eb("Split",i,{axis:c,numOutputs:h,splitSizes:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},913019:i=>{l.eb("Expand",i,void 0)},913073:(i,c)=>{l.eb("Gather",i,{axis:Number(c)})},913144:(i,c)=>{l.eb("GatherElements",i,{axis:Number(c)})},913223:(i,c,h,w,C,k,U,G,Q,Z,oe)=>{l.eb("Resize",i,{antialias:c,axes:h?Array.from(o().subarray(h>>>0,w>>>0)):[],coordinateTransformMode:Pe(C),cubicCoeffA:k,excludeOutside:U,extrapolationValue:G,keepAspectRatioPolicy:Pe(Q),mode:Pe(Z),nearestMode:Pe(oe)})},913569:(i,c,h,w,C,k,U)=>{l.eb("Slice",i,{starts:c?Array.from(o().subarray(c>>>0,h>>>0)):[],ends:w?Array.from(o().subarray(w>>>0,C>>>0)):[],axes:k?Array.from(o().subarray(k>>>0,U>>>0)):[]})},913785:i=>{l.eb("Tile",i,void 0)},913837:(i,c,h)=>{l.eb("LayerNormalization",i,{axis:Number(c),epsilon:Number(h)})},913944:(i,c,h)=>{l.eb("InstanceNormalization",i,{epsilon:c,format:h?"NHWC":"NCHW"})},914058:(i,c,h)=>{l.eb("InstanceNormalization",i,{epsilon:c,format:h?"NHWC":"NCHW"})},914172:i=>{l.eb("Range",i,void 0)},914225:(i,c)=>{l.eb("Einsum",i,{equation:Pe(c)})},914306:(i,c,h,w,C)=>{l.eb("Pad",i,{mode:c,value:h,pads:w?Array.from(o().subarray(w>>>0,C>>>0)):[]})},914433:(i,c,h,w,C,k)=>{l.eb("BatchNormalization",i,{epsilon:c,momentum:h,spatial:!!C,trainingMode:!!w,format:k?"NHWC":"NCHW"})},914602:(i,c,h,w,C,k)=>{l.eb("BatchNormalization",i,{epsilon:c,momentum:h,spatial:!!C,trainingMode:!!w,format:k?"NHWC":"NCHW"})},914771:(i,c,h)=>{l.eb("CumSum",i,{exclusive:Number(c),reverse:Number(h)})},914868:(i,c,h,w,C,k,U,G,Q)=>{l.eb("Attention",i,{numHeads:c,isUnidirectional:h,maskFilterValue:w,scale:C,doRotary:k,qkvHiddenSizes:U?Array.from(o().subarray(Number(G)>>>0,Number(G)+U>>>0)):[],pastPresentShareBuffer:!!Q})},915140:i=>{l.eb("Gelu",i,void 0)},915192:(i,c,h,w,C,k)=>{l.eb("MultiHeadAttention",i,{numHeads:c,isUnidirectional:h,maskFilterValue:w,scale:C,doRotary:k})},915351:i=>{l.eb("BiasAdd",i,void 0)},915406:i=>{l.eb("BiasSplitGelu",i,void 0)},915467:(i,c)=>{l.eb("SkipLayerNormalization",i,{epsilon:c})},915548:(i,c,h,w,C,k,U,G,Q,Z,oe,ye,Ce)=>{l.eb("Conv",i,{format:Q?"NHWC":"NCHW",auto_pad:c,dilations:[h],group:w,kernel_shape:[C],pads:k?Array.from(o().subarray(k>>>0,U>>>0)):[],strides:[G],w_is_const:()=>!!r()[Z>>>0],activation:Pe(oe),activation_params:ye?Array.from(p().subarray(ye>>>0,Ce>>>0)):[]})},915918:(i,c,h,w,C,k,U,G,Q,Z,oe,ye,Ce,R,de,Oe)=>{l.eb("Conv",i,{format:ye?"NHWC":"NCHW",auto_pad:c,dilations:[h,w],group:C,kernel_shape:[k,U],pads:G?Array.from(o().subarray(G>>>0,Q>>>0)):[],strides:[Z,oe],w_is_const:()=>!!r()[Ce>>>0],activation:Pe(R),activation_params:de?Array.from(p().subarray(de>>>0,Oe>>>0)):[]})},916309:i=>{l.cc(i)},916343:(i,c)=>l.dc(i,c,l.Eb.fc,l.Eb.errors)};function Tr(i){this.name="ExitStatus",this.message=`Program terminated with exit(${i})`,this.status=i}var yt=i=>{i.terminate(),i.onmessage=()=>{}},on=i=>{fe.yb.length==0&&(Rr(),fe.Pb(fe.yb[0]));var c=fe.yb.pop();if(!c)return 6;fe.zb.push(c),fe.pb[i.xb]=c,c.xb=i.xb;var h={cmd:"run",start_routine:i.hc,arg:i.Vb,pthread_ptr:i.xb};return S&&c.unref(),c.postMessage(h,i.nc),0},Ze=0,Er=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Or=(i,c,h)=>{c>>>=0;var w=c+h;for(h=c;i[h]&&!(h>=w);)++h;if(16<h-c&&i.buffer&&Er)return Er.decode(i.buffer instanceof SharedArrayBuffer?i.slice(c,h):i.subarray(c,h));for(w="";c<h;){var C=i[c++];if(C&128){var k=i[c++]&63;if((C&224)==192)w+=String.fromCharCode((C&31)<<6|k);else{var U=i[c++]&63;C=(C&240)==224?(C&15)<<12|k<<6|U:(C&7)<<18|k<<12|U<<6|i[c++]&63,65536>C?w+=String.fromCharCode(C):(C-=65536,w+=String.fromCharCode(55296|C>>10,56320|C&1023))}}else w+=String.fromCharCode(C)}return w},Pe=(i,c)=>(i>>>=0)?Or(n(),i,c):"",kr=i=>{var c=xi();return i=i(),Tn(c),i};function _e(i,c){var h=arguments.length-2,w=arguments;return kr(()=>{for(var C=2*h,k=Ci(8*C),U=k>>>3,G=0;G<h;G++){var Q=w[2+G];typeof Q=="bigint"?(he[U+2*G]=1n,he[U+2*G+1]=Q):(he[U+2*G]=0n,m()[U+2*G+1>>>0]=Q)}return Ma(i,C,k,c)})}function lt(i){if(T)return _e(0,1,i);Ee=i,0<Ze||(fe.ic(),l.onExit?.(i),ge=!0),x(i,new Tr(i))}var dr=i=>{if(Ee=i,T)throw sn(i),"unwind";lt(i)},Pr=i=>{i instanceof Tr||i=="unwind"||x(1,i)};function mi(){for(var i=l.numThreads;i--;)Rr();Dt.unshift(()=>{Vt++,hi(()=>Cr())})}function Rr(){var i=M("ort-wasm-simd-threaded.worker.js");i=new Worker(i),fe.yb.push(i)}function hi(i){T?i():Promise.all(fe.yb.map(fe.Pb)).then(i)}var fe={yb:[],zb:[],Ub:[],pb:{},Ib(){T?(fe.receiveObjectTransfer=fe.ec,fe.threadInitTLS=fe.Tb,fe.setExitStatus=fe.Sb):mi()},Sb:i=>Ee=i,sc:["$terminateWorker"],ic:()=>{for(var i of fe.zb)yt(i);for(i of fe.yb)yt(i);fe.yb=[],fe.zb=[],fe.pb=[]},Rb:i=>{var c=i.xb;delete fe.pb[c],fe.yb.push(i),fe.zb.splice(fe.zb.indexOf(i),1),i.xb=0,_i(c)},ec(){},Tb(){fe.Ub.forEach(i=>i())},Pb:i=>new Promise(c=>{i.onmessage=k=>{k=k.data;var U=k.cmd;if(k.targetThread&&k.targetThread!=An()){var G=fe.pb[k.targetThread];G?G.postMessage(k,k.transferList):re(`Internal error! Worker sent a message "${U}" to target pthread ${k.targetThread}, but that thread no longer exists!`)}else U==="checkMailbox"?tr():U==="spawnThread"?on(k):U==="cleanupThread"?fe.Rb(fe.pb[k.thread]):U==="killThread"?(k=k.thread,U=fe.pb[k],delete fe.pb[k],yt(U),_i(k),fe.zb.splice(fe.zb.indexOf(U),1),U.xb=0):U==="cancelThread"?fe.pb[k.thread].postMessage({cmd:"cancel"}):U==="loaded"?(i.loaded=!0,S&&!i.xb&&i.unref(),c(i)):U==="alert"?alert(`Thread ${k.threadId}: ${k.text}`):k.target==="setimmediate"?i.postMessage(k):U==="callHandler"?l[k.handler](...k.args):U&&re(`worker sent an unknown command ${U}`)},i.onerror=k=>{throw re(`worker sent an error! ${k.filename}:${k.lineno}: ${k.message}`),k},S&&(i.on("message",k=>i.onmessage({data:k})),i.on("error",k=>i.onerror(k)));var h=[],w=["onExit"],C;for(C of w)l.hasOwnProperty(C)&&h.push(C);i.postMessage({cmd:"load",handlers:h,urlOrBlob:l.mainScriptUrlOrBlob||e,wasmMemory:$e,wasmModule:Ge})})};l.PThread=fe;var cr=i=>{for(;0<i.length;)i.shift()(l)};l.establishStackSpace=()=>{var i=An(),c=d()[i+52>>>2>>>0];i=d()[i+56>>>2>>>0],Wa(c,c-i),Tn(c)};function sn(i){if(T)return _e(1,0,i);dr(i)}l.invokeEntryPoint=(i,c)=>{i=Na.apply(null,[i,c]),0<Ze?fe.Sb(i):Si(i)};function gi(i){this.Db=i-24,this.pc=function(c){d()[this.Db+4>>>2>>>0]=c},this.Mb=function(c){d()[this.Db+8>>>2>>>0]=c},this.Ib=function(c,h){this.Kb(),this.pc(c),this.Mb(h)},this.Kb=function(){d()[this.Db+16>>>2>>>0]=0}}var un=0,Br=0;function Dr(i,c,h,w){return T?_e(2,1,i,c,h,w):Xt(i,c,h,w)}function Xt(i,c,h,w){if(i>>>=0,c>>>=0,h>>>=0,w>>>=0,typeof SharedArrayBuffer>"u")return re("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var C=[];return T&&C.length===0?Dr(i,c,h,w):(i={hc:h,xb:i,Vb:w,nc:C},T?(i.qc="spawnThread",postMessage(i,C),0):on(i))}function ln(i,c,h){return T?_e(3,1,i,c,h):0}function $t(i,c){if(T)return _e(4,1,i,c)}var tt=i=>{for(var c=0,h=0;h<i.length;++h){var w=i.charCodeAt(h);127>=w?c++:2047>=w?c+=2:55296<=w&&57343>=w?(c+=4,++h):c+=3}return c},zr=(i,c,h,w)=>{if(h>>>=0,!(0<w))return 0;var C=h;w=h+w-1;for(var k=0;k<i.length;++k){var U=i.charCodeAt(k);if(55296<=U&&57343>=U){var G=i.charCodeAt(++k);U=65536+((U&1023)<<10)|G&1023}if(127>=U){if(h>=w)break;c[h++>>>0]=U}else{if(2047>=U){if(h+1>=w)break;c[h++>>>0]=192|U>>6}else{if(65535>=U){if(h+2>=w)break;c[h++>>>0]=224|U>>12}else{if(h+3>=w)break;c[h++>>>0]=240|U>>18,c[h++>>>0]=128|U>>12&63}c[h++>>>0]=128|U>>6&63}c[h++>>>0]=128|U&63}}return c[h>>>0]=0,h-C},Lt=(i,c,h)=>zr(i,n(),c,h);function Mr(i,c){if(T)return _e(5,1,i,c)}function Ur(i,c,h){if(T)return _e(6,1,i,c,h)}function dn(i,c,h){return T?_e(7,1,i,c,h):0}function pr(i,c){if(T)return _e(8,1,i,c)}function cn(i,c,h){if(T)return _e(9,1,i,c,h)}function pn(i,c,h,w){if(T)return _e(10,1,i,c,h,w)}function fn(i,c,h,w){if(T)return _e(11,1,i,c,h,w)}function mn(i,c,h,w){if(T)return _e(12,1,i,c,h,w)}function Wr(i){if(T)return _e(13,1,i)}function Jt(i,c){if(T)return _e(14,1,i,c)}function hn(i,c,h){if(T)return _e(15,1,i,c,h)}var fr=i=>{if(i===null)return"null";var c=typeof i;return c==="object"||c==="array"||c==="function"?i.toString():""+i},Nr,ht=i=>{for(var c="";n()[i>>>0];)c+=Nr[n()[i++>>>0]];return c},Vr={},mr={},yi={},rt;function gn(i,c,h={}){var w=c.name;if(!i)throw new rt(`type "${w}" must have a positive integer typeid pointer`);if(mr.hasOwnProperty(i)){if(h.Yb)return;throw new rt(`Cannot register type '${w}' twice`)}mr[i]=c,delete yi[i],Vr.hasOwnProperty(i)&&(c=Vr[i],delete Vr[i],c.forEach(C=>C()))}function bt(i,c,h={}){if(!("argPackAdvance"in c))throw new TypeError("registerType registeredInstance requires argPackAdvance");gn(i,c,h)}var Hr=(i,c,h)=>{switch(c){case 1:return h?w=>r()[w>>>0>>>0]:w=>n()[w>>>0>>>0];case 2:return h?w=>a()[w>>>1>>>0]:w=>u()[w>>>1>>>0];case 4:return h?w=>o()[w>>>2>>>0]:w=>d()[w>>>2>>>0];case 8:return h?w=>he[w>>>3]:w=>et[w>>>3];default:throw new TypeError(`invalid integer width (${c}): ${i}`)}};function hr(){this.wb=[void 0],this.Nb=[]}var nt=new hr;function er(i){i>>>=0,i>=nt.Db&&--nt.get(i).Qb===0&&nt.Mb(i)}var Qe=i=>{if(!i)throw new rt("Cannot use deleted val. handle = "+i);return nt.get(i).value},it=i=>{switch(i){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return nt.Kb({Qb:1,value:i})}};function yn(i){return this.fromWireType(o()[i>>>2>>>0])}var bn=(i,c)=>{switch(c){case 4:return function(h){return this.fromWireType(p()[h>>>2>>>0])};case 8:return function(h){return this.fromWireType(m()[h>>>3>>>0])};default:throw new TypeError(`invalid float width (${c}): ${i}`)}};function vn(i){return this.fromWireType(d()[i>>>2>>>0])}var wn=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,$n=(i,c)=>{for(var h=i>>1,w=h+c/2;!(h>=w)&&u()[h>>>0];)++h;if(h<<=1,32<h-i&&wn)return wn.decode(n().slice(i,h));for(h="",w=0;!(w>=c/2);++w){var C=a()[i+2*w>>>1>>>0];if(C==0)break;h+=String.fromCharCode(C)}return h},_n=(i,c,h)=>{if(h??=2147483647,2>h)return 0;h-=2;var w=c;h=h<2*i.length?h/2:i.length;for(var C=0;C<h;++C){var k=i.charCodeAt(C);a()[c>>>1>>>0]=k,c+=2}return a()[c>>>1>>>0]=0,c-w},gr=i=>2*i.length,bi=(i,c)=>{for(var h=0,w="";!(h>=c/4);){var C=o()[i+4*h>>>2>>>0];if(C==0)break;++h,65536<=C?(C-=65536,w+=String.fromCharCode(55296|C>>10,56320|C&1023)):w+=String.fromCharCode(C)}return w},le=(i,c,h)=>{if(c>>>=0,h??=2147483647,4>h)return 0;var w=c;h=w+h-4;for(var C=0;C<i.length;++C){var k=i.charCodeAt(C);if(55296<=k&&57343>=k){var U=i.charCodeAt(++C);k=65536+((k&1023)<<10)|U&1023}if(o()[c>>>2>>>0]=k,c+=4,c+4>h)break}return o()[c>>>2>>>0]=0,c-w},Sn=i=>{for(var c=0,h=0;h<i.length;++h){var w=i.charCodeAt(h);55296<=w&&57343>=w&&++h,c+=4}return c},Gt=()=>{if(!(0<Ze))try{T?Si(Ee):dr(Ee)}catch(i){Pr(i)}};function dt(i){i>>>=0,typeof Atomics.oc=="function"&&(Atomics.oc(o(),i>>>2,i).value.then(tr),i+=128,Atomics.store(o(),i>>>2,1))}l.__emscripten_thread_mailbox_await=dt;var tr=()=>{var i=An();if(i&&(dt(i),!ge))try{Ua(),Gt()}catch(c){Pr(c)}};l.checkMailbox=tr;var yr=[],br=(i,c)=>{var h=mr[i];if(h===void 0)throw i=Da(i),h=ht(i),At(i),new rt(c+" has unknown type "+h);return h},Lr=(i,c,h)=>{var w=[];return i=i.toWireType(w,h),w.length&&(d()[c>>>2>>>0]=it(w)),i},rr=i=>{try{i()}catch(c){Ht(c)}};function xn(){var i=ne,c={};for(let[h,w]of Object.entries(i))c[h]=typeof w=="function"?function(){Ut.push(h);try{return w.apply(null,arguments)}finally{ge||(Ut.pop(),gt&&_t===1&&Ut.length===0&&(_t=0,Ze+=1,rr(Ha),typeof Fibers<"u"&&Fibers.uc()))}}:w;return c}var _t=0,gt=null,Cn=0,Ut=[],Gr={},s={},f=0,g=null,_=[];function A(){return new Promise((i,c)=>{g={resolve:i,reject:c}})}function z(){var i=Fr(65548),c=i+12;d()[i>>>2>>>0]=c,d()[i+4>>>2>>>0]=c+65536,c=Ut[0];var h=Gr[c];return h===void 0&&(h=f++,Gr[c]=h,s[h]=c),c=h,o()[i+8>>>2>>>0]=c,i}function L(){var i=o()[gt+8>>>2>>>0];return i=ne[s[i]],--Ze,i()}function J(i){if(!ge){if(_t===0){var c=!1,h=!1;i((w=0)=>{if(!ge&&(Cn=w,c=!0,h)){_t=2,rr(()=>La(gt)),typeof Browser<"u"&&Browser.Jb.Xb&&Browser.Jb.resume(),w=!1;try{var C=L()}catch(G){C=G,w=!0}var k=!1;if(!gt){var U=g;U&&(g=null,(w?U.reject:U.resolve)(C),k=!0)}if(w&&!k)throw C}}),h=!0,c||(_t=1,gt=z(),typeof Browser<"u"&&Browser.Jb.Xb&&Browser.Jb.pause(),rr(()=>Va(gt)))}else _t===2?(_t=0,rr(Ga),At(gt),gt=null,_.forEach(w=>{if(!ge)try{w(),Gt()}catch(C){Pr(C)}})):Ht(`invalid state: ${_t}`);return Cn}}function Y(i){return J(c=>{i().then(c)})}var q=[],ae={},me=i=>{var c=ae[i];return c===void 0?ht(i):c},Se=()=>typeof globalThis=="object"?globalThis:Function("return this")(),P=i=>{var c=q.length;return q.push(i),c},ue=(i,c)=>{for(var h=Array(i),w=0;w<i;++w)h[w]=br(d()[c+4*w>>>2>>>0],"parameter "+w);return h},Ae=(i,c)=>Object.defineProperty(c,"name",{value:i});function Wt(i){var c=Function;if(!(c instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof c} which is not a function`);var h=Ae(c.name||"unknownFunctionName",function(){});return h.prototype=c.prototype,h=new h,i=c.apply(h,i),i instanceof Object?i:h}var Nt=i=>i%4===0&&(i%100!==0||i%400===0),ya=[0,31,60,91,121,152,182,213,244,274,305,335],ba=[0,31,59,90,120,151,181,212,243,273,304,334];function va(i,c,h,w,C,k,U){return T?_e(16,1,i,c,h,w,C,k,U):-52}function wa(i,c,h,w,C,k){if(T)return _e(17,1,i,c,h,w,C,k)}var $a=i=>{var c=tt(i)+1,h=Fr(c);return h&&Lt(i,h,c),h},vi=[],_a=(i,c)=>{vi.length=0;for(var h;h=n()[i++>>>0];){var w=h!=105;w&=h!=112,c+=w&&c%8?4:0,vi.push(h==112?d()[c>>>2>>>0]:h==106?he[c>>>3]:h==105?o()[c>>>2>>>0]:m()[c>>>3>>>0]),c+=w?8:4}return vi},wi={},Sa=()=>{if(!$i){var i={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:$||"./this.program"},c;for(c in wi)wi[c]===void 0?delete i[c]:i[c]=wi[c];var h=[];for(c in i)h.push(`${c}=${i[c]}`);$i=h}return $i},$i;function xa(i,c){if(T)return _e(18,1,i,c);i>>>=0,c>>>=0;var h=0;return Sa().forEach((w,C)=>{var k=c+h;for(C=d()[i+4*C>>>2>>>0]=k,k=0;k<w.length;++k)r()[C++>>>0>>>0]=w.charCodeAt(k);r()[C>>>0>>>0]=0,h+=w.length+1}),0}function Ca(i,c){if(T)return _e(19,1,i,c);i>>>=0,c>>>=0;var h=Sa();d()[i>>>2>>>0]=h.length;var w=0;return h.forEach(C=>w+=C.length+1),d()[c>>>2>>>0]=w,0}function Ia(i){return T?_e(20,1,i):52}function Aa(i,c,h,w){return T?_e(21,1,i,c,h,w):52}function Ta(i,c,h,w){return T?_e(22,1,i,c,h,w):70}var Ed=[null,[],[]];function Ea(i,c,h,w){if(T)return _e(23,1,i,c,h,w);c>>>=0,h>>>=0,w>>>=0;for(var C=0,k=0;k<h;k++){var U=d()[c>>>2>>>0],G=d()[c+4>>>2>>>0];c+=8;for(var Q=0;Q<G;Q++){var Z=n()[U+Q>>>0],oe=Ed[i];Z===0||Z===10?((i===1?be:re)(Or(oe,0)),oe.length=0):oe.push(Z)}C+=G}return d()[w>>>2>>>0]=C,0}var Oa=[31,29,31,30,31,30,31,31,30,31,30,31],ka=[31,28,31,30,31,30,31,31,30,31,30,31];function Od(i){var c=Array(tt(i)+1);return zr(i,c,0,c.length),c}var kd=(i,c)=>{r().set(i,c>>>0)};function Pa(i,c,h,w){function C(R,de,Oe){for(R=typeof R=="number"?R.toString():R||"";R.length<de;)R=Oe[0]+R;return R}function k(R,de){return C(R,de,"0")}function U(R,de){function Oe(ja){return 0>ja?-1:0<ja?1:0}var nr;return(nr=Oe(R.getFullYear()-de.getFullYear()))===0&&(nr=Oe(R.getMonth()-de.getMonth()))===0&&(nr=Oe(R.getDate()-de.getDate())),nr}function G(R){switch(R.getDay()){case 0:return new Date(R.getFullYear()-1,11,29);case 1:return R;case 2:return new Date(R.getFullYear(),0,3);case 3:return new Date(R.getFullYear(),0,2);case 4:return new Date(R.getFullYear(),0,1);case 5:return new Date(R.getFullYear()-1,11,31);case 6:return new Date(R.getFullYear()-1,11,30)}}function Q(R){var de=R.Ab;for(R=new Date(new Date(R.Bb+1900,0,1).getTime());0<de;){var Oe=R.getMonth(),nr=(Nt(R.getFullYear())?Oa:ka)[Oe];if(de>nr-R.getDate())de-=nr-R.getDate()+1,R.setDate(1),11>Oe?R.setMonth(Oe+1):(R.setMonth(0),R.setFullYear(R.getFullYear()+1));else{R.setDate(R.getDate()+de);break}}return Oe=new Date(R.getFullYear()+1,0,4),de=G(new Date(R.getFullYear(),0,4)),Oe=G(Oe),0>=U(de,R)?0>=U(Oe,R)?R.getFullYear()+1:R.getFullYear():R.getFullYear()-1}i>>>=0,c>>>=0,h>>>=0,w>>>=0;var Z=d()[w+40>>>2>>>0];w={lc:o()[w>>>2>>>0],kc:o()[w+4>>>2>>>0],Gb:o()[w+8>>>2>>>0],Lb:o()[w+12>>>2>>>0],Hb:o()[w+16>>>2>>>0],Bb:o()[w+20>>>2>>>0],vb:o()[w+24>>>2>>>0],Ab:o()[w+28>>>2>>>0],tc:o()[w+32>>>2>>>0],jc:o()[w+36>>>2>>>0],mc:Z?Pe(Z):""},h=Pe(h),Z={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var oe in Z)h=h.replace(new RegExp(oe,"g"),Z[oe]);var ye="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Ce="January February March April May June July August September October November December".split(" ");Z={"%a":R=>ye[R.vb].substring(0,3),"%A":R=>ye[R.vb],"%b":R=>Ce[R.Hb].substring(0,3),"%B":R=>Ce[R.Hb],"%C":R=>k((R.Bb+1900)/100|0,2),"%d":R=>k(R.Lb,2),"%e":R=>C(R.Lb,2," "),"%g":R=>Q(R).toString().substring(2),"%G":R=>Q(R),"%H":R=>k(R.Gb,2),"%I":R=>(R=R.Gb,R==0?R=12:12<R&&(R-=12),k(R,2)),"%j":R=>{for(var de=0,Oe=0;Oe<=R.Hb-1;de+=(Nt(R.Bb+1900)?Oa:ka)[Oe++]);return k(R.Lb+de,3)},"%m":R=>k(R.Hb+1,2),"%M":R=>k(R.kc,2),"%n":()=>`
`,"%p":R=>0<=R.Gb&&12>R.Gb?"AM":"PM","%S":R=>k(R.lc,2),"%t":()=>"	","%u":R=>R.vb||7,"%U":R=>k(Math.floor((R.Ab+7-R.vb)/7),2),"%V":R=>{var de=Math.floor((R.Ab+7-(R.vb+6)%7)/7);if(2>=(R.vb+371-R.Ab-2)%7&&de++,de)de==53&&(Oe=(R.vb+371-R.Ab)%7,Oe==4||Oe==3&&Nt(R.Bb)||(de=1));else{de=52;var Oe=(R.vb+7-R.Ab-1)%7;(Oe==4||Oe==5&&Nt(R.Bb%400-1))&&de++}return k(de,2)},"%w":R=>R.vb,"%W":R=>k(Math.floor((R.Ab+7-(R.vb+6)%7)/7),2),"%y":R=>(R.Bb+1900).toString().substring(2),"%Y":R=>R.Bb+1900,"%z":R=>{R=R.jc;var de=0<=R;return R=Math.abs(R)/60,(de?"+":"-")+("0000"+(R/60*100+R%60)).slice(-4)},"%Z":R=>R.mc,"%%":()=>"%"},h=h.replace(/%%/g,"\0\0");for(oe in Z)h.includes(oe)&&(h=h.replace(new RegExp(oe,"g"),Z[oe](w)));return h=h.replace(/\0\0/g,"%"),oe=Od(h),oe.length>c?0:(kd(oe,i),oe.length-1)}fe.Ib();for(var Ra=Array(256),In=0;256>In;++In)Ra[In]=String.fromCharCode(In);Nr=Ra,rt=l.BindingError=class extends Error{constructor(i){super(i),this.name="BindingError"}},l.InternalError=class extends Error{constructor(i){super(i),this.name="InternalError"}},Object.assign(hr.prototype,{get(i){return this.wb[i]},has(i){return this.wb[i]!==void 0},Kb(i){var c=this.Nb.pop()||this.wb.length;return this.wb[c]=i,c},Mb(i){this.wb[i]=void 0,this.Nb.push(i)}}),nt.wb.push({value:void 0},{value:null},{value:!0},{value:!1}),nt.Db=nt.wb.length,l.count_emval_handles=()=>{for(var i=0,c=nt.Db;c<nt.wb.length;++c)nt.wb[c]!==void 0&&++i;return i};var Pd=[lt,sn,Dr,ln,$t,Mr,Ur,dn,pr,cn,pn,fn,mn,Wr,Jt,hn,va,wa,xa,Ca,Ia,Aa,Ta,Ea],Rd={ua:function(i,c,h){return Y(async()=>{await l.ac(i,c,h)})},b:function(i,c,h){throw i>>>=0,new gi(i).Ib(c>>>0,h>>>0),un=i,Br++,un},ga:function(i){za(i>>>0,!I,1,!O,131072,!1),fe.Tb()},F:function(i){i>>>=0,T?postMessage({cmd:"cleanupThread",thread:i}):fe.Rb(fe.pb[i])},Y:Xt,z:ln,ma:$t,U:Mr,W:Ur,N:dn,ka:pr,da:cn,ja:pn,H:fn,V:mn,S:Wr,la:Jt,T:hn,K:function(i,c,h,w,C){i>>>=0,c>>>=0,h>>>=0,c=ht(c);var k=c.indexOf("u")!=-1;k&&(C=(1n<<64n)-1n),bt(i,{name:c,fromWireType:U=>U,toWireType:function(U,G){if(typeof G!="bigint"&&typeof G!="number")throw new TypeError(`Cannot convert "${fr(G)}" to ${this.name}`);if(G<w||G>C)throw new TypeError(`Passing a number "${fr(G)}" from JS side to C/C++ side to an argument of type "${c}", which is outside the valid range [${w}, ${C}]!`);return G},argPackAdvance:8,readValueFromPointer:Hr(c,h,!k),Cb:null})},sa:function(i,c,h,w){i>>>=0,c=ht(c>>>0),bt(i,{name:c,fromWireType:function(C){return!!C},toWireType:function(C,k){return k?h:w},argPackAdvance:8,readValueFromPointer:function(C){return this.fromWireType(n()[C>>>0])},Cb:null})},ra:function(i,c){i>>>=0,c=ht(c>>>0),bt(i,{name:c,fromWireType:h=>{var w=Qe(h);return er(h),w},toWireType:(h,w)=>it(w),argPackAdvance:8,readValueFromPointer:yn,Cb:null})},J:function(i,c,h){i>>>=0,h>>>=0,c=ht(c>>>0),bt(i,{name:c,fromWireType:w=>w,toWireType:(w,C)=>C,argPackAdvance:8,readValueFromPointer:bn(c,h),Cb:null})},v:function(i,c,h,w,C){if(i>>>=0,h>>>=0,c=ht(c>>>0),C===-1&&(C=4294967295),C=G=>G,w===0){var k=32-8*h;C=G=>G<<k>>>k}var U=c.includes("unsigned")?function(G,Q){return Q>>>0}:function(G,Q){return Q};bt(i,{name:c,fromWireType:C,toWireType:U,argPackAdvance:8,readValueFromPointer:Hr(c,h,w!==0),Cb:null})},o:function(i,c,h){function w(k){var U=d()[k>>>2>>>0];return k=d()[k+4>>>2>>>0],new C(r().buffer,k,U)}i>>>=0;var C=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][c];h=ht(h>>>0),bt(i,{name:h,fromWireType:w,argPackAdvance:8,readValueFromPointer:w},{Yb:!0})},L:function(i,c){i>>>=0,c=ht(c>>>0);var h=c==="std::string";bt(i,{name:c,fromWireType:function(w){var C=d()[w>>>2>>>0],k=w+4;if(h)for(var U=k,G=0;G<=C;++G){var Q=k+G;if(G==C||n()[Q>>>0]==0){if(U=Pe(U,Q-U),Z===void 0)var Z=U;else Z+=String.fromCharCode(0),Z+=U;U=Q+1}}else{for(Z=Array(C),G=0;G<C;++G)Z[G]=String.fromCharCode(n()[k+G>>>0]);Z=Z.join("")}return At(w),Z},toWireType:function(w,C){C instanceof ArrayBuffer&&(C=new Uint8Array(C));var k=typeof C=="string";if(!(k||C instanceof Uint8Array||C instanceof Uint8ClampedArray||C instanceof Int8Array))throw new rt("Cannot pass non-string to std::string");var U=h&&k?tt(C):C.length,G=Fr(4+U+1),Q=G+4;if(d()[G>>>2>>>0]=U,h&&k)Lt(C,Q,U+1);else if(k)for(k=0;k<U;++k){var Z=C.charCodeAt(k);if(255<Z)throw At(Q),new rt("String has UTF-16 code units that do not fit in 8 bits");n()[Q+k>>>0]=Z}else for(k=0;k<U;++k)n()[Q+k>>>0]=C[k];return w!==null&&w.push(At,G),G},argPackAdvance:8,readValueFromPointer:vn,Cb(w){At(w)}})},B:function(i,c,h){if(i>>>=0,c>>>=0,h>>>=0,h=ht(h),c===2)var w=$n,C=_n,k=gr,U=()=>u(),G=1;else c===4&&(w=bi,C=le,k=Sn,U=()=>d(),G=2);bt(i,{name:h,fromWireType:Q=>{for(var Z=d()[Q>>>2>>>0],oe=U(),ye,Ce=Q+4,R=0;R<=Z;++R){var de=Q+4+R*c;(R==Z||oe[de>>>G]==0)&&(Ce=w(Ce,de-Ce),ye===void 0?ye=Ce:(ye+=String.fromCharCode(0),ye+=Ce),Ce=de+c)}return At(Q),ye},toWireType:(Q,Z)=>{if(typeof Z!="string")throw new rt(`Cannot pass non-string to C++ string type ${h}`);var oe=k(Z),ye=Fr(4+oe+c);return d()[ye>>>2]=oe>>G,C(Z,ye+4,oe+c),Q!==null&&Q.push(At,ye),ye},argPackAdvance:8,readValueFromPointer:yn,Cb(Q){At(Q)}})},ta:function(i,c){i>>>=0,c=ht(c>>>0),bt(i,{Zb:!0,name:c,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},qa:()=>1,Q:function(i,c){i>>>=0,i==c>>>0?setTimeout(()=>tr()):T?postMessage({targetThread:i,cmd:"checkMailbox"}):(i=fe.pb[i])&&i.postMessage({cmd:"checkMailbox"})},Z:function(i,c,h,w){c>>>=0,h/=2,yr.length=h,w=w>>>0>>>3;for(var C=0;C<h;C++)yr[C]=he[w+2*C]?he[w+2*C+1]:m()[w+2*C+1>>>0];return i=0>i?Qt[-i-1]:Pd[i],fe.Wb=c,c=i.apply(null,yr),fe.Wb=0,c},fa:dt,pa:function(i){S&&fe.pb[i>>>0].ref()},t:function(i,c,h){return c>>>=0,h>>>=0,i=Qe(i>>>0),c=br(c,"emval::as"),Lr(c,h,i)},y:function(i){return i>>>=0,Y(()=>(i=Qe(i),i.then(it)))},p:function(i,c,h,w){return h>>>=0,w>>>=0,i=q[i>>>0],c=Qe(c>>>0),i(null,c,h,w)},k:function(i,c,h,w,C){return h>>>=0,w>>>=0,C>>>=0,i=q[i>>>0],c=Qe(c>>>0),h=me(h),i(c,c[h],w,C)},c:er,C:function(i,c){return c>>>=0,i=Qe(i>>>0),c=Qe(c),i==c},n:function(i){return i>>>=0,i===0?it(Se()):(i=me(i),it(Se()[i]))},j:function(i,c,h){c=ue(i,c>>>0);var w=c.shift();i--;var C=`return function (obj, func, destructorsRef, args) {
`,k=0,U=[];h===0&&U.push("obj");for(var G=["retType"],Q=[w],Z=0;Z<i;++Z)U.push("arg"+Z),G.push("argType"+Z),Q.push(c[Z]),C+=`  var arg${Z} = argType${Z}.readValueFromPointer(args${k?"+"+k:""});
`,k+=c[Z].argPackAdvance;for(C+=`  var rv = ${h===1?"new func":"func.call"}(${U.join(", ")});
`,Z=0;Z<i;++Z)c[Z].deleteObject&&(C+=`  argType${Z}.deleteObject(arg${Z});
`);return w.Zb||(G.push("emval_returnValue"),Q.push(Lr),C+=`  return emval_returnValue(retType, destructorsRef, rv);
`),G.push(C+`};
`),i=Wt(G).apply(null,Q),h=`methodCaller<(${c.map(oe=>oe.name).join(", ")}) => ${w.name}>`,P(Ae(h,i))},s:function(i,c){return c>>>=0,i=Qe(i>>>0),c=Qe(c),it(i[c])},e:function(i){i>>>=0,4<i&&(nt.get(i).Qb+=1)},w:function(){return it([])},m:function(i){i=Qe(i>>>0);for(var c=Array(i.length),h=0;h<i.length;h++)c[h]=i[h];return it(c)},f:function(i){return it(me(i>>>0))},l:function(){return it({})},i:function(i){i>>>=0;for(var c=Qe(i);c.length;){var h=c.pop();c.pop()(h)}er(i)},h:function(i,c,h){c>>>=0,h>>>=0,i=Qe(i>>>0),c=Qe(c),h=Qe(h),i[c]=h},d:function(i,c){return c>>>=0,i=br(i>>>0,"_emval_take_value"),i=i.readValueFromPointer(c),it(i)},aa:function(i,c){i=-9007199254740992>i||9007199254740992<i?NaN:Number(i),c>>>=0,i=new Date(1e3*i),o()[c>>>2>>>0]=i.getUTCSeconds(),o()[c+4>>>2>>>0]=i.getUTCMinutes(),o()[c+8>>>2>>>0]=i.getUTCHours(),o()[c+12>>>2>>>0]=i.getUTCDate(),o()[c+16>>>2>>>0]=i.getUTCMonth(),o()[c+20>>>2>>>0]=i.getUTCFullYear()-1900,o()[c+24>>>2>>>0]=i.getUTCDay(),i=(i.getTime()-Date.UTC(i.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,o()[c+28>>>2>>>0]=i},ba:function(i,c){i=-9007199254740992>i||9007199254740992<i?NaN:Number(i),c>>>=0,i=new Date(1e3*i),o()[c>>>2>>>0]=i.getSeconds(),o()[c+4>>>2>>>0]=i.getMinutes(),o()[c+8>>>2>>>0]=i.getHours(),o()[c+12>>>2>>>0]=i.getDate(),o()[c+16>>>2>>>0]=i.getMonth(),o()[c+20>>>2>>>0]=i.getFullYear()-1900,o()[c+24>>>2>>>0]=i.getDay();var h=(Nt(i.getFullYear())?ya:ba)[i.getMonth()]+i.getDate()-1|0;o()[c+28>>>2>>>0]=h,o()[c+36>>>2>>>0]=-(60*i.getTimezoneOffset()),h=new Date(i.getFullYear(),6,1).getTimezoneOffset();var w=new Date(i.getFullYear(),0,1).getTimezoneOffset();i=(h!=w&&i.getTimezoneOffset()==Math.min(w,h))|0,o()[c+32>>>2>>>0]=i},ca:function(i){i>>>=0;var c=new Date(o()[i+20>>>2>>>0]+1900,o()[i+16>>>2>>>0],o()[i+12>>>2>>>0],o()[i+8>>>2>>>0],o()[i+4>>>2>>>0],o()[i>>>2>>>0],0),h=o()[i+32>>>2>>>0],w=c.getTimezoneOffset(),C=new Date(c.getFullYear(),6,1).getTimezoneOffset(),k=new Date(c.getFullYear(),0,1).getTimezoneOffset(),U=Math.min(k,C);return 0>h?o()[i+32>>>2>>>0]=+(C!=k&&U==w):0<h!=(U==w)&&(C=Math.max(k,C),c.setTime(c.getTime()+6e4*((0<h?U:C)-w))),o()[i+24>>>2>>>0]=c.getDay(),h=(Nt(c.getFullYear())?ya:ba)[c.getMonth()]+c.getDate()-1|0,o()[i+28>>>2>>>0]=h,o()[i>>>2>>>0]=c.getSeconds(),o()[i+4>>>2>>>0]=c.getMinutes(),o()[i+8>>>2>>>0]=c.getHours(),o()[i+12>>>2>>>0]=c.getDate(),o()[i+16>>>2>>>0]=c.getMonth(),o()[i+20>>>2>>>0]=c.getYear(),i=c.getTime(),isNaN(i)?(o()[Ba()>>>2>>>0]=61,i=-1):i/=1e3,BigInt(i)},_:va,$:wa,P:function(i,c,h){function w(Z){return(Z=Z.toTimeString().match(/\(([A-Za-z ]+)\)$/))?Z[1]:"GMT"}i>>>=0,c>>>=0,h>>>=0;var C=new Date().getFullYear(),k=new Date(C,0,1),U=new Date(C,6,1);C=k.getTimezoneOffset();var G=U.getTimezoneOffset(),Q=Math.max(C,G);d()[i>>>2>>>0]=60*Q,o()[c>>>2>>>0]=+(C!=G),i=w(k),c=w(U),i=$a(i),c=$a(c),G<C?(d()[h>>>2>>>0]=i,d()[h+4>>>2>>>0]=c):(d()[h>>>2>>>0]=c,d()[h+4>>>2>>>0]=i)},q:()=>{Ht("")},g:function(i,c,h){return i>>>=0,c=_a(c>>>0,h>>>0),Qt[i].apply(null,c)},M:function(i,c,h){return i>>>=0,c=_a(c>>>0,h>>>0),Qt[i].apply(null,c)},G:()=>{},I:()=>Date.now(),oa:()=>{throw Ze+=1,"unwind"},R:function(){return 4294901760},u:()=>performance.timeOrigin+performance.now(),x:()=>S?(Eo(),Ft(To)).cpus().length:navigator.hardwareConcurrency,O:function(i){i>>>=0;var c=n().length;if(i<=c||4294901760<i)return!1;for(var h=1;4>=h;h*=2){var w=c*(1+.2/h);w=Math.min(w,i+100663296);var C=Math;w=Math.max(i,w);e:{C=(C.min.call(C,4294901760,w+(65536-w%65536)%65536)-$e.buffer.byteLength+65535)/65536;try{$e.grow(C),Re();var k=1;break e}catch{}k=void 0}if(k)return!0}return!1},ha:xa,ia:Ca,X:dr,A:Ia,E:Aa,ea:Ta,D:Ea,a:$e||l.wasmMemory,na:Pa,r:function(i,c,h,w){return Pa(i>>>0,c>>>0,h>>>0,w>>>0)}},ne=function(){function i(h,w){return ne=h.exports,ne=xn(),ne=Bd(),fe.Ub.push(ne.bb),zt.unshift(ne.va),Ge=w,Cr(),ne}var c={a:Rd};if(Vt++,l.instantiateWasm)try{return l.instantiateWasm(c,i)}catch(h){re(`Module.instantiateWasm callback failed with error: ${h}`),b(h)}return Ar(c,function(h){i(h.instance,h.module)}).catch(b),{}}();l._OrtInit=(i,c)=>(l._OrtInit=ne.wa)(i,c),l._OrtGetLastError=(i,c)=>(l._OrtGetLastError=ne.xa)(i,c),l._OrtCreateSessionOptions=(i,c,h,w,C,k,U,G,Q,Z)=>(l._OrtCreateSessionOptions=ne.ya)(i,c,h,w,C,k,U,G,Q,Z),l._OrtAppendExecutionProvider=(i,c)=>(l._OrtAppendExecutionProvider=ne.za)(i,c),l._OrtAddFreeDimensionOverride=(i,c,h)=>(l._OrtAddFreeDimensionOverride=ne.Aa)(i,c,h),l._OrtAddSessionConfigEntry=(i,c,h)=>(l._OrtAddSessionConfigEntry=ne.Ba)(i,c,h),l._OrtReleaseSessionOptions=i=>(l._OrtReleaseSessionOptions=ne.Ca)(i),l._OrtCreateSession=(i,c,h)=>(l._OrtCreateSession=ne.Da)(i,c,h),l._OrtReleaseSession=i=>(l._OrtReleaseSession=ne.Ea)(i),l._OrtGetInputOutputCount=(i,c,h)=>(l._OrtGetInputOutputCount=ne.Fa)(i,c,h),l._OrtGetInputName=(i,c)=>(l._OrtGetInputName=ne.Ga)(i,c),l._OrtGetOutputName=(i,c)=>(l._OrtGetOutputName=ne.Ha)(i,c),l._OrtFree=i=>(l._OrtFree=ne.Ia)(i),l._OrtCreateTensor=(i,c,h,w,C,k)=>(l._OrtCreateTensor=ne.Ja)(i,c,h,w,C,k),l._OrtGetTensorData=(i,c,h,w,C)=>(l._OrtGetTensorData=ne.Ka)(i,c,h,w,C),l._OrtReleaseTensor=i=>(l._OrtReleaseTensor=ne.La)(i),l._OrtCreateRunOptions=(i,c,h,w)=>(l._OrtCreateRunOptions=ne.Ma)(i,c,h,w),l._OrtAddRunConfigEntry=(i,c,h)=>(l._OrtAddRunConfigEntry=ne.Na)(i,c,h),l._OrtReleaseRunOptions=i=>(l._OrtReleaseRunOptions=ne.Oa)(i),l._OrtCreateBinding=i=>(l._OrtCreateBinding=ne.Pa)(i),l._OrtBindInput=(i,c,h)=>(l._OrtBindInput=ne.Qa)(i,c,h),l._OrtBindOutput=(i,c,h,w)=>(l._OrtBindOutput=ne.Ra)(i,c,h,w),l._OrtClearBoundOutputs=i=>(l._OrtClearBoundOutputs=ne.Sa)(i),l._OrtReleaseBinding=i=>(l._OrtReleaseBinding=ne.Ta)(i),l._OrtRunWithBinding=(i,c,h,w,C)=>(l._OrtRunWithBinding=ne.Ua)(i,c,h,w,C),l._OrtRun=(i,c,h,w,C,k,U,G)=>(l._OrtRun=ne.Va)(i,c,h,w,C,k,U,G),l._OrtEndProfiling=i=>(l._OrtEndProfiling=ne.Wa)(i),l._JsepOutput=(i,c,h)=>(l._JsepOutput=ne.Xa)(i,c,h),l._JsepGetNodeName=i=>(l._JsepGetNodeName=ne.Ya)(i);var Ba=()=>(Ba=ne.Za)(),An=l._pthread_self=()=>(An=l._pthread_self=ne._a)(),Fr=l._malloc=i=>(Fr=l._malloc=ne.$a)(i),At=l._free=i=>(At=l._free=ne.ab)(i);l.__emscripten_tls_init=()=>(l.__emscripten_tls_init=ne.bb)();var Da=i=>(Da=ne.cb)(i);l.__embind_initialize_bindings=()=>(l.__embind_initialize_bindings=ne.db)();var za=l.__emscripten_thread_init=(i,c,h,w,C,k)=>(za=l.__emscripten_thread_init=ne.fb)(i,c,h,w,C,k);l.__emscripten_thread_crashed=()=>(l.__emscripten_thread_crashed=ne.gb)();var Ma=(i,c,h,w)=>(Ma=ne.hb)(i,c,h,w),_i=i=>(_i=ne.ib)(i),Si=l.__emscripten_thread_exit=i=>(Si=l.__emscripten_thread_exit=ne.jb)(i),Ua=()=>(Ua=ne.kb)(),Wa=(i,c)=>(Wa=ne.lb)(i,c),xi=()=>(xi=ne.mb)(),Tn=i=>(Tn=ne.nb)(i),Ci=i=>(Ci=ne.ob)(i),Na=l.dynCall_ii=(i,c)=>(Na=l.dynCall_ii=ne.qb)(i,c),Va=i=>(Va=ne.rb)(i),Ha=()=>(Ha=ne.sb)(),La=i=>(La=ne.tb)(i),Ga=()=>(Ga=ne.ub)();l.___start_em_js=916455,l.___stop_em_js=916616;function Bd(){var i=ne;i=Object.assign({},i);var c=w=>()=>w()>>>0,h=w=>C=>w(C)>>>0;return i.Za=c(i.Za),i._a=c(i._a),i.$a=h(i.$a),i.cb=h(i.cb),i.emscripten_main_runtime_thread_id=c(i.emscripten_main_runtime_thread_id),i.mb=c(i.mb),i.ob=h(i.ob),i}l.wasmMemory=$e,l.stackAlloc=Ci,l.stackSave=xi,l.stackRestore=Tn,l.keepRuntimeAlive=()=>0<Ze,l.UTF8ToString=Pe,l.stringToUTF8=Lt,l.lengthBytesUTF8=tt,l.ExitStatus=Tr,l.PThread=fe;var En;Zt=function i(){En||Fa(),En||(Zt=i)};function Fa(){if(!(0<Vt))if(T)y(l),T||cr(zt),startWorker(l);else{if(l.preRun)for(typeof l.preRun=="function"&&(l.preRun=[l.preRun]);l.preRun.length;)Dt.unshift(l.preRun.shift());cr(Dt),0<Vt||En||(En=!0,l.calledRun=!0,ge||(T||cr(zt),y(l),T||cr(Yt)))}}return Fa(),t.ready}})();typeof ko=="object"&&typeof zi=="object"?zi.exports=Oo:typeof define=="function"&&define.amd&&define([],()=>Oo)});var Ro=vr((Um,Gd)=>{Gd.exports='"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs"),vm=require("vm");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>vm.runInThisContext(fs.readFileSync(e,"utf8"),{filename:e}),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err(`worker.js received unknown command ${e.data.cmd}`),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed?.(),a}}self.onmessage=handleMessage;\n'});var Do,Fd,Mi,Ui,Un,Bo,jd,qd,Kd,zo,We,wr=ee(()=>{"use strict";Do=Co();Fd=Po(),Ui=!1,Un=!1,Bo=!1,jd=e=>{if(e===1)return!1;if(typeof SharedArrayBuffer>"u")return typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+e+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),!1;typeof process<"u"&&process.versions&&process.versions.node&&console.warn("env.wasm.numThreads is set to "+e+", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios.");try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},qd=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Kd=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",zo=async e=>{if(Ui)return Promise.resolve();if(Un)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(Bo)throw new Error("previous call to 'initializeWebAssembly()' failed.");Un=!0;let t=e.initTimeout,r=e.numThreads,n=e.simd,a=jd(r),u=n&&qd(),o=e.wasmPaths,d=typeof o=="string"?o:void 0,p=Kd(u,a),m=typeof o=="object"?o[p]:void 0,l=!1,y=[];if(t>0&&y.push(new Promise(b=>{setTimeout(()=>{l=!0,b()},t)})),y.push(new Promise((b,v)=>{let $=a?Fd:Do,x={locateFile:(O,I)=>{if(a&&O.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Ro()],{type:"text/javascript"}));if(O.endsWith(".wasm")){if(m)return m;let S=d??I;return p==="ort-wasm-simd.wasm"?S+"ort-wasm-simd.jsep.wasm":p==="ort-wasm-simd-threaded.wasm"?S+"ort-wasm-simd-threaded.jsep.wasm":S+p}return I+O}};if(a)if(x.numThreads=r,typeof Blob>"u")x.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let O=`var ortWasmThreaded=${$.toString()};`;x.mainScriptUrlOrBlob=new Blob([O],{type:"text/javascript"})}$(x).then(O=>{Un=!1,Ui=!0,Mi=O,b()},O=>{Un=!1,Bo=!0,v(O)})})),await Promise.race(y),l)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},We=()=>{if(Ui&&Mi)return Mi;throw new Error("WebAssembly is not initialized yet.")}});var Ne,Kr,Be,Wn=ee(()=>{"use strict";wr();Ne=(e,t)=>{let r=We(),n=r.lengthBytesUTF8(e)+1,a=r._malloc(n);return r.stringToUTF8(e,a,n),t.push(a),a},Kr=(e,t,r,n)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([a,u])=>{let o=t?t+a:a;if(typeof u=="object")Kr(u,o+".",r,n);else if(typeof u=="string"||typeof u=="number")n(o,u.toString());else if(typeof u=="boolean")n(o,u?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof u}`)})},Be=e=>{let t=We(),r=t.stackSave();try{let n=t.stackAlloc(8);t._OrtGetLastError(n,n+4);let a=t.HEAP32[n/4],u=t.HEAPU32[n/4+1],o=u?t.UTF8ToString(u):"";throw new Error(`${e} ERROR_CODE: ${a}, ERROR_MESSAGE: ${o}`)}finally{t.stackRestore(r)}}});var Mo,Uo=ee(()=>{"use strict";wr();Wn();Mo=e=>{let t=We(),r=0,n=[],a=e||{};try{if(e?.logSeverityLevel===void 0)a.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)a.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(a.terminate=!1);let u=0;return e?.tag!==void 0&&(u=Ne(e.tag,n)),r=t._OrtCreateRunOptions(a.logSeverityLevel,a.logVerbosityLevel,!!a.terminate,u),r===0&&Be("Can't create run options."),e?.extra!==void 0&&Kr(e.extra,"",new WeakSet,(o,d)=>{let p=Ne(o,n),m=Ne(d,n);t._OrtAddRunConfigEntry(r,p,m)!==0&&Be(`Can't set a run config entry: ${o} - ${d}.`)}),[r,n]}catch(u){throw r!==0&&t._OrtReleaseRunOptions(r),n.forEach(o=>t._free(o)),u}}});var Yd,Zd,Qd,Xd,Wo,No=ee(()=>{"use strict";wr();Wn();Yd=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Zd=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},Qd=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},Xd=(e,t,r)=>{for(let n of t){let a=typeof n=="string"?n:n.name;switch(a){case"webnn":if(a="WEBNN",typeof n!="string"){let o=n;if(o?.deviceType){let d=Ne("deviceType",r),p=Ne(o.deviceType,r);We()._OrtAddSessionConfigEntry(e,d,p)!==0&&Be(`Can't set a session config entry: 'deviceType' - ${o.deviceType}.`)}if(o?.numThreads){let d=o.numThreads;(typeof d!="number"||!Number.isInteger(d)||d<0)&&(d=0);let p=Ne("numThreads",r),m=Ne(d.toString(),r);We()._OrtAddSessionConfigEntry(e,p,m)!==0&&Be(`Can't set a session config entry: 'numThreads' - ${o.numThreads}.`)}if(o?.powerPreference){let d=Ne("powerPreference",r),p=Ne(o.powerPreference,r);We()._OrtAddSessionConfigEntry(e,d,p)!==0&&Be(`Can't set a session config entry: 'powerPreference' - ${o.powerPreference}.`)}}break;case"webgpu":if(a="JS",typeof n!="string"){let o=n;if(o?.preferredLayout){if(o.preferredLayout!=="NCHW"&&o.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${o.preferredLayout}`);let d=Ne("preferredLayout",r),p=Ne(o.preferredLayout,r);We()._OrtAddSessionConfigEntry(e,d,p)!==0&&Be(`Can't set a session config entry: 'preferredLayout' - ${o.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${a}`)}let u=Ne(a,r);We()._OrtAppendExecutionProvider(e,u)!==0&&Be(`Can't append execution provider: ${a}.`)}},Wo=e=>{let t=We(),r=0,n=[],a=e||{};Qd(a);try{let u=Yd(a.graphOptimizationLevel??"all"),o=Zd(a.executionMode??"sequential"),d=typeof a.logId=="string"?Ne(a.logId,n):0,p=a.logSeverityLevel??2;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log serverity level is not valid: ${p}`);let m=a.logVerbosityLevel??0;if(!Number.isInteger(m)||m<0||m>4)throw new Error(`log verbosity level is not valid: ${m}`);let l=typeof a.optimizedModelFilePath=="string"?Ne(a.optimizedModelFilePath,n):0;if(r=t._OrtCreateSessionOptions(u,!!a.enableCpuMemArena,!!a.enableMemPattern,o,!!a.enableProfiling,0,d,p,m,l),r===0&&Be("Can't create session options."),a.executionProviders&&Xd(r,a.executionProviders,n),a.freeDimensionOverrides)for(let[y,b]of Object.entries(a.freeDimensionOverrides)){if(typeof y!="string")throw new Error(`free dimension override name must be a string: ${y}`);if(typeof b!="number"||!Number.isInteger(b)||b<0)throw new Error(`free dimension override value must be a non-negative integer: ${b}`);let v=Ne(y,n);t._OrtAddFreeDimensionOverride(r,v,b)!==0&&Be(`Can't set a free dimension override: ${y} - ${b}.`)}return a.extra!==void 0&&Kr(a.extra,"",new WeakSet,(y,b)=>{let v=Ne(y,n),$=Ne(b,n);t._OrtAddSessionConfigEntry(r,v,$)!==0&&Be(`Can't set a session config entry: ${y} - ${b}.`)}),[r,n]}catch(u){throw r!==0&&t._OrtReleaseSessionOptions(r),n.forEach(o=>t._free(o)),u}}});var Wi,ft,Yr,Nn,Zr,Vn,Ni,Ue=ee(()=>{"use strict";Wi=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},ft=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},Yr=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Nn=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Zr=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Vn=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",Ni=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var Qr,Vi=ee(()=>{"use strict";Qr=async e=>{if(typeof e=="string")if(typeof process<"u"&&process.versions&&process.versions.node)try{return new Uint8Array(await(void 0)(e))}catch(t){if(t.code==="ERR_FS_FILE_TOO_LARGE"){let r=(void 0)(e),n=[];for await(let a of r)n.push(a);return new Uint8Array(Buffer.concat(n))}throw t}else{let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),n=r?parseInt(r,10):0;if(n<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let a=t.body.getReader(),u;try{u=new ArrayBuffer(n)}catch(d){if(d instanceof RangeError){let p=Math.ceil(n/65536);u=new WebAssembly.Memory({initial:p,maximum:p}).buffer}else throw d}let o=0;for(;;){let{done:d,value:p}=await a.read();if(d)break;let m=p.byteLength;new Uint8Array(u,o,m).set(p),o+=m}return new Uint8Array(u,0,n)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}});var Jd,ec,Vo,Ho,Lo,tc,ze,qt=ee(()=>{"use strict";Ue();Jd=["V","I","W","E","F"],ec=(e,t)=>{console.log(`[${Jd[e]},${new Date().toISOString()}]${t}`)},Lo=(e,t)=>{Vo=e,Ho=t},tc=(e,t)=>{let r=Zr(e),n=Zr(Vo);r>=n&&ec(r,typeof t=="function"?t():t)},ze=(...e)=>{Ho&&tc(...e)}});var Go,Fo=ee(()=>{"use strict";Ue();Go=(e,t)=>new(Nn(t))(e)});var Hn=ee(()=>{"use strict"});var Ln,rc,jo,Li,Hi,Ko,Yo=ee(()=>{"use strict";qt();Hn();Ln=e=>Math.ceil(e/16)*16,rc=1,jo=()=>rc++,Li=async(e,t,r,n)=>{let a=Ln(r),u=e.device.createBuffer({size:a,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let o=e.getCommandEncoder();e.endComputePass(),o.copyBufferToBuffer(t,0,u,0,a),e.flush(),await u.mapAsync(GPUMapMode.READ);let d=u.getMappedRange();if(n){let p=n();return p.set(new Uint8Array(d,0,r)),p}else return new Uint8Array(d.slice(0,r))}finally{u.destroy()}},Hi=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let n=r.buffer,a=r.byteOffset,u=r.byteLength,o=Ln(u),d=this.storageCache.get(t);if(!d)throw new Error("gpu data for uploading does not exist");if(d.originalSize!==u)throw new Error(`inconsistent data size. gpu data size=${d.originalSize}, data size=${u}`);let p=this.backend.device.createBuffer({mappedAtCreation:!0,size:o,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),m=p.getMappedRange();new Uint8Array(m).set(new Uint8Array(n,a,u)),p.unmap();let l=this.backend.getCommandEncoder();this.backend.endComputePass(),l.copyBufferToBuffer(p,0,d.gpuData.buffer,0,o),ze("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(p)}memcpy(t,r){let n=this.storageCache.get(t);if(!n)throw new Error("source gpu data for memcpy does not exist");let a=this.storageCache.get(r);if(!a)throw new Error("destination gpu data for memcpy does not exist");if(n.originalSize!==a.originalSize)throw new Error("inconsistent source and destination gpu data size");let u=Ln(n.originalSize),o=this.backend.getCommandEncoder();this.backend.endComputePass(),o.copyBufferToBuffer(n.gpuData.buffer,0,a.gpuData.buffer,0,u)}registerExternalBuffer(t,r,n){let a;if(n){if(a=this.externalBuffers.get(n),a===void 0)throw new Error("previous buffer is not registered");if(t===n)return ze("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${a}, buffer is the same, skip.`),a;this.externalBuffers.delete(n)}else a=jo();return this.storageCache.set(a,{gpuData:{id:a,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,a),ze("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${a}, registered.`),a}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),ze("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let n=Ln(t),a,u=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,o=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(u||o){let p=u?this.freeBuffers:this.freeUniformBuffers,m=p.get(n);m||(m=[],p.set(n,m)),m.length>0?a=m.pop():a=this.backend.device.createBuffer({size:n,usage:r})}else a=this.backend.device.createBuffer({size:n,usage:r});let d={id:jo(),type:0,buffer:a};return this.storageCache.set(d.id,{gpuData:d,originalSize:t}),ze("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${d.id}`),d}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return ze("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let n=this.storageCache.get(t);if(!n)throw new Error("data does not exist");await Li(this.backend,n.gpuData.buffer,n.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},Ko=(...e)=>new Hi(...e)});var Gi,we,qe=ee(()=>{"use strict";Gi=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},we=e=>new Gi(e)});var Fi,Tt,V,sr,Gn,Fn,jn,Ie=ee(()=>{"use strict";Fi=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},Tt=class{static calcShape(t,r,n=!1){let a=t.length,u=r.length;if(a===0)return r;if(u===0)return t;let o=Math.max(t.length,r.length),d=new Array(o);if(n){if(a<2||u<2)return;let p=Fi.calcMatMulShape([t[a-2],t[a-1]],[r[u-2],r[u-1]]);if(p===void 0)return;[d[o-2],d[o-1]]=p}for(let p=n?3:1;p<=o;p++){let m=a-p<0?1:t[a-p],l=u-p<0?1:r[u-p];if(m!==l&&m>1&&l>1)return;d[o-p]=Math.max(m,l)}return d}static isValidBroadcast(t,r){let n=t.length,a=r.length;if(n>a)return!1;for(let u=1;u<=n;u++)if(t[n-u]!==1&&t[n-u]!==r[a-u])return!1;return!0}},V=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,n){let a=1;for(let u=r;u<n;u++){if(t[u]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");a*=t[u]}return a}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let n=new Array(r);n[r-1]=1,n[r-2]=t[r-1];for(let a=r-3;a>=0;--a)n[a]=n[a+1]*t[a+1];return n}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(n=>this.normalizeAxis(n,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(n=>t[n]):t.slice().reverse()}static padShape(t,r){let n=t.length;return t.map((a,u)=>a+r[u]+r[u+n])}static areEqual(t,r){return t.length!==r.length?!1:t.every((n,a)=>n===r[a])}},sr=class e{static adjustPoolAttributes(t,r,n,a,u,o){if(!t&&n.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let d=0;d<r.length-2;d++)d>=n.length?n.push(r[d+2]):n[d]=r[d+2];for(let d=0;d<n.length;d++)if(d<a.length){if(a[d]<0)throw new Error("strides should be greater than or equal to 1")}else a.push(1);for(let d=0;d<n.length;d++)if(d<u.length){if(u[d]<0)throw new Error("dilations should be greater than or equal to 1")}else u.push(1);for(let d=0;d<n.length*2;d++)if(d<o.length){if(o[d]<0)throw new Error("pad should be greater than or equal to 1")}else o.push(0);for(let d=0;d<n.length;d++){if(n[d]<=0)throw new Error("kernel shapes need to be greater than 0");if(o[d]>=n[d]||o[d+n.length]>=n[d])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,n,a,u,o,d){if(d){if(u.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(a.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let p=0;p<t.length-2;p++)e.adjustPadAndReturnShape(t[p+(o?1:2)],r[p],n[p],a[p],u,p,p+t.length-2,d)}}static computePoolOutputShape(t,r,n,a,u,o,d){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let p=[r[0],r[1]];return e.computeShapeHelper(t,r,p,n,a,u,o,d),p}static computeConvOutputShape(t,r,n,a,u,o,d){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let p=[t[0],r[0]];return e.computeShapeHelper(!1,t,p,n,a,u,o,d),p}static computeShapeHelper(t,r,n,a,u,o,d,p){if(t)for(let m=0;m<r.length-2;m++)n.push(1);else for(let m=0;m<r.length-2;m++)n.push(e.adjustPadAndReturnShape(r[m+2],a[m],u[m],o[m],d,m,m+r.length-2,p))}static adjustPadAndReturnShape(t,r,n,a,u,o,d,p){let m=n*(a-1)+1;if(p&&p!=="NOTSET")switch(p){case"VALID":return u[o]=0,u[d]=0,Math.floor((t-m)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(n!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let y=((t+r-1)/r-1)*r+a-t;return u[o]=Math.floor(p==="SAME_LOWER"?(y+1)/2:y/2),u[d]=y-u[o],Math.floor((t+y-a)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+u[o]+u[d]-m)/r+1)}},Gn=class{static getShapeOfGemmResult(t,r,n,a,u){if(t.length!==2||n.length!==2)throw new Error("shape need to be of size 2");let o,d,p;r?(o=t[1],d=t[0]):(o=t[0],d=t[1]);let m=-1;if(a?(p=n[0],m=1):(p=n[1],m=0),n[m]!==d)throw new Error("dimension mismatch");if(o<=0||p<=0||d<=0)throw new Error("invalid shape specified");if(u&&!Tt.isValidBroadcast(u,[o,p]))throw new Error("gemm: invalid bias shape for broadcast");return[o,p,d]}},Fn=-34028234663852886e22,jn=34028234663852886e22});var nc,qi,He,St,K,Le,Je,xt,mt,ce,Ki,W,te,qn,ji,Zo,$r,De,xe=ee(()=>{"use strict";Ue();Ie();nc=64,qi=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},He=(e,t=1)=>{let r=qi(e,t);return typeof r=="string"?r:r[0]},St=(e,t=1)=>{let r=qi(e,t);return typeof r=="string"?r:r[1]},K=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:V.computeStrides(e)}],Le=e=>e%4===0?4:e%2===0?2:1,Je=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,xt=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,mt=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,ce=(e,t,r)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?`${e}[(${t}) / 4][(${t}) % 4]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,Ki=(e,t,r,n,a)=>{let u=typeof r=="number",o=u?r:r.length,d=[...new Array(o).keys()],p=o<2?"u32":o<=4?`vec${o}<u32>`:`array<u32, ${o}>`,m=qi(t,a),l=typeof m=="string"?m:m[1],y=typeof m=="string"?m:m[0],b={indices:p,value:l,storage:y,tensor:t},v=F=>typeof F=="string"?F:`${F}u`,$={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},x=u?"uniforms.":"",O=`${x}${e}_shape`,I=`${x}${e}_strides`,S="";for(let F=0;F<o-1;F++)S+=`
    let dim${F} = current / ${ce(I,F,o)};
    let rest${F} = current % ${ce(I,F,o)};
    indices[${F}] = dim${F};
    current = rest${F};
    `;S+=`indices[${o-1}] = current;`;let T=o<2?"":`
  fn o2i_${e}(offset: u32) -> ${b.indices} {
    var indices: ${b.indices};
    var current = offset;
    ${S}
    return indices;
  }`,E=F=>($.offsetToIndices=!0,o<2?F:`o2i_${e}(${F})`),M=[];if(o>=2)for(let F=o-1;F>=0;F--)M.push(`${ce(I,F,o)} * (indices[${F}])`);let B=o<2?"":`
  fn i2o_${e}(indices: ${b.indices}) -> u32 {
    return ${M.join("+")};
  }`,N=F=>($.indicesToOffset=!0,o<2?F:`i2o_${e}(${F})`),H=(...F)=>o===0?"0u":`${b.indices}(${F.map(v).join(",")})`,X=(F,ie)=>o<2?`${F}`:`${ce(F,ie,o)}`,D=(F,ie,he)=>o<2?`${F}=${he};`:`${ce(F,ie,o)}=${he};`,j={},se=(F,ie)=>{$.broadcastedIndicesToOffset=!0;let he=`${ie.name}broadcastedIndicesTo${e}Offset`;if(he in j)return`${he}(${F})`;let et=[];for(let st=o-1;st>=0;st--){let Re=ie.indicesGet("outputIndices",st+ie.rank-o);et.push(`${X(I,st)} * (${Re} % ${X(O,st)})`)}return j[he]=`fn ${he}(outputIndices: ${ie.type.indices}) -> u32 {
             return ${et.length>0?et.join("+"):"0u"};
           }`,`${he}(${F})`},be=(F,ie)=>(()=>{if(b.storage===b.value)return`${e}[${F}]=${ie};`;if(b.storage==="vec2<u32>"&&b.value==="i32")return`${e}[${F}]=vec2<u32>(u32(${ie}), select(0u, 0xFFFFFFFFu, ${ie} < 0));`;if(b.storage==="vec2<u32>"&&b.value==="u32")return`${e}[${F}]=vec2<u32>(u32(${ie}), 0u);`;if(b.storage==="u32"&&b.value==="vec4<bool>")return`${e}[${F}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${ie}));`;throw new Error(`not supported combination of storage type ${b.storage} and value type ${b.value} yet`)})(),re=F=>(()=>{if(b.storage===b.value)return`${e}[${F}]`;if(b.storage==="vec2<u32>"&&b.value==="i32")return`i32(${e}[${F}].x)`;if(b.storage==="vec2<u32>"&&b.value==="u32")return`u32(${e}[${F}].x)`;if(b.storage==="u32"&&b.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${F}] & 0xFFu), bool(${e}[${F}] & 0xFF00u), bool(${e}[${F}] & 0xFF0000u), bool(${e}[${F}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${b.storage} and value type ${b.value} yet`)})(),$e=o<2?"":`
  fn get_${e}ByIndices(indices: ${b.indices}) -> ${l} {
    return ${re(`i2o_${e}(indices)`)};
  }`,Ge=o<2?"":(()=>{let F=d.map(he=>`d${he}: u32`).join(", "),ie=d.map(he=>`d${he}`).join(", ");return`
  fn get_${e}(${F}) -> ${l} {
    return get_${e}ByIndices(${H(ie)});
  }`})(),ge=(...F)=>{if(F.length!==o)throw new Error(`indices length must be ${o}`);let ie=F.map(v).join(",");return o===0?re("0u"):o===1?re(ie[0]):($.get=!0,$.getByIndices=!0,$.indicesToOffset=!0,`get_${e}(${ie})`)},Ee=F=>o<2?re(F):($.getByIndices=!0,$.indicesToOffset=!0,`get_${e}ByIndices(${F})`),pe=o<2?"":`
  fn set_${e}ByIndices(indices: ${b.indices}, value: ${l}) {
    ${be(`i2o_${e}(indices)`,"value")}
  }`,ve=o<2?"":(()=>{let F=d.map(he=>`d${he}: u32`).join(", "),ie=d.map(he=>`d${he}`).join(", ");return`
  fn set_${e}(${F}, value: ${l}) {
    set_${e}ByIndices(${H(ie)}, value);
  }`})();return{impl:()=>{let F=[],ie=!1;return $.offsetToIndices&&(F.push(T),ie=!0),$.indicesToOffset&&(F.push(B),ie=!0),$.broadcastedIndicesToOffset&&(Object.values(j).forEach(he=>F.push(he)),ie=!0),$.set&&(F.push(ve),ie=!0),$.setByIndices&&(F.push(pe),ie=!0),$.get&&(F.push(Ge),ie=!0),$.getByIndices&&(F.push($e),ie=!0),!u&&ie&&F.unshift(`const ${O} = ${b.indices}(${r.join(",")});`,`const ${I} = ${b.indices}(${V.computeStrides(r).join(",")});`),F.join(`
`)},type:b,offsetToIndices:E,indicesToOffset:N,broadcastedIndicesToOffset:se,indices:H,indicesGet:X,indicesSet:D,set:(...F)=>{if(F.length!==o+1)throw new Error(`indices length must be ${o}`);let ie=F[o];if(typeof ie!="string")throw new Error("value must be string");let he=F.slice(0,o).map(v).join(",");return o===0?be("0u",ie):o===1?be(he[0],ie):($.set=!0,$.setByIndices=!0,$.indicesToOffset=!0,`set_${e}(${he}, ${ie})`)},setByOffset:be,setByIndices:(F,ie)=>o<2?be(F,ie):($.setByIndices=!0,$.indicesToOffset=!0,`set_${e}ByIndices(${F}, ${ie});`),get:ge,getByOffset:re,getByIndices:Ee,usage:n,name:e,strides:I,shape:O,rank:o}},W=(e,t,r,n=1)=>Ki(e,t,r,"input",n),te=(e,t,r,n=1)=>Ki(e,t,r,"output",n),qn=(e,t,r,n=1)=>Ki(e,t,r,"internal",n),ji=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=nc){let r=typeof t=="number"?t:t[0],n=typeof t=="number"?1:t[1],a=typeof t=="number"?1:t[2],u=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,o=u?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,d=u?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*n*a}u + local_idx;`;return`@compute @workgroup_size(${r}, ${n}, ${a})
  fn main(${o}) {
    ${d}
  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let n=t.usage==="input"?"read":"read_write",a=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${n}> ${t.name}: array<${a}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`
`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,n=1){return this.uniforms.push({name:t,type:r,length:n}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:n,length:a}of this.uniforms)if(a&&a>4)t.push(`${r}:array<vec4<${n}>, ${Math.ceil(a/4)}>`);else{let u=a==null||a===1?n:`vec${a}<${n}>`;t.push(`${r}:${u}`)}return`
      struct Uniforms { ${t.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`
`)+this.internalVariables.map(t=>t.impl()).join(`
`)}},Zo=e=>new ji(e),$r=(e,t)=>{let r=e.length,n=[];for(let a=0;a<r;a++){let u=r-1-a,o=e[u]||1;(t[t.length-1-a]||1)>1&&o===1&&n.unshift(u)}return n},De=e=>!0});var ic,Qo,ac,oc,Ct,Xo,Jo,_r=ee(()=>{"use strict";Ie();qe();xe();ic=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},Qo=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,ac=(e,t)=>V.sortBasedOnPerm(e,Qo(e.length,t)),oc=(e,t,r,n)=>{let a=[];a.push(`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {
    var a: ${r.type.indices};`);for(let u=0;u<t;++u)a.push(r.indicesSet("a",e[u],`i[${u}]`));return a.push("return a;}"),a.join(`
`)},Ct=(e,t)=>{let r=e.dataType,n=e.dims.length,a=Qo(n,t),u=De(n),o=ac(e.dims,a),d=u?o.length:o,p=u?n:e.dims,m=te("output",r,d),l=W("a",r,p),y=b=>`
  ${b.registerUniform("output_size","u32").declareVariables(l,m)}

  ${oc(a,n,l,m)}

  ${b.mainStart()}
    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${m.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${m.setByOffset("global_idx",l.getByIndices("aIndices"))}
  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:u?["rank"]:["dims"]},getRunData:b=>{let v=V.size(o);return{outputs:[{dims:o,dataType:b[0].dataType}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:u?[{type:"uint32",data:v},...K(b[0].dims),...K(o)]:[{type:"uint32",data:v}]}},getShaderSource:y}},Xo=(e,t)=>{ic(e.inputs),e.compute(Ct(e.inputs[0],t.perm))},Jo=e=>we({perm:e.perm})});var sc,uc,lc,dc,cc,pc,fc,mc,hc,gc,Et,es,ts,rs,ns,is,as,os,ss,us,ls,ds=ee(()=>{"use strict";Ie();xe();Kn();_r();sc={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},uc={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},lc={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},dc={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},cc=(e,t)=>{let r=[];for(let n=t-e;n<t;++n)r.push(n);return r},pc=(e,t)=>{let r=[],n=e.length;for(let u=0;u<n;u++)t.indexOf(u)===-1&&r.push(e[u]);let a=t.map(u=>e[u]);return[r,a]},fc=(e,t)=>{let r=e.length+t.length,n=[],a=0;for(let u=0;u<r;u++)t.indexOf(u)===-1?n.push(e[a++]):n.push(1);return n},mc=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},hc=(e,t)=>{let r=[];if(!mc(e,t)){for(let n=0;n<t;++n)e.indexOf(n)===-1&&r.push(n);e.forEach(n=>r.push(n))}return r},gc=(e,t,r,n,a,u,o)=>{let d=r[0].dims,p=V.size(u),m=V.size(o),l=W("_A",r[0].dataType,d),y=te("output",a,u),b=32,v=`
          var<workgroup> aBestValues : array<${y.type.storage}, ${b}>;
       `;return{name:e,shaderCache:t,getShaderSource:x=>`
        ${x.registerUniform("reduceSize","u32").declareVariables(l,y)}
        ${v}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${x.mainStart(b)}

          let outputIndex = global_idx / ${b};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = ${y.type.storage}(${lc[n]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${b}) {
           let candidate = ${y.type.storage}(${l.getByOffset("offset + k")});
           bestValue = ${sc[n]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${b}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${uc[n]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${y.setByOffset("outputIndex",`${n==="mean"?`bestValue / ${y.type.storage}(uniforms.reduceSize)`:`${dc[n]}`}`)};
         }
        }`,getRunData:()=>({outputs:[{dims:u,dataType:a}],dispatchGroup:{x:p},programUniforms:[{type:"uint32",data:m}]})}},Et=(e,t,r,n)=>{let a=e.inputs.length===1?r:Yi(e.inputs,r),u=a.axes;u.length===0&&!a.noopWithEmptyAxes&&(u=e.inputs[0].dims.map((v,$)=>$));let o=V.normalizeAxes(u,e.inputs[0].dims.length),d=o,p=e.inputs[0],m=hc(d,e.inputs[0].dims.length);m.length>0&&(p=e.compute(Ct(e.inputs[0],m),{inputs:[0],outputs:[-1]})[0],d=cc(d.length,p.dims.length));let[l,y]=pc(p.dims,d),b=l;a.keepDims&&(b=fc(l,o)),e.compute(gc(t,{hint:a.cacheKey,inputDependencies:["type"]},[p],n,e.inputs[0].dataType,b,y),{inputs:[p]})},es=(e,t)=>{Et(e,"ReduceMeanShared",t,"mean")},ts=(e,t)=>{Et(e,"ReduceL1Shared",t,"l1")},rs=(e,t)=>{Et(e,"ReduceL2Shared",t,"l2")},ns=(e,t)=>{Et(e,"ReduceLogSumExpShared",t,"logSumExp")},is=(e,t)=>{Et(e,"ReduceMaxShared",t,"max")},as=(e,t)=>{Et(e,"ReduceMinShared",t,"min")},os=(e,t)=>{Et(e,"ReduceProdShared",t,"prod")},ss=(e,t)=>{Et(e,"ReduceSumShared",t,"sum")},us=(e,t)=>{Et(e,"ReduceSumSquareShared",t,"sumSquare")},ls=(e,t)=>{Et(e,"ReduceLogSumShared",t,"logSum")}});var Ot,yc,Yn,Yi,kt,bc,vc,wc,$c,_c,Sc,xc,Cc,Ic,Ac,Pt,cs,ps,fs,ms,hs,gs,ys,bs,vs,ws,Kn=ee(()=>{"use strict";Ie();qe();xe();ds();Ot=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},yc=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],Yn=(e,t,r,n,a,u,o=!1,d=!1)=>{let p=[],m=r[0].dims,l=m.length,y=V.normalizeAxes(a,l),b=!d&&y.length===0;m.forEach((O,I)=>{b||y.indexOf(I)>=0?o&&p.push(1):p.push(O)});let v=p.length,$=V.size(p);return{name:e,shaderCache:t,getShaderSource:O=>{let I=[],S=W("_A",r[0].dataType,l),T=te("output",u,v),E=n(S,T,y),M=E[2];for(let B=0,N=0;B<l;B++)b||y.indexOf(B)>=0?(o&&N++,M=`for(var j${B}: u32 = 0; j${B} < ${m[B]}; j${B}++) {
                  ${E[2].includes("last_index")?`let last_index = j${B};`:""}
                  ${S.indicesSet("input_indices",B,`j${B}`)}
                  ${M}
                }`):(I.push(`${S.indicesSet("input_indices",B,T.indicesGet("output_indices",N))};`),N++);return`

        ${O.registerUniform("output_size","u32").declareVariables(S,T)}

        ${O.mainStart()}
          ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${S.type.indices};
          let output_indices = ${T.offsetToIndices("global_idx")};

          ${I.join(`
`)}
          ${E[0]}       // init ops for reduce max/min
          ${E[1]}
          ${M}
          ${E[3]}
          ${E.length===4?T.setByOffset("global_idx","value"):E.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:p,dataType:u}],dispatchGroup:{x:Math.ceil($/64)},programUniforms:[{type:"uint32",data:$},...K(m),...K(p)]})}},Yi=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),we({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},kt=(e,t,r,n)=>{let a=e.inputs,u=a.length===1?r:Yi(a,r);e.compute(Yn(t,{hint:u.cacheKey,inputDependencies:["rank"]},[a[0]],u.noopWithEmptyAxes&&u.axes.length===0?yc:n,u.axes,a[0].dataType,u.keepDims,u.noopWithEmptyAxes),{inputs:[0]})},bc=(e,t)=>{Ot(e.inputs),kt(e,"ReduceLogSum",t,(n,a)=>[`var value = ${a.type.storage}(0);`,"",`value += ${n.getByIndices("input_indices")};`,"value = log(value);"])},vc=(e,t)=>{Ot(e.inputs),kt(e,"ReduceL1",t,(n,a)=>[`var value = ${a.type.storage}(0);`,"",`value += abs(${n.getByIndices("input_indices")});`,""])},wc=(e,t)=>{Ot(e.inputs),kt(e,"ReduceL2",t,(n,a)=>[`var t = ${a.type.value}(0); var value = ${a.type.value}(0);`,"",`t = ${n.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},$c=(e,t)=>{Ot(e.inputs),kt(e,"ReduceLogSumExp",t,(n,a)=>[`var value = ${a.type.storage}(0);`,"",`value += exp(${n.getByIndices("input_indices")});`,"value = log(value);"])},_c=(e,t)=>{Ot(e.inputs),kt(e,"ReduceMax",t,(n,a,u)=>{let o=[];for(let d=0;d<n.rank;d++)(u.indexOf(d)>=0||u.length===0)&&o.push(n.indicesSet("input_indices",d,0));return[`${o.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};`,`value = max(value, ${n.getByIndices("input_indices")});`,""]})},Sc=(e,t)=>{Ot(e.inputs),kt(e,"ReduceMean",t,(n,a,u)=>{let o=1;for(let d=0;d<n.rank;d++)(u.indexOf(d)>=0||u.length===0)&&(o*=e.inputs[0].dims[d]);return["var sum = f32(0);","",`sum += f32(${n.getByIndices("input_indices")});`,`let value = ${a.type.value}(sum / ${o});`]})},xc=(e,t)=>{Ot(e.inputs),kt(e,"ReduceMin",t,(n,a,u)=>{let o=[];for(let d=0;d<n.rank;d++)(u.indexOf(d)>=0||u.length===0)&&o.push(`input_indices[${d}] = 0;`);return[`${o.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};`,`value = min(value, ${n.getByIndices("input_indices")});`,""]})},Cc=(e,t)=>{Ot(e.inputs),kt(e,"ReduceProd",t,(n,a)=>[`var value = ${a.type.storage}(1);`,"",`value *= ${n.getByIndices("input_indices")};`,""])},Ic=(e,t)=>{Ot(e.inputs),kt(e,"ReduceSum",t,(n,a)=>[`var value = ${a.type.storage}(0);`,"",`value += ${n.getByIndices("input_indices")};`,""])},Ac=(e,t)=>{Ot(e.inputs),kt(e,"ReduceSumSquare",t,(n,a)=>[`var t = ${a.type.value}(0); var value = ${a.type.value}(0);`,"",`t = ${n.getByIndices("input_indices")}; value += t * t;`,""])},Pt=(e,t,r)=>{if(t.length===0)return r;let n=1,a=1;for(let u=0;u<t.length;u++)t.indexOf(u)===-1?n*=e[u]:a*=e[u];return a<32&&n>1024},cs=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Sc(e,t):es(e,t)},ps=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?vc(e,t):ts(e,t)},fs=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?wc(e,t):rs(e,t)},ms=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?$c(e,t):ns(e,t)},hs=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?_c(e,t):is(e,t)},gs=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?xc(e,t):as(e,t)},ys=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Cc(e,t):os(e,t)},bs=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ic(e,t):ss(e,t)},vs=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ac(e,t):us(e,t)},ws=(e,t)=>{Pt(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?bc(e,t):ls(e,t)}});var $s,_s,Ss,Zi,xs=ee(()=>{"use strict";Ue();qe();Kn();$s=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},_s=(e,t)=>{$s(e.inputs);let r=(n,a,u)=>{let o=[];for(let d=0;d<n.rank;d++)(u.indexOf(d)>=0||u.length===0)&&o.push(`input_indices[${d}] = 0;`);return[`${o.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",a.setByOffset("global_idx","best_index")]};e.compute(Yn("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Ss=(e,t)=>{$s(e.inputs);let r=(n,a,u)=>{let o=[];for(let d=0;d<n.rank;d++)(u.indexOf(d)>=0||u.length===0)&&o.push(`input_indices[${d}] = 0;`);return[`${o.join(`
`)}`,`var value = ${n.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${n.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {
         value = ${n.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",a.setByOffset("global_idx","best_index")]};e.compute(Yn("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Zi=e=>we(e)});var Tc,Ec,Oc,kc,Zn,Pc,Cs,Qi=ee(()=>{"use strict";Ue();Hn();xe();Tc=(e,t)=>{let r=e[0],n=e[1],a=e[2],u=e[3],o=e[4],d=e[5];if(o&&d)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let p=r.dims[0],m=r.dims[1],l=r.dims[2];if(a.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(n.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(n.dims[0]!==l)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(a.dims[0]!==n.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let y=a.dims[0]/3,b=y,v=b;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let T of t.qkvHiddenSizes)if(T%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");y=t.qkvHiddenSizes[0],b=t.qkvHiddenSizes[1],v=t.qkvHiddenSizes[2]}let $=m;if(y!==b)throw new Error("qkv_hidden_sizes first element should be same as the second");if(a.dims[0]!==y+b+v)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let x=0;if(o){if(b!==v)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(o.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(o.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(o.dims[1]!==p)throw new Error('Input "past" second dimension must be batch_size');if(o.dims[2]!==t.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(o.dims[4]!==b/t.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(x=o.dims[3])}let O=$+x,I=-1,S=0;if(u)throw new Error("Mask not supported");if(o)throw new Error("past is not supported");if(d)throw new Error("relativePositionBias is not supported");return{batchSize:p,sequenceLength:m,pastSequenceLength:x,kvSequenceLength:$,totalSequenceLength:O,maxSequenceLength:I,inputHiddenSize:l,hiddenSize:y,vHiddenSize:v,headSize:Math.floor(y/t.numHeads),vHeadSize:Math.floor(v/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:S,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Ec=(e,t,r,n)=>{let a=Le(n),u=64,o=n/a;o<u?u=1:o/8<64&&(u=Math.ceil(o/8));let d=Math.ceil(n/a/u),m=[{type:ft(t.dataType),data:1/n},{type:"uint32",data:o},{type:"uint32",data:d}],l=He(t.dataType,a),y=b=>{let v=te("x",t.dataType,t.dims,a),$="thread_max_vector";a===2?$="max(thread_max_vector.x, thread_max_vector.y)":a===4&&($="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");let x=St(t.dataType),O=[{name:"d_inv",type:x},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`
  var<workgroup> wgMax: array<f32, ${u}>;
  var<workgroup> wgSum: array<f32, ${u}>;
  ${b.registerUniforms(O).declareVariables(v)}
  ${b.mainStart([u,1,1])}
    let localOffset = local_idx * uniforms.elements_per_wg;
    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;

    var thread_max_vector = ${Je("f32",a,"-3.402823e+38f")};
    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
      thread_max_vector = max(${xt(x,a,"x[offset + i]")}, thread_max_vector);
    }
    wgMax[local_idx] = ${$};
    workgroupBarrier();

    var maxValue = -3.402823e+38f;
    for (var i = 0u; i < ${u}; i++) {
      maxValue = max(wgMax[i], maxValue);
    }

    var sumVector = ${Je("f32",a,"0")};
    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
      sumVector += exp(${xt(x,a,"x[offset + i]")} - maxValue);
    }
    wgSum[local_idx] = ${mt("sumVector",a)};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${u}; i++) {
      sum += wgSum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
        x[offset + i] = ${Je("f32",a,"uniforms.d_inv")};
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {
        let f32input = ${xt(x,a,"x[offset + i]")};
        x[offset + i] = ${v.type.value}(exp(f32input - maxValue) / sum);
      }
    }
  }`};e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${u};${l};${a}`},getShaderSource:y,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:m})},{inputs:[t],outputs:[]})},Oc=(e,t,r,n,a,u)=>{let o=[a.batchSize,a.numHeads,a.sequenceLength,a.kvSequenceLength+a.pastSequenceLength],d=u.scale===0?1/Math.sqrt(a.headSize):u.scale,p=Le(a.headSize),m=a.headSize/p,l=12,y={x:Math.ceil(a.totalSequenceLength/l),y:Math.ceil(a.sequenceLength/l),z:a.batchSize*a.numHeads},b=ft(t.dataType),v=[{type:"uint32",data:a.sequenceLength},{type:"uint32",data:m},{type:"uint32",data:a.totalSequenceLength},{type:"uint32",data:a.kvSequenceLength},{type:b,data:d}],$=[t,r],x=I=>{let S=W("q",t.dataType,t.dims,p),T=W("key",r.dataType,r.dims,p),E=te("output",t.dataType,o),M=He(t.dataType),B=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:M}];return`
  const beta: ${M} = 1.0;
  const TILE_SIZE = ${l}u;

  var<workgroup> tileQ: array<${S.type.storage}, ${l*l}>;
  var<workgroup> tileK: array<${S.type.storage}, ${l*l}>;
  ${I.registerUniforms(B).declareVariables(S,T,E)}
  ${I.mainStart([l,l,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let lm = m + local_id.y;
    let ln = n + local_id.x;

    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;
    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;

    var value = ${Je(M,p)};
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m + local_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];
      }

      workgroupBarrier();
    }

    let headOffset = headIdx * uniforms.M * uniforms.N;
    if (lm < uniforms.M && ln < uniforms.N) {
      let outputIdx = headOffset + lm * uniforms.N + ln;
      output[outputIdx] = ${mt("value",p)} * uniforms.alpha;
    }
  }`},O=e.compute({name:"AttentionProbs",shaderCache:{hint:`${p}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:o,dataType:t.dataType,gpuDataType:0}],dispatchGroup:y,programUniforms:v}),getShaderSource:x},{inputs:$,outputs:[-1]})[0];return Ec(e,O,a.batchSize*a.numHeads*a.sequenceLength,a.totalSequenceLength),O},kc=(e,t,r,n)=>{let a=[n.batchSize,n.sequenceLength,n.vHiddenSize],u=12,o={x:Math.ceil(n.vHeadSize/u),y:Math.ceil(n.sequenceLength/u),z:n.batchSize*n.numHeads},d=[{type:"uint32",data:n.sequenceLength},{type:"uint32",data:n.totalSequenceLength},{type:"uint32",data:n.vHeadSize},{type:"uint32",data:n.numHeads},{type:"uint32",data:n.vHiddenSize}],p=m=>{let l=W("probs",t.dataType,t.dims),y=W("v",r.dataType,r.dims),b=te("output",t.dataType,a),v=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}];return`
  const TILE_SIZE = ${u}u;
  var<workgroup> tileQ: array<${l.type.value}, ${u*u}>;
  var<workgroup> tileK: array<${l.type.value}, ${u*u}>;
  ${m.registerUniforms(v).declareVariables(l,y,b)}
  ${m.mainStart([u,u,1])}
   let headIdx = workgroup_id.z;
   let m = workgroup_id.y * TILE_SIZE + local_id.y;
   let n = workgroup_id.x * TILE_SIZE + local_id.x;

   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;
   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;

   var value = ${l.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
     if (m < uniforms.M && w + local_id.x < uniforms.K) {
       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
     }
     if (n < uniforms.N && w + local_id.y < uniforms.K) {
       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];
     }
     workgroupBarrier();
     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;
   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + currentBatchHeadNumber * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return e.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:a,dataType:t.dataType,gpuDataType:0}],dispatchGroup:o,programUniforms:d}),getShaderSource:p},{inputs:[t,r],outputs:[0]})[0]},Zn=(e,t,r,n,a,u,o,d,p,m,l)=>{let y=Oc(e,t,r,p,m,l);kc(e,y,n,m)},Pc=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],n=t.sequenceLength,a=t.inputHiddenSize,u=t.headSize,o=12,d={x:Math.ceil(t.headSize/o),y:Math.ceil(t.sequenceLength/o),z:t.batchSize*t.numHeads},p=[e.inputs[0],e.inputs[1],e.inputs[2]],m=[{type:"uint32",data:n},{type:"uint32",data:a},{type:"uint32",data:u},{type:"uint32",data:t.numHeads},{type:"uint32",data:t.headSize},{type:"uint32",data:t.hiddenSize},{type:"uint32",data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],l=y=>{let b=te("output_q",p[0].dataType,r),v=te("output_k",p[0].dataType,r),$=te("output_v",p[0].dataType,r),x=W("input",p[0].dataType,p[0].dims),O=W("weight",p[1].dataType,p[1].dims),I=W("bias",p[2].dataType,p[2].dims),S=x.type.storage,T=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${o}u;
  var<workgroup> tileInput: array<${S}, ${o*o}>;
  var<workgroup> tileWeightQ: array<${S}, ${o*o}>;
  var<workgroup> tileWeightK: array<${S}, ${o*o}>;
  var<workgroup> tileWeightV: array<${S}, ${o*o}>;
  ${y.registerUniforms(T).declareVariables(x,O,I,b,v,$)}
  ${y.mainStart([o,o,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE + local_id.y;
    let n = workgroup_id.x * TILE_SIZE + local_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${S}(0);
    var valueK = ${S}(0);
    var valueV = ${S}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:d,programUniforms:m}),getShaderSource:l},{inputs:p,outputs:[-1,-1,-1]})},Cs=(e,t)=>{let r=Tc(e.inputs,t),[n,a,u]=Pc(e,r);return Zn(e,n,a,u,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var Rc,Bc,Dc,Is,As=ee(()=>{"use strict";vt();Ie();qe();xe();Rc=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(n,a,u)=>{let o=a.length;if(o!==n.length)throw new Error(`${u}: num dimensions != ${o}`);a.forEach((d,p)=>{if(d!==n[p])throw new Error(`${u}: dim[${p}] do not match`)})};if(e[0].dims.length>1){let n=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,n,"Invalid input scale"),r(e[2].dims,n,"Invalid input B"),r(e[3].dims,n,"Invalid input mean"),r(e[4].dims,n,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Bc=(e,t)=>{let{epsilon:r,spatial:n,format:a}=t,u=e[0].dims,o=n?Le(u[u.length-1]):1,d=a==="NHWC"&&u.length>1?o:1,p=V.size(u)/o,m=De(u.length)&&n,l=m?u.length:u,y=W("x",e[0].dataType,e[0].dims,o),b=W("scale",e[1].dataType,e[1].dims,d),v=W("bias",e[2].dataType,e[2].dims,d),$=W("inputMean",e[3].dataType,e[3].dims,d),x=W("inputVar",e[4].dataType,e[4].dims,d),O=te("y",e[0].dataType,l,o),I=()=>{let T="";if(n)T=`let cOffset = ${u.length===1?"0u":a==="NHWC"?`outputIndices[${u.length-1}] / ${o}`:"outputIndices[1]"};`;else if(a==="NCHW")T=`
            ${O.indicesSet("outputIndices","0","0")}
            let cOffset = ${O.indicesToOffset("outputIndices")};`;else{T=`var cIndices = ${b.type.indices}(0);
                       cIndices[0] = outputIndices[${u.length-1}];`;for(let E=1;E<b.rank;E++)T+=`cIndices[${E}] = outputIndices[${E}];`;T+=`let cOffset = ${b.indicesToOffset("cIndices")};`}return T},S=T=>`
  const epsilon = ${r};
  ${T.registerUniform("outputSize","u32").declareVariables(y,b,v,$,x,O)}
  ${T.mainStart()}
  ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${O.offsetToIndices(`global_idx * ${o}`)};
    ${I()}
    let scale = ${b.getByOffset("cOffset")};
    let bias = ${v.getByOffset("cOffset")};
    let inputMean = ${$.getByOffset("cOffset")};
    let inputVar = ${x.getByOffset("cOffset")};
    let x = ${y.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${O.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${n}_${o}`,inputDependencies:m?["rank","type","type","type","type"]:void 0},getShaderSource:S,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:m?[{type:"uint32",data:p},...K(u)]:[{type:"uint32",data:p}]})}},Dc=e=>we(e),Is=(e,t)=>{let{inputs:r,outputCount:n}=e,a=Dc({...t,outputCount:n});if(Te.webgpu.validateInputContent&&Rc(r,a),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Bc(r,a))}});var zc,Mc,Ts,Es=ee(()=>{"use strict";Ie();xe();zc=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Mc=e=>{let t=e[0].dims,r=e[0].dims[2],n=V.size(t)/4,a=e[0].dataType,u=W("input",a,t,4),o=W("bias",a,[r],4),d=W("residual",a,t,4),p=te("output",a,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:l=>`
  const channels = ${r}u / 4;
  ${l.declareVariables(u,o,d,p)}

  ${l.mainStart()}
    ${l.guardAgainstOutOfBoundsWorkgroupSizes(n)}
    let value = ${u.getByOffset("global_idx")}
      + ${o.getByOffset("global_idx % channels")} + ${d.getByOffset("global_idx")};
    ${p.setByOffset("global_idx","value")}
  }`}},Ts=e=>{zc(e.inputs),e.compute(Mc(e.inputs))}});var Uc,ke,Os,ks,Ps,Rs,Bs,Ds,zs,Ms,Us,Wc,Ws,Ns,Vs,Hs,Qn,Ls,Xn,Gs,Fs,js,qs,Ks,Ys,Zs,Qs,Xs,Js,eu,tu,ru,nu,iu,au,ou,su,uu,Xi=ee(()=>{"use strict";Ue();Ie();qe();xe();Uc=(e,t,r,n,a,u)=>{let o=Math.ceil(t/4),d="";typeof a=="string"?d=`${a}(a)`:d=a("a");let p=W("inputData",r,[o],4),m=te("outputData",n,[o],4);return`
      ${e.registerUniform("vec_size","u32").declareVariables(p,m)}

  ${u??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${p.getByOffset("global_idx")};
    ${m.setByOffset("global_idx",d)}
  }`},ke=(e,t,r,n,a,u=e.dataType)=>({name:t,shaderCache:{hint:a,inputDependencies:["type"]},getShaderSource:o=>Uc(o,V.size(e.dims),e.dataType,u,r,n),getRunData:o=>({outputs:[{dims:e.dims,dataType:u}],dispatchGroup:{x:Math.ceil(V.size(o[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(V.size(e.dims)/4)}]})}),Os=e=>{e.compute(ke(e.inputs[0],"Abs","abs"))},ks=e=>{e.compute(ke(e.inputs[0],"Acos","acos"))},Ps=e=>{e.compute(ke(e.inputs[0],"Acosh","acosh"))},Rs=e=>{e.compute(ke(e.inputs[0],"Asin","asin"))},Bs=e=>{e.compute(ke(e.inputs[0],"Asinh","asinh"))},Ds=e=>{e.compute(ke(e.inputs[0],"Atan","atan"))},zs=e=>{e.compute(ke(e.inputs[0],"Atanh","atanh"))},Ms=e=>we(e),Us=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(ke(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Wc=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:Fn,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:jn;return we({min:t,max:r})},Ws=(e,t)=>{let r=e.inputs.length===1?t:Wc(e.inputs),n=St(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"Clip",a=>`clamp(${a}, clip_min_, clip_max_)`,`
    const clip_min_: vec4<${n}> = vec4(${n}(${r.min}));
    const clip_max_: vec4<${n}> = vec4(${n}(${r.max}));
`,r.cacheKey),{inputs:[0]})},Ns=e=>{e.compute(ke(e.inputs[0],"Ceil","ceil"))},Vs=e=>{e.compute(ke(e.inputs[0],"Cos","cos"))},Hs=e=>{e.compute(ke(e.inputs[0],"Cosh","cosh"))},Qn=e=>we(e),Ls=(e,t)=>{let r=St(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"Elu",n=>`elu_vf32(${n})`,`
  const elu_alpha_ = ${r}(${t.alpha});

  fn elu_f32(a: ${r}) -> ${r} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,t.cacheKey))},Xn=(e,t="f32")=>`
const r0: ${t} = 0.3275911;
const r1: ${t} = 0.254829592;
const r2: ${t} = -0.284496736;
const r3: ${t} = 1.421413741;
const r4: ${t} = -1.453152027;
const r5: ${t} = 1.061405429;

fn erf_vf32(v: ${e}) -> ${e} {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,Gs=e=>{let t=St(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,Xn(`vec4<${t}>`,t)))},Fs=e=>{e.compute(ke(e.inputs[0],"Exp","exp"))},js=e=>{e.compute(ke(e.inputs[0],"Floor","floor"))},qs=e=>{let t=St(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,Xn(`vec4<${t}>`,t)))},Ks=(e,t)=>{let r=St(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"LeakyRelu",n=>`select(leaky_relu_alpha_ * ${n}, ${n}, ${n} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},Ys=e=>{e.compute(ke(e.inputs[0],"Not",t=>`!${t}`))},Zs=e=>{e.compute(ke(e.inputs[0],"Neg",t=>`-${t}`))},Qs=e=>{e.compute(ke(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},Xs=e=>{let t=St(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},Js=e=>{e.compute(ke(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},eu=e=>we(e),tu=(e,t)=>{let r=St(e.inputs[0].dataType);e.compute(ke(e.inputs[0],"HardSigmoid",n=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${n} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},ru=e=>{e.compute(ke(e.inputs[0],"Sin","sin"))},nu=e=>{e.compute(ke(e.inputs[0],"Sinh","sinh"))},iu=e=>{e.compute(ke(e.inputs[0],"Sqrt","sqrt"))},au=e=>{e.compute(ke(e.inputs[0],"Tan","tan"))},ou=e=>{e.compute(ke(e.inputs[0],"Tanh","tanh"))},su=(e,t)=>{let r=St(e.inputs[0].dataType);return e.compute(ke(e.inputs[0],"ThresholdedRelu",n=>`select(vec4<${r}>(0.0), ${n}, ${n} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},uu=e=>{e.compute(ke(e.inputs[0],"Log","log"))}});var Vc,Hc,lu,du=ee(()=>{"use strict";Ie();xe();Xi();Vc=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Hc=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=W("input",e[0].dataType,e[0].dims,4),n=W("bias",e[0].dataType,[e[0].dims[2]],4),a=te("output",e[0].dataType,t,4),u=V.size(t)/4,o=He(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)}}),getShaderSource:p=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${p.declareVariables(r,n,a)}

  ${Xn(`vec4<${o}>`,o)}

  ${p.mainStart()}
    ${p.guardAgainstOutOfBoundsWorkgroupSizes(u)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${a.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},lu=e=>{Vc(e.inputs),e.compute(Hc(e.inputs))}});var Lc,Gc,Rt,cu,pu,fu,mu,hu,gu,yu,bu,vu,wu,$u=ee(()=>{"use strict";Ue();Ie();xe();Lc=(e,t,r,n,a,u,o,d,p,m,l,y,b)=>{let v,$;typeof d=="string"?v=$=(B,N)=>`${d}((${B}),(${N}))`:typeof d=="function"?v=$=d:(v=d.scalar,$=d.vector);let x=y?t.length:t,O=y?r.length:r,I=y?n.length:n,S=te("outputData",l,I,4),T=W("aData",p,x,4),E=W("bData",m,O,4),M;if(a)if(u){let B=V.size(t)===1,N=V.size(r)===1,H=t.length>0&&t[t.length-1]%4===0,X=r.length>0&&r[r.length-1]%4===0;B||N?M=S.setByOffset("global_idx",$(B?`${T.type.value}(${T.getByOffset("0")}.x)`:T.getByOffset("global_idx"),N?`${E.type.value}(${E.getByOffset("0")}.x)`:E.getByOffset("global_idx"))):M=`
            let outputIndices = ${S.offsetToIndices("global_idx * 4u")};
            let offsetA = ${T.broadcastedIndicesToOffset("outputIndices",S)};
            let offsetB = ${E.broadcastedIndicesToOffset("outputIndices",S)};
            ${S.setByOffset("global_idx",$(o||H?T.getByOffset("offsetA / 4u"):`${T.type.value}(${T.getByOffset("offsetA / 4u")}[offsetA % 4u])`,o||X?E.getByOffset("offsetB / 4u"):`${E.type.value}(${E.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else M=S.setByOffset("global_idx",$(T.getByOffset("global_idx"),E.getByOffset("global_idx")));else{if(!u)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let B=(N,H,X="")=>{let D=`aData[indexA${H}][componentA${H}]`,j=`bData[indexB${H}][componentB${H}]`;return`
            let outputIndices${H} = ${S.offsetToIndices(`global_idx * 4u + ${H}u`)};
            let offsetA${H} = ${T.broadcastedIndicesToOffset(`outputIndices${H}`,S)};
            let offsetB${H} = ${E.broadcastedIndicesToOffset(`outputIndices${H}`,S)};
            let indexA${H} = offsetA${H} / 4u;
            let indexB${H} = offsetB${H} / 4u;
            let componentA${H} = offsetA${H} % 4u;
            let componentB${H} = offsetB${H} % 4u;
            ${N}[${H}] = ${X}(${v(D,j)});
          `};l===9?M=`
            var data = vec4<u32>(0);
            ${B("data",0,"u32")}
            ${B("data",1,"u32")}
            ${B("data",2,"u32")}
            ${B("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:M=`
            ${B("outputData[global_idx]",0)}
            ${B("outputData[global_idx]",1)}
            ${B("outputData[global_idx]",2)}
            ${B("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(T,E,S)}

        ${b??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${M}
      }`},Gc=(e,t,r,n,a,u,o=r.dataType)=>{let d=!V.areEqual(r.dims,n.dims),p=r.dims,m=V.size(r.dims),l=!1,y=!1,b=[d];if(d){let $=Tt.calcShape(r.dims,n.dims,!1);if(!$)throw new Error("Can't perform binary op on the given tensors");p=$,m=V.size(p);let x=V.size(r.dims)===1,O=V.size(n.dims)===1,I=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,S=n.dims.length>0&&n.dims[n.dims.length-1]%4===0;b.push(x),b.push(O),b.push(I),b.push(S);let T=1;for(let E=1;E<p.length;E++){let M=r.dims[r.dims.length-E]??1,B=n.dims[n.dims.length-E]??1;if(M===B)T*=M;else break}T%4===0?(y=!0,l=!0):(x||O||I||S)&&(l=!0)}else l=!0;b.push(l);let v=De(r.dims.length)&&De(n.dims.length)&&De(p.length);return{name:e,shaderCache:{hint:t+b.map($=>$.toString()).join("_"),inputDependencies:v?["rank","rank"]:["dims","dims"]},getShaderSource:$=>Lc($,r.dims,n.dims,p,l,d,y,a,r.dataType,n.dataType,o,v,u),getRunData:()=>({outputs:[{dims:p,dataType:o}],dispatchGroup:{x:Math.ceil(m/64/4)},programUniforms:v?[{type:"uint32",data:Math.ceil(V.size(p)/4)},...K(r.dims),...K(n.dims),...K(p)]:[{type:"uint32",data:Math.ceil(V.size(p)/4)}]})}},Rt=(e,t,r,n,a,u)=>{e.compute(Gc(t,a??"",e.inputs[0],e.inputs[1],r,n,u))},cu=e=>{Rt(e,"Add",(t,r)=>`${t}+${r}`)},pu=e=>{Rt(e,"Div",(t,r)=>`${t}/${r}`)},fu=e=>{Rt(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},mu=e=>{Rt(e,"Mul",(t,r)=>`${t}*${r}`)},hu=e=>{let t=W("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;Rt(e,"Pow",{scalar:(n,a)=>`pow_custom(${n},${a})`,vector:(n,a)=>`pow_vector_custom(${n},${a})`},`
    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {
      if (b == ${t}(0.0)) {
        return ${t}(1.0);
      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {
        return ${t}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {
      // TODO: implement vectorized pow
      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},gu=e=>{Rt(e,"Sub",(t,r)=>`${t}-${r}`)},yu=e=>{Rt(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},bu=e=>{Rt(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},vu=e=>{Rt(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},wu=e=>{Rt(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var jc,qc,Kc,Yc,_u,Su,xu=ee(()=>{"use strict";Ie();qe();xe();jc=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let n of e){if(n.dataType!==t)throw new Error("input tensors should be one type");if(n.dims.length!==r)throw new Error("input tensors should have the same shape")}},qc=(e,t)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${t});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,Kc=(e,t)=>{let r=e.length,n=[];for(let a=0;a<r;++a){let u=t.setByOffset("global_idx",e[a].getByIndices("indices"));r===1?n.push(u):a===0?n.push(`if (inputIndex == ${a}u) { ${u} }`):a===r-1?n.push(`else { ${u} }`):n.push(`else if (inputIndex == ${a}) { ${u} }`)}return n.join(`
`)},Yc=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn't match input dimensionality");let n=t<0?r.length+t:t,a=r.slice(0);for(let E=1;E<e.length;E++){let M=e[E].dims.slice();for(let B=0;B<r.length;B++)if(B===n)a[n]+=M[B];else if(r[B]!==M[B])throw new Error("non concat dimensions must match")}let u=V.size(a),o=new Array(e.length),d=new Array(e.length),p=e[0].dataType,m=0,l=[],y=[],b=[],v=[{type:"uint32",data:u}];for(let E=0;E<e.length;++E)m+=e[E].dims[n],o[E]=m,b.push(De(e[E].dims.length)),y.push(b[E]?e[E].dims.length:e[E].dims),d[E]=W(`input${E}`,p,y[E]),l.push(b[E]?"rank":"dims"),v.push({type:"uint32",data:o[E]});for(let E=0;E<e.length;++E)b[E]&&v.push(...K(e[E].dims));let $=De(a.length);$&&v.push(...K(a));let x=$?a.length:a,O=te("output",p,x),I=O.indicesGet("indices",n),S=Array.from(Array(o.length).keys()).map(E=>`uniforms.sizeInConcatAxis${E}`).join(","),T=E=>`

  ${(()=>{E.registerUniform("outputSize","u32");for(let M=0;M<e.length;M++)E.registerUniform(`sizeInConcatAxis${M}`,"u32");return E.declareVariables(...d,O)})()}

  ${qc(o.length,S)}

  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${O.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${I});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${o.length}u>(${S});
      ${I} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${Kc(d,O)}
  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:v}),getShaderSource:T}},_u=(e,t)=>{jc(e.inputs),e.compute(Yc(e.inputs,t.axis))},Su=e=>we({axis:e.axis})});var Bt,Jn,Kt=ee(()=>{"use strict";Ie();Bt=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},Jn=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,n]=e?.activation_params||[Fn,jn];return{activation:t,clipMax:n,clipMin:r,activationCacheKey:`${t}:${r},${n}`}}return{activation:t,activationCacheKey:t}}});var Ke,ei,ti=ee(()=>{"use strict";Ke=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},ei=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `});var ri,Ji=ee(()=>{"use strict";ri=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`});var Zc,Qc,Xr,Cu,Xc,Jr,Jc,ni,en=ee(()=>{"use strict";Ie();xe();Kt();ti();Zc=(e,t)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${t?", batchIndices":""});
        `,Qc=(e,t)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,Xr=(e,t,r="f32",n,a=!1,u=32,o=!1,d=32)=>{let p=t[1]*e[1],m=t[0]*e[0],l=a?p:u,y=a?u:p,b=l/t[0],v=u/t[1];if(!((a&&b===4&&e[1]===4||!a&&(b===3||b===4))&&l%t[0]===0&&u%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${a} is true, innerElementSize ${b} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${b} must be 3 or 4.
  tileAWidth ${l} must be divisible by workgroupSize[0]${t[0]}. tileInner ${u} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${b}<${r}>, ${l/b}>, ${y}>;
var<workgroup> mm_Bsub: array<array<vec4<${r}>, ${m/e[0]}>, ${u}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${b};
const tileInner = ${u};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${o?"0":"i32(globalId.z)"};
  ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${p};

  let numTiles = ${o?`${Math.ceil(d/u)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
  var kStart = ${o?`i32(globalId.z) * ${d}`:"0"};

  var acc: array<vec4<${r}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${v};
  for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${Zc(a,n)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${v}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${n?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${b===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${Qc(a,b)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},Cu=(e,t)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${t?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${t?", batchIndices":""});
            `,Xc=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Jr=(e,t,r="f32",n,a=!1,u=32,o=!1,d=32,p=!1)=>{let m=e[1]*t[1],l=e[0]*t[0],y=a?m:u,b=a?u:m;if(!(b%t[1]===0&&y%t[0]===0&&u%t[1]===0))throw new Error(`tileAHight ${b} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${y} must be divisible by workgroupSize[0]${t[0]}, tileInner ${u} must be divisible by workgroupSize[1]${t[1]}`);let v=b/t[1],$=y/t[0],x=u/t[1],O=p?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${m};
    let globalColStart = i32(workgroupId.x) * ${l};

    // Loop over shared dimension.
    for (var t = 0; t < numTiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${b}; inputRow = inputRow + ${t[1]}) {
        for (var inputCol = localCol; inputCol < ${y}; inputCol = inputCol + ${t[0]}) {
          ${Cu(a,n)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${u}; inputRow = inputRow + ${t[1]}) {
            for (var inputCol = localCol; inputCol < ${l}; inputCol = inputCol + ${t[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${n?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${r}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${a?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${t[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${t[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${m};

let tileRowA = i32(localId.y) * ${v};
let tileColA = i32(localId.x) * ${$};
let tileRowB = i32(localId.y) * ${x};
// Loop over shared dimension.
for (var t = 0; t < numTiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${v}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${$}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${Cu(a,n)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${x}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${n?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${r}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${Xc(a)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${r}, ${y}>, ${b}>;
  var<workgroup> mm_Bsub : array<array<${r}, ${l}>, ${u}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${u};

@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${o?"0":"i32(globalId.z)"};
    ${n?`let batchIndices = ${n.offsetToIndices("u32(batch)")};`:""}
    let numTiles = ${o?`${Math.ceil(d/u)}`:"(uniforms.dimInner - 1) / tileInner + 1"};
    var kStart = ${o?`i32(globalId.z) * ${d}`:"0"};

    var acc : array<array<${r}, colPerThread>, rowPerThread>;

    // Without this initialization strange values show up in acc.
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = 0.0;
      }
    }
    ${O}
  }
`},Jc=(e,t,r,n,a,u=!1)=>{let[o,d,p]=a,[m,l,y,b]=n,v=$r(o,p),$=$r(d,p),x=He(n[0].type.tensor),O=()=>{let T=l.rank,E=m.rank,M=`var aIndices: ${l.type.indices};`;for(let B=T-2-1,N=E-1;B>=0;B--,N--)M+=`
aIndices[${B}] = ${E>1?`batchIndices[${N}]`:"batchIndices"};`;return v.forEach(B=>{M+=`
aIndices[${B}] = 0;`}),M+=`
aIndices[${T-2}] = u32(row);
                   aIndices[${T-1}] = u32(colIn);`,M},I=()=>{let T=y.rank,E=m.rank,M=`var bIndices: ${y.type.indices};`;for(let B=T-2-1,N=E-1;B>=0;B--,N--)M+=`
bIndices[${B}] = ${E>1?`batchIndices[${N}]`:"batchIndices"};`;return $.forEach(B=>{M+=`
bIndices[${B}] = 0;`}),M+=`
bIndices[${T-2}] = u32(row);
                   bIndices[${T-1}] = u32(colIn);`,M};return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${m.type.indices}) -> ${Ke(e,x)} {
      var value = ${Ke(e,x)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dimAOuter && col < uniforms.dimInner)
      {
        ${O()}
        value = ${l.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${m.type.indices}) -> ${Ke(e,x)} {
      var value = ${Ke(e,x)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dimInner && col < uniforms.dimBOuter)
      {
        ${I()}
        value = ${y.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ke(e,x)}) {
      let col = colIn * ${e};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${t?`value = value + ${u?"bias[colIn]":`${Ke(e,x)}(bias[row])`};`:""}
        ${r}
        ${b.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},ni=(e,t,r,n,a=!1)=>{let u=e[0].dims,o=e[1].dims,d=u.slice(0,-2),p=o.slice(0,-2),m=n?n.slice(0,-2):r.slice(0,-2),l=De(m.length),y=l?m.length:m,b=qn("batchDims",e[0].dataType,y,1),v=V.size(m),$=u[u.length-2],x=u[u.length-1],O=o[o.length-1],I=x%4===0&&O%4===0,S=$<=8?[4,1,1]:[4,4,1],T=[8,8,1],E=[Math.ceil(O/T[0]/S[0]),Math.ceil($/T[1]/S[1]),Math.ceil(v/T[2]/S[2])],M=He(e[0].dataType),B=I?4:1,N=[...d,$,x/B],H=De(N.length),X=H?N.length:N,D=[...p,x,O/B],j=De(D.length),se=j?D.length:D,be=[v,$,O/B],re=W("a",e[0].dataType,X,B),$e=W("b",e[1].dataType,se,B),Ge=te("result",e[0].dataType,be.length,B),ge=[re,$e],Ee=[{type:"int32",data:$},{type:"int32",data:O},{type:"int32",data:x}];l&&Ee.push(...K(m)),H&&Ee.push(...K(N)),j&&Ee.push(...K(D));let pe=[];pe.push(H?"rank":"dims"),pe.push(j?"rank":"dims");let ve=e.length>2,{activationFunction:Ve,applyActivation:Me}=Bt(t,Ge.type.value),Ye=Jc(B,ve,Me,[b,re,$e,Ge],[d,p,m],a);if(ve){let ie=a?B:1;ge.push(W("bias",e[2].dataType,e[2].dims.length,ie)),Ee.push(...K(e[2].dims)),pe.push("rank")}Ee.push(...K(be));let F=ie=>`
  ${ie.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(b).declareVariables(...ge,Ge)}
  ${Ve}
  ${Ye}
  ${I?Xr(S,T,M,b):Jr(S,T,M,b)}
                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${S}${I}${a}`,inputDependencies:pe},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:Ee}),getShaderSource:F}}});var ep,Iu,Au=ee(()=>{"use strict";qt();xe();Kt();ti();Ji();en();ep=(e,t,r,n,a=!1,u,o=4,d=4,p=4,m="f32")=>{let l=j=>{switch(j){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${m}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${j} is not supported.`)}},y=j=>{switch(j){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${j} is not supported.`)}},b=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,v=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,$=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",x=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",O=e?"row":"col",I=e?"col":"row",S=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${O} / outWidth;
    let outCol = ${O} % outWidth;

    let WRow = ${I} / (filterDims[1] * inChannels);
    let WCol = ${I} / inChannels % filterDims[1];
    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];
    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];
    let xCh = ${I} % inChannels;
    var resData = ${Ke(o,m)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${$} && xCol >= 0 && xCol < ${x}) {
      ${b}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${l(o)}
    }
    return resData;`,T=e?t&&n?`
    let col = colIn * ${o};
    ${S}`:`
    let col = colIn * ${o};
    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
      ${S}
    }
    return ${Ke(o,m)}(0.0);`:n&&r?`
    let col = colIn * ${o};
    ${S}`:`
    let col = colIn * ${o};
    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
      ${S}
    }
    return ${Ke(o,m)}(0.0);`,E=`${y(d)}`,M=Ke(p,m),B=e?Ke(o,m):Ke(d,m),N=e?Ke(d,m):Ke(o,m),{activationFunction:H,applyActivation:X}=Bt(u,M);return`
    ${H}
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${B} {
      ${e?T:E}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${N} {
      ${e?E:T}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${M}) {
      let col = colIn * ${p};
      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${v}
      ${ei(a)}
      ${X}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},Iu=(e,t,r,n,a,u,o,d)=>{let p=t.format==="NHWC",m=p?e[0].dims[3]:e[0].dims[1],l=r[0],y=p?r[2]:r[3],b=p?r[1]:r[2],v=p?r[3]:r[1],$=p&&(m%4===0||m%3===0)&&v%4===0,x=p?v:y*b,O=p?y*b:v,I=[8,8,1],S=n<=8?[4,1,1]:[4,4,1],T=[Math.ceil(x/I[0]/S[0]),Math.ceil(O/I[1]/S[1]),Math.ceil(l/I[2]/S[2])];ze("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${T}`);let E=$?p&&m%4!==0?3:4:1,M=I[1]*S[1],B=I[0]*S[0],N=Math.max(I[0]*E,I[1]),H=n%M===0,X=a%B===0,D=u%N===0,j=$?[E,4,4]:[1,1,1],se=He(e[0].dataType),be=$?4:1,re=[{type:"int32",data:n},{type:"int32",data:a},{type:"int32",data:u}],$e=W("x",e[0].dataType,e[0].dims.length,E===3?1:E),Ge=W("w",e[1].dataType,e[1].dims.length,be),ge=[$e,Ge];re.push(...K(e[0].dims)),re.push(...K(e[1].dims));let Ee=`
      fn setOutputAtIndex(flatIndex : i32, value : ${$?`vec4<${se}>`:se}) {
        result[flatIndex] = ${$?`vec4<${se}>`:se}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${$?`vec4<${se}>`:se}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${$?"/ 4":""}, value);
      }`;if(o){let ve=W("bias",e[2].dataType,e[2].dims.length,be);ge.push(ve),re.push(...K(e[2].dims)),Ee+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${$?`vec4<${se}>`:se} {
          return bias[coords.${p?"w":"y"}${$?"/ 4":""}];
        }`}let pe=te("result",e[0].dataType,r.length,be);return re.push(...K(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:T[0],y:T[1],z:T[2]},programUniforms:re}),getShaderSource:ve=>`
        ${ri("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${ve.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...ge,pe)}
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});
        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});
        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        ${Ee}
        ${ep(p,H,X,D,o,t,j[0],j[1],j[2],se)}
            ${$?Xr(S,I,se,void 0,!p,N):Jr(S,I,se,void 0,!p,N,!1,void 0,d)}`}}});var ea,Tu=ee(()=>{"use strict";Ie();xe();ra();Kt();ea=(e,t,r)=>{let n=e.length>2,a=n?"value += b[output_channel];":"",u=e[0].dims,o=e[1].dims,d=o[0]/t.group,p=t.format==="NHWC",m=ta(u,o,t.dilations,t.pads,t.strides,p),l=V.size(m),y=te("output",e[0].dataType,m),{activationFunction:b,applyActivation:v}=Bt(t,y.type.value),$=W("x",e[0].dataType,u),x=W("w",e[1].dataType,o),O=[$,x];n&&O.push(W("b",e[2].dataType,e[2].dims));let I=S=>`
  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);
  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);

  ${S.declareVariables(...O,y)}

  ${b}

  ${S.mainStart()}
    ${S.guardAgainstOutOfBoundsWorkgroupSizes(l)}

    let outputIndices = ${y.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${p?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${p?1:2}], outputIndices[${p?2:3}]) * strides - pads;
    let group_id: u32 = output_channel / ${d}u;

    var value: ${y.type.value} = ${y.type.value}(0);
    for (var wInChannel: u32 = 0u; wInChannel < ${o[1]}u; wInChannel++) {
      let input_channel = group_id * ${o[1]}u + wInChannel;
      for (var wHeight: u32 = 0u; wHeight < ${o[2]}u; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;

        if (xHeight < 0u || xHeight >= ${u[p?1:2]}u) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < ${o[3]}u; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;
          if (xWidth < 0u || xWidth >= ${u[p?2:3]}u) {
            continue;
          }

          let xVal = ${p?$.get("batch","xHeight","xWidth","input_channel"):$.get("batch","input_channel","xHeight","xWidth")};
          let wVal = ${x.get("output_channel","wInChannel","wHeight","wWidth")};
          value += xVal*wVal;
        }
      }
    }
    ${a}
    ${v}
    ${y.setByOffset("global_idx","value")}
  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(m):m,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)}}),getShaderSource:I}}});var na,tp,Eu,ia=ee(()=>{"use strict";Ie();en();xe();Kt();na=(e,t,r,n,a=!1)=>{let u=e[0].dims,o=e[1].dims,d=u[u.length-2],p=o[o.length-1],m=u[u.length-1],l=Le(p),y=Le(m),b=Le(d),v=V.size(r)/l/b,$=e.length>2,x=n?n.slice(0,-2):r.slice(0,-2),I=[V.size(x),d,p],S=[{type:"uint32",data:v},{type:"uint32",data:d},{type:"uint32",data:p},{type:"uint32",data:m},...K(x),...K(u),...K(o)];$&&S.push(...K(e[2].dims)),S.push(...K(I));let T=E=>{let M=qn("batch_dims",e[0].dataType,x.length),B=W("a",e[0].dataType,u.length,y),N=W("b",e[1].dataType,o.length,l),H=te("output",e[0].dataType,I.length,l),{activationFunction:X,applyActivation:D}=Bt(t,H.type.value),j=[B,N],se="";if($){let pe=a?l:1;j.push(W("bias",e[2].dataType,e[2].dims.length,pe)),se=`${a?`value += bias[col / ${pe}];`:`value += ${H.type.value}(bias[row + i]);`}`}let be=u.slice(0,-2),re=o.slice(0,-2),$e=$r(be,x),Ge=$r(re,x),ge=(pe,ve)=>{let Ve=pe.rank,Me=pe.name;if(Ve===2)return`var ${Me}_indices = ${pe.type.indices}(0u, 0u);`;let Ye=M.rank,F=`var ${Me}_indices: ${pe.type.indices};`;for(let ie=Ve-2-1,he=Ye-1;ie>=0;ie--,he--)F+=`
${Me}_indices[${ie}] = ${Ye>1?`batch_indices[${he}]`:"batch_indices"};`;return ve.forEach(ie=>{F+=`
${Me}_indices[${ie}] = 0;`}),F+=`${Me}_indices[${Ve-2}] = 0u;
                     ${Me}_indices[${Ve-1}] = 0u;`,F},Ee=()=>{let pe=`var a_data: ${B.type.value};`;for(let ve=0;ve<y;ve++)pe+=`
              let b_data${ve} = b[(b_offset + (k + ${ve}) * uniforms.N + col) / ${l}];`;for(let ve=0;ve<b;ve++){pe+=`a_data = a[(a_offset + (row + ${ve}) * uniforms.K + k) / ${y}];`;for(let Ve=0;Ve<y;Ve++)pe+=`
            values[${ve}] = fma(${N.type.value}(a_data${y===1?"":`[${Ve}]`}), b_data${Ve}, values[${ve}]);
`}return pe};return`
  ${E.registerUniform("outputSize","u32").registerUniform("M","u32").registerUniform("N","u32").registerUniform("K","u32").registerInternalVariables(M).declareVariables(...j,H)}
  ${X}
  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    let col = (global_idx % (uniforms.N / ${l})) * ${l};
    var index1 = global_idx / (uniforms.N / ${l});
    let stride1 = uniforms.M / ${b};
    let row = (index1 % stride1) * ${b};
    let batch = index1 / stride1;

    ${r.length===2?"":`let batch_indices = ${M.offsetToIndices("batch")};`}
    ${ge(B,$e)}
    let a_offset = ${B.indicesToOffset("a_indices")};
    ${ge(N,Ge)}
    let b_offset = ${N.indicesToOffset("b_indices")};
    var values: array<${H.type.value}, ${b}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${y}) {
      ${Ee()}
    }
    for (var i = 0u; i < ${b}u; i++) {
      var value = values[i];
      ${se}
      ${D}
      let cur_indices = ${H.type.indices}(batch, row + i, col);
      let offset = ${H.indicesToOffset("cur_indices")};
      ${H.setByOffset(`offset / ${l}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activationCacheKey}_${l}_${y}_${b}_${a}`,inputDependencies:$?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:S}),getShaderSource:T}},tp=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Eu=e=>{tp(e.inputs);let t=Tt.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can't use matmul on the given tensors");let r=t[t.length-1],n=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&n<8?e.compute(na(e.inputs,{activation:"",activationCacheKey:""},t)):e.compute(ni(e.inputs,{activation:"",activationCacheKey:""},t))}});var ta,Ou,rp,ku,aa,np,ip,oa,ra=ee(()=>{"use strict";Ie();qe();Au();en();Tu();Kt();ia();_r();ta=(e,t,r,n,a,u)=>{let o=e[0],d=e.slice(u?1:2,u?3:4),p=d.length,m=t[0],y=t.slice(2).map(($,x)=>$+($-1)*(r[x]-1)),v=d.map(($,x)=>$+n[x]+n[x+p]).map(($,x)=>Math.floor(($-y[x]+a[x])/a[x]));return v.splice(0,0,o),v.splice(u?3:1,0,m),v},Ou=[2,3,1,0],rp=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[1]*t.group;if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let a=e[0].dims.length-2;if(t.dilations.length!==a)throw new Error(`dilations should be ${a}D`);if(t.strides.length!==a)throw new Error(`strides should be ${a}D`);if(t.pads.length!==a*2)throw new Error(`pads should be ${a*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},ku=(e,t)=>{let r=e.kernelShape.slice();for(let u=2;u<t[1].dims.length;++u)r[u-2]===0&&(r[u-2]=t[1].dims[u]);let n=e.pads.slice();sr.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,n,e.format==="NHWC",e.autoPad);let a=Object.assign({},e);return Object.assign(a,{kernelShape:r,pads:n,cacheKey:e.cacheKey}),a},aa=e=>{let t=Jn(e),r=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],a=e.dilations,u=e.group,o=e.kernel_shape,d=e.pads,p=e.strides,m=e.w_is_const();return we({autoPad:n,format:r,dilations:a,group:u,kernelShape:o,pads:d,strides:p,wIsConst:m,...t})},np=(e,t,r)=>{let n=ku(r,t),a=r.format==="NHWC";if(r.group!==1){e.compute(ea(t,n));return}let u=t.length===3,o=t[0].dims[a?1:2],d=t[0].dims[a?2:3],p=t[0].dims[a?3:1],m=t[1].dims[2],l=t[1].dims[3],y=ta(t[0].dims,t[1].dims,r.dilations,n.pads,r.strides,a),b=y[a?1:2],v=y[a?2:3],$=y[a?3:1],x=a&&m===o&&l===d&&r.pads[0]===0&&r.pads[1]===0;if(x||m===1&&l===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let B=y[0],N,H,X,D=[];if(a){let be=e.kernelCustomData.wT??e.compute(Ct(t[1],Ou),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=be),x){let re=o*d*p;N=t[0].reshape([1,B,re]),H=be.reshape([1,re,$]),X=[1,B,$]}else N=t[0].reshape([B,o*d,p]),H=be.reshape([1,p,$]),X=[B,b*v,$];D.push(N),D.push(H)}else N=t[0].reshape([B,p,o*d]),H=t[1].reshape([1,$,p]),X=[B,$,b*v],D.push(H),D.push(N);u&&D.push(t[2]);let j=X[2],se=D[0].dims[D[0].dims.length-1];j<8&&se<8?e.compute(na(D,n,y,X,a),{inputs:D}):e.compute(ni(D,n,y,X,a),{inputs:D});return}let O=!0,I=e.kernelCustomData.wT??e.compute(Ct(t[1],Ou),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=I);let S=[t[0],I];u&&S.push(t[2]);let T=a?b*v:$,E=a?$:b*v,M=m*l*p;e.compute(Iu(S,n,y,T,E,M,u,O),{inputs:S})},ip=(e,t)=>{let r=t.format==="NHWC",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let a=[0,t.pads[0],0,t.pads[1]],u=[1].concat(t.strides),o=[1].concat(t.dilations),d=[1].concat(t.kernelShape),p=ku({...t,pads:a,strides:u,dilations:o,kernelShape:d},n);e.compute(ea(n,p,m=>r?[m[0],m[2],m[3]]:[]))},oa=(e,t)=>{rp(e.inputs,t),e.inputs[0].dims.length===3?ip(e,t):np(e,e.inputs,t)}});var ap,Pu,Ru=ee(()=>{"use strict";qt();xe();Kt();ti();Ji();en();ap=(e,t=!1,r,n=4)=>{let a=Ke(n,"f32"),u=S=>{switch(S){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];
            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];
            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];
            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];
            return vec4<f32>(v0, v1, v2, v3);
            `;default:throw new Error(`innerElementSize ${S} is not supported.`)}},o=e?`
      let coord = vec4<i32>(batch, iXR, iXC, xCh);
      `:`
      let coord = vec4<i32>(batch, xCh, iXR, iXC);
      `,d=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,p=e?"outBackprop[1]":"outBackprop[2]",m=e?"outBackprop[2]":"outBackprop[3]",l=e?"row":"col",y=e?"col":"row",b=`
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      let outRow = ${l} / outWidth;
      let outCol = ${l} % outWidth;

      let WRow = ${y} / (filterDims[1] * inChannels);
      let WCol = ${y} / inChannels % filterDims[1];
      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);
      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);
      if (xR < 0.0 || xR >= f32(${p}) || fract(xR) > 0.0) {
        return ${a}(0.0);
      }
      if (xC < 0.0 || xC >= f32(${m}) || fract(xC) > 0.0) {
        return ${a}(0.0);
      }
      let iXR = i32(xR);
      let iXC = i32(xC);
      let xCh = ${y} % inChannels;
      ${o}
      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${n}];`,v=e?`
      let col = colIn * ${n};
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${b}
      }
      return ${a}(0.0);`:`
      let col = colIn * ${n};
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${b}
      }
      return ${a}(0.0);`,$=`
      let col = colIn * ${n};
      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};
      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);
      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];
      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {
        let rowInner = row % inChannels;
        let coord = vec4<i32>(coordX, coordY, col, rowInner);
        ${u(n)}
      }
      return ${a}(0.0);
      `,{activationFunction:x,applyActivation:O}=Bt(r,a);return`
      ${x}
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${a} {
    ${e?v:$}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${a} {
    ${e?$:v}
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${a}) {
    let col = colIn * ${n};
    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
      var value = valueInput;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${d}
      ${ei(t)}
      ${O}
      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${n}] = value;
    }
  }`},Pu=(e,t,r,n,a,u,o,d)=>{let p=t.format==="NHWC",m=p?e[0].dims[3]:e[0].dims[1],l=r[0],y=p?r[2]:r[3],b=p?r[1]:r[2],v=p?r[3]:r[1],$=p?m%4===0&&v%4===0:y%4===0&&v%4===0,x=p?v:y*b,O=p?y*b:v,I=$?[8,8,1]:[x<=4||O<=4?4:16,x>4&&O<=4?4:16,1],S=$?[4,4,1]:[x<=4?1:4,x>4&&O<=4?1:4,1],T=[Math.ceil(x/I[0]/S[0]),Math.ceil(O/I[1]/S[1]),Math.ceil(l/I[2]/S[2])];ze("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${T}`);let E=$?4:1,M=Math.max(I[0]*E,I[1]),B=$?4:1,N=[{type:"int32",data:n},{type:"int32",data:a},{type:"int32",data:u}],H=W("x",e[0].dataType,e[0].dims.length,B),X=W("w",e[1].dataType,e[1].dims.length,1),D=te("result",e[0].dataType,r.length,B),j=[H,X];N.push(...K(e[0].dims)),N.push(...K(e[1].dims));let se="";if(o){let be=W("bias",e[2].dataType,e[2].dims.length,B);j.push(be),N.push(...K(e[2].dims)),se+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${$?"vec4<f32>":"f32"} {
          return bias[coords.${p?"w":"y"}${$?"/ 4":""}];
        }`}return N.push(...K(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:T[0],y:T[1],z:T[2]},programUniforms:N}),getShaderSource:be=>`
        ${ri("uniforms.result_strides")}
        ${be.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...j,D)};
        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});
        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[p?1:2]}, ${t.kernelShape[p?2:3]});
        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(
              ${t.dilations[0]<=1?0:(t.kernelShape[p?1:2]-1)*(t.dilations[0]-1)},
              ${t.dilations[1]<=1?0:(t.kernelShape[p?2:3]-1)*(t.dilations[1]-1)});
        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,
                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);
        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});
        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});
        const dimAOuter : i32 = ${n};
        const dimBOuter : i32 = ${a};
        const dimInner : i32 = ${u};
        ${se}
        ${ap(p,o,t,E)}
        ${$?Xr(S,I,"f32",void 0,!p,M):Jr(S,I,"f32",void 0,!p,M,!1,void 0,d)}`}}});var op,sa,Bu=ee(()=>{"use strict";qt();Ie();xe();op=(e,t,r,n,a,u,o=!1,d)=>{let p=r.format==="NHWC",m=p?1:2,l=p?2:3,y=p?3:1,b=V.size(n),v=o?2:1,$=r.group,x=t[1].dims,O=x[0]/$,I=x[1],S=`
  fn setOutputAtIndex(flatIndex : u32, value : ${o?`vec4<${d}>`:d}) {
    result[flatIndex] = ${o?`vec4<${d}>`:d}(value);
  }`;a&&(S+=`
    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${o?`vec4<${d}>`:d} {
      return bias[coords.${p?"w":"y"}${o?"/ 4":""}];
    }`);let T=o?4:1,E=W("W",t[1].dataType,t[1].dims,T),M=W("Dy",t[0].dataType,t[0].dims,T),B=[M,E];a&&B.push(W("bias",t[2].dataType,[n[y]],T));let N=te("result",t[0].dataType,n,T),H=`{
        let batch: u32 = ${u?"global_id.z":"workgroup_id.z"} / outShape[1];
        let r = ${u?"global_id.z":"workgroup_id.z"} % outShape[1];
        let c = ${u?"global_id.y":"workgroup_id.y"} * ${v};
        let d1: u32 = ${u?"global_id.x":"workgroup_id.x"} * 4;

        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd: array<vec4<${d}>, ${v}>;
        for (var i = 0; i < ${v}; i++) {
          dotProd[i] = vec4<${d}>(0.0);
        }
        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {
          var dyR = (${d}(dyCorner.x) + ${d}(wR)) / ${d}(strides.x);
          let wRPerm = filterDims[0] - 1 - wR;
          if (dyR < 0.0 || dyR >= ${d}(outBackprop[1]) ||
              fract(dyR) > 0.0 || wRPerm < 0) {
            continue;
          }
          let idyR: u32 = u32(dyR);

          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {
            let dyC = (${d}(dyCorner.y) + ${d}(wC)) / ${d}(strides.y);
            let dyC2 = (${d}(dyCorner.y) + 1.0 + ${d}(wC)) / ${d}(strides.y);
            let wCPerm = filterDims[1] - 1 - wC;
            if (wCPerm < 0) {
              continue;
            }
            var bDyCVal = true;
            var bDyCVal2 = true;
            if (dyC < 0.0 || dyC >= ${d}(outBackprop[2]) ||
                fract(dyC) > 0.0) {
              bDyCVal = false;
            }
            if (dyC2 < 0.0 || dyC2 >= ${d}(outBackprop[2]) ||
                fract(dyC2) > 0.0) {
              bDyCVal2 = false;
            }

            let idyC: u32 = u32(dyC);
            let idyC2: u32 = u32(dyC2);
            if (bDyCVal && bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${M.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${d}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;

                xValue =  ${M.get("batch","idyR","idyC2","d2")};

                dotProd[1] = dotProd[1] + vec4<${d}>(dot(xValue, wValue0),
                                                    dot(xValue, wValue1),
                                                    dot(xValue, wValue2),
                                                    dot(xValue, wValue3));
              }
            } else if (bDyCVal) {
              let d2Length = outBackprop[${y}];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${M.get("batch","idyR","idyC","d2")};
                let tmpval = vec4<${d}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[0] = dotProd[0] + tmpval;
              }
            } else if (bDyCVal2) {
              let d2Length = outBackprop[3];
              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {
                let wValue0 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};
                let wValue1 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};
                let wValue2 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};
                let wValue3 = ${E.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};

                var xValue = ${M.get("batch","idyR","idyC2","d2")};
                let tmpval = vec4<${d}>(dot(xValue, wValue0),
                                      dot(xValue, wValue1),
                                      dot(xValue, wValue2),
                                      dot(xValue, wValue3));
                dotProd[1] = dotProd[1] + tmpval;
              }
            }
          }
        }

        for (var i: u32 = 0; i < ${v}; i = i + 1) {
          let value = dotProd[i] + ${a?"bias[c+i]":`vec4<${d}>(0.0)`};
          ${N.set("batch","r","c + i","d1","value")};
        }
      }`,X=`
          let outputIndices = ${N.offsetToIndices("global_idx")};
          let batch = ${N.indicesGet("outputIndices",0)};
          let d1 = ${N.indicesGet("outputIndices",y)};
          let r = ${N.indicesGet("outputIndices",m)};
          let c = ${N.indicesGet("outputIndices",l)};
          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;
          let dyRCorner = dyCorner.x;
          let dyCCorner = dyCorner.y;
          let groupId = d1 / ${I};
          let wOutChannel = d1 - groupId * ${I};
          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
          // ? = to be determined. : = across all values in that axis.
          var dotProd = ${d}(0.0);
          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {
            if (wR % dilations.x != 0) {
              continue;
            }
            let dyR = (${d}(dyRCorner) + ${d}(wR)) / ${d}(strides[0]);
            let wRPerm = filterDims.x - 1 - wR / dilations.x;
            if (dyR < 0.0 || dyR >= ${d}(outBackprop[${m}]) || fract(dyR) > 0.0 ||
                wRPerm < 0) {
              continue;
            }
            let idyR: u32 = u32(dyR);

            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {
              if (wC % dilations.y != 0) {
                continue;
              }
              let dyC = (${d}(dyCCorner) + ${d}(wC)) / ${d}(strides.y);
              let wCPerm = filterDims.y - 1 - wC / dilations.y;
              if (dyC < 0.0 || dyC >= ${d}(outBackprop[${l}]) ||
                  fract(dyC) > 0.0 || wCPerm < 0) {
                continue;
              }
              let idyC: u32 = u32(dyC);
              var inputChannel = groupId * ${O};
              for (var d2: u32 = 0; d2 < ${O}; d2 = d2 + 1) {
                let xValue = ${p?M.get("batch","idyR","idyC","inputChannel"):M.get("batch","inputChannel","idyR","idyC")};
                let wValue = ${E.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};
                dotProd = dotProd + xValue * wValue;
                inputChannel = inputChannel + 1;
              }
            }
          }
          let value = dotProd + ${a?"bias[d1]":`${d}(0.0)`};
          ${N.setByOffset("global_idx","value")};
        `;return`
  ${e.declareVariables(...B,N)}
  ${S}
  const outShape : vec4<u32> = vec4<u32>(${n.join(",")});
  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});
  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});
  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[p?1:2]}, ${r.kernelShape[p?2:3]});
  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});
  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(
          ${r.dilations[0]<=1?0:(r.kernelShape[p?1:2]-1)*(r.dilations[0]-1)},
          ${r.dilations[1]<=1?0:(r.kernelShape[p?2:3]-1)*(r.dilations[1]-1)});
  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,
                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);
    ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes(b)};
  ${o?H:X}}`},sa=(e,t,r)=>{let n=e.length>2,a=t.outputShape,u=V.size(a),o=[Math.ceil(u/64),1,1];ze("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${o}`);let d=He(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:o[0],y:o[1],z:o[2]},outputs:[{dims:r?r(a):a,dataType:e[0].dataType}]}),getShaderSource:p=>op(p,e,t,a,n,o[1]===1&&o[2]===1,!1,d)}}});var sp,up,lp,Du,zu,dp,cp,pp,fp,Mu,Uu=ee(()=>{"use strict";qe();Ru();Bu();Kt();_r();sp=(e,t,r,n,a,u)=>(e-1)*t+r+(n-1)*a+1-u,up=(e,t,r,n,a)=>{let u=Math.floor(e/2);t==="SAME_UPPER"?(r[n]=u,r[a]=e-u):t==="SAME_LOWER"&&(r[n]=e-u,r[a]=u)},lp=(e,t,r,n,a,u,o,d,p,m)=>{let l=e.length-2,y=m.length===0;if(p.length===0)for(let $=0;$<l;++$)p.push(0);let b=e[0],v=t[d?3:1]*a;for(let $=0,x=e.length-l-(d?1:0);$<l;++$,++x){let O=e[x],I=y?O*o[$]:m[$],S=sp(O,o[$],u[$],t[x],r[$],I);up(S,n,u,$,$+l),y&&m.push(o[$]*(O-1)+p[$]+(t[x]-1)*r[$]+1-u[$]-u[$+l])}m.splice(0,0,b),m.splice(d?3:1,0,v)},Du=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((b,v)=>b*v,1)===0){r.length=0;for(let b=2;b<t[1].dims.length;++b)r.push(t[1].dims[b])}let n=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(n?3:1,0,t[1].dims[1]);let a=e.pads.slice(),u=e.outputShape.slice(),o=e.outputPadding.slice(),d=t[0].dims,p=e.dilations.slice();if(p.reduce((b,v)=>b+v,0)===0){let b=t[0].dims.length-2;p=new Array(b).fill(1)}let m=e.strides.slice();if(m.reduce((b,v)=>b+v,0)===0){let b=t[0].dims.length-2;m=new Array(b).fill(1)}lp(d,r,p,e.autoPad,e.group,a,m,n,o,u);let l=Object.assign({},e),y=e.cacheKey+[r.join("n,"),a.join(","),m.join(","),o.join(","),u.join(","),p.join(",")].join("_");return Object.assign(l,{kernelShape:r,pads:a,outputPadding:o,outputShape:u,dilations:p,strides:m,cacheKey:y}),l},zu=e=>{let t=Jn(e),r=e.format,n=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],a=e.dilations,u=e.group,o=e.kernelShape,d=e.pads,p=e.strides,m=e.wIsConst(),l=e.outputPadding,y=e.outputShape;return we({autoPad:n,format:r,dilations:a,group:u,kernelShape:o,outputPadding:l,outputShape:y,pads:d,strides:p,wIsConst:m,...t})},dp=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],n=e[1].dims[0];if(r!==n)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let a=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==a))throw new Error("invalid bias");let u=e[0].dims.length-2;if(t.dilations.reduce((l,y)=>l+y,0)>0&&t.dilations.length!==u)throw new Error(`dilations should be ${u}D`);if(t.strides.reduce((l,y)=>l+y,0)>0&&t.strides.length!==u)throw new Error(`strides should be ${u}D`);if(t.pads.reduce((l,y)=>l+y,0)>0&&t.pads.length!==u*2)throw new Error(`pads should be ${u*2}D`);if(t.outputPadding.length!==u&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${u}D`);if(t.kernelShape.reduce((l,y)=>l+y,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},cp=[2,3,1,0],pp=(e,t,r)=>{let n=Du(r,t),a=r.format==="NHWC",u=n.outputShape,o=u[a?3:1],d=t[0].dims[a?3:1];if(n.group!==1||o===1&&d===1){e.compute(sa(t,n));return}let p=u[a?1:2],m=u[a?2:3],l=t[1].dims[2],y=t[1].dims[3],b=a?p*m:o,v=a?o:p*m,$=l*y*d,x=!0,O=e.kernelCustomData.wT??e.compute(Ct(t[1],cp),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=O);let I=[t[0],O],S=t.length===3;S&&(!a&&t[2].dims.length===1?I.push(t[2].reshape([t[2].dims[0],1,1])):I.push(t[2])),e.compute(Pu(I,n,u,b,v,$,S,x),{inputs:I})},fp=(e,t)=>{let r=t.format==="NHWC",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];n.length===3&&n.push(e.inputs[2]);let a=t.kernelShape;(a.length===0||a[0]===0)&&(a=[e.inputs[1].dims[2]]);let u=t.dilations;(u.length===0||u[0]===0)&&(u=[1]);let o=t.strides;(o.length===0||o[0]===0)&&(o=[1]);let d=t.pads;d.length===0&&(d=[0,0]),d=[0,d[0],0,d[1]],o=[1].concat(o),u=[1].concat(u),a=[1].concat(a);let p=Du({...t,pads:d,strides:o,dilations:u,kernelShape:a},n);e.compute(sa(n,p,m=>r?[m[0],m[2],m[3]]:[m[0],m[1],m[3]]))},Mu=(e,t)=>{dp(e.inputs,t),e.inputs[0].dims.length===3?fp(e,t):pp(e,e.inputs,t)}});var mp,Wu,Nu,Vu=ee(()=>{"use strict";Ue();Ie();qe();xe();mp=(e,t,r,n)=>{let a=V.size(t),u=t.length,o=W("input",e,u),d=te("output",e,u),p=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),m=V.normalizeAxis(p,u),l=y=>{let b=` i32(${o.indicesGet("inputIndices","uniforms.axis")}) `,v=ce("uniforms.input_shape","uniforms.axis",u),$=n.reverse?b+(n.exclusive?" + 1":""):"0",x=n.reverse?v:b+(n.exclusive?"":" + 1");return`
                ${y.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(o,d)}
                ${y.mainStart()}
                  ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${d.offsetToIndices("global_idx")};
                  var sum = ${d.type.value}(0);
                  let first : i32 = ${$};
                  let last : i32 = ${x};
                  for (var i : i32 = first; i < last; i++) {
                    ${o.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${o.getByIndices("inputIndices")};
                  }
                  ${d.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:n.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:[{type:"uint32",data:a},{type:"int32",data:m},...K(t),...K(t)]}),getShaderSource:l}},Wu=(e,t)=>{let r=e.inputs[0].dims,n=e.inputs[0].dataType,a=e.inputs[1];e.compute(mp(n,r,a,t),{inputs:[0]})},Nu=e=>{let t=e.exclusive===1,r=e.reverse===1;return we({exclusive:t,reverse:r})}});var ua,ii,Hu,hp,gp,la,da,Lu,yp,Gu,Fu,ju=ee(()=>{"use strict";Ie();qe();xe();ua="[a-zA-Z]|\\.\\.\\.",ii="("+ua+")+",Hu="^"+ii+"$",hp="("+ii+",)*"+ii,gp="^"+hp+"$",la=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let n=this.symbolToIndices.get(t);n===void 0?n=[r]:n.push(r),this.symbolToIndices.set(t,n)}},da=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[n,a]=r.includes("->")?r.split("->",2):[r,""];if(!n.match(RegExp(gp)))throw new Error("Invalid LHS term");if(n.split(",").forEach((d,p)=>{let m=t[p].dims.slice();if(!d.match(RegExp(Hu)))throw new Error("Invalid LHS term");let l=this.processTerm(d,!0,m,p);this.lhs.push(l)}),a==="")a+=[...this.symbolToInfo.entries()].filter(([d,p])=>p.count===1||d==="...").map(([d])=>d).join("");else if(!a.match(RegExp(ii)))throw new Error("Invalid RHS");a.match(RegExp(ua,"g"))?.forEach(d=>{if(d==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let p=this.symbolToInfo.get(d);if(p===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(p.dimValue)}}),this.rhs=this.processTerm(a,!1,this.outputDims)}addSymbol(t,r,n){let a=this.symbolToInfo.get(t);if(a!==void 0){if(a.dimValue!==r&&a.count!==1)throw new Error("Dimension mismatch");a.count++,a.inputIndices.push(n)}else a={count:1,dimValue:r,inputIndices:[n]};this.symbolToInfo.set(t,a)}processTerm(t,r,n,a=-1){let u=n.length,o=!1,d=[],p=0;if(!t.match(RegExp(Hu))&&!r&&t!=="")throw new Error("Invalid LHS term");let m=t.match(RegExp(ua,"g")),l=new la(a);return m?.forEach((y,b)=>{if(y==="..."){if(o)throw new Error("Only one ellipsis is allowed per input term");o=!0;let v=u-m.length+1;if(v<0)throw new Error("Ellipsis out of bounds");if(d=n.slice(p,p+v),this.hasEllipsis){if(this.ellipsisDims.length!==d.length||this.ellipsisDims.toString()!==d.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=d;else throw new Error("Ellipsis must be specified in the LHS");for(let $=0;$<d.length;$++){let x=String.fromCharCode("0".charCodeAt(0)+$);l.addSymbol(x,b+$),this.addSymbol(x,n[p++],a)}}else l.addSymbol(y,b+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(y,n[p++],a)}),l}},Lu=e=>e+"_max",yp=(e,t,r,n,a)=>{let o=t.map((v,$)=>e[$]?v.length:v).map((v,$)=>W(`input${$}`,r,v)),d=V.size(a),p=De(a.length),m=p?a.length:a,l=te("output",r,m),y=[...n.symbolToInfo.keys()].filter(v=>!n.rhs.symbolToIndices.has(v)),b=v=>{let $=[],x="var prod = 1.0;",O="var sum = 0.0;",I="sum += prod;",S=[],T=[],E=[],M=[],B=n.symbolToInfo.size===n.rhs.symbolToIndices.size;n.symbolToInfo.forEach((H,X)=>{if(n.rhs.symbolToIndices.has(X)){let D=n.rhs.symbolToIndices.get(X)?.[0];D!==void 0&&n.lhs.forEach((j,se)=>{if(H.inputIndices.includes(se)){let be=j.symbolToIndices.get(X);if(be===void 0)throw new Error("Invalid symbol error");be.forEach(re=>{$.push(`${o[se].indicesSet(`input${se}Indices`,re,l.indicesGet("outputIndices",D))}`)})}})}else n.lhs.forEach((D,j)=>{if(H.inputIndices.includes(j)){let se=D.symbolToIndices.get(X);if(se===void 0)throw new Error("Invalid symbol error");se.forEach(be=>{S.push(`${o[j].indicesSet(`input${j}Indices`,be,`${X}`)}`)}),M.push(`prod *= ${o[j].getByIndices(`input${j}Indices`)};`)}}),T.push(`for(var ${X}: u32 = 0; ${X} < uniforms.${Lu(X)}; ${X}++) {`),E.push("}")});let N=B?[...$,`let sum = ${o.map((H,X)=>H.getByIndices(`input${X}Indices`)).join(" * ")};`]:[...$,O,...T,...S,x,...M,I,...E];return`
            ${v.registerUniforms(y.map(H=>({name:`${Lu(H)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...o,l)}

            ${v.mainStart()}
            ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${l.offsetToIndices("global_idx")};
            ${o.map((H,X)=>`var input${X}Indices: ${o[X].type.indices};`).join(`
`)}
            ${N.join(`
`)};
            ${l.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:n.equation,inputDependencies:e.map(v=>v?"rank":"dims")},getRunData:()=>{let v=y.filter(x=>n.symbolToInfo.has(x)).map(x=>({type:"uint32",data:n.symbolToInfo.get(x)?.dimValue||0}));v.push({type:"uint32",data:d});let $=t.filter((x,O)=>e[O]).map((x,O)=>[...K(x)]).reduce((x,O)=>x.concat(O),v);return p&&$.push(...K(a)),{outputs:[{dims:a,dataType:r}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:$}},getShaderSource:b}},Gu=(e,t)=>{let r=new da(e.inputs,t.equation),n=e.inputs.map((o,d)=>De(o.dims.length)),a=r.outputDims,u=e.inputs.map((o,d)=>o.dims);e.compute(yp(n,u,e.inputs[0].dataType,r,a))},Fu=e=>{let t=e.equation.replace(/\s+/g,"");return we({equation:t})}});var bp,qu,vp,wp,Ku,Yu=ee(()=>{"use strict";Ue();Ie();xe();bp=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=r.length<t.length?0:r.length-t.length,a=t.length<r.length?0:t.length-r.length;for(;n<r.length&&a<t.length;++n,++a)if(r[n]!==t[a]&&r[n]!==1&&t[a]!==1)throw new Error("Expand requires shape to be broadcastable to input")},qu=(e,t)=>{let r=e.length-t.length,n=[];for(let a=0;a<r;++a)n.push(e[a]);for(let a=0;a<t.length;++a)n.push(t[a]===1?e[a+r]:t[a]);return n},vp=(e,t)=>e.length>t.length?qu(e,t):qu(t,e),wp=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=vp(t,r),a=e[0].dataType,u=a===9?4:1,o=Math.ceil(V.size(n)/u),d=De(t.length),p=De(n.length),m=y=>{let b=d?t.length:t,v=p?n.length:n,$=W("input",a,b,u),x=te("output",a,v,u),O;if(a===9){let I=(S,T,E="")=>`
          let outputIndices${T} = ${x.offsetToIndices(`outputOffset + ${T}u`)};
          let offset${T} = ${$.broadcastedIndicesToOffset(`outputIndices${T}`,x)};
          let index${T} = offset${T} / 4u;
          let component${T} = offset${T} % 4u;
          ${S}[${T}] = ${E}(${$.getByOffset(`index${T}`)}[component${T}]);
        `;O=`
        let outputOffset = global_idx * ${u};
        var data = vec4<u32>(0);
        ${I("data",0,"u32")}
        ${I("data",1,"u32")}
        ${I("data",2,"u32")}
        ${I("data",3,"u32")}
        ${x.setByOffset("global_idx","data")}
      }`}else O=`
        let outputIndices = ${x.offsetToIndices("global_idx")};
        let inputOffset = ${$.broadcastedIndicesToOffset("outputIndices",x)};
        ${x.setByOffset("global_idx",$.getByOffset("inputOffset"))}
      }`;return`
    ${y.registerUniform("vec_size","u32").declareVariables($,x)}
    ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${O}`},l=[{type:"uint32",data:o}];return d&&l.push(...K(t)),p&&l.push(...K(n)),{name:"Expand",shaderCache:{hint:`${n.length}`,inputDependencies:[d?"rank":"dims"]},getShaderSource:m,getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:l})}},Ku=e=>{bp(e.inputs),e.compute(wp(e.inputs),{inputs:[0]})}});var $p,_p,Zu,Qu,Xu=ee(()=>{"use strict";Ue();Ie();qe();xe();$p=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},_p=(e,t)=>{let r=e[0].dims,n=e[1].dims,a=r.length,u=V.normalizeAxis(t.axis,a),o=r.slice(0);o.splice(u,1,...n);let d=r[u],p=e[0].dataType===9?4:1,m=Math.ceil(V.size(o)/p),l=De(e[0].dims.length),y=l?e[0].dims.length:e[0].dims,b=De(e[1].dims.length),v=b?e[1].dims.length:e[1].dims,$=De(o.length),x=$?o.length:o,O=[{type:"uint32",data:m},{type:"int32",data:d},{type:"uint32",data:u}];l&&O.push(...K(e[0].dims)),b&&O.push(...K(e[1].dims)),$&&O.push(...K(o));let I=[];I.push(l?"rank":"dims"),I.push(b?"rank":"dims");let S=T=>{let E=W("data",e[0].dataType,y,p),M=W("inputIndices",e[1].dataType,v),B=te("output",e[0].dataType,x,p),N=X=>{let D=n.length,j=`var indicesIndices${X}  = ${M.type.indices}(0);`;for(let se=0;se<D;se++)j+=`${D>1?`indicesIndices${X}[${se}]`:`indicesIndices${X}`} = ${o.length>1?`outputIndices${X}[uniforms.axis + ${se}]`:`outputIndices${X}`};`;j+=`
          var idx${X} = ${M.getByIndices(`indicesIndices${X}`)};
          if (idx${X} < 0) {
            idx${X} = idx${X} + uniforms.axisDimLimit;
          }
          var dataIndices${X} = ${E.type.indices}(0);
        `;for(let se=0,be=0;se<a;se++)se===u?(j+=`${a>1?`dataIndices${X}[${se}]`:`dataIndices${X}`} = u32(idx${X});`,be+=D):(j+=`${a>1?`dataIndices${X}[${se}]`:`dataIndices${X}`} = ${o.length>1?`outputIndices${X}[${be}]`:`outputIndices${X}`};`,be++);return j},H;if(e[0].dataType===9){let X=(D,j,se="")=>`
          let outputIndices${j} = ${B.offsetToIndices(`outputOffset + ${j}u`)};
          ${N(j)};
          let offset${j} = ${E.indicesToOffset(`dataIndices${j}`)};
          let index${j} = offset${j} / 4u;
          let component${j} = offset${j} % 4u;
          ${D}[${j}] = ${se}(${E.getByOffset(`index${j}`)}[component${j}]);
        `;H=`
        let outputOffset = global_idx * ${p};
        var value = vec4<u32>(0);
        ${X("value",0,"u32")}
        ${X("value",1,"u32")}
        ${X("value",2,"u32")}
        ${X("value",3,"u32")}
        ${B.setByOffset("global_idx","value")}
      `}else H=`
      let outputIndices = ${B.offsetToIndices("global_idx")};
      ${N("")};
      let value = ${E.getByIndices("dataIndices")};
      ${B.setByOffset("global_idx","value")};
      `;return`
      ${T.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(E,M,B)}
      ${T.mainStart()}
        ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${H}
      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:I},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:O}),getShaderSource:S}},Zu=e=>we({axis:e.axis}),Qu=(e,t)=>{let r=e.inputs;$p(r),e.compute(_p(e.inputs,t))}});var Sp,xp,Ju,el,tl=ee(()=>{"use strict";Ie();qe();xe();Sp=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},xp=(e,t)=>{let r=e[0].dims,n=e[0].dataType,a=r.length,u=e[1].dims,o=e[1].dataType,d=V.normalizeAxis(t.axis,a),p=r[d],m=u.slice(0),l=V.size(m),y=W("input",n,a),b=W("indicesInput",o,u.length),v=te("output",n,m.length),$=[{type:"uint32",data:l},{type:"int32",data:p},{type:"uint32",data:d}];return $.push(...K(r)),$.push(...K(u)),$.push(...K(m)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:m,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:$}),getShaderSource:I=>`
      ${I.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(y,b,v)}
      ${I.mainStart()}
      ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${v.offsetToIndices("global_idx")};

      var idx = ${b.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${y.type.indices}(outputIndices);
      ${y.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${y.getByIndices("inputIndices")};

      ${v.setByOffset("global_idx","value")};
  }`}},Ju=e=>we({axis:e.axis}),el=(e,t)=>{let r=e.inputs;Sp(r),e.compute(xp(e.inputs,t))}});var Cp,Ip,rl,nl,il=ee(()=>{"use strict";Ie();xe();Cp=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Ip=(e,t)=>{let r=e[0].dims.slice(),n=e[1].dims.slice(),[a,u,o]=Gn.getShapeOfGemmResult(r,t.transA,n,t.transB,e.length===3?e[2].dims:void 0),d=[a,u];if(!d)throw new Error("Can't use gemm on the given tensors");let p=V.size(d),m=[{type:"uint32",data:p},{type:"uint32",data:a},{type:"uint32",data:u},{type:"uint32",data:o},{type:"float32",data:t.alpha},{type:"float32",data:t.beta}],l=["type","type"];e.length===3&&(m.push(...K(e[2].dims)),l.push("rank")),m.push(...K(d));let y=b=>{let v="";t.transA&&t.transB?v="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?v="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?v="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(v="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let $=t.alpha===1?"":"value *= uniforms.alpha;",x=W("a",e[0].dataType,e[0].dims),O=W("b",e[1].dataType,e[1].dims),I=x.type.value,S=null,T=[x,O];e.length===3&&(S=W("c",e[2].dataType,e[2].dims.length),T.push(S));let E=te("output",e[0].dataType,d.length);T.push(E);let M=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${b.registerUniforms(M).declareVariables(...T)}

  ${b.mainStart()}
    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${I}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${v}
    }

    ${$}
    ${(()=>S!=null?`let cOffset = ${S.broadcastedIndicesToOffset("vec2(m, n)",E)}; value += ${I}(uniforms.beta) * ${S.getByOffset("cOffset")};`:"")()}
    output[global_idx] = value;
  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:d,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:m}),getShaderSource:y}},rl=e=>{let t=e.transA,r=e.transB,n=e.alpha,a=e.beta;return{transA:t,transB:r,alpha:n,beta:a,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},nl=(e,t)=>{Cp(e.inputs),e.compute(Ip(e.inputs,t))}});var Ap,Tp,Ep,al,ol=ee(()=>{"use strict";Ue();Ie();xe();Ap=(e,t)=>{let r=e[0].dims,n=r,a=2,u=V.sizeToDimension(r,a),o=V.sizeFromDimension(r,a),d=Le(o),p=o/d,m=[r[0],r[1],p],l=["rank","type","type"],y=[{type:"uint32",data:o},{type:"uint32",data:p}];y.push(...K(m),...K(m));let b=v=>{let $=W("x",e[0].dataType,m.length,d),x=W("scale",e[1].dataType,e[1].dims),O=W("bias",e[2].dataType,e[2].dims),I=te("output",e[0].dataType,m.length,d),S=[$,x,O,I],T=$.type.value,E=d===1?"f32":`vec${d}<f32>`,M=64,B=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`
  var<workgroup> meanShared : f32;
  var<workgroup> squaredNormShared : f32;
  var<workgroup> workgroupShared : array<${E}, ${M}>;
  const workgroupSize = ${M}u;
  ${v.registerUniforms(B).declareVariables(...S)}
  ${v.mainStart(M)}
    let norm = global_idx / workgroupSize;
    let batch = norm / uniforms.x_shape[1];
    let channel = norm % uniforms.x_shape[1];
    let localIndex = local_id.x;

    // initialize workgroup memory
    var initial = ${E}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      initial = initial + ${E}(${$.get("batch","channel","h")});
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the mean of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      meanShared = ${mt("workgroupShared[0]",d)} / f32(uniforms.normSize);
    }
    workgroupBarrier();

    // reinitialize workgroup memory.
    initial = ${E}(0);
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let deviation =  ${E}(${$.get("batch","channel","h")}) - ${E}(meanShared);
      initial = initial + deviation * deviation;
    }
    workgroupShared[localIndex] = initial;
    workgroupBarrier();

    // Calculate the sum of square of deviation of current channel data.
    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (localIndex < currSize) {
        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];
      }
      workgroupBarrier();
    }
    if (localIndex == 0) {
      squaredNormShared = ${mt("workgroupShared[0]",d)};
    }
    workgroupBarrier();

    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));
    let channelScale = invStdDev * f32(${x.getByOffset("channel")});
    let channelShift = f32(${O.getByOffset("channel")}) - meanShared * channelScale;
    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {
      let value = ${$.get("batch","channel","h")} * ${T}(${E}(channelScale)) + ${T}(${E}(channelShift));
      ${I.set("batch","channel","h","value")};
    }
  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${d}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:u},programUniforms:y}),getShaderSource:b}},Tp=(e,t,r,n,a,u,o,d)=>{let p=Le(o),m=64,l=p===1?"vec2f":`mat2x${p}f`,y=p===1?"f32":`vec${p}f`,b=(B,N)=>`${l}(${B}, ${N})`,v=a*o/p,$=Math.ceil(u/m),x=["type"],O=[{type:"uint32",data:$},{type:"uint32",data:u},{type:"uint32",data:Math.floor(o/p)},{type:"uint32",data:Math.floor(u*o/p)}],I=B=>{let N=W("input",t.dataType,t.dims,p);return`
  ${B.declareVariables(N)}
  @group(0) @binding(1) var<storage, read_write> output : array<${l}>;
  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};
  @group(0) @binding(2) var<uniform> uniforms: Uniforms;

  ${B.mainStart(m)}
    let currentImageNumber = global_idx / ${m} / uniforms.C;
    let currentChannelNumber = (global_idx / ${m}) % uniforms.C;
    let wgId = global_idx % ${m};
    let wgOffset = wgId * uniforms.wg_size;
    if (wgOffset >= uniforms.H) {
        return;
    }
    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);

    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;
    var sum = ${Je("f32",p)};
    var squaredSum = ${Je("f32",p)};
    for (var i: u32 = wgOffset; i < wgMax; i++) {
        let value = ${y}(input[offset + i * uniforms.C]);
        sum += value;
        squaredSum += value * value;
    }
    output[global_idx] = ${b("sum","squaredSum")};
  }`},S=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${p}`,inputDependencies:x},getRunData:()=>({outputs:[{dims:[a,o,m,2],dataType:1}],dispatchGroup:{x:a*o/p},programUniforms:O}),getShaderSource:I},{inputs:[t],outputs:[-1]})[0],T=[{type:"uint32",data:v},{type:"uint32",data:u},{type:"uint32",data:Math.floor(o/p)},{type:"uint32",data:Math.floor(m*o/p)}],E=["type","type","type"],M=B=>{let N=W("scale",r.dataType,r.dims,p),H=W("bias",n.dataType,n.dims,p);return`
  @group(0) @binding(0) var<storage, read> input : array<${l}>;
  @group(0) @binding(1) var<storage, read> scale : array<${N.type.storage}>;
  @group(0) @binding(2) var<storage, read> bias : array<${H.type.storage}>;
  @group(0) @binding(3) var<storage, read_write> output : array<${l}>;
  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};
  @group(0) @binding(4) var<uniform> uniforms: Uniforms;

  ${B.mainStart()}
    ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}
    let currentImageNumber = global_idx / uniforms.C;
    let currentChannelNumber = global_idx % uniforms.C;

    let offset = currentImageNumber * uniforms.image_size;
    var sum = ${Je("f32",p)};
    var squaredSum = ${Je("f32",p)};
    for (var i: u32 = 0; i < ${m}; i++) {
        let value = input[offset + i + currentChannelNumber * ${m}];
        sum += value[0];
        squaredSum += value[1];
    }
    sum = sum / f32(uniforms.H);
    squaredSum = squaredSum / f32(uniforms.H);
    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${d}));
    let channelScale = invStdDev * ${y}(scale[currentChannelNumber]);
    let channelShift = ${y}(bias[currentChannelNumber]) - sum * channelScale;

    output[global_idx] = ${b("channelScale","channelShift")};
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${p};${d}`,inputDependencies:E},getRunData:()=>({outputs:[{dims:[a,o,2],dataType:1}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:T}),getShaderSource:M},{inputs:[S,r,n],outputs:[-1]})[0]},Ep=(e,t,r)=>{let n=t[0].dims,a=n,u=n[0],o=n[n.length-1],d=V.sizeFromDimension(n,1)/o,p=Le(o),m=V.size(a)/p,l=[{type:"uint32",data:d},{type:"uint32",data:Math.floor(o/p)}],y=["type","type"],b=Tp(e,t[0],t[1],t[2],u,d,o,r.epsilon),v=$=>{let x=He(t[0].dataType),O=p===1?"vec2f":`mat2x${p}f`,I=p===1?x:`vec${p}<${x}>`,S=W("input",t[0].dataType,t[0].dims,p),T=te("output",t[0].dataType,a,p);return`
  @group(0) @binding(0) var<storage, read> input : array<${S.type.storage}>;
  @group(0) @binding(1) var<storage, read> scaleInput : array<${O}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${T.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${$.mainStart()}
    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);
    let currentChannelNumber = global_idx % uniforms.C;

    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;
    let scale = scaleInput[scaleOffset];
    output[global_idx] = fma(input[global_idx], ${I}(scale[0]), ${I}(scale[1]));
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${p}`,inputDependencies:y},getRunData:()=>({outputs:[{dims:a,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:l}),getShaderSource:v},{inputs:[t[0],b]})},al=(e,t)=>{t.format==="NHWC"?Ep(e,e.inputs,t):e.compute(Ap(e.inputs,t))}});var Op,kp,sl,ul=ee(()=>{"use strict";Ue();Ie();xe();Op=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},kp=(e,t,r)=>{let n=e[0].dims,a=e[1],u=e[2],o=n,d=V.normalizeAxis(t.axis,n.length),p=V.sizeToDimension(n,d),m=V.sizeFromDimension(n,d),l=V.size(a.dims),y=u?V.size(u.dims):0;if(l!==m||u&&y!==m)throw new Error(`Size of X.shape()[axis:] == ${m}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${l} and bias size of ${y}`);let b=[];for(let E=0;E<n.length;++E)E<d?b.push(n[E]):b.push(1);let v=Le(m),$=["type","type"],x=[{type:"uint32",data:p},{type:"float32",data:m},{type:"uint32",data:Math.floor(m/v)},{type:"float32",data:t.epsilon}];u&&$.push("type");let O=r>1,I=r>2,S=E=>{let M=He(e[0].dataType),B=[W("x",e[0].dataType,e[0].dims,v),W("scale",a.dataType,a.dims,v)];u&&B.push(W("bias",u.dataType,u.dims,v)),B.push(te("output",e[0].dataType,o,v)),O&&B.push(te("mean_data_output",1,b)),I&&B.push(te("inv_std_output",1,b));let N=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${E.registerUniforms(N).declareVariables(...B)}
  ${E.mainStart()}
    ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var meanVector = ${Je("f32",v)};
    var meanSquareVector = ${Je("f32",v)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${xt(M,v,"x[h + offset]")};
      meanVector += value;
      meanSquareVector += value * value;
    }
    let mean = ${mt("meanVector",v)} / uniforms.norm_size;
    let invStdDev =
        inverseSqrt(${mt("meanSquareVector",v)} / uniforms.norm_size - mean * mean + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${xt(M,v,"x[j + offset]")};
      let f32scale = ${xt(M,v,"scale[j]")};
      output[j + offset] = ${B[0].type.value}((f32input - mean) * invStdDev * f32scale
        ${u?`+ ${xt(M,v,"bias[j]")}`:""}
      );
    }

    ${O?"mean_data_output[global_idx] = mean":""};
    ${I?"inv_std_output[global_idx] = invStdDev":""};
  }`},T=[{dims:o,dataType:e[0].dataType}];return O&&T.push({dims:b,dataType:1}),I&&T.push({dims:b,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${v};${r}`,inputDependencies:$},getRunData:()=>({outputs:T,dispatchGroup:{x:Math.ceil(p/64)},programUniforms:x}),getShaderSource:S}},sl=(e,t)=>{Op(e.inputs),e.compute(kp(e.inputs,t,e.outputCount))}});var Pp,dl,ll,Rp,ca,cl,pl=ee(()=>{"use strict";Ie();qe();Hn();Qi();xe();_r();Pp=(e,t)=>{let r=e[0],n=e[1],a=e[2],u=e[3],o=e[4],d=e[5],p=e[6],m=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let l=!1,y=r.dims[0],b=r.dims[1],v=r.dims.length===3?l?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],$=b,x=0,O=0,I=Math.floor(v/t.numHeads);if(p&&m){if(p.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(m.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');x=p.dims[2],O=p.dims[2]}else if(p||m)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let S;if(n){if(r.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(n.dims.length===3){if(n.dims[2]!==r.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');S=2,$=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==I)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(a)throw new Error('Expect "value" be none when "key" has packed kv format.');S=5,$=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==I)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');S=0,$=n.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');S=3}if(u){if(u.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(a&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let T=0;if(o){T=8;let H=o.dims;throw H.length===1?H[0]===y?T=1:H[0]===3*y+2&&(T=3):H.length===2&&H[0]===y&&H[1]===$&&(T=5),T===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error("Mask not supported")}let E=!1,M=v;if(a){if(a.dims.length!==3&&a.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(r.dims[0]!==a.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(a.dims.length===3){if($!==a.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');M=a.dims[2]}else{if($!==a.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');M=a.dims[1]*a.dims[3],E=!0}}let B=x+$,N=!1;if(o)throw new Error("Key padding mask is not supported");if(d)throw new Error("extraAddQk is not supported");if(p)throw new Error("pastKey is not supported");if(m)throw new Error("pastValue is not supported");return{batchSize:y,sequenceLength:b,pastSequenceLength:x,kvSequenceLength:$,totalSequenceLength:B,maxSequenceLength:O,inputHiddenSize:0,hiddenSize:v,vHiddenSize:M,headSize:I,vHeadSize:Math.floor(M/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:T,scale:t.scale,broadcastResPosBias:N,passPastInKv:E,qkvFormat:S}},dl=e=>we({...e}),ll=we({perm:[0,2,1,3]}),Rp=(e,t,r,n,a,u,o)=>{let d=[n,a,u],p=V.size(d),m=[{type:"uint32",data:p},{type:"uint32",data:o},{type:"uint32",data:u}],l=y=>{let b=te("qkv_with_bias",t.dataType,d),v=W("qkv",t.dataType,d),$=W("bias",r.dataType,d),x=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${y.registerUniforms(x).declareVariables(v,$,b)}
  ${y.mainStart()}
    ${y.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:d,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:m}),getShaderSource:l},{inputs:[t,r],outputs:[-1]})[0]},ca=(e,t,r,n,a,u,o,d)=>{let p=u;if(o){if(n===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return p=Rp(e,u,o,t,n,r*a,d),p=p.reshape([t,n,r,a]),e.compute(Ct(p,ll.perm),{inputs:[p],outputs:[-1]})[0]}else return u.dims.length===3&&(p=u.reshape([t,n,r,a])),e.compute(Ct(p,ll.perm),{inputs:[p],outputs:[-1]})[0]},cl=(e,t)=>{let r=Pp(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let n=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,a=ca(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(n)return Zn(e,a,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let u=ca(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),o=ca(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);Zn(e,a,u,o,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Bp,Dp,zp,Mp,Up,Wp,Np,Vp,fl,ml=ee(()=>{"use strict";Ue();Ie();xe();Bp=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Dp=(e,t,r)=>{let n="";for(let a=t-1;a>=0;--a)n+=`
            k = i32(${e.indicesGet("indices",a)}) - ${ce("uniforms.pads",a,r)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${ce("uniforms.x_shape",a,t)})) {
              break;
            }
            offset += k * i32(${ce("uniforms.x_strides",a,t)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${n}
            value = x[offset];
          }
      `},zp=(e,t,r)=>{let n="";for(let a=t-1;a>=0;--a)n+=`
                k = i32(${e.indicesGet("indices",a)}) - ${ce("uniforms.pads",a,r)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${ce("uniforms.x_shape",a,t)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${ce("uniforms.x_shape",a,t)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${ce("uniforms.x_strides",a,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},Mp=(e,t,r)=>{let n="";for(let a=t-1;a>=0;--a)n+=`
                k = i32(${e.indicesGet("indices",a)}) - ${ce("uniforms.pads",a,r)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${ce("uniforms.x_shape",a,t)})) {
                  k = i32(${ce("uniforms.x_shape",a,t)}) - 1;
                }
                offset += k * i32(${ce("uniforms.x_strides",a,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},Up=(e,t,r)=>{let n="";for(let a=t-1;a>=0;--a)n+=`
                k = i32(${e.indicesGet("indices",a)}) - ${ce("uniforms.pads",a,r)};
                if (k < 0)  {
                  k += i32(${ce("uniforms.x_shape",a,t)}]);
                }
                if (k >= i32(${ce("uniforms.x_shape",a,t)})) {
                  k -= i32(${ce("uniforms.x_shape",a,t)});
                }
                offset += k * i32(${ce("uniforms.x_strides",a,t)});
            `;return`
              var offset = 0;
              var k = 0;
              ${n}
              value = x[offset];
          `},Wp=(e,t,r)=>{switch(r.mode){case 0:return Dp(e,t,r.pads.length);case 1:return zp(e,t,r.pads.length);case 2:return Mp(e,t,r.pads.length);case 3:return Up(e,t,r.pads.length);default:throw new Error("Invalid mode")}},Np=(e,t)=>{let r=V.padShape(e[0].dims.slice(),t.pads),n=e[0].dims,u=[{type:"uint32",data:V.size(r)},{type:"uint32",data:t.pads}];if(t.mode===0){let p=ft(e[0].dataType);u.push({type:p,data:t.value})}u.push(...K(e[0].dims),...K(r));let o=["rank"],d=p=>{let m=te("output",e[0].dataType,r.length),l=W("x",e[0].dataType,n.length),y=l.type.value,b=Wp(m,n.length,t),v=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&v.push({name:"constant_value",type:y}),`
            ${p.registerUniforms(v).declareVariables(l,m)}
            ${p.mainStart()}
            ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${m.offsetToIndices("global_idx")};

            var value = ${y}(0);
            ${b}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:o},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(V.size(r)/64)},programUniforms:u}),getShaderSource:d}},Vp=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),n=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,a=e[0].dims.length,u=new Int32Array(2*a).fill(0);if(e.length>=4){let d=e[3].getBigInt64Array();for(let p=0;p<d.length;p++)u[Number(d[p])]=Number(r[p]),u[Number(d[p])+a]=Number(r[p+d.length])}else r.forEach((d,p)=>u[Number(p)]=Number(d));let o=[];return u.forEach(d=>o.push(d)),{mode:t.mode,value:n,pads:o}}else return t},fl=(e,t)=>{Bp(e.inputs);let r=Vp(e.inputs,t);e.compute(Np(e.inputs,r),{inputs:[0]})}});var ai,hl,gl,yl,bl,Hp,Lp,vl,wl,$l,_l,Sl,xl,Cl,Il,Al,Tl,El,Ol,kl=ee(()=>{"use strict";vt();Ie();xe();ai=e=>{if(Te.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},hl=(e,t,r)=>{let n=t.format==="NHWC",a=e.dims.slice();n&&a.splice(1,0,a.pop());let u=Object.hasOwnProperty.call(t,"dilations"),o=t.kernelShape.slice(),d=t.strides.slice(),p=u?t.dilations.slice():[],m=t.pads.slice();sr.adjustPoolAttributes(r,a,o,d,p,m);let l=sr.computePoolOutputShape(r,a,d,p,o,m,t.autoPad),y=Object.assign({},t);u?Object.assign(y,{kernelShape:o,strides:d,pads:m,dilations:p,cacheKey:t.cacheKey}):Object.assign(y,{kernelShape:o,strides:d,pads:m,cacheKey:t.cacheKey});let b=l.slice();return b.push(b.splice(1,1)[0]),[y,n?b:l]},gl=(e,t)=>{let r=t.format==="NHWC",n=V.size(e),a=V.size(t.kernelShape),u=[{type:"uint32",data:n},{type:"uint32",data:a}],o=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let d=t.kernelShape[t.kernelShape.length-1],p=t.strides[t.strides.length-1],m=t.pads[t.pads.length/2-1],l=t.pads[t.pads.length-1],y=!!(m+l);u.push({type:"uint32",data:d},{type:"uint32",data:p},{type:"uint32",data:m},{type:"uint32",data:l}),o.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let b=!1;if(t.kernelShape.length===2){let v=t.kernelShape[t.kernelShape.length-2],$=t.strides[t.strides.length-2],x=t.pads[t.pads.length/2-2],O=t.pads[t.pads.length-2];b=!!(x+O),u.push({type:"uint32",data:v},{type:"uint32",data:$},{type:"uint32",data:x},{type:"uint32",data:O}),o.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[u,o,!0,y,b]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let d=V.computeStrides(t.kernelShape);u.push({type:"uint32",data:d},{type:"uint32",data:t.pads},{type:"uint32",data:t.strides}),o.push({name:"kernelStrides",type:"u32",length:d.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let p=t.pads.reduce((m,l)=>m+l);return[u,o,!!p,!1,!1]}},yl=(e,t,r,n,a,u,o,d,p,m,l,y)=>{let b=a.format==="NHWC",v=t.type.value,$=te("output",t.type.tensor,n);if(a.kernelShape.length<=2){let x="",O="",I="",S=r-(b?2:1);if(l?x=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${S}] = indices[${S}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${S}] < 0 || xIndices[${S}]
                      >= uniforms.x_shape[${S}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${u}
                }`:x=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${S}] = indices[${S}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${t.indicesToOffset("xIndices")}];
                  ${u}
                }`,a.kernelShape.length===2){let E=r-(b?3:2);y?O=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${E}] < 0 || xIndices[${E}] >= uniforms.x_shape[${E}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:O=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${E}] = indices[${E}] * uniforms.sh - uniforms.phStart + j;
                `,I=`
              }
            `}return`
            ${e.registerUniforms(p).declareVariables(t,$)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${$.offsetToIndices("global_idx")};
              var xIndices = ${$.offsetToIndices("global_idx")};

              var value = ${v}(${d});
              var pad = 0;
              ${O}
              ${x}
              ${I}
              ${o}

              output[global_idx] = value;
            }`}else{if(b)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let x=a.kernelShape.length,O=a.pads.length,I="";return m?I=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${t.indicesToOffset("xIndices")}];
                ${u}
              }`:I=`
              }
              let x_val = x[${t.indicesToOffset("xIndices")}];
              ${u}
            `,`
            ${e.registerUniforms(p).declareVariables(t,$)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${$.offsetToIndices("global_idx")};
              var xIndices = ${$.offsetToIndices("global_idx")};

              var offsets: array<u32, ${x}>;

              var value = ${v}(${d});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${x-1}u; j++) {
                  offsets[j] = offset / ${ce("uniforms.kernelStrides","j",x)};
                  offset -= offsets[j] * ${ce("uniforms.kernelStrides","j",x)};
                }
                offsets[${x-1}] = offset;

                isPad = false;
                for (var j = ${r-x}u; j < ${r}u; j++) {
                  xIndices[j] = indices[j] * ${ce("uniforms.strides",`j - ${r-x}u`,x)}
                    + offsets[j - ${r-x}u] - ${ce("uniforms.pads","j - 2u",O)};
                  ${I}
              }
              ${o}

              output[global_idx] = value;
            }`}},bl=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,Hp=e=>`${bl(e)};${e.countIncludePad}`,Lp=e=>`${bl(e)};${e.storageOrder};${e.dilations}`,vl=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),wl=(e,t,r,n)=>{let[a,u]=hl(t,n,r),o=W("x",t.dataType,t.dims.length),d=o.type.value,p="value += x_val;",m="";a.countIncludePad?m+=`value /= ${d}(uniforms.kernelSize);`:m+=`value /= ${d}(i32(uniforms.kernelSize) - pad);`;let[l,y,b,v,$]=gl(u,a);l.push(...K(t.dims),...K(u));let x=["rank"];return{name:e,shaderCache:{hint:`${n.cacheKey};${b};${v};${$}`,inputDependencies:x},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(V.size(u)/64)},programUniforms:l}),getShaderSource:O=>yl(O,o,t.dims.length,u.length,a,p,m,0,y,b,v,$)}},$l=e=>{let t=e.count_include_pad!==0,r=vl(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let n={countIncludePad:t,...r,cacheKey:""};return{...n,cacheKey:Hp(n)}},_l=(e,t)=>{ai(e.inputs),e.compute(wl("AveragePool",e.inputs[0],!1,t))},Sl={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},xl=e=>{let t=e.format;return{format:t,...Sl,cacheKey:t}},Cl=(e,t)=>{ai(e.inputs),e.compute(wl("GlobalAveragePool",e.inputs[0],!0,t))},Il=(e,t,r,n)=>{let[a,u]=hl(t,n,r),o=`
      value = max(x_val, value);
    `,d="",p=W("x",t.dataType,t.dims.length),m=["rank"],[l,y,b,v,$]=gl(u,a);return l.push(...K(t.dims),...K(u)),{name:e,shaderCache:{hint:`${n.cacheKey};${b};${v};${$}`,inputDependencies:m},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(V.size(u)/64)},programUniforms:l}),getShaderSource:x=>yl(x,p,t.dims.length,u.length,a,o,d,-1e5,y,b,v,$)}},Al=(e,t)=>{ai(e.inputs),e.compute(Il("MaxPool",e.inputs[0],!1,t))},Tl=e=>{let t=e.storage_order,r=e.dilations,n=vl(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(n.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let a={storageOrder:t,dilations:r,...n,cacheKey:""};return{...a,cacheKey:Lp(a)}},El=e=>{let t=e.format;return{format:t,...Sl,cacheKey:t}},Ol=(e,t)=>{ai(e.inputs),e.compute(Il("GlobalMaxPool",e.inputs[0],!0,t))}});var Fp,jp,Pl,Rl=ee(()=>{"use strict";vt();Ue();xe();Fp=(e,t,r)=>{let n=e===t,a=e<t&&r<0,u=e>t&&r>0;if(n||a||u)throw new Error("Range these inputs' contents are invalid.")},jp=(e,t,r,n)=>{let a=Math.abs(Math.ceil((t-e)/r)),u=[a],o=a,d=ft(n),p=[{type:"uint32",data:o},{type:d,data:e},{type:d,data:r},...K(u)],m=l=>{let y=te("output",n,u.length),b=y.type.value,v=[{name:"outputSize",type:"u32"},{name:"start",type:b},{name:"delta",type:b}];return`
        ${l.registerUniforms(v).declareVariables(y)}
        ${l.mainStart()}
        ${l.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${b}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${n}`},getShaderSource:m,getRunData:()=>({outputs:[{dims:u,dataType:n}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:p})}},Pl=e=>{let t=0,r=0,n=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],n=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],n=e.inputs[2].getFloat32Array()[0]),Te.webgpu.validateInputContent&&Fp(t,r,n),e.compute(jp(t,r,n,e.inputs[0].dataType),{inputs:[]})}});var qp,Kp,Yp,Zp,Qp,Xp,Jp,ef,tf,rf,nf,Bl,af,of,sf,uf,lf,Dl,zl,Ml=ee(()=>{"use strict";Ie();qe();xe();qp=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},Kp=(e,t,r)=>{t.every(a=>a>=0&&a<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let n=new Array(r).fill(1);return t.forEach((a,u)=>n[a]=e[u]),n},Yp=(e,t,r,n,a,u)=>{let[o,d,p]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],m=e[0].dims.length;if(o>0&&e.length>o&&e[o].dims.length>0)e[o].getFloat32Array().forEach(l=>u.push(l));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(d>0&&e.length>d&&e[d].dims.length>0){if(e[d].getFloat32Array().forEach(l=>n.push(l)),n.length!==0&&n.length!==m&&r>=18&&n.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");qp(n,t),t.axes.length>0&&Kp(n,t.axes,m).forEach((l,y)=>n[y]=l)}if(p>0&&e.length>p&&(e[p].getBigInt64Array().forEach(l=>a.push(Number(l))),a.length!==m||r>=18&&a.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(n.length!==t.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(a.length!==t.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof n<"u"&&typeof a<"u"&&n.length>0&&a.length>m)throw new Error("Resize requires only of scales or sizes to be specified")},Zp=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating
                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
                    // offset-by-one error later in floor().
                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));
                    let fract =
                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);
                    return whole + fract;
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +
                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /
                        ${t}(lengthResized - 1);
                  } else {
                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);
                  const adjustment = ${t}(lengthResized) / outputWidth;
                  const center = ${t}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",Qp=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",Xp=(e,t,r)=>{let n=new Array(r).fill(0).concat(new Array(r).fill(1)),a=e.length===0?n:e.slice();return t.length>0?(t.forEach((u,o)=>{n[u]=a[o],n[o+r]=a[t.length+o]}),n):a},Jp=(e,t,r,n)=>{let a=[];if(r.length>0)if(n.length>0){if(e.forEach(u=>a.push(u)),Math.max(...n)>e.length)throw new Error("axes is out of bound");n.forEach((u,o)=>a[u]=r[o])}else r.forEach(u=>a.push(u));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");a=e.map((u,o)=>Math.round(u*t[o]))}return a},ef=(e,t,r)=>{let n=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(u=>t[u]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(u=>t[u]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let a=e.slice();return r.axes.length>0?(r.axes.forEach(u=>t[u]=n),r.axes.forEach(u=>a[u]=Math.round(e[u]*t[u]))):(t.fill(n,0,t.length),a.forEach((u,o)=>a[o]=Math.round(u*t[o]))),a},tf=(e,t,r,n,a)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {
      var original_indices: array<${e.type.value}, ${r.length}>;
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${ce("uniforms.scales","i",n)};
        var roi_low = ${ce("uniforms.roi","i",a)};
        var roi_hi = ${ce("uniforms.roi",`i + ${t.length}`,a)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${ce("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${ce("uniforms.output_shape","i",r.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,rf=(e,t,r,n,a,u,o)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${n.length}; i++) {
        var output_index = ${t.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${ce("uniforms.scales","i",a)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${ce("uniforms.roi","i",u)};
          var roi_hi = ${ce("uniforms.roi",`i + ${r.length}`,u)};
          var input_shape_i = ${ce("uniforms.input_shape","i",r.length)};
          var output_shape_i = ${ce("uniforms.output_shape","i",n.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${o} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i"," input_index")}
      }
      return input_indices;
    }`,nf=(e,t)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${ce("uniforms.input_shape","i",t.length)}) {
          return false;
        }
      }
      return true;
    }`,Bl=(e,t,r,n)=>e.rank>n?`
    ${e.indicesSet("input_indices",t,"channel")};
    ${e.indicesSet("input_indices",r,"batch")};
`:"",af=(e,t,r,n,a)=>{let[o,d,p,m]=r.length===2?[-1,0,1,-1]:[0,2,3,1],l=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${l} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",d,`max(0, min(row, ${r[d]} - 1))`)};
      ${e.indicesSet("input_indices",p,`max(0, min(col, ${r[p]} - 1))`)};
      ${Bl(e,m,o,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${l} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${l} = originalIndices[${d}];
      var col:${l} = originalIndices[${p}];
      ${n?`if (row < 0 || row > (${r[d]} - 1) || col < 0 || col > (${r[p]} - 1)) {
        return ${a};
      }`:""};
      row = max(0, min(row, ${r[d]} - 1));
      col = max(0, min(col, ${r[p]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${r.length>2?`u32(originalIndices[${m}])`:"0"};
      var batch: u32 =  ${r.length>2?`u32(originalIndices[${o}])`:"0"};
      var x11: ${l} = getInputValue(batch, channel, row1, col1);
      var x12: ${l} = getInputValue(batch, channel, row1, col2);
      var x21: ${l} = getInputValue(batch, channel, row2, col1);
      var x22: ${l} = getInputValue(batch, channel, row2, col2);
      var dx1: ${l} = abs(row - ${l}(row1));
      var dx2: ${l} = abs(${l}(row2) - row);
      var dy1: ${l} = abs(col - ${l}(col1));
      var dy2: ${l} = abs(${l}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},of=(e,t,r,n,a,u,o,d,p,m)=>{let l=r.length===2,y=!0,[b,v]=l?[0,1]:y?[2,3]:[1,2],$=e.type.value,x=O=>{let I=O===b?"row":"col";return`
      fn ${I}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${$} {
        var output_index = ${t.indicesGet("output_indices",O)};
        var originalIdx: ${$} = getOriginalCoordinateFromResizedCoordinate(output_index, ${a[O]},
        ${n[O]}, ${r[O]}, ${u[O]}, ${u[O]} + ${r.length});
        var fractOriginalIdx: ${$} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${d} && (originalIdx < 0 || originalIdx > (${r[O]} - 1))) {
          return ${p};
        }
        var data: array<${$}, 4> = array<${$}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${I}: ${$} = originalIdx + ${$}(i);
          if (${I} < 0 || ${I} >= ${r[O]}) {
            ${(()=>m?`coefs[i + 1] = 0.0;
                        continue;`:d?`return ${p};`:`${I} = max(0, min(${I}, ${r[O]} - 1));`)()};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",O,`u32(${I})`)};
          data[i + 1] = ${O===b?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${x(b)};
    ${x(v)};
  fn getCubicInterpolationCoefs(s: ${$}) -> array<${$}, 4> {
    var absS = abs(s);
    var coeffs: array<${$}, 4> = array<${$}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${$} = 1.0 - absS;
    var twoMinusAbsS: ${$} = 2.0 - absS;
    var onePlusAbsS: ${$} = 1.0 + absS;
    coeffs[0] = ((${o} * onePlusAbsS - 5 * ${o}) * onePlusAbsS + 8 * ${o}) * onePlusAbsS - 4 * ${o};
    coeffs[1] = ((${o} + 2) * absS - (${o} + 3)) * absS * absS + 1;
    coeffs[2] = ((${o} + 2) * oneMinusAbsS - (${o} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${o} * twoMinusAbsS - 5 * ${o}) * twoMinusAbsS + 8 * ${o}) * twoMinusAbsS - 4 * ${o};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${$}, 4>, coefs: array<${$}, 4>) -> ${$} {
    var coefsSum: ${$} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${$} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},sf=(e,t,r,n,a)=>{let[o,d,p,m,l]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],y=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${y} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",d,`max(0, min(depth, ${r[d]} - 1))`)};
      ${e.indicesSet("input_indices",p,`max(0, min(height, ${r[p]} - 1))`)};
      ${e.indicesSet("input_indices",m,`max(0, min(width, ${r[m]} - 1))`)};
      ${Bl(e,l,o,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${y} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${y} = originalIndices[${d}];
      var height:${y} = originalIndices[${p}];
      var width:${y} = originalIndices[${m}];
      ${n?`if (depth < 0 || depth > (${r[d]} - 1) || height < 0 || height > (${r[p]} - 1) || width < 0 || (width > ${r[m]} - 1)) {
      return ${a};
        }`:""};

    depth = max(0, min(depth, ${r[d]} - 1));
      height = max(0, min(height, ${r[p]} - 1));
      width = max(0, min(width, ${r[m]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${r.length>3?`u32(originalIndices[${l}])`:"0"};
      var batch: u32 =  ${r.length>3?`u32(originalIndices[${o}])`:"0"};

      var x111: ${y} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${y} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${y} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${y} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${y} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${y} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${y} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${y} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${y} = abs(depth - ${y}(depth1));
      var dx2: ${y} = abs(${y}(depth2) - depth);
      var dy1: ${y} = abs(height - ${y}(height1));
      var dy2: ${y} = abs(${y}(height2) - height);
      var dz1: ${y} = abs(width - ${y}(width1));
      var dz2: ${y} = abs(${y}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},uf=(e,t,r,n,a,u)=>{let o=e.dims,d=Xp(u,t.axes,o.length),p=Jp(o,n,a,t.axes),m=n.slice();n.length===0&&(m=o.map((S,T)=>S===0?1:p[T]/S),t.keepAspectRatioPolicy!=="stretch"&&(p=ef(o,m,t)));let l=te("output",e.dataType,p.length),y=W("input",e.dataType,o.length),b=V.size(p),v=o.length===p.length&&o.every((S,T)=>S===p[T]),$=t.coordinateTransformMode==="tf_crop_and_resize",x=t.extrapolationValue,O=y.type.value,I=S=>`
      ${v?"":`
      ${Zp(t.coordinateTransformMode,O)};
      ${(()=>{switch(t.mode){case"nearest":return`
              ${nf(y,o)};
              ${Qp(t.nearestMode,r,O)};
              ${rf(y,l,o,p,m.length,d.length,$)};
              `;case"linear":return`
              ${tf(l,o,p,m.length,d.length)};
              ${(()=>{if(o.length===2||o.length===4)return`${af(y,l,o,$,x)}`;if(o.length===3||o.length===5)return`${sf(y,l,o,$,x)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(o.length===2||o.length===4)return`${of(y,l,o,p,m,d,t.cubicCoeffA,$,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${S.registerUniform("output_size","u32").registerUniform("scales","f32",m.length).registerUniform("roi","f32",d.length).declareVariables(y,l)}
      ${S.mainStart()}
        ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${v?"output[global_idx] = input[global_idx];":`
        let output_indices = ${l.offsetToIndices("global_idx")};
        var input_indices: ${y.type.indices};
        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${y.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${t.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${o.length===2||o.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${m.length>0?m:""}|${a.length>0?a:""}|${d.length>0?d:""}|${v}|${o}`,inputDependencies:["rank"]},getShaderSource:I,getRunData:()=>({outputs:[{dims:p,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(b/64)},programUniforms:[{type:"uint32",data:b},{type:"float32",data:m},{type:"float32",data:d},...K(o),...K(p)]})}},lf=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},Dl=(e,t)=>{let r=[],n=[],a=[],u=lf(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");Yp(e.inputs,t,u,r,n,a),e.compute(uf(e.inputs[0],t,u,r,n,a),{inputs:[0]})},zl=e=>{let t=e.antialias,r=e.axes,n=e.coordinateTransformMode,a=e.cubicCoeffA,u=e.excludeOutside!==0,o=e.extrapolationValue,d=e.keepAspectRatioPolicy,p=e.mode,m=e.nearestMode===""?"simple":e.nearestMode;return we({antialias:t,axes:r,coordinateTransformMode:n,cubicCoeffA:a,excludeOutside:u,extrapolationValue:o,keepAspectRatioPolicy:d,mode:p,nearestMode:m})}});var df,cf,Ul,Wl=ee(()=>{"use strict";Ue();Ie();xe();df=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],n=e[2];if(t.dataType!==r.dataType||t.dataType!==n.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let a=t.dims[t.dims.length-1],u=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==a)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==u)throw new Error("Skip must have the same sequence length as input");if(n.dims.length!==1)throw new Error("Gamma must be 1D");if(n.dims[n.dims.length-1]!==a)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let o=e[3];if(o.dims.length!==1)throw new Error("Beta must be 1D");if(o.dims[o.dims.length-1]!==a)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let o=e[4];if(o.dims.length!==1)throw new Error("Bias must be 1D");if(o.dims[o.dims.length-1]!==a)throw new Error("Bias must have the same hidden size as input")}},cf=(e,t,r,n)=>{let a=e[0].dims,u=V.size(a),o=a,d=u,p=a.slice(-1)[0],m=n?a.slice(0,-1).concat(1):[],l=e.length>3,y=e.length>4,b=n&&r>1,v=n&&r>2,$=r>3,x=Le(p),O=[{type:"uint32",data:d},{type:"uint32",data:x},{type:"uint32",data:p},{type:"float32",data:t.epsilon}],I=T=>{let E=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],M=[W("x",e[0].dataType,e[0].dims,x),W("skip",e[1].dataType,e[1].dims,x),W("gamma",e[2].dataType,e[2].dims,x)];l&&M.push(W("beta",e[3].dataType,e[3].dims,x)),y&&M.push(W("bias",e[4].dataType,e[4].dims,x)),M.push(te("output",e[0].dataType,o,x)),b&&M.push(te("mean_output",1,m)),v&&M.push(te("inv_std_output",1,m)),$&&M.push(te("input_skip_bias_sum",e[0].dataType,o,x));let B=He(e[0].dataType);return`

      ${T.registerUniforms(E).declareVariables(...M)}

      ${T.mainStart()}
        ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size / uniforms.hidden_size")}
        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        let offset = global_idx * hidden_size_vectorized;
        var sum = ${Je("f32",x)};
        var squareSum = ${Je("f32",x)};
        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${y?"bias[i]":"0.0"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${$?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${xt(B,x,"value")};
          sum += f32_value;
          squareSum += f32_value * f32_value;
        }
        let mean = ${mt("sum",x)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${mt("squareSum",x)} / f32(uniforms.hidden_size) - mean * mean + uniforms.epsilon);
        ${b?"mean_output[global_idx] = mean;":""}
        ${v?"inv_std_output[global_idx] = inv_std_dev;":""}
        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {
          output[offset + i] = (output[offset + i] - ${B}(mean)) * ${B}(inv_std_dev) * gamma[i] + ${l?"beta[i]":"0.0"};
        }
      }`},S=[{dims:o,dataType:e[0].dataType}];return r>1&&S.push({dims:m,dataType:1}),r>2&&S.push({dims:m,dataType:1}),r>3&&S.push({dims:a,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${x};${b};${v};${$}`,inputDependencies:e.map((T,E)=>"type")},getShaderSource:I,getRunData:()=>({outputs:S,dispatchGroup:{x:Math.ceil(d/p/64)},programUniforms:O})}},Ul=(e,t)=>{df(e.inputs);let n=[0];e.outputCount>1&&n.push(-3),e.outputCount>2&&n.push(-3),e.outputCount>3&&n.push(3),e.compute(cf(e.inputs,t,e.outputCount,!1),{outputs:n})}});var pf,oi,ff,Nl,mf,hf,Vl,Hl,Ll=ee(()=>{"use strict";Ue();Ie();qe();xe();pf=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,n)=>{if(e[n+1].dataType!==6&&e[n+1].dataType!==7)throw new Error(`Input ${n} must be an array of int32 or int64`)})},oi=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(n=>r.push(Number(n)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(n=>r.push(Number(n)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},ff=(e,t)=>{if(e.length>1){let r=oi(e,1),n=oi(e,2),a=oi(e,3);return a.length===0&&(a=[...Array(e[0].dims.length).keys()]),we({starts:r,ends:n,axes:a})}else return t},Nl=(e,t,r,n,a)=>{let u=e;return e<0&&(u+=r[n[t]]),a[t]<0?Math.max(0,Math.min(u,r[n[t]]-1)):Math.max(0,Math.min(u,r[n[t]]))},mf=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${r.length}; i >= 0; i--) {
            let input_shape_i = ${ce("uniforms.input_shape","i",r.length)};
            let steps_i = ${ce("uniforms.steps","i",r.length)};
            let signs_i = ${ce("uniforms.signs","i",r.length)};
            let starts_i = ${ce("uniforms.starts","i",r.length)};
            var output_index = ${t.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,hf=(e,t)=>{let r=e[0].dims,n=V.size(r),a=t.axes.length>0?V.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],u=oi(e,4);u.forEach(I=>I!==0||(()=>{throw new Error("step cannot be 0")})),u.length===0&&(u=Array(a.length).fill(1));let o=t.starts.map((I,S)=>Nl(I,S,r,a,u)),d=t.ends.map((I,S)=>Nl(I,S,r,a,u));if(a.length!==o.length||a.length!==d.length)throw new Error("start, ends and axes should have the same number of elements");if(a.length!==r.length)for(let I=0;I<r.length;++I)a.includes(I)||(o.splice(I,0,0),d.splice(I,0,r[I]),u.splice(I,0,1));let p=u.map(I=>Math.sign(I));u.forEach((I,S,T)=>{if(I<0){let E=(d[S]-o[S])/I,M=o[S],B=M+E*u[S];o[S]=B,d[S]=M,T[S]=-I}});let m=r.slice(0);a.forEach((I,S)=>{m[I]=Math.ceil((d[I]-o[I])/u[I])});let l={dims:m,dataType:e[0].dataType},y=te("output",e[0].dataType,m.length),b=W("input",e[0].dataType,e[0].dims.length),v=V.size(m),$=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:o.length},{name:"signs",type:"i32",length:p.length},{name:"steps",type:"u32",length:u.length}],x=[{type:"uint32",data:v},{type:"uint32",data:o},{type:"int32",data:p},{type:"uint32",data:u},...K(e[0].dims),...K(m)],O=I=>`
      ${I.registerUniforms($).declareVariables(b,y)}
        ${mf(b,y,r)}
        ${I.mainStart()}
          ${I.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${y.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${y.setByOffset("global_idx",b.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${p.length}_${o.length}_${u.length}`,inputDependencies:["rank"]},getShaderSource:O,getRunData:()=>({outputs:[l],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:x})}},Vl=(e,t)=>{pf(e.inputs,t);let r=ff(e.inputs,t);e.compute(hf(e.inputs,r),{inputs:[0]})},Hl=e=>{let t=e.starts,r=e.ends,n=e.axes;return we({starts:t,ends:r,axes:n})}});var gf,yf,Gl,Fl,jl=ee(()=>{"use strict";Ie();qe();xe();gf=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},yf=(e,t)=>{let r=e.dims,n=V.size(r),a=64,u=t.axis;if(u<0&&(u=r.length+u),u<r.length-1)throw new Error("softmax only supports last axis for now.");let o=r[u],d=n/o,p=Le(o),m=o/p,l=(O,I)=>I===4?`max(max(${O}.x, ${O}.y), max(${O}.z, ${O}.w))`:I===2?`max(${O}.x, ${O}.y)`:I===3?`max(max(${O}.x, ${O}.y), ${O}.z)`:O,y=W("x",e.dataType,e.dims,p),b=te("result",e.dataType,e.dims,p),v=y.type.value,$=He(e.dataType)==="f32"?`var threadMax = ${v}(-3.402823e+38f);`:`var threadMax = ${v}(-65504.0h);`,x=O=>`
      var<workgroup> rowMaxShared : ${v};
      var<workgroup> rowSumShared : ${v};
      var<workgroup> threadShared : array<${v}, ${a}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${v} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${v}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${O.registerUniform("packedCols","i32").declareVariables(y,b)}
      ${O.mainStart()}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${a};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${$}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${v}(${l("threadShared[0]",p)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${v}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${v}(${mt("threadShared[0]",p)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`;return{name:"Softmax",shaderCache:{hint:`${p}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:d},programUniforms:[{type:"uint32",data:m}]}),getShaderSource:x}},Gl=(e,t)=>{gf(e.inputs),e.compute(yf(e.inputs[0],t))},Fl=e=>we({axis:e.axis})});var bf,vf,wf,$f,_f,ql,Kl,Yl=ee(()=>{"use strict";Ie();qe();xe();bf=e=>{if(!e||e.length<1)throw new Error("too few inputs")},vf=(e,t)=>{let r=[],n=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(a=>r.push(Number(a))),n=r.length),we({numOutputs:n,axis:t.axis,splitSizes:r})},wf=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${ce("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,$f=e=>{let t=e.length,r=[];for(let n=0;n<t;++n){let a=e[n].setByIndices("indices","input[global_idx]");t===1?r.push(a):n===0?r.push(`if (output_number == ${n}u) { ${a} }`):n===t-1?r.push(`else { ${a} }`):r.push(`else if (output_number == ${n}) { ${a} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${r.join(`
`)}
      }`},_f=(e,t)=>{let r=e[0].dims,n=V.size(r),a=e[0].dataType,u=V.normalizeAxis(t.axis,r.length),o=new Array(t.numOutputs),d=W("input",a,r),p=new Array(t.numOutputs),m=[],l=[],y=0,b=[{type:"uint32",data:n}];for(let $=0;$<t.numOutputs;$++){y+=t.splitSizes[$],p[$]=y;let x=r.slice();x[t.axis]=t.splitSizes[$],l.push(x),o[$]=te(`output${$}`,a,x),m.push({dims:l[$],dataType:e[0].dataType})}b.push({type:"uint32",data:p}),b.push(...K(r)),l.forEach($=>b.push(...K($)));let v=$=>`
  ${$.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",p.length).declareVariables(d,...o)}
  ${wf(p.length)}
  ${$f(o)}

  ${$.mainStart()}
    ${$.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${d.offsetToIndices("global_idx")};
    var index = ${d.indicesGet("indices",u)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${ce("uniforms.size_in_split_axis","output_number - 1u",p.length)};
      ${d.indicesSet("indices",u,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:v,getRunData:()=>({outputs:m,dispatchGroup:{x:Math.ceil(n/64)},programUniforms:b})}},ql=(e,t)=>{bf(e.inputs);let r=e.inputs.length===1?t:vf(e.inputs,t);e.compute(_f(e.inputs,r),{inputs:[0]})},Kl=e=>{let t=e.axis,r=e.splitSizes,n=e.numOutputs<0?r.length:e.numOutputs;if(n!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return we({axis:t,numOutputs:n,splitSizes:r})}});var Zl,Sf,xf,Cf,Ql,Xl=ee(()=>{"use strict";Ue();Ie();xe();Zl=e=>Array.from(e.getBigInt64Array(),Number),Sf=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Zl(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},xf=(e,t)=>{let r=[];for(let n=0;n<e.length;++n)r.push(e[n]*t[n]);return r},Cf=e=>{let t=e[0].dims,r=Zl(e[1]),n=xf(t,r),a=V.size(n),u=e[0].dataType,o=W("input",u,t.length),d=te("output",u,n.length),p=m=>`
      const inputShape = ${o.indices(...t)};
      ${m.registerUniform("output_size","u32").declareVariables(o,d)}
      ${m.mainStart()}
      ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${d.offsetToIndices("global_idx")};
      var input_indices: ${o.type.indices};
      for (var i = 0; i < ${t.length}; i++) {
        let input_dim_i = ${o.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${d.indicesGet("output_indices","i")}  % input_dim_i;

        ${o.indicesSet("input_indices","i","input_dim_value")}
      }
      ${d.setByOffset("global_idx",o.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:[{type:"uint32",data:a},...K(e[0].dims),...K(n)]}),getShaderSource:p}},Ql=e=>{Sf(e.inputs),e.compute(Cf(e.inputs),{inputs:[0]})}});var If,Af,Jl,ed=ee(()=>{"use strict";Ue();Ie();xe();If=(e,t,r,n,a)=>{let u=te("output_data",a,r.length,4),o=W("a_data",t[1].dataType,t[1].dims.length,4),d=W("b_data",t[2].dataType,t[2].dims.length,4),p=W("c_data",t[0].dataType,t[0].dims.length,4),m,l=(y,b,v)=>`select(${b}, ${y}, ${v})`;if(!n)m=u.setByOffset("global_idx",l(o.getByOffset("global_idx"),d.getByOffset("global_idx"),p.getByOffset("global_idx")));else{let y=(b,v,$="")=>{let x=`a_data[index_a${v}][component_a${v}]`,O=`b_data[index_b${v}][component_b${v}]`,I=`bool(c_data[index_c${v}] & ${4278190080>>>(3-v)*8}u)`;return`
            let output_indices${v} = ${u.offsetToIndices(`global_idx * 4u + ${v}u`)};
            let offset_a${v} = ${o.broadcastedIndicesToOffset(`output_indices${v}`,u)};
            let offset_b${v} = ${d.broadcastedIndicesToOffset(`output_indices${v}`,u)};
            let offset_c${v} = ${p.broadcastedIndicesToOffset(`output_indices${v}`,u)};
            let index_a${v} = offset_a${v} / 4u;
            let index_b${v} = offset_b${v} / 4u;
            let index_c${v} = offset_c${v} / 4u;
            let component_a${v} = offset_a${v} % 4u;
            let component_b${v} = offset_b${v} % 4u;
            ${b}[${v}] = ${$}(${l(x,O,I)});
          `};a===9?m=`
            var data = vec4<u32>(0);
            ${y("data",0,"u32")}
            ${y("data",1,"u32")}
            ${y("data",2,"u32")}
            ${y("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:m=`
            ${y("output_data[global_idx]",0)}
            ${y("output_data[global_idx]",1)}
            ${y("output_data[global_idx]",2)}
            ${y("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(p,o,d,u)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${m}
      }`},Af=e=>{let t=e[1].dims,r=e[2].dims,n=e[0].dims,a=e[1].dataType,u=!(V.areEqual(t,r)&&V.areEqual(r,n)),o=t,d=V.size(t);if(u){let m=Tt.calcShape(Tt.calcShape(t,r,!1),n,!1);if(!m)throw new Error("Can't perform where op on the given tensors");o=m,d=V.size(o)}let p=Math.ceil(d/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:m=>If(m,e,o,u,a),getRunData:()=>({outputs:[{dims:o,dataType:a}],dispatchGroup:{x:Math.ceil(d/64/4)},programUniforms:[{type:"uint32",data:p},...K(n),...K(t),...K(r),...K(o)]})}},Jl=e=>{e.compute(Af(e.inputs))}});var td,rd=ee(()=>{"use strict";xs();Qi();As();Es();du();$u();xu();ra();Uu();Vu();ju();Yu();Xu();tl();il();ol();ul();ia();pl();ml();kl();Rl();Kn();Ml();Wl();Ll();jl();Yl();Xl();_r();Xi();ed();td=new Map([["Abs",[Os]],["Acos",[ks]],["Acosh",[Ps]],["Add",[cu]],["ArgMax",[Ss,Zi]],["ArgMin",[_s,Zi]],["Asin",[Rs]],["Asinh",[Bs]],["Atan",[Ds]],["Atanh",[zs]],["Attention",[Cs]],["AveragePool",[_l,$l]],["BatchNormalization",[Is]],["BiasAdd",[Ts]],["BiasSplitGelu",[lu]],["Cast",[Us,Ms]],["Ceil",[Ns]],["Clip",[Ws]],["Concat",[_u,Su]],["Conv",[oa,aa]],["ConvTranspose",[Mu,zu]],["Cos",[Vs]],["Cosh",[Hs]],["CumSum",[Wu,Nu]],["Div",[pu]],["Einsum",[Gu,Fu]],["Elu",[Ls,Qn]],["Equal",[fu]],["Erf",[Gs]],["Exp",[Fs]],["Expand",[Ku]],["Floor",[js]],["FusedConv",[oa,aa]],["Gather",[Qu,Zu]],["GatherElements",[el,Ju]],["Gelu",[qs]],["Gemm",[nl,rl]],["GlobalAveragePool",[Cl,xl]],["GlobalMaxPool",[Ol,El]],["Greater",[yu]],["GreaterOrEqual",[vu]],["HardSigmoid",[tu,eu]],["InstanceNormalization",[al]],["LayerNormalization",[sl]],["LeakyRelu",[Ks,Qn]],["Less",[bu]],["LessOrEqual",[wu]],["Log",[uu]],["MatMul",[Eu]],["MaxPool",[Al,Tl]],["Mul",[mu]],["MultiHeadAttention",[cl,dl]],["Neg",[Zs]],["Not",[Ys]],["Pad",[fl]],["Pow",[hu]],["Range",[Pl]],["Reciprocal",[Qs]],["ReduceMin",[gs]],["ReduceMean",[cs]],["ReduceMax",[hs]],["ReduceSum",[bs]],["ReduceProd",[ys]],["ReduceL1",[ps]],["ReduceL2",[fs]],["ReduceLogSum",[ws]],["ReduceLogSumExp",[ms]],["ReduceSumSquare",[vs]],["Relu",[Xs]],["Resize",[Dl,zl]],["Sigmoid",[Js]],["Sin",[ru]],["Sinh",[nu]],["Slice",[Vl,Hl]],["SkipLayerNormalization",[Ul]],["Split",[ql,Kl]],["Sqrt",[iu]],["Softmax",[Gl,Fl]],["Sub",[gu]],["Tan",[au]],["Tanh",[ou]],["ThresholdedRelu",[su,Qn]],["Tile",[Ql]],["Transpose",[Xo,Jo]],["Where",[Jl]]])});var si,nd=ee(()=>{"use strict";vt();qt();xe();si=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,n,a,u){ct(t.programInfo.name);let o=this.backend.device,d=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2),d.setPipeline(t.computePipeline);let p=[];for(let l of r)p.push({binding:p.length,resource:{buffer:l.buffer}});for(let l of n)p.push({binding:p.length,resource:{buffer:l.buffer}});u&&p.push({binding:p.length,resource:u});let m=o.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:p,label:t.programInfo.name});d.setBindGroup(0,m),d.dispatchWorkgroups(...a),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),pt(t.programInfo.name)}dispose(){}build(t,r){ct(t.name);let n=this.backend.device,a=[];n.features.has("shader-f16")&&a.push("enable f16;");let u=Zo(r),o=t.getShaderSource(u),d=`${a.join(`
`)}
${u.additionalImplementations}
${o}`,p=n.createShaderModule({code:d,label:t.name});ze("verbose",()=>`[WebGPU] ${t.name} shader code: ${d}`);let m=n.createComputePipeline({compute:{module:p,entryPoint:"main"},layout:"auto",label:t.name});return pt(t.name),{programInfo:t,computePipeline:m}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,n=typeof t=="number"?1:t.y||1,a=typeof t=="number"?1:t.z||1,u=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=u&&n<=u&&a<=u)return[r,n,a];let o=r*n*a,d=Math.ceil(Math.sqrt(o));if(d>u){if(d=Math.ceil(Math.cbrt(o)),d>u)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[d,d,d]}else return[d,d,1]}}});var Tf,Ef,ui,id=ee(()=>{"use strict";vt();Ue();qt();Fo();Yo();rd();nd();Tf=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let n=0;n<e.length;++n){let a=e[n].dataType;switch(t[n]){case"none":{r.push("");break}case"type":{r.push(`${a}`);break}case"rank":{let u=e[n].dims.length;r.push(`${a};${u}`);break}case"dims":{let u=e[n].dims.join(",");r.push(`${a};${u}`);break}default:throw new Error(`unsupported input dependency: ${t[n]}`)}}return r.join("|")},Ef=(e,t,r)=>{let n=e.name;return e.shaderCache?.hint&&(n+="["+e.shaderCache.hint+"]"),n+=":"+r+`:${Tf(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,n},ui=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.maxDispatchNumber=16;this.pendingDispatchNumber=0;this.pendingKernels=[];this.pendingQueries=new Map;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,r){this.env=t;let n=[],a={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:n};r.features.has("chromium-experimental-timestamp-query-inside-passes")?n.push("chromium-experimental-timestamp-query-inside-passes"):r.features.has("timestamp-query")&&n.push("timestamp-query"),r.features.has("shader-f16")&&n.push("shader-f16"),this.device=await r.requestDevice(a),this.gpuDataManager=Ko(this),this.programManager=new si(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Lo(t.logLevel,!!t.debug),this.device.onuncapturederror=u=>{u.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${u.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.queryType==="at-passes"&&(t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;ct(),this.endComputePass();let t;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),t=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(t,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,t,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&t.mapAsync(GPUMapMode.READ).then(()=>{let r=new BigUint64Array(t.getMappedRange()),n=this.pendingQueries.get(t);for(let a=0;a<r.length/2;a++){let u=n[a],o=u.kernelId,d=this.kernels.get(o),p=d.kernelType,m=d.kernelName,l=u.programName,y=u.inputTensorViews,b=u.outputTensorViews,v=r[a*2],$=r[a*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=v);let x=Number(v-this.queryTimeBase),O=Number($-this.queryTimeBase);if(!Number.isSafeInteger(x)||!Number.isSafeInteger(O))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:y.map(I=>({dims:I.dims,dataType:ft(I.dataType)})),outputsMetadata:b.map(I=>({dims:I.dims,dataType:ft(I.dataType)})),kernelId:o,kernelType:p,kernelName:m,programName:l,startTime:x,endTime:O});else{let I="";y.forEach((T,E)=>{I+=`input[${E}]: [${T.dims}] | ${ft(T.dataType)}, `});let S="";b.forEach((T,E)=>{S+=`output[${E}]: [${T.dims}] | ${ft(T.dataType)}, `}),console.log(`[profiling] kernel "${o}|${p}|${m}|${l}" ${I}${S}execution time: ${O-x} ns`)}qr("GPU",`${l}::${v}::${$}`)}t.unmap(),this.pendingQueries.delete(t)}),pt()}run(t,r,n,a,u){ct(t.name);let o=[];for(let S=0;S<r.length;++S){let T=this.gpuDataManager.get(r[S].data);if(!T)throw new Error(`no GPU data for input: ${r[S].data}`);o[S]=T}let{outputs:d,dispatchGroup:p,programUniforms:m}=t.getRunData(r),l=n.length===0?d.map((S,T)=>T):n;if(l.length!==d.length)throw new Error(`Output size ${l.length} must be equal to ${d.length}.`);let y=[],b=[];for(let S=0;S<d.length;++S){if(!Number.isInteger(l[S])||l[S]<-3||l[S]>=d.length)throw new Error(`Invalid output index: ${l[S]}`);if(l[S]===-3)continue;let T=l[S]===-1,E=l[S]===-2,M=T||E?u(d[S].dataType,d[S].dims):a(l[S],d[S].dataType,d[S].dims),B=this.gpuDataManager.get(M.data);if(!B)throw new Error(`no GPU data for output: ${M.data}`);if(T&&this.temporaryData.push(B),E){let N=this.kernelPersistentData.get(this.currentKernelId);N||(N=[],this.kernelPersistentData.set(this.currentKernelId,N)),N.push(B)}y.push(M),b.push(B)}let v;if(m){let S=0,T=[];m.forEach(N=>{let H=typeof N.data=="number"?[N.data]:N.data;if(H.length===0)return;let X=H.length<=2?H.length*4:16;S=Math.ceil(S/X)*X,T.push(S),S+=H.length>4?Math.ceil(H.length/4)*16:H.length*4});let E=16;S=Math.ceil(S/E)*E;let M=new ArrayBuffer(S);m.forEach((N,H)=>{let X=T[H],D=typeof N.data=="number"?[N.data]:N.data;N.type==="int32"?new Int32Array(M,X,D.length).set(D):N.type==="uint32"?new Uint32Array(M,X,D.length).set(D):new Float32Array(M,X,D.length).set(D)});let B=this.gpuDataManager.create(S,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(B.buffer,0,M,0,S),this.gpuDataManager.release(B.id),v={offset:0,size:S,buffer:B.buffer}}let $=this.programManager.normalizeDispatchGroupSize(p),x=$[1]===1&&$[2]===1,O=Ef(t,r,x),I=this.programManager.getArtifact(O);if(I||(I=this.programManager.build(t,$),this.programManager.setArtifact(O,I),ze("info",()=>`[artifact] key: ${O}, programName: ${t.name}`)),ze("info",()=>`[ProgramManager] run "${t.name}" (key=${O}) with ${$[0]}x${$[1]}x${$[2]}`),this.queryType!=="none"){let S={kernelId:this.currentKernelId,programName:I.programInfo.name,inputTensorViews:r,outputTensorViews:y};this.pendingKernels.push(S)}return this.programManager.run(I,o,b,$,v),pt(t.name),y}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,n,a){let u=td.get(t);if(!u)throw new Error(`kernel not implemented: ${t}`);let o={kernelType:t,kernelName:a,kernelEntry:u[0],attributes:[u[1],n]};this.kernels.set(r,o)}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let n of r)this.gpuDataManager.release(n.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,n){let a=this.kernels.get(t);if(!a)throw new Error(`kernel not created: ${t}`);let u=a.kernelType,o=a.kernelName,d=a.kernelEntry,p=a.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${u}] ${o}" is not allowed to be called recursively`);this.currentKernelId=t,p[0]&&(p[1]=p[0](p[1]),p[0]=void 0),ze("info",()=>`[WebGPU] Start to run kernel "[${u}] ${o}"...`);let m=this.env.debug;this.temporaryData=[];try{return m&&this.device.pushErrorScope("validation"),d(r,p[1]),0}catch(l){return n.push(Promise.resolve(`[WebGPU] Kernel "[${u}] ${o}" failed. ${l}`)),1}finally{m&&n.push(this.device.popErrorScope().then(l=>l?`GPU validation error for kernel "[${u}] ${o}": ${l.message}`:null));for(let l of this.temporaryData)this.gpuDataManager.release(l.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,n,a){let u=this.sessionExternalDataMapping.get(t);u||(u=new Map,this.sessionExternalDataMapping.set(t,u));let o=u.get(r),d=this.gpuDataManager.registerExternalBuffer(n,a,o?.[1]);return u.set(r,[d,n]),d}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(n=>this.gpuDataManager.unregisterExternalBuffer(n[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,n){return async()=>{let a=await Li(this,t,r);return Go(a.buffer,n)}}writeTimestamp(t){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,t)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||this.env.wasm.trace)&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}onRunStart(){this.setQueryType()}}});var ad={};ir(ad,{init:()=>Of});var tn,pa,Of,od=ee(()=>{"use strict";Ue();id();qt();Ie();tn=class e{constructor(t,r,n,a){this.module=t;this.dataType=r;this.data=n;this.dims=a}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=V.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=V.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=V.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(V.size(t)!==V.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},pa=class{constructor(t,r,n){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let a=t.HEAPU32,u=n>>>2;this.opKernelContext=a[u++];let o=a[u++];this.outputCount=a[u++],this.customDataOffset=a[u++],this.customDataSize=a[u++];let d=[];for(let p=0;p<o;p++){let m=a[u++],l=a[u++],y=a[u++],b=[];for(let v=0;v<y;v++)b.push(a[u++]);d.push(new tn(t,m,l,b))}this.inputs=d}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let n=r?.inputs?.map(d=>typeof d=="number"?this.inputs[d]:d)??this.inputs,a=r?.outputs??[],u=(d,p,m)=>new tn(this.module,p,this.output(d,m),m),o=(d,p)=>{let m=Yr(d);if(!m)throw new Error(`Unsupported data type: ${d}`);let l=m*V.size(p);return new tn(this.module,d,this.backend.gpuDataManager.create(l).id,p)};return this.backend.run(t,n,a,u,o)}output(t,r){let n=this.module.stackSave();try{let a=this.module.stackAlloc((1+r.length)*4),u=a>>2;this.module.HEAPU32[u++]=r.length;for(let o=0;o<r.length;o++)this.module.HEAPU32[u++]=r[o];return this.module._JsepOutput(this.opKernelContext,t,a)}catch(a){throw new Error(`Failed to generate kernel's output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${a}`)}finally{this.module.stackRestore(n)}}},Of=async(e,t,r)=>{let n=e.jsepInit;if(!n)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");let a=new ui;await a.initialize(t,r),n(a,u=>a.alloc(u),u=>a.free(u),(u,o,d,p=!1)=>{if(p)ze("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${u}, dst=${o}, size=${d}`),a.memcpy(u,o);else{ze("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${u}, gpuDataId=${o}, size=${d}`);let m=e.HEAPU8.subarray(u>>>0,(u>>>0)+d);a.upload(o,m)}},async(u,o,d)=>{ze("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${u}, dataOffset=${o}, size=${d}`),await a.download(u,()=>e.HEAPU8.subarray(o>>>0,(o>>>0)+d))},(u,o,d)=>a.createKernel(u,o,d,e.UTF8ToString(e._JsepGetNodeName(o))),u=>a.releaseKernel(u),(u,o,d,p)=>{ze("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${d}, kernel=${u}, contextDataOffset=${o}`);let m=new pa(e,a,o);return a.computeKernel(u,m,p)})}});var kf,ud,ld,rn,Pf,fa,dd,cd,sd,pd,fd,md,hd=ee(()=>{"use strict";Uo();No();Ue();wr();Wn();Vi();kf=(e,t)=>{We()._OrtInit(e,t)!==0&&Be("Can't initialize onnxruntime.")},ud=async e=>{kf(e.wasm.numThreads,Zr(e.logLevel))},ld=async(e,t)=>{if(t==="webgpu"||t==="webnn"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.');if(!e.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");let n=(od(),Ft(ad)).init;await n(We(),e,r)}},rn=new Map,Pf=e=>{let t=We(),r=t.stackSave();try{let n=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,n,n+4)!==0&&Be("Can't get session input/output count."),[t.HEAP32[n/4],t.HEAP32[n/4+1]]}finally{t.stackRestore(r)}},fa=e=>{let t=We(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},dd=async(e,t)=>{let r,n,a=We();Array.isArray(e)?[r,n]=e:e.buffer===a.HEAPU8.buffer?[r,n]=[e.byteOffset,e.byteLength]:[r,n]=fa(e);let u=0,o=0,d=0,p=[],m=[],l=[];try{if([o,p]=Wo(t),t?.externalData&&a.mountExternalData){let I=[];for(let S of t.externalData){let T=typeof S=="string"?S:S.path;I.push(Qr(typeof S=="string"?S:S.data).then(E=>{a.mountExternalData(T,E)}))}await Promise.all(I)}u=await a._OrtCreateSession(r,n,o),u===0&&Be("Can't create a session.");let[y,b]=Pf(u),v=[],$=[],x=[];for(let I=0;I<y;I++){let S=a._OrtGetInputName(u,I);S===0&&Be("Can't get an input name."),m.push(S),v.push(a.UTF8ToString(S))}for(let I=0;I<b;I++){let S=a._OrtGetOutputName(u,I);S===0&&Be("Can't get an output name."),l.push(S);let T=a.UTF8ToString(S);$.push(T);{let E=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[T]??"cpu";if(E!=="cpu"&&E!=="cpu-pinned"&&E!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${E}.`);x.push(E)}}let O=null;return x.some(I=>I==="gpu-buffer")&&(d=a._OrtCreateBinding(u),d===0&&Be("Can't create IO binding."),O={handle:d,outputPreferredLocations:x,outputPreferredLocationsEncoded:x.map(I=>Ni(I))}),rn.set(u,[u,m,l,O]),[u,v,$]}catch(y){throw m.forEach(b=>a._OrtFree(b)),l.forEach(b=>a._OrtFree(b)),d!==0&&a._OrtReleaseBinding(d),u!==0&&a._OrtReleaseSession(u),y}finally{a._free(r),o!==0&&a._OrtReleaseSessionOptions(o),p.forEach(y=>a._free(y)),a.unmountExternalData?.()}},cd=e=>{let t=We(),r=rn.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[n,a,u,o]=r;o&&t._OrtReleaseBinding(o.handle),t.jsepUnregisterBuffers?.(e),a.forEach(d=>t._OrtFree(d)),u.forEach(d=>t._OrtFree(d)),t._OrtReleaseSession(n),rn.delete(e)},sd=(e,t,r,n,a)=>{if(!e){t.push(0);return}let u=We(),o=e[0],d=e[1],p=e[3],m,l;if(o==="string"&&p==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(p==="gpu-buffer"){let v=e[2].gpuBuffer,$=Yr(Wi(o));l=d.reduce((x,O)=>x*O,1)*$,m=u.jsepRegisterBuffer(n,a,v,l)}else{let v=e[2];if(Array.isArray(v)){l=4*v.length,m=u._malloc(l),r.push(m);let $=m/4;for(let x=0;x<v.length;x++){if(typeof v[x]!="string")throw new TypeError(`tensor data at index ${x} is not a string`);u.HEAPU32[$++]=Ne(v[x],r)}}else l=v.byteLength,m=u._malloc(l),r.push(m),u.HEAPU8.set(new Uint8Array(v.buffer,v.byteOffset,l),m)}let y=u.stackSave(),b=u.stackAlloc(4*d.length);try{let v=b/4;d.forEach(x=>u.HEAP32[v++]=x);let $=u._OrtCreateTensor(Wi(o),m,l,b,d.length,Ni(p));$===0&&Be(`Can't create tensor for input/output. session=${n}, index=${a}.`),t.push($)}finally{u.stackRestore(y)}},pd=async(e,t,r,n,a,u)=>{let o=We(),d=rn.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);let[p,m,l,y]=d,b=t.length,v=n.length,$=0,x=[],O=[],I=[],S=[],T=o.stackSave(),E=o.stackAlloc(b*4),M=o.stackAlloc(b*4),B=o.stackAlloc(v*4),N=o.stackAlloc(v*4);try{[$,x]=Mo(u);for(let re=0;re<b;re++)sd(r[re],O,S,e,t[re]);for(let re=0;re<v;re++)sd(a[re],I,S,e,b+n[re]);let H=E/4,X=M/4,D=B/4,j=N/4;for(let re=0;re<b;re++)o.HEAPU32[H++]=O[re],o.HEAPU32[X++]=m[t[re]];for(let re=0;re<v;re++)o.HEAPU32[D++]=I[re],o.HEAPU32[j++]=l[n[re]];if(y){let{handle:re,outputPreferredLocations:$e,outputPreferredLocationsEncoded:Ge}=y;if(m.length!==b)throw new Error(`input count from feeds (${b}) is expected to be always equal to model's input count (${m.length}).`);for(let ge=0;ge<b;ge++){let Ee=t[ge];await o._OrtBindInput(re,m[Ee],O[ge])!==0&&Be(`Can't bind input[${ge}] for session=${e}.`)}for(let ge=0;ge<v;ge++){let Ee=n[ge];a[ge]?.[3]?o._OrtBindOutput(re,l[Ee],I[ge],0)!==0&&Be(`Can't bind pre-allocated output[${ge}] for session=${e}.`):o._OrtBindOutput(re,l[Ee],0,Ge[Ee])!==0&&Be(`Can't bind output[${ge}] to ${$e[ge]} for session=${e}.`)}}o.jsepOnRunStart?.();let se;y?se=await o._OrtRunWithBinding(p,y.handle,v,B,$):se=await o._OrtRun(p,M,E,b,N,v,B,$),se!==0&&Be("failed to call OrtRun().");let be=[];for(let re=0;re<v;re++){let $e=o.HEAPU32[B/4+re];if($e===I[re]){be.push(a[re]);continue}let Ge=o.stackSave(),ge=o.stackAlloc(4*4),Ee=!1,pe,ve=0;try{o._OrtGetTensorData($e,ge,ge+4,ge+8,ge+12)!==0&&Be(`Can't access output tensor data on index ${re}.`);let Me=ge/4,Ye=o.HEAPU32[Me++];ve=o.HEAPU32[Me++];let F=o.HEAPU32[Me++],ie=o.HEAPU32[Me++],he=[];for(let Re=0;Re<ie;Re++)he.push(o.HEAPU32[F/4+Re]);o._OrtFree(F);let et=he.reduce((Re,Fe)=>Re*Fe,1);pe=ft(Ye);let st=y?.outputPreferredLocations[n[re]];if(pe==="string"){if(st==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let Re=[],Fe=ve/4;for(let Dt=0;Dt<et;Dt++){let zt=o.HEAPU32[Fe++],Yt=Dt===et-1?void 0:o.HEAPU32[Fe]-zt;Re.push(o.UTF8ToString(zt,Yt))}be.push([pe,he,Re,"cpu"])}else if(st==="gpu-buffer"&&et>0){let Re=o.jsepGetBuffer(ve),Fe=Yr(Ye);if(Fe===void 0||!Vn(pe))throw new Error(`Unsupported data type: ${pe}`);Ee=!0,be.push([pe,he,{gpuBuffer:Re,download:o.jsepCreateDownloader(Re,et*Fe,pe),dispose:()=>{o._OrtReleaseTensor($e)}},"gpu-buffer"])}else{let Re=Nn(pe),Fe=new Re(et);new Uint8Array(Fe.buffer,Fe.byteOffset,Fe.byteLength).set(o.HEAPU8.subarray(ve,ve+Fe.byteLength)),be.push([pe,he,Fe,"cpu"])}}finally{o.stackRestore(Ge),pe==="string"&&ve&&o._free(ve),Ee||o._OrtReleaseTensor($e)}}return y&&o._OrtClearBoundOutputs(y.handle),be}finally{o.stackRestore(T),O.forEach(H=>o._OrtReleaseTensor(H)),I.forEach(H=>o._OrtReleaseTensor(H)),S.forEach(H=>o._free(H)),$!==0&&o._OrtReleaseRunOptions($),x.forEach(H=>o._free(H))}},fd=e=>{let t=We(),r=rn.get(e);if(!r)throw new Error("invalid session id");let n=r[0],a=t._OrtEndProfiling(n);a===0&&Be("Can't get an profile file name."),t._OrtFree(a)},md=e=>{let t=[];for(let r of e){let n=r[2];!Array.isArray(n)&&"buffer"in n&&t.push(n.buffer)}return t}});var gd=vr((fw,Bf)=>{Bf.exports='/*!\n * ONNX Runtime Web v1.18.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";(()=>{var to=Object.defineProperty;var Rl=Object.getOwnPropertyDescriptor;var Bl=Object.getOwnPropertyNames;var Dl=Object.prototype.hasOwnProperty;var te=(e,t)=>()=>(e&&(t=e(e=0)),t);var Dr=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),gn=(e,t)=>{for(var r in t)to(e,r,{get:t[r],enumerable:!0})},Ml=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of Bl(t))!Dl.call(e,i)&&i!==r&&to(e,i,{get:()=>t[i],enumerable:!(o=Rl(t,i))||o.enumerable});return e};var lr=e=>Ml(to({},"__esModule",{value:!0}),e);var ro={};gn(ro,{createReadStream:()=>bi,readFile:()=>zl,readFileSync:()=>Ul});var zl,Ul,bi,no=te(()=>{zl=void 0,Ul=void 0,bi=void 0});var oo={};gn(oo,{join:()=>Vl});var Vl,io=te(()=>{Vl=void 0});var $i=Dr((vi,ao)=>{"use strict";var wi=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){var r=t,o,i;r.ready=new Promise((s,p)=>{o=s,i=p}),r.mountExternalData=(s,p)=>{(r.gb||(r.gb=new Map)).set(s,p)},r.unmountExternalData=()=>{delete r.gb},r.jsepInit=(s,p,h,$,I,M,G,Q)=>{r.Fb=s,r.vb=p,r.xb=h,r.ob=$,r.wb=I,r.Sa=M,r.yb=G,r.zb=Q,p=(Y,q,ie)=>(...fe)=>{let _e=Qe,k=q?.();fe=Y(...fe);let ue=q?.();return k!==ue&&(Y=ue,ie(k),q=ie=null),Qe!=_e?Xr():fe},h=Y=>async(...q)=>{try{if(r.fb)throw Error("Session already started");let ie=r.fb={Ab:q[0],errors:[]},fe=await Y(...q);if(r.fb!==ie)throw Error("Session mismatch");s.flush();let _e=ie.errors;if(0<_e.length){let k=await Promise.all(_e);if(k=k.filter(ue=>ue),0<k.length)throw Error(k.join(`\n`))}return fe}finally{r.fb=null}},r._OrtCreateSession=p(r._OrtCreateSession,()=>r._OrtCreateSession,Y=>r._OrtCreateSession=Y),r._OrtRun=h(p(r._OrtRun,()=>r._OrtRun,Y=>r._OrtRun=Y)),r._OrtRunWithBinding=h(p(r._OrtRunWithBinding,()=>r._OrtRunWithBinding,Y=>r._OrtRunWithBinding=Y)),r._OrtBindInput=p(r._OrtBindInput,()=>r._OrtBindInput,Y=>r._OrtBindInput=Y),r.jsepRegisterBuffer=(Y,q,ie,fe)=>s.registerBuffer(Y,q,ie,fe),r.jsepUnregisterBuffers=Y=>{s.unregisterBuffers(Y)},r.jsepGetBuffer=Y=>s.getBuffer(Y),r.jsepCreateDownloader=(Y,q,ie)=>s.createDownloader(Y,q,ie),r.jsepOnRunStart=()=>s.onRunStart()};var u=Object.assign({},r),a="./this.program",c=(s,p)=>{throw p},m=typeof window=="object",g=typeof importScripts=="function",d=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",b="",v,S,w;if(d){var C=(no(),lr(ro)),O=(io(),lr(oo));b=g?O.dirname(b)+"/":__dirname+"/",v=(s,p)=>(s=oe(s)?new URL(s):O.normalize(s),C.readFileSync(s,p?void 0:"utf8")),w=s=>(s=v(s,!0),s.buffer||(s=new Uint8Array(s)),s),S=(s,p,h,$=!0)=>{s=oe(s)?new URL(s):O.normalize(s),C.readFile(s,$?void 0:"utf8",(I,M)=>{I?h(I):p($?M.buffer:M)})},!r.thisProgram&&1<process.argv.length&&(a=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),c=(s,p)=>{throw process.exitCode=s,p},r.inspect=()=>"[Emscripten Module object]"}else(m||g)&&(g?b=self.location.href:typeof document<"u"&&document.currentScript&&(b=document.currentScript.src),e&&(b=e),b.indexOf("blob:")!==0?b=b.substr(0,b.replace(/[?#].*/,"").lastIndexOf("/")+1):b="",v=s=>{var p=new XMLHttpRequest;return p.open("GET",s,!1),p.send(null),p.responseText},g&&(w=s=>{var p=new XMLHttpRequest;return p.open("GET",s,!1),p.responseType="arraybuffer",p.send(null),new Uint8Array(p.response)}),S=(s,p,h)=>{var $=new XMLHttpRequest;$.open("GET",s,!0),$.responseType="arraybuffer",$.onload=()=>{$.status==200||$.status==0&&$.response?p($.response):h()},$.onerror=h,$.send(null)});var A=console.log.bind(console),_=console.error.bind(console);Object.assign(r,u),u=null,typeof WebAssembly!="object"&&Ke("no native wasm support detected");var E,T=!1,U,B,W,H,J,D,j,se,be,re,$e;function Ge(){var s=E.buffer;r.HEAP8=B=new Int8Array(s),r.HEAP16=H=new Int16Array(s),r.HEAPU8=W=new Uint8Array(s),r.HEAPU16=J=new Uint16Array(s),r.HEAP32=D=new Int32Array(s),r.HEAPU32=j=new Uint32Array(s),r.HEAPF32=se=new Float32Array(s),r.HEAPF64=$e=new Float64Array(s),r.HEAP64=be=new BigInt64Array(s),r.HEAPU64=re=new BigUint64Array(s)}var ge=[],Te=[],pe=[],we=0,We=null,Me=null;function Ke(s){throw s="Aborted("+s+")",_(s),T=!0,U=1,s=new WebAssembly.RuntimeError(s+". Build with -sASSERTIONS for more info."),i(s),s}var F=s=>s.startsWith("data:application/octet-stream;base64,"),oe=s=>s.startsWith("file://"),he;if(he="ort-wasm-simd.wasm",!F(he)){var Je=he;he=r.locateFile?r.locateFile(Je,b):b+Je}function ot(s){if(w)return w(s);throw"both async and sync fetching of the wasm failed"}function ke(s){if(m||g){if(typeof fetch=="function"&&!oe(s))return fetch(s,{credentials:"same-origin"}).then(p=>{if(!p.ok)throw"failed to load wasm binary file at \'"+s+"\'";return p.arrayBuffer()}).catch(()=>ot(s));if(S)return new Promise((p,h)=>{S(s,$=>p(new Uint8Array($)),h)})}return Promise.resolve().then(()=>ot(s))}function Le(s,p,h){return ke(s).then($=>WebAssembly.instantiate($,p)).then($=>$).then(h,$=>{_(`failed to asynchronously prepare wasm: ${$}`),Ke($)})}function Tt(s,p){var h=he;return typeof WebAssembly.instantiateStreaming!="function"||F(h)||oe(h)||d||typeof fetch!="function"?Le(h,s,p):fetch(h,{credentials:"same-origin"}).then($=>WebAssembly.instantiateStreaming($,s).then(p,function(I){return _(`wasm streaming compile failed: ${I}`),_("falling back to ArrayBuffer instantiation"),Le(h,s,p)}))}var Et={903448:(s,p,h,$)=>{if(typeof r>"u"||!r.gb)return 1;if(s=Fe(s>>>0),s.startsWith("./")&&(s=s.substring(2)),s=r.gb.get(s),!s)return 2;if(p>>>=0,h>>>=0,p+h>s.byteLength)return 3;try{return W.set(s.subarray(p,p+h),$>>>0>>>0),0}catch{return 4}},903949:s=>r.vb(s),903982:s=>r.xb(s),904014:(s,p,h)=>{r.ob(s,p,h,!0)},904053:(s,p,h)=>{r.ob(s,p,h)},904086:s=>{r.Sa("Abs",s,void 0)},904137:s=>{r.Sa("Neg",s,void 0)},904188:s=>{r.Sa("Floor",s,void 0)},904241:s=>{r.Sa("Ceil",s,void 0)},904293:s=>{r.Sa("Reciprocal",s,void 0)},904351:s=>{r.Sa("Sqrt",s,void 0)},904403:s=>{r.Sa("Exp",s,void 0)},904454:s=>{r.Sa("Erf",s,void 0)},904505:s=>{r.Sa("Sigmoid",s,void 0)},904560:(s,p,h)=>{r.Sa("HardSigmoid",s,{alpha:p,beta:h})},904639:s=>{r.Sa("Log",s,void 0)},904690:s=>{r.Sa("Sin",s,void 0)},904741:s=>{r.Sa("Cos",s,void 0)},904792:s=>{r.Sa("Tan",s,void 0)},904843:s=>{r.Sa("Asin",s,void 0)},904895:s=>{r.Sa("Acos",s,void 0)},904947:s=>{r.Sa("Atan",s,void 0)},904999:s=>{r.Sa("Sinh",s,void 0)},905051:s=>{r.Sa("Cosh",s,void 0)},905103:s=>{r.Sa("Asinh",s,void 0)},905156:s=>{r.Sa("Acosh",s,void 0)},905209:s=>{r.Sa("Atanh",s,void 0)},905262:s=>{r.Sa("Tanh",s,void 0)},905314:s=>{r.Sa("Not",s,void 0)},905365:(s,p,h)=>{r.Sa("Clip",s,{min:p,max:h})},905434:s=>{r.Sa("Clip",s,void 0)},905486:(s,p)=>{r.Sa("Elu",s,{alpha:p})},905544:s=>{r.Sa("Relu",s,void 0)},905596:(s,p)=>{r.Sa("LeakyRelu",s,{alpha:p})},905660:(s,p)=>{r.Sa("ThresholdedRelu",s,{alpha:p})},905730:(s,p)=>{r.Sa("Cast",s,{to:p})},905788:s=>{r.Sa("Add",s,void 0)},905839:s=>{r.Sa("Sub",s,void 0)},905890:s=>{r.Sa("Mul",s,void 0)},905941:s=>{r.Sa("Div",s,void 0)},905992:s=>{r.Sa("Pow",s,void 0)},906043:s=>{r.Sa("Equal",s,void 0)},906096:s=>{r.Sa("Greater",s,void 0)},906151:s=>{r.Sa("GreaterOrEqual",s,void 0)},906213:s=>{r.Sa("Less",s,void 0)},906265:s=>{r.Sa("LessOrEqual",s,void 0)},906324:(s,p,h,$,I)=>{r.Sa("ReduceMean",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(D.subarray($>>>0,I>>>0)):[]})},906483:(s,p,h,$,I)=>{r.Sa("ReduceMax",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(D.subarray($>>>0,I>>>0)):[]})},906641:(s,p,h,$,I)=>{r.Sa("ReduceMin",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(D.subarray($>>>0,I>>>0)):[]})},906799:(s,p,h,$,I)=>{r.Sa("ReduceProd",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(D.subarray($>>>0,I>>>0)):[]})},906958:(s,p,h,$,I)=>{r.Sa("ReduceSum",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(D.subarray($>>>0,I>>>0)):[]})},907116:(s,p,h,$,I)=>{r.Sa("ReduceL1",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(D.subarray($>>>0,I>>>0)):[]})},907273:(s,p,h,$,I)=>{r.Sa("ReduceL2",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(D.subarray($>>>0,I>>>0)):[]})},907430:(s,p,h,$,I)=>{r.Sa("ReduceLogSum",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(D.subarray($>>>0,I>>>0)):[]})},907591:(s,p,h,$,I)=>{r.Sa("ReduceSumSquare",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(D.subarray($>>>0,I>>>0)):[]})},907755:(s,p,h,$,I)=>{r.Sa("ReduceLogSumExp",s,{keepDims:!!p,noopWithEmptyAxes:!!h,axes:$?Array.from(D.subarray($>>>0,I>>>0)):[]})},907919:s=>{r.Sa("Where",s,void 0)},907972:(s,p,h)=>{r.Sa("Transpose",s,{perm:p?Array.from(D.subarray(p>>>0,h>>>0)):[]})},908080:(s,p,h,$,I,M,G,Q,Y,q,ie,fe,_e,k,ue)=>{r.Sa("ConvTranspose",s,{format:Y?"NHWC":"NCHW",autoPad:p,dilations:[h],group:$,kernel_shape:[I],pads:[M,G],strides:[Q],wIsConst:()=>!!B[q>>>0],outputPadding:ie?Array.from(D.subarray(ie>>>0,fe>>>0)):[],outputShape:_e?Array.from(D.subarray(_e>>>0,k>>>0)):[],activation:Fe(ue)})},908482:(s,p,h,$,I,M,G,Q,Y,q,ie,fe,_e,k)=>{r.Sa("ConvTranspose",s,{format:Q?"NHWC":"NCHW",autoPad:p,dilations:Array.from(D.subarray(h>>>0,(h>>>0)+2>>>0)),group:$,kernelShape:Array.from(D.subarray(I>>>0,(I>>>0)+2>>>0)),pads:Array.from(D.subarray(M>>>0,(M>>>0)+4>>>0)),strides:Array.from(D.subarray(G>>>0,(G>>>0)+2>>>0)),wIsConst:()=>!!B[Y>>>0],outputPadding:q?Array.from(D.subarray(q>>>0,ie>>>0)):[],outputShape:fe?Array.from(D.subarray(fe>>>0,_e>>>0)):[],activation:Fe(k)})},909047:(s,p,h,$,I,M,G,Q,Y,q,ie,fe,_e,k,ue)=>{r.Sa("ConvTranspose",s,{format:Y?"NHWC":"NCHW",autoPad:p,dilations:[h],group:$,kernel_shape:[I],pads:[M,G],strides:[Q],wIsConst:()=>!!B[q>>>0],outputPadding:ie?Array.from(D.subarray(ie>>>0,fe>>>0)):[],outputShape:_e?Array.from(D.subarray(_e>>>0,k>>>0)):[],activation:Fe(ue)})},909449:(s,p,h,$,I,M,G,Q,Y,q,ie,fe,_e,k)=>{r.Sa("ConvTranspose",s,{format:Q?"NHWC":"NCHW",autoPad:p,dilations:Array.from(D.subarray(h>>>0,(h>>>0)+2>>>0)),group:$,kernelShape:Array.from(D.subarray(I>>>0,(I>>>0)+2>>>0)),pads:Array.from(D.subarray(M>>>0,(M>>>0)+4>>>0)),strides:Array.from(D.subarray(G>>>0,(G>>>0)+2>>>0)),wIsConst:()=>!!B[Y>>>0],outputPadding:q?Array.from(D.subarray(q>>>0,ie>>>0)):[],outputShape:fe?Array.from(D.subarray(fe>>>0,_e>>>0)):[],activation:Fe(k)})},910014:(s,p)=>{r.Sa("GlobalAveragePool",s,{format:p?"NHWC":"NCHW"})},910105:(s,p,h,$,I,M,G,Q,Y,q,ie,fe,_e,k,ue,Ie)=>{r.Sa("AveragePool",s,{format:Ie?"NHWC":"NCHW",auto_pad:p,ceil_mode:h,count_include_pad:$,storage_order:I,dilations:[M,G],kernel_shape:[Q,Y],pads:[q,ie,fe,_e],strides:[k,ue]})},910389:(s,p)=>{r.Sa("GlobalAveragePool",s,{format:p?"NHWC":"NCHW"})},910480:(s,p,h,$,I,M,G,Q,Y,q,ie,fe,_e,k,ue,Ie)=>{r.Sa("AveragePool",s,{format:Ie?"NHWC":"NCHW",auto_pad:p,ceil_mode:h,count_include_pad:$,storage_order:I,dilations:[M,G],kernel_shape:[Q,Y],pads:[q,ie,fe,_e],strides:[k,ue]})},910764:(s,p)=>{r.Sa("GlobalMaxPool",s,{format:p?"NHWC":"NCHW"})},910851:(s,p,h,$,I,M,G,Q,Y,q,ie,fe,_e,k,ue,Ie)=>{r.Sa("MaxPool",s,{format:Ie?"NHWC":"NCHW",auto_pad:p,ceil_mode:h,count_include_pad:$,storage_order:I,dilations:[M,G],kernel_shape:[Q,Y],pads:[q,ie,fe,_e],strides:[k,ue]})},911131:(s,p)=>{r.Sa("GlobalMaxPool",s,{format:p?"NHWC":"NCHW"})},911218:(s,p,h,$,I,M,G,Q,Y,q,ie,fe,_e,k,ue,Ie)=>{r.Sa("MaxPool",s,{format:Ie?"NHWC":"NCHW",auto_pad:p,ceil_mode:h,count_include_pad:$,storage_order:I,dilations:[M,G],kernel_shape:[Q,Y],pads:[q,ie,fe,_e],strides:[k,ue]})},911498:(s,p,h,$,I)=>{r.Sa("Gemm",s,{alpha:p,beta:h,transA:$,transB:I})},911602:s=>{r.Sa("MatMul",s,void 0)},911656:(s,p,h,$)=>{r.Sa("ArgMax",s,{keepDims:!!p,selectLastIndex:!!h,axis:$})},911764:(s,p,h,$)=>{r.Sa("ArgMin",s,{keepDims:!!p,selectLastIndex:!!h,axis:$})},911872:(s,p)=>{r.Sa("Softmax",s,{axis:p})},911935:(s,p)=>{r.Sa("Concat",s,{axis:p})},911995:(s,p,h,$,I)=>{r.Sa("Split",s,{axis:p,numOutputs:h,splitSizes:$?Array.from(D.subarray($>>>0,I>>>0)):[]})},912135:s=>{r.Sa("Expand",s,void 0)},912189:(s,p)=>{r.Sa("Gather",s,{axis:Number(p)})},912260:(s,p)=>{r.Sa("GatherElements",s,{axis:Number(p)})},912339:(s,p,h,$,I,M,G,Q,Y,q,ie)=>{r.Sa("Resize",s,{antialias:p,axes:h?Array.from(D.subarray(h>>>0,$>>>0)):[],coordinateTransformMode:Fe(I),cubicCoeffA:M,excludeOutside:G,extrapolationValue:Q,keepAspectRatioPolicy:Fe(Y),mode:Fe(q),nearestMode:Fe(ie)})},912685:(s,p,h,$,I,M,G)=>{r.Sa("Slice",s,{starts:p?Array.from(D.subarray(p>>>0,h>>>0)):[],ends:$?Array.from(D.subarray($>>>0,I>>>0)):[],axes:M?Array.from(D.subarray(M>>>0,G>>>0)):[]})},912901:s=>{r.Sa("Tile",s,void 0)},912953:(s,p,h)=>{r.Sa("LayerNormalization",s,{axis:Number(p),epsilon:Number(h)})},913060:(s,p,h)=>{r.Sa("InstanceNormalization",s,{epsilon:p,format:h?"NHWC":"NCHW"})},913174:(s,p,h)=>{r.Sa("InstanceNormalization",s,{epsilon:p,format:h?"NHWC":"NCHW"})},913288:s=>{r.Sa("Range",s,void 0)},913341:(s,p)=>{r.Sa("Einsum",s,{equation:Fe(p)})},913422:(s,p,h,$,I)=>{r.Sa("Pad",s,{mode:p,value:h,pads:$?Array.from(D.subarray($>>>0,I>>>0)):[]})},913549:(s,p,h,$,I,M)=>{r.Sa("BatchNormalization",s,{epsilon:p,momentum:h,spatial:!!I,trainingMode:!!$,format:M?"NHWC":"NCHW"})},913718:(s,p,h,$,I,M)=>{r.Sa("BatchNormalization",s,{epsilon:p,momentum:h,spatial:!!I,trainingMode:!!$,format:M?"NHWC":"NCHW"})},913887:(s,p,h)=>{r.Sa("CumSum",s,{exclusive:Number(p),reverse:Number(h)})},913984:(s,p,h,$,I,M,G,Q,Y)=>{r.Sa("Attention",s,{numHeads:p,isUnidirectional:h,maskFilterValue:$,scale:I,doRotary:M,qkvHiddenSizes:G?Array.from(D.subarray(Number(Q)>>>0,Number(Q)+G>>>0)):[],pastPresentShareBuffer:!!Y})},914256:s=>{r.Sa("Gelu",s,void 0)},914308:(s,p,h,$,I,M)=>{r.Sa("MultiHeadAttention",s,{numHeads:p,isUnidirectional:h,maskFilterValue:$,scale:I,doRotary:M})},914467:s=>{r.Sa("BiasAdd",s,void 0)},914522:s=>{r.Sa("BiasSplitGelu",s,void 0)},914583:(s,p)=>{r.Sa("SkipLayerNormalization",s,{epsilon:p})},914664:(s,p,h,$,I,M,G,Q,Y,q,ie,fe,_e)=>{r.Sa("Conv",s,{format:Y?"NHWC":"NCHW",auto_pad:p,dilations:[h],group:$,kernel_shape:[I],pads:M?Array.from(D.subarray(M>>>0,G>>>0)):[],strides:[Q],w_is_const:()=>!!B[q>>>0],activation:Fe(ie),activation_params:fe?Array.from(se.subarray(fe>>>0,_e>>>0)):[]})},915034:(s,p,h,$,I,M,G,Q,Y,q,ie,fe,_e,k,ue,Ie)=>{r.Sa("Conv",s,{format:fe?"NHWC":"NCHW",auto_pad:p,dilations:[h,$],group:I,kernel_shape:[M,G],pads:Q?Array.from(D.subarray(Q>>>0,Y>>>0)):[],strides:[q,ie],w_is_const:()=>!!B[_e>>>0],activation:Fe(k),activation_params:ue?Array.from(se.subarray(ue>>>0,Ie>>>0)):[]})},915425:s=>{r.yb(s)},915459:(s,p)=>r.zb(s,p,r.fb.Ab,r.fb.errors)};function Wt(s){this.name="ExitStatus",this.message=`Program terminated with exit(${s})`,this.status=s}function Bt(s){this.cb=s-24,this.rb=function(p){j[this.cb+4>>>2>>>0]=p},this.qb=function(p){j[this.cb+8>>>2>>>0]=p},this.kb=function(p,h){this.jb(),this.rb(p),this.qb(h)},this.jb=function(){j[this.cb+16>>>2>>>0]=0}}var Qt=0,Nt=0,fr=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,Dt=(s,p,h)=>{p>>>=0;var $=p+h;for(h=p;s[h]&&!(h>=$);)++h;if(16<h-p&&s.buffer&&fr)return fr.decode(s.subarray(p,h));for($="";p<h;){var I=s[p++];if(I&128){var M=s[p++]&63;if((I&224)==192)$+=String.fromCharCode((I&31)<<6|M);else{var G=s[p++]&63;I=(I&240)==224?(I&15)<<12|M<<6|G:(I&7)<<18|M<<12|G<<6|s[p++]&63,65536>I?$+=String.fromCharCode(I):(I-=65536,$+=String.fromCharCode(55296|I>>10,56320|I&1023))}}else $+=String.fromCharCode(I)}return $},Fe=(s,p)=>(s>>>=0)?Dt(W,s,p):"",Ot=s=>{for(var p=0,h=0;h<s.length;++h){var $=s.charCodeAt(h);127>=$?p++:2047>=$?p+=2:55296<=$&&57343>=$?(p+=4,++h):p+=3}return p},wt=(s,p,h,$)=>{if(h>>>=0,!(0<$))return 0;var I=h;$=h+$-1;for(var M=0;M<s.length;++M){var G=s.charCodeAt(M);if(55296<=G&&57343>=G){var Q=s.charCodeAt(++M);G=65536+((G&1023)<<10)|Q&1023}if(127>=G){if(h>=$)break;p[h++>>>0]=G}else{if(2047>=G){if(h+1>=$)break;p[h++>>>0]=192|G>>6}else{if(65535>=G){if(h+2>=$)break;p[h++>>>0]=224|G>>12}else{if(h+3>=$)break;p[h++>>>0]=240|G>>18,p[h++>>>0]=128|G>>12&63}p[h++>>>0]=128|G>>6&63}p[h++>>>0]=128|G&63}}return p[h>>>0]=0,h-I},hr=s=>{if(s===null)return"null";var p=typeof s;return p==="object"||p==="array"||p==="function"?s.toString():""+s},Lr,it=s=>{for(var p="";W[s>>>0];)p+=Lr[W[s++>>>0]];return p},gr={},Ht={},yr={},pt;function Fr(s,p,h={}){var $=p.name;if(!s)throw new pt(`type "${$}" must have a positive integer typeid pointer`);if(Ht.hasOwnProperty(s)){if(h.tb)return;throw new pt(`Cannot register type \'${$}\' twice`)}Ht[s]=p,delete yr[s],gr.hasOwnProperty(s)&&(p=gr[s],delete gr[s],p.forEach(I=>I()))}function Ye(s,p,h={}){if(!("argPackAdvance"in p))throw new TypeError("registerType registeredInstance requires argPackAdvance");Fr(s,p,h)}var br=(s,p,h)=>{switch(p){case 1:return h?$=>B[$>>>0>>>0]:$=>W[$>>>0>>>0];case 2:return h?$=>H[$>>>1>>>0]:$=>J[$>>>1>>>0];case 4:return h?$=>D[$>>>2>>>0]:$=>j[$>>>2>>>0];case 8:return h?$=>be[$>>>3]:$=>re[$>>>3];default:throw new TypeError(`invalid integer width (${p}): ${s}`)}};function wr(){this.$a=[void 0],this.nb=[]}var Pe=new wr;function vr(s){s>>>=0,s>=Pe.cb&&--Pe.get(s).pb===0&&Pe.jb(s)}var Se=s=>{if(!s)throw new pt("Cannot use deleted val. handle = "+s);return Pe.get(s).value},at=s=>{switch(s){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return Pe.kb({pb:1,value:s})}};function er(s){return this.fromWireType(D[s>>>2>>>0])}var $r=(s,p)=>{switch(p){case 4:return function(h){return this.fromWireType(se[h>>>2>>>0])};case 8:return function(h){return this.fromWireType($e[h>>>3>>>0])};default:throw new TypeError(`invalid float width (${p}): ${s}`)}};function Gn(s){return this.fromWireType(j[s>>>2>>>0])}var Sr=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,Ln=(s,p)=>{for(var h=s>>1,$=h+p/2;!(h>=$)&&J[h>>>0];)++h;if(h<<=1,32<h-s&&Sr)return Sr.decode(W.subarray(s>>>0,h>>>0));for(h="",$=0;!($>=p/2);++$){var I=H[s+2*$>>>1>>>0];if(I==0)break;h+=String.fromCharCode(I)}return h},me=(s,p,h)=>{if(h??=2147483647,2>h)return 0;h-=2;var $=p;h=h<2*s.length?h/2:s.length;for(var I=0;I<h;++I)H[p>>>1>>>0]=s.charCodeAt(I),p+=2;return H[p>>>1>>>0]=0,p-$},tr=s=>2*s.length,jr=(s,p)=>{for(var h=0,$="";!(h>=p/4);){var I=D[s+4*h>>>2>>>0];if(I==0)break;++h,65536<=I?(I-=65536,$+=String.fromCharCode(55296|I>>10,56320|I&1023)):$+=String.fromCharCode(I)}return $},Fn=(s,p,h)=>{if(p>>>=0,h??=2147483647,4>h)return 0;var $=p;h=$+h-4;for(var I=0;I<s.length;++I){var M=s.charCodeAt(I);if(55296<=M&&57343>=M){var G=s.charCodeAt(++I);M=65536+((M&1023)<<10)|G&1023}if(D[p>>>2>>>0]=M,p+=4,p+4>h)break}return D[p>>>2>>>0]=0,p-$},qr=s=>{for(var p=0,h=0;h<s.length;++h){var $=s.charCodeAt(h);55296<=$&&57343>=$&&++h,p+=4}return p},_r=(s,p)=>{var h=Ht[s];if(h===void 0)throw s=jt(s),h=it(s),st(s),new pt(p+" has unknown type "+h);return h},xr=(s,p,h)=>{var $=[];return s=s.toWireType($,h),$.length&&(j[p>>>2>>>0]=at($)),s},Gt=s=>{try{s()}catch(p){Ke(p)}};function Kr(){var s=le,p={};for(let[h,$]of Object.entries(s))p[h]=typeof $=="function"?function(){Mt.push(h);try{return $.apply(null,arguments)}finally{T||(Mt.pop(),Qe&&ft===1&&Mt.length===0&&(ft=0,Gt(dn),typeof Fibers<"u"&&Fibers.Hb()))}}:$;return p}var ft=0,Qe=null,Cr=0,Mt=[],Ar={},Ir={},Yr=0,rr=null,Zr=[];function Xr(){return new Promise((s,p)=>{rr={resolve:s,reject:p}})}function Jr(){var s=zt(65548),p=s+12;j[s>>>2>>>0]=p,j[s+4>>>2>>>0]=p+65536,p=Mt[0];var h=Ar[p];return h===void 0&&(h=Yr++,Ar[p]=h,Ir[h]=p),D[s+8>>>2>>>0]=h,s}function Qr(s){if(!T){if(ft===0){var p=!1,h=!1;s(($=0)=>{if(!T&&(Cr=$,p=!0,h)){ft=2,Gt(()=>ht(Qe)),typeof Browser<"u"&&Browser.lb.sb&&Browser.lb.resume(),$=!1;try{var I=(0,le[Ir[D[Qe+8>>>2>>>0]]])()}catch(Q){I=Q,$=!0}var M=!1;if(!Qe){var G=rr;G&&(rr=null,($?G.reject:G.resolve)(I),M=!0)}if($&&!M)throw I}}),h=!0,p||(ft=1,Qe=Jr(),typeof Browser<"u"&&Browser.lb.sb&&Browser.lb.pause(),Gt(()=>qt(Qe)))}else ft===2?(ft=0,Gt(ct),st(Qe),Qe=null,Zr.forEach($=>{if(!T)try{$();try{U=U=$=U,r.onExit?.($),T=!0,c($,new Wt($))}catch(I){I instanceof Wt||I=="unwind"||c(1,I)}}catch(I){I instanceof Wt||I=="unwind"||c(1,I)}})):Ke(`invalid state: ${ft}`);return Cr}}function Tr(s){return Qr(p=>{s().then(p)})}var Lt=[],en={},nr=s=>{var p=en[s];return p===void 0?it(s):p},Er=()=>typeof globalThis=="object"?globalThis:Function("return this")(),dt=s=>{var p=Lt.length;return Lt.push(s),p},Or=(s,p)=>{for(var h=Array(s),$=0;$<s;++$)h[$]=_r(j[p+4*$>>>2>>>0],"parameter "+$);return h},or=(s,p)=>Object.defineProperty(p,"name",{value:s});function jn(s){var p=Function;if(!(p instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof p} which is not a function`);var h=or(p.name||"unknownFunctionName",function(){});return h.prototype=p.prototype,h=new h,s=p.apply(h,s),s instanceof Object?s:h}var et=s=>s%4===0&&(s%100!==0||s%400===0),tn=[0,31,60,91,121,152,182,213,244,274,305,335],mt=[0,31,59,90,120,151,181,212,243,273,304,334],Pr=s=>{var p=Ot(s)+1,h=zt(p);return h&&wt(s,W,h,p),h},ir=[],tt=(s,p)=>{ir.length=0;for(var h;h=W[s++>>>0];){var $=h!=105;$&=h!=112,p+=$&&p%8?4:0,ir.push(h==112?j[p>>>2>>>0]:h==106?be[p>>>3]:h==105?D[p>>>2>>>0]:$e[p>>>3>>>0]),p+=$?8:4}return ir},Ft={},Ze=()=>{if(!rt){var s={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:a||"./this.program"},p;for(p in Ft)Ft[p]===void 0?delete s[p]:s[p]=Ft[p];var h=[];for(p in s)h.push(`${p}=${s[p]}`);rt=h}return rt},rt,rn=[null,[],[]],nn=[31,29,31,30,31,30,31,31,30,31,30,31],on=[31,28,31,30,31,30,31,31,30,31,30,31];function an(s){var p=Array(Ot(s)+1);return wt(s,p,0,p.length),p}function sn(s,p,h,$){function I(k,ue,Ie){for(k=typeof k=="number"?k.toString():k||"";k.length<ue;)k=Ie[0]+k;return k}function M(k,ue){return I(k,ue,"0")}function G(k,ue){function Ie(Rt){return 0>Rt?-1:0<Rt?1:0}var kt;return(kt=Ie(k.getFullYear()-ue.getFullYear()))===0&&(kt=Ie(k.getMonth()-ue.getMonth()))===0&&(kt=Ie(k.getDate()-ue.getDate())),kt}function Q(k){switch(k.getDay()){case 0:return new Date(k.getFullYear()-1,11,29);case 1:return k;case 2:return new Date(k.getFullYear(),0,3);case 3:return new Date(k.getFullYear(),0,2);case 4:return new Date(k.getFullYear(),0,1);case 5:return new Date(k.getFullYear()-1,11,31);case 6:return new Date(k.getFullYear()-1,11,30)}}function Y(k){var ue=k.ab;for(k=new Date(new Date(k.bb+1900,0,1).getTime());0<ue;){var Ie=k.getMonth(),kt=(et(k.getFullYear())?nn:on)[Ie];if(ue>kt-k.getDate())ue-=kt-k.getDate()+1,k.setDate(1),11>Ie?k.setMonth(Ie+1):(k.setMonth(0),k.setFullYear(k.getFullYear()+1));else{k.setDate(k.getDate()+ue);break}}return Ie=new Date(k.getFullYear()+1,0,4),ue=Q(new Date(k.getFullYear(),0,4)),Ie=Q(Ie),0>=G(ue,k)?0>=G(Ie,k)?k.getFullYear()+1:k.getFullYear():k.getFullYear()-1}s>>>=0,p>>>=0,h>>>=0,$>>>=0;var q=j[$+40>>>2>>>0];$={Db:D[$>>>2>>>0],Cb:D[$+4>>>2>>>0],hb:D[$+8>>>2>>>0],mb:D[$+12>>>2>>>0],ib:D[$+16>>>2>>>0],bb:D[$+20>>>2>>>0],Wa:D[$+24>>>2>>>0],ab:D[$+28>>>2>>>0],Gb:D[$+32>>>2>>>0],Bb:D[$+36>>>2>>>0],Eb:q?Fe(q):""},h=Fe(h),q={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ie in q)h=h.replace(new RegExp(ie,"g"),q[ie]);var fe="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),_e="January February March April May June July August September October November December".split(" ");q={"%a":k=>fe[k.Wa].substring(0,3),"%A":k=>fe[k.Wa],"%b":k=>_e[k.ib].substring(0,3),"%B":k=>_e[k.ib],"%C":k=>M((k.bb+1900)/100|0,2),"%d":k=>M(k.mb,2),"%e":k=>I(k.mb,2," "),"%g":k=>Y(k).toString().substring(2),"%G":k=>Y(k),"%H":k=>M(k.hb,2),"%I":k=>(k=k.hb,k==0?k=12:12<k&&(k-=12),M(k,2)),"%j":k=>{for(var ue=0,Ie=0;Ie<=k.ib-1;ue+=(et(k.bb+1900)?nn:on)[Ie++]);return M(k.mb+ue,3)},"%m":k=>M(k.ib+1,2),"%M":k=>M(k.Cb,2),"%n":()=>`\n`,"%p":k=>0<=k.hb&&12>k.hb?"AM":"PM","%S":k=>M(k.Db,2),"%t":()=>"	","%u":k=>k.Wa||7,"%U":k=>M(Math.floor((k.ab+7-k.Wa)/7),2),"%V":k=>{var ue=Math.floor((k.ab+7-(k.Wa+6)%7)/7);if(2>=(k.Wa+371-k.ab-2)%7&&ue++,ue)ue==53&&(Ie=(k.Wa+371-k.ab)%7,Ie==4||Ie==3&&et(k.bb)||(ue=1));else{ue=52;var Ie=(k.Wa+7-k.ab-1)%7;(Ie==4||Ie==5&&et(k.bb%400-1))&&ue++}return M(ue,2)},"%w":k=>k.Wa,"%W":k=>M(Math.floor((k.ab+7-(k.Wa+6)%7)/7),2),"%y":k=>(k.bb+1900).toString().substring(2),"%Y":k=>k.bb+1900,"%z":k=>{k=k.Bb;var ue=0<=k;return k=Math.abs(k)/60,(ue?"+":"-")+("0000"+(k/60*100+k%60)).slice(-4)},"%Z":k=>k.Eb,"%%":()=>"%"},h=h.replace(/%%/g,"\\0\\0");for(ie in q)h.includes(ie)&&(h=h.replace(new RegExp(ie,"g"),q[ie]($)));return h=h.replace(/\\0\\0/g,"%"),ie=an(h),ie.length>p?0:(B.set(ie,s>>>0),ie.length-1)}for(var un=Array(256),ar=0;256>ar;++ar)un[ar]=String.fromCharCode(ar);Lr=un,pt=r.BindingError=class extends Error{constructor(s){super(s),this.name="BindingError"}},r.InternalError=class extends Error{constructor(s){super(s),this.name="InternalError"}},Object.assign(wr.prototype,{get(s){return this.$a[s]},has(s){return this.$a[s]!==void 0},kb(s){var p=this.nb.pop()||this.$a.length;return this.$a[p]=s,p},jb(s){this.$a[s]=void 0,this.nb.push(s)}}),Pe.$a.push({value:void 0},{value:null},{value:!0},{value:!1}),Pe.cb=Pe.$a.length,r.count_emval_handles=()=>{for(var s=0,p=Pe.cb;p<Pe.$a.length;++p)Pe.$a[p]!==void 0&&++s;return s};var qn={ia:function(s,p,h){return Tr(async()=>{await r.wb(s,p,h)})},a:function(s,p,h){throw s>>>=0,new Bt(s).kb(p>>>0,h>>>0),Qt=s,Nt++,Qt},w:function(){return 0},ca:function(){},P:function(){},R:function(){},J:function(){return 0},aa:function(){},X:function(){},$:function(){},D:function(){},Q:function(){},N:function(){},ba:function(){},O:function(){},G:function(s,p,h,$,I){p>>>=0,p=it(p);var M=p.indexOf("u")!=-1;M&&(I=(1n<<64n)-1n),Ye(s>>>0,{name:p,fromWireType:G=>G,toWireType:function(G,Q){if(typeof Q!="bigint"&&typeof Q!="number")throw new TypeError(`Cannot convert "${hr(Q)}" to ${this.name}`);if(Q<$||Q>I)throw new TypeError(`Passing a number "${hr(Q)}" from JS side to C/C++ side to an argument of type "${p}", which is outside the valid range [${$}, ${I}]!`);return Q},argPackAdvance:8,readValueFromPointer:br(p,h>>>0,!M),eb:null})},ga:function(s,p,h,$){p=it(p>>>0),Ye(s>>>0,{name:p,fromWireType:function(I){return!!I},toWireType:function(I,M){return M?h:$},argPackAdvance:8,readValueFromPointer:function(I){return this.fromWireType(W[I>>>0])},eb:null})},fa:function(s,p){p=it(p>>>0),Ye(s>>>0,{name:p,fromWireType:h=>{var $=Se(h);return vr(h),$},toWireType:(h,$)=>at($),argPackAdvance:8,readValueFromPointer:er,eb:null})},F:function(s,p,h){p=it(p>>>0),Ye(s>>>0,{name:p,fromWireType:$=>$,toWireType:($,I)=>I,argPackAdvance:8,readValueFromPointer:$r(p,h>>>0),eb:null})},t:function(s,p,h,$,I){if(s>>>=0,h>>>=0,p=it(p>>>0),I===-1&&(I=4294967295),I=Q=>Q,$===0){var M=32-8*h;I=Q=>Q<<M>>>M}var G=p.includes("unsigned")?function(Q,Y){return Y>>>0}:function(Q,Y){return Y};Ye(s,{name:p,fromWireType:I,toWireType:G,argPackAdvance:8,readValueFromPointer:br(p,h,$!==0),eb:null})},n:function(s,p,h){function $(M){return new I(B.buffer,j[M+4>>>2>>>0],j[M>>>2>>>0])}var I=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][p];h=it(h>>>0),Ye(s>>>0,{name:h,fromWireType:$,argPackAdvance:8,readValueFromPointer:$},{tb:!0})},H:function(s,p){p=it(p>>>0);var h=p==="std::string";Ye(s>>>0,{name:p,fromWireType:function($){var I=j[$>>>2>>>0],M=$+4;if(h)for(var G=M,Q=0;Q<=I;++Q){var Y=M+Q;if(Q==I||W[Y>>>0]==0){if(G=Fe(G,Y-G),q===void 0)var q=G;else q+=String.fromCharCode(0),q+=G;G=Y+1}}else{for(q=Array(I),Q=0;Q<I;++Q)q[Q]=String.fromCharCode(W[M+Q>>>0]);q=q.join("")}return st($),q},toWireType:function($,I){I instanceof ArrayBuffer&&(I=new Uint8Array(I));var M=typeof I=="string";if(!(M||I instanceof Uint8Array||I instanceof Uint8ClampedArray||I instanceof Int8Array))throw new pt("Cannot pass non-string to std::string");var G=h&&M?Ot(I):I.length,Q=zt(4+G+1),Y=Q+4;if(j[Q>>>2>>>0]=G,h&&M)wt(I,W,Y,G+1);else if(M)for(M=0;M<G;++M){var q=I.charCodeAt(M);if(255<q)throw st(Y),new pt("String has UTF-16 code units that do not fit in 8 bits");W[Y+M>>>0]=q}else for(M=0;M<G;++M)W[Y+M>>>0]=I[M];return $!==null&&$.push(st,Q),Q},argPackAdvance:8,readValueFromPointer:Gn,eb($){st($)}})},y:function(s,p,h){if(p>>>=0,h>>>=0,h=it(h),p===2)var $=Ln,I=me,M=tr,G=()=>J,Q=1;else p===4&&($=jr,I=Fn,M=qr,G=()=>j,Q=2);Ye(s>>>0,{name:h,fromWireType:Y=>{for(var q=j[Y>>>2>>>0],ie=G(),fe,_e=Y+4,k=0;k<=q;++k){var ue=Y+4+k*p;(k==q||ie[ue>>>Q]==0)&&(_e=$(_e,ue-_e),fe===void 0?fe=_e:(fe+=String.fromCharCode(0),fe+=_e),_e=ue+p)}return st(Y),fe},toWireType:(Y,q)=>{if(typeof q!="string")throw new pt(`Cannot pass non-string to C++ string type ${h}`);var ie=M(q),fe=zt(4+ie+p);return j[fe>>>2]=ie>>Q,I(q,fe+4,ie+p),Y!==null&&Y.push(st,fe),fe},argPackAdvance:8,readValueFromPointer:er,eb(Y){st(Y)}})},ha:function(s,p){p=it(p>>>0),Ye(s>>>0,{ub:!0,name:p,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},da:()=>1,s:function(s,p,h){return p>>>=0,h>>>=0,s=Se(s>>>0),p=_r(p,"emval::as"),xr(p,h,s)},v:function(s){return s>>>=0,Tr(()=>(s=Se(s),s.then(at)))},o:function(s,p,h,$){return h>>>=0,$>>>=0,s=Lt[s>>>0],p=Se(p>>>0),s(null,p,h,$)},k:function(s,p,h,$,I){return h>>>=0,$>>>=0,I>>>=0,s=Lt[s>>>0],p=Se(p>>>0),h=nr(h),s(p,p[h],$,I)},b:vr,z:function(s,p){return p>>>=0,s=Se(s>>>0),p=Se(p),s==p},m:function(s){return s>>>=0,s===0?at(Er()):(s=nr(s),at(Er()[s]))},i:function(s,p,h){p=Or(s,p>>>0);var $=p.shift();s--;var I=`return function (obj, func, destructorsRef, args) {\n`,M=0,G=[];h===0&&G.push("obj");for(var Q=["retType"],Y=[$],q=0;q<s;++q)G.push("arg"+q),Q.push("argType"+q),Y.push(p[q]),I+=`  var arg${q} = argType${q}.readValueFromPointer(args${M?"+"+M:""});\n`,M+=p[q].argPackAdvance;for(I+=`  var rv = ${h===1?"new func":"func.call"}(${G.join(", ")});\n`,q=0;q<s;++q)p[q].deleteObject&&(I+=`  argType${q}.deleteObject(arg${q});\n`);return $.ub||(Q.push("emval_returnValue"),Y.push(xr),I+=`  return emval_returnValue(retType, destructorsRef, rv);\n`),Q.push(I+`};\n`),s=jn(Q).apply(null,Y),h=`methodCaller<(${p.map(ie=>ie.name).join(", ")}) => ${$.name}>`,dt(or(h,s))},r:function(s,p){return p>>>=0,s=Se(s>>>0),p=Se(p),at(s[p])},e:function(s){s>>>=0,4<s&&(Pe.get(s).pb+=1)},u:function(){return at([])},l:function(s){s=Se(s>>>0);for(var p=Array(s.length),h=0;h<s.length;h++)p[h]=s[h];return at(p)},d:function(s){return at(nr(s>>>0))},j:function(){return at({})},h:function(s){s>>>=0;for(var p=Se(s);p.length;){var h=p.pop();p.pop()(h)}vr(s)},g:function(s,p,h){p>>>=0,h>>>=0,s=Se(s>>>0),p=Se(p),h=Se(h),s[p]=h},c:function(s,p){return p>>>=0,s=_r(s>>>0,"_emval_take_value"),s=s.readValueFromPointer(p),at(s)},U:function(s,p){s=-9007199254740992>s||9007199254740992<s?NaN:Number(s),p>>>=0,s=new Date(1e3*s),D[p>>>2>>>0]=s.getUTCSeconds(),D[p+4>>>2>>>0]=s.getUTCMinutes(),D[p+8>>>2>>>0]=s.getUTCHours(),D[p+12>>>2>>>0]=s.getUTCDate(),D[p+16>>>2>>>0]=s.getUTCMonth(),D[p+20>>>2>>>0]=s.getUTCFullYear()-1900,D[p+24>>>2>>>0]=s.getUTCDay(),D[p+28>>>2>>>0]=(s.getTime()-Date.UTC(s.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},V:function(s,p){s=-9007199254740992>s||9007199254740992<s?NaN:Number(s),p>>>=0,s=new Date(1e3*s),D[p>>>2>>>0]=s.getSeconds(),D[p+4>>>2>>>0]=s.getMinutes(),D[p+8>>>2>>>0]=s.getHours(),D[p+12>>>2>>>0]=s.getDate(),D[p+16>>>2>>>0]=s.getMonth(),D[p+20>>>2>>>0]=s.getFullYear()-1900,D[p+24>>>2>>>0]=s.getDay(),D[p+28>>>2>>>0]=(et(s.getFullYear())?tn:mt)[s.getMonth()]+s.getDate()-1|0,D[p+36>>>2>>>0]=-(60*s.getTimezoneOffset());var h=new Date(s.getFullYear(),6,1).getTimezoneOffset(),$=new Date(s.getFullYear(),0,1).getTimezoneOffset();D[p+32>>>2>>>0]=(h!=$&&s.getTimezoneOffset()==Math.min($,h))|0},W:function(s){s>>>=0;var p=new Date(D[s+20>>>2>>>0]+1900,D[s+16>>>2>>>0],D[s+12>>>2>>>0],D[s+8>>>2>>>0],D[s+4>>>2>>>0],D[s>>>2>>>0],0),h=D[s+32>>>2>>>0],$=p.getTimezoneOffset(),I=new Date(p.getFullYear(),6,1).getTimezoneOffset(),M=new Date(p.getFullYear(),0,1).getTimezoneOffset(),G=Math.min(M,I);return 0>h?D[s+32>>>2>>>0]=+(I!=M&&G==$):0<h!=(G==$)&&(I=Math.max(M,I),p.setTime(p.getTime()+6e4*((0<h?G:I)-$))),D[s+24>>>2>>>0]=p.getDay(),D[s+28>>>2>>>0]=(et(p.getFullYear())?tn:mt)[p.getMonth()]+p.getDate()-1|0,D[s>>>2>>>0]=p.getSeconds(),D[s+4>>>2>>>0]=p.getMinutes(),D[s+8>>>2>>>0]=p.getHours(),D[s+12>>>2>>>0]=p.getDate(),D[s+16>>>2>>>0]=p.getMonth(),D[s+20>>>2>>>0]=p.getYear(),s=p.getTime(),isNaN(s)?(D[ln()>>>2>>>0]=61,s=-1):s/=1e3,BigInt(s)},S:function(){return-52},T:function(){},L:function(s,p,h){function $(Y){return(Y=Y.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?Y[1]:"GMT"}h>>>=0;var I=new Date().getFullYear(),M=new Date(I,0,1),G=new Date(I,6,1);I=M.getTimezoneOffset();var Q=G.getTimezoneOffset();j[s>>>0>>>2>>>0]=60*Math.max(I,Q),D[p>>>0>>>2>>>0]=+(I!=Q),s=$(M),p=$(G),s=Pr(s),p=Pr(p),Q<I?(j[h>>>2>>>0]=s,j[h+4>>>2>>>0]=p):(j[h>>>2>>>0]=p,j[h+4>>>2>>>0]=s)},A:()=>{Ke("")},f:function(s,p,h){return s>>>=0,p=tt(p>>>0,h>>>0),Et[s].apply(null,p)},I:function(s,p,h){return s>>>=0,p=tt(p>>>0,h>>>0),Et[s].apply(null,p)},E:()=>Date.now(),M:function(){return 4294901760},q:()=>performance.now(),K:function(s){s>>>=0;var p=W.length;if(4294901760<s)return!1;for(var h=1;4>=h;h*=2){var $=p*(1+.2/h);$=Math.min($,s+100663296);var I=Math;$=Math.max(s,$);e:{I=(I.min.call(I,4294901760,$+(65536-$%65536)%65536)-E.buffer.byteLength+65535)/65536;try{E.grow(I),Ge();var M=1;break e}catch{}M=void 0}if(M)return!0}return!1},Z:function(s,p){s>>>=0,p>>>=0;var h=0;return Ze().forEach(($,I)=>{var M=p+h;for(I=j[s+4*I>>>2>>>0]=M,M=0;M<$.length;++M)B[I++>>>0>>>0]=$.charCodeAt(M);B[I>>>0>>>0]=0,h+=$.length+1}),0},_:function(s,p){s>>>=0,p>>>=0;var h=Ze();j[s>>>2>>>0]=h.length;var $=0;return h.forEach(I=>$+=I.length+1),j[p>>>2>>>0]=$,0},x:()=>52,C:function(){return 52},Y:function(){return 70},B:function(s,p,h,$){p>>>=0,h>>>=0,$>>>=0;for(var I=0,M=0;M<h;M++){var G=j[p>>>2>>>0],Q=j[p+4>>>2>>>0];p+=8;for(var Y=0;Y<Q;Y++){var q=W[G+Y>>>0],ie=rn[s];q===0||q===10?((s===1?A:_)(Dt(ie,0)),ie.length=0):ie.push(q)}I+=Q}return j[$>>>2>>>0]=I,0},ea:sn,p:function(s,p,h,$){return sn(s>>>0,p>>>0,h>>>0,$>>>0)}},le=function(){function s(h){return le=h.exports,le=Kr(),le=cn(),E=le.ja,Ge(),Te.unshift(le.ka),we--,we==0&&(We!==null&&(clearInterval(We),We=null),Me&&(h=Me,Me=null,h())),le}var p={a:qn};if(we++,r.instantiateWasm)try{return r.instantiateWasm(p,s)}catch(h){_(`Module.instantiateWasm callback failed with error: ${h}`),i(h)}return Tt(p,function(h){s(h.instance)}).catch(i),{}}();r._OrtInit=(s,p)=>(r._OrtInit=le.la)(s,p),r._OrtGetLastError=(s,p)=>(r._OrtGetLastError=le.ma)(s,p),r._OrtCreateSessionOptions=(s,p,h,$,I,M,G,Q,Y,q)=>(r._OrtCreateSessionOptions=le.na)(s,p,h,$,I,M,G,Q,Y,q),r._OrtAppendExecutionProvider=(s,p)=>(r._OrtAppendExecutionProvider=le.oa)(s,p),r._OrtAddFreeDimensionOverride=(s,p,h)=>(r._OrtAddFreeDimensionOverride=le.pa)(s,p,h),r._OrtAddSessionConfigEntry=(s,p,h)=>(r._OrtAddSessionConfigEntry=le.qa)(s,p,h),r._OrtReleaseSessionOptions=s=>(r._OrtReleaseSessionOptions=le.ra)(s),r._OrtCreateSession=(s,p,h)=>(r._OrtCreateSession=le.sa)(s,p,h),r._OrtReleaseSession=s=>(r._OrtReleaseSession=le.ta)(s),r._OrtGetInputOutputCount=(s,p,h)=>(r._OrtGetInputOutputCount=le.ua)(s,p,h),r._OrtGetInputName=(s,p)=>(r._OrtGetInputName=le.va)(s,p),r._OrtGetOutputName=(s,p)=>(r._OrtGetOutputName=le.wa)(s,p),r._OrtFree=s=>(r._OrtFree=le.xa)(s),r._OrtCreateTensor=(s,p,h,$,I,M)=>(r._OrtCreateTensor=le.ya)(s,p,h,$,I,M),r._OrtGetTensorData=(s,p,h,$,I)=>(r._OrtGetTensorData=le.za)(s,p,h,$,I),r._OrtReleaseTensor=s=>(r._OrtReleaseTensor=le.Aa)(s),r._OrtCreateRunOptions=(s,p,h,$)=>(r._OrtCreateRunOptions=le.Ba)(s,p,h,$),r._OrtAddRunConfigEntry=(s,p,h)=>(r._OrtAddRunConfigEntry=le.Ca)(s,p,h),r._OrtReleaseRunOptions=s=>(r._OrtReleaseRunOptions=le.Da)(s),r._OrtCreateBinding=s=>(r._OrtCreateBinding=le.Ea)(s),r._OrtBindInput=(s,p,h)=>(r._OrtBindInput=le.Fa)(s,p,h),r._OrtBindOutput=(s,p,h,$)=>(r._OrtBindOutput=le.Ga)(s,p,h,$),r._OrtClearBoundOutputs=s=>(r._OrtClearBoundOutputs=le.Ha)(s),r._OrtReleaseBinding=s=>(r._OrtReleaseBinding=le.Ia)(s),r._OrtRunWithBinding=(s,p,h,$,I)=>(r._OrtRunWithBinding=le.Ja)(s,p,h,$,I),r._OrtRun=(s,p,h,$,I,M,G,Q)=>(r._OrtRun=le.Ka)(s,p,h,$,I,M,G,Q),r._OrtEndProfiling=s=>(r._OrtEndProfiling=le.La)(s),r._JsepOutput=(s,p,h)=>(r._JsepOutput=le.Ma)(s,p,h),r._JsepGetNodeName=s=>(r._JsepGetNodeName=le.Na)(s);var ln=()=>(ln=le.Oa)(),zt=r._malloc=s=>(zt=r._malloc=le.Pa)(s),st=r._free=s=>(st=r._free=le.Qa)(s),jt=s=>(jt=le.Ra)(s),sr=()=>(sr=le.Ta)(),ur=s=>(ur=le.Ua)(s),kr=s=>(kr=le.Va)(s),qt=s=>(qt=le.Xa)(s),dn=()=>(dn=le.Ya)(),ht=s=>(ht=le.Za)(s),ct=()=>(ct=le._a)();r.___start_em_js=915571,r.___stop_em_js=915732;function cn(){var s=le;s=Object.assign({},s);var p=$=>()=>$()>>>0,h=$=>I=>$(I)>>>0;return s.Oa=p(s.Oa),s.Pa=h(s.Pa),s.Ra=h(s.Ra),s.Ta=p(s.Ta),s.Va=h(s.Va),s}r.stackAlloc=kr,r.stackSave=sr,r.stackRestore=ur,r.UTF8ToString=Fe,r.stringToUTF8=(s,p,h)=>wt(s,W,p,h),r.lengthBytesUTF8=Ot;var Pt;Me=function s(){Pt||Rr(),Pt||(Me=s)};function Rr(){if(!(0<we)){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;){var s=r.preRun.shift();ge.unshift(s)}for(;0<ge.length;)ge.shift()(r);if(!(0<we||Pt||(Pt=!0,r.calledRun=!0,T))){for(;0<Te.length;)Te.shift()(r);for(o(r);0<pe.length;)pe.shift()(r)}}}return Rr(),t.ready}})();typeof vi=="object"&&typeof ao=="object"?ao.exports=wi:typeof define=="function"&&define.amd&&define([],()=>wi)});var Si=Dr(()=>{});var _i=Dr(()=>{});var xi={};gn(xi,{cpus:()=>Wl});var Wl,Ci=te(()=>{Wl=void 0});var Ti=Dr((Ii,so)=>{"use strict";var Ai=(()=>{var e=typeof document<"u"&&document.currentScript?document.currentScript.src:void 0;return typeof __filename<"u"&&(e=e||__filename),function(t={}){function r(){return $e.buffer!=pe.buffer&&ke(),pe}function o(){return $e.buffer!=pe.buffer&&ke(),we}function i(){return $e.buffer!=pe.buffer&&ke(),We}function u(){return $e.buffer!=pe.buffer&&ke(),Me}function a(){return $e.buffer!=pe.buffer&&ke(),Ke}function c(){return $e.buffer!=pe.buffer&&ke(),F}function m(){return $e.buffer!=pe.buffer&&ke(),oe}function g(){return $e.buffer!=pe.buffer&&ke(),ot}var d=t,b,v;d.ready=new Promise((n,l)=>{b=n,v=l}),d.mountExternalData=(n,l)=>{(d.Fb||(d.Fb=new Map)).set(n,l)},d.unmountExternalData=()=>{delete d.Fb},d.jsepInit=(n,l,f,y,x,P,z,L)=>{d.rc=n,d.$b=l,d.bc=f,d.Ob=y,d.ac=x,d.eb=P,d.cc=z,d.dc=L,l=(X,Z,ae)=>(...ye)=>{let Ce=ct,R=Z?.();ye=X(...ye);let de=Z?.();return R!==de&&(X=de,ae(R),Z=ae=null),ct!=Ce?I():ye},f=X=>async(...Z)=>{try{if(d.Eb)throw Error("Session already started");let ae=d.Eb={fc:Z[0],errors:[]},ye=await X(...Z);if(d.Eb!==ae)throw Error("Session mismatch");n.flush();let Ce=ae.errors;if(0<Ce.length){let R=await Promise.all(Ce);if(R=R.filter(de=>de),0<R.length)throw Error(R.join(`\n`))}return ye}finally{d.Eb=null}},d._OrtCreateSession=l(d._OrtCreateSession,()=>d._OrtCreateSession,X=>d._OrtCreateSession=X),d._OrtRun=f(l(d._OrtRun,()=>d._OrtRun,X=>d._OrtRun=X)),d._OrtRunWithBinding=f(l(d._OrtRunWithBinding,()=>d._OrtRunWithBinding,X=>d._OrtRunWithBinding=X)),d._OrtBindInput=l(d._OrtBindInput,()=>d._OrtBindInput,X=>d._OrtBindInput=X),d.jsepRegisterBuffer=(X,Z,ae,ye)=>n.registerBuffer(X,Z,ae,ye),d.jsepUnregisterBuffers=X=>{n.unregisterBuffers(X)},d.jsepGetBuffer=X=>n.getBuffer(X),d.jsepCreateDownloader=(X,Z,ae)=>n.createDownloader(X,Z,ae),d.jsepOnRunStart=()=>n.onRunStart()};var S=Object.assign({},d),w="./this.program",C=(n,l)=>{throw l},O=typeof window=="object",A=typeof importScripts=="function",_=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string",E=d.ENVIRONMENT_IS_PTHREAD||!1,T="";function U(n){return d.locateFile?d.locateFile(n,T):T+n}var B,W,H;if(_){var J=(no(),lr(ro)),D=(io(),lr(oo));T=A?D.dirname(T)+"/":__dirname+"/",B=(l,f)=>(l=Ot(l)?new URL(l):D.normalize(l),J.readFileSync(l,f?void 0:"utf8")),H=l=>(l=B(l,!0),l.buffer||(l=new Uint8Array(l)),l),W=(l,f,y,x=!0)=>{l=Ot(l)?new URL(l):D.normalize(l),J.readFile(l,x?void 0:"utf8",(P,z)=>{P?y(P):f(x?z.buffer:z)})},!d.thisProgram&&1<process.argv.length&&(w=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),C=(l,f)=>{throw process.exitCode=l,f},d.inspect=()=>"[Emscripten Module object]";let n;try{n=Si()}catch(l){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),l}global.Worker=n.Worker}else(O||A)&&(A?T=self.location.href:typeof document<"u"&&document.currentScript&&(T=document.currentScript.src),typeof e<"u"&&e&&(T=e),T.indexOf("blob:")!==0?T=T.substr(0,T.replace(/[?#].*/,"").lastIndexOf("/")+1):T="",_||(B=n=>{var l=new XMLHttpRequest;return l.open("GET",n,!1),l.send(null),l.responseText},A&&(H=n=>{var l=new XMLHttpRequest;return l.open("GET",n,!1),l.responseType="arraybuffer",l.send(null),new Uint8Array(l.response)}),W=(n,l,f)=>{var y=new XMLHttpRequest;y.open("GET",n,!0),y.responseType="arraybuffer",y.onload=()=>{y.status==200||y.status==0&&y.response?l(y.response):f()},y.onerror=f,y.send(null)}));_&&typeof performance>"u"&&(global.performance=_i().performance);var j=console.log.bind(console),se=console.error.bind(console);_&&(j=(...n)=>J.writeSync(1,n.join(" ")+`\n`),se=(...n)=>J.writeSync(2,n.join(" ")+`\n`));var be=j,re=se;Object.assign(d,S),S=null,typeof WebAssembly!="object"&&Dt("no native wasm support detected");var $e,Ge,ge=!1,Te,pe,we,We,Me,Ke,F,oe,he,Je,ot;function ke(){var n=$e.buffer;d.HEAP8=pe=new Int8Array(n),d.HEAP16=We=new Int16Array(n),d.HEAPU8=we=new Uint8Array(n),d.HEAPU16=Me=new Uint16Array(n),d.HEAP32=Ke=new Int32Array(n),d.HEAPU32=F=new Uint32Array(n),d.HEAPF32=oe=new Float32Array(n),d.HEAPF64=ot=new Float64Array(n),d.HEAP64=he=new BigInt64Array(n),d.HEAPU64=Je=new BigUint64Array(n)}var Le=16777216;if(E)$e=d.wasmMemory;else if(d.wasmMemory)$e=d.wasmMemory;else if($e=new WebAssembly.Memory({initial:Le/65536,maximum:65536,shared:!0}),!($e.buffer instanceof SharedArrayBuffer))throw re("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),_&&re("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");ke(),Le=$e.buffer.byteLength;var Tt=[],Et=[],Wt=[],Bt=0,Qt=null,Nt=null;function fr(){if(Bt--,Bt==0&&(Qt!==null&&(clearInterval(Qt),Qt=null),Nt)){var n=Nt;Nt=null,n()}}function Dt(n){throw n="Aborted("+n+")",re(n),ge=!0,Te=1,n=new WebAssembly.RuntimeError(n+". Build with -sASSERTIONS for more info."),v(n),n}var Fe=n=>n.startsWith("data:application/octet-stream;base64,"),Ot=n=>n.startsWith("file://"),wt;wt="ort-wasm-simd-threaded.wasm",Fe(wt)||(wt=U(wt));function hr(n){if(H)return H(n);throw"both async and sync fetching of the wasm failed"}function Lr(n){if(O||A){if(typeof fetch=="function"&&!Ot(n))return fetch(n,{credentials:"same-origin"}).then(l=>{if(!l.ok)throw"failed to load wasm binary file at \'"+n+"\'";return l.arrayBuffer()}).catch(()=>hr(n));if(W)return new Promise((l,f)=>{W(n,y=>l(new Uint8Array(y)),f)})}return Promise.resolve().then(()=>hr(n))}function it(n,l,f){return Lr(n).then(y=>WebAssembly.instantiate(y,l)).then(y=>y).then(f,y=>{re(`failed to asynchronously prepare wasm: ${y}`),Dt(y)})}function gr(n,l){var f=wt;return typeof WebAssembly.instantiateStreaming!="function"||Fe(f)||Ot(f)||_||typeof fetch!="function"?it(f,n,l):fetch(f,{credentials:"same-origin"}).then(y=>WebAssembly.instantiateStreaming(y,n).then(l,function(x){return re(`wasm streaming compile failed: ${x}`),re("falling back to ArrayBuffer instantiation"),it(f,n,l)}))}var Ht={904332:(n,l,f,y)=>{if(typeof d>"u"||!d.Fb)return 1;if(n=Pe(n>>>0),n.startsWith("./")&&(n=n.substring(2)),n=d.Fb.get(n),!n)return 2;if(l>>>=0,f>>>=0,y>>>=0,l+f>n.byteLength)return 3;try{return o().set(n.subarray(l,l+f),y>>>0),0}catch{return 4}},904833:n=>d.$b(n),904866:n=>d.bc(n),904898:(n,l,f)=>{d.Ob(n,l,f,!0)},904937:(n,l,f)=>{d.Ob(n,l,f)},904970:n=>{d.eb("Abs",n,void 0)},905021:n=>{d.eb("Neg",n,void 0)},905072:n=>{d.eb("Floor",n,void 0)},905125:n=>{d.eb("Ceil",n,void 0)},905177:n=>{d.eb("Reciprocal",n,void 0)},905235:n=>{d.eb("Sqrt",n,void 0)},905287:n=>{d.eb("Exp",n,void 0)},905338:n=>{d.eb("Erf",n,void 0)},905389:n=>{d.eb("Sigmoid",n,void 0)},905444:(n,l,f)=>{d.eb("HardSigmoid",n,{alpha:l,beta:f})},905523:n=>{d.eb("Log",n,void 0)},905574:n=>{d.eb("Sin",n,void 0)},905625:n=>{d.eb("Cos",n,void 0)},905676:n=>{d.eb("Tan",n,void 0)},905727:n=>{d.eb("Asin",n,void 0)},905779:n=>{d.eb("Acos",n,void 0)},905831:n=>{d.eb("Atan",n,void 0)},905883:n=>{d.eb("Sinh",n,void 0)},905935:n=>{d.eb("Cosh",n,void 0)},905987:n=>{d.eb("Asinh",n,void 0)},906040:n=>{d.eb("Acosh",n,void 0)},906093:n=>{d.eb("Atanh",n,void 0)},906146:n=>{d.eb("Tanh",n,void 0)},906198:n=>{d.eb("Not",n,void 0)},906249:(n,l,f)=>{d.eb("Clip",n,{min:l,max:f})},906318:n=>{d.eb("Clip",n,void 0)},906370:(n,l)=>{d.eb("Elu",n,{alpha:l})},906428:n=>{d.eb("Relu",n,void 0)},906480:(n,l)=>{d.eb("LeakyRelu",n,{alpha:l})},906544:(n,l)=>{d.eb("ThresholdedRelu",n,{alpha:l})},906614:(n,l)=>{d.eb("Cast",n,{to:l})},906672:n=>{d.eb("Add",n,void 0)},906723:n=>{d.eb("Sub",n,void 0)},906774:n=>{d.eb("Mul",n,void 0)},906825:n=>{d.eb("Div",n,void 0)},906876:n=>{d.eb("Pow",n,void 0)},906927:n=>{d.eb("Equal",n,void 0)},906980:n=>{d.eb("Greater",n,void 0)},907035:n=>{d.eb("GreaterOrEqual",n,void 0)},907097:n=>{d.eb("Less",n,void 0)},907149:n=>{d.eb("LessOrEqual",n,void 0)},907208:(n,l,f,y,x)=>{d.eb("ReduceMean",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:y?Array.from(a().subarray(y>>>0,x>>>0)):[]})},907367:(n,l,f,y,x)=>{d.eb("ReduceMax",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:y?Array.from(a().subarray(y>>>0,x>>>0)):[]})},907525:(n,l,f,y,x)=>{d.eb("ReduceMin",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:y?Array.from(a().subarray(y>>>0,x>>>0)):[]})},907683:(n,l,f,y,x)=>{d.eb("ReduceProd",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:y?Array.from(a().subarray(y>>>0,x>>>0)):[]})},907842:(n,l,f,y,x)=>{d.eb("ReduceSum",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:y?Array.from(a().subarray(y>>>0,x>>>0)):[]})},908e3:(n,l,f,y,x)=>{d.eb("ReduceL1",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:y?Array.from(a().subarray(y>>>0,x>>>0)):[]})},908157:(n,l,f,y,x)=>{d.eb("ReduceL2",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:y?Array.from(a().subarray(y>>>0,x>>>0)):[]})},908314:(n,l,f,y,x)=>{d.eb("ReduceLogSum",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:y?Array.from(a().subarray(y>>>0,x>>>0)):[]})},908475:(n,l,f,y,x)=>{d.eb("ReduceSumSquare",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:y?Array.from(a().subarray(y>>>0,x>>>0)):[]})},908639:(n,l,f,y,x)=>{d.eb("ReduceLogSumExp",n,{keepDims:!!l,noopWithEmptyAxes:!!f,axes:y?Array.from(a().subarray(y>>>0,x>>>0)):[]})},908803:n=>{d.eb("Where",n,void 0)},908856:(n,l,f)=>{d.eb("Transpose",n,{perm:l?Array.from(a().subarray(l>>>0,f>>>0)):[]})},908964:(n,l,f,y,x,P,z,L,X,Z,ae,ye,Ce,R,de)=>{d.eb("ConvTranspose",n,{format:X?"NHWC":"NCHW",autoPad:l,dilations:[f],group:y,kernel_shape:[x],pads:[P,z],strides:[L],wIsConst:()=>!!r()[Z>>>0],outputPadding:ae?Array.from(a().subarray(ae>>>0,ye>>>0)):[],outputShape:Ce?Array.from(a().subarray(Ce>>>0,R>>>0)):[],activation:Pe(de)})},909366:(n,l,f,y,x,P,z,L,X,Z,ae,ye,Ce,R)=>{d.eb("ConvTranspose",n,{format:L?"NHWC":"NCHW",autoPad:l,dilations:Array.from(a().subarray(f>>>0,(f>>>0)+2>>>0)),group:y,kernelShape:Array.from(a().subarray(x>>>0,(x>>>0)+2>>>0)),pads:Array.from(a().subarray(P>>>0,(P>>>0)+4>>>0)),strides:Array.from(a().subarray(z>>>0,(z>>>0)+2>>>0)),wIsConst:()=>!!r()[X>>>0],outputPadding:Z?Array.from(a().subarray(Z>>>0,ae>>>0)):[],outputShape:ye?Array.from(a().subarray(ye>>>0,Ce>>>0)):[],activation:Pe(R)})},909931:(n,l,f,y,x,P,z,L,X,Z,ae,ye,Ce,R,de)=>{d.eb("ConvTranspose",n,{format:X?"NHWC":"NCHW",autoPad:l,dilations:[f],group:y,kernel_shape:[x],pads:[P,z],strides:[L],wIsConst:()=>!!r()[Z>>>0],outputPadding:ae?Array.from(a().subarray(ae>>>0,ye>>>0)):[],outputShape:Ce?Array.from(a().subarray(Ce>>>0,R>>>0)):[],activation:Pe(de)})},910333:(n,l,f,y,x,P,z,L,X,Z,ae,ye,Ce,R)=>{d.eb("ConvTranspose",n,{format:L?"NHWC":"NCHW",autoPad:l,dilations:Array.from(a().subarray(f>>>0,(f>>>0)+2>>>0)),group:y,kernelShape:Array.from(a().subarray(x>>>0,(x>>>0)+2>>>0)),pads:Array.from(a().subarray(P>>>0,(P>>>0)+4>>>0)),strides:Array.from(a().subarray(z>>>0,(z>>>0)+2>>>0)),wIsConst:()=>!!r()[X>>>0],outputPadding:Z?Array.from(a().subarray(Z>>>0,ae>>>0)):[],outputShape:ye?Array.from(a().subarray(ye>>>0,Ce>>>0)):[],activation:Pe(R)})},910898:(n,l)=>{d.eb("GlobalAveragePool",n,{format:l?"NHWC":"NCHW"})},910989:(n,l,f,y,x,P,z,L,X,Z,ae,ye,Ce,R,de,Ee)=>{d.eb("AveragePool",n,{format:Ee?"NHWC":"NCHW",auto_pad:l,ceil_mode:f,count_include_pad:y,storage_order:x,dilations:[P,z],kernel_shape:[L,X],pads:[Z,ae,ye,Ce],strides:[R,de]})},911273:(n,l)=>{d.eb("GlobalAveragePool",n,{format:l?"NHWC":"NCHW"})},911364:(n,l,f,y,x,P,z,L,X,Z,ae,ye,Ce,R,de,Ee)=>{d.eb("AveragePool",n,{format:Ee?"NHWC":"NCHW",auto_pad:l,ceil_mode:f,count_include_pad:y,storage_order:x,dilations:[P,z],kernel_shape:[L,X],pads:[Z,ae,ye,Ce],strides:[R,de]})},911648:(n,l)=>{d.eb("GlobalMaxPool",n,{format:l?"NHWC":"NCHW"})},911735:(n,l,f,y,x,P,z,L,X,Z,ae,ye,Ce,R,de,Ee)=>{d.eb("MaxPool",n,{format:Ee?"NHWC":"NCHW",auto_pad:l,ceil_mode:f,count_include_pad:y,storage_order:x,dilations:[P,z],kernel_shape:[L,X],pads:[Z,ae,ye,Ce],strides:[R,de]})},912015:(n,l)=>{d.eb("GlobalMaxPool",n,{format:l?"NHWC":"NCHW"})},912102:(n,l,f,y,x,P,z,L,X,Z,ae,ye,Ce,R,de,Ee)=>{d.eb("MaxPool",n,{format:Ee?"NHWC":"NCHW",auto_pad:l,ceil_mode:f,count_include_pad:y,storage_order:x,dilations:[P,z],kernel_shape:[L,X],pads:[Z,ae,ye,Ce],strides:[R,de]})},912382:(n,l,f,y,x)=>{d.eb("Gemm",n,{alpha:l,beta:f,transA:y,transB:x})},912486:n=>{d.eb("MatMul",n,void 0)},912540:(n,l,f,y)=>{d.eb("ArgMax",n,{keepDims:!!l,selectLastIndex:!!f,axis:y})},912648:(n,l,f,y)=>{d.eb("ArgMin",n,{keepDims:!!l,selectLastIndex:!!f,axis:y})},912756:(n,l)=>{d.eb("Softmax",n,{axis:l})},912819:(n,l)=>{d.eb("Concat",n,{axis:l})},912879:(n,l,f,y,x)=>{d.eb("Split",n,{axis:l,numOutputs:f,splitSizes:y?Array.from(a().subarray(y>>>0,x>>>0)):[]})},913019:n=>{d.eb("Expand",n,void 0)},913073:(n,l)=>{d.eb("Gather",n,{axis:Number(l)})},913144:(n,l)=>{d.eb("GatherElements",n,{axis:Number(l)})},913223:(n,l,f,y,x,P,z,L,X,Z,ae)=>{d.eb("Resize",n,{antialias:l,axes:f?Array.from(a().subarray(f>>>0,y>>>0)):[],coordinateTransformMode:Pe(x),cubicCoeffA:P,excludeOutside:z,extrapolationValue:L,keepAspectRatioPolicy:Pe(X),mode:Pe(Z),nearestMode:Pe(ae)})},913569:(n,l,f,y,x,P,z)=>{d.eb("Slice",n,{starts:l?Array.from(a().subarray(l>>>0,f>>>0)):[],ends:y?Array.from(a().subarray(y>>>0,x>>>0)):[],axes:P?Array.from(a().subarray(P>>>0,z>>>0)):[]})},913785:n=>{d.eb("Tile",n,void 0)},913837:(n,l,f)=>{d.eb("LayerNormalization",n,{axis:Number(l),epsilon:Number(f)})},913944:(n,l,f)=>{d.eb("InstanceNormalization",n,{epsilon:l,format:f?"NHWC":"NCHW"})},914058:(n,l,f)=>{d.eb("InstanceNormalization",n,{epsilon:l,format:f?"NHWC":"NCHW"})},914172:n=>{d.eb("Range",n,void 0)},914225:(n,l)=>{d.eb("Einsum",n,{equation:Pe(l)})},914306:(n,l,f,y,x)=>{d.eb("Pad",n,{mode:l,value:f,pads:y?Array.from(a().subarray(y>>>0,x>>>0)):[]})},914433:(n,l,f,y,x,P)=>{d.eb("BatchNormalization",n,{epsilon:l,momentum:f,spatial:!!x,trainingMode:!!y,format:P?"NHWC":"NCHW"})},914602:(n,l,f,y,x,P)=>{d.eb("BatchNormalization",n,{epsilon:l,momentum:f,spatial:!!x,trainingMode:!!y,format:P?"NHWC":"NCHW"})},914771:(n,l,f)=>{d.eb("CumSum",n,{exclusive:Number(l),reverse:Number(f)})},914868:(n,l,f,y,x,P,z,L,X)=>{d.eb("Attention",n,{numHeads:l,isUnidirectional:f,maskFilterValue:y,scale:x,doRotary:P,qkvHiddenSizes:z?Array.from(a().subarray(Number(L)>>>0,Number(L)+z>>>0)):[],pastPresentShareBuffer:!!X})},915140:n=>{d.eb("Gelu",n,void 0)},915192:(n,l,f,y,x,P)=>{d.eb("MultiHeadAttention",n,{numHeads:l,isUnidirectional:f,maskFilterValue:y,scale:x,doRotary:P})},915351:n=>{d.eb("BiasAdd",n,void 0)},915406:n=>{d.eb("BiasSplitGelu",n,void 0)},915467:(n,l)=>{d.eb("SkipLayerNormalization",n,{epsilon:l})},915548:(n,l,f,y,x,P,z,L,X,Z,ae,ye,Ce)=>{d.eb("Conv",n,{format:X?"NHWC":"NCHW",auto_pad:l,dilations:[f],group:y,kernel_shape:[x],pads:P?Array.from(a().subarray(P>>>0,z>>>0)):[],strides:[L],w_is_const:()=>!!r()[Z>>>0],activation:Pe(ae),activation_params:ye?Array.from(m().subarray(ye>>>0,Ce>>>0)):[]})},915918:(n,l,f,y,x,P,z,L,X,Z,ae,ye,Ce,R,de,Ee)=>{d.eb("Conv",n,{format:ye?"NHWC":"NCHW",auto_pad:l,dilations:[f,y],group:x,kernel_shape:[P,z],pads:L?Array.from(a().subarray(L>>>0,X>>>0)):[],strides:[Z,ae],w_is_const:()=>!!r()[Ce>>>0],activation:Pe(R),activation_params:de?Array.from(m().subarray(de>>>0,Ee>>>0)):[]})},916309:n=>{d.cc(n)},916343:(n,l)=>d.dc(n,l,d.Eb.fc,d.Eb.errors)};function yr(n){this.name="ExitStatus",this.message=`Program terminated with exit(${n})`,this.status=n}var pt=n=>{n.terminate(),n.onmessage=()=>{}},Fr=n=>{me.yb.length==0&&(Sr(),me.Pb(me.yb[0]));var l=me.yb.pop();if(!l)return 6;me.zb.push(l),me.pb[n.xb]=l,l.xb=n.xb;var f={cmd:"run",start_routine:n.hc,arg:n.Vb,pthread_ptr:n.xb};return _&&l.unref(),l.postMessage(f,n.nc),0},Ye=0,br=typeof TextDecoder<"u"?new TextDecoder("utf8"):void 0,wr=(n,l,f)=>{l>>>=0;var y=l+f;for(f=l;n[f]&&!(f>=y);)++f;if(16<f-l&&n.buffer&&br)return br.decode(n.buffer instanceof SharedArrayBuffer?n.slice(l,f):n.subarray(l,f));for(y="";l<f;){var x=n[l++];if(x&128){var P=n[l++]&63;if((x&224)==192)y+=String.fromCharCode((x&31)<<6|P);else{var z=n[l++]&63;x=(x&240)==224?(x&15)<<12|P<<6|z:(x&7)<<18|P<<12|z<<6|n[l++]&63,65536>x?y+=String.fromCharCode(x):(x-=65536,y+=String.fromCharCode(55296|x>>10,56320|x&1023))}}else y+=String.fromCharCode(x)}return y},Pe=(n,l)=>(n>>>=0)?wr(o(),n,l):"",vr=n=>{var l=Qn();return n=n(),fn(l),n};function Se(n,l){var f=arguments.length-2,y=arguments;return vr(()=>{for(var x=2*f,P=eo(8*x),z=P>>>3,L=0;L<f;L++){var X=y[2+L];typeof X=="bigint"?(he[z+2*L]=1n,he[z+2*L+1]=X):(he[z+2*L]=0n,g()[z+2*L+1>>>0]=X)}return ui(n,x,P,l)})}function at(n){if(E)return Se(0,1,n);Te=n,0<Ye||(me.ic(),d.onExit?.(n),ge=!0),C(n,new yr(n))}var er=n=>{if(Te=n,E)throw jr(n),"unwind";at(n)},$r=n=>{n instanceof yr||n=="unwind"||C(1,n)};function Gn(){for(var n=d.numThreads;n--;)Sr();Tt.unshift(()=>{Bt++,Ln(()=>fr())})}function Sr(){var n=U("ort-wasm-simd-threaded.worker.js");n=new Worker(n),me.yb.push(n)}function Ln(n){E?n():Promise.all(me.yb.map(me.Pb)).then(n)}var me={yb:[],zb:[],Ub:[],pb:{},Ib(){E?(me.receiveObjectTransfer=me.ec,me.threadInitTLS=me.Tb,me.setExitStatus=me.Sb):Gn()},Sb:n=>Te=n,sc:["$terminateWorker"],ic:()=>{for(var n of me.zb)pt(n);for(n of me.yb)pt(n);me.yb=[],me.zb=[],me.pb=[]},Rb:n=>{var l=n.xb;delete me.pb[l],me.yb.push(n),me.zb.splice(me.zb.indexOf(n),1),n.xb=0,Xn(l)},ec(){},Tb(){me.Ub.forEach(n=>n())},Pb:n=>new Promise(l=>{n.onmessage=P=>{P=P.data;var z=P.cmd;if(P.targetThread&&P.targetThread!=mn()){var L=me.pb[P.targetThread];L?L.postMessage(P,P.transferList):re(`Internal error! Worker sent a message "${z}" to target pthread ${P.targetThread}, but that thread no longer exists!`)}else z==="checkMailbox"?jt():z==="spawnThread"?Fr(P):z==="cleanupThread"?me.Rb(me.pb[P.thread]):z==="killThread"?(P=P.thread,z=me.pb[P],delete me.pb[P],pt(z),Xn(P),me.zb.splice(me.zb.indexOf(z),1),z.xb=0):z==="cancelThread"?me.pb[P.thread].postMessage({cmd:"cancel"}):z==="loaded"?(n.loaded=!0,_&&!n.xb&&n.unref(),l(n)):z==="alert"?alert(`Thread ${P.threadId}: ${P.text}`):P.target==="setimmediate"?n.postMessage(P):z==="callHandler"?d[P.handler](...P.args):z&&re(`worker sent an unknown command ${z}`)},n.onerror=P=>{throw re(`worker sent an error! ${P.filename}:${P.lineno}: ${P.message}`),P},_&&(n.on("message",P=>n.onmessage({data:P})),n.on("error",P=>n.onerror(P)));var f=[],y=["onExit"],x;for(x of y)d.hasOwnProperty(x)&&f.push(x);n.postMessage({cmd:"load",handlers:f,urlOrBlob:d.mainScriptUrlOrBlob||e,wasmMemory:$e,wasmModule:Ge})})};d.PThread=me;var tr=n=>{for(;0<n.length;)n.shift()(d)};d.establishStackSpace=()=>{var n=mn(),l=c()[n+52>>>2>>>0];n=c()[n+56>>>2>>>0],di(l,l-n),fn(l)};function jr(n){if(E)return Se(1,0,n);er(n)}d.invokeEntryPoint=(n,l)=>{n=ci.apply(null,[n,l]),0<Ye?me.Sb(n):Jn(n)};function Fn(n){this.Db=n-24,this.pc=function(l){c()[this.Db+4>>>2>>>0]=l},this.Mb=function(l){c()[this.Db+8>>>2>>>0]=l},this.Ib=function(l,f){this.Kb(),this.pc(l),this.Mb(f)},this.Kb=function(){c()[this.Db+16>>>2>>>0]=0}}var qr=0,_r=0;function xr(n,l,f,y){return E?Se(2,1,n,l,f,y):Gt(n,l,f,y)}function Gt(n,l,f,y){if(n>>>=0,l>>>=0,f>>>=0,y>>>=0,typeof SharedArrayBuffer>"u")return re("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var x=[];return E&&x.length===0?xr(n,l,f,y):(n={hc:f,xb:n,Vb:y,nc:x},E?(n.qc="spawnThread",postMessage(n,x),0):Fr(n))}function Kr(n,l,f){return E?Se(3,1,n,l,f):0}function ft(n,l){if(E)return Se(4,1,n,l)}var Qe=n=>{for(var l=0,f=0;f<n.length;++f){var y=n.charCodeAt(f);127>=y?l++:2047>=y?l+=2:55296<=y&&57343>=y?(l+=4,++f):l+=3}return l},Cr=(n,l,f,y)=>{if(f>>>=0,!(0<y))return 0;var x=f;y=f+y-1;for(var P=0;P<n.length;++P){var z=n.charCodeAt(P);if(55296<=z&&57343>=z){var L=n.charCodeAt(++P);z=65536+((z&1023)<<10)|L&1023}if(127>=z){if(f>=y)break;l[f++>>>0]=z}else{if(2047>=z){if(f+1>=y)break;l[f++>>>0]=192|z>>6}else{if(65535>=z){if(f+2>=y)break;l[f++>>>0]=224|z>>12}else{if(f+3>=y)break;l[f++>>>0]=240|z>>18,l[f++>>>0]=128|z>>12&63}l[f++>>>0]=128|z>>6&63}l[f++>>>0]=128|z&63}}return l[f>>>0]=0,f-x},Mt=(n,l,f)=>Cr(n,o(),l,f);function Ar(n,l){if(E)return Se(5,1,n,l)}function Ir(n,l,f){if(E)return Se(6,1,n,l,f)}function Yr(n,l,f){return E?Se(7,1,n,l,f):0}function rr(n,l){if(E)return Se(8,1,n,l)}function Zr(n,l,f){if(E)return Se(9,1,n,l,f)}function Xr(n,l,f,y){if(E)return Se(10,1,n,l,f,y)}function Jr(n,l,f,y){if(E)return Se(11,1,n,l,f,y)}function Qr(n,l,f,y){if(E)return Se(12,1,n,l,f,y)}function Tr(n){if(E)return Se(13,1,n)}function Lt(n,l){if(E)return Se(14,1,n,l)}function en(n,l,f){if(E)return Se(15,1,n,l,f)}var nr=n=>{if(n===null)return"null";var l=typeof n;return l==="object"||l==="array"||l==="function"?n.toString():""+n},Er,dt=n=>{for(var l="";o()[n>>>0];)l+=Er[o()[n++>>>0]];return l},Or={},or={},jn={},et;function tn(n,l,f={}){var y=l.name;if(!n)throw new et(`type "${y}" must have a positive integer typeid pointer`);if(or.hasOwnProperty(n)){if(f.Yb)return;throw new et(`Cannot register type \'${y}\' twice`)}or[n]=l,delete jn[n],Or.hasOwnProperty(n)&&(l=Or[n],delete Or[n],l.forEach(x=>x()))}function mt(n,l,f={}){if(!("argPackAdvance"in l))throw new TypeError("registerType registeredInstance requires argPackAdvance");tn(n,l,f)}var Pr=(n,l,f)=>{switch(l){case 1:return f?y=>r()[y>>>0>>>0]:y=>o()[y>>>0>>>0];case 2:return f?y=>i()[y>>>1>>>0]:y=>u()[y>>>1>>>0];case 4:return f?y=>a()[y>>>2>>>0]:y=>c()[y>>>2>>>0];case 8:return f?y=>he[y>>>3]:y=>Je[y>>>3];default:throw new TypeError(`invalid integer width (${l}): ${n}`)}};function ir(){this.wb=[void 0],this.Nb=[]}var tt=new ir;function Ft(n){n>>>=0,n>=tt.Db&&--tt.get(n).Qb===0&&tt.Mb(n)}var Ze=n=>{if(!n)throw new et("Cannot use deleted val. handle = "+n);return tt.get(n).value},rt=n=>{switch(n){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return tt.Kb({Qb:1,value:n})}};function rn(n){return this.fromWireType(a()[n>>>2>>>0])}var nn=(n,l)=>{switch(l){case 4:return function(f){return this.fromWireType(m()[f>>>2>>>0])};case 8:return function(f){return this.fromWireType(g()[f>>>3>>>0])};default:throw new TypeError(`invalid float width (${l}): ${n}`)}};function on(n){return this.fromWireType(c()[n>>>2>>>0])}var an=typeof TextDecoder<"u"?new TextDecoder("utf-16le"):void 0,sn=(n,l)=>{for(var f=n>>1,y=f+l/2;!(f>=y)&&u()[f>>>0];)++f;if(f<<=1,32<f-n&&an)return an.decode(o().slice(n,f));for(f="",y=0;!(y>=l/2);++y){var x=i()[n+2*y>>>1>>>0];if(x==0)break;f+=String.fromCharCode(x)}return f},un=(n,l,f)=>{if(f??=2147483647,2>f)return 0;f-=2;var y=l;f=f<2*n.length?f/2:n.length;for(var x=0;x<f;++x){var P=n.charCodeAt(x);i()[l>>>1>>>0]=P,l+=2}return i()[l>>>1>>>0]=0,l-y},ar=n=>2*n.length,qn=(n,l)=>{for(var f=0,y="";!(f>=l/4);){var x=a()[n+4*f>>>2>>>0];if(x==0)break;++f,65536<=x?(x-=65536,y+=String.fromCharCode(55296|x>>10,56320|x&1023)):y+=String.fromCharCode(x)}return y},le=(n,l,f)=>{if(l>>>=0,f??=2147483647,4>f)return 0;var y=l;f=y+f-4;for(var x=0;x<n.length;++x){var P=n.charCodeAt(x);if(55296<=P&&57343>=P){var z=n.charCodeAt(++x);P=65536+((P&1023)<<10)|z&1023}if(a()[l>>>2>>>0]=P,l+=4,l+4>f)break}return a()[l>>>2>>>0]=0,l-y},ln=n=>{for(var l=0,f=0;f<n.length;++f){var y=n.charCodeAt(f);55296<=y&&57343>=y&&++f,l+=4}return l},zt=()=>{if(!(0<Ye))try{E?Jn(Te):er(Te)}catch(n){$r(n)}};function st(n){n>>>=0,typeof Atomics.oc=="function"&&(Atomics.oc(a(),n>>>2,n).value.then(jt),n+=128,Atomics.store(a(),n>>>2,1))}d.__emscripten_thread_mailbox_await=st;var jt=()=>{var n=mn();if(n&&(st(n),!ge))try{li(),zt()}catch(l){$r(l)}};d.checkMailbox=jt;var sr=[],ur=(n,l)=>{var f=or[n];if(f===void 0)throw n=ai(n),f=dt(n),vt(n),new et(l+" has unknown type "+f);return f},kr=(n,l,f)=>{var y=[];return n=n.toWireType(y,f),y.length&&(c()[l>>>2>>>0]=rt(y)),n},qt=n=>{try{n()}catch(l){Dt(l)}};function dn(){var n=ne,l={};for(let[f,y]of Object.entries(n))l[f]=typeof y=="function"?function(){Pt.push(f);try{return y.apply(null,arguments)}finally{ge||(Pt.pop(),ct&&ht===1&&Pt.length===0&&(ht=0,Ye+=1,qt(mi),typeof Fibers<"u"&&Fibers.uc()))}}:y;return l}var ht=0,ct=null,cn=0,Pt=[],Rr={},s={},p=0,h=null,$=[];function I(){return new Promise((n,l)=>{h={resolve:n,reject:l}})}function M(){var n=Br(65548),l=n+12;c()[n>>>2>>>0]=l,c()[n+4>>>2>>>0]=l+65536,l=Pt[0];var f=Rr[l];return f===void 0&&(f=p++,Rr[l]=f,s[f]=l),l=f,a()[n+8>>>2>>>0]=l,n}function G(){var n=a()[ct+8>>>2>>>0];return n=ne[s[n]],--Ye,n()}function Q(n){if(!ge){if(ht===0){var l=!1,f=!1;n((y=0)=>{if(!ge&&(cn=y,l=!0,f)){ht=2,qt(()=>fi(ct)),typeof Browser<"u"&&Browser.Jb.Xb&&Browser.Jb.resume(),y=!1;try{var x=G()}catch(L){x=L,y=!0}var P=!1;if(!ct){var z=h;z&&(h=null,(y?z.reject:z.resolve)(x),P=!0)}if(y&&!P)throw x}}),f=!0,l||(ht=1,ct=M(),typeof Browser<"u"&&Browser.Jb.Xb&&Browser.Jb.pause(),qt(()=>pi(ct)))}else ht===2?(ht=0,qt(hi),vt(ct),ct=null,$.forEach(y=>{if(!ge)try{y(),zt()}catch(x){$r(x)}})):Dt(`invalid state: ${ht}`);return cn}}function Y(n){return Q(l=>{n().then(l)})}var q=[],ie={},fe=n=>{var l=ie[n];return l===void 0?dt(n):l},_e=()=>typeof globalThis=="object"?globalThis:Function("return this")(),k=n=>{var l=q.length;return q.push(n),l},ue=(n,l)=>{for(var f=Array(n),y=0;y<n;++y)f[y]=ur(c()[l+4*y>>>2>>>0],"parameter "+y);return f},Ie=(n,l)=>Object.defineProperty(l,"name",{value:n});function kt(n){var l=Function;if(!(l instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof l} which is not a function`);var f=Ie(l.name||"unknownFunctionName",function(){});return f.prototype=l.prototype,f=new f,n=l.apply(f,n),n instanceof Object?n:f}var Rt=n=>n%4===0&&(n%100!==0||n%400===0),Ho=[0,31,60,91,121,152,182,213,244,274,305,335],Go=[0,31,59,90,120,151,181,212,243,273,304,334];function Lo(n,l,f,y,x,P,z){return E?Se(16,1,n,l,f,y,x,P,z):-52}function Fo(n,l,f,y,x,P){if(E)return Se(17,1,n,l,f,y,x,P)}var jo=n=>{var l=Qe(n)+1,f=Br(l);return f&&Mt(n,f,l),f},Kn=[],qo=(n,l)=>{Kn.length=0;for(var f;f=o()[n++>>>0];){var y=f!=105;y&=f!=112,l+=y&&l%8?4:0,Kn.push(f==112?c()[l>>>2>>>0]:f==106?he[l>>>3]:f==105?a()[l>>>2>>>0]:g()[l>>>3>>>0]),l+=y?8:4}return Kn},Yn={},Ko=()=>{if(!Zn){var n={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:w||"./this.program"},l;for(l in Yn)Yn[l]===void 0?delete n[l]:n[l]=Yn[l];var f=[];for(l in n)f.push(`${l}=${n[l]}`);Zn=f}return Zn},Zn;function Yo(n,l){if(E)return Se(18,1,n,l);n>>>=0,l>>>=0;var f=0;return Ko().forEach((y,x)=>{var P=l+f;for(x=c()[n+4*x>>>2>>>0]=P,P=0;P<y.length;++P)r()[x++>>>0>>>0]=y.charCodeAt(P);r()[x>>>0>>>0]=0,f+=y.length+1}),0}function Zo(n,l){if(E)return Se(19,1,n,l);n>>>=0,l>>>=0;var f=Ko();c()[n>>>2>>>0]=f.length;var y=0;return f.forEach(x=>y+=x.length+1),c()[l>>>2>>>0]=y,0}function Xo(n){return E?Se(20,1,n):52}function Jo(n,l,f,y){return E?Se(21,1,n,l,f,y):52}function Qo(n,l,f,y){return E?Se(22,1,n,l,f,y):70}var Il=[null,[],[]];function ei(n,l,f,y){if(E)return Se(23,1,n,l,f,y);l>>>=0,f>>>=0,y>>>=0;for(var x=0,P=0;P<f;P++){var z=c()[l>>>2>>>0],L=c()[l+4>>>2>>>0];l+=8;for(var X=0;X<L;X++){var Z=o()[z+X>>>0],ae=Il[n];Z===0||Z===10?((n===1?be:re)(wr(ae,0)),ae.length=0):ae.push(Z)}x+=L}return c()[y>>>2>>>0]=x,0}var ti=[31,29,31,30,31,30,31,31,30,31,30,31],ri=[31,28,31,30,31,30,31,31,30,31,30,31];function Tl(n){var l=Array(Qe(n)+1);return Cr(n,l,0,l.length),l}var El=(n,l)=>{r().set(n,l>>>0)};function ni(n,l,f,y){function x(R,de,Ee){for(R=typeof R=="number"?R.toString():R||"";R.length<de;)R=Ee[0]+R;return R}function P(R,de){return x(R,de,"0")}function z(R,de){function Ee(yi){return 0>yi?-1:0<yi?1:0}var Kt;return(Kt=Ee(R.getFullYear()-de.getFullYear()))===0&&(Kt=Ee(R.getMonth()-de.getMonth()))===0&&(Kt=Ee(R.getDate()-de.getDate())),Kt}function L(R){switch(R.getDay()){case 0:return new Date(R.getFullYear()-1,11,29);case 1:return R;case 2:return new Date(R.getFullYear(),0,3);case 3:return new Date(R.getFullYear(),0,2);case 4:return new Date(R.getFullYear(),0,1);case 5:return new Date(R.getFullYear()-1,11,31);case 6:return new Date(R.getFullYear()-1,11,30)}}function X(R){var de=R.Ab;for(R=new Date(new Date(R.Bb+1900,0,1).getTime());0<de;){var Ee=R.getMonth(),Kt=(Rt(R.getFullYear())?ti:ri)[Ee];if(de>Kt-R.getDate())de-=Kt-R.getDate()+1,R.setDate(1),11>Ee?R.setMonth(Ee+1):(R.setMonth(0),R.setFullYear(R.getFullYear()+1));else{R.setDate(R.getDate()+de);break}}return Ee=new Date(R.getFullYear()+1,0,4),de=L(new Date(R.getFullYear(),0,4)),Ee=L(Ee),0>=z(de,R)?0>=z(Ee,R)?R.getFullYear()+1:R.getFullYear():R.getFullYear()-1}n>>>=0,l>>>=0,f>>>=0,y>>>=0;var Z=c()[y+40>>>2>>>0];y={lc:a()[y>>>2>>>0],kc:a()[y+4>>>2>>>0],Gb:a()[y+8>>>2>>>0],Lb:a()[y+12>>>2>>>0],Hb:a()[y+16>>>2>>>0],Bb:a()[y+20>>>2>>>0],vb:a()[y+24>>>2>>>0],Ab:a()[y+28>>>2>>>0],tc:a()[y+32>>>2>>>0],jc:a()[y+36>>>2>>>0],mc:Z?Pe(Z):""},f=Pe(f),Z={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ae in Z)f=f.replace(new RegExp(ae,"g"),Z[ae]);var ye="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),Ce="January February March April May June July August September October November December".split(" ");Z={"%a":R=>ye[R.vb].substring(0,3),"%A":R=>ye[R.vb],"%b":R=>Ce[R.Hb].substring(0,3),"%B":R=>Ce[R.Hb],"%C":R=>P((R.Bb+1900)/100|0,2),"%d":R=>P(R.Lb,2),"%e":R=>x(R.Lb,2," "),"%g":R=>X(R).toString().substring(2),"%G":R=>X(R),"%H":R=>P(R.Gb,2),"%I":R=>(R=R.Gb,R==0?R=12:12<R&&(R-=12),P(R,2)),"%j":R=>{for(var de=0,Ee=0;Ee<=R.Hb-1;de+=(Rt(R.Bb+1900)?ti:ri)[Ee++]);return P(R.Lb+de,3)},"%m":R=>P(R.Hb+1,2),"%M":R=>P(R.kc,2),"%n":()=>`\n`,"%p":R=>0<=R.Gb&&12>R.Gb?"AM":"PM","%S":R=>P(R.lc,2),"%t":()=>"	","%u":R=>R.vb||7,"%U":R=>P(Math.floor((R.Ab+7-R.vb)/7),2),"%V":R=>{var de=Math.floor((R.Ab+7-(R.vb+6)%7)/7);if(2>=(R.vb+371-R.Ab-2)%7&&de++,de)de==53&&(Ee=(R.vb+371-R.Ab)%7,Ee==4||Ee==3&&Rt(R.Bb)||(de=1));else{de=52;var Ee=(R.vb+7-R.Ab-1)%7;(Ee==4||Ee==5&&Rt(R.Bb%400-1))&&de++}return P(de,2)},"%w":R=>R.vb,"%W":R=>P(Math.floor((R.Ab+7-(R.vb+6)%7)/7),2),"%y":R=>(R.Bb+1900).toString().substring(2),"%Y":R=>R.Bb+1900,"%z":R=>{R=R.jc;var de=0<=R;return R=Math.abs(R)/60,(de?"+":"-")+("0000"+(R/60*100+R%60)).slice(-4)},"%Z":R=>R.mc,"%%":()=>"%"},f=f.replace(/%%/g,"\\0\\0");for(ae in Z)f.includes(ae)&&(f=f.replace(new RegExp(ae,"g"),Z[ae](y)));return f=f.replace(/\\0\\0/g,"%"),ae=Tl(f),ae.length>l?0:(El(ae,n),ae.length-1)}me.Ib();for(var oi=Array(256),pn=0;256>pn;++pn)oi[pn]=String.fromCharCode(pn);Er=oi,et=d.BindingError=class extends Error{constructor(n){super(n),this.name="BindingError"}},d.InternalError=class extends Error{constructor(n){super(n),this.name="InternalError"}},Object.assign(ir.prototype,{get(n){return this.wb[n]},has(n){return this.wb[n]!==void 0},Kb(n){var l=this.Nb.pop()||this.wb.length;return this.wb[l]=n,l},Mb(n){this.wb[n]=void 0,this.Nb.push(n)}}),tt.wb.push({value:void 0},{value:null},{value:!0},{value:!1}),tt.Db=tt.wb.length,d.count_emval_handles=()=>{for(var n=0,l=tt.Db;l<tt.wb.length;++l)tt.wb[l]!==void 0&&++n;return n};var Ol=[at,jr,xr,Kr,ft,Ar,Ir,Yr,rr,Zr,Xr,Jr,Qr,Tr,Lt,en,Lo,Fo,Yo,Zo,Xo,Jo,Qo,ei],Pl={ua:function(n,l,f){return Y(async()=>{await d.ac(n,l,f)})},b:function(n,l,f){throw n>>>=0,new Fn(n).Ib(l>>>0,f>>>0),qr=n,_r++,qr},ga:function(n){si(n>>>0,!A,1,!O,131072,!1),me.Tb()},F:function(n){n>>>=0,E?postMessage({cmd:"cleanupThread",thread:n}):me.Rb(me.pb[n])},Y:Gt,z:Kr,ma:ft,U:Ar,W:Ir,N:Yr,ka:rr,da:Zr,ja:Xr,H:Jr,V:Qr,S:Tr,la:Lt,T:en,K:function(n,l,f,y,x){n>>>=0,l>>>=0,f>>>=0,l=dt(l);var P=l.indexOf("u")!=-1;P&&(x=(1n<<64n)-1n),mt(n,{name:l,fromWireType:z=>z,toWireType:function(z,L){if(typeof L!="bigint"&&typeof L!="number")throw new TypeError(`Cannot convert "${nr(L)}" to ${this.name}`);if(L<y||L>x)throw new TypeError(`Passing a number "${nr(L)}" from JS side to C/C++ side to an argument of type "${l}", which is outside the valid range [${y}, ${x}]!`);return L},argPackAdvance:8,readValueFromPointer:Pr(l,f,!P),Cb:null})},sa:function(n,l,f,y){n>>>=0,l=dt(l>>>0),mt(n,{name:l,fromWireType:function(x){return!!x},toWireType:function(x,P){return P?f:y},argPackAdvance:8,readValueFromPointer:function(x){return this.fromWireType(o()[x>>>0])},Cb:null})},ra:function(n,l){n>>>=0,l=dt(l>>>0),mt(n,{name:l,fromWireType:f=>{var y=Ze(f);return Ft(f),y},toWireType:(f,y)=>rt(y),argPackAdvance:8,readValueFromPointer:rn,Cb:null})},J:function(n,l,f){n>>>=0,f>>>=0,l=dt(l>>>0),mt(n,{name:l,fromWireType:y=>y,toWireType:(y,x)=>x,argPackAdvance:8,readValueFromPointer:nn(l,f),Cb:null})},v:function(n,l,f,y,x){if(n>>>=0,f>>>=0,l=dt(l>>>0),x===-1&&(x=4294967295),x=L=>L,y===0){var P=32-8*f;x=L=>L<<P>>>P}var z=l.includes("unsigned")?function(L,X){return X>>>0}:function(L,X){return X};mt(n,{name:l,fromWireType:x,toWireType:z,argPackAdvance:8,readValueFromPointer:Pr(l,f,y!==0),Cb:null})},o:function(n,l,f){function y(P){var z=c()[P>>>2>>>0];return P=c()[P+4>>>2>>>0],new x(r().buffer,P,z)}n>>>=0;var x=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][l];f=dt(f>>>0),mt(n,{name:f,fromWireType:y,argPackAdvance:8,readValueFromPointer:y},{Yb:!0})},L:function(n,l){n>>>=0,l=dt(l>>>0);var f=l==="std::string";mt(n,{name:l,fromWireType:function(y){var x=c()[y>>>2>>>0],P=y+4;if(f)for(var z=P,L=0;L<=x;++L){var X=P+L;if(L==x||o()[X>>>0]==0){if(z=Pe(z,X-z),Z===void 0)var Z=z;else Z+=String.fromCharCode(0),Z+=z;z=X+1}}else{for(Z=Array(x),L=0;L<x;++L)Z[L]=String.fromCharCode(o()[P+L>>>0]);Z=Z.join("")}return vt(y),Z},toWireType:function(y,x){x instanceof ArrayBuffer&&(x=new Uint8Array(x));var P=typeof x=="string";if(!(P||x instanceof Uint8Array||x instanceof Uint8ClampedArray||x instanceof Int8Array))throw new et("Cannot pass non-string to std::string");var z=f&&P?Qe(x):x.length,L=Br(4+z+1),X=L+4;if(c()[L>>>2>>>0]=z,f&&P)Mt(x,X,z+1);else if(P)for(P=0;P<z;++P){var Z=x.charCodeAt(P);if(255<Z)throw vt(X),new et("String has UTF-16 code units that do not fit in 8 bits");o()[X+P>>>0]=Z}else for(P=0;P<z;++P)o()[X+P>>>0]=x[P];return y!==null&&y.push(vt,L),L},argPackAdvance:8,readValueFromPointer:on,Cb(y){vt(y)}})},B:function(n,l,f){if(n>>>=0,l>>>=0,f>>>=0,f=dt(f),l===2)var y=sn,x=un,P=ar,z=()=>u(),L=1;else l===4&&(y=qn,x=le,P=ln,z=()=>c(),L=2);mt(n,{name:f,fromWireType:X=>{for(var Z=c()[X>>>2>>>0],ae=z(),ye,Ce=X+4,R=0;R<=Z;++R){var de=X+4+R*l;(R==Z||ae[de>>>L]==0)&&(Ce=y(Ce,de-Ce),ye===void 0?ye=Ce:(ye+=String.fromCharCode(0),ye+=Ce),Ce=de+l)}return vt(X),ye},toWireType:(X,Z)=>{if(typeof Z!="string")throw new et(`Cannot pass non-string to C++ string type ${f}`);var ae=P(Z),ye=Br(4+ae+l);return c()[ye>>>2]=ae>>L,x(Z,ye+4,ae+l),X!==null&&X.push(vt,ye),ye},argPackAdvance:8,readValueFromPointer:rn,Cb(X){vt(X)}})},ta:function(n,l){n>>>=0,l=dt(l>>>0),mt(n,{Zb:!0,name:l,argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})},qa:()=>1,Q:function(n,l){n>>>=0,n==l>>>0?setTimeout(()=>jt()):E?postMessage({targetThread:n,cmd:"checkMailbox"}):(n=me.pb[n])&&n.postMessage({cmd:"checkMailbox"})},Z:function(n,l,f,y){l>>>=0,f/=2,sr.length=f,y=y>>>0>>>3;for(var x=0;x<f;x++)sr[x]=he[y+2*x]?he[y+2*x+1]:g()[y+2*x+1>>>0];return n=0>n?Ht[-n-1]:Ol[n],me.Wb=l,l=n.apply(null,sr),me.Wb=0,l},fa:st,pa:function(n){_&&me.pb[n>>>0].ref()},t:function(n,l,f){return l>>>=0,f>>>=0,n=Ze(n>>>0),l=ur(l,"emval::as"),kr(l,f,n)},y:function(n){return n>>>=0,Y(()=>(n=Ze(n),n.then(rt)))},p:function(n,l,f,y){return f>>>=0,y>>>=0,n=q[n>>>0],l=Ze(l>>>0),n(null,l,f,y)},k:function(n,l,f,y,x){return f>>>=0,y>>>=0,x>>>=0,n=q[n>>>0],l=Ze(l>>>0),f=fe(f),n(l,l[f],y,x)},c:Ft,C:function(n,l){return l>>>=0,n=Ze(n>>>0),l=Ze(l),n==l},n:function(n){return n>>>=0,n===0?rt(_e()):(n=fe(n),rt(_e()[n]))},j:function(n,l,f){l=ue(n,l>>>0);var y=l.shift();n--;var x=`return function (obj, func, destructorsRef, args) {\n`,P=0,z=[];f===0&&z.push("obj");for(var L=["retType"],X=[y],Z=0;Z<n;++Z)z.push("arg"+Z),L.push("argType"+Z),X.push(l[Z]),x+=`  var arg${Z} = argType${Z}.readValueFromPointer(args${P?"+"+P:""});\n`,P+=l[Z].argPackAdvance;for(x+=`  var rv = ${f===1?"new func":"func.call"}(${z.join(", ")});\n`,Z=0;Z<n;++Z)l[Z].deleteObject&&(x+=`  argType${Z}.deleteObject(arg${Z});\n`);return y.Zb||(L.push("emval_returnValue"),X.push(kr),x+=`  return emval_returnValue(retType, destructorsRef, rv);\n`),L.push(x+`};\n`),n=kt(L).apply(null,X),f=`methodCaller<(${l.map(ae=>ae.name).join(", ")}) => ${y.name}>`,k(Ie(f,n))},s:function(n,l){return l>>>=0,n=Ze(n>>>0),l=Ze(l),rt(n[l])},e:function(n){n>>>=0,4<n&&(tt.get(n).Qb+=1)},w:function(){return rt([])},m:function(n){n=Ze(n>>>0);for(var l=Array(n.length),f=0;f<n.length;f++)l[f]=n[f];return rt(l)},f:function(n){return rt(fe(n>>>0))},l:function(){return rt({})},i:function(n){n>>>=0;for(var l=Ze(n);l.length;){var f=l.pop();l.pop()(f)}Ft(n)},h:function(n,l,f){l>>>=0,f>>>=0,n=Ze(n>>>0),l=Ze(l),f=Ze(f),n[l]=f},d:function(n,l){return l>>>=0,n=ur(n>>>0,"_emval_take_value"),n=n.readValueFromPointer(l),rt(n)},aa:function(n,l){n=-9007199254740992>n||9007199254740992<n?NaN:Number(n),l>>>=0,n=new Date(1e3*n),a()[l>>>2>>>0]=n.getUTCSeconds(),a()[l+4>>>2>>>0]=n.getUTCMinutes(),a()[l+8>>>2>>>0]=n.getUTCHours(),a()[l+12>>>2>>>0]=n.getUTCDate(),a()[l+16>>>2>>>0]=n.getUTCMonth(),a()[l+20>>>2>>>0]=n.getUTCFullYear()-1900,a()[l+24>>>2>>>0]=n.getUTCDay(),n=(n.getTime()-Date.UTC(n.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[l+28>>>2>>>0]=n},ba:function(n,l){n=-9007199254740992>n||9007199254740992<n?NaN:Number(n),l>>>=0,n=new Date(1e3*n),a()[l>>>2>>>0]=n.getSeconds(),a()[l+4>>>2>>>0]=n.getMinutes(),a()[l+8>>>2>>>0]=n.getHours(),a()[l+12>>>2>>>0]=n.getDate(),a()[l+16>>>2>>>0]=n.getMonth(),a()[l+20>>>2>>>0]=n.getFullYear()-1900,a()[l+24>>>2>>>0]=n.getDay();var f=(Rt(n.getFullYear())?Ho:Go)[n.getMonth()]+n.getDate()-1|0;a()[l+28>>>2>>>0]=f,a()[l+36>>>2>>>0]=-(60*n.getTimezoneOffset()),f=new Date(n.getFullYear(),6,1).getTimezoneOffset();var y=new Date(n.getFullYear(),0,1).getTimezoneOffset();n=(f!=y&&n.getTimezoneOffset()==Math.min(y,f))|0,a()[l+32>>>2>>>0]=n},ca:function(n){n>>>=0;var l=new Date(a()[n+20>>>2>>>0]+1900,a()[n+16>>>2>>>0],a()[n+12>>>2>>>0],a()[n+8>>>2>>>0],a()[n+4>>>2>>>0],a()[n>>>2>>>0],0),f=a()[n+32>>>2>>>0],y=l.getTimezoneOffset(),x=new Date(l.getFullYear(),6,1).getTimezoneOffset(),P=new Date(l.getFullYear(),0,1).getTimezoneOffset(),z=Math.min(P,x);return 0>f?a()[n+32>>>2>>>0]=+(x!=P&&z==y):0<f!=(z==y)&&(x=Math.max(P,x),l.setTime(l.getTime()+6e4*((0<f?z:x)-y))),a()[n+24>>>2>>>0]=l.getDay(),f=(Rt(l.getFullYear())?Ho:Go)[l.getMonth()]+l.getDate()-1|0,a()[n+28>>>2>>>0]=f,a()[n>>>2>>>0]=l.getSeconds(),a()[n+4>>>2>>>0]=l.getMinutes(),a()[n+8>>>2>>>0]=l.getHours(),a()[n+12>>>2>>>0]=l.getDate(),a()[n+16>>>2>>>0]=l.getMonth(),a()[n+20>>>2>>>0]=l.getYear(),n=l.getTime(),isNaN(n)?(a()[ii()>>>2>>>0]=61,n=-1):n/=1e3,BigInt(n)},_:Lo,$:Fo,P:function(n,l,f){function y(Z){return(Z=Z.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?Z[1]:"GMT"}n>>>=0,l>>>=0,f>>>=0;var x=new Date().getFullYear(),P=new Date(x,0,1),z=new Date(x,6,1);x=P.getTimezoneOffset();var L=z.getTimezoneOffset(),X=Math.max(x,L);c()[n>>>2>>>0]=60*X,a()[l>>>2>>>0]=+(x!=L),n=y(P),l=y(z),n=jo(n),l=jo(l),L<x?(c()[f>>>2>>>0]=n,c()[f+4>>>2>>>0]=l):(c()[f>>>2>>>0]=l,c()[f+4>>>2>>>0]=n)},q:()=>{Dt("")},g:function(n,l,f){return n>>>=0,l=qo(l>>>0,f>>>0),Ht[n].apply(null,l)},M:function(n,l,f){return n>>>=0,l=qo(l>>>0,f>>>0),Ht[n].apply(null,l)},G:()=>{},I:()=>Date.now(),oa:()=>{throw Ye+=1,"unwind"},R:function(){return 4294901760},u:()=>performance.timeOrigin+performance.now(),x:()=>_?(Ci(),lr(xi)).cpus().length:navigator.hardwareConcurrency,O:function(n){n>>>=0;var l=o().length;if(n<=l||4294901760<n)return!1;for(var f=1;4>=f;f*=2){var y=l*(1+.2/f);y=Math.min(y,n+100663296);var x=Math;y=Math.max(n,y);e:{x=(x.min.call(x,4294901760,y+(65536-y%65536)%65536)-$e.buffer.byteLength+65535)/65536;try{$e.grow(x),ke();var P=1;break e}catch{}P=void 0}if(P)return!0}return!1},ha:Yo,ia:Zo,X:er,A:Xo,E:Jo,ea:Qo,D:ei,a:$e||d.wasmMemory,na:ni,r:function(n,l,f,y){return ni(n>>>0,l>>>0,f>>>0,y>>>0)}},ne=function(){function n(f,y){return ne=f.exports,ne=dn(),ne=kl(),me.Ub.push(ne.bb),Et.unshift(ne.va),Ge=y,fr(),ne}var l={a:Pl};if(Bt++,d.instantiateWasm)try{return d.instantiateWasm(l,n)}catch(f){re(`Module.instantiateWasm callback failed with error: ${f}`),v(f)}return gr(l,function(f){n(f.instance,f.module)}).catch(v),{}}();d._OrtInit=(n,l)=>(d._OrtInit=ne.wa)(n,l),d._OrtGetLastError=(n,l)=>(d._OrtGetLastError=ne.xa)(n,l),d._OrtCreateSessionOptions=(n,l,f,y,x,P,z,L,X,Z)=>(d._OrtCreateSessionOptions=ne.ya)(n,l,f,y,x,P,z,L,X,Z),d._OrtAppendExecutionProvider=(n,l)=>(d._OrtAppendExecutionProvider=ne.za)(n,l),d._OrtAddFreeDimensionOverride=(n,l,f)=>(d._OrtAddFreeDimensionOverride=ne.Aa)(n,l,f),d._OrtAddSessionConfigEntry=(n,l,f)=>(d._OrtAddSessionConfigEntry=ne.Ba)(n,l,f),d._OrtReleaseSessionOptions=n=>(d._OrtReleaseSessionOptions=ne.Ca)(n),d._OrtCreateSession=(n,l,f)=>(d._OrtCreateSession=ne.Da)(n,l,f),d._OrtReleaseSession=n=>(d._OrtReleaseSession=ne.Ea)(n),d._OrtGetInputOutputCount=(n,l,f)=>(d._OrtGetInputOutputCount=ne.Fa)(n,l,f),d._OrtGetInputName=(n,l)=>(d._OrtGetInputName=ne.Ga)(n,l),d._OrtGetOutputName=(n,l)=>(d._OrtGetOutputName=ne.Ha)(n,l),d._OrtFree=n=>(d._OrtFree=ne.Ia)(n),d._OrtCreateTensor=(n,l,f,y,x,P)=>(d._OrtCreateTensor=ne.Ja)(n,l,f,y,x,P),d._OrtGetTensorData=(n,l,f,y,x)=>(d._OrtGetTensorData=ne.Ka)(n,l,f,y,x),d._OrtReleaseTensor=n=>(d._OrtReleaseTensor=ne.La)(n),d._OrtCreateRunOptions=(n,l,f,y)=>(d._OrtCreateRunOptions=ne.Ma)(n,l,f,y),d._OrtAddRunConfigEntry=(n,l,f)=>(d._OrtAddRunConfigEntry=ne.Na)(n,l,f),d._OrtReleaseRunOptions=n=>(d._OrtReleaseRunOptions=ne.Oa)(n),d._OrtCreateBinding=n=>(d._OrtCreateBinding=ne.Pa)(n),d._OrtBindInput=(n,l,f)=>(d._OrtBindInput=ne.Qa)(n,l,f),d._OrtBindOutput=(n,l,f,y)=>(d._OrtBindOutput=ne.Ra)(n,l,f,y),d._OrtClearBoundOutputs=n=>(d._OrtClearBoundOutputs=ne.Sa)(n),d._OrtReleaseBinding=n=>(d._OrtReleaseBinding=ne.Ta)(n),d._OrtRunWithBinding=(n,l,f,y,x)=>(d._OrtRunWithBinding=ne.Ua)(n,l,f,y,x),d._OrtRun=(n,l,f,y,x,P,z,L)=>(d._OrtRun=ne.Va)(n,l,f,y,x,P,z,L),d._OrtEndProfiling=n=>(d._OrtEndProfiling=ne.Wa)(n),d._JsepOutput=(n,l,f)=>(d._JsepOutput=ne.Xa)(n,l,f),d._JsepGetNodeName=n=>(d._JsepGetNodeName=ne.Ya)(n);var ii=()=>(ii=ne.Za)(),mn=d._pthread_self=()=>(mn=d._pthread_self=ne._a)(),Br=d._malloc=n=>(Br=d._malloc=ne.$a)(n),vt=d._free=n=>(vt=d._free=ne.ab)(n);d.__emscripten_tls_init=()=>(d.__emscripten_tls_init=ne.bb)();var ai=n=>(ai=ne.cb)(n);d.__embind_initialize_bindings=()=>(d.__embind_initialize_bindings=ne.db)();var si=d.__emscripten_thread_init=(n,l,f,y,x,P)=>(si=d.__emscripten_thread_init=ne.fb)(n,l,f,y,x,P);d.__emscripten_thread_crashed=()=>(d.__emscripten_thread_crashed=ne.gb)();var ui=(n,l,f,y)=>(ui=ne.hb)(n,l,f,y),Xn=n=>(Xn=ne.ib)(n),Jn=d.__emscripten_thread_exit=n=>(Jn=d.__emscripten_thread_exit=ne.jb)(n),li=()=>(li=ne.kb)(),di=(n,l)=>(di=ne.lb)(n,l),Qn=()=>(Qn=ne.mb)(),fn=n=>(fn=ne.nb)(n),eo=n=>(eo=ne.ob)(n),ci=d.dynCall_ii=(n,l)=>(ci=d.dynCall_ii=ne.qb)(n,l),pi=n=>(pi=ne.rb)(n),mi=()=>(mi=ne.sb)(),fi=n=>(fi=ne.tb)(n),hi=()=>(hi=ne.ub)();d.___start_em_js=916455,d.___stop_em_js=916616;function kl(){var n=ne;n=Object.assign({},n);var l=y=>()=>y()>>>0,f=y=>x=>y(x)>>>0;return n.Za=l(n.Za),n._a=l(n._a),n.$a=f(n.$a),n.cb=f(n.cb),n.emscripten_main_runtime_thread_id=l(n.emscripten_main_runtime_thread_id),n.mb=l(n.mb),n.ob=f(n.ob),n}d.wasmMemory=$e,d.stackAlloc=eo,d.stackSave=Qn,d.stackRestore=fn,d.keepRuntimeAlive=()=>0<Ye,d.UTF8ToString=Pe,d.stringToUTF8=Mt,d.lengthBytesUTF8=Qe,d.ExitStatus=yr,d.PThread=me;var hn;Nt=function n(){hn||gi(),hn||(Nt=n)};function gi(){if(!(0<Bt))if(E)b(d),E||tr(Et),startWorker(d);else{if(d.preRun)for(typeof d.preRun=="function"&&(d.preRun=[d.preRun]);d.preRun.length;)Tt.unshift(d.preRun.shift());tr(Tt),0<Bt||hn||(hn=!0,d.calledRun=!0,ge||(E||tr(Et),b(d),E||tr(Wt)))}}return gi(),t.ready}})();typeof Ii=="object"&&typeof so=="object"?so.exports=Ai:typeof define=="function"&&define.amd&&define([],()=>Ai)});var Ei=Dr((Wp,Nl)=>{Nl.exports=\'"use strict";var Module={},ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads"),parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",e=>onmessage({data:e}));var fs=require("fs"),vm=require("vm");Object.assign(global,{self:global,require,Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:e=>vm.runInThisContext(fs.readFileSync(e,"utf8"),{filename:e}),postMessage:e=>parentPort.postMessage(e),performance:global.performance||{now:Date.now}})}var initializedJS=!1;function threadPrintErr(){var e=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,e+`\\n`);return}console.error(e)}function threadAlert(){var e=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:e,threadId:Module._pthread_self()})}var err=threadPrintErr;self.alert=threadAlert,Module.instantiateWasm=(e,t)=>{var a=Module.wasmModule;Module.wasmModule=null;var r=new WebAssembly.Instance(a,e);return t(r)},self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let a=[];self.onmessage=r=>a.push(r),self.startWorker=r=>{Module=r,postMessage({cmd:"loaded"});for(let s of a)handleMessage(s);self.onmessage=handleMessage},Module.wasmModule=e.data.wasmModule;for(const r of e.data.handlers)Module[r]=(...s)=>{postMessage({cmd:"callHandler",handler:r,args:s})};if(Module.wasmMemory=e.data.wasmMemory,Module.buffer=Module.wasmMemory.buffer,Module.ENVIRONMENT_IS_PTHREAD=!0,typeof e.data.urlOrBlob=="string")importScripts(e.data.urlOrBlob);else{var t=URL.createObjectURL(e.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module.__emscripten_thread_init(e.data.pthread_ptr,0,0,1),Module.__emscripten_thread_mailbox_await(e.data.pthread_ptr),Module.establishStackSpace(),Module.PThread.receiveObjectTransfer(e.data),Module.PThread.threadInitTLS(),initializedJS||(initializedJS=!0);try{Module.invokeEntryPoint(e.data.start_routine,e.data.arg)}catch(a){if(a!="unwind")throw a}}else e.data.cmd==="cancel"?Module._pthread_self()&&Module.__emscripten_thread_exit(-1):e.data.target==="setimmediate"||(e.data.cmd==="checkMailbox"?initializedJS&&Module.checkMailbox():e.data.cmd&&(err(`worker.js received unknown command ${e.data.cmd}`),err(e.data)))}catch(a){throw Module.__emscripten_thread_crashed?.(),a}}self.onmessage=handleMessage;\\n\'});var co,ut,zr,bn,Ur,Di,po,Ue=te(()=>{"use strict";co=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${e}`)}},ut=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${e}`)}},zr=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],bn=e=>{switch(e){case"float16":return Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Ur=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Di=e=>e==="float32"||e==="int32"||e==="int64"||e==="bool"||e==="float16"||e==="uint32",po=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var wn=te(()=>{"use strict"});var zi=te(()=>{"use strict";wn()});var Ui,Vi=te(()=>{"use strict";Ui="1.18.0"});var Wi,Yt,mo=te(()=>{"use strict";Vi();Wi="warning",Yt={wasm:{},webgl:{},webgpu:{},versions:{common:Ui},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Wi=e}},get logLevel(){return Wi}};Object.defineProperty(Yt,"logLevel",{enumerable:!0})});var dr,Ni=te(()=>{"use strict";mo();dr=Yt});var Hi=te(()=>{"use strict"});var Gi=te(()=>{"use strict";vn()});var Fi=te(()=>{"use strict"});var ji=te(()=>{"use strict";vn()});var vn=te(()=>{"use strict";Hi();Gi();Fi();ji()});var $n=te(()=>{"use strict";vn()});var fo,qi,Zt,Xt,ho=te(()=>{"use strict";mo();fo=(e,t)=>{Yt.wasm.trace&&console.timeStamp(`${e}::ORT::${t}`)},qi=(e,t)=>{let r=new Error().stack?.split(/\\r\\n|\\r|\\n/g)||[],o=!1;for(let i=0;i<r.length;i++){if(o&&!r[i].includes("TRACE_FUNC")){let u=`FUNC_${e}::${r[i].trim().split(" ")[1]}`;t&&(u+=`::${t}`),fo("CPU",u);return}r[i].includes("TRACE_FUNC")&&(o=!0)}},Zt=e=>{Yt.wasm.trace&&qi("BEGIN",e)},Xt=e=>{Yt.wasm.trace&&qi("END",e)}});var Ki=te(()=>{"use strict";wn();$n();ho()});var Yi=te(()=>{"use strict";Ki()});var Zi=te(()=>{"use strict"});var Xi=te(()=>{"use strict";wn();$n()});var Ji=te(()=>{"use strict";Xi()});var cr=te(()=>{"use strict";zi();Ni();Yi();$n();ho();Zi();Ji()});var Jl,Ql,Qi,ea,ta,ed,De,Ut=te(()=>{"use strict";Ue();Jl=["V","I","W","E","F"],Ql=(e,t)=>{console.log(`[${Jl[e]},${new Date().toISOString()}]${t}`)},ta=(e,t)=>{Qi=e,ea=t},ed=(e,t)=>{let r=Ur(e),o=Ur(Qi);r>=o&&Ql(r,typeof t=="function"?t():t)},De=(...e)=>{ea&&ed(...e)}});var ra,na=te(()=>{"use strict";Ue();ra=(e,t)=>new(bn(t))(e)});var Sn=te(()=>{"use strict"});var _n,td,oa,yo,go,aa,sa=te(()=>{"use strict";Ut();Sn();_n=e=>Math.ceil(e/16)*16,td=1,oa=()=>td++,yo=async(e,t,r,o)=>{let i=_n(r),u=e.device.createBuffer({size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let a=e.getCommandEncoder();e.endComputePass(),a.copyBufferToBuffer(t,0,u,0,i),e.flush(),await u.mapAsync(GPUMapMode.READ);let c=u.getMappedRange();if(o){let m=o();return m.set(new Uint8Array(c,0,r)),m}else return new Uint8Array(c.slice(0,r))}finally{u.destroy()}},go=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map}upload(t,r){let o=r.buffer,i=r.byteOffset,u=r.byteLength,a=_n(u),c=this.storageCache.get(t);if(!c)throw new Error("gpu data for uploading does not exist");if(c.originalSize!==u)throw new Error(`inconsistent data size. gpu data size=${c.originalSize}, data size=${u}`);let m=this.backend.device.createBuffer({mappedAtCreation:!0,size:a,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),g=m.getMappedRange();new Uint8Array(g).set(new Uint8Array(o,i,u)),m.unmap();let d=this.backend.getCommandEncoder();this.backend.endComputePass(),d.copyBufferToBuffer(m,0,c.gpuData.buffer,0,a),De("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(m)}memcpy(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("source gpu data for memcpy does not exist");let i=this.storageCache.get(r);if(!i)throw new Error("destination gpu data for memcpy does not exist");if(o.originalSize!==i.originalSize)throw new Error("inconsistent source and destination gpu data size");let u=_n(o.originalSize),a=this.backend.getCommandEncoder();this.backend.endComputePass(),a.copyBufferToBuffer(o.gpuData.buffer,0,i.gpuData.buffer,0,u)}registerExternalBuffer(t,r,o){let i;if(o){if(i=this.externalBuffers.get(o),i===void 0)throw new Error("previous buffer is not registered");if(t===o)return De("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${i}, buffer is the same, skip.`),i;this.externalBuffers.delete(o)}else i=oa();return this.storageCache.set(i,{gpuData:{id:i,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,i),De("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${i}, registered.`),i}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),De("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let o=_n(t),i,u=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,a=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(u||a){let m=u?this.freeBuffers:this.freeUniformBuffers,g=m.get(o);g||(g=[],m.set(o,g)),g.length>0?i=g.pop():i=this.backend.device.createBuffer({size:o,usage:r})}else i=this.backend.device.createBuffer({size:o,usage:r});let c={id:oa(),type:0,buffer:i};return this.storageCache.set(c.id,{gpuData:c,originalSize:t}),De("verbose",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${c.id}`),c}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error("releasing data does not exist");return De("verbose",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let o=this.storageCache.get(t);if(!o)throw new Error("data does not exist");await yo(this.backend,o.gpuData.buffer,o.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();this.buffersForUploadingPending=[];for(let t of this.buffersPending)(t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(t.size).push(t):(t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM?this.freeUniformBuffers.get(t.size).push(t):t.destroy();this.buffersPending=[]}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map}},aa=(...e)=>new go(...e)});var bo,ve,je=te(()=>{"use strict";bo=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(";")),this.key}},ve=e=>new bo(e)});var wo,$t,N,Jt,xn,Cn,An,Ae=te(()=>{"use strict";wo=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},$t=class{static calcShape(t,r,o=!1){let i=t.length,u=r.length;if(i===0)return r;if(u===0)return t;let a=Math.max(t.length,r.length),c=new Array(a);if(o){if(i<2||u<2)return;let m=wo.calcMatMulShape([t[i-2],t[i-1]],[r[u-2],r[u-1]]);if(m===void 0)return;[c[a-2],c[a-1]]=m}for(let m=o?3:1;m<=a;m++){let g=i-m<0?1:t[i-m],d=u-m<0?1:r[u-m];if(g!==d&&g>1&&d>1)return;c[a-m]=Math.max(g,d)}return c}static isValidBroadcast(t,r){let o=t.length,i=r.length;if(o>i)return!1;for(let u=1;u<=o;u++)if(t[o-u]!==1&&t[o-u]!==r[i-u])return!1;return!0}},N=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,o){let i=1;for(let u=r;u<o;u++){if(t[u]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");i*=t[u]}return i}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let o=new Array(r);o[r-1]=1,o[r-2]=t[r-1];for(let i=r-3;i>=0;--i)o[i]=o[i+1]*t[i+1];return o}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error("unsupported axis for this operation.");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(o=>this.normalizeAxis(o,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(o=>t[o]):t.slice().reverse()}static padShape(t,r){let o=t.length;return t.map((i,u)=>i+r[u]+r[u+o])}static areEqual(t,r){return t.length!==r.length?!1:t.every((o,i)=>o===r[i])}},Jt=class e{static adjustPoolAttributes(t,r,o,i,u,a){if(!t&&o.length!==r.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(t)for(let c=0;c<r.length-2;c++)c>=o.length?o.push(r[c+2]):o[c]=r[c+2];for(let c=0;c<o.length;c++)if(c<i.length){if(i[c]<0)throw new Error("strides should be greater than or equal to 1")}else i.push(1);for(let c=0;c<o.length;c++)if(c<u.length){if(u[c]<0)throw new Error("dilations should be greater than or equal to 1")}else u.push(1);for(let c=0;c<o.length*2;c++)if(c<a.length){if(a[c]<0)throw new Error("pad should be greater than or equal to 1")}else a.push(0);for(let c=0;c<o.length;c++){if(o[c]<=0)throw new Error("kernel shapes need to be greater than 0");if(a[c]>=o[c]||a[c+o.length]>=o[c])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(t,r,o,i,u,a,c){if(c){if(u.length!==2*(t.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(r.length!==t.length-2)throw new Error("length of strides should be the length of data dimensions");if(i.length!==t.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let m=0;m<t.length-2;m++)e.adjustPadAndReturnShape(t[m+(a?1:2)],r[m],o[m],i[m],u,m,m+t.length-2,c)}}static computePoolOutputShape(t,r,o,i,u,a,c){if(r.length<=0)throw new Error("input shape must be of size greater than 0");let m=[r[0],r[1]];return e.computeShapeHelper(t,r,m,o,i,u,a,c),m}static computeConvOutputShape(t,r,o,i,u,a,c){if(t.length<=0||r.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let m=[t[0],r[0]];return e.computeShapeHelper(!1,t,m,o,i,u,a,c),m}static computeShapeHelper(t,r,o,i,u,a,c,m){if(t)for(let g=0;g<r.length-2;g++)o.push(1);else for(let g=0;g<r.length-2;g++)o.push(e.adjustPadAndReturnShape(r[g+2],i[g],u[g],a[g],c,g,g+r.length-2,m))}static adjustPadAndReturnShape(t,r,o,i,u,a,c,m){let g=o*(i-1)+1;if(m&&m!=="NOTSET")switch(m){case"VALID":return u[a]=0,u[c]=0,Math.floor((t-g)/r+1);case"SAME_LOWER":case"SAME_UPPER":if(o!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let b=((t+r-1)/r-1)*r+i-t;return u[a]=Math.floor(m==="SAME_LOWER"?(b+1)/2:b/2),u[c]=b-u[a],Math.floor((t+b-i)/r+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((t+u[a]+u[c]-g)/r+1)}},xn=class{static getShapeOfGemmResult(t,r,o,i,u){if(t.length!==2||o.length!==2)throw new Error("shape need to be of size 2");let a,c,m;r?(a=t[1],c=t[0]):(a=t[0],c=t[1]);let g=-1;if(i?(m=o[0],g=1):(m=o[1],g=0),o[g]!==c)throw new Error("dimension mismatch");if(a<=0||m<=0||c<=0)throw new Error("invalid shape specified");if(u&&!$t.isValidBroadcast(u,[a,m]))throw new Error("gemm: invalid bias shape for broadcast");return[a,m,c]}},Cn=-34028234663852886e22,An=34028234663852886e22});var rd,$o,Ne,gt,K,He,Xe,yt,lt,ce,So,V,ee,In,vo,ua,pr,Be,xe=te(()=>{"use strict";Ue();Ae();rd=64,$o=(e,t)=>{if(t===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(e){case 10:return t>1?`vec${t}<f16>`:"f16";case 1:return t>1?`vec${t}<f32>`:"f32";case 6:return t>1?`vec${t}<i32>`:"i32";case 12:return t>1?`vec${t}<u32>`:"u32";case 7:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(t>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(t!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];default:throw new Error(`Unknown data type: ${e}`)}},Ne=(e,t=1)=>{let r=$o(e,t);return typeof r=="string"?r:r[0]},gt=(e,t=1)=>{let r=$o(e,t);return typeof r=="string"?r:r[1]},K=e=>e.length===0?[]:[{type:"uint32",data:e},{type:"uint32",data:N.computeStrides(e)}],He=e=>e%4===0?4:e%2===0?2:1,Xe=(e="f32",t,r="0")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,yt=(e,t,r)=>e==="f32"?r:t===1?`f32(${r})`:`vec${t}f(${r})`,lt=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,ce=(e,t,r)=>e.startsWith("uniforms.")&&r>4?typeof t=="string"?`${e}[(${t}) / 4][(${t}) % 4]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,So=(e,t,r,o,i)=>{let u=typeof r=="number",a=u?r:r.length,c=[...new Array(a).keys()],m=a<2?"u32":a<=4?`vec${a}<u32>`:`array<u32, ${a}>`,g=$o(t,i),d=typeof g=="string"?g:g[1],b=typeof g=="string"?g:g[0],v={indices:m,value:d,storage:b,tensor:t},S=F=>typeof F=="string"?F:`${F}u`,w={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},C=u?"uniforms.":"",O=`${C}${e}_shape`,A=`${C}${e}_strides`,_="";for(let F=0;F<a-1;F++)_+=`\n    let dim${F} = current / ${ce(A,F,a)};\n    let rest${F} = current % ${ce(A,F,a)};\n    indices[${F}] = dim${F};\n    current = rest${F};\n    `;_+=`indices[${a-1}] = current;`;let E=a<2?"":`\n  fn o2i_${e}(offset: u32) -> ${v.indices} {\n    var indices: ${v.indices};\n    var current = offset;\n    ${_}\n    return indices;\n  }`,T=F=>(w.offsetToIndices=!0,a<2?F:`o2i_${e}(${F})`),U=[];if(a>=2)for(let F=a-1;F>=0;F--)U.push(`${ce(A,F,a)} * (indices[${F}])`);let B=a<2?"":`\n  fn i2o_${e}(indices: ${v.indices}) -> u32 {\n    return ${U.join("+")};\n  }`,W=F=>(w.indicesToOffset=!0,a<2?F:`i2o_${e}(${F})`),H=(...F)=>a===0?"0u":`${v.indices}(${F.map(S).join(",")})`,J=(F,oe)=>a<2?`${F}`:`${ce(F,oe,a)}`,D=(F,oe,he)=>a<2?`${F}=${he};`:`${ce(F,oe,a)}=${he};`,j={},se=(F,oe)=>{w.broadcastedIndicesToOffset=!0;let he=`${oe.name}broadcastedIndicesTo${e}Offset`;if(he in j)return`${he}(${F})`;let Je=[];for(let ot=a-1;ot>=0;ot--){let ke=oe.indicesGet("outputIndices",ot+oe.rank-a);Je.push(`${J(A,ot)} * (${ke} % ${J(O,ot)})`)}return j[he]=`fn ${he}(outputIndices: ${oe.type.indices}) -> u32 {\n             return ${Je.length>0?Je.join("+"):"0u"};\n           }`,`${he}(${F})`},be=(F,oe)=>(()=>{if(v.storage===v.value)return`${e}[${F}]=${oe};`;if(v.storage==="vec2<u32>"&&v.value==="i32")return`${e}[${F}]=vec2<u32>(u32(${oe}), select(0u, 0xFFFFFFFFu, ${oe} < 0));`;if(v.storage==="vec2<u32>"&&v.value==="u32")return`${e}[${F}]=vec2<u32>(u32(${oe}), 0u);`;if(v.storage==="u32"&&v.value==="vec4<bool>")return`${e}[${F}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${oe}));`;throw new Error(`not supported combination of storage type ${v.storage} and value type ${v.value} yet`)})(),re=F=>(()=>{if(v.storage===v.value)return`${e}[${F}]`;if(v.storage==="vec2<u32>"&&v.value==="i32")return`i32(${e}[${F}].x)`;if(v.storage==="vec2<u32>"&&v.value==="u32")return`u32(${e}[${F}].x)`;if(v.storage==="u32"&&v.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${F}] & 0xFFu), bool(${e}[${F}] & 0xFF00u), bool(${e}[${F}] & 0xFF0000u), bool(${e}[${F}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${v.storage} and value type ${v.value} yet`)})(),$e=a<2?"":`\n  fn get_${e}ByIndices(indices: ${v.indices}) -> ${d} {\n    return ${re(`i2o_${e}(indices)`)};\n  }`,Ge=a<2?"":(()=>{let F=c.map(he=>`d${he}: u32`).join(", "),oe=c.map(he=>`d${he}`).join(", ");return`\n  fn get_${e}(${F}) -> ${d} {\n    return get_${e}ByIndices(${H(oe)});\n  }`})(),ge=(...F)=>{if(F.length!==a)throw new Error(`indices length must be ${a}`);let oe=F.map(S).join(",");return a===0?re("0u"):a===1?re(oe[0]):(w.get=!0,w.getByIndices=!0,w.indicesToOffset=!0,`get_${e}(${oe})`)},Te=F=>a<2?re(F):(w.getByIndices=!0,w.indicesToOffset=!0,`get_${e}ByIndices(${F})`),pe=a<2?"":`\n  fn set_${e}ByIndices(indices: ${v.indices}, value: ${d}) {\n    ${be(`i2o_${e}(indices)`,"value")}\n  }`,we=a<2?"":(()=>{let F=c.map(he=>`d${he}: u32`).join(", "),oe=c.map(he=>`d${he}`).join(", ");return`\n  fn set_${e}(${F}, value: ${d}) {\n    set_${e}ByIndices(${H(oe)}, value);\n  }`})();return{impl:()=>{let F=[],oe=!1;return w.offsetToIndices&&(F.push(E),oe=!0),w.indicesToOffset&&(F.push(B),oe=!0),w.broadcastedIndicesToOffset&&(Object.values(j).forEach(he=>F.push(he)),oe=!0),w.set&&(F.push(we),oe=!0),w.setByIndices&&(F.push(pe),oe=!0),w.get&&(F.push(Ge),oe=!0),w.getByIndices&&(F.push($e),oe=!0),!u&&oe&&F.unshift(`const ${O} = ${v.indices}(${r.join(",")});`,`const ${A} = ${v.indices}(${N.computeStrides(r).join(",")});`),F.join(`\n`)},type:v,offsetToIndices:T,indicesToOffset:W,broadcastedIndicesToOffset:se,indices:H,indicesGet:J,indicesSet:D,set:(...F)=>{if(F.length!==a+1)throw new Error(`indices length must be ${a}`);let oe=F[a];if(typeof oe!="string")throw new Error("value must be string");let he=F.slice(0,a).map(S).join(",");return a===0?be("0u",oe):a===1?be(he[0],oe):(w.set=!0,w.setByIndices=!0,w.indicesToOffset=!0,`set_${e}(${he}, ${oe})`)},setByOffset:be,setByIndices:(F,oe)=>a<2?be(F,oe):(w.setByIndices=!0,w.indicesToOffset=!0,`set_${e}ByIndices(${F}, ${oe});`),get:ge,getByOffset:re,getByIndices:Te,usage:o,name:e,strides:A,shape:O,rank:a}},V=(e,t,r,o=1)=>So(e,t,r,"input",o),ee=(e,t,r,o=1)=>So(e,t,r,"output",o),In=(e,t,r,o=1)=>So(e,t,r,"internal",o),vo=class{constructor(t){this.normalizedDispatchGroup=t;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t=="number"?`${t}u`:t}) { return; }`}mainStart(t=rd){let r=typeof t=="number"?t:t[0],o=typeof t=="number"?1:t[1],i=typeof t=="number"?1:t[2],u=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,a=u?`@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`,c=u?"let global_idx = global_id.x; let local_idx = local_id.x;":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*o*i}u + local_idx;`;return`@compute @workgroup_size(${r}, ${o}, ${i})\n  fn main(${a}) {\n    ${c}\n  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith("uniforms.")&&this.uniforms.push({name:t.shape.replace("uniforms.",""),type:"u32",length:t.rank}),t.strides.startsWith("uniforms.")&&this.uniforms.push({name:t.strides.replace("uniforms.",""),type:"u32",length:t.rank}))}declareVariable(t,r){if(t.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(t),this.appendVariableUniforms(t);let o=t.usage==="input"?"read":"read_write",i=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${o}> ${t.name}: array<${i}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`\n`)}registerInternalVariable(t){if(t.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,o=1){return this.uniforms.push({name:t,type:r,length:o}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let t=[];for(let{name:r,type:o,length:i}of this.uniforms)if(i&&i>4)t.push(`${r}:array<vec4<${o}>, ${Math.ceil(i/4)}>`);else{let u=i==null||i===1?o:`vec${i}<${o}>`;t.push(`${r}:${u}`)}return`\n      struct Uniforms { ${t.join(", ")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`\n`)+this.internalVariables.map(t=>t.impl()).join(`\n`)}},ua=e=>new vo(e),pr=(e,t)=>{let r=e.length,o=[];for(let i=0;i<r;i++){let u=r-1-i,a=e[u]||1;(t[t.length-1-i]||1)>1&&a===1&&o.unshift(u)}return o},Be=e=>!0});var nd,la,od,id,bt,da,ca,mr=te(()=>{"use strict";Ae();je();xe();nd=e=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.")},la=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,od=(e,t)=>N.sortBasedOnPerm(e,la(e.length,t)),id=(e,t,r,o)=>{let i=[];i.push(`fn perm(i: ${o.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);for(let u=0;u<t;++u)i.push(r.indicesSet("a",e[u],`i[${u}]`));return i.push("return a;}"),i.join(`\n`)},bt=(e,t)=>{let r=e.dataType,o=e.dims.length,i=la(o,t),u=Be(o),a=od(e.dims,i),c=u?a.length:a,m=u?o:e.dims,g=ee("output",r,c),d=V("a",r,m),b=v=>`\n  ${v.registerUniform("output_size","u32").declareVariables(d,g)}\n\n  ${id(i,o,d,g)}\n\n  ${v.mainStart()}\n    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let indices = ${g.offsetToIndices("global_idx")};\n    let aIndices = perm(indices);\n\n    ${g.setByOffset("global_idx",d.getByIndices("aIndices"))}\n  }`;return{name:"Transpose",shaderCache:{hint:`${t}`,inputDependencies:u?["rank"]:["dims"]},getRunData:v=>{let S=N.size(a);return{outputs:[{dims:a,dataType:v[0].dataType}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:u?[{type:"uint32",data:S},...K(v[0].dims),...K(a)]:[{type:"uint32",data:S}]}},getShaderSource:b}},da=(e,t)=>{nd(e.inputs),e.compute(bt(e.inputs[0],t.perm))},ca=e=>ve({perm:e.perm})});var ad,sd,ud,ld,dd,cd,pd,md,fd,hd,St,pa,ma,fa,ha,ga,ya,ba,wa,va,$a,Sa=te(()=>{"use strict";Ae();xe();Tn();mr();ad={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},sd={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},ud={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},ld={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},dd=(e,t)=>{let r=[];for(let o=t-e;o<t;++o)r.push(o);return r},cd=(e,t)=>{let r=[],o=e.length;for(let u=0;u<o;u++)t.indexOf(u)===-1&&r.push(e[u]);let i=t.map(u=>e[u]);return[r,i]},pd=(e,t)=>{let r=e.length+t.length,o=[],i=0;for(let u=0;u<r;u++)t.indexOf(u)===-1?o.push(e[i++]):o.push(1);return o},md=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},fd=(e,t)=>{let r=[];if(!md(e,t)){for(let o=0;o<t;++o)e.indexOf(o)===-1&&r.push(o);e.forEach(o=>r.push(o))}return r},hd=(e,t,r,o,i,u,a)=>{let c=r[0].dims,m=N.size(u),g=N.size(a),d=V("_A",r[0].dataType,c),b=ee("output",i,u),v=32,S=`\n          var<workgroup> aBestValues : array<${b.type.storage}, ${v}>;\n       `;return{name:e,shaderCache:t,getShaderSource:C=>`\n        ${C.registerUniform("reduceSize","u32").declareVariables(d,b)}\n        ${S}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${C.mainStart(v)}\n\n          let outputIndex = global_idx / ${v};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = ${b.type.storage}(${ud[o]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${v}) {\n           let candidate = ${b.type.storage}(${d.getByOffset("offset + k")});\n           bestValue = ${ad[o]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${v}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${sd[o]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${b.setByOffset("outputIndex",`${o==="mean"?`bestValue / ${b.type.storage}(uniforms.reduceSize)`:`${ld[o]}`}`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:u,dataType:i}],dispatchGroup:{x:m},programUniforms:[{type:"uint32",data:g}]})}},St=(e,t,r,o)=>{let i=e.inputs.length===1?r:_o(e.inputs,r),u=i.axes;u.length===0&&!i.noopWithEmptyAxes&&(u=e.inputs[0].dims.map((S,w)=>w));let a=N.normalizeAxes(u,e.inputs[0].dims.length),c=a,m=e.inputs[0],g=fd(c,e.inputs[0].dims.length);g.length>0&&(m=e.compute(bt(e.inputs[0],g),{inputs:[0],outputs:[-1]})[0],c=dd(c.length,m.dims.length));let[d,b]=cd(m.dims,c),v=d;i.keepDims&&(v=pd(d,a)),e.compute(hd(t,{hint:i.cacheKey,inputDependencies:["type"]},[m],o,e.inputs[0].dataType,v,b),{inputs:[m]})},pa=(e,t)=>{St(e,"ReduceMeanShared",t,"mean")},ma=(e,t)=>{St(e,"ReduceL1Shared",t,"l1")},fa=(e,t)=>{St(e,"ReduceL2Shared",t,"l2")},ha=(e,t)=>{St(e,"ReduceLogSumExpShared",t,"logSumExp")},ga=(e,t)=>{St(e,"ReduceMaxShared",t,"max")},ya=(e,t)=>{St(e,"ReduceMinShared",t,"min")},ba=(e,t)=>{St(e,"ReduceProdShared",t,"prod")},wa=(e,t)=>{St(e,"ReduceSumShared",t,"sum")},va=(e,t)=>{St(e,"ReduceSumSquareShared",t,"sumSquare")},$a=(e,t)=>{St(e,"ReduceLogSumShared",t,"logSum")}});var _t,gd,En,_o,xt,yd,bd,wd,vd,$d,Sd,_d,xd,Cd,Ad,Ct,_a,xa,Ca,Aa,Ia,Ta,Ea,Oa,Pa,ka,Tn=te(()=>{"use strict";Ae();je();xe();Sa();_t=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},gd=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],En=(e,t,r,o,i,u,a=!1,c=!1)=>{let m=[],g=r[0].dims,d=g.length,b=N.normalizeAxes(i,d),v=!c&&b.length===0;g.forEach((O,A)=>{v||b.indexOf(A)>=0?a&&m.push(1):m.push(O)});let S=m.length,w=N.size(m);return{name:e,shaderCache:t,getShaderSource:O=>{let A=[],_=V("_A",r[0].dataType,d),E=ee("output",u,S),T=o(_,E,b),U=T[2];for(let B=0,W=0;B<d;B++)v||b.indexOf(B)>=0?(a&&W++,U=`for(var j${B}: u32 = 0; j${B} < ${g[B]}; j${B}++) {\n                  ${T[2].includes("last_index")?`let last_index = j${B};`:""}\n                  ${_.indicesSet("input_indices",B,`j${B}`)}\n                  ${U}\n                }`):(A.push(`${_.indicesSet("input_indices",B,E.indicesGet("output_indices",W))};`),W++);return`\n\n        ${O.registerUniform("output_size","u32").declareVariables(_,E)}\n\n        ${O.mainStart()}\n          ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n          var input_indices: ${_.type.indices};\n          let output_indices = ${E.offsetToIndices("global_idx")};\n\n          ${A.join(`\n`)}\n          ${T[0]}       // init ops for reduce max/min\n          ${T[1]}\n          ${U}\n          ${T[3]}\n          ${T.length===4?E.setByOffset("global_idx","value"):T.slice(4).join(`\n`)}\n        }`},getRunData:()=>({outputs:[{dims:m,dataType:u}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:[{type:"uint32",data:w},...K(g),...K(m)]})}},_o=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(o=>r.push(Number(o))),ve({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},xt=(e,t,r,o)=>{let i=e.inputs,u=i.length===1?r:_o(i,r);e.compute(En(t,{hint:u.cacheKey,inputDependencies:["rank"]},[i[0]],u.noopWithEmptyAxes&&u.axes.length===0?gd:o,u.axes,i[0].dataType,u.keepDims,u.noopWithEmptyAxes),{inputs:[0]})},yd=(e,t)=>{_t(e.inputs),xt(e,"ReduceLogSum",t,(o,i)=>[`var value = ${i.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,"value = log(value);"])},bd=(e,t)=>{_t(e.inputs),xt(e,"ReduceL1",t,(o,i)=>[`var value = ${i.type.storage}(0);`,"",`value += abs(${o.getByIndices("input_indices")});`,""])},wd=(e,t)=>{_t(e.inputs),xt(e,"ReduceL2",t,(o,i)=>[`var t = ${i.type.value}(0); var value = ${i.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},vd=(e,t)=>{_t(e.inputs),xt(e,"ReduceLogSumExp",t,(o,i)=>[`var value = ${i.type.storage}(0);`,"",`value += exp(${o.getByIndices("input_indices")});`,"value = log(value);"])},$d=(e,t)=>{_t(e.inputs),xt(e,"ReduceMax",t,(o,i,u)=>{let a=[];for(let c=0;c<o.rank;c++)(u.indexOf(c)>=0||u.length===0)&&a.push(o.indicesSet("input_indices",c,0));return[`${a.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = max(value, ${o.getByIndices("input_indices")});`,""]})},Sd=(e,t)=>{_t(e.inputs),xt(e,"ReduceMean",t,(o,i,u)=>{let a=1;for(let c=0;c<o.rank;c++)(u.indexOf(c)>=0||u.length===0)&&(a*=e.inputs[0].dims[c]);return["var sum = f32(0);","",`sum += f32(${o.getByIndices("input_indices")});`,`let value = ${i.type.value}(sum / ${a});`]})},_d=(e,t)=>{_t(e.inputs),xt(e,"ReduceMin",t,(o,i,u)=>{let a=[];for(let c=0;c<o.rank;c++)(u.indexOf(c)>=0||u.length===0)&&a.push(`input_indices[${c}] = 0;`);return[`${a.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};`,`value = min(value, ${o.getByIndices("input_indices")});`,""]})},xd=(e,t)=>{_t(e.inputs),xt(e,"ReduceProd",t,(o,i)=>[`var value = ${i.type.storage}(1);`,"",`value *= ${o.getByIndices("input_indices")};`,""])},Cd=(e,t)=>{_t(e.inputs),xt(e,"ReduceSum",t,(o,i)=>[`var value = ${i.type.storage}(0);`,"",`value += ${o.getByIndices("input_indices")};`,""])},Ad=(e,t)=>{_t(e.inputs),xt(e,"ReduceSumSquare",t,(o,i)=>[`var t = ${i.type.value}(0); var value = ${i.type.value}(0);`,"",`t = ${o.getByIndices("input_indices")}; value += t * t;`,""])},Ct=(e,t,r)=>{if(t.length===0)return r;let o=1,i=1;for(let u=0;u<t.length;u++)t.indexOf(u)===-1?o*=e[u]:i*=e[u];return i<32&&o>1024},_a=(e,t)=>{Ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Sd(e,t):pa(e,t)},xa=(e,t)=>{Ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?bd(e,t):ma(e,t)},Ca=(e,t)=>{Ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?wd(e,t):fa(e,t)},Aa=(e,t)=>{Ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?vd(e,t):ha(e,t)},Ia=(e,t)=>{Ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?$d(e,t):ga(e,t)},Ta=(e,t)=>{Ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?_d(e,t):ya(e,t)},Ea=(e,t)=>{Ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?xd(e,t):ba(e,t)},Oa=(e,t)=>{Ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Cd(e,t):wa(e,t)},Pa=(e,t)=>{Ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Ad(e,t):va(e,t)},ka=(e,t)=>{Ct(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?yd(e,t):$a(e,t)}});var Ra,Ba,Da,xo,Ma=te(()=>{"use strict";Ue();je();Tn();Ra=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},Ba=(e,t)=>{Ra(e.inputs);let r=(o,i,u)=>{let a=[];for(let c=0;c<o.rank;c++)(u.indexOf(c)>=0||u.length===0)&&a.push(`input_indices[${c}] = 0;`);return[`${a.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?"<=":"<"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",i.setByOffset("global_idx","best_index")]};e.compute(En("ArgMin",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},Da=(e,t)=>{Ra(e.inputs);let r=(o,i,u)=>{let a=[];for(let c=0;c<o.rank;c++)(u.indexOf(c)>=0||u.length===0)&&a.push(`input_indices[${c}] = 0;`);return[`${a.join(`\n`)}`,`var value = ${o.getByIndices("input_indices")};\nvar best_index : i32 = 0;`,`if (${o.getByIndices("input_indices")} ${t.selectLastIndex>0?">=":">"} value) {\n         value = ${o.getByIndices("input_indices")};\n         best_index = i32(last_index);\n       }`,"",i.setByOffset("global_idx","best_index")]};e.compute(En("argMax",{hint:t.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},xo=e=>ve(e)});var Id,Td,Ed,Od,On,Pd,za,Co=te(()=>{"use strict";Ue();Sn();xe();Id=(e,t)=>{let r=e[0],o=e[1],i=e[2],u=e[3],a=e[4],c=e[5];if(a&&c)throw new Error("Attention cannot have both past and relative_position_bias");if(r.dims.length!==3)throw new Error(\'Input "input" must have 3 dimensions\');let m=r.dims[0],g=r.dims[1],d=r.dims[2];if(i.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimensions\');if(o.dims.length!==2)throw new Error(\'Input "weights" is expected to have 2 dimensions\');if(o.dims[0]!==d)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(i.dims[0]!==o.dims[1])throw new Error(\'Input "bias" dimension 0 should have same length as dimension 1 of input "weights"\');let b=i.dims[0]/3,v=b,S=v;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let E of t.qkvHiddenSizes)if(E%t.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");b=t.qkvHiddenSizes[0],v=t.qkvHiddenSizes[1],S=t.qkvHiddenSizes[2]}let w=g;if(b!==v)throw new Error("qkv_hidden_sizes first element should be same as the second");if(i.dims[0]!==b+v+S)throw new Error(\'Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes\');let C=0;if(a){if(v!==S)throw new Error(\'Input "past" expect k_hidden_size == v_hidden_size\');if(a.dims.length!==5)throw new Error(\'Input "past" must have 5 dimensions\');if(a.dims[0]!==2)throw new Error(\'Input "past" first dimension must be 2\');if(a.dims[1]!==m)throw new Error(\'Input "past" second dimension must be batch_size\');if(a.dims[2]!==t.numHeads)throw new Error(\'Input "past" third dimension must be num_heads\');if(a.dims[4]!==v/t.numHeads)throw new Error(\'Input "past" fifth dimension must be k_hidden_size / num_heads\');t.pastPresentShareBuffer||(C=a.dims[3])}let O=w+C,A=-1,_=0;if(u)throw new Error("Mask not supported");if(a)throw new Error("past is not supported");if(c)throw new Error("relativePositionBias is not supported");return{batchSize:m,sequenceLength:g,pastSequenceLength:C,kvSequenceLength:w,totalSequenceLength:O,maxSequenceLength:A,inputHiddenSize:d,hiddenSize:b,vHiddenSize:S,headSize:Math.floor(b/t.numHeads),vHeadSize:Math.floor(S/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:_,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Td=(e,t,r,o)=>{let i=He(o),u=64,a=o/i;a<u?u=1:a/8<64&&(u=Math.ceil(a/8));let c=Math.ceil(o/i/u),g=[{type:ut(t.dataType),data:1/o},{type:"uint32",data:a},{type:"uint32",data:c}],d=Ne(t.dataType,i),b=v=>{let S=ee("x",t.dataType,t.dims,i),w="thread_max_vector";i===2?w="max(thread_max_vector.x, thread_max_vector.y)":i===4&&(w="max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))");let C=gt(t.dataType),O=[{name:"d_inv",type:C},{name:"d_comp",type:"u32"},{name:"elements_per_wg",type:"u32"}];return`\n  var<workgroup> wgMax: array<f32, ${u}>;\n  var<workgroup> wgSum: array<f32, ${u}>;\n  ${v.registerUniforms(O).declareVariables(S)}\n  ${v.mainStart([u,1,1])}\n    let localOffset = local_idx * uniforms.elements_per_wg;\n    let offset: u32 = workgroup_id.x * uniforms.d_comp + localOffset;\n\n    var thread_max_vector = ${Xe("f32",i,"-3.402823e+38f")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      thread_max_vector = max(${yt(C,i,"x[offset + i]")}, thread_max_vector);\n    }\n    wgMax[local_idx] = ${w};\n    workgroupBarrier();\n\n    var maxValue = -3.402823e+38f;\n    for (var i = 0u; i < ${u}; i++) {\n      maxValue = max(wgMax[i], maxValue);\n    }\n\n    var sumVector = ${Xe("f32",i,"0")};\n    for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n      sumVector += exp(${yt(C,i,"x[offset + i]")} - maxValue);\n    }\n    wgSum[local_idx] = ${lt("sumVector",i)};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${u}; i++) {\n      sum += wgSum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        x[offset + i] = ${Xe("f32",i,"uniforms.d_inv")};\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_wg && i + localOffset < uniforms.d_comp; i++) {\n        let f32input = ${yt(C,i,"x[offset + i]")};\n        x[offset + i] = ${S.type.value}(exp(f32input - maxValue) / sum);\n      }\n    }\n  }`};e.compute({name:"AttentionProbsSoftmax",shaderCache:{hint:`${u};${d};${i}`},getShaderSource:b,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:g})},{inputs:[t],outputs:[]})},Ed=(e,t,r,o,i,u)=>{let a=[i.batchSize,i.numHeads,i.sequenceLength,i.kvSequenceLength+i.pastSequenceLength],c=u.scale===0?1/Math.sqrt(i.headSize):u.scale,m=He(i.headSize),g=i.headSize/m,d=12,b={x:Math.ceil(i.totalSequenceLength/d),y:Math.ceil(i.sequenceLength/d),z:i.batchSize*i.numHeads},v=ut(t.dataType),S=[{type:"uint32",data:i.sequenceLength},{type:"uint32",data:g},{type:"uint32",data:i.totalSequenceLength},{type:"uint32",data:i.kvSequenceLength},{type:v,data:c}],w=[t,r],C=A=>{let _=V("q",t.dataType,t.dims,m),E=V("key",r.dataType,r.dims,m),T=ee("output",t.dataType,a),U=Ne(t.dataType),B=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"alpha",type:U}];return`\n  const beta: ${U} = 1.0;\n  const TILE_SIZE = ${d}u;\n\n  var<workgroup> tileQ: array<${_.type.storage}, ${d*d}>;\n  var<workgroup> tileK: array<${_.type.storage}, ${d*d}>;\n  ${A.registerUniforms(B).declareVariables(_,E,T)}\n  ${A.mainStart([d,d,1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let lm = m + local_id.y;\n    let ln = n + local_id.x;\n\n    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;\n    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx + n * uniforms.K;\n\n    var value = ${Xe(U,m)};\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m + local_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        tileK[TILE_SIZE * local_id.y + local_id.x] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * uniforms.M * uniforms.N;\n    if (lm < uniforms.M && ln < uniforms.N) {\n      let outputIdx = headOffset + lm * uniforms.N + ln;\n      output[outputIdx] = ${lt("value",m)} * uniforms.alpha;\n    }\n  }`},O=e.compute({name:"AttentionProbs",shaderCache:{hint:`${m}`,inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:a,dataType:t.dataType,gpuDataType:0}],dispatchGroup:b,programUniforms:S}),getShaderSource:C},{inputs:w,outputs:[-1]})[0];return Td(e,O,i.batchSize*i.numHeads*i.sequenceLength,i.totalSequenceLength),O},Od=(e,t,r,o)=>{let i=[o.batchSize,o.sequenceLength,o.vHiddenSize],u=12,a={x:Math.ceil(o.vHeadSize/u),y:Math.ceil(o.sequenceLength/u),z:o.batchSize*o.numHeads},c=[{type:"uint32",data:o.sequenceLength},{type:"uint32",data:o.totalSequenceLength},{type:"uint32",data:o.vHeadSize},{type:"uint32",data:o.numHeads},{type:"uint32",data:o.vHiddenSize}],m=g=>{let d=V("probs",t.dataType,t.dims),b=V("v",r.dataType,r.dims),v=ee("output",t.dataType,i),S=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"v_hidden_size",type:"u32"}];return`\n  const TILE_SIZE = ${u}u;\n  var<workgroup> tileQ: array<${d.type.value}, ${u*u}>;\n  var<workgroup> tileK: array<${d.type.value}, ${u*u}>;\n  ${g.registerUniforms(S).declareVariables(d,b,v)}\n  ${g.mainStart([u,u,1])}\n   let headIdx = workgroup_id.z;\n   let m = workgroup_id.y * TILE_SIZE + local_id.y;\n   let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;\n   let offsetB = headIdx * (uniforms.N * uniforms.K) + n;\n\n   var value = ${d.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n     if (m < uniforms.M && w + local_id.x < uniforms.K) {\n       tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n     }\n     if (n < uniforms.N && w + local_id.y < uniforms.K) {\n       tileK[TILE_SIZE * local_id.y + local_id.x] = v[offsetB + (w + local_id.y) * uniforms.N];\n     }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;\n   let headOffset = (batchIdx * uniforms.M * uniforms.num_heads + currentBatchHeadNumber) * uniforms.N;\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M *uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + currentBatchHeadNumber * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`};return e.compute({name:"AttentionScore",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType,gpuDataType:0}],dispatchGroup:a,programUniforms:c}),getShaderSource:m},{inputs:[t,r],outputs:[0]})[0]},On=(e,t,r,o,i,u,a,c,m,g,d)=>{let b=Ed(e,t,r,m,g,d);Od(e,b,o,g)},Pd=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],o=t.sequenceLength,i=t.inputHiddenSize,u=t.headSize,a=12,c={x:Math.ceil(t.headSize/a),y:Math.ceil(t.sequenceLength/a),z:t.batchSize*t.numHeads},m=[e.inputs[0],e.inputs[1],e.inputs[2]],g=[{type:"uint32",data:o},{type:"uint32",data:i},{type:"uint32",data:u},{type:"uint32",data:t.numHeads},{type:"uint32",data:t.headSize},{type:"uint32",data:t.hiddenSize},{type:"uint32",data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],d=b=>{let v=ee("output_q",m[0].dataType,r),S=ee("output_k",m[0].dataType,r),w=ee("output_v",m[0].dataType,r),C=V("input",m[0].dataType,m[0].dims),O=V("weight",m[1].dataType,m[1].dims),A=V("bias",m[2].dataType,m[2].dims),_=C.type.storage,E=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`\n  const TILE_SIZE = ${a}u;\n  var<workgroup> tileInput: array<${_}, ${a*a}>;\n  var<workgroup> tileWeightQ: array<${_}, ${a*a}>;\n  var<workgroup> tileWeightK: array<${_}, ${a*a}>;\n  var<workgroup> tileWeightV: array<${_}, ${a*a}>;\n  ${b.registerUniforms(E).declareVariables(C,O,A,v,S,w)}\n  ${b.mainStart([a,a,1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = workgroup_id.y * TILE_SIZE + local_id.y;\n    let n = workgroup_id.x * TILE_SIZE + local_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${_}(0);\n    var valueK = ${_}(0);\n    var valueV = ${_}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:c,programUniforms:g}),getShaderSource:d},{inputs:m,outputs:[-1,-1,-1]})},za=(e,t)=>{let r=Id(e.inputs,t),[o,i,u]=Pd(e,r);return On(e,o,i,u,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var kd,Rd,Bd,Ua,Va=te(()=>{"use strict";cr();Ae();je();xe();kd=(e,t)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let r=(o,i,u)=>{let a=i.length;if(a!==o.length)throw new Error(`${u}: num dimensions != ${a}`);i.forEach((c,m)=>{if(c!==o[m])throw new Error(`${u}: dim[${m}] do not match`)})};if(e[0].dims.length>1){let o=t.format==="NHWC"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,o,"Invalid input scale"),r(e[2].dims,o,"Invalid input B"),r(e[3].dims,o,"Invalid input mean"),r(e[4].dims,o,"Invalid input var")}else r(e[1].dims,[1],"Invalid input scale"),r(e[2].dims,[1],"Invalid input B"),r(e[3].dims,[1],"Invalid input mean"),r(e[4].dims,[1],"Invalid input var")},Rd=(e,t)=>{let{epsilon:r,spatial:o,format:i}=t,u=e[0].dims,a=o?He(u[u.length-1]):1,c=i==="NHWC"&&u.length>1?a:1,m=N.size(u)/a,g=Be(u.length)&&o,d=g?u.length:u,b=V("x",e[0].dataType,e[0].dims,a),v=V("scale",e[1].dataType,e[1].dims,c),S=V("bias",e[2].dataType,e[2].dims,c),w=V("inputMean",e[3].dataType,e[3].dims,c),C=V("inputVar",e[4].dataType,e[4].dims,c),O=ee("y",e[0].dataType,d,a),A=()=>{let E="";if(o)E=`let cOffset = ${u.length===1?"0u":i==="NHWC"?`outputIndices[${u.length-1}] / ${a}`:"outputIndices[1]"};`;else if(i==="NCHW")E=`\n            ${O.indicesSet("outputIndices","0","0")}\n            let cOffset = ${O.indicesToOffset("outputIndices")};`;else{E=`var cIndices = ${v.type.indices}(0);\n                       cIndices[0] = outputIndices[${u.length-1}];`;for(let T=1;T<v.rank;T++)E+=`cIndices[${T}] = outputIndices[${T}];`;E+=`let cOffset = ${v.indicesToOffset("cIndices")};`}return E},_=E=>`\n  const epsilon = ${r};\n  ${E.registerUniform("outputSize","u32").declareVariables(b,v,S,w,C,O)}\n  ${E.mainStart()}\n  ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    var outputIndices = ${O.offsetToIndices(`global_idx * ${a}`)};\n    ${A()}\n    let scale = ${v.getByOffset("cOffset")};\n    let bias = ${S.getByOffset("cOffset")};\n    let inputMean = ${w.getByOffset("cOffset")};\n    let inputVar = ${C.getByOffset("cOffset")};\n    let x = ${b.getByOffset("global_idx")};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${O.setByOffset("global_idx","value")}\n  }`;return{name:"BatchNormalization",shaderCache:{hint:`${t.epsilon}_${t.format}_${o}_${a}`,inputDependencies:g?["rank","type","type","type","type"]:void 0},getShaderSource:_,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:g?[{type:"uint32",data:m},...K(u)]:[{type:"uint32",data:m}]})}},Bd=e=>ve(e),Ua=(e,t)=>{let{inputs:r,outputCount:o}=e,i=Bd({...t,outputCount:o});if(dr.webgpu.validateInputContent&&kd(r,i),t.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Rd(r,i))}});var Dd,Md,Wa,Na=te(()=>{"use strict";Ae();xe();Dd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Md=e=>{let t=e[0].dims,r=e[0].dims[2],o=N.size(t)/4,i=e[0].dataType,u=V("input",i,t,4),a=V("bias",i,[r],4),c=V("residual",i,t,4),m=ee("output",i,t,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(o/64)}}),getShaderSource:d=>`\n  const channels = ${r}u / 4;\n  ${d.declareVariables(u,a,c,m)}\n\n  ${d.mainStart()}\n    ${d.guardAgainstOutOfBoundsWorkgroupSizes(o)}\n    let value = ${u.getByOffset("global_idx")}\n      + ${a.getByOffset("global_idx % channels")} + ${c.getByOffset("global_idx")};\n    ${m.setByOffset("global_idx","value")}\n  }`}},Wa=e=>{Dd(e.inputs),e.compute(Md(e.inputs))}});var zd,Oe,Ha,Ga,La,Fa,ja,qa,Ka,Ya,Za,Ud,Xa,Ja,Qa,es,Pn,ts,kn,rs,ns,os,is,as,ss,us,ls,ds,cs,ps,ms,fs,hs,gs,ys,bs,ws,vs,Ao=te(()=>{"use strict";Ue();Ae();je();xe();zd=(e,t,r,o,i,u)=>{let a=Math.ceil(t/4),c="";typeof i=="string"?c=`${i}(a)`:c=i("a");let m=V("inputData",r,[a],4),g=ee("outputData",o,[a],4);return`\n      ${e.registerUniform("vec_size","u32").declareVariables(m,g)}\n\n  ${u??""}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n\n    let a = ${m.getByOffset("global_idx")};\n    ${g.setByOffset("global_idx",c)}\n  }`},Oe=(e,t,r,o,i,u=e.dataType)=>({name:t,shaderCache:{hint:i,inputDependencies:["type"]},getShaderSource:a=>zd(a,N.size(e.dims),e.dataType,u,r,o),getRunData:a=>({outputs:[{dims:e.dims,dataType:u}],dispatchGroup:{x:Math.ceil(N.size(a[0].dims)/64/4)},programUniforms:[{type:"uint32",data:Math.ceil(N.size(e.dims)/4)}]})}),Ha=e=>{e.compute(Oe(e.inputs[0],"Abs","abs"))},Ga=e=>{e.compute(Oe(e.inputs[0],"Acos","acos"))},La=e=>{e.compute(Oe(e.inputs[0],"Acosh","acosh"))},Fa=e=>{e.compute(Oe(e.inputs[0],"Asin","asin"))},ja=e=>{e.compute(Oe(e.inputs[0],"Asinh","asinh"))},qa=e=>{e.compute(Oe(e.inputs[0],"Atan","atan"))},Ka=e=>{e.compute(Oe(e.inputs[0],"Atanh","atanh"))},Ya=e=>ve(e),Za=(e,t)=>{let r;switch(t.to){case 10:r="vec4<f16>";break;case 1:r="vec4<f32>";break;case 12:r="vec4<u32>";break;case 6:r="vec4<i32>";break;case 9:r="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute \'to\' from \'Cast\' operator): ${t.to}`)}e.compute(Oe(e.inputs[0],"Cast",r,void 0,t.cacheKey,t.to))},Ud=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:Cn,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:An;return ve({min:t,max:r})},Xa=(e,t)=>{let r=e.inputs.length===1?t:Ud(e.inputs),o=gt(e.inputs[0].dataType);e.compute(Oe(e.inputs[0],"Clip",i=>`clamp(${i}, clip_min_, clip_max_)`,`\n    const clip_min_: vec4<${o}> = vec4(${o}(${r.min}));\n    const clip_max_: vec4<${o}> = vec4(${o}(${r.max}));\n`,r.cacheKey),{inputs:[0]})},Ja=e=>{e.compute(Oe(e.inputs[0],"Ceil","ceil"))},Qa=e=>{e.compute(Oe(e.inputs[0],"Cos","cos"))},es=e=>{e.compute(Oe(e.inputs[0],"Cosh","cosh"))},Pn=e=>ve(e),ts=(e,t)=>{let r=gt(e.inputs[0].dataType);e.compute(Oe(e.inputs[0],"Elu",o=>`elu_vf32(${o})`,`\n  const elu_alpha_ = ${r}(${t.alpha});\n\n  fn elu_f32(a: ${r}) -> ${r} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},kn=(e,t="f32")=>`\nconst r0: ${t} = 0.3275911;\nconst r1: ${t} = 0.254829592;\nconst r2: ${t} = -0.284496736;\nconst r3: ${t} = 1.421413741;\nconst r4: ${t} = -1.453152027;\nconst r5: ${t} = 1.061405429;\n\nfn erf_vf32(v: ${e}) -> ${e} {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,rs=e=>{let t=gt(e.inputs[0].dataType);e.compute(Oe(e.inputs[0],"Erf",r=>`erf_vf32(${r})`,kn(`vec4<${t}>`,t)))},ns=e=>{e.compute(Oe(e.inputs[0],"Exp","exp"))},os=e=>{e.compute(Oe(e.inputs[0],"Floor","floor"))},is=e=>{let t=gt(e.inputs[0].dataType);e.compute(Oe(e.inputs[0],"Gelu",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,kn(`vec4<${t}>`,t)))},as=(e,t)=>{let r=gt(e.inputs[0].dataType);e.compute(Oe(e.inputs[0],"LeakyRelu",o=>`select(leaky_relu_alpha_ * ${o}, ${o}, ${o} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},ss=e=>{e.compute(Oe(e.inputs[0],"Not",t=>`!${t}`))},us=e=>{e.compute(Oe(e.inputs[0],"Neg",t=>`-${t}`))},ls=e=>{e.compute(Oe(e.inputs[0],"Reciprocal",t=>`1.0/${t}`))},ds=e=>{let t=gt(e.inputs[0].dataType);e.compute(Oe(e.inputs[0],"Relu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},cs=e=>{e.compute(Oe(e.inputs[0],"Sigmoid",t=>`(1.0 / (1.0 + exp(-${t})))`))},ps=e=>ve(e),ms=(e,t)=>{let r=gt(e.inputs[0].dataType);e.compute(Oe(e.inputs[0],"HardSigmoid",o=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${o} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},fs=e=>{e.compute(Oe(e.inputs[0],"Sin","sin"))},hs=e=>{e.compute(Oe(e.inputs[0],"Sinh","sinh"))},gs=e=>{e.compute(Oe(e.inputs[0],"Sqrt","sqrt"))},ys=e=>{e.compute(Oe(e.inputs[0],"Tan","tan"))},bs=e=>{e.compute(Oe(e.inputs[0],"Tanh","tanh"))},ws=(e,t)=>{let r=gt(e.inputs[0].dataType);return e.compute(Oe(e.inputs[0],"ThresholdedRelu",o=>`select(vec4<${r}>(0.0), ${o}, ${o} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},vs=e=>{e.compute(Oe(e.inputs[0],"Log","log"))}});var Wd,Nd,$s,Ss=te(()=>{"use strict";Ae();xe();Ao();Wd=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},Nd=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=V("input",e[0].dataType,e[0].dims,4),o=V("bias",e[0].dataType,[e[0].dims[2]],4),i=ee("output",e[0].dataType,t,4),u=N.size(t)/4,a=Ne(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)}}),getShaderSource:m=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${m.declareVariables(r,o,i)}\n\n  ${kn(`vec4<${a}>`,a)}\n\n  ${m.mainStart()}\n    ${m.guardAgainstOutOfBoundsWorkgroupSizes(u)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${i.setByOffset("global_idx","valueLeft * geluRight")}\n  }`}},$s=e=>{Wd(e.inputs),e.compute(Nd(e.inputs))}});var Hd,Gd,At,_s,xs,Cs,As,Is,Ts,Es,Os,Ps,ks,Rs=te(()=>{"use strict";Ue();Ae();xe();Hd=(e,t,r,o,i,u,a,c,m,g,d,b,v)=>{let S,w;typeof c=="string"?S=w=(B,W)=>`${c}((${B}),(${W}))`:typeof c=="function"?S=w=c:(S=c.scalar,w=c.vector);let C=b?t.length:t,O=b?r.length:r,A=b?o.length:o,_=ee("outputData",d,A,4),E=V("aData",m,C,4),T=V("bData",g,O,4),U;if(i)if(u){let B=N.size(t)===1,W=N.size(r)===1,H=t.length>0&&t[t.length-1]%4===0,J=r.length>0&&r[r.length-1]%4===0;B||W?U=_.setByOffset("global_idx",w(B?`${E.type.value}(${E.getByOffset("0")}.x)`:E.getByOffset("global_idx"),W?`${T.type.value}(${T.getByOffset("0")}.x)`:T.getByOffset("global_idx"))):U=`\n            let outputIndices = ${_.offsetToIndices("global_idx * 4u")};\n            let offsetA = ${E.broadcastedIndicesToOffset("outputIndices",_)};\n            let offsetB = ${T.broadcastedIndicesToOffset("outputIndices",_)};\n            ${_.setByOffset("global_idx",w(a||H?E.getByOffset("offsetA / 4u"):`${E.type.value}(${E.getByOffset("offsetA / 4u")}[offsetA % 4u])`,a||J?T.getByOffset("offsetB / 4u"):`${T.type.value}(${T.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}\n          `}else U=_.setByOffset("global_idx",w(E.getByOffset("global_idx"),T.getByOffset("global_idx")));else{if(!u)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let B=(W,H,J="")=>{let D=`aData[indexA${H}][componentA${H}]`,j=`bData[indexB${H}][componentB${H}]`;return`\n            let outputIndices${H} = ${_.offsetToIndices(`global_idx * 4u + ${H}u`)};\n            let offsetA${H} = ${E.broadcastedIndicesToOffset(`outputIndices${H}`,_)};\n            let offsetB${H} = ${T.broadcastedIndicesToOffset(`outputIndices${H}`,_)};\n            let indexA${H} = offsetA${H} / 4u;\n            let indexB${H} = offsetB${H} / 4u;\n            let componentA${H} = offsetA${H} % 4u;\n            let componentB${H} = offsetB${H} % 4u;\n            ${W}[${H}] = ${J}(${S(D,j)});\n          `};d===9?U=`\n            var data = vec4<u32>(0);\n            ${B("data",0,"u32")}\n            ${B("data",1,"u32")}\n            ${B("data",2,"u32")}\n            ${B("data",3,"u32")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:U=`\n            ${B("outputData[global_idx]",0)}\n            ${B("outputData[global_idx]",1)}\n            ${B("outputData[global_idx]",2)}\n            ${B("outputData[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(E,T,_)}\n\n        ${v??""}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${U}\n      }`},Gd=(e,t,r,o,i,u,a=r.dataType)=>{let c=!N.areEqual(r.dims,o.dims),m=r.dims,g=N.size(r.dims),d=!1,b=!1,v=[c];if(c){let w=$t.calcShape(r.dims,o.dims,!1);if(!w)throw new Error("Can\'t perform binary op on the given tensors");m=w,g=N.size(m);let C=N.size(r.dims)===1,O=N.size(o.dims)===1,A=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,_=o.dims.length>0&&o.dims[o.dims.length-1]%4===0;v.push(C),v.push(O),v.push(A),v.push(_);let E=1;for(let T=1;T<m.length;T++){let U=r.dims[r.dims.length-T]??1,B=o.dims[o.dims.length-T]??1;if(U===B)E*=U;else break}E%4===0?(b=!0,d=!0):(C||O||A||_)&&(d=!0)}else d=!0;v.push(d);let S=Be(r.dims.length)&&Be(o.dims.length)&&Be(m.length);return{name:e,shaderCache:{hint:t+v.map(w=>w.toString()).join("_"),inputDependencies:S?["rank","rank"]:["dims","dims"]},getShaderSource:w=>Hd(w,r.dims,o.dims,m,d,c,b,i,r.dataType,o.dataType,a,S,u),getRunData:()=>({outputs:[{dims:m,dataType:a}],dispatchGroup:{x:Math.ceil(g/64/4)},programUniforms:S?[{type:"uint32",data:Math.ceil(N.size(m)/4)},...K(r.dims),...K(o.dims),...K(m)]:[{type:"uint32",data:Math.ceil(N.size(m)/4)}]})}},At=(e,t,r,o,i,u)=>{e.compute(Gd(t,i??"",e.inputs[0],e.inputs[1],r,o,u))},_s=e=>{At(e,"Add",(t,r)=>`${t}+${r}`)},xs=e=>{At(e,"Div",(t,r)=>`${t}/${r}`)},Cs=e=>{At(e,"Equal",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},As=e=>{At(e,"Mul",(t,r)=>`${t}*${r}`)},Is=e=>{let t=V("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;At(e,"Pow",{scalar:(o,i)=>`pow_custom(${o},${i})`,vector:(o,i)=>`pow_vector_custom(${o},${i})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},Ts=e=>{At(e,"Sub",(t,r)=>`${t}-${r}`)},Es=e=>{At(e,"Greater",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},Os=e=>{At(e,"Less",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},Ps=e=>{At(e,"GreaterOrEqual",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},ks=e=>{At(e,"LessOrEqual",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var Fd,jd,qd,Kd,Bs,Ds,Ms=te(()=>{"use strict";Ae();je();xe();Fd=e=>{if(!e||e.length<1)throw new Error("too few inputs");let t=e[0].dataType,r=e[0].dims.length;for(let o of e){if(o.dataType!==t)throw new Error("input tensors should be one type");if(o.dims.length!==r)throw new Error("input tensors should have the same shape")}},jd=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,qd=(e,t)=>{let r=e.length,o=[];for(let i=0;i<r;++i){let u=t.setByOffset("global_idx",e[i].getByIndices("indices"));r===1?o.push(u):i===0?o.push(`if (inputIndex == ${i}u) { ${u} }`):i===r-1?o.push(`else { ${u} }`):o.push(`else if (inputIndex == ${i}) { ${u} }`)}return o.join(`\n`)},Kd=(e,t)=>{let r=e[0].dims.slice();if(t>=r.length||t<-1*r.length)throw new Error("axis specified for concat doesn\'t match input dimensionality");let o=t<0?r.length+t:t,i=r.slice(0);for(let T=1;T<e.length;T++){let U=e[T].dims.slice();for(let B=0;B<r.length;B++)if(B===o)i[o]+=U[B];else if(r[B]!==U[B])throw new Error("non concat dimensions must match")}let u=N.size(i),a=new Array(e.length),c=new Array(e.length),m=e[0].dataType,g=0,d=[],b=[],v=[],S=[{type:"uint32",data:u}];for(let T=0;T<e.length;++T)g+=e[T].dims[o],a[T]=g,v.push(Be(e[T].dims.length)),b.push(v[T]?e[T].dims.length:e[T].dims),c[T]=V(`input${T}`,m,b[T]),d.push(v[T]?"rank":"dims"),S.push({type:"uint32",data:a[T]});for(let T=0;T<e.length;++T)v[T]&&S.push(...K(e[T].dims));let w=Be(i.length);w&&S.push(...K(i));let C=w?i.length:i,O=ee("output",m,C),A=O.indicesGet("indices",o),_=Array.from(Array(a.length).keys()).map(T=>`uniforms.sizeInConcatAxis${T}`).join(","),E=T=>`\n\n  ${(()=>{T.registerUniform("outputSize","u32");for(let U=0;U<e.length;U++)T.registerUniform(`sizeInConcatAxis${U}`,"u32");return T.declareVariables(...c,O)})()}\n\n  ${jd(a.length,_)}\n\n  ${T.mainStart()}\n    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n    var indices = ${O.offsetToIndices("global_idx")};\n\n    let inputIndex = calculateInputIndex(${A});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${a.length}u>(${_});\n      ${A} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${qd(c,O)}\n  }`;return{name:"Concat",shaderCache:{hint:`${t}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:i,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:S}),getShaderSource:E}},Bs=(e,t)=>{Fd(e.inputs),e.compute(Kd(e.inputs,t.axis))},Ds=e=>ve({axis:e.axis})});var It,Rn,Vt=te(()=>{"use strict";Ae();It=(e,t)=>{switch(e.activation){case"Relu":return{activationFunction:"",applyActivation:`value = max(value, ${t}(0.0));`};case"Sigmoid":return{activationFunction:"",applyActivation:`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`};case"Clip":return{activationFunction:`const clip_min_=${t}(${e.clipMin});const clip_max_=${t}(${e.clipMax});`,applyActivation:"value = clamp(value, clip_min_, clip_max_);"};default:return{activationFunction:"",applyActivation:""}}},Rn=e=>{let t=e?.activation||"";if(t==="Clip"){let[r,o]=e?.activation_params||[Cn,An];return{activation:t,clipMax:o,clipMin:r,activationCacheKey:`${t}:${r},${o}`}}return{activation:t,activationCacheKey:t}}});var qe,Bn,Dn=te(()=>{"use strict";qe=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},Bn=e=>`\n      ${e?"value = value + getBiasByOutputCoords(coords);":""}\n      `});var Mn,Io=te(()=>{"use strict";Mn=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`});var Yd,Zd,Vr,zs,Xd,Wr,Jd,zn,Nr=te(()=>{"use strict";Ae();xe();Vt();Dn();Yd=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?", batchIndices":""});\n        `,Zd=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${t===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${t===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}\n        }`,Vr=(e,t,r="f32",o,i=!1,u=32,a=!1,c=32)=>{let m=t[1]*e[1],g=t[0]*e[0],d=i?m:u,b=i?u:m,v=d/t[0],S=u/t[1];if(!((i&&v===4&&e[1]===4||!i&&(v===3||v===4))&&d%t[0]===0&&u%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${i} is true, innerElementSize ${v} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${v} must be 3 or 4.\n  tileAWidth ${d} must be divisible by workgroupSize[0]${t[0]}. tileInner ${u} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${v}<${r}>, ${d/v}>, ${b}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${r}>, ${g/e[0]}>, ${u}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${v};\nconst tileInner = ${u};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${a?"0":"i32(globalId.z)"};\n  ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n  let globalRowStart = i32(workgroupId.y) * ${m};\n\n  let numTiles = ${a?`${Math.ceil(c/u)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n  var kStart = ${a?`i32(globalId.z) * ${c}`:"0"};\n\n  var acc: array<vec4<${r}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${S};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${Yd(i,o)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${S}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${o?", batchIndices":""});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${v===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}\n\n          ${Zd(i,v)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},zs=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?", batchIndices":""});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?", batchIndices":""});\n            `,Xd=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Wr=(e,t,r="f32",o,i=!1,u=32,a=!1,c=32,m=!1)=>{let g=e[1]*t[1],d=e[0]*t[0],b=i?g:u,v=i?u:g;if(!(v%t[1]===0&&b%t[0]===0&&u%t[1]===0))throw new Error(`tileAHight ${v} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${b} must be divisible by workgroupSize[0]${t[0]}, tileInner ${u} must be divisible by workgroupSize[1]${t[1]}`);let S=v/t[1],w=b/t[0],C=u/t[1],O=m?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${g};\n    let globalColStart = i32(workgroupId.x) * ${d};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${v}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${b}; inputCol = inputCol + ${t[0]}) {\n          ${zs(i,o)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${u}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${d}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${o?", batchIndices":""});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${r}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${i?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${g};\n\nlet tileRowA = i32(localId.y) * ${S};\nlet tileColA = i32(localId.x) * ${w};\nlet tileRowB = i32(localId.y) * ${C};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${S}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${w}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${zs(i,o)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${C}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${o?", batchIndices":""});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${r}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${Xd(i)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${r}, ${b}>, ${v}>;\n  var<workgroup> mm_Bsub : array<array<${r}, ${d}>, ${u}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${u};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${a?"0":"i32(globalId.z)"};\n    ${o?`let batchIndices = ${o.offsetToIndices("u32(batch)")};`:""}\n    let numTiles = ${a?`${Math.ceil(c/u)}`:"(uniforms.dimInner - 1) / tileInner + 1"};\n    var kStart = ${a?`i32(globalId.z) * ${c}`:"0"};\n\n    var acc : array<array<${r}, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${O}\n  }\n`},Jd=(e,t,r,o,i,u=!1)=>{let[a,c,m]=i,[g,d,b,v]=o,S=pr(a,m),w=pr(c,m),C=Ne(o[0].type.tensor),O=()=>{let E=d.rank,T=g.rank,U=`var aIndices: ${d.type.indices};`;for(let B=E-2-1,W=T-1;B>=0;B--,W--)U+=`\naIndices[${B}] = ${T>1?`batchIndices[${W}]`:"batchIndices"};`;return S.forEach(B=>{U+=`\naIndices[${B}] = 0;`}),U+=`\naIndices[${E-2}] = u32(row);\n                   aIndices[${E-1}] = u32(colIn);`,U},A=()=>{let E=b.rank,T=g.rank,U=`var bIndices: ${b.type.indices};`;for(let B=E-2-1,W=T-1;B>=0;B--,W--)U+=`\nbIndices[${B}] = ${T>1?`batchIndices[${W}]`:"batchIndices"};`;return w.forEach(B=>{U+=`\nbIndices[${B}] = 0;`}),U+=`\nbIndices[${E-2}] = u32(row);\n                   bIndices[${E-1}] = u32(colIn);`,U};return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${g.type.indices}) -> ${qe(e,C)} {\n      var value = ${qe(e,C)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimAOuter && col < uniforms.dimInner)\n      {\n        ${O()}\n        value = ${d.getByIndices("aIndices")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${g.type.indices}) -> ${qe(e,C)} {\n      var value = ${qe(e,C)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dimInner && col < uniforms.dimBOuter)\n      {\n        ${A()}\n        value = ${b.getByIndices("bIndices")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${qe(e,C)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${u?"bias[colIn]":`${qe(e,C)}(bias[row])`};`:""}\n        ${r}\n        ${v.setByIndices("vec3<u32>(coords)","value")}\n      }\n    }\n    `},zn=(e,t,r,o,i=!1)=>{let u=e[0].dims,a=e[1].dims,c=u.slice(0,-2),m=a.slice(0,-2),g=o?o.slice(0,-2):r.slice(0,-2),d=Be(g.length),b=d?g.length:g,v=In("batchDims",e[0].dataType,b,1),S=N.size(g),w=u[u.length-2],C=u[u.length-1],O=a[a.length-1],A=C%4===0&&O%4===0,_=w<=8?[4,1,1]:[4,4,1],E=[8,8,1],T=[Math.ceil(O/E[0]/_[0]),Math.ceil(w/E[1]/_[1]),Math.ceil(S/E[2]/_[2])],U=Ne(e[0].dataType),B=A?4:1,W=[...c,w,C/B],H=Be(W.length),J=H?W.length:W,D=[...m,C,O/B],j=Be(D.length),se=j?D.length:D,be=[S,w,O/B],re=V("a",e[0].dataType,J,B),$e=V("b",e[1].dataType,se,B),Ge=ee("result",e[0].dataType,be.length,B),ge=[re,$e],Te=[{type:"int32",data:w},{type:"int32",data:O},{type:"int32",data:C}];d&&Te.push(...K(g)),H&&Te.push(...K(W)),j&&Te.push(...K(D));let pe=[];pe.push(H?"rank":"dims"),pe.push(j?"rank":"dims");let we=e.length>2,{activationFunction:We,applyActivation:Me}=It(t,Ge.type.value),Ke=Jd(B,we,Me,[v,re,$e,Ge],[c,m,g],i);if(we){let oe=i?B:1;ge.push(V("bias",e[2].dataType,e[2].dims.length,oe)),Te.push(...K(e[2].dims)),pe.push("rank")}Te.push(...K(be));let F=oe=>`\n  ${oe.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").registerInternalVariables(v).declareVariables(...ge,Ge)}\n  ${We}\n  ${Ke}\n  ${A?Vr(_,E,U,v):Wr(_,E,U,v)}\n                   `;return{name:"MatMul",shaderCache:{hint:t.activationCacheKey+`${_}${A}${i}`,inputDependencies:pe},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:T[0],y:T[1],z:T[2]},programUniforms:Te}),getShaderSource:F}}});var Qd,Us,Vs=te(()=>{"use strict";Ut();xe();Vt();Dn();Io();Nr();Qd=(e,t,r,o,i=!1,u,a=4,c=4,m=4,g="f32")=>{let d=j=>{switch(j){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${g}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${j} is not supported.`)}},b=j=>{switch(j){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${j} is not supported.`)}},v=e?`\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `:`\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `,S=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,w=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",C=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",O=e?"row":"col",A=e?"col":"row",_=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n    let outRow = ${O} / outWidth;\n    let outCol = ${O} % outWidth;\n\n    let WRow = ${A} / (filterDims[1] * inChannels);\n    let WCol = ${A} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${A} % inChannels;\n    var resData = ${qe(a,g)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the \'same\' padding type.\n    if (xRow >= 0 && xRow < ${w} && xCol >= 0 && xCol < ${C}) {\n      ${v}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${d(a)}\n    }\n    return resData;`,E=e?t&&o?`\n    let col = colIn * ${a};\n    ${_}`:`\n    let col = colIn * ${a};\n    if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n      ${_}\n    }\n    return ${qe(a,g)}(0.0);`:o&&r?`\n    let col = colIn * ${a};\n    ${_}`:`\n    let col = colIn * ${a};\n    if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n      ${_}\n    }\n    return ${qe(a,g)}(0.0);`,T=`${b(c)}`,U=qe(m,g),B=e?qe(a,g):qe(c,g),W=e?qe(c,g):qe(a,g),{activationFunction:H,applyActivation:J}=It(u,U);return`\n    ${H}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${B} {\n      ${e?E:T}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${W} {\n      ${e?T:E}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${U}) {\n      let col = colIn * ${m};\n      if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${S}\n      ${Bn(i)}\n      ${J}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},Us=(e,t,r,o,i,u,a,c)=>{let m=t.format==="NHWC",g=m?e[0].dims[3]:e[0].dims[1],d=r[0],b=m?r[2]:r[3],v=m?r[1]:r[2],S=m?r[3]:r[1],w=m&&(g%4===0||g%3===0)&&S%4===0,C=m?S:b*v,O=m?b*v:S,A=[8,8,1],_=o<=8?[4,1,1]:[4,4,1],E=[Math.ceil(C/A[0]/_[0]),Math.ceil(O/A[1]/_[1]),Math.ceil(d/A[2]/_[2])];De("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${E}`);let T=w?m&&g%4!==0?3:4:1,U=A[1]*_[1],B=A[0]*_[0],W=Math.max(A[0]*T,A[1]),H=o%U===0,J=i%B===0,D=u%W===0,j=w?[T,4,4]:[1,1,1],se=Ne(e[0].dataType),be=w?4:1,re=[{type:"int32",data:o},{type:"int32",data:i},{type:"int32",data:u}],$e=V("x",e[0].dataType,e[0].dims.length,T===3?1:T),Ge=V("w",e[1].dataType,e[1].dims.length,be),ge=[$e,Ge];re.push(...K(e[0].dims)),re.push(...K(e[1].dims));let Te=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${w?`vec4<${se}>`:se}) {\n        result[flatIndex] = ${w?`vec4<${se}>`:se}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${w?`vec4<${se}>`:se}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${w?"/ 4":""}, value);\n      }`;if(a){let we=V("bias",e[2].dataType,e[2].dims.length,be);ge.push(we),re.push(...K(e[2].dims)),Te+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${w?`vec4<${se}>`:se} {\n          return bias[coords.${m?"w":"y"}${w?"/ 4":""}];\n        }`}let pe=ee("result",e[0].dataType,r.length,be);return re.push(...K(r)),{name:"Conv2DMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:re}),getShaderSource:we=>`\n        ${Mn("uniforms.result_strides")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${we.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...ge,pe)}\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[0]}, ${t.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${t.pads[0]}, ${t.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        ${Te}\n        ${Qd(m,H,J,D,a,t,j[0],j[1],j[2],se)}\n            ${w?Vr(_,A,se,void 0,!m,W):Wr(_,A,se,void 0,!m,W,!1,void 0,c)}`}}});var To,Ws=te(()=>{"use strict";Ae();xe();Oo();Vt();To=(e,t,r)=>{let o=e.length>2,i=o?"value += b[output_channel];":"",u=e[0].dims,a=e[1].dims,c=a[0]/t.group,m=t.format==="NHWC",g=Eo(u,a,t.dilations,t.pads,t.strides,m),d=N.size(g),b=ee("output",e[0].dataType,g),{activationFunction:v,applyActivation:S}=It(t,b.type.value),w=V("x",e[0].dataType,u),C=V("w",e[1].dataType,a),O=[w,C];o&&O.push(V("b",e[2].dataType,e[2].dims));let A=_=>`\n  const strides: vec2<u32> = vec2(${t.strides[0]}u, ${t.strides[1]}u);\n  const pads: vec2<u32> = vec2(${t.pads[0]}u, ${t.pads[1]}u);\n\n  ${_.declareVariables(...O,b)}\n\n  ${v}\n\n  ${_.mainStart()}\n    ${_.guardAgainstOutOfBoundsWorkgroupSizes(d)}\n\n    let outputIndices = ${b.offsetToIndices("global_idx")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${m?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${m?1:2}], outputIndices[${m?2:3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${c}u;\n\n    var value: ${b.type.value} = ${b.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${a[1]}u; wInChannel++) {\n      let input_channel = group_id * ${a[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${a[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${t.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${u[m?1:2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${a[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${t.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${u[m?2:3]}u) {\n            continue;\n          }\n\n          let xVal = ${m?w.get("batch","xHeight","xWidth","input_channel"):w.get("batch","input_channel","xHeight","xWidth")};\n          let wVal = ${C.get("output_channel","wInChannel","wHeight","wWidth")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${i}\n    ${S}\n    ${b.setByOffset("global_idx","value")}\n  }`;return{name:"GroupedConv",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r?r(g):g,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)}}),getShaderSource:A}}});var Po,ec,Ns,ko=te(()=>{"use strict";Ae();Nr();xe();Vt();Po=(e,t,r,o,i=!1)=>{let u=e[0].dims,a=e[1].dims,c=u[u.length-2],m=a[a.length-1],g=u[u.length-1],d=He(m),b=He(g),v=He(c),S=N.size(r)/d/v,w=e.length>2,C=o?o.slice(0,-2):r.slice(0,-2),A=[N.size(C),c,m],_=[{type:"uint32",data:S},{type:"uint32",data:c},{type:"uint32",data:m},{type:"uint32",data:g},...K(C),...K(u),...K(a)];w&&_.push(...K(e[2].dims)),_.push(...K(A));let E=T=>{let U=In("batch_dims",e[0].dataType,C.length),B=V("a",e[0].dataType,u.length,b),W=V("b",e[1].dataType,a.length,d),H=ee("output",e[0].dataType,A.length,d),{activationFunction:J,applyActivation:D}=It(t,H.type.value),j=[B,W],se="";if(w){let pe=i?d:1;j.push(V("bias",e[2].dataType,e[2].dims.length,pe)),se=`${i?`value += bias[col / ${pe}];`:`value += ${H.type.value}(bias[row + i]);`}`}let be=u.slice(0,-2),re=a.slice(0,-2),$e=pr(be,C),Ge=pr(re,C),ge=(pe,we)=>{let We=pe.rank,Me=pe.name;if(We===2)return`var ${Me}_indices = ${pe.type.indices}(0u, 0u);`;let Ke=U.rank,F=`var ${Me}_indices: ${pe.type.indices};`;for(let oe=We-2-1,he=Ke-1;oe>=0;oe--,he--)F+=`\n${Me}_indices[${oe}] = ${Ke>1?`batch_indices[${he}]`:"batch_indices"};`;return we.forEach(oe=>{F+=`\n${Me}_indices[${oe}] = 0;`}),F+=`${Me}_indices[${We-2}] = 0u;\n                     ${Me}_indices[${We-1}] = 0u;`,F},Te=()=>{let pe=`var a_data: ${B.type.value};`;for(let we=0;we<b;we++)pe+=`\n              let b_data${we} = b[(b_offset + (k + ${we}) * uniforms.N + col) / ${d}];`;for(let we=0;we<v;we++){pe+=`a_data = a[(a_offset + (row + ${we}) * uniforms.K + k) / ${b}];`;for(let We=0;We<b;We++)pe+=`\n            values[${we}] = fma(${W.type.value}(a_data${b===1?"":`[${We}]`}), b_data${We}, values[${we}]);\n`}return pe};return`\n  ${T.registerUniform("outputSize","u32").registerUniform("M","u32").registerUniform("N","u32").registerUniform("K","u32").registerInternalVariables(U).declareVariables(...j,H)}\n  ${J}\n  ${T.mainStart()}\n    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n    let col = (global_idx % (uniforms.N / ${d})) * ${d};\n    var index1 = global_idx / (uniforms.N / ${d});\n    let stride1 = uniforms.M / ${v};\n    let row = (index1 % stride1) * ${v};\n    let batch = index1 / stride1;\n\n    ${r.length===2?"":`let batch_indices = ${U.offsetToIndices("batch")};`}\n    ${ge(B,$e)}\n    let a_offset = ${B.indicesToOffset("a_indices")};\n    ${ge(W,Ge)}\n    let b_offset = ${W.indicesToOffset("b_indices")};\n    var values: array<${H.type.value}, ${v}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${b}) {\n      ${Te()}\n    }\n    for (var i = 0u; i < ${v}u; i++) {\n      var value = values[i];\n      ${se}\n      ${D}\n      let cur_indices = ${H.type.indices}(batch, row + i, col);\n      let offset = ${H.indicesToOffset("cur_indices")};\n      ${H.setByOffset(`offset / ${d}`,"value")};\n    }\n  }\n  `};return{name:"MatMulNaive",shaderCache:{hint:`${t.activationCacheKey}_${d}_${b}_${v}_${i}`,inputDependencies:w?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:_}),getShaderSource:E}},ec=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},Ns=e=>{ec(e.inputs);let t=$t.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error("Can\'t use matmul on the given tensors");let r=t[t.length-1],o=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&o<8?e.compute(Po(e.inputs,{activation:"",activationCacheKey:""},t)):e.compute(zn(e.inputs,{activation:"",activationCacheKey:""},t))}});var Eo,Hs,tc,Gs,Ro,rc,nc,Bo,Oo=te(()=>{"use strict";Ae();je();Vs();Nr();Ws();Vt();ko();mr();Eo=(e,t,r,o,i,u)=>{let a=e[0],c=e.slice(u?1:2,u?3:4),m=c.length,g=t[0],b=t.slice(2).map((w,C)=>w+(w-1)*(r[C]-1)),S=c.map((w,C)=>w+o[C]+o[C+m]).map((w,C)=>Math.floor((w-b[C]+i[C])/i[C]));return S.splice(0,0,a),S.splice(u?3:1,0,g),S},Hs=[2,3,1,0],tc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support conv 1D and 2D");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[1]*t.group;if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let i=e[0].dims.length-2;if(t.dilations.length!==i)throw new Error(`dilations should be ${i}D`);if(t.strides.length!==i)throw new Error(`strides should be ${i}D`);if(t.pads.length!==i*2)throw new Error(`pads should be ${i*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Gs=(e,t)=>{let r=e.kernelShape.slice();for(let u=2;u<t[1].dims.length;++u)r[u-2]===0&&(r[u-2]=t[1].dims[u]);let o=e.pads.slice();Jt.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,o,e.format==="NHWC",e.autoPad);let i=Object.assign({},e);return Object.assign(i,{kernelShape:r,pads:o,cacheKey:e.cacheKey}),i},Ro=e=>{let t=Rn(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],i=e.dilations,u=e.group,a=e.kernel_shape,c=e.pads,m=e.strides,g=e.w_is_const();return ve({autoPad:o,format:r,dilations:i,group:u,kernelShape:a,pads:c,strides:m,wIsConst:g,...t})},rc=(e,t,r)=>{let o=Gs(r,t),i=r.format==="NHWC";if(r.group!==1){e.compute(To(t,o));return}let u=t.length===3,a=t[0].dims[i?1:2],c=t[0].dims[i?2:3],m=t[0].dims[i?3:1],g=t[1].dims[2],d=t[1].dims[3],b=Eo(t[0].dims,t[1].dims,r.dilations,o.pads,r.strides,i),v=b[i?1:2],S=b[i?2:3],w=b[i?3:1],C=i&&g===a&&d===c&&r.pads[0]===0&&r.pads[1]===0;if(C||g===1&&d===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let B=b[0],W,H,J,D=[];if(i){let be=e.kernelCustomData.wT??e.compute(bt(t[1],Hs),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=be),C){let re=a*c*m;W=t[0].reshape([1,B,re]),H=be.reshape([1,re,w]),J=[1,B,w]}else W=t[0].reshape([B,a*c,m]),H=be.reshape([1,m,w]),J=[B,v*S,w];D.push(W),D.push(H)}else W=t[0].reshape([B,m,a*c]),H=t[1].reshape([1,w,m]),J=[B,w,v*S],D.push(H),D.push(W);u&&D.push(t[2]);let j=J[2],se=D[0].dims[D[0].dims.length-1];j<8&&se<8?e.compute(Po(D,o,b,J,i),{inputs:D}):e.compute(zn(D,o,b,J,i),{inputs:D});return}let O=!0,A=e.kernelCustomData.wT??e.compute(bt(t[1],Hs),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=A);let _=[t[0],A];u&&_.push(t[2]);let E=i?v*S:w,T=i?w:v*S,U=g*d*m;e.compute(Us(_,o,b,E,T,U,u,O),{inputs:_})},nc=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&o.push(e.inputs[2]);let i=[0,t.pads[0],0,t.pads[1]],u=[1].concat(t.strides),a=[1].concat(t.dilations),c=[1].concat(t.kernelShape),m=Gs({...t,pads:i,strides:u,dilations:a,kernelShape:c},o);e.compute(To(o,m,g=>r?[g[0],g[2],g[3]]:[]))},Bo=(e,t)=>{tc(e.inputs,t),e.inputs[0].dims.length===3?nc(e,t):rc(e,e.inputs,t)}});var oc,Ls,Fs=te(()=>{"use strict";Ut();xe();Vt();Dn();Io();Nr();oc=(e,t=!1,r,o=4)=>{let i=qe(o,"f32"),u=_=>{switch(_){case 1:return"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return vec4<f32>(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${_} is not supported.`)}},a=e?`\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      `:`\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `,c=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,m=e?"outBackprop[1]":"outBackprop[2]",g=e?"outBackprop[2]":"outBackprop[3]",d=e?"row":"col",b=e?"col":"row",v=`\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      let outRow = ${d} / outWidth;\n      let outCol = ${d} % outWidth;\n\n      let WRow = ${b} / (filterDims[1] * inChannels);\n      let WCol = ${b} / inChannels % filterDims[1];\n      let xR = f32(outRow - pads[0] + dilation[0] * WRow) / f32(strides[0]);\n      let xC = f32(outCol - pads[1] + dilation[1] * WCol) / f32(strides[1]);\n      if (xR < 0.0 || xR >= f32(${m}) || fract(xR) > 0.0) {\n        return ${i}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${g}) || fract(xC) > 0.0) {\n        return ${i}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${b} % inChannels;\n      ${a}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${o}];`,S=e?`\n      let col = colIn * ${o};\n      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {\n        ${v}\n      }\n      return ${i}(0.0);`:`\n      let col = colIn * ${o};\n      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {\n        ${v}\n      }\n      return ${i}(0.0);`,w=`\n      let col = colIn * ${o};\n      let inChannels = ${e?"outBackprop[3]":"outBackprop[1]"};\n      let coordX = filterDims.x - 1 - row / (filterDims[1] * inChannels);\n      let coordY = filterDims.y - 1 - (row / inChannels) % filterDims[1];\n      if (${e?"row < uniforms.dimInner && col < uniforms.dimBOuter":"row < uniforms.dimInner && col < uniforms.dimAOuter"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${u(o)}\n      }\n      return ${i}(0.0);\n      `,{activationFunction:C,applyActivation:O}=It(r,i);return`\n      ${C}\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${i} {\n    ${e?S:w}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${i} {\n    ${e?w:S}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${i}) {\n    let col = colIn * ${o};\n    if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {\n      var value = valueInput;\n      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};\n      ${c}\n      ${Bn(t)}\n      ${O}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${o}] = value;\n    }\n  }`},Ls=(e,t,r,o,i,u,a,c)=>{let m=t.format==="NHWC",g=m?e[0].dims[3]:e[0].dims[1],d=r[0],b=m?r[2]:r[3],v=m?r[1]:r[2],S=m?r[3]:r[1],w=m?g%4===0&&S%4===0:b%4===0&&S%4===0,C=m?S:b*v,O=m?b*v:S,A=w?[8,8,1]:[C<=4||O<=4?4:16,C>4&&O<=4?4:16,1],_=w?[4,4,1]:[C<=4?1:4,C>4&&O<=4?1:4,1],E=[Math.ceil(C/A[0]/_[0]),Math.ceil(O/A[1]/_[1]),Math.ceil(d/A[2]/_[2])];De("verbose",()=>`[conv_backprop_mm_webgpu] dispatch = ${E}`);let T=w?4:1,U=Math.max(A[0]*T,A[1]),B=w?4:1,W=[{type:"int32",data:o},{type:"int32",data:i},{type:"int32",data:u}],H=V("x",e[0].dataType,e[0].dims.length,B),J=V("w",e[1].dataType,e[1].dims.length,1),D=ee("result",e[0].dataType,r.length,B),j=[H,J];W.push(...K(e[0].dims)),W.push(...K(e[1].dims));let se="";if(a){let be=V("bias",e[2].dataType,e[2].dims.length,B);j.push(be),W.push(...K(e[2].dims)),se+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${w?"vec4<f32>":"f32"} {\n          return bias[coords.${m?"w":"y"}${w?"/ 4":""}];\n        }`}return W.push(...K(r)),{name:"Conv2DTransposeMatMul",shaderCache:{hint:t.cacheKey},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:E[0],y:E[1],z:E[2]},programUniforms:W}),getShaderSource:be=>`\n        ${Mn("uniforms.result_strides")}\n        ${be.registerUniform("dimAOuter","i32").registerUniform("dimBOuter","i32").registerUniform("dimInner","i32").declareVariables(...j,D)};\n        const outBackprop : vec4<i32> = vec4<i32>(${e[0].dims.join(",")});\n        const filterDims : vec2<i32> = vec2<i32>(${t.kernelShape[m?1:2]}, ${t.kernelShape[m?2:3]});\n        const effectiveFilterDims : vec2<i32> = filterDims + vec2<i32>(\n              ${t.dilations[0]<=1?0:(t.kernelShape[m?1:2]-1)*(t.dilations[0]-1)},\n              ${t.dilations[1]<=1?0:(t.kernelShape[m?2:3]-1)*(t.dilations[1]-1)});\n        const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${t.pads[0]+t.pads[2]})/2,\n                                         i32(effectiveFilterDims[1]) - 1 - (${t.pads[1]+t.pads[3]})/2);\n        const strides : vec2<i32> = vec2<i32>(${t.strides[0]}, ${t.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${t.dilations[0]}, ${t.dilations[1]});\n        const dimAOuter : i32 = ${o};\n        const dimBOuter : i32 = ${i};\n        const dimInner : i32 = ${u};\n        ${se}\n        ${oc(m,a,t,T)}\n        ${w?Vr(_,A,"f32",void 0,!m,U):Wr(_,A,"f32",void 0,!m,U,!1,void 0,c)}`}}});var ic,Do,js=te(()=>{"use strict";Ut();Ae();xe();ic=(e,t,r,o,i,u,a=!1,c)=>{let m=r.format==="NHWC",g=m?1:2,d=m?2:3,b=m?3:1,v=N.size(o),S=a?2:1,w=r.group,C=t[1].dims,O=C[0]/w,A=C[1],_=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${a?`vec4<${c}>`:c}) {\n    result[flatIndex] = ${a?`vec4<${c}>`:c}(value);\n  }`;i&&(_+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${a?`vec4<${c}>`:c} {\n      return bias[coords.${m?"w":"y"}${a?"/ 4":""}];\n    }`);let E=a?4:1,T=V("W",t[1].dataType,t[1].dims,E),U=V("Dy",t[0].dataType,t[0].dims,E),B=[U,T];i&&B.push(V("bias",t[2].dataType,[o[b]],E));let W=ee("result",t[0].dataType,o,E),H=`{\n        let batch: u32 = ${u?"global_id.z":"workgroup_id.z"} / outShape[1];\n        let r = ${u?"global_id.z":"workgroup_id.z"} % outShape[1];\n        let c = ${u?"global_id.y":"workgroup_id.y"} * ${S};\n        let d1: u32 = ${u?"global_id.x":"workgroup_id.x"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${c}>, ${S}>;\n        for (var i = 0; i < ${S}; i++) {\n          dotProd[i] = vec4<${c}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\n          var dyR = (${c}(dyCorner.x) + ${c}(wR)) / ${c}(strides.x);\n          let wRPerm = filterDims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${c}(outBackprop[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\n            let dyC = (${c}(dyCorner.y) + ${c}(wC)) / ${c}(strides.y);\n            let dyC2 = (${c}(dyCorner.y) + 1.0 + ${c}(wC)) / ${c}(strides.y);\n            let wCPerm = filterDims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${c}(outBackprop[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${c}(outBackprop[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${U.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${c}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${U.get("batch","idyR","idyC2","d2")};\n\n                dotProd[1] = dotProd[1] + vec4<${c}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = outBackprop[${b}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${U.get("batch","idyR","idyC","d2")};\n                let tmpval = vec4<${c}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1","d2")};\n                let wValue1 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 1","d2")};\n                let wValue2 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 2","d2")};\n                let wValue3 = ${T.get("u32(wRPerm)","u32(wCPerm)","d1 + 3","d2")};\n\n                var xValue = ${U.get("batch","idyR","idyC2","d2")};\n                let tmpval = vec4<${c}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${S}; i = i + 1) {\n          let value = dotProd[i] + ${i?"bias[c+i]":`vec4<${c}>(0.0)`};\n          ${W.set("batch","r","c + i","d1","value")};\n        }\n      }`,J=`\n          let outputIndices = ${W.offsetToIndices("global_idx")};\n          let batch = ${W.indicesGet("outputIndices",0)};\n          let d1 = ${W.indicesGet("outputIndices",b)};\n          let r = ${W.indicesGet("outputIndices",g)};\n          let c = ${W.indicesGet("outputIndices",d)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / ${A};\n          let wOutChannel = d1 - groupId * ${A};\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = ${c}(0.0);\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\n            if (wR % dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${c}(dyRCorner) + ${c}(wR)) / ${c}(strides[0]);\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\n            if (dyR < 0.0 || dyR >= ${c}(outBackprop[${g}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\n              if (wC % dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${c}(dyCCorner) + ${c}(wC)) / ${c}(strides.y);\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\n              if (dyC < 0.0 || dyC >= ${c}(outBackprop[${d}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * ${O};\n              for (var d2: u32 = 0; d2 < ${O}; d2 = d2 + 1) {\n                let xValue = ${m?U.get("batch","idyR","idyC","inputChannel"):U.get("batch","inputChannel","idyR","idyC")};\n                let wValue = ${T.get("inputChannel","wOutChannel","u32(wRPerm)","u32(wCPerm)")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${i?"bias[d1]":`${c}(0.0)`};\n          ${W.setByOffset("global_idx","value")};\n        `;return`\n  ${e.declareVariables(...B,W)}\n  ${_}\n  const outShape : vec4<u32> = vec4<u32>(${o.join(",")});\n  const outBackprop : vec4<u32> = vec4<u32>(${t[0].dims.join(",")});\n  const strides : vec2<u32> = vec2<u32>(${r.strides[0]}, ${r.strides[1]});\n  const filterDims : vec2<u32> = vec2<u32>(${r.kernelShape[m?1:2]}, ${r.kernelShape[m?2:3]});\n  const dilations : vec2<u32> = vec2<u32>(${r.dilations[0]}, ${r.dilations[1]});\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\n          ${r.dilations[0]<=1?0:(r.kernelShape[m?1:2]-1)*(r.dilations[0]-1)},\n          ${r.dilations[1]<=1?0:(r.kernelShape[m?2:3]-1)*(r.dilations[1]-1)});\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${r.pads[0]+r.pads[2]})/2,\n                                     i32(effectiveFilterDims[1]) - 1 - (${r.pads[1]+r.pads[3]})/2);\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(v)};\n  ${a?H:J}}`},Do=(e,t,r)=>{let o=e.length>2,i=t.outputShape,u=N.size(i),a=[Math.ceil(u/64),1,1];De("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${a}`);let c=Ne(e[0].dataType);return{name:"ConvTranspose2D",shaderCache:{hint:t.cacheKey},getRunData:()=>({dispatchGroup:{x:a[0],y:a[1],z:a[2]},outputs:[{dims:r?r(i):i,dataType:e[0].dataType}]}),getShaderSource:m=>ic(m,e,t,i,o,a[1]===1&&a[2]===1,!1,c)}}});var ac,sc,uc,qs,Ks,lc,dc,cc,pc,Ys,Zs=te(()=>{"use strict";je();Fs();js();Vt();mr();ac=(e,t,r,o,i,u)=>(e-1)*t+r+(o-1)*i+1-u,sc=(e,t,r,o,i)=>{let u=Math.floor(e/2);t==="SAME_UPPER"?(r[o]=u,r[i]=e-u):t==="SAME_LOWER"&&(r[o]=e-u,r[i]=u)},uc=(e,t,r,o,i,u,a,c,m,g)=>{let d=e.length-2,b=g.length===0;if(m.length===0)for(let w=0;w<d;++w)m.push(0);let v=e[0],S=t[c?3:1]*i;for(let w=0,C=e.length-d-(c?1:0);w<d;++w,++C){let O=e[C],A=b?O*a[w]:g[w],_=ac(O,a[w],u[w],t[C],r[w],A);sc(_,o,u,w,w+d),b&&g.push(a[w]*(O-1)+m[w]+(t[C]-1)*r[w]+1-u[w]-u[w+d])}g.splice(0,0,v),g.splice(c?3:1,0,S)},qs=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((v,S)=>v*S,1)===0){r.length=0;for(let v=2;v<t[1].dims.length;++v)r.push(t[1].dims[v])}let o=e.format==="NHWC";r.splice(0,0,t[1].dims[0]),r.splice(o?3:1,0,t[1].dims[1]);let i=e.pads.slice(),u=e.outputShape.slice(),a=e.outputPadding.slice(),c=t[0].dims,m=e.dilations.slice();if(m.reduce((v,S)=>v+S,0)===0){let v=t[0].dims.length-2;m=new Array(v).fill(1)}let g=e.strides.slice();if(g.reduce((v,S)=>v+S,0)===0){let v=t[0].dims.length-2;g=new Array(v).fill(1)}uc(c,r,m,e.autoPad,e.group,i,g,o,a,u);let d=Object.assign({},e),b=e.cacheKey+[r.join("n,"),i.join(","),g.join(","),a.join(","),u.join(","),m.join(",")].join("_");return Object.assign(d,{kernelShape:r,pads:i,outputPadding:a,outputShape:u,dilations:m,strides:g,cacheKey:b}),d},Ks=e=>{let t=Rn(e),r=e.format,o=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],i=e.dilations,u=e.group,a=e.kernelShape,c=e.pads,m=e.strides,g=e.wIsConst(),d=e.outputPadding,b=e.outputShape;return ve({autoPad:o,format:r,dilations:i,group:u,kernelShape:a,outputPadding:d,outputShape:b,pads:c,strides:m,wIsConst:g,...t})},lc=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let r=e[0].dims[t.format==="NHWC"?e[0].dims.length-1:1],o=e[1].dims[0];if(r!==o)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let i=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==i))throw new Error("invalid bias");let u=e[0].dims.length-2;if(t.dilations.reduce((d,b)=>d+b,0)>0&&t.dilations.length!==u)throw new Error(`dilations should be ${u}D`);if(t.strides.reduce((d,b)=>d+b,0)>0&&t.strides.length!==u)throw new Error(`strides should be ${u}D`);if(t.pads.reduce((d,b)=>d+b,0)>0&&t.pads.length!==u*2)throw new Error(`pads should be ${u*2}D`);if(t.outputPadding.length!==u&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${u}D`);if(t.kernelShape.reduce((d,b)=>d+b,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},dc=[2,3,1,0],cc=(e,t,r)=>{let o=qs(r,t),i=r.format==="NHWC",u=o.outputShape,a=u[i?3:1],c=t[0].dims[i?3:1];if(o.group!==1||a===1&&c===1){e.compute(Do(t,o));return}let m=u[i?1:2],g=u[i?2:3],d=t[1].dims[2],b=t[1].dims[3],v=i?m*g:a,S=i?a:m*g,w=d*b*c,C=!0,O=e.kernelCustomData.wT??e.compute(bt(t[1],dc),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=O);let A=[t[0],O],_=t.length===3;_&&(!i&&t[2].dims.length===1?A.push(t[2].reshape([t[2].dims[0],1,1])):A.push(t[2])),e.compute(Ls(A,o,u,v,S,w,_,C),{inputs:A})},pc=(e,t)=>{let r=t.format==="NHWC",o=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];o.length===3&&o.push(e.inputs[2]);let i=t.kernelShape;(i.length===0||i[0]===0)&&(i=[e.inputs[1].dims[2]]);let u=t.dilations;(u.length===0||u[0]===0)&&(u=[1]);let a=t.strides;(a.length===0||a[0]===0)&&(a=[1]);let c=t.pads;c.length===0&&(c=[0,0]),c=[0,c[0],0,c[1]],a=[1].concat(a),u=[1].concat(u),i=[1].concat(i);let m=qs({...t,pads:c,strides:a,dilations:u,kernelShape:i},o);e.compute(Do(o,m,g=>r?[g[0],g[2],g[3]]:[g[0],g[1],g[3]]))},Ys=(e,t)=>{lc(e.inputs,t),e.inputs[0].dims.length===3?pc(e,t):cc(e,e.inputs,t)}});var mc,Xs,Js,Qs=te(()=>{"use strict";Ue();Ae();je();xe();mc=(e,t,r,o)=>{let i=N.size(t),u=t.length,a=V("input",e,u),c=ee("output",e,u),m=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),g=N.normalizeAxis(m,u),d=b=>{let v=` i32(${a.indicesGet("inputIndices","uniforms.axis")}) `,S=ce("uniforms.input_shape","uniforms.axis",u),w=o.reverse?v+(o.exclusive?" + 1":""):"0",C=o.reverse?S:v+(o.exclusive?"":" + 1");return`\n                ${b.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(a,c)}\n                ${b.mainStart()}\n                  ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n                  var inputIndices = ${c.offsetToIndices("global_idx")};\n                  var sum = ${c.type.value}(0);\n                  let first : i32 = ${w};\n                  let last : i32 = ${C};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${a.indicesSet("inputIndices","uniforms.axis","u32(i)")};\n                    sum = sum + ${a.getByIndices("inputIndices")};\n                  }\n                  ${c.setByOffset("global_idx","sum")};\n                }`};return{name:"CumSum",shaderCache:{hint:o.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:"uint32",data:i},{type:"int32",data:g},...K(t),...K(t)]}),getShaderSource:d}},Xs=(e,t)=>{let r=e.inputs[0].dims,o=e.inputs[0].dataType,i=e.inputs[1];e.compute(mc(o,r,i,t),{inputs:[0]})},Js=e=>{let t=e.exclusive===1,r=e.reverse===1;return ve({exclusive:t,reverse:r})}});var Mo,Un,eu,fc,hc,zo,Uo,tu,gc,ru,nu,ou=te(()=>{"use strict";Ae();je();xe();Mo="[a-zA-Z]|\\\\.\\\\.\\\\.",Un="("+Mo+")+",eu="^"+Un+"$",fc="("+Un+",)*"+Un,hc="^"+fc+"$",zo=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let o=this.symbolToIndices.get(t);o===void 0?o=[r]:o.push(r),this.symbolToIndices.set(t,o)}},Uo=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[o,i]=r.includes("->")?r.split("->",2):[r,""];if(!o.match(RegExp(hc)))throw new Error("Invalid LHS term");if(o.split(",").forEach((c,m)=>{let g=t[m].dims.slice();if(!c.match(RegExp(eu)))throw new Error("Invalid LHS term");let d=this.processTerm(c,!0,g,m);this.lhs.push(d)}),i==="")i+=[...this.symbolToInfo.entries()].filter(([c,m])=>m.count===1||c==="...").map(([c])=>c).join("");else if(!i.match(RegExp(Un)))throw new Error("Invalid RHS");i.match(RegExp(Mo,"g"))?.forEach(c=>{if(c==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let m=this.symbolToInfo.get(c);if(m===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(m.dimValue)}}),this.rhs=this.processTerm(i,!1,this.outputDims)}addSymbol(t,r,o){let i=this.symbolToInfo.get(t);if(i!==void 0){if(i.dimValue!==r&&i.count!==1)throw new Error("Dimension mismatch");i.count++,i.inputIndices.push(o)}else i={count:1,dimValue:r,inputIndices:[o]};this.symbolToInfo.set(t,i)}processTerm(t,r,o,i=-1){let u=o.length,a=!1,c=[],m=0;if(!t.match(RegExp(eu))&&!r&&t!=="")throw new Error("Invalid LHS term");let g=t.match(RegExp(Mo,"g")),d=new zo(i);return g?.forEach((b,v)=>{if(b==="..."){if(a)throw new Error("Only one ellipsis is allowed per input term");a=!0;let S=u-g.length+1;if(S<0)throw new Error("Ellipsis out of bounds");if(c=o.slice(m,m+S),this.hasEllipsis){if(this.ellipsisDims.length!==c.length||this.ellipsisDims.toString()!==c.toString())throw new Error("Ellipsis dimensions mismatch")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=c;else throw new Error("Ellipsis must be specified in the LHS");for(let w=0;w<c.length;w++){let C=String.fromCharCode("0".charCodeAt(0)+w);d.addSymbol(C,v+w),this.addSymbol(C,o[m++],i)}}else d.addSymbol(b,v+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(b,o[m++],i)}),d}},tu=e=>e+"_max",gc=(e,t,r,o,i)=>{let a=t.map((S,w)=>e[w]?S.length:S).map((S,w)=>V(`input${w}`,r,S)),c=N.size(i),m=Be(i.length),g=m?i.length:i,d=ee("output",r,g),b=[...o.symbolToInfo.keys()].filter(S=>!o.rhs.symbolToIndices.has(S)),v=S=>{let w=[],C="var prod = 1.0;",O="var sum = 0.0;",A="sum += prod;",_=[],E=[],T=[],U=[],B=o.symbolToInfo.size===o.rhs.symbolToIndices.size;o.symbolToInfo.forEach((H,J)=>{if(o.rhs.symbolToIndices.has(J)){let D=o.rhs.symbolToIndices.get(J)?.[0];D!==void 0&&o.lhs.forEach((j,se)=>{if(H.inputIndices.includes(se)){let be=j.symbolToIndices.get(J);if(be===void 0)throw new Error("Invalid symbol error");be.forEach(re=>{w.push(`${a[se].indicesSet(`input${se}Indices`,re,d.indicesGet("outputIndices",D))}`)})}})}else o.lhs.forEach((D,j)=>{if(H.inputIndices.includes(j)){let se=D.symbolToIndices.get(J);if(se===void 0)throw new Error("Invalid symbol error");se.forEach(be=>{_.push(`${a[j].indicesSet(`input${j}Indices`,be,`${J}`)}`)}),U.push(`prod *= ${a[j].getByIndices(`input${j}Indices`)};`)}}),E.push(`for(var ${J}: u32 = 0; ${J} < uniforms.${tu(J)}; ${J}++) {`),T.push("}")});let W=B?[...w,`let sum = ${a.map((H,J)=>H.getByIndices(`input${J}Indices`)).join(" * ")};`]:[...w,O,...E,..._,C,...U,A,...T];return`\n            ${S.registerUniforms(b.map(H=>({name:`${tu(H)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...a,d)}\n\n            ${S.mainStart()}\n            ${S.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n            var outputIndices = ${d.offsetToIndices("global_idx")};\n            ${a.map((H,J)=>`var input${J}Indices: ${a[J].type.indices};`).join(`\n`)}\n            ${W.join(`\n`)};\n            ${d.setByOffset("global_idx","sum")};\n          }`};return{name:"Einsum",shaderCache:{hint:o.equation,inputDependencies:e.map(S=>S?"rank":"dims")},getRunData:()=>{let S=b.filter(C=>o.symbolToInfo.has(C)).map(C=>({type:"uint32",data:o.symbolToInfo.get(C)?.dimValue||0}));S.push({type:"uint32",data:c});let w=t.filter((C,O)=>e[O]).map((C,O)=>[...K(C)]).reduce((C,O)=>C.concat(O),S);return m&&w.push(...K(i)),{outputs:[{dims:i,dataType:r}],dispatchGroup:{x:Math.ceil(c/64)},programUniforms:w}},getShaderSource:v}},ru=(e,t)=>{let r=new Uo(e.inputs,t.equation),o=e.inputs.map((a,c)=>Be(a.dims.length)),i=r.outputDims,u=e.inputs.map((a,c)=>a.dims);e.compute(gc(o,u,e.inputs[0].dataType,r,i))},nu=e=>{let t=e.equation.replace(/\\s+/g,"");return ve({equation:t})}});var yc,iu,bc,wc,au,su=te(()=>{"use strict";Ue();Ae();xe();yc=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=r.length<t.length?0:r.length-t.length,i=t.length<r.length?0:t.length-r.length;for(;o<r.length&&i<t.length;++o,++i)if(r[o]!==t[i]&&r[o]!==1&&t[i]!==1)throw new Error("Expand requires shape to be broadcastable to input")},iu=(e,t)=>{let r=e.length-t.length,o=[];for(let i=0;i<r;++i)o.push(e[i]);for(let i=0;i<t.length;++i)o.push(t[i]===1?e[i+r]:t[i]);return o},bc=(e,t)=>e.length>t.length?iu(e,t):iu(t,e),wc=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),o=bc(t,r),i=e[0].dataType,u=i===9?4:1,a=Math.ceil(N.size(o)/u),c=Be(t.length),m=Be(o.length),g=b=>{let v=c?t.length:t,S=m?o.length:o,w=V("input",i,v,u),C=ee("output",i,S,u),O;if(i===9){let A=(_,E,T="")=>`\n          let outputIndices${E} = ${C.offsetToIndices(`outputOffset + ${E}u`)};\n          let offset${E} = ${w.broadcastedIndicesToOffset(`outputIndices${E}`,C)};\n          let index${E} = offset${E} / 4u;\n          let component${E} = offset${E} % 4u;\n          ${_}[${E}] = ${T}(${w.getByOffset(`index${E}`)}[component${E}]);\n        `;O=`\n        let outputOffset = global_idx * ${u};\n        var data = vec4<u32>(0);\n        ${A("data",0,"u32")}\n        ${A("data",1,"u32")}\n        ${A("data",2,"u32")}\n        ${A("data",3,"u32")}\n        ${C.setByOffset("global_idx","data")}\n      }`}else O=`\n        let outputIndices = ${C.offsetToIndices("global_idx")};\n        let inputOffset = ${w.broadcastedIndicesToOffset("outputIndices",C)};\n        ${C.setByOffset("global_idx",w.getByOffset("inputOffset"))}\n      }`;return`\n    ${b.registerUniform("vec_size","u32").declareVariables(w,C)}\n    ${b.mainStart()}\n    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n    ${O}`},d=[{type:"uint32",data:a}];return c&&d.push(...K(t)),m&&d.push(...K(o)),{name:"Expand",shaderCache:{hint:`${o.length}`,inputDependencies:[c?"rank":"dims"]},getShaderSource:g,getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:d})}},au=e=>{yc(e.inputs),e.compute(wc(e.inputs),{inputs:[0]})}});var vc,$c,uu,lu,du=te(()=>{"use strict";Ue();Ae();je();xe();vc=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},$c=(e,t)=>{let r=e[0].dims,o=e[1].dims,i=r.length,u=N.normalizeAxis(t.axis,i),a=r.slice(0);a.splice(u,1,...o);let c=r[u],m=e[0].dataType===9?4:1,g=Math.ceil(N.size(a)/m),d=Be(e[0].dims.length),b=d?e[0].dims.length:e[0].dims,v=Be(e[1].dims.length),S=v?e[1].dims.length:e[1].dims,w=Be(a.length),C=w?a.length:a,O=[{type:"uint32",data:g},{type:"int32",data:c},{type:"uint32",data:u}];d&&O.push(...K(e[0].dims)),v&&O.push(...K(e[1].dims)),w&&O.push(...K(a));let A=[];A.push(d?"rank":"dims"),A.push(v?"rank":"dims");let _=E=>{let T=V("data",e[0].dataType,b,m),U=V("inputIndices",e[1].dataType,S),B=ee("output",e[0].dataType,C,m),W=J=>{let D=o.length,j=`var indicesIndices${J}  = ${U.type.indices}(0);`;for(let se=0;se<D;se++)j+=`${D>1?`indicesIndices${J}[${se}]`:`indicesIndices${J}`} = ${a.length>1?`outputIndices${J}[uniforms.axis + ${se}]`:`outputIndices${J}`};`;j+=`\n          var idx${J} = ${U.getByIndices(`indicesIndices${J}`)};\n          if (idx${J} < 0) {\n            idx${J} = idx${J} + uniforms.axisDimLimit;\n          }\n          var dataIndices${J} = ${T.type.indices}(0);\n        `;for(let se=0,be=0;se<i;se++)se===u?(j+=`${i>1?`dataIndices${J}[${se}]`:`dataIndices${J}`} = u32(idx${J});`,be+=D):(j+=`${i>1?`dataIndices${J}[${se}]`:`dataIndices${J}`} = ${a.length>1?`outputIndices${J}[${be}]`:`outputIndices${J}`};`,be++);return j},H;if(e[0].dataType===9){let J=(D,j,se="")=>`\n          let outputIndices${j} = ${B.offsetToIndices(`outputOffset + ${j}u`)};\n          ${W(j)};\n          let offset${j} = ${T.indicesToOffset(`dataIndices${j}`)};\n          let index${j} = offset${j} / 4u;\n          let component${j} = offset${j} % 4u;\n          ${D}[${j}] = ${se}(${T.getByOffset(`index${j}`)}[component${j}]);\n        `;H=`\n        let outputOffset = global_idx * ${m};\n        var value = vec4<u32>(0);\n        ${J("value",0,"u32")}\n        ${J("value",1,"u32")}\n        ${J("value",2,"u32")}\n        ${J("value",3,"u32")}\n        ${B.setByOffset("global_idx","value")}\n      `}else H=`\n      let outputIndices = ${B.offsetToIndices("global_idx")};\n      ${W("")};\n      let value = ${T.getByIndices("dataIndices")};\n      ${B.setByOffset("global_idx","value")};\n      `;return`\n      ${E.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(T,U,B)}\n      ${E.mainStart()}\n        ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        ${H}\n      }`};return{name:"Gather",shaderCache:{hint:t.cacheKey,inputDependencies:A},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:O}),getShaderSource:_}},uu=e=>ve({axis:e.axis}),lu=(e,t)=>{let r=e.inputs;vc(r),e.compute($c(e.inputs,t))}});var Sc,_c,cu,pu,mu=te(()=>{"use strict";Ae();je();xe();Sc=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`)},_c=(e,t)=>{let r=e[0].dims,o=e[0].dataType,i=r.length,u=e[1].dims,a=e[1].dataType,c=N.normalizeAxis(t.axis,i),m=r[c],g=u.slice(0),d=N.size(g),b=V("input",o,i),v=V("indicesInput",a,u.length),S=ee("output",o,g.length),w=[{type:"uint32",data:d},{type:"int32",data:m},{type:"uint32",data:c}];return w.push(...K(r)),w.push(...K(u)),w.push(...K(g)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:g,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:w}),getShaderSource:A=>`\n      ${A.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(b,v,S)}\n      ${A.mainStart()}\n      ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n      let outputIndices = ${S.offsetToIndices("global_idx")};\n\n      var idx = ${v.getByOffset("global_idx")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${b.type.indices}(outputIndices);\n      ${b.indicesSet("inputIndices","uniforms.axis","u32(idx)")};\n      let value = ${b.getByIndices("inputIndices")};\n\n      ${S.setByOffset("global_idx","value")};\n  }`}},cu=e=>ve({axis:e.axis}),pu=(e,t)=>{let r=e.inputs;Sc(r),e.compute(_c(e.inputs,t))}});var xc,Cc,fu,hu,gu=te(()=>{"use strict";Ae();xe();xc=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},Cc=(e,t)=>{let r=e[0].dims.slice(),o=e[1].dims.slice(),[i,u,a]=xn.getShapeOfGemmResult(r,t.transA,o,t.transB,e.length===3?e[2].dims:void 0),c=[i,u];if(!c)throw new Error("Can\'t use gemm on the given tensors");let m=N.size(c),g=[{type:"uint32",data:m},{type:"uint32",data:i},{type:"uint32",data:u},{type:"uint32",data:a},{type:"float32",data:t.alpha},{type:"float32",data:t.beta}],d=["type","type"];e.length===3&&(g.push(...K(e[2].dims)),d.push("rank")),g.push(...K(c));let b=v=>{let S="";t.transA&&t.transB?S="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":t.transA&&!t.transB?S="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!t.transA&&t.transB?S="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!t.transA&&!t.transB&&(S="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let w=t.alpha===1?"":"value *= uniforms.alpha;",C=V("a",e[0].dataType,e[0].dims),O=V("b",e[1].dataType,e[1].dims),A=C.type.value,_=null,E=[C,O];e.length===3&&(_=V("c",e[2].dataType,e[2].dims.length),E.push(_));let T=ee("output",e[0].dataType,c.length);E.push(T);let U=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`\n  ${v.registerUniforms(U).declareVariables(...E)}\n\n  ${v.mainStart()}\n    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${A}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${S}\n    }\n\n    ${w}\n    ${(()=>_!=null?`let cOffset = ${_.broadcastedIndicesToOffset("vec2(m, n)",T)}; value += ${A}(uniforms.beta) * ${_.getByOffset("cOffset")};`:"")()}\n    output[global_idx] = value;\n  }`};return{name:"Gemm",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:c,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:g}),getShaderSource:b}},fu=e=>{let t=e.transA,r=e.transB,o=e.alpha,i=e.beta;return{transA:t,transB:r,alpha:o,beta:i,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},hu=(e,t)=>{xc(e.inputs),e.compute(Cc(e.inputs,t))}});var Ac,Ic,Tc,yu,bu=te(()=>{"use strict";Ue();Ae();xe();Ac=(e,t)=>{let r=e[0].dims,o=r,i=2,u=N.sizeToDimension(r,i),a=N.sizeFromDimension(r,i),c=He(a),m=a/c,g=[r[0],r[1],m],d=["rank","type","type"],b=[{type:"uint32",data:a},{type:"uint32",data:m}];b.push(...K(g),...K(g));let v=S=>{let w=V("x",e[0].dataType,g.length,c),C=V("scale",e[1].dataType,e[1].dims),O=V("bias",e[2].dataType,e[2].dims),A=ee("output",e[0].dataType,g.length,c),_=[w,C,O,A],E=w.type.value,T=c===1?"f32":`vec${c}<f32>`,U=64,B=[{name:"normSize",type:"u32"},{name:"normPackedSize",type:"u32"}];return`\n  var<workgroup> meanShared : f32;\n  var<workgroup> squaredNormShared : f32;\n  var<workgroup> workgroupShared : array<${T}, ${U}>;\n  const workgroupSize = ${U}u;\n  ${S.registerUniforms(B).declareVariables(..._)}\n  ${S.mainStart(U)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / uniforms.x_shape[1];\n    let channel = norm % uniforms.x_shape[1];\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial = ${T}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      initial = initial + ${T}(${w.get("batch","channel","h")});\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = ${lt("workgroupShared[0]",c)} / f32(uniforms.normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = ${T}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let deviation =  ${T}(${w.get("batch","channel","h")}) - ${T}(meanShared);\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = ${lt("workgroupShared[0]",c)};\n    }\n    workgroupBarrier();\n\n    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));\n    let channelScale = invStdDev * f32(${C.getByOffset("channel")});\n    let channelShift = f32(${O.getByOffset("channel")}) - meanShared * channelScale;\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let value = ${w.get("batch","channel","h")} * ${E}(${T}(channelScale)) + ${E}(${T}(channelShift));\n      ${A.set("batch","channel","h","value")};\n    }\n  }`};return{name:"InstanceNormalization",shaderCache:{hint:`${t.epsilon};${c}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:u},programUniforms:b}),getShaderSource:v}},Ic=(e,t,r,o,i,u,a,c)=>{let m=He(a),g=64,d=m===1?"vec2f":`mat2x${m}f`,b=m===1?"f32":`vec${m}f`,v=(B,W)=>`${d}(${B}, ${W})`,S=i*a/m,w=Math.ceil(u/g),C=["type"],O=[{type:"uint32",data:w},{type:"uint32",data:u},{type:"uint32",data:Math.floor(a/m)},{type:"uint32",data:Math.floor(u*a/m)}],A=B=>{let W=V("input",t.dataType,t.dims,m);return`\n  ${B.declareVariables(W)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${d}>;\n  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};\n  @group(0) @binding(2) var<uniform> uniforms: Uniforms;\n\n  ${B.mainStart(g)}\n    let currentImageNumber = global_idx / ${g} / uniforms.C;\n    let currentChannelNumber = (global_idx / ${g}) % uniforms.C;\n    let wgId = global_idx % ${g};\n    let wgOffset = wgId * uniforms.wg_size;\n    if (wgOffset >= uniforms.H) {\n        return;\n    }\n    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);\n\n    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;\n    var sum = ${Xe("f32",m)};\n    var squaredSum = ${Xe("f32",m)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${b}(input[offset + i * uniforms.C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${v("sum","squaredSum")};\n  }`},_=e.compute({name:"InstanceNormComputeMean",shaderCache:{hint:`${m}`,inputDependencies:C},getRunData:()=>({outputs:[{dims:[i,a,g,2],dataType:1}],dispatchGroup:{x:i*a/m},programUniforms:O}),getShaderSource:A},{inputs:[t],outputs:[-1]})[0],E=[{type:"uint32",data:S},{type:"uint32",data:u},{type:"uint32",data:Math.floor(a/m)},{type:"uint32",data:Math.floor(g*a/m)}],T=["type","type","type"],U=B=>{let W=V("scale",r.dataType,r.dims,m),H=V("bias",o.dataType,o.dims,m);return`\n  @group(0) @binding(0) var<storage, read> input : array<${d}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${W.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${H.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${d}>;\n  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};\n  @group(0) @binding(4) var<uniform> uniforms: Uniforms;\n\n  ${B.mainStart()}\n    ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.units_of_work")}\n    let currentImageNumber = global_idx / uniforms.C;\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let offset = currentImageNumber * uniforms.image_size;\n    var sum = ${Xe("f32",m)};\n    var squaredSum = ${Xe("f32",m)};\n    for (var i: u32 = 0; i < ${g}; i++) {\n        let value = input[offset + i + currentChannelNumber * ${g}];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(uniforms.H);\n    squaredSum = squaredSum / f32(uniforms.H);\n    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${c}));\n    let channelScale = invStdDev * ${b}(scale[currentChannelNumber]);\n    let channelShift = ${b}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${v("channelScale","channelShift")};\n  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${m};${c}`,inputDependencies:T},getRunData:()=>({outputs:[{dims:[i,a,2],dataType:1}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:E}),getShaderSource:U},{inputs:[_,r,o],outputs:[-1]})[0]},Tc=(e,t,r)=>{let o=t[0].dims,i=o,u=o[0],a=o[o.length-1],c=N.sizeFromDimension(o,1)/a,m=He(a),g=N.size(i)/m,d=[{type:"uint32",data:c},{type:"uint32",data:Math.floor(a/m)}],b=["type","type"],v=Ic(e,t[0],t[1],t[2],u,c,a,r.epsilon),S=w=>{let C=Ne(t[0].dataType),O=m===1?"vec2f":`mat2x${m}f`,A=m===1?C:`vec${m}<${C}>`,_=V("input",t[0].dataType,t[0].dims,m),E=ee("output",t[0].dataType,i,m);return`\n  @group(0) @binding(0) var<storage, read> input : array<${_.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${O}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${E.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${w.mainStart()}\n    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${A}(scale[0]), ${A}(scale[1]));\n  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${m}`,inputDependencies:b},getRunData:()=>({outputs:[{dims:i,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:d}),getShaderSource:S},{inputs:[t[0],v]})},yu=(e,t)=>{t.format==="NHWC"?Tc(e,e.inputs,t):e.compute(Ac(e.inputs,t))}});var Ec,Oc,wu,vu=te(()=>{"use strict";Ue();Ae();xe();Ec=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Oc=(e,t,r)=>{let o=e[0].dims,i=e[1],u=e[2],a=o,c=N.normalizeAxis(t.axis,o.length),m=N.sizeToDimension(o,c),g=N.sizeFromDimension(o,c),d=N.size(i.dims),b=u?N.size(u.dims):0;if(d!==g||u&&b!==g)throw new Error(`Size of X.shape()[axis:] == ${g}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${d} and bias size of ${b}`);let v=[];for(let T=0;T<o.length;++T)T<c?v.push(o[T]):v.push(1);let S=He(g),w=["type","type"],C=[{type:"uint32",data:m},{type:"float32",data:g},{type:"uint32",data:Math.floor(g/S)},{type:"float32",data:t.epsilon}];u&&w.push("type");let O=r>1,A=r>2,_=T=>{let U=Ne(e[0].dataType),B=[V("x",e[0].dataType,e[0].dims,S),V("scale",i.dataType,i.dims,S)];u&&B.push(V("bias",u.dataType,u.dims,S)),B.push(ee("output",e[0].dataType,a,S)),O&&B.push(ee("mean_data_output",1,v)),A&&B.push(ee("inv_std_output",1,v));let W=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`\n  ${T.registerUniforms(W).declareVariables(...B)}\n  ${T.mainStart()}\n    ${T.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var meanVector = ${Xe("f32",S)};\n    var meanSquareVector = ${Xe("f32",S)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${yt(U,S,"x[h + offset]")};\n      meanVector += value;\n      meanSquareVector += value * value;\n    }\n    let mean = ${lt("meanVector",S)} / uniforms.norm_size;\n    let invStdDev =\n        inverseSqrt(${lt("meanSquareVector",S)} / uniforms.norm_size - mean * mean + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${yt(U,S,"x[j + offset]")};\n      let f32scale = ${yt(U,S,"scale[j]")};\n      output[j + offset] = ${B[0].type.value}((f32input - mean) * invStdDev * f32scale\n        ${u?`+ ${yt(U,S,"bias[j]")}`:""}\n      );\n    }\n\n    ${O?"mean_data_output[global_idx] = mean":""};\n    ${A?"inv_std_output[global_idx] = invStdDev":""};\n  }`},E=[{dims:a,dataType:e[0].dataType}];return O&&E.push({dims:v,dataType:1}),A&&E.push({dims:v,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${S};${r}`,inputDependencies:w},getRunData:()=>({outputs:E,dispatchGroup:{x:Math.ceil(m/64)},programUniforms:C}),getShaderSource:_}},wu=(e,t)=>{Ec(e.inputs),e.compute(Oc(e.inputs,t,e.outputCount))}});var Pc,Su,$u,kc,Vo,_u,xu=te(()=>{"use strict";Ae();je();Sn();Co();xe();mr();Pc=(e,t)=>{let r=e[0],o=e[1],i=e[2],u=e[3],a=e[4],c=e[5],m=e[6],g=e[7];if(r.dims.length!==3&&r.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let d=!1,b=r.dims[0],v=r.dims[1],S=r.dims.length===3?d?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],w=v,C=0,O=0,A=Math.floor(S/t.numHeads);if(m&&g){if(m.dims.length!==4)throw new Error(\'Input "past_key" is expected to have 4 dimensions\');if(g.dims.length!==4)throw new Error(\'Input "past_value" is expected to have 4 dimensions\');C=m.dims[2],O=m.dims[2]}else if(m||g)throw new Error(\'Input "past_key" and "past_value" shall be both present or both absent\');let _;if(o){if(r.dims.length!==3)throw new Error(\'Input "query" is expected to have 3 dimensions when key is given\');if(o.dims.length<3||o.dims.length>5)throw new Error(\'Input "key" is expected to have 3, 4, or 5 dimensions\');if(r.dims[0]!==o.dims[0])throw new Error(\'Input "query" and "key" shall have same dim 0 (batch size)\');if(o.dims.length===3){if(o.dims[2]!==r.dims[2])throw new Error(\'Input "query" and "key" shall have same dim 2 (hidden_size)\');_=2,w=o.dims[1]}else if(o.dims.length===5){if(o.dims[2]!==t.numHeads||o.dims[3]!==2||o.dims[4]!==A)throw new Error(\'Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv\');if(i)throw new Error(\'Expect "value" be none when "key" has packed kv format.\');_=5,w=o.dims[1]}else{if(o.dims[1]!==t.numHeads||o.dims[3]!==A)throw new Error(\'Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key\');_=0,w=o.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error(\'Input "query" is expected to have 3 or 5 dimensions when key is empty\');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error(\'Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv\');_=3}if(u){if(u.dims.length!==1)throw new Error(\'Input "bias" is expected to have 1 dimension\');if(i&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let E=0;if(a){E=8;let H=a.dims;throw H.length===1?H[0]===b?E=1:H[0]===3*b+2&&(E=3):H.length===2&&H[0]===b&&H[1]===w&&(E=5),E===8?new Error(\'Input "key_padding_mask" shape shall be (batch_size) or (batch_size, kv_sequence_length)\'):new Error("Mask not supported")}let T=!1,U=S;if(i){if(i.dims.length!==3&&i.dims.length!==4)throw new Error(\'Input "value" is expected to have 3 or 4 dimensions\');if(r.dims[0]!==i.dims[0])throw new Error(\'Input "query" and "value" shall have same dim 0 (batch_size)\');if(i.dims.length===3){if(w!==i.dims[1])throw new Error(\'Input "key" and "value" shall have the same dim 1 (kv_sequence_length)\');U=i.dims[2]}else{if(w!==i.dims[2])throw new Error(\'Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)\');U=i.dims[1]*i.dims[3],T=!0}}let B=C+w,W=!1;if(a)throw new Error("Key padding mask is not supported");if(c)throw new Error("extraAddQk is not supported");if(m)throw new Error("pastKey is not supported");if(g)throw new Error("pastValue is not supported");return{batchSize:b,sequenceLength:v,pastSequenceLength:C,kvSequenceLength:w,totalSequenceLength:B,maxSequenceLength:O,inputHiddenSize:0,hiddenSize:S,vHiddenSize:U,headSize:A,vHeadSize:Math.floor(U/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:E,scale:t.scale,broadcastResPosBias:W,passPastInKv:T,qkvFormat:_}},Su=e=>ve({...e}),$u=ve({perm:[0,2,1,3]}),kc=(e,t,r,o,i,u,a)=>{let c=[o,i,u],m=N.size(c),g=[{type:"uint32",data:m},{type:"uint32",data:a},{type:"uint32",data:u}],d=b=>{let v=ee("qkv_with_bias",t.dataType,c),S=V("qkv",t.dataType,c),w=V("bias",r.dataType,c),C=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`\n  ${b.registerUniforms(C).declareVariables(S,w,v)}\n  ${b.mainStart()}\n    ${b.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:c,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:g}),getShaderSource:d},{inputs:[t,r],outputs:[-1]})[0]},Vo=(e,t,r,o,i,u,a,c)=>{let m=u;if(a){if(o===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return m=kc(e,u,a,t,o,r*i,c),m=m.reshape([t,o,r,i]),e.compute(bt(m,$u.perm),{inputs:[m],outputs:[-1]})[0]}else return u.dims.length===3&&(m=u.reshape([t,o,r,i])),e.compute(bt(m,$u.perm),{inputs:[m],outputs:[-1]})[0]},_u=(e,t)=>{let r=Pc(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let o=e.inputs[1]&&e.inputs[2]&&e.inputs[1].dims.length===4&&e.inputs[2].dims.length===4,i=Vo(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],e.inputs[3],0);if(o)return On(e,i,e.inputs[1],e.inputs[2],e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t);let u=Vo(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,e.inputs[1],e.inputs[3],r.hiddenSize),a=Vo(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,e.inputs[2],e.inputs[3],2*r.hiddenSize);On(e,i,u,a,e.inputs[4],void 0,e.inputs[6],e.inputs[7],e.inputs[5],r,t)}});var Rc,Bc,Dc,Mc,zc,Uc,Vc,Wc,Cu,Au=te(()=>{"use strict";Ue();Ae();xe();Rc=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1)throw new Error("Input type must be float.");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},Bc=(e,t,r)=>{let o="";for(let i=t-1;i>=0;--i)o+=`\n            k = i32(${e.indicesGet("indices",i)}) - ${ce("uniforms.pads",i,r)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${ce("uniforms.x_shape",i,t)})) {\n              break;\n            }\n            offset += k * i32(${ce("uniforms.x_strides",i,t)});\n        `;return`\n          value = ${e.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${o}\n            value = x[offset];\n          }\n      `},Dc=(e,t,r)=>{let o="";for(let i=t-1;i>=0;--i)o+=`\n                k = i32(${e.indicesGet("indices",i)}) - ${ce("uniforms.pads",i,r)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${ce("uniforms.x_shape",i,t)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${ce("uniforms.x_shape",i,t)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${ce("uniforms.x_strides",i,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},Mc=(e,t,r)=>{let o="";for(let i=t-1;i>=0;--i)o+=`\n                k = i32(${e.indicesGet("indices",i)}) - ${ce("uniforms.pads",i,r)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${ce("uniforms.x_shape",i,t)})) {\n                  k = i32(${ce("uniforms.x_shape",i,t)}) - 1;\n                }\n                offset += k * i32(${ce("uniforms.x_strides",i,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},zc=(e,t,r)=>{let o="";for(let i=t-1;i>=0;--i)o+=`\n                k = i32(${e.indicesGet("indices",i)}) - ${ce("uniforms.pads",i,r)};\n                if (k < 0)  {\n                  k += i32(${ce("uniforms.x_shape",i,t)}]);\n                }\n                if (k >= i32(${ce("uniforms.x_shape",i,t)})) {\n                  k -= i32(${ce("uniforms.x_shape",i,t)});\n                }\n                offset += k * i32(${ce("uniforms.x_strides",i,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${o}\n              value = x[offset];\n          `},Uc=(e,t,r)=>{switch(r.mode){case 0:return Bc(e,t,r.pads.length);case 1:return Dc(e,t,r.pads.length);case 2:return Mc(e,t,r.pads.length);case 3:return zc(e,t,r.pads.length);default:throw new Error("Invalid mode")}},Vc=(e,t)=>{let r=N.padShape(e[0].dims.slice(),t.pads),o=e[0].dims,u=[{type:"uint32",data:N.size(r)},{type:"uint32",data:t.pads}];if(t.mode===0){let m=ut(e[0].dataType);u.push({type:m,data:t.value})}u.push(...K(e[0].dims),...K(r));let a=["rank"],c=m=>{let g=ee("output",e[0].dataType,r.length),d=V("x",e[0].dataType,o.length),b=d.type.value,v=Uc(g,o.length,t),S=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:t.pads.length}];return t.mode===0&&S.push({name:"constant_value",type:b}),`\n            ${m.registerUniforms(S).declareVariables(d,g)}\n            ${m.mainStart()}\n            ${m.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n\n            let indices = ${g.offsetToIndices("global_idx")};\n\n            var value = ${b}(0);\n            ${v}\n            output[global_idx] = value;\n        }`};return{name:"Pad",shaderCache:{hint:`${t.mode}`,inputDependencies:a},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(N.size(r)/64)},programUniforms:u}),getShaderSource:c}},Wc=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),o=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,i=e[0].dims.length,u=new Int32Array(2*i).fill(0);if(e.length>=4){let c=e[3].getBigInt64Array();for(let m=0;m<c.length;m++)u[Number(c[m])]=Number(r[m]),u[Number(c[m])+i]=Number(r[m+c.length])}else r.forEach((c,m)=>u[Number(m)]=Number(c));let a=[];return u.forEach(c=>a.push(c)),{mode:t.mode,value:o,pads:a}}else return t},Cu=(e,t)=>{Rc(e.inputs);let r=Wc(e.inputs,t);e.compute(Vc(e.inputs,r),{inputs:[0]})}});var Vn,Iu,Tu,Eu,Ou,Nc,Hc,Pu,ku,Ru,Bu,Du,Mu,zu,Uu,Vu,Wu,Nu,Hu,Gu=te(()=>{"use strict";cr();Ae();xe();Vn=e=>{if(dr.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},Iu=(e,t,r)=>{let o=t.format==="NHWC",i=e.dims.slice();o&&i.splice(1,0,i.pop());let u=Object.hasOwnProperty.call(t,"dilations"),a=t.kernelShape.slice(),c=t.strides.slice(),m=u?t.dilations.slice():[],g=t.pads.slice();Jt.adjustPoolAttributes(r,i,a,c,m,g);let d=Jt.computePoolOutputShape(r,i,c,m,a,g,t.autoPad),b=Object.assign({},t);u?Object.assign(b,{kernelShape:a,strides:c,pads:g,dilations:m,cacheKey:t.cacheKey}):Object.assign(b,{kernelShape:a,strides:c,pads:g,cacheKey:t.cacheKey});let v=d.slice();return v.push(v.splice(1,1)[0]),[b,o?v:d]},Tu=(e,t)=>{let r=t.format==="NHWC",o=N.size(e),i=N.size(t.kernelShape),u=[{type:"uint32",data:o},{type:"uint32",data:i}],a=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(t.kernelShape.length<=2){let c=t.kernelShape[t.kernelShape.length-1],m=t.strides[t.strides.length-1],g=t.pads[t.pads.length/2-1],d=t.pads[t.pads.length-1],b=!!(g+d);u.push({type:"uint32",data:c},{type:"uint32",data:m},{type:"uint32",data:g},{type:"uint32",data:d}),a.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let v=!1;if(t.kernelShape.length===2){let S=t.kernelShape[t.kernelShape.length-2],w=t.strides[t.strides.length-2],C=t.pads[t.pads.length/2-2],O=t.pads[t.pads.length-2];v=!!(C+O),u.push({type:"uint32",data:S},{type:"uint32",data:w},{type:"uint32",data:C},{type:"uint32",data:O}),a.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[u,a,!0,b,v]}else{if(r)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let c=N.computeStrides(t.kernelShape);u.push({type:"uint32",data:c},{type:"uint32",data:t.pads},{type:"uint32",data:t.strides}),a.push({name:"kernelStrides",type:"u32",length:c.length},{name:"pads",type:"u32",length:t.pads.length},{name:"strides",type:"u32",length:t.strides.length});let m=t.pads.reduce((g,d)=>g+d);return[u,a,!!m,!1,!1]}},Eu=(e,t,r,o,i,u,a,c,m,g,d,b)=>{let v=i.format==="NHWC",S=t.type.value,w=ee("output",t.type.tensor,o);if(i.kernelShape.length<=2){let C="",O="",A="",_=r-(v?2:1);if(d?C=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${_}] = indices[${_}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${_}] < 0 || xIndices[${_}]\n                      >= uniforms.x_shape[${_}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${u}\n                }`:C=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${_}] = indices[${_}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${t.indicesToOffset("xIndices")}];\n                  ${u}\n                }`,i.kernelShape.length===2){let T=r-(v?3:2);b?O=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${T}] = indices[${T}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${T}] < 0 || xIndices[${T}] >= uniforms.x_shape[${T}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `:O=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${T}] = indices[${T}] * uniforms.sh - uniforms.phStart + j;\n                `,A=`\n              }\n            `}return`\n            ${e.registerUniforms(m).declareVariables(t,w)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n\n              let indices = ${w.offsetToIndices("global_idx")};\n              var xIndices = ${w.offsetToIndices("global_idx")};\n\n              var value = ${S}(${c});\n              var pad = 0;\n              ${O}\n              ${C}\n              ${A}\n              ${a}\n\n              output[global_idx] = value;\n            }`}else{if(v)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let C=i.kernelShape.length,O=i.pads.length,A="";return g?A=`\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset("xIndices")}];\n                ${u}\n              }`:A=`\n              }\n              let x_val = x[${t.indicesToOffset("xIndices")}];\n              ${u}\n            `,`\n            ${e.registerUniforms(m).declareVariables(t,w)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n              let indices = ${w.offsetToIndices("global_idx")};\n              var xIndices = ${w.offsetToIndices("global_idx")};\n\n              var offsets: array<u32, ${C}>;\n\n              var value = ${S}(${c});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${C-1}u; j++) {\n                  offsets[j] = offset / ${ce("uniforms.kernelStrides","j",C)};\n                  offset -= offsets[j] * ${ce("uniforms.kernelStrides","j",C)};\n                }\n                offsets[${C-1}] = offset;\n\n                isPad = false;\n                for (var j = ${r-C}u; j < ${r}u; j++) {\n                  xIndices[j] = indices[j] * ${ce("uniforms.strides",`j - ${r-C}u`,C)}\n                    + offsets[j - ${r-C}u] - ${ce("uniforms.pads","j - 2u",O)};\n                  ${A}\n              }\n              ${a}\n\n              output[global_idx] = value;\n            }`}},Ou=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,Nc=e=>`${Ou(e)};${e.countIncludePad}`,Hc=e=>`${Ou(e)};${e.storageOrder};${e.dilations}`,Pu=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),ku=(e,t,r,o)=>{let[i,u]=Iu(t,o,r),a=V("x",t.dataType,t.dims.length),c=a.type.value,m="value += x_val;",g="";i.countIncludePad?g+=`value /= ${c}(uniforms.kernelSize);`:g+=`value /= ${c}(i32(uniforms.kernelSize) - pad);`;let[d,b,v,S,w]=Tu(u,i);d.push(...K(t.dims),...K(u));let C=["rank"];return{name:e,shaderCache:{hint:`${o.cacheKey};${v};${S};${w}`,inputDependencies:C},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(N.size(u)/64)},programUniforms:d}),getShaderSource:O=>Eu(O,a,t.dims.length,u.length,i,m,g,0,b,v,S,w)}},Ru=e=>{let t=e.count_include_pad!==0,r=Pu(e);if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let o={countIncludePad:t,...r,cacheKey:""};return{...o,cacheKey:Nc(o)}},Bu=(e,t)=>{Vn(e.inputs),e.compute(ku("AveragePool",e.inputs[0],!1,t))},Du={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},Mu=e=>{let t=e.format;return{format:t,...Du,cacheKey:t}},zu=(e,t)=>{Vn(e.inputs),e.compute(ku("GlobalAveragePool",e.inputs[0],!0,t))},Uu=(e,t,r,o)=>{let[i,u]=Iu(t,o,r),a=`\n      value = max(x_val, value);\n    `,c="",m=V("x",t.dataType,t.dims.length),g=["rank"],[d,b,v,S,w]=Tu(u,i);return d.push(...K(t.dims),...K(u)),{name:e,shaderCache:{hint:`${o.cacheKey};${v};${S};${w}`,inputDependencies:g},getRunData:()=>({outputs:[{dims:u,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(N.size(u)/64)},programUniforms:d}),getShaderSource:C=>Eu(C,m,t.dims.length,u.length,i,a,c,-1e5,b,v,S,w)}},Vu=(e,t)=>{Vn(e.inputs),e.compute(Uu("MaxPool",e.inputs[0],!1,t))},Wu=e=>{let t=e.storage_order,r=e.dilations,o=Pu(e);if(t!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(o.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let i={storageOrder:t,dilations:r,...o,cacheKey:""};return{...i,cacheKey:Hc(i)}},Nu=e=>{let t=e.format;return{format:t,...Du,cacheKey:t}},Hu=(e,t)=>{Vn(e.inputs),e.compute(Uu("GlobalMaxPool",e.inputs[0],!0,t))}});var Lc,Fc,Lu,Fu=te(()=>{"use strict";cr();Ue();xe();Lc=(e,t,r)=>{let o=e===t,i=e<t&&r<0,u=e>t&&r>0;if(o||i||u)throw new Error("Range these inputs\' contents are invalid.")},Fc=(e,t,r,o)=>{let i=Math.abs(Math.ceil((t-e)/r)),u=[i],a=i,c=ut(o),m=[{type:"uint32",data:a},{type:c,data:e},{type:c,data:r},...K(u)],g=d=>{let b=ee("output",o,u.length),v=b.type.value,S=[{name:"outputSize",type:"u32"},{name:"start",type:v},{name:"delta",type:v}];return`\n        ${d.registerUniforms(S).declareVariables(b)}\n        ${d.mainStart()}\n        ${d.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n        output[global_idx] = uniforms.start + ${v}(global_idx) * uniforms.delta;\n      }`};return{name:"Range",shaderCache:{hint:`${o}`},getShaderSource:g,getRunData:()=>({outputs:[{dims:u,dataType:o}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:m})}},Lu=e=>{let t=0,r=0,o=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],o=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],o=e.inputs[2].getFloat32Array()[0]),dr.webgpu.validateInputContent&&Lc(t,r,o),e.compute(Fc(t,r,o,e.inputs[0].dataType),{inputs:[]})}});var jc,qc,Kc,Yc,Zc,Xc,Jc,Qc,ep,tp,rp,ju,np,op,ip,ap,sp,qu,Ku,Yu=te(()=>{"use strict";Ae();je();xe();jc=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(t.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},qc=(e,t,r)=>{t.every(i=>i>=0&&i<r||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let o=new Array(r).fill(1);return t.forEach((i,u)=>o[i]=e[u]),o},Kc=(e,t,r,o,i,u)=>{let[a,c,m]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],g=e[0].dims.length;if(a>0&&e.length>a&&e[a].dims.length>0)e[a].getFloat32Array().forEach(d=>u.push(d));else if(t.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(c>0&&e.length>c&&e[c].dims.length>0){if(e[c].getFloat32Array().forEach(d=>o.push(d)),o.length!==0&&o.length!==g&&r>=18&&o.length!==t.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");jc(o,t),t.axes.length>0&&qc(o,t.axes,g).forEach((d,b)=>o[b]=d)}if(m>0&&e.length>m&&(e[m].getBigInt64Array().forEach(d=>i.push(Number(d))),i.length!==g||r>=18&&i.length===t.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(t.axes.length>0){if(o.length!==t.axes.length)throw new Error(\'Resize requires "scales" input size to be of axes rank when axes attributes is specified\');if(i.length!==t.axes.length)throw new Error(\'Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified\')}if(typeof o<"u"&&typeof i<"u"&&o.length>0&&i.length>g)throw new Error("Resize requires only of scales or sizes to be specified")},Yc=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case"asymmetric":return`return ${t}(xResized) / ${t}(xScale);`;case"pytorch_half_pixel":return`if (lengthResized > 1) {\n                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;case"tf_half_pixel_for_nn":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case"align_corners":return`if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n                    // offset-by-one error later in floor().\n                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));\n                    let fract =\n                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);\n                    return whole + fract;\n                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {\n                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +\n                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /\n                        ${t}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);\n                  }`;case"half_pixel_symmetric":return`const outputWidth = ${t}xScale * ${t}(lengthResized);\n                  const adjustment = ${t}(lengthResized) / outputWidth;\n                  const center = ${t}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case"half_pixel":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",Zc=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(t<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",Xc=(e,t,r)=>{let o=new Array(r).fill(0).concat(new Array(r).fill(1)),i=e.length===0?o:e.slice();return t.length>0?(t.forEach((u,a)=>{o[u]=i[a],o[a+r]=i[t.length+a]}),o):i},Jc=(e,t,r,o)=>{let i=[];if(r.length>0)if(o.length>0){if(e.forEach(u=>i.push(u)),Math.max(...o)>e.length)throw new Error("axes is out of bound");o.forEach((u,a)=>i[u]=r[a])}else r.forEach(u=>i.push(u));else{if(t.length===0)throw new Error("Resize requires either scales or sizes.");i=e.map((u,a)=>Math.round(u*t[a]))}return i},Qc=(e,t,r)=>{let o=(()=>{switch(r.keepAspectRatioPolicy){case"not_larger":return r.axes.length>0?Math.min(...r.axes.map(u=>t[u]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case"not_smaller":return r.axes.length>0?Math.max(...r.axes.map(u=>t[u]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let i=e.slice();return r.axes.length>0?(r.axes.forEach(u=>t[u]=o),r.axes.forEach(u=>i[u]=Math.round(e[u]*t[u]))):(t.fill(o,0,t.length),i.forEach((u,a)=>i[a]=Math.round(u*t[a]))),i},ep=(e,t,r,o,i)=>`\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {\n      var original_indices: array<${e.type.value}, ${r.length}>;\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var output_index = ${e.indicesGet("output_indices","i")};\n        var scale = ${ce("uniforms.scales","i",o)};\n        var roi_low = ${ce("uniforms.roi","i",i)};\n        var roi_hi = ${ce("uniforms.roi",`i + ${t.length}`,i)};\n        if (scale == 1.0) {\n          original_indices[i] = ${e.type.value}(output_index);\n        } else {\n          var input_shape_i = ${ce("uniforms.input_shape","i",t.length)};\n          var output_shape_i = ${ce("uniforms.output_shape","i",r.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`,tp=(e,t,r,o,i,u,a)=>`\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n      var input_indices: ${e.type.indices};\n      for (var i:u32 = 0; i < ${o.length}; i++) {\n        var output_index = ${t.indicesGet("output_indices","i")};\n        var input_index: u32;\n        var scale = ${ce("uniforms.scales","i",i)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${ce("uniforms.roi","i",u)};\n          var roi_hi = ${ce("uniforms.roi",`i + ${r.length}`,u)};\n          var input_shape_i = ${ce("uniforms.input_shape","i",r.length)};\n          var output_shape_i = ${ce("uniforms.output_shape","i",o.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${a} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${e.indicesSet("input_indices","i"," input_index")}\n      }\n      return input_indices;\n    }`,rp=(e,t)=>`\n    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var input_index = ${e.indicesGet("input_indices","i")};\n        if (input_index < 0 || input_index >= ${ce("uniforms.input_shape","i",t.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`,ju=(e,t,r,o)=>e.rank>o?`\n    ${e.indicesSet("input_indices",t,"channel")};\n    ${e.indicesSet("input_indices",r,"batch")};\n`:"",np=(e,t,r,o,i)=>{let[a,c,m,g]=r.length===2?[-1,0,1,-1]:[0,2,3,1],d=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${d} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",c,`max(0, min(row, ${r[c]} - 1))`)};\n      ${e.indicesSet("input_indices",m,`max(0, min(col, ${r[m]} - 1))`)};\n      ${ju(e,g,a,2)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${d} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${d} = originalIndices[${c}];\n      var col:${d} = originalIndices[${m}];\n      ${o?`if (row < 0 || row > (${r[c]} - 1) || col < 0 || col > (${r[m]} - 1)) {\n        return ${i};\n      }`:""};\n      row = max(0, min(row, ${r[c]} - 1));\n      col = max(0, min(col, ${r[m]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${r.length>2?`u32(originalIndices[${g}])`:"0"};\n      var batch: u32 =  ${r.length>2?`u32(originalIndices[${a}])`:"0"};\n      var x11: ${d} = getInputValue(batch, channel, row1, col1);\n      var x12: ${d} = getInputValue(batch, channel, row1, col2);\n      var x21: ${d} = getInputValue(batch, channel, row2, col1);\n      var x22: ${d} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${d} = abs(row - ${d}(row1));\n      var dx2: ${d} = abs(${d}(row2) - row);\n      var dy1: ${d} = abs(col - ${d}(col1));\n      var dy2: ${d} = abs(${d}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},op=(e,t,r,o,i,u,a,c,m,g)=>{let d=r.length===2,b=!0,[v,S]=d?[0,1]:b?[2,3]:[1,2],w=e.type.value,C=O=>{let A=O===v?"row":"col";return`\n      fn ${A}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${w} {\n        var output_index = ${t.indicesGet("output_indices",O)};\n        var originalIdx: ${w} = getOriginalCoordinateFromResizedCoordinate(output_index, ${i[O]},\n        ${o[O]}, ${r[O]}, ${u[O]}, ${u[O]} + ${r.length});\n        var fractOriginalIdx: ${w} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${c} && (originalIdx < 0 || originalIdx > (${r[O]} - 1))) {\n          return ${m};\n        }\n        var data: array<${w}, 4> = array<${w}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${A}: ${w} = originalIdx + ${w}(i);\n          if (${A} < 0 || ${A} >= ${r[O]}) {\n            ${(()=>g?`coefs[i + 1] = 0.0;\n                        continue;`:c?`return ${m};`:`${A} = max(0, min(${A}, ${r[O]} - 1));`)()};\n          }\n        var input_indices_copy: ${e.type.indices} = input_indices;\n          ${e.indicesSet("input_indices_copy",O,`u32(${A})`)};\n          data[i + 1] = ${O===v?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${C(v)};\n    ${C(S)};\n  fn getCubicInterpolationCoefs(s: ${w}) -> array<${w}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${w}, 4> = array<${w}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${w} = 1.0 - absS;\n    var twoMinusAbsS: ${w} = 2.0 - absS;\n    var onePlusAbsS: ${w} = 1.0 + absS;\n    coeffs[0] = ((${a} * onePlusAbsS - 5 * ${a}) * onePlusAbsS + 8 * ${a}) * onePlusAbsS - 4 * ${a};\n    coeffs[1] = ((${a} + 2) * absS - (${a} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${a} + 2) * oneMinusAbsS - (${a} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${a} * twoMinusAbsS - 5 * ${a}) * twoMinusAbsS + 8 * ${a}) * twoMinusAbsS - 4 * ${a};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${w}, 4>, coefs: array<${w}, 4>) -> ${w} {\n    var coefsSum: ${w} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${w} {\n    var input_indices: ${e.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `},ip=(e,t,r,o,i)=>{let[a,c,m,g,d]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],b=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${b} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet("input_indices",c,`max(0, min(depth, ${r[c]} - 1))`)};\n      ${e.indicesSet("input_indices",m,`max(0, min(height, ${r[m]} - 1))`)};\n      ${e.indicesSet("input_indices",g,`max(0, min(width, ${r[g]} - 1))`)};\n      ${ju(e,d,a,3)}\n      return ${e.getByIndices("input_indices")};\n    }\n\n    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${b} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${b} = originalIndices[${c}];\n      var height:${b} = originalIndices[${m}];\n      var width:${b} = originalIndices[${g}];\n      ${o?`if (depth < 0 || depth > (${r[c]} - 1) || height < 0 || height > (${r[m]} - 1) || width < 0 || (width > ${r[g]} - 1)) {\n      return ${i};\n        }`:""};\n\n    depth = max(0, min(depth, ${r[c]} - 1));\n      height = max(0, min(height, ${r[m]} - 1));\n      width = max(0, min(width, ${r[g]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${r.length>3?`u32(originalIndices[${d}])`:"0"};\n      var batch: u32 =  ${r.length>3?`u32(originalIndices[${a}])`:"0"};\n\n      var x111: ${b} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${b} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${b} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${b} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${b} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${b} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${b} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${b} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${b} = abs(depth - ${b}(depth1));\n      var dx2: ${b} = abs(${b}(depth2) - depth);\n      var dy1: ${b} = abs(height - ${b}(height1));\n      var dy2: ${b} = abs(${b}(height2) - height);\n      var dz1: ${b} = abs(width - ${b}(width1));\n      var dz2: ${b} = abs(${b}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`},ap=(e,t,r,o,i,u)=>{let a=e.dims,c=Xc(u,t.axes,a.length),m=Jc(a,o,i,t.axes),g=o.slice();o.length===0&&(g=a.map((_,E)=>_===0?1:m[E]/_),t.keepAspectRatioPolicy!=="stretch"&&(m=Qc(a,g,t)));let d=ee("output",e.dataType,m.length),b=V("input",e.dataType,a.length),v=N.size(m),S=a.length===m.length&&a.every((_,E)=>_===m[E]),w=t.coordinateTransformMode==="tf_crop_and_resize",C=t.extrapolationValue,O=b.type.value,A=_=>`\n      ${S?"":`\n      ${Yc(t.coordinateTransformMode,O)};\n      ${(()=>{switch(t.mode){case"nearest":return`\n              ${rp(b,a)};\n              ${Zc(t.nearestMode,r,O)};\n              ${tp(b,d,a,m,g.length,c.length,w)};\n              `;case"linear":return`\n              ${ep(d,a,m,g.length,c.length)};\n              ${(()=>{if(a.length===2||a.length===4)return`${np(b,d,a,w,C)}`;if(a.length===3||a.length===5)return`${ip(b,d,a,w,C)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};\n            `;case"cubic":return`\n            ${(()=>{if(a.length===2||a.length===4)return`${op(b,d,a,m,g,c,t.cubicCoeffA,w,t.extrapolationValue,t.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};\n            `;default:throw Error("Invalid resize mode")}})()};\n      `}\n      ${_.registerUniform("output_size","u32").registerUniform("scales","f32",g.length).registerUniform("roi","f32",c.length).declareVariables(b,d)}\n      ${_.mainStart()}\n        ${_.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n        ${S?"output[global_idx] = input[global_idx];":`\n        let output_indices = ${d.offsetToIndices("global_idx")};\n        var input_indices: ${b.type.indices};\n        ${(()=>{switch(t.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${b.getByIndices("input_indices")};\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case"linear":return`output[global_idx] = ${a.length===2||a.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n`}\n      }`;return{name:"Resize",shaderCache:{hint:`${t.cacheKey}|${r}|${g.length>0?g:""}|${i.length>0?i:""}|${c.length>0?c:""}|${S}|${a}`,inputDependencies:["rank"]},getShaderSource:A,getRunData:()=>({outputs:[{dims:m,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:[{type:"uint32",data:v},{type:"float32",data:g},{type:"float32",data:c},...K(a),...K(m)]})}},sp=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},qu=(e,t)=>{let r=[],o=[],i=[],u=sp(e);if(t.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");Kc(e.inputs,t,u,r,o,i),e.compute(ap(e.inputs[0],t,u,r,o,i),{inputs:[0]})},Ku=e=>{let t=e.antialias,r=e.axes,o=e.coordinateTransformMode,i=e.cubicCoeffA,u=e.excludeOutside!==0,a=e.extrapolationValue,c=e.keepAspectRatioPolicy,m=e.mode,g=e.nearestMode===""?"simple":e.nearestMode;return ve({antialias:t,axes:r,coordinateTransformMode:o,cubicCoeffA:i,excludeOutside:u,extrapolationValue:a,keepAspectRatioPolicy:c,mode:m,nearestMode:g})}});var up,lp,Zu,Xu=te(()=>{"use strict";Ue();Ae();xe();up=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let t=e[0],r=e[1],o=e[2];if(t.dataType!==r.dataType||t.dataType!==o.dataType)throw new Error("All inputs must have the same data type");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Input must be 2D or 3D");if(r.dims.length!==3&&r.dims.length!==2)throw new Error("Skip must be 2D or 3D");let i=t.dims[t.dims.length-1],u=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==i)throw new Error("Skip must have the same hidden size as input");if(r.dims[r.dims.length-2]!==u)throw new Error("Skip must have the same sequence length as input");if(o.dims.length!==1)throw new Error("Gamma must be 1D");if(o.dims[o.dims.length-1]!==i)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let a=e[3];if(a.dims.length!==1)throw new Error("Beta must be 1D");if(a.dims[a.dims.length-1]!==i)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let a=e[4];if(a.dims.length!==1)throw new Error("Bias must be 1D");if(a.dims[a.dims.length-1]!==i)throw new Error("Bias must have the same hidden size as input")}},lp=(e,t,r,o)=>{let i=e[0].dims,u=N.size(i),a=i,c=u,m=i.slice(-1)[0],g=o?i.slice(0,-1).concat(1):[],d=e.length>3,b=e.length>4,v=o&&r>1,S=o&&r>2,w=r>3,C=He(m),O=[{type:"uint32",data:c},{type:"uint32",data:C},{type:"uint32",data:m},{type:"float32",data:t.epsilon}],A=E=>{let T=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],U=[V("x",e[0].dataType,e[0].dims,C),V("skip",e[1].dataType,e[1].dims,C),V("gamma",e[2].dataType,e[2].dims,C)];d&&U.push(V("beta",e[3].dataType,e[3].dims,C)),b&&U.push(V("bias",e[4].dataType,e[4].dims,C)),U.push(ee("output",e[0].dataType,a,C)),v&&U.push(ee("mean_output",1,g)),S&&U.push(ee("inv_std_output",1,g)),w&&U.push(ee("input_skip_bias_sum",e[0].dataType,a,C));let B=Ne(e[0].dataType);return`\n\n      ${E.registerUniforms(T).declareVariables(...U)}\n\n      ${E.mainStart()}\n        ${E.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size / uniforms.hidden_size")}\n        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;\n        let offset = global_idx * hidden_size_vectorized;\n        var sum = ${Xe("f32",C)};\n        var squareSum = ${Xe("f32",C)};\n        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {\n          let skip_value = skip[offset + i];\n          let bias_value = ${b?"bias[i]":"0.0"};\n          let input_value = x[offset + i];\n          let value = input_value + skip_value + bias_value;\n          ${w?"input_skip_bias_sum[offset + i] = value;":""}\n          output[offset + i] = value;\n          let f32_value = ${yt(B,C,"value")};\n          sum += f32_value;\n          squareSum += f32_value * f32_value;\n        }\n        let mean = ${lt("sum",C)} / f32(uniforms.hidden_size);\n        let inv_std_dev = inverseSqrt(${lt("squareSum",C)} / f32(uniforms.hidden_size) - mean * mean + uniforms.epsilon);\n        ${v?"mean_output[global_idx] = mean;":""}\n        ${S?"inv_std_output[global_idx] = inv_std_dev;":""}\n        for (var i: u32 = 0; i < hidden_size_vectorized; i++) {\n          output[offset + i] = (output[offset + i] - ${B}(mean)) * ${B}(inv_std_dev) * gamma[i] + ${d?"beta[i]":"0.0"};\n        }\n      }`},_=[{dims:a,dataType:e[0].dataType}];return r>1&&_.push({dims:g,dataType:1}),r>2&&_.push({dims:g,dataType:1}),r>3&&_.push({dims:i,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${C};${v};${S};${w}`,inputDependencies:e.map((E,T)=>"type")},getShaderSource:A,getRunData:()=>({outputs:_,dispatchGroup:{x:Math.ceil(c/m/64)},programUniforms:O})}},Zu=(e,t)=>{up(e.inputs);let o=[0];e.outputCount>1&&o.push(-3),e.outputCount>2&&o.push(-3),e.outputCount>3&&o.push(3),e.compute(lp(e.inputs,t,e.outputCount,!1),{outputs:o})}});var dp,Wn,cp,Ju,pp,mp,Qu,el,tl=te(()=>{"use strict";Ue();Ae();je();xe();dp=(e,t)=>{if(!e||e.length<1)throw new Error("too few inputs");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(t.starts.length!==t.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((r,o)=>{if(e[o+1].dataType!==6&&e[o+1].dataType!==7)throw new Error(`Input ${o} must be an array of int32 or int64`)})},Wn=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(o=>r.push(Number(o)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(o=>r.push(Number(o)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},cp=(e,t)=>{if(e.length>1){let r=Wn(e,1),o=Wn(e,2),i=Wn(e,3);return i.length===0&&(i=[...Array(e[0].dims.length).keys()]),ve({starts:r,ends:o,axes:i})}else return t},Ju=(e,t,r,o,i)=>{let u=e;return e<0&&(u+=r[o[t]]),i[t]<0?Math.max(0,Math.min(u,r[o[t]]-1)):Math.max(0,Math.min(u,r[o[t]]))},pp=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n          var input_indices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${r.length}; i >= 0; i--) {\n            let input_shape_i = ${ce("uniforms.input_shape","i",r.length)};\n            let steps_i = ${ce("uniforms.steps","i",r.length)};\n            let signs_i = ${ce("uniforms.signs","i",r.length)};\n            let starts_i = ${ce("uniforms.starts","i",r.length)};\n            var output_index = ${t.indicesGet("output_indices","i")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${e.indicesSet("input_indices","i","input_index")};\n          }\n          return input_indices;\n      }`,mp=(e,t)=>{let r=e[0].dims,o=N.size(r),i=t.axes.length>0?N.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],u=Wn(e,4);u.forEach(A=>A!==0||(()=>{throw new Error("step cannot be 0")})),u.length===0&&(u=Array(i.length).fill(1));let a=t.starts.map((A,_)=>Ju(A,_,r,i,u)),c=t.ends.map((A,_)=>Ju(A,_,r,i,u));if(i.length!==a.length||i.length!==c.length)throw new Error("start, ends and axes should have the same number of elements");if(i.length!==r.length)for(let A=0;A<r.length;++A)i.includes(A)||(a.splice(A,0,0),c.splice(A,0,r[A]),u.splice(A,0,1));let m=u.map(A=>Math.sign(A));u.forEach((A,_,E)=>{if(A<0){let T=(c[_]-a[_])/A,U=a[_],B=U+T*u[_];a[_]=B,c[_]=U,E[_]=-A}});let g=r.slice(0);i.forEach((A,_)=>{g[A]=Math.ceil((c[A]-a[A])/u[A])});let d={dims:g,dataType:e[0].dataType},b=ee("output",e[0].dataType,g.length),v=V("input",e[0].dataType,e[0].dims.length),S=N.size(g),w=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:a.length},{name:"signs",type:"i32",length:m.length},{name:"steps",type:"u32",length:u.length}],C=[{type:"uint32",data:S},{type:"uint32",data:a},{type:"int32",data:m},{type:"uint32",data:u},...K(e[0].dims),...K(g)],O=A=>`\n      ${A.registerUniforms(w).declareVariables(v,b)}\n        ${pp(v,b,r)}\n        ${A.mainStart()}\n          ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}\n          let output_indices = ${b.offsetToIndices("global_idx")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${b.setByOffset("global_idx",v.getByIndices("input_indices"))}\n      }`;return{name:"Slice",shaderCache:{hint:`${m.length}_${a.length}_${u.length}`,inputDependencies:["rank"]},getShaderSource:O,getRunData:()=>({outputs:[d],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:C})}},Qu=(e,t)=>{dp(e.inputs,t);let r=cp(e.inputs,t);e.compute(mp(e.inputs,r),{inputs:[0]})},el=e=>{let t=e.starts,r=e.ends,o=e.axes;return ve({starts:t,ends:r,axes:o})}});var fp,hp,rl,nl,ol=te(()=>{"use strict";Ae();je();xe();fp=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},hp=(e,t)=>{let r=e.dims,o=N.size(r),i=64,u=t.axis;if(u<0&&(u=r.length+u),u<r.length-1)throw new Error("softmax only supports last axis for now.");let a=r[u],c=o/a,m=He(a),g=a/m,d=(O,A)=>A===4?`max(max(${O}.x, ${O}.y), max(${O}.z, ${O}.w))`:A===2?`max(${O}.x, ${O}.y)`:A===3?`max(max(${O}.x, ${O}.y), ${O}.z)`:O,b=V("x",e.dataType,e.dims,m),v=ee("result",e.dataType,e.dims,m),S=b.type.value,w=Ne(e.dataType)==="f32"?`var threadMax = ${S}(-3.402823e+38f);`:`var threadMax = ${S}(-65504.0h);`,C=O=>`\n      var<workgroup> rowMaxShared : ${S};\n      var<workgroup> rowSumShared : ${S};\n      var<workgroup> threadShared : array<${S}, ${i}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${S} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${S}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${O.registerUniform("packedCols","i32").declareVariables(b,v)}\n      ${O.mainStart()}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = ${i};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${w}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${S}(${d("threadShared[0]",m)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${S}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${S}(${lt("threadShared[0]",m)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;return{name:"Softmax",shaderCache:{hint:`${m}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:c},programUniforms:[{type:"uint32",data:g}]}),getShaderSource:C}},rl=(e,t)=>{fp(e.inputs),e.compute(hp(e.inputs[0],t))},nl=e=>ve({axis:e.axis})});var gp,yp,bp,wp,vp,il,al,sl=te(()=>{"use strict";Ae();je();xe();gp=e=>{if(!e||e.length<1)throw new Error("too few inputs")},yp=(e,t)=>{let r=[],o=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(i=>r.push(Number(i))),o=r.length),ve({numOutputs:o,axis:t.axis,splitSizes:r})},bp=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < ${ce("uniforms.size_in_split_axis","i",e)}) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,wp=e=>{let t=e.length,r=[];for(let o=0;o<t;++o){let i=e[o].setByIndices("indices","input[global_idx]");t===1?r.push(i):o===0?r.push(`if (output_number == ${o}u) { ${i} }`):o===t-1?r.push(`else { ${i} }`):r.push(`else if (output_number == ${o}) { ${i} }`)}return`\n      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${r.join(`\n`)}\n      }`},vp=(e,t)=>{let r=e[0].dims,o=N.size(r),i=e[0].dataType,u=N.normalizeAxis(t.axis,r.length),a=new Array(t.numOutputs),c=V("input",i,r),m=new Array(t.numOutputs),g=[],d=[],b=0,v=[{type:"uint32",data:o}];for(let w=0;w<t.numOutputs;w++){b+=t.splitSizes[w],m[w]=b;let C=r.slice();C[t.axis]=t.splitSizes[w],d.push(C),a[w]=ee(`output${w}`,i,C),g.push({dims:d[w],dataType:e[0].dataType})}v.push({type:"uint32",data:m}),v.push(...K(r)),d.forEach(w=>v.push(...K(w)));let S=w=>`\n  ${w.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",m.length).declareVariables(c,...a)}\n  ${bp(m.length)}\n  ${wp(a)}\n\n  ${w.mainStart()}\n    ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}\n\n    var indices = ${c.offsetToIndices("global_idx")};\n    var index = ${c.indicesGet("indices",u)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${ce("uniforms.size_in_split_axis","output_number - 1u",m.length)};\n      ${c.indicesSet("indices",u,"index")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`;return{name:"Split",shaderCache:{hint:t.cacheKey,inputDependencies:["rank"]},getShaderSource:S,getRunData:()=>({outputs:g,dispatchGroup:{x:Math.ceil(o/64)},programUniforms:v})}},il=(e,t)=>{gp(e.inputs);let r=e.inputs.length===1?t:yp(e.inputs,t);e.compute(vp(e.inputs,r),{inputs:[0]})},al=e=>{let t=e.axis,r=e.splitSizes,o=e.numOutputs<0?r.length:e.numOutputs;if(o!==r.length)throw new Error("numOutputs and splitSizes lengh must be equal");return ve({axis:t,numOutputs:o,splitSizes:r})}});var ul,$p,Sp,_p,ll,dl=te(()=>{"use strict";Ue();Ae();xe();ul=e=>Array.from(e.getBigInt64Array(),Number),$p=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(ul(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Sp=(e,t)=>{let r=[];for(let o=0;o<e.length;++o)r.push(e[o]*t[o]);return r},_p=e=>{let t=e[0].dims,r=ul(e[1]),o=Sp(t,r),i=N.size(o),u=e[0].dataType,a=V("input",u,t.length),c=ee("output",u,o.length),m=g=>`\n      const inputShape = ${a.indices(...t)};\n      ${g.registerUniform("output_size","u32").declareVariables(a,c)}\n      ${g.mainStart()}\n      ${g.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}\n      let output_indices = ${c.offsetToIndices("global_idx")};\n      var input_indices: ${a.type.indices};\n      for (var i = 0; i < ${t.length}; i++) {\n        let input_dim_i = ${a.indicesGet("uniforms.input_shape","i")};\n        let input_dim_value = ${c.indicesGet("output_indices","i")}  % input_dim_i;\n\n        ${a.indicesSet("input_indices","i","input_dim_value")}\n      }\n      ${c.setByOffset("global_idx",a.getByIndices("input_indices"))}\n    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:"uint32",data:i},...K(e[0].dims),...K(o)]}),getShaderSource:m}},ll=e=>{$p(e.inputs),e.compute(_p(e.inputs),{inputs:[0]})}});var xp,Cp,cl,pl=te(()=>{"use strict";Ue();Ae();xe();xp=(e,t,r,o,i)=>{let u=ee("output_data",i,r.length,4),a=V("a_data",t[1].dataType,t[1].dims.length,4),c=V("b_data",t[2].dataType,t[2].dims.length,4),m=V("c_data",t[0].dataType,t[0].dims.length,4),g,d=(b,v,S)=>`select(${v}, ${b}, ${S})`;if(!o)g=u.setByOffset("global_idx",d(a.getByOffset("global_idx"),c.getByOffset("global_idx"),m.getByOffset("global_idx")));else{let b=(v,S,w="")=>{let C=`a_data[index_a${S}][component_a${S}]`,O=`b_data[index_b${S}][component_b${S}]`,A=`bool(c_data[index_c${S}] & ${4278190080>>>(3-S)*8}u)`;return`\n            let output_indices${S} = ${u.offsetToIndices(`global_idx * 4u + ${S}u`)};\n            let offset_a${S} = ${a.broadcastedIndicesToOffset(`output_indices${S}`,u)};\n            let offset_b${S} = ${c.broadcastedIndicesToOffset(`output_indices${S}`,u)};\n            let offset_c${S} = ${m.broadcastedIndicesToOffset(`output_indices${S}`,u)};\n            let index_a${S} = offset_a${S} / 4u;\n            let index_b${S} = offset_b${S} / 4u;\n            let index_c${S} = offset_c${S} / 4u;\n            let component_a${S} = offset_a${S} % 4u;\n            let component_b${S} = offset_b${S} % 4u;\n            ${v}[${S}] = ${w}(${d(C,O,A)});\n          `};i===9?g=`\n            var data = vec4<u32>(0);\n            ${b("data",0,"u32")}\n            ${b("data",1,"u32")}\n            ${b("data",2,"u32")}\n            ${b("data",3,"u32")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:g=`\n            ${b("output_data[global_idx]",0)}\n            ${b("output_data[global_idx]",1)}\n            ${b("output_data[global_idx]",2)}\n            ${b("output_data[global_idx]",3)}\n          `}return`\n        ${e.registerUniform("vec_size","u32").declareVariables(m,a,c,u)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}\n        ${g}\n      }`},Cp=e=>{let t=e[1].dims,r=e[2].dims,o=e[0].dims,i=e[1].dataType,u=!(N.areEqual(t,r)&&N.areEqual(r,o)),a=t,c=N.size(t);if(u){let g=$t.calcShape($t.calcShape(t,r,!1),o,!1);if(!g)throw new Error("Can\'t perform where op on the given tensors");a=g,c=N.size(a)}let m=Math.ceil(c/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:g=>xp(g,e,a,u,i),getRunData:()=>({outputs:[{dims:a,dataType:i}],dispatchGroup:{x:Math.ceil(c/64/4)},programUniforms:[{type:"uint32",data:m},...K(o),...K(t),...K(r),...K(a)]})}},cl=e=>{e.compute(Cp(e.inputs))}});var ml,fl=te(()=>{"use strict";Ma();Co();Va();Na();Ss();Rs();Ms();Oo();Zs();Qs();ou();su();du();mu();gu();bu();vu();ko();xu();Au();Gu();Fu();Tn();Yu();Xu();tl();ol();sl();dl();mr();Ao();pl();ml=new Map([["Abs",[Ha]],["Acos",[Ga]],["Acosh",[La]],["Add",[_s]],["ArgMax",[Da,xo]],["ArgMin",[Ba,xo]],["Asin",[Fa]],["Asinh",[ja]],["Atan",[qa]],["Atanh",[Ka]],["Attention",[za]],["AveragePool",[Bu,Ru]],["BatchNormalization",[Ua]],["BiasAdd",[Wa]],["BiasSplitGelu",[$s]],["Cast",[Za,Ya]],["Ceil",[Ja]],["Clip",[Xa]],["Concat",[Bs,Ds]],["Conv",[Bo,Ro]],["ConvTranspose",[Ys,Ks]],["Cos",[Qa]],["Cosh",[es]],["CumSum",[Xs,Js]],["Div",[xs]],["Einsum",[ru,nu]],["Elu",[ts,Pn]],["Equal",[Cs]],["Erf",[rs]],["Exp",[ns]],["Expand",[au]],["Floor",[os]],["FusedConv",[Bo,Ro]],["Gather",[lu,uu]],["GatherElements",[pu,cu]],["Gelu",[is]],["Gemm",[hu,fu]],["GlobalAveragePool",[zu,Mu]],["GlobalMaxPool",[Hu,Nu]],["Greater",[Es]],["GreaterOrEqual",[Ps]],["HardSigmoid",[ms,ps]],["InstanceNormalization",[yu]],["LayerNormalization",[wu]],["LeakyRelu",[as,Pn]],["Less",[Os]],["LessOrEqual",[ks]],["Log",[vs]],["MatMul",[Ns]],["MaxPool",[Vu,Wu]],["Mul",[As]],["MultiHeadAttention",[_u,Su]],["Neg",[us]],["Not",[ss]],["Pad",[Cu]],["Pow",[Is]],["Range",[Lu]],["Reciprocal",[ls]],["ReduceMin",[Ta]],["ReduceMean",[_a]],["ReduceMax",[Ia]],["ReduceSum",[Oa]],["ReduceProd",[Ea]],["ReduceL1",[xa]],["ReduceL2",[Ca]],["ReduceLogSum",[ka]],["ReduceLogSumExp",[Aa]],["ReduceSumSquare",[Pa]],["Relu",[ds]],["Resize",[qu,Ku]],["Sigmoid",[cs]],["Sin",[fs]],["Sinh",[hs]],["Slice",[Qu,el]],["SkipLayerNormalization",[Zu]],["Split",[il,al]],["Sqrt",[gs]],["Softmax",[rl,nl]],["Sub",[Ts]],["Tan",[ys]],["Tanh",[bs]],["ThresholdedRelu",[ws,Pn]],["Tile",[ll]],["Transpose",[da,ca]],["Where",[cl]]])});var Nn,hl=te(()=>{"use strict";cr();Ut();xe();Nn=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,o,i,u){Zt(t.programInfo.name);let a=this.backend.device,c=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2),c.setPipeline(t.computePipeline);let m=[];for(let d of r)m.push({binding:m.length,resource:{buffer:d.buffer}});for(let d of o)m.push({binding:m.length,resource:{buffer:d.buffer}});u&&m.push({binding:m.length,resource:u});let g=a.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:m,label:t.programInfo.name});c.setBindGroup(0,g),c.dispatchWorkgroups(...i),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Xt(t.programInfo.name)}dispose(){}build(t,r){Zt(t.name);let o=this.backend.device,i=[];o.features.has("shader-f16")&&i.push("enable f16;");let u=ua(r),a=t.getShaderSource(u),c=`${i.join(`\n`)}\n${u.additionalImplementations}\n${a}`,m=o.createShaderModule({code:c,label:t.name});De("verbose",()=>`[WebGPU] ${t.name} shader code: ${c}`);let g=o.createComputePipeline({compute:{module:m,entryPoint:"main"},layout:"auto",label:t.name});return Xt(t.name),{programInfo:t,computePipeline:g}}normalizeDispatchGroupSize(t){let r=typeof t=="number"?t:t.x,o=typeof t=="number"?1:t.y||1,i=typeof t=="number"?1:t.z||1,u=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=u&&o<=u&&i<=u)return[r,o,i];let a=r*o*i,c=Math.ceil(Math.sqrt(a));if(c>u){if(c=Math.ceil(Math.cbrt(a)),c>u)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[c,c,c]}else return[c,c,1]}}});var Ap,Ip,Hn,gl=te(()=>{"use strict";cr();Ue();Ut();na();sa();fl();hl();Ap=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let o=0;o<e.length;++o){let i=e[o].dataType;switch(t[o]){case"none":{r.push("");break}case"type":{r.push(`${i}`);break}case"rank":{let u=e[o].dims.length;r.push(`${i};${u}`);break}case"dims":{let u=e[o].dims.join(",");r.push(`${i};${u}`);break}default:throw new Error(`unsupported input dependency: ${t[o]}`)}}return r.join("|")},Ip=(e,t,r)=>{let o=e.name;return e.shaderCache?.hint&&(o+="["+e.shaderCache.hint+"]"),o+=":"+r+`:${Ap(t,e.shaderCache?.inputDependencies??new Array(t.length).fill("dims"))}`,o},Hn=class{constructor(){this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.maxDispatchNumber=16;this.pendingDispatchNumber=0;this.pendingKernels=[];this.pendingQueries=new Map;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,r){this.env=t;let o=[],i={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:o};r.features.has("chromium-experimental-timestamp-query-inside-passes")?o.push("chromium-experimental-timestamp-query-inside-passes"):r.features.has("timestamp-query")&&o.push("timestamp-query"),r.features.has("shader-f16")&&o.push("shader-f16"),this.device=await r.requestDevice(i),this.gpuDataManager=aa(this),this.programManager=new Nn(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,ta(t.logLevel,!!t.debug),this.device.onuncapturederror=u=>{u.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${u.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t={};this.queryType==="at-passes"&&(t.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=this.getCommandEncoder().beginComputePass(t)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;Zt(),this.endComputePass();let t;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),t=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(t,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,t,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&t.mapAsync(GPUMapMode.READ).then(()=>{let r=new BigUint64Array(t.getMappedRange()),o=this.pendingQueries.get(t);for(let i=0;i<r.length/2;i++){let u=o[i],a=u.kernelId,c=this.kernels.get(a),m=c.kernelType,g=c.kernelName,d=u.programName,b=u.inputTensorViews,v=u.outputTensorViews,S=r[i*2],w=r[i*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=S);let C=Number(S-this.queryTimeBase),O=Number(w-this.queryTimeBase);if(!Number.isSafeInteger(C)||!Number.isSafeInteger(O))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:b.map(A=>({dims:A.dims,dataType:ut(A.dataType)})),outputsMetadata:v.map(A=>({dims:A.dims,dataType:ut(A.dataType)})),kernelId:a,kernelType:m,kernelName:g,programName:d,startTime:C,endTime:O});else{let A="";b.forEach((E,T)=>{A+=`input[${T}]: [${E.dims}] | ${ut(E.dataType)}, `});let _="";v.forEach((E,T)=>{_+=`output[${T}]: [${E.dims}] | ${ut(E.dataType)}, `}),console.log(`[profiling] kernel "${a}|${m}|${g}|${d}" ${A}${_}execution time: ${O-C} ns`)}fo("GPU",`${d}::${S}::${w}`)}t.unmap(),this.pendingQueries.delete(t)}),Xt()}run(t,r,o,i,u){Zt(t.name);let a=[];for(let _=0;_<r.length;++_){let E=this.gpuDataManager.get(r[_].data);if(!E)throw new Error(`no GPU data for input: ${r[_].data}`);a[_]=E}let{outputs:c,dispatchGroup:m,programUniforms:g}=t.getRunData(r),d=o.length===0?c.map((_,E)=>E):o;if(d.length!==c.length)throw new Error(`Output size ${d.length} must be equal to ${c.length}.`);let b=[],v=[];for(let _=0;_<c.length;++_){if(!Number.isInteger(d[_])||d[_]<-3||d[_]>=c.length)throw new Error(`Invalid output index: ${d[_]}`);if(d[_]===-3)continue;let E=d[_]===-1,T=d[_]===-2,U=E||T?u(c[_].dataType,c[_].dims):i(d[_],c[_].dataType,c[_].dims),B=this.gpuDataManager.get(U.data);if(!B)throw new Error(`no GPU data for output: ${U.data}`);if(E&&this.temporaryData.push(B),T){let W=this.kernelPersistentData.get(this.currentKernelId);W||(W=[],this.kernelPersistentData.set(this.currentKernelId,W)),W.push(B)}b.push(U),v.push(B)}let S;if(g){let _=0,E=[];g.forEach(W=>{let H=typeof W.data=="number"?[W.data]:W.data;if(H.length===0)return;let J=H.length<=2?H.length*4:16;_=Math.ceil(_/J)*J,E.push(_),_+=H.length>4?Math.ceil(H.length/4)*16:H.length*4});let T=16;_=Math.ceil(_/T)*T;let U=new ArrayBuffer(_);g.forEach((W,H)=>{let J=E[H],D=typeof W.data=="number"?[W.data]:W.data;W.type==="int32"?new Int32Array(U,J,D.length).set(D):W.type==="uint32"?new Uint32Array(U,J,D.length).set(D):new Float32Array(U,J,D.length).set(D)});let B=this.gpuDataManager.create(_,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(B.buffer,0,U,0,_),this.gpuDataManager.release(B.id),S={offset:0,size:_,buffer:B.buffer}}let w=this.programManager.normalizeDispatchGroupSize(m),C=w[1]===1&&w[2]===1,O=Ip(t,r,C),A=this.programManager.getArtifact(O);if(A||(A=this.programManager.build(t,w),this.programManager.setArtifact(O,A),De("info",()=>`[artifact] key: ${O}, programName: ${t.name}`)),De("info",()=>`[ProgramManager] run "${t.name}" (key=${O}) with ${w[0]}x${w[1]}x${w[2]}`),this.queryType!=="none"){let _={kernelId:this.currentKernelId,programName:A.programInfo.name,inputTensorViews:r,outputTensorViews:b};this.pendingKernels.push(_)}return this.programManager.run(A,a,v,w,S),Xt(t.name),b}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,o,i){let u=ml.get(t);if(!u)throw new Error(`kernel not implemented: ${t}`);let a={kernelType:t,kernelName:i,kernelEntry:u[0],attributes:[u[1],o]};this.kernels.set(r,a)}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let o of r)this.gpuDataManager.release(o.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,o){let i=this.kernels.get(t);if(!i)throw new Error(`kernel not created: ${t}`);let u=i.kernelType,a=i.kernelName,c=i.kernelEntry,m=i.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${u}] ${a}" is not allowed to be called recursively`);this.currentKernelId=t,m[0]&&(m[1]=m[0](m[1]),m[0]=void 0),De("info",()=>`[WebGPU] Start to run kernel "[${u}] ${a}"...`);let g=this.env.debug;this.temporaryData=[];try{return g&&this.device.pushErrorScope("validation"),c(r,m[1]),0}catch(d){return o.push(Promise.resolve(`[WebGPU] Kernel "[${u}] ${a}" failed. ${d}`)),1}finally{g&&o.push(this.device.popErrorScope().then(d=>d?`GPU validation error for kernel "[${u}] ${a}": ${d.message}`:null));for(let d of this.temporaryData)this.gpuDataManager.release(d.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,o,i){let u=this.sessionExternalDataMapping.get(t);u||(u=new Map,this.sessionExternalDataMapping.set(t,u));let a=u.get(r),c=this.gpuDataManager.registerExternalBuffer(o,i,a?.[1]);return u.set(r,[c,o]),c}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(o=>this.gpuDataManager.unregisterExternalBuffer(o[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,o){return async()=>{let i=await yo(this,t,r);return ra(i.buffer,o)}}writeTimestamp(t){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,t)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||this.env.wasm.trace)&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}onRunStart(){this.setQueryType()}}});var yl={};gn(yl,{init:()=>Tp});var Hr,Wo,Tp,bl=te(()=>{"use strict";Ue();gl();Ut();Ae();Hr=class e{constructor(t,r,o,i){this.module=t;this.dataType=r;this.data=o;this.dims=i}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let t=N.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let t=N.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let t=N.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(N.size(t)!==N.size(this.dims))throw new Error("Invalid new shape");return new e(this.module,this.dataType,this.data,t)}},Wo=class{constructor(t,r,o){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;let i=t.HEAPU32,u=o>>>2;this.opKernelContext=i[u++];let a=i[u++];this.outputCount=i[u++],this.customDataOffset=i[u++],this.customDataSize=i[u++];let c=[];for(let m=0;m<a;m++){let g=i[u++],d=i[u++],b=i[u++],v=[];for(let S=0;S<b;S++)v.push(i[u++]);c.push(new Hr(t,g,d,v))}this.inputs=c}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(t,r){let o=r?.inputs?.map(c=>typeof c=="number"?this.inputs[c]:c)??this.inputs,i=r?.outputs??[],u=(c,m,g)=>new Hr(this.module,m,this.output(c,g),g),a=(c,m)=>{let g=zr(c);if(!g)throw new Error(`Unsupported data type: ${c}`);let d=g*N.size(m);return new Hr(this.module,c,this.backend.gpuDataManager.create(d).id,m)};return this.backend.run(t,o,i,u,a)}output(t,r){let o=this.module.stackSave();try{let i=this.module.stackAlloc((1+r.length)*4),u=i>>2;this.module.HEAPU32[u++]=r.length;for(let a=0;a<r.length;a++)this.module.HEAPU32[u++]=r[a];return this.module._JsepOutput(this.opKernelContext,t,i)}catch(i){throw new Error(`Failed to generate kernel\'s output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${i}`)}finally{this.module.stackRestore(o)}}},Tp=async(e,t,r)=>{let o=e.jsepInit;if(!o)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");let i=new Hn;await i.initialize(t,r),o(i,u=>i.alloc(u),u=>i.free(u),(u,a,c,m=!1)=>{if(m)De("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${u}, dst=${a}, size=${c}`),i.memcpy(u,a);else{De("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${u}, gpuDataId=${a}, size=${c}`);let g=e.HEAPU8.subarray(u>>>0,(u>>>0)+c);i.upload(a,g)}},async(u,a,c)=>{De("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${u}, dataOffset=${a}, size=${c}`),await i.download(u,()=>e.HEAPU8.subarray(a>>>0,(a>>>0)+c))},(u,a,c)=>i.createKernel(u,a,c,e.UTF8ToString(e._JsepGetNodeName(a))),u=>i.releaseKernel(u),(u,a,c,m)=>{De("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${c}, kernel=${u}, contextDataOffset=${a}`);let g=new Wo(e,i,a);return i.computeKernel(u,g,m)})}});var Pi;Pi=$i();var Hl=Ti(),uo,lo=!1,yn=!1,Oi=!1,Gl=e=>{if(e===1)return!1;if(typeof SharedArrayBuffer>"u")return typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+e+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),!1;typeof process<"u"&&process.versions&&process.versions.node&&console.warn("env.wasm.numThreads is set to "+e+", however, currently onnxruntime-web does not support multi-threads in Node.js. Please consider using onnxruntime-node for performance critical scenarios.");try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},Ll=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Fl=(e,t)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-simd.wasm":t?"ort-wasm-threaded.wasm":"ort-wasm.wasm",ki=async e=>{if(lo)return Promise.resolve();if(yn)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(Oi)throw new Error("previous call to \'initializeWebAssembly()\' failed.");yn=!0;let t=e.initTimeout,r=e.numThreads,o=e.simd,i=Gl(r),u=o&&Ll(),a=e.wasmPaths,c=typeof a=="string"?a:void 0,m=Fl(u,i),g=typeof a=="object"?a[m]:void 0,d=!1,b=[];if(t>0&&b.push(new Promise(v=>{setTimeout(()=>{d=!0,v()},t)})),b.push(new Promise((v,S)=>{let w=i?Hl:Pi,C={locateFile:(O,A)=>{if(i&&O.endsWith(".worker.js")&&typeof Blob<"u")return URL.createObjectURL(new Blob([Ei()],{type:"text/javascript"}));if(O.endsWith(".wasm")){if(g)return g;let _=c??A;return m==="ort-wasm-simd.wasm"?_+"ort-wasm-simd.jsep.wasm":m==="ort-wasm-simd-threaded.wasm"?_+"ort-wasm-simd-threaded.jsep.wasm":_+m}return A+O}};if(i)if(C.numThreads=r,typeof Blob>"u")C.mainScriptUrlOrBlob=(void 0)(__dirname,"ort-wasm-threaded.js");else{let O=`var ortWasmThreaded=${w.toString()};`;C.mainScriptUrlOrBlob=new Blob([O],{type:"text/javascript"})}w(C).then(O=>{yn=!1,lo=!0,uo=O,v()},O=>{yn=!1,Oi=!0,S(O)})})),await Promise.race(b),d)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},ze=()=>{if(lo&&uo)return uo;throw new Error("WebAssembly is not initialized yet.")};var Ve=(e,t)=>{let r=ze(),o=r.lengthBytesUTF8(e)+1,i=r._malloc(o);return r.stringToUTF8(e,i,o),t.push(i),i},Mr=(e,t,r,o)=>{if(typeof e=="object"&&e!==null){if(r.has(e))throw new Error("Circular reference in options");r.add(e)}Object.entries(e).forEach(([i,u])=>{let a=t?t+i:i;if(typeof u=="object")Mr(u,a+".",r,o);else if(typeof u=="string"||typeof u=="number")o(a,u.toString());else if(typeof u=="boolean")o(a,u?"1":"0");else throw new Error(`Can\'t handle extra config type: ${typeof u}`)})},Re=e=>{let t=ze(),r=t.stackSave();try{let o=t.stackAlloc(8);t._OrtGetLastError(o,o+4);let i=t.HEAP32[o/4],u=t.HEAPU32[o/4+1],a=u?t.UTF8ToString(u):"";throw new Error(`${e} ERROR_CODE: ${i}, ERROR_MESSAGE: ${a}`)}finally{t.stackRestore(r)}};var Ri=e=>{let t=ze(),r=0,o=[],i=e||{};try{if(e?.logSeverityLevel===void 0)i.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)i.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(i.terminate=!1);let u=0;return e?.tag!==void 0&&(u=Ve(e.tag,o)),r=t._OrtCreateRunOptions(i.logSeverityLevel,i.logVerbosityLevel,!!i.terminate,u),r===0&&Re("Can\'t create run options."),e?.extra!==void 0&&Mr(e.extra,"",new WeakSet,(a,c)=>{let m=Ve(a,o),g=Ve(c,o);t._OrtAddRunConfigEntry(r,m,g)!==0&&Re(`Can\'t set a run config entry: ${a} - ${c}.`)}),[r,o]}catch(u){throw r!==0&&t._OrtReleaseRunOptions(r),o.forEach(a=>t._free(a)),u}};var jl=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},ql=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},Kl=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(r=>(typeof r=="string"?r:r.name)==="webgpu")&&(e.enableMemPattern=!1)},Yl=(e,t,r)=>{for(let o of t){let i=typeof o=="string"?o:o.name;switch(i){case"webnn":if(i="WEBNN",typeof o!="string"){let a=o;if(a?.deviceType){let c=Ve("deviceType",r),m=Ve(a.deviceType,r);ze()._OrtAddSessionConfigEntry(e,c,m)!==0&&Re(`Can\'t set a session config entry: \'deviceType\' - ${a.deviceType}.`)}if(a?.numThreads){let c=a.numThreads;(typeof c!="number"||!Number.isInteger(c)||c<0)&&(c=0);let m=Ve("numThreads",r),g=Ve(c.toString(),r);ze()._OrtAddSessionConfigEntry(e,m,g)!==0&&Re(`Can\'t set a session config entry: \'numThreads\' - ${a.numThreads}.`)}if(a?.powerPreference){let c=Ve("powerPreference",r),m=Ve(a.powerPreference,r);ze()._OrtAddSessionConfigEntry(e,c,m)!==0&&Re(`Can\'t set a session config entry: \'powerPreference\' - ${a.powerPreference}.`)}}break;case"webgpu":if(i="JS",typeof o!="string"){let a=o;if(a?.preferredLayout){if(a.preferredLayout!=="NCHW"&&a.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${a.preferredLayout}`);let c=Ve("preferredLayout",r),m=Ve(a.preferredLayout,r);ze()._OrtAddSessionConfigEntry(e,c,m)!==0&&Re(`Can\'t set a session config entry: \'preferredLayout\' - ${a.preferredLayout}.`)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${i}`)}let u=Ve(i,r);ze()._OrtAppendExecutionProvider(e,u)!==0&&Re(`Can\'t append execution provider: ${i}.`)}},Bi=e=>{let t=ze(),r=0,o=[],i=e||{};Kl(i);try{let u=jl(i.graphOptimizationLevel??"all"),a=ql(i.executionMode??"sequential"),c=typeof i.logId=="string"?Ve(i.logId,o):0,m=i.logSeverityLevel??2;if(!Number.isInteger(m)||m<0||m>4)throw new Error(`log serverity level is not valid: ${m}`);let g=i.logVerbosityLevel??0;if(!Number.isInteger(g)||g<0||g>4)throw new Error(`log verbosity level is not valid: ${g}`);let d=typeof i.optimizedModelFilePath=="string"?Ve(i.optimizedModelFilePath,o):0;if(r=t._OrtCreateSessionOptions(u,!!i.enableCpuMemArena,!!i.enableMemPattern,a,!!i.enableProfiling,0,c,m,g,d),r===0&&Re("Can\'t create session options."),i.executionProviders&&Yl(r,i.executionProviders,o),i.freeDimensionOverrides)for(let[b,v]of Object.entries(i.freeDimensionOverrides)){if(typeof b!="string")throw new Error(`free dimension override name must be a string: ${b}`);if(typeof v!="number"||!Number.isInteger(v)||v<0)throw new Error(`free dimension override value must be a non-negative integer: ${v}`);let S=Ve(b,o);t._OrtAddFreeDimensionOverride(r,S,v)!==0&&Re(`Can\'t set a free dimension override: ${b} - ${v}.`)}return i.extra!==void 0&&Mr(i.extra,"",new WeakSet,(b,v)=>{let S=Ve(b,o),w=Ve(v,o);t._OrtAddSessionConfigEntry(r,S,w)!==0&&Re(`Can\'t set a session config entry: ${b} - ${v}.`)}),[r,o]}catch(u){throw r!==0&&t._OrtReleaseSessionOptions(r),o.forEach(a=>t._free(a)),u}};Ue();var Mi=async e=>{if(typeof e=="string")if(typeof process<"u"&&process.versions&&process.versions.node)try{return new Uint8Array(await(void 0)(e))}catch(t){if(t.code==="ERR_FS_FILE_TOO_LARGE"){let r=(void 0)(e),o=[];for await(let i of r)o.push(i);return new Uint8Array(Buffer.concat(o))}throw t}else{let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get("Content-Length"),o=r?parseInt(r,10):0;if(o<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let i=t.body.getReader(),u;try{u=new ArrayBuffer(o)}catch(c){if(c instanceof RangeError){let m=Math.ceil(o/65536);u=new WebAssembly.Memory({initial:m,maximum:m}).buffer}else throw c}let a=0;for(;;){let{done:c,value:m}=await i.read();if(c)break;let g=m.byteLength;new Uint8Array(u,a,g).set(m),a+=g}return new Uint8Array(u,0,o)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)};var Ep=(e,t)=>{ze()._OrtInit(e,t)!==0&&Re("Can\'t initialize onnxruntime.")},vl=async e=>{Ep(e.wasm.numThreads,Ur(e.logLevel))},$l=async(e,t)=>{if(t==="webgpu"||t==="webnn"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let r=await navigator.gpu.requestAdapter();if(!r)throw new Error(\'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.\');if(!e.wasm.simd)throw new Error("Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP");let o=(bl(),lr(yl)).init;await o(ze(),e,r)}},Gr=new Map,Op=e=>{let t=ze(),r=t.stackSave();try{let o=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,o,o+4)!==0&&Re("Can\'t get session input/output count."),[t.HEAP32[o/4],t.HEAP32[o/4+1]]}finally{t.stackRestore(r)}},No=e=>{let t=ze(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},Sl=async(e,t)=>{let r,o,i=ze();Array.isArray(e)?[r,o]=e:e.buffer===i.HEAPU8.buffer?[r,o]=[e.byteOffset,e.byteLength]:[r,o]=No(e);let u=0,a=0,c=0,m=[],g=[],d=[];try{if([a,m]=Bi(t),t?.externalData&&i.mountExternalData){let A=[];for(let _ of t.externalData){let E=typeof _=="string"?_:_.path;A.push(Mi(typeof _=="string"?_:_.data).then(T=>{i.mountExternalData(E,T)}))}await Promise.all(A)}u=await i._OrtCreateSession(r,o,a),u===0&&Re("Can\'t create a session.");let[b,v]=Op(u),S=[],w=[],C=[];for(let A=0;A<b;A++){let _=i._OrtGetInputName(u,A);_===0&&Re("Can\'t get an input name."),g.push(_),S.push(i.UTF8ToString(_))}for(let A=0;A<v;A++){let _=i._OrtGetOutputName(u,A);_===0&&Re("Can\'t get an output name."),d.push(_);let E=i.UTF8ToString(_);w.push(E);{let T=typeof t?.preferredOutputLocation=="string"?t.preferredOutputLocation:t?.preferredOutputLocation?.[E]??"cpu";if(T!=="cpu"&&T!=="cpu-pinned"&&T!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${T}.`);C.push(T)}}let O=null;return C.some(A=>A==="gpu-buffer")&&(c=i._OrtCreateBinding(u),c===0&&Re("Can\'t create IO binding."),O={handle:c,outputPreferredLocations:C,outputPreferredLocationsEncoded:C.map(A=>po(A))}),Gr.set(u,[u,g,d,O]),[u,S,w]}catch(b){throw g.forEach(v=>i._OrtFree(v)),d.forEach(v=>i._OrtFree(v)),c!==0&&i._OrtReleaseBinding(c),u!==0&&i._OrtReleaseSession(u),b}finally{i._free(r),a!==0&&i._OrtReleaseSessionOptions(a),m.forEach(b=>i._free(b)),i.unmountExternalData?.()}},_l=e=>{let t=ze(),r=Gr.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[o,i,u,a]=r;a&&t._OrtReleaseBinding(a.handle),t.jsepUnregisterBuffers?.(e),i.forEach(c=>t._OrtFree(c)),u.forEach(c=>t._OrtFree(c)),t._OrtReleaseSession(o),Gr.delete(e)},wl=(e,t,r,o,i)=>{if(!e){t.push(0);return}let u=ze(),a=e[0],c=e[1],m=e[3],g,d;if(a==="string"&&m==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");if(m==="gpu-buffer"){let S=e[2].gpuBuffer,w=zr(co(a));d=c.reduce((C,O)=>C*O,1)*w,g=u.jsepRegisterBuffer(o,i,S,d)}else{let S=e[2];if(Array.isArray(S)){d=4*S.length,g=u._malloc(d),r.push(g);let w=g/4;for(let C=0;C<S.length;C++){if(typeof S[C]!="string")throw new TypeError(`tensor data at index ${C} is not a string`);u.HEAPU32[w++]=Ve(S[C],r)}}else d=S.byteLength,g=u._malloc(d),r.push(g),u.HEAPU8.set(new Uint8Array(S.buffer,S.byteOffset,d),g)}let b=u.stackSave(),v=u.stackAlloc(4*c.length);try{let S=v/4;c.forEach(C=>u.HEAP32[S++]=C);let w=u._OrtCreateTensor(co(a),g,d,v,c.length,po(m));w===0&&Re(`Can\'t create tensor for input/output. session=${o}, index=${i}.`),t.push(w)}finally{u.stackRestore(b)}},xl=async(e,t,r,o,i,u)=>{let a=ze(),c=Gr.get(e);if(!c)throw new Error(`cannot run inference. invalid session id: ${e}`);let[m,g,d,b]=c,v=t.length,S=o.length,w=0,C=[],O=[],A=[],_=[],E=a.stackSave(),T=a.stackAlloc(v*4),U=a.stackAlloc(v*4),B=a.stackAlloc(S*4),W=a.stackAlloc(S*4);try{[w,C]=Ri(u);for(let re=0;re<v;re++)wl(r[re],O,_,e,t[re]);for(let re=0;re<S;re++)wl(i[re],A,_,e,v+o[re]);let H=T/4,J=U/4,D=B/4,j=W/4;for(let re=0;re<v;re++)a.HEAPU32[H++]=O[re],a.HEAPU32[J++]=g[t[re]];for(let re=0;re<S;re++)a.HEAPU32[D++]=A[re],a.HEAPU32[j++]=d[o[re]];if(b){let{handle:re,outputPreferredLocations:$e,outputPreferredLocationsEncoded:Ge}=b;if(g.length!==v)throw new Error(`input count from feeds (${v}) is expected to be always equal to model\'s input count (${g.length}).`);for(let ge=0;ge<v;ge++){let Te=t[ge];await a._OrtBindInput(re,g[Te],O[ge])!==0&&Re(`Can\'t bind input[${ge}] for session=${e}.`)}for(let ge=0;ge<S;ge++){let Te=o[ge];i[ge]?.[3]?a._OrtBindOutput(re,d[Te],A[ge],0)!==0&&Re(`Can\'t bind pre-allocated output[${ge}] for session=${e}.`):a._OrtBindOutput(re,d[Te],0,Ge[Te])!==0&&Re(`Can\'t bind output[${ge}] to ${$e[ge]} for session=${e}.`)}}a.jsepOnRunStart?.();let se;b?se=await a._OrtRunWithBinding(m,b.handle,S,B,w):se=await a._OrtRun(m,U,T,v,W,S,B,w),se!==0&&Re("failed to call OrtRun().");let be=[];for(let re=0;re<S;re++){let $e=a.HEAPU32[B/4+re];if($e===A[re]){be.push(i[re]);continue}let Ge=a.stackSave(),ge=a.stackAlloc(4*4),Te=!1,pe,we=0;try{a._OrtGetTensorData($e,ge,ge+4,ge+8,ge+12)!==0&&Re(`Can\'t access output tensor data on index ${re}.`);let Me=ge/4,Ke=a.HEAPU32[Me++];we=a.HEAPU32[Me++];let F=a.HEAPU32[Me++],oe=a.HEAPU32[Me++],he=[];for(let ke=0;ke<oe;ke++)he.push(a.HEAPU32[F/4+ke]);a._OrtFree(F);let Je=he.reduce((ke,Le)=>ke*Le,1);pe=ut(Ke);let ot=b?.outputPreferredLocations[o[re]];if(pe==="string"){if(ot==="gpu-buffer")throw new Error("String tensor is not supported on GPU.");let ke=[],Le=we/4;for(let Tt=0;Tt<Je;Tt++){let Et=a.HEAPU32[Le++],Wt=Tt===Je-1?void 0:a.HEAPU32[Le]-Et;ke.push(a.UTF8ToString(Et,Wt))}be.push([pe,he,ke,"cpu"])}else if(ot==="gpu-buffer"&&Je>0){let ke=a.jsepGetBuffer(we),Le=zr(Ke);if(Le===void 0||!Di(pe))throw new Error(`Unsupported data type: ${pe}`);Te=!0,be.push([pe,he,{gpuBuffer:ke,download:a.jsepCreateDownloader(ke,Je*Le,pe),dispose:()=>{a._OrtReleaseTensor($e)}},"gpu-buffer"])}else{let ke=bn(pe),Le=new ke(Je);new Uint8Array(Le.buffer,Le.byteOffset,Le.byteLength).set(a.HEAPU8.subarray(we,we+Le.byteLength)),be.push([pe,he,Le,"cpu"])}}finally{a.stackRestore(Ge),pe==="string"&&we&&a._free(we),Te||a._OrtReleaseTensor($e)}}return b&&a._OrtClearBoundOutputs(b.handle),be}finally{a.stackRestore(E),O.forEach(H=>a._OrtReleaseTensor(H)),A.forEach(H=>a._OrtReleaseTensor(H)),_.forEach(H=>a._free(H)),w!==0&&a._OrtReleaseRunOptions(w),C.forEach(H=>a._free(H))}},Cl=e=>{let t=ze(),r=Gr.get(e);if(!r)throw new Error("invalid session id");let o=r[0],i=t._OrtEndProfiling(o);i===0&&Re("Can\'t get an profile file name."),t._OrtFree(i)},Al=e=>{let t=[];for(let r of e){let o=r[2];!Array.isArray(o)&&"buffer"in o&&t.push(o.buffer)}return t};self.onmessage=e=>{let{type:t,in:r}=e.data;try{switch(t){case"init-wasm":ki(r.wasm).then(()=>{vl(r).then(()=>{postMessage({type:t})},o=>{postMessage({type:t,err:o})})},o=>{postMessage({type:t,err:o})});break;case"init-ep":{let{epName:o,env:i}=r;$l(i,o).then(()=>{postMessage({type:t})},u=>{postMessage({type:t,err:u})});break}case"copy-from":{let{buffer:o}=r,i=No(o);postMessage({type:t,out:i});break}case"create":{let{model:o,options:i}=r;Sl(o,i).then(u=>{postMessage({type:t,out:u})},u=>{postMessage({type:t,err:u})});break}case"release":_l(r),postMessage({type:t});break;case"run":{let{sessionId:o,inputIndices:i,inputs:u,outputIndices:a,options:c}=r;xl(o,i,u,a,new Array(a.length).fill(null),c).then(m=>{m.some(g=>g[3]!=="cpu")?postMessage({type:t,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:t,out:m},Al(m))},m=>{postMessage({type:t,err:m})});break}case"end-profiling":Cl(r),postMessage({type:t});break;default:}}catch(o){postMessage({type:t,err:o})}};})();\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n'});var ur,wt,nn,di,ci,ma,ha,Sr,xr,Df,li,yd,bd,vd,wd,$d,_d,Sd,ga=ee(()=>{"use strict";vt();hd();wr();ur=()=>!!Te.wasm.proxy&&typeof document<"u",nn=!1,di=!1,ci=!1,ha=new Map,Sr=(e,t)=>{let r=ha.get(e);r?r.push(t):ha.set(e,[t])},xr=()=>{if(nn||!di||ci||!wt)throw new Error("worker not ready")},Df=e=>{switch(e.data.type){case"init-wasm":nn=!1,e.data.err?(ci=!0,ma[1](e.data.err)):(di=!0,ma[0]());break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let t=ha.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}default:}},li=typeof document<"u"?document?.currentScript?.src:void 0,yd=async()=>{if(!di){if(nn)throw new Error("multiple calls to 'initWasm()' detected.");if(ci)throw new Error("previous call to 'initWasm()' failed.");if(nn=!0,ur())return Te.wasm.wasmPaths===void 0&&li&&li.indexOf("blob:")!==0&&(Te.wasm.wasmPaths=li.substr(0,+li.lastIndexOf("/")+1)),new Promise((e,t)=>{wt?.terminate();let r=URL.createObjectURL(new Blob([gd()],{type:"text/javascript"}));wt=new Worker(r,{name:"ort-wasm-proxy-worker"}),wt.onerror=a=>t(a),wt.onmessage=Df,URL.revokeObjectURL(r),ma=[e,t];let n={type:"init-wasm",in:Te};wt.postMessage(n)});try{await zo(Te.wasm),await ud(Te),di=!0}catch(e){throw ci=!0,e}finally{nn=!1}}},bd=async e=>{if(ur())return xr(),new Promise((t,r)=>{Sr("init-ep",[t,r]);let n={type:"init-ep",in:{epName:e,env:Te}};wt.postMessage(n)});await ld(Te,e)},vd=async e=>ur()?(xr(),new Promise((t,r)=>{Sr("copy-from",[t,r]);let n={type:"copy-from",in:{buffer:e}};wt.postMessage(n,[e.buffer])})):fa(e),wd=async(e,t)=>{if(ur()){if(t?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return xr(),new Promise((r,n)=>{Sr("create",[r,n]);let a={type:"create",in:{model:e,options:t}},u=[];e instanceof Uint8Array&&u.push(e.buffer),wt.postMessage(a,u)})}else return dd(e,t)},$d=async e=>{if(ur())return xr(),new Promise((t,r)=>{Sr("release",[t,r]);let n={type:"release",in:e};wt.postMessage(n)});cd(e)},_d=async(e,t,r,n,a,u)=>{if(ur()){if(r.some(o=>o[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(a.some(o=>o))throw new Error("pre-allocated output tensor is not supported for proxy.");return xr(),new Promise((o,d)=>{Sr("run",[o,d]);let p=r,m={type:"run",in:{sessionId:e,inputIndices:t,inputs:p,outputIndices:n,options:u}};wt.postMessage(m,md(p))})}else return pd(e,t,r,n,a,u)},Sd=async e=>{if(ur())return xr(),new Promise((t,r)=>{Sr("end-profiling",[t,r]);let n={type:"end-profiling",in:e};wt.postMessage(n)});fd(e)}});var xd,zf,pi,Cd=ee(()=>{"use strict";vt();ga();Ue();Vi();xd=(e,t)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},zf=e=>{switch(e[3]){case"cpu":return new Xe(e[0],e[2],e[1]);case"gpu-buffer":{let t=e[0];if(!Vn(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:n,dispose:a}=e[2];return Xe.fromGpuBuffer(r,{dataType:t,dims:e[1],download:n,dispose:a})}default:throw new Error(`invalid data location: ${e[3]}`)}},pi=class{async fetchModelAndCopyToWasmMemory(t){return vd(await Qr(t))}async loadModel(t,r){ct();let n;typeof t=="string"?typeof process<"u"&&process.versions&&process.versions.node?n=await Qr(t):n=await this.fetchModelAndCopyToWasmMemory(t):n=t,[this.sessionId,this.inputNames,this.outputNames]=await wd(n,r),pt()}async dispose(){return $d(this.sessionId)}async run(t,r,n){ct();let a=[],u=[];Object.entries(t).forEach(b=>{let v=b[0],$=b[1],x=this.inputNames.indexOf(v);if(x===-1)throw new Error(`invalid input '${v}'`);a.push($),u.push(x)});let o=[],d=[];Object.entries(r).forEach(b=>{let v=b[0],$=b[1],x=this.outputNames.indexOf(v);if(x===-1)throw new Error(`invalid output '${v}'`);o.push($),d.push(x)});let p=a.map((b,v)=>xd(b,()=>`input "${this.inputNames[u[v]]}"`)),m=o.map((b,v)=>b?xd(b,()=>`output "${this.outputNames[d[v]]}"`):null),l=await _d(this.sessionId,u,p,d,m,n),y={};for(let b=0;b<l.length;b++)y[this.outputNames[d[b]]]=o[b]??zf(l[b]);return pt(),y}startProfiling(){}endProfiling(){Sd(this.sessionId)}}});var Mf,fi,Id=ee(()=>{"use strict";vt();ga();Cd();Mf=()=>{if((typeof Te.wasm.initTimeout!="number"||Te.wasm.initTimeout<0)&&(Te.wasm.initTimeout=0),typeof Te.wasm.simd!="boolean"&&(Te.wasm.simd=!0),typeof Te.wasm.proxy!="boolean"&&(Te.wasm.proxy=!1),typeof Te.wasm.trace!="boolean"&&(Te.wasm.trace=!1),typeof Te.wasm.numThreads!="number"||!Number.isInteger(Te.wasm.numThreads)||Te.wasm.numThreads<=0){(typeof self<"u"&&!self.crossOriginIsolated||typeof process<"u"&&process.versions&&process.versions.node)&&(Te.wasm.numThreads=1);let e=typeof navigator>"u"?(void 0)().length:navigator.hardwareConcurrency;Te.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},fi=class{async init(t){Mf(),await yd(),await bd(t)}async createInferenceSessionHandler(t,r){let n=new pi;return await n.loadModel(t,r),Promise.resolve(n)}}});var Ad={};ir(Ad,{wasmBackend:()=>Uf});var Uf,Td=ee(()=>{"use strict";Id();Uf=new fi});var Nf={};ir(Nf,{InferenceSession:()=>ho,TRACE:()=>qr,TRACE_FUNC_BEGIN:()=>ct,TRACE_FUNC_END:()=>pt,Tensor:()=>Xe,TrainingSession:()=>vo,default:()=>Wf,env:()=>Te,registerBackend:()=>jt});vt();vt();vt();var $o="1.18.0";var Wf=Oi;{let e=(Td(),Ft(Ad)).wasmBackend;jt("webgpu",e,5),jt("webnn",e,5),jt("cpu",e,10),jt("wasm",e,10)}Object.defineProperty(Te.versions,"web",{value:$o,enumerable:!0});return Ft(Nf);})();
/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
//# sourceMappingURL=ort.webgpu.min.js.map
