{"version":3,"file":"ort.es5.min.js","mappings":"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","sources":["webpack://ort/webpack/universalModuleDefinition","webpack://ort/./lib/backend-onnxjs.ts","webpack://ort/./lib/backend-wasm.ts","webpack://ort/./lib/index.ts","webpack://ort/./lib/onnxjs/attribute-with-cache-key.ts","webpack://ort/./lib/onnxjs/attribute.ts","webpack://ort/./lib/onnxjs/backend.ts","webpack://ort/./lib/onnxjs/backends/backend-webgl.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://ort/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://ort/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://ort/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://ort/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://ort/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://ort/./lib/onnxjs/backends/webgl/types.ts","webpack://ort/./lib/onnxjs/backends/webgl/utils.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://ort/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://ort/./lib/onnxjs/execution-plan.ts","webpack://ort/./lib/onnxjs/graph.ts","webpack://ort/./lib/onnxjs/instrument.ts","webpack://ort/./lib/onnxjs/model.ts","webpack://ort/./lib/onnxjs/operators.ts","webpack://ort/./lib/onnxjs/opset.ts","webpack://ort/./lib/onnxjs/ort-schema/flatbuffers/ort-generated.ts","webpack://ort/./lib/onnxjs/session-handler.ts","webpack://ort/./lib/onnxjs/session.ts","webpack://ort/./lib/onnxjs/tensor.ts","webpack://ort/./lib/onnxjs/util.ts","webpack://ort/./lib/version.ts","webpack://ort/./lib/wasm/jsep/backend-webgpu.ts","webpack://ort/./lib/wasm/jsep/init.ts","webpack://ort/./lib/wasm/jsep/log.ts","webpack://ort/./lib/wasm/jsep/util.ts","webpack://ort/./lib/wasm/jsep/webgpu/attribute-with-cache-key.ts","webpack://ort/./lib/wasm/jsep/webgpu/gpu-data-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/op-resolve-rules.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/activation_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv2d_mm_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_backprop_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/conv_util.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/3rd-party/matmul_packed_webgpu.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/argminmax.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/binary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/common.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/concat.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv-grouped.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv-transpose.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/conv2d-mm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/einsum.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/expand.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/fuse-utils.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gather-elements.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gather.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/gemm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/instance-norm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/layer-norm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/matmul.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/pad.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/pool.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/reduce.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/resize.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/skip-layer-norm.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/slice.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/softmax.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/split.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/tile.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/transpose.ts","webpack://ort/./lib/wasm/jsep/webgpu/ops/unary-op.ts","webpack://ort/./lib/wasm/jsep/webgpu/program-manager.ts","webpack://ort/./lib/wasm/jsep/webgpu/types.ts","webpack://ort/./lib/wasm/proxy-wrapper.ts","webpack://ort/./lib/wasm/run-options.ts","webpack://ort/./lib/wasm/session-handler.ts","webpack://ort/./lib/wasm/session-options.ts","webpack://ort/./lib/wasm/wasm-common.ts","webpack://ort/./lib/wasm/wasm-core-impl.ts","webpack://ort/./lib/wasm/wasm-factory.ts","webpack://ort/./lib/wasm/wasm-utils.ts","webpack://ort/./lib/wasm/proxy-worker/main.ts","webpack://ort/../node_modules/worker-loader/dist/runtime/inline.js","webpack://ort/./lib/onnxjs/ort-schema/protobuf/onnx.js","webpack://ort/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://ort/./lib/wasm/binding/ort-wasm.js","webpack://ort/./node_modules/@protobufjs/aspromise/index.js","webpack://ort/./node_modules/@protobufjs/base64/index.js","webpack://ort/./node_modules/@protobufjs/eventemitter/index.js","webpack://ort/./node_modules/@protobufjs/float/index.js","webpack://ort/./node_modules/@protobufjs/inquire/index.js","webpack://ort/./node_modules/@protobufjs/pool/index.js","webpack://ort/./node_modules/@protobufjs/utf8/index.js","webpack://ort/./node_modules/guid-typescript/dist/guid.js","webpack://ort/./node_modules/protobufjs/minimal.js","webpack://ort/./node_modules/protobufjs/src/index-minimal.js","webpack://ort/./node_modules/protobufjs/src/reader.js","webpack://ort/./node_modules/protobufjs/src/reader_buffer.js","webpack://ort/./node_modules/protobufjs/src/roots.js","webpack://ort/./node_modules/protobufjs/src/rpc.js","webpack://ort/./node_modules/protobufjs/src/rpc/service.js","webpack://ort/./node_modules/protobufjs/src/util/longbits.js","webpack://ort/./node_modules/protobufjs/src/util/minimal.js","webpack://ort/./node_modules/protobufjs/src/writer.js","webpack://ort/./node_modules/protobufjs/src/writer_buffer.js","webpack://ort/../common/dist/cjs/backend-impl.js","webpack://ort/../common/dist/cjs/backend.js","webpack://ort/../common/dist/cjs/env-impl.js","webpack://ort/../common/dist/cjs/env.js","webpack://ort/../common/dist/cjs/index.js","webpack://ort/../common/dist/cjs/inference-session-impl.js","webpack://ort/../common/dist/cjs/inference-session.js","webpack://ort/../common/dist/cjs/onnx-value.js","webpack://ort/../common/dist/cjs/tensor-conversion-impl.js","webpack://ort/../common/dist/cjs/tensor-factory-impl.js","webpack://ort/../common/dist/cjs/tensor-impl-type-mapping.js","webpack://ort/../common/dist/cjs/tensor-impl.js","webpack://ort/../common/dist/cjs/tensor-utils-impl.js","webpack://ort/../common/dist/cjs/tensor.js","webpack://ort/../common/dist/cjs/version.js","webpack://ort/./node_modules/long/umd/index.js","webpack://ort/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://ort/webpack/bootstrap","webpack://ort/webpack/runtime/compat get default export","webpack://ort/webpack/runtime/define property getters","webpack://ort/webpack/runtime/hasOwnProperty shorthand","webpack://ort/webpack/runtime/make namespace object","webpack://ort/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ort\"] = factory();\n\telse\n\t\troot[\"ort\"] = factory();\n})(self, function() {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initializeWebAssemblyInstance} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyInstance();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend, env} from 'onnxruntime-common';\nimport {version} from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU && typeof navigator !== 'undefined' && navigator.gpu) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n  registerBackend('webnn', wasmBackend, 9);\n}\n\nObject.defineProperty(env.versions, 'web', {value: version, enumerable: true});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Object.defineProperty(env.webgl, 'context', {value: this.glContext.gl});\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  if (!context) {\n    try {\n      // try to create webgl context from an offscreen canvas\n      const offscreenCanvas = createOffscreenCanvas();\n      context = createNewWebGLContext(offscreenCanvas, contextId);\n    } catch (e) {\n      // if failed, fallback to try to use a normal canvas element\n      const canvas = createCanvas();\n      context = createNewWebGLContext(canvas, contextId);\n    }\n  }\n\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    throw new TypeError('failed to create canvas: document is not supported');\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n\nfunction createOffscreenCanvas(): HTMLCanvasElement {\n  if (typeof OffscreenCanvas === 'undefined') {\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\n  }\n  return new OffscreenCanvas(1, 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi / scales not given\n          if (input === '' && (nodeProto.input.length === 3 || nodeProto.input.length === 4) &&\n              nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16,\n    FLOAT8E4M3FN = 17,\n    FLOAT8E4M3FNUZ = 18,\n    FLOAT8E5M2 = 19,\n    FLOAT8E5M2FNUZ = 20,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\n\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n    int64: BigInt64Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'int64':\n      return BigInt64Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/flatbuffers/ort-generated';\nimport {onnx} from './ort-schema/protobuf/onnx';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]) as number, b.get([]) as number));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]) as number;\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]) as number;\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA) as number;\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB) as number;\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.17.0';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {configureLogger, LOG_DEBUG} from './log';\nimport {TensorView} from './tensor-view';\nimport {createGpuDataManager, GpuDataManager} from './webgpu/gpu-data-manager';\nimport {RunFunction, WEBGPU_OP_RESOLVE_RULES} from './webgpu/op-resolve-rules';\nimport {ProgramManager} from './webgpu/program-manager';\nimport {ComputeContext, GpuData, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/**\n * get a unique key representing the program from the program info, input shapes and types.\n *\n * @returns a unique key is a shorter string than the shader source, which contains all the information to identify a\n * program. if the key is the same, the program shader source should be the same, so we can reuse the program.\n *\n */\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTensors: readonly TensorView[]): string => {\n      // final key format:\n      // <PROGRAM_NAME>[<PROGRAM_CUSTOM_CACHE_HINT>]:<INPUTS_INFO_0>|<INPUTS_INFO_1>|...\n      const inputInfos = inputTensors.map(tensor => `${tensor.dataType};${tensor.dims.join(',')}`).join('|');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputInfos;\n      return key;\n    };\n\n/**\n * this class is designed to store status and being used as a singleton for JSEP. It will be passed to jsepInit() as\n * the first parameter so that it is stored for future use.\n */\nexport class WebGpuBackend {\n  device: GPUDevice;\n  /**\n   * an instance of GpuDataManager to manage a GpuDataId -> GpuBuffer mapping\n   */\n  gpuDataManager: GpuDataManager;\n  /**\n   * an instance of ProgramManager to build and run WebGPU compute shader program, and manage a ProgramKey -> Program\n   * artifacts mapping\n   */\n  programManager: ProgramManager;\n\n  /**\n   * representing the kernel ID of which is currently being computed (CPU code perspective).\n   * `null` means no kernel is being computed.\n   * only one kernel can be computed at a moment.\n   */\n  currentKernelId: number|null = null;\n  /**\n   * a list of temporary GPU data for the current kernel. should release when the kernel done computation.\n   */\n  private temporaryData: GpuData[];\n  /**\n   * a KernelID -> a GPU data list, which stores persistent GPU data owned by the specific kernel.\n   */\n  private kernelPersistentData: Map<number, GpuData[]>;\n  /**\n   * a KernelID -> a custom data, which stores custom data owned by the specific kernel.\n   */\n  private kernelCustomData: Map<number, {[key: string]: unknown}>;\n  /**\n   * get the custom data of the current kernel\n   */\n  get currentKernelCustomData(): {[key: string]: unknown} {\n    if (this.currentKernelId === null) {\n      throw new Error('currentKernelCustomData(): currentKernelId is null. (should not happen)');\n    }\n\n    let data = this.kernelCustomData.get(this.currentKernelId);\n    if (!data) {\n      data = {};\n      this.kernelCustomData.set(this.currentKernelId, data);\n    }\n\n    return data;\n  }\n\n  /**\n   * a KernelID -> kernel info mapping. value is\n   * [ op_type, name, run function, [optional] preprocess_attribute_once function ]\n   */\n  kernels: Map<number, [string, string, RunFunction, [((attribute: unknown) => unknown) | undefined, unknown]]>;\n\n  commandEncoder: GPUCommandEncoder|null = null;\n  computePassEncoder: GPUComputePassEncoder|null = null;\n  pendingDispatchNumber = 0;\n\n  supportTimestampQuery = false;\n  profilingQuerySet: GPUQuerySet;\n  profilingQueryData: GpuData;\n  profilingTimeBase?: bigint;\n\n  env: Env;\n\n  async initialize(env: Env): Promise<void> {\n    if (!navigator.gpu) {\n      // WebGPU is not available.\n      throw new Error('WebGpuBackend: WebGPU is not available.');\n    }\n\n    const adapter = await navigator.gpu.requestAdapter();\n    if (!adapter) {\n      throw new Error('WebGpuBackend: Failed to get GPU adapter.');\n    }\n\n    this.env = env;\n    const requiredFeatures: GPUFeatureName[] = [];\n    const deviceDescriptor: GPUDeviceDescriptor = {\n      requiredLimits: {\n        maxComputeWorkgroupStorageSize: adapter.limits.maxComputeWorkgroupStorageSize,\n        maxComputeWorkgroupsPerDimension: adapter.limits.maxComputeWorkgroupsPerDimension,\n        maxStorageBufferBindingSize: adapter.limits.maxStorageBufferBindingSize,\n        maxBufferSize: adapter.limits.maxBufferSize,\n        maxComputeInvocationsPerWorkgroup: adapter.limits.maxComputeInvocationsPerWorkgroup,\n        maxComputeWorkgroupSizeX: adapter.limits.maxComputeWorkgroupSizeX,\n        maxComputeWorkgroupSizeY: adapter.limits.maxComputeWorkgroupSizeY,\n        maxComputeWorkgroupSizeZ: adapter.limits.maxComputeWorkgroupSizeZ,\n      },\n      requiredFeatures,\n    };\n    // WebGPU Spec: Timestamp Queries Inside Passes\n    // https://github.com/gpuweb/gpuweb/blob/main/proposals/timestamp-query-inside-passes.md\n    if (adapter.features.has('timestamp-query-inside-passes')) {\n      this.supportTimestampQuery = true;\n      requiredFeatures.push('timestamp-query-inside-passes' as GPUFeatureName);\n    }\n    if (adapter.features.has('shader-f16')) {\n      requiredFeatures.push('shader-f16');\n    }\n\n    this.device = await adapter.requestDevice(deviceDescriptor);\n    this.gpuDataManager = createGpuDataManager(this);\n    this.programManager = new ProgramManager(this);\n    this.kernels = new Map();\n    this.kernelPersistentData = new Map();\n    this.kernelCustomData = new Map();\n\n    // set up flags for logger\n    configureLogger(env.logLevel!, !!env.debug);\n\n    // TODO: set up flags\n\n    this.device.onuncapturederror = ev => {\n      if (ev.error instanceof GPUValidationError) {\n        // eslint-disable-next-line no-console\n        console.error(`An uncaught WebGPU validation error was raised: ${ev.error.message}`);\n      }\n    };\n\n    if (this.supportTimestampQuery) {\n      this.profilingQuerySet = this.device.createQuerySet({\n        type: 'timestamp',\n        count: 2,\n      });\n    }\n\n    Object.defineProperty(this.env.webgpu, 'device', {value: this.device});\n  }\n\n  dispose(): void {\n    // currently, we do not do anything in this function. In all known use cases, we don't have the requirement to\n    // actually dispose the WebGpuBackend instance, because it's always used as a singleton.\n    //\n    // revisit this place if we get real requirement to dispose the instance.\n  }\n\n  getCommandEncoder(): GPUCommandEncoder {\n    if (!this.commandEncoder) {\n      this.commandEncoder = this.device.createCommandEncoder();\n    }\n    return this.commandEncoder;\n  }\n\n  getComputePassEncoder(): GPUComputePassEncoder {\n    if (!this.computePassEncoder) {\n      this.computePassEncoder = this.getCommandEncoder().beginComputePass();\n    }\n    return this.computePassEncoder;\n  }\n\n  endComputePass(): void {\n    if (this.computePassEncoder) {\n      this.computePassEncoder.end();\n      this.computePassEncoder = null;\n    }\n  }\n\n  flush(): void {\n    this.endComputePass();\n    this.device.queue.submit([this.getCommandEncoder().finish()]);\n    this.gpuDataManager.refreshPendingBuffers();\n    this.commandEncoder = null;\n    this.pendingDispatchNumber = 0;\n  }\n\n  /**\n   * run a WebGPU program.\n   * @param program either a ProgramInfo instance containing metadata including the shader code, or a function that\n   * can be called and return a ProgramInfo instance\n   * @param inputs a TensorView array. each element represents a value already exists in GPU.\n   * @param outputIndices an indices array. each element can be either -1 (temporary data), -2 (persistent data) or an\n   * index to the kernel's output.\n   * @param createKernelOutput a callback function that create a value to kernel's output with the given index\n   * @param createIntermediateOutput a callback function that create a value as a intermediate value, either temporary\n   * or persistent (owned by the current kernel)\n   * @returns a TensorView array representing the result.\n   */\n  run(program: ProgramInfoLoader|ProgramInfo, inputs: readonly TensorView[], outputIndices: readonly number[],\n      createKernelOutput: (index: number, dataType: number, dims: readonly number[]) => TensorView,\n      createIntermediateOutput: (dataType: number, dims: readonly number[]) => TensorView): TensorView[] {\n    if (inputs.length !== program.inputTypes.length) {\n      throw new Error(`Input size must be equal to ${program.inputTypes.length}.`);\n    }\n\n    // create info for inputs\n    const inputDatas: GpuData[] = [];\n    for (let i = 0; i < inputs.length; ++i) {\n      const gpuData = this.gpuDataManager.get(inputs[i].data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for input: ${inputs[i].data}`);\n      }\n      inputDatas[i] = gpuData;\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputs);\n    let artifact = this.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // check output indices\n    const validatedOutputIndices = outputIndices.length === 0 ? programInfo.outputs.map((_, i) => i) : outputIndices;\n    if (validatedOutputIndices.length !== programInfo.outputs.length) {\n      throw new Error(`Output size ${validatedOutputIndices.length} must be equal to ${programInfo.outputs.length}.`);\n    }\n\n    // create info for outputs\n    const outputTensorViews: TensorView[] = [];\n    const outputDatas: GpuData[] = [];\n    for (let i = 0; i < programInfo.outputs.length; ++i) {\n      // value -1 and -2 are used for creating temporary and persistent outputs.\n      // value -3 is used for placeholder output. So -3, -2, -1 and 0, 1, 2, ... are valid\n      // output indices. see type definition of ComputeContextInputsOutputsMapping for more details.\n      if (!Number.isInteger(validatedOutputIndices[i]) || validatedOutputIndices[i] < -3 ||\n          validatedOutputIndices[i] >= programInfo.outputs.length) {\n        throw new Error(`Invalid output index: ${validatedOutputIndices[i]}`);\n      }\n      if (validatedOutputIndices[i] === -3) {\n        continue;\n      }\n      const isTemporary = validatedOutputIndices[i] === -1;\n      const isPersistent = validatedOutputIndices[i] === -2;\n      const tensorView = (isTemporary || isPersistent) ?\n          createIntermediateOutput(programInfo.outputs[i].dataType, programInfo.outputs[i].dims) :\n          createKernelOutput(validatedOutputIndices[i], programInfo.outputs[i].dataType, programInfo.outputs[i].dims);\n      const gpuData = this.gpuDataManager.get(tensorView.data);\n      if (!gpuData) {\n        throw new Error(`no GPU data for output: ${tensorView.data}`);\n      }\n      if (isTemporary) {\n        this.temporaryData.push(gpuData);\n      }\n      if (isPersistent) {\n        let persistentData = this.kernelPersistentData.get(this.currentKernelId!);\n        if (!persistentData) {\n          persistentData = [];\n          this.kernelPersistentData.set(this.currentKernelId!, persistentData);\n        }\n        persistentData.push(gpuData);\n      }\n      outputTensorViews.push(tensorView);\n      outputDatas.push(gpuData);\n    }\n\n    const normalizedDispatchGroup = this.programManager.normalizeDispatchGroupSize(programInfo.dispatchGroup(inputs));\n\n    if (!artifact) {\n      artifact = this.programManager.build(programInfo, normalizedDispatchGroup);\n      this.programManager.setArtifact(key, artifact);\n    }\n\n    LOG_DEBUG(\n        'info',\n        () => `[ProgramManager] run \"${programInfo.name}\" (key=${key}) with ${normalizedDispatchGroup[0]}x${\n            normalizedDispatchGroup[1]}x${normalizedDispatchGroup[2]}`);\n    this.programManager.run(artifact, inputs, inputDatas, outputDatas, normalizedDispatchGroup);\n\n    return outputTensorViews;\n  }\n\n  upload(gpuDataId: number, data: Uint8Array): void {\n    this.gpuDataManager.upload(gpuDataId, data);\n  }\n\n  memcpy(src: number, dst: number): void {\n    this.gpuDataManager.memcpy(src, dst);\n  }\n\n  async download(gpuDataId: number, getTargetBuffer: () => Uint8Array): Promise<void> {\n    const arrayBuffer = await this.gpuDataManager.download(gpuDataId);\n\n    // the underlying buffer may be changed after the async function is called. so we use a getter function to make sure\n    // the buffer is up-to-date.\n    const data = getTargetBuffer();\n    data.set(new Uint8Array(arrayBuffer, 0, data.byteLength));\n  }\n\n  alloc(size: number): number {\n    return this.gpuDataManager.create(size).id;\n  }\n\n  free(ptr: number): number {\n    return this.gpuDataManager.release(ptr);\n  }\n\n  createKernel(opType: string, kernelId: number, attribute: unknown, nodeName: string): void {\n    const op = WEBGPU_OP_RESOLVE_RULES.get(opType);\n    if (!op) {\n      throw new Error(`kernel not implemented: ${opType}`);\n    }\n\n    this.kernels.set(kernelId, [opType, nodeName, op[0], [op[1], attribute]]);\n  }\n\n  releaseKernel(kernelId: number): void {\n    const persistentData = this.kernelPersistentData.get(kernelId);\n    if (persistentData) {\n      for (const data of persistentData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.kernelPersistentData.delete(kernelId);\n    }\n\n    this.kernelCustomData.delete(kernelId);\n    this.kernels.delete(kernelId);\n  }\n\n  computeKernel(kernelId: number, context: ComputeContext, errors: Array<Promise<string|null>>): number {\n    const kernel = this.kernels.get(kernelId);\n    if (!kernel) {\n      throw new Error(`kernel not created: ${kernelId}`);\n    }\n    const [opType, nodeName, kernelEntry, attributes] = kernel;\n    if (this.currentKernelId !== null) {\n      throw new Error(`kernel \"[${opType}] ${nodeName}\" is not allowed to be called recursively`);\n    }\n    this.currentKernelId = kernelId;\n\n    // parse attributes if necessary\n    if (attributes[0]) {\n      attributes[1] = attributes[0](attributes[1]);\n      attributes[0] = undefined;\n    }\n\n    LOG_DEBUG('info', () => `[WebGPU] Start to run kernel \"[${opType}] ${nodeName}\"...`);\n\n    const useErrorScope = this.env.debug;\n\n    this.temporaryData = [];\n    try {\n      if (useErrorScope) {\n        this.device.pushErrorScope('validation');\n      }\n\n      kernelEntry(context, attributes[1]);\n      return 0;  // ORT_OK\n    } catch (e) {\n      LOG_DEBUG('warning', `[WebGPU] Kernel \"[${opType}] ${nodeName}\" failed. Error: ${e}`);\n      return 1;  // ORT_FAIL\n    } finally {\n      if (useErrorScope) {\n        errors.push(this.device.popErrorScope().then(\n            err => err ? `GPU validation error for kernel \"[${opType}] ${nodeName}\": ${err.message}` : null));\n      }\n\n      for (const data of this.temporaryData) {\n        this.gpuDataManager.release(data.id);\n      }\n      this.temporaryData = [];\n      this.currentKernelId = null;\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {JSEP, OrtWasmModule} from '../binding/ort-wasm';\nimport {DataType, getTensorElementSize} from '../wasm-common';\n\nimport {WebGpuBackend} from './backend-webgpu';\nimport {LOG_DEBUG} from './log';\nimport {TensorView} from './tensor-view';\nimport {ShapeUtil} from './util';\nimport {ComputeContext, ComputeContextInputsOutputsMapping, ProgramInfo, ProgramInfoLoader} from './webgpu/types';\n\n/* eslint-disable no-bitwise */\n\nclass TensorViewImpl implements TensorView {\n  constructor(\n      private module: OrtWasmModule, public readonly dataType: number, public readonly data: number,\n      public readonly dims: readonly number[]) {}\n\n  getFloat32Array(): Float32Array {\n    if (this.dataType !== DataType.float) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new Float32Array() :\n                                new Float32Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  getBigInt64Array(): BigInt64Array {\n    if (this.dataType !== DataType.int64) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new BigInt64Array() :\n                                new BigInt64Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  getInt32Array(): Int32Array {\n    if (this.dataType !== DataType.int32) {\n      throw new Error('Invalid data type');\n    }\n    const elementCount = ShapeUtil.size(this.dims);\n    return elementCount === 0 ? new Int32Array() : new Int32Array(this.module.HEAP8.buffer, this.data, elementCount);\n  }\n\n  reshape(newDims: readonly number[]): TensorView {\n    if (ShapeUtil.size(newDims) !== ShapeUtil.size(this.dims)) {\n      throw new Error('Invalid new shape');\n    }\n    return new TensorViewImpl(this.module, this.dataType, this.data, newDims);\n  }\n}\n\nclass ComputeContextImpl implements ComputeContext {\n  readonly opKernelContext: number;\n  readonly inputs: readonly TensorView[];\n  readonly outputCount: number;\n  get kernelCustomData(): {[key: string]: unknown} {\n    return this.backend.currentKernelCustomData;\n  }\n  get customDataBuffer(): Uint8Array {\n    return this.module.HEAPU8.subarray(this.customDataOffset, this.customDataOffset + this.customDataSize);\n  }\n  private customDataOffset = 0;\n  private customDataSize = 0;\n  constructor(private module: OrtWasmModule, private backend: WebGpuBackend, contextDataOffset: number) {\n    const heapU32 = module.HEAPU32;\n\n    // extract context data\n    let dataIndex = (contextDataOffset >> 2);\n    this.opKernelContext = heapU32[dataIndex++];\n    const inputCount = heapU32[dataIndex++];\n    this.outputCount = heapU32[dataIndex++];\n    this.customDataOffset = heapU32[dataIndex++];\n    this.customDataSize = heapU32[dataIndex++];\n\n    const inputs: TensorView[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = heapU32[dataIndex++];\n      const data = heapU32[dataIndex++];\n      const dim = heapU32[dataIndex++];\n      const dims: number[] = [];\n      for (let d = 0; d < dim; d++) {\n        dims.push(heapU32[dataIndex++]);\n      }\n      inputs.push(new TensorViewImpl(module, dataType, data, dims));\n    }\n    this.inputs = inputs;\n  }\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[] {\n    // prepare inputs. inputs should always be valid data.\n    const mappedInputs =\n        inputsOutputsMapping?.inputs?.map(i => typeof i === 'number' ? this.inputs[i] : i) ?? this.inputs;\n    // prepare outputs.\n    const outputIndices = inputsOutputsMapping?.outputs ?? [];\n    const createKernelOutput = (index: number, dataType: number, dims: readonly number[]): TensorView =>\n        new TensorViewImpl(this.module, dataType, this.output(index, dims), dims);\n    const createTemporaryOutput = (dataType: number, dims: readonly number[]): TensorView => {\n      const elementSize = getTensorElementSize(dataType);\n      if (!elementSize) {\n        throw new Error(`Unsupported data type: ${dataType}`);\n      }\n      const bufferSize = elementSize * ShapeUtil.size(dims);\n      return new TensorViewImpl(this.module, dataType, this.backend.gpuDataManager.create(bufferSize).id, dims);\n    };\n    return this.backend.run(program, mappedInputs, outputIndices, createKernelOutput, createTemporaryOutput);\n  }\n\n  output(index: number, dims: readonly number[]): number {\n    const stack = this.module.stackSave();\n    try {\n      const data = this.module.stackAlloc((1 + dims.length) * 4 /* sizeof(size_t) */);\n      let offset = data >> 2;\n      this.module.HEAPU32[offset++] = dims.length;\n      for (let i = 0; i < dims.length; i++) {\n        this.module.HEAPU32[offset++] = dims[i];\n      }\n      return this.module._JsepOutput(this.opKernelContext, index, data);\n    } finally {\n      this.module.stackRestore(stack);\n    }\n  }\n}\n\nexport const init = async(module: OrtWasmModule, env: Env): Promise<void> => {\n  const init = module.jsepInit;\n  if (init && navigator.gpu) {\n    if (!env.wasm.simd) {\n      throw new Error(\n          'Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP');\n    }\n    const backend = new WebGpuBackend();\n    await backend.initialize(env);\n\n    init(\n        // backend\n        {backend},\n\n        // jsepAlloc()\n        (size: number) => backend.alloc(size),\n\n        // jsepFree()\n        (ptr: number) => backend.free(ptr),\n\n        // jsepCopy(src, dst, size, isSourceGpu)\n        (src: number, dst: number, size: number, isSourceGpu = false) => {\n          if (isSourceGpu) {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyGpuToGpu: src=${src}, dst=${dst}, size=${size}`);\n            backend.memcpy(src, dst);\n          } else {\n            LOG_DEBUG('verbose', () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${src}, gpuDataId=${dst}, size=${size}`);\n            const data = module.HEAPU8.subarray(src, src + size);\n            backend.upload(dst, data);\n          }\n        },\n\n        // jsepCopyAsync(src, dst, size)\n        async(gpuDataId: number, dataOffset: number, size: number):\n            Promise<void> => {\n              LOG_DEBUG(\n                  'verbose',\n                  () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${gpuDataId}, dataOffset=${dataOffset}, size=${size}`);\n\n              await backend.download(gpuDataId, () => module.HEAPU8.subarray(dataOffset, dataOffset + size));\n            },\n\n        // jsepCreateKernel\n        (name: string, kernel: number, attribute: unknown) => backend.createKernel(\n            name, kernel, attribute,\n            env.debug || env.webgpu.profilingMode === 'default' ? module.UTF8ToString(module._JsepGetNodeName(kernel)) :\n                                                                  `${kernel}`),\n\n        // jsepReleaseKernel\n        (kernel: number) => backend.releaseKernel(kernel),\n\n        // jsepRun\n        (kernel: number, contextDataOffset: number, sessionState: JSEP.SessionState) => {\n          LOG_DEBUG(\n              'verbose',\n              () => `[WebGPU] jsepRun: sessionId=${sessionState.sessionId}, kernel=${kernel}, contextDataOffset=${\n                  contextDataOffset}`);\n          const context = new ComputeContextImpl(module, backend, contextDataOffset);\n          return backend.computeKernel(kernel, context, sessionState.errors);\n        });\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {logLevelStringToEnum} from '../wasm-common';\n\ntype LogLevel = NonNullable<Env['logLevel']>;\ntype MessageString = string;\ntype MessageFunction = () => string;\ntype Message = MessageString|MessageFunction;\n\nconst logLevelPrefix = ['V', 'I', 'W', 'E', 'F'];\n\nconst doLog = (level: number, message: string): void => {\n  // eslint-disable-next-line no-console\n  console.log(`[${logLevelPrefix[level]},${new Date().toISOString()}]${message}`);\n};\n\nlet configLogLevel: LogLevel|undefined;\nlet debug: boolean|undefined;\n\nexport const configureLogger = ($configLogLevel: LogLevel, $debug: boolean): void => {\n  configLogLevel = $configLogLevel;\n  debug = $debug;\n};\n\n/**\n * A simple logging utility to log messages to the console.\n */\nexport const LOG = (logLevel: LogLevel, msg: Message): void => {\n  const messageLevel = logLevelStringToEnum(logLevel);\n  const configLevel = logLevelStringToEnum(configLogLevel);\n  if (messageLevel >= configLevel) {\n    doLog(messageLevel, typeof msg === 'function' ? msg() : msg);\n  }\n};\n\n/**\n * A simple logging utility to log messages to the console. Only logs when debug is enabled.\n */\nexport const LOG_DEBUG: typeof LOG = (...args: Parameters<typeof LOG>) => {\n  if (debug) {\n    LOG(...args);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable no-param-reassign */\n\nexport class MatMulUtil {\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n\nexport class ShapeUtil {\n  /**\n   * calculate the size (number of elements)\n   */\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) from the given axis (inclusive)\n   */\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  /**\n   * calculate the size (number of elements) to the given axis (exclusive)\n   */\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  /**\n   * calculate the size (number of elements) from and to the given axis [start, end)\n   */\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be negative.\n      if (dims[i] < 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank?: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank ?? axes.length));\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]): void {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], isChannelLast: boolean, autoPad?: string): void {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + (isChannelLast ? 1 : 2)], strides[dim], dilations[dim], kernelShape[dim], pads, dim,\n          dim + inputDims.length - 2, autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\n/**\n * create a new object from the given attribute, and add a cacheKey property to it\n */\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\n\nimport {GpuData, GpuDataId, GpuDataType} from './types';\n\n/**\n * manages GpuDataId -> GpuBuffer\n */\nexport interface GpuDataManager {\n  /**\n   * copy data from CPU to GPU.\n   */\n  upload(id: GpuDataId, data: Uint8Array): void;\n  /**\n   * copy data from GPU to GPU.\n   */\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void;\n  /**\n   * create new data on GPU.\n   */\n  create(size: number, usage?: number): GpuData;\n  /**\n   * get GPU data by ID.\n   */\n  get(id: GpuDataId): GpuData|undefined;\n  /**\n   * release the data on GPU by ID.\n   *\n   * @return size of the data released\n   */\n  release(id: GpuDataId): number;\n  /**\n   * copy data from GPU to CPU.\n   */\n  download(id: GpuDataId): Promise<ArrayBufferLike>;\n\n  /**\n   * refresh the buffers that marked for release.\n   *\n   * when release() is called, the buffer is not released immediately. this is because we need to wait for the commands\n   * to be submitted to the GPU. this function is called after the commands are submitted so that the buffers can be\n   * actually released.\n   */\n  refreshPendingBuffers(): void;\n\n  /**\n   * destroy all gpu buffers. Call this when the session.release is called.\n   */\n  dispose(): void;\n}\n\ninterface StorageCacheValue {\n  gpuData: GpuData;\n  originalSize: number;\n}\n\n/**\n * normalize the buffer size so that it fits the 128-bits (16 bytes) alignment.\n */\nconst calcNormalizedBufferSize = (size: number) => Math.ceil(size / 16) * 16;\n\nlet guid = 0;\nconst createNewGpuDataId = () => guid++;\n\nclass GpuDataManagerImpl implements GpuDataManager {\n  // GPU Data ID => GPU Data ( storage buffer )\n  storageCache: Map<GpuDataId, StorageCacheValue>;\n\n  // pending buffers for uploading ( data is unmapped )\n  private buffersForUploadingPending: GPUBuffer[];\n  // pending buffers for computing\n  private buffersPending: GPUBuffer[];\n\n  // The reusable storage buffers for computing.\n  private freeBuffers: Map<number, GPUBuffer[]>;\n\n  constructor(private backend: WebGpuBackend) {\n    this.storageCache = new Map();\n    this.freeBuffers = new Map();\n    this.buffersForUploadingPending = [];\n    this.buffersPending = [];\n  }\n\n  upload(id: GpuDataId, data: Uint8Array): void {\n    const srcArrayBuffer = data.buffer;\n    const srcOffset = data.byteOffset;\n    const srcLength = data.byteLength;\n    const size = calcNormalizedBufferSize(srcLength);\n\n    // get destination gpu buffer\n    const gpuDataCache = this.storageCache.get(id);\n    if (!gpuDataCache) {\n      throw new Error('gpu data for uploading does not exist');\n    }\n    if (gpuDataCache.originalSize !== srcLength) {\n      throw new Error(`inconsistent data size. gpu data size=${gpuDataCache.originalSize}, data size=${srcLength}`);\n    }\n\n    // create gpu buffer\n    const gpuBufferForUploading = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {mappedAtCreation: true, size, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC});\n\n    // copy (upload) data\n    const arrayBuffer = gpuBufferForUploading.getMappedRange();\n    new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer, srcOffset, srcLength));\n    gpuBufferForUploading.unmap();\n\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(gpuBufferForUploading, 0, gpuDataCache.gpuData.buffer, 0, size);\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.upload(id=${id})`);\n\n    this.buffersForUploadingPending.push(gpuBufferForUploading);\n  }\n\n  memcpy(sourceId: GpuDataId, destinationId: GpuDataId): void {\n    // get source gpu buffer\n    const sourceGpuDataCache = this.storageCache.get(sourceId);\n    if (!sourceGpuDataCache) {\n      throw new Error('source gpu data for memcpy does not exist');\n    }\n    // get destination gpu buffer\n    const destinationGpuDataCache = this.storageCache.get(destinationId);\n    if (!destinationGpuDataCache) {\n      throw new Error('destination gpu data for memcpy does not exist');\n    }\n    if (sourceGpuDataCache.originalSize !== destinationGpuDataCache.originalSize) {\n      throw new Error('inconsistent source and destination gpu data size');\n    }\n    const size = calcNormalizedBufferSize(sourceGpuDataCache.originalSize);\n\n    // GPU copy\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    commandEncoder.copyBufferToBuffer(\n        sourceGpuDataCache.gpuData.buffer, 0, destinationGpuDataCache.gpuData.buffer, 0, size);\n  }\n\n  // eslint-disable-next-line no-bitwise\n  create(size: number, usage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST): GpuData {\n    const bufferSize = calcNormalizedBufferSize(size);\n\n    let gpuBuffer;\n    // Currently, only storage buffers are reused.\n    // eslint-disable-next-line no-bitwise\n    if ((usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE) {\n      let buffers = this.freeBuffers.get(bufferSize);\n      if (!buffers) {\n        buffers = [];\n        this.freeBuffers.set(bufferSize, buffers);\n      }\n      if (buffers.length > 0) {\n        gpuBuffer = buffers.pop() as GPUBuffer;\n      } else {\n        // create gpu buffer\n        gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\n      }\n    } else {\n      // create gpu buffer\n      gpuBuffer = this.backend.device.createBuffer({size: bufferSize, usage});\n    }\n\n    const gpuData = {id: createNewGpuDataId(), type: GpuDataType.default, buffer: gpuBuffer};\n    this.storageCache.set(gpuData.id, {gpuData, originalSize: size});\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.create(size=${size}) => id=${gpuData.id}`);\n    return gpuData;\n  }\n\n  get(id: GpuDataId): GpuData|undefined {\n    return this.storageCache.get(id)?.gpuData;\n  }\n\n  release(id: GpuDataId): number {\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('releasing data does not exist');\n    }\n\n    LOG_DEBUG('verbose', () => `[WebGPU] GpuDataManager.release(id=${id}), gpuDataId=${cachedData.gpuData.id}`);\n\n    this.storageCache.delete(id);\n    this.buffersPending.push(cachedData.gpuData.buffer);\n    // cachedData.gpuData.buffer.destroy();\n\n    return cachedData.originalSize;\n  }\n\n  async download(id: GpuDataId): Promise<ArrayBufferLike> {\n    const cachedData = this.storageCache.get(id);\n    if (!cachedData) {\n      throw new Error('data does not exist');\n    }\n\n    const commandEncoder = this.backend.getCommandEncoder();\n    this.backend.endComputePass();\n    const bufferSize = calcNormalizedBufferSize(cachedData.originalSize);\n    const gpuReadBuffer = this.backend.device.createBuffer(\n        // eslint-disable-next-line no-bitwise\n        {size: bufferSize, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ});\n    commandEncoder.copyBufferToBuffer(\n        cachedData.gpuData.buffer /* source buffer */, 0 /* source offset */, gpuReadBuffer /* destination buffer */,\n        0 /* destination offset */, bufferSize /* size */\n    );\n    this.backend.flush();\n\n    return new Promise<ArrayBuffer>((resolve) => {\n      gpuReadBuffer.mapAsync(GPUMapMode.READ).then(() => {\n        const data = gpuReadBuffer.getMappedRange().slice(0);\n        gpuReadBuffer.destroy();\n        resolve(data);\n      });\n    });\n  }\n\n  refreshPendingBuffers(): void {\n    for (const buffer of this.buffersForUploadingPending) {\n      // upload buffer is only useful in the session creation time. So we don't need to reuse them in session running.\n      buffer.destroy();\n    }\n    this.buffersForUploadingPending = [];\n    for (const buffer of this.buffersPending) {\n      // eslint-disable-next-line no-bitwise\n      if ((buffer.usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE) {\n        // Put the pending buffer to freeBuffers list instead of really destroying it for buffer reusing.\n        this.freeBuffers.get(buffer.size)!.push(buffer);\n      } else {\n        buffer.destroy();\n      }\n    }\n    this.buffersPending = [];\n  }\n\n  dispose() {\n    this.freeBuffers.forEach((buffers) => {\n      buffers.forEach(buffer => {\n        buffer.destroy();\n      });\n    });\n\n    this.storageCache.forEach((storage) => {\n      storage.gpuData.buffer.destroy();\n    });\n\n    this.storageCache = new Map();\n    this.freeBuffers = new Map();\n  }\n}\n\nexport const createGpuDataManager = (...args: ConstructorParameters<typeof GpuDataManagerImpl>): GpuDataManager =>\n    new GpuDataManagerImpl(...args);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {argMax, argMin, parseArgMinMaxAttributes} from './ops/argminmax';\nimport * as binaryOps from './ops/binary-op';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {einsum, parseEinsumAttributes} from './ops/einsum';\nimport {expand} from './ops/expand';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gatherElements, parseGatherElementsAttributes} from './ops/gather-elements';\nimport {gemm, parseGemmAttributes} from './ops/gemm';\nimport {instanceNorm, parseInstanceNormAttributes} from './ops/instance-norm';\nimport {layerNorm, parseLayerNormAttributes} from './ops/layer-norm';\nimport {matMul} from './ops/matmul';\nimport {pad, parsePadAttributes} from './ops/pad';\nimport * as pool from './ops/pool';\nimport {parseReduceAttributes, reduceL1, reduceL2, reduceLogSum, reduceLogSumExp, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum, reduceSumSquare} from './ops/reduce';\nimport {parseResizeAttributes, resize} from './ops/resize';\nimport {parseSkipLayerNormAttributes, skipLayerNorm} from './ops/skip-layer-norm';\nimport {parseSliceAttributes, slice} from './ops/slice';\nimport {parseSoftmaxAttributes, softmax} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {ComputeContext} from './types';\n\nexport type RunFunction = (context: ComputeContext, attribute?: unknown) => void;\nexport type ParseAttributeFunction = (attributeRaw: unknown) => unknown;\nexport type OperatorImplementation = [RunFunction]|[RunFunction, ParseAttributeFunction];\n\nexport const WEBGPU_OP_RESOLVE_RULES: Map<string, OperatorImplementation> = new Map([\n  ['Abs', [unaryOps.abs]],\n  ['Acos', [unaryOps.acos]],\n  ['Acosh', [unaryOps.acosh]],\n  ['Add', [binaryOps.add]],\n  ['ArgMax', [argMax, parseArgMinMaxAttributes]],\n  ['ArgMin', [argMin, parseArgMinMaxAttributes]],\n  ['Asin', [unaryOps.asin]],\n  ['Asinh', [unaryOps.asinh]],\n  ['Atan', [unaryOps.atan]],\n  ['Atanh', [unaryOps.atanh]],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', [pool.averagePool, pool.parseAveragePoolAttributes]],\n  ['Cast', [unaryOps.cast, unaryOps.parseCastAttributes]],\n  ['Ceil', [unaryOps.ceil]],\n  ['ClipV10', [unaryOps.clipV10]],\n  ['Clip', [unaryOps.clip]],\n  ['Concat', [concat, parseConcatAttributes]],\n  ['Conv', [conv, parseConvAttributes]],\n  ['ConvTranspose', [convTranspose, parseConvTransposeAttributes]],\n  ['Cos', [unaryOps.cos]],\n  ['Cosh', [unaryOps.cosh]],\n  ['Div', [binaryOps.div]],\n  ['Einsum', [einsum, parseEinsumAttributes]],\n  ['Elu', [unaryOps.elu, unaryOps.parseAlphaAttributes]],\n  ['Equal', [binaryOps.equal]],\n  ['Erf', [unaryOps.erf]],\n  ['Exp', [unaryOps.exp]],\n  ['Expand', [expand]],\n  ['Floor', [unaryOps.floor]],\n  ['Gather', [gather, parseGatherAttributes]],\n  ['GatherElements', [gatherElements, parseGatherElementsAttributes]],\n  ['Gelu', [unaryOps.gelu]],\n  ['Gemm', [gemm, parseGemmAttributes]],\n  ['GlobalAveragePool', [pool.globalAveragePool, pool.parseGlobalAveragePoolAttributes]],\n  ['GlobalMaxPool', [pool.globalMaxPool, pool.parseGlobalMaxPoolAttributes]],\n  ['Greater', [binaryOps.greater]],\n  ['GreaterOrEqual', [binaryOps.greaterOrEqual]],\n  ['InstanceNormalization', [instanceNorm, parseInstanceNormAttributes]],\n  ['LayerNormalization', [layerNorm, parseLayerNormAttributes]],\n  ['LeakyRelu', [unaryOps.leakyRelu, unaryOps.parseAlphaAttributes]],\n  ['Less', [binaryOps.less]],\n  ['LessOrEqual', [binaryOps.lessOrEqual]],\n  ['Log', [unaryOps.log]],\n  ['MatMul', [matMul]],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', [pool.maxPool, pool.parseMaxPoolAttributes]],\n  ['Mul', [binaryOps.mul]],\n  ['Neg', [unaryOps.neg]],\n  ['Not', [unaryOps.not]],\n  ['Pad', [pad, parsePadAttributes]],\n  ['Pow', [binaryOps.pow]],\n  ['Reciprocal', [unaryOps.reciprocal]],\n  ['ReduceMin', [reduceMin, parseReduceAttributes]],\n  ['ReduceMean', [reduceMean, parseReduceAttributes]],\n  ['ReduceMax', [reduceMax, parseReduceAttributes]],\n  ['ReduceSum', [reduceSum, parseReduceAttributes]],\n  ['ReduceProd', [reduceProd, parseReduceAttributes]],\n  ['ReduceL1', [reduceL1, parseReduceAttributes]],\n  ['ReduceL2', [reduceL2, parseReduceAttributes]],\n  ['ReduceLogSum', [reduceLogSum, parseReduceAttributes]],\n  ['ReduceLogSumExp', [reduceLogSumExp, parseReduceAttributes]],\n  ['ReduceSumSquare', [reduceSumSquare, parseReduceAttributes]],\n  ['Relu', [unaryOps.relu]],\n  ['Resize', [resize, parseResizeAttributes]],\n  ['Sigmoid', [unaryOps.sigmoid]],\n  ['Sin', [unaryOps.sin]],\n  ['Sinh', [unaryOps.sinh]],\n  ['Slice', [slice, parseSliceAttributes]],\n  ['SkipLayerNormalization', [skipLayerNorm, parseSkipLayerNormAttributes]],\n  ['Split', [split, parseSplitAttributes]],\n  ['Sqrt', [unaryOps.sqrt]],\n  ['Softmax', [softmax, parseSoftmaxAttributes]],\n  ['Sub', [binaryOps.sub]],\n  ['Tan', [unaryOps.tan]],\n  ['Tanh', [unaryOps.tanh]],\n  ['ThresholdedRelu', [unaryOps.thresholdedRelu, unaryOps.parseAlphaAttributes]],\n  ['Tile', [tile]],\n  ['Transpose', [transpose, parseTransposeAttributes]],\n]);\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/activation_util.ts\n//\n// modified to fit the needs of the project\n\nexport declare type Activation = 'linear' | 'relu' | 'prelu' | 'elu' | 'relu6' | 'leakyrelu' | 'sigmoid' | 'gelu';\n\nexport const typeSnippet = (component: number) => {\n  switch (component) {\n    case 1:\n      return 'f32';\n    case 2:\n      return 'vec2<f32>';\n    case 3:\n      return 'vec3<f32>';\n    case 4:\n      return 'vec4<f32>';\n    default:\n      throw new Error(`${component}-component is not supported.`);\n  }\n};\n\nexport const activationFnSnippet =\n    (activation?: Activation, _hasPreluActivationWeights = false, _packed = false, _coordsLength = 3): string => {\n      if (!activation) {\n        return '';\n      }\n\n      // TODO: add implementations\n      return '';\n    };\n\nexport const biasActivationSnippet = (hasBias: boolean, activation?: Activation): string => `\n      ${hasBias ? 'value = value + getBiasByOutputCoords(coords);' : ''}\n      ${activation ? 'value = activation(value, coords);' : ''}\n      `;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv2d_mm_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport {LOG_DEBUG} from '../../../log';\nimport {TensorView} from '../../../tensor-view';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {ConvAttributes} from '../conv';\n\nimport {Activation, activationFnSnippet, biasActivationSnippet, typeSnippet} from './activation_util';\nimport {utilFunctions} from './conv_util';\nimport {makeMatMulPackedSource, makeMatMulPackedVec4Source} from './matmul_packed_webgpu';\n\nconst conv2dCommonSnippet =\n    (isChannelsLast: boolean, fitAOuter: boolean, fitBOuter: boolean, fitInner: boolean, addBias = false,\n     activation?: Activation, hasPreluActivationWeights = false, innerElementSizeX = 4, innerElementSizeW = 4,\n     innerElementSize = 4): string => {\n      const getXSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'resData = x[xIndex];';\n          case 3:\n            return 'resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);';\n          case 4:\n            return 'resData = x[xIndex / 4];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const getWSnippet = (innerElementSize: number) => {\n        switch (innerElementSize) {\n          case 1:\n            return 'return w[row * wShape[3] + colIn];';\n          case 4:\n            return 'return w[row * wShape[3] / 4 + colIn];';\n          default:\n            throw new Error(`innerElementSize ${innerElementSize} is not supported.`);\n        }\n      };\n      const coordASnippet = isChannelsLast ? `\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    ` :\n                                             `\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `;\n\n      const coordResSnippet = isChannelsLast ? `\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    ` :\n                                               `\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `;\n\n      const xHeight = isChannelsLast ? 'xShape[1]' : 'xShape[2]';\n      const xWidth = isChannelsLast ? 'xShape[2]' : 'xShape[3]';\n      const row = isChannelsLast ? 'row' : 'col';\n      const col = isChannelsLast ? 'col' : 'row';\n      const readXSnippet = `\n    let inChannels = wShape[2];\n    let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n    let outRow = ${row} / outWidth;\n    let outCol = ${row} % outWidth;\n\n    let WRow = ${col} / (filterDims[1] * inChannels);\n    let WCol = ${col} / inChannels % filterDims[1];\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\n    let xCh = ${col} % inChannels;\n    var resData = ${typeSnippet(innerElementSizeX)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${xHeight} && xCol >= 0 && xCol < ${xWidth}) {\n      ${coordASnippet}\n      let xIndex = getIndexFromCoords4D(coord, xShape);\n      ${getXSnippet(innerElementSizeX)}\n    }\n    return resData;`;\n\n      const sampleX = isChannelsLast ? (fitAOuter && fitInner ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimAOuter && col < dimInner) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`) :\n                                       (fitInner && fitBOuter ? `\n    let col = colIn * ${innerElementSizeX};\n    ${readXSnippet}` :\n                                                                `\n    let col = colIn * ${innerElementSizeX};\n    if (row < dimInner && col < dimBOuter) {\n      ${readXSnippet}\n    }\n    return ${typeSnippet(innerElementSizeX)}(0.0);`);\n\n      const sampleW = `${getWSnippet(innerElementSizeW)}`;\n\n      const resType = typeSnippet(innerElementSize);\n      const aType = isChannelsLast ? typeSnippet(innerElementSizeX) : typeSnippet(innerElementSizeW);\n      const bType = isChannelsLast ? typeSnippet(innerElementSizeW) : typeSnippet(innerElementSizeX);\n      const userCode = `\n    ${activationFnSnippet(activation, hasPreluActivationWeights, innerElementSize === 4, 4)}\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${aType} {\n      ${isChannelsLast ? sampleX : sampleW}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${bType} {\n      ${isChannelsLast ? sampleW : sampleX}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${resType}) {\n      let col = colIn * ${innerElementSize};\n      if (row < dimAOuter && col < dimBOuter)\n      {\n      var value = valueIn;\n      let outWidth = ${isChannelsLast ? 'outShape[2]' : 'outShape[3]'};\n      ${coordResSnippet}\n      ${biasActivationSnippet(addBias, activation)}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`;\n      return userCode;\n    };\n\nexport const createConv2DMatMulProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     outputShape: readonly number[], dimAOuter: number, dimBOuter: number, dimInner: number, hasBias: boolean,\n     sequentialAccessByThreads: boolean): ProgramInfo => {\n      const isChannelsLast = attributes.format === 'NHWC';\n      const inChannels = isChannelsLast ? inputs[0].dims[3] : inputs[0].dims[1];\n      const batchSize = outputShape[0];\n      const outWidth = isChannelsLast ? outputShape[2] : outputShape[3];\n      const outHeight = isChannelsLast ? outputShape[1] : outputShape[2];\n      const outChannels = isChannelsLast ? outputShape[3] : outputShape[1];\n      // TODO: enable vec4 for NCHW\n      const isVec4 = isChannelsLast && (inChannels % 4 === 0 || inChannels % 3 === 0) && outChannels % 4 === 0;\n\n      // TODO: fine tune size\n      const dispatchX = isChannelsLast ? outChannels : outWidth * outHeight;\n      const dispatchY = isChannelsLast ? outWidth * outHeight : outChannels;\n      const workGroupSize: [number, number, number] = [8, 8, 1];\n      const elementsPerThread = dimAOuter <= 8 ? [4, 1, 1] : [4, 4, 1];\n      const dispatch = [\n        Math.ceil(dispatchX / workGroupSize[0] / elementsPerThread[0]),\n        Math.ceil(dispatchY / workGroupSize[1] / elementsPerThread[1]),\n        Math.ceil(batchSize / workGroupSize[2] / elementsPerThread[2])\n      ];\n\n      LOG_DEBUG('verbose', () => `[conv2d_mm_webgpu] dispatch = ${dispatch}`);\n\n      const innerElementSize = isVec4 ? (isChannelsLast && inChannels % 4 !== 0 ? 3 : 4) : elementsPerThread[0];\n\n      const tileAOuter = workGroupSize[1] * elementsPerThread[1];\n      const tileBOuter = workGroupSize[0] * elementsPerThread[0];\n      const tileInner = Math.max(workGroupSize[0] * innerElementSize, workGroupSize[1]);\n\n      const fitAOuter = dimAOuter % tileAOuter === 0;\n      const fitBOuter = dimBOuter % tileBOuter === 0;\n      const fitInner = dimInner % tileInner === 0;\n\n      const elementsSize = isVec4 ? [innerElementSize, 4, 4] : [1, 1, 1];\n\n      const declareInputs = [\n        `@group(0) @binding(0) var<storage, read> x: array<${isVec4 && innerElementSize === 4 ? 'vec4<f32>' : 'f32'}>;`,\n        `@group(0) @binding(1) var<storage, read> w: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`\n      ];\n      let declareFunctions = `\n      fn setOutputAtIndex(flatIndex : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${isVec4 ? '/ 4' : ''}, value);\n      }`;\n      if (hasBias) {\n        declareInputs.push(`@group(0) @binding(2) var<storage, read> bias: array<${isVec4 ? 'vec4<f32>' : 'f32'}>;`);\n        declareFunctions += `\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\n          return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n        }`;\n      }\n\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\n        getShaderSource: () => `\n        ${utilFunctions}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${declareInputs.join('')}\n        @group(0) @binding(${declareInputs.length}) var<storage, read_write> result: array<${\n            isVec4 ? 'vec4<f32>' : 'f32'}>;\n        //@group(0) @binding(${declareInputs.length + 1}) var<uniform> uniforms: Uniforms;\n\n        const xShape : vec4<i32> = vec4<i32>(${inputs[0].dims.join(',')});\n        const wShape : vec4<i32> = vec4<i32>(${inputs[1].dims.join(',')});\n        const outShape : vec4<i32> = vec4<i32>(${outputShape.join(',')});\n        const outShapeStrides : vec3<i32> = vec3<i32>(${ShapeUtil.computeStrides(outputShape).slice(0, 3).join(',')});\n        const filterDims : vec2<i32> = vec2<i32>(${attributes.kernelShape[0]}, ${attributes.kernelShape[1]});\n        const pad : vec2<i32> = vec2<i32>(${attributes.pads[0]}, ${attributes.pads[1]});\n        const stride : vec2<i32> = vec2<i32>(${attributes.strides[0]}, ${attributes.strides[1]});\n        const dilation : vec2<i32> = vec2<i32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n        const dimAOuter : i32 = ${dimAOuter};\n        const dimBOuter : i32 = ${dimBOuter};\n        const dimInner : i32 = ${dimInner};\n        ${declareFunctions}\n        ${\n            conv2dCommonSnippet(\n                isChannelsLast, fitAOuter, fitBOuter, fitInner, hasBias, undefined, false, elementsSize[0],\n                elementsSize[1], elementsSize[2])}\n            ${\n            isVec4 ?\n                makeMatMulPackedVec4Source(elementsPerThread, workGroupSize, undefined, !isChannelsLast, tileInner) :\n                makeMatMulPackedSource(\n                    elementsPerThread, workGroupSize, undefined, !isChannelsLast, tileInner, false, undefined,\n                    sequentialAccessByThreads)}`\n      };\n    };\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/conv_backprop_webgpu.ts\n\nimport {LOG_DEBUG} from '../../../log';\nimport {TensorView} from '../../../tensor-view';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {inputVariable, outputVariable, ShaderHelper} from '../common';\nimport {ConvTransposeAttributes} from '../conv-transpose';\n\nconst createConvTranspose2DOpProgramShaderSource =\n    (shaderHelper: ShaderHelper, inputs: readonly TensorView[], attributes: ConvTransposeAttributes,\n     outputShape: readonly number[], hasBias: boolean, is1DimensionDispatch: boolean, isVec4 = false): string => {\n      const isChannelsLast = attributes.format === 'NHWC';\n      const rowDim = isChannelsLast ? 1 : 2;\n      const colDim = isChannelsLast ? 2 : 3;\n      const channelDim = isChannelsLast ? 3 : 1;\n      const outputSize = ShapeUtil.size(outputShape);\n      const workPerThread = isVec4 ? 2 : 1;\n      const group = attributes.group;\n      const wShape = inputs[1].dims;\n      const inputChannelsPerGroup = wShape[0] / group;\n      const outputChannelsPerGroup = wShape[1];\n\n      let declareFunctions = `\n  fn setOutputAtIndex(flatIndex : u32, value : ${isVec4 ? 'vec4<f32>' : 'f32'}) {\n    result[flatIndex] = ${isVec4 ? 'vec4<f32>' : 'f32'}(value);\n  }`;\n      if (hasBias) {\n        declareFunctions += `\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${isVec4 ? 'vec4<f32>' : 'f32'} {\n      return bias[coords.${isChannelsLast ? 'w' : 'y'}${isVec4 ? '/ 4' : ''}];\n    }`;\n      }\n      const components = isVec4 ? 4 : 1;\n      const w = inputVariable('W', inputs[1].dataType, inputs[1].dims, components);\n      const dy = inputVariable('Dy', inputs[0].dataType, inputs[0].dims, components);\n      const inputVariables = [dy, w];\n      if (hasBias) {\n        inputVariables.push(inputVariable('bias', inputs[2].dataType, [outputShape[channelDim]], components));\n      }\n      const output = outputVariable('result', inputs[0].dataType, outputShape, components);\n      const codeSnippet4 = `{\n        let batch: u32 = ${is1DimensionDispatch ? 'global_id.z' : 'workgroup_id.z'} / outShape[1];\n        let r = ${is1DimensionDispatch ? 'global_id.z' : 'workgroup_id.z'} % outShape[1];\n        let c = ${is1DimensionDispatch ? 'global_id.y' : 'workgroup_id.y'} * ${workPerThread};\n        let d1: u32 = ${is1DimensionDispatch ? 'global_id.x' : 'workgroup_id.x'} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<f32>, ${workPerThread}>;\n        for (var i = 0; i < ${workPerThread}; i++) {\n          dotProd[i] = vec4<f32>(0.0);\n        }\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\n          var dyR = (f32(dyCorner.x) + f32(wR)) / f32(strides.x);\n          let wRPerm = filterDims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= f32(outBackprop[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\n            let dyC = (f32(dyCorner.y) + f32(wC)) / f32(strides.y);\n            let dyC2 = (f32(dyCorner.y) + 1.0 + f32(wC)) / f32(strides.y);\n            let wCPerm = filterDims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= f32(outBackprop[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1', 'd2')};\n                let wValue1 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 1', 'd2')};\n                let wValue2 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 2', 'd2')};\n                let wValue3 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 3', 'd2')};\n\n                var xValue = ${dy.get('batch', 'idyR', 'idyC', 'd2')};\n                let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${dy.get('batch', 'idyR', 'idyC2', 'd2')};\n\n                dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = outBackprop[${channelDim}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1', 'd2')};\n                let wValue1 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 1', 'd2')};\n                let wValue2 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 2', 'd2')};\n                let wValue3 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 3', 'd2')};\n\n                var xValue = ${dy.get('batch', 'idyR', 'idyC', 'd2')};\n                let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = outBackprop[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1', 'd2')};\n                let wValue1 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 1', 'd2')};\n                let wValue2 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 2', 'd2')};\n                let wValue3 = ${w.get('u32(wRPerm)', 'u32(wCPerm)', 'd1 + 3', 'd2')};\n\n                var xValue = ${dy.get('batch', 'idyR', 'idyC2', 'd2')};\n                let tmpval = vec4<f32>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${workPerThread}; i = i + 1) {\n          let value = dotProd[i] + ${hasBias ? 'bias[c+i]' : '0.0'};\n          ${output.set('batch', 'r', 'c + i', 'd1', 'value')};\n        }\n      }`;\n      const codeSnippet = `\n          let outputIndices = ${output.offsetToIndices('global_idx')};\n          let batch = ${output.indicesGet('outputIndices', 0)};\n          let d1 = ${output.indicesGet('outputIndices', channelDim)};\n          let r = ${output.indicesGet('outputIndices', rowDim)};\n          let c = ${output.indicesGet('outputIndices', colDim)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / ${outputChannelsPerGroup};\n          let wOutChannel = d1 - groupId * ${outputChannelsPerGroup};\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = 0.0;\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\n            if (wR % dilations.x != 0) {\n              continue;\n            }\n            let dyR = (f32(dyRCorner) + f32(wR)) / f32(strides[0]);\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\n            if (dyR < 0.0 || dyR >= f32(outBackprop[${rowDim}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\n              if (wC % dilations.y != 0) {\n                continue;\n              }\n              let dyC = (f32(dyCCorner) + f32(wC)) / f32(strides.y);\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\n              if (dyC < 0.0 || dyC >= f32(outBackprop[${colDim}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n\n              for (var d2: u32 = 0; d2 < ${inputChannelsPerGroup}; d2 = d2 + 1) {\n                let inputChannel = groupId * ${inputChannelsPerGroup} + d2;\n                let xValue = ${\n          isChannelsLast ? dy.get('batch', 'idyR', 'idyC', 'inputChannel') :\n                           dy.get('batch', 'inputChannel', 'idyR', 'idyC')};\n                let wValue = ${w.get('inputChannel', 'wOutChannel', 'u32(wRPerm)', 'u32(wCPerm)')};\n                dotProd = dotProd + xValue * wValue;\n              }\n            }\n          }\n          let value = dotProd + ${hasBias ? 'bias[d1]' : '0.0'};\n          ${output.setByOffset('global_idx', 'value')};\n        `;\n\n      return `\n  ${shaderHelper.declareVariables(...inputVariables, output)}\n  ${declareFunctions}\n  const outShape : vec4<u32> = vec4<u32>(${outputShape.join(',')});\n  const outBackprop : vec4<u32> = vec4<u32>(${inputs[0].dims.join(',')});\n  const strides : vec2<u32> = vec2<u32>(${attributes.strides[0]}, ${attributes.strides[1]});\n  const filterDims : vec2<u32> = vec2<u32>(${attributes.kernelShape[isChannelsLast ? 1 : 2]}, ${\n          attributes.kernelShape[isChannelsLast ? 2 : 3]});\n  const dilations : vec2<u32> = vec2<u32>(${attributes.dilations[0]}, ${attributes.dilations[1]});\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\n          ${\n          attributes.dilations[0] <= 1 ?\n              0 :\n              (attributes.kernelShape[isChannelsLast ? 1 : 2] - 1) * (attributes.dilations[0] - 1)},\n          ${\n          attributes.dilations[1] <= 1 ?\n              0 :\n              (attributes.kernelShape[isChannelsLast ? 2 : 3] - 1) * (attributes.dilations[1] - 1)});\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (${attributes.pads[0] + attributes.pads[2]})/2,\n                                     i32(effectiveFilterDims[1]) - 1 - (${attributes.pads[1] + attributes.pads[3]})/2);\n    ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)};\n  ${isVec4 ? codeSnippet4 : codeSnippet}}`;\n    };\n\nexport const createConvTranspose2DProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvTransposeAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      // const isChannelsLast = attributes.format === 'NHWC';\n      const outputShape = attributes.outputShape;\n      const outputSize = ShapeUtil.size(outputShape);\n\n      // const inChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n      // TODO Enable isVec4 for performance\n      // Disabled due to weight matrix layout issue\n      // const isVec4 = attributes.group === 1 && isChannelsLast && inChannels % 4 === 0 && outChannels % 4 === 0;\n      const dispatch = [\n        Math.ceil(outputSize / 64),\n        1,\n        1,\n      ];\n      LOG_DEBUG('verbose', () => `[conv2d_backprop_webgpu] dispatch = ${dispatch}`);\n\n      return {\n        ...metadata,\n        outputs: [{\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n          gpuDataType: GpuDataType.default\n        }],\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]}),\n        getShaderSource: (shaderHelper: ShaderHelper) => createConvTranspose2DOpProgramShaderSource(\n            shaderHelper, inputs, attributes, outputShape, hasBias, dispatch[1] === 1 && dispatch[2] === 1),\n      };\n    };\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-core/src/ops/conv_util.ts\n//\n// modified to fit the needs of the project\n\nexport const utilFunctions = `\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\n}\n`;\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// sampled from [@tensorflow/tfjs] tfjs-backend-webgpu/src/matmul_packed_webgpu.ts\n//\n// modified to fit the needs of the project\n\nimport {TensorView} from '../../../tensor-view';\nimport {ShapeUtil} from '../../../util';\nimport {GpuDataType, ProgramInfo, ProgramMetadata} from '../../types';\nimport {getBroadcastDims, IndicesHelper, inputVariable, outputVariable, ShaderHelper} from '../common';\nimport {getActicationSnippet, InternalActivationAttributes} from '../fuse-utils';\n\nimport {typeSnippet} from './activation_util';\n\nconst writeDataToSubAVec4Snippet = (transpose: boolean, batchDims?: IndicesHelper) => {\n  if (transpose) {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${batchDims ? ', batchIndices' : ''});\n        `;\n\n  } else {\n    return `\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${batchDims ? ', batchIndices' : ''});\n        `;\n  }\n};\n\nconst calculateResultSnippet = (transposeA: boolean, innerElementSize: number) => {\n  if (transposeA) {\n    return `\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${innerElementSize === 3 ? '' : 'let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];'}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached3[i] + acc[i];'}\n        }`;\n  } else {\n    return `\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${innerElementSize === 3 ? '' : 'acc[i] = BCached3 * ACached.w + acc[i];'}\n        }`;\n  }\n};\n\nexport const makeMatMulPackedVec4Source =\n    (workPerThread: number[], workgroupSize: [number, number, number], batchDims?: IndicesHelper, transposeA = false,\n     tileInner = 32, splitK = false, splitedDimInner = 32): string => {\n      const tileAOuter = workgroupSize[1] * workPerThread[1];\n      const tileBOuter = workgroupSize[0] * workPerThread[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n      const innerElementSize = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n\n      if (!(((transposeA && innerElementSize === 4 && workPerThread[1] === 4) ||\n             (!transposeA && (innerElementSize === 3 || innerElementSize === 4))) &&\n            tileAWidth % workgroupSize[0] === 0 && tileInner % workgroupSize[1] === 0 && workPerThread[0] === 4)) {\n        throw new Error(`If transposeA ${transposeA} is true, innerElementSize ${\n            innerElementSize} and workPerThread[1] ${workPerThread[1]} must be 4.\n      Otherwise, innerElementSize ${innerElementSize} must be 3 or 4.\n  tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${workgroupSize[0]}. tileInner ${\n            tileInner} must be divisible by workgroupSize[1] ${workgroupSize[1]}. colPerThread ${\n            workPerThread[0]} must be 4.`);\n      }\n      return `\nvar<workgroup> mm_Asub : array<array<vec${innerElementSize}<f32>, ${tileAWidth / innerElementSize}>, ${tileAHight}>;\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, ${tileBOuter / workPerThread[0]}>, ${tileInner}>;\n\nconst rowPerThread = ${workPerThread[1]};\nconst colPerThread = ${workPerThread[0]};\nconst innerElementSize = ${innerElementSize};\nconst tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n  ${batchDims ? `let batchIndices = ${batchDims.offsetToIndices('u32(batch)')};` : ''}\n  let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\n  let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n  var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n  var acc: array<vec4<f32>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${rowPerThreadB};\n  for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${writeDataToSubAVec4Snippet(transposeA, batchDims)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${\n          batchDims ? ', batchIndices' : ''});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${innerElementSize === 3 ? '' : 'let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];'}\n\n          ${calculateResultSnippet(transposeA, innerElementSize)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`;\n    };\n\nconst writeDataToSubASnippet = (transpose: boolean, batchDims?: IndicesHelper) => {\n  if (transpose) {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${batchDims ? ', batchIndices' : ''});\n            `;\n\n  } else {\n    return `\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${batchDims ? ', batchIndices' : ''});\n            `;\n  }\n};\n\nconst readDataFromSubASnippet = (transposeA: boolean) =>\n    transposeA ? 'let ACached = mm_Asub[k][tileRow + innerRow];' : 'let ACached = mm_Asub[tileRow + innerRow][k];';\n\n// sequentialAccessByThreads means sequential data in memory is accessed by\n// threads, instead of a single thread (default behavior).\nexport const makeMatMulPackedSource =\n    (workPerThread: number[], workgroupSize: [number, number, number], batchDims?: IndicesHelper, transposeA = false,\n     tileInner = 32, splitK = false, splitedDimInner = 32, sequentialAccessByThreads = false): string => {\n      const tileAOuter = workPerThread[1] * workgroupSize[1];\n      const tileBOuter = workPerThread[0] * workgroupSize[0];\n      const tileAWidth = transposeA ? tileAOuter : tileInner;\n      const tileAHight = transposeA ? tileInner : tileAOuter;\n\n      if (!(tileAHight % workgroupSize[1] === 0 && tileAWidth % workgroupSize[0] === 0 &&\n            tileInner % workgroupSize[1] === 0)) {\n        throw new Error(`tileAHight ${tileAHight} must be divisible by workgroupSize[1]${\n            workgroupSize[1]}, tileAWidth ${tileAWidth} must be divisible by workgroupSize[0]${\n            workgroupSize[0]}, tileInner ${tileInner} must be divisible by workgroupSize[1]${workgroupSize[1]}`);\n      }\n      const rowPerThreadA = tileAHight / workgroupSize[1];\n      const colPerThreadA = tileAWidth / workgroupSize[0];\n      const rowPerThreadB = tileInner / workgroupSize[1];\n      const matmulSnippet = sequentialAccessByThreads ?\n          `\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n    let globalColStart = i32(workgroupId.x) * ${tileBOuter};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < numTiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${tileAHight}; inputRow = inputRow + ${workgroupSize[1]}) {\n        for (var inputCol = localCol; inputCol < ${tileAWidth}; inputCol = inputCol + ${workgroupSize[0]}) {\n          ${writeDataToSubASnippet(transposeA, batchDims)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${tileInner}; inputRow = inputRow + ${workgroupSize[1]}) {\n            for (var inputCol = localCol; inputCol < ${tileBOuter}; inputCol = inputCol + ${workgroupSize[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${batchDims ? ', batchIndices' : ''});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<f32, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${workgroupSize[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${\n              transposeA ? `mm_Asub[k][localRow + innerRow * ${workgroupSize[1]}];` :\n                           `mm_Asub[localRow + innerRow * ${workgroupSize[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${workgroupSize[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${workgroupSize[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    ` :\n          `\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${tileAOuter};\n\nlet tileRowA = i32(localId.y) * ${rowPerThreadA};\nlet tileColA = i32(localId.x) * ${colPerThreadA};\nlet tileRowB = i32(localId.y) * ${rowPerThreadB};\n// Loop over shared dimension.\nfor (var t = 0; t < numTiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadA}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${colPerThreadA}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${writeDataToSubASnippet(transposeA, batchDims)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${rowPerThreadB}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${batchDims ? ', batchIndices' : ''});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<f32, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${readDataFromSubASnippet(transposeA)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;\n\n      return `\n  var<workgroup> mm_Asub : array<array<f32, ${tileAWidth}>, ${tileAHight}>;\n  var<workgroup> mm_Bsub : array<array<f32, ${tileBOuter}>, ${tileInner}>;\n  const rowPerThread = ${workPerThread[1]};\n  const colPerThread = ${workPerThread[0]};\n  const tileInner = ${tileInner};\n\n@compute @workgroup_size(${workgroupSize[0]}, ${workgroupSize[1]}, ${workgroupSize[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${splitK ? '0' : 'i32(globalId.z)'};\n    ${batchDims ? `let batchIndices = ${batchDims.offsetToIndices('u32(batch)')};` : ''}\n    let numTiles = ${splitK ? `${Math.ceil(splitedDimInner / tileInner)}` : '(dimInner - 1) / tileInner + 1'};\n    var kStart = ${splitK ? `i32(globalId.z) * ${splitedDimInner}` : '0'};\n\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\n\n    // Without this initialization strange values show up in acc.\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = 0.0;\n      }\n    }\n    ${matmulSnippet}\n  }\n`;\n    };\n\nconst matMulReadWriteFnSource =\n    (component: number, hasBias: boolean, applyActivation: string, variables: IndicesHelper[], isChannelsLast = false):\n        string => {\n          const batchAVariable = variables[0];\n          const batchBVariable = variables[1];\n          const batchVariable = variables[2];\n          const aVariable = variables[3];\n          const bVariable = variables[4];\n          const outputVariable = variables[5];\n          const broadCastADims = getBroadcastDims(batchAVariable.shape, batchVariable.shape);\n          const broadCastBDims = getBroadcastDims(batchBVariable.shape, batchVariable.shape);\n          const getAIndices = () => {\n            const aRank = aVariable.shape.length;\n            const batchRank = batchVariable.shape.length;\n            let resStr = `var aIndices: ${aVariable.type.indices};`;\n            for (let i = aRank - 2 - 1, j = batchRank - 1; i >= 0; i--, j--) {\n              resStr += `\\naIndices[${i}] = ${batchRank > 1 ? `batchIndices[${j}]` : 'batchIndices'};`;\n            }\n            broadCastADims.forEach(i => {\n              resStr += `\\naIndices[${i}] = 0;`;\n            });\n            resStr += `\\naIndices[${aRank - 2}] = u32(row);\n                   aIndices[${aRank - 1}] = u32(colIn);`;\n            return resStr;\n          };\n          const getBIndices = () => {\n            const bRank = bVariable.shape.length;\n            const batchRank = batchVariable.shape.length;\n            let resStr = `var bIndices: ${bVariable.type.indices};`;\n            for (let i = bRank - 2 - 1, j = batchRank - 1; i >= 0; i--, j--) {\n              resStr += `\\nbIndices[${i}] = ${batchRank > 1 ? `batchIndices[${j}]` : 'batchIndices'};`;\n            }\n            broadCastBDims.forEach(i => {\n              resStr += `\\nbIndices[${i}] = 0;`;\n            });\n            resStr += `\\nbIndices[${bRank - 2}] = u32(row);\n                   bIndices[${bRank - 1}] = u32(colIn);`;\n            return resStr;\n          };\n          const source = `\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${batchVariable.type.indices}) -> ${\n              typeSnippet(component)} {\n      var value = ${typeSnippet(component)}(0.0);\n      let col = colIn * ${component};\n      if(row < dimAOuter && col < dimInner)\n      {\n        ${getAIndices()}\n        value = ${aVariable.getByIndices('aIndices')};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${batchVariable.type.indices}) -> ${\n              typeSnippet(component)} {\n      var value = ${typeSnippet(component)}(0.0);\n      let col = colIn * ${component};\n      if(row < dimInner && col < dimBOuter)\n      {\n        ${getBIndices()}\n        value = ${bVariable.getByIndices('bIndices')};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${typeSnippet(component)}) {\n      let col = colIn * ${component};\n      if (row < dimAOuter && col < dimBOuter) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${hasBias ? `value = value + ${isChannelsLast ? 'bias[colIn]' : `${typeSnippet(component)}(bias[row])`};` : ''}\n        ${applyActivation}\n        ${outputVariable.setByIndices('vec3<u32>(coords)', 'value')}\n      }\n    }\n    `;\n          return source;\n        };\n\nexport const createMatmulProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes,\n     outputShape: readonly number[], reshapedOutputShape?: readonly number[],\n     isChannelsLast = false /* only used for conv2dByMatMul*/): ProgramInfo => {\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n\n      const outerDimsA = aShape.slice(0, -2);\n      const outerDimsB = bShape.slice(0, -2);\n      const outerDims = reshapedOutputShape ? reshapedOutputShape.slice(0, -2) : outputShape.slice(0, -2);\n      const batchDims = inputVariable('batchDims', inputs[0].dataType, outerDims);\n      const batchADims = inputVariable('batchADims', inputs[0].dataType, outerDimsA);\n      const batchBDims = inputVariable('batchBDims', inputs[0].dataType, outerDimsB);\n      const variables = [batchADims, batchBDims, batchDims];\n      const batchSize = ShapeUtil.size(outerDims);\n\n      const dimAOuter = aShape[aShape.length - 2];\n      const dimInner = aShape[aShape.length - 1];\n      const dimBOuter = bShape[bShape.length - 1];\n      const isVec4 = dimInner % 4 === 0 && dimBOuter % 4 === 0;\n      const {activationFunction, applyActivation} = getActicationSnippet(activationAttributes);\n\n      // TODO: fine tune size\n      const elementsPerThread = dimAOuter <= 8 ? [4, 1, 1] : [4, 4, 1];\n      const workgroupSize: [number, number, number] = [8, 8, 1];\n      const dispatch = [\n        Math.ceil(dimBOuter / workgroupSize[0] / elementsPerThread[0]),\n        Math.ceil(dimAOuter / workgroupSize[1] / elementsPerThread[1]),\n        Math.ceil(batchSize / workgroupSize[2] / elementsPerThread[2])\n      ];\n\n      const components = isVec4 ? 4 : 1;\n      const A = inputVariable('a', inputs[0].dataType, [...outerDimsA, dimAOuter, dimInner / components], components);\n      const B = inputVariable('b', inputs[1].dataType, [...outerDimsB, dimInner, dimBOuter / components], components);\n      const output =\n          outputVariable('result', inputs[0].dataType, [batchSize, dimAOuter, dimBOuter / components], components);\n      variables.push(A);\n      variables.push(B);\n      variables.push(output);\n      const inputVariables = [A, B];\n      const hasBias = inputs.length > 2;\n      const declareFunctions = matMulReadWriteFnSource(components, hasBias, applyActivation, variables, isChannelsLast);\n      if (hasBias) {\n        const biasComponents = isChannelsLast ? components : 1;\n        inputVariables.push(inputVariable('bias', inputs[2].dataType, inputs[2].dims, biasComponents));\n      }\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const dimAOuter: i32 = ${dimAOuter};\n  const dimBOuter: i32 = ${dimBOuter};\n  const dimInner: i32 = ${dimInner};\n  ${shaderHelper.declareVariables(...inputVariables, output)}\n  ${declareFunctions}\n  ${activationFunction}\n  ${\n          isVec4 ? makeMatMulPackedVec4Source(elementsPerThread, workgroupSize, batchDims) :\n                   makeMatMulPackedSource(elementsPerThread, workgroupSize, batchDims)}\n                   ${batchDims.impl()}`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: dispatch[0], y: dispatch[1], z: dispatch[2]})\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// TODO: this is the same naive implementation we use for reduce that has\n// performance limitations when the reduced axis is long. Need to add\n// a optimized codepath for this.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createReduceProgramInfo, ReduceOp} from './reduce';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length === 0 || inputs.length > 2) {\n    throw new Error('ArgMinMaxOp op requires 1 or 2 inputs.');\n  }\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport interface ArgMinMaxAttributes extends AttributeWithCacheKey {\n  keepDims: boolean;\n  axis: number;\n  selectLastIndex: number;\n}\n\nconst createArgMinMaxAttributesFromInputs =\n    (inputs: readonly TensorView[], attributes: ArgMinMaxAttributes): ArgMinMaxAttributes =>\n        createAttributeWithCacheKey(\n            {axis: attributes.axis, keepDims: attributes.keepDims, selectLastIndex: attributes.selectLastIndex});\n\nconst createArgMinMaxProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, attributes: ArgMinMaxAttributes, reduceOp: ReduceOp):\n        ProgramInfoLoader => {\n          const updatedAttributes: ArgMinMaxAttributes =\n              inputs.length === 1 ? attributes : createArgMinMaxAttributesFromInputs(inputs, attributes);\n          const cacheHint = updatedAttributes.cacheKey + inputs.map(x => x.dims.toString()).join('_');\n          const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint};\n          return {\n            ...metadata,\n            get: () => createReduceProgramInfo(\n                metadata, [inputs[0]], reduceOp, [updatedAttributes.axis], DataType.int64, updatedAttributes.keepDims)\n          };\n        };\n\n\nexport const argMin = (context: ComputeContext, attributes: ArgMinMaxAttributes): void => {\n  validateInputs(context.inputs);\n  const argMinMaxOp: ReduceOp = (input, output, axes) => {\n    const idxZero = [];\n    for (let k = 0; k < input.shape.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\n      }\n    }\n    return [\n      `${idxZero.join('\\n')}`, `var value = ${input.getByOffset('inputOffset')};\\nvar bestIndex : i32 = 0;`,\n      `if (${input.getByOffset('inputOffset')} ${attributes.selectLastIndex > 0 ? '<=' : '<'} value) {\n         value = ${input.getByOffset('inputOffset')};\n         bestIndex = i32(lastIndex);\n       }`,\n      '', output.setByOffset('global_idx', 'bestIndex')\n    ];\n  };\n  context.compute(createArgMinMaxProgramInfoLoader(context.inputs, 'ArgMin', attributes, argMinMaxOp), {inputs: [0]});\n};\n\nexport const argMax = (context: ComputeContext, attributes: ArgMinMaxAttributes): void => {\n  validateInputs(context.inputs);\n  const argMinMaxOp: ReduceOp = (input, output, axes) => {\n    const idxZero = [];\n    for (let k = 0; k < input.shape.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\n      }\n    }\n    return [\n      `${idxZero.join('\\n')}`, `var value = ${input.getByOffset('inputOffset')};\\nvar bestIndex : i32 = 0;`,\n      `if (${input.getByOffset('inputOffset')} ${attributes.selectLastIndex > 0 ? '>=' : '>'} value) {\n         value = ${input.getByOffset('inputOffset')};\n         bestIndex = i32(lastIndex);\n       }`,\n      '', output.setByOffset('global_idx', 'bestIndex')\n    ];\n  };\n  context.compute(createArgMinMaxProgramInfoLoader(context.inputs, 'argMax', attributes, argMinMaxOp), {inputs: [0]});\n};\n\nexport const parseArgMinMaxAttributes = (attributes: Record<string, unknown>): ArgMinMaxAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<ArgMinMaxAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {BroadcastUtil, ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\n\ntype BuiltinFunctionName = string;\ntype BinaryCustomExpression = (expressionA: string, expressionB: string) => string;\ntype BinaryFunctionCall = BuiltinFunctionName|BinaryCustomExpression|{\n  scalar: BinaryCustomExpression;\n  vector: BinaryCustomExpression;\n};\n\nconst createBinaryOpProgramShader =\n    (shaderHelper: ShaderHelper, dimsA: readonly number[], dimsB: readonly number[], dimsOutput: readonly number[],\n     vectorize: boolean, doBroadcast: boolean, funcCall: BinaryFunctionCall, typeA: number, typeB: number,\n     typeOutput: number, additionalImplementation?: string) => {\n      const outputSize = ShapeUtil.size(dimsOutput);\n      const vecSize = Math.ceil(outputSize / 4);\n\n      let expressionScalar: BinaryCustomExpression;\n      let expressionVector: BinaryCustomExpression;\n      if (typeof funcCall === 'string') {\n        expressionScalar = expressionVector = (a, b) => `${funcCall}((${a}),(${b}))`;\n      } else if (typeof funcCall === 'function') {\n        expressionScalar = expressionVector = funcCall;\n      } else {\n        expressionScalar = funcCall.scalar;\n        expressionVector = funcCall.vector;\n      }\n\n      let broadcastImpl = '';\n      const output = outputVariable('outputData', typeOutput, dimsOutput, 4);\n      const a = inputVariable('aData', typeA, dimsA, 4);\n      const b = inputVariable('bData', typeB, dimsB, 4);\n      if (doBroadcast) {\n        const calcOffsetImpl = (dims: readonly number[]) => {\n          const strides = ShapeUtil.computeStrides(dims);\n          const offsets: string[] = [];\n          for (let i = dims.length - 1; i >= 0; i--) {\n            const idx = output.indicesGet('outputIndices', i + dimsOutput.length - dims.length);\n            offsets.push(`${strides[i]}u * (${idx} % ${dims[i]}u)`);\n          }\n          return offsets.length > 0 ? offsets.join('+') : '0u';\n        };\n\n        broadcastImpl = `\n          fn calcOffsetA(outputIndices: ${output.type.indices}) -> u32 {\n            return ${calcOffsetImpl(dimsA)};\n          }\n\n          fn calcOffsetB(outputIndices: ${output.type.indices}) -> u32 {\n            return ${calcOffsetImpl(dimsB)};\n          }\n        `;\n      }\n\n      let assignment: string;\n      if (vectorize) {\n        if (doBroadcast) {\n          const isAOneElement = ShapeUtil.size(dimsA) === 1;\n          const isBOneElement = ShapeUtil.size(dimsB) === 1;\n          if (isAOneElement || isBOneElement) {\n            assignment = output.setByOffset(\n                'global_idx',\n                expressionVector(\n                    isAOneElement ? `${a.type.value}(${a.getByOffset('0')}.x)` : a.getByOffset('global_idx'),\n                    isBOneElement ? `${b.type.value}(${b.getByOffset('0')}.x)` : b.getByOffset('global_idx')));\n          } else {\n            assignment = `\n            let outputIndices = ${output.offsetToIndices('global_idx * 4u')};\n            let offsetA = calcOffsetA(outputIndices);\n            let offsetB = calcOffsetB(outputIndices);\n            ${\n                output.setByOffset(\n                    'global_idx', expressionVector(a.getByOffset('offsetA / 4u'), b.getByOffset('offsetB / 4u')))}\n          `;\n          }\n        } else {\n          assignment = output.setByOffset(\n              'global_idx', expressionVector(a.getByOffset('global_idx'), b.getByOffset('global_idx')));\n        }\n      } else {\n        if (!doBroadcast) {\n          throw new Error('no necessary to use scalar implementation for element-wise binary op implementation.');\n        }\n\n        const singleAssignment = (resStr: string, x: number, typeCast = '') => {\n          const expressionA = `aData[indexA${x}][componentA${x}]`;\n          const expressionB = `bData[indexB${x}][componentB${x}]`;\n          return `\n            let outputIndices${x} = ${output.offsetToIndices(`global_idx * 4u + ${x}u`)};\n            let offsetA${x} = calcOffsetA(outputIndices${x});\n            let offsetB${x} = calcOffsetB(outputIndices${x});\n            let indexA${x} = offsetA${x} / 4u;\n            let indexB${x} = offsetB${x} / 4u;\n            let componentA${x} = offsetA${x} % 4u;\n            let componentB${x} = offsetB${x} % 4u;\n            ${resStr}[${x}] = ${typeCast}(${expressionScalar(expressionA, expressionB)});\n          `;\n        };\n        if (typeOutput === DataType.bool) {\n          assignment = `\n            var data = vec4<u32>(0);\n            ${singleAssignment('data', 0, 'u32')}\n            ${singleAssignment('data', 1, 'u32')}\n            ${singleAssignment('data', 2, 'u32')}\n            ${singleAssignment('data', 3, 'u32')}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`;\n        } else {\n          assignment = `\n            ${singleAssignment('outputData[global_idx]', 0)}\n            ${singleAssignment('outputData[global_idx]', 1)}\n            ${singleAssignment('outputData[global_idx]', 2)}\n            ${singleAssignment('outputData[global_idx]', 3)}\n          `;\n        }\n      }\n\n      return `\n        ${shaderHelper.declareVariables(a, b, output)}\n\n        ${additionalImplementation ?? ''}\n        ${broadcastImpl}\n\n        ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n        ${assignment}\n      }`;\n    };\n\nconst createBinaryOpProgramInfo =\n    (metadata: ProgramMetadata, a: TensorView, b: TensorView, funcCall: BinaryFunctionCall,\n     additionalImplementation?: string, outputDataType: number = a.dataType): ProgramInfo => {\n      const isBroadcast = !ShapeUtil.areEqual(a.dims, b.dims);\n      let outputShape = a.dims;\n      let outputSize = ShapeUtil.size(a.dims);\n\n      let vectorize = false;\n\n      // TODO: deal with zero-sized tensors (eg. dims=[1,0])\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(a.dims, b.dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        outputSize = ShapeUtil.size(outputShape);\n        const isAOneElement = ShapeUtil.size(a.dims) === 1;\n        const isBOneElement = ShapeUtil.size(b.dims) === 1;\n\n        // check whether vectorize can be enabled\n        let sharedDimension = 1;\n        for (let i = 1; i < outputShape.length; i++) {\n          const dimA = a.dims[a.dims.length - i] ?? 1;\n          const dimB = b.dims[b.dims.length - i] ?? 1;\n          if (dimA === dimB) {\n            sharedDimension *= dimA;\n          } else {\n            break;\n          }\n        }\n        if (sharedDimension % 4 === 0 || isAOneElement || isBOneElement) {\n          vectorize = true;\n        }\n      } else {\n        // element-wise\n        vectorize = true;\n      }\n\n      return {\n        ...metadata,\n        getShaderSource: (shaderHelper) => createBinaryOpProgramShader(\n            shaderHelper, a.dims, b.dims, outputShape, vectorize, isBroadcast, funcCall, a.dataType, b.dataType,\n            outputDataType, additionalImplementation),\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */ / 4 /* component size */)})\n      };\n    };\n\nconst createBinaryOpProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, funcCall: BinaryFunctionCall, additionalImplementation?: string,\n     cacheKey?: string, outputDataType?: number): ProgramInfoLoader => {\n      const metadata:\n          ProgramMetadata = {name, inputTypes: [GpuDataType.default, GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createBinaryOpProgramInfo(\n            metadata, inputs[0], inputs[1], funcCall, additionalImplementation, outputDataType)\n      };\n    };\n\nexport const add = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Add', (a, b) => `${a}+${b}`));\n};\n\nexport const div = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Div', (a, b) => `${a}/${b}`));\n};\n\nexport const equal = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Equal', ({scalar: (a, b) => `u32(${a}==${b})`, vector: (a, b) => `vec4<u32>(${a}==${b})`}),\n      undefined, undefined, DataType.bool));\n};\n\nexport const mul = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Mul', (a, b) => `${a}*${b}`));\n};\n\nexport const pow = (context: ComputeContext): void => {\n  const type = inputVariable('input', context.inputs[0].dataType, context.inputs[0].dims).type.value;\n  const roundStr = type === 'i32' ? 'round' : '';\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Pow',\n      ({scalar: (a, b) => `pow_custom(${a},${b})`, vector: (a, b) => `pow_vector_custom(${a},${b})`}),\n      `\n    fn pow_custom(a : ${type}, b : ${type}) -> ${type} {\n      if (b == ${type}(0.0)) {\n        return ${type}(1.0);\n      } else if (a < ${type}(0.0) && f32(b) != floor(f32(b))) {\n        return ${type}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${type}(1.0), round(f32(abs(b) % ${type}(2.0))) != 1.0) * ${type}(${\n          roundStr}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${type}>, b : vec4<${type}>) -> vec4<${type}> {\n      // TODO: implement vectorized pow\n      return vec4<${type}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `));\n};\n\nexport const sub = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(context.inputs, 'Sub', (a, b) => `${a}-${b}`));\n};\n\nexport const greater = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Greater', ({scalar: (a, b) => `u32(${a}>${b})`, vector: (a, b) => `vec4<u32>(${a}>${b})`}),\n      undefined, undefined, DataType.bool));\n};\n\nexport const less = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'Less', ({scalar: (a, b) => `u32(${a}<${b})`, vector: (a, b) => `vec4<u32>(${a}<${b})`}),\n      undefined, undefined, DataType.bool));\n};\n\nexport const greaterOrEqual = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'GreaterOrEqual',\n      ({scalar: (a, b) => `u32(${a}>=${b})`, vector: (a, b) => `vec4<u32>(${a}>=${b})`}), undefined, undefined,\n      DataType.bool));\n};\n\nexport const lessOrEqual = (context: ComputeContext): void => {\n  context.compute(createBinaryOpProgramInfoLoader(\n      context.inputs, 'LessOrEqual', ({scalar: (a, b) => `u32(${a}<=${b})`, vector: (a, b) => `vec4<u32>(${a}<=${b})`}),\n      undefined, undefined, DataType.bool));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {ShapeUtil} from '../../util';\n\n/**\n * constant value for a workgroup size.\n *\n * We definitely can do further optimization in future, but for now we use 64.\n *\n * rule of thumb: Use [a workgroup size of] 64 unless you know what GPU you are targeting or that your workload\n *                needs something different.\n *\n * from: https://surma.dev/things/webgpu/\n **/\nexport const WORKGROUP_SIZE = 64;\n\ninterface IndicesHelperTypes {\n  /**\n   * WGSL type of indices expression\n   */\n  readonly indices: string;\n\n  /**\n   * WGSL type of a value\n   */\n  readonly value: string;\n\n  /**\n   * WGSL type of storage type representing a value\n   *\n   * This is usually the same to `value`, but for some type (eg. bool), we need to use `u32` as storage type for\n   * value type `vec4<bool>`\n   */\n  readonly storage: string;\n\n  /**\n   * tensor type as represented in TensorView\n   */\n  readonly tensor: number;\n}\n\n/**\n * A helper class for generating WGSL code for manipulating indices and data for a shader's input or output.\n *\n * This class is designed to offer a unified way to generate WGSL code for manipulating indices and data for a shader's\n * input or output.\n *\n * The following is a list of terminologies used in this class:\n * - `offset`: a uint32 value representing the offset of an element in the data buffer.\n * - `indices`: an abstraction of a multi-dimensional array's indices representing the data's index on each dimension.\n * - `value`: a value of a data element.\n *\n * Users are expected to create an instance of this class for each shader's input or output, and use the instance to\n * generate WGSL code for manipulating indices and data. The following 2 exported functions are for users to call to\n * create an instance of an indices helper:\n * - `inputVariable()`: create an indices helper instance for an input.\n * - `outputVariable()`: create an indices helper instance for an output.\n *\n * An indices helper instance contains helper functions for the following operations:\n * - access readonly basic information, including: `name`(the name of the input or output), `usage`(whether it's an\n * input or an output) and `shape`(the passed in shape).\n * - `type`: access readonly type information, including: `indices`(the type of indices), `value`(the type of value at\n * runtime), `storage`(the type of value at storage) and `tensor`(the tensor type as represented in TensorView).\n * - generate WGSL code for getting indices from offset. Use `offsetToIndices()` for WGSL code snippet to calculate\n * indices from offset, and use `indicesToOffset()` for WGSL code snippet to calculate offset from indices.\n * - to manipulate an instance of indices, use `setIndices()` and `getIndices()` to set and get the indices on an\n * indices variable.\n * - to manipulate data, use `set()`/`get()` to access data at the given indices from parameter list, use\n * `setByIndices()`/`getByIndices()` to access data at the given indices from an indices variable, and use\n * `setByOffset()`/`getByOffset()` to access data at the given offset.\n * - `impl`: get WGSL code of function implementation for the util functions mentioned above.\n */\nexport interface IndicesHelper {\n  /**\n   * get WGSL code of function implementation for the util functions.\n   *\n   */\n  readonly impl: () => string;\n\n  /**\n   * get type info\n   */\n  readonly type: IndicesHelperTypes;\n\n  /**\n   * WGSL code of a expression for getting indices from offset.\n   *\n   * @param varOffset - a u32 expression representing the offset.\n   *\n   * @returns an `type.indices` expression\n   */\n  readonly offsetToIndices: (varOffset: string) => string;\n\n  /**\n   * WGSL code of an `u32` expression for getting offset from indices.\n   *\n   * @param varIndices - a `type.indices` expression representing the indices.\n   *\n   * @returns an `u32` expression\n   */\n  readonly indicesToOffset: (varIndices: string) => string;\n\n  /**\n   * WGSL code of generating an indices literal\n   *\n   * @param init - initial value.\n   */\n  readonly indices: (...init: ReadonlyArray<number|string>) => string;\n\n  /**\n   * WGSL code of a statement for setting indices.\n   *\n   * @param varIndices - a variable name for the indices.\n   * @param idx - the index of the indices to set. can be a number or a string (WGSL `u32` expression).\n   * @param value - the value to set. can be a number or a string (WGSL `u32` expression).\n   *\n   * @returns a WGSL statement\n   */\n  readonly indicesSet: (varIndices: string, idx: number|string, value: number|string) => void;\n\n  /**\n   * WGSL code of an `u32` expression for getting indices.\n   *\n   * @param varIndices - a variable name for the indices.\n   * @param idx - the index of the indices to get. can be a number or a string (WGSL `u32` expression).\n   *\n   * @returns an `u32` expression\n   */\n  readonly indicesGet: (varIndices: string, idx: number|string) => string;\n\n  /**\n   * WGSL code for a statement for setting data at the given indices.\n   *\n   * @param indicesAndValue - an array of numbers or strings (WGSL `u32` expression) representing the indices, followed\n   *     by the value to set. This array should have exactly `shape.length + 1` elements.\n   */\n  readonly set: (...indicesAndValue: ReadonlyArray<number|string>) => string;\n\n  /**\n   * WGSL code for a statement for setting data at the given indices variable.\n   *\n   * @param varIndices - a variable name for the indices.\n   * @param value - the value to set. should be a WGSL expression.\n   */\n  readonly setByIndices: (varIndices: string, value: string) => string;\n\n  /**\n   * WGSL code for a statement for setting data at the given offset.\n   *\n   * @param offset - a number or a string (WGSL `u32` expression) representing the offset.\n   * @param value - the value to set. should be a WGSL expression.\n   */\n  readonly setByOffset: (offset: number|string, value: string) => string;\n\n  /**\n   * WGSL code for an expression for getting data at the given indices.\n   *\n   * @param indices - an array of numbers or strings (WGSL `u32` expression) representing the indices.\n   */\n  readonly get: (...indices: ReadonlyArray<number|string>) => string;\n\n  /**\n   * WGSL code for an expression for getting data at the given indices variable.\n   *\n   * @param varIndices - a variable name for the indices.\n   */\n  readonly getByIndices: (varIndices: string) => string;\n\n  /**\n   * WGSL code for an expression for getting data at the given offset.\n   *\n   * @param offset - a number or a string (WGSL `u32` expression) representing the offset.\n   */\n  readonly getByOffset: (offset: number|string) => string;\n\n  /**\n   * name of the data variable\n   */\n  readonly name: string;\n\n  /**\n   * whether the helper is for an input or an output.\n   */\n  readonly usage: 'input'|'output';\n\n  /**\n   * the shape of the input or output.\n   */\n  readonly shape: readonly number[];\n}\n\nconst getWgslMappedType = (type: number, components: 1|2|3|4): string|[string, string] => {\n  if (components === 3) {\n    throw new Error('vec3 has same alignment as vec4, use vec4 instead');\n  }\n\n  // return type is [ storage type, runtime type ] or a single string for both\n  switch (type) {\n    case DataType.float16:\n      return components > 1 ? `vec${components}<f16>` : 'f16';\n    case DataType.float:\n      return components > 1 ? `vec${components}<f32>` : 'f32';\n    case DataType.int32:\n      return components > 1 ? `vec${components}<i32>` : 'i32';\n    case DataType.uint32:\n      return components > 1 ? `vec${components}<u32>` : 'u32';\n    case DataType.int64:\n      if (components > 1) {\n        throw new Error('currently not supported vecX of uint64 yet');\n      }\n      return ['vec2<u32>', 'i32'];\n    case DataType.uint64:\n      if (components > 1) {\n        throw new Error('currently not supported vecX of uint64 yet');\n      }\n      return ['vec2<u32>', 'u32'];\n    case DataType.bool:\n      if (components !== 4) {\n        throw new Error('bool must be vec4');\n      }\n      return ['u32', 'vec4<bool>'];\n\n    default:\n      throw new Error(`Unknown data type: ${type}`);\n  }\n};\n\nexport const tensorTypeToWsglStorageType = (type: DataType, components: 1|2|3|4 = 1) => {\n  const mappedType = getWgslMappedType(type, components);\n  return typeof mappedType === 'string' ? mappedType : mappedType[0];\n};\n\nexport const tensorTypeToWsglValueType = (type: DataType, components: 1|2|3|4 = 1) => {\n  const mappedType = getWgslMappedType(type, components);\n  return typeof mappedType === 'string' ? mappedType : mappedType[1];\n};\n\n/**\n * A helper function to get a IndicesHelper for a given input or output.\n *\n * @param name - the name of the input or output.\n * @param tensorType - the tensor type of the input or output.\n * @param shape - the tensor shape of the input or output.\n * @param isInput - whether the helper is for an input or an output.\n * @param components - indicates the number of components of each element. 1 for scalar, 2 for vec2, 3 for vec3, 4 for\n *    vec4.\n */\nconst createIndicesHelper =\n    (name: string, tensorType: number, shape: readonly number[], isInput: boolean,\n     components: 1|2|3|4): IndicesHelper => {\n      const rank = shape.length;\n      const indicesType = rank < 2 ? 'u32' : rank <= 4 ? `vec${rank}<u32>` : `array<u32, ${rank}>`;\n      const mappedType = getWgslMappedType(tensorType, components);\n      const valueType = typeof mappedType === 'string' ? mappedType : mappedType[1];\n      const storageType = typeof mappedType === 'string' ? mappedType : mappedType[0];\n      const type = {indices: indicesType, value: valueType, storage: storageType, tensor: tensorType};\n\n      const normalizeDim = (dim: number|string): string => typeof dim === 'string' ? dim : `${dim}u`;\n\n      const implementationUsed = {\n        offsetToIndices: false,\n        indicesToOffset: false,\n        set: false,\n        setByIndices: false,\n        get: false,\n        getByIndices: false,\n      };\n\n      const strides = ShapeUtil.computeStrides(shape);\n      let o2iSnippet = '';\n      for (let i = 0; i < rank - 1; i++) {\n        o2iSnippet += `\n    let dim${i} = current / ${strides[i]}u;\n    let rest${i} = current % ${strides[i]}u;\n    indices[${i}] = dim${i};\n    current = rest${i};\n    `;\n      }\n      o2iSnippet += `indices[${rank - 1}] = current;`;\n\n      const offsetToIndicesImplementation = rank < 2 ? '' : `\n  fn o2i_${name}(offset: u32) -> ${type.indices} {\n    var indices: ${type.indices};\n    var current = offset;\n    ${o2iSnippet}\n    return indices;\n  }`;\n\n      const offsetToIndices = (varOffset: string) => {\n        implementationUsed.offsetToIndices = true;\n        return rank < 2 ? varOffset : `o2i_${name}(${varOffset})`;\n      };\n\n      const offsets: string[] = [];\n      if (rank >= 2) {\n        for (let i = rank - 1; i >= 0; i--) {\n          offsets.push(`${strides[i]}u * (indices[${i}])`);\n        }\n      }\n\n      const indicesToOffsetImplementation = rank < 2 ? '' : `\n  fn i2o_${name}(indices: ${type.indices}) -> u32 {\n    return ${offsets.join('+')};\n  }`;\n\n      const indicesToOffset = (varIndices: string) => {\n        implementationUsed.indicesToOffset = true;\n        return rank < 2 ? varIndices : `i2o_${name}(${varIndices})`;\n      };\n\n      const indices = (...init: ReadonlyArray<number|string>) =>\n          rank === 0 ? '0u' : `${type.indices}(${init.map(normalizeDim).join(',')})`;\n\n      const indicesGet = (varIndices: string, idx: number|string) => {\n        if (rank < 2) {\n          return `${varIndices}`;\n        } else {\n          return `${varIndices}[${idx}]`;\n        }\n      };\n\n      const indicesSet = (varIndices: string, idx: number|string, value: string) => {\n        if (rank < 2) {\n          return `${varIndices}=${value};`;\n        } else {\n          return `${varIndices}[${idx}]=${value};`;\n        }\n      };\n\n      const setByOffset = (offset: number|string, value: string) => (() => {\n        if (type.storage === type.value) {\n          return `${name}[${offset}]=${value};`;\n        } else if (type.storage === 'vec2<u32>' && type.value === 'i32') {\n          // int64, components === 1\n          return `${name}[${offset}]=vec2<u32>(u32(${value}), select(0u, 0xFFFFFFFFu, ${value} < 0));`;\n        } else if (type.storage === 'vec2<u32>' && type.value === 'u32') {\n          // uint64, components === 1\n          return `${name}[${offset}]=vec2<u32>(u32(${value}), 0u);`;\n        } else if (type.storage === 'u32' && type.value === 'vec4<bool>') {\n          // bool, components === 4\n          return `${name}[${offset}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${value}));`;\n        } else {\n          throw new Error(`not supported combination of storage type ${type.storage} and value type ${type.value} yet`);\n        }\n      })();\n\n      const getByOffset = (offset: number|string) => (() => {\n        if (type.storage === type.value) {\n          return `${name}[${offset}]`;\n        } else if (type.storage === 'vec2<u32>' && type.value === 'i32') {\n          // int64, components === 1\n          return `i32(${name}[${offset}].x)`;\n        } else if (type.storage === 'vec2<u32>' && type.value === 'u32') {\n          // uint64, components === 1\n          return `u32(${name}[${offset}].x)`;\n        } else if (type.storage === 'u32' && type.value === 'vec4<bool>') {\n          // bool, components === 4\n          return `vec4<bool>(bool(${name}[${offset}] & 0xFFu), bool(${name}[${offset}] & 0xFF00u), bool(${name}[${\n              offset}] & 0xFF0000u), bool(${name}[${offset}] & 0xFF000000u))`;\n        } else {\n          throw new Error(`not supported combination of storage type ${type.storage} and value type ${type.value} yet`);\n        }\n      })();\n\n      const getByIndicesImplementation = rank < 2 ? '' : `\n  fn get_${name}ByIndices(indices: ${type.indices}) -> ${valueType} {\n    return ${getByOffset(`i2o_${name}(indices)`)};\n  }`;\n\n      const getImplementation = rank < 2 ? '' : (() => {\n        const params = shape.map((_, i) => `d${i}: u32`).join(', ');\n        const dims = shape.map((_, i) => `d${i}`).join(', ');\n        return `\n  fn get_${name}(${params}) -> ${valueType} {\n    return get_${name}ByIndices(${indices(dims)});\n  }`;\n      })();\n\n      const get = (...indices: ReadonlyArray<number|string>) => {\n        if (indices.length !== rank) {\n          throw new Error(`indices length must be ${rank}`);\n        }\n\n        const normalizedIndices = indices.map(normalizeDim).join(',');\n\n        if (rank === 0) {\n          return getByOffset('0u');\n        } else if (rank === 1) {\n          return getByOffset(normalizedIndices[0]);\n        } else {\n          implementationUsed.get = true;\n          implementationUsed.getByIndices = true;\n          implementationUsed.indicesToOffset = true;\n          return `get_${name}(${normalizedIndices})`;\n        }\n      };\n\n      const getByIndices = (varIndices: string) => {\n        if (rank < 2) {\n          return getByOffset(varIndices);\n        } else {\n          implementationUsed.getByIndices = true;\n          implementationUsed.indicesToOffset = true;\n          return `get_${name}ByIndices(${varIndices})`;\n        }\n      };\n\n      const setByIndicesImplementation = rank < 2 ? '' : `\n  fn set_${name}ByIndices(indices: ${type.indices}, value: ${valueType}) {\n    ${setByOffset(`i2o_${name}(indices)`, 'value')}\n  }`;\n\n      const setImplementation = rank < 2 ? '' : (() => {\n        const params = shape.map((_, i) => `d${i}: u32`).join(', ');\n        const dims = shape.map((_, i) => `d${i}`).join(', ');\n        return `\n  fn set_${name}(${params}, value: ${valueType}) {\n    set_${name}ByIndices(${indices(dims)}, value);\n  }`;\n      })();\n\n      const set = (...indicesAndValue: ReadonlyArray<number|string>) => {\n        if (indicesAndValue.length !== rank + 1) {\n          throw new Error(`indices length must be ${rank}`);\n        }\n        const value = indicesAndValue[rank];\n        if (typeof value !== 'string') {\n          throw new Error('value must be string');\n        }\n\n        const normalizedIndices = indicesAndValue.slice(0, rank).map(normalizeDim).join(',');\n\n        if (rank === 0) {\n          return setByOffset('0u', value);\n        } else if (rank === 1) {\n          return setByOffset(normalizedIndices[0], value);\n        } else {\n          implementationUsed.set = true;\n          implementationUsed.setByIndices = true;\n          implementationUsed.indicesToOffset = true;\n          return `set_${name}(${normalizedIndices}, ${value})`;\n        }\n      };\n\n      const setByIndices = (varIndices: string, value: string) => {\n        if (rank < 2) {\n          return setByOffset(varIndices, value);\n        } else {\n          implementationUsed.setByIndices = true;\n          implementationUsed.indicesToOffset = true;\n          return `set_${name}ByIndices(${varIndices}, ${value});`;\n        }\n      };\n\n      const impl = () => {\n        const impls = [];\n        if (implementationUsed.offsetToIndices) {\n          impls.push(offsetToIndicesImplementation);\n        }\n        if (implementationUsed.indicesToOffset) {\n          impls.push(indicesToOffsetImplementation);\n        }\n        if (implementationUsed.set) {\n          impls.push(setImplementation);\n        }\n        if (implementationUsed.setByIndices) {\n          impls.push(setByIndicesImplementation);\n        }\n        if (implementationUsed.get) {\n          impls.push(getImplementation);\n        }\n        if (implementationUsed.getByIndices) {\n          impls.push(getByIndicesImplementation);\n        }\n        return impls.join('\\n');\n      };\n\n      return {\n        impl,\n        type,\n        offsetToIndices,\n        indicesToOffset,\n        indices,\n        indicesGet,\n        indicesSet,\n        set,\n        setByOffset,\n        setByIndices,\n        get,\n        getByOffset,\n        getByIndices,\n        // isVec4,\n        usage: isInput ? 'input' : 'output',\n        name,\n        shape\n      };\n    };\n\n/**\n * Create a IndicesHelper for an input.\n *\n * @param name - the name of the input.\n * @param type - the tensor type of the input.\n * @param shape - the tensor shape of the input.\n * @param components - the number of components of the input. available values are 1, 2, 3, 4. default is 1.\n * @returns an IndicesHelper for the input.\n */\nexport const inputVariable =\n    (name: string, type: number, shape: readonly number[], components: 1|2|3|4 = 1): IndicesHelper =>\n        createIndicesHelper(name, type, shape, true, components);\n\n/**\n * Create a IndicesHelper for an output.\n *\n * @param name - the name of the output.\n * @param type - the tensor type of the output.\n * @param shape - the tensor shape of the output.\n * @param components - the number of components of the input. available values are 1, 2, 3, 4. default is 1.\n * @returns an IndicesHelper for the output.\n */\nexport const outputVariable =\n    (name: string, type: number, shape: readonly number[], components: 1|2|3|4 = 1): IndicesHelper =>\n        createIndicesHelper(name, type, shape, false, components);\n\n/**\n * A ShaderHelper is a helper class for generating WGSL code.\n */\nexport interface ShaderHelper {\n  /**\n   * A helper function to generate the start of main function in WGSL source code.\n   *\n   * @example\n   * const getShaderSource = (shaderHelper: ShaderHelper) => `\n   *  ...\n   *\n   *  ${shaderHelper.mainStart()}\n   *    // your code here inside main() function\n   *    ...\n   *  }\n   * `;\n   *\n   * @param workgroupSize - an optional workgroup size. default is WORKGROUP_SIZE.\n   */\n  mainStart(workgroupSize?: number|[number, number, number]): string;\n\n  /**\n   * A helper function to generate the code snippet for guarding against out-of-bounds size.\n   *\n   * @example\n   * const getShaderSource = (shaderHelper: ShaderHelper) => `\n   *  ...\n   *\n   *  ${shaderHelper.mainStart()}\n   *    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n   *\n   *    // your code here inside main() function\n   *    ...\n   *  }\n   * `;\n   *\n   * @param size - the size of the data to guard against. can be a number or a string (WGSL `u32` expression).\n   */\n  guardAgainstOutOfBoundsWorkgroupSizes(size: unknown): string;\n\n  /**\n   * A helper function to generate the code snippet for declaring multiple inputs or outputs.\n   *\n   * @param variables - an array of IndicesHelper for the variables.\n   */\n  declareVariables(...variables: IndicesHelper[]): string;\n\n  /**\n   * Get additional implementation that needs to be added to the shader source.\n   */\n  readonly additionalImplementations: string;\n}\n\nclass ShaderHelperImpl implements ShaderHelper {\n  constructor(private normalizedDispatchGroup: [number, number, number]) {}\n\n  guardAgainstOutOfBoundsWorkgroupSizes(size: number|string): string {\n    // Guard against out-of-bounds work group sizes\n    const sizeInCode = typeof size === 'number' ? `${size}u` : size;\n    return `if (global_idx >= ${sizeInCode}) { return; }`;\n  }\n\n  mainStart(workgroupSize: number|[number, number, number] = WORKGROUP_SIZE) {\n    const workgroupSizeX = typeof workgroupSize === 'number' ? workgroupSize : workgroupSize[0];\n    const workgroupSizeY = typeof workgroupSize === 'number' ? 1 : workgroupSize[1];\n    const workgroupSizeZ = typeof workgroupSize === 'number' ? 1 : workgroupSize[2];\n\n    const is1DimensionDispatch = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1;\n    const paramList = is1DimensionDispatch ? `@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>` :\n                                             `@builtin(local_invocation_index) local_index : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>`;\n    const globalIdxDefinition = is1DimensionDispatch ?\n        'let global_idx = global_id.x;' :\n        `let global_idx = (workgroup_id.z * ${this.normalizedDispatchGroup[0] * this.normalizedDispatchGroup[1]}u +\n          workgroup_id.y * ${this.normalizedDispatchGroup[0]}u + workgroup_id.x) * ${\n            workgroupSizeX * workgroupSizeY * workgroupSizeZ}u + local_index;`;\n\n    return `@compute @workgroup_size(${workgroupSizeX}, ${workgroupSizeY}, ${workgroupSizeZ})\n  fn main(${paramList}) {\n    ${globalIdxDefinition}\n  `;\n  }\n\n  declareVariable(variable: IndicesHelper, bindingIndex: number): string {\n    this.indicesHelpers.push(variable);\n    const access = variable.usage === 'input' ? 'read' : 'read_write';\n    const storageType = variable.type.storage;\n    return `@group(0) @binding(${bindingIndex}) var<storage, ${access}> ${variable.name}: array<${storageType}>;`;\n  }\n\n  declareVariables(...variables: IndicesHelper[]): string {\n    let i = 0;\n    return variables.filter(v => ShapeUtil.size(v.shape) > 0).map(v => this.declareVariable(v, i++)).join('\\n');\n  }\n\n  private indicesHelpers: IndicesHelper[] = [];\n\n  get additionalImplementations(): string {\n    return this.indicesHelpers.map(i => i.impl()).join('\\n');\n  }\n}\n\nexport const createShaderHelper = (dispatchGroup: [number, number, number]): ShaderHelper =>\n    new ShaderHelperImpl(dispatchGroup);\n\n/**\n * This function comes from https://github.com/tensorflow/tfjs/blob/master/tfjs-core/src/ops/broadcast_util.ts#L18-L40\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport const getBroadcastDims = (inShape: readonly number[], outShape: readonly number[]): number[] => {\n  const inRank = inShape.length;\n  const dims: number[] = [];\n  for (let i = 0; i < inRank; i++) {\n    const dim = inRank - 1 - i;\n    const a = inShape[dim] || 1;\n    const b = outShape[outShape.length - 1 - i] || 1;\n    if (b > 1 && a === 1) {\n      dims.unshift(dim);\n    }\n  }\n  return dims;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].dataType;\n  const inputDimensionality = inputs[0].dims.length;\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.dataType !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n\nconst createConcatProgramMetadata = (inputCount: number, cacheHint: string) =>\n    ({name: 'Concat', inputTypes: Array(inputCount).fill(GpuDataType.default), cacheHint});\n\nconst calculateInputIndexImpl = (numberOfTensors: number): string => `\n  fn calculateInputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${numberOfTensors}u; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${numberOfTensors}u;\n  }`;\n\nconst assignOutputData = (inputs: readonly IndicesHelper[], output: IndicesHelper) => {\n  const numberOfTensors = inputs.length;\n\n  const codeLines: string[] = [];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    const returnSnippet = output.setByOffset('global_idx', inputs[i].getByIndices('indices'));\n    if (numberOfTensors === 1) {\n      codeLines.push(returnSnippet);\n    } else if (i === 0) {\n      codeLines.push(`if (inputIndex == ${i}u) { ${returnSnippet} }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(`else { ${returnSnippet} }`);\n    } else {\n      codeLines.push(`else if (inputIndex == ${i}) { ${returnSnippet} }`);\n    }\n  }\n  return codeLines.join('\\n');\n};\n\nconst createConcatProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      const adjustedAxis = (axis < 0) ? inputShape.length + axis : axis;\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === adjustedAxis) {\n            outputShape[adjustedAxis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const outputSize = ShapeUtil.size(outputShape);\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      const inputVars = new Array<IndicesHelper>(inputs.length);\n      const dataType = inputs[0].dataType;\n\n      let previousSum = 0;\n      for (let i = 0; i < inputs.length; ++i) {\n        previousSum += inputs[i].dims[adjustedAxis];\n        sizeInConcatAxis[i] = previousSum;\n\n        inputVars[i] = inputVariable(`input${i}`, dataType, inputs[i].dims);\n      }\n\n      const output = outputVariable('output', dataType, outputShape);\n\n      const indicesAxis = output.indicesGet('indices', adjustedAxis);\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  ${shaderHelper.declareVariables(...inputVars, output)}\n\n  const sizeInConcatAxis = array<u32, ${sizeInConcatAxis.length}>(${sizeInConcatAxis.map(i => `${i}u`).join(',')});\n  ${calculateInputIndexImpl(sizeInConcatAxis.length)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    var indices = ${output.offsetToIndices('global_idx')};\n\n    let inputIndex = calculateInputIndex(${indicesAxis});\n    if (inputIndex != 0u) {\n      ${indicesAxis} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${assignOutputData(inputVars, output)}\n  }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createConcatProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createConcatProgramInfo(metadata, inputs, attributes.axis)};\n    };\n\nexport const concat = (context: ComputeContext, attributes: ConcatAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createConcatProgramInfoLoader(context.inputs, attributes));\n};\n\nexport const parseConcatAttributes = (attributes: Record<string, unknown>): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: attributes.axis as number});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActicationSnippet} from './fuse-utils';\n\nconst createGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createGroupedConvProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += b[output_channel];' : '';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n\n      const {activationFunction, applyActivation} = getActicationSnippet(attributes);\n\n      const isChannelLast = attributes.format === 'NHWC';\n      const outputShape = calculateOutputShape(\n          xShape, wShape, attributes.dilations, attributes.pads, attributes.strides, isChannelLast);\n      const outputSize = ShapeUtil.size(outputShape);\n\n      const output = outputVariable('output', inputs[0].dataType, outputShape);\n      const x = inputVariable('x', inputs[0].dataType, xShape);\n      const w = inputVariable('w', inputs[1].dataType, wShape);\n      const inputVars = [x, w];\n      if (hasBias) {\n        inputVars.push(inputVariable('b', inputs[2].dataType, inputs[2].dims));\n      }\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const strides: vec2<u32> = vec2(${attributes.strides[0]}u, ${attributes.strides[1]}u);\n  const pads: vec2<u32> = vec2(${attributes.pads[0]}u, ${attributes.pads[1]}u);\n\n  ${shaderHelper.declareVariables(...inputVars, output)}\n\n  ${activationFunction}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let outputIndices = ${output.offsetToIndices('global_idx')};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${isChannelLast ? 3 : 1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${isChannelLast ? 1 : 2}], outputIndices[${\n          isChannelLast ? 2 : 3}]) * strides - pads;\n    let group_id: u32 = output_channel / ${outputChannelsPerGroup}u;\n\n    var value: ${output.type.value} = ${output.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < ${wShape[1]}u; wInChannel++) {\n      let input_channel = group_id * ${wShape[1]}u + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < ${wShape[2]}u; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]}u;\n\n        if (xHeight < 0u || xHeight >= ${xShape[isChannelLast ? 1 : 2]}u) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < ${wShape[3]}u; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]}u;\n          if (xWidth < 0u || xWidth >= ${xShape[isChannelLast ? 2 : 3]}u) {\n            continue;\n          }\n\n          let xVal = ${\n          isChannelLast ? x.get('batch', 'xHeight', 'xWidth', 'input_channel') :\n                          x.get('batch', 'input_channel', 'xHeight', 'xWidth')};\n          let wVal = ${w.get('output_channel', 'wInChannel', 'wHeight', 'wWidth')};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${output.setByOffset('global_idx', 'value')}\n  }`;\n      return {\n        ...metadata,\n        outputs: [{\n          dims: squeezeOutputShapeFunction ? squeezeOutputShapeFunction(outputShape) : outputShape,\n          dataType: inputs[0].dataType,\n          gpuDataType: GpuDataType.default\n        }],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\n/**\n * naive grouped conv implementation, supports 1d/2d conv\n * @param squeezeOutputShapeFunction - an optional function to squeeze the output shape, only used in conv1d\n */\nexport const createGroupedConvProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\n      const metadata = createGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createGroupedConvProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createConvTranspose2DProgramInfo} from './3rd-party/conv_backprop_webgpu';\nimport {ConvAttributes} from './conv';\nimport {parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     group: number, pads: number[], strides: readonly number[], isChannelLast: boolean, outputPadding: number[],\n     outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateOutputShape = outputShape.length === 0;\n      if (outputPadding.length === 0) {\n        for (let i = 0; i < spatialRank; ++i) {\n          outputPadding.push(0);\n        }\n      }\n      const batchSize = inputShape[0];\n      const outChannels = kernelShape[isChannelLast ? 3 : 1] * group;\n      for (let i = 0, j = inputShape.length - spatialRank - (isChannelLast ? 1 : 0); i < spatialRank; ++i, ++j) {\n        const inSize = inputShape[j];\n        const outSize = updateOutputShape ? inSize * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inSize, strides[i], pads[i], kernelShape[j], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateOutputShape) {\n          outputShape.push(\n              strides[i] * (inSize - 1) + outputPadding[i] + (kernelShape[j] - 1) * dilations[i] + 1 - pads[i] -\n              pads[i + spatialRank]);\n        }\n      }\n      outputShape.splice(0, 0, batchSize);\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\n\nconst getAdjustedConvTransposeAttributes =\n    <T extends ConvTransposeAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n      const kernelShape = attributes.kernelShape.slice();\n      // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n      if (attributes.kernelShape.length === 0 || attributes.kernelShape.reduce((a, b) => a * b, 0) === 0) {\n        kernelShape.length = 0;\n        for (let i = 2; i < inputs[1].dims.length; ++i) {\n          kernelShape.push(inputs[1].dims[i]);\n        }\n      }\n      const isChannelsLast = attributes.format === 'NHWC';\n      kernelShape.splice(0, 0, inputs[1].dims[0]);\n      kernelShape.splice(isChannelsLast ? 3 : 1, 0, inputs[1].dims[1]);\n\n      const pads = attributes.pads.slice();\n      const outputShape = attributes.outputShape.slice();\n      const outputPadding = attributes.outputPadding.slice();\n      const inputShape = inputs[0].dims;\n      let dilations = attributes.dilations.slice();\n      if (dilations.reduce((a, b) => a + b, 0) === 0) {\n        const spatialRank = inputs[0].dims.length - 2;\n        dilations = new Array(spatialRank).fill(1);\n      }\n      let strides = attributes.strides.slice();\n      if (strides.reduce((a, b) => a + b, 0) === 0) {\n        const spatialRank = inputs[0].dims.length - 2;\n        strides = new Array(spatialRank).fill(1);\n      }\n      // If outputShape is not specified in the attributes of this op, infer it from the parameters\n      // Similarly, automatically infer pads if not specified\n      calculateOutputShapeAndPads(\n          inputShape, kernelShape, dilations, attributes.autoPad, attributes.group, pads, strides, isChannelsLast,\n          outputPadding, outputShape);\n\n      // always return a new object so does not modify the original attributes\n      const newAttributes: T = Object.assign({}, attributes);\n      Object.assign(\n          newAttributes,\n          {kernelShape, pads, outputPadding, outputShape, dilations, strides, cacheKey: attributes.cacheKey});\n      return newAttributes;\n    };\n\nexport const parseConvTransposeAttributes = (attributes: Record<string, unknown>): ConvTransposeAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad =\n      ['NOTSET', 'VALID', 'SAME_UPPER',\n       'SAME_LOWER'][typeof attributes.autoPad == 'undefined' ? 0 : attributes.autoPad as number];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernelShape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.wIsConst as () => boolean)();\n  const outputPadding = attributes.outputPadding as [number, number, number, number];\n  const outputShape = attributes.outputShape as [number, number];\n  return createAttributeWithCacheKey({\n    autoPad,\n    format,\n    dilations,\n    group,\n    kernelShape,\n    outputPadding,\n    outputShape,\n    pads,\n    strides,\n    wIsConst,\n    ...activationAttributes\n  });\n};\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#ConvTranspose\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  const dilationsSet = attributes.dilations.reduce((a, b) => a + b, 0) > 0;\n  // wrong dilations dimension\n  if (dilationsSet && attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  const stridesSet = attributes.strides.reduce((a, b) => a + b, 0) > 0;\n  // Wrong strides dimension\n  if (stridesSet && attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  const padsSet = attributes.pads.reduce((a, b) => a + b, 0) > 0;\n  if (padsSet && attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank && attributes.outputPadding.length !== 0) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  const kernelShapeSet = attributes.kernelShape.reduce((a, b) => a + b, 0) > 0;\n  if (kernelShapeSet && attributes.kernelShape.length !== 0 &&\n      attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n\nconst createConvTranspose2DProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'ConvTranspose2D',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nconst createConvTranspose2DProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvTransposeAttributes,\n     squeezeOutputShapeFunction?: (shape: readonly number[]) => number[]): ProgramInfoLoader => {\n      const hasBias = inputs.length === 3;\n      const metadata = createConvTranspose2DProgramMetadata(hasBias, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createConvTranspose2DProgramInfo(inputs, metadata, attributes, squeezeOutputShapeFunction)\n      };\n    };\n\nconst convTranspose2d =\n    (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvTransposeAttributes): void => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n\n      context.compute(createConvTranspose2DProgramInfoLoader(inputs, adjustedAttributes));\n    };\nconst convTranspose1d = (context: ComputeContext, attributes: ConvTransposeAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n\n  const inputs = [\n    context.inputs[0].reshape(\n        isChannelLast ?\n            // [N, W, C] -> [N, H=1, W, C]\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\n            // [N, C, W] -> [N, C, H=1, W]\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n  ];\n  if (inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  let kernelShape = attributes.kernelShape;\n  if (kernelShape.length === 0 || kernelShape[0] === 0) {\n    kernelShape = [context.inputs[1].dims[2]];\n  }\n  let dilations = attributes.dilations;\n  if (dilations.length === 0 || dilations[0] === 0) {\n    dilations = [1];\n  }\n  let strides = attributes.strides;\n  if (strides.length === 0 || strides[0] === 0) {\n    strides = [1];\n  }\n  let pads = attributes.pads;\n  if (pads.length === 0) {\n    pads = [0, 0];\n  }\n  pads = [0, pads[0], 0, pads[1]];\n  strides = [1].concat(strides);\n  dilations = [1].concat(dilations);\n  kernelShape = [1].concat(kernelShape);\n  const adjustedAttributes =\n      getAdjustedConvTransposeAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\n  context.compute(createConvTranspose2DProgramInfoLoader(\n      inputs, adjustedAttributes,\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] :\n                                     [outputShape[0], outputShape[1], outputShape[3]]));\n};\n\nexport const convTranspose = (context: ComputeContext, attributes: ConvTransposeAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  if (context.inputs[0].dims.length === 3) {\n    convTranspose1d(context, attributes);\n  } else {\n    convTranspose2d(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {PoolConvUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext} from '../types';\n\nimport {createGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {createConv2DMatMulProgramInfoLoader} from './conv2d-mm';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createMatmulProgramInfoLoader} from './matmul';\nimport {createTransposeProgramInfo, TransposeAttributes, transposeProgramMetadata} from './transpose';\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[], isChannelLast: boolean): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(isChannelLast ? 1 : 2, isChannelLast ? 3 : 4);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      outputShape.splice(0, 0, batchSize);\n      outputShape.splice(isChannelLast ? 3 : 1, 0, outChannels);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly format: 'NHWC'|'NCHW';\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n  readonly wIsConst: boolean;\n}\n\n// for transposing weight tensor from [M, C/group, KH, KW] to [KH, KW, C/group, M]\nconst weightTransposeAttribute: TransposeAttributes = createAttributeWithCacheKey({perm: [2, 3, 1, 0]});\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 && inputs[0].dims.length !== 3) {\n    throw new Error('currently only support conv 1D and 2D');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error('filter does not have same dimension as input');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[attributes.format === 'NHWC' ? inputs[0].dims.length - 1 : 1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].dataType !== DataType.float) {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: readonly TensorView[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  for (let i = 2; i < inputs[1].dims.length; ++i) {\n    if (kernelShape[i - 2] === 0) {\n      kernelShape[i - 2] = inputs[1].dims[i];\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.format === 'NHWC',\n      attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes = (attributes: Record<string, unknown>): ConvAttributes => {\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const format = attributes.format as 'NHWC' | 'NCHW';\n  const autoPad = ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number];\n  const dilations = attributes.dilations as [number, number];\n  const group = attributes.group as number;\n  const kernelShape = attributes.kernel_shape as [number, number];\n  const pads = attributes.pads as [number, number, number, number];\n  const strides = attributes.strides as [number, number];\n  const wIsConst = (attributes.w_is_const as () => boolean)();\n\n  return createAttributeWithCacheKey(\n      {autoPad, format, dilations, group, kernelShape, pads, strides, wIsConst, ...activationAttributes});\n};\n\nconst conv2d = (context: ComputeContext, inputs: readonly TensorView[], attributes: ConvAttributes): void => {\n  const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n\n  // check attributes\n\n  // const hasPreluActivationWeights = false; /* TODO: add support for prelu activation weights */\n  if (attributes.group !== 1) {\n    context.compute(createGroupedConvProgramInfoLoader(inputs, adjustedAttributes));\n    return;\n  }\n\n  const isChannelsLast = attributes.format === 'NHWC';\n  const hasBias = inputs.length === 3;\n  const inputHeight = inputs[0].dims[isChannelsLast ? 1 : 2];\n  const inputWidth = inputs[0].dims[isChannelsLast ? 2 : 3];\n  const inputChannels = inputs[0].dims[isChannelsLast ? 3 : 1];\n  const weightHeight = inputs[1].dims[2];\n  const weightWidth = inputs[1].dims[3];\n\n  const outputShape = calculateOutputShape(\n      inputs[0].dims, inputs[1].dims, attributes.dilations, adjustedAttributes.pads, attributes.strides,\n      isChannelsLast);\n  const outHeight = outputShape[isChannelsLast ? 1 : 2];\n  const outWidth = outputShape[isChannelsLast ? 2 : 3];\n  const outChannels = outputShape[isChannelsLast ? 3 : 1];\n\n  const sameSize = isChannelsLast && weightHeight === inputHeight && weightWidth === inputWidth &&\n      attributes.pads[0] === 0 && attributes.pads[1] === 0;\n  if (sameSize ||\n      (weightHeight === 1 && weightWidth === 1 && attributes.dilations[0] === 1 && attributes.dilations[1] === 1 &&\n       attributes.strides[0] === 1 && attributes.strides[1] === 1 && attributes.pads[0] === 0 &&\n       attributes.pads[1] === 0)) {\n    // conv2dByMatMul\n    const batch = outputShape[0];\n    let xReshaped, wReshaped, matmulOutputShape;\n    const matmulInputs = [];\n    if (isChannelsLast) {\n      const transposedWeight = (context.kernelCustomData.wT as TensorView | undefined) ??\n          context.compute(\n              {\n                ...transposeProgramMetadata,\n                cacheHint: weightTransposeAttribute.cacheKey,\n                get: () => createTransposeProgramInfo(inputs[1], weightTransposeAttribute.perm)\n              },\n              {inputs: [1], outputs: [attributes.wIsConst ? -2 : -1]})[0];\n      if (attributes.wIsConst && !context.kernelCustomData.wT) {\n        context.kernelCustomData.wT = transposedWeight;\n      }\n      if (sameSize) {\n        const sharedDim = inputHeight * inputWidth * inputChannels;\n        xReshaped = inputs[0].reshape([1, batch, sharedDim]);\n        wReshaped = transposedWeight.reshape([1, sharedDim, outChannels]);\n        matmulOutputShape = [1, batch, outChannels];\n      } else {\n        xReshaped = inputs[0].reshape([batch, inputHeight * inputWidth, inputChannels]);\n        wReshaped = transposedWeight.reshape([1, inputChannels, outChannels]);\n        matmulOutputShape = [batch, outHeight * outWidth, outChannels];\n      }\n      matmulInputs.push(xReshaped);\n      matmulInputs.push(wReshaped);\n    } else {\n      xReshaped = inputs[0].reshape([batch, inputChannels, inputHeight * inputWidth]);\n      wReshaped = inputs[1].reshape([1, outChannels, inputChannels]);\n      matmulOutputShape = [batch, outChannels, outHeight * outWidth];\n      matmulInputs.push(wReshaped);\n      matmulInputs.push(xReshaped);\n    }\n    if (hasBias) {\n      matmulInputs.push(inputs[2]);\n    }\n    context.compute(\n        createMatmulProgramInfoLoader(matmulInputs, adjustedAttributes, outputShape, matmulOutputShape, isChannelsLast),\n        {inputs: matmulInputs});\n    return;\n  }\n\n  // TODO: implement conv2dWithIm2Col()\n\n  const sequentialAccessByThreads = /* backend.adapterInfo.isIntel() */ true;\n\n  // STEP.1: transpose weight\n  const transposedWeight = (context.kernelCustomData.wT as TensorView | undefined) ??\n      context.compute(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: weightTransposeAttribute.cacheKey,\n            get: () => createTransposeProgramInfo(inputs[1], weightTransposeAttribute.perm)\n          },\n          {inputs: [1], outputs: [attributes.wIsConst ? -2 : -1]})[0];\n  if (attributes.wIsConst && !context.kernelCustomData.wT) {\n    context.kernelCustomData.wT = transposedWeight;\n  }\n\n  // STEP.2: prepare reshaped inputs\n  const convInputs = [inputs[0], transposedWeight];\n  if (hasBias) {\n    convInputs.push(inputs[2]);\n  }\n\n  // STEP.3: compute matmul\n  const dimAOuter = isChannelsLast ? outHeight * outWidth : outChannels;\n  const dimBOuter = isChannelsLast ? outChannels : outHeight * outWidth;\n  const dimInner = weightHeight * weightWidth * inputChannels;\n  context.compute(\n      createConv2DMatMulProgramInfoLoader(\n          convInputs, adjustedAttributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n          sequentialAccessByThreads),\n      {inputs: convInputs});\n};\n\nconst conv1d = (context: ComputeContext, attributes: ConvAttributes): void => {\n  // extend the input to 2D by adding H dimension\n  const isChannelLast = attributes.format === 'NHWC';\n  const inputs = [\n    context.inputs[0].reshape(\n        isChannelLast ?\n            // [N, W, C] -> [N, H=1, W, C]\n            [context.inputs[0].dims[0], 1, context.inputs[0].dims[1], context.inputs[0].dims[2]] :\n            // [N, C, W] -> [N, C, H=1, W]\n            [context.inputs[0].dims[0], context.inputs[0].dims[1], 1, context.inputs[0].dims[2]]),\n    //[FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kW] -> [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, kH=1, kW]\n    context.inputs[1].reshape([context.inputs[1].dims[0], context.inputs[1].dims[1], 1, context.inputs[1].dims[2]])\n  ];\n  if (context.inputs.length === 3) {\n    inputs.push(context.inputs[2]);\n  }\n  const pads = [0, attributes.pads[0], 0, attributes.pads[1]];\n  const strides = [1].concat(attributes.strides);\n  const dilations = [1].concat(attributes.dilations);\n  const kernelShape = [1].concat(attributes.kernelShape);\n  const adjustedAttributes = getAdjustedConvAttributes({...attributes, pads, strides, dilations, kernelShape}, inputs);\n  context.compute(createGroupedConvProgramInfoLoader(\n      inputs, adjustedAttributes,\n      outputShape => isChannelLast ? [outputShape[0], outputShape[2], outputShape[3]] : []));\n};\n\nexport const conv = (context: ComputeContext, attributes: ConvAttributes): void => {\n  validateInputs(context.inputs, attributes);  // currently will fail if not conv1D/2D\n  if (context.inputs[0].dims.length === 3) {\n    conv1d(context, attributes);\n  } else {\n    conv2d(context, context.inputs, attributes);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {GpuDataType, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {createConv2DMatMulProgramInfo} from './3rd-party/conv2d_mm_webgpu';\nimport {ConvAttributes} from './conv';\n\n\nconst createConv2DMatMulProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'Conv2DMatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nexport const createConv2DMatMulProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: ConvAttributes, outputShape: readonly number[], dimAOuter: number,\n     dimBOuter: number, dimInner: number, hasBias: boolean, sequentialAccessByThreads: boolean): ProgramInfoLoader => {\n      const metadata = createConv2DMatMulProgramMetadata(hasBias, attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createConv2DMatMulProgramInfo(\n            inputs, metadata, attributes, outputShape, dimAOuter, dimBOuter, dimInner, hasBias,\n            sequentialAccessByThreads)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport interface EinsumAttributes extends AttributeWithCacheKey {\n  readonly equation: string;\n}\n// The equation attribute value is a string which consists of left hand side (LHS) and optionally right hand side (RHS)\n// separated by '->'. Ex. \"ij,jk -> ik\" expresses matrix multiplication\n//     \"ij->ji\" expresses matrix transpose\n//      \"ii->i\" diagonal elements of a square matrix\n// LHS consists of a sequence of terms separated by commas. Each term corresponds to an input variable.\n// Each symbol corresponds to a dimension in the input variable. The symbol can be either a letter, 'a' to 'z' or 'A' to\n// 'Z' or '...' to represent arbitrary dimensions.\n\nconst symbolPattern =\n    '[a-zA-Z]|\\\\.\\\\.\\\\.';  // The pattern each symbol in each term in the symbolic equation should match\nconst termPattern = '(' + symbolPattern + ')+';   // The pattern each term in the symbolic equation should match\nconst termPatternOnly = '^' + termPattern + '$';  // The patterns only matchs a term begin to end.\nconst lhsPattern = '(' + termPattern + ',)*' + termPattern;  // The pattern the LHS should match\nconst lhsPatternOnly = '^' + lhsPattern + '$';               // The patterns only matchs a LHS begin to end.\n\ninterface SymbolInfo {\n  count: number;           // Symbol corresponding to a dimmension of an input\n  inputIndices: number[];  // Number of input variables the symbol corresponds to\n  dimValue: number;        // Number of dimensions the symbol corresponds to\n}\n\nclass EinsumTerm {\n  constructor(inputIndex = -1) {\n    this.symbolToIndices = new Map<string, number[]>();\n    this.inputIndex = inputIndex;\n  }\n\n  // Add a symbol to the term\n  addSymbol(symbol: string, index: number) {\n    let value = this.symbolToIndices.get(symbol);\n    if (value === undefined) {\n      value = [index];\n    } else {\n      value.push(index);\n    }\n    this.symbolToIndices.set(symbol, value);\n  }\n\n  symbolToIndices: Map<string, number[]>;  // Map from symbol to dimensions of the input corresponding to the term\n  inputIndex: number;                      // -1 for output and 0, 1, 2, ... for inputs\n}\n\nclass EinsumEquation {\n  constructor(inputs: readonly TensorView[], equation: string) {\n    this.hasEllipsis = false;\n    this.symbolToInfo = new Map<string, SymbolInfo>();\n    this.lhs = new Array<EinsumTerm>();\n    this.outputDims = [];\n    // As rhs needs to be updated allow using let instead of const for both lhs and rhs.\n    // eslint-disable-next-line prefer-const\n    let [lhs, rhs] = equation.includes('->') ? equation.split('->', 2) : [equation, ''];\n    if (!lhs.match(RegExp(lhsPatternOnly))) {\n      throw new Error('Invalid LHS term');\n    }\n    const inputTerms = lhs.split(',');\n    inputTerms.forEach((inputTerm, index) => {\n      const dims = inputs[index].dims.slice();\n      if (!inputTerm.match(RegExp(termPatternOnly))) {\n        throw new Error('Invalid LHS term');\n      }\n      const einsumTerm = this.processTerm(inputTerm, true, dims, index);\n      this.lhs.push(einsumTerm);\n    });\n\n    // Initialize the RHS if not specified\n    if (rhs === '') {\n      // Construct RHS from LHS terms/symbols\n      rhs += [...this.symbolToInfo.entries()]\n                 .filter(([sym, info]) => (info.count === 1 || sym === '...'))\n                 .map(([sym]) => sym)\n                 .join('');\n    } else {\n      if (!rhs.match(RegExp(termPattern))) {\n        throw new Error('Invalid RHS');\n      }\n    }\n\n    // Compute output dims\n    const rhsSymbols = rhs.match(RegExp(symbolPattern, 'g'));\n    rhsSymbols?.forEach((symbol) => {\n      if (symbol === '...') {\n        this.outputDims = this.outputDims.concat(this.ellipsisDims);\n      } else {\n        const info = this.symbolToInfo.get(symbol);\n        if (info === undefined) {\n          throw new Error('Invalid RHS symbol');\n        }\n        this.outputDims.push(info.dimValue);\n      }\n    });\n    this.rhs = this.processTerm(rhs, true, this.outputDims);\n  }  // End of EinsumEqation constructor\n\n  // Add a symbol to the equation\n  addSymbol(symbol: string, dimValue: number, inputIndex: number) {\n    let info = this.symbolToInfo.get(symbol);\n    if (info !== undefined) {\n      if (info.dimValue !== dimValue && info.count !== 1) {\n        throw new Error('Dimension mismatch');\n      } else {\n        info.count++;\n        info.inputIndices.push(inputIndex);\n      }\n    } else {\n      info = {count: 1, dimValue, inputIndices: [inputIndex]};\n    }\n    this.symbolToInfo.set(symbol, info);\n  }\n\n  // Process one input/output term\n  processTerm(term: string, isInput: boolean, dims: readonly number[], index = -1): EinsumTerm {\n    const rank = dims.length;\n    let ellipsis = false;\n    let ellipsisDims = [];\n    let nextDim = 0;\n    // For output empty string is allowed because the output may be reduced to a scalar value\n    if (!term.match(RegExp(termPatternOnly)) && (!isInput && term !== '')) {\n      throw new Error('Invalid LHS term');\n    }\n    const indexSymbols = term.match(RegExp(symbolPattern, 'g'));\n    const einsumTerm = new EinsumTerm(index);\n    // symbol can be either a lettre, 'a' to 'z' or 'A' to 'Z', or '...'\n    indexSymbols?.forEach((symbol: string, i: number) => {\n      if (symbol === '...') {\n        if (ellipsis) {\n          throw new Error('Only one ellipsis is allowed per input term');\n        }\n        ellipsis = true;\n        const ellipsisDimLength = rank - indexSymbols.length + 1;\n        if (ellipsisDimLength < 0) {\n          throw new Error('Ellipsis out of bounds');\n        }\n        ellipsisDims = dims.slice(nextDim, nextDim + ellipsisDimLength);\n        if (this.hasEllipsis) {\n          if (this.ellipsisDims.length !== ellipsisDims.length ||\n              this.ellipsisDims.toString() !== ellipsisDims.toString()) {\n            throw new Error('Ellipsis dimensions mismatch');\n          }\n        } else if (isInput) {\n          this.hasEllipsis = true;\n          this.ellipsisDims = ellipsisDims;\n        } else {\n          throw new Error('Ellipsis must be specified in the LHS');\n        }\n        // Add '0', '1', '2', '3', '4', etc to represent ellipsis dimensions to avoid special handling\n        for (let j = 0; j < ellipsisDims.length; j++) {\n          const symbol = String.fromCharCode('0'.charCodeAt(0) + i);\n          einsumTerm.addSymbol(symbol, i + j);\n          this.addSymbol(symbol, dims[nextDim++], index);\n        }\n      } else {\n        einsumTerm.addSymbol(symbol, i);\n        this.addSymbol(symbol, dims[nextDim++], index);\n      }\n    });\n    return einsumTerm;\n  }\n\n  symbolToInfo: Map<string, SymbolInfo>;  // All symbols in the equation\n  hasEllipsis: boolean;                   // The equation has ellipsis or not\n  ellipsisDims: number[];                 // The dimensions of the equation ellipsis corresponds to.\n  lhs: EinsumTerm[];                      // Terms on the left-hand side of the equation\n  rhs: EinsumTerm;                        // Term on the right-hand side of the equation\n  outputDims: number[];                   // Output dimensions of the equation\n}  // End of class EinsumEquation\n\n\nconst createEinsumProgramMetadata = (inputCount: number, cacheHint: string): ProgramMetadata =>\n    ({name: 'Einsum', inputTypes: Array(inputCount).fill(GpuDataType.default), cacheHint});\n\nconst createEinsumProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], einsumEquation: EinsumEquation): ProgramInfo => {\n      const dataType = inputs[0].dataType;\n      const inputVars = new Array<IndicesHelper>(inputs.length);\n      for (let i = 0; i < inputs.length; ++i) {\n        inputVars[i] = inputVariable(`input${i}`, dataType, inputs[i].dims);\n      }\n      const outputShape = einsumEquation.outputDims;\n      const outputSize = ShapeUtil.size(outputShape);\n      const output = outputVariable('output', dataType, outputShape);\n      const idxCopy: string[] = [];\n      const rhsSymbols = Array.from(einsumEquation.rhs.symbolToIndices.keys());\n      const initProd = 'var prod = 1.0;';\n      const initSum = 'var sum = 0.0;';\n      const updateSum = 'sum += prod;';\n      const reduceOpsSetIndices: string[] = [];\n      const reduceOpsLoopHeaders: string[] = [];\n      const reduceOpsLoopFooters: string[] = [];\n      const reduceOpCompute: string[] = [];\n      const isReduceOpsWithoutLoop = einsumEquation.symbolToInfo.size === rhsSymbols.length;\n      einsumEquation.symbolToInfo.forEach((info, symbol) => {\n        if (rhsSymbols.includes(symbol)) {\n          const outputIndex = rhsSymbols.indexOf(symbol);\n          einsumEquation.lhs.forEach((term, i) => {\n            if (info.inputIndices.includes(i)) {\n              const indices = term.symbolToIndices.get(symbol);\n              if (indices === undefined) {\n                throw new Error('Invalid symbol error');\n              }\n              indices.forEach((index) => {\n                idxCopy.push(`${\n                    inputVars[i].indicesSet(\n                        `input${i}Indices`, index, output.indicesGet('outputIndices', outputIndex))}`);\n              });\n            }\n          });\n        } else {\n          einsumEquation.lhs.forEach((term, i) => {\n            const info = einsumEquation.symbolToInfo.get(symbol);\n            if (info === undefined) {\n              throw new Error('Invalid symbol error');\n            }\n            if (info.inputIndices.includes(i)) {\n              const indices = term.symbolToIndices.get(symbol);\n              if (indices === undefined) {\n                throw new Error('Invalid symbol error');\n              }\n              indices.forEach((index) => {\n                reduceOpsSetIndices.push(`${inputVars[i].indicesSet(`input${i}Indices`, index, `${symbol}`)}`);\n              });\n              reduceOpCompute.push(`prod *= ${inputVars[i].getByIndices(`input${i}Indices`)};`);\n            }\n          });\n          reduceOpsLoopHeaders.push(`for(var ${symbol}: u32 = 0; ${symbol} < ${\n              einsumEquation.symbolToInfo.get(symbol)?.dimValue}; ${symbol}++) {`);\n          reduceOpsLoopFooters.push('}');\n        }\n      });\n      const reduceOps = isReduceOpsWithoutLoop ?\n          [\n            ...idxCopy,\n            `let sum = ${inputVars.map((inputVar, i) => inputVar.getByIndices(`input${i}Indices`)).join(' * ')};`\n          ] :\n          [\n            ...idxCopy,\n            initSum,\n            ...reduceOpsLoopHeaders,\n            ...reduceOpsSetIndices,\n            initProd,\n            ...reduceOpCompute,\n            updateSum,\n            ...reduceOpsLoopFooters,\n          ];\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n      ${shaderHelper.declareVariables(...inputVars, output)}\n\n      ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n        var outputIndices = ${output.offsetToIndices('global_idx')};\n        ${inputVars.map((inputVar, i) => `var input${i}Indices: ${inputVars[i].type.indices};`).join('\\n')}\n        ${reduceOps.join('\\n')};\n        ${output.setByOffset('global_idx', 'sum')};\n      }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createEinsumProgramInfoLoader =\n    (inputs: readonly TensorView[], einsumEquation: EinsumEquation, attributes: EinsumAttributes):\n        ProgramInfoLoader => {\n          const metadata = createEinsumProgramMetadata(inputs.length, attributes.cacheKey);\n          return {...metadata, get: () => createEinsumProgramInfo(metadata, inputs, einsumEquation)};\n        };\n\nexport const einsum = (context: ComputeContext, attributes: EinsumAttributes): void => {\n  const einsumEquation = new EinsumEquation(context.inputs, attributes.equation);\n  context.compute(createEinsumProgramInfoLoader(context.inputs, einsumEquation, attributes));\n};\n\nexport const parseEinsumAttributes = (attributes: Record<string, unknown>): EinsumAttributes => {\n  const equation = (attributes.equation as string).replace(/\\s+/g, '');\n  return createAttributeWithCacheKey({equation});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport const expandProgramMetadata = {\n  name: 'Expand',\n  inputTypes: [GpuDataType.default]\n};\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Expand requires 2 input.');\n  }\n  const inputShape = inputs[0].dims;\n  const shape = Array.from(inputs[1].getBigInt64Array(), Number);\n\n  let shapeIndex = shape.length < inputShape.length ? 0 : shape.length - inputShape.length;\n  let inputShapeIndex = inputShape.length < shape.length ? 0 : inputShape.length - shape.length;\n  for (; shapeIndex < shape.length && inputShapeIndex < inputShape.length; ++shapeIndex, ++inputShapeIndex) {\n    if (shape[shapeIndex] !== inputShape[inputShapeIndex] && shape[shapeIndex] !== 1 &&\n        inputShape[inputShapeIndex] !== 1) {\n      throw new Error('Expand requires shape to be broadcastable to input');\n    }\n  }\n};\n\nconst getAdjustedShape = (shape1: readonly number[], shape2: readonly number[]): number[] => {\n  const diff = shape1.length - shape2.length;\n  const shape: number[] = [];\n  for (let i = 0; i < diff; ++i) {\n    shape.push(shape1[i]);\n  }\n  for (let i = 0; i < shape2.length; ++i) {\n    shape.push(shape2[i] === 1 ? shape1[i + diff] : shape2[i]);\n  }\n  return shape;\n};\n\nconst calculateOutputShape = (inputShape: readonly number[], shape: readonly number[]): number[] =>\n    (inputShape.length > shape.length) ? getAdjustedShape(inputShape, shape) : getAdjustedShape(shape, inputShape);\n\n\nconst createExpandProgramInfo = (metadata: ProgramMetadata, inputs: readonly TensorView[]): ProgramInfo => {\n  const inputShape = inputs[0].dims;\n  const shape = Array.from(inputs[1].getBigInt64Array(), Number);\n  const outputShape: number[] = calculateOutputShape(inputShape, shape);\n  const outputSize = ShapeUtil.size(outputShape);\n\n  const dataType = inputs[0].dataType;\n  const input = inputVariable('input', dataType, inputShape);\n  const output = outputVariable('output', dataType, outputShape);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const inputShape = ${input.indices(...inputShape)};\n  ${shaderHelper.declareVariables(input, output)}\n  ${shaderHelper.mainStart()}\n  ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n    let outputIndices = ${output.offsetToIndices('global_idx')};\n    var inputIndices: ${input.type.indices};\n    for (var i = 0; i < ${inputShape.length}; i++) {\n      if (${input.indicesGet('inputShape', 'i')} == 1) {\n        ${input.indicesSet('inputIndices', 'i', 0)}\n      } else {\n        ${\n      input.indicesSet(\n          'inputIndices', 'i', output.indicesGet('outputIndices', `i + ${outputShape.length - inputShape.length}`))}\n      }\n    }\n    ${output.setByOffset('global_idx', input.getByIndices('inputIndices'))}\n  }`;\n  return {\n    ...metadata,\n    getShaderSource,\n    outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const expand = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  const outputShape = Array.from(context.inputs[1].getBigInt64Array(), Number);\n  const cacheHint = outputShape.toString();\n  context.compute(\n      {...expandProgramMetadata, cacheHint, get: () => createExpandProgramInfo(expandProgramMetadata, context.inputs)},\n      {inputs: [0]});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {MAX_CLIP, MIN_CLIP} from '../../util';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport const getActicationSnippet =\n    (attributes: InternalActivationAttributes): {activationFunction: string; applyActivation: string} => {\n      switch (attributes.activation) {\n        case 'Relu':\n          return {activationFunction: '', applyActivation: 'value = max(value, 0.0);'};\n        case 'Sigmoid':\n          return {activationFunction: '', applyActivation: 'value = (1.0 / (1.0 + exp(-value)));'};\n        case 'Clip':\n          return {\n            activationFunction:\n                `const clip_min_=f32(${attributes.clipMin!});const clip_max_=f32(${attributes.clipMax!});`,\n            applyActivation: 'value = clamp(value, clip_min_, clip_max_);'\n          };\n          // TODO: adding other activations that can be fused.\n        default:\n          return {activationFunction: '', applyActivation: ''};\n      }\n    };\n\nexport const parseInternalActivationAttributes =\n    (attributes: Record<string, unknown>|undefined): InternalActivationAttributes => {\n      const activation = attributes?.activation as string || '';\n\n      if (activation === 'Clip') {\n        const [clipMin, clipMax] = attributes?.activation_params as [number, number] || [MIN_CLIP, MAX_CLIP];\n        return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n      }\n      return {activation, activationCacheKey: activation};\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport interface GatherElementsAttributes extends AttributeWithCacheKey {\n  axis: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('GatherElements requires 2 inputs.');\n  }\n\n  if (inputs[0].dims.length < 1) {\n    throw new Error('GatherElements requires that the data input be rank >= 1.');\n  }\n\n  if (inputs[0].dims.length !== inputs[1].dims.length) {\n    throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`);\n  }\n};\n\nconst createGatherElementsProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GatherElementsAttributes): ProgramInfo => {\n      const inputShape = inputs[0].dims;\n      const inputOutputDataType = inputs[0].dataType;\n      const inputRank = inputShape.length;\n      const inputStrides = ShapeUtil.computeStrides(inputShape);\n      const inputSize = ShapeUtil.size(inputShape);\n\n      const indicesShape = inputs[1].dims;\n      const indicesDataType = inputs[1].dataType;\n      const indicesSize = ShapeUtil.size(indicesShape);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputRank);\n      const axisDimLimit = inputShape[axis];\n\n      const outputShape = indicesShape.slice(0);\n      const outputSize = ShapeUtil.size(outputShape);\n\n      const input = inputVariable('input', inputOutputDataType, inputShape);\n      const indices = inputVariable('indices', indicesDataType, [indicesSize]);\n      const output = outputVariable('output', inputOutputDataType, outputShape);\n\n\n      // int64 indices would be treated as little endian i32 with assumption they fall in i32 limits\n      // That assumption is safe as it's not possible to allocate >2gb buffer for input tensor\n      // Input data will be treated as u32 or two u32 for 8-byte tensors\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n      const inputStrides = array<u32, ${inputStrides.length}>(${inputStrides.map(i => `${i}u`).join(',')});\n      ${shaderHelper.declareVariables(input, indices, output)}\n      ${shaderHelper.mainStart()}\n      ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n      let outputIndices = ${output.offsetToIndices('global_idx')};\n\n      var idx = ${indices.getByOffset('global_idx')};\n      if (idx < 0) {\n        idx = idx + ${axisDimLimit};\n      }\n\n      var srcOffset = u32(0);\n\n      for (var i = 0; i < ${inputShape.length}; i++) {\n        if (i == ${axis}) {\n          srcOffset +=  u32(idx) * inputStrides[i];\n        } else {\n          srcOffset += ${output.indicesGet('outputIndices', 'i')} * inputStrides[i];\n        }\n      }\n\n      // Should never hit this with valid values in indices\n      // This is a guard against malicious data in the indices input\n      if (srcOffset < 0 || srcOffset >= ${inputSize}) {\n        return;\n      }\n\n      output[global_idx] = input[srcOffset];\n  }`;\n\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nexport const parseGatherElementsAttributes = (attributes: Record<string, unknown>): GatherElementsAttributes =>\n    createAttributeWithCacheKey({axis: attributes.axis as number});\n\nexport const gatherElements = (context: ComputeContext, attributes: GatherElementsAttributes): void => {\n  const inputs = context.inputs;\n  validateInputs(inputs);\n\n  const metadata = {\n    name: 'GatherElements',\n    inputTypes: [GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey,\n  };\n\n  context.compute(createGatherElementsProgramInfo(metadata, context.inputs, attributes));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport interface GatherAttributes extends AttributeWithCacheKey {\n  axis: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n};\n\nconst createGatherProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GatherAttributes): ProgramInfo => {\n      const inputShape = inputs[0].dims;\n      const indicesShape = inputs[1].dims;\n\n      const inputRank = inputShape.length;\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputRank);\n\n      const outputShape = inputShape.slice(0);\n      outputShape.splice(axis, 1, ...indicesShape);\n\n      const axisDimLimit = inputShape[axis];\n      const outputSize = ShapeUtil.size(outputShape);\n\n      const data = inputVariable('data', inputs[0].dataType, inputs[0].dims);\n      const indices = inputVariable('inputIndices', inputs[1].dataType, inputs[1].dims);\n      const output = outputVariable('output', inputs[0].dataType, outputShape);\n      const calcDataIndices = (): string => {\n        const indicesRank = indicesShape.length;\n        let calcStr = `var indicesIndices  = ${indices.type.indices}(0);`;\n        for (let i = 0; i < indicesRank; i++) {\n          calcStr += `${indicesRank > 1 ? `indicesIndices[${i}]` : 'indicesIndices'} = ${\n              outputShape.length > 1 ? `outputIndices[${axis + i}]` : 'outputIndices'};`;\n        }\n        calcStr += `\n        var idx = ${indices.getByIndices('indicesIndices')};\n        if (idx < 0) {\n          idx = idx + ${axisDimLimit};\n        }\n        var dataIndices = ${data.type.indices}(0);\n      `;\n        for (let i = 0, j = 0; i < inputRank; i++) {\n          if (i === axis) {\n            calcStr += `${inputRank > 1 ? `dataIndices[${i}]` : 'dataIndices'} = u32(idx);`;\n            j += indicesRank;\n          } else {\n            calcStr += `${inputRank > 1 ? `dataIndices[${i}]` : 'dataIndices'} = ${\n                outputShape.length > 1 ? `outputIndices[${j}]` : 'outputIndices'};`;\n            j++;\n          }\n        }\n        return calcStr;\n      };\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n      ${shaderHelper.declareVariables(data, indices, output)}\n      ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n        let outputIndices = ${output.offsetToIndices('global_idx')};\n        ${calcDataIndices()};\n        let value = ${data.getByIndices('dataIndices')};\n        ${output.setByOffset('global_idx', 'value')};\n      }`;\n      return {\n        ...metadata,\n        outputs: [\n          {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\n        ],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nexport const parseGatherAttributes = (attributes: Record<string, unknown>): GatherAttributes =>\n    createAttributeWithCacheKey({axis: attributes.axis as number});\n\nexport const gather = (context: ComputeContext, attributes: GatherAttributes): void => {\n  const inputs = context.inputs;\n  validateInputs(inputs);\n\n  const metadata = {\n    name: 'Gather',\n    inputTypes: [GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey,\n  };\n\n  context.compute(createGatherProgramInfo(metadata, context.inputs, attributes));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {GemmUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper, tensorTypeToWsglStorageType} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (inputs.length < 2 || inputs.length > 3) {\n    throw new Error('Invaid input number.');\n  }\n\n  // 'C' can be of dimensionality 0, 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length > 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].dataType !== inputs[1].dataType) ||\n      (inputs.length === 3 && inputs[0].dataType !== inputs[2].dataType)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n}\n\nconst offsetC = (m: number, n: number, dims: readonly number[]): string => {\n  if (dims.length === 0) {\n    return '0u';\n  }\n\n  const broadcastM = (dims.length === 1 && m !== 1) || (dims.length === 2 && dims[0] !== m);\n  const broadcastN = dims[dims.length - 1] !== n;\n\n  let offset = '0u';\n  if (!broadcastM) {\n    offset += `+ m * ${dims[dims.length - 1]}u`;\n  }\n  if (!broadcastN) {\n    offset += '+n';\n  }\n\n  return offset;\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N, K] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      const outputSize = ShapeUtil.size(outputShape);\n      let line = '';\n      if (attributes.transA && attributes.transB) {\n        line = 'value += a[k * M + m] * b[n * K + k];';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += a[k * M + m] * b[k * N + n];';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += a[m * K + k] * b[n * K + k];';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += a[m * K + k] * b[k * N + n];';\n      }\n\n      const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n      const calculateAlpha = attributes.alpha === 1 ? '' : 'value *= alpha;';\n      const calculateC = inputs.length === 3 ? `value += beta * c[${offsetC(M, N, inputs[2].dims)}];` : '';\n      const inputStorageBuffersDeclarations = [\n        `@group(0) @binding(0) var<storage, read> a : array<${dataType}>;`,\n        `@group(0) @binding(1) var<storage, read> b : array<${dataType}>;`\n      ];\n      if (inputs.length === 3) {\n        inputStorageBuffersDeclarations.push(`@group(0) @binding(2) var<storage, read> c : array<${dataType}>;`);\n      }\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const M: u32 = ${M}u;\n  const N: u32 = ${N}u;\n  const K: u32 = ${K}u;\n  const alpha = ${dataType}(${attributes.alpha});\n  const beta = ${dataType}(${attributes.beta});\n\n  ${inputStorageBuffersDeclarations.join('\\n')}\n  @group(0) @binding(${inputs.length}) var<storage, read_write> output : array<${dataType}>;\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let m = global_id.x / N;\n    let n = global_id.x % N;\n\n    var value = ${dataType}(0);\n    for (var k: u32 = 0u; k<${K}u; k++) {\n      ${line}\n    }\n\n    ${calculateAlpha}\n    ${calculateC}\n    output[global_id.x] = value;\n\n  }`;\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createGemmProgramInfoLoader = (inputs: readonly TensorView[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputTypes: inputs.length === 3 ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                                      [GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nexport const gemm = (context: ComputeContext, attributes: GemmAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createGemmProgramInfoLoader(context.inputs, attributes));\n};\n\nexport const parseGemmAttributes = (attributes: Record<string, unknown>): GemmAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<GemmAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper, tensorTypeToWsglStorageType} from './common';\n\nexport interface InstanceNormAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  format: 'NHWC'|'NCHW';\n}\n\nconst createInstanceNormProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: InstanceNormAttributes): ProgramInfo => {\n      const xShape = inputs[0].dims;\n\n      const outputShape = xShape;\n      const axis = 2;\n      const normCount = ShapeUtil.sizeToDimension(xShape, axis);\n      const normSize = ShapeUtil.sizeFromDimension(xShape, axis);\n      const C = xShape[1];\n      const x = inputVariable('x', inputs[0].dataType, [xShape[0], xShape[1], normSize]);\n      const scale = inputVariable('scale', inputs[1].dataType, inputs[1].dims);\n      const bias = inputVariable('bias', inputs[2].dataType, inputs[2].dims);\n      const output = outputVariable('output', inputs[0].dataType, [xShape[0], xShape[1], normSize]);\n      const variables = [x, scale, bias, output];\n      const dataType = x.type.value;\n      const workgroupSize = 64;\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n\n  const C: u32 = ${C};\n  const normSize: u32 = ${normSize};\n  const epsilon: f32 = ${attributes.epsilon};\n  var<workgroup> meanShared : ${dataType};\n  var<workgroup> squaredNormShared : ${dataType};\n  var<workgroup> workgroupShared : array<${dataType}, ${workgroupSize}>;\n  const workgroupSize = ${workgroupSize}u;\n  ${shaderHelper.declareVariables(...variables)}\n  ${shaderHelper.mainStart(workgroupSize)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / C;\n    let channel = norm % C;\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial: ${dataType} = 0;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      initial = initial + ${x.get('batch', 'channel', 'h')};\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = workgroupShared[0] / ${dataType}(normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = 0;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      let deviation =  ${x.get('batch', 'channel', 'h')} - meanShared;\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = workgroupShared[0];\n    }\n    workgroupBarrier();\n\n    let invStdDev = 1 / sqrt(squaredNormShared / ${dataType}(normSize) + epsilon);\n    let channelScale = invStdDev * ${scale.getByOffset('channel')};\n    let channelShift = ${bias.getByOffset('channel')} - meanShared * channelScale;\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\n      let value = ${x.get('batch', 'channel', 'h')} * channelScale + channelShift;\n      ${output.set('batch', 'channel', 'h', 'value')};\n    }\n  }`;\n      return {\n        ...metadata,\n        outputs: [\n          {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\n        ],\n        getShaderSource,\n        dispatchGroup: () => ({x: normCount})\n      };\n    };\n\nconst createInstanceNormNHWCProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: InstanceNormAttributes): ProgramInfo => {\n      const xShape = inputs[0].dims;\n      const outputShape = xShape;\n      const outputSize = ShapeUtil.size(outputShape);\n      const N = xShape[0];\n      const C = xShape[xShape.length - 1];\n      const H = ShapeUtil.sizeFromDimension(xShape, 1) / C;\n\n      const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n\n      const normCount = C * N;\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const N: u32 = ${N};\n  const H: u32 = ${H};\n  const C: u32 = ${C};\n  const normSizeTyped: ${dataType} = ${H};\n  const imageSize: u32 = ${H * C};\n  const epsilon: f32 = ${attributes.epsilon};\n\n  @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${dataType}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${dataType}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${dataType}>;\n\n  ${shaderHelper.mainStart()}\n    let currentImageNumber = global_idx / C;\n    let currentChannelNumber = global_idx % C;\n\n    // offset is channel num * N\n    let offset = currentImageNumber * imageSize;\n    if (offset >= ${outputSize}) { return; }\n    var mean: ${dataType} = 0;\n\n    for (var i: u32 = 0u; i < H; i++) {\n        mean = mean + x[offset + i * C + currentChannelNumber];\n    }\n    mean = mean / normSizeTyped;\n\n    var squaredNorm: ${dataType} = 0;\n    for (var i: u32 = 0u; i < H; i++) {\n        let deviation: f32 = x[offset + i * C + currentChannelNumber] - mean;\n        squaredNorm = squaredNorm + deviation * deviation;\n    }\n    let invStdDev = 1 / sqrt(squaredNorm / normSizeTyped + epsilon);\n    let channelScale = invStdDev * scale[currentChannelNumber];\n    let channelShift = bias[currentChannelNumber] - mean * channelScale;\n    for (var i: u32 = 0u; i < H; i++) {\n        let currentOffset = offset + i * C + currentChannelNumber;\n        output[currentOffset] = x[currentOffset] * channelScale + channelShift;\n    }\n  }`;\n      return {\n        ...metadata,\n        outputs: [\n          {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\n        ],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(normCount / 64 /* workgroup size */)})\n      };\n    };\n\nexport const parseInstanceNormAttributes = (attributes: InstanceNormAttributes): InstanceNormAttributes =>\n    createAttributeWithCacheKey({epsilon: attributes.epsilon, format: attributes.format});\n\nexport const instanceNorm = (context: ComputeContext, attributes: InstanceNormAttributes): void => {\n  const metadata = {\n    name: 'InstanceNormalization',\n    inputTypes: [GpuDataType.default, GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey,\n  };\n\n  if (attributes.format === 'NHWC') {\n    context.compute(createInstanceNormNHWCProgramInfo(metadata, context.inputs, attributes));\n  } else {\n    context.compute(createInstanceNormProgramInfo(metadata, context.inputs, attributes));\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {ShaderHelper, tensorTypeToWsglStorageType} from './common';\n\nexport interface LayerNormAttributes extends AttributeWithCacheKey {\n  axis: number;\n  epsilon: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 2) {\n    throw new Error('layerNorm requires at least 2 inputs.');\n  }\n\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('inputs should be float type');\n  }\n};\n\nconst createLayerNormProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: LayerNormAttributes, outputCount: number):\n        ProgramInfo => {\n          const xShape = inputs[0].dims;\n          const scale = inputs[1];\n          const bias = inputs[2];\n\n          const outputShape = xShape;\n          const outputSize = ShapeUtil.size(outputShape);\n          const axis = ShapeUtil.normalizeAxis(attributes.axis, xShape.length);\n          const normCount = ShapeUtil.sizeToDimension(xShape, axis);\n          const normSize = ShapeUtil.sizeFromDimension(xShape, axis);\n\n          const scaleSize = ShapeUtil.size(scale.dims);\n          const biasSize = bias ? ShapeUtil.size(bias.dims) : 0;\n          if (scaleSize !== normSize || (bias && biasSize !== normSize)) {\n            throw new Error(`Size of X.shape()[axis:] == ${normSize}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${scaleSize} and bias size of ${biasSize}`);\n          }\n\n          const meanInvStdDevDim = [];\n          for (let i = 0; i < xShape.length; ++i) {\n            if (i < axis) {\n              meanInvStdDevDim.push(xShape[i]);\n            } else {\n              meanInvStdDevDim.push(1);\n            }\n          }\n\n          const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n\n          const hasMeanDataOutput = outputCount > 1;\n          const hasInvStdOutput = outputCount > 2;\n          let bindingIndex = 0;\n          const getShaderSource = (shaderHelper: ShaderHelper) => `\n  const normSize: u32 = ${normSize};\n  const normSizeTyped: ${dataType} = ${normSize};\n  const epsilon: f32 = ${attributes.epsilon};\n\n  @group(0) @binding(${bindingIndex++}) var<storage, read> x : array<${dataType}>;\n  @group(0) @binding(${bindingIndex++}) var<storage, read> scale : array<${dataType}>;\n  ${bias ? `@group(0) @binding(${bindingIndex++}) var<storage, read> bias : array<${dataType}>;` : ''}\n  @group(0) @binding(${bindingIndex++}) var<storage, read_write> output : array<${dataType}>;\n  ${\n              hasMeanDataOutput ?\n                  `@group(0) @binding(${bindingIndex++}) var<storage, read_write> meanDataOutput : array<${dataType}>` :\n                  ''};\n  ${\n              hasInvStdOutput ?\n                  `@group(0) @binding(${bindingIndex++}) var<storage, read_write> invStdOutput : array<${dataType}>` :\n                  ''};\n\n  ${shaderHelper.mainStart()}\n    let offset = global_idx * normSize;\n    if (offset >= ${outputSize}) { return; }\n    var mean: ${dataType} = 0;\n    var meanSquare: ${dataType} = 0;\n\n    for (var h: u32 = 0u; h < normSize; h++) {\n      mean = mean + x[h + offset];\n      meanSquare = meanSquare + x[h + offset] * x[h + offset];\n    }\n    mean = mean / normSizeTyped;\n    meanSquare = sqrt(meanSquare / normSizeTyped - mean * mean + epsilon);\n\n    for (var j: u32 = 0; j < normSize; j++) {\n      output[j + offset] = (x[j + offset] - mean) / meanSquare * scale[j] ${bias ? '+ bias[j]' : ''};\n    }\n\n    ${hasMeanDataOutput ? 'meanDataOutput[global_idx] = mean' : ''};\n    ${hasInvStdOutput ? 'invStdOutput[global_idx] = 1 / meanSquare' : ''};\n  }`;\n          const outputs = [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}];\n          if (hasMeanDataOutput) {\n            outputs.push(\n                {dims: meanInvStdDevDim, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\n            );\n          }\n          if (hasInvStdOutput) {\n            outputs.push(\n                {dims: meanInvStdDevDim, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default},\n            );\n          }\n\n          return {\n            ...metadata,\n            outputs,\n            getShaderSource,\n            dispatchGroup: () => ({x: Math.ceil(normCount / 64 /* workgroup size */)})\n          };\n        };\n\nexport const parseLayerNormAttributes = (attributes: LayerNormAttributes): LayerNormAttributes =>\n    createAttributeWithCacheKey({axis: attributes.axis, epsilon: attributes.epsilon});\n\nexport const layerNorm = (context: ComputeContext, attributes: LayerNormAttributes): void => {\n  validateInputs(context.inputs);\n\n  const metadata = {\n    name: 'LayerNormalization',\n    inputTypes: context.inputs.length === 2 ? [GpuDataType.default, GpuDataType.default] :\n                                              [GpuDataType.default, GpuDataType.default, GpuDataType.default],\n    cacheHint: attributes.cacheKey + context.outputCount.toString(10) + context.inputs.length.toString(10),\n  };\n\n  context.compute(createLayerNormProgramInfo(metadata, context.inputs, attributes, context.outputCount));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {BroadcastUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfoLoader} from '../types';\n\nimport {createMatmulProgramInfo} from './3rd-party/matmul_packed_webgpu';\nimport {InternalActivationAttributes} from './fuse-utils';\n\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputTypes: hasBias ? [GpuDataType.default, GpuDataType.default, GpuDataType.default] :\n                        [GpuDataType.default, GpuDataType.default],\n  cacheHint\n});\n\nexport const createMatmulProgramInfoLoader =\n    (inputs: readonly TensorView[], activationAttributes: InternalActivationAttributes, outputShape: readonly number[],\n     reshapedOutputShape?: readonly number[], isChannelsLast = false): ProgramInfoLoader => {\n      const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createMatmulProgramInfo(\n            metadata, inputs, activationAttributes, outputShape, reshapedOutputShape, isChannelsLast)\n      };\n    };\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('inputs should be float type');\n  }\n};\n\nexport const matMul = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  const outputShape = BroadcastUtil.calcShape(context.inputs[0].dims, context.inputs[1].dims, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  context.compute(createMatmulProgramInfoLoader(context.inputs, {activation: '', activationCacheKey: ''}, outputShape));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  // 0-constant, 1-reflect, 2-edge, 3-wrap\n  readonly mode: number;\n  readonly value: number;\n  readonly pads: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('Too few inputs');\n  }\n  if (inputs[0].dataType !== DataType.float) {\n    throw new Error('Input type must be float.');\n  }\n\n  if (inputs.length >= 2) {\n    let validPads = inputs[0].dims.length * 2 === inputs[1].dims[0];\n    if (inputs.length === 4) {\n      validPads = inputs[3].dims[0] * 2 === inputs[1].dims[0];\n    }\n    if (!validPads) {\n      throw new Error('The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].');\n    }\n  }\n};\n\nconst getPadConstant =\n    (output: IndicesHelper, outputDims: readonly number[], inputDims: readonly number[],\n     inputStrides: readonly number[], pads: number[], dataType: string, constantValue: number): string => {\n      const inputRank = inputDims.length;\n\n      let block = '';\n      for (let i = inputRank - 1; i >= 0; --i) {\n        block += `\n            k = i32(${output.indicesGet('indices', i)}) - ${pads[i]};\n            if (k < 0) {\n              break;\n            }\n            if (k >= ${inputDims[i]}) {\n              break;\n            }\n            offset += k * ${inputStrides[i]};\n        `;\n      }\n\n      return `\n          value = ${dataType}(${constantValue});\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${block}\n            value = x[offset];\n          }\n      `;\n    };\n\nconst getPadReflect =\n    (output: IndicesHelper, outputDims: readonly number[], inputDims: readonly number[],\n     inputStrides: readonly number[], pads: number[]): string => {\n      const inputRank = inputDims.length;\n\n      let block = '';\n      for (let i = inputRank - 1; i >= 0; --i) {\n        block += `\n                k = i32(${output.indicesGet('indices', i)}) - ${pads[i]};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = ${2 * (inputDims[i] - 1)};\n                  k = k % _2n_1;\n                  if(k >= ${inputDims[i]}) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * ${inputStrides[i]};\n            `;\n      }\n\n      return `\n              var offset = 0;\n              var k = 0;\n              ${block}\n              value = x[offset];\n          `;\n    };\n\nconst getPadEdge =\n    (output: IndicesHelper, outputDims: readonly number[], inputDims: readonly number[],\n     inputStrides: readonly number[], pads: number[]): string => {\n      const inputRank = inputDims.length;\n\n      let block = '';\n      for (let i = inputRank - 1; i >= 0; --i) {\n        block += `\n                k = i32(${output.indicesGet('indices', i)}) - ${pads[i]};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= ${inputDims[i]}) {\n                  k = ${inputDims[i] - 1};\n                }\n                offset += k * ${inputStrides[i]};\n            `;\n      }\n\n      return `\n              var offset = 0;\n              var k = 0;\n              ${block}\n              value = x[offset];\n          `;\n    };\n\nconst getPadWrap =\n    (output: IndicesHelper, outputDims: readonly number[], inputDims: readonly number[],\n     inputStrides: readonly number[], pads: number[]): string => {\n      const inputRank = inputDims.length;\n\n      let block = '';\n      for (let i = inputRank - 1; i >= 0; --i) {\n        block += `\n                k = i32(${output.indicesGet('indices', i)}) - ${pads[i]};\n                if (k < 0)  {\n                  k += ${inputDims[i]};\n                }\n                if (k >= ${inputDims[i]}) {\n                  k -= ${inputDims[i]};\n                }\n                offset += k * ${inputStrides[i]};\n            `;\n      }\n\n      return `\n              var offset = 0;\n              var k = 0;\n              ${block}\n              value = x[offset];\n          `;\n    };\n\nconst getPadSnippet =\n    (output: IndicesHelper, outputDims: readonly number[], inputDims: readonly number[],\n     inputStrides: readonly number[], attributes: PadAttributes, dataType: string): string => {\n      switch (attributes.mode) {\n        case 0:\n          return getPadConstant(\n              output, outputDims, inputDims, inputStrides, attributes.pads, dataType, attributes.value);\n        case 1:\n          return getPadReflect(output, outputDims, inputDims, inputStrides, attributes.pads);\n        case 2:\n          return getPadEdge(output, outputDims, inputDims, inputStrides, attributes.pads);\n        case 3:\n          return getPadWrap(output, outputDims, inputDims, inputStrides, attributes.pads);\n        default:\n          throw new Error('Invalid mode');\n      }\n    };\n\nconst generatePadCode =\n    (shaderHelper: ShaderHelper, inputs: readonly TensorView[], attributes: PadAttributes, dataType: string):\n        string => {\n          const inputDims = inputs[0].dims;\n          const outputDims = ShapeUtil.padShape(inputDims.slice(), attributes.pads);\n          const outputSize = ShapeUtil.size(outputDims);\n          const inputStrides = ShapeUtil.computeStrides(inputDims);\n\n          const output = outputVariable('output', inputs[0].dataType, outputDims);\n          const input = inputVariable('x', inputs[0].dataType, inputDims);\n\n          const padSnippet = getPadSnippet(output, outputDims, inputDims, inputStrides, attributes, dataType);\n          const padCode = `\n              ${shaderHelper.declareVariables(input, output)}\n              ${output.impl()}\n              ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              let indices = ${output.offsetToIndices('global_idx')};\n\n              var value = ${dataType}(0);\n              ${padSnippet}\n              output[global_idx] = value;\n          }`;\n          return padCode;\n        };\n\nconst createPadProgramInfo =\n    (inputs: readonly TensorView[], metadata: ProgramMetadata, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(inputs[0].dims.slice(), attributes.pads);\n      return {\n        ...metadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource: shaderHelper => generatePadCode(shaderHelper, inputs, attributes, 'f32'),\n        dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n      };\n    };\n\nconst createPadAttributesFromInputs = (inputs: readonly TensorView[], attributes: PadAttributes): PadAttributes => {\n  if (inputs.length > 1) {\n    const bigInt64Pads = inputs[1].getBigInt64Array();\n    const value = (inputs.length >= 3) ? inputs[2].getFloat32Array()[0] : 0.0;\n\n    const inputRank = inputs[0].dims.length;\n    const updatePads = new Int32Array(2 * inputRank).fill(0);\n    if (inputs.length >= 4) {\n      const axes = inputs[3].getBigInt64Array();\n      for (let i = 0; i < axes.length; i++) {\n        updatePads[Number(axes[i])] = Number(bigInt64Pads[i]);\n        updatePads[Number(axes[i]) + inputRank] = Number(bigInt64Pads[i + axes.length]);\n      }\n    } else {\n      bigInt64Pads.forEach((i, v) => updatePads[Number(i)] = (Number(v)));\n    }\n\n    const pads: number[] = [];\n    updatePads.forEach(v => pads.push(v));\n\n    return createAttributeWithCacheKey({mode: attributes.mode, value, pads});\n  } else {\n    return attributes;\n  }\n};\n\nconst createPadProgramInfoLoader = (inputs: readonly TensorView[], attributes: PadAttributes): ProgramInfoLoader => {\n  const updatedAttributes = createPadAttributesFromInputs(inputs, attributes);\n  const metadata:\n      ProgramMetadata = {name: 'Pad', inputTypes: [GpuDataType.default], cacheHint: updatedAttributes.cacheKey};\n  return {...metadata, get: () => createPadProgramInfo(inputs, metadata, updatedAttributes)};\n};\n\nexport const pad = (context: ComputeContext, attributes: PadAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createPadProgramInfoLoader(context.inputs, attributes), {inputs: [0]});\n};\n\nexport const parsePadAttributes = (attributes: Record<string, unknown>): PadAttributes => {\n  const mode = attributes.mode as number;\n  const value = attributes.value as number;\n  const pads = attributes.pads as number[];\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {PoolConvUtil, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\n// TODO: support:\n// - ceil_mode                 \"test_maxpool_2d_ceil\"\n// - storage_order             \"test_maxpool_with_argmax_2d_precomputed_strides\"\n// - [MaxPool] dilations       \"test_maxpool_2d_dilations\"\n// - [MaxPool] output[1]       \"test_maxpool_with_argmax_2d_precomputed_pads\"\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Pool ops supports 2-D inputs only for now.');\n  }\n};\n\nconst getAdjustedPoolAttributesAndOutputShape = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    input: TensorView, attributes: AttributeType, isGlobalOperator: boolean): [AttributeType, number[]] => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inputShapeAsChannelFirst =\n      isChannelsLast ? [input.dims[0], input.dims[3], input.dims[1], input.dims[2]] : input.dims.slice();\n  const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n  const kernelShape = attributes.kernelShape.slice();\n  const strides = attributes.strides.slice();\n  const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShapeAsChannelFirst, kernelShape, strides, dilations, pads);\n\n  const outputShapeAsChannelFirst = PoolConvUtil.computePoolOutputShape(\n      isGlobalOperator, inputShapeAsChannelFirst, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n  const newAttributes = Object.assign({}, attributes);\n  if (hasDilations) {\n    Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n  } else {\n    Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n  }\n  return [\n    newAttributes,\n    isChannelsLast ?\n        [\n          outputShapeAsChannelFirst[0], outputShapeAsChannelFirst[2], outputShapeAsChannelFirst[3],\n          outputShapeAsChannelFirst[1]\n        ] :\n        outputShapeAsChannelFirst\n  ];\n};\n\nconst generatePoolingCode = <AttributeType extends AveragePoolAttributes|MaxPoolAttributes>(\n    shaderHelper: ShaderHelper, x: IndicesHelper, outputShape: readonly number[], attributes: AttributeType,\n    op1: string, op2: string, start: string): string => {\n  const isChannelsLast = attributes.format === 'NHWC';\n  const inputDims = x.shape;\n  const dataType = x.type.value;\n  const rank = inputDims.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  const output = outputVariable('output', x.type.tensor, outputShape);\n\n  if (attributes.kernelShape.length <= 2) {\n    const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n    const sw = attributes.strides[attributes.strides.length - 1];\n    const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n    const pwEnd = attributes.pads[attributes.pads.length - 1];\n    const dimIdxW = rank - (isChannelsLast ? 2 : 1);\n    let codeW = '';\n    let codeH = '';\n    let codeHEnd = '';\n    if (pwStart + pwEnd !== 0) {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                if (xIndices[${dimIdxW}] < 0 || xIndices[${dimIdxW}] >= ${inputDims[dimIdxW]}) {\n                  pad++;\n                  continue;\n                }\n                let x_val = x[${x.indicesToOffset('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      codeW = `\n              for (var i: u32 = 0u; i < ${kw}u; i++) {\n                xIndices[${dimIdxW}] = indices[${dimIdxW}] * ${sw} - ${pwStart} + i;\n                let x_val = x[${x.indicesToOffset('xIndices')}];\n                ${op1}\n              }`;\n    }\n\n    if (attributes.kernelShape.length === 2) {\n      const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n      const sh = attributes.strides[attributes.strides.length - 2];\n      const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n      const phEnd = attributes.pads[attributes.pads.length - 2];\n      const dimIdxH = rank - (isChannelsLast ? 3 : 2);\n      const dimH = inputDims[dimIdxH];\n      if (phStart + phEnd !== 0) {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                  if (xIndices[${dimIdxH}] < 0 || xIndices[${dimIdxH}] >= ${dimH}) {\n                    pad+= ${kw};\n                    continue;\n                  }\n              `;\n      } else {\n        codeH = `\n                for (var j: u32 = 0u; j < ${kh}u; j++) {\n                  xIndices[${dimIdxH}] = indices[${dimIdxH}] * ${sh} - ${phStart} + j;\n                `;\n      }\n      codeHEnd = `\n              }\n            `;\n    }\n\n    const poolingCode = `\n            ${shaderHelper.declareVariables(x, output)}\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              let indices = ${output.offsetToIndices('global_idx')};\n              var xIndices = ${output.offsetToIndices('global_idx')};\n\n              var value: ${dataType} = ${dataType}(${start});\n              var pad = 0;\n              ${codeH}\n              ${codeW}\n              ${codeHEnd}\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  } else {\n    if (isChannelsLast) {\n      throw new Error('Pooling with kernelShape.length > 2 is not supported for NHWC format.');\n    }\n    const kernelSize = ShapeUtil.size(attributes.kernelShape);\n    const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n    const stridesRank = kernelStrides.length;\n    const padsRank = attributes.pads.length;\n    const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n    let padCode = '';\n    if (hasPads) {\n      padCode = `\n                if (xIndices[j] >= inputDims[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${x.indicesToOffset('xIndices')}];\n                ${op1}\n              }`;\n    } else {\n      padCode = `\n              }\n              let x_val = x[${x.indicesToOffset('xIndices')}];\n              ${op1}\n            `;\n    }\n    const poolingCode = `\n            ${shaderHelper.declareVariables(x, output)}\n\n            const pads = array<u32, ${padsRank}>(${attributes.pads.map(i => `${i}u`).join(',')});\n            const inputDims = array<u32, ${rank}>(${inputDims.map(i => `${i}u`).join(',')});\n            const kernelStrides = array<u32, ${stridesRank}>(${kernelStrides.map(i => `${i}u`).join(',')});\n            const strides = array<u32, ${stridesRank}>(${attributes.strides.map(i => `${i}u`).join(',')});\n\n            ${shaderHelper.mainStart()}\n              ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n              let indices = ${output.offsetToIndices('global_idx')};\n              let xIndices = ${output.offsetToIndices('global_idx')};\n\n              var offsets: array<u32, ${stridesRank}>;\n\n              var value = ${output.type.value}(${start});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < ${kernelSize}u; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${stridesRank - 1}u; j++) {\n                  offsets[j] = offset / kernelStrides[j];\n                  offset -= offsets[j] * kernelStrides[j];\n                }\n                offsets[${stridesRank - 1}] = offset;\n\n                isPad = false;\n                for (var j = ${rank - stridesRank}u; j < ${rank}u; j++) {\n                  xIndices[j] = indices[j] * strides[j - ${rank - stridesRank}u]\n                    + offsets[j - ${rank - stridesRank}u] - pads[j - 2u];\n                  ${padCode}\n              }\n              ${op2}\n\n              output[global_idx] = value;\n            }`;\n    return poolingCode;\n  }\n};\n\nexport interface FormatAttributes {\n  readonly format: 'NHWC'|'NCHW';\n}\n\nexport interface PoolCommonAttributes extends FormatAttributes {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nconst parsePoolCommonAttributes = (attributes: Record<string, unknown>): PoolCommonAttributes => ({\n  format: attributes.format as FormatAttributes['format'],\n  autoPad: ['NOTSET', 'VALID', 'SAME_UPPER', 'SAME_LOWER'][attributes.auto_pad as number],\n  ceilMode: attributes.ceil_mode as number,\n  kernelShape: attributes.kernel_shape as [number, number],\n  strides: attributes.strides as [number, number],\n  pads: attributes.pads as [number, number, number, number]\n});\n\nexport interface AveragePoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly countIncludePad: boolean;\n}\n\nconst createAveragePoolProgramInfo =\n    (input: TensorView, metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(input, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n\n          const x = inputVariable('x', input.dataType, input.dims);\n          const dataType = x.type.value;\n\n          const op1 = 'value += x_val;';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= ${dataType}(${kernelSize});`;\n          } else {\n            op2 += `value /= ${dataType}(${kernelSize} - pad);`;\n          }\n          return {\n            ...metadata,\n            outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n            getShaderSource: shaderHelper =>\n                generatePoolingCode(shaderHelper, x, outputShape, adjustedAttributes, op1, op2, '0.0'),\n            dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n          };\n        };\n\nexport const parseAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const countIncludePad = (attributes.count_include_pad as number) === 0 ? false : true;\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode'\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n  }\n\n  return createAttributeWithCacheKey({countIncludePad, ...attr});\n};\n\nexport const averagePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'AveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute(\n      {...metadata, get: () => createAveragePoolProgramInfo(context.inputs[0], metadata, false, attributes)});\n};\n\nconst globalPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nexport const parseGlobalAveragePoolAttributes = (attributes: Record<string, unknown>): AveragePoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalAveragePool = (context: ComputeContext, attributes: AveragePoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalAveragePool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute(\n      {...metadata, get: () => createAveragePoolProgramInfo(context.inputs[0], metadata, true, attributes)});\n};\n\nexport interface MaxPoolAttributes extends PoolCommonAttributes, AttributeWithCacheKey {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nconst createMaxPoolProgramInfo =\n    (input: TensorView, metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(input, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(x_val, value);\n    `;\n          const op2 = '';\n          const x = inputVariable('x', input.dataType, input.dims);\n          return {\n            ...metadata,\n            outputs: [{dims: outputShape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n            getShaderSource: shaderHelper =>\n                generatePoolingCode(shaderHelper, x, outputShape, adjustedAttributes, op1, op2, '-1e5'),\n            dispatchGroup: () => ({x: Math.ceil(ShapeUtil.size(outputShape) / 64 /* workgroup size */)})\n          };\n        };\n\nexport const maxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'MaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs[0], metadata, false, attributes)});\n};\n\nexport const parseMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const storageOrder = attributes.storage_order as number;\n  const dilations = attributes.dilations as [number, number];\n\n  const attr = parsePoolCommonAttributes(attributes);\n  // TODO: support attribute 'ceil_mode' and 'storage_order'\n  if (storageOrder !== 0) {\n    throw new Error('column major storage order is not yet supported for MaxPool');\n  }\n  if (attr.ceilMode !== 0) {\n    throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n  }\n\n  return createAttributeWithCacheKey({storageOrder, dilations, ...attr});\n};\n\nexport const parseGlobalMaxPoolAttributes = (attributes: Record<string, unknown>): MaxPoolAttributes => {\n  const format = attributes.format as FormatAttributes['format'];\n  return {format, ...globalPoolAttributes, cacheKey: format};\n};\n\nexport const globalMaxPool = (context: ComputeContext, attributes: MaxPoolAttributes): void => {\n  validateInputs(context.inputs);\n  const metadata = {name: 'GlobalMaxPool', inputTypes: [GpuDataType.default], cacheHint: attributes.cacheKey};\n  context.compute({...metadata, get: () => createMaxPoolProgramInfo(context.inputs[0], metadata, true, attributes)});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length === 0 || inputs.length > 2) {\n    throw new Error('Reduce op requires 1 or 2 inputs.');\n  }\n\n  if (inputs.length === 2 && inputs[1].dims.length !== 1) {\n    throw new Error('Invalid axes input dims.');\n  }\n};\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  keepDims: boolean;\n  noopWithEmptyAxes: boolean;\n  axes: number[];\n}\n\nexport type ReduceOp =\n    (input: IndicesHelper, output: IndicesHelper,\n     axes: readonly number[]) => [string, string, string, string, ...string[]];\n\nconst noOp: ReduceOp = (input) => ['', '', `var value = ${input.getByOffset('inputOffset')};`, ''];\nexport const createReduceProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], reduceOp: ReduceOp, axesInput: number[],\n     outputDataType: DataType, keepDims = false, noopWithEmptyAxes = false): ProgramInfo => {\n      const outputShape: number[] = [];\n      const inputShape = inputs[0].dims;\n\n      const axes = ShapeUtil.normalizeAxes(axesInput, inputs[0].dims.length);\n      const reduceOnAllAxes = !noopWithEmptyAxes && axes.length === 0;\n      inputShape.forEach((d, i) => {\n        if (reduceOnAllAxes || axes.indexOf(i) >= 0) {\n          if (keepDims) {\n            outputShape.push(1);\n          }  // else { // skip this axis}\n        } else {\n          outputShape.push(d);\n        }\n      });\n\n      const idxCopy: string[] = [];  // copy output indexes to input indexes\n\n      const input = inputVariable('_A', inputs[0].dataType, inputShape);\n      const output = outputVariable('output', outputDataType, outputShape);\n      const ops = reduceOp(input, output, axes);\n      const inputOffsetAssignment = `inputOffset = ${input.indicesToOffset('inputIndices')};`;\n      const initinputOffsetLet = `let ${inputOffsetAssignment};`;\n      const initinputOffsetVar = `var ${inputOffsetAssignment};`;\n      const initinputOffset = (ops[1] === '') ? '' : initinputOffsetVar;\n      let reduceOps = ((ops[1] === '') ? initinputOffsetLet : inputOffsetAssignment) + '\\n' + ops[2];\n\n      for (let k = 0, l = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (reduceOnAllAxes || axes.indexOf(k) >= 0) {\n          if (keepDims) {\n            l++;\n          }\n          // loop over the d-th axis\n          reduceOps = `for(var j${k}: u32 = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n                ${ops[2].includes('lastIndex') ? `let lastIndex = j${k};` : ''}\n                ${input.indicesSet('inputIndices', k, `j${k}`)}\n                ${reduceOps}\n              }`;\n        } else {\n          idxCopy.push(`${input.indicesSet('inputIndices', k, output.indicesGet('outputIndices', l))};`);\n          l++;\n        }\n      }\n\n      const outputSize = ShapeUtil.size(outputShape);\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n        ${shaderHelper.declareVariables(input, output)}\n\n        ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n          var inputIndices: ${input.type.indices};\n          let outputIndices = ${output.offsetToIndices('global_idx')};\n\n          ${idxCopy.join('\\n')}\n          ${ops[0]}       // init ops for reduce max/min\n          ${initinputOffset}\n          ${ops[1]}\n          ${reduceOps}\n          ${ops[3]}\n          ${ops.length === 4 ? output.setByOffset('global_idx', 'value') : ops.slice(4).join('\\n')}\n        }`;\n\n      return {\n        ...metadata,\n        getShaderSource,\n        outputs: [{dims: outputShape, dataType: outputDataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createReduceAttributesFromInputs =\n    (inputs: readonly TensorView[], attributes: ReduceAttributes): ReduceAttributes => {\n      const axes: number[] = [];\n      if (inputs[1].dims[0] > 0) {\n        inputs[1].getBigInt64Array().forEach(v => axes.push(Number(v)));\n      }\n      return createAttributeWithCacheKey(\n          {axes, keepDims: attributes.keepDims, noopWithEmptyAxes: attributes.noopWithEmptyAxes});\n    };\n\nconst createReduceProgramInfoLoader =\n    (inputs: readonly TensorView[], name: string, attributes: ReduceAttributes,\n     reduceOp: ReduceOp): ProgramInfoLoader => {\n      const updatedAttributes: ReduceAttributes =\n          inputs.length === 1 ? attributes : createReduceAttributesFromInputs(inputs, attributes);\n      const metadata: ProgramMetadata = {\n        name,\n        inputTypes: [GpuDataType.default],\n        cacheHint: updatedAttributes.cacheKey + '_' + inputs[0].dims.map(d => d.toString()).join(',')\n      };\n      return {\n        ...metadata,\n        get: () => createReduceProgramInfo(\n            metadata, [inputs[0]],\n            updatedAttributes.noopWithEmptyAxes && updatedAttributes.axes.length === 0 ? noOp : reduceOp,\n            updatedAttributes.axes, inputs[0].dataType, updatedAttributes.keepDims, updatedAttributes.noopWithEmptyAxes)\n      };\n    };\n\nexport const reduceLogSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) =>\n      [`var value = ${output.type.storage}(0);`,\n       '',\n       `value += ${input.getByOffset('inputOffset')};`,\n       'value = log(value);',\n  ];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceLogSum', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceL1 = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) =>\n      [`var value = ${output.type.storage}(0);`,\n       '',\n       `value += abs(${input.getByOffset('inputOffset')});`,\n       '',\n  ];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceL1', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceL2 = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) =>\n      [`var t = ${output.type.value}(0); var value = ${output.type.value}(0);`,\n       '',\n       `t = ${input.getByOffset('inputOffset')}; value += (t * t);`,\n       'value = sqrt(value);',\n  ];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceL2', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceLogSumExp = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) =>\n      [`var value = ${output.type.storage}(0);`,\n       '',\n       `value += exp(${input.getByOffset('inputOffset')});`,\n       'value = log(value);',\n  ];\n  context.compute(\n      createReduceProgramInfoLoader(context.inputs, 'ReduceLogSumExp', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceMax = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, _output, axes) => {\n    const idxZero = [];\n    for (let k = 0; k < input.shape.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(input.indicesSet('inputIndices', k, 0));\n      }\n    }\n\n    return [\n      `${idxZero.join('\\n')}`,\n      `var value = ${input.getByOffset('inputOffset')};`,\n      `value = max(value, ${input.getByOffset('inputOffset')});`,\n      '',\n    ];\n  };\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMax', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceMean = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output, axes) => {\n    let size = 1.0;\n    for (let k = 0; k < input.shape.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        size *= input.shape[k];\n      }\n    }\n\n    return [\n      'var sum = f32(0);',\n      '',\n      `sum += f32(${input.getByOffset('inputOffset')});`,\n      `let value = ${output.type.value}(sum / ${size});`,\n    ];\n  };\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMean', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceMin = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, _output, axes) => {\n    const idxZero = [];\n    for (let k = 0; k < input.shape.length; k++) {\n      if (axes.indexOf(k) >= 0 || axes.length === 0) {\n        idxZero.push(`inputIndices[${k}] = 0;`);  // first element\n      }\n    }\n\n    return [\n      `${idxZero.join('\\n')}`,\n      `var value = ${input.getByOffset('inputOffset')};`,\n      `value = min(value, ${input.getByOffset('inputOffset')});`,\n      '',\n    ];\n  };\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceMin', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceProd = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) =>\n      [`var value = ${output.type.storage}(1);`,\n       '',\n       `value *= ${input.getByOffset('inputOffset')};`,\n       '',\n  ];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceProd', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceSum = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) =>\n      [`var value = ${output.type.storage}(0);`,\n       '',\n       `value += ${input.getByOffset('inputOffset')};`,\n       '',\n  ];\n  context.compute(createReduceProgramInfoLoader(context.inputs, 'ReduceSum', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const reduceSumSquare = (context: ComputeContext, attributes: ReduceAttributes): void => {\n  validateInputs(context.inputs);\n  const reduceOp: ReduceOp = (input, output) =>\n      [`var t = ${output.type.value}(0); var value = ${output.type.value}(0);`,\n       '',\n       `t = ${input.getByOffset('inputOffset')}; value += t * t;`,\n       '',\n  ];\n  context.compute(\n      createReduceProgramInfoLoader(context.inputs, 'ReduceSumSquare', attributes, reduceOp), {inputs: [0]});\n};\n\nexport const parseReduceAttributes = (attributes: Record<string, unknown>): ReduceAttributes =>\n    createAttributeWithCacheKey(attributes as Omit<ReduceAttributes, keyof AttributeWithCacheKey>);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\ntype CoordinateTransformMode = 'half_pixel'|'asymmetric'|'pytorch_half_pixel'|'tf_half_pixel_for_nn'|'align_corners'|\n    'tf_crop_and_resize'|'half_pixel_symmetric';\n\ntype KeepAspectRatioPolicy = 'stretch'|'not_smaller'|'not_larger';\n\ntype Mode = 'nearest'|'linear'|'cubic';\n\ntype NearestMode = 'round_prefer_floor'|'round_prefer_ceil'|'floor'|'ceil'|'simple';\n\nexport interface ResizeAttributes extends AttributeWithCacheKey {\n  antialias: number;\n  axes: number[];\n  coordinateTransformMode: CoordinateTransformMode;\n  cubicCoeffA: number;\n  excludeOutside: boolean;\n  extrapolationValue: number;\n  keepAspectRatioPolicy: KeepAspectRatioPolicy;\n  mode: Mode;\n  nearestMode: NearestMode;\n}\n\nconst validateScales = (scales: number[], attributes: ResizeAttributes): void => {\n  scales.every((value) => value > 0 || (() => {\n                            throw new Error('Resize requires scales input values to be positive');\n                          }));\n  // Check scales dims based on mode: LINEAR, CUBIC\n  if (scales.length > 0) {\n    if (attributes.mode === 'linear') {\n      if (!(scales.length === 2 || (scales.length === 4 && scales[0] === 1 && scales[1] === 1) ||\n            (scales.length === 4 && scales[0] === 1 && scales[3] === 1))) {\n        throw new Error('Resize requires scales input size to be 2 or 4 for linear mode');\n      }\n    } else if (attributes.mode === 'cubic') {\n      if (!(scales.length === 2 || (scales.length === 4 && scales[0] === 1 && scales[1] === 1) ||\n            (scales.length === 4 && scales[0] === 1 && scales[3] === 1))) {\n        throw new Error('Resize requires scales input size to be 2 or 4 for cubic mode');\n      }\n    }\n  }\n};\n\nconst updateScales = (scales: readonly number[], axes: readonly number[], rank: number): number[] => {\n  axes.every((value) => value >= 0 && value < rank || (() => {\n                          throw new Error('Resize requires axes input values to be positive and less than rank');\n                        }));\n  const newScales = new Array(rank).fill(1.0);\n  axes.forEach((value, index) => newScales[value] = scales[index]);\n  return newScales;\n};\n\nconst validateInputs =\n    (inputs: readonly TensorView[], attributes: ResizeAttributes, opsetVersion: number, scales: number[],\n     sizes: number[], roi: number[]): void => {\n      const [roiInputIndex, scalesInputIndex, sizesInputIndex] =\n          (opsetVersion > 10) ? [1, 2, 3] : [-1, (inputs.length > 1) ? 1 : -1, -1];\n      const rank = inputs[0].dims.length;\n      if (roiInputIndex > 0 && inputs.length > roiInputIndex && inputs[roiInputIndex].dims.length > 0) {\n        inputs[roiInputIndex].getFloat32Array().forEach((value) => roi.push(value));\n\n      } else if (attributes.coordinateTransformMode === 'tf_crop_and_resize') {\n        throw new Error('Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize');\n      }\n\n      if (scalesInputIndex > 0 && inputs.length > scalesInputIndex && inputs[scalesInputIndex].dims.length > 0) {\n        inputs[scalesInputIndex].getFloat32Array().forEach((value) => scales.push(value));\n        if (scales.length !== 0 &&\n            (scales.length !== rank && (opsetVersion >= 18 && scales.length !== attributes.axes.length))) {\n          throw new Error(\n              'Resize requires scales input size to be same as input rank or axes size for opset 18 and up');\n        }\n        validateScales(scales, attributes);\n        if (attributes.axes.length > 0) {\n          updateScales(scales, attributes.axes, rank).forEach((value, index) => scales[index] = value);\n        }\n      }\n      if (sizesInputIndex > 0 && inputs.length > sizesInputIndex) {\n        inputs[sizesInputIndex].getBigInt64Array().forEach((value) => sizes.push(Number(value)));\n        if (sizes.length !== rank || (opsetVersion >= 18 && sizes.length === attributes.axes.length)) {\n          throw new Error('Resize requires sizes input size to be same as input rank or axes size for opset 18 and up');\n        }\n      }\n\n      if (attributes.axes.length > 0) {\n        if (scales.length !== attributes.axes.length) {\n          throw new Error('Resize requires \"scales\" input size to be of axes rank when axes attributes is specified');\n        }\n        if (sizes.length !== attributes.axes.length) {\n          throw new Error(\n              'Resize requires \"sizes\" input size to be of rank axes rank when axes attributes is specified');\n        }\n      }\n      if (typeof scales !== 'undefined' && typeof sizes !== 'undefined' && scales.length > 0 && sizes.length > rank) {\n        throw new Error('Resize requires only of scales or sizes to be specified');\n      }\n    };\n\nconst getOriginalCoordinateFromResizedCoordinate = (coordinateTransferMode: CoordinateTransformMode): string =>\n    'fn getOriginalCoordinateFromResizedCoordinate(xResized: f32, xScale: f32, lengthResized: f32,\\\n    lengthOriginal: f32, roiStart: f32, roiEnd: f32) -> f32 { ' +\n    (() => {\n      switch (coordinateTransferMode) {\n        case 'asymmetric':\n          return 'return xResized / xScale;';\n        case 'pytorch_half_pixel':\n          return 'if (lengthResized > 1) { \\\n                    return (xResized + 0.5) / xScale - 0.5; \\\n                  } else { \\\n                    return 0.0; \\\n                  }';\n        case 'tf_half_pixel_for_nn':\n          return 'return (xResized + 0.5) / xScale;';\n        case 'align_corners':\n          return 'if (lengthResized == 1) { \\\n                    return 0.0; \\\n                  } else { \\\n                    return xResized * (lengthOriginal - 1) / (lengthResized - 1); \\\n                  }';\n        case 'tf_crop_and_resize':\n          return 'if (lengthResized > 1) { \\\n                    return roiStart * (lengthOriginal - 1) + \\\n                          (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1); \\\n                  } else { \\\n                    return 0.5 * (roiStart + roiEnd) * f32(lengthOriginal - 1); \\\n                  }';\n        case 'half_pixel_symmetric':\n          return [\n            'const outputWidth = xScale * lengthResized;', 'const adjustment = lengthResized / outputWidth;',\n            'const center = lengthOriginal / 2;', 'const offset = center * (1 - adjustment);',\n            'return offset + ((xResized + 0.5) / xScale) - 0.5;'\n          ].join('\\n');\n        case 'half_pixel':\n          return 'return ((xResized + 0.5) / xScale) - 0.5;';\n        default:\n          throw new Error(`Coordinate transform mode ${coordinateTransferMode} is not supported`);\n      }\n    })() +\n    '}';\n\nconst getNearestPixelFromOriginal = (nearestMode: NearestMode, opsetVersion: number): string =>\n    'fn getNearestPixelFromOriginal(xOriginal: f32, isDownSample: bool) -> f32 {' + (() => {\n      switch (nearestMode) {\n        case 'round_prefer_ceil':\n          return 'if (fract(xOriginal) == 0.5) { \\\n            return ceil(xOriginal); \\\n          } else { \\\n            return round(xOriginal); \\\n          }';\n        case 'floor':\n          return 'return floor(xOriginal);';\n        case 'ceil':\n          return 'return ceil(xOriginal);';\n        case 'round_prefer_floor':\n          return 'if (fract(xOriginal) == 0.5) { \\\n                    return floor(xOriginal); \\\n                  } else { \\\n                    return round(xOriginal); \\\n                  }';\n        case 'simple':\n        default:\n          if (opsetVersion < 11) {\n            return 'if (isDownSample) \\\n                    { \\\n                      return ceil(xOriginal); \\\n                    } else { \\\n                      return xOriginal; \\\n                    }';\n          }\n          throw new Error(`Nearest mode ${nearestMode} is not supported`);\n      }\n    })() +\n    '}';\n\nconst updateRoI = (roi: readonly number[], axes: readonly number[], rank: number): number[] => {\n  const roiTmp = new Array(rank).fill(0).concat(new Array(rank).fill(1));\n  const roiLocal = roi.length === 0 ? roiTmp : roi.slice();\n  if (axes.length > 0) {\n    axes.forEach((v, i) => {\n      roiTmp[v] = roiLocal[i];\n      roiTmp[i + rank] = roiLocal[axes.length + i];\n    });\n    return roiTmp;\n  }\n  return roiLocal;\n};\n\nconst initOutputShape =\n    (inputShape: readonly number[], scales: readonly number[], sizes: readonly number[], axes: readonly number[]):\n        number[] => {\n          let outputShape: number[] = [];\n          if (sizes.length > 0) {\n            if (axes.length > 0) {\n              inputShape.forEach((v) => outputShape.push(v));\n              if (Math.max(...axes) > inputShape.length) {\n                throw new Error('axes is out of bound');\n              }\n              axes.forEach((v, i) => outputShape[v] = sizes[i]);\n            } else {\n              sizes.forEach((v) => outputShape.push(v));\n            }\n          } else {\n            if (scales.length === 0) {\n              throw new Error('Resize requires either scales or sizes.');\n            } else {\n              outputShape = inputShape.map((value, index) => Math.round(value * scales[index]));\n            }\n          }\n          return outputShape;\n        };\n\nconst adjustOutputShape =\n    (inputShape: readonly number[], outputShape: readonly number[], scales: number[], attributes: ResizeAttributes):\n        number[] => {\n          const scaleInPolicy = (() => {\n            switch (attributes.keepAspectRatioPolicy) {\n              case 'not_larger':\n                return attributes.axes.length > 0 ? Math.min(...attributes.axes.map(i => scales[i]), Number.MAX_VALUE) :\n                                                    Math.min(...scales, Number.MAX_VALUE);\n              case 'not_smaller':\n                return attributes.axes.length > 0 ? Math.max(...attributes.axes.map(i => scales[i]), Number.MIN_VALUE) :\n                                                    Math.max(...scales, Number.MIN_VALUE);\n              default:\n                throw new Error(`Keep aspect ratio policy ${attributes.keepAspectRatioPolicy} is not supported`);\n            }\n          })();\n          scales.fill(1.0, 0, scales.length);\n          const adjustedOutputShape = inputShape.slice();\n          if (attributes.axes.length > 0) {\n            attributes.axes.forEach((v) => scales[v] = scaleInPolicy);\n            attributes.axes.forEach((v) => adjustedOutputShape[v] = Math.round(inputShape[v] * scales[v]));\n          } else {\n            scales.fill(scaleInPolicy, 0, scales.length);\n            adjustedOutputShape.forEach((v, i) => adjustedOutputShape[i] = Math.round(v * scales[i]));\n          }\n          return adjustedOutputShape;\n        };\n\nconst calculateOriginalIndicesFromOutputIndices =\n    (output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[], scales: readonly number[],\n     roi: readonly number[]): string => `\n    fn calculateOriginalIndicesFromOutputIndices(outputIndices: ${output.type.indices}) -> array<f32, ${\n        outputShape.length}> {\n      const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\n      const outputShape = array<u32, ${outputShape.length}>(${outputShape.map(i => `${i}u`).join(',')});\n      const scales = array<f32, ${scales.length}>(${scales.map(i => `${i}f`).join(',')});\n      const roi = array<f32, ${roi.length}>(${roi.map(i => `${i}f`).join(',')});\n      var originalIndices: array<f32, ${outputShape.length}>;\n      for (var i:u32 = 0; i < ${outputShape.length}; i++) {\n        var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : 'outputIndices[i]'};\n        if (scales[i] == 1.0) {\n          originalIndices[i] = f32(outputIndex);\n        } else {\n          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\n                f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${inputShape.length}]);\n        }\n      }\n      return originalIndices;\n    }`;\n\nconst calculateInputIndicesFromOutputIndices =\n    (input: IndicesHelper, output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[],\n     scales: readonly number[], roi: readonly number[], useExtrapolation: boolean): string => `\n    fn calculateInputIndicesFromOutputIndices(outputIndices: ${output.type.indices}) -> ${input.type.indices} {\n        const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\n        const outputShape = array<u32, ${outputShape.length}>(${outputShape.map(i => `${i}u`).join(',')});\n        const scales = array<f32, ${scales.length}>(${scales.map(i => `${i}f`).join(',')});\n        const roi = array<f32, ${roi.length}>(${roi.map(i => `${i}f`).join(',')});\n        var inputIndices: ${input.type.indices};\n        for (var i:u32 = 0; i < ${outputShape.length}; i++) {\n          var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : 'outputIndices[i]'};\n          var inputIndex: u32;\n          if (scales[i] == 1.0) {\n            inputIndex = outputIndex;\n          } else {\n            var original_idx = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\n                    f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + ${inputShape.length}]);\n            if (!${useExtrapolation} || (original_idx >= 0 && original_idx < f32(inputShape[i]))) {\n              if (original_idx < 0) {\n                inputIndex = 0;\n              } else if (original_idx > (f32(inputShape[i]) - 1)) {\n                inputIndex = inputShape[i] - 1;\n              } else {\n                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));\n              }\n            } else {\n              inputIndex = u32(original_idx);\n            }\n          }\n          ${input.indicesSet('inputIndices', 'i', 'inputIndex')}\n        }\n        return inputIndices;\n    }`;\n\nconst checkInputIndices = (input: IndicesHelper, inputShape: readonly number[]): string => `\n    fn checkInputIndices(inputIndices: ${input.type.indices}) -> bool {\n      const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\n      for (var i:u32 = 0; i < ${inputShape.length}; i++) {\n        var inputIndex = ${inputShape.length === 1 ? 'inputIndices' : 'inputIndices[i]'};\n        if (inputIndex < 0 || inputIndex >= inputShape[i]) {\n          return false;\n        }\n      }\n      return true;\n    }`;\n\nconst bilinearInterpolation =\n    (input: IndicesHelper, output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[],\n     scales: readonly number[], useExtrapolation: boolean, extrapolationValue: number): string => {\n      const [batchIdx, heightIdx, widthIdx, channelIdx] =\n          inputShape.length === 2 ? [-1, 0, 1, -1] : (scales[1] === 1.0 ? [0, 2, 3, 1] : [0, 1, 2, 3]);\n      return `\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> f32 {\n      var inputIndices: ${input.type.indices};\n      inputIndices[${heightIdx}] = max(0, min(row, ${inputShape[heightIdx]} - 1));\n      inputIndices[${widthIdx}] = max(0, min(col, ${inputShape[widthIdx]} - 1));\n      if (${inputShape.length} > 2) {\n        inputIndices[${channelIdx}] = channel;\n        inputIndices[${batchIdx}] = batch;\n      };\n      return input[${input.indicesToOffset('inputIndices')}];\n    }\n\n    fn bilinearInterpolation(outputIndices: ${output.type.indices}) -> f32 {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);\n      var row:f32 = originalIndices[${heightIdx}];\n      var col:f32 = originalIndices[${widthIdx}];\n      if (${useExtrapolation} && (row < 0 || row > (${inputShape[heightIdx]} - 1) || col < 0 || col > ${\n          inputShape[widthIdx]} - 1)) {\n        return ${extrapolationValue};\n      }\n      row = max(0, min(row, ${inputShape[heightIdx]} - 1));\n      col = max(0, min(col, ${inputShape[widthIdx]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = 0;\n      var batch: u32 = 0;\n      if (${inputShape.length > 2}) {\n        channel = u32(originalIndices[${channelIdx}]);\n        batch = u32(originalIndices[${batchIdx}]);\n      }\n      var x11: f32 = getInputValue(batch, channel, row1, col1);\n      var x12: f32 = getInputValue(batch, channel, row1, col2);\n      var x21: f32 = getInputValue(batch, channel, row2, col1);\n      var x22: f32 = getInputValue(batch, channel, row2, col2);\n      var dx1: f32 = row - f32(row1);\n      var dx2: f32 = f32(row2 ) - row;\n      var dy1 = col - f32(col1);\n      var dy2 = f32(col2) - col;\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`;\n    };\n\nconst bicubicInterpolation =\n    (input: IndicesHelper, output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[],\n     scales: readonly number[], roi: readonly number[], cubicCoeffA: number, useExtrapolation: boolean,\n     extrapolationValue: number, excludeOutside: boolean): string => {\n      const [heightIdx, widthIdx] = inputShape.length === 2 ? [0, 1] : (scales[1] === 1.0) ? [2, 3] : [1, 2];\n\n      const createCubicInterpolationFunction = (idx: number): string => {\n        const direction = idx === heightIdx ? 'row' : 'col';\n        return `\n      fn ${direction}CubicInterpolation(inputIndices: ${input.type.indices}, outputIndices: ${\n            output.type.indices}) -> f32 {\n        var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : `outputIndices[${idx}]`};\n        var originalIdx: f32 = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), ${scales[idx]},\n        f32(${outputShape[idx]}), f32(${inputShape[idx]}), ${roi[idx]}, ${roi[idx]} + ${inputShape.length});\n        var fractOriginalIdx: f32 = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${useExtrapolation} && (originalIdx < 0 || originalIdx > (${inputShape[idx]} - 1))) {\n          return ${extrapolationValue};\n        }\n        var data: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${direction}: f32 = originalIdx + f32(i);\n          if (${direction} < 0 || ${direction} >= ${inputShape[idx]}) {\n            if (${excludeOutside}) {\n              coefs[i + 1] = 0.0;\n              continue;\n            } else if (${useExtrapolation}) {\n              return ${extrapolationValue};\n            } else {\n              ${direction} = max(0, min(${direction}, ${inputShape[idx]} - 1));\n            }\n          }\n          var inputIndicesCopy: ${input.type.indices} = inputIndices;\n          inputIndicesCopy[${idx}] = u32(${direction});\n          data[i + 1] = ${idx === heightIdx ? `input[${input.indicesToOffset('inputIndicesCopy')}];` : `\n                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);`}\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`;\n      };\n\n      return `\n    ${createCubicInterpolationFunction(heightIdx)};\n    ${createCubicInterpolationFunction(widthIdx)};\n  fn getCubicInterpolationCoefs(s: f32) -> array<f32, 4> {\n    var absS = abs(s);\n    var coeffs: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: f32 = 1.0 - absS;\n    var twoMinusAbsS: f32 = 2.0 - absS;\n    var onePlusAbsS: f32 = 1.0 + absS;\n    coeffs[0] = ((${cubicCoeffA} * onePlusAbsS - 5 * ${cubicCoeffA}) * onePlusAbsS + 8 * ${\n          cubicCoeffA}) * onePlusAbsS - 4 * ${cubicCoeffA};\n    coeffs[1] = ((${cubicCoeffA} + 2) * absS - (${cubicCoeffA} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${cubicCoeffA} + 2) * oneMinusAbsS - (${cubicCoeffA} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${cubicCoeffA} * twoMinusAbsS - 5 * ${cubicCoeffA}) * twoMinusAbsS + 8 * ${\n          cubicCoeffA}) * twoMinusAbsS - 4 * ${cubicCoeffA};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<f32, 4>, coefs: array<f32, 4>) -> f32 {\n    var coefsSum: f32 = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(outputIndices: ${output.type.indices}) -> f32 {\n    var inputIndices: ${input.type.indices} = outputIndices;\n    return colCubicInterpolation(inputIndices, outputIndices);\n  }\n    `;\n    };\n\nconst createResizeProgramInfo =\n    (metadata: ProgramMetadata, inputTensor: TensorView, attributes: ResizeAttributes, opsetVersion: number,\n     scalesInput: readonly number[], sizes: readonly number[], roiInput: readonly number[]): ProgramInfo => {\n      const inputShape = inputTensor.dims;\n      const roi = updateRoI(roiInput, attributes.axes, inputShape.length);\n\n      let outputShape = initOutputShape(inputShape, scalesInput, sizes, attributes.axes);\n      let scales = scalesInput.slice();\n      if (scalesInput.length === 0) {\n        scales = inputShape.map((value, index) => value === 0 ? 1.0 : outputShape[index] / value);\n        if (attributes.keepAspectRatioPolicy !== 'stretch') {\n          outputShape = adjustOutputShape(inputShape, outputShape, scales, attributes);\n        }\n      }\n      const output = outputVariable('output', inputTensor.dataType, outputShape);\n      const input = inputVariable('input', inputTensor.dataType, inputShape);\n      const outputSize = ShapeUtil.size(outputShape);\n      const noScale = inputShape.length === outputShape.length && inputShape.every((d, i) => d === outputShape[i]);\n      const useExtrapolation = attributes.coordinateTransformMode === 'tf_crop_and_resize';\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n      ${getOriginalCoordinateFromResizedCoordinate(attributes.coordinateTransformMode)};\n      ${(() => {\n        switch (attributes.mode) {\n          case 'nearest':\n            return `\n              ${checkInputIndices(input, inputShape)};\n              ${getNearestPixelFromOriginal(attributes.nearestMode, opsetVersion)};\n              ${\n                calculateInputIndicesFromOutputIndices(\n                    input, output, inputShape, outputShape, scales, roi, useExtrapolation)};\n              `;\n          case 'linear':\n            return `\n              ${calculateOriginalIndicesFromOutputIndices(output, inputShape, outputShape, scales, roi)};\n              ${\n                bilinearInterpolation(\n                    input, output, inputShape, outputShape, scales, useExtrapolation, attributes.extrapolationValue)};\n              `;\n          case 'cubic':\n            return `\n            ${\n                bicubicInterpolation(\n                    input, output, inputShape, outputShape, scales, roi, attributes.cubicCoeffA, useExtrapolation,\n                    attributes.extrapolationValue, attributes.excludeOutside)};\n            `;\n          default:\n            throw Error('Invalid resize mode');\n        }\n      })()};\n      ${shaderHelper.declareVariables(input, output)}\n      ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n        if (${noScale}) {\n          output[global_idx] = input[global_idx];\n        } else {\n          let outputIndices = ${output.offsetToIndices('global_idx')};\n          var inputIndices: ${input.type.indices};\n          ${(() => {\n        switch (attributes.mode) {\n          case 'nearest':\n            return `inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);\n                  if (checkInputIndices(inputIndices)) {\n                    output[global_idx] = input[${input.indicesToOffset('inputIndices')}];\n                  } else {\n                    output[global_idx] = ${attributes.extrapolationValue};\n                  }`;\n          case 'linear':\n            return 'output[global_idx] = bilinearInterpolation(outputIndices);';\n          case 'cubic':\n            return 'output[global_idx] = bicubicInterpolation(outputIndices);';\n          default:\n            throw Error(`Unsupported resize mode: ${attributes.mode}`);\n        }\n      })()};\n        }\n      }`;\n\n      return {\n        ...metadata,\n        getShaderSource,\n        outputs: [{dims: outputShape, dataType: inputTensor.dataType, gpuDataType: GpuDataType.default}],\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nexport const createResizeProgramInfoLoader =\n    (input: TensorView, attributes: ResizeAttributes, opsetVersion: number, scales: readonly number[],\n     sizes: readonly number[], roi: readonly number[]): ProgramInfoLoader => {\n      const metadata: ProgramMetadata = {\n        name: 'Resize',\n        inputTypes: [GpuDataType.default],\n        cacheHint: attributes.cacheKey + opsetVersion.toString() +\n            (scales.length > 0 ? '_scales_' + scales.toString() : '') +\n            (sizes.length > 0 ? '_sizes_' + sizes.toString() : ''),\n      };\n      return {\n        ...metadata,\n        get: () => createResizeProgramInfo(metadata, input, attributes, opsetVersion, scales, sizes, roi)\n      };\n    };\n\nconst getOpsetVersionFromCustomDataBuffer = (context: ComputeContext): number => {\n  const customDataBuffer = context.customDataBuffer;\n  const customDataBuffer32 = new Uint32Array(customDataBuffer, customDataBuffer.byteOffset, 1);\n  const opsetVersion = customDataBuffer32[0];\n  return opsetVersion;\n};\n\nexport const resize = (context: ComputeContext, attributes: ResizeAttributes): void => {\n  const scales: number[] = [];\n  const sizes: number[] = [];\n  const roi: number[] = [];\n  const opsetVersion = getOpsetVersionFromCustomDataBuffer(context);\n  validateInputs(context.inputs, attributes, opsetVersion, scales, sizes, roi);\n  context.compute(\n      createResizeProgramInfoLoader(context.inputs[0], attributes, opsetVersion, scales, sizes, roi), {inputs: [0]});\n};\n\nexport const parseResizeAttributes = (attributes: Record<string, unknown>): ResizeAttributes => {\n  const antialias = attributes.antialias as number;\n  const axes = attributes.axes as number[];\n  const coordinateTransformMode: CoordinateTransformMode =\n      attributes.coordinateTransformMode as CoordinateTransformMode;\n  const cubicCoeffA = attributes.cubicCoeffA as number;\n  const excludeOutside = attributes.excludeOutside as number !== 0;\n  const extrapolationValue = attributes.extrapolationValue as number;\n  const keepAspectRatioPolicy: KeepAspectRatioPolicy = attributes.keepAspectRatioPolicy as KeepAspectRatioPolicy;\n  const mode: Mode = attributes.mode as Mode;\n  // If nearestMode is not specified, use simple mode.\n  const nearestMode: NearestMode = (attributes.nearestMode === '' ? 'simple' : attributes.nearestMode) as NearestMode;\n  return createAttributeWithCacheKey({\n    antialias,\n    axes,\n    coordinateTransformMode,\n    cubicCoeffA,\n    excludeOutside,\n    extrapolationValue,\n    keepAspectRatioPolicy,\n    mode,\n    nearestMode\n  });\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {ShaderHelper, tensorTypeToWsglStorageType} from './common';\n\nexport interface SkipLayerNormAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 3) {\n    throw new Error('layerNorm requires at least 3 inputs.');\n  }\n\n  if (inputs[0].dataType !== DataType.float || inputs[1].dataType !== DataType.float) {\n    throw new Error('inputs should be float type');\n  }\n  const input: TensorView = inputs[0];\n  const skip: TensorView = inputs[1];\n  const gamma: TensorView = inputs[2];\n\n  if (input.dataType !== skip.dataType || input.dataType !== gamma.dataType) {\n    throw new Error('All inputs must have the same data type');\n  }\n\n  if (input.dims.length !== 3 && input.dims.length !== 2) {\n    throw new Error('Input must be 2D or 3D');\n  }\n\n  if (skip.dims.length !== 3 && skip.dims.length !== 2) {\n    throw new Error('Skip must be 2D or 3D');\n  }\n\n  const hiddenSize = input.dims[input.dims.length - 1];\n  const sequenceLength = input.dims[input.dims.length - 2];\n  if (skip.dims[skip.dims.length - 1] !== hiddenSize) {\n    throw new Error('Skip must have the same hidden size as input');\n  }\n  if (skip.dims[skip.dims.length - 2] !== sequenceLength) {\n    throw new Error('Skip must have the same sequence length as input');\n  }\n\n  if (gamma.dims.length !== 1) {\n    throw new Error('Gamma must be 1D');\n  }\n  if (gamma.dims[gamma.dims.length - 1] !== hiddenSize) {\n    throw new Error('Gamma must have the same hidden size as input');\n  }\n  if (inputs.length > 3) {\n    const beta: TensorView = inputs[3];\n    if (beta.dims.length !== 1) {\n      throw new Error('Beta must be 1D');\n    }\n    if (beta.dims[beta.dims.length - 1] !== hiddenSize) {\n      throw new Error('Beta must have the same hidden size as input');\n    }\n  }\n\n  if (inputs.length > 4) {\n    const bias: TensorView = inputs[4];\n    if (bias.dims.length !== 1) {\n      throw new Error('Bias must be 1D');\n    }\n    if (bias.dims[bias.dims.length - 1] !== hiddenSize) {\n      throw new Error('Bias must have the same hidden size as input');\n    }\n  }\n};\n\nconst createSkipLayerNormProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: SkipLayerNormAttributes, outputCount: number,\n     isTraining: boolean): ProgramInfo => {\n      const inputShape = inputs[0].dims;\n      const inputSize = ShapeUtil.size(inputShape);\n      const outputShape = inputShape;\n      const outputSize = inputSize;\n      const hiddenSize = inputShape.slice(-1)[0];\n      const meanInvStdDevDim = isTraining ? inputShape.slice(0, -1).concat(1) : [];\n      const hasBetaInput = inputs.length > 3;\n      const hasBiasInput = inputs.length > 4;\n      const dataType = tensorTypeToWsglStorageType(inputs[0].dataType);\n      const hasMeanOutput = isTraining && outputCount > 1;\n      const hasInvStdDevOutput = isTraining && outputCount > 2;\n      const hasInputSkipBiasSumOutput = outputCount > 3;\n      let bindingNumber = 0;\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n      const hiddenSize: u32 = ${hiddenSize};\n      const epsilon: f32 = ${attributes.epsilon};\n\n      @group(0) @binding(${bindingNumber++}) var<storage, read> x : array<${dataType}>;\n      @group(0) @binding(${bindingNumber++}) var<storage, read> skip : array<${dataType}>;\n      @group(0) @binding(${bindingNumber++}) var<storage, read> gamma : array<${dataType}>;\n      ${hasBetaInput ? `@group(0) @binding(${bindingNumber++}) var<storage, read> beta : array<${dataType}>;` : ''}\n      ${hasBiasInput ? `@group(0) @binding(${bindingNumber++}) var<storage, read> bias : array<${dataType}>;` : ''}\n      @group(0) @binding(${bindingNumber++}) var<storage, read_write> output : array<${dataType}>;\n      ${\n          hasMeanOutput ?\n              `@group(0) @binding(${bindingNumber++}) var<storage, read_write> meanOutput : array<${dataType}>;` :\n              ''}\n      ${\n          hasInvStdDevOutput ?\n              `@group(0) @binding(${bindingNumber++}) var<storage, read_write> invStdOutput : array<${dataType}>;` :\n              ''}\n      ${\n          hasInputSkipBiasSumOutput ?\n              `@group(0) @binding(${bindingNumber++}) var<storage, read_write> inputSkipBiasSum : array<${dataType}>;` :\n              ''}\n\n      ${shaderHelper.mainStart()}\n        ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize / hiddenSize)}\n        let offset = global_idx * hiddenSize;\n        var sum: f32 = 0.0;\n        var squareSum: f32 = 0.0;\n        for (var i: u32 = 0; i < hiddenSize; i++) {\n          let skipValue = skip[offset + i];\n          let biasValue = ${hasBiasInput ? 'bias[i]' : '0.0'};\n          let inputValue = x[offset + i];\n          let value = inputValue + skipValue + biasValue;\n          ${hasInputSkipBiasSumOutput ? 'inputSkipBiasSum[offset + i] = value;' : ''}\n          output[offset + i] = value;\n          sum += value;\n          squareSum += value * value;\n        }\n        let mean: f32 = sum / f32(hiddenSize);\n        let variance: f32 = sqrt(squareSum / f32(hiddenSize) - mean * mean + epsilon);\n        ${hasMeanOutput ? 'meanOutput[global_idx] = mean;' : ''}\n        ${hasInvStdDevOutput ? 'invStdOutput[global_idx] = 1.0 / variance;' : ''}\n        for (var i: u32 = 0; i < hiddenSize; i++) {\n          output[offset + i] = (output[offset + i] - mean) / variance * gamma[i] + ${hasBetaInput ? 'beta[i]' : '0.0'};\n        }\n      }`;\n      const outputs = [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}];\n      if (outputCount > 1) {\n        outputs.push({dims: meanInvStdDevDim, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\n      }\n      if (outputCount > 2) {\n        outputs.push({dims: meanInvStdDevDim, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\n      }\n      if (outputCount > 3) {\n        outputs.push({dims: inputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\n      }\n\n      return {\n        ...metadata,\n        getShaderSource,\n        outputs,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / hiddenSize / 64)})\n      };\n    };\n\nconst createSkipLayerNormProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: SkipLayerNormAttributes, outputCount: number, isTraining: boolean):\n        ProgramInfoLoader => {\n          const inputTypes = new Array(inputs.length).fill(GpuDataType.default);\n          const metadata: ProgramMetadata = {\n            name: 'SkipLayerNormalization',\n            inputTypes,\n            cacheHint: attributes.cacheKey,\n          };\n          return {\n            ...metadata,\n            get: () => createSkipLayerNormProgramInfo(metadata, inputs, attributes, outputCount, isTraining)\n          };\n        };\n\nexport const skipLayerNorm = (context: ComputeContext, attributes: SkipLayerNormAttributes): void => {\n  // TODO: initialize isTraining from ComputeContext\n  const isTraining = false;\n  validateInputs(context.inputs);\n  // Mean and InvStdDev are only used in training mode and are not required for inference.\n  // They are added here for completeness only.\n  const outputs = [0];\n  if (context.outputCount > 1) {\n    outputs.push(isTraining ? 1 : -3);\n  }\n  if (context.outputCount > 2) {\n    outputs.push(isTraining ? 2 : -3);\n  }\n  if (context.outputCount > 3) {\n    outputs.push(3);\n  }\n  context.compute(\n      createSkipLayerNormProgramInfoLoader(context.inputs, attributes, context.outputCount, isTraining), {outputs});\n};\n\nexport const parseSkipLayerNormAttributes = (attributes: Record<string, unknown>): SkipLayerNormAttributes => {\n  const epsilon = attributes.epsilon as number;\n  return createAttributeWithCacheKey({epsilon});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata, TensorInfo} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly starts: number[];\n  readonly ends: number[];\n  readonly axes: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[], attributes: SliceAttributes): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n  if (attributes.axes.length !== 0) {\n    if (attributes.axes.length !== attributes.starts.length || attributes.axes.length !== attributes.ends.length) {\n      throw new Error('axes, starts and ends must have the same length');\n    }\n  } else if (attributes.starts.length !== attributes.ends.length) {\n    throw new Error('starts and ends must have the same length');\n  }\n  inputs.slice(1).forEach((_, idx) => {\n    if (inputs[idx + 1].dataType !== DataType.int32 && inputs[idx + 1].dataType !== DataType.int64) {\n      throw new Error(`Input ${idx} must be an array of int32 or int64`);\n    }\n  });\n};\n\nconst readInput = (inputs: readonly TensorView[], idx: number): number[] => {\n  const input: number[] = [];\n  if (inputs.length > idx) {\n    if (inputs[idx].dataType === DataType.int64) {\n      inputs[idx].getBigInt64Array().forEach(v => input.push(Number(v)));\n    } else if (inputs[idx].dataType === DataType.int32) {\n      inputs[idx].getInt32Array().forEach(v => input.push(Number(v)));\n    } else {\n      throw new Error(`Input ${idx} must be an array of int32 or int64`);\n    }\n  }\n  return input;\n};\n\nconst createSliceAttributesFromInputs =\n    (inputs: readonly TensorView[], attributes: SliceAttributes): SliceAttributes => {\n      if (inputs.length > 1) {\n        const starts: number[] = readInput(inputs, 1);\n        const ends: number[] = readInput(inputs, 2);\n        let axes: number[] = readInput(inputs, 3);\n        if (axes.length === 0) {\n          axes = [...Array(inputs[0].dims.length).keys()];\n        }\n        return createAttributeWithCacheKey({starts, ends, axes});\n      } else {\n        return attributes;\n      }\n    };\n\nconst fixStartEndValues =\n    (value: number, index: number, inputShape: readonly number[], axes: readonly number[], steps: readonly number[]):\n        number => {\n          let newValue = value;\n          if (value < 0) {\n            newValue += inputShape[axes[index]];\n          }\n          if (steps[index] < 0) {\n            return Math.max(0, Math.min(newValue, inputShape[axes[index]] - 1));\n          } else {\n            return Math.max(0, Math.min(newValue, inputShape[axes[index]]));\n          }\n        };\n\nconst calculateInputIndicesImpl =\n    (input: IndicesHelper, output: IndicesHelper, inputShape: readonly number[], outputShape: readonly number[]):\n        string => `fn calculateInputIndices(outputIndices: ${output.type.indices}) -> ${input.type.indices} {\n          var inputIndices: ${input.type.indices};\n          var carry = 0u;\n          for (var i = ${inputShape.length}; i >= 0; i--) {\n            var outputIndex = ${outputShape.length === 1 ? 'outputIndices' : 'outputIndices[i]'};\n            var inputIndex = outputIndex * steps[i] + starts[i] + carry;\n            carry = inputIndex / inputShape[i];\n            inputIndex = inputIndex % inputShape[i];\n            if (signs[i] < 0) {\n              inputIndex = inputShape[i] - inputIndex - 1u + starts[i];\n            }\n            ${inputShape.length === 1 ? 'inputIndices' : 'inputIndices[i]'} = inputIndex;\n          }\n          return inputIndices;\n      }`;\n\nconst createSliceProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: SliceAttributes): ProgramInfo => {\n      const inputShape = inputs[0].dims;\n      const inputSize = ShapeUtil.size(inputShape);\n      const axes = (attributes.axes.length > 0) ? ShapeUtil.normalizeAxes(attributes.axes, inputShape.length) :\n                                                  [...Array(inputShape.length).keys()];\n      let steps = readInput(inputs, 4);\n      steps.forEach((step) => step !== 0 || (() => {\n                                throw new Error('step cannot be 0');\n                              }));\n      if (steps.length === 0) {\n        steps = Array(axes.length).fill(1);\n      }\n      const starts = attributes.starts.map((start, i) => fixStartEndValues(start, i, inputShape, axes, steps));\n\n      const ends = attributes.ends.map((end, i) => fixStartEndValues(end, i, inputShape, axes, steps));\n\n      if (axes.length !== inputShape.length) {\n        for (let i = 0; i < inputShape.length; ++i) {\n          if (!axes.includes(i)) {\n            starts.splice(i, 0, 0);\n            ends.splice(i, 0, inputShape[i]);\n            steps.splice(i, 0, 1);\n          }\n        }\n      }\n      const signs = steps.map(step => Math.sign(step));\n      // Convert negative steps to positive steps and reverse starts and ends\n      steps.forEach((step, i, array) => {\n        if (step < 0) {\n          const numSteps = (ends[i] - starts[i]) / step;\n          const newEnd = starts[i];\n          const newStart = newEnd + numSteps * steps[i];\n          starts[i] = newStart;\n          ends[i] = newEnd;\n          array[i] = -step;\n        }\n      });\n\n      const outputShape = inputShape.slice(0);\n      axes.forEach((axis, _) => {\n        outputShape[axis] = Math.ceil((ends[axis] - starts[axis]) / steps[axis]);\n      });\n\n      const outputTensorInfo:\n          TensorInfo = {dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default};\n\n      const output = outputVariable('output', inputs[0].dataType, outputShape);\n      const input = inputVariable('input', inputs[0].dataType, inputShape);\n      const outputSize = ShapeUtil.size(outputShape);\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n      ${shaderHelper.declareVariables(input, output)}\n        const signs = array<i32, ${signs.length}>(${signs.map(i => `${i}i`).join(',')});\n        const starts = array<u32, ${starts.length}>(${starts.map(i => `${i}u`).join(',')});\n        const ends = array<u32, ${ends.length}>(${ends.map(i => `${i}u`).join(',')});\n        const steps = array<u32, ${steps.length}>(${steps.map(i => `${i}u`).join(',')});\n        const inputShape = array<u32, ${inputShape.length}>(${inputShape.map(i => `${i}u`).join(',')});\n\n        ${calculateInputIndicesImpl(input, output, inputShape, outputShape)}\n        ${shaderHelper.mainStart()}\n          ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n          let outputIndices = ${output.offsetToIndices('global_idx')};\n          let inputIndices = calculateInputIndices(outputIndices);\n          ${output.setByOffset('global_idx', input.getByIndices('inputIndices'))}\n      }`;\n      return {\n        ...metadata,\n        getShaderSource,\n        outputs: [outputTensorInfo],\n        dispatchGroup: () => ({x: Math.ceil(inputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createSliceProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: SliceAttributes): ProgramInfoLoader => {\n      const updatedAttributes = createSliceAttributesFromInputs(inputs, attributes);\n      const metadata: ProgramMetadata = {\n        name: 'Slice',\n        inputTypes: [GpuDataType.default],\n        cacheHint: updatedAttributes.cacheKey + (inputs.length > 4 ? 'steps_' + inputs[4].dims.toString() : '')\n      };\n      return {...metadata, get: () => createSliceProgramInfo(metadata, inputs, updatedAttributes)};\n    };\n\nexport const slice = (context: ComputeContext, attributes: SliceAttributes): void => {\n  validateInputs(context.inputs, attributes);\n  const programInfoLoader = createSliceProgramInfoLoader(context.inputs, attributes);\n  const program = programInfoLoader.get();\n  if (ShapeUtil.size(program.outputs[0].dims) > 0) {\n    context.compute(programInfoLoader, {inputs: [0]});\n  } else {\n    // TODO: support empty output\n    throw new Error('slice: output size is 0');\n  }\n};\n\nexport const parseSliceAttributes = (attributes: Record<string, unknown>): SliceAttributes => {\n  const starts = attributes.starts as number[];\n  const ends = attributes.ends as number[];\n  const axes = attributes.axes as number[];\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// TODO: this is the same naive implementation we use for reduce that has\n// performance limitations when the reduced axis is long. Need to add\n// a optimized codepath for this.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\n\nimport {ShaderHelper, tensorTypeToWsglStorageType} from './common';\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax op requires 1 input.');\n  }\n};\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const softmaxProgramMetadata = {\n  name: 'Softmax',\n  inputTypes: [GpuDataType.default]\n};\n\n\nconst createSoftmaxProgramInfo = (input: TensorView, attributes: SoftmaxAttributes): ProgramInfo => {\n  const dataType = tensorTypeToWsglStorageType(input.dataType);\n  const shape = input.dims;\n  const outputSize = ShapeUtil.size(shape);\n  const WG = 64;\n  let axis = attributes.axis;\n  if (axis < 0) {\n    axis = shape.length + axis;\n  }\n  if (axis < shape.length - 1) {\n    throw new Error('softmax only supports last axis for now.');\n  }\n\n  const cols = shape[axis];\n  const rows = outputSize / cols;\n\n  // 6.2.4 in wgsl spec\n  const threadMaxDecl = dataType === 'f32' ? 'var threadMax: f32 = -3.402823e+38f;' : 'var threadMax: f16 = -65504.0h;';\n  const getShaderSource = (_shaderHelper: ShaderHelper) => `\n      var<workgroup> rowMaxShared : ${dataType};\n      var<workgroup> rowSumShared : ${dataType};\n      var<workgroup> threadShared : array<${dataType}, ${WG}>;\n\n      @group(0) @binding(0) var<storage, read> x : array<${dataType}>;\n      @group(0) @binding(1) var<storage, read_write> result : array<${dataType}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${dataType} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${dataType}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n\n      @compute @workgroup_size(${WG}, 1, 1)\n      fn main(@builtin(local_invocation_id) local_id : vec3<u32>, @builtin(global_invocation_id) global_id : vec3u) {\n        let gindex = i32(global_id.x);\n        let lindex = i32(local_id.x);\n        const wg = ${WG};\n        let row = gindex / wg;\n        let cols = ${cols};\n        let row_stride : i32 = ${cols};\n\n        // find the rows max\n        ${threadMaxDecl}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = threadShared[0];\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum: ${dataType} = 0.0;\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = threadShared[0];\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;\n  return {\n    ...softmaxProgramMetadata,\n    outputs: [{dims: shape, dataType: input.dataType, gpuDataType: GpuDataType.default}],\n    getShaderSource,\n    dispatchGroup: () => ({x: rows})\n  };\n};\n\n\nexport const softmax = (context: ComputeContext, attributes: SoftmaxAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute({\n    ...softmaxProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    get: () => createSoftmaxProgramInfo(context.inputs[0], attributes)\n  });\n};\n\nexport const parseSoftmaxAttributes = (attributes: Record<string, unknown>): SoftmaxAttributes =>\n    createAttributeWithCacheKey({axis: attributes.axis as number});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata, TensorInfo} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly numOutputs: number;\n  readonly splitSizes: number[];\n}\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n};\n\nconst createSplitAttributesFromInputs =\n    (inputs: readonly TensorView[], attributes: SplitAttributes): SplitAttributes => {\n      const splitSizes: number[] = [];\n      let numOutputs: number = attributes.numOutputs;\n      if (inputs[1].dims[0] > 0) {\n        inputs[1].getBigInt64Array().forEach(v => splitSizes.push(Number(v)));\n        numOutputs = splitSizes.length;\n      }\n      return createAttributeWithCacheKey({numOutputs, axis: attributes.axis, splitSizes});\n    };\n\nconst calculateOutputIndexImpl = (numberOfTensors: number): string => `\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${numberOfTensors}u; i += 1u ) {\n    if (index < sizeInConcatAxis[i]) {\n        return i;\n    }\n    }\n    return ${numberOfTensors}u;\n}`;\nconst writeBufferDataImpl = (outputs: readonly IndicesHelper[]) => {\n  const numberOfTensors = outputs.length;\n  const codeLines: string[] = [];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    const returnSnippet = outputs[i].setByIndices('indices', 'input[global_idx]');\n    if (numberOfTensors === 1) {\n      codeLines.push(returnSnippet);\n    } else if (i === 0) {\n      codeLines.push(`if (outputNumber == ${i}u) { ${returnSnippet} }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(`else { ${returnSnippet} }`);\n    } else {\n      codeLines.push(`else if (outputNumber == ${i}) { ${returnSnippet} }`);\n    }\n  }\n  return `\n      fn writeBufferData(outputNumber: u32, indices: ${outputs[0].type.indices}, global_idx: u32) {\n        ${codeLines.join('\\n')}\n      }`;\n};\n\nconst createSplitProgramInfo =\n    (metadata: ProgramMetadata, inputs: readonly TensorView[], attributes: SplitAttributes): ProgramInfo => {\n      const inputShape = inputs[0].dims;\n      const inputSize = ShapeUtil.size(inputShape);\n      const dataType = inputs[0].dataType;\n      const rank = inputShape.length;\n      const axis = attributes.axis;\n      const adjustedAxis = (axis < 0) ? inputShape.length + axis : axis;\n      const outputs = new Array<IndicesHelper>(attributes.numOutputs);\n      const input = inputVariable('input', dataType, inputShape);\n      const sizeInConcatAxis = new Array<number>(attributes.numOutputs);\n      const outputsTensorInfo: TensorInfo[] = [];\n      const outputShapes: number[][] = [];\n      let previousSum = 0;\n      for (let i = 0; i < attributes.numOutputs; i++) {\n        previousSum += attributes.splitSizes[i];\n        sizeInConcatAxis[i] = previousSum;\n        const outputShape = inputShape.slice();\n        outputShape[attributes.axis] = attributes.splitSizes[i];\n        outputShapes.push(outputShape);\n        outputs[i] = outputVariable(`output${i}`, dataType, outputShapes[i]);\n        outputsTensorInfo.push({dims: outputShapes[i], dataType: inputs[0].dataType, gpuDataType: GpuDataType.default});\n      }\n      const indicesAxis = rank < 2 ? 'indices' : `indices[${adjustedAxis}]`;\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n  ${shaderHelper.declareVariables(input, ...outputs)}\n  const sizeInConcatAxis = array<u32, ${sizeInConcatAxis.length}>(${sizeInConcatAxis.map(i => `${i}u`).join(',')});\n  ${calculateOutputIndexImpl(sizeInConcatAxis.length)}\n  ${writeBufferDataImpl(outputs)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(inputSize)}\n\n    var indices = ${input.offsetToIndices('global_idx')};\n    let outputNumber = calculateOutputIndex(${indicesAxis});\n    if (outputNumber != 0) {\n        ${indicesAxis} -= sizeInConcatAxis[outputNumber - 1u];\n    }\n    writeBufferData(outputNumber, indices, global_idx);\n  }`;\n      return {\n        ...metadata,\n        getShaderSource,\n        outputs: outputsTensorInfo,\n        dispatchGroup: () => ({x: Math.ceil(inputSize / 64 /* workgroup size */)})\n      };\n    };\n\nconst createSplitProgramInfoLoader =\n    (inputs: readonly TensorView[], attributes: SplitAttributes): ProgramInfoLoader => {\n      const updatedAttributes = inputs.length === 1 ? attributes : createSplitAttributesFromInputs(inputs, attributes);\n      const metadata:\n          ProgramMetadata = {name: 'Split', inputTypes: [GpuDataType.default], cacheHint: updatedAttributes.cacheKey};\n      return {...metadata, get: () => createSplitProgramInfo(metadata, [inputs[0]], updatedAttributes)};\n    };\n\nexport const split = (context: ComputeContext, attributes: SplitAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute(createSplitProgramInfoLoader(context.inputs, attributes), {inputs: [0]});\n};\n\nexport const parseSplitAttributes = (attributes: Record<string, unknown>): SplitAttributes => {\n  const axis = attributes.axis as number;\n  const splitSizes: number[] = attributes.splitSizes as number[];\n  const numOutputs = attributes.numOutputs as number < 0 ? splitSizes.length : attributes.numOutputs as number;\n  if (numOutputs !== splitSizes.length) {\n    throw new Error('numOutputs and splitSizes lengh must be equal');\n  }\n  return createAttributeWithCacheKey({axis, numOutputs, splitSizes});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport const tileProgramMetadata = {\n  name: 'Tile',\n  inputTypes: [GpuDataType.default]\n};\n\nconst getRepeats = (repeatsTensorView: TensorView): readonly number[] =>\n    Array.from(repeatsTensorView.getBigInt64Array(), Number);\n\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 inputs.');\n  }\n\n  if (inputs[0].dataType !== DataType.float && inputs[0].dataType !== DataType.int32 &&\n      inputs[0].dataType !== DataType.uint32) {\n    throw new Error('Tile only support float, int32, and uint32 data types');\n  }\n\n  if (inputs[1].dataType !== DataType.int64) {\n    throw new Error('Tile `repeats` input should be of int64 data type');\n  }\n\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('Tile `repeats` input should be 1-D');\n  }\n\n  const repeats: readonly number[] = getRepeats(inputs[1]);\n\n  if (repeats.length !== inputs[0].dims.length) {\n    throw new Error('Tile `repeats` input should have same number of elements as rank of input data tensor');\n  }\n};\n\nconst getOutputShape = (inputShape: readonly number[], repeats: readonly number[]): readonly number[] => {\n  const outputShape: number[] = [];\n\n  for (let i = 0; i < inputShape.length; ++i) {\n    outputShape.push(inputShape[i] * repeats[i]);\n  }\n\n  return outputShape;\n};\n\nexport const createTileProgramInfo =\n    (tileProgramMetadata: ProgramMetadata, inputs: readonly TensorView[]): ProgramInfo => {\n      const inputShape = inputs[0].dims;\n      const repeats: readonly number[] = getRepeats(inputs[1]);\n      const outputShape = getOutputShape(inputShape, repeats);\n      const outputSize = ShapeUtil.size(outputShape);\n\n      const dataType = inputs[0].dataType;\n      const input = inputVariable('input', dataType, inputShape);\n      const output = outputVariable('output', dataType, outputShape);\n\n      const getShaderSource = (shaderHelper: ShaderHelper) => `\n      const inputShape = ${input.indices(...inputShape)};\n      ${shaderHelper.declareVariables(input, output)}\n      ${shaderHelper.mainStart()}\n      ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n      let outputIndices = ${output.offsetToIndices('global_idx')};\n      var inputIndices: ${input.type.indices};\n      for (var i = 0; i < ${inputShape.length}; i++) {\n        let inputDimValue = ${output.indicesGet('outputIndices', 'i')}  % ${input.indicesGet('inputShape', 'i')};\n\n        ${input.indicesSet('inputIndices', 'i', 'inputDimValue')}\n      }\n      ${output.setByOffset('global_idx', input.getByIndices('inputIndices'))}\n    }`;\n\n      return {\n        ...tileProgramMetadata,\n        outputs: [{dims: outputShape, dataType: inputs[0].dataType, gpuDataType: GpuDataType.default}],\n        getShaderSource,\n        dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n      };\n    };\n\nexport const tile = (context: ComputeContext): void => {\n  validateInputs(context.inputs);\n  const repeats: readonly number[] = getRepeats(context.inputs[1]);\n  const cacheHint = repeats.toString();\n  context.compute(\n      {...tileProgramMetadata, cacheHint, get: () => createTileProgramInfo(tileProgramMetadata, context.inputs)},\n      {inputs: [0]});\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../../tensor-view';\nimport {ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo} from '../types';\n\nimport {IndicesHelper, inputVariable, outputVariable, ShaderHelper} from './common';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nexport const transposeProgramMetadata = {\n  name: 'Transpose',\n  inputTypes: [GpuDataType.default]\n};\n\nconst validateInputs = (inputs: readonly TensorView[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n};\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] =>\n    (perm && perm.length !== inputShape.length) ? [...(inputShape.keys())].reverse() : perm;\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] =>\n    ShapeUtil.sortBasedOnPerm(inputShape, getAdjustedPerm(inputShape, perm));\n\nconst permFunctionBody = (perm: number[], rank: number, input: IndicesHelper, output: IndicesHelper): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`fn perm(i: ${output.type.indices}) -> ${input.type.indices} {\n    var a: ${input.type.indices};`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(input.indicesSet('a', perm[i], `i[${i}]`));\n  }\n  reverseFunc.push('return a;}');\n  return reverseFunc.join('\\n');\n};\n\nexport const createTransposeProgramInfo = (inputTensor: TensorView, permAttr: number[]): ProgramInfo => {\n  const dataType = inputTensor.dataType;\n  const inputShape = inputTensor.dims;\n  const perm = getAdjustedPerm(inputShape, permAttr);\n  const outputShape = getOutputShape(inputShape, perm);\n  const rank = inputShape.length;\n  const outputSize = ShapeUtil.size(outputShape);\n  // A dims=[${inputs[0].dims.toString()}]\n  // out Dims=[${unpackedOutputShape.toString()}]\n  // based on perm=[${perm.toString()}]\n\n  const output = outputVariable('output', dataType, outputShape);\n  const input = inputVariable('a', dataType, inputShape);\n\n  const getShaderSource = (shaderHelper: ShaderHelper) => `\n  ${shaderHelper.declareVariables(input, output)}\n\n  ${permFunctionBody(perm, rank, input, output)}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(outputSize)}\n\n    let indices = ${output.offsetToIndices('global_idx')};\n    let aIndices = perm(indices);\n\n    ${output.setByOffset('global_idx', input.getByIndices('aIndices'))}\n  }`;\n  return {\n    ...transposeProgramMetadata,\n    outputs: [{dims: outputShape, dataType: inputTensor.dataType, gpuDataType: GpuDataType.default}],\n    getShaderSource,\n    dispatchGroup: () => ({x: Math.ceil(outputSize / 64 /* workgroup size */)})\n  };\n};\n\nexport const transpose = (context: ComputeContext, attributes: TransposeAttributes): void => {\n  validateInputs(context.inputs);\n  context.compute({\n    ...transposeProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    get: () => createTransposeProgramInfo(context.inputs[0], attributes.perm)\n  });\n};\n\nexport const parseTransposeAttributes = (attributes: Record<string, unknown>): TransposeAttributes =>\n    createAttributeWithCacheKey({perm: attributes.perm as number[]});\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {DataType} from '../../../wasm-common';\nimport {TensorView} from '../../tensor-view';\nimport {MAX_CLIP, MIN_CLIP, ShapeUtil} from '../../util';\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../attribute-with-cache-key';\nimport {ComputeContext, GpuDataType, ProgramInfo, ProgramInfoLoader, ProgramMetadata} from '../types';\n\nimport {inputVariable, outputVariable, ShaderHelper, tensorTypeToWsglStorageType} from './common';\n\ntype BuiltinFunctionName = string;\ntype ElementwiseCustomExpression = (expression: string) => string;\ntype ElementwiseFunctionCall = BuiltinFunctionName|ElementwiseCustomExpression;\n\nconst createElementwiseProgramShader =\n    (shaderHelper: ShaderHelper, datasize: number, inputDataType: number, outputDataType: number,\n     funcCall: ElementwiseFunctionCall, additionalImplementation?: string): string => {\n      const vecSize = Math.ceil(datasize / 4);\n\n      let expression = '';\n      if (typeof funcCall === 'string') {\n        expression = `${funcCall}(a)`;\n      } else {\n        expression = funcCall('a');\n      }\n\n      const input = inputVariable('inputData', inputDataType, [vecSize], 4);\n      const output = outputVariable('outputData', outputDataType, [vecSize], 4);\n\n      return `\n  ${shaderHelper.declareVariables(input, output)}\n\n  ${additionalImplementation ?? ''}\n\n  ${shaderHelper.mainStart()}\n    ${shaderHelper.guardAgainstOutOfBoundsWorkgroupSizes(vecSize)}\n\n    let a = ${input.getByOffset('global_idx')};\n    ${output.setByOffset('global_idx', expression)}\n  }`;\n    };\n\nconst createElementwiseProgramInfo =\n    (metadata: ProgramMetadata, input: TensorView, outputDataType: number, funcCall: ElementwiseFunctionCall,\n     additionalImplementation?: string): ProgramInfo => ({\n      ...metadata,\n      getShaderSource: shaderHelper => createElementwiseProgramShader(\n          shaderHelper, ShapeUtil.size(input.dims), input.dataType, outputDataType, funcCall, additionalImplementation),\n      outputs: [{dims: input.dims, dataType: outputDataType, gpuDataType: GpuDataType.default}],\n      dispatchGroup: (inputTensors) =>\n          ({x: Math.ceil(ShapeUtil.size(inputTensors[0].dims) / 64 /* workgroup size */ / 4 /* vec size */)})\n    });\n\nconst createElementwiseProgramInfoLoader =\n    (input: TensorView, name: string, funcCall: ElementwiseFunctionCall, additionalImplementation?: string,\n     cacheKey?: string, outputDataType: number = input.dataType): ProgramInfoLoader => {\n      const metadata: ProgramMetadata = {name, inputTypes: [GpuDataType.default], cacheHint: cacheKey};\n      return {\n        ...metadata,\n        get: () => createElementwiseProgramInfo(metadata, input, outputDataType, funcCall, additionalImplementation)\n      };\n    };\n\nexport const abs = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Abs', 'abs'));\n};\n\nexport const acos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acos', 'acos'));\n};\n\nexport const acosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Acosh', 'acosh'));\n};\n\nexport const asin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asin', 'asin'));\n};\n\nexport const asinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Asinh', 'asinh'));\n};\n\nexport const atan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atan', 'atan'));\n};\nexport const atanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Atanh', 'atanh'));\n};\n\nexport interface CastAttributes extends AttributeWithCacheKey {\n  readonly to: number;\n  readonly saturate?: boolean;\n}\n\nexport const parseCastAttributes = (attributes: Record<string, unknown>): CastAttributes =>\n    createAttributeWithCacheKey(attributes as {to: number});\n\n\nexport const cast = (context: ComputeContext, attributes: CastAttributes): void => {\n  let func: ElementwiseFunctionCall;\n  switch (attributes.to) {\n    case DataType.float16:\n      func = 'vec4<f16>';\n      break;\n    case DataType.float:\n      func = 'vec4<f32>';\n      break;\n    case DataType.uint32:\n      func = 'vec4<u32>';\n      break;\n    case DataType.int32:\n      func = 'vec4<i32>';\n      break;\n    case DataType.bool:\n      func = 'vec4<bool>';\n      break;\n    default:\n      throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${attributes.to}`);\n  }\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Cast', func, undefined, attributes.cacheKey, attributes.to));\n};\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clipV10 = (context: ComputeContext, attributes: ClipAttributes): void => {\n  const dataType = tensorTypeToWsglStorageType(context.inputs[0].dataType);\n  context.compute(\n      createElementwiseProgramInfoLoader(\n          context.inputs[0], 'Clip', a => `clamp(${a}, clip_min_, clip_max_)`, `\n    const clip_min_: vec4<${dataType}> = vec4(${dataType}(${attributes.min}));\n    const clip_max_: vec4<${dataType}> = vec4(${dataType}(${attributes.max}));\n`,\n          attributes.cacheKey),\n      {inputs: [0]});\n};\nconst generateClipAttributesFromInputs = (inputs: readonly TensorView[]): ClipAttributes => {\n  const min = (inputs.length >= 2) ? inputs[1].getFloat32Array()[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].getFloat32Array()[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const clip = (context: ComputeContext): void => {\n  const attributes = generateClipAttributesFromInputs(context.inputs);\n  clipV10(context, attributes);\n};\n\nexport const ceil = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Ceil', 'ceil'));\n};\n\nexport const cos = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cos', 'cos'));\n};\n\nexport const cosh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Cosh', 'cosh'));\n};\n\nexport interface AlphaAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const parseAlphaAttributes = (attributes: Record<string, unknown>): AlphaAttributes =>\n    createAttributeWithCacheKey(attributes as {alpha: number});\n\nexport const elu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Elu', a => `elu_vf32(${a})`, `\n  const elu_alpha_: f32 = f32(${attributes.alpha});\n\n  fn elu_f32(a: f32) -> f32 {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,\n      attributes.cacheKey));\n};\n\nexport const erfImpl = (dataType: string, varType = 'f32') => `\nconst r0: ${varType} = 0.3275911;\nconst r1: ${varType} = 0.254829592;\nconst r2: ${varType} = -0.284496736;\nconst r3: ${varType} = 1.421413741;\nconst r4: ${varType} = -1.453152027;\nconst r5: ${varType} = 1.061405429;\n\nfn erf_vf32(v: ${dataType}) -> ${dataType} {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`;\n\nexport const erf = (context: ComputeContext): void => {\n  const dataType = tensorTypeToWsglStorageType(context.inputs[0].dataType);\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Erf', a => `erf_vf32(${a})`, erfImpl(`vec4<${dataType}>`, dataType)));\n};\n\nexport const exp = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Exp', 'exp'));\n};\n\nexport const floor = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Floor', 'floor'));\n};\n\nexport const gelu = (context: ComputeContext): void => {\n  const dataType = tensorTypeToWsglStorageType(context.inputs[0].dataType);\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Gelu', a => `0.5 * ${a} * (1.0 + erf_vf32(${a} * 0.7071067811865475))`,\n      erfImpl(`vec4<${dataType}>`, dataType)));\n};\n\nexport const leakyRelu = (context: ComputeContext, attributes: AlphaAttributes): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'LeakyRelu', a => `select(leaky_relu_alpha_ * ${a}, ${a}, ${a} >= vec4<f32>(0.0))`,\n      `const leaky_relu_alpha_: f32 = f32(${attributes.alpha});`, attributes.cacheKey));\n};\n\nexport const not = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Not', a => `!${a}`));\n};\n\nexport const neg = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Neg', a => `-${a}`));\n};\n\nexport const reciprocal = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Reciprocal', a => `1.0/${a}`));\n};\n\nexport const relu = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'Relu', a => `select(vec4<f32>(0.0), ${a}, ${a} > vec4<f32>(0.0))`));\n};\n\nexport const sigmoid = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sigmoid', a => `(1.0 / (1.0 + exp(-${a})))`));\n};\n\nexport const sin = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sin', 'sin'));\n};\n\nexport const sinh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sinh', 'sinh'));\n};\n\nexport const sqrt = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Sqrt', 'sqrt'));\n};\n\nexport const tan = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tan', 'tan'));\n};\n\nexport const tanh = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Tanh', 'tanh'));\n};\n\nexport const thresholdedRelu = (context: ComputeContext, attributes: AlphaAttributes): number => {\n  context.compute(createElementwiseProgramInfoLoader(\n      context.inputs[0], 'ThresholdedRelu', a => `select(vec4<f32>(0.0), ${a}, ${a} > thresholded_relu_alpha_)`,\n      `const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(${attributes.alpha});`, attributes.cacheKey));\n  return 0;\n};\n\nexport const log = (context: ComputeContext): void => {\n  context.compute(createElementwiseProgramInfoLoader(context.inputs[0], 'Log', 'log'));\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {tensorDataTypeEnumToString} from '../../wasm-common';\nimport {WebGpuBackend} from '../backend-webgpu';\nimport {LOG_DEBUG} from '../log';\nimport {TensorView} from '../tensor-view';\n\nimport {createShaderHelper} from './ops/common';\nimport {Artifact, GpuData, ProgramInfo} from './types';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  attributesBound: boolean;\n\n  constructor(private backend: WebGpuBackend) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputsTensorView: readonly TensorView[], inputs: GpuData[], outputs: GpuData[],\n      dispatchGroup: [number, number, number]): void {\n    const device = this.backend.device;\n    const computePassEncoder = this.backend.getComputePassEncoder();\n    const profilingEnabled = this.backend.supportTimestampQuery && this.backend.env.webgpu.profilingMode === 'default';\n    if (profilingEnabled) {\n      // profiling write start timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 0);\n    }\n\n    computePassEncoder.setPipeline(buildArtifact.computePipeline);\n    const entries = [];\n    for (const input of inputs) {\n      entries.push({binding: entries.length, resource: {buffer: input.buffer}});\n    }\n    for (const output of outputs) {\n      entries.push({binding: entries.length, resource: {buffer: output.buffer}});\n    }\n    const bindGroup = device.createBindGroup(\n        {layout: buildArtifact.computePipeline.getBindGroupLayout(0), entries, label: buildArtifact.programInfo.name});\n    computePassEncoder.setBindGroup(0, bindGroup);\n\n    computePassEncoder.dispatchWorkgroups(...dispatchGroup);\n\n    this.backend.pendingDispatchNumber++;\n\n    if (profilingEnabled) {\n      // profiling write end timestamp\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (computePassEncoder as any).writeTimestamp(this.backend.profilingQuerySet, 1);\n      if (this.backend.profilingQueryData == null) {\n        this.backend.profilingQueryData =\n            // eslint-disable-next-line no-bitwise\n            this.backend.gpuDataManager.create(16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE);\n      }\n      // eslint-disable-next-line no-bitwise\n      const syncData = this.backend.gpuDataManager.create(16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);\n\n      this.backend.endComputePass();\n      this.backend.getCommandEncoder().resolveQuerySet(\n          this.backend.profilingQuerySet, 0, 2, this.backend.profilingQueryData.buffer, 0);\n      this.backend.getCommandEncoder().copyBufferToBuffer(\n          this.backend.profilingQueryData.buffer, 0, syncData.buffer, 0, 16);\n      this.backend.flush();\n\n      const kernelId = this.backend.currentKernelId!;\n      const kernelInfo = this.backend.kernels.get(kernelId)!;\n      const kernelName = `[${kernelInfo[0]}] ${kernelInfo[1]}`;\n\n      syncData.buffer.mapAsync(GPUMapMode.READ).then(() => {\n        const mappedData = new BigUint64Array(syncData.buffer.getMappedRange());\n        const startTimeU64 = mappedData[0];\n        const endTimeU64 = mappedData[1];\n\n        syncData.buffer.unmap();\n\n        if (typeof this.backend.profilingTimeBase === 'undefined') {\n          this.backend.profilingTimeBase = startTimeU64;\n        }\n\n        const startTime = Number(startTimeU64 - this.backend.profilingTimeBase);\n        const endTime = Number(endTimeU64 - this.backend.profilingTimeBase);\n\n        if (!Number.isSafeInteger(startTime) || !Number.isSafeInteger(endTime)) {\n          throw new RangeError('incorrect timestamp range');\n        }\n\n        this.backend.gpuDataManager.release(syncData.id);\n        let inputShapes = '';\n        inputsTensorView.forEach((value, i) => {\n          inputShapes += `input[${i}]: [${value.dims}] | ${tensorDataTypeEnumToString(value.dataType)}, `;\n        });\n        let outputShapes = '';\n        buildArtifact.programInfo.outputs.forEach((value, i) => {\n          outputShapes += `output[${i}]: [${value.dims}] | ${tensorDataTypeEnumToString(value.dataType)}, `;\n        });\n        // eslint-disable-next-line no-console\n        console.log(`[profiling] kernel \"${kernelId}|${kernelName}\" ${inputShapes}${outputShapes}execution time: ${\n            endTime - startTime} ns`);\n      });\n    }\n\n    if (this.backend.pendingDispatchNumber >= 16) {\n      this.backend.flush();\n    }\n  }\n  dispose(): void {\n    // this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, normalizedDispatchGroupSize: [number, number, number]): Artifact {\n    const device = this.backend.device;\n    const extensions: string[] = [];\n    if (device.features.has('shader-f16')) {\n      extensions.push('enable f16;');\n    }\n    const shaderHelper = createShaderHelper(normalizedDispatchGroupSize);\n    const userCode = programInfo.getShaderSource(shaderHelper);\n    const code = `${extensions.join('\\n')}\\n${shaderHelper.additionalImplementations}\\n${userCode}`;\n    const shaderModule = device.createShaderModule({code, label: programInfo.name});\n    LOG_DEBUG('verbose', () => `[WebGPU] shader code: ${code}`);\n\n    const computePipeline = device.createComputePipeline(\n        {compute: {module: shaderModule, entryPoint: 'main'}, layout: 'auto', label: programInfo.name});\n\n    return {programInfo, computePipeline};\n  }\n\n  normalizeDispatchGroupSize(dispatchGroup: ReturnType<ProgramInfo['dispatchGroup']>): [number, number, number] {\n    const x = typeof dispatchGroup === 'number' ? dispatchGroup : dispatchGroup.x;\n    const y = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.y || 1);\n    const z = typeof dispatchGroup === 'number' ? 1 : (dispatchGroup.z || 1);\n    const limitPerDimension = this.backend.device.limits.maxComputeWorkgroupsPerDimension;\n    if (x <= limitPerDimension && y <= limitPerDimension && z <= limitPerDimension) {\n      return [x, y, z];\n    }\n    const size = x * y * z;\n    let dispatchAverage = Math.ceil(Math.sqrt(size));\n    if (dispatchAverage > limitPerDimension) {\n      dispatchAverage = Math.ceil(Math.cbrt(size));\n      if (dispatchAverage > limitPerDimension) {\n        throw new Error('Total dispatch size exceeds WebGPU maximum.');\n      }\n      return [dispatchAverage, dispatchAverage, dispatchAverage];\n    } else {\n      return [dispatchAverage, dispatchAverage, 1];\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {TensorView} from '../tensor-view';\n\nimport {ShaderHelper} from './ops/common';\n\nexport enum GpuDataType {\n  default = 0,\n  upload = 1,\n  profile = 2\n}\nexport type GpuDataId = number;\n\nexport interface GpuData {\n  type: GpuDataType;\n  id: GpuDataId;\n  buffer: GPUBuffer;\n}\n\nexport interface TensorInfo {\n  dims: readonly number[];\n  dataType: number;\n  gpuDataType: GpuDataType;\n}\n\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n\n  /**\n   * gpu data types for each input\n   */\n  inputTypes: GpuDataType[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for outputs\n   */\n  outputs: TensorInfo[];\n  /**\n   * the shader's processing source code\n   */\n  getShaderSource: (shaderHelper: ShaderHelper) => string;\n  /**\n   * default is \"main\"\n   */\n  // entryPoint: string;\n\n  dispatchGroup: (inputs: readonly TensorView[]) => {\n    x: number;\n    y?: number;\n    z?: number;\n  };\n}\n\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  computePipeline: GPUComputePipeline;\n}\n\nexport interface ComputeContextInputsOutputsMapping {\n  /**\n   * specify the mapping to the program's inputs. the value can be a number or a tensor view.\n   * - if it's a number, it's the index of the kernel's input\n   * - if it's a tensor view, it's an existing tensor view that will be used as the input\n   *\n   * if inputs is not specified, the mapping will be the kernel's inputs in order.\n   */\n  readonly inputs?: ReadonlyArray<TensorView|number>;\n  /**\n   * specify the mapping to the program's outputs. the value must be a number.\n   * - if it's a non-negative number, it's the index of the kernel's output\n   * - if it's -1, it's an output that will be created as a temporary value. this value will be released after\n   * the kernel is executed.\n   * - if it's -2, it's an output that will be created as a persistent value. this value will be released when the\n   * kernel is released.\n   *\n   * if outputs is not specified, the mapping will be the kernel's outputs in order.\n   */\n  readonly outputs?: readonly number[];\n}\n\n/**\n * A ComputeContext instance carries the states that representing the current running of a kernel.\n */\nexport interface ComputeContext {\n  /**\n   * stores the pointer to OpKernelContext\n   */\n  readonly opKernelContext: number;\n\n  /**\n   * a list of inputs, each input is an instance of TensorView\n   */\n  readonly inputs: readonly TensorView[];\n\n  /**\n   * a custom data object that can be used to store any data that is needed by the kernel\n   */\n  readonly kernelCustomData: {[key: string]: unknown};\n\n  /**\n   * a buffer that can be used to access custom data created each time the kernel is executed\n   */\n  readonly customDataBuffer: Uint8Array;\n\n  /**\n   * a number of outputs for the node\n   */\n  readonly outputCount: number;\n\n  compute(program: ProgramInfoLoader|ProgramInfo, inputsOutputsMapping?: ComputeContextInputsOutputsMapping):\n      TensorView[];\n  output(index: number, dims: readonly number[]): number;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initializeWebAssemblyInstance = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initializeRuntime = async(env: Env): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : env};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initRuntime(env);\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      checkLastError('Can\\'t create run options.');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initializeRuntime, releaseSession, run} from './proxy-wrapper';\n\nlet runtimeInitialized: boolean;\nlet runtimeInitializationPromise: Promise<void>|undefined;\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    if (response.status !== 200) {\n      throw new Error(`failed to load model: ${path}`);\n    }\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!runtimeInitialized) {\n      if (!runtimeInitializationPromise) {\n        runtimeInitializationPromise = initializeRuntime(env);\n      }\n      await runtimeInitializationPromise;\n      runtimeInitializationPromise = undefined;\n      runtimeInitialized = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              if (webnnOptions?.deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);\n                }\n              }\n              if (webnnOptions?.powerPreference) {\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported execution provider: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          checkLastError(`Can't append execution provider: ${epName}.`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      checkLastError('Can\\'t create session options.');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.freeDimensionOverrides) {\n      for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n        if (typeof name !== 'string') {\n          throw new Error(`free dimension override name must be a string: ${name}`);\n        }\n        if (typeof value !== 'number' || !Number.isInteger(value) || value < 0) {\n          throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n        }\n        const nameOffset = allocWasmString(name, allocs);\n        if (wasm._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n          checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);\n        }\n      }\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float16':\n          return Uint16Array;\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError} from './wasm-utils';\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const dataOffset = wasm.stackAlloc(8);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n    if (errorCode !== 0) {\n      checkLastError('Can\\'t get session input/output count.');\n    }\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError('Can\\'t initialize onnxruntime.');\n  }\n};\n\n/**\n * intialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async(env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    // init JSEP if available\n\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    const initJsep = require('./jsep/init').init;\n    await initJsep(getInstance(), env);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * allocate the memory and memcpy the model bytes, preparing for creating an instance of InferenceSession.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session using the prepared buffer containing the model data.\n * @param modelData a 2-elements tuple containing the pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNamesUTF8Encoded = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          checkLastError('Can\\'t create a session.');\n        }\n\n        const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n        const inputNames = [];\n        const outputNames = [];\n        for (let i = 0; i < inputCount; i++) {\n          const name = wasm._OrtGetInputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an input name.');\n          }\n          inputNamesUTF8Encoded.push(name);\n          inputNames.push(wasm.UTF8ToString(name));\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const name = wasm._OrtGetOutputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an output name.');\n          }\n          outputNamesUTF8Encoded.push(name);\n          outputNames.push(wasm.UTF8ToString(name));\n        }\n\n        activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n        return [sessionHandle, inputNames, outputNames];\n      } catch (e) {\n        inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n        outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n\n        if (sessionHandle !== 0) {\n          wasm._OrtReleaseSession(sessionHandle);\n        }\n        throw e;\n      } finally {\n        wasm._free(modelData[0]);\n        if (sessionOptionsHandle !== 0) {\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        }\n        allocs.forEach(alloc => wasm._free(alloc));\n      }\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputValues: number[] = [];\n  const inputAllocs: number[] = [];\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = inputs[i][0];\n      const dims = inputs[i][1];\n      const data = inputs[i][2];\n\n      let dataOffset: number;\n      let dataByteLength: number;\n\n      if (Array.isArray(data)) {\n        // string tensor\n        dataByteLength = 4 * data.length;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        let dataIndex = dataOffset / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== 'string') {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n        if (tensor === 0) {\n          checkLastError(`Can't create tensor for input[${i}].`);\n        }\n        inputValues.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    }\n\n    const beforeRunStack = wasm.stackSave();\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n    try {\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm.HEAPU32[outputValuesIndex++] = 0;\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n\n      // jsepOnRunStart is only available when JSEP is enabled.\n      wasm.jsepOnRunStart?.(sessionId);\n\n      // support RunOptions\n      let errorCode = wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n\n      const runPromise = wasm.jsepRunPromise;\n      if (runPromise) {\n        // jsepRunPromise is a Promise object. It is only available when JSEP is enabled.\n        //\n        // OrtRun() is a synchrnous call, but it internally calls async functions. Emscripten's ASYNCIFY allows it to\n        // work in this way. However, OrtRun() does not return a promise, so when code reaches here, it is earlier than\n        // the async functions are finished.\n        //\n        // To make it work, we created a Promise and resolve the promise when the C++ code actually reaches the end of\n        // OrtRun(). If the promise exists, we need to await for the promise to be resolved.\n        errorCode = await runPromise;\n      }\n\n      const jsepOnRunEnd = wasm.jsepOnRunEnd;\n      if (jsepOnRunEnd) {\n        // jsepOnRunEnd is only available when JSEP is enabled.\n        //\n        // it returns a promise, which is resolved or rejected when the following async functions are finished:\n        // - collecting GPU validation errors.\n        await jsepOnRunEnd(sessionId);\n      }\n\n      const output: SerializableTensor[] = [];\n\n      if (errorCode !== 0) {\n        checkLastError('failed to call OrtRun().');\n      }\n\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n        const beforeGetTensorDataStack = wasm.stackSave();\n        // stack allocate 4 pointer value\n        const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n        let type: Tensor.Type|undefined, dataOffset = 0;\n        try {\n          errorCode = wasm._OrtGetTensorData(\n              tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n          if (errorCode !== 0) {\n            checkLastError(`Can't access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i = 0; i < dimsLength; i++) {\n            dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n          }\n          wasm._OrtFree(dimsOffset);\n\n          const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n          type = tensorDataTypeEnumToString(dataType);\n          if (type === 'string') {\n            const stringData: string[] = [];\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < size; i++) {\n              const offset = wasm.HEAPU32[dataIndex++];\n              const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n            output.push([type, dims, data]);\n          }\n        } finally {\n          wasm.stackRestore(beforeGetTensorDataStack);\n          if (type === 'string' && dataOffset) {\n            wasm._free(dataOffset);\n          }\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n\n      return output;\n    } finally {\n      wasm.stackRestore(beforeRunStack);\n    }\n  } finally {\n    inputValues.forEach(v => wasm._OrtReleaseTensor(v));\n    inputAllocs.forEach(p => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach(p => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError('Can\\'t get an profile file name.');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nconst ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule> =\n    BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\n    ortWasmFactory;\n/* eslint-enable @typescript-eslint/no-require-imports */\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName.endsWith('.wasm')) {\n          if (wasmPathOverride) {\n            return wasmPathOverride;\n          }\n\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\n\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\n              return prefix + 'ort-wasm-simd.jsep.wasm';\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\n            }\n          }\n\n          return prefix + wasmFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const paramsOffset = wasm.stackAlloc(8);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.17.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n!function(){var e={3838:function(e,t,n){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}u((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},o=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},i=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.WebGpuBackend=void 0;var c=n(4955),u=n(7771),s=n(8510),l=n(8305),p=function(){function e(){this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.pendingDispatchNumber=0,this.supportTimestampQuery=!1}return Object.defineProperty(e.prototype,\\\"currentKernelCustomData\\\",{get:function(){if(null===this.currentKernelId)throw new Error(\\\"currentKernelCustomData(): currentKernelId is null. (should not happen)\\\");var e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e},enumerable:!1,configurable:!0}),e.prototype.initialize=function(e){return r(this,void 0,void 0,(function(){var t,n,r,o;return a(this,(function(a){switch(a.label){case 0:if(!navigator.gpu)throw new Error(\\\"WebGpuBackend: WebGPU is not available.\\\");return[4,navigator.gpu.requestAdapter()];case 1:if(!(t=a.sent()))throw new Error(\\\"WebGpuBackend: Failed to get GPU adapter.\\\");return this.env=e,n=[],r={requiredLimits:{maxComputeWorkgroupStorageSize:t.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:t.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:t.limits.maxStorageBufferBindingSize,maxBufferSize:t.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:t.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:t.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:t.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:t.limits.maxComputeWorkgroupSizeZ},requiredFeatures:n},t.features.has(\\\"timestamp-query-inside-passes\\\")&&(this.supportTimestampQuery=!0,n.push(\\\"timestamp-query-inside-passes\\\")),t.features.has(\\\"shader-f16\\\")&&n.push(\\\"shader-f16\\\"),o=this,[4,t.requestDevice(r)];case 2:return o.device=a.sent(),this.gpuDataManager=(0,u.createGpuDataManager)(this),this.programManager=new l.ProgramManager(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,(0,c.configureLogger)(e.logLevel,!!e.debug),this.device.onuncapturederror=function(e){e.error instanceof GPUValidationError&&console.error(\\\"An uncaught WebGPU validation error was raised: \\\".concat(e.error.message))},this.supportTimestampQuery&&(this.profilingQuerySet=this.device.createQuerySet({type:\\\"timestamp\\\",count:2})),Object.defineProperty(this.env.webgpu,\\\"device\\\",{value:this.device}),[2]}}))}))},e.prototype.dispose=function(){},e.prototype.getCommandEncoder=function(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder},e.prototype.getComputePassEncoder=function(){return this.computePassEncoder||(this.computePassEncoder=this.getCommandEncoder().beginComputePass()),this.computePassEncoder},e.prototype.endComputePass=function(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)},e.prototype.flush=function(){this.endComputePass(),this.device.queue.submit([this.getCommandEncoder().finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0},e.prototype.run=function(e,t,n,r,a){if(t.length!==e.inputTypes.length)throw new Error(\\\"Input size must be equal to \\\".concat(e.inputTypes.length,\\\".\\\"));for(var o=[],i=0;i<t.length;++i){if(!(h=this.gpuDataManager.get(t[i].data)))throw new Error(\\\"no GPU data for input: \\\".concat(t[i].data));o[i]=h}var u=function(e,t){var n=t.map((function(e){return\\\"\\\".concat(e.dataType,\\\";\\\").concat(e.dims.join(\\\",\\\"))})).join(\\\"|\\\"),r=e.name;return e.cacheHint&&(r+=\\\"[\\\"+e.cacheHint+\\\"]\\\"),r+\\\":\\\"+n}(e,t),s=this.programManager.getArtifact(u),l=s?s.programInfo:\\\"function\\\"==typeof e.get?e.get():e,p=0===n.length?l.outputs.map((function(e,t){return t})):n;if(p.length!==l.outputs.length)throw new Error(\\\"Output size \\\".concat(p.length,\\\" must be equal to \\\").concat(l.outputs.length,\\\".\\\"));var f=[],d=[];for(i=0;i<l.outputs.length;++i){if(!Number.isInteger(p[i])||p[i]<-3||p[i]>=l.outputs.length)throw new Error(\\\"Invalid output index: \\\".concat(p[i]));if(-3!==p[i]){var h,g=-1===p[i],m=-2===p[i],v=g||m?a(l.outputs[i].dataType,l.outputs[i].dims):r(p[i],l.outputs[i].dataType,l.outputs[i].dims);if(!(h=this.gpuDataManager.get(v.data)))throw new Error(\\\"no GPU data for output: \\\".concat(v.data));if(g&&this.temporaryData.push(h),m){var y=this.kernelPersistentData.get(this.currentKernelId);y||(y=[],this.kernelPersistentData.set(this.currentKernelId,y)),y.push(h)}f.push(v),d.push(h)}}var b=this.programManager.normalizeDispatchGroupSize(l.dispatchGroup(t));return s||(s=this.programManager.build(l,b),this.programManager.setArtifact(u,s)),(0,c.LOG_DEBUG)(\\\"info\\\",(function(){return'[ProgramManager] run \\\"'.concat(l.name,'\\\" (key=').concat(u,\\\") with \\\").concat(b[0],\\\"x\\\").concat(b[1],\\\"x\\\").concat(b[2])})),this.programManager.run(s,t,o,d,b),f},e.prototype.upload=function(e,t){this.gpuDataManager.upload(e,t)},e.prototype.memcpy=function(e,t){this.gpuDataManager.memcpy(e,t)},e.prototype.download=function(e,t){return r(this,void 0,void 0,(function(){var n,r;return a(this,(function(a){switch(a.label){case 0:return[4,this.gpuDataManager.download(e)];case 1:return n=a.sent(),(r=t()).set(new Uint8Array(n,0,r.byteLength)),[2]}}))}))},e.prototype.alloc=function(e){return this.gpuDataManager.create(e).id},e.prototype.free=function(e){return this.gpuDataManager.release(e)},e.prototype.createKernel=function(e,t,n,r){var a=s.WEBGPU_OP_RESOLVE_RULES.get(e);if(!a)throw new Error(\\\"kernel not implemented: \\\".concat(e));this.kernels.set(t,[e,r,a[0],[a[1],n]])},e.prototype.releaseKernel=function(e){var t,n,r=this.kernelPersistentData.get(e);if(r){try{for(var a=o(r),i=a.next();!i.done;i=a.next()){var c=i.value;this.gpuDataManager.release(c.id)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)},e.prototype.computeKernel=function(e,t,n){var r,a,u=this.kernels.get(e);if(!u)throw new Error(\\\"kernel not created: \\\".concat(e));var s=i(u,4),l=s[0],p=s[1],f=s[2],d=s[3];if(null!==this.currentKernelId)throw new Error('kernel \\\"['.concat(l,\\\"] \\\").concat(p,'\\\" is not allowed to be called recursively'));this.currentKernelId=e,d[0]&&(d[1]=d[0](d[1]),d[0]=void 0),(0,c.LOG_DEBUG)(\\\"info\\\",(function(){return'[WebGPU] Start to run kernel \\\"['.concat(l,\\\"] \\\").concat(p,'\\\"...')}));var h=this.env.debug;this.temporaryData=[];try{return h&&this.device.pushErrorScope(\\\"validation\\\"),f(t,d[1]),0}catch(e){return(0,c.LOG_DEBUG)(\\\"warning\\\",'[WebGPU] Kernel \\\"['.concat(l,\\\"] \\\").concat(p,'\\\" failed. Error: ').concat(e)),1}finally{h&&n.push(this.device.popErrorScope().then((function(e){return e?'GPU validation error for kernel \\\"['.concat(l,\\\"] \\\").concat(p,'\\\": ').concat(e.message):null})));try{for(var g=o(this.temporaryData),m=g.next();!m.done;m=g.next()){var v=m.value;this.gpuDataManager.release(v.id)}}catch(e){r={error:e}}finally{try{m&&!m.done&&(a=g.return)&&a.call(g)}finally{if(r)throw r.error}}this.temporaryData=[],this.currentKernelId=null}},e}();t.WebGpuBackend=p},7675:function(e,t,n){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}u((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.init=void 0;var o=n(7917),i=n(3838),c=n(4955),u=n(6952),s=function(){function e(e,t,n,r){this.module=e,this.dataType=t,this.data=n,this.dims=r}return e.prototype.getFloat32Array=function(){if(1!==this.dataType)throw new Error(\\\"Invalid data type\\\");var e=u.ShapeUtil.size(this.dims);return 0===e?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,e)},e.prototype.getBigInt64Array=function(){if(7!==this.dataType)throw new Error(\\\"Invalid data type\\\");var e=u.ShapeUtil.size(this.dims);return 0===e?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,e)},e.prototype.getInt32Array=function(){if(6!==this.dataType)throw new Error(\\\"Invalid data type\\\");var e=u.ShapeUtil.size(this.dims);return 0===e?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,e)},e.prototype.reshape=function(t){if(u.ShapeUtil.size(t)!==u.ShapeUtil.size(this.dims))throw new Error(\\\"Invalid new shape\\\");return new e(this.module,this.dataType,this.data,t)},e}(),l=function(){function e(e,t,n){this.module=e,this.backend=t,this.customDataOffset=0,this.customDataSize=0;var r=e.HEAPU32,a=n>>2;this.opKernelContext=r[a++];var o=r[a++];this.outputCount=r[a++],this.customDataOffset=r[a++],this.customDataSize=r[a++];for(var i=[],c=0;c<o;c++){for(var u=r[a++],l=r[a++],p=r[a++],f=[],d=0;d<p;d++)f.push(r[a++]);i.push(new s(e,u,l,f))}this.inputs=i}return Object.defineProperty(e.prototype,\\\"kernelCustomData\\\",{get:function(){return this.backend.currentKernelCustomData},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,\\\"customDataBuffer\\\",{get:function(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)},enumerable:!1,configurable:!0}),e.prototype.compute=function(e,t){var n,r,a,i=this,c=null!==(r=null===(n=null==t?void 0:t.inputs)||void 0===n?void 0:n.map((function(e){return\\\"number\\\"==typeof e?i.inputs[e]:e})))&&void 0!==r?r:this.inputs,l=null!==(a=null==t?void 0:t.outputs)&&void 0!==a?a:[];return this.backend.run(e,c,l,(function(e,t,n){return new s(i.module,t,i.output(e,n),n)}),(function(e,t){var n=(0,o.getTensorElementSize)(e);if(!n)throw new Error(\\\"Unsupported data type: \\\".concat(e));var r=n*u.ShapeUtil.size(t);return new s(i.module,e,i.backend.gpuDataManager.create(r).id,t)}))},e.prototype.output=function(e,t){var n=this.module.stackSave();try{var r=this.module.stackAlloc(4*(1+t.length)),a=r>>2;this.module.HEAPU32[a++]=t.length;for(var o=0;o<t.length;o++)this.module.HEAPU32[a++]=t[o];return this.module._JsepOutput(this.opKernelContext,e,r)}finally{this.module.stackRestore(n)}},e}();t.init=function(e,t){return r(void 0,void 0,void 0,(function(){var n,o;return a(this,(function(u){switch(u.label){case 0:if(!(n=e.jsepInit)||!navigator.gpu)return[3,2];if(!t.wasm.simd)throw new Error(\\\"Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using WebGPU EP\\\");return[4,(o=new i.WebGpuBackend).initialize(t)];case 1:u.sent(),n({backend:o},(function(e){return o.alloc(e)}),(function(e){return o.free(e)}),(function(t,n,r,a){if(void 0===a&&(a=!1),a)(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] jsepCopyGpuToGpu: src=\\\".concat(t,\\\", dst=\\\").concat(n,\\\", size=\\\").concat(r)})),o.memcpy(t,n);else{(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] jsepCopyCpuToGpu: dataOffset=\\\".concat(t,\\\", gpuDataId=\\\").concat(n,\\\", size=\\\").concat(r)}));var i=e.HEAPU8.subarray(t,t+r);o.upload(n,i)}}),(function(t,n,i){return r(void 0,void 0,void 0,(function(){return a(this,(function(r){switch(r.label){case 0:return(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] jsepCopyGpuToCpu: gpuDataId=\\\".concat(t,\\\", dataOffset=\\\").concat(n,\\\", size=\\\").concat(i)})),[4,o.download(t,(function(){return e.HEAPU8.subarray(n,n+i)}))];case 1:return r.sent(),[2]}}))}))}),(function(n,r,a){return o.createKernel(n,r,a,t.debug||\\\"default\\\"===t.webgpu.profilingMode?e.UTF8ToString(e._JsepGetNodeName(r)):\\\"\\\".concat(r))}),(function(e){return o.releaseKernel(e)}),(function(t,n,r){(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] jsepRun: sessionId=\\\".concat(r.sessionId,\\\", kernel=\\\").concat(t,\\\", contextDataOffset=\\\").concat(n)}));var a=new l(e,o,n);return o.computeKernel(t,a,r.errors)})),u.label=2;case 2:return[2]}}))}))}},4955:function(e,t,n){\\\"use strict\\\";var r=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},a=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.LOG_DEBUG=t.LOG=t.configureLogger=void 0;var o,i,c=n(7917),u=[\\\"V\\\",\\\"I\\\",\\\"W\\\",\\\"E\\\",\\\"F\\\"];t.configureLogger=function(e,t){o=e,i=t},t.LOG=function(e,t){var n,r,a=(0,c.logLevelStringToEnum)(e);a>=(0,c.logLevelStringToEnum)(o)&&(n=a,r=\\\"function\\\"==typeof t?t():t,console.log(\\\"[\\\".concat(u[n],\\\",\\\").concat((new Date).toISOString(),\\\"]\\\").concat(r)))},t.LOG_DEBUG=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];i&&t.LOG.apply(void 0,a([],r(e),!1))}},6952:function(e,t){\\\"use strict\\\";var n=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.MAX_CLIP=t.MIN_CLIP=t.GemmUtil=t.PoolConvUtil=t.ShapeUtil=t.BroadcastUtil=t.MatMulUtil=void 0;var r=function(){function e(){}return e.calcMatMulShape=function(e,t){return e[1]!==t[0]?void 0:[e[0],t[1]]},e}();t.MatMulUtil=r;var a=function(){function e(){}return e.calcShape=function(e,t,a){var o;void 0===a&&(a=!1);var i=e.length,c=t.length;if(0===i)return t;if(0===c)return e;var u=Math.max(e.length,t.length),s=new Array(u);if(a){if(i<2||c<2)return;var l=r.calcMatMulShape([e[i-2],e[i-1]],[t[c-2],t[c-1]]);if(void 0===l)return;o=n(l,2),s[u-2]=o[0],s[u-1]=o[1]}for(var p=a?3:1;p<=u;p++){var f=i-p<0?1:e[i-p],d=c-p<0?1:t[c-p];if(f!==d&&f>1&&d>1)return;s[u-p]=Math.max(f,d)}return s},e.isValidBroadcast=function(e,t){var n=e.length,r=t.length;if(n>r)return!1;for(var a=1;a<=n;a++)if(1!==e[n-a]&&e[n-a]!==t[r-a])return!1;return!0},e}();t.BroadcastUtil=a;var o=function(){function e(){}return e.size=function(t){return e.getSizeFromDimensionRange(t,0,t.length)},e.sizeFromDimension=function(t,n){if(n<0||n>t.length)throw new Error(\\\"invalid dimension of \\\".concat(n,\\\" for sizeFromDimension as Tensor has \\\").concat(t.length,\\\" dimensions.\\\"));return e.getSizeFromDimensionRange(t,n,t.length)},e.sizeToDimension=function(t,n){if(n<0||n>t.length)throw new Error(\\\"invalid dimension of \\\".concat(n,\\\" for sizeToDimension as Tensor has \\\").concat(t.length,\\\" dimensions.\\\"));return e.getSizeFromDimensionRange(t,0,n)},e.getSizeFromDimensionRange=function(e,t,n){for(var r=1,a=t;a<n;a++){if(e[a]<0)throw new Error(\\\"cannot get valid size from specified dimension range. Most likely the range contains negative values in them.\\\");r*=e[a]}return r},e.computeStrides=function(e){var t=e.length;if(0===t)return[];if(1===t)return[1];var n=new Array(t);n[t-1]=1,n[t-2]=e[t-1];for(var r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n},e.normalizeAxis=function(e,t){if(e<-t&&e>=t)throw new Error(\\\"unsupported axis for this operation.\\\");return e<0?e+t:e},e.normalizeAxes=function(e,t){var n=this;return e.map((function(r){return n.normalizeAxis(r,null!=t?t:e.length)}))},e.sortBasedOnPerm=function(e,t){return t?t.map((function(t){return e[t]})):e.slice().reverse()},e.padShape=function(e,t){var n=e.length;return e.map((function(e,r){return e+t[r]+t[r+n]}))},e.areEqual=function(e,t){return e.length===t.length&&e.every((function(e,n){return e===t[n]}))},e}();t.ShapeUtil=o;var i=function(){function e(){}return e.adjustPoolAttributes=function(e,t,n,r,a,o){if(!e&&n.length!==t.length-2)throw new Error(\\\"length of specified kernel shapes should be 2 less than length of input dimensions\\\");if(e)for(var i=0;i<t.length-2;i++)i>=n.length?n.push(t[i+2]):n[i]=t[i+2];for(i=0;i<n.length;i++)if(i<r.length){if(r[i]<0)throw new Error(\\\"strides should be greater than or equal to 1\\\")}else r.push(1);for(i=0;i<n.length;i++)if(i<a.length){if(a[i]<0)throw new Error(\\\"dilations should be greater than or equal to 1\\\")}else a.push(1);for(i=0;i<2*n.length;i++)if(i<o.length){if(o[i]<0)throw new Error(\\\"pad should be greater than or equal to 1\\\")}else o.push(0);for(i=0;i<n.length;i++){if(n[i]<=0)throw new Error(\\\"kernel shapes need to be greater than 0\\\");if(o[i]>=n[i]||o[i+n.length]>=n[i])throw new Error(\\\"pads should be smaller than kernel\\\")}},e.adjustPadsBasedOnAutoPad=function(t,n,r,a,o,i,c){if(c){if(o.length!==2*(t.length-2))throw new Error(\\\"length of pads should be twice the length of data dimensions\\\");if(n.length!==t.length-2)throw new Error(\\\"length of strides should be the length of data dimensions\\\");if(a.length!==t.length-2)throw new Error(\\\"length of kernel shapes should be the length of data dimensions\\\");for(var u=0;u<t.length-2;u++)e.adjustPadAndReturnShape(t[u+(i?1:2)],n[u],r[u],a[u],o,u,u+t.length-2,c)}},e.computePoolOutputShape=function(t,n,r,a,o,i,c){if(n.length<=0)throw new Error(\\\"input shape must be of size greater than 0\\\");var u=[n[0],n[1]];return e.computeShapeHelper(t,n,u,r,a,o,i,c),u},e.computeConvOutputShape=function(t,n,r,a,o,i,c){if(t.length<=0||n.length<=0)throw new Error(\\\"invalid input tensor dims or invalid filter tensor dims\\\");var u=[t[0],n[0]];return e.computeShapeHelper(!1,t,u,r,a,o,i,c),u},e.computeShapeHelper=function(t,n,r,a,o,i,c,u){if(t)for(var s=0;s<n.length-2;s++)r.push(1);else for(s=0;s<n.length-2;s++)r.push(e.adjustPadAndReturnShape(n[s+2],a[s],o[s],i[s],c,s,s+n.length-2,u))},e.adjustPadAndReturnShape=function(e,t,n,r,a,o,i,c){var u=n*(r-1)+1;if(!c||\\\"NOTSET\\\"===c)return Math.floor((e+a[o]+a[i]-u)/t+1);switch(c){case\\\"VALID\\\":return a[o]=0,a[i]=0,Math.floor((e-u)/t+1);case\\\"SAME_LOWER\\\":case\\\"SAME_UPPER\\\":if(1!==n)throw new Error(\\\"Dilation not supported for SAME_UPPER or SAME_LOWER\\\");var s=((e+t-1)/t-1)*t+r-e;return a[o]=\\\"SAME_LOWER\\\"===c?Math.floor((s+1)/2):Math.floor(s/2),a[i]=s-a[o],Math.floor((e+s-r)/t+1);default:throw new Error(\\\"Unsupported AutoPad type\\\")}},e}();t.PoolConvUtil=i;var c=function(){function e(){}return e.getShapeOfGemmResult=function(e,t,n,r,o){if(2!==e.length||2!==n.length)throw new Error(\\\"shape need to be of size 2\\\");var i,c,u;t?(i=e[1],c=e[0]):(i=e[0],c=e[1]);var s=-1;if(r?(u=n[0],s=1):(u=n[1],s=0),n[s]!==c)throw new Error(\\\"dimension mismatch\\\");if(i<=0||u<=0||c<=0)throw new Error(\\\"invalid shape specified\\\");if(o&&!a.isValidBroadcast(o,[i,u]))throw new Error(\\\"gemm: invalid bias shape for broadcast\\\");return[i,u,c]},e}();t.GemmUtil=c,t.MIN_CLIP=-34028234663852886e22,t.MAX_CLIP=34028234663852886e22},387:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createAttributeWithCacheKey=void 0;var n=function(){function e(e){Object.assign(this,e)}return Object.defineProperty(e.prototype,\\\"cacheKey\\\",{get:function(){var e=this;return this._cacheKey||(this._cacheKey=Object.getOwnPropertyNames(this).sort().map((function(t){return\\\"\\\".concat(e[t])})).join(\\\";\\\")),this._cacheKey},enumerable:!1,configurable:!0}),e}();t.createAttributeWithCacheKey=function(e){return new n(e)}},7771:function(e,t,n){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}u((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},o=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},i=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},c=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createGpuDataManager=void 0;var u=n(4955),s=n(1163),l=function(e){return 16*Math.ceil(e/16)},p=0,f=function(){function e(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[]}return e.prototype.upload=function(e,t){var n=t.buffer,r=t.byteOffset,a=t.byteLength,o=l(a),i=this.storageCache.get(e);if(!i)throw new Error(\\\"gpu data for uploading does not exist\\\");if(i.originalSize!==a)throw new Error(\\\"inconsistent data size. gpu data size=\\\".concat(i.originalSize,\\\", data size=\\\").concat(a));var c=this.backend.device.createBuffer({mappedAtCreation:!0,size:o,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),s=c.getMappedRange();new Uint8Array(s).set(new Uint8Array(n,r,a)),c.unmap();var p=this.backend.getCommandEncoder();this.backend.endComputePass(),p.copyBufferToBuffer(c,0,i.gpuData.buffer,0,o),(0,u.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] GpuDataManager.upload(id=\\\".concat(e,\\\")\\\")})),this.buffersForUploadingPending.push(c)},e.prototype.memcpy=function(e,t){var n=this.storageCache.get(e);if(!n)throw new Error(\\\"source gpu data for memcpy does not exist\\\");var r=this.storageCache.get(t);if(!r)throw new Error(\\\"destination gpu data for memcpy does not exist\\\");if(n.originalSize!==r.originalSize)throw new Error(\\\"inconsistent source and destination gpu data size\\\");var a=l(n.originalSize),o=this.backend.getCommandEncoder();this.backend.endComputePass(),o.copyBufferToBuffer(n.gpuData.buffer,0,r.gpuData.buffer,0,a)},e.prototype.create=function(e,t){void 0===t&&(t=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST);var n,r=l(e);if((t&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){var a=this.freeBuffers.get(r);a||(a=[],this.freeBuffers.set(r,a)),n=a.length>0?a.pop():this.backend.device.createBuffer({size:r,usage:t})}else n=this.backend.device.createBuffer({size:r,usage:t});var o={id:p++,type:s.GpuDataType.default,buffer:n};return this.storageCache.set(o.id,{gpuData:o,originalSize:e}),(0,u.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] GpuDataManager.create(size=\\\".concat(e,\\\") => id=\\\").concat(o.id)})),o},e.prototype.get=function(e){var t;return null===(t=this.storageCache.get(e))||void 0===t?void 0:t.gpuData},e.prototype.release=function(e){var t=this.storageCache.get(e);if(!t)throw new Error(\\\"releasing data does not exist\\\");return(0,u.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] GpuDataManager.release(id=\\\".concat(e,\\\"), gpuDataId=\\\").concat(t.gpuData.id)})),this.storageCache.delete(e),this.buffersPending.push(t.gpuData.buffer),t.originalSize},e.prototype.download=function(e){return r(this,void 0,void 0,(function(){var t,n,r,o;return a(this,(function(a){if(!(t=this.storageCache.get(e)))throw new Error(\\\"data does not exist\\\");return n=this.backend.getCommandEncoder(),this.backend.endComputePass(),r=l(t.originalSize),o=this.backend.device.createBuffer({size:r,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),n.copyBufferToBuffer(t.gpuData.buffer,0,o,0,r),this.backend.flush(),[2,new Promise((function(e){o.mapAsync(GPUMapMode.READ).then((function(){var t=o.getMappedRange().slice(0);o.destroy(),e(t)}))}))]}))}))},e.prototype.refreshPendingBuffers=function(){var e,t,n,r;try{for(var a=o(this.buffersForUploadingPending),i=a.next();!i.done;i=a.next())(s=i.value).destroy()}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=a.return)&&t.call(a)}finally{if(e)throw e.error}}this.buffersForUploadingPending=[];try{for(var c=o(this.buffersPending),u=c.next();!u.done;u=c.next()){var s;((s=u.value).usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE?this.freeBuffers.get(s.size).push(s):s.destroy()}}catch(e){n={error:e}}finally{try{u&&!u.done&&(r=c.return)&&r.call(c)}finally{if(n)throw n.error}}this.buffersPending=[]},e.prototype.dispose=function(){this.freeBuffers.forEach((function(e){e.forEach((function(e){e.destroy()}))})),this.storageCache.forEach((function(e){e.gpuData.buffer.destroy()})),this.storageCache=new Map,this.freeBuffers=new Map},e}();t.createGpuDataManager=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return new(f.bind.apply(f,c([void 0],i(e),!1)))}},8510:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.WEBGPU_OP_RESOLVE_RULES=void 0;var i=n(1868),c=o(n(504)),u=n(513),s=n(9770),l=n(7640),p=n(2771),f=n(8856),d=n(8405),h=n(9218),g=n(4271),m=n(1798),v=n(6145),y=n(1522),b=n(3053),w=o(n(5262)),S=n(6031),_=n(4566),x=n(8906),O=n(5101),T=n(6198),I=n(2067),A=n(8699),E=n(2625),C=o(n(9302));t.WEBGPU_OP_RESOLVE_RULES=new Map([[\\\"Abs\\\",[C.abs]],[\\\"Acos\\\",[C.acos]],[\\\"Acosh\\\",[C.acosh]],[\\\"Add\\\",[c.add]],[\\\"ArgMax\\\",[i.argMax,i.parseArgMinMaxAttributes]],[\\\"ArgMin\\\",[i.argMin,i.parseArgMinMaxAttributes]],[\\\"Asin\\\",[C.asin]],[\\\"Asinh\\\",[C.asinh]],[\\\"Atan\\\",[C.atan]],[\\\"Atanh\\\",[C.atanh]],[\\\"AveragePool\\\",[w.averagePool,w.parseAveragePoolAttributes]],[\\\"Cast\\\",[C.cast,C.parseCastAttributes]],[\\\"Ceil\\\",[C.ceil]],[\\\"ClipV10\\\",[C.clipV10]],[\\\"Clip\\\",[C.clip]],[\\\"Concat\\\",[u.concat,u.parseConcatAttributes]],[\\\"Conv\\\",[s.conv,s.parseConvAttributes]],[\\\"ConvTranspose\\\",[l.convTranspose,l.parseConvTransposeAttributes]],[\\\"Cos\\\",[C.cos]],[\\\"Cosh\\\",[C.cosh]],[\\\"Div\\\",[c.div]],[\\\"Einsum\\\",[p.einsum,p.parseEinsumAttributes]],[\\\"Elu\\\",[C.elu,C.parseAlphaAttributes]],[\\\"Equal\\\",[c.equal]],[\\\"Erf\\\",[C.erf]],[\\\"Exp\\\",[C.exp]],[\\\"Expand\\\",[f.expand]],[\\\"Floor\\\",[C.floor]],[\\\"Gather\\\",[d.gather,d.parseGatherAttributes]],[\\\"GatherElements\\\",[h.gatherElements,h.parseGatherElementsAttributes]],[\\\"Gelu\\\",[C.gelu]],[\\\"Gemm\\\",[g.gemm,g.parseGemmAttributes]],[\\\"GlobalAveragePool\\\",[w.globalAveragePool,w.parseGlobalAveragePoolAttributes]],[\\\"GlobalMaxPool\\\",[w.globalMaxPool,w.parseGlobalMaxPoolAttributes]],[\\\"Greater\\\",[c.greater]],[\\\"GreaterOrEqual\\\",[c.greaterOrEqual]],[\\\"InstanceNormalization\\\",[m.instanceNorm,m.parseInstanceNormAttributes]],[\\\"LayerNormalization\\\",[v.layerNorm,v.parseLayerNormAttributes]],[\\\"LeakyRelu\\\",[C.leakyRelu,C.parseAlphaAttributes]],[\\\"Less\\\",[c.less]],[\\\"LessOrEqual\\\",[c.lessOrEqual]],[\\\"Log\\\",[C.log]],[\\\"MatMul\\\",[y.matMul]],[\\\"MaxPool\\\",[w.maxPool,w.parseMaxPoolAttributes]],[\\\"Mul\\\",[c.mul]],[\\\"Neg\\\",[C.neg]],[\\\"Not\\\",[C.not]],[\\\"Pad\\\",[b.pad,b.parsePadAttributes]],[\\\"Pow\\\",[c.pow]],[\\\"Reciprocal\\\",[C.reciprocal]],[\\\"ReduceMin\\\",[S.reduceMin,S.parseReduceAttributes]],[\\\"ReduceMean\\\",[S.reduceMean,S.parseReduceAttributes]],[\\\"ReduceMax\\\",[S.reduceMax,S.parseReduceAttributes]],[\\\"ReduceSum\\\",[S.reduceSum,S.parseReduceAttributes]],[\\\"ReduceProd\\\",[S.reduceProd,S.parseReduceAttributes]],[\\\"ReduceL1\\\",[S.reduceL1,S.parseReduceAttributes]],[\\\"ReduceL2\\\",[S.reduceL2,S.parseReduceAttributes]],[\\\"ReduceLogSum\\\",[S.reduceLogSum,S.parseReduceAttributes]],[\\\"ReduceLogSumExp\\\",[S.reduceLogSumExp,S.parseReduceAttributes]],[\\\"ReduceSumSquare\\\",[S.reduceSumSquare,S.parseReduceAttributes]],[\\\"Relu\\\",[C.relu]],[\\\"Resize\\\",[_.resize,_.parseResizeAttributes]],[\\\"Sigmoid\\\",[C.sigmoid]],[\\\"Sin\\\",[C.sin]],[\\\"Sinh\\\",[C.sinh]],[\\\"Slice\\\",[O.slice,O.parseSliceAttributes]],[\\\"SkipLayerNormalization\\\",[x.skipLayerNorm,x.parseSkipLayerNormAttributes]],[\\\"Split\\\",[I.split,I.parseSplitAttributes]],[\\\"Sqrt\\\",[C.sqrt]],[\\\"Softmax\\\",[T.softmax,T.parseSoftmaxAttributes]],[\\\"Sub\\\",[c.sub]],[\\\"Tan\\\",[C.tan]],[\\\"Tanh\\\",[C.tanh]],[\\\"ThresholdedRelu\\\",[C.thresholdedRelu,C.parseAlphaAttributes]],[\\\"Tile\\\",[A.tile]],[\\\"Transpose\\\",[E.transpose,E.parseTransposeAttributes]]])},1427:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.biasActivationSnippet=t.activationFnSnippet=t.typeSnippet=void 0,t.typeSnippet=function(e){switch(e){case 1:return\\\"f32\\\";case 2:return\\\"vec2<f32>\\\";case 3:return\\\"vec3<f32>\\\";case 4:return\\\"vec4<f32>\\\";default:throw new Error(\\\"\\\".concat(e,\\\"-component is not supported.\\\"))}},t.activationFnSnippet=function(e,t,n,r){return void 0===t&&(t=!1),void 0===n&&(n=!1),void 0===r&&(r=3),\\\"\\\"},t.biasActivationSnippet=function(e,t){return\\\"\\\\n      \\\".concat(e?\\\"value = value + getBiasByOutputCoords(coords);\\\":\\\"\\\",\\\"\\\\n      \\\").concat(t?\\\"value = activation(value, coords);\\\":\\\"\\\",\\\"\\\\n      \\\")}},9456:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConv2DMatMulProgramInfo=void 0;var a=n(4955),o=n(6952),i=n(1163),c=n(1427),u=n(4085),s=n(158);t.createConv2DMatMulProgramInfo=function(e,t,n,l,p,f,d,h,g){var m=\\\"NHWC\\\"===n.format,v=m?e[0].dims[3]:e[0].dims[1],y=l[0],b=m?l[2]:l[3],w=m?l[1]:l[2],S=m?l[3]:l[1],_=m&&(v%4==0||v%3==0)&&S%4==0,x=m?S:b*w,O=m?b*w:S,T=[8,8,1],I=p<=8?[4,1,1]:[4,4,1],A=[Math.ceil(x/T[0]/I[0]),Math.ceil(O/T[1]/I[1]),Math.ceil(y/T[2]/I[2])];(0,a.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[conv2d_mm_webgpu] dispatch = \\\".concat(A)}));var E=_?m&&v%4!=0?3:4:I[0],C=T[1]*I[1],P=T[0]*I[0],k=Math.max(T[0]*E,T[1]),M=p%C==0,R=f%P==0,D=d%k==0,z=_?[E,4,4]:[1,1,1],B=[\\\"@group(0) @binding(0) var<storage, read> x: array<\\\".concat(_&&4===E?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\"),\\\"@group(0) @binding(1) var<storage, read> w: array<\\\".concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\")],G=\\\"\\\\n      fn setOutputAtIndex(flatIndex : i32, value : \\\".concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\") {\\\\n        result[flatIndex] = \\\").concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\"(value);\\\\n      }\\\\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : \\\").concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\") {\\\\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\\\\n        setOutputAtIndex(flatIndex \\\").concat(_?\\\"/ 4\\\":\\\"\\\",\\\", value);\\\\n      }\\\");return h&&(B.push(\\\"@group(0) @binding(2) var<storage, read> bias: array<\\\".concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\")),G+=\\\"\\\\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> \\\".concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\" {\\\\n          return bias[coords.\\\").concat(m?\\\"w\\\":\\\"y\\\").concat(_?\\\"/ 4\\\":\\\"\\\",\\\"];\\\\n        }\\\")),r(r({},t),{outputs:[{dims:l,dataType:e[0].dataType,gpuDataType:i.GpuDataType.default}],dispatchGroup:function(){return{x:A[0],y:A[1],z:A[2]}},getShaderSource:function(){return\\\"\\\\n        \\\".concat(u.utilFunctions,\\\"\\\\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\\\\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\\\\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\\\\n        \\\").concat(B.join(\\\"\\\"),\\\"\\\\n        @group(0) @binding(\\\").concat(B.length,\\\") var<storage, read_write> result: array<\\\").concat(_?\\\"vec4<f32>\\\":\\\"f32\\\",\\\">;\\\\n        //@group(0) @binding(\\\").concat(B.length+1,\\\") var<uniform> uniforms: Uniforms;\\\\n\\\\n        const xShape : vec4<i32> = vec4<i32>(\\\").concat(e[0].dims.join(\\\",\\\"),\\\");\\\\n        const wShape : vec4<i32> = vec4<i32>(\\\").concat(e[1].dims.join(\\\",\\\"),\\\");\\\\n        const outShape : vec4<i32> = vec4<i32>(\\\").concat(l.join(\\\",\\\"),\\\");\\\\n        const outShapeStrides : vec3<i32> = vec3<i32>(\\\").concat(o.ShapeUtil.computeStrides(l).slice(0,3).join(\\\",\\\"),\\\");\\\\n        const filterDims : vec2<i32> = vec2<i32>(\\\").concat(n.kernelShape[0],\\\", \\\").concat(n.kernelShape[1],\\\");\\\\n        const pad : vec2<i32> = vec2<i32>(\\\").concat(n.pads[0],\\\", \\\").concat(n.pads[1],\\\");\\\\n        const stride : vec2<i32> = vec2<i32>(\\\").concat(n.strides[0],\\\", \\\").concat(n.strides[1],\\\");\\\\n        const dilation : vec2<i32> = vec2<i32>(\\\").concat(n.dilations[0],\\\", \\\").concat(n.dilations[1],\\\");\\\\n        const dimAOuter : i32 = \\\").concat(p,\\\";\\\\n        const dimBOuter : i32 = \\\").concat(f,\\\";\\\\n        const dimInner : i32 = \\\").concat(d,\\\";\\\\n        \\\").concat(G,\\\"\\\\n        \\\").concat(function(e,t,n,r,a,o,i,u,s,l){void 0===a&&(a=!1),void 0===i&&(i=!1),void 0===u&&(u=4),void 0===s&&(s=4),void 0===l&&(l=4);var p=e?\\\"\\\\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\\\\n    \\\":\\\"\\\\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\\\\n    \\\",f=e?\\\"\\\\n    let coords = vec4<i32>(\\\\n      batch,\\\\n      row / outWidth,\\\\n      row % outWidth,\\\\n      col);\\\\n    \\\":\\\"\\\\n    let coords = vec4<i32>(\\\\n      batch,\\\\n      row,\\\\n      col / outWidth,\\\\n      col % outWidth);\\\\n    \\\",d=e?\\\"xShape[1]\\\":\\\"xShape[2]\\\",h=e?\\\"xShape[2]\\\":\\\"xShape[3]\\\",g=e?\\\"row\\\":\\\"col\\\",m=e?\\\"col\\\":\\\"row\\\",v=\\\"\\\\n    let inChannels = wShape[2];\\\\n    let outWidth = \\\".concat(e?\\\"outShape[2]\\\":\\\"outShape[3]\\\",\\\";\\\\n    let outRow = \\\").concat(g,\\\" / outWidth;\\\\n    let outCol = \\\").concat(g,\\\" % outWidth;\\\\n\\\\n    let WRow = \\\").concat(m,\\\" / (filterDims[1] * inChannels);\\\\n    let WCol = \\\").concat(m,\\\" / inChannels % filterDims[1];\\\\n    let xRow = outRow * stride[0] + dilation[0] * WRow - pad[0];\\\\n    let xCol = outCol * stride[1] + dilation[1] * WCol - pad[1];\\\\n    let xCh = \\\").concat(m,\\\" % inChannels;\\\\n    var resData = \\\").concat((0,c.typeSnippet)(u),\\\"(0.0);\\\\n    // The bounds checking is always needed since we use it to pad zero for\\\\n    // the 'same' padding type.\\\\n    if (xRow >= 0 && xRow < \\\").concat(d,\\\" && xCol >= 0 && xCol < \\\").concat(h,\\\") {\\\\n      \\\").concat(p,\\\"\\\\n      let xIndex = getIndexFromCoords4D(coord, xShape);\\\\n      \\\").concat(function(e){switch(e){case 1:return\\\"resData = x[xIndex];\\\";case 3:return\\\"resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);\\\";case 4:return\\\"resData = x[xIndex / 4];\\\";default:throw new Error(\\\"innerElementSize \\\".concat(e,\\\" is not supported.\\\"))}}(u),\\\"\\\\n    }\\\\n    return resData;\\\"),y=e?t&&r?\\\"\\\\n    let col = colIn * \\\".concat(u,\\\";\\\\n    \\\").concat(v):\\\"\\\\n    let col = colIn * \\\".concat(u,\\\";\\\\n    if (row < dimAOuter && col < dimInner) {\\\\n      \\\").concat(v,\\\"\\\\n    }\\\\n    return \\\").concat((0,c.typeSnippet)(u),\\\"(0.0);\\\"):r&&n?\\\"\\\\n    let col = colIn * \\\".concat(u,\\\";\\\\n    \\\").concat(v):\\\"\\\\n    let col = colIn * \\\".concat(u,\\\";\\\\n    if (row < dimInner && col < dimBOuter) {\\\\n      \\\").concat(v,\\\"\\\\n    }\\\\n    return \\\").concat((0,c.typeSnippet)(u),\\\"(0.0);\\\"),b=\\\"\\\".concat(function(e){switch(e){case 1:return\\\"return w[row * wShape[3] + colIn];\\\";case 4:return\\\"return w[row * wShape[3] / 4 + colIn];\\\";default:throw new Error(\\\"innerElementSize \\\".concat(e,\\\" is not supported.\\\"))}}(s)),w=(0,c.typeSnippet)(l),S=e?(0,c.typeSnippet)(u):(0,c.typeSnippet)(s),_=e?(0,c.typeSnippet)(s):(0,c.typeSnippet)(u);return\\\"\\\\n    \\\".concat((0,c.activationFnSnippet)(o,i,4===l,4),\\\"\\\\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> \\\").concat(S,\\\" {\\\\n      \\\").concat(e?y:b,\\\"\\\\n    }\\\\n\\\\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> \\\").concat(_,\\\" {\\\\n      \\\").concat(e?b:y,\\\"\\\\n    }\\\\n\\\\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : \\\").concat(w,\\\") {\\\\n      let col = colIn * \\\").concat(l,\\\";\\\\n      if (row < dimAOuter && col < dimBOuter)\\\\n      {\\\\n      var value = valueIn;\\\\n      let outWidth = \\\").concat(e?\\\"outShape[2]\\\":\\\"outShape[3]\\\",\\\";\\\\n      \\\").concat(f,\\\"\\\\n      \\\").concat((0,c.biasActivationSnippet)(a,o),\\\"\\\\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\\\\n      }\\\\n    }\\\")}(m,M,R,D,h,void 0,!1,z[0],z[1],z[2]),\\\"\\\\n            \\\").concat(_?(0,s.makeMatMulPackedVec4Source)(I,T,void 0,!m,k):(0,s.makeMatMulPackedSource)(I,T,void 0,!m,k,!1,void 0,g))}})}},6514:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConvTranspose2DProgramInfo=void 0;var i=n(4955),c=n(6952),u=n(1163),s=n(2075);t.createConvTranspose2DProgramInfo=function(e,t,n,l){var p=e.length>2,f=n.outputShape,d=c.ShapeUtil.size(f),h=[Math.ceil(d/64),1,1];return(0,i.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[conv2d_backprop_webgpu] dispatch = \\\".concat(h)})),r(r({},t),{outputs:[{dims:l?l(f):f,dataType:e[0].dataType,gpuDataType:u.GpuDataType.default}],dispatchGroup:function(){return{x:h[0],y:h[1],z:h[2]}},getShaderSource:function(t){return function(e,t,n,r,i,u,l){void 0===l&&(l=!1);var p=\\\"NHWC\\\"===n.format,f=p?1:2,d=p?2:3,h=p?3:1,g=c.ShapeUtil.size(r),m=l?2:1,v=n.group,y=t[1].dims,b=y[0]/v,w=y[1],S=\\\"\\\\n  fn setOutputAtIndex(flatIndex : u32, value : \\\".concat(l?\\\"vec4<f32>\\\":\\\"f32\\\",\\\") {\\\\n    result[flatIndex] = \\\").concat(l?\\\"vec4<f32>\\\":\\\"f32\\\",\\\"(value);\\\\n  }\\\");i&&(S+=\\\"\\\\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> \\\".concat(l?\\\"vec4<f32>\\\":\\\"f32\\\",\\\" {\\\\n      return bias[coords.\\\").concat(p?\\\"w\\\":\\\"y\\\").concat(l?\\\"/ 4\\\":\\\"\\\",\\\"];\\\\n    }\\\"));var _=l?4:1,x=(0,s.inputVariable)(\\\"W\\\",t[1].dataType,t[1].dims,_),O=(0,s.inputVariable)(\\\"Dy\\\",t[0].dataType,t[0].dims,_),T=[O,x];i&&T.push((0,s.inputVariable)(\\\"bias\\\",t[2].dataType,[r[h]],_));var I=(0,s.outputVariable)(\\\"result\\\",t[0].dataType,r,_),A=\\\"{\\\\n        let batch: u32 = \\\".concat(u?\\\"global_id.z\\\":\\\"workgroup_id.z\\\",\\\" / outShape[1];\\\\n        let r = \\\").concat(u?\\\"global_id.z\\\":\\\"workgroup_id.z\\\",\\\" % outShape[1];\\\\n        let c = \\\").concat(u?\\\"global_id.y\\\":\\\"workgroup_id.y\\\",\\\" * \\\").concat(m,\\\";\\\\n        let d1: u32 = \\\").concat(u?\\\"global_id.x\\\":\\\"workgroup_id.x\\\",\\\" * 4;\\\\n\\\\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(pads);\\\\n\\\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\\\n        // ? = to be determined. : = across all values in that axis.\\\\n        var dotProd: array<vec4<f32>, \\\").concat(m,\\\">;\\\\n        for (var i = 0; i < \\\").concat(m,\\\"; i++) {\\\\n          dotProd[i] = vec4<f32>(0.0);\\\\n        }\\\\n        for (var wR: u32 = 0; wR < filterDims[0]; wR = wR + 1) {\\\\n          var dyR = (f32(dyCorner.x) + f32(wR)) / f32(strides.x);\\\\n          let wRPerm = filterDims[0] - 1 - wR;\\\\n          if (dyR < 0.0 || dyR >= f32(outBackprop[1]) ||\\\\n              fract(dyR) > 0.0 || wRPerm < 0) {\\\\n            continue;\\\\n          }\\\\n          let idyR: u32 = u32(dyR);\\\\n\\\\n          for (var wC: u32 = 0; wC < filterDims[1]; wC = wC + 1) {\\\\n            let dyC = (f32(dyCorner.y) + f32(wC)) / f32(strides.y);\\\\n            let dyC2 = (f32(dyCorner.y) + 1.0 + f32(wC)) / f32(strides.y);\\\\n            let wCPerm = filterDims[1] - 1 - wC;\\\\n            if (wCPerm < 0) {\\\\n              continue;\\\\n            }\\\\n            var bDyCVal = true;\\\\n            var bDyCVal2 = true;\\\\n            if (dyC < 0.0 || dyC >= f32(outBackprop[2]) ||\\\\n                fract(dyC) > 0.0) {\\\\n              bDyCVal = false;\\\\n            }\\\\n            if (dyC2 < 0.0 || dyC2 >= f32(outBackprop[2]) ||\\\\n                fract(dyC2) > 0.0) {\\\\n              bDyCVal2 = false;\\\\n            }\\\\n\\\\n            let idyC: u32 = u32(dyC);\\\\n            let idyC2: u32 = u32(dyC2);\\\\n            if (bDyCVal && bDyCVal2) {\\\\n              let d2Length = outBackprop[3];\\\\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                let wValue0 = \\\").concat(x.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1\\\",\\\"d2\\\"),\\\";\\\\n                let wValue1 = \\\").concat(x.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 1\\\",\\\"d2\\\"),\\\";\\\\n                let wValue2 = \\\").concat(x.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 2\\\",\\\"d2\\\"),\\\";\\\\n                let wValue3 = \\\").concat(x.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 3\\\",\\\"d2\\\"),\\\";\\\\n\\\\n                var xValue = \\\").concat(O.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"),\\\";\\\\n                let tmpval = vec4<f32>(dot(xValue, wValue0),\\\\n                                      dot(xValue, wValue1),\\\\n                                      dot(xValue, wValue2),\\\\n                                      dot(xValue, wValue3));\\\\n                dotProd[0] = dotProd[0] + tmpval;\\\\n\\\\n                xValue =  \\\").concat(O.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC2\\\",\\\"d2\\\"),\\\";\\\\n\\\\n                dotProd[1] = dotProd[1] + vec4<f32>(dot(xValue, wValue0),\\\\n                                                    dot(xValue, wValue1),\\\\n                                                    dot(xValue, wValue2),\\\\n                                                    dot(xValue, wValue3));\\\\n              }\\\\n            } else if (bDyCVal) {\\\\n              let d2Length = outBackprop[\\\").concat(h,\\\"];\\\\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                let wValue0 = \\\").concat(x.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1\\\",\\\"d2\\\"),\\\";\\\\n                let wValue1 = \\\").concat(x.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 1\\\",\\\"d2\\\"),\\\";\\\\n                let wValue2 = \\\").concat(x.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 2\\\",\\\"d2\\\"),\\\";\\\\n                let wValue3 = \\\").concat(x.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 3\\\",\\\"d2\\\"),\\\";\\\\n\\\\n                var xValue = \\\").concat(O.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"d2\\\"),\\\";\\\\n                let tmpval = vec4<f32>(dot(xValue, wValue0),\\\\n                                      dot(xValue, wValue1),\\\\n                                      dot(xValue, wValue2),\\\\n                                      dot(xValue, wValue3));\\\\n                dotProd[0] = dotProd[0] + tmpval;\\\\n              }\\\\n            } else if (bDyCVal2) {\\\\n              let d2Length = outBackprop[3];\\\\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\\\\n                let wValue0 = \\\").concat(x.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1\\\",\\\"d2\\\"),\\\";\\\\n                let wValue1 = \\\").concat(x.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 1\\\",\\\"d2\\\"),\\\";\\\\n                let wValue2 = \\\").concat(x.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 2\\\",\\\"d2\\\"),\\\";\\\\n                let wValue3 = \\\").concat(x.get(\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\",\\\"d1 + 3\\\",\\\"d2\\\"),\\\";\\\\n\\\\n                var xValue = \\\").concat(O.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC2\\\",\\\"d2\\\"),\\\";\\\\n                let tmpval = vec4<f32>(dot(xValue, wValue0),\\\\n                                      dot(xValue, wValue1),\\\\n                                      dot(xValue, wValue2),\\\\n                                      dot(xValue, wValue3));\\\\n                dotProd[1] = dotProd[1] + tmpval;\\\\n              }\\\\n            }\\\\n          }\\\\n        }\\\\n\\\\n        for (var i: u32 = 0; i < \\\").concat(m,\\\"; i = i + 1) {\\\\n          let value = dotProd[i] + \\\").concat(i?\\\"bias[c+i]\\\":\\\"0.0\\\",\\\";\\\\n          \\\").concat(I.set(\\\"batch\\\",\\\"r\\\",\\\"c + i\\\",\\\"d1\\\",\\\"value\\\"),\\\";\\\\n        }\\\\n      }\\\"),E=\\\"\\\\n          let outputIndices = \\\".concat(I.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n          let batch = \\\").concat(I.indicesGet(\\\"outputIndices\\\",0),\\\";\\\\n          let d1 = \\\").concat(I.indicesGet(\\\"outputIndices\\\",h),\\\";\\\\n          let r = \\\").concat(I.indicesGet(\\\"outputIndices\\\",f),\\\";\\\\n          let c = \\\").concat(I.indicesGet(\\\"outputIndices\\\",d),\\\";\\\\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - pads;\\\\n          let dyRCorner = dyCorner.x;\\\\n          let dyCCorner = dyCorner.y;\\\\n          let groupId = d1 / \\\").concat(w,\\\";\\\\n          let wOutChannel = d1 - groupId * \\\").concat(w,\\\";\\\\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\\\n          // ? = to be determined. : = across all values in that axis.\\\\n          var dotProd = 0.0;\\\\n          for (var wR: u32 = 0; wR < effectiveFilterDims.x; wR = wR + 1) {\\\\n            if (wR % dilations.x != 0) {\\\\n              continue;\\\\n            }\\\\n            let dyR = (f32(dyRCorner) + f32(wR)) / f32(strides[0]);\\\\n            let wRPerm = filterDims.x - 1 - wR / dilations.x;\\\\n            if (dyR < 0.0 || dyR >= f32(outBackprop[\\\").concat(f,\\\"]) || fract(dyR) > 0.0 ||\\\\n                wRPerm < 0) {\\\\n              continue;\\\\n            }\\\\n            let idyR: u32 = u32(dyR);\\\\n\\\\n            for (var wC: u32 = 0; wC < effectiveFilterDims.y; wC = wC + 1) {\\\\n              if (wC % dilations.y != 0) {\\\\n                continue;\\\\n              }\\\\n              let dyC = (f32(dyCCorner) + f32(wC)) / f32(strides.y);\\\\n              let wCPerm = filterDims.y - 1 - wC / dilations.y;\\\\n              if (dyC < 0.0 || dyC >= f32(outBackprop[\\\").concat(d,\\\"]) ||\\\\n                  fract(dyC) > 0.0 || wCPerm < 0) {\\\\n                continue;\\\\n              }\\\\n              let idyC: u32 = u32(dyC);\\\\n\\\\n              for (var d2: u32 = 0; d2 < \\\").concat(b,\\\"; d2 = d2 + 1) {\\\\n                let inputChannel = groupId * \\\").concat(b,\\\" + d2;\\\\n                let xValue = \\\").concat(p?O.get(\\\"batch\\\",\\\"idyR\\\",\\\"idyC\\\",\\\"inputChannel\\\"):O.get(\\\"batch\\\",\\\"inputChannel\\\",\\\"idyR\\\",\\\"idyC\\\"),\\\";\\\\n                let wValue = \\\").concat(x.get(\\\"inputChannel\\\",\\\"wOutChannel\\\",\\\"u32(wRPerm)\\\",\\\"u32(wCPerm)\\\"),\\\";\\\\n                dotProd = dotProd + xValue * wValue;\\\\n              }\\\\n            }\\\\n          }\\\\n          let value = dotProd + \\\").concat(i?\\\"bias[d1]\\\":\\\"0.0\\\",\\\";\\\\n          \\\").concat(I.setByOffset(\\\"global_idx\\\",\\\"value\\\"),\\\";\\\\n        \\\");return\\\"\\\\n  \\\".concat(e.declareVariables.apply(e,o(o([],a(T),!1),[I],!1)),\\\"\\\\n  \\\").concat(S,\\\"\\\\n  const outShape : vec4<u32> = vec4<u32>(\\\").concat(r.join(\\\",\\\"),\\\");\\\\n  const outBackprop : vec4<u32> = vec4<u32>(\\\").concat(t[0].dims.join(\\\",\\\"),\\\");\\\\n  const strides : vec2<u32> = vec2<u32>(\\\").concat(n.strides[0],\\\", \\\").concat(n.strides[1],\\\");\\\\n  const filterDims : vec2<u32> = vec2<u32>(\\\").concat(n.kernelShape[p?1:2],\\\", \\\").concat(n.kernelShape[p?2:3],\\\");\\\\n  const dilations : vec2<u32> = vec2<u32>(\\\").concat(n.dilations[0],\\\", \\\").concat(n.dilations[1],\\\");\\\\n  const effectiveFilterDims : vec2<u32> = filterDims + vec2<u32>(\\\\n          \\\").concat(n.dilations[0]<=1?0:(n.kernelShape[p?1:2]-1)*(n.dilations[0]-1),\\\",\\\\n          \\\").concat(n.dilations[1]<=1?0:(n.kernelShape[p?2:3]-1)*(n.dilations[1]-1),\\\");\\\\n  const pads : vec2<i32> = vec2<i32>(i32(effectiveFilterDims[0]) - 1 - (\\\").concat(n.pads[0]+n.pads[2],\\\")/2,\\\\n                                     i32(effectiveFilterDims[1]) - 1 - (\\\").concat(n.pads[1]+n.pads[3],\\\")/2);\\\\n    \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(g),\\\";\\\\n  \\\").concat(l?A:E,\\\"}\\\")}(t,e,n,f,p,1===h[1]&&1===h[2])}})}},4085:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.utilFunctions=void 0,t.utilFunctions=\\\"\\\\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\\\\n  return dot(coords, vec4<i32>(\\\\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\\\\n}\\\\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\\\\n  return dot(coords, vec4<i32>(\\\\n    outShapeStrides.x, outShapeStrides.y, outShapeStrides.z, 1));\\\\n}\\\\n\\\"},158:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createMatmulProgramInfo=t.makeMatMulPackedSource=t.makeMatMulPackedVec4Source=void 0;var i=n(6952),c=n(1163),u=n(2075),s=n(3997),l=n(1427);t.makeMatMulPackedVec4Source=function(e,t,n,r,a,o,i){void 0===r&&(r=!1),void 0===a&&(a=32),void 0===o&&(o=!1),void 0===i&&(i=32);var c=t[1]*e[1],u=t[0]*e[0],s=r?c:a,l=r?a:c,p=s/t[0],f=a/t[1];if((!r||4!==p||4!==e[1])&&(r||3!==p&&4!==p)||s%t[0]!=0||a%t[1]!=0||4!==e[0])throw new Error(\\\"If transposeA \\\".concat(r,\\\" is true, innerElementSize \\\").concat(p,\\\" and workPerThread[1] \\\").concat(e[1],\\\" must be 4.\\\\n      Otherwise, innerElementSize \\\").concat(p,\\\" must be 3 or 4.\\\\n  tileAWidth \\\").concat(s,\\\" must be divisible by workgroupSize[0]\\\").concat(t[0],\\\". tileInner \\\").concat(a,\\\" must be divisible by workgroupSize[1] \\\").concat(t[1],\\\". colPerThread \\\").concat(e[0],\\\" must be 4.\\\"));return\\\"\\\\nvar<workgroup> mm_Asub : array<array<vec\\\".concat(p,\\\"<f32>, \\\").concat(s/p,\\\">, \\\").concat(l,\\\">;\\\\nvar<workgroup> mm_Bsub : array<array<vec4<f32>, \\\").concat(u/e[0],\\\">, \\\").concat(a,\\\">;\\\\n\\\\nconst rowPerThread = \\\").concat(e[1],\\\";\\\\nconst colPerThread = \\\").concat(e[0],\\\";\\\\nconst innerElementSize = \\\").concat(p,\\\";\\\\nconst tileInner = \\\").concat(a,\\\";\\\\n\\\\n@compute @workgroup_size(\\\").concat(t[0],\\\", \\\").concat(t[1],\\\", \\\").concat(t[2],\\\")\\\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\\\n  let localRow = i32(localId.y);\\\\n  let tileRow = localRow * rowPerThread;\\\\n  let tileCol = i32(localId.x);\\\\n\\\\n  let globalRow =i32(globalId.y) * rowPerThread;\\\\n  let globalCol = i32(globalId.x);\\\\n  let batch = \\\").concat(o?\\\"0\\\":\\\"i32(globalId.z)\\\",\\\";\\\\n  \\\").concat(n?\\\"let batchIndices = \\\".concat(n.offsetToIndices(\\\"u32(batch)\\\"),\\\";\\\"):\\\"\\\",\\\"\\\\n  let globalRowStart = i32(workgroupId.y) * \\\").concat(c,\\\";\\\\n\\\\n  let numTiles = \\\").concat(o?\\\"\\\".concat(Math.ceil(i/a)):\\\"(dimInner - 1) / tileInner + 1\\\",\\\";\\\\n  var kStart = \\\").concat(o?\\\"i32(globalId.z) * \\\".concat(i):\\\"0\\\",\\\";\\\\n\\\\n  var acc: array<vec4<f32>, rowPerThread>;\\\\n\\\\n  // Loop over shared dimension.\\\\n  let tileRowB = localRow * \\\").concat(f,\\\";\\\\n  for (var t = 0; t < numTiles; t = t + 1) {\\\\n      // Load one tile of A into local memory.\\\\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n          let inputRow = tileRow + innerRow;\\\\n          let inputCol = tileCol;\\\\n          \\\").concat(function(e,t){return e?\\\"\\\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n          kStart + inputRow,\\\\n          globalRowStart / innerElementSize + inputCol\\\".concat(t?\\\", batchIndices\\\":\\\"\\\",\\\");\\\\n        \\\"):\\\"\\\\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n          globalRow + innerRow,\\\\n          kStart / innerElementSize + inputCol\\\".concat(t?\\\", batchIndices\\\":\\\"\\\",\\\");\\\\n        \\\")}(r,n),\\\"\\\\n      }\\\\n\\\\n      // Load one tile of B into local memory.\\\\n      for (var innerRow = 0; innerRow < \\\").concat(f,\\\"; innerRow = innerRow + 1) {\\\\n          let inputRow = tileRowB + innerRow;\\\\n          let inputCol = tileCol;\\\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol\\\").concat(n?\\\", batchIndices\\\":\\\"\\\",\\\");\\\\n      }\\\\n      kStart = kStart + tileInner;\\\\n      workgroupBarrier();\\\\n\\\\n      // Compute acc values for a single thread.\\\\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\\\\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\\\\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\\\\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\\\\n          \\\").concat(3===p?\\\"\\\":\\\"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];\\\",\\\"\\\\n\\\\n          \\\").concat(function(e,t){return e?\\\"\\\\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\\\\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\\\\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\\\\n        \\\".concat(3===t?\\\"\\\":\\\"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];\\\",\\\"\\\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\\\n          acc[i] = BCached0 * ACached0[i] + acc[i];\\\\n          acc[i] = BCached1 * ACached1[i] + acc[i];\\\\n          acc[i] = BCached2 * ACached2[i] + acc[i];\\\\n          \\\").concat(3===t?\\\"\\\":\\\"acc[i] = BCached3 * ACached3[i] + acc[i];\\\",\\\"\\\\n        }\\\"):\\\"\\\\n        for (var i = 0; i < rowPerThread; i = i + 1) {\\\\n          let ACached = mm_Asub[tileRow + i][k];\\\\n          acc[i] = BCached0 * ACached.x + acc[i];\\\\n          acc[i] = BCached1 * ACached.y + acc[i];\\\\n          acc[i] = BCached2 * ACached.z + acc[i];\\\\n          \\\".concat(3===t?\\\"\\\":\\\"acc[i] = BCached3 * ACached.w + acc[i];\\\",\\\"\\\\n        }\\\")}(r,p),\\\"\\\\n      }\\\\n\\\\n      workgroupBarrier();\\\\n  }\\\\n\\\\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\\\\n  }\\\\n}\\\")};var p=function(e,t){return e?\\\"\\\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n              kStart + inputRow,\\\\n              globalRowStart + inputCol\\\".concat(t?\\\", batchIndices\\\":\\\"\\\",\\\");\\\\n            \\\"):\\\"\\\\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\\\\n              globalRowStart + inputRow,\\\\n              kStart + inputCol\\\".concat(t?\\\", batchIndices\\\":\\\"\\\",\\\");\\\\n            \\\")};t.makeMatMulPackedSource=function(e,t,n,r,a,o,i,c){void 0===r&&(r=!1),void 0===a&&(a=32),void 0===o&&(o=!1),void 0===i&&(i=32),void 0===c&&(c=!1);var u=e[1]*t[1],s=e[0]*t[0],l=r?u:a,f=r?a:u;if(f%t[1]!=0||l%t[0]!=0||a%t[1]!=0)throw new Error(\\\"tileAHight \\\".concat(f,\\\" must be divisible by workgroupSize[1]\\\").concat(t[1],\\\", tileAWidth \\\").concat(l,\\\" must be divisible by workgroupSize[0]\\\").concat(t[0],\\\", tileInner \\\").concat(a,\\\" must be divisible by workgroupSize[1]\\\").concat(t[1]));var d=f/t[1],h=l/t[0],g=a/t[1],m=c?\\\"\\\\n    let localRow = i32(localId.y);\\\\n    let localCol = i32(localId.x);\\\\n    let globalRowStart = i32(workgroupId.y) * \\\".concat(u,\\\";\\\\n    let globalColStart = i32(workgroupId.x) * \\\").concat(s,\\\";\\\\n\\\\n    // Loop over shared dimension.\\\\n    for (var t = 0; t < numTiles; t = t + 1) {\\\\n      // Load one tile of A into local memory.\\\\n      for (var inputRow = localRow; inputRow < \\\").concat(f,\\\"; inputRow = inputRow + \\\").concat(t[1],\\\") {\\\\n        for (var inputCol = localCol; inputCol < \\\").concat(l,\\\"; inputCol = inputCol + \\\").concat(t[0],\\\") {\\\\n          \\\").concat(p(r,n),\\\"\\\\n        }\\\\n      }\\\\n      // Load one tile of B into local memory.\\\\n      for (var inputRow = localRow; inputRow < \\\").concat(a,\\\"; inputRow = inputRow + \\\").concat(t[1],\\\") {\\\\n            for (var inputCol = localCol; inputCol < \\\").concat(s,\\\"; inputCol = inputCol + \\\").concat(t[0],\\\") {\\\\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\\\n            kStart + inputRow,\\\\n            globalColStart + inputCol\\\").concat(n?\\\", batchIndices\\\":\\\"\\\",\\\");\\\\n        }\\\\n      }\\\\n      kStart = kStart + tileInner;\\\\n      workgroupBarrier();\\\\n\\\\n      // Compute acc values for a single thread.\\\\n      var BCached : array<f32, colPerThread>;\\\\n      for (var k = 0; k < tileInner; k = k + 1) {\\\\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\\\n          BCached[inner] = mm_Bsub[k][localCol + inner * \\\").concat(t[0],\\\"];\\\\n        }\\\\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n          let ACached = \\\").concat(r?\\\"mm_Asub[k][localRow + innerRow * \\\".concat(t[1],\\\"];\\\"):\\\"mm_Asub[localRow + innerRow * \\\".concat(t[1],\\\"][k];\\\"),\\\"\\\\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\\\\n                ACached * BCached[innerCol];\\\\n          }\\\\n        }\\\\n      }\\\\n      workgroupBarrier();\\\\n    }\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      let gRow = globalRowStart + localRow + innerRow * \\\").concat(t[1],\\\";\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        let gCol = globalColStart + localCol + innerCol * \\\").concat(t[0],\\\";\\\\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\\\\n      }\\\\n    }\\\\n    \\\"):\\\"\\\\nlet tileRow = i32(localId.y) * rowPerThread;\\\\nlet tileCol = i32(localId.x) * colPerThread;\\\\n\\\\nlet globalRow = i32(globalId.y) * rowPerThread;\\\\nlet globalCol = i32(globalId.x) * colPerThread;\\\\nlet globalRowStart = i32(workgroupId.y) * \\\".concat(u,\\\";\\\\n\\\\nlet tileRowA = i32(localId.y) * \\\").concat(d,\\\";\\\\nlet tileColA = i32(localId.x) * \\\").concat(h,\\\";\\\\nlet tileRowB = i32(localId.y) * \\\").concat(g,\\\";\\\\n// Loop over shared dimension.\\\\nfor (var t = 0; t < numTiles; t = t + 1) {\\\\n  // Load one tile of A into local memory.\\\\n  for (var innerRow = 0; innerRow < \\\").concat(d,\\\"; innerRow = innerRow + 1) {\\\\n    for (var innerCol = 0; innerCol < \\\").concat(h,\\\"; innerCol = innerCol + 1) {\\\\n      let inputRow = tileRowA + innerRow;\\\\n      let inputCol = tileColA + innerCol;\\\\n      \\\").concat(p(r,n),\\\"\\\\n    }\\\\n  }\\\\n\\\\n  // Load one tile of B into local memory.\\\\n  for (var innerRow = 0; innerRow < \\\").concat(g,\\\"; innerRow = innerRow + 1) {\\\\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n      let inputRow = tileRowB + innerRow;\\\\n      let inputCol = tileCol + innerCol;\\\\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\\\\n        kStart + inputRow,\\\\n        globalCol + innerCol\\\").concat(n?\\\", batchIndices\\\":\\\"\\\",\\\");\\\\n    }\\\\n  }\\\\n  kStart = kStart + tileInner;\\\\n  workgroupBarrier();\\\\n\\\\n  // Compute acc values for a single thread.\\\\n  var BCached : array<f32, colPerThread>;\\\\n  for (var k = 0; k < tileInner; k = k + 1) {\\\\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\\\\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\\\\n    }\\\\n\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      \\\").concat(function(e){return e?\\\"let ACached = mm_Asub[k][tileRow + innerRow];\\\":\\\"let ACached = mm_Asub[tileRow + innerRow][k];\\\"}(r),\\\"\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\\\\n      }\\\\n    }\\\\n  }\\\\n\\\\n  workgroupBarrier();\\\\n}\\\\n\\\\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\\\\n        acc[innerRow][innerCol]);\\\\n  }\\\\n}\\\\n\\\");return\\\"\\\\n  var<workgroup> mm_Asub : array<array<f32, \\\".concat(l,\\\">, \\\").concat(f,\\\">;\\\\n  var<workgroup> mm_Bsub : array<array<f32, \\\").concat(s,\\\">, \\\").concat(a,\\\">;\\\\n  const rowPerThread = \\\").concat(e[1],\\\";\\\\n  const colPerThread = \\\").concat(e[0],\\\";\\\\n  const tileInner = \\\").concat(a,\\\";\\\\n\\\\n@compute @workgroup_size(\\\").concat(t[0],\\\", \\\").concat(t[1],\\\", \\\").concat(t[2],\\\")\\\\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\\\\n        @builtin(global_invocation_id) globalId : vec3<u32>,\\\\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\\\\n    let batch = \\\").concat(o?\\\"0\\\":\\\"i32(globalId.z)\\\",\\\";\\\\n    \\\").concat(n?\\\"let batchIndices = \\\".concat(n.offsetToIndices(\\\"u32(batch)\\\"),\\\";\\\"):\\\"\\\",\\\"\\\\n    let numTiles = \\\").concat(o?\\\"\\\".concat(Math.ceil(i/a)):\\\"(dimInner - 1) / tileInner + 1\\\",\\\";\\\\n    var kStart = \\\").concat(o?\\\"i32(globalId.z) * \\\".concat(i):\\\"0\\\",\\\";\\\\n\\\\n    var acc : array<array<f32, colPerThread>, rowPerThread>;\\\\n\\\\n    // Without this initialization strange values show up in acc.\\\\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\\\\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\\\\n        acc[innerRow][innerCol] = 0.0;\\\\n      }\\\\n    }\\\\n    \\\").concat(m,\\\"\\\\n  }\\\\n\\\")},t.createMatmulProgramInfo=function(e,n,p,f,d,h){void 0===h&&(h=!1);var g=n[0].dims,m=n[1].dims,v=g.slice(0,-2),y=m.slice(0,-2),b=d?d.slice(0,-2):f.slice(0,-2),w=(0,u.inputVariable)(\\\"batchDims\\\",n[0].dataType,b),S=[(0,u.inputVariable)(\\\"batchADims\\\",n[0].dataType,v),(0,u.inputVariable)(\\\"batchBDims\\\",n[0].dataType,y),w],_=i.ShapeUtil.size(b),x=g[g.length-2],O=g[g.length-1],T=m[m.length-1],I=O%4==0&&T%4==0,A=(0,s.getActicationSnippet)(p),E=A.activationFunction,C=A.applyActivation,P=x<=8?[4,1,1]:[4,4,1],k=[8,8,1],M=[Math.ceil(T/k[0]/P[0]),Math.ceil(x/k[1]/P[1]),Math.ceil(_/k[2]/P[2])],R=I?4:1,D=(0,u.inputVariable)(\\\"a\\\",n[0].dataType,o(o([],a(v),!1),[x,O/R],!1),R),z=(0,u.inputVariable)(\\\"b\\\",n[1].dataType,o(o([],a(y),!1),[O,T/R],!1),R),B=(0,u.outputVariable)(\\\"result\\\",n[0].dataType,[_,x,T/R],R);S.push(D),S.push(z),S.push(B);var G=[D,z],j=n.length>2,U=function(e,t,n,r,a){void 0===a&&(a=!1);var o=r[0],i=r[1],c=r[2],s=r[3],p=r[4],f=r[5],d=(0,u.getBroadcastDims)(o.shape,c.shape),h=(0,u.getBroadcastDims)(i.shape,c.shape);return\\\"\\\\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: \\\".concat(c.type.indices,\\\") -> \\\").concat((0,l.typeSnippet)(e),\\\" {\\\\n      var value = \\\").concat((0,l.typeSnippet)(e),\\\"(0.0);\\\\n      let col = colIn * \\\").concat(e,\\\";\\\\n      if(row < dimAOuter && col < dimInner)\\\\n      {\\\\n        \\\").concat(function(){for(var e=s.shape.length,t=c.shape.length,n=\\\"var aIndices: \\\".concat(s.type.indices,\\\";\\\"),r=e-2-1,a=t-1;r>=0;r--,a--)n+=\\\"\\\\naIndices[\\\".concat(r,\\\"] = \\\").concat(t>1?\\\"batchIndices[\\\".concat(a,\\\"]\\\"):\\\"batchIndices\\\",\\\";\\\");return d.forEach((function(e){n+=\\\"\\\\naIndices[\\\".concat(e,\\\"] = 0;\\\")})),n+=\\\"\\\\naIndices[\\\".concat(e-2,\\\"] = u32(row);\\\\n                   aIndices[\\\").concat(e-1,\\\"] = u32(colIn);\\\")}(),\\\"\\\\n        value = \\\").concat(s.getByIndices(\\\"aIndices\\\"),\\\";\\\\n      }\\\\n      return value;\\\\n    }\\\\n\\\\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: \\\").concat(c.type.indices,\\\") -> \\\").concat((0,l.typeSnippet)(e),\\\" {\\\\n      var value = \\\").concat((0,l.typeSnippet)(e),\\\"(0.0);\\\\n      let col = colIn * \\\").concat(e,\\\";\\\\n      if(row < dimInner && col < dimBOuter)\\\\n      {\\\\n        \\\").concat(function(){for(var e=p.shape.length,t=c.shape.length,n=\\\"var bIndices: \\\".concat(p.type.indices,\\\";\\\"),r=e-2-1,a=t-1;r>=0;r--,a--)n+=\\\"\\\\nbIndices[\\\".concat(r,\\\"] = \\\").concat(t>1?\\\"batchIndices[\\\".concat(a,\\\"]\\\"):\\\"batchIndices\\\",\\\";\\\");return h.forEach((function(e){n+=\\\"\\\\nbIndices[\\\".concat(e,\\\"] = 0;\\\")})),n+=\\\"\\\\nbIndices[\\\".concat(e-2,\\\"] = u32(row);\\\\n                   bIndices[\\\").concat(e-1,\\\"] = u32(colIn);\\\")}(),\\\"\\\\n        value = \\\").concat(p.getByIndices(\\\"bIndices\\\"),\\\";\\\\n      }\\\\n      return value;\\\\n    }\\\\n\\\\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: \\\").concat((0,l.typeSnippet)(e),\\\") {\\\\n      let col = colIn * \\\").concat(e,\\\";\\\\n      if (row < dimAOuter && col < dimBOuter) {\\\\n        var value = valueIn;\\\\n        let coords = vec3<i32>(batch, row, colIn);\\\\n        \\\").concat(t?\\\"value = value + \\\".concat(a?\\\"bias[colIn]\\\":\\\"\\\".concat((0,l.typeSnippet)(e),\\\"(bias[row])\\\"),\\\";\\\"):\\\"\\\",\\\"\\\\n        \\\").concat(n,\\\"\\\\n        \\\").concat(f.setByIndices(\\\"vec3<u32>(coords)\\\",\\\"value\\\"),\\\"\\\\n      }\\\\n    }\\\\n    \\\")}(R,j,C,S,h);if(j){var W=h?R:1;G.push((0,u.inputVariable)(\\\"bias\\\",n[2].dataType,n[2].dims,W))}return r(r({},e),{outputs:[{dims:f,dataType:n[0].dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const dimAOuter: i32 = \\\".concat(x,\\\";\\\\n  const dimBOuter: i32 = \\\").concat(T,\\\";\\\\n  const dimInner: i32 = \\\").concat(O,\\\";\\\\n  \\\").concat(e.declareVariables.apply(e,o(o([],a(G),!1),[B],!1)),\\\"\\\\n  \\\").concat(U,\\\"\\\\n  \\\").concat(E,\\\"\\\\n  \\\").concat(I?(0,t.makeMatMulPackedVec4Source)(P,k,w):(0,t.makeMatMulPackedSource)(P,k,w),\\\"\\\\n                   \\\").concat(w.impl())},dispatchGroup:function(){return{x:M[0],y:M[1],z:M[2]}}})}},1868:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseArgMinMaxAttributes=t.argMax=t.argMin=void 0;var a=n(387),o=n(1163),i=n(6031),c=function(e){if(!e||0===e.length||e.length>2)throw new Error(\\\"ArgMinMaxOp op requires 1 or 2 inputs.\\\");if(1!==e[0].dataType)throw new Error(\\\"Invalid input type.\\\")},u=function(e,t,n,c){var u=1===e.length?n:function(e,t){return(0,a.createAttributeWithCacheKey)({axis:t.axis,keepDims:t.keepDims,selectLastIndex:t.selectLastIndex})}(0,n),s=u.cacheKey+e.map((function(e){return e.dims.toString()})).join(\\\"_\\\"),l={name:t,inputTypes:[o.GpuDataType.default],cacheHint:s};return r(r({},l),{get:function(){return(0,i.createReduceProgramInfo)(l,[e[0]],c,[u.axis],7,u.keepDims)}})};t.argMin=function(e,t){c(e.inputs),e.compute(u(e.inputs,\\\"ArgMin\\\",t,(function(e,n,r){for(var a=[],o=0;o<e.shape.length;o++)(r.indexOf(o)>=0||0===r.length)&&a.push(\\\"inputIndices[\\\".concat(o,\\\"] = 0;\\\"));return[\\\"\\\".concat(a.join(\\\"\\\\n\\\")),\\\"var value = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\\nvar bestIndex : i32 = 0;\\\"),\\\"if (\\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\" \\\").concat(t.selectLastIndex>0?\\\"<=\\\":\\\"<\\\",\\\" value) {\\\\n         value = \\\").concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\\n         bestIndex = i32(lastIndex);\\\\n       }\\\"),\\\"\\\",n.setByOffset(\\\"global_idx\\\",\\\"bestIndex\\\")]})),{inputs:[0]})},t.argMax=function(e,t){c(e.inputs),e.compute(u(e.inputs,\\\"argMax\\\",t,(function(e,n,r){for(var a=[],o=0;o<e.shape.length;o++)(r.indexOf(o)>=0||0===r.length)&&a.push(\\\"inputIndices[\\\".concat(o,\\\"] = 0;\\\"));return[\\\"\\\".concat(a.join(\\\"\\\\n\\\")),\\\"var value = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\\nvar bestIndex : i32 = 0;\\\"),\\\"if (\\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\" \\\").concat(t.selectLastIndex>0?\\\">=\\\":\\\">\\\",\\\" value) {\\\\n         value = \\\").concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\\n         bestIndex = i32(lastIndex);\\\\n       }\\\"),\\\"\\\",n.setByOffset(\\\"global_idx\\\",\\\"bestIndex\\\")]})),{inputs:[0]})},t.parseArgMinMaxAttributes=function(e){return(0,a.createAttributeWithCacheKey)(e)}},504:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.lessOrEqual=t.greaterOrEqual=t.less=t.greater=t.sub=t.pow=t.mul=t.equal=t.div=t.add=void 0;var a=n(6952),o=n(1163),i=n(2075),c=function(e,t,n,c,u,s){var l={name:t,inputTypes:[o.GpuDataType.default,o.GpuDataType.default],cacheHint:u};return r(r({},l),{get:function(){return function(e,t,n,c,u,s){var l,p;void 0===s&&(s=t.dataType);var f=!a.ShapeUtil.areEqual(t.dims,n.dims),d=t.dims,h=a.ShapeUtil.size(t.dims),g=!1;if(f){var m=a.BroadcastUtil.calcShape(t.dims,n.dims,!1);if(!m)throw new Error(\\\"Can't perform binary op on the given tensors\\\");d=m,h=a.ShapeUtil.size(d);for(var v=1===a.ShapeUtil.size(t.dims),y=1===a.ShapeUtil.size(n.dims),b=1,w=1;w<d.length;w++){var S=null!==(l=t.dims[t.dims.length-w])&&void 0!==l?l:1;if(S!==(null!==(p=n.dims[n.dims.length-w])&&void 0!==p?p:1))break;b*=S}(b%4==0||v||y)&&(g=!0)}else g=!0;return r(r({},e),{getShaderSource:function(e){return function(e,t,n,r,o,c,u,s,l,p,f){var d,h,g=a.ShapeUtil.size(r),m=Math.ceil(g/4);\\\"string\\\"==typeof u?d=h=function(e,t){return\\\"\\\".concat(u,\\\"((\\\").concat(e,\\\"),(\\\").concat(t,\\\"))\\\")}:\\\"function\\\"==typeof u?d=h=u:(d=u.scalar,h=u.vector);var v,y=\\\"\\\",b=(0,i.outputVariable)(\\\"outputData\\\",p,r,4),w=(0,i.inputVariable)(\\\"aData\\\",s,t,4),S=(0,i.inputVariable)(\\\"bData\\\",l,n,4);if(c){var _=function(e){for(var t=a.ShapeUtil.computeStrides(e),n=[],o=e.length-1;o>=0;o--){var i=b.indicesGet(\\\"outputIndices\\\",o+r.length-e.length);n.push(\\\"\\\".concat(t[o],\\\"u * (\\\").concat(i,\\\" % \\\").concat(e[o],\\\"u)\\\"))}return n.length>0?n.join(\\\"+\\\"):\\\"0u\\\"};y=\\\"\\\\n          fn calcOffsetA(outputIndices: \\\".concat(b.type.indices,\\\") -> u32 {\\\\n            return \\\").concat(_(t),\\\";\\\\n          }\\\\n\\\\n          fn calcOffsetB(outputIndices: \\\").concat(b.type.indices,\\\") -> u32 {\\\\n            return \\\").concat(_(n),\\\";\\\\n          }\\\\n        \\\")}if(o)if(c){var x=1===a.ShapeUtil.size(t),O=1===a.ShapeUtil.size(n);v=x||O?b.setByOffset(\\\"global_idx\\\",h(x?\\\"\\\".concat(w.type.value,\\\"(\\\").concat(w.getByOffset(\\\"0\\\"),\\\".x)\\\"):w.getByOffset(\\\"global_idx\\\"),O?\\\"\\\".concat(S.type.value,\\\"(\\\").concat(S.getByOffset(\\\"0\\\"),\\\".x)\\\"):S.getByOffset(\\\"global_idx\\\"))):\\\"\\\\n            let outputIndices = \\\".concat(b.offsetToIndices(\\\"global_idx * 4u\\\"),\\\";\\\\n            let offsetA = calcOffsetA(outputIndices);\\\\n            let offsetB = calcOffsetB(outputIndices);\\\\n            \\\").concat(b.setByOffset(\\\"global_idx\\\",h(w.getByOffset(\\\"offsetA / 4u\\\"),S.getByOffset(\\\"offsetB / 4u\\\"))),\\\"\\\\n          \\\")}else v=b.setByOffset(\\\"global_idx\\\",h(w.getByOffset(\\\"global_idx\\\"),S.getByOffset(\\\"global_idx\\\")));else{if(!c)throw new Error(\\\"no necessary to use scalar implementation for element-wise binary op implementation.\\\");var T=function(e,t,n){void 0===n&&(n=\\\"\\\");var r=\\\"aData[indexA\\\".concat(t,\\\"][componentA\\\").concat(t,\\\"]\\\"),a=\\\"bData[indexB\\\".concat(t,\\\"][componentB\\\").concat(t,\\\"]\\\");return\\\"\\\\n            let outputIndices\\\".concat(t,\\\" = \\\").concat(b.offsetToIndices(\\\"global_idx * 4u + \\\".concat(t,\\\"u\\\")),\\\";\\\\n            let offsetA\\\").concat(t,\\\" = calcOffsetA(outputIndices\\\").concat(t,\\\");\\\\n            let offsetB\\\").concat(t,\\\" = calcOffsetB(outputIndices\\\").concat(t,\\\");\\\\n            let indexA\\\").concat(t,\\\" = offsetA\\\").concat(t,\\\" / 4u;\\\\n            let indexB\\\").concat(t,\\\" = offsetB\\\").concat(t,\\\" / 4u;\\\\n            let componentA\\\").concat(t,\\\" = offsetA\\\").concat(t,\\\" % 4u;\\\\n            let componentB\\\").concat(t,\\\" = offsetB\\\").concat(t,\\\" % 4u;\\\\n            \\\").concat(e,\\\"[\\\").concat(t,\\\"] = \\\").concat(n,\\\"(\\\").concat(d(r,a),\\\");\\\\n          \\\")};v=9===p?\\\"\\\\n            var data = vec4<u32>(0);\\\\n            \\\".concat(T(\\\"data\\\",0,\\\"u32\\\"),\\\"\\\\n            \\\").concat(T(\\\"data\\\",1,\\\"u32\\\"),\\\"\\\\n            \\\").concat(T(\\\"data\\\",2,\\\"u32\\\"),\\\"\\\\n            \\\").concat(T(\\\"data\\\",3,\\\"u32\\\"),\\\"\\\\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));\\\"):\\\"\\\\n            \\\".concat(T(\\\"outputData[global_idx]\\\",0),\\\"\\\\n            \\\").concat(T(\\\"outputData[global_idx]\\\",1),\\\"\\\\n            \\\").concat(T(\\\"outputData[global_idx]\\\",2),\\\"\\\\n            \\\").concat(T(\\\"outputData[global_idx]\\\",3),\\\"\\\\n          \\\")}return\\\"\\\\n        \\\".concat(e.declareVariables(w,S,b),\\\"\\\\n\\\\n        \\\").concat(null!=f?f:\\\"\\\",\\\"\\\\n        \\\").concat(y,\\\"\\\\n\\\\n        \\\").concat(e.mainStart(),\\\"\\\\n        \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(m),\\\"\\\\n        \\\").concat(v,\\\"\\\\n      }\\\")}(e,t.dims,n.dims,d,g,f,c,t.dataType,n.dataType,s,u)},outputs:[{dims:d,dataType:s,gpuDataType:o.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(h/64/4)}}})}(l,e[0],e[1],n,c,s)}})};t.add=function(e){e.compute(c(e.inputs,\\\"Add\\\",(function(e,t){return\\\"\\\".concat(e,\\\"+\\\").concat(t)})))},t.div=function(e){e.compute(c(e.inputs,\\\"Div\\\",(function(e,t){return\\\"\\\".concat(e,\\\"/\\\").concat(t)})))},t.equal=function(e){e.compute(c(e.inputs,\\\"Equal\\\",{scalar:function(e,t){return\\\"u32(\\\".concat(e,\\\"==\\\").concat(t,\\\")\\\")},vector:function(e,t){return\\\"vec4<u32>(\\\".concat(e,\\\"==\\\").concat(t,\\\")\\\")}},void 0,void 0,9))},t.mul=function(e){e.compute(c(e.inputs,\\\"Mul\\\",(function(e,t){return\\\"\\\".concat(e,\\\"*\\\").concat(t)})))},t.pow=function(e){var t=(0,i.inputVariable)(\\\"input\\\",e.inputs[0].dataType,e.inputs[0].dims).type.value,n=\\\"i32\\\"===t?\\\"round\\\":\\\"\\\";e.compute(c(e.inputs,\\\"Pow\\\",{scalar:function(e,t){return\\\"pow_custom(\\\".concat(e,\\\",\\\").concat(t,\\\")\\\")},vector:function(e,t){return\\\"pow_vector_custom(\\\".concat(e,\\\",\\\").concat(t,\\\")\\\")}},\\\"\\\\n    fn pow_custom(a : \\\".concat(t,\\\", b : \\\").concat(t,\\\") -> \\\").concat(t,\\\" {\\\\n      if (b == \\\").concat(t,\\\"(0.0)) {\\\\n        return \\\").concat(t,\\\"(1.0);\\\\n      } else if (a < \\\").concat(t,\\\"(0.0) && f32(b) != floor(f32(b))) {\\\\n        return \\\").concat(t,\\\"(pow(f32(a), f32(b))); // NaN\\\\n      }\\\\n      return select(sign(a), \\\").concat(t,\\\"(1.0), round(f32(abs(b) % \\\").concat(t,\\\"(2.0))) != 1.0) * \\\").concat(t,\\\"(\\\").concat(n,\\\"(pow(f32(abs(a)), f32(b))));\\\\n    }\\\\n    fn pow_vector_custom(a : vec4<\\\").concat(t,\\\">, b : vec4<\\\").concat(t,\\\">) -> vec4<\\\").concat(t,\\\"> {\\\\n      // TODO: implement vectorized pow\\\\n      return vec4<\\\").concat(t,\\\">(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\\\\n    }\\\\n      \\\")))},t.sub=function(e){e.compute(c(e.inputs,\\\"Sub\\\",(function(e,t){return\\\"\\\".concat(e,\\\"-\\\").concat(t)})))},t.greater=function(e){e.compute(c(e.inputs,\\\"Greater\\\",{scalar:function(e,t){return\\\"u32(\\\".concat(e,\\\">\\\").concat(t,\\\")\\\")},vector:function(e,t){return\\\"vec4<u32>(\\\".concat(e,\\\">\\\").concat(t,\\\")\\\")}},void 0,void 0,9))},t.less=function(e){e.compute(c(e.inputs,\\\"Less\\\",{scalar:function(e,t){return\\\"u32(\\\".concat(e,\\\"<\\\").concat(t,\\\")\\\")},vector:function(e,t){return\\\"vec4<u32>(\\\".concat(e,\\\"<\\\").concat(t,\\\")\\\")}},void 0,void 0,9))},t.greaterOrEqual=function(e){e.compute(c(e.inputs,\\\"GreaterOrEqual\\\",{scalar:function(e,t){return\\\"u32(\\\".concat(e,\\\">=\\\").concat(t,\\\")\\\")},vector:function(e,t){return\\\"vec4<u32>(\\\".concat(e,\\\">=\\\").concat(t,\\\")\\\")}},void 0,void 0,9))},t.lessOrEqual=function(e){e.compute(c(e.inputs,\\\"LessOrEqual\\\",{scalar:function(e,t){return\\\"u32(\\\".concat(e,\\\"<=\\\").concat(t,\\\")\\\")},vector:function(e,t){return\\\"vec4<u32>(\\\".concat(e,\\\"<=\\\").concat(t,\\\")\\\")}},void 0,void 0,9))}},2075:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.getBroadcastDims=t.createShaderHelper=t.outputVariable=t.inputVariable=t.tensorTypeToWsglValueType=t.tensorTypeToWsglStorageType=t.WORKGROUP_SIZE=void 0;var r=n(6952);t.WORKGROUP_SIZE=64;var a=function(e,t){if(3===t)throw new Error(\\\"vec3 has same alignment as vec4, use vec4 instead\\\");switch(e){case 10:return t>1?\\\"vec\\\".concat(t,\\\"<f16>\\\"):\\\"f16\\\";case 1:return t>1?\\\"vec\\\".concat(t,\\\"<f32>\\\"):\\\"f32\\\";case 6:return t>1?\\\"vec\\\".concat(t,\\\"<i32>\\\"):\\\"i32\\\";case 12:return t>1?\\\"vec\\\".concat(t,\\\"<u32>\\\"):\\\"u32\\\";case 7:if(t>1)throw new Error(\\\"currently not supported vecX of uint64 yet\\\");return[\\\"vec2<u32>\\\",\\\"i32\\\"];case 13:if(t>1)throw new Error(\\\"currently not supported vecX of uint64 yet\\\");return[\\\"vec2<u32>\\\",\\\"u32\\\"];case 9:if(4!==t)throw new Error(\\\"bool must be vec4\\\");return[\\\"u32\\\",\\\"vec4<bool>\\\"];default:throw new Error(\\\"Unknown data type: \\\".concat(e))}};t.tensorTypeToWsglStorageType=function(e,t){void 0===t&&(t=1);var n=a(e,t);return\\\"string\\\"==typeof n?n:n[0]},t.tensorTypeToWsglValueType=function(e,t){void 0===t&&(t=1);var n=a(e,t);return\\\"string\\\"==typeof n?n:n[1]};var o=function(e,t,n,o,i){for(var c=n.length,u=c<2?\\\"u32\\\":c<=4?\\\"vec\\\".concat(c,\\\"<u32>\\\"):\\\"array<u32, \\\".concat(c,\\\">\\\"),s=a(t,i),l=\\\"string\\\"==typeof s?s:s[1],p=\\\"string\\\"==typeof s?s:s[0],f={indices:u,value:l,storage:p,tensor:t},d=function(e){return\\\"string\\\"==typeof e?e:\\\"\\\".concat(e,\\\"u\\\")},h={offsetToIndices:!1,indicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},g=r.ShapeUtil.computeStrides(n),m=\\\"\\\",v=0;v<c-1;v++)m+=\\\"\\\\n    let dim\\\".concat(v,\\\" = current / \\\").concat(g[v],\\\"u;\\\\n    let rest\\\").concat(v,\\\" = current % \\\").concat(g[v],\\\"u;\\\\n    indices[\\\").concat(v,\\\"] = dim\\\").concat(v,\\\";\\\\n    current = rest\\\").concat(v,\\\";\\\\n    \\\");m+=\\\"indices[\\\".concat(c-1,\\\"] = current;\\\");var y=c<2?\\\"\\\":\\\"\\\\n  fn o2i_\\\".concat(e,\\\"(offset: u32) -> \\\").concat(f.indices,\\\" {\\\\n    var indices: \\\").concat(f.indices,\\\";\\\\n    var current = offset;\\\\n    \\\").concat(m,\\\"\\\\n    return indices;\\\\n  }\\\"),b=[];if(c>=2)for(v=c-1;v>=0;v--)b.push(\\\"\\\".concat(g[v],\\\"u * (indices[\\\").concat(v,\\\"])\\\"));var w,S,_=c<2?\\\"\\\":\\\"\\\\n  fn i2o_\\\".concat(e,\\\"(indices: \\\").concat(f.indices,\\\") -> u32 {\\\\n    return \\\").concat(b.join(\\\"+\\\"),\\\";\\\\n  }\\\"),x=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return 0===c?\\\"0u\\\":\\\"\\\".concat(f.indices,\\\"(\\\").concat(e.map(d).join(\\\",\\\"),\\\")\\\")},O=function(t,n){return function(){if(f.storage===f.value)return\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]=\\\").concat(n,\\\";\\\");if(\\\"vec2<u32>\\\"===f.storage&&\\\"i32\\\"===f.value)return\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]=vec2<u32>(u32(\\\").concat(n,\\\"), select(0u, 0xFFFFFFFFu, \\\").concat(n,\\\" < 0));\\\");if(\\\"vec2<u32>\\\"===f.storage&&\\\"u32\\\"===f.value)return\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]=vec2<u32>(u32(\\\").concat(n,\\\"), 0u);\\\");if(\\\"u32\\\"===f.storage&&\\\"vec4<bool>\\\"===f.value)return\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(\\\").concat(n,\\\"));\\\");throw new Error(\\\"not supported combination of storage type \\\".concat(f.storage,\\\" and value type \\\").concat(f.value,\\\" yet\\\"))}()},T=function(t){return function(){if(f.storage===f.value)return\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]\\\");if(\\\"vec2<u32>\\\"===f.storage&&\\\"i32\\\"===f.value)return\\\"i32(\\\".concat(e,\\\"[\\\").concat(t,\\\"].x)\\\");if(\\\"vec2<u32>\\\"===f.storage&&\\\"u32\\\"===f.value)return\\\"u32(\\\".concat(e,\\\"[\\\").concat(t,\\\"].x)\\\");if(\\\"u32\\\"===f.storage&&\\\"vec4<bool>\\\"===f.value)return\\\"vec4<bool>(bool(\\\".concat(e,\\\"[\\\").concat(t,\\\"] & 0xFFu), bool(\\\").concat(e,\\\"[\\\").concat(t,\\\"] & 0xFF00u), bool(\\\").concat(e,\\\"[\\\").concat(t,\\\"] & 0xFF0000u), bool(\\\").concat(e,\\\"[\\\").concat(t,\\\"] & 0xFF000000u))\\\");throw new Error(\\\"not supported combination of storage type \\\".concat(f.storage,\\\" and value type \\\").concat(f.value,\\\" yet\\\"))}()},I=c<2?\\\"\\\":\\\"\\\\n  fn get_\\\".concat(e,\\\"ByIndices(indices: \\\").concat(f.indices,\\\") -> \\\").concat(l,\\\" {\\\\n    return \\\").concat(T(\\\"i2o_\\\".concat(e,\\\"(indices)\\\")),\\\";\\\\n  }\\\"),A=c<2?\\\"\\\":(w=n.map((function(e,t){return\\\"d\\\".concat(t,\\\": u32\\\")})).join(\\\", \\\"),S=n.map((function(e,t){return\\\"d\\\".concat(t)})).join(\\\", \\\"),\\\"\\\\n  fn get_\\\".concat(e,\\\"(\\\").concat(w,\\\") -> \\\").concat(l,\\\" {\\\\n    return get_\\\").concat(e,\\\"ByIndices(\\\").concat(x(S),\\\");\\\\n  }\\\")),E=c<2?\\\"\\\":\\\"\\\\n  fn set_\\\".concat(e,\\\"ByIndices(indices: \\\").concat(f.indices,\\\", value: \\\").concat(l,\\\") {\\\\n    \\\").concat(O(\\\"i2o_\\\".concat(e,\\\"(indices)\\\"),\\\"value\\\"),\\\"\\\\n  }\\\"),C=c<2?\\\"\\\":function(){var t=n.map((function(e,t){return\\\"d\\\".concat(t,\\\": u32\\\")})).join(\\\", \\\"),r=n.map((function(e,t){return\\\"d\\\".concat(t)})).join(\\\", \\\");return\\\"\\\\n  fn set_\\\".concat(e,\\\"(\\\").concat(t,\\\", value: \\\").concat(l,\\\") {\\\\n    set_\\\").concat(e,\\\"ByIndices(\\\").concat(x(r),\\\", value);\\\\n  }\\\")}();return{impl:function(){var e=[];return h.offsetToIndices&&e.push(y),h.indicesToOffset&&e.push(_),h.set&&e.push(C),h.setByIndices&&e.push(E),h.get&&e.push(A),h.getByIndices&&e.push(I),e.join(\\\"\\\\n\\\")},type:f,offsetToIndices:function(t){return h.offsetToIndices=!0,c<2?t:\\\"o2i_\\\".concat(e,\\\"(\\\").concat(t,\\\")\\\")},indicesToOffset:function(t){return h.indicesToOffset=!0,c<2?t:\\\"i2o_\\\".concat(e,\\\"(\\\").concat(t,\\\")\\\")},indices:x,indicesGet:function(e,t){return c<2?\\\"\\\".concat(e):\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]\\\")},indicesSet:function(e,t,n){return c<2?\\\"\\\".concat(e,\\\"=\\\").concat(n,\\\";\\\"):\\\"\\\".concat(e,\\\"[\\\").concat(t,\\\"]=\\\").concat(n,\\\";\\\")},set:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(t.length!==c+1)throw new Error(\\\"indices length must be \\\".concat(c));var r=t[c];if(\\\"string\\\"!=typeof r)throw new Error(\\\"value must be string\\\");var a=t.slice(0,c).map(d).join(\\\",\\\");return 0===c?O(\\\"0u\\\",r):1===c?O(a[0],r):(h.set=!0,h.setByIndices=!0,h.indicesToOffset=!0,\\\"set_\\\".concat(e,\\\"(\\\").concat(a,\\\", \\\").concat(r,\\\")\\\"))},setByOffset:O,setByIndices:function(t,n){return c<2?O(t,n):(h.setByIndices=!0,h.indicesToOffset=!0,\\\"set_\\\".concat(e,\\\"ByIndices(\\\").concat(t,\\\", \\\").concat(n,\\\");\\\"))},get:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(t.length!==c)throw new Error(\\\"indices length must be \\\".concat(c));var r=t.map(d).join(\\\",\\\");return 0===c?T(\\\"0u\\\"):1===c?T(r[0]):(h.get=!0,h.getByIndices=!0,h.indicesToOffset=!0,\\\"get_\\\".concat(e,\\\"(\\\").concat(r,\\\")\\\"))},getByOffset:T,getByIndices:function(t){return c<2?T(t):(h.getByIndices=!0,h.indicesToOffset=!0,\\\"get_\\\".concat(e,\\\"ByIndices(\\\").concat(t,\\\")\\\"))},usage:o?\\\"input\\\":\\\"output\\\",name:e,shape:n}};t.inputVariable=function(e,t,n,r){return void 0===r&&(r=1),o(e,t,n,!0,r)},t.outputVariable=function(e,t,n,r){return void 0===r&&(r=1),o(e,t,n,!1,r)};var i=function(){function e(e){this.normalizedDispatchGroup=e,this.indicesHelpers=[]}return e.prototype.guardAgainstOutOfBoundsWorkgroupSizes=function(e){var t=\\\"number\\\"==typeof e?\\\"\\\".concat(e,\\\"u\\\"):e;return\\\"if (global_idx >= \\\".concat(t,\\\") { return; }\\\")},e.prototype.mainStart=function(e){void 0===e&&(e=t.WORKGROUP_SIZE);var n=\\\"number\\\"==typeof e?e:e[0],r=\\\"number\\\"==typeof e?1:e[1],a=\\\"number\\\"==typeof e?1:e[2],o=1===this.normalizedDispatchGroup[1]&&1===this.normalizedDispatchGroup[2],i=o?\\\"@builtin(global_invocation_id) global_id : vec3<u32>,\\\\n    @builtin(local_invocation_id) local_id : vec3<u32>\\\":\\\"@builtin(local_invocation_index) local_index : u32,\\\\n    @builtin(workgroup_id) workgroup_id : vec3<u32>\\\",c=o?\\\"let global_idx = global_id.x;\\\":\\\"let global_idx = (workgroup_id.z * \\\".concat(this.normalizedDispatchGroup[0]*this.normalizedDispatchGroup[1],\\\"u +\\\\n          workgroup_id.y * \\\").concat(this.normalizedDispatchGroup[0],\\\"u + workgroup_id.x) * \\\").concat(n*r*a,\\\"u + local_index;\\\");return\\\"@compute @workgroup_size(\\\".concat(n,\\\", \\\").concat(r,\\\", \\\").concat(a,\\\")\\\\n  fn main(\\\").concat(i,\\\") {\\\\n    \\\").concat(c,\\\"\\\\n  \\\")},e.prototype.declareVariable=function(e,t){this.indicesHelpers.push(e);var n=\\\"input\\\"===e.usage?\\\"read\\\":\\\"read_write\\\",r=e.type.storage;return\\\"@group(0) @binding(\\\".concat(t,\\\") var<storage, \\\").concat(n,\\\"> \\\").concat(e.name,\\\": array<\\\").concat(r,\\\">;\\\")},e.prototype.declareVariables=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var a=0;return t.filter((function(e){return r.ShapeUtil.size(e.shape)>0})).map((function(t){return e.declareVariable(t,a++)})).join(\\\"\\\\n\\\")},Object.defineProperty(e.prototype,\\\"additionalImplementations\\\",{get:function(){return this.indicesHelpers.map((function(e){return e.impl()})).join(\\\"\\\\n\\\")},enumerable:!1,configurable:!0}),e}();t.createShaderHelper=function(e){return new i(e)},t.getBroadcastDims=function(e,t){for(var n=e.length,r=[],a=0;a<n;a++){var o=n-1-a,i=e[o]||1;(t[t.length-1-a]||1)>1&&1===i&&r.unshift(o)}return r}},513:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},o=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},i=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseConcatAttributes=t.concat=void 0;var c=n(6952),u=n(387),s=n(1163),l=n(2075);t.concat=function(e,t){!function(e){var t,n;if(!e||e.length<1)throw new Error(\\\"too few inputs\\\");var r=e[0].dataType,o=e[0].dims.length;try{for(var i=a(e),c=i.next();!c.done;c=i.next()){var u=c.value;if(u.dataType!==r)throw new Error(\\\"input tensors should be one type\\\");if(u.dims.length!==o)throw new Error(\\\"input tensors should have the same shape\\\")}}catch(e){t={error:e}}finally{try{c&&!c.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}}(e.inputs),e.compute(function(e,t){var n,a,u=(n=e.length,a=t.cacheKey,{name:\\\"Concat\\\",inputTypes:Array(n).fill(s.GpuDataType.default),cacheHint:a});return r(r({},u),{get:function(){return function(e,t,n){var a=t[0].dims.slice();if(n>=a.length||n<-1*a.length)throw new Error(\\\"axis specified for concat doesn't match input dimensionality\\\");for(var u=n<0?a.length+n:n,p=a.slice(0),f=1;f<t.length;f++)for(var d=t[f].dims.slice(),h=0;h<a.length;h++)if(h===u)p[u]+=d[h];else if(a[h]!==d[h])throw new Error(\\\"non concat dimensions must match\\\");var g=c.ShapeUtil.size(p),m=new Array(t.length),v=new Array(t.length),y=t[0].dataType,b=0;for(f=0;f<t.length;++f)b+=t[f].dims[u],m[f]=b,v[f]=(0,l.inputVariable)(\\\"input\\\".concat(f),y,t[f].dims);var w=(0,l.outputVariable)(\\\"output\\\",y,p),S=w.indicesGet(\\\"indices\\\",u);return r(r({},e),{outputs:[{dims:p,dataType:t[0].dataType,gpuDataType:s.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  \\\".concat(e.declareVariables.apply(e,i(i([],o(v),!1),[w],!1)),\\\"\\\\n\\\\n  const sizeInConcatAxis = array<u32, \\\").concat(m.length,\\\">(\\\").concat(m.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n  \\\").concat((t=m.length,\\\"\\\\n  fn calculateInputIndex(index: u32) -> u32 {\\\\n    for (var i: u32 = 0u; i < \\\".concat(t,\\\"u; i += 1u ) {\\\\n      if (index < sizeInConcatAxis[i]) {\\\\n        return i;\\\\n      }\\\\n    }\\\\n    return \\\").concat(t,\\\"u;\\\\n  }\\\")),\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(g),\\\"\\\\n\\\\n    var indices = \\\").concat(w.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n\\\\n    let inputIndex = calculateInputIndex(\\\").concat(S,\\\");\\\\n    if (inputIndex != 0u) {\\\\n      \\\").concat(S,\\\" -= sizeInConcatAxis[inputIndex - 1u];\\\\n    }\\\\n\\\\n    \\\").concat(function(e,t){for(var n=e.length,r=[],a=0;a<n;++a){var o=t.setByOffset(\\\"global_idx\\\",e[a].getByIndices(\\\"indices\\\"));1===n?r.push(o):0===a?r.push(\\\"if (inputIndex == \\\".concat(a,\\\"u) { \\\").concat(o,\\\" }\\\")):a===n-1?r.push(\\\"else { \\\".concat(o,\\\" }\\\")):r.push(\\\"else if (inputIndex == \\\".concat(a,\\\") { \\\").concat(o,\\\" }\\\"))}return r.join(\\\"\\\\n\\\")}(v,w),\\\"\\\\n  }\\\");var t},dispatchGroup:function(){return{x:Math.ceil(g/64)}}})}(u,e,t.axis)}})}(e.inputs,t))},t.parseConcatAttributes=function(e){return(0,u.createAttributeWithCacheKey)({axis:e.axis})}},9192:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createGroupedConvProgramInfoLoader=void 0;var i=n(6952),c=n(1163),u=n(2075),s=n(9770),l=n(3997);t.createGroupedConvProgramInfoLoader=function(e,t,n){var p,f,d=(p=e.length>2,f=t.cacheKey,{name:\\\"GroupedConv\\\",inputTypes:p?[c.GpuDataType.default,c.GpuDataType.default,c.GpuDataType.default]:[c.GpuDataType.default,c.GpuDataType.default],cacheHint:f});return r(r({},d),{get:function(){return function(e,t,n,p){var f=e.length>2,d=f?\\\"value += b[output_channel];\\\":\\\"\\\",h=e[0].dims,g=e[1].dims,m=g[0]/n.group,v=(0,l.getActicationSnippet)(n),y=v.activationFunction,b=v.applyActivation,w=\\\"NHWC\\\"===n.format,S=(0,s.calculateOutputShape)(h,g,n.dilations,n.pads,n.strides,w),_=i.ShapeUtil.size(S),x=(0,u.outputVariable)(\\\"output\\\",e[0].dataType,S),O=(0,u.inputVariable)(\\\"x\\\",e[0].dataType,h),T=(0,u.inputVariable)(\\\"w\\\",e[1].dataType,g),I=[O,T];return f&&I.push((0,u.inputVariable)(\\\"b\\\",e[2].dataType,e[2].dims)),r(r({},t),{outputs:[{dims:p?p(S):S,dataType:e[0].dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const strides: vec2<u32> = vec2(\\\".concat(n.strides[0],\\\"u, \\\").concat(n.strides[1],\\\"u);\\\\n  const pads: vec2<u32> = vec2(\\\").concat(n.pads[0],\\\"u, \\\").concat(n.pads[1],\\\"u);\\\\n\\\\n  \\\").concat(e.declareVariables.apply(e,o(o([],a(I),!1),[x],!1)),\\\"\\\\n\\\\n  \\\").concat(y,\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(_),\\\"\\\\n\\\\n    let outputIndices = \\\").concat(x.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n    let batch: u32 = outputIndices[0];\\\\n    let output_channel: u32 = outputIndices[\\\").concat(w?3:1,\\\"];\\\\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[\\\").concat(w?1:2,\\\"], outputIndices[\\\").concat(w?2:3,\\\"]) * strides - pads;\\\\n    let group_id: u32 = output_channel / \\\").concat(m,\\\"u;\\\\n\\\\n    var value: \\\").concat(x.type.value,\\\" = \\\").concat(x.type.value,\\\"(0);\\\\n    for (var wInChannel: u32 = 0u; wInChannel < \\\").concat(g[1],\\\"u; wInChannel++) {\\\\n      let input_channel = group_id * \\\").concat(g[1],\\\"u + wInChannel;\\\\n      for (var wHeight: u32 = 0u; wHeight < \\\").concat(g[2],\\\"u; wHeight++) {\\\\n        let xHeight = xRCCorner.x + wHeight * \\\").concat(n.dilations[0],\\\"u;\\\\n\\\\n        if (xHeight < 0u || xHeight >= \\\").concat(h[w?1:2],\\\"u) {\\\\n          continue;\\\\n        }\\\\n\\\\n        for (var wWidth: u32 = 0u; wWidth < \\\").concat(g[3],\\\"u; wWidth++) {\\\\n          let xWidth = xRCCorner.y + wWidth * \\\").concat(n.dilations[1],\\\"u;\\\\n          if (xWidth < 0u || xWidth >= \\\").concat(h[w?2:3],\\\"u) {\\\\n            continue;\\\\n          }\\\\n\\\\n          let xVal = \\\").concat(w?O.get(\\\"batch\\\",\\\"xHeight\\\",\\\"xWidth\\\",\\\"input_channel\\\"):O.get(\\\"batch\\\",\\\"input_channel\\\",\\\"xHeight\\\",\\\"xWidth\\\"),\\\";\\\\n          let wVal = \\\").concat(T.get(\\\"output_channel\\\",\\\"wInChannel\\\",\\\"wHeight\\\",\\\"wWidth\\\"),\\\";\\\\n          value += xVal*wVal;\\\\n        }\\\\n      }\\\\n    }\\\\n    \\\").concat(d,\\\"\\\\n    \\\").concat(b,\\\"\\\\n    \\\").concat(x.setByOffset(\\\"global_idx\\\",\\\"value\\\"),\\\"\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(_/64)}}})}(e,d,t,n)}})}},7640:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.convTranspose=t.parseConvTransposeAttributes=void 0;var a=n(387),o=n(1163),i=n(6514),c=n(3997),u=function(e,t,n,r,a,o){return(e-1)*t+n+(r-1)*a+1-o},s=function(e,t,n,r,a){var o=Math.floor(e/2);\\\"SAME_UPPER\\\"===t?(n[r]=o,n[a]=e-o):\\\"SAME_LOWER\\\"===t&&(n[r]=e-o,n[a]=o)},l=function(e,t){var n=e.kernelShape.slice();if(0===e.kernelShape.length||0===e.kernelShape.reduce((function(e,t){return e*t}),0)){n.length=0;for(var r=2;r<t[1].dims.length;++r)n.push(t[1].dims[r])}var a=\\\"NHWC\\\"===e.format;n.splice(0,0,t[1].dims[0]),n.splice(a?3:1,0,t[1].dims[1]);var o=e.pads.slice(),i=e.outputShape.slice(),c=e.outputPadding.slice(),l=t[0].dims,p=e.dilations.slice();if(0===p.reduce((function(e,t){return e+t}),0)){var f=t[0].dims.length-2;p=new Array(f).fill(1)}var d=e.strides.slice();0===d.reduce((function(e,t){return e+t}),0)&&(f=t[0].dims.length-2,d=new Array(f).fill(1)),function(e,t,n,r,a,o,i,c,l,p){var f=e.length-2,d=0===p.length;if(0===l.length)for(var h=0;h<f;++h)l.push(0);for(var g=e[0],m=t[c?3:1]*a,v=(h=0,e.length-f-(c?1:0));h<f;++h,++v){var y=e[v],b=d?y*i[h]:p[h],w=u(y,i[h],o[h],t[v],n[h],b);s(w,r,o,h,h+f),d&&p.push(i[h]*(y-1)+l[h]+(t[v]-1)*n[h]+1-o[h]-o[h+f])}p.splice(0,0,g),p.splice(c?3:1,0,m)}(l,n,p,e.autoPad,e.group,o,d,a,c,i);var h=Object.assign({},e);return Object.assign(h,{kernelShape:n,pads:o,outputPadding:c,outputShape:i,dilations:p,strides:d,cacheKey:e.cacheKey}),h};t.parseConvTransposeAttributes=function(e){var t=(0,c.parseInternalActivationAttributes)(e),n=e.format,o=[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][void 0===e.autoPad?0:e.autoPad],i=e.dilations,u=e.group,s=e.kernelShape,l=e.pads,p=e.strides,f=e.wIsConst(),d=e.outputPadding,h=e.outputShape;return(0,a.createAttributeWithCacheKey)(r({autoPad:o,format:n,dilations:i,group:u,kernelShape:s,outputPadding:d,outputShape:h,pads:l,strides:p,wIsConst:f},t))};var p=function(e,t,n){var a,c,u=(a=3===e.length,c=t.cacheKey,{name:\\\"ConvTranspose2D\\\",inputTypes:a?[o.GpuDataType.default,o.GpuDataType.default,o.GpuDataType.default]:[o.GpuDataType.default,o.GpuDataType.default],cacheHint:c});return r(r({},u),{get:function(){return(0,i.createConvTranspose2DProgramInfo)(e,u,t,n)}})};t.convTranspose=function(e,t){!function(e,t){if(!e||2!==e.length&&3!==e.length)throw new Error(\\\"Conv requires 2 or 3 inputs\\\");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error(\\\"currently only support 2-dimensional conv\\\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\\\"filter does not have same dimension as input\\\");if(e[0].dims[\\\"NHWC\\\"===t.format?e[0].dims.length-1:1]!==e[1].dims[0])throw new Error(\\\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\\\");var n=e[1].dims[1]*t.group;if(3===e.length&&(1!==e[2].dims.length||e[2].dims[0]!==n))throw new Error(\\\"invalid bias\\\");var r=e[0].dims.length-2;if(t.dilations.reduce((function(e,t){return e+t}),0)>0&&t.dilations.length!==r)throw new Error(\\\"dilations should be \\\".concat(r,\\\"D\\\"));if(t.strides.reduce((function(e,t){return e+t}),0)>0&&t.strides.length!==r)throw new Error(\\\"strides should be \\\".concat(r,\\\"D\\\"));if(t.pads.reduce((function(e,t){return e+t}),0)>0&&t.pads.length!==2*r)throw new Error(\\\"pads should be \\\".concat(2*r,\\\"D\\\"));if(t.outputPadding.length!==r&&0!==t.outputPadding.length)throw new Error(\\\"output_padding should be \\\".concat(r,\\\"D\\\"));if(t.kernelShape.reduce((function(e,t){return e+t}),0)>0&&0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error(\\\"invalid kernel shape\\\");if(0!==t.outputShape.length&&t.outputShape.length!==e[0].dims.length-2)throw new Error(\\\"invalid output shape\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"ConvTranspose input(X,W) should be float tensor\\\");if(3===e.length&&1!==e[2].dataType)throw new Error(\\\"ConvTranspose input(bias) should be float tensor\\\")}(e.inputs,t),3===e.inputs[0].dims.length?function(e,t){var n=\\\"NHWC\\\"===t.format,a=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===a.length&&a.push(e.inputs[2]);var o=t.kernelShape;0!==o.length&&0!==o[0]||(o=[e.inputs[1].dims[2]]);var i=t.dilations;0!==i.length&&0!==i[0]||(i=[1]);var c=t.strides;0!==c.length&&0!==c[0]||(c=[1]);var u=t.pads;0===u.length&&(u=[0,0]),u=[0,u[0],0,u[1]],c=[1].concat(c),i=[1].concat(i),o=[1].concat(o);var s=l(r(r({},t),{pads:u,strides:c,dilations:i,kernelShape:o}),a);e.compute(p(a,s,(function(e){return n?[e[0],e[2],e[3]]:[e[0],e[1],e[3]]})))}(e,t):function(e,t,n){var r=l(n,t);e.compute(p(t,r))}(e,e.inputs,t)}},9770:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.conv=t.parseConvAttributes=t.calculateOutputShape=void 0;var a=n(6952),o=n(387),i=n(9192),c=n(3822),u=n(3997),s=n(1522),l=n(2625);t.calculateOutputShape=function(e,t,n,r,a,o){var i=e[0],c=e.slice(o?1:2,o?3:4),u=c.length,s=t[0],l=t.slice(2).map((function(e,t){return e+(e-1)*(n[t]-1)})),p=c.map((function(e,t){return e+r[t]+r[t+u]})).map((function(e,t){return Math.floor((e-l[t]+a[t])/a[t])}));return p.splice(0,0,i),p.splice(o?3:1,0,s),p};var p=(0,o.createAttributeWithCacheKey)({perm:[2,3,1,0]}),f=function(e,t){for(var n=e.kernelShape.slice(),r=2;r<t[1].dims.length;++r)0===n[r-2]&&(n[r-2]=t[1].dims[r]);var o=e.pads.slice();a.PoolConvUtil.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,n,o,\\\"NHWC\\\"===e.format,e.autoPad);var i=Object.assign({},e);return Object.assign(i,{kernelShape:n,pads:o,cacheKey:e.cacheKey}),i};t.parseConvAttributes=function(e){var t=(0,u.parseInternalActivationAttributes)(e),n=e.format,a=[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][e.auto_pad],i=e.dilations,c=e.group,s=e.kernel_shape,l=e.pads,p=e.strides,f=e.w_is_const();return(0,o.createAttributeWithCacheKey)(r({autoPad:a,format:n,dilations:i,group:c,kernelShape:s,pads:l,strides:p,wIsConst:f},t))},t.conv=function(e,n){!function(e,t){if(!e||2!==e.length&&3!==e.length)throw new Error(\\\"Conv requires 2 or 3 inputs\\\");if(4!==e[0].dims.length&&3!==e[0].dims.length)throw new Error(\\\"currently only support conv 1D and 2D\\\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\\\"filter does not have same dimension as input\\\");if(e[0].dims[\\\"NHWC\\\"===t.format?e[0].dims.length-1:1]!==e[1].dims[1]*t.group)throw new Error(\\\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\\\");if(3===e.length&&(1!==e[2].dims.length||e[1].dims[0]!==e[2].dims[0]))throw new Error(\\\"invalid bias\\\");var n=e[0].dims.length-2;if(t.dilations.length!==n)throw new Error(\\\"dilations should be \\\".concat(n,\\\"D\\\"));if(t.strides.length!==n)throw new Error(\\\"strides should be \\\".concat(n,\\\"D\\\"));if(t.pads.length!==2*n)throw new Error(\\\"pads should be \\\".concat(2*n,\\\"D\\\"));if(0!==t.kernelShape.length&&t.kernelShape.length!==e[1].dims.length-2)throw new Error(\\\"invalid kernel shape\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"Conv input(X,W) should be float tensor\\\");if(3===e.length&&1!==e[2].dataType)throw new Error(\\\"Conv input(bias) should be float tensor\\\")}(e.inputs,n),3===e.inputs[0].dims.length?function(e,t){var n=\\\"NHWC\\\"===t.format,a=[e.inputs[0].reshape(n?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];3===e.inputs.length&&a.push(e.inputs[2]);var o=[0,t.pads[0],0,t.pads[1]],c=[1].concat(t.strides),u=[1].concat(t.dilations),s=[1].concat(t.kernelShape),l=f(r(r({},t),{pads:o,strides:c,dilations:u,kernelShape:s}),a);e.compute((0,i.createGroupedConvProgramInfoLoader)(a,l,(function(e){return n?[e[0],e[2],e[3]]:[]})))}(e,n):function(e,n,a){var o,u,d=f(a,n);if(1===a.group){var h=\\\"NHWC\\\"===a.format,g=3===n.length,m=n[0].dims[h?1:2],v=n[0].dims[h?2:3],y=n[0].dims[h?3:1],b=n[1].dims[2],w=n[1].dims[3],S=(0,t.calculateOutputShape)(n[0].dims,n[1].dims,a.dilations,d.pads,a.strides,h),_=S[h?1:2],x=S[h?2:3],O=S[h?3:1],T=h&&b===m&&w===v&&0===a.pads[0]&&0===a.pads[1];if(T||1===b&&1===w&&1===a.dilations[0]&&1===a.dilations[1]&&1===a.strides[0]&&1===a.strides[1]&&0===a.pads[0]&&0===a.pads[1]){var I=S[0],A=void 0,E=void 0,C=void 0,P=[];if(h){var k=null!==(o=e.kernelCustomData.wT)&&void 0!==o?o:e.compute(r(r({},l.transposeProgramMetadata),{cacheHint:p.cacheKey,get:function(){return(0,l.createTransposeProgramInfo)(n[1],p.perm)}}),{inputs:[1],outputs:[a.wIsConst?-2:-1]})[0];if(a.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=k),T){var M=m*v*y;A=n[0].reshape([1,I,M]),E=k.reshape([1,M,O]),C=[1,I,O]}else A=n[0].reshape([I,m*v,y]),E=k.reshape([1,y,O]),C=[I,_*x,O];P.push(A),P.push(E)}else A=n[0].reshape([I,y,m*v]),E=n[1].reshape([1,O,y]),C=[I,O,_*x],P.push(E),P.push(A);return g&&P.push(n[2]),void e.compute((0,s.createMatmulProgramInfoLoader)(P,d,S,C,h),{inputs:P})}var R=null!==(u=e.kernelCustomData.wT)&&void 0!==u?u:e.compute(r(r({},l.transposeProgramMetadata),{cacheHint:p.cacheKey,get:function(){return(0,l.createTransposeProgramInfo)(n[1],p.perm)}}),{inputs:[1],outputs:[a.wIsConst?-2:-1]})[0];a.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=R);var D=[n[0],R];g&&D.push(n[2]);var z=h?_*x:O,B=h?O:_*x,G=b*w*y;e.compute((0,c.createConv2DMatMulProgramInfoLoader)(D,d,S,z,B,G,g,!0),{inputs:D})}else e.compute((0,i.createGroupedConvProgramInfoLoader)(n,d))}(e,e.inputs,n)}},3822:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.createConv2DMatMulProgramInfoLoader=void 0;var a=n(1163),o=n(9456);t.createConv2DMatMulProgramInfoLoader=function(e,t,n,i,c,u,s,l){var p=function(e,t){return{name:\\\"Conv2DMatMul\\\",inputTypes:e?[a.GpuDataType.default,a.GpuDataType.default,a.GpuDataType.default]:[a.GpuDataType.default,a.GpuDataType.default],cacheHint:t}}(s,t.cacheKey);return r(r({},p),{get:function(){return(0,o.createConv2DMatMulProgramInfo)(e,p,t,n,i,c,u,s,l)}})}},2771:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseEinsumAttributes=t.einsum=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075),l=\\\"[a-zA-Z]|\\\\\\\\.\\\\\\\\.\\\\\\\\.\\\",p=\\\"(\\\"+l+\\\")+\\\",f=\\\"^\\\"+p+\\\"$\\\",d=\\\"^(\\\"+p+\\\",)*\\\"+p+\\\"$\\\",h=function(){function e(e){void 0===e&&(e=-1),this.symbolToIndices=new Map,this.inputIndex=e}return e.prototype.addSymbol=function(e,t){var n=this.symbolToIndices.get(e);void 0===n?n=[t]:n.push(t),this.symbolToIndices.set(e,n)},e}(),g=function(){function e(e,t){var n=this;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];var r=a(t.includes(\\\"->\\\")?t.split(\\\"->\\\",2):[t,\\\"\\\"],2),i=r[0],c=r[1];if(!i.match(RegExp(d)))throw new Error(\\\"Invalid LHS term\\\");if(i.split(\\\",\\\").forEach((function(t,r){var a=e[r].dims.slice();if(!t.match(RegExp(f)))throw new Error(\\\"Invalid LHS term\\\");var o=n.processTerm(t,!0,a,r);n.lhs.push(o)})),\\\"\\\"===c)c+=o([],a(this.symbolToInfo.entries()),!1).filter((function(e){var t=a(e,2),n=t[0];return 1===t[1].count||\\\"...\\\"===n})).map((function(e){return a(e,1)[0]})).join(\\\"\\\");else if(!c.match(RegExp(p)))throw new Error(\\\"Invalid RHS\\\");var u=c.match(RegExp(l,\\\"g\\\"));null==u||u.forEach((function(e){if(\\\"...\\\"===e)n.outputDims=n.outputDims.concat(n.ellipsisDims);else{var t=n.symbolToInfo.get(e);if(void 0===t)throw new Error(\\\"Invalid RHS symbol\\\");n.outputDims.push(t.dimValue)}})),this.rhs=this.processTerm(c,!0,this.outputDims)}return e.prototype.addSymbol=function(e,t,n){var r=this.symbolToInfo.get(e);if(void 0!==r){if(r.dimValue!==t&&1!==r.count)throw new Error(\\\"Dimension mismatch\\\");r.count++,r.inputIndices.push(n)}else r={count:1,dimValue:t,inputIndices:[n]};this.symbolToInfo.set(e,r)},e.prototype.processTerm=function(e,t,n,r){var a=this;void 0===r&&(r=-1);var o=n.length,i=!1,c=[],u=0;if(!e.match(RegExp(f))&&!t&&\\\"\\\"!==e)throw new Error(\\\"Invalid LHS term\\\");var s=e.match(RegExp(l,\\\"g\\\")),p=new h(r);return null==s||s.forEach((function(e,l){if(\\\"...\\\"===e){if(i)throw new Error(\\\"Only one ellipsis is allowed per input term\\\");i=!0;var f=o-s.length+1;if(f<0)throw new Error(\\\"Ellipsis out of bounds\\\");if(c=n.slice(u,u+f),a.hasEllipsis){if(a.ellipsisDims.length!==c.length||a.ellipsisDims.toString()!==c.toString())throw new Error(\\\"Ellipsis dimensions mismatch\\\")}else{if(!t)throw new Error(\\\"Ellipsis must be specified in the LHS\\\");a.hasEllipsis=!0,a.ellipsisDims=c}for(var d=0;d<c.length;d++){var h=String.fromCharCode(\\\"0\\\".charCodeAt(0)+l);p.addSymbol(h,l+d),a.addSymbol(h,n[u++],r)}}else p.addSymbol(e,l),a.addSymbol(e,n[u++],r)})),p},e}();t.einsum=function(e,t){var n=new g(e.inputs,t.equation);e.compute(function(e,t,n){var c,l,p=(c=e.length,l=n.cacheKey,{name:\\\"Einsum\\\",inputTypes:Array(c).fill(u.GpuDataType.default),cacheHint:l});return r(r({},p),{get:function(){return function(e,t,n){for(var c=t[0].dataType,l=new Array(t.length),p=0;p<t.length;++p)l[p]=(0,s.inputVariable)(\\\"input\\\".concat(p),c,t[p].dims);var f=n.outputDims,d=i.ShapeUtil.size(f),h=(0,s.outputVariable)(\\\"output\\\",c,f),g=[],m=Array.from(n.rhs.symbolToIndices.keys()),v=[],y=[],b=[],w=[],S=n.symbolToInfo.size===m.length;n.symbolToInfo.forEach((function(e,t){var r;if(m.includes(t)){var a=m.indexOf(t);n.lhs.forEach((function(n,r){if(e.inputIndices.includes(r)){var o=n.symbolToIndices.get(t);if(void 0===o)throw new Error(\\\"Invalid symbol error\\\");o.forEach((function(e){g.push(\\\"\\\".concat(l[r].indicesSet(\\\"input\\\".concat(r,\\\"Indices\\\"),e,h.indicesGet(\\\"outputIndices\\\",a))))}))}}))}else n.lhs.forEach((function(e,r){var a=n.symbolToInfo.get(t);if(void 0===a)throw new Error(\\\"Invalid symbol error\\\");if(a.inputIndices.includes(r)){var o=e.symbolToIndices.get(t);if(void 0===o)throw new Error(\\\"Invalid symbol error\\\");o.forEach((function(e){v.push(\\\"\\\".concat(l[r].indicesSet(\\\"input\\\".concat(r,\\\"Indices\\\"),e,\\\"\\\".concat(t))))})),w.push(\\\"prod *= \\\".concat(l[r].getByIndices(\\\"input\\\".concat(r,\\\"Indices\\\")),\\\";\\\"))}})),y.push(\\\"for(var \\\".concat(t,\\\": u32 = 0; \\\").concat(t,\\\" < \\\").concat(null===(r=n.symbolToInfo.get(t))||void 0===r?void 0:r.dimValue,\\\"; \\\").concat(t,\\\"++) {\\\")),b.push(\\\"}\\\")}));var _=S?o(o([],a(g),!1),[\\\"let sum = \\\".concat(l.map((function(e,t){return e.getByIndices(\\\"input\\\".concat(t,\\\"Indices\\\"))})).join(\\\" * \\\"),\\\";\\\")],!1):o(o(o(o(o(o(o(o([],a(g),!1),[\\\"var sum = 0.0;\\\"],!1),a(y),!1),a(v),!1),[\\\"var prod = 1.0;\\\"],!1),a(w),!1),[\\\"sum += prod;\\\"],!1),a(b),!1);return r(r({},e),{outputs:[{dims:f,dataType:t[0].dataType,gpuDataType:u.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n      \\\".concat(e.declareVariables.apply(e,o(o([],a(l),!1),[h],!1)),\\\"\\\\n\\\\n      \\\").concat(e.mainStart(),\\\"\\\\n        \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(d),\\\"\\\\n        var outputIndices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n        \\\").concat(l.map((function(e,t){return\\\"var input\\\".concat(t,\\\"Indices: \\\").concat(l[t].type.indices,\\\";\\\")})).join(\\\"\\\\n\\\"),\\\"\\\\n        \\\").concat(_.join(\\\"\\\\n\\\"),\\\";\\\\n        \\\").concat(h.setByOffset(\\\"global_idx\\\",\\\"sum\\\"),\\\";\\\\n      }\\\")},dispatchGroup:function(){return{x:Math.ceil(d/64)}}})}(p,e,t)}})}(e.inputs,n,t))},t.parseEinsumAttributes=function(e){var t=e.equation.replace(/\\\\s+/g,\\\"\\\");return(0,c.createAttributeWithCacheKey)({equation:t})}},8856:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.expand=t.expandProgramMetadata=void 0;var i=n(6952),c=n(1163),u=n(2075);t.expandProgramMetadata={name:\\\"Expand\\\",inputTypes:[c.GpuDataType.default]};var s=function(e,t){for(var n=e.length-t.length,r=[],a=0;a<n;++a)r.push(e[a]);for(a=0;a<t.length;++a)r.push(1===t[a]?e[a+n]:t[a]);return r};t.expand=function(e){!function(e){if(!e||2!==e.length)throw new Error(\\\"Expand requires 2 input.\\\");for(var t=e[0].dims,n=Array.from(e[1].getBigInt64Array(),Number),r=n.length<t.length?0:n.length-t.length,a=t.length<n.length?0:t.length-n.length;r<n.length&&a<t.length;++r,++a)if(n[r]!==t[a]&&1!==n[r]&&1!==t[a])throw new Error(\\\"Expand requires shape to be broadcastable to input\\\")}(e.inputs);var n=Array.from(e.inputs[1].getBigInt64Array(),Number).toString();e.compute(r(r({},t.expandProgramMetadata),{cacheHint:n,get:function(){return n=t.expandProgramMetadata,l=e.inputs,p=l[0].dims,f=Array.from(l[1].getBigInt64Array(),Number),d=function(e,t){return e.length>t.length?s(e,t):s(t,e)}(p,f),h=i.ShapeUtil.size(d),g=l[0].dataType,m=(0,u.inputVariable)(\\\"input\\\",g,p),v=(0,u.outputVariable)(\\\"output\\\",g,d),r(r({},n),{getShaderSource:function(e){return\\\"\\\\n  const inputShape = \\\".concat(m.indices.apply(m,o([],a(p),!1)),\\\";\\\\n  \\\").concat(e.declareVariables(m,v),\\\"\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n  \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(h),\\\"\\\\n    let outputIndices = \\\").concat(v.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n    var inputIndices: \\\").concat(m.type.indices,\\\";\\\\n    for (var i = 0; i < \\\").concat(p.length,\\\"; i++) {\\\\n      if (\\\").concat(m.indicesGet(\\\"inputShape\\\",\\\"i\\\"),\\\" == 1) {\\\\n        \\\").concat(m.indicesSet(\\\"inputIndices\\\",\\\"i\\\",0),\\\"\\\\n      } else {\\\\n        \\\").concat(m.indicesSet(\\\"inputIndices\\\",\\\"i\\\",v.indicesGet(\\\"outputIndices\\\",\\\"i + \\\".concat(d.length-p.length))),\\\"\\\\n      }\\\\n    }\\\\n    \\\").concat(v.setByOffset(\\\"global_idx\\\",m.getByIndices(\\\"inputIndices\\\")),\\\"\\\\n  }\\\")},outputs:[{dims:d,dataType:l[0].dataType,gpuDataType:c.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(h/64)}}});var n,l,p,f,d,h,g,m,v}}),{inputs:[0]})}},3997:function(e,t,n){\\\"use strict\\\";var r=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseInternalActivationAttributes=t.getActicationSnippet=void 0;var a=n(6952);t.getActicationSnippet=function(e){switch(e.activation){case\\\"Relu\\\":return{activationFunction:\\\"\\\",applyActivation:\\\"value = max(value, 0.0);\\\"};case\\\"Sigmoid\\\":return{activationFunction:\\\"\\\",applyActivation:\\\"value = (1.0 / (1.0 + exp(-value)));\\\"};case\\\"Clip\\\":return{activationFunction:\\\"const clip_min_=f32(\\\".concat(e.clipMin,\\\");const clip_max_=f32(\\\").concat(e.clipMax,\\\");\\\"),applyActivation:\\\"value = clamp(value, clip_min_, clip_max_);\\\"};default:return{activationFunction:\\\"\\\",applyActivation:\\\"\\\"}}},t.parseInternalActivationAttributes=function(e){var t=(null==e?void 0:e.activation)||\\\"\\\";if(\\\"Clip\\\"===t){var n=r((null==e?void 0:e.activation_params)||[a.MIN_CLIP,a.MAX_CLIP],2),o=n[0],i=n[1];return{activation:t,clipMax:i,clipMin:o,activationCacheKey:\\\"\\\".concat(t,\\\":\\\").concat(o,\\\",\\\").concat(i)}}return{activation:t,activationCacheKey:t}}},9218:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.gatherElements=t.parseGatherElementsAttributes=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075);t.parseGatherElementsAttributes=function(e){return(0,o.createAttributeWithCacheKey)({axis:e.axis})},t.gatherElements=function(e,t){!function(e){if(!e||2!==e.length)throw new Error(\\\"GatherElements requires 2 inputs.\\\");if(e[0].dims.length<1)throw new Error(\\\"GatherElements requires that the data input be rank >= 1.\\\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\\\"GatherElements requires that the data input and\\\\n                     indices input tensors be of same rank.\\\")}(e.inputs);var n={name:\\\"GatherElements\\\",inputTypes:[i.GpuDataType.default,i.GpuDataType.default],cacheHint:t.cacheKey};e.compute(function(e,t,n){var o=t[0].dims,u=t[0].dataType,s=o.length,l=a.ShapeUtil.computeStrides(o),p=a.ShapeUtil.size(o),f=t[1].dims,d=t[1].dataType,h=a.ShapeUtil.size(f),g=a.ShapeUtil.normalizeAxis(n.axis,s),m=o[g],v=f.slice(0),y=a.ShapeUtil.size(v),b=(0,c.inputVariable)(\\\"input\\\",u,o),w=(0,c.inputVariable)(\\\"indices\\\",d,[h]),S=(0,c.outputVariable)(\\\"output\\\",u,v);return r(r({},e),{outputs:[{dims:v,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n      const inputStrides = array<u32, \\\".concat(l.length,\\\">(\\\").concat(l.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n      \\\").concat(e.declareVariables(b,w,S),\\\"\\\\n      \\\").concat(e.mainStart(),\\\"\\\\n      \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(y),\\\"\\\\n\\\\n      let outputIndices = \\\").concat(S.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n\\\\n      var idx = \\\").concat(w.getByOffset(\\\"global_idx\\\"),\\\";\\\\n      if (idx < 0) {\\\\n        idx = idx + \\\").concat(m,\\\";\\\\n      }\\\\n\\\\n      var srcOffset = u32(0);\\\\n\\\\n      for (var i = 0; i < \\\").concat(o.length,\\\"; i++) {\\\\n        if (i == \\\").concat(g,\\\") {\\\\n          srcOffset +=  u32(idx) * inputStrides[i];\\\\n        } else {\\\\n          srcOffset += \\\").concat(S.indicesGet(\\\"outputIndices\\\",\\\"i\\\"),\\\" * inputStrides[i];\\\\n        }\\\\n      }\\\\n\\\\n      // Should never hit this with valid values in indices\\\\n      // This is a guard against malicious data in the indices input\\\\n      if (srcOffset < 0 || srcOffset >= \\\").concat(p,\\\") {\\\\n        return;\\\\n      }\\\\n\\\\n      output[global_idx] = input[srcOffset];\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(y/64)}}})}(n,e.inputs,t))}},8405:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.gather=t.parseGatherAttributes=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075);t.parseGatherAttributes=function(e){return(0,c.createAttributeWithCacheKey)({axis:e.axis})},t.gather=function(e,t){!function(e){if(!e||2!==e.length)throw new Error(\\\"Gather requires 2 inputs.\\\")}(e.inputs);var n={name:\\\"Gather\\\",inputTypes:[u.GpuDataType.default,u.GpuDataType.default],cacheHint:t.cacheKey};e.compute(function(e,t,n){var c=t[0].dims,l=t[1].dims,p=c.length,f=i.ShapeUtil.normalizeAxis(n.axis,p),d=c.slice(0);d.splice.apply(d,o([f,1],a(l),!1));var h=c[f],g=i.ShapeUtil.size(d),m=(0,s.inputVariable)(\\\"data\\\",t[0].dataType,t[0].dims),v=(0,s.inputVariable)(\\\"inputIndices\\\",t[1].dataType,t[1].dims),y=(0,s.outputVariable)(\\\"output\\\",t[0].dataType,d);return r(r({},e),{outputs:[{dims:d,dataType:t[0].dataType,gpuDataType:u.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n      \\\".concat(e.declareVariables(m,v,y),\\\"\\\\n      \\\").concat(e.mainStart(),\\\"\\\\n        \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(g),\\\"\\\\n        let outputIndices = \\\").concat(y.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n        \\\").concat(function(){for(var e=l.length,t=\\\"var indicesIndices  = \\\".concat(v.type.indices,\\\"(0);\\\"),n=0;n<e;n++)t+=\\\"\\\".concat(e>1?\\\"indicesIndices[\\\".concat(n,\\\"]\\\"):\\\"indicesIndices\\\",\\\" = \\\").concat(d.length>1?\\\"outputIndices[\\\".concat(f+n,\\\"]\\\"):\\\"outputIndices\\\",\\\";\\\");t+=\\\"\\\\n        var idx = \\\".concat(v.getByIndices(\\\"indicesIndices\\\"),\\\";\\\\n        if (idx < 0) {\\\\n          idx = idx + \\\").concat(h,\\\";\\\\n        }\\\\n        var dataIndices = \\\").concat(m.type.indices,\\\"(0);\\\\n      \\\"),n=0;for(var r=0;n<p;n++)n===f?(t+=\\\"\\\".concat(p>1?\\\"dataIndices[\\\".concat(n,\\\"]\\\"):\\\"dataIndices\\\",\\\" = u32(idx);\\\"),r+=e):(t+=\\\"\\\".concat(p>1?\\\"dataIndices[\\\".concat(n,\\\"]\\\"):\\\"dataIndices\\\",\\\" = \\\").concat(d.length>1?\\\"outputIndices[\\\".concat(r,\\\"]\\\"):\\\"outputIndices\\\",\\\";\\\"),r++);return t}(),\\\";\\\\n        let value = \\\").concat(m.getByIndices(\\\"dataIndices\\\"),\\\";\\\\n        \\\").concat(y.setByOffset(\\\"global_idx\\\",\\\"value\\\"),\\\";\\\\n      }\\\")},dispatchGroup:function(){return{x:Math.ceil(g/64)}}})}(n,e.inputs,t))}},4271:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseGemmAttributes=t.gemm=void 0;var o=n(6952),i=n(387),c=n(1163),u=n(2075);t.gemm=function(e,t){!function(e){if(!e)throw new Error(\\\"Input is missing\\\");if(e.length<2||e.length>3)throw new Error(\\\"Invaid input number.\\\");if(3===e.length&&e[2].dims.length>2)throw new Error(\\\"Invalid input shape of C\\\");if(e[0].dataType!==e[1].dataType||3===e.length&&e[0].dataType!==e[2].dataType)throw new Error(\\\"Input types are mismatched\\\")}(e.inputs),e.compute(function(e,t){var n={name:\\\"Gemm\\\",inputTypes:3===e.length?[c.GpuDataType.default,c.GpuDataType.default,c.GpuDataType.default]:[c.GpuDataType.default,c.GpuDataType.default],cacheHint:t.cacheKey};return r(r({},n),{get:function(){return function(e,t,n){var i=t[0].dims.slice(),s=t[1].dims.slice(),l=a(o.GemmUtil.getShapeOfGemmResult(i,n.transA,s,n.transB,3===t.length?t[2].dims:void 0),3),p=l[0],f=l[1],d=l[2],h=[p,f];if(!h)throw new Error(\\\"Can't use gemm on the given tensors\\\");var g=o.ShapeUtil.size(h),m=\\\"\\\";n.transA&&n.transB?m=\\\"value += a[k * M + m] * b[n * K + k];\\\":n.transA&&!n.transB?m=\\\"value += a[k * M + m] * b[k * N + n];\\\":!n.transA&&n.transB?m=\\\"value += a[m * K + k] * b[n * K + k];\\\":n.transA||n.transB||(m=\\\"value += a[m * K + k] * b[k * N + n];\\\");var v=(0,u.tensorTypeToWsglStorageType)(t[0].dataType),y=1===n.alpha?\\\"\\\":\\\"value *= alpha;\\\",b=3===t.length?\\\"value += beta * c[\\\".concat(function(e,t,n){if(0===n.length)return\\\"0u\\\";var r=1===n.length&&1!==e||2===n.length&&n[0]!==e,a=n[n.length-1]!==t,o=\\\"0u\\\";return r||(o+=\\\"+ m * \\\".concat(n[n.length-1],\\\"u\\\")),a||(o+=\\\"+n\\\"),o}(p,f,t[2].dims),\\\"];\\\"):\\\"\\\",w=[\\\"@group(0) @binding(0) var<storage, read> a : array<\\\".concat(v,\\\">;\\\"),\\\"@group(0) @binding(1) var<storage, read> b : array<\\\".concat(v,\\\">;\\\")];return 3===t.length&&w.push(\\\"@group(0) @binding(2) var<storage, read> c : array<\\\".concat(v,\\\">;\\\")),r(r({},e),{outputs:[{dims:h,dataType:t[0].dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const M: u32 = \\\".concat(p,\\\"u;\\\\n  const N: u32 = \\\").concat(f,\\\"u;\\\\n  const K: u32 = \\\").concat(d,\\\"u;\\\\n  const alpha = \\\").concat(v,\\\"(\\\").concat(n.alpha,\\\");\\\\n  const beta = \\\").concat(v,\\\"(\\\").concat(n.beta,\\\");\\\\n\\\\n  \\\").concat(w.join(\\\"\\\\n\\\"),\\\"\\\\n  @group(0) @binding(\\\").concat(t.length,\\\") var<storage, read_write> output : array<\\\").concat(v,\\\">;\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(g),\\\"\\\\n\\\\n    let m = global_id.x / N;\\\\n    let n = global_id.x % N;\\\\n\\\\n    var value = \\\").concat(v,\\\"(0);\\\\n    for (var k: u32 = 0u; k<\\\").concat(d,\\\"u; k++) {\\\\n      \\\").concat(m,\\\"\\\\n    }\\\\n\\\\n    \\\").concat(y,\\\"\\\\n    \\\").concat(b,\\\"\\\\n    output[global_id.x] = value;\\\\n\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(g/64)}}})}(n,e,t)}})}(e.inputs,t))},t.parseGemmAttributes=function(e){return(0,i.createAttributeWithCacheKey)(e)}},1798:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.instanceNorm=t.parseInstanceNormAttributes=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075);t.parseInstanceNormAttributes=function(e){return(0,c.createAttributeWithCacheKey)({epsilon:e.epsilon,format:e.format})},t.instanceNorm=function(e,t){var n={name:\\\"InstanceNormalization\\\",inputTypes:[u.GpuDataType.default,u.GpuDataType.default,u.GpuDataType.default],cacheHint:t.cacheKey};\\\"NHWC\\\"===t.format?e.compute(function(e,t,n){var a=t[0].dims,o=a,c=i.ShapeUtil.size(o),l=a[0],p=a[a.length-1],f=i.ShapeUtil.sizeFromDimension(a,1)/p,d=(0,s.tensorTypeToWsglStorageType)(t[0].dataType),h=p*l;return r(r({},e),{outputs:[{dims:o,dataType:t[0].dataType,gpuDataType:u.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  const N: u32 = \\\".concat(l,\\\";\\\\n  const H: u32 = \\\").concat(f,\\\";\\\\n  const C: u32 = \\\").concat(p,\\\";\\\\n  const normSizeTyped: \\\").concat(d,\\\" = \\\").concat(f,\\\";\\\\n  const imageSize: u32 = \\\").concat(f*p,\\\";\\\\n  const epsilon: f32 = \\\").concat(n.epsilon,\\\";\\\\n\\\\n  @group(0) @binding(0) var<storage, read> x : array<\\\").concat(d,\\\">;\\\\n  @group(0) @binding(1) var<storage, read> scale : array<\\\").concat(d,\\\">;\\\\n  @group(0) @binding(2) var<storage, read> bias : array<\\\").concat(d,\\\">;\\\\n  @group(0) @binding(3) var<storage, read_write> output : array<\\\").concat(d,\\\">;\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    let currentImageNumber = global_idx / C;\\\\n    let currentChannelNumber = global_idx % C;\\\\n\\\\n    // offset is channel num * N\\\\n    let offset = currentImageNumber * imageSize;\\\\n    if (offset >= \\\").concat(c,\\\") { return; }\\\\n    var mean: \\\").concat(d,\\\" = 0;\\\\n\\\\n    for (var i: u32 = 0u; i < H; i++) {\\\\n        mean = mean + x[offset + i * C + currentChannelNumber];\\\\n    }\\\\n    mean = mean / normSizeTyped;\\\\n\\\\n    var squaredNorm: \\\").concat(d,\\\" = 0;\\\\n    for (var i: u32 = 0u; i < H; i++) {\\\\n        let deviation: f32 = x[offset + i * C + currentChannelNumber] - mean;\\\\n        squaredNorm = squaredNorm + deviation * deviation;\\\\n    }\\\\n    let invStdDev = 1 / sqrt(squaredNorm / normSizeTyped + epsilon);\\\\n    let channelScale = invStdDev * scale[currentChannelNumber];\\\\n    let channelShift = bias[currentChannelNumber] - mean * channelScale;\\\\n    for (var i: u32 = 0u; i < H; i++) {\\\\n        let currentOffset = offset + i * C + currentChannelNumber;\\\\n        output[currentOffset] = x[currentOffset] * channelScale + channelShift;\\\\n    }\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(h/64)}}})}(n,e.inputs,t)):e.compute(function(e,t,n){var c=t[0].dims,l=c,p=i.ShapeUtil.sizeToDimension(c,2),f=i.ShapeUtil.sizeFromDimension(c,2),d=c[1],h=(0,s.inputVariable)(\\\"x\\\",t[0].dataType,[c[0],c[1],f]),g=(0,s.inputVariable)(\\\"scale\\\",t[1].dataType,t[1].dims),m=(0,s.inputVariable)(\\\"bias\\\",t[2].dataType,t[2].dims),v=(0,s.outputVariable)(\\\"output\\\",t[0].dataType,[c[0],c[1],f]),y=[h,g,m,v],b=h.type.value;return r(r({},e),{outputs:[{dims:l,dataType:t[0].dataType,gpuDataType:u.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n\\\\n  const C: u32 = \\\".concat(d,\\\";\\\\n  const normSize: u32 = \\\").concat(f,\\\";\\\\n  const epsilon: f32 = \\\").concat(n.epsilon,\\\";\\\\n  var<workgroup> meanShared : \\\").concat(b,\\\";\\\\n  var<workgroup> squaredNormShared : \\\").concat(b,\\\";\\\\n  var<workgroup> workgroupShared : array<\\\").concat(b,\\\", \\\").concat(64,\\\">;\\\\n  const workgroupSize = \\\").concat(64,\\\"u;\\\\n  \\\").concat(e.declareVariables.apply(e,o([],a(y),!1)),\\\"\\\\n  \\\").concat(e.mainStart(64),\\\"\\\\n    let norm = global_idx / workgroupSize;\\\\n    let batch = norm / C;\\\\n    let channel = norm % C;\\\\n    let localIndex = local_id.x;\\\\n\\\\n    // initialize workgroup memory\\\\n    var initial: \\\").concat(b,\\\" = 0;\\\\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\\\\n      initial = initial + \\\").concat(h.get(\\\"batch\\\",\\\"channel\\\",\\\"h\\\"),\\\";\\\\n    }\\\\n    workgroupShared[localIndex] = initial;\\\\n    workgroupBarrier();\\\\n\\\\n    // Calculate the mean of current channel data.\\\\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\\\\n      if (localIndex < currSize) {\\\\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\\\\n      }\\\\n      workgroupBarrier();\\\\n    }\\\\n    if (localIndex == 0) {\\\\n      meanShared = workgroupShared[0] / \\\").concat(b,\\\"(normSize);\\\\n    }\\\\n    workgroupBarrier();\\\\n\\\\n    // reinitialize workgroup memory.\\\\n    initial = 0;\\\\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\\\\n      let deviation =  \\\").concat(h.get(\\\"batch\\\",\\\"channel\\\",\\\"h\\\"),\\\" - meanShared;\\\\n      initial = initial + deviation * deviation;\\\\n    }\\\\n    workgroupShared[localIndex] = initial;\\\\n    workgroupBarrier();\\\\n\\\\n    // Calculate the sum of square of deviation of current channel data.\\\\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\\\\n      if (localIndex < currSize) {\\\\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\\\\n      }\\\\n      workgroupBarrier();\\\\n    }\\\\n    if (localIndex == 0) {\\\\n      squaredNormShared = workgroupShared[0];\\\\n    }\\\\n    workgroupBarrier();\\\\n\\\\n    let invStdDev = 1 / sqrt(squaredNormShared / \\\").concat(b,\\\"(normSize) + epsilon);\\\\n    let channelScale = invStdDev * \\\").concat(g.getByOffset(\\\"channel\\\"),\\\";\\\\n    let channelShift = \\\").concat(m.getByOffset(\\\"channel\\\"),\\\" - meanShared * channelScale;\\\\n    for (var h = localIndex; h < normSize; h += workgroupSize) {\\\\n      let value = \\\").concat(h.get(\\\"batch\\\",\\\"channel\\\",\\\"h\\\"),\\\" * channelScale + channelShift;\\\\n      \\\").concat(v.set(\\\"batch\\\",\\\"channel\\\",\\\"h\\\",\\\"value\\\"),\\\";\\\\n    }\\\\n  }\\\")},dispatchGroup:function(){return{x:p}}})}(n,e.inputs,t))}},6145:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.layerNorm=t.parseLayerNormAttributes=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075);t.parseLayerNormAttributes=function(e){return(0,o.createAttributeWithCacheKey)({axis:e.axis,epsilon:e.epsilon})},t.layerNorm=function(e,t){!function(e){if(!e||e.length<2)throw new Error(\\\"layerNorm requires at least 2 inputs.\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"inputs should be float type\\\")}(e.inputs);var n={name:\\\"LayerNormalization\\\",inputTypes:2===e.inputs.length?[i.GpuDataType.default,i.GpuDataType.default]:[i.GpuDataType.default,i.GpuDataType.default,i.GpuDataType.default],cacheHint:t.cacheKey+e.outputCount.toString(10)+e.inputs.length.toString(10)};e.compute(function(e,t,n,o){var u=t[0].dims,s=t[1],l=t[2],p=u,f=a.ShapeUtil.size(p),d=a.ShapeUtil.normalizeAxis(n.axis,u.length),h=a.ShapeUtil.sizeToDimension(u,d),g=a.ShapeUtil.sizeFromDimension(u,d),m=a.ShapeUtil.size(s.dims),v=l?a.ShapeUtil.size(l.dims):0;if(m!==g||l&&v!==g)throw new Error(\\\"Size of X.shape()[axis:] == \\\".concat(g,\\\".\\\\n       Size of scale and bias (if provided) must match this.\\\\n       Got scale size of \\\").concat(m,\\\" and bias size of \\\").concat(v));for(var y=[],b=0;b<u.length;++b)b<d?y.push(u[b]):y.push(1);var w=(0,c.tensorTypeToWsglStorageType)(t[0].dataType),S=o>1,_=o>2,x=0,O=[{dims:p,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}];return S&&O.push({dims:y,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),_&&O.push({dims:y,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),r(r({},e),{outputs:O,getShaderSource:function(e){return\\\"\\\\n  const normSize: u32 = \\\".concat(g,\\\";\\\\n  const normSizeTyped: \\\").concat(w,\\\" = \\\").concat(g,\\\";\\\\n  const epsilon: f32 = \\\").concat(n.epsilon,\\\";\\\\n\\\\n  @group(0) @binding(\\\").concat(x++,\\\") var<storage, read> x : array<\\\").concat(w,\\\">;\\\\n  @group(0) @binding(\\\").concat(x++,\\\") var<storage, read> scale : array<\\\").concat(w,\\\">;\\\\n  \\\").concat(l?\\\"@group(0) @binding(\\\".concat(x++,\\\") var<storage, read> bias : array<\\\").concat(w,\\\">;\\\"):\\\"\\\",\\\"\\\\n  @group(0) @binding(\\\").concat(x++,\\\") var<storage, read_write> output : array<\\\").concat(w,\\\">;\\\\n  \\\").concat(S?\\\"@group(0) @binding(\\\".concat(x++,\\\") var<storage, read_write> meanDataOutput : array<\\\").concat(w,\\\">\\\"):\\\"\\\",\\\";\\\\n  \\\").concat(_?\\\"@group(0) @binding(\\\".concat(x++,\\\") var<storage, read_write> invStdOutput : array<\\\").concat(w,\\\">\\\"):\\\"\\\",\\\";\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    let offset = global_idx * normSize;\\\\n    if (offset >= \\\").concat(f,\\\") { return; }\\\\n    var mean: \\\").concat(w,\\\" = 0;\\\\n    var meanSquare: \\\").concat(w,\\\" = 0;\\\\n\\\\n    for (var h: u32 = 0u; h < normSize; h++) {\\\\n      mean = mean + x[h + offset];\\\\n      meanSquare = meanSquare + x[h + offset] * x[h + offset];\\\\n    }\\\\n    mean = mean / normSizeTyped;\\\\n    meanSquare = sqrt(meanSquare / normSizeTyped - mean * mean + epsilon);\\\\n\\\\n    for (var j: u32 = 0; j < normSize; j++) {\\\\n      output[j + offset] = (x[j + offset] - mean) / meanSquare * scale[j] \\\").concat(l?\\\"+ bias[j]\\\":\\\"\\\",\\\";\\\\n    }\\\\n\\\\n    \\\").concat(S?\\\"meanDataOutput[global_idx] = mean\\\":\\\"\\\",\\\";\\\\n    \\\").concat(_?\\\"invStdOutput[global_idx] = 1 / meanSquare\\\":\\\"\\\",\\\";\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(h/64)}}})}(n,e.inputs,t,e.outputCount))}},1522:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.matMul=t.createMatmulProgramInfoLoader=void 0;var a=n(6952),o=n(1163),i=n(158);t.createMatmulProgramInfoLoader=function(e,t,n,a,c){void 0===c&&(c=!1);var u,s,l=(u=e.length>2,s=t.activationCacheKey,{name:\\\"MatMul\\\",inputTypes:u?[o.GpuDataType.default,o.GpuDataType.default,o.GpuDataType.default]:[o.GpuDataType.default,o.GpuDataType.default],cacheHint:s});return r(r({},l),{get:function(){return(0,i.createMatmulProgramInfo)(l,e,t,n,a,c)}})},t.matMul=function(e){!function(e){if(!e||2!==e.length)throw new Error(\\\"MatMul requires 2 inputs.\\\");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error(\\\"shared dimension does not match.\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"inputs should be float type\\\")}(e.inputs);var n=a.BroadcastUtil.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!n)throw new Error(\\\"Can't use matmul on the given tensors\\\");e.compute((0,t.createMatmulProgramInfoLoader)(e.inputs,{activation:\\\"\\\",activationCacheKey:\\\"\\\"},n))}},3053:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parsePadAttributes=t.pad=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075),u=function(e,t){var n=function(e,t){if(e.length>1){var n=e[1].getBigInt64Array(),r=e.length>=3?e[2].getFloat32Array()[0]:0,a=e[0].dims.length,i=new Int32Array(2*a).fill(0);if(e.length>=4)for(var c=e[3].getBigInt64Array(),u=0;u<c.length;u++)i[Number(c[u])]=Number(n[u]),i[Number(c[u])+a]=Number(n[u+c.length]);else n.forEach((function(e,t){return i[Number(e)]=Number(t)}));var s=[];return i.forEach((function(e){return s.push(e)})),(0,o.createAttributeWithCacheKey)({mode:t.mode,value:r,pads:s})}return t}(e,t),u={name:\\\"Pad\\\",inputTypes:[i.GpuDataType.default],cacheHint:n.cacheKey};return r(r({},u),{get:function(){return function(e,t,n){var o=a.ShapeUtil.padShape(e[0].dims.slice(),n.pads);return r(r({},t),{outputs:[{dims:o,dataType:e[0].dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:function(t){return function(e,t,n,r){var o=t[0].dims,i=a.ShapeUtil.padShape(o.slice(),n.pads),u=a.ShapeUtil.size(i),s=a.ShapeUtil.computeStrides(o),l=(0,c.outputVariable)(\\\"output\\\",t[0].dataType,i),p=(0,c.inputVariable)(\\\"x\\\",t[0].dataType,o),f=function(e,t,n,r,a,o){switch(a.mode){case 0:return function(e,t,n,r,a,o,i){for(var c=\\\"\\\",u=n.length-1;u>=0;--u)c+=\\\"\\\\n            k = i32(\\\".concat(e.indicesGet(\\\"indices\\\",u),\\\") - \\\").concat(a[u],\\\";\\\\n            if (k < 0) {\\\\n              break;\\\\n            }\\\\n            if (k >= \\\").concat(n[u],\\\") {\\\\n              break;\\\\n            }\\\\n            offset += k * \\\").concat(r[u],\\\";\\\\n        \\\");return\\\"\\\\n          value = \\\".concat(o,\\\"(\\\").concat(i,\\\");\\\\n          for (var i = 0; i < 1; i++) {\\\\n            var offset = 0;\\\\n            var k = 0;\\\\n            \\\").concat(c,\\\"\\\\n            value = x[offset];\\\\n          }\\\\n      \\\")}(e,0,n,r,a.pads,o,a.value);case 1:return function(e,t,n,r,a){for(var o=\\\"\\\",i=n.length-1;i>=0;--i)o+=\\\"\\\\n                k = i32(\\\".concat(e.indicesGet(\\\"indices\\\",i),\\\") - \\\").concat(a[i],\\\";\\\\n                if (k < 0) {\\\\n                  k = -k;\\\\n                }\\\\n                {\\\\n                  let _2n_1 = \\\").concat(2*(n[i]-1),\\\";\\\\n                  k = k % _2n_1;\\\\n                  if(k >= \\\").concat(n[i],\\\") {\\\\n                    k = _2n_1 - k;\\\\n                  }\\\\n                }\\\\n                offset += k * \\\").concat(r[i],\\\";\\\\n            \\\");return\\\"\\\\n              var offset = 0;\\\\n              var k = 0;\\\\n              \\\".concat(o,\\\"\\\\n              value = x[offset];\\\\n          \\\")}(e,0,n,r,a.pads);case 2:return function(e,t,n,r,a){for(var o=\\\"\\\",i=n.length-1;i>=0;--i)o+=\\\"\\\\n                k = i32(\\\".concat(e.indicesGet(\\\"indices\\\",i),\\\") - \\\").concat(a[i],\\\";\\\\n                if (k < 0) {\\\\n                  k = 0;\\\\n                }\\\\n                if (k >= \\\").concat(n[i],\\\") {\\\\n                  k = \\\").concat(n[i]-1,\\\";\\\\n                }\\\\n                offset += k * \\\").concat(r[i],\\\";\\\\n            \\\");return\\\"\\\\n              var offset = 0;\\\\n              var k = 0;\\\\n              \\\".concat(o,\\\"\\\\n              value = x[offset];\\\\n          \\\")}(e,0,n,r,a.pads);case 3:return function(e,t,n,r,a){for(var o=\\\"\\\",i=n.length-1;i>=0;--i)o+=\\\"\\\\n                k = i32(\\\".concat(e.indicesGet(\\\"indices\\\",i),\\\") - \\\").concat(a[i],\\\";\\\\n                if (k < 0)  {\\\\n                  k += \\\").concat(n[i],\\\";\\\\n                }\\\\n                if (k >= \\\").concat(n[i],\\\") {\\\\n                  k -= \\\").concat(n[i],\\\";\\\\n                }\\\\n                offset += k * \\\").concat(r[i],\\\";\\\\n            \\\");return\\\"\\\\n              var offset = 0;\\\\n              var k = 0;\\\\n              \\\".concat(o,\\\"\\\\n              value = x[offset];\\\\n          \\\")}(e,0,n,r,a.pads);default:throw new Error(\\\"Invalid mode\\\")}}(l,0,o,s,n,r);return\\\"\\\\n              \\\".concat(e.declareVariables(p,l),\\\"\\\\n              \\\").concat(l.impl(),\\\"\\\\n              \\\").concat(e.mainStart(),\\\"\\\\n              \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(u),\\\"\\\\n\\\\n              let indices = \\\").concat(l.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n\\\\n              var value = \\\").concat(r,\\\"(0);\\\\n              \\\").concat(f,\\\"\\\\n              output[global_idx] = value;\\\\n          }\\\")}(t,e,n,\\\"f32\\\")},dispatchGroup:function(){return{x:Math.ceil(a.ShapeUtil.size(o)/64)}}})}(e,u,n)}})};t.pad=function(e,t){!function(e){if(!e||e.length<1)throw new Error(\\\"Too few inputs\\\");if(1!==e[0].dataType)throw new Error(\\\"Input type must be float.\\\");if(e.length>=2){var t=2*e[0].dims.length===e[1].dims[0];if(4===e.length&&(t=2*e[3].dims[0]===e[1].dims[0]),!t)throw new Error(\\\"The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].\\\")}}(e.inputs),e.compute(u(e.inputs,t),{inputs:[0]})},t.parsePadAttributes=function(e){var t=e.mode,n=e.value,r=e.pads;return(0,o.createAttributeWithCacheKey)({mode:t,value:n,pads:r})}},5262:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.globalMaxPool=t.parseGlobalMaxPoolAttributes=t.parseMaxPoolAttributes=t.maxPool=t.globalAveragePool=t.parseGlobalAveragePoolAttributes=t.averagePool=t.parseAveragePoolAttributes=void 0;var o=n(6952),i=n(387),c=n(1163),u=n(2075),s=function(e){if(!e||1!==e.length)throw new Error(\\\"Pool ops requires 1 input.\\\");if(4!==e[0].dims.length)throw new Error(\\\"Pool ops supports 2-D inputs only for now.\\\")},l=function(e,t,n){var r=\\\"NHWC\\\"===t.format,a=r?[e.dims[0],e.dims[3],e.dims[1],e.dims[2]]:e.dims.slice(),i=Object.hasOwnProperty.call(t,\\\"dilations\\\"),c=t.kernelShape.slice(),u=t.strides.slice(),s=i?t.dilations.slice():[],l=t.pads.slice();o.PoolConvUtil.adjustPoolAttributes(n,a,c,u,s,l);var p=o.PoolConvUtil.computePoolOutputShape(n,a,u,s,c,l,t.autoPad),f=Object.assign({},t);return i?Object.assign(f,{kernelShape:c,strides:u,pads:l,dilations:s,cacheKey:t.cacheKey}):Object.assign(f,{kernelShape:c,strides:u,pads:l,cacheKey:t.cacheKey}),[f,r?[p[0],p[2],p[3],p[1]]:p]},p=function(e,t,n,r,a,i,c){var s=\\\"NHWC\\\"===r.format,l=t.shape,p=t.type.value,f=l.length,d=o.ShapeUtil.size(n),h=(0,u.outputVariable)(\\\"output\\\",t.type.tensor,n);if(r.kernelShape.length<=2){var g,m=r.kernelShape[r.kernelShape.length-1],v=r.strides[r.strides.length-1],y=r.pads[r.pads.length/2-1],b=f-(s?2:1),w=\\\"\\\",S=\\\"\\\";if(g=y+r.pads[r.pads.length-1]!==0?\\\"\\\\n              for (var i: u32 = 0u; i < \\\".concat(m,\\\"u; i++) {\\\\n                xIndices[\\\").concat(b,\\\"] = indices[\\\").concat(b,\\\"] * \\\").concat(v,\\\" - \\\").concat(y,\\\" + i;\\\\n                if (xIndices[\\\").concat(b,\\\"] < 0 || xIndices[\\\").concat(b,\\\"] >= \\\").concat(l[b],\\\") {\\\\n                  pad++;\\\\n                  continue;\\\\n                }\\\\n                let x_val = x[\\\").concat(t.indicesToOffset(\\\"xIndices\\\"),\\\"];\\\\n                \\\").concat(a,\\\"\\\\n              }\\\"):\\\"\\\\n              for (var i: u32 = 0u; i < \\\".concat(m,\\\"u; i++) {\\\\n                xIndices[\\\").concat(b,\\\"] = indices[\\\").concat(b,\\\"] * \\\").concat(v,\\\" - \\\").concat(y,\\\" + i;\\\\n                let x_val = x[\\\").concat(t.indicesToOffset(\\\"xIndices\\\"),\\\"];\\\\n                \\\").concat(a,\\\"\\\\n              }\\\"),2===r.kernelShape.length){var _=r.kernelShape[r.kernelShape.length-2],x=r.strides[r.strides.length-2],O=r.pads[r.pads.length/2-2],T=r.pads[r.pads.length-2],I=f-(s?3:2),A=l[I];w=O+T!==0?\\\"\\\\n                for (var j: u32 = 0u; j < \\\".concat(_,\\\"u; j++) {\\\\n                  xIndices[\\\").concat(I,\\\"] = indices[\\\").concat(I,\\\"] * \\\").concat(x,\\\" - \\\").concat(O,\\\" + j;\\\\n                  if (xIndices[\\\").concat(I,\\\"] < 0 || xIndices[\\\").concat(I,\\\"] >= \\\").concat(A,\\\") {\\\\n                    pad+= \\\").concat(m,\\\";\\\\n                    continue;\\\\n                  }\\\\n              \\\"):\\\"\\\\n                for (var j: u32 = 0u; j < \\\".concat(_,\\\"u; j++) {\\\\n                  xIndices[\\\").concat(I,\\\"] = indices[\\\").concat(I,\\\"] * \\\").concat(x,\\\" - \\\").concat(O,\\\" + j;\\\\n                \\\"),S=\\\"\\\\n              }\\\\n            \\\"}return\\\"\\\\n            \\\".concat(e.declareVariables(t,h),\\\"\\\\n\\\\n            \\\").concat(e.mainStart(),\\\"\\\\n              \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(d),\\\"\\\\n\\\\n              let indices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n              var xIndices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n\\\\n              var value: \\\").concat(p,\\\" = \\\").concat(p,\\\"(\\\").concat(c,\\\");\\\\n              var pad = 0;\\\\n              \\\").concat(w,\\\"\\\\n              \\\").concat(g,\\\"\\\\n              \\\").concat(S,\\\"\\\\n              \\\").concat(i,\\\"\\\\n\\\\n              output[global_idx] = value;\\\\n            }\\\")}if(s)throw new Error(\\\"Pooling with kernelShape.length > 2 is not supported for NHWC format.\\\");var E,C=o.ShapeUtil.size(r.kernelShape),P=o.ShapeUtil.computeStrides(r.kernelShape),k=P.length,M=r.pads.length;return E=r.pads.reduce((function(e,t){return e+t}))?\\\"\\\\n                if (xIndices[j] >= inputDims[j]) {\\\\n                  pad++;\\\\n                  isPad = true;\\\\n                  break;\\\\n                }\\\\n              }\\\\n              if (!isPad) {\\\\n                let x_val = x[\\\".concat(t.indicesToOffset(\\\"xIndices\\\"),\\\"];\\\\n                \\\").concat(a,\\\"\\\\n              }\\\"):\\\"\\\\n              }\\\\n              let x_val = x[\\\".concat(t.indicesToOffset(\\\"xIndices\\\"),\\\"];\\\\n              \\\").concat(a,\\\"\\\\n            \\\"),\\\"\\\\n            \\\".concat(e.declareVariables(t,h),\\\"\\\\n\\\\n            const pads = array<u32, \\\").concat(M,\\\">(\\\").concat(r.pads.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n            const inputDims = array<u32, \\\").concat(f,\\\">(\\\").concat(l.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n            const kernelStrides = array<u32, \\\").concat(k,\\\">(\\\").concat(P.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n            const strides = array<u32, \\\").concat(k,\\\">(\\\").concat(r.strides.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n\\\\n            \\\").concat(e.mainStart(),\\\"\\\\n              \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(d),\\\"\\\\n\\\\n              let indices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n              let xIndices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n\\\\n              var offsets: array<u32, \\\").concat(k,\\\">;\\\\n\\\\n              var value = \\\").concat(h.type.value,\\\"(\\\").concat(c,\\\");\\\\n              var pad = 0;\\\\n              var isPad = false;\\\\n\\\\n              for (var i: u32 = 0u; i < \\\").concat(C,\\\"u; i++) {\\\\n                var offset = i;\\\\n                for (var j = 0u; j < \\\").concat(k-1,\\\"u; j++) {\\\\n                  offsets[j] = offset / kernelStrides[j];\\\\n                  offset -= offsets[j] * kernelStrides[j];\\\\n                }\\\\n                offsets[\\\").concat(k-1,\\\"] = offset;\\\\n\\\\n                isPad = false;\\\\n                for (var j = \\\").concat(f-k,\\\"u; j < \\\").concat(f,\\\"u; j++) {\\\\n                  xIndices[j] = indices[j] * strides[j - \\\").concat(f-k,\\\"u]\\\\n                    + offsets[j - \\\").concat(f-k,\\\"u] - pads[j - 2u];\\\\n                  \\\").concat(E,\\\"\\\\n              }\\\\n              \\\").concat(i,\\\"\\\\n\\\\n              output[global_idx] = value;\\\\n            }\\\")},f=function(e){return{format:e.format,autoPad:[\\\"NOTSET\\\",\\\"VALID\\\",\\\"SAME_UPPER\\\",\\\"SAME_LOWER\\\"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}},d=function(e,t,n,i){var s=a(l(e,i,n),2),f=s[0],d=s[1],h=o.ShapeUtil.size(f.kernelShape),g=(0,u.inputVariable)(\\\"x\\\",e.dataType,e.dims),m=g.type.value,v=\\\"\\\";return f.countIncludePad?v+=\\\"value /= \\\".concat(m,\\\"(\\\").concat(h,\\\");\\\"):v+=\\\"value /= \\\".concat(m,\\\"(\\\").concat(h,\\\" - pad);\\\"),r(r({},t),{outputs:[{dims:d,dataType:e.dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return p(e,g,d,f,\\\"value += x_val;\\\",v,\\\"0.0\\\")},dispatchGroup:function(){return{x:Math.ceil(o.ShapeUtil.size(d)/64)}}})};t.parseAveragePoolAttributes=function(e){var t=0!==e.count_include_pad,n=f(e);if(0!==n.ceilMode)throw new Error(\\\"using ceil() in shape computation is not yet supported for AveragePool\\\");return(0,i.createAttributeWithCacheKey)(r({countIncludePad:t},n))},t.averagePool=function(e,t){s(e.inputs);var n={name:\\\"AveragePool\\\",inputTypes:[c.GpuDataType.default],cacheHint:t.cacheKey};e.compute(r(r({},n),{get:function(){return d(e.inputs[0],n,!1,t)}}))};var h={autoPad:\\\"\\\",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[],cacheKey:\\\"\\\"};t.parseGlobalAveragePoolAttributes=function(e){var t=e.format;return r(r({format:t},h),{cacheKey:t})},t.globalAveragePool=function(e,t){s(e.inputs);var n={name:\\\"GlobalAveragePool\\\",inputTypes:[c.GpuDataType.default],cacheHint:t.cacheKey};e.compute(r(r({},n),{get:function(){return d(e.inputs[0],n,!0,t)}}))};var g=function(e,t,n,i){var s=a(l(e,i,n),2),f=s[0],d=s[1],h=(0,u.inputVariable)(\\\"x\\\",e.dataType,e.dims);return r(r({},t),{outputs:[{dims:d,dataType:e.dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return p(e,h,d,f,\\\"\\\\n      value = max(x_val, value);\\\\n    \\\",\\\"\\\",\\\"-1e5\\\")},dispatchGroup:function(){return{x:Math.ceil(o.ShapeUtil.size(d)/64)}}})};t.maxPool=function(e,t){s(e.inputs);var n={name:\\\"MaxPool\\\",inputTypes:[c.GpuDataType.default],cacheHint:t.cacheKey};e.compute(r(r({},n),{get:function(){return g(e.inputs[0],n,!1,t)}}))},t.parseMaxPoolAttributes=function(e){var t=e.storage_order,n=e.dilations,a=f(e);if(0!==t)throw new Error(\\\"column major storage order is not yet supported for MaxPool\\\");if(0!==a.ceilMode)throw new Error(\\\"using ceil() in shape computation is not yet supported for MaxPool\\\");return(0,i.createAttributeWithCacheKey)(r({storageOrder:t,dilations:n},a))},t.parseGlobalMaxPoolAttributes=function(e){var t=e.format;return r(r({format:t},h),{cacheKey:t})},t.globalMaxPool=function(e,t){s(e.inputs);var n={name:\\\"GlobalMaxPool\\\",inputTypes:[c.GpuDataType.default],cacheHint:t.cacheKey};e.compute(r(r({},n),{get:function(){return g(e.inputs[0],n,!0,t)}}))}},6031:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseReduceAttributes=t.reduceSumSquare=t.reduceSum=t.reduceProd=t.reduceMin=t.reduceMean=t.reduceMax=t.reduceLogSumExp=t.reduceL2=t.reduceL1=t.reduceLogSum=t.createReduceProgramInfo=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075),u=function(e){if(!e||0===e.length||e.length>2)throw new Error(\\\"Reduce op requires 1 or 2 inputs.\\\");if(2===e.length&&1!==e[1].dims.length)throw new Error(\\\"Invalid axes input dims.\\\")},s=function(e){return[\\\"\\\",\\\"\\\",\\\"var value = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"\\\"]};t.createReduceProgramInfo=function(e,t,n,o,u,s,l){void 0===s&&(s=!1),void 0===l&&(l=!1);var p=[],f=t[0].dims,d=a.ShapeUtil.normalizeAxes(o,t[0].dims.length),h=!l&&0===d.length;f.forEach((function(e,t){h||d.indexOf(t)>=0?s&&p.push(1):p.push(e)}));for(var g=[],m=(0,c.inputVariable)(\\\"_A\\\",t[0].dataType,f),v=(0,c.outputVariable)(\\\"output\\\",u,p),y=n(m,v,d),b=\\\"inputOffset = \\\".concat(m.indicesToOffset(\\\"inputIndices\\\"),\\\";\\\"),w=\\\"let \\\".concat(b,\\\";\\\"),S=\\\"var \\\".concat(b,\\\";\\\"),_=\\\"\\\"===y[1]?\\\"\\\":S,x=(\\\"\\\"===y[1]?w:b)+\\\"\\\\n\\\"+y[2],O=0,T=0;O<t[0].dims.length;O++)h||d.indexOf(O)>=0?(s&&T++,x=\\\"for(var j\\\".concat(O,\\\": u32 = 0; j\\\").concat(O,\\\" < \\\").concat(t[0].dims[O],\\\"; j\\\").concat(O,\\\"++) {\\\\n                \\\").concat(y[2].includes(\\\"lastIndex\\\")?\\\"let lastIndex = j\\\".concat(O,\\\";\\\"):\\\"\\\",\\\"\\\\n                \\\").concat(m.indicesSet(\\\"inputIndices\\\",O,\\\"j\\\".concat(O)),\\\"\\\\n                \\\").concat(x,\\\"\\\\n              }\\\")):(g.push(\\\"\\\".concat(m.indicesSet(\\\"inputIndices\\\",O,v.indicesGet(\\\"outputIndices\\\",T)),\\\";\\\")),T++);var I=a.ShapeUtil.size(p);return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n        \\\".concat(e.declareVariables(m,v),\\\"\\\\n\\\\n        \\\").concat(e.mainStart(),\\\"\\\\n          \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(I),\\\"\\\\n          var inputIndices: \\\").concat(m.type.indices,\\\";\\\\n          let outputIndices = \\\").concat(v.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n\\\\n          \\\").concat(g.join(\\\"\\\\n\\\"),\\\"\\\\n          \\\").concat(y[0],\\\"       // init ops for reduce max/min\\\\n          \\\").concat(_,\\\"\\\\n          \\\").concat(y[1],\\\"\\\\n          \\\").concat(x,\\\"\\\\n          \\\").concat(y[3],\\\"\\\\n          \\\").concat(4===y.length?v.setByOffset(\\\"global_idx\\\",\\\"value\\\"):y.slice(4).join(\\\"\\\\n\\\"),\\\"\\\\n        }\\\")},outputs:[{dims:p,dataType:u,gpuDataType:i.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(I/64)}}})};var l=function(e,n,a,c){var u=1===e.length?a:function(e,t){var n=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach((function(e){return n.push(Number(e))})),(0,o.createAttributeWithCacheKey)({axes:n,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})}(e,a),l={name:n,inputTypes:[i.GpuDataType.default],cacheHint:u.cacheKey+\\\"_\\\"+e[0].dims.map((function(e){return e.toString()})).join(\\\",\\\")};return r(r({},l),{get:function(){return(0,t.createReduceProgramInfo)(l,[e[0]],u.noopWithEmptyAxes&&0===u.axes.length?s:c,u.axes,e[0].dataType,u.keepDims,u.noopWithEmptyAxes)}})};t.reduceLogSum=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceLogSum\\\",t,(function(e,t){return[\\\"var value = \\\".concat(t.type.storage,\\\"(0);\\\"),\\\"\\\",\\\"value += \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"value = log(value);\\\"]})),{inputs:[0]})},t.reduceL1=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceL1\\\",t,(function(e,t){return[\\\"var value = \\\".concat(t.type.storage,\\\"(0);\\\"),\\\"\\\",\\\"value += abs(\\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\");\\\"),\\\"\\\"]})),{inputs:[0]})},t.reduceL2=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceL2\\\",t,(function(e,t){return[\\\"var t = \\\".concat(t.type.value,\\\"(0); var value = \\\").concat(t.type.value,\\\"(0);\\\"),\\\"\\\",\\\"t = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\"; value += (t * t);\\\"),\\\"value = sqrt(value);\\\"]})),{inputs:[0]})},t.reduceLogSumExp=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceLogSumExp\\\",t,(function(e,t){return[\\\"var value = \\\".concat(t.type.storage,\\\"(0);\\\"),\\\"\\\",\\\"value += exp(\\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\");\\\"),\\\"value = log(value);\\\"]})),{inputs:[0]})},t.reduceMax=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceMax\\\",t,(function(e,t,n){for(var r=[],a=0;a<e.shape.length;a++)(n.indexOf(a)>=0||0===n.length)&&r.push(e.indicesSet(\\\"inputIndices\\\",a,0));return[\\\"\\\".concat(r.join(\\\"\\\\n\\\")),\\\"var value = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"value = max(value, \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\");\\\"),\\\"\\\"]})),{inputs:[0]})},t.reduceMean=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceMean\\\",t,(function(e,t,n){for(var r=1,a=0;a<e.shape.length;a++)(n.indexOf(a)>=0||0===n.length)&&(r*=e.shape[a]);return[\\\"var sum = f32(0);\\\",\\\"\\\",\\\"sum += f32(\\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\");\\\"),\\\"let value = \\\".concat(t.type.value,\\\"(sum / \\\").concat(r,\\\");\\\")]})),{inputs:[0]})},t.reduceMin=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceMin\\\",t,(function(e,t,n){for(var r=[],a=0;a<e.shape.length;a++)(n.indexOf(a)>=0||0===n.length)&&r.push(\\\"inputIndices[\\\".concat(a,\\\"] = 0;\\\"));return[\\\"\\\".concat(r.join(\\\"\\\\n\\\")),\\\"var value = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"value = min(value, \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\");\\\"),\\\"\\\"]})),{inputs:[0]})},t.reduceProd=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceProd\\\",t,(function(e,t){return[\\\"var value = \\\".concat(t.type.storage,\\\"(1);\\\"),\\\"\\\",\\\"value *= \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"\\\"]})),{inputs:[0]})},t.reduceSum=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceSum\\\",t,(function(e,t){return[\\\"var value = \\\".concat(t.type.storage,\\\"(0);\\\"),\\\"\\\",\\\"value += \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\";\\\"),\\\"\\\"]})),{inputs:[0]})},t.reduceSumSquare=function(e,t){u(e.inputs),e.compute(l(e.inputs,\\\"ReduceSumSquare\\\",t,(function(e,t){return[\\\"var t = \\\".concat(t.type.value,\\\"(0); var value = \\\").concat(t.type.value,\\\"(0);\\\"),\\\"\\\",\\\"t = \\\".concat(e.getByOffset(\\\"inputOffset\\\"),\\\"; value += t * t;\\\"),\\\"\\\"]})),{inputs:[0]})},t.parseReduceAttributes=function(e){return(0,o.createAttributeWithCacheKey)(e)}},4566:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseResizeAttributes=t.resize=t.createResizeProgramInfoLoader=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075);t.createResizeProgramInfoLoader=function(e,t,n,c,l,p){var f={name:\\\"Resize\\\",inputTypes:[u.GpuDataType.default],cacheHint:t.cacheKey+n.toString()+(c.length>0?\\\"_scales_\\\"+c.toString():\\\"\\\")+(l.length>0?\\\"_sizes_\\\"+l.toString():\\\"\\\")};return r(r({},f),{get:function(){return function(e,t,n,c,l,p,f){var d=t.dims,h=function(e,t,n){var r=new Array(n).fill(0).concat(new Array(n).fill(1)),a=0===e.length?r:e.slice();return t.length>0?(t.forEach((function(e,o){r[e]=a[o],r[o+n]=a[t.length+o]})),r):a}(f,n.axes,d.length),g=function(e,t,n,r){var i=[];if(n.length>0)if(r.length>0){if(e.forEach((function(e){return i.push(e)})),Math.max.apply(Math,o([],a(r),!1))>e.length)throw new Error(\\\"axes is out of bound\\\");r.forEach((function(e,t){return i[e]=n[t]}))}else n.forEach((function(e){return i.push(e)}));else{if(0===t.length)throw new Error(\\\"Resize requires either scales or sizes.\\\");i=e.map((function(e,n){return Math.round(e*t[n])}))}return i}(d,l,p,n.axes),m=l.slice();0===l.length&&(m=d.map((function(e,t){return 0===e?1:g[t]/e})),\\\"stretch\\\"!==n.keepAspectRatioPolicy&&(g=function(e,t,n,r){var i=function(){switch(r.keepAspectRatioPolicy){case\\\"not_larger\\\":return r.axes.length>0?Math.min.apply(Math,o(o([],a(r.axes.map((function(e){return n[e]}))),!1),[Number.MAX_VALUE],!1)):Math.min.apply(Math,o(o([],a(n),!1),[Number.MAX_VALUE],!1));case\\\"not_smaller\\\":return r.axes.length>0?Math.max.apply(Math,o(o([],a(r.axes.map((function(e){return n[e]}))),!1),[Number.MIN_VALUE],!1)):Math.max.apply(Math,o(o([],a(n),!1),[Number.MIN_VALUE],!1));default:throw new Error(\\\"Keep aspect ratio policy \\\".concat(r.keepAspectRatioPolicy,\\\" is not supported\\\"))}}();n.fill(1,0,n.length);var c=e.slice();return r.axes.length>0?(r.axes.forEach((function(e){return n[e]=i})),r.axes.forEach((function(t){return c[t]=Math.round(e[t]*n[t])}))):(n.fill(i,0,n.length),c.forEach((function(e,t){return c[t]=Math.round(e*n[t])}))),c}(d,0,m,n)));var v=(0,s.outputVariable)(\\\"output\\\",t.dataType,g),y=(0,s.inputVariable)(\\\"input\\\",t.dataType,d),b=i.ShapeUtil.size(g),w=d.length===g.length&&d.every((function(e,t){return e===g[t]})),S=\\\"tf_crop_and_resize\\\"===n.coordinateTransformMode;return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n      \\\".concat((t=n.coordinateTransformMode,\\\"fn getOriginalCoordinateFromResizedCoordinate(xResized: f32, xScale: f32, lengthResized: f32,    lengthOriginal: f32, roiStart: f32, roiEnd: f32) -> f32 { \\\"+function(){switch(t){case\\\"asymmetric\\\":return\\\"return xResized / xScale;\\\";case\\\"pytorch_half_pixel\\\":return\\\"if (lengthResized > 1) {                     return (xResized + 0.5) / xScale - 0.5;                   } else {                     return 0.0;                   }\\\";case\\\"tf_half_pixel_for_nn\\\":return\\\"return (xResized + 0.5) / xScale;\\\";case\\\"align_corners\\\":return\\\"if (lengthResized == 1) {                     return 0.0;                   } else {                     return xResized * (lengthOriginal - 1) / (lengthResized - 1);                   }\\\";case\\\"tf_crop_and_resize\\\":return\\\"if (lengthResized > 1) {                     return roiStart * (lengthOriginal - 1) +                           (xResized * (roiEnd - roiStart) * (lengthOriginal - 1)) / (lengthResized - 1);                   } else {                     return 0.5 * (roiStart + roiEnd) * f32(lengthOriginal - 1);                   }\\\";case\\\"half_pixel_symmetric\\\":return[\\\"const outputWidth = xScale * lengthResized;\\\",\\\"const adjustment = lengthResized / outputWidth;\\\",\\\"const center = lengthOriginal / 2;\\\",\\\"const offset = center * (1 - adjustment);\\\",\\\"return offset + ((xResized + 0.5) / xScale) - 0.5;\\\"].join(\\\"\\\\n\\\");case\\\"half_pixel\\\":return\\\"return ((xResized + 0.5) / xScale) - 0.5;\\\";default:throw new Error(\\\"Coordinate transform mode \\\".concat(t,\\\" is not supported\\\"))}}()+\\\"}\\\"),\\\";\\\\n      \\\").concat(function(){switch(n.mode){case\\\"nearest\\\":return\\\"\\\\n              \\\".concat(function(e,t){return\\\"\\\\n    fn checkInputIndices(inputIndices: \\\".concat(e.type.indices,\\\") -> bool {\\\\n      const inputShape = array<u32, \\\").concat(t.length,\\\">(\\\").concat(t.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n      for (var i:u32 = 0; i < \\\").concat(t.length,\\\"; i++) {\\\\n        var inputIndex = \\\").concat(1===t.length?\\\"inputIndices\\\":\\\"inputIndices[i]\\\",\\\";\\\\n        if (inputIndex < 0 || inputIndex >= inputShape[i]) {\\\\n          return false;\\\\n        }\\\\n      }\\\\n      return true;\\\\n    }\\\")}(y,d),\\\";\\\\n              \\\").concat(function(e,t){return\\\"fn getNearestPixelFromOriginal(xOriginal: f32, isDownSample: bool) -> f32 {\\\"+function(){switch(e){case\\\"round_prefer_ceil\\\":return\\\"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }\\\";case\\\"floor\\\":return\\\"return floor(xOriginal);\\\";case\\\"ceil\\\":return\\\"return ceil(xOriginal);\\\";case\\\"round_prefer_floor\\\":return\\\"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }\\\";default:if(t<11)return\\\"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }\\\";throw new Error(\\\"Nearest mode \\\".concat(e,\\\" is not supported\\\"))}}()+\\\"}\\\"}(n.nearestMode,c),\\\";\\\\n              \\\").concat(function(e,t,n,r,a,o,i){return\\\"\\\\n    fn calculateInputIndicesFromOutputIndices(outputIndices: \\\".concat(t.type.indices,\\\") -> \\\").concat(e.type.indices,\\\" {\\\\n        const inputShape = array<u32, \\\").concat(n.length,\\\">(\\\").concat(n.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const outputShape = array<u32, \\\").concat(r.length,\\\">(\\\").concat(r.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const scales = array<f32, \\\").concat(a.length,\\\">(\\\").concat(a.map((function(e){return\\\"\\\".concat(e,\\\"f\\\")})).join(\\\",\\\"),\\\");\\\\n        const roi = array<f32, \\\").concat(o.length,\\\">(\\\").concat(o.map((function(e){return\\\"\\\".concat(e,\\\"f\\\")})).join(\\\",\\\"),\\\");\\\\n        var inputIndices: \\\").concat(e.type.indices,\\\";\\\\n        for (var i:u32 = 0; i < \\\").concat(r.length,\\\"; i++) {\\\\n          var outputIndex = \\\").concat(1===r.length?\\\"outputIndices\\\":\\\"outputIndices[i]\\\",\\\";\\\\n          var inputIndex: u32;\\\\n          if (scales[i] == 1.0) {\\\\n            inputIndex = outputIndex;\\\\n          } else {\\\\n            var original_idx = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\\\\n                    f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + \\\").concat(n.length,\\\"]);\\\\n            if (!\\\").concat(i,\\\" || (original_idx >= 0 && original_idx < f32(inputShape[i]))) {\\\\n              if (original_idx < 0) {\\\\n                inputIndex = 0;\\\\n              } else if (original_idx > (f32(inputShape[i]) - 1)) {\\\\n                inputIndex = inputShape[i] - 1;\\\\n              } else {\\\\n                inputIndex = u32(getNearestPixelFromOriginal(original_idx, scales[i] < 1));\\\\n              }\\\\n            } else {\\\\n              inputIndex = u32(original_idx);\\\\n            }\\\\n          }\\\\n          \\\").concat(e.indicesSet(\\\"inputIndices\\\",\\\"i\\\",\\\"inputIndex\\\"),\\\"\\\\n        }\\\\n        return inputIndices;\\\\n    }\\\")}(y,v,d,g,m,h,S),\\\";\\\\n              \\\");case\\\"linear\\\":return\\\"\\\\n              \\\".concat(function(e,t,n,r,a){return\\\"\\\\n    fn calculateOriginalIndicesFromOutputIndices(outputIndices: \\\".concat(e.type.indices,\\\") -> array<f32, \\\").concat(n.length,\\\"> {\\\\n      const inputShape = array<u32, \\\").concat(t.length,\\\">(\\\").concat(t.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n      const outputShape = array<u32, \\\").concat(n.length,\\\">(\\\").concat(n.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n      const scales = array<f32, \\\").concat(r.length,\\\">(\\\").concat(r.map((function(e){return\\\"\\\".concat(e,\\\"f\\\")})).join(\\\",\\\"),\\\");\\\\n      const roi = array<f32, \\\").concat(a.length,\\\">(\\\").concat(a.map((function(e){return\\\"\\\".concat(e,\\\"f\\\")})).join(\\\",\\\"),\\\");\\\\n      var originalIndices: array<f32, \\\").concat(n.length,\\\">;\\\\n      for (var i:u32 = 0; i < \\\").concat(n.length,\\\"; i++) {\\\\n        var outputIndex = \\\").concat(1===n.length?\\\"outputIndices\\\":\\\"outputIndices[i]\\\",\\\";\\\\n        if (scales[i] == 1.0) {\\\\n          originalIndices[i] = f32(outputIndex);\\\\n        } else {\\\\n          originalIndices[i] = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), scales[i],\\\\n                f32(outputShape[i]), f32(inputShape[i]), roi[i], roi[i + \\\").concat(t.length,\\\"]);\\\\n        }\\\\n      }\\\\n      return originalIndices;\\\\n    }\\\")}(v,d,g,m,h),\\\";\\\\n              \\\").concat(function(e,t,n,r,o,i,c){var u=a(2===n.length?[-1,0,1,-1]:1===o[1]?[0,2,3,1]:[0,1,2,3],4),s=u[0],l=u[1],p=u[2],f=u[3];return\\\"\\\\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> f32 {\\\\n      var inputIndices: \\\".concat(e.type.indices,\\\";\\\\n      inputIndices[\\\").concat(l,\\\"] = max(0, min(row, \\\").concat(n[l],\\\" - 1));\\\\n      inputIndices[\\\").concat(p,\\\"] = max(0, min(col, \\\").concat(n[p],\\\" - 1));\\\\n      if (\\\").concat(n.length,\\\" > 2) {\\\\n        inputIndices[\\\").concat(f,\\\"] = channel;\\\\n        inputIndices[\\\").concat(s,\\\"] = batch;\\\\n      };\\\\n      return input[\\\").concat(e.indicesToOffset(\\\"inputIndices\\\"),\\\"];\\\\n    }\\\\n\\\\n    fn bilinearInterpolation(outputIndices: \\\").concat(t.type.indices,\\\") -> f32 {\\\\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(outputIndices);\\\\n      var row:f32 = originalIndices[\\\").concat(l,\\\"];\\\\n      var col:f32 = originalIndices[\\\").concat(p,\\\"];\\\\n      if (\\\").concat(i,\\\" && (row < 0 || row > (\\\").concat(n[l],\\\" - 1) || col < 0 || col > \\\").concat(n[p],\\\" - 1)) {\\\\n        return \\\").concat(c,\\\";\\\\n      }\\\\n      row = max(0, min(row, \\\").concat(n[l],\\\" - 1));\\\\n      col = max(0, min(col, \\\").concat(n[p],\\\" - 1));\\\\n      var row1: u32 = u32(row);\\\\n      var col1: u32 = u32(col);\\\\n      var row2: u32 = u32(row + 1);\\\\n      var col2: u32 = u32(col + 1);\\\\n      var channel: u32 = 0;\\\\n      var batch: u32 = 0;\\\\n      if (\\\").concat(n.length>2,\\\") {\\\\n        channel = u32(originalIndices[\\\").concat(f,\\\"]);\\\\n        batch = u32(originalIndices[\\\").concat(s,\\\"]);\\\\n      }\\\\n      var x11: f32 = getInputValue(batch, channel, row1, col1);\\\\n      var x12: f32 = getInputValue(batch, channel, row1, col2);\\\\n      var x21: f32 = getInputValue(batch, channel, row2, col1);\\\\n      var x22: f32 = getInputValue(batch, channel, row2, col2);\\\\n      var dx1: f32 = row - f32(row1);\\\\n      var dx2: f32 = f32(row2 ) - row;\\\\n      var dy1 = col - f32(col1);\\\\n      var dy2 = f32(col2) - col;\\\\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\\\\n    }\\\")}(y,v,d,0,m,S,n.extrapolationValue),\\\";\\\\n              \\\");case\\\"cubic\\\":return\\\"\\\\n            \\\".concat(function(e,t,n,r,o,i,c,u,s,l){var p=a(2===n.length?[0,1]:1===o[1]?[2,3]:[1,2],2),f=p[0],d=p[1],h=function(a){var c=a===f?\\\"row\\\":\\\"col\\\";return\\\"\\\\n      fn \\\".concat(c,\\\"CubicInterpolation(inputIndices: \\\").concat(e.type.indices,\\\", outputIndices: \\\").concat(t.type.indices,\\\") -> f32 {\\\\n        var outputIndex = \\\").concat(1===r.length?\\\"outputIndices\\\":\\\"outputIndices[\\\".concat(a,\\\"]\\\"),\\\";\\\\n        var originalIdx: f32 = getOriginalCoordinateFromResizedCoordinate(f32(outputIndex), \\\").concat(o[a],\\\",\\\\n        f32(\\\").concat(r[a],\\\"), f32(\\\").concat(n[a],\\\"), \\\").concat(i[a],\\\", \\\").concat(i[a],\\\" + \\\").concat(n.length,\\\");\\\\n        var fractOriginalIdx: f32 = originalIdx - floor(originalIdx);\\\\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\\\\n\\\\n        if (\\\").concat(u,\\\" && (originalIdx < 0 || originalIdx > (\\\").concat(n[a],\\\" - 1))) {\\\\n          return \\\").concat(s,\\\";\\\\n        }\\\\n        var data: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\\\\n        for (var i: i32 = -1; i < 3; i++) {\\\\n          var \\\").concat(c,\\\": f32 = originalIdx + f32(i);\\\\n          if (\\\").concat(c,\\\" < 0 || \\\").concat(c,\\\" >= \\\").concat(n[a],\\\") {\\\\n            if (\\\").concat(l,\\\") {\\\\n              coefs[i + 1] = 0.0;\\\\n              continue;\\\\n            } else if (\\\").concat(u,\\\") {\\\\n              return \\\").concat(s,\\\";\\\\n            } else {\\\\n              \\\").concat(c,\\\" = max(0, min(\\\").concat(c,\\\", \\\").concat(n[a],\\\" - 1));\\\\n            }\\\\n          }\\\\n          var inputIndicesCopy: \\\").concat(e.type.indices,\\\" = inputIndices;\\\\n          inputIndicesCopy[\\\").concat(a,\\\"] = u32(\\\").concat(c,\\\");\\\\n          data[i + 1] = \\\").concat(a===f?\\\"input[\\\".concat(e.indicesToOffset(\\\"inputIndicesCopy\\\"),\\\"];\\\"):\\\"\\\\n                                               rowCubicInterpolation(inputIndicesCopy, outputIndices);\\\",\\\"\\\\n        }\\\\n        return cubicInterpolation1D(data, coefs);\\\\n      }\\\")};return\\\"\\\\n    \\\".concat(h(f),\\\";\\\\n    \\\").concat(h(d),\\\";\\\\n  fn getCubicInterpolationCoefs(s: f32) -> array<f32, 4> {\\\\n    var absS = abs(s);\\\\n    var coeffs: array<f32, 4> = array<f32, 4>(0.0, 0.0, 0.0, 0.0);\\\\n    var oneMinusAbsS: f32 = 1.0 - absS;\\\\n    var twoMinusAbsS: f32 = 2.0 - absS;\\\\n    var onePlusAbsS: f32 = 1.0 + absS;\\\\n    coeffs[0] = ((\\\").concat(c,\\\" * onePlusAbsS - 5 * \\\").concat(c,\\\") * onePlusAbsS + 8 * \\\").concat(c,\\\") * onePlusAbsS - 4 * \\\").concat(c,\\\";\\\\n    coeffs[1] = ((\\\").concat(c,\\\" + 2) * absS - (\\\").concat(c,\\\" + 3)) * absS * absS + 1;\\\\n    coeffs[2] = ((\\\").concat(c,\\\" + 2) * oneMinusAbsS - (\\\").concat(c,\\\" + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\\\\n    coeffs[3] = ((\\\").concat(c,\\\" * twoMinusAbsS - 5 * \\\").concat(c,\\\") * twoMinusAbsS + 8 * \\\").concat(c,\\\") * twoMinusAbsS - 4 * \\\").concat(c,\\\";\\\\n    return coeffs;\\\\n  }\\\\n\\\\n  fn cubicInterpolation1D(x: array<f32, 4>, coefs: array<f32, 4>) -> f32 {\\\\n    var coefsSum: f32 = coefs[0] + coefs[1] + coefs[2] + coefs[3];\\\\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\\\\n  }\\\\n\\\\n  fn bicubicInterpolation(outputIndices: \\\").concat(t.type.indices,\\\") -> f32 {\\\\n    var inputIndices: \\\").concat(e.type.indices,\\\" = outputIndices;\\\\n    return colCubicInterpolation(inputIndices, outputIndices);\\\\n  }\\\\n    \\\")}(y,v,d,g,m,h,n.cubicCoeffA,S,n.extrapolationValue,n.excludeOutside),\\\";\\\\n            \\\");default:throw Error(\\\"Invalid resize mode\\\")}}(),\\\";\\\\n      \\\").concat(e.declareVariables(y,v),\\\"\\\\n      \\\").concat(e.mainStart(),\\\"\\\\n        \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(b),\\\"\\\\n        if (\\\").concat(w,\\\") {\\\\n          output[global_idx] = input[global_idx];\\\\n        } else {\\\\n          let outputIndices = \\\").concat(v.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n          var inputIndices: \\\").concat(y.type.indices,\\\";\\\\n          \\\").concat(function(){switch(n.mode){case\\\"nearest\\\":return\\\"inputIndices = calculateInputIndicesFromOutputIndices(outputIndices);\\\\n                  if (checkInputIndices(inputIndices)) {\\\\n                    output[global_idx] = input[\\\".concat(y.indicesToOffset(\\\"inputIndices\\\"),\\\"];\\\\n                  } else {\\\\n                    output[global_idx] = \\\").concat(n.extrapolationValue,\\\";\\\\n                  }\\\");case\\\"linear\\\":return\\\"output[global_idx] = bilinearInterpolation(outputIndices);\\\";case\\\"cubic\\\":return\\\"output[global_idx] = bicubicInterpolation(outputIndices);\\\";default:throw Error(\\\"Unsupported resize mode: \\\".concat(n.mode))}}(),\\\";\\\\n        }\\\\n      }\\\");var t},outputs:[{dims:g,dataType:t.dataType,gpuDataType:u.GpuDataType.default}],dispatchGroup:function(){return{x:Math.ceil(b/64)}}})}(f,e,t,n,c,l,p)}})},t.resize=function(e,n){var r=[],o=[],i=[],c=function(e){var t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]}(e);(function(e,t,n,r,o,i){var c=a(n>10?[1,2,3]:[-1,e.length>1?1:-1,-1],3),u=c[0],s=c[1],l=c[2],p=e[0].dims.length;if(u>0&&e.length>u&&e[u].dims.length>0)e[u].getFloat32Array().forEach((function(e){return i.push(e)}));else if(\\\"tf_crop_and_resize\\\"===t.coordinateTransformMode)throw new Error(\\\"Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize\\\");if(s>0&&e.length>s&&e[s].dims.length>0){if(e[s].getFloat32Array().forEach((function(e){return r.push(e)})),0!==r.length&&r.length!==p&&n>=18&&r.length!==t.axes.length)throw new Error(\\\"Resize requires scales input size to be same as input rank or axes size for opset 18 and up\\\");!function(e,t){if(e.every((function(e){return e>0||function(){throw new Error(\\\"Resize requires scales input values to be positive\\\")}})),e.length>0)if(\\\"linear\\\"===t.mode){if(!(2===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]))throw new Error(\\\"Resize requires scales input size to be 2 or 4 for linear mode\\\")}else if(\\\"cubic\\\"===t.mode&&!(2===e.length||4===e.length&&1===e[0]&&1===e[1]||4===e.length&&1===e[0]&&1===e[3]))throw new Error(\\\"Resize requires scales input size to be 2 or 4 for cubic mode\\\")}(r,t),t.axes.length>0&&function(e,t,n){t.every((function(e){return e>=0&&e<n||function(){throw new Error(\\\"Resize requires axes input values to be positive and less than rank\\\")}}));var r=new Array(n).fill(1);return t.forEach((function(t,n){return r[t]=e[n]})),r}(r,t.axes,p).forEach((function(e,t){return r[t]=e}))}if(l>0&&e.length>l&&(e[l].getBigInt64Array().forEach((function(e){return o.push(Number(e))})),o.length!==p||n>=18&&o.length===t.axes.length))throw new Error(\\\"Resize requires sizes input size to be same as input rank or axes size for opset 18 and up\\\");if(t.axes.length>0){if(r.length!==t.axes.length)throw new Error('Resize requires \\\"scales\\\" input size to be of axes rank when axes attributes is specified');if(o.length!==t.axes.length)throw new Error('Resize requires \\\"sizes\\\" input size to be of rank axes rank when axes attributes is specified')}if(void 0!==r&&void 0!==o&&r.length>0&&o.length>p)throw new Error(\\\"Resize requires only of scales or sizes to be specified\\\")})(e.inputs,n,c,r,o,i),e.compute((0,t.createResizeProgramInfoLoader)(e.inputs[0],n,c,r,o,i),{inputs:[0]})},t.parseResizeAttributes=function(e){var t=e.antialias,n=e.axes,r=e.coordinateTransformMode,a=e.cubicCoeffA,o=0!==e.excludeOutside,i=e.extrapolationValue,u=e.keepAspectRatioPolicy,s=e.mode,l=\\\"\\\"===e.nearestMode?\\\"simple\\\":e.nearestMode;return(0,c.createAttributeWithCacheKey)({antialias:t,axes:n,coordinateTransformMode:r,cubicCoeffA:a,excludeOutside:o,extrapolationValue:i,keepAspectRatioPolicy:u,mode:s,nearestMode:l})}},8906:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSkipLayerNormAttributes=t.skipLayerNorm=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075);t.skipLayerNorm=function(e,t){!function(e){if(!e||e.length<3)throw new Error(\\\"layerNorm requires at least 3 inputs.\\\");if(1!==e[0].dataType||1!==e[1].dataType)throw new Error(\\\"inputs should be float type\\\");var t=e[0],n=e[1],r=e[2];if(t.dataType!==n.dataType||t.dataType!==r.dataType)throw new Error(\\\"All inputs must have the same data type\\\");if(3!==t.dims.length&&2!==t.dims.length)throw new Error(\\\"Input must be 2D or 3D\\\");if(3!==n.dims.length&&2!==n.dims.length)throw new Error(\\\"Skip must be 2D or 3D\\\");var a=t.dims[t.dims.length-1],o=t.dims[t.dims.length-2];if(n.dims[n.dims.length-1]!==a)throw new Error(\\\"Skip must have the same hidden size as input\\\");if(n.dims[n.dims.length-2]!==o)throw new Error(\\\"Skip must have the same sequence length as input\\\");if(1!==r.dims.length)throw new Error(\\\"Gamma must be 1D\\\");if(r.dims[r.dims.length-1]!==a)throw new Error(\\\"Gamma must have the same hidden size as input\\\");if(e.length>3){var i=e[3];if(1!==i.dims.length)throw new Error(\\\"Beta must be 1D\\\");if(i.dims[i.dims.length-1]!==a)throw new Error(\\\"Beta must have the same hidden size as input\\\")}if(e.length>4){var c=e[4];if(1!==c.dims.length)throw new Error(\\\"Bias must be 1D\\\");if(c.dims[c.dims.length-1]!==a)throw new Error(\\\"Bias must have the same hidden size as input\\\")}}(e.inputs);var n=[0];e.outputCount>1&&n.push(-3),e.outputCount>2&&n.push(-3),e.outputCount>3&&n.push(3),e.compute(function(e,t,n,o){var u={name:\\\"SkipLayerNormalization\\\",inputTypes:new Array(e.length).fill(i.GpuDataType.default),cacheHint:t.cacheKey};return r(r({},u),{get:function(){return function(e,t,n,o,u){var s=t[0].dims,l=s,p=a.ShapeUtil.size(s),f=s.slice(-1)[0],d=u?s.slice(0,-1).concat(1):[],h=t.length>3,g=t.length>4,m=(0,c.tensorTypeToWsglStorageType)(t[0].dataType),v=u&&o>1,y=u&&o>2,b=o>3,w=0,S=[{dims:l,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}];return o>1&&S.push({dims:d,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),o>2&&S.push({dims:d,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),o>3&&S.push({dims:s,dataType:t[0].dataType,gpuDataType:i.GpuDataType.default}),r(r({},e),{getShaderSource:function(e){return\\\"\\\\n      const hiddenSize: u32 = \\\".concat(f,\\\";\\\\n      const epsilon: f32 = \\\").concat(n.epsilon,\\\";\\\\n\\\\n      @group(0) @binding(\\\").concat(w++,\\\") var<storage, read> x : array<\\\").concat(m,\\\">;\\\\n      @group(0) @binding(\\\").concat(w++,\\\") var<storage, read> skip : array<\\\").concat(m,\\\">;\\\\n      @group(0) @binding(\\\").concat(w++,\\\") var<storage, read> gamma : array<\\\").concat(m,\\\">;\\\\n      \\\").concat(h?\\\"@group(0) @binding(\\\".concat(w++,\\\") var<storage, read> beta : array<\\\").concat(m,\\\">;\\\"):\\\"\\\",\\\"\\\\n      \\\").concat(g?\\\"@group(0) @binding(\\\".concat(w++,\\\") var<storage, read> bias : array<\\\").concat(m,\\\">;\\\"):\\\"\\\",\\\"\\\\n      @group(0) @binding(\\\").concat(w++,\\\") var<storage, read_write> output : array<\\\").concat(m,\\\">;\\\\n      \\\").concat(v?\\\"@group(0) @binding(\\\".concat(w++,\\\") var<storage, read_write> meanOutput : array<\\\").concat(m,\\\">;\\\"):\\\"\\\",\\\"\\\\n      \\\").concat(y?\\\"@group(0) @binding(\\\".concat(w++,\\\") var<storage, read_write> invStdOutput : array<\\\").concat(m,\\\">;\\\"):\\\"\\\",\\\"\\\\n      \\\").concat(b?\\\"@group(0) @binding(\\\".concat(w++,\\\") var<storage, read_write> inputSkipBiasSum : array<\\\").concat(m,\\\">;\\\"):\\\"\\\",\\\"\\\\n\\\\n      \\\").concat(e.mainStart(),\\\"\\\\n        \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(p/f),\\\"\\\\n        let offset = global_idx * hiddenSize;\\\\n        var sum: f32 = 0.0;\\\\n        var squareSum: f32 = 0.0;\\\\n        for (var i: u32 = 0; i < hiddenSize; i++) {\\\\n          let skipValue = skip[offset + i];\\\\n          let biasValue = \\\").concat(g?\\\"bias[i]\\\":\\\"0.0\\\",\\\";\\\\n          let inputValue = x[offset + i];\\\\n          let value = inputValue + skipValue + biasValue;\\\\n          \\\").concat(b?\\\"inputSkipBiasSum[offset + i] = value;\\\":\\\"\\\",\\\"\\\\n          output[offset + i] = value;\\\\n          sum += value;\\\\n          squareSum += value * value;\\\\n        }\\\\n        let mean: f32 = sum / f32(hiddenSize);\\\\n        let variance: f32 = sqrt(squareSum / f32(hiddenSize) - mean * mean + epsilon);\\\\n        \\\").concat(v?\\\"meanOutput[global_idx] = mean;\\\":\\\"\\\",\\\"\\\\n        \\\").concat(y?\\\"invStdOutput[global_idx] = 1.0 / variance;\\\":\\\"\\\",\\\"\\\\n        for (var i: u32 = 0; i < hiddenSize; i++) {\\\\n          output[offset + i] = (output[offset + i] - mean) / variance * gamma[i] + \\\").concat(h?\\\"beta[i]\\\":\\\"0.0\\\",\\\";\\\\n        }\\\\n      }\\\")},outputs:S,dispatchGroup:function(){return{x:Math.ceil(p/f/64)}}})}(u,e,t,n,o)}})}(e.inputs,t,e.outputCount,!1),{outputs:n})},t.parseSkipLayerNormAttributes=function(e){var t=e.epsilon;return(0,o.createAttributeWithCacheKey)({epsilon:t})}},5101:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSliceAttributes=t.slice=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075),l=function(e,t){var n=[];if(e.length>t)if(7===e[t].dataType)e[t].getBigInt64Array().forEach((function(e){return n.push(Number(e))}));else{if(6!==e[t].dataType)throw new Error(\\\"Input \\\".concat(t,\\\" must be an array of int32 or int64\\\"));e[t].getInt32Array().forEach((function(e){return n.push(Number(e))}))}return n},p=function(e,t,n,r,a){var o=e;return e<0&&(o+=n[r[t]]),a[t]<0?Math.max(0,Math.min(o,n[r[t]]-1)):Math.max(0,Math.min(o,n[r[t]]))};t.slice=function(e,t){!function(e,t){if(!e||e.length<1)throw new Error(\\\"too few inputs\\\");if(0!==t.axes.length){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error(\\\"axes, starts and ends must have the same length\\\")}else if(t.starts.length!==t.ends.length)throw new Error(\\\"starts and ends must have the same length\\\");e.slice(1).forEach((function(t,n){if(6!==e[n+1].dataType&&7!==e[n+1].dataType)throw new Error(\\\"Input \\\".concat(n,\\\" must be an array of int32 or int64\\\"))}))}(e.inputs,t);var n=function(e,t){var n=function(e,t){if(e.length>1){var n=l(e,1),r=l(e,2),i=l(e,3);return 0===i.length&&(i=o([],a(Array(e[0].dims.length).keys()),!1)),(0,c.createAttributeWithCacheKey)({starts:n,ends:r,axes:i})}return t}(e,t),f={name:\\\"Slice\\\",inputTypes:[u.GpuDataType.default],cacheHint:n.cacheKey+(e.length>4?\\\"steps_\\\"+e[4].dims.toString():\\\"\\\")};return r(r({},f),{get:function(){return function(e,t,n){var c=t[0].dims,f=i.ShapeUtil.size(c),d=n.axes.length>0?i.ShapeUtil.normalizeAxes(n.axes,c.length):o([],a(Array(c.length).keys()),!1),h=l(t,4);h.forEach((function(e){return 0!==e||function(){throw new Error(\\\"step cannot be 0\\\")}})),0===h.length&&(h=Array(d.length).fill(1));var g=n.starts.map((function(e,t){return p(e,t,c,d,h)})),m=n.ends.map((function(e,t){return p(e,t,c,d,h)}));if(d.length!==c.length)for(var v=0;v<c.length;++v)d.includes(v)||(g.splice(v,0,0),m.splice(v,0,c[v]),h.splice(v,0,1));var y=h.map((function(e){return Math.sign(e)}));h.forEach((function(e,t,n){if(e<0){var r=(m[t]-g[t])/e,a=g[t],o=a+r*h[t];g[t]=o,m[t]=a,n[t]=-e}}));var b=c.slice(0);d.forEach((function(e,t){b[e]=Math.ceil((m[e]-g[e])/h[e])}));var w={dims:b,dataType:t[0].dataType,gpuDataType:u.GpuDataType.default},S=(0,s.outputVariable)(\\\"output\\\",t[0].dataType,b),_=(0,s.inputVariable)(\\\"input\\\",t[0].dataType,c),x=i.ShapeUtil.size(b);return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n      \\\".concat(e.declareVariables(_,S),\\\"\\\\n        const signs = array<i32, \\\").concat(y.length,\\\">(\\\").concat(y.map((function(e){return\\\"\\\".concat(e,\\\"i\\\")})).join(\\\",\\\"),\\\");\\\\n        const starts = array<u32, \\\").concat(g.length,\\\">(\\\").concat(g.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const ends = array<u32, \\\").concat(m.length,\\\">(\\\").concat(m.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const steps = array<u32, \\\").concat(h.length,\\\">(\\\").concat(h.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n        const inputShape = array<u32, \\\").concat(c.length,\\\">(\\\").concat(c.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n\\\\n        \\\").concat(function(e,t,n,r){return\\\"fn calculateInputIndices(outputIndices: \\\".concat(t.type.indices,\\\") -> \\\").concat(e.type.indices,\\\" {\\\\n          var inputIndices: \\\").concat(e.type.indices,\\\";\\\\n          var carry = 0u;\\\\n          for (var i = \\\").concat(n.length,\\\"; i >= 0; i--) {\\\\n            var outputIndex = \\\").concat(1===r.length?\\\"outputIndices\\\":\\\"outputIndices[i]\\\",\\\";\\\\n            var inputIndex = outputIndex * steps[i] + starts[i] + carry;\\\\n            carry = inputIndex / inputShape[i];\\\\n            inputIndex = inputIndex % inputShape[i];\\\\n            if (signs[i] < 0) {\\\\n              inputIndex = inputShape[i] - inputIndex - 1u + starts[i];\\\\n            }\\\\n            \\\").concat(1===n.length?\\\"inputIndices\\\":\\\"inputIndices[i]\\\",\\\" = inputIndex;\\\\n          }\\\\n          return inputIndices;\\\\n      }\\\")}(_,S,c,b),\\\"\\\\n        \\\").concat(e.mainStart(),\\\"\\\\n          \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(x),\\\"\\\\n          let outputIndices = \\\").concat(S.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n          let inputIndices = calculateInputIndices(outputIndices);\\\\n          \\\").concat(S.setByOffset(\\\"global_idx\\\",_.getByIndices(\\\"inputIndices\\\")),\\\"\\\\n      }\\\")},outputs:[w],dispatchGroup:function(){return{x:Math.ceil(f/64)}}})}(f,e,n)}})}(e.inputs,t),f=n.get();if(!(i.ShapeUtil.size(f.outputs[0].dims)>0))throw new Error(\\\"slice: output size is 0\\\");e.compute(n,{inputs:[0]})},t.parseSliceAttributes=function(e){var t=e.starts,n=e.ends,r=e.axes;return(0,c.createAttributeWithCacheKey)({starts:t,ends:n,axes:r})}},6198:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSoftmaxAttributes=t.softmax=t.softmaxProgramMetadata=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075);t.softmaxProgramMetadata={name:\\\"Softmax\\\",inputTypes:[i.GpuDataType.default]},t.softmax=function(e,n){!function(e){if(!e||1!==e.length)throw new Error(\\\"Softmax op requires 1 input.\\\")}(e.inputs),e.compute(r(r({},t.softmaxProgramMetadata),{cacheHint:n.cacheKey,get:function(){return function(e,n){var o=(0,c.tensorTypeToWsglStorageType)(e.dataType),u=e.dims,s=a.ShapeUtil.size(u),l=n.axis;if(l<0&&(l=u.length+l),l<u.length-1)throw new Error(\\\"softmax only supports last axis for now.\\\");var p=u[l],f=s/p,d=\\\"f32\\\"===o?\\\"var threadMax: f32 = -3.402823e+38f;\\\":\\\"var threadMax: f16 = -65504.0h;\\\";return r(r({},t.softmaxProgramMetadata),{outputs:[{dims:u,dataType:e.dataType,gpuDataType:i.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n      var<workgroup> rowMaxShared : \\\".concat(o,\\\";\\\\n      var<workgroup> rowSumShared : \\\").concat(o,\\\";\\\\n      var<workgroup> threadShared : array<\\\").concat(o,\\\", \\\").concat(64,\\\">;\\\\n\\\\n      @group(0) @binding(0) var<storage, read> x : array<\\\").concat(o,\\\">;\\\\n      @group(0) @binding(1) var<storage, read_write> result : array<\\\").concat(o,\\\">;\\\\n\\\\n      fn getValue(row: i32, col: i32, row_stride: i32) -> \\\").concat(o,\\\" {\\\\n        let index = row * row_stride + col;\\\\n        return x[index];\\\\n      }\\\\n\\\\n      fn setValue(row: i32, col: i32, row_stride: i32, value: \\\").concat(o,\\\") {\\\\n        let index = row * row_stride + col;\\\\n        result[index] = value;\\\\n      }\\\\n\\\\n      @compute @workgroup_size(\\\").concat(64,\\\", 1, 1)\\\\n      fn main(@builtin(local_invocation_id) local_id : vec3<u32>, @builtin(global_invocation_id) global_id : vec3u) {\\\\n        let gindex = i32(global_id.x);\\\\n        let lindex = i32(local_id.x);\\\\n        const wg = \\\").concat(64,\\\";\\\\n        let row = gindex / wg;\\\\n        let cols = \\\").concat(p,\\\";\\\\n        let row_stride : i32 = \\\").concat(p,\\\";\\\\n\\\\n        // find the rows max\\\\n        \\\").concat(d,\\\"\\\\n        for (var col = lindex; col < cols; col += wg) {\\\\n          let value = getValue(row, col, row_stride);\\\\n          threadMax = max(threadMax, value);\\\\n        }\\\\n        if (lindex < cols) {\\\\n          threadShared[lindex] = threadMax;\\\\n        }\\\\n        workgroupBarrier();\\\\n\\\\n        var reduceSize = min(cols, wg);\\\\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\\\\n          reduceSize = currSize + (reduceSize & 1);\\\\n          if (lindex < currSize) {\\\\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\\\\n          }\\\\n          workgroupBarrier();\\\\n        }\\\\n        if (lindex == 0) {\\\\n          rowMaxShared = threadShared[0];\\\\n        }\\\\n        workgroupBarrier();\\\\n\\\\n        // find the rows sum\\\\n        var threadSum: \\\").concat(o,\\\" = 0.0;\\\\n        for (var col = lindex; col < cols; col += wg) {\\\\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\\\\n          threadSum += subExp;\\\\n        }\\\\n        threadShared[lindex] = threadSum;\\\\n        workgroupBarrier();\\\\n\\\\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\\\\n          if (lindex < currSize) {\\\\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\\\\n          }\\\\n          workgroupBarrier();\\\\n        }\\\\n        if (lindex == 0) {\\\\n          rowSumShared = threadShared[0];\\\\n        }\\\\n        workgroupBarrier();\\\\n\\\\n        // calculate final value for each element in the row\\\\n        for (var col = lindex; col < cols; col += wg) {\\\\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\\\\n          setValue(row, col, row_stride, value);\\\\n        }\\\\n      }\\\")},dispatchGroup:function(){return{x:f}}})}(e.inputs[0],n)}}))},t.parseSoftmaxAttributes=function(e){return(0,o.createAttributeWithCacheKey)({axis:e.axis})}},2067:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseSplitAttributes=t.split=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075);t.split=function(e,t){!function(e){if(!e||e.length<1)throw new Error(\\\"too few inputs\\\")}(e.inputs),e.compute(function(e,t){var n=1===e.length?t:function(e,t){var n=[],r=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach((function(e){return n.push(Number(e))})),r=n.length),(0,c.createAttributeWithCacheKey)({numOutputs:r,axis:t.axis,splitSizes:n})}(e,t),l={name:\\\"Split\\\",inputTypes:[u.GpuDataType.default],cacheHint:n.cacheKey};return r(r({},l),{get:function(){return function(e,t,n){for(var c=t[0].dims,l=i.ShapeUtil.size(c),p=t[0].dataType,f=c.length,d=n.axis,h=d<0?c.length+d:d,g=new Array(n.numOutputs),m=(0,s.inputVariable)(\\\"input\\\",p,c),v=new Array(n.numOutputs),y=[],b=[],w=0,S=0;S<n.numOutputs;S++){w+=n.splitSizes[S],v[S]=w;var _=c.slice();_[n.axis]=n.splitSizes[S],b.push(_),g[S]=(0,s.outputVariable)(\\\"output\\\".concat(S),p,b[S]),y.push({dims:b[S],dataType:t[0].dataType,gpuDataType:u.GpuDataType.default})}var x=f<2?\\\"indices\\\":\\\"indices[\\\".concat(h,\\\"]\\\");return r(r({},e),{getShaderSource:function(e){return\\\"\\\\n  \\\".concat(e.declareVariables.apply(e,o([m],a(g),!1)),\\\"\\\\n  const sizeInConcatAxis = array<u32, \\\").concat(v.length,\\\">(\\\").concat(v.map((function(e){return\\\"\\\".concat(e,\\\"u\\\")})).join(\\\",\\\"),\\\");\\\\n  \\\").concat((t=v.length,\\\"\\\\nfn calculateOutputIndex(index: u32) -> u32 {\\\\n    for (var i: u32 = 0u; i < \\\".concat(t,\\\"u; i += 1u ) {\\\\n    if (index < sizeInConcatAxis[i]) {\\\\n        return i;\\\\n    }\\\\n    }\\\\n    return \\\").concat(t,\\\"u;\\\\n}\\\")),\\\"\\\\n  \\\").concat(function(e){for(var t=e.length,n=[],r=0;r<t;++r){var a=e[r].setByIndices(\\\"indices\\\",\\\"input[global_idx]\\\");1===t?n.push(a):0===r?n.push(\\\"if (outputNumber == \\\".concat(r,\\\"u) { \\\").concat(a,\\\" }\\\")):r===t-1?n.push(\\\"else { \\\".concat(a,\\\" }\\\")):n.push(\\\"else if (outputNumber == \\\".concat(r,\\\") { \\\").concat(a,\\\" }\\\"))}return\\\"\\\\n      fn writeBufferData(outputNumber: u32, indices: \\\".concat(e[0].type.indices,\\\", global_idx: u32) {\\\\n        \\\").concat(n.join(\\\"\\\\n\\\"),\\\"\\\\n      }\\\")}(g),\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(l),\\\"\\\\n\\\\n    var indices = \\\").concat(m.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n    let outputNumber = calculateOutputIndex(\\\").concat(x,\\\");\\\\n    if (outputNumber != 0) {\\\\n        \\\").concat(x,\\\" -= sizeInConcatAxis[outputNumber - 1u];\\\\n    }\\\\n    writeBufferData(outputNumber, indices, global_idx);\\\\n  }\\\");var t},outputs:y,dispatchGroup:function(){return{x:Math.ceil(l/64)}}})}(l,[e[0]],n)}})}(e.inputs,t),{inputs:[0]})},t.parseSplitAttributes=function(e){var t=e.axis,n=e.splitSizes,r=e.numOutputs<0?n.length:e.numOutputs;if(r!==n.length)throw new Error(\\\"numOutputs and splitSizes lengh must be equal\\\");return(0,c.createAttributeWithCacheKey)({axis:t,numOutputs:r,splitSizes:n})}},8699:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.tile=t.createTileProgramInfo=t.tileProgramMetadata=void 0;var i=n(6952),c=n(1163),u=n(2075);t.tileProgramMetadata={name:\\\"Tile\\\",inputTypes:[c.GpuDataType.default]};var s=function(e){return Array.from(e.getBigInt64Array(),Number)};t.createTileProgramInfo=function(e,t){var n=t[0].dims,l=s(t[1]),p=function(e,t){for(var n=[],r=0;r<e.length;++r)n.push(e[r]*t[r]);return n}(n,l),f=i.ShapeUtil.size(p),d=t[0].dataType,h=(0,u.inputVariable)(\\\"input\\\",d,n),g=(0,u.outputVariable)(\\\"output\\\",d,p);return r(r({},e),{outputs:[{dims:p,dataType:t[0].dataType,gpuDataType:c.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n      const inputShape = \\\".concat(h.indices.apply(h,o([],a(n),!1)),\\\";\\\\n      \\\").concat(e.declareVariables(h,g),\\\"\\\\n      \\\").concat(e.mainStart(),\\\"\\\\n      \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(f),\\\"\\\\n      let outputIndices = \\\").concat(g.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n      var inputIndices: \\\").concat(h.type.indices,\\\";\\\\n      for (var i = 0; i < \\\").concat(n.length,\\\"; i++) {\\\\n        let inputDimValue = \\\").concat(g.indicesGet(\\\"outputIndices\\\",\\\"i\\\"),\\\"  % \\\").concat(h.indicesGet(\\\"inputShape\\\",\\\"i\\\"),\\\";\\\\n\\\\n        \\\").concat(h.indicesSet(\\\"inputIndices\\\",\\\"i\\\",\\\"inputDimValue\\\"),\\\"\\\\n      }\\\\n      \\\").concat(g.setByOffset(\\\"global_idx\\\",h.getByIndices(\\\"inputIndices\\\")),\\\"\\\\n    }\\\")},dispatchGroup:function(){return{x:Math.ceil(f/64)}}})},t.tile=function(e){!function(e){if(!e||2!==e.length)throw new Error(\\\"Tile requires 2 inputs.\\\");if(1!==e[0].dataType&&6!==e[0].dataType&&12!==e[0].dataType)throw new Error(\\\"Tile only support float, int32, and uint32 data types\\\");if(7!==e[1].dataType)throw new Error(\\\"Tile `repeats` input should be of int64 data type\\\");if(1!==e[1].dims.length)throw new Error(\\\"Tile `repeats` input should be 1-D\\\");if(s(e[1]).length!==e[0].dims.length)throw new Error(\\\"Tile `repeats` input should have same number of elements as rank of input data tensor\\\")}(e.inputs);var n=s(e.inputs[1]).toString();e.compute(r(r({},t.tileProgramMetadata),{cacheHint:n,get:function(){return(0,t.createTileProgramInfo)(t.tileProgramMetadata,e.inputs)}}),{inputs:[0]})}},2625:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.parseTransposeAttributes=t.transpose=t.createTransposeProgramInfo=t.transposeProgramMetadata=void 0;var i=n(6952),c=n(387),u=n(1163),s=n(2075);t.transposeProgramMetadata={name:\\\"Transpose\\\",inputTypes:[u.GpuDataType.default]};var l=function(e,t){return t&&t.length!==e.length?o([],a(e.keys()),!1).reverse():t};t.createTransposeProgramInfo=function(e,n){var a=e.dataType,o=e.dims,c=l(o,n),p=function(e,t){return i.ShapeUtil.sortBasedOnPerm(e,l(e,t))}(o,c),f=o.length,d=i.ShapeUtil.size(p),h=(0,s.outputVariable)(\\\"output\\\",a,p),g=(0,s.inputVariable)(\\\"a\\\",a,o);return r(r({},t.transposeProgramMetadata),{outputs:[{dims:p,dataType:e.dataType,gpuDataType:u.GpuDataType.default}],getShaderSource:function(e){return\\\"\\\\n  \\\".concat(e.declareVariables(g,h),\\\"\\\\n\\\\n  \\\").concat(function(e,t,n,r){var a=[];a.push(\\\"fn perm(i: \\\".concat(r.type.indices,\\\") -> \\\").concat(n.type.indices,\\\" {\\\\n    var a: \\\").concat(n.type.indices,\\\";\\\"));for(var o=0;o<t;++o)a.push(n.indicesSet(\\\"a\\\",e[o],\\\"i[\\\".concat(o,\\\"]\\\")));return a.push(\\\"return a;}\\\"),a.join(\\\"\\\\n\\\")}(c,f,g,h),\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(d),\\\"\\\\n\\\\n    let indices = \\\").concat(h.offsetToIndices(\\\"global_idx\\\"),\\\";\\\\n    let aIndices = perm(indices);\\\\n\\\\n    \\\").concat(h.setByOffset(\\\"global_idx\\\",g.getByIndices(\\\"aIndices\\\")),\\\"\\\\n  }\\\")},dispatchGroup:function(){return{x:Math.ceil(d/64)}}})},t.transpose=function(e,n){!function(e){if(!e||1!==e.length)throw new Error(\\\"Transpose requires 1 input.\\\")}(e.inputs),e.compute(r(r({},t.transposeProgramMetadata),{cacheHint:n.cacheKey,get:function(){return(0,t.createTransposeProgramInfo)(e.inputs[0],n.perm)}}))},t.parseTransposeAttributes=function(e){return(0,c.createAttributeWithCacheKey)({perm:e.perm})}},9302:function(e,t,n){\\\"use strict\\\";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.log=t.thresholdedRelu=t.tanh=t.tan=t.sqrt=t.sinh=t.sin=t.sigmoid=t.relu=t.reciprocal=t.neg=t.not=t.leakyRelu=t.gelu=t.floor=t.exp=t.erf=t.erfImpl=t.elu=t.parseAlphaAttributes=t.cosh=t.cos=t.ceil=t.clip=t.clipV10=t.cast=t.parseCastAttributes=t.atanh=t.atan=t.asinh=t.asin=t.acosh=t.acos=t.abs=void 0;var a=n(6952),o=n(387),i=n(1163),c=n(2075),u=function(e,t,n,o,u,s){void 0===s&&(s=e.dataType);var l={name:t,inputTypes:[i.GpuDataType.default],cacheHint:u};return r(r({},l),{get:function(){return function(e,t,n,o,u){return r(r({},e),{getShaderSource:function(e){return function(e,t,n,r,a,o){var i,u=Math.ceil(t/4);i=\\\"string\\\"==typeof a?\\\"\\\".concat(a,\\\"(a)\\\"):a(\\\"a\\\");var s=(0,c.inputVariable)(\\\"inputData\\\",n,[u],4),l=(0,c.outputVariable)(\\\"outputData\\\",r,[u],4);return\\\"\\\\n  \\\".concat(e.declareVariables(s,l),\\\"\\\\n\\\\n  \\\").concat(null!=o?o:\\\"\\\",\\\"\\\\n\\\\n  \\\").concat(e.mainStart(),\\\"\\\\n    \\\").concat(e.guardAgainstOutOfBoundsWorkgroupSizes(u),\\\"\\\\n\\\\n    let a = \\\").concat(s.getByOffset(\\\"global_idx\\\"),\\\";\\\\n    \\\").concat(l.setByOffset(\\\"global_idx\\\",i),\\\"\\\\n  }\\\")}(e,a.ShapeUtil.size(t.dims),t.dataType,n,o,u)},outputs:[{dims:t.dims,dataType:n,gpuDataType:i.GpuDataType.default}],dispatchGroup:function(e){return{x:Math.ceil(a.ShapeUtil.size(e[0].dims)/64/4)}}})}(l,e,s,n,o)}})};t.abs=function(e){e.compute(u(e.inputs[0],\\\"Abs\\\",\\\"abs\\\"))},t.acos=function(e){e.compute(u(e.inputs[0],\\\"Acos\\\",\\\"acos\\\"))},t.acosh=function(e){e.compute(u(e.inputs[0],\\\"Acosh\\\",\\\"acosh\\\"))},t.asin=function(e){e.compute(u(e.inputs[0],\\\"Asin\\\",\\\"asin\\\"))},t.asinh=function(e){e.compute(u(e.inputs[0],\\\"Asinh\\\",\\\"asinh\\\"))},t.atan=function(e){e.compute(u(e.inputs[0],\\\"Atan\\\",\\\"atan\\\"))},t.atanh=function(e){e.compute(u(e.inputs[0],\\\"Atanh\\\",\\\"atanh\\\"))},t.parseCastAttributes=function(e){return(0,o.createAttributeWithCacheKey)(e)},t.cast=function(e,t){var n;switch(t.to){case 10:n=\\\"vec4<f16>\\\";break;case 1:n=\\\"vec4<f32>\\\";break;case 12:n=\\\"vec4<u32>\\\";break;case 6:n=\\\"vec4<i32>\\\";break;case 9:n=\\\"vec4<bool>\\\";break;default:throw new RangeError(\\\"not supported type (specified in attribute 'to' from 'Cast' operator): \\\".concat(t.to))}e.compute(u(e.inputs[0],\\\"Cast\\\",n,void 0,t.cacheKey,t.to))},t.clipV10=function(e,t){var n=(0,c.tensorTypeToWsglStorageType)(e.inputs[0].dataType);e.compute(u(e.inputs[0],\\\"Clip\\\",(function(e){return\\\"clamp(\\\".concat(e,\\\", clip_min_, clip_max_)\\\")}),\\\"\\\\n    const clip_min_: vec4<\\\".concat(n,\\\"> = vec4(\\\").concat(n,\\\"(\\\").concat(t.min,\\\"));\\\\n    const clip_max_: vec4<\\\").concat(n,\\\"> = vec4(\\\").concat(n,\\\"(\\\").concat(t.max,\\\"));\\\\n\\\"),t.cacheKey),{inputs:[0]})},t.clip=function(e){var n,r,i,c=(r=(n=e.inputs).length>=2?n[1].getFloat32Array()[0]:a.MIN_CLIP,i=n.length>=3?n[2].getFloat32Array()[0]:a.MAX_CLIP,(0,o.createAttributeWithCacheKey)({min:r,max:i}));(0,t.clipV10)(e,c)},t.ceil=function(e){e.compute(u(e.inputs[0],\\\"Ceil\\\",\\\"ceil\\\"))},t.cos=function(e){e.compute(u(e.inputs[0],\\\"Cos\\\",\\\"cos\\\"))},t.cosh=function(e){e.compute(u(e.inputs[0],\\\"Cosh\\\",\\\"cosh\\\"))},t.parseAlphaAttributes=function(e){return(0,o.createAttributeWithCacheKey)(e)},t.elu=function(e,t){e.compute(u(e.inputs[0],\\\"Elu\\\",(function(e){return\\\"elu_vf32(\\\".concat(e,\\\")\\\")}),\\\"\\\\n  const elu_alpha_: f32 = f32(\\\".concat(t.alpha,\\\");\\\\n\\\\n  fn elu_f32(a: f32) -> f32 {\\\\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\\\\n  }\\\\n\\\\n  fn elu_vf32(v: vec4<f32>) -> vec4<f32> {\\\\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\\\\n  }\\\"),t.cacheKey))},t.erfImpl=function(e,t){return void 0===t&&(t=\\\"f32\\\"),\\\"\\\\nconst r0: \\\".concat(t,\\\" = 0.3275911;\\\\nconst r1: \\\").concat(t,\\\" = 0.254829592;\\\\nconst r2: \\\").concat(t,\\\" = -0.284496736;\\\\nconst r3: \\\").concat(t,\\\" = 1.421413741;\\\\nconst r4: \\\").concat(t,\\\" = -1.453152027;\\\\nconst r5: \\\").concat(t,\\\" = 1.061405429;\\\\n\\\\nfn erf_vf32(v: \\\").concat(e,\\\") -> \\\").concat(e,\\\" {\\\\n  let absv = abs(v);\\\\n  let x = 1.0 / (1.0 + r0 * absv);\\\\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\\\\n}\\\")},t.erf=function(e){var n=(0,c.tensorTypeToWsglStorageType)(e.inputs[0].dataType);e.compute(u(e.inputs[0],\\\"Erf\\\",(function(e){return\\\"erf_vf32(\\\".concat(e,\\\")\\\")}),(0,t.erfImpl)(\\\"vec4<\\\".concat(n,\\\">\\\"),n)))},t.exp=function(e){e.compute(u(e.inputs[0],\\\"Exp\\\",\\\"exp\\\"))},t.floor=function(e){e.compute(u(e.inputs[0],\\\"Floor\\\",\\\"floor\\\"))},t.gelu=function(e){var n=(0,c.tensorTypeToWsglStorageType)(e.inputs[0].dataType);e.compute(u(e.inputs[0],\\\"Gelu\\\",(function(e){return\\\"0.5 * \\\".concat(e,\\\" * (1.0 + erf_vf32(\\\").concat(e,\\\" * 0.7071067811865475))\\\")}),(0,t.erfImpl)(\\\"vec4<\\\".concat(n,\\\">\\\"),n)))},t.leakyRelu=function(e,t){e.compute(u(e.inputs[0],\\\"LeakyRelu\\\",(function(e){return\\\"select(leaky_relu_alpha_ * \\\".concat(e,\\\", \\\").concat(e,\\\", \\\").concat(e,\\\" >= vec4<f32>(0.0))\\\")}),\\\"const leaky_relu_alpha_: f32 = f32(\\\".concat(t.alpha,\\\");\\\"),t.cacheKey))},t.not=function(e){e.compute(u(e.inputs[0],\\\"Not\\\",(function(e){return\\\"!\\\".concat(e)})))},t.neg=function(e){e.compute(u(e.inputs[0],\\\"Neg\\\",(function(e){return\\\"-\\\".concat(e)})))},t.reciprocal=function(e){e.compute(u(e.inputs[0],\\\"Reciprocal\\\",(function(e){return\\\"1.0/\\\".concat(e)})))},t.relu=function(e){e.compute(u(e.inputs[0],\\\"Relu\\\",(function(e){return\\\"select(vec4<f32>(0.0), \\\".concat(e,\\\", \\\").concat(e,\\\" > vec4<f32>(0.0))\\\")})))},t.sigmoid=function(e){e.compute(u(e.inputs[0],\\\"Sigmoid\\\",(function(e){return\\\"(1.0 / (1.0 + exp(-\\\".concat(e,\\\")))\\\")})))},t.sin=function(e){e.compute(u(e.inputs[0],\\\"Sin\\\",\\\"sin\\\"))},t.sinh=function(e){e.compute(u(e.inputs[0],\\\"Sinh\\\",\\\"sinh\\\"))},t.sqrt=function(e){e.compute(u(e.inputs[0],\\\"Sqrt\\\",\\\"sqrt\\\"))},t.tan=function(e){e.compute(u(e.inputs[0],\\\"Tan\\\",\\\"tan\\\"))},t.tanh=function(e){e.compute(u(e.inputs[0],\\\"Tanh\\\",\\\"tanh\\\"))},t.thresholdedRelu=function(e,t){return e.compute(u(e.inputs[0],\\\"ThresholdedRelu\\\",(function(e){return\\\"select(vec4<f32>(0.0), \\\".concat(e,\\\", \\\").concat(e,\\\" > thresholded_relu_alpha_)\\\")}),\\\"const thresholded_relu_alpha_: vec4<f32> = vec4<f32>(\\\".concat(t.alpha,\\\");\\\"),t.cacheKey)),0},t.log=function(e){e.compute(u(e.inputs[0],\\\"Log\\\",\\\"log\\\"))}},8305:function(e,t,n){\\\"use strict\\\";var r=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.ProgramManager=void 0;var i=n(7917),c=n(4955),u=n(2075),s=function(){function e(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}return e.prototype.getArtifact=function(e){return this.repo.get(e)},e.prototype.setArtifact=function(e,t){this.repo.set(e,t)},e.prototype.run=function(e,t,n,c,u){var s,l,p,f,d=this,h=this.backend.device,g=this.backend.getComputePassEncoder(),m=this.backend.supportTimestampQuery&&\\\"default\\\"===this.backend.env.webgpu.profilingMode;m&&g.writeTimestamp(this.backend.profilingQuerySet,0),g.setPipeline(e.computePipeline);var v=[];try{for(var y=r(n),b=y.next();!b.done;b=y.next()){var w=b.value;v.push({binding:v.length,resource:{buffer:w.buffer}})}}catch(e){s={error:e}}finally{try{b&&!b.done&&(l=y.return)&&l.call(y)}finally{if(s)throw s.error}}try{for(var S=r(c),_=S.next();!_.done;_=S.next()){var x=_.value;v.push({binding:v.length,resource:{buffer:x.buffer}})}}catch(e){p={error:e}}finally{try{_&&!_.done&&(f=S.return)&&f.call(S)}finally{if(p)throw p.error}}var O=h.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:v,label:e.programInfo.name});if(g.setBindGroup(0,O),g.dispatchWorkgroups.apply(g,o([],a(u),!1)),this.backend.pendingDispatchNumber++,m){g.writeTimestamp(this.backend.profilingQuerySet,1),null==this.backend.profilingQueryData&&(this.backend.profilingQueryData=this.backend.gpuDataManager.create(16,GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE));var T=this.backend.gpuDataManager.create(16,GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST);this.backend.endComputePass(),this.backend.getCommandEncoder().resolveQuerySet(this.backend.profilingQuerySet,0,2,this.backend.profilingQueryData.buffer,0),this.backend.getCommandEncoder().copyBufferToBuffer(this.backend.profilingQueryData.buffer,0,T.buffer,0,16),this.backend.flush();var I=this.backend.currentKernelId,A=this.backend.kernels.get(I),E=\\\"[\\\".concat(A[0],\\\"] \\\").concat(A[1]);T.buffer.mapAsync(GPUMapMode.READ).then((function(){var n=new BigUint64Array(T.buffer.getMappedRange()),r=n[0],a=n[1];T.buffer.unmap(),void 0===d.backend.profilingTimeBase&&(d.backend.profilingTimeBase=r);var o=Number(r-d.backend.profilingTimeBase),c=Number(a-d.backend.profilingTimeBase);if(!Number.isSafeInteger(o)||!Number.isSafeInteger(c))throw new RangeError(\\\"incorrect timestamp range\\\");d.backend.gpuDataManager.release(T.id);var u=\\\"\\\";t.forEach((function(e,t){u+=\\\"input[\\\".concat(t,\\\"]: [\\\").concat(e.dims,\\\"] | \\\").concat((0,i.tensorDataTypeEnumToString)(e.dataType),\\\", \\\")}));var s=\\\"\\\";e.programInfo.outputs.forEach((function(e,t){s+=\\\"output[\\\".concat(t,\\\"]: [\\\").concat(e.dims,\\\"] | \\\").concat((0,i.tensorDataTypeEnumToString)(e.dataType),\\\", \\\")})),console.log('[profiling] kernel \\\"'.concat(I,\\\"|\\\").concat(E,'\\\" ').concat(u).concat(s,\\\"execution time: \\\").concat(c-o,\\\" ns\\\"))}))}this.backend.pendingDispatchNumber>=16&&this.backend.flush()},e.prototype.dispose=function(){},e.prototype.build=function(e,t){var n=this.backend.device,r=[];n.features.has(\\\"shader-f16\\\")&&r.push(\\\"enable f16;\\\");var a=(0,u.createShaderHelper)(t),o=e.getShaderSource(a),i=\\\"\\\".concat(r.join(\\\"\\\\n\\\"),\\\"\\\\n\\\").concat(a.additionalImplementations,\\\"\\\\n\\\").concat(o),s=n.createShaderModule({code:i,label:e.name});return(0,c.LOG_DEBUG)(\\\"verbose\\\",(function(){return\\\"[WebGPU] shader code: \\\".concat(i)})),{programInfo:e,computePipeline:n.createComputePipeline({compute:{module:s,entryPoint:\\\"main\\\"},layout:\\\"auto\\\",label:e.name})}},e.prototype.normalizeDispatchGroupSize=function(e){var t=\\\"number\\\"==typeof e?e:e.x,n=\\\"number\\\"==typeof e?1:e.y||1,r=\\\"number\\\"==typeof e?1:e.z||1,a=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(t<=a&&n<=a&&r<=a)return[t,n,r];var o=t*n*r,i=Math.ceil(Math.sqrt(o));if(i>a){if((i=Math.ceil(Math.cbrt(o)))>a)throw new Error(\\\"Total dispatch size exceeds WebGPU maximum.\\\");return[i,i,i]}return[i,i,1]},e}();t.ProgramManager=s},1163:function(e,t){\\\"use strict\\\";var n;Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.GpuDataType=void 0,(n=t.GpuDataType||(t.GpuDataType={}))[n.default=0]=\\\"default\\\",n[n.upload=1]=\\\"upload\\\",n[n.profile=2]=\\\"profile\\\"},7918:function(e,t,n){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;var r=n(263),a=n(1497);t.setRunOptions=function(e){var t=(0,r.getInstance)(),n=0,o=[],i=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))i.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(\\\"log serverity level is not valid: \\\".concat(e.logSeverityLevel));if(void 0===(null==e?void 0:e.logVerbosityLevel))i.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(\\\"log verbosity level is not valid: \\\".concat(e.logVerbosityLevel));void 0===(null==e?void 0:e.terminate)&&(i.terminate=!1);var c=0;return void 0!==(null==e?void 0:e.tag)&&(c=(0,a.allocWasmString)(e.tag,o)),0===(n=t._OrtCreateRunOptions(i.logSeverityLevel,i.logVerbosityLevel,!!i.terminate,c))&&(0,a.checkLastError)(\\\"Can't create run options.\\\"),void 0!==(null==e?void 0:e.extra)&&(0,a.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,(function(e,r){var i=(0,a.allocWasmString)(e,o),c=(0,a.allocWasmString)(r,o);0!==t._OrtAddRunConfigEntry(n,i,c)&&(0,a.checkLastError)(\\\"Can't set a run config entry: \\\".concat(e,\\\" - \\\").concat(r,\\\".\\\"))})),[n,o]}catch(e){throw 0!==n&&t._OrtReleaseRunOptions(n),o.forEach((function(e){return t._free(e)})),e}}},7622:function(e,t,n){\\\"use strict\\\";var r=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")},a=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;var o=n(263),i=n(1497);t.setSessionOptions=function(e){var t,n,c,u,s,l,p=(0,o.getInstance)(),f=0,d=[],h=e||{};!function(e){e.extra||(e.extra={}),e.extra.session||(e.extra.session={});var t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((function(e){return\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)}))&&(e.enableMemPattern=!1)}(h);try{var g=function(e){switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(\\\"unsupported graph optimization level: \\\".concat(e))}}(null!==(c=h.graphOptimizationLevel)&&void 0!==c?c:\\\"all\\\"),m=function(e){switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(\\\"unsupported execution mode: \\\".concat(e))}}(null!==(u=h.executionMode)&&void 0!==u?u:\\\"sequential\\\"),v=\\\"string\\\"==typeof h.logId?(0,i.allocWasmString)(h.logId,d):0,y=null!==(s=h.logSeverityLevel)&&void 0!==s?s:2;if(!Number.isInteger(y)||y<0||y>4)throw new Error(\\\"log serverity level is not valid: \\\".concat(y));var b=null!==(l=h.logVerbosityLevel)&&void 0!==l?l:0;if(!Number.isInteger(b)||b<0||b>4)throw new Error(\\\"log verbosity level is not valid: \\\".concat(b));var w=\\\"string\\\"==typeof h.optimizedModelFilePath?(0,i.allocWasmString)(h.optimizedModelFilePath,d):0;if(0===(f=p._OrtCreateSessionOptions(g,!!h.enableCpuMemArena,!!h.enableMemPattern,m,!!h.enableProfiling,0,v,y,b,w))&&(0,i.checkLastError)(\\\"Can't create session options.\\\"),h.executionProviders&&function(e,t,n){var a,c;try{for(var u=r(t),s=u.next();!s.done;s=u.next()){var l=s.value,p=\\\"string\\\"==typeof l?l:l.name;switch(p){case\\\"xnnpack\\\":p=\\\"XNNPACK\\\";break;case\\\"webnn\\\":if(p=\\\"WEBNN\\\",\\\"string\\\"!=typeof l){var f=l;if(null==f?void 0:f.deviceType){var d=(0,i.allocWasmString)(\\\"deviceType\\\",n),h=(0,i.allocWasmString)(f.deviceType,n);0!==(0,o.getInstance)()._OrtAddSessionConfigEntry(e,d,h)&&(0,i.checkLastError)(\\\"Can't set a session config entry: 'deviceType' - \\\".concat(f.deviceType,\\\".\\\"))}(null==f?void 0:f.powerPreference)&&(d=(0,i.allocWasmString)(\\\"powerPreference\\\",n),h=(0,i.allocWasmString)(f.powerPreference,n),0!==(0,o.getInstance)()._OrtAddSessionConfigEntry(e,d,h)&&(0,i.checkLastError)(\\\"Can't set a session config entry: 'powerPreference' - \\\".concat(f.powerPreference,\\\".\\\")))}break;case\\\"webgpu\\\":p=\\\"JS\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(\\\"not supported execution provider: \\\".concat(p))}var g=(0,i.allocWasmString)(p,n);0!==(0,o.getInstance)()._OrtAppendExecutionProvider(e,g)&&(0,i.checkLastError)(\\\"Can't append execution provider: \\\".concat(p,\\\".\\\"))}}catch(e){a={error:e}}finally{try{s&&!s.done&&(c=u.return)&&c.call(u)}finally{if(a)throw a.error}}}(f,h.executionProviders,d),h.freeDimensionOverrides)try{for(var S=r(Object.entries(h.freeDimensionOverrides)),_=S.next();!_.done;_=S.next()){var x=a(_.value,2),O=x[0],T=x[1];if(\\\"string\\\"!=typeof O)throw new Error(\\\"free dimension override name must be a string: \\\".concat(O));if(\\\"number\\\"!=typeof T||!Number.isInteger(T)||T<0)throw new Error(\\\"free dimension override value must be a non-negative integer: \\\".concat(T));var I=(0,i.allocWasmString)(O,d);0!==p._OrtAddFreeDimensionOverride(f,I,T)&&(0,i.checkLastError)(\\\"Can't set a free dimension override: \\\".concat(O,\\\" - \\\").concat(T,\\\".\\\"))}}catch(e){t={error:e}}finally{try{_&&!_.done&&(n=S.return)&&n.call(S)}finally{if(t)throw t.error}}return void 0!==h.extra&&(0,i.iterateExtraOptions)(h.extra,\\\"\\\",new WeakSet,(function(e,t){var n=(0,i.allocWasmString)(e,d),r=(0,i.allocWasmString)(t,d);0!==p._OrtAddSessionConfigEntry(f,n,r)&&(0,i.checkLastError)(\\\"Can't set a session config entry: \\\".concat(e,\\\" - \\\").concat(t,\\\".\\\"))})),[f,d]}catch(e){throw 0!==f&&p._OrtReleaseSessionOptions(f),d.forEach((function(e){return p._free(e)})),e}}},7917:function(e,t){\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=function(e){switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float16\\\":return 10;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(\\\"unsupported data type: \\\".concat(e))}},t.tensorDataTypeEnumToString=function(e){switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 10:return\\\"float16\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(\\\"unsupported data type: \\\".concat(e))}},t.getTensorElementSize=function(e){return[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e]},t.tensorTypeToTypedArrayConstructor=function(e){switch(e){case\\\"float16\\\":case\\\"uint16\\\":return Uint16Array;case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(\\\"unsupported type: \\\".concat(e))}},t.logLevelStringToEnum=function(e){switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(\\\"unsupported logging level: \\\".concat(e))}}},1259:function(e,t,n){\\\"use strict\\\";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}u((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}},o=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i},i=this&&this.__values||function(e){var t=\\\"function\\\"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&\\\"number\\\"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?\\\"Object is not iterable.\\\":\\\"Symbol.iterator is not defined.\\\")};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initRuntime=void 0;var c=n(7918),u=n(7622),s=n(7917),l=n(263),p=n(1497);t.initRuntime=function(e){return r(void 0,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return n=e.wasm.numThreads,r=(0,s.logLevelStringToEnum)(e.logLevel),0!==(0,l.getInstance)()._OrtInit(n,r)&&(0,p.checkLastError)(\\\"Can't initialize onnxruntime.\\\"),[3,2];case 1:t.sent(),t.label=2;case 2:return[2]}var n,r}))}))};var f=new Map;t.createSessionAllocate=function(e){var t=(0,l.getInstance)(),n=t._malloc(e.byteLength);if(0===n)throw new Error(\\\"Can't create a session. failed to allocate a buffer of size \\\".concat(e.byteLength,\\\".\\\"));return t.HEAPU8.set(e,n),[n,e.byteLength]},t.createSessionFinalize=function(e,t){var n,r=(0,l.getInstance)(),a=0,i=0,c=[],s=[],d=[];try{i=(n=o((0,u.setSessionOptions)(t),2))[0],c=n[1],0===(a=r._OrtCreateSession(e[0],e[1],i))&&(0,p.checkLastError)(\\\"Can't create a session.\\\");for(var h=o(function(e){var t=(0,l.getInstance)(),n=t.stackSave();try{var r=t.stackAlloc(8);return 0!==t._OrtGetInputOutputCount(e,r,r+4)&&(0,p.checkLastError)(\\\"Can't get session input/output count.\\\"),[t.HEAP32[r/4],t.HEAP32[r/4+1]]}finally{t.stackRestore(n)}}(a),2),g=h[0],m=h[1],v=[],y=[],b=0;b<g;b++){var w=r._OrtGetInputName(a,b);0===w&&(0,p.checkLastError)(\\\"Can't get an input name.\\\"),s.push(w),v.push(r.UTF8ToString(w))}for(b=0;b<m;b++){var S=r._OrtGetOutputName(a,b);0===S&&(0,p.checkLastError)(\\\"Can't get an output name.\\\"),d.push(S),y.push(r.UTF8ToString(S))}return f.set(a,[a,s,d]),[a,v,y]}catch(e){throw s.forEach((function(e){return r._OrtFree(e)})),d.forEach((function(e){return r._OrtFree(e)})),0!==a&&r._OrtReleaseSession(a),e}finally{r._free(e[0]),0!==i&&r._OrtReleaseSessionOptions(i),c.forEach((function(e){return r._free(e)}))}},t.createSession=function(e,n){var r=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(r,n)},t.releaseSession=function(e){var t=(0,l.getInstance)(),n=f.get(e);if(!n)throw new Error(\\\"cannot release session. invalid session id: \\\".concat(e));var r=o(n,3),a=r[0],i=r[1],c=r[2];i.forEach((function(e){return t._OrtFree(e)})),c.forEach((function(e){return t._OrtFree(e)})),t._OrtReleaseSession(a),f.delete(e)},t.run=function(e,t,n,i,u){return r(void 0,void 0,void 0,(function(){var r,d,h,g,m,v,y,b,w,S,_,x,O,T,I,A,E,C,P,k,M,R,D,z,B,G,j,U,W,L,V,F,N,H,K,q,Y,X,Q,J,Z,$,ee,te,ne,re,ae,oe;return a(this,(function(a){switch(a.label){case 0:if(r=(0,l.getInstance)(),!(d=f.get(e)))throw new Error(\\\"cannot run inference. invalid session id: \\\".concat(e));h=o(d,3),g=h[0],m=h[1],v=h[2],y=t.length,b=i.length,w=0,S=[],_=[],x=[],a.label=1;case 1:for(a.trys.push([1,,9,10]),ae=o((0,c.setRunOptions)(u),2),w=ae[0],S=ae[1],O=function(e){var t=n[e][0],a=n[e][1],o=n[e][2],i=void 0,c=void 0;if(Array.isArray(o)){c=4*o.length,i=r._malloc(c),x.push(i);for(var u=i/4,l=0;l<o.length;l++){if(\\\"string\\\"!=typeof o[l])throw new TypeError(\\\"tensor data at index \\\".concat(l,\\\" is not a string\\\"));r.HEAPU32[u++]=(0,p.allocWasmString)(o[l],x)}}else c=o.byteLength,i=r._malloc(c),x.push(i),r.HEAPU8.set(new Uint8Array(o.buffer,o.byteOffset,c),i);var f=r.stackSave(),d=r.stackAlloc(4*a.length);try{var h=d/4;a.forEach((function(e){return r.HEAP32[h++]=e}));var g=r._OrtCreateTensor((0,s.tensorDataTypeStringToEnum)(t),i,c,d,a.length);0===g&&(0,p.checkLastError)(\\\"Can't create tensor for input[\\\".concat(e,\\\"].\\\")),_.push(g)}finally{r.stackRestore(f)}},j=0;j<y;j++)O(j);T=r.stackSave(),I=r.stackAlloc(4*y),A=r.stackAlloc(4*y),E=r.stackAlloc(4*b),C=r.stackAlloc(4*b),a.label=2;case 2:for(a.trys.push([2,,7,8]),P=I/4,k=A/4,M=E/4,R=C/4,j=0;j<y;j++)r.HEAPU32[P++]=_[j],r.HEAPU32[k++]=m[t[j]];for(j=0;j<b;j++)r.HEAPU32[M++]=0,r.HEAPU32[R++]=v[i[j]];return null===(oe=r.jsepOnRunStart)||void 0===oe||oe.call(r,e),D=r._OrtRun(g,A,I,y,C,b,E,w),(z=r.jsepRunPromise)?[4,z]:[3,4];case 3:D=a.sent(),a.label=4;case 4:return(B=r.jsepOnRunEnd)?[4,B(e)]:[3,6];case 5:a.sent(),a.label=6;case 6:for(G=[],0!==D&&(0,p.checkLastError)(\\\"failed to call OrtRun().\\\"),j=0;j<b;j++){U=r.HEAPU32[E/4+j],W=r.stackSave(),L=r.stackAlloc(16),V=void 0,F=0;try{for(0!==(D=r._OrtGetTensorData(U,L,L+4,L+8,L+12))&&(0,p.checkLastError)(\\\"Can't access output tensor data on index \\\".concat(j,\\\".\\\")),N=L/4,H=r.HEAPU32[N++],F=r.HEAPU32[N++],K=r.HEAPU32[N++],q=r.HEAPU32[N++],Y=[],X=0;X<q;X++)Y.push(r.HEAPU32[K/4+X]);if(r._OrtFree(K),Q=0===Y.length?1:Y.reduce((function(e,t){return e*t})),\\\"string\\\"===(V=(0,s.tensorDataTypeEnumToString)(H))){for(J=[],Z=F/4,$=0;$<Q;$++)ee=r.HEAPU32[Z++],te=$===Q-1?void 0:r.HEAPU32[Z]-ee,J.push(r.UTF8ToString(ee,te));G.push([V,Y,J])}else ne=(0,s.tensorTypeToTypedArrayConstructor)(V),re=new ne(Q),new Uint8Array(re.buffer,re.byteOffset,re.byteLength).set(r.HEAPU8.subarray(F,F+re.byteLength)),G.push([V,Y,re])}finally{r.stackRestore(W),\\\"string\\\"===V&&F&&r._free(F),r._OrtReleaseTensor(U)}}return[2,G];case 7:return r.stackRestore(T),[7];case 8:return[3,10];case 9:return _.forEach((function(e){return r._OrtReleaseTensor(e)})),x.forEach((function(e){return r._free(e)})),0!==w&&r._OrtReleaseRunOptions(w),S.forEach((function(e){return r._free(e)})),[7];case 10:return[2]}}))}))},t.endProfiling=function(e){var t=(0,l.getInstance)(),n=f.get(e);if(!n)throw new Error(\\\"invalid session id\\\");var r=n[0],a=t._OrtEndProfiling(r);0===a&&(0,p.checkLastError)(\\\"Can't get an profile file name.\\\"),t._OrtFree(a)},t.extractTransferableBuffers=function(e){var t,n,r=[];try{for(var a=i(e),o=a.next();!o.done;o=a.next()){var c=o.value[2];!Array.isArray(c)&&c.buffer&&r.push(c.buffer)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return r}},263:function(e,t,n){\\\"use strict\\\";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(t,n);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,a)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)\\\"default\\\"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t},i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function c(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}u((r=r.apply(e,t||[])).next())}))},c=this&&this.__generator||function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},\\\"function\\\"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(u){return function(c){if(n)throw new TypeError(\\\"Generator is already executing.\\\");for(;o&&(o=0,c[0]&&(i=0)),i;)try{if(n=1,r&&(a=2&c[0]?r.return:c[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,c[1])).done)return a;switch(r=0,a&&(c=[2&c[0],a.value]),c[0]){case 0:case 1:a=c;break;case 4:return i.label++,{value:c[1],done:!1};case 5:i.label++,r=c[1],c=[0];continue;case 7:c=i.ops.pop(),i.trys.pop();continue;default:if(!((a=(a=i.trys).length>0&&a[a.length-1])||6!==c[0]&&2!==c[0])){i=0;continue}if(3===c[0]&&(!a||c[1]>a[0]&&c[1]<a[3])){i.label=c[1];break}if(6===c[0]&&i.label<a[1]){i.label=a[1],a=c;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(c);break}a[2]&&i.ops.pop(),i.trys.pop();continue}c=t.call(e,i)}catch(e){c=[6,e],r=0}finally{n=a=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,u])}}};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;var u,s=o(n(6449)),l=n(932),p=n(3474),f=!1,d=!1,h=!1;t.initializeWebAssembly=function(e){return i(void 0,void 0,void 0,(function(){var t,r,a,o,i,g,m,v,y,b,w;return c(this,(function(c){switch(c.label){case 0:if(f)return[2,Promise.resolve()];if(d)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(h)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");return d=!0,t=e.initTimeout,r=e.numThreads,a=e.simd,o=r>1&&function(){try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}}(),i=a&&function(){try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}}(),g=e.wasmPaths,m=\\\"string\\\"==typeof g?g:void 0,v=function(e,t){return t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\"}(i,o),y=\\\"object\\\"==typeof g?g[v]:void 0,b=!1,w=[],t>0&&w.push(new Promise((function(e){setTimeout((function(){b=!0,e()}),t)}))),w.push(new Promise((function(e,t){var r=o?p:l,a={locateFile:function(e,t){return o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([n(4154)],{type:\\\"text/javascript\\\"})):e.endsWith(\\\".wasm\\\")?y||(null!=m?m:t)+v:t+e}};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=s.join(__dirname,\\\"ort-wasm-threaded.js\\\");else{var i=\\\"var ortWasmThreaded=(function(){var _scriptDir;return \\\".concat(r.toString(),\\\"})();\\\");a.mainScriptUrlOrBlob=new Blob([i],{type:\\\"text/javascript\\\"})}r(a).then((function(t){d=!1,f=!0,u=t,e()}),(function(e){d=!1,h=!0,t(e)}))}))),[4,Promise.race(w)];case 1:if(c.sent(),b)throw new Error(\\\"WebAssembly backend initializing failed due to timeout: \\\".concat(t,\\\"ms\\\"));return[2]}}))}))},t.getInstance=function(){if(f&&u)return u;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=function(){var e;!f||d||h||(d=!0,null===(e=u.PThread)||void 0===e||e.terminateAllThreads(),u=void 0,d=!1,f=!1,h=!0)}},1497:function(e,t,n){\\\"use strict\\\";var r=this&&this.__read||function(e,t){var n=\\\"function\\\"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.checkLastError=t.iterateExtraOptions=t.allocWasmString=void 0;var a=n(263);t.allocWasmString=function(e,t){var n=(0,a.getInstance)(),r=n.lengthBytesUTF8(e)+1,o=n._malloc(r);return n.stringToUTF8(e,o,r),t.push(o),o},t.iterateExtraOptions=function(e,n,a,o){if(\\\"object\\\"==typeof e&&null!==e){if(a.has(e))throw new Error(\\\"Circular reference in options\\\");a.add(e)}Object.entries(e).forEach((function(e){var i=r(e,2),c=i[0],u=i[1],s=n?n+c:c;if(\\\"object\\\"==typeof u)(0,t.iterateExtraOptions)(u,s+\\\".\\\",a,o);else if(\\\"string\\\"==typeof u||\\\"number\\\"==typeof u)o(s,u.toString());else{if(\\\"boolean\\\"!=typeof u)throw new Error(\\\"Can't handle extra config type: \\\".concat(typeof u));o(s,u?\\\"1\\\":\\\"0\\\")}}))},t.checkLastError=function(e){var t=(0,a.getInstance)(),n=t.stackSave();try{var r=t.stackAlloc(8);t._OrtGetLastError(r,r+4);var o=t.HEAP32[r/4],i=t.HEAPU32[r/4+1],c=i?t.UTF8ToString(i):\\\"\\\";throw new Error(\\\"\\\".concat(e,\\\" ERROR_CODE: \\\").concat(o,\\\", ERROR_MESSAGE: \\\").concat(c))}finally{t.stackRestore(n)}}},3474:function(e,t,n){var _scriptDir,r=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return P.buffer!=D.buffer&&W(),D}function r(){return P.buffer!=D.buffer&&W(),z}function a(){return P.buffer!=D.buffer&&W(),B}function o(){return P.buffer!=D.buffer&&W(),G}function i(){return P.buffer!=D.buffer&&W(),j}var c,u,s=e;s.ready=new Promise(((e,t)=>{c=e,u=t}));var l,p,f,d=Object.assign({},s),h=\\\"./this.program\\\",g=(e,t)=>{throw t},m=\\\"object\\\"==typeof window,v=\\\"function\\\"==typeof importScripts,y=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,b=s.ENVIRONMENT_IS_PTHREAD||!1,w=\\\"\\\";function S(e){return s.locateFile?s.locateFile(e,w):w+e}if(y){var _=n(1384),x=n(908);let t;w=v?x.dirname(w)+\\\"/\\\":__dirname+\\\"/\\\",l=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):x.normalize(e),_.readFileSync(e,t?void 0:\\\"utf8\\\")),f=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),p=(e,t,n,r=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):x.normalize(e),_.readFile(e,r?void 0:\\\"utf8\\\",((e,a)=>{e?n(e):t(r?a.buffer:a)}))},!s.thisProgram&&1<process.argv.length&&(h=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),g=(e,t)=>{throw process.exitCode=e,t},s.inspect=()=>\\\"[Emscripten Module object]\\\";try{t=n(9925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=t.Worker}else(m||v)&&(v?w=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(w=document.currentScript.src),_scriptDir&&(w=_scriptDir),w=0!==w.indexOf(\\\"blob:\\\")?w.substr(0,w.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",y||(l=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},v&&(f=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),p=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)}));y&&\\\"undefined\\\"==typeof performance&&(global.performance=n(6953).performance);var O=console.log.bind(console),T=console.error.bind(console);y&&(O=(...e)=>_.writeSync(1,e.join(\\\" \\\")+\\\"\\\\n\\\"),T=(...e)=>_.writeSync(2,e.join(\\\" \\\")+\\\"\\\\n\\\"));var I,A=s.print||O,E=s.printErr||T;Object.assign(s,d),d=null,s.thisProgram&&(h=s.thisProgram),s.quit&&(g=s.quit),s.wasmBinary&&(I=s.wasmBinary);var C=s.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&te(\\\"no native wasm support detected\\\");var P,k,M,R,D,z,B,G,j,U=!1;function W(){var e=P.buffer;s.HEAP8=D=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=B=new Int32Array(e),s.HEAPU8=z=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=G=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=j=new Float64Array(e)}var L=s.INITIAL_MEMORY||16777216;if(5242880<=L||te(\\\"INITIAL_MEMORY should be larger than STACK_SIZE, was \\\"+L+\\\"! (STACK_SIZE=5242880)\\\"),b)P=s.wasmMemory;else if(s.wasmMemory)P=s.wasmMemory;else if(!((P=new WebAssembly.Memory({initial:L/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw E(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),y&&E(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\\\"),Error(\\\"bad memory\\\");W(),L=P.buffer.byteLength;var V,F=[],N=[],H=[],K=0;function q(){return C||0<K}var Y,X,Q=0,J=null,Z=null;function $(){Q++,s.monitorRunDependencies&&s.monitorRunDependencies(Q)}function ee(){if(Q--,s.monitorRunDependencies&&s.monitorRunDependencies(Q),0==Q&&(null!==J&&(clearInterval(J),J=null),Z)){var e=Z;Z=null,e()}}function te(e){throw s.onAbort&&s.onAbort(e),E(e=\\\"Aborted(\\\"+e+\\\")\\\"),U=!0,R=1,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),u(e),e}function ne(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}function re(e){if(e==Y&&I)return new Uint8Array(I);if(f)return f(e);throw\\\"both async and sync fetching of the wasm failed\\\"}function ae(e,t,n){return function(e){if(!I&&(m||v)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>re(e)));if(p)return new Promise(((t,n)=>{p(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>re(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(n,(e=>{E(\\\"failed to asynchronously prepare wasm: \\\"+e),te(e)}))}function oe(e){this.name=\\\"ExitStatus\\\",this.message=`Program terminated with exit(${e})`,this.status=e}function ie(e){e.terminate(),e.onmessage=()=>{}}function ce(e){(e=he.Fa[e])||te(),he.fb(e)}function ue(e){var t=he.Za();if(!t)return 6;he.Ia.push(t),he.Fa[e.Ha]=t,t.Ha=e.Ha;var n={cmd:\\\"run\\\",start_routine:e.gb,arg:e.Ya,pthread_ptr:e.Ha};return y&&t.unref(),t.postMessage(n,e.mb),0}ne(Y=\\\"ort-wasm-threaded.wasm\\\")||(Y=S(Y));var se=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0,le=(e,t,n)=>{var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&se)return se.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,n):e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r},pe=(e,t)=>(e>>>=0)?le(r(),e,t):\\\"\\\";function fe(e){if(b)return qe(1,1,e);R=e,q()||(he.hb(),s.onExit&&s.onExit(e),U=!0),g(e,new oe(e))}var de=e=>{if(R=e,b)throw me(e),\\\"unwind\\\";fe(e)},he={La:[],Ia:[],Ta:[],Fa:{},Pa:function(){b?he.ab():he.$a()},$a:function(){F.unshift((()=>{$(),he.bb((()=>ee()))}))},ab:function(){he.receiveObjectTransfer=he.eb,he.threadInitTLS=he.Sa,he.setExitStatus=he.Ra,C=!1},Ra:function(e){R=e},rb:[\\\"$terminateWorker\\\"],hb:function(){for(var e of he.Ia)ie(e);for(e of he.La)ie(e);he.La=[],he.Ia=[],he.Fa=[]},fb:function(e){var t=e.Ha;delete he.Fa[t],he.La.push(e),he.Ia.splice(he.Ia.indexOf(e),1),e.Ha=0,mt(t)},eb:function(){},Sa:function(){he.Ta.forEach((e=>e()))},cb:e=>new Promise((t=>{e.onmessage=n=>{var r=(n=n.data).cmd;if(n.targetThread&&n.targetThread!=pt()){var a=he.Fa[n.qb];a?a.postMessage(n,n.transferList):E('Internal error! Worker sent a message \\\"'+r+'\\\" to target pthread '+n.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"checkMailbox\\\"===r?Ue():\\\"spawnThread\\\"===r?ue(n):\\\"cleanupThread\\\"===r?ce(n.thread):\\\"killThread\\\"===r?(n=n.thread,r=he.Fa[n],delete he.Fa[n],ie(r),mt(n),he.Ia.splice(he.Ia.indexOf(r),1),r.Ha=0):\\\"cancelThread\\\"===r?he.Fa[n.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===r?(e.loaded=!0,t(e)):\\\"alert\\\"===r?alert(\\\"Thread \\\"+n.threadId+\\\": \\\"+n.text):\\\"setimmediate\\\"===n.target?e.postMessage(n):\\\"callHandler\\\"===r?s[n.handler](...n.args):r&&E(\\\"worker sent an unknown command \\\"+r)},e.onerror=e=>{throw E(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},y&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})));var n,r=[];for(n of[\\\"onExit\\\",\\\"onAbort\\\",\\\"print\\\",\\\"printErr\\\"])s.hasOwnProperty(n)&&r.push(n);e.postMessage({cmd:\\\"load\\\",handlers:r,urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:P,wasmModule:M})})),bb:function(e){e()},Xa:function(){var e=S(\\\"ort-wasm-threaded.worker.js\\\");e=new Worker(e),he.La.push(e)},Za:function(){return 0==he.La.length&&(he.Xa(),he.cb(he.La[0])),he.La.pop()}};s.PThread=he;var ge=e=>{for(;0<e.length;)e.shift()(s)};function me(e){if(b)return qe(2,0,e);de(e)}s.establishStackSpace=function(){var e=pt(),t=a()[e+52>>2>>>0];e=a()[e+56>>2>>>0],wt(t,t-e),_t(t)};var ve=[];function ye(e){this.Oa=e-24,this.Wa=function(e){o()[this.Oa+4>>2>>>0]=e},this.Va=function(e){o()[this.Oa+8>>2>>>0]=e},this.Pa=function(e,t){this.Ua(),this.Wa(e),this.Va(t)},this.Ua=function(){o()[this.Oa+16>>2>>>0]=0}}function be(e,t,n,r){return b?qe(3,1,e,t,n,r):we(e,t,n,r)}function we(e,t,n,r){if(e>>>=0,t>>>=0,n>>>=0,r>>>=0,\\\"undefined\\\"==typeof SharedArrayBuffer)return E(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return b&&0===a.length?be(e,t,n,r):(e={gb:n,Ha:e,Ya:r,mb:a},b?(e.ob=\\\"spawnThread\\\",postMessage(e,a),0):ue(e))}function Se(e,t,n){return b?qe(4,1,e,t,n):0}function _e(e,t){if(b)return qe(5,1,e,t)}s.invokeEntryPoint=function(e,t){var n=ve[e];n||(e>=ve.length&&(ve.length=e+1),ve[e]=n=V.get(e)),e=n(t),q()?he.Ra(e):vt(e)};var xe=e=>{for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t},Oe=(e,t,n,r)=>{if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a},Te=(e,t,n)=>Oe(e,r(),t,n);function Ie(e,t){if(b)return qe(6,1,e,t)}function Ae(e,t,n){if(b)return qe(7,1,e,t,n)}function Ee(e,t,n){return b?qe(8,1,e,t,n):0}function Ce(e,t){if(b)return qe(9,1,e,t)}function Pe(e,t,n){if(b)return qe(10,1,e,t,n)}function ke(e,t,n,r){if(b)return qe(11,1,e,t,n,r)}function Me(e,t,n,r){if(b)return qe(12,1,e,t,n,r)}function Re(e,t,n,r){if(b)return qe(13,1,e,t,n,r)}function De(e){if(b)return qe(14,1,e)}function ze(e,t){if(b)return qe(15,1,e,t)}function Be(e,t,n){if(b)return qe(16,1,e,t,n)}var Ge=e=>{if(!U)try{if(e(),!q())try{b?vt(R):de(R)}catch(e){e instanceof oe||\\\"unwind\\\"==e||g(1,e)}}catch(e){e instanceof oe||\\\"unwind\\\"==e||g(1,e)}};function je(e){e>>>=0,\\\"function\\\"==typeof Atomics.nb&&(Atomics.nb(a(),e>>2,e).value.then(Ue),e+=128,Atomics.store(a(),e>>2,1))}function Ue(){var e=pt();e&&(je(e),Ge((()=>yt())))}s.__emscripten_thread_mailbox_await=je,s.checkMailbox=Ue;var We=e=>0==e%4&&(0!=e%100||0==e%400),Le=[0,31,60,91,121,152,182,213,244,274,305,335],Ve=[0,31,59,90,120,151,181,212,243,273,304,334];function Fe(e,t,n,r,a,o,i,c){return b?qe(17,1,e,t,n,r,a,o,i,c):-52}function Ne(e,t,n,r,a,o,i){if(b)return qe(18,1,e,t,n,r,a,o,i)}var He=e=>{var t=xe(e)+1,n=ft(t);return n&&Te(e,n,t),n},Ke=e=>{var t=St();return e=e(),_t(t),e};function qe(e,t){var n=arguments.length-2,r=arguments;return Ke((()=>{for(var a=xt(8*n),o=a>>3,c=0;c<n;c++){var u=r[2+c];i()[o+c>>>0]=u}return gt(e,n,a,t)}))}var Ye,Xe=[],Qe={},Je=()=>{if(!Ye){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:h||\\\"./this.program\\\"};for(e in Qe)void 0===Qe[e]?delete t[e]:t[e]=Qe[e];var n=[];for(e in t)n.push(`${e}=${t[e]}`);Ye=n}return Ye};function Ze(e,n){if(b)return qe(19,1,e,n);e>>>=0,n>>>=0;var r=0;return Je().forEach((function(a,i){var c=n+r;for(i=o()[e+4*i>>2>>>0]=c,c=0;c<a.length;++c)t()[i++>>0>>>0]=a.charCodeAt(c);t()[i>>0>>>0]=0,r+=a.length+1})),0}function $e(e,t){if(b)return qe(20,1,e,t);e>>>=0,t>>>=0;var n=Je();o()[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),o()[t>>2>>>0]=r,0}function et(e){return b?qe(21,1,e):52}function tt(e,t,n,r){return b?qe(22,1,e,t,n,r):52}function nt(e,t,n,r,a){return b?qe(23,1,e,t,n,r,a):70}var rt=[null,[],[]];function at(e,t,n,a){if(b)return qe(24,1,e,t,n,a);t>>>=0,n>>>=0,a>>>=0;for(var i=0,c=0;c<n;c++){var u=o()[t>>2>>>0],s=o()[t+4>>2>>>0];t+=8;for(var l=0;l<s;l++){var p=r()[u+l>>>0],f=rt[e];0===p||10===p?((1===e?A:E)(le(f,0)),f.length=0):f.push(p)}i+=s}return o()[a>>2>>>0]=i,0}var ot=[31,29,31,30,31,30,31,31,30,31,30,31],it=[31,28,31,30,31,30,31,31,30,31,30,31],ct=(e,n)=>{t().set(e,n>>>0)};function ut(e,t,n,r){function o(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function i(e,t){return o(e,t,\\\"0\\\")}function c(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function u(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function s(e){var t=e.Ja;for(e=new Date(new Date(e.Ka+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(We(e.getFullYear())?ot:it)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=u(new Date(e.getFullYear(),0,4)),n=u(n),0>=c(t,e)?0>=c(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,n>>>=0,r>>>=0;var l=a()[r+40>>2>>>0];for(var p in r={kb:a()[r>>2>>>0],jb:a()[r+4>>2>>>0],Ma:a()[r+8>>2>>>0],Qa:a()[r+12>>2>>>0],Na:a()[r+16>>2>>>0],Ka:a()[r+20>>2>>>0],Ga:a()[r+24>>2>>>0],Ja:a()[r+28>>2>>>0],sb:a()[r+32>>2>>>0],ib:a()[r+36>>2>>>0],lb:l?pe(l):\\\"\\\"},n=pe(n),l={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(p,\\\"g\\\"),l[p]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),d=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in l={\\\"%a\\\":e=>f[e.Ga].substring(0,3),\\\"%A\\\":e=>f[e.Ga],\\\"%b\\\":e=>d[e.Na].substring(0,3),\\\"%B\\\":e=>d[e.Na],\\\"%C\\\":e=>i((e.Ka+1900)/100|0,2),\\\"%d\\\":e=>i(e.Qa,2),\\\"%e\\\":e=>o(e.Qa,2,\\\" \\\"),\\\"%g\\\":e=>s(e).toString().substring(2),\\\"%G\\\":e=>s(e),\\\"%H\\\":e=>i(e.Ma,2),\\\"%I\\\":e=>(0==(e=e.Ma)?e=12:12<e&&(e-=12),i(e,2)),\\\"%j\\\":e=>{for(var t=0,n=0;n<=e.Na-1;t+=(We(e.Ka+1900)?ot:it)[n++]);return i(e.Qa+t,3)},\\\"%m\\\":e=>i(e.Na+1,2),\\\"%M\\\":e=>i(e.jb,2),\\\"%n\\\":()=>\\\"\\\\n\\\",\\\"%p\\\":e=>0<=e.Ma&&12>e.Ma?\\\"AM\\\":\\\"PM\\\",\\\"%S\\\":e=>i(e.kb,2),\\\"%t\\\":()=>\\\"\\\\t\\\",\\\"%u\\\":e=>e.Ga||7,\\\"%U\\\":e=>i(Math.floor((e.Ja+7-e.Ga)/7),2),\\\"%V\\\":e=>{var t=Math.floor((e.Ja+7-(e.Ga+6)%7)/7);if(2>=(e.Ga+371-e.Ja-2)%7&&t++,t)53==t&&(4==(n=(e.Ga+371-e.Ja)%7)||3==n&&We(e.Ka)||(t=1));else{t=52;var n=(e.Ga+7-e.Ja-1)%7;(4==n||5==n&&We(e.Ka%400-1))&&t++}return i(t,2)},\\\"%w\\\":e=>e.Ga,\\\"%W\\\":e=>i(Math.floor((e.Ja+7-(e.Ga+6)%7)/7),2),\\\"%y\\\":e=>(e.Ka+1900).toString().substring(2),\\\"%Y\\\":e=>e.Ka+1900,\\\"%z\\\":e=>{var t=0<=(e=e.ib);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":e=>e.lb,\\\"%%\\\":()=>\\\"%\\\"},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),l)n.includes(p)&&(n=n.replace(new RegExp(p,\\\"g\\\"),l[p](r)));return p=function(e){var t=Array(xe(e)+1);return Oe(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>t?0:(ct(p,e),p.length-1)}he.Pa();var st=[null,fe,me,be,Se,_e,Ie,Ae,Ee,Ce,Pe,ke,Me,Re,De,ze,Be,Fe,Ne,Ze,$e,et,tt,nt,at],lt={b:function(e,t,n){throw new ye(e>>>=0).Pa(t>>>0,n>>>0),e},N:function(e){dt(e>>>0,!v,1,!m,131072,!1),he.Sa()},j:function(e){e>>>=0,b?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):ce(e)},I:we,h:Se,T:_e,D:Ie,F:Ae,U:Ee,R:Ce,J:Pe,Q:ke,n:Me,E:Re,B:De,S:ze,C:Be,q:()=>!0,z:function(e,t){(e>>>=0)==t>>>0?setTimeout((()=>Ue())):b?postMessage({targetThread:e,cmd:\\\"checkMailbox\\\"}):(e=he.Fa[e])&&e.postMessage({cmd:\\\"checkMailbox\\\"})},L:function(){return-1},M:je,p:function(e){y&&he.Fa[e>>>0].ref()},t:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),a()[n>>2>>>0]=e.getUTCSeconds(),a()[n+4>>2>>>0]=e.getUTCMinutes(),a()[n+8>>2>>>0]=e.getUTCHours(),a()[n+12>>2>>>0]=e.getUTCDate(),a()[n+16>>2>>>0]=e.getUTCMonth(),a()[n+20>>2>>>0]=e.getUTCFullYear()-1900,a()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[n+28>>2>>>0]=e},u:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),a()[n>>2>>>0]=e.getSeconds(),a()[n+4>>2>>>0]=e.getMinutes(),a()[n+8>>2>>>0]=e.getHours(),a()[n+12>>2>>>0]=e.getDate(),a()[n+16>>2>>>0]=e.getMonth(),a()[n+20>>2>>>0]=e.getFullYear()-1900,a()[n+24>>2>>>0]=e.getDay(),t=(We(e.getFullYear())?Le:Ve)[e.getMonth()]+e.getDate()-1|0,a()[n+28>>2>>>0]=t,a()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var r=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=r&&e.getTimezoneOffset()==Math.min(r,t)),a()[n+32>>2>>>0]=e},v:function(e){e>>>=0;var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),n=a()[e+32>>2>>>0],r=t.getTimezoneOffset(),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),c=Math.min(i,o);return 0>n?a()[e+32>>2>>>0]=Number(o!=i&&c==r):0<n!=(c==r)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<n?c:o)-r))),a()[e+24>>2>>>0]=t.getDay(),n=(We(t.getFullYear())?Le:Ve)[t.getMonth()]+t.getDate()-1|0,a()[e+28>>2>>>0]=n,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,bt((X=e,1<=+Math.abs(X)?0<X?+Math.floor(X/4294967296)>>>0:~~+Math.ceil((X-+(~~X>>>0))/4294967296)>>>0:0)),e>>>0},r:Fe,s:Ne,y:function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}e>>>=0,t>>>=0,n>>>=0;var i=(new Date).getFullYear(),c=new Date(i,0,1),u=new Date(i,6,1);i=c.getTimezoneOffset();var s=u.getTimezoneOffset(),l=Math.max(i,s);o()[e>>2>>>0]=60*l,a()[t>>2>>>0]=Number(i!=s),e=r(c),t=r(u),e=He(e),t=He(t),s<i?(o()[n>>2>>>0]=e,o()[n+4>>2>>>0]=t):(o()[n>>2>>>0]=t,o()[n+4>>2>>>0]=e)},c:()=>{te(\\\"\\\")},k:function(){},i:function(){return Date.now()},o:()=>{throw K+=1,\\\"unwind\\\"},A:function(){return 4294901760},e:()=>performance.timeOrigin+performance.now(),f:function(){return y?n(3993).cpus().length:navigator.hardwareConcurrency},K:function(e,t,n,r){for(he.pb=t>>>0,Xe.length=n,t=r>>>0>>3,r=0;r<n;r++)Xe[r]=i()[t+r>>>0];return st[e].apply(null,Xe)},x:function(e){e>>>=0;var t=r().length;if(e<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a);e:{o=o.min.call(o,4294901760,a+(65536-a%65536)%65536)-P.buffer.byteLength+65535>>>16;try{P.grow(o),W();var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},O:Ze,P:$e,H:de,g:et,m:tt,w:nt,l:at,a:P||s.wasmMemory,G:ut,d:function(e,t,n,r){return ut(e>>>0,t>>>0,n>>>0,r>>>0)}};!function(){function e(e,t){return e=e.exports,k=e=function(e){var t=e=>()=>e()>>>0,n=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.pthread_self=t(e.pthread_self),e.malloc=n(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=n(e.stackAlloc),e}(e),he.Ta.push(k.sa),V=k.ta,N.unshift(k.V),M=t,ee(),e}var t={a:lt};if($(),s.instantiateWasm)try{return s.instantiateWasm(t,e)}catch(e){E(\\\"Module.instantiateWasm callback failed with error: \\\"+e),u(e)}(function(e,t){var n=Y;return I||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||ne(n)||n.startsWith(\\\"file://\\\")||y||\\\"function\\\"!=typeof fetch?ae(n,e,t):fetch(n,{credentials:\\\"same-origin\\\"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(t,(function(r){return E(\\\"wasm streaming compile failed: \\\"+r),E(\\\"falling back to ArrayBuffer instantiation\\\"),ae(n,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(u)}(),s._OrtInit=(e,t)=>(s._OrtInit=k.W)(e,t),s._OrtGetLastError=(e,t)=>(s._OrtGetLastError=k.X)(e,t),s._OrtCreateSessionOptions=(e,t,n,r,a,o,i,c,u,l)=>(s._OrtCreateSessionOptions=k.Y)(e,t,n,r,a,o,i,c,u,l),s._OrtAppendExecutionProvider=(e,t)=>(s._OrtAppendExecutionProvider=k.Z)(e,t),s._OrtAddFreeDimensionOverride=(e,t,n)=>(s._OrtAddFreeDimensionOverride=k._)(e,t,n),s._OrtAddSessionConfigEntry=(e,t,n)=>(s._OrtAddSessionConfigEntry=k.$)(e,t,n),s._OrtReleaseSessionOptions=e=>(s._OrtReleaseSessionOptions=k.aa)(e),s._OrtCreateSession=(e,t,n)=>(s._OrtCreateSession=k.ba)(e,t,n),s._OrtReleaseSession=e=>(s._OrtReleaseSession=k.ca)(e),s._OrtGetInputOutputCount=(e,t,n)=>(s._OrtGetInputOutputCount=k.da)(e,t,n),s._OrtGetInputName=(e,t)=>(s._OrtGetInputName=k.ea)(e,t),s._OrtGetOutputName=(e,t)=>(s._OrtGetOutputName=k.fa)(e,t),s._OrtFree=e=>(s._OrtFree=k.ga)(e),s._OrtCreateTensor=(e,t,n,r,a)=>(s._OrtCreateTensor=k.ha)(e,t,n,r,a),s._OrtGetTensorData=(e,t,n,r,a)=>(s._OrtGetTensorData=k.ia)(e,t,n,r,a),s._OrtReleaseTensor=e=>(s._OrtReleaseTensor=k.ja)(e),s._OrtCreateRunOptions=(e,t,n,r)=>(s._OrtCreateRunOptions=k.ka)(e,t,n,r),s._OrtAddRunConfigEntry=(e,t,n)=>(s._OrtAddRunConfigEntry=k.la)(e,t,n),s._OrtReleaseRunOptions=e=>(s._OrtReleaseRunOptions=k.ma)(e),s._OrtRun=(e,t,n,r,a,o,i,c)=>(s._OrtRun=k.na)(e,t,n,r,a,o,i,c),s._OrtEndProfiling=e=>(s._OrtEndProfiling=k.oa)(e);var pt=s._pthread_self=()=>(pt=s._pthread_self=k.pa)(),ft=s._malloc=e=>(ft=s._malloc=k.qa)(e);s._free=e=>(s._free=k.ra)(e),s.__emscripten_tls_init=()=>(s.__emscripten_tls_init=k.sa)();var dt=s.__emscripten_thread_init=(e,t,n,r,a,o)=>(dt=s.__emscripten_thread_init=k.ua)(e,t,n,r,a,o);s.__emscripten_thread_crashed=()=>(s.__emscripten_thread_crashed=k.va)();var ht,gt=(e,t,n,r)=>(gt=k.wa)(e,t,n,r),mt=e=>(mt=k.xa)(e),vt=s.__emscripten_thread_exit=e=>(vt=s.__emscripten_thread_exit=k.ya)(e),yt=s.__emscripten_check_mailbox=()=>(yt=s.__emscripten_check_mailbox=k.za)(),bt=e=>(bt=k.Aa)(e),wt=(e,t)=>(wt=k.Ba)(e,t),St=()=>(St=k.Ca)(),_t=e=>(_t=k.Da)(e),xt=e=>(xt=k.Ea)(e);function Ot(){function e(){if(!ht&&(ht=!0,s.calledRun=!0,!U)&&(b||ge(N),c(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!b)){if(s.postRun)for(\\\"function\\\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();H.unshift(e)}ge(H)}}if(!(0<Q))if(b)c(s),b||ge(N),startWorker(s);else{if(s.preRun)for(\\\"function\\\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)F.unshift(s.preRun.shift());ge(F),0<Q||(s.setStatus?(s.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){s.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(s.keepRuntimeAlive=q,s.wasmMemory=P,s.stackAlloc=xt,s.stackSave=St,s.stackRestore=_t,s.UTF8ToString=pe,s.stringToUTF8=Te,s.lengthBytesUTF8=xe,s.ExitStatus=oe,s.PThread=he,Z=function e(){ht||Ot(),ht||(Z=e)},s.preInit)for(\\\"function\\\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return Ot(),e.ready});e.exports=r},932:function(e,t,n){var _scriptDir,r=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){var t,r,a=e;a.ready=new Promise(((e,n)=>{t=e,r=n}));var o,i,c,u=Object.assign({},a),s=\\\"./this.program\\\",l=\\\"object\\\"==typeof window,p=\\\"function\\\"==typeof importScripts,f=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,d=\\\"\\\";if(f){var h=n(1384),g=n(908);d=p?g.dirname(d)+\\\"/\\\":__dirname+\\\"/\\\",o=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):g.normalize(e),h.readFileSync(e,t?void 0:\\\"utf8\\\")),c=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,n,r=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):g.normalize(e),h.readFile(e,r?void 0:\\\"utf8\\\",((e,a)=>{e?n(e):t(r?a.buffer:a)}))},!a.thisProgram&&1<process.argv.length&&(s=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),a.inspect=()=>\\\"[Emscripten Module object]\\\"}else(l||p)&&(p?d=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(d=document.currentScript.src),_scriptDir&&(d=_scriptDir),d=0!==d.indexOf(\\\"blob:\\\")?d.substr(0,d.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},p&&(c=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,n)=>{var r=new XMLHttpRequest;r.open(\\\"GET\\\",e,!0),r.responseType=\\\"arraybuffer\\\",r.onload=()=>{200==r.status||0==r.status&&r.response?t(r.response):n()},r.onerror=n,r.send(null)});var m,v=a.print||console.log.bind(console),y=a.printErr||console.error.bind(console);Object.assign(a,u),u=null,a.thisProgram&&(s=a.thisProgram),a.wasmBinary&&(m=a.wasmBinary),a.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&z(\\\"no native wasm support detected\\\");var b,w,S,_,x,O,T=!1;function I(){var e=b.buffer;a.HEAP8=S=new Int8Array(e),a.HEAP16=new Int16Array(e),a.HEAP32=x=new Int32Array(e),a.HEAPU8=_=new Uint8Array(e),a.HEAPU16=new Uint16Array(e),a.HEAPU32=O=new Uint32Array(e),a.HEAPF32=new Float32Array(e),a.HEAPF64=new Float64Array(e)}var A=[],E=[],C=[];function P(){var e=a.preRun.shift();A.unshift(e)}var k,M=0,R=null,D=null;function z(e){throw a.onAbort&&a.onAbort(e),y(e=\\\"Aborted(\\\"+e+\\\")\\\"),T=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),r(e),e}function B(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(!B(k=\\\"ort-wasm.wasm\\\")){var G=k;k=a.locateFile?a.locateFile(G,d):d+G}function j(e){if(e==k&&m)return new Uint8Array(m);if(c)return c(e);throw\\\"both async and sync fetching of the wasm failed\\\"}function U(e,t,n){return function(e){if(!m&&(l||p)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>j(e)));if(i)return new Promise(((t,n)=>{i(e,(e=>t(new Uint8Array(e))),n)}))}return Promise.resolve().then((()=>j(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(n,(e=>{y(\\\"failed to asynchronously prepare wasm: \\\"+e),z(e)}))}var W,L=e=>{for(;0<e.length;)e.shift()(a)};function V(e){this.pa=e-24,this.ua=function(e){O[this.pa+4>>2>>>0]=e},this.ta=function(e){O[this.pa+8>>2>>>0]=e},this.ra=function(e,t){this.sa(),this.ua(e),this.ta(t)},this.sa=function(){O[this.pa+16>>2>>>0]=0}}var F,N=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0,H=(e,t,n)=>{var r=(t>>>=0)+n;for(n=t;e[n]&&!(n>=r);)++n;if(16<n-t&&e.buffer&&N)return N.decode(e.subarray(t,n));for(r=\\\"\\\";t<n;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r},K=(e,t)=>(e>>>=0)?H(_,e,t):\\\"\\\",q=e=>{for(var t=0,n=0;n<e.length;++n){var r=e.charCodeAt(n);127>=r?t++:2047>=r?t+=2:55296<=r&&57343>=r?(t+=4,++n):t+=3}return t},Y=(e,t,n,r)=>{if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(n>=r)break;t[n++>>>0]=i}else{if(2047>=i){if(n+1>=r)break;t[n++>>>0]=192|i>>6}else{if(65535>=i){if(n+2>=r)break;t[n++>>>0]=224|i>>12}else{if(n+3>=r)break;t[n++>>>0]=240|i>>18,t[n++>>>0]=128|i>>12&63}t[n++>>>0]=128|i>>6&63}t[n++>>>0]=128|63&i}}return t[n>>>0]=0,n-a},X=e=>0==e%4&&(0!=e%100||0==e%400),Q=[0,31,60,91,121,152,182,213,244,274,305,335],J=[0,31,59,90,120,151,181,212,243,273,304,334],Z=e=>{var t=q(e)+1,n=ie(t);return n&&Y(e,_,n,t),n},$={},ee=()=>{if(!F){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:s||\\\"./this.program\\\"};for(e in $)void 0===$[e]?delete t[e]:t[e]=$[e];var n=[];for(e in t)n.push(`${e}=${t[e]}`);F=n}return F},te=[null,[],[]],ne=[31,29,31,30,31,30,31,31,30,31,30,31],re=[31,28,31,30,31,30,31,31,30,31,30,31];function ae(e,t,n,r){function a(e,t,n){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=n[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function n(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=n(e.getFullYear()-t.getFullYear()))&&0===(r=n(e.getMonth()-t.getMonth()))&&(r=n(e.getDate()-t.getDate())),r}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.la;for(e=new Date(new Date(e.ma+1900,0,1).getTime());0<t;){var n=e.getMonth(),r=(X(e.getFullYear())?ne:re)[n];if(!(t>r-e.getDate())){e.setDate(e.getDate()+t);break}t-=r-e.getDate()+1,e.setDate(1),11>n?e.setMonth(n+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return n=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4)),n=c(n),0>=i(t,e)?0>=i(n,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,n>>>=0;var s=x[40+(r>>>=0)>>2>>>0];for(var l in r={xa:x[r>>2>>>0],wa:x[r+4>>2>>>0],na:x[r+8>>2>>>0],qa:x[r+12>>2>>>0],oa:x[r+16>>2>>>0],ma:x[r+20>>2>>>0],ga:x[r+24>>2>>>0],la:x[r+28>>2>>>0],za:x[r+32>>2>>>0],va:x[r+36>>2>>>0],ya:s?K(s):\\\"\\\"},n=K(n),s={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(l,\\\"g\\\"),s[l]);var p=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),f=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in s={\\\"%a\\\":e=>p[e.ga].substring(0,3),\\\"%A\\\":e=>p[e.ga],\\\"%b\\\":e=>f[e.oa].substring(0,3),\\\"%B\\\":e=>f[e.oa],\\\"%C\\\":e=>o((e.ma+1900)/100|0,2),\\\"%d\\\":e=>o(e.qa,2),\\\"%e\\\":e=>a(e.qa,2,\\\" \\\"),\\\"%g\\\":e=>u(e).toString().substring(2),\\\"%G\\\":e=>u(e),\\\"%H\\\":e=>o(e.na,2),\\\"%I\\\":e=>(0==(e=e.na)?e=12:12<e&&(e-=12),o(e,2)),\\\"%j\\\":e=>{for(var t=0,n=0;n<=e.oa-1;t+=(X(e.ma+1900)?ne:re)[n++]);return o(e.qa+t,3)},\\\"%m\\\":e=>o(e.oa+1,2),\\\"%M\\\":e=>o(e.wa,2),\\\"%n\\\":()=>\\\"\\\\n\\\",\\\"%p\\\":e=>0<=e.na&&12>e.na?\\\"AM\\\":\\\"PM\\\",\\\"%S\\\":e=>o(e.xa,2),\\\"%t\\\":()=>\\\"\\\\t\\\",\\\"%u\\\":e=>e.ga||7,\\\"%U\\\":e=>o(Math.floor((e.la+7-e.ga)/7),2),\\\"%V\\\":e=>{var t=Math.floor((e.la+7-(e.ga+6)%7)/7);if(2>=(e.ga+371-e.la-2)%7&&t++,t)53==t&&(4==(n=(e.ga+371-e.la)%7)||3==n&&X(e.ma)||(t=1));else{t=52;var n=(e.ga+7-e.la-1)%7;(4==n||5==n&&X(e.ma%400-1))&&t++}return o(t,2)},\\\"%w\\\":e=>e.ga,\\\"%W\\\":e=>o(Math.floor((e.la+7-(e.ga+6)%7)/7),2),\\\"%y\\\":e=>(e.ma+1900).toString().substring(2),\\\"%Y\\\":e=>e.ma+1900,\\\"%z\\\":e=>{var t=0<=(e=e.va);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":e=>e.ya,\\\"%%\\\":()=>\\\"%\\\"},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),s)n.includes(l)&&(n=n.replace(new RegExp(l,\\\"g\\\"),s[l](r)));return l=function(e){var t=Array(q(e)+1);return Y(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>t?0:(S.set(l,e>>>0),l.length-1)}var oe={a:function(e,t,n){throw new V(e>>>=0).ra(t>>>0,n>>>0),e},e:function(){return 0},H:function(){},x:function(){},z:function(){},k:function(){return 0},F:function(){},B:function(){},E:function(){},g:function(){},y:function(){},v:function(){},G:function(){},w:function(){},l:()=>!0,o:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),x[n>>2>>>0]=e.getUTCSeconds(),x[n+4>>2>>>0]=e.getUTCMinutes(),x[n+8>>2>>>0]=e.getUTCHours(),x[n+12>>2>>>0]=e.getUTCDate(),x[n+16>>2>>>0]=e.getUTCMonth(),x[n+20>>2>>>0]=e.getUTCFullYear()-1900,x[n+24>>2>>>0]=e.getUTCDay(),x[n+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},p:function(e,t,n){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,n>>>=0,e=new Date(1e3*e),x[n>>2>>>0]=e.getSeconds(),x[n+4>>2>>>0]=e.getMinutes(),x[n+8>>2>>>0]=e.getHours(),x[n+12>>2>>>0]=e.getDate(),x[n+16>>2>>>0]=e.getMonth(),x[n+20>>2>>>0]=e.getFullYear()-1900,x[n+24>>2>>>0]=e.getDay(),x[n+28>>2>>>0]=(X(e.getFullYear())?Q:J)[e.getMonth()]+e.getDate()-1|0,x[n+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var r=new Date(e.getFullYear(),0,1).getTimezoneOffset();x[n+32>>2>>>0]=0|(t!=r&&e.getTimezoneOffset()==Math.min(r,t))},q:function(e){e>>>=0;var t=new Date(x[e+20>>2>>>0]+1900,x[e+16>>2>>>0],x[e+12>>2>>>0],x[e+8>>2>>>0],x[e+4>>2>>>0],x[e>>2>>>0],0),n=x[e+32>>2>>>0],r=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),i=Math.min(o,a);return 0>n?x[e+32>>2>>>0]=Number(a!=o&&i==r):0<n!=(i==r)&&(a=Math.max(o,a),t.setTime(t.getTime()+6e4*((0<n?i:a)-r))),x[e+24>>2>>>0]=t.getDay(),x[e+28>>2>>>0]=(X(t.getFullYear())?Q:J)[t.getMonth()]+t.getDate()-1|0,x[e>>2>>>0]=t.getSeconds(),x[e+4>>2>>>0]=t.getMinutes(),x[e+8>>2>>>0]=t.getHours(),x[e+12>>2>>>0]=t.getDate(),x[e+16>>2>>>0]=t.getMonth(),x[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,ue((W=e,1<=+Math.abs(W)?0<W?+Math.floor(W/4294967296)>>>0:~~+Math.ceil((W-+(~~W>>>0))/4294967296)>>>0:0)),e>>>0},m:function(){return-52},n:function(){},t:function(e,t,n){function r(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}n>>>=0;var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var c=i.getTimezoneOffset();O[e>>>0>>2>>>0]=60*Math.max(a,c),x[t>>>0>>2>>>0]=Number(a!=c),e=r(o),t=r(i),e=Z(e),t=Z(t),c<a?(O[n>>2>>>0]=e,O[n+4>>2>>>0]=t):(O[n>>2>>>0]=t,O[n+4>>2>>>0]=e)},d:()=>{z(\\\"\\\")},h:function(){return Date.now()},u:function(){return 4294901760},b:()=>performance.now(),I:function(e,t,n){return t>>>=0,_.copyWithin(e>>>0>>>0,t>>>0,t+(n>>>0)>>>0)},s:function(e){e>>>=0;var t=_.length;if(4294901760<e)return!1;for(var n=1;4>=n;n*=2){var r=t*(1+.2/n);r=Math.min(r,e+100663296);var a=Math;r=Math.max(e,r);e:{a=a.min.call(a,4294901760,r+(65536-r%65536)%65536)-b.buffer.byteLength+65535>>>16;try{b.grow(a),I();var o=1;break e}catch(e){}o=void 0}if(o)return!0}return!1},C:function(e,t){e>>>=0,t>>>=0;var n=0;return ee().forEach((function(r,a){var o=t+n;for(a=O[e+4*a>>2>>>0]=o,o=0;o<r.length;++o)S[a++>>0>>>0]=r.charCodeAt(o);S[a>>0>>>0]=0,n+=r.length+1})),0},D:function(e,t){e>>>=0,t>>>=0;var n=ee();O[e>>2>>>0]=n.length;var r=0;return n.forEach((function(e){r+=e.length+1})),O[t>>2>>>0]=r,0},f:()=>52,j:function(){return 52},r:function(){return 70},i:function(e,t,n,r){t>>>=0,n>>>=0,r>>>=0;for(var a=0,o=0;o<n;o++){var i=O[t>>2>>>0],c=O[t+4>>2>>>0];t+=8;for(var u=0;u<c;u++){var s=_[i+u>>>0],l=te[e];0===s||10===s?((1===e?v:y)(H(l,0)),l.length=0):l.push(s)}a+=c}return O[r>>2>>>0]=a,0},A:ae,c:function(e,t,n,r){return ae(e>>>0,t>>>0,n>>>0,r>>>0)}};!function(){function e(e){if(e=e.exports,w=e=function(e){var t=e=>()=>e()>>>0,n=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.malloc=n(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=n(e.stackAlloc),e}(e),b=w.J,I(),E.unshift(w.K),M--,a.monitorRunDependencies&&a.monitorRunDependencies(M),0==M&&(null!==R&&(clearInterval(R),R=null),D)){var t=D;D=null,t()}return e}var t={a:oe};if(M++,a.monitorRunDependencies&&a.monitorRunDependencies(M),a.instantiateWasm)try{return a.instantiateWasm(t,e)}catch(e){y(\\\"Module.instantiateWasm callback failed with error: \\\"+e),r(e)}(function(e,t){var n=k;return m||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||B(n)||n.startsWith(\\\"file://\\\")||f||\\\"function\\\"!=typeof fetch?U(n,e,t):fetch(n,{credentials:\\\"same-origin\\\"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(t,(function(r){return y(\\\"wasm streaming compile failed: \\\"+r),y(\\\"falling back to ArrayBuffer instantiation\\\"),U(n,e,t)}))))})(t,(function(t){e(t.instance)})).catch(r)}(),a._OrtInit=(e,t)=>(a._OrtInit=w.L)(e,t),a._OrtGetLastError=(e,t)=>(a._OrtGetLastError=w.M)(e,t),a._OrtCreateSessionOptions=(e,t,n,r,o,i,c,u,s,l)=>(a._OrtCreateSessionOptions=w.N)(e,t,n,r,o,i,c,u,s,l),a._OrtAppendExecutionProvider=(e,t)=>(a._OrtAppendExecutionProvider=w.O)(e,t),a._OrtAddFreeDimensionOverride=(e,t,n)=>(a._OrtAddFreeDimensionOverride=w.P)(e,t,n),a._OrtAddSessionConfigEntry=(e,t,n)=>(a._OrtAddSessionConfigEntry=w.Q)(e,t,n),a._OrtReleaseSessionOptions=e=>(a._OrtReleaseSessionOptions=w.R)(e),a._OrtCreateSession=(e,t,n)=>(a._OrtCreateSession=w.S)(e,t,n),a._OrtReleaseSession=e=>(a._OrtReleaseSession=w.T)(e),a._OrtGetInputOutputCount=(e,t,n)=>(a._OrtGetInputOutputCount=w.U)(e,t,n),a._OrtGetInputName=(e,t)=>(a._OrtGetInputName=w.V)(e,t),a._OrtGetOutputName=(e,t)=>(a._OrtGetOutputName=w.W)(e,t),a._OrtFree=e=>(a._OrtFree=w.X)(e),a._OrtCreateTensor=(e,t,n,r,o)=>(a._OrtCreateTensor=w.Y)(e,t,n,r,o),a._OrtGetTensorData=(e,t,n,r,o)=>(a._OrtGetTensorData=w.Z)(e,t,n,r,o),a._OrtReleaseTensor=e=>(a._OrtReleaseTensor=w._)(e),a._OrtCreateRunOptions=(e,t,n,r)=>(a._OrtCreateRunOptions=w.$)(e,t,n,r),a._OrtAddRunConfigEntry=(e,t,n)=>(a._OrtAddRunConfigEntry=w.aa)(e,t,n),a._OrtReleaseRunOptions=e=>(a._OrtReleaseRunOptions=w.ba)(e),a._OrtRun=(e,t,n,r,o,i,c,u)=>(a._OrtRun=w.ca)(e,t,n,r,o,i,c,u),a._OrtEndProfiling=e=>(a._OrtEndProfiling=w.da)(e);var ie=a._malloc=e=>(ie=a._malloc=w.ea)(e);a._free=e=>(a._free=w.fa)(e);var ce,ue=e=>(ue=w.ha)(e),se=()=>(se=w.ia)(),le=e=>(le=w.ja)(e),pe=e=>(pe=w.ka)(e);function fe(){function e(){if(!ce&&(ce=!0,a.calledRun=!0,!T)){if(L(E),t(a),a.onRuntimeInitialized&&a.onRuntimeInitialized(),a.postRun)for(\\\"function\\\"==typeof a.postRun&&(a.postRun=[a.postRun]);a.postRun.length;){var e=a.postRun.shift();C.unshift(e)}L(C)}}if(!(0<M)){if(a.preRun)for(\\\"function\\\"==typeof a.preRun&&(a.preRun=[a.preRun]);a.preRun.length;)P();L(A),0<M||(a.setStatus?(a.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){a.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(a.stackAlloc=pe,a.stackSave=se,a.stackRestore=le,a.UTF8ToString=K,a.stringToUTF8=(e,t,n)=>Y(e,_,t,n),a.lengthBytesUTF8=q,D=function e(){ce||fe(),ce||(D=e)},a.preInit)for(\\\"function\\\"==typeof a.preInit&&(a.preInit=[a.preInit]);0<a.preInit.length;)a.preInit.pop()();return fe(),e.ready});e.exports=r},4154:function(e){\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},a=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(a){var r=require(\\\"worker_threads\\\"),t=r.parentPort;t.on(\\\"message\\\",(e=>onmessage({data:e})));var s=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:e=>(0,eval)(s.readFileSync(e,\\\"utf8\\\")+\\\"//# sourceURL=\\\"+e),postMessage:e=>t.postMessage(e),performance:global.performance||{now:Date.now}})}var o=!1,d=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");a?s.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\\\"load\\\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\\\"loaded\\\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=(...e)=>{postMessage({cmd:\\\"callHandler\\\",handler:a,args:e})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\\\"run\\\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\\\"unwind\\\"!=e)throw e}}else\\\"cancel\\\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===r.data.target||(\\\"checkMailbox\\\"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(d(\\\"worker.js received unknown command \\\"+r.data.cmd),d(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\\\n'},1384:function(){},3993:function(){},908:function(){},6953:function(){},9925:function(){},6449:function(){}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}!function(){\\\"use strict\\\";var e=n(1259),t=n(263);self.onmessage=function(n){switch(n.data.type){case\\\"init-wasm\\\":try{(0,t.initializeWebAssembly)(n.data.in).then((function(){return postMessage({type:\\\"init-wasm\\\"})}),(function(e){return postMessage({type:\\\"init-wasm\\\",err:e})}))}catch(e){postMessage({type:\\\"init-wasm\\\",err:e})}break;case\\\"init-ort\\\":try{(0,e.initRuntime)(n.data.in).then((function(){return postMessage({type:\\\"init-ort\\\"})}),(function(e){return postMessage({type:\\\"init-ort\\\",err:e})})),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{var r=n.data.in.model,a=(0,e.createSessionAllocate)(r);postMessage({type:\\\"create_allocate\\\",out:a})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{var o=n.data.in,i=(a=o.modeldata,o.options),c=(0,e.createSessionFinalize)(a,i);postMessage({type:\\\"create_finalize\\\",out:c})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{var u=n.data.in;r=u.model,i=u.options,c=(0,e.createSession)(r,i),postMessage({type:\\\"create\\\",out:c})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{var s=n.data.in;(0,e.releaseSession)(s),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{var l=n.data.in,p=l.sessionId,f=l.inputIndices,d=l.inputs,h=l.outputIndices;i=l.options,(0,e.run)(p,f,d,h,i).then((function(t){postMessage({type:\\\"run\\\",out:t},(0,e.extractTransferableBuffers)(t))}),(function(e){postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{s=n.data.in,(0,e.endProfiling)(s),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}}()}();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {number}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION_2019_3_18=5 IR_VERSION_2019_3_18 value\n     * @property {number} IR_VERSION_2019_9_19=6 IR_VERSION_2019_9_19 value\n     * @property {number} IR_VERSION_2020_5_8=7 IR_VERSION_2020_5_8 value\n     * @property {number} IR_VERSION_2021_7_30=8 IR_VERSION_2021_7_30 value\n     * @property {number} IR_VERSION=9 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION_2019_3_18\"] = 5;\n        values[valuesById[6] = \"IR_VERSION_2019_9_19\"] = 6;\n        values[valuesById[7] = \"IR_VERSION_2020_5_8\"] = 7;\n        values[valuesById[8] = \"IR_VERSION_2021_7_30\"] = 8;\n        values[valuesById[9] = \"IR_VERSION\"] = 9;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {onnx.ISparseTensorProto|null} [sparseTensor] AttributeProto sparseTensor\n         * @property {onnx.ITypeProto|null} [tp] AttributeProto tp\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseTensors] AttributeProto sparseTensors\n         * @property {Array.<onnx.ITypeProto>|null} [typeProtos] AttributeProto typeProtos\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            this.sparseTensors = [];\n            this.typeProtos = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto sparseTensor.\n         * @member {onnx.ISparseTensorProto|null|undefined} sparseTensor\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensor = null;\n\n        /**\n         * AttributeProto tp.\n         * @member {onnx.ITypeProto|null|undefined} tp\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tp = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * AttributeProto sparseTensors.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseTensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.sparseTensors = $util.emptyArray;\n\n        /**\n         * AttributeProto typeProtos.\n         * @member {Array.<onnx.ITypeProto>} typeProtos\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.typeProtos = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && Object.hasOwnProperty.call(message, \"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && Object.hasOwnProperty.call(message, \"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && Object.hasOwnProperty.call(message, \"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && Object.hasOwnProperty.call(message, \"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && Object.hasOwnProperty.call(message, \"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.tp != null && Object.hasOwnProperty.call(message, \"tp\"))\n                $root.onnx.TypeProto.encode(message.tp, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.typeProtos != null && message.typeProtos.length)\n                for (var i = 0; i < message.typeProtos.length; ++i)\n                    $root.onnx.TypeProto.encode(message.typeProtos[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && Object.hasOwnProperty.call(message, \"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            if (message.sparseTensor != null && Object.hasOwnProperty.call(message, \"sparseTensor\"))\n                $root.onnx.SparseTensorProto.encode(message.sparseTensor, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n            if (message.sparseTensors != null && message.sparseTensors.length)\n                for (var i = 0; i < message.sparseTensors.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseTensors[i], writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 21: {\n                        message.refAttrName = reader.string();\n                        break;\n                    }\n                case 13: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 20: {\n                        message.type = reader.int32();\n                        break;\n                    }\n                case 2: {\n                        message.f = reader.float();\n                        break;\n                    }\n                case 3: {\n                        message.i = reader.int64();\n                        break;\n                    }\n                case 4: {\n                        message.s = reader.bytes();\n                        break;\n                    }\n                case 5: {\n                        message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 22: {\n                        message.sparseTensor = $root.onnx.SparseTensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        message.tp = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.floats && message.floats.length))\n                            message.floats = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floats.push(reader.float());\n                        } else\n                            message.floats.push(reader.float());\n                        break;\n                    }\n                case 8: {\n                        if (!(message.ints && message.ints.length))\n                            message.ints = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.ints.push(reader.int64());\n                        } else\n                            message.ints.push(reader.int64());\n                        break;\n                    }\n                case 9: {\n                        if (!(message.strings && message.strings.length))\n                            message.strings = [];\n                        message.strings.push(reader.bytes());\n                        break;\n                    }\n                case 10: {\n                        if (!(message.tensors && message.tensors.length))\n                            message.tensors = [];\n                        message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 11: {\n                        if (!(message.graphs && message.graphs.length))\n                            message.graphs = [];\n                        message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 23: {\n                        if (!(message.sparseTensors && message.sparseTensors.length))\n                            message.sparseTensors = [];\n                        message.sparseTensors.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.typeProtos && message.typeProtos.length))\n                            message.typeProtos = [];\n                        message.typeProtos.push($root.onnx.TypeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 11:\n                case 13:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                case 12:\n                case 14:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\")) {\n                var error = $root.onnx.SparseTensorProto.verify(message.sparseTensor);\n                if (error)\n                    return \"sparseTensor.\" + error;\n            }\n            if (message.tp != null && message.hasOwnProperty(\"tp\")) {\n                var error = $root.onnx.TypeProto.verify(message.tp);\n                if (error)\n                    return \"tp.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            if (message.sparseTensors != null && message.hasOwnProperty(\"sparseTensors\")) {\n                if (!Array.isArray(message.sparseTensors))\n                    return \"sparseTensors: array expected\";\n                for (var i = 0; i < message.sparseTensors.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseTensors[i]);\n                    if (error)\n                        return \"sparseTensors.\" + error;\n                }\n            }\n            if (message.typeProtos != null && message.hasOwnProperty(\"typeProtos\")) {\n                if (!Array.isArray(message.typeProtos))\n                    return \"typeProtos: array expected\";\n                for (var i = 0; i < message.typeProtos.length; ++i) {\n                    var error = $root.onnx.TypeProto.verify(message.typeProtos[i]);\n                    if (error)\n                        return \"typeProtos.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            default:\n                if (typeof object.type === \"number\") {\n                    message.type = object.type;\n                    break;\n                }\n                break;\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"SPARSE_TENSOR\":\n            case 11:\n                message.type = 11;\n                break;\n            case \"TYPE_PROTO\":\n            case 13:\n                message.type = 13;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            case \"SPARSE_TENSORS\":\n            case 12:\n                message.type = 12;\n                break;\n            case \"TYPE_PROTOS\":\n            case 14:\n                message.type = 14;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length >= 0)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.sparseTensor != null) {\n                if (typeof object.sparseTensor !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.sparseTensor: object expected\");\n                message.sparseTensor = $root.onnx.SparseTensorProto.fromObject(object.sparseTensor);\n            }\n            if (object.tp != null) {\n                if (typeof object.tp !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.tp: object expected\");\n                message.tp = $root.onnx.TypeProto.fromObject(object.tp);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length >= 0)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            if (object.sparseTensors) {\n                if (!Array.isArray(object.sparseTensors))\n                    throw TypeError(\".onnx.AttributeProto.sparseTensors: array expected\");\n                message.sparseTensors = [];\n                for (var i = 0; i < object.sparseTensors.length; ++i) {\n                    if (typeof object.sparseTensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.sparseTensors: object expected\");\n                    message.sparseTensors[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseTensors[i]);\n                }\n            }\n            if (object.typeProtos) {\n                if (!Array.isArray(object.typeProtos))\n                    throw TypeError(\".onnx.AttributeProto.typeProtos: array expected\");\n                message.typeProtos = [];\n                for (var i = 0; i < object.typeProtos.length; ++i) {\n                    if (typeof object.typeProtos[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.typeProtos: object expected\");\n                    message.typeProtos[i] = $root.onnx.TypeProto.fromObject(object.typeProtos[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n                object.typeProtos = [];\n                object.sparseTensors = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.tp = null;\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n                object.sparseTensor = null;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.tp != null && message.hasOwnProperty(\"tp\"))\n                object.tp = $root.onnx.TypeProto.toObject(message.tp, options);\n            if (message.typeProtos && message.typeProtos.length) {\n                object.typeProtos = [];\n                for (var j = 0; j < message.typeProtos.length; ++j)\n                    object.typeProtos[j] = $root.onnx.TypeProto.toObject(message.typeProtos[j], options);\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] === undefined ? message.type : $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            if (message.sparseTensor != null && message.hasOwnProperty(\"sparseTensor\"))\n                object.sparseTensor = $root.onnx.SparseTensorProto.toObject(message.sparseTensor, options);\n            if (message.sparseTensors && message.sparseTensors.length) {\n                object.sparseTensors = [];\n                for (var j = 0; j < message.sparseTensors.length; ++j)\n                    object.sparseTensors[j] = $root.onnx.SparseTensorProto.toObject(message.sparseTensors[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for AttributeProto\n         * @function getTypeUrl\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        AttributeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.AttributeProto\";\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} SPARSE_TENSOR=11 SPARSE_TENSOR value\n         * @property {number} TYPE_PROTO=13 TYPE_PROTO value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         * @property {number} SPARSE_TENSORS=12 SPARSE_TENSORS value\n         * @property {number} TYPE_PROTOS=14 TYPE_PROTOS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[11] = \"SPARSE_TENSOR\"] = 11;\n            values[valuesById[13] = \"TYPE_PROTO\"] = 13;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            values[valuesById[12] = \"SPARSE_TENSORS\"] = 12;\n            values[valuesById[14] = \"TYPE_PROTOS\"] = 14;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ValueInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ValueInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ValueInfoProto\";\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && Object.hasOwnProperty.call(message, \"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 2: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 3: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.opType = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for NodeProto\n         * @function getTypeUrl\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        NodeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.NodeProto\";\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.TrainingInfoProto = (function() {\n\n        /**\n         * Properties of a TrainingInfoProto.\n         * @memberof onnx\n         * @interface ITrainingInfoProto\n         * @property {onnx.IGraphProto|null} [initialization] TrainingInfoProto initialization\n         * @property {onnx.IGraphProto|null} [algorithm] TrainingInfoProto algorithm\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [initializationBinding] TrainingInfoProto initializationBinding\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [updateBinding] TrainingInfoProto updateBinding\n         */\n\n        /**\n         * Constructs a new TrainingInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a TrainingInfoProto.\n         * @implements ITrainingInfoProto\n         * @constructor\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         */\n        function TrainingInfoProto(properties) {\n            this.initializationBinding = [];\n            this.updateBinding = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TrainingInfoProto initialization.\n         * @member {onnx.IGraphProto|null|undefined} initialization\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initialization = null;\n\n        /**\n         * TrainingInfoProto algorithm.\n         * @member {onnx.IGraphProto|null|undefined} algorithm\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.algorithm = null;\n\n        /**\n         * TrainingInfoProto initializationBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} initializationBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.initializationBinding = $util.emptyArray;\n\n        /**\n         * TrainingInfoProto updateBinding.\n         * @member {Array.<onnx.IStringStringEntryProto>} updateBinding\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         */\n        TrainingInfoProto.prototype.updateBinding = $util.emptyArray;\n\n        /**\n         * Creates a new TrainingInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto=} [properties] Properties to set\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto instance\n         */\n        TrainingInfoProto.create = function create(properties) {\n            return new TrainingInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.initialization != null && Object.hasOwnProperty.call(message, \"initialization\"))\n                $root.onnx.GraphProto.encode(message.initialization, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.algorithm != null && Object.hasOwnProperty.call(message, \"algorithm\"))\n                $root.onnx.GraphProto.encode(message.algorithm, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.initializationBinding != null && message.initializationBinding.length)\n                for (var i = 0; i < message.initializationBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.initializationBinding[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.updateBinding != null && message.updateBinding.length)\n                for (var i = 0; i < message.updateBinding.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.updateBinding[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TrainingInfoProto message, length delimited. Does not implicitly {@link onnx.TrainingInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.ITrainingInfoProto} message TrainingInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TrainingInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TrainingInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.initialization = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.algorithm = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.initializationBinding && message.initializationBinding.length))\n                            message.initializationBinding = [];\n                        message.initializationBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        if (!(message.updateBinding && message.updateBinding.length))\n                            message.updateBinding = [];\n                        message.updateBinding.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TrainingInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TrainingInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TrainingInfoProto message.\n         * @function verify\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TrainingInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\")) {\n                var error = $root.onnx.GraphProto.verify(message.initialization);\n                if (error)\n                    return \"initialization.\" + error;\n            }\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\")) {\n                var error = $root.onnx.GraphProto.verify(message.algorithm);\n                if (error)\n                    return \"algorithm.\" + error;\n            }\n            if (message.initializationBinding != null && message.hasOwnProperty(\"initializationBinding\")) {\n                if (!Array.isArray(message.initializationBinding))\n                    return \"initializationBinding: array expected\";\n                for (var i = 0; i < message.initializationBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.initializationBinding[i]);\n                    if (error)\n                        return \"initializationBinding.\" + error;\n                }\n            }\n            if (message.updateBinding != null && message.hasOwnProperty(\"updateBinding\")) {\n                if (!Array.isArray(message.updateBinding))\n                    return \"updateBinding: array expected\";\n                for (var i = 0; i < message.updateBinding.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.updateBinding[i]);\n                    if (error)\n                        return \"updateBinding.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TrainingInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TrainingInfoProto} TrainingInfoProto\n         */\n        TrainingInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TrainingInfoProto)\n                return object;\n            var message = new $root.onnx.TrainingInfoProto();\n            if (object.initialization != null) {\n                if (typeof object.initialization !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.initialization: object expected\");\n                message.initialization = $root.onnx.GraphProto.fromObject(object.initialization);\n            }\n            if (object.algorithm != null) {\n                if (typeof object.algorithm !== \"object\")\n                    throw TypeError(\".onnx.TrainingInfoProto.algorithm: object expected\");\n                message.algorithm = $root.onnx.GraphProto.fromObject(object.algorithm);\n            }\n            if (object.initializationBinding) {\n                if (!Array.isArray(object.initializationBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: array expected\");\n                message.initializationBinding = [];\n                for (var i = 0; i < object.initializationBinding.length; ++i) {\n                    if (typeof object.initializationBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.initializationBinding: object expected\");\n                    message.initializationBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.initializationBinding[i]);\n                }\n            }\n            if (object.updateBinding) {\n                if (!Array.isArray(object.updateBinding))\n                    throw TypeError(\".onnx.TrainingInfoProto.updateBinding: array expected\");\n                message.updateBinding = [];\n                for (var i = 0; i < object.updateBinding.length; ++i) {\n                    if (typeof object.updateBinding[i] !== \"object\")\n                        throw TypeError(\".onnx.TrainingInfoProto.updateBinding: object expected\");\n                    message.updateBinding[i] = $root.onnx.StringStringEntryProto.fromObject(object.updateBinding[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TrainingInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {onnx.TrainingInfoProto} message TrainingInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TrainingInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.initializationBinding = [];\n                object.updateBinding = [];\n            }\n            if (options.defaults) {\n                object.initialization = null;\n                object.algorithm = null;\n            }\n            if (message.initialization != null && message.hasOwnProperty(\"initialization\"))\n                object.initialization = $root.onnx.GraphProto.toObject(message.initialization, options);\n            if (message.algorithm != null && message.hasOwnProperty(\"algorithm\"))\n                object.algorithm = $root.onnx.GraphProto.toObject(message.algorithm, options);\n            if (message.initializationBinding && message.initializationBinding.length) {\n                object.initializationBinding = [];\n                for (var j = 0; j < message.initializationBinding.length; ++j)\n                    object.initializationBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.initializationBinding[j], options);\n            }\n            if (message.updateBinding && message.updateBinding.length) {\n                object.updateBinding = [];\n                for (var j = 0; j < message.updateBinding.length; ++j)\n                    object.updateBinding[j] = $root.onnx.StringStringEntryProto.toObject(message.updateBinding[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TrainingInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TrainingInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TrainingInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TrainingInfoProto\n         * @function getTypeUrl\n         * @memberof onnx.TrainingInfoProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TrainingInfoProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TrainingInfoProto\";\n        };\n\n        return TrainingInfoProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         * @property {Array.<onnx.ITrainingInfoProto>|null} [trainingInfo] ModelProto trainingInfo\n         * @property {Array.<onnx.IFunctionProto>|null} [functions] ModelProto functions\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            this.trainingInfo = [];\n            this.functions = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * ModelProto trainingInfo.\n         * @member {Array.<onnx.ITrainingInfoProto>} trainingInfo\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.trainingInfo = $util.emptyArray;\n\n        /**\n         * ModelProto functions.\n         * @member {Array.<onnx.IFunctionProto>} functions\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.functions = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && Object.hasOwnProperty.call(message, \"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && Object.hasOwnProperty.call(message, \"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && Object.hasOwnProperty.call(message, \"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && Object.hasOwnProperty.call(message, \"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && Object.hasOwnProperty.call(message, \"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.trainingInfo != null && message.trainingInfo.length)\n                for (var i = 0; i < message.trainingInfo.length; ++i)\n                    $root.onnx.TrainingInfoProto.encode(message.trainingInfo[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.functions != null && message.functions.length)\n                for (var i = 0; i < message.functions.length; ++i)\n                    $root.onnx.FunctionProto.encode(message.functions[i], writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.irVersion = reader.int64();\n                        break;\n                    }\n                case 8: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.producerName = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.producerVersion = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.modelVersion = reader.int64();\n                        break;\n                    }\n                case 6: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 7: {\n                        message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        if (!(message.metadataProps && message.metadataProps.length))\n                            message.metadataProps = [];\n                        message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 20: {\n                        if (!(message.trainingInfo && message.trainingInfo.length))\n                            message.trainingInfo = [];\n                        message.trainingInfo.push($root.onnx.TrainingInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 25: {\n                        if (!(message.functions && message.functions.length))\n                            message.functions = [];\n                        message.functions.push($root.onnx.FunctionProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            if (message.trainingInfo != null && message.hasOwnProperty(\"trainingInfo\")) {\n                if (!Array.isArray(message.trainingInfo))\n                    return \"trainingInfo: array expected\";\n                for (var i = 0; i < message.trainingInfo.length; ++i) {\n                    var error = $root.onnx.TrainingInfoProto.verify(message.trainingInfo[i]);\n                    if (error)\n                        return \"trainingInfo.\" + error;\n                }\n            }\n            if (message.functions != null && message.hasOwnProperty(\"functions\")) {\n                if (!Array.isArray(message.functions))\n                    return \"functions: array expected\";\n                for (var i = 0; i < message.functions.length; ++i) {\n                    var error = $root.onnx.FunctionProto.verify(message.functions[i]);\n                    if (error)\n                        return \"functions.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            if (object.trainingInfo) {\n                if (!Array.isArray(object.trainingInfo))\n                    throw TypeError(\".onnx.ModelProto.trainingInfo: array expected\");\n                message.trainingInfo = [];\n                for (var i = 0; i < object.trainingInfo.length; ++i) {\n                    if (typeof object.trainingInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.trainingInfo: object expected\");\n                    message.trainingInfo[i] = $root.onnx.TrainingInfoProto.fromObject(object.trainingInfo[i]);\n                }\n            }\n            if (object.functions) {\n                if (!Array.isArray(object.functions))\n                    throw TypeError(\".onnx.ModelProto.functions: array expected\");\n                message.functions = [];\n                for (var i = 0; i < object.functions.length; ++i) {\n                    if (typeof object.functions[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.functions: object expected\");\n                    message.functions[i] = $root.onnx.FunctionProto.fromObject(object.functions[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n                object.trainingInfo = [];\n                object.functions = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            if (message.trainingInfo && message.trainingInfo.length) {\n                object.trainingInfo = [];\n                for (var j = 0; j < message.trainingInfo.length; ++j)\n                    object.trainingInfo[j] = $root.onnx.TrainingInfoProto.toObject(message.trainingInfo[j], options);\n            }\n            if (message.functions && message.functions.length) {\n                object.functions = [];\n                for (var j = 0; j < message.functions.length; ++j)\n                    object.functions[j] = $root.onnx.FunctionProto.toObject(message.functions[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ModelProto\n         * @function getTypeUrl\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ModelProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.ModelProto\";\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && Object.hasOwnProperty.call(message, \"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.key = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.value = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for StringStringEntryProto\n         * @function getTypeUrl\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        StringStringEntryProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.StringStringEntryProto\";\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && Object.hasOwnProperty.call(message, \"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorName = reader.string();\n                        break;\n                    }\n                case 2: {\n                        if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                            message.quantParameterTensorNames = [];\n                        message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorAnnotation\n         * @function getTypeUrl\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorAnnotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorAnnotation\";\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {Array.<onnx.ISparseTensorProto>|null} [sparseInitializer] GraphProto sparseInitializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.sparseInitializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto sparseInitializer.\n         * @member {Array.<onnx.ISparseTensorProto>} sparseInitializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.sparseInitializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.sparseInitializer != null && message.sparseInitializer.length)\n                for (var i = 0; i < message.sparseInitializer.length; ++i)\n                    $root.onnx.SparseTensorProto.encode(message.sparseInitializer[i], writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.initializer && message.initializer.length))\n                            message.initializer = [];\n                        message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 15: {\n                        if (!(message.sparseInitializer && message.sparseInitializer.length))\n                            message.sparseInitializer = [];\n                        message.sparseInitializer.push($root.onnx.SparseTensorProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 11: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 12: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 13: {\n                        if (!(message.valueInfo && message.valueInfo.length))\n                            message.valueInfo = [];\n                        message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                            message.quantizationAnnotation = [];\n                        message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.sparseInitializer != null && message.hasOwnProperty(\"sparseInitializer\")) {\n                if (!Array.isArray(message.sparseInitializer))\n                    return \"sparseInitializer: array expected\";\n                for (var i = 0; i < message.sparseInitializer.length; ++i) {\n                    var error = $root.onnx.SparseTensorProto.verify(message.sparseInitializer[i]);\n                    if (error)\n                        return \"sparseInitializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.sparseInitializer) {\n                if (!Array.isArray(object.sparseInitializer))\n                    throw TypeError(\".onnx.GraphProto.sparseInitializer: array expected\");\n                message.sparseInitializer = [];\n                for (var i = 0; i < object.sparseInitializer.length; ++i) {\n                    if (typeof object.sparseInitializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.sparseInitializer: object expected\");\n                    message.sparseInitializer[i] = $root.onnx.SparseTensorProto.fromObject(object.sparseInitializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n                object.sparseInitializer = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            if (message.sparseInitializer && message.sparseInitializer.length) {\n                object.sparseInitializer = [];\n                for (var j = 0; j < message.sparseInitializer.length; ++j)\n                    object.sparseInitializer[j] = $root.onnx.SparseTensorProto.toObject(message.sparseInitializer[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for GraphProto\n         * @function getTypeUrl\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        GraphProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.GraphProto\";\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && Object.hasOwnProperty.call(message, \"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && Object.hasOwnProperty.call(message, \"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && Object.hasOwnProperty.call(message, \"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && Object.hasOwnProperty.call(message, \"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                case 2: {\n                        message.dataType = reader.int32();\n                        break;\n                    }\n                case 3: {\n                        message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        if (!(message.floatData && message.floatData.length))\n                            message.floatData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.floatData.push(reader.float());\n                        } else\n                            message.floatData.push(reader.float());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.int32Data && message.int32Data.length))\n                            message.int32Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int32Data.push(reader.int32());\n                        } else\n                            message.int32Data.push(reader.int32());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.stringData && message.stringData.length))\n                            message.stringData = [];\n                        message.stringData.push(reader.bytes());\n                        break;\n                    }\n                case 7: {\n                        if (!(message.int64Data && message.int64Data.length))\n                            message.int64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.int64Data.push(reader.int64());\n                        } else\n                            message.int64Data.push(reader.int64());\n                        break;\n                    }\n                case 8: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 12: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        message.rawData = reader.bytes();\n                        break;\n                    }\n                case 13: {\n                        if (!(message.externalData && message.externalData.length))\n                            message.externalData = [];\n                        message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 14: {\n                        message.dataLocation = reader.int32();\n                        break;\n                    }\n                case 10: {\n                        if (!(message.doubleData && message.doubleData.length))\n                            message.doubleData = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.doubleData.push(reader.double());\n                        } else\n                            message.doubleData.push(reader.double());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.uint64Data && message.uint64Data.length))\n                            message.uint64Data = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.uint64Data.push(reader.uint64());\n                        } else\n                            message.uint64Data.push(reader.uint64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length >= 0)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length >= 0)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            default:\n                if (typeof object.dataLocation === \"number\") {\n                    message.dataLocation = object.dataLocation;\n                    break;\n                }\n                break;\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] === undefined ? message.dataLocation : $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorProto\";\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {number}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         * @property {number} FLOAT8E4M3FN=17 FLOAT8E4M3FN value\n         * @property {number} FLOAT8E4M3FNUZ=18 FLOAT8E4M3FNUZ value\n         * @property {number} FLOAT8E5M2=19 FLOAT8E5M2 value\n         * @property {number} FLOAT8E5M2FNUZ=20 FLOAT8E5M2FNUZ value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            values[valuesById[17] = \"FLOAT8E4M3FN\"] = 17;\n            values[valuesById[18] = \"FLOAT8E4M3FNUZ\"] = 18;\n            values[valuesById[19] = \"FLOAT8E5M2\"] = 19;\n            values[valuesById[20] = \"FLOAT8E5M2FNUZ\"] = 20;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && Object.hasOwnProperty.call(message, \"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && Object.hasOwnProperty.call(message, \"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.begin = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.end = reader.int64();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Segment\n             * @function getTypeUrl\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Segment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorProto.Segment\";\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {number}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.SparseTensorProto = (function() {\n\n        /**\n         * Properties of a SparseTensorProto.\n         * @memberof onnx\n         * @interface ISparseTensorProto\n         * @property {onnx.ITensorProto|null} [values] SparseTensorProto values\n         * @property {onnx.ITensorProto|null} [indices] SparseTensorProto indices\n         * @property {Array.<number|Long>|null} [dims] SparseTensorProto dims\n         */\n\n        /**\n         * Constructs a new SparseTensorProto.\n         * @memberof onnx\n         * @classdesc Represents a SparseTensorProto.\n         * @implements ISparseTensorProto\n         * @constructor\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         */\n        function SparseTensorProto(properties) {\n            this.dims = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * SparseTensorProto values.\n         * @member {onnx.ITensorProto|null|undefined} values\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.values = null;\n\n        /**\n         * SparseTensorProto indices.\n         * @member {onnx.ITensorProto|null|undefined} indices\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.indices = null;\n\n        /**\n         * SparseTensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         */\n        SparseTensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * Creates a new SparseTensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto=} [properties] Properties to set\n         * @returns {onnx.SparseTensorProto} SparseTensorProto instance\n         */\n        SparseTensorProto.create = function create(properties) {\n            return new SparseTensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.values != null && Object.hasOwnProperty.call(message, \"values\"))\n                $root.onnx.TensorProto.encode(message.values, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.indices != null && Object.hasOwnProperty.call(message, \"indices\"))\n                $root.onnx.TensorProto.encode(message.indices, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            return writer;\n        };\n\n        /**\n         * Encodes the specified SparseTensorProto message, length delimited. Does not implicitly {@link onnx.SparseTensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.ISparseTensorProto} message SparseTensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        SparseTensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.SparseTensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.values = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.indices = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.dims && message.dims.length))\n                            message.dims = [];\n                        if ((tag & 7) === 2) {\n                            var end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.dims.push(reader.int64());\n                        } else\n                            message.dims.push(reader.int64());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a SparseTensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        SparseTensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a SparseTensorProto message.\n         * @function verify\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        SparseTensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.values != null && message.hasOwnProperty(\"values\")) {\n                var error = $root.onnx.TensorProto.verify(message.values);\n                if (error)\n                    return \"values.\" + error;\n            }\n            if (message.indices != null && message.hasOwnProperty(\"indices\")) {\n                var error = $root.onnx.TensorProto.verify(message.indices);\n                if (error)\n                    return \"indices.\" + error;\n            }\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a SparseTensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.SparseTensorProto} SparseTensorProto\n         */\n        SparseTensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.SparseTensorProto)\n                return object;\n            var message = new $root.onnx.SparseTensorProto();\n            if (object.values != null) {\n                if (typeof object.values !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.values: object expected\");\n                message.values = $root.onnx.TensorProto.fromObject(object.values);\n            }\n            if (object.indices != null) {\n                if (typeof object.indices !== \"object\")\n                    throw TypeError(\".onnx.SparseTensorProto.indices: object expected\");\n                message.indices = $root.onnx.TensorProto.fromObject(object.indices);\n            }\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.SparseTensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a SparseTensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {onnx.SparseTensorProto} message SparseTensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        SparseTensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dims = [];\n            if (options.defaults) {\n                object.values = null;\n                object.indices = null;\n            }\n            if (message.values != null && message.hasOwnProperty(\"values\"))\n                object.values = $root.onnx.TensorProto.toObject(message.values, options);\n            if (message.indices != null && message.hasOwnProperty(\"indices\"))\n                object.indices = $root.onnx.TensorProto.toObject(message.indices, options);\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this SparseTensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.SparseTensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        SparseTensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for SparseTensorProto\n         * @function getTypeUrl\n         * @memberof onnx.SparseTensorProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        SparseTensorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.SparseTensorProto\";\n        };\n\n        return SparseTensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.dim && message.dim.length))\n                            message.dim = [];\n                        message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TensorShapeProto\n         * @function getTypeUrl\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TensorShapeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TensorShapeProto\";\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long|null|undefined} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = null;\n\n            /**\n             * Dimension dimParam.\n             * @member {string|null|undefined} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = null;\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && Object.hasOwnProperty.call(message, \"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && Object.hasOwnProperty.call(message, \"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.dimValue = reader.int64();\n                            break;\n                        }\n                    case 2: {\n                            message.dimParam = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.denotation = reader.string();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Dimension\n             * @function getTypeUrl\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Dimension.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TensorShapeProto.Dimension\";\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {onnx.TypeProto.ISequence|null} [sequenceType] TypeProto sequenceType\n         * @property {onnx.TypeProto.IMap|null} [mapType] TypeProto mapType\n         * @property {onnx.TypeProto.IOptional|null} [optionalType] TypeProto optionalType\n         * @property {onnx.TypeProto.ISparseTensor|null} [sparseTensorType] TypeProto sparseTensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto sequenceType.\n         * @member {onnx.TypeProto.ISequence|null|undefined} sequenceType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sequenceType = null;\n\n        /**\n         * TypeProto mapType.\n         * @member {onnx.TypeProto.IMap|null|undefined} mapType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.mapType = null;\n\n        /**\n         * TypeProto optionalType.\n         * @member {onnx.TypeProto.IOptional|null|undefined} optionalType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.optionalType = null;\n\n        /**\n         * TypeProto sparseTensorType.\n         * @member {onnx.TypeProto.ISparseTensor|null|undefined} sparseTensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.sparseTensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|\"sequenceType\"|\"mapType\"|\"optionalType\"|\"sparseTensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\", \"sequenceType\", \"mapType\", \"optionalType\", \"sparseTensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && Object.hasOwnProperty.call(message, \"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.sequenceType != null && Object.hasOwnProperty.call(message, \"sequenceType\"))\n                $root.onnx.TypeProto.Sequence.encode(message.sequenceType, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.mapType != null && Object.hasOwnProperty.call(message, \"mapType\"))\n                $root.onnx.TypeProto.Map.encode(message.mapType, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.denotation != null && Object.hasOwnProperty.call(message, \"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            if (message.sparseTensorType != null && Object.hasOwnProperty.call(message, \"sparseTensorType\"))\n                $root.onnx.TypeProto.SparseTensor.encode(message.sparseTensorType, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.optionalType != null && Object.hasOwnProperty.call(message, \"optionalType\"))\n                $root.onnx.TypeProto.Optional.encode(message.optionalType, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.sequenceType = $root.onnx.TypeProto.Sequence.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.mapType = $root.onnx.TypeProto.Map.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 9: {\n                        message.optionalType = $root.onnx.TypeProto.Optional.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 8: {\n                        message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.denotation = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Sequence.verify(message.sequenceType);\n                    if (error)\n                        return \"sequenceType.\" + error;\n                }\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Map.verify(message.mapType);\n                    if (error)\n                        return \"mapType.\" + error;\n                }\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Optional.verify(message.optionalType);\n                    if (error)\n                        return \"optionalType.\" + error;\n                }\n            }\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                if (properties.value === 1)\n                    return \"value: multiple values\";\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.SparseTensor.verify(message.sparseTensorType);\n                    if (error)\n                        return \"sparseTensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.sequenceType != null) {\n                if (typeof object.sequenceType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sequenceType: object expected\");\n                message.sequenceType = $root.onnx.TypeProto.Sequence.fromObject(object.sequenceType);\n            }\n            if (object.mapType != null) {\n                if (typeof object.mapType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.mapType: object expected\");\n                message.mapType = $root.onnx.TypeProto.Map.fromObject(object.mapType);\n            }\n            if (object.optionalType != null) {\n                if (typeof object.optionalType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.optionalType: object expected\");\n                message.optionalType = $root.onnx.TypeProto.Optional.fromObject(object.optionalType);\n            }\n            if (object.sparseTensorType != null) {\n                if (typeof object.sparseTensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.sparseTensorType: object expected\");\n                message.sparseTensorType = $root.onnx.TypeProto.SparseTensor.fromObject(object.sparseTensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.sequenceType != null && message.hasOwnProperty(\"sequenceType\")) {\n                object.sequenceType = $root.onnx.TypeProto.Sequence.toObject(message.sequenceType, options);\n                if (options.oneofs)\n                    object.value = \"sequenceType\";\n            }\n            if (message.mapType != null && message.hasOwnProperty(\"mapType\")) {\n                object.mapType = $root.onnx.TypeProto.Map.toObject(message.mapType, options);\n                if (options.oneofs)\n                    object.value = \"mapType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            if (message.sparseTensorType != null && message.hasOwnProperty(\"sparseTensorType\")) {\n                object.sparseTensorType = $root.onnx.TypeProto.SparseTensor.toObject(message.sparseTensorType, options);\n                if (options.oneofs)\n                    object.value = \"sparseTensorType\";\n            }\n            if (message.optionalType != null && message.hasOwnProperty(\"optionalType\")) {\n                object.optionalType = $root.onnx.TypeProto.Optional.toObject(message.optionalType, options);\n                if (options.oneofs)\n                    object.value = \"optionalType\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for TypeProto\n         * @function getTypeUrl\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        TypeProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.TypeProto\";\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Tensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Tensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Tensor\";\n            };\n\n            return Tensor;\n        })();\n\n        TypeProto.Sequence = (function() {\n\n            /**\n             * Properties of a Sequence.\n             * @memberof onnx.TypeProto\n             * @interface ISequence\n             * @property {onnx.ITypeProto|null} [elemType] Sequence elemType\n             */\n\n            /**\n             * Constructs a new Sequence.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Sequence.\n             * @implements ISequence\n             * @constructor\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             */\n            function Sequence(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Sequence elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             */\n            Sequence.prototype.elemType = null;\n\n            /**\n             * Creates a new Sequence instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Sequence} Sequence instance\n             */\n            Sequence.create = function create(properties) {\n                return new Sequence(properties);\n            };\n\n            /**\n             * Encodes the specified Sequence message. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Sequence message, length delimited. Does not implicitly {@link onnx.TypeProto.Sequence.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.ISequence} message Sequence message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Sequence.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Sequence();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Sequence message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Sequence.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Sequence message.\n             * @function verify\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Sequence.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Sequence message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Sequence} Sequence\n             */\n            Sequence.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Sequence)\n                    return object;\n                var message = new $root.onnx.TypeProto.Sequence();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Sequence.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Sequence message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {onnx.TypeProto.Sequence} message Sequence\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Sequence.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Sequence to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Sequence\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Sequence.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Sequence\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Sequence\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Sequence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Sequence\";\n            };\n\n            return Sequence;\n        })();\n\n        TypeProto.Map = (function() {\n\n            /**\n             * Properties of a Map.\n             * @memberof onnx.TypeProto\n             * @interface IMap\n             * @property {number|null} [keyType] Map keyType\n             * @property {onnx.ITypeProto|null} [valueType] Map valueType\n             */\n\n            /**\n             * Constructs a new Map.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Map.\n             * @implements IMap\n             * @constructor\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             */\n            function Map(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Map keyType.\n             * @member {number} keyType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.keyType = 0;\n\n            /**\n             * Map valueType.\n             * @member {onnx.ITypeProto|null|undefined} valueType\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             */\n            Map.prototype.valueType = null;\n\n            /**\n             * Creates a new Map instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Map} Map instance\n             */\n            Map.create = function create(properties) {\n                return new Map(properties);\n            };\n\n            /**\n             * Encodes the specified Map message. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.keyType != null && Object.hasOwnProperty.call(message, \"keyType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.keyType);\n                if (message.valueType != null && Object.hasOwnProperty.call(message, \"valueType\"))\n                    $root.onnx.TypeProto.encode(message.valueType, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Map message, length delimited. Does not implicitly {@link onnx.TypeProto.Map.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.IMap} message Map message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Map.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Map();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.keyType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.valueType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Map message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Map} Map\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Map.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Map message.\n             * @function verify\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Map.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    if (!$util.isInteger(message.keyType))\n                        return \"keyType: integer expected\";\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.valueType);\n                    if (error)\n                        return \"valueType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Map message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Map} Map\n             */\n            Map.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Map)\n                    return object;\n                var message = new $root.onnx.TypeProto.Map();\n                if (object.keyType != null)\n                    message.keyType = object.keyType | 0;\n                if (object.valueType != null) {\n                    if (typeof object.valueType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Map.valueType: object expected\");\n                    message.valueType = $root.onnx.TypeProto.fromObject(object.valueType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Map message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {onnx.TypeProto.Map} message Map\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Map.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.keyType = 0;\n                    object.valueType = null;\n                }\n                if (message.keyType != null && message.hasOwnProperty(\"keyType\"))\n                    object.keyType = message.keyType;\n                if (message.valueType != null && message.hasOwnProperty(\"valueType\"))\n                    object.valueType = $root.onnx.TypeProto.toObject(message.valueType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Map to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Map\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Map.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Map\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Map\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Map.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Map\";\n            };\n\n            return Map;\n        })();\n\n        TypeProto.Optional = (function() {\n\n            /**\n             * Properties of an Optional.\n             * @memberof onnx.TypeProto\n             * @interface IOptional\n             * @property {onnx.ITypeProto|null} [elemType] Optional elemType\n             */\n\n            /**\n             * Constructs a new Optional.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents an Optional.\n             * @implements IOptional\n             * @constructor\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             */\n            function Optional(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Optional elemType.\n             * @member {onnx.ITypeProto|null|undefined} elemType\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             */\n            Optional.prototype.elemType = null;\n\n            /**\n             * Creates a new Optional instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Optional} Optional instance\n             */\n            Optional.create = function create(properties) {\n                return new Optional(properties);\n            };\n\n            /**\n             * Encodes the specified Optional message. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    $root.onnx.TypeProto.encode(message.elemType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Optional message, length delimited. Does not implicitly {@link onnx.TypeProto.Optional.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.IOptional} message Optional message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Optional.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Optional();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Optional message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Optional} Optional\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Optional.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Optional message.\n             * @function verify\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Optional.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\")) {\n                    var error = $root.onnx.TypeProto.verify(message.elemType);\n                    if (error)\n                        return \"elemType.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an Optional message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Optional} Optional\n             */\n            Optional.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Optional)\n                    return object;\n                var message = new $root.onnx.TypeProto.Optional();\n                if (object.elemType != null) {\n                    if (typeof object.elemType !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Optional.elemType: object expected\");\n                    message.elemType = $root.onnx.TypeProto.fromObject(object.elemType);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an Optional message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {onnx.TypeProto.Optional} message Optional\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Optional.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.elemType = null;\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = $root.onnx.TypeProto.toObject(message.elemType, options);\n                return object;\n            };\n\n            /**\n             * Converts this Optional to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Optional\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Optional.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Optional\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.Optional\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Optional.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.Optional\";\n            };\n\n            return Optional;\n        })();\n\n        TypeProto.SparseTensor = (function() {\n\n            /**\n             * Properties of a SparseTensor.\n             * @memberof onnx.TypeProto\n             * @interface ISparseTensor\n             * @property {number|null} [elemType] SparseTensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] SparseTensor shape\n             */\n\n            /**\n             * Constructs a new SparseTensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a SparseTensor.\n             * @implements ISparseTensor\n             * @constructor\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             */\n            function SparseTensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SparseTensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.elemType = 0;\n\n            /**\n             * SparseTensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             */\n            SparseTensor.prototype.shape = null;\n\n            /**\n             * Creates a new SparseTensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor instance\n             */\n            SparseTensor.create = function create(properties) {\n                return new SparseTensor(properties);\n            };\n\n            /**\n             * Encodes the specified SparseTensor message. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && Object.hasOwnProperty.call(message, \"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && Object.hasOwnProperty.call(message, \"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SparseTensor message, length delimited. Does not implicitly {@link onnx.TypeProto.SparseTensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.ISparseTensor} message SparseTensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SparseTensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.SparseTensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.elemType = reader.int32();\n                            break;\n                        }\n                    case 2: {\n                            message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SparseTensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SparseTensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SparseTensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SparseTensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SparseTensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.SparseTensor} SparseTensor\n             */\n            SparseTensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.SparseTensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.SparseTensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.SparseTensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SparseTensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {onnx.TypeProto.SparseTensor} message SparseTensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SparseTensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this SparseTensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.SparseTensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SparseTensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for SparseTensor\n             * @function getTypeUrl\n             * @memberof onnx.TypeProto.SparseTensor\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            SparseTensor.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/onnx.TypeProto.SparseTensor\";\n            };\n\n            return SparseTensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.version = reader.int64();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for OperatorSetIdProto\n         * @function getTypeUrl\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        OperatorSetIdProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.OperatorSetIdProto\";\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    /**\n     * OperatorStatus enum.\n     * @name onnx.OperatorStatus\n     * @enum {number}\n     * @property {number} EXPERIMENTAL=0 EXPERIMENTAL value\n     * @property {number} STABLE=1 STABLE value\n     */\n    onnx.OperatorStatus = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"EXPERIMENTAL\"] = 0;\n        values[valuesById[1] = \"STABLE\"] = 1;\n        return values;\n    })();\n\n    onnx.FunctionProto = (function() {\n\n        /**\n         * Properties of a FunctionProto.\n         * @memberof onnx\n         * @interface IFunctionProto\n         * @property {string|null} [name] FunctionProto name\n         * @property {Array.<string>|null} [input] FunctionProto input\n         * @property {Array.<string>|null} [output] FunctionProto output\n         * @property {Array.<string>|null} [attribute] FunctionProto attribute\n         * @property {Array.<onnx.IAttributeProto>|null} [attributeProto] FunctionProto attributeProto\n         * @property {Array.<onnx.INodeProto>|null} [node] FunctionProto node\n         * @property {string|null} [docString] FunctionProto docString\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] FunctionProto opsetImport\n         * @property {string|null} [domain] FunctionProto domain\n         */\n\n        /**\n         * Constructs a new FunctionProto.\n         * @memberof onnx\n         * @classdesc Represents a FunctionProto.\n         * @implements IFunctionProto\n         * @constructor\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         */\n        function FunctionProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            this.attributeProto = [];\n            this.node = [];\n            this.opsetImport = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * FunctionProto name.\n         * @member {string} name\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.name = \"\";\n\n        /**\n         * FunctionProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.input = $util.emptyArray;\n\n        /**\n         * FunctionProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.output = $util.emptyArray;\n\n        /**\n         * FunctionProto attribute.\n         * @member {Array.<string>} attribute\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * FunctionProto attributeProto.\n         * @member {Array.<onnx.IAttributeProto>} attributeProto\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.attributeProto = $util.emptyArray;\n\n        /**\n         * FunctionProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.node = $util.emptyArray;\n\n        /**\n         * FunctionProto docString.\n         * @member {string} docString\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.docString = \"\";\n\n        /**\n         * FunctionProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * FunctionProto domain.\n         * @member {string} domain\n         * @memberof onnx.FunctionProto\n         * @instance\n         */\n        FunctionProto.prototype.domain = \"\";\n\n        /**\n         * Creates a new FunctionProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto=} [properties] Properties to set\n         * @returns {onnx.FunctionProto} FunctionProto instance\n         */\n        FunctionProto.create = function create(properties) {\n            return new FunctionProto(properties);\n        };\n\n        /**\n         * Encodes the specified FunctionProto message. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 5, wireType 2 =*/42).string(message.output[i]);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).string(message.attribute[i]);\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.docString != null && Object.hasOwnProperty.call(message, \"docString\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.docString);\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.domain != null && Object.hasOwnProperty.call(message, \"domain\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.domain);\n            if (message.attributeProto != null && message.attributeProto.length)\n                for (var i = 0; i < message.attributeProto.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attributeProto[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified FunctionProto message, length delimited. Does not implicitly {@link onnx.FunctionProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.IFunctionProto} message FunctionProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        FunctionProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.FunctionProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        if (!(message.input && message.input.length))\n                            message.input = [];\n                        message.input.push(reader.string());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.output && message.output.length))\n                            message.output = [];\n                        message.output.push(reader.string());\n                        break;\n                    }\n                case 6: {\n                        if (!(message.attribute && message.attribute.length))\n                            message.attribute = [];\n                        message.attribute.push(reader.string());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.attributeProto && message.attributeProto.length))\n                            message.attributeProto = [];\n                        message.attributeProto.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 7: {\n                        if (!(message.node && message.node.length))\n                            message.node = [];\n                        message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 8: {\n                        message.docString = reader.string();\n                        break;\n                    }\n                case 9: {\n                        if (!(message.opsetImport && message.opsetImport.length))\n                            message.opsetImport = [];\n                        message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 10: {\n                        message.domain = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a FunctionProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.FunctionProto} FunctionProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        FunctionProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a FunctionProto message.\n         * @function verify\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        FunctionProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i)\n                    if (!$util.isString(message.attribute[i]))\n                        return \"attribute: string[] expected\";\n            }\n            if (message.attributeProto != null && message.hasOwnProperty(\"attributeProto\")) {\n                if (!Array.isArray(message.attributeProto))\n                    return \"attributeProto: array expected\";\n                for (var i = 0; i < message.attributeProto.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attributeProto[i]);\n                    if (error)\n                        return \"attributeProto.\" + error;\n                }\n            }\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a FunctionProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.FunctionProto} FunctionProto\n         */\n        FunctionProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.FunctionProto)\n                return object;\n            var message = new $root.onnx.FunctionProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.FunctionProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.FunctionProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.FunctionProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i)\n                    message.attribute[i] = String(object.attribute[i]);\n            }\n            if (object.attributeProto) {\n                if (!Array.isArray(object.attributeProto))\n                    throw TypeError(\".onnx.FunctionProto.attributeProto: array expected\");\n                message.attributeProto = [];\n                for (var i = 0; i < object.attributeProto.length; ++i) {\n                    if (typeof object.attributeProto[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.attributeProto: object expected\");\n                    message.attributeProto[i] = $root.onnx.AttributeProto.fromObject(object.attributeProto[i]);\n                }\n            }\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.FunctionProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.FunctionProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.FunctionProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a FunctionProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {onnx.FunctionProto} message FunctionProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        FunctionProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n                object.node = [];\n                object.opsetImport = [];\n                object.attributeProto = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = message.attribute[j];\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.attributeProto && message.attributeProto.length) {\n                object.attributeProto = [];\n                for (var j = 0; j < message.attributeProto.length; ++j)\n                    object.attributeProto[j] = $root.onnx.AttributeProto.toObject(message.attributeProto[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this FunctionProto to JSON.\n         * @function toJSON\n         * @memberof onnx.FunctionProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        FunctionProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for FunctionProto\n         * @function getTypeUrl\n         * @memberof onnx.FunctionProto\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        FunctionProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/onnx.FunctionProto\";\n        };\n\n        return FunctionProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return F.buffer!=k.buffer&&W(),k}function r(){return F.buffer!=k.buffer&&W(),x}function n(){return F.buffer!=k.buffer&&W(),Y}function a(){return F.buffer!=k.buffer&&W(),H}function o(){return F.buffer!=k.buffer&&W(),P}var i,u,s=e;s.ready=new Promise(((e,t)=>{i=e,u=t}));var f,c,l,d=Object.assign({},s),h=\"./this.program\",m=(e,t)=>{throw t},p=\"object\"==typeof window,g=\"function\"==typeof importScripts,b=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,v=s.ENVIRONMENT_IS_PTHREAD||!1,_=\"\";function y(e){return s.locateFile?s.locateFile(e,_):_+e}if(b){var w=require(\"fs\"),O=require(\"path\");let e;_=g?O.dirname(_)+\"/\":__dirname+\"/\",f=(e,t)=>(e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),w.readFileSync(e,t?void 0:\"utf8\")),l=e=>((e=f(e,!0)).buffer||(e=new Uint8Array(e)),e),c=(e,t,r,n=!0)=>{e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),w.readFile(e,n?void 0:\"utf8\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!s.thisProgram&&1<process.argv.length&&(h=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),m=(e,t)=>{throw process.exitCode=e,t},s.inspect=()=>\"[Emscripten Module object]\";try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(p||g)&&(g?_=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(_=document.currentScript.src),_scriptDir&&(_=_scriptDir),_=0!==_.indexOf(\"blob:\")?_.substr(0,_.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",b||(f=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.send(null),t.responseText},g&&(l=e=>{var t=new XMLHttpRequest;return t.open(\"GET\",e,!1),t.responseType=\"arraybuffer\",t.send(null),new Uint8Array(t.response)}),c=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\"GET\",e,!0),n.responseType=\"arraybuffer\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));b&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var M=console.log.bind(console),T=console.error.bind(console);b&&(M=(...e)=>w.writeSync(1,e.join(\" \")+\"\\n\"),T=(...e)=>w.writeSync(2,e.join(\" \")+\"\\n\"));var S,A=s.print||M,E=s.printErr||T;Object.assign(s,d),d=null,s.thisProgram&&(h=s.thisProgram),s.quit&&(m=s.quit),s.wasmBinary&&(S=s.wasmBinary);var R=s.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&ee(\"no native wasm support detected\");var F,D,C,I,k,x,Y,H,P,U=!1;function W(){var e=F.buffer;s.HEAP8=k=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=Y=new Int32Array(e),s.HEAPU8=x=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=H=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=P=new Float64Array(e)}var G=s.INITIAL_MEMORY||16777216;if(5242880<=G||ee(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \"+G+\"! (STACK_SIZE=5242880)\"),v)F=s.wasmMemory;else if(s.wasmMemory)F=s.wasmMemory;else if(!((F=new WebAssembly.Memory({initial:G/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw E(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),b&&E(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),Error(\"bad memory\");W(),G=F.buffer.byteLength;var N,L=[],j=[],z=[],B=0;function q(){return R||0<B}var J,K,X=0,$=null,V=null;function Z(){X++,s.monitorRunDependencies&&s.monitorRunDependencies(X)}function Q(){if(X--,s.monitorRunDependencies&&s.monitorRunDependencies(X),0==X&&(null!==$&&(clearInterval($),$=null),V)){var e=V;V=null,e()}}function ee(e){throw s.onAbort&&s.onAbort(e),E(e=\"Aborted(\"+e+\")\"),U=!0,I=1,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),u(e),e}function te(e){return e.startsWith(\"data:application/octet-stream;base64,\")}function re(e){if(e==J&&S)return new Uint8Array(S);if(l)return l(e);throw\"both async and sync fetching of the wasm failed\"}function ne(e,t,r){return function(e){if(!S&&(p||g)){if(\"function\"==typeof fetch&&!e.startsWith(\"file://\"))return fetch(e,{credentials:\"same-origin\"}).then((t=>{if(!t.ok)throw\"failed to load wasm binary file at '\"+e+\"'\";return t.arrayBuffer()})).catch((()=>re(e)));if(c)return new Promise(((t,r)=>{c(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>re(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{E(\"failed to asynchronously prepare wasm: \"+e),ee(e)}))}function ae(e){this.name=\"ExitStatus\",this.message=`Program terminated with exit(${e})`,this.status=e}function oe(e){e.terminate(),e.onmessage=()=>{}}function ie(e){(e=he.Fa[e])||ee(),he.fb(e)}function ue(e){var t=he.Za();if(!t)return 6;he.Ia.push(t),he.Fa[e.Ha]=t,t.Ha=e.Ha;var r={cmd:\"run\",start_routine:e.gb,arg:e.Ya,pthread_ptr:e.Ha};return b&&t.unref(),t.postMessage(r,e.mb),0}te(J=\"ort-wasm-threaded.wasm\")||(J=y(J));var se=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,fe=(e,t,r)=>{var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&se)return se.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,r):e.subarray(t,r));for(n=\"\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n},ce=(e,t)=>(e>>>=0)?fe(r(),e,t):\"\";function le(e){if(v)return qe(1,1,e);I=e,q()||(he.hb(),s.onExit&&s.onExit(e),U=!0),m(e,new ae(e))}var de=e=>{if(I=e,v)throw pe(e),\"unwind\";le(e)},he={La:[],Ia:[],Ta:[],Fa:{},Pa:function(){v?he.ab():he.$a()},$a:function(){L.unshift((()=>{Z(),he.bb((()=>Q()))}))},ab:function(){he.receiveObjectTransfer=he.eb,he.threadInitTLS=he.Sa,he.setExitStatus=he.Ra,R=!1},Ra:function(e){I=e},rb:[\"$terminateWorker\"],hb:function(){for(var e of he.Ia)oe(e);for(e of he.La)oe(e);he.La=[],he.Ia=[],he.Fa=[]},fb:function(e){var t=e.Ha;delete he.Fa[t],he.La.push(e),he.Ia.splice(he.Ia.indexOf(e),1),e.Ha=0,pt(t)},eb:function(){},Sa:function(){he.Ta.forEach((e=>e()))},cb:e=>new Promise((t=>{e.onmessage=r=>{var n=(r=r.data).cmd;if(r.targetThread&&r.targetThread!=ct()){var a=he.Fa[r.qb];a?a.postMessage(r,r.transferList):E('Internal error! Worker sent a message \"'+n+'\" to target pthread '+r.targetThread+\", but that thread no longer exists!\")}else\"checkMailbox\"===n?Ue():\"spawnThread\"===n?ue(r):\"cleanupThread\"===n?ie(r.thread):\"killThread\"===n?(r=r.thread,n=he.Fa[r],delete he.Fa[r],oe(n),pt(r),he.Ia.splice(he.Ia.indexOf(n),1),n.Ha=0):\"cancelThread\"===n?he.Fa[r.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===n?(e.loaded=!0,t(e)):\"alert\"===n?alert(\"Thread \"+r.threadId+\": \"+r.text):\"setimmediate\"===r.target?e.postMessage(r):\"callHandler\"===n?s[r.handler](...r.args):n&&E(\"worker sent an unknown command \"+n)},e.onerror=e=>{throw E(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},b&&(e.on(\"message\",(function(t){e.onmessage({data:t})})),e.on(\"error\",(function(t){e.onerror(t)})));var r,n=[];for(r of[\"onExit\",\"onAbort\",\"print\",\"printErr\"])s.hasOwnProperty(r)&&n.push(r);e.postMessage({cmd:\"load\",handlers:n,urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:F,wasmModule:C})})),bb:function(e){e()},Xa:function(){var e=y(\"ort-wasm-threaded.worker.js\");e=new Worker(e),he.La.push(e)},Za:function(){return 0==he.La.length&&(he.Xa(),he.cb(he.La[0])),he.La.pop()}};s.PThread=he;var me=e=>{for(;0<e.length;)e.shift()(s)};function pe(e){if(v)return qe(2,0,e);de(e)}s.establishStackSpace=function(){var e=ct(),t=n()[e+52>>2>>>0];e=n()[e+56>>2>>>0],_t(t,t-e),wt(t)};var ge=[];function be(e){this.Oa=e-24,this.Wa=function(e){a()[this.Oa+4>>2>>>0]=e},this.Va=function(e){a()[this.Oa+8>>2>>>0]=e},this.Pa=function(e,t){this.Ua(),this.Wa(e),this.Va(t)},this.Ua=function(){a()[this.Oa+16>>2>>>0]=0}}function ve(e,t,r,n){return v?qe(3,1,e,t,r,n):_e(e,t,r,n)}function _e(e,t,r,n){if(e>>>=0,t>>>=0,r>>>=0,n>>>=0,\"undefined\"==typeof SharedArrayBuffer)return E(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return v&&0===a.length?ve(e,t,r,n):(e={gb:r,Ha:e,Ya:n,mb:a},v?(e.ob=\"spawnThread\",postMessage(e,a),0):ue(e))}function ye(e,t,r){return v?qe(4,1,e,t,r):0}function we(e,t){if(v)return qe(5,1,e,t)}s.invokeEntryPoint=function(e,t){var r=ge[e];r||(e>=ge.length&&(ge.length=e+1),ge[e]=r=N.get(e)),e=r(t),q()?he.Ra(e):gt(e)};var Oe=e=>{for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t},Me=(e,t,r,n)=>{if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a},Te=(e,t,n)=>Me(e,r(),t,n);function Se(e,t){if(v)return qe(6,1,e,t)}function Ae(e,t,r){if(v)return qe(7,1,e,t,r)}function Ee(e,t,r){return v?qe(8,1,e,t,r):0}function Re(e,t){if(v)return qe(9,1,e,t)}function Fe(e,t,r){if(v)return qe(10,1,e,t,r)}function De(e,t,r,n){if(v)return qe(11,1,e,t,r,n)}function Ce(e,t,r,n){if(v)return qe(12,1,e,t,r,n)}function Ie(e,t,r,n){if(v)return qe(13,1,e,t,r,n)}function ke(e){if(v)return qe(14,1,e)}function xe(e,t){if(v)return qe(15,1,e,t)}function Ye(e,t,r){if(v)return qe(16,1,e,t,r)}var He=e=>{if(!U)try{if(e(),!q())try{v?gt(I):de(I)}catch(e){e instanceof ae||\"unwind\"==e||m(1,e)}}catch(e){e instanceof ae||\"unwind\"==e||m(1,e)}};function Pe(e){e>>>=0,\"function\"==typeof Atomics.nb&&(Atomics.nb(n(),e>>2,e).value.then(Ue),e+=128,Atomics.store(n(),e>>2,1))}function Ue(){var e=ct();e&&(Pe(e),He((()=>bt())))}s.__emscripten_thread_mailbox_await=Pe,s.checkMailbox=Ue;var We=e=>0==e%4&&(0!=e%100||0==e%400),Ge=[0,31,60,91,121,152,182,213,244,274,305,335],Ne=[0,31,59,90,120,151,181,212,243,273,304,334];function Le(e,t,r,n,a,o,i,u){return v?qe(17,1,e,t,r,n,a,o,i,u):-52}function je(e,t,r,n,a,o,i){if(v)return qe(18,1,e,t,r,n,a,o,i)}var ze=e=>{var t=Oe(e)+1,r=lt(t);return r&&Te(e,r,t),r},Be=e=>{var t=yt();return e=e(),wt(t),e};function qe(e,t){var r=arguments.length-2,n=arguments;return Be((()=>{for(var a=Ot(8*r),i=a>>3,u=0;u<r;u++){var s=n[2+u];o()[i+u>>>0]=s}return mt(e,r,a,t)}))}var Je,Ke=[],Xe={},$e=()=>{if(!Je){var e,t={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:h||\"./this.program\"};for(e in Xe)void 0===Xe[e]?delete t[e]:t[e]=Xe[e];var r=[];for(e in t)r.push(`${e}=${t[e]}`);Je=r}return Je};function Ve(e,r){if(v)return qe(19,1,e,r);e>>>=0,r>>>=0;var n=0;return $e().forEach((function(o,i){var u=r+n;for(i=a()[e+4*i>>2>>>0]=u,u=0;u<o.length;++u)t()[i++>>0>>>0]=o.charCodeAt(u);t()[i>>0>>>0]=0,n+=o.length+1})),0}function Ze(e,t){if(v)return qe(20,1,e,t);e>>>=0,t>>>=0;var r=$e();a()[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),a()[t>>2>>>0]=n,0}function Qe(e){return v?qe(21,1,e):52}function et(e,t,r,n){return v?qe(22,1,e,t,r,n):52}function tt(e,t,r,n,a){return v?qe(23,1,e,t,r,n,a):70}var rt=[null,[],[]];function nt(e,t,n,o){if(v)return qe(24,1,e,t,n,o);t>>>=0,n>>>=0,o>>>=0;for(var i=0,u=0;u<n;u++){var s=a()[t>>2>>>0],f=a()[t+4>>2>>>0];t+=8;for(var c=0;c<f;c++){var l=r()[s+c>>>0],d=rt[e];0===l||10===l?((1===e?A:E)(fe(d,0)),d.length=0):d.push(l)}i+=f}return a()[o>>2>>>0]=i,0}var at=[31,29,31,30,31,30,31,31,30,31,30,31],ot=[31,28,31,30,31,30,31,31,30,31,30,31],it=(e,r)=>{t().set(e,r>>>0)};function ut(e,t,r,a){function o(e,t,r){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<t;)e=r[0]+e;return e}function i(e,t){return o(e,t,\"0\")}function u(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function f(e){var t=e.Ja;for(e=new Date(new Date(e.Ka+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(We(e.getFullYear())?at:ot)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),r=s(r),0>=u(t,e)?0>=u(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}e>>>=0,t>>>=0,r>>>=0,a>>>=0;var c=n()[a+40>>2>>>0];for(var l in a={kb:n()[a>>2>>>0],jb:n()[a+4>>2>>>0],Ma:n()[a+8>>2>>>0],Qa:n()[a+12>>2>>>0],Na:n()[a+16>>2>>>0],Ka:n()[a+20>>2>>>0],Ga:n()[a+24>>2>>>0],Ja:n()[a+28>>2>>>0],sb:n()[a+32>>2>>>0],ib:n()[a+36>>2>>>0],lb:c?ce(c):\"\"},r=ce(r),c={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})r=r.replace(new RegExp(l,\"g\"),c[l]);var d=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),h=\"January February March April May June July August September October November December\".split(\" \");for(l in c={\"%a\":e=>d[e.Ga].substring(0,3),\"%A\":e=>d[e.Ga],\"%b\":e=>h[e.Na].substring(0,3),\"%B\":e=>h[e.Na],\"%C\":e=>i((e.Ka+1900)/100|0,2),\"%d\":e=>i(e.Qa,2),\"%e\":e=>o(e.Qa,2,\" \"),\"%g\":e=>f(e).toString().substring(2),\"%G\":e=>f(e),\"%H\":e=>i(e.Ma,2),\"%I\":e=>(0==(e=e.Ma)?e=12:12<e&&(e-=12),i(e,2)),\"%j\":e=>{for(var t=0,r=0;r<=e.Na-1;t+=(We(e.Ka+1900)?at:ot)[r++]);return i(e.Qa+t,3)},\"%m\":e=>i(e.Na+1,2),\"%M\":e=>i(e.jb,2),\"%n\":()=>\"\\n\",\"%p\":e=>0<=e.Ma&&12>e.Ma?\"AM\":\"PM\",\"%S\":e=>i(e.kb,2),\"%t\":()=>\"\\t\",\"%u\":e=>e.Ga||7,\"%U\":e=>i(Math.floor((e.Ja+7-e.Ga)/7),2),\"%V\":e=>{var t=Math.floor((e.Ja+7-(e.Ga+6)%7)/7);if(2>=(e.Ga+371-e.Ja-2)%7&&t++,t)53==t&&(4==(r=(e.Ga+371-e.Ja)%7)||3==r&&We(e.Ka)||(t=1));else{t=52;var r=(e.Ga+7-e.Ja-1)%7;(4==r||5==r&&We(e.Ka%400-1))&&t++}return i(t,2)},\"%w\":e=>e.Ga,\"%W\":e=>i(Math.floor((e.Ja+7-(e.Ga+6)%7)/7),2),\"%y\":e=>(e.Ka+1900).toString().substring(2),\"%Y\":e=>e.Ka+1900,\"%z\":e=>{var t=0<=(e=e.ib);return e=Math.abs(e)/60,(t?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":e=>e.lb,\"%%\":()=>\"%\"},r=r.replace(/%%/g,\"\\0\\0\"),c)r.includes(l)&&(r=r.replace(new RegExp(l,\"g\"),c[l](a)));return l=function(e){var t=Array(Oe(e)+1);return Me(e,t,0,t.length),t}(r=r.replace(/\\0\\0/g,\"%\")),l.length>t?0:(it(l,e),l.length-1)}he.Pa();var st=[null,le,pe,ve,ye,we,Se,Ae,Ee,Re,Fe,De,Ce,Ie,ke,xe,Ye,Le,je,Ve,Ze,Qe,et,tt,nt],ft={b:function(e,t,r){throw new be(e>>>=0).Pa(t>>>0,r>>>0),e},N:function(e){dt(e>>>0,!g,1,!p,131072,!1),he.Sa()},j:function(e){e>>>=0,v?postMessage({cmd:\"cleanupThread\",thread:e}):ie(e)},I:_e,h:ye,T:we,D:Se,F:Ae,U:Ee,R:Re,J:Fe,Q:De,n:Ce,E:Ie,B:ke,S:xe,C:Ye,q:()=>!0,z:function(e,t){(e>>>=0)==t>>>0?setTimeout((()=>Ue())):v?postMessage({targetThread:e,cmd:\"checkMailbox\"}):(e=he.Fa[e])&&e.postMessage({cmd:\"checkMailbox\"})},L:function(){return-1},M:Pe,p:function(e){b&&he.Fa[e>>>0].ref()},t:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),n()[r>>2>>>0]=e.getUTCSeconds(),n()[r+4>>2>>>0]=e.getUTCMinutes(),n()[r+8>>2>>>0]=e.getUTCHours(),n()[r+12>>2>>>0]=e.getUTCDate(),n()[r+16>>2>>>0]=e.getUTCMonth(),n()[r+20>>2>>>0]=e.getUTCFullYear()-1900,n()[r+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,n()[r+28>>2>>>0]=e},u:function(e,t,r){e=t+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*t:NaN,r>>>=0,e=new Date(1e3*e),n()[r>>2>>>0]=e.getSeconds(),n()[r+4>>2>>>0]=e.getMinutes(),n()[r+8>>2>>>0]=e.getHours(),n()[r+12>>2>>>0]=e.getDate(),n()[r+16>>2>>>0]=e.getMonth(),n()[r+20>>2>>>0]=e.getFullYear()-1900,n()[r+24>>2>>>0]=e.getDay(),t=(We(e.getFullYear())?Ge:Ne)[e.getMonth()]+e.getDate()-1|0,n()[r+28>>2>>>0]=t,n()[r+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var a=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=a&&e.getTimezoneOffset()==Math.min(a,t)),n()[r+32>>2>>>0]=e},v:function(e){e>>>=0;var t=new Date(n()[e+20>>2>>>0]+1900,n()[e+16>>2>>>0],n()[e+12>>2>>>0],n()[e+8>>2>>>0],n()[e+4>>2>>>0],n()[e>>2>>>0],0),r=n()[e+32>>2>>>0],a=t.getTimezoneOffset(),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),u=Math.min(i,o);return 0>r?n()[e+32>>2>>>0]=Number(o!=i&&u==a):0<r!=(u==a)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<r?u:o)-a))),n()[e+24>>2>>>0]=t.getDay(),r=(We(t.getFullYear())?Ge:Ne)[t.getMonth()]+t.getDate()-1|0,n()[e+28>>2>>>0]=r,n()[e>>2>>>0]=t.getSeconds(),n()[e+4>>2>>>0]=t.getMinutes(),n()[e+8>>2>>>0]=t.getHours(),n()[e+12>>2>>>0]=t.getDate(),n()[e+16>>2>>>0]=t.getMonth(),n()[e+20>>2>>>0]=t.getYear(),e=t.getTime()/1e3,vt((K=e,1<=+Math.abs(K)?0<K?+Math.floor(K/4294967296)>>>0:~~+Math.ceil((K-+(~~K>>>0))/4294967296)>>>0:0)),e>>>0},r:Le,s:je,y:function(e,t,r){function o(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}e>>>=0,t>>>=0,r>>>=0;var i=(new Date).getFullYear(),u=new Date(i,0,1),s=new Date(i,6,1);i=u.getTimezoneOffset();var f=s.getTimezoneOffset(),c=Math.max(i,f);a()[e>>2>>>0]=60*c,n()[t>>2>>>0]=Number(i!=f),e=o(u),t=o(s),e=ze(e),t=ze(t),f<i?(a()[r>>2>>>0]=e,a()[r+4>>2>>>0]=t):(a()[r>>2>>>0]=t,a()[r+4>>2>>>0]=e)},c:()=>{ee(\"\")},k:function(){},i:function(){return Date.now()},o:()=>{throw B+=1,\"unwind\"},A:function(){return 4294901760},e:()=>performance.timeOrigin+performance.now(),f:function(){return b?require(\"os\").cpus().length:navigator.hardwareConcurrency},K:function(e,t,r,n){for(he.pb=t>>>0,Ke.length=r,t=n>>>0>>3,n=0;n<r;n++)Ke[n]=o()[t+n>>>0];return st[e].apply(null,Ke)},x:function(e){e>>>=0;var t=r().length;if(e<=t||4294901760<e)return!1;for(var n=1;4>=n;n*=2){var a=t*(1+.2/n);a=Math.min(a,e+100663296);var o=Math;a=Math.max(e,a);e:{o=o.min.call(o,4294901760,a+(65536-a%65536)%65536)-F.buffer.byteLength+65535>>>16;try{F.grow(o),W();var i=1;break e}catch(e){}i=void 0}if(i)return!0}return!1},O:Ve,P:Ze,H:de,g:Qe,m:et,w:tt,l:nt,a:F||s.wasmMemory,G:ut,d:function(e,t,r,n){return ut(e>>>0,t>>>0,r>>>0,n>>>0)}};!function(){function e(e,t){return e=e.exports,D=e=function(e){var t=e=>()=>e()>>>0,r=e=>t=>e(t)>>>0;return(e=Object.assign({},e)).__errno_location=t(e.__errno_location),e.pthread_self=t(e.pthread_self),e.malloc=r(e.malloc),e.stackSave=t(e.stackSave),e.stackAlloc=r(e.stackAlloc),e}(e),he.Ta.push(D.sa),N=D.ta,j.unshift(D.V),C=t,Q(),e}var t={a:ft};if(Z(),s.instantiateWasm)try{return s.instantiateWasm(t,e)}catch(e){E(\"Module.instantiateWasm callback failed with error: \"+e),u(e)}(function(e,t){var r=J;return S||\"function\"!=typeof WebAssembly.instantiateStreaming||te(r)||r.startsWith(\"file://\")||b||\"function\"!=typeof fetch?ne(r,e,t):fetch(r,{credentials:\"same-origin\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return E(\"wasm streaming compile failed: \"+n),E(\"falling back to ArrayBuffer instantiation\"),ne(r,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(u)}(),s._OrtInit=(e,t)=>(s._OrtInit=D.W)(e,t),s._OrtGetLastError=(e,t)=>(s._OrtGetLastError=D.X)(e,t),s._OrtCreateSessionOptions=(e,t,r,n,a,o,i,u,f,c)=>(s._OrtCreateSessionOptions=D.Y)(e,t,r,n,a,o,i,u,f,c),s._OrtAppendExecutionProvider=(e,t)=>(s._OrtAppendExecutionProvider=D.Z)(e,t),s._OrtAddFreeDimensionOverride=(e,t,r)=>(s._OrtAddFreeDimensionOverride=D._)(e,t,r),s._OrtAddSessionConfigEntry=(e,t,r)=>(s._OrtAddSessionConfigEntry=D.$)(e,t,r),s._OrtReleaseSessionOptions=e=>(s._OrtReleaseSessionOptions=D.aa)(e),s._OrtCreateSession=(e,t,r)=>(s._OrtCreateSession=D.ba)(e,t,r),s._OrtReleaseSession=e=>(s._OrtReleaseSession=D.ca)(e),s._OrtGetInputOutputCount=(e,t,r)=>(s._OrtGetInputOutputCount=D.da)(e,t,r),s._OrtGetInputName=(e,t)=>(s._OrtGetInputName=D.ea)(e,t),s._OrtGetOutputName=(e,t)=>(s._OrtGetOutputName=D.fa)(e,t),s._OrtFree=e=>(s._OrtFree=D.ga)(e),s._OrtCreateTensor=(e,t,r,n,a)=>(s._OrtCreateTensor=D.ha)(e,t,r,n,a),s._OrtGetTensorData=(e,t,r,n,a)=>(s._OrtGetTensorData=D.ia)(e,t,r,n,a),s._OrtReleaseTensor=e=>(s._OrtReleaseTensor=D.ja)(e),s._OrtCreateRunOptions=(e,t,r,n)=>(s._OrtCreateRunOptions=D.ka)(e,t,r,n),s._OrtAddRunConfigEntry=(e,t,r)=>(s._OrtAddRunConfigEntry=D.la)(e,t,r),s._OrtReleaseRunOptions=e=>(s._OrtReleaseRunOptions=D.ma)(e),s._OrtRun=(e,t,r,n,a,o,i,u)=>(s._OrtRun=D.na)(e,t,r,n,a,o,i,u),s._OrtEndProfiling=e=>(s._OrtEndProfiling=D.oa)(e);var ct=s._pthread_self=()=>(ct=s._pthread_self=D.pa)(),lt=s._malloc=e=>(lt=s._malloc=D.qa)(e);s._free=e=>(s._free=D.ra)(e),s.__emscripten_tls_init=()=>(s.__emscripten_tls_init=D.sa)();var dt=s.__emscripten_thread_init=(e,t,r,n,a,o)=>(dt=s.__emscripten_thread_init=D.ua)(e,t,r,n,a,o);s.__emscripten_thread_crashed=()=>(s.__emscripten_thread_crashed=D.va)();var ht,mt=(e,t,r,n)=>(mt=D.wa)(e,t,r,n),pt=e=>(pt=D.xa)(e),gt=s.__emscripten_thread_exit=e=>(gt=s.__emscripten_thread_exit=D.ya)(e),bt=s.__emscripten_check_mailbox=()=>(bt=s.__emscripten_check_mailbox=D.za)(),vt=e=>(vt=D.Aa)(e),_t=(e,t)=>(_t=D.Ba)(e,t),yt=()=>(yt=D.Ca)(),wt=e=>(wt=D.Da)(e),Ot=e=>(Ot=D.Ea)(e);function Mt(){function e(){if(!ht&&(ht=!0,s.calledRun=!0,!U)&&(v||me(j),i(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!v)){if(s.postRun)for(\"function\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();z.unshift(e)}me(z)}}if(!(0<X))if(v)i(s),v||me(j),startWorker(s);else{if(s.preRun)for(\"function\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)L.unshift(s.preRun.shift());me(L),0<X||(s.setStatus?(s.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){s.setStatus(\"\")}),1),e()}),1)):e())}}if(s.keepRuntimeAlive=q,s.wasmMemory=F,s.stackAlloc=Ot,s.stackSave=yt,s.stackRestore=wt,s.UTF8ToString=ce,s.stringToUTF8=Te,s.lengthBytesUTF8=Oe,s.ExitStatus=ae,s.PThread=he,V=function e(){ht||Mt(),ht||(V=e)},s.preInit)for(\"function\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return Mt(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd&&define([],(()=>e));\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(moduleArg = {}) {\n\nvar e=moduleArg,h,m;e.ready=new Promise((a,b)=>{h=a;m=b});var q=Object.assign({},e),v=\"./this.program\",aa=\"object\"==typeof window,x=\"function\"==typeof importScripts,ba=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,y=\"\",A,B,C;\nif(ba){var fs=require(\"fs\"),D=require(\"path\");y=x?D.dirname(y)+\"/\":__dirname+\"/\";A=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):D.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};C=a=>{a=A(a,!0);a.buffer||(a=new Uint8Array(a));return a};B=(a,b,c,f=!0)=>{a=a.startsWith(\"file://\")?new URL(a):D.normalize(a);fs.readFile(a,f?void 0:\"utf8\",(g,k)=>{g?c(g):b(f?k.buffer:k)})};!e.thisProgram&&1<process.argv.length&&(v=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);e.inspect=()=>\"[Emscripten Module object]\"}else if(aa||\nx)x?y=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(y=document.currentScript.src),_scriptDir&&(y=_scriptDir),0!==y.indexOf(\"blob:\")?y=y.substr(0,y.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):y=\"\",A=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},x&&(C=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),B=(a,b,c)=>{var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\n\"arraybuffer\";f.onload=()=>{200==f.status||0==f.status&&f.response?b(f.response):c()};f.onerror=c;f.send(null)};var ca=e.print||console.log.bind(console),E=e.printErr||console.error.bind(console);Object.assign(e,q);q=null;e.thisProgram&&(v=e.thisProgram);var F;e.wasmBinary&&(F=e.wasmBinary);var noExitRuntime=e.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&G(\"no native wasm support detected\");var H,I,da=!1,J,K,L,M;\nfunction ea(){var a=H.buffer;e.HEAP8=J=new Int8Array(a);e.HEAP16=new Int16Array(a);e.HEAP32=L=new Int32Array(a);e.HEAPU8=K=new Uint8Array(a);e.HEAPU16=new Uint16Array(a);e.HEAPU32=M=new Uint32Array(a);e.HEAPF32=new Float32Array(a);e.HEAPF64=new Float64Array(a)}var fa=[],ha=[],ia=[];function ja(){var a=e.preRun.shift();fa.unshift(a)}var N=0,O=null,P=null;\nfunction G(a){if(e.onAbort)e.onAbort(a);a=\"Aborted(\"+a+\")\";E(a);da=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");m(a);throw a;}function ka(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var Q;Q=\"ort-wasm.wasm\";if(!ka(Q)){var la=Q;Q=e.locateFile?e.locateFile(la,y):y+la}function ma(a){if(a==Q&&F)return new Uint8Array(F);if(C)return C(a);throw\"both async and sync fetching of the wasm failed\";}\nfunction na(a){if(!F&&(aa||x)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>ma(a));if(B)return new Promise((b,c)=>{B(a,f=>b(new Uint8Array(f)),c)})}return Promise.resolve().then(()=>ma(a))}function oa(a,b,c){return na(a).then(f=>WebAssembly.instantiate(f,b)).then(f=>f).then(c,f=>{E(\"failed to asynchronously prepare wasm: \"+f);G(f)})}\nfunction pa(a,b){var c=Q;return F||\"function\"!=typeof WebAssembly.instantiateStreaming||ka(c)||c.startsWith(\"file://\")||ba||\"function\"!=typeof fetch?oa(c,a,b):fetch(c,{credentials:\"same-origin\"}).then(f=>WebAssembly.instantiateStreaming(f,a).then(b,function(g){E(\"wasm streaming compile failed: \"+g);E(\"falling back to ArrayBuffer instantiation\");return oa(c,a,b)}))}var R,S=a=>{for(;0<a.length;)a.shift()(e)};\nfunction qa(a){this.pa=a-24;this.ua=function(b){M[this.pa+4>>2>>>0]=b};this.ta=function(b){M[this.pa+8>>2>>>0]=b};this.ra=function(b,c){this.sa();this.ua(b);this.ta(c)};this.sa=function(){M[this.pa+16>>2>>>0]=0}}\nvar ra=0,sa=0,ta=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0,ua=(a,b,c)=>{b>>>=0;var f=b+c;for(c=b;a[c]&&!(c>=f);)++c;if(16<c-b&&a.buffer&&ta)return ta.decode(a.subarray(b,c));for(f=\"\";b<c;){var g=a[b++];if(g&128){var k=a[b++]&63;if(192==(g&224))f+=String.fromCharCode((g&31)<<6|k);else{var l=a[b++]&63;g=224==(g&240)?(g&15)<<12|k<<6|l:(g&7)<<18|k<<12|l<<6|a[b++]&63;65536>g?f+=String.fromCharCode(g):(g-=65536,f+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else f+=String.fromCharCode(g)}return f},\nT=(a,b)=>(a>>>=0)?ua(K,a,b):\"\",U=a=>{for(var b=0,c=0;c<a.length;++c){var f=a.charCodeAt(c);127>=f?b++:2047>=f?b+=2:55296<=f&&57343>=f?(b+=4,++c):b+=3}return b},V=(a,b,c,f)=>{c>>>=0;if(!(0<f))return 0;var g=c;f=c+f-1;for(var k=0;k<a.length;++k){var l=a.charCodeAt(k);if(55296<=l&&57343>=l){var r=a.charCodeAt(++k);l=65536+((l&1023)<<10)|r&1023}if(127>=l){if(c>=f)break;b[c++>>>0]=l}else{if(2047>=l){if(c+1>=f)break;b[c++>>>0]=192|l>>6}else{if(65535>=l){if(c+2>=f)break;b[c++>>>0]=224|l>>12}else{if(c+3>=\nf)break;b[c++>>>0]=240|l>>18;b[c++>>>0]=128|l>>12&63}b[c++>>>0]=128|l>>6&63}b[c++>>>0]=128|l&63}}b[c>>>0]=0;return c-g},W=a=>0===a%4&&(0!==a%100||0===a%400),va=[0,31,60,91,121,152,182,213,244,274,305,335],wa=[0,31,59,90,120,151,181,212,243,273,304,334],Ba=a=>{var b=U(a)+1,c=Aa(b);c&&V(a,K,c,b);return c},X={},Ca=()=>{if(!Y){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\n\"_\")+\".UTF-8\",_:v||\"./this.program\"},b;for(b in X)void 0===X[b]?delete a[b]:a[b]=X[b];var c=[];for(b in a)c.push(`${b}=${a[b]}`);Y=c}return Y},Y,Da=[null,[],[]],Ea=[31,29,31,30,31,30,31,31,30,31,30,31],Fa=[31,28,31,30,31,30,31,31,30,31,30,31];function Ga(a){var b=Array(U(a)+1);V(a,b,0,b.length);return b}\nfunction Ha(a,b,c,f){function g(d,n,p){for(d=\"number\"==typeof d?d.toString():d||\"\";d.length<n;)d=p[0]+d;return d}function k(d,n){return g(d,n,\"0\")}function l(d,n){function p(xa){return 0>xa?-1:0<xa?1:0}var z;0===(z=p(d.getFullYear()-n.getFullYear()))&&0===(z=p(d.getMonth()-n.getMonth()))&&(z=p(d.getDate()-n.getDate()));return z}function r(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function w(d){var n=d.la;for(d=new Date((new Date(d.ma+1900,0,1)).getTime());0<n;){var p=d.getMonth(),z=(W(d.getFullYear())?Ea:Fa)[p];if(n>z-d.getDate())n-=z-d.getDate()+1,d.setDate(1),11>p?d.setMonth(p+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else{d.setDate(d.getDate()+n);break}}p=new Date(d.getFullYear()+1,0,4);n=r(new Date(d.getFullYear(),\n0,4));p=r(p);return 0>=l(n,d)?0>=l(p,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}a>>>=0;b>>>=0;c>>>=0;f>>>=0;var t=L[f+40>>2>>>0];f={xa:L[f>>2>>>0],wa:L[f+4>>2>>>0],na:L[f+8>>2>>>0],qa:L[f+12>>2>>>0],oa:L[f+16>>2>>>0],ma:L[f+20>>2>>>0],ga:L[f+24>>2>>>0],la:L[f+28>>2>>>0],za:L[f+32>>2>>>0],va:L[f+36>>2>>>0],ya:t?T(t):\"\"};c=T(c);t={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\n\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var u in t)c=c.replace(new RegExp(u,\"g\"),t[u]);var ya=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),za=\"January February March April May June July August September October November December\".split(\" \");t={\"%a\":d=>ya[d.ga].substring(0,3),\"%A\":d=>ya[d.ga],\"%b\":d=>\nza[d.oa].substring(0,3),\"%B\":d=>za[d.oa],\"%C\":d=>k((d.ma+1900)/100|0,2),\"%d\":d=>k(d.qa,2),\"%e\":d=>g(d.qa,2,\" \"),\"%g\":d=>w(d).toString().substring(2),\"%G\":d=>w(d),\"%H\":d=>k(d.na,2),\"%I\":d=>{d=d.na;0==d?d=12:12<d&&(d-=12);return k(d,2)},\"%j\":d=>{for(var n=0,p=0;p<=d.oa-1;n+=(W(d.ma+1900)?Ea:Fa)[p++]);return k(d.qa+n,3)},\"%m\":d=>k(d.oa+1,2),\"%M\":d=>k(d.wa,2),\"%n\":()=>\"\\n\",\"%p\":d=>0<=d.na&&12>d.na?\"AM\":\"PM\",\"%S\":d=>k(d.xa,2),\"%t\":()=>\"\\t\",\"%u\":d=>d.ga||7,\"%U\":d=>k(Math.floor((d.la+7-d.ga)/7),2),\"%V\":d=>\n{var n=Math.floor((d.la+7-(d.ga+6)%7)/7);2>=(d.ga+371-d.la-2)%7&&n++;if(n)53==n&&(p=(d.ga+371-d.la)%7,4==p||3==p&&W(d.ma)||(n=1));else{n=52;var p=(d.ga+7-d.la-1)%7;(4==p||5==p&&W(d.ma%400-1))&&n++}return k(n,2)},\"%w\":d=>d.ga,\"%W\":d=>k(Math.floor((d.la+7-(d.ga+6)%7)/7),2),\"%y\":d=>(d.ma+1900).toString().substring(2),\"%Y\":d=>d.ma+1900,\"%z\":d=>{d=d.va;var n=0<=d;d=Math.abs(d)/60;return(n?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":d=>d.ya,\"%%\":()=>\"%\"};c=c.replace(/%%/g,\"\\x00\\x00\");for(u in t)c.includes(u)&&\n(c=c.replace(new RegExp(u,\"g\"),t[u](f)));c=c.replace(/\\0\\0/g,\"%\");u=Ga(c);if(u.length>b)return 0;J.set(u,a>>>0);return u.length-1}\nvar Ja={a:function(a,b,c){a>>>=0;(new qa(a)).ra(b>>>0,c>>>0);ra=a;sa++;throw ra;},e:function(){return 0},H:function(){},x:function(){},z:function(){},k:function(){return 0},F:function(){},B:function(){},E:function(){},g:function(){},y:function(){},v:function(){},G:function(){},w:function(){},l:()=>!0,o:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);L[c>>2>>>0]=a.getUTCSeconds();L[c+4>>2>>>0]=a.getUTCMinutes();L[c+8>>2>>>0]=a.getUTCHours();L[c+12>>2>>>\n0]=a.getUTCDate();L[c+16>>2>>>0]=a.getUTCMonth();L[c+20>>2>>>0]=a.getUTCFullYear()-1900;L[c+24>>2>>>0]=a.getUTCDay();L[c+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},p:function(a,b,c){a=b+2097152>>>0<4194305-!!a?(a>>>0)+4294967296*b:NaN;c>>>=0;a=new Date(1E3*a);L[c>>2>>>0]=a.getSeconds();L[c+4>>2>>>0]=a.getMinutes();L[c+8>>2>>>0]=a.getHours();L[c+12>>2>>>0]=a.getDate();L[c+16>>2>>>0]=a.getMonth();L[c+20>>2>>>0]=a.getFullYear()-1900;L[c+24>>2>>>0]=a.getDay();L[c+28>>2>>>\n0]=(W(a.getFullYear())?va:wa)[a.getMonth()]+a.getDate()-1|0;L[c+36>>2>>>0]=-(60*a.getTimezoneOffset());b=(new Date(a.getFullYear(),6,1)).getTimezoneOffset();var f=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();L[c+32>>2>>>0]=(b!=f&&a.getTimezoneOffset()==Math.min(f,b))|0},q:function(a){a>>>=0;var b=new Date(L[a+20>>2>>>0]+1900,L[a+16>>2>>>0],L[a+12>>2>>>0],L[a+8>>2>>>0],L[a+4>>2>>>0],L[a>>2>>>0],0),c=L[a+32>>2>>>0],f=b.getTimezoneOffset(),g=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),\nk=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),l=Math.min(k,g);0>c?L[a+32>>2>>>0]=Number(g!=k&&l==f):0<c!=(l==f)&&(g=Math.max(k,g),b.setTime(b.getTime()+6E4*((0<c?l:g)-f)));L[a+24>>2>>>0]=b.getDay();L[a+28>>2>>>0]=(W(b.getFullYear())?va:wa)[b.getMonth()]+b.getDate()-1|0;L[a>>2>>>0]=b.getSeconds();L[a+4>>2>>>0]=b.getMinutes();L[a+8>>2>>>0]=b.getHours();L[a+12>>2>>>0]=b.getDate();L[a+16>>2>>>0]=b.getMonth();L[a+20>>2>>>0]=b.getYear();a=b.getTime()/1E3;return Ia((R=a,1<=+Math.abs(R)?0<R?+Math.floor(R/\n4294967296)>>>0:~~+Math.ceil((R-+(~~R>>>0))/4294967296)>>>0:0)),a>>>0},m:function(){return-52},n:function(){},t:function(a,b,c){function f(w){return(w=w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?w[1]:\"GMT\"}c>>>=0;var g=(new Date).getFullYear(),k=new Date(g,0,1),l=new Date(g,6,1);g=k.getTimezoneOffset();var r=l.getTimezoneOffset();M[a>>>0>>2>>>0]=60*Math.max(g,r);L[b>>>0>>2>>>0]=Number(g!=r);a=f(k);b=f(l);a=Ba(a);b=Ba(b);r<g?(M[c>>2>>>0]=a,M[c+4>>2>>>0]=b):(M[c>>2>>>0]=b,M[c+4>>2>>>0]=a)},d:()=>{G(\"\")},\nh:function(){return Date.now()},u:function(){return 4294901760},b:()=>performance.now(),I:function(a,b,c){b>>>=0;return K.copyWithin(a>>>0>>>0,b>>>0,b+(c>>>0)>>>0)},s:function(a){a>>>=0;var b=K.length;if(4294901760<a)return!1;for(var c=1;4>=c;c*=2){var f=b*(1+.2/c);f=Math.min(f,a+100663296);var g=Math;f=Math.max(a,f);a:{g=g.min.call(g,4294901760,f+(65536-f%65536)%65536)-H.buffer.byteLength+65535>>>16;try{H.grow(g);ea();var k=1;break a}catch(l){}k=void 0}if(k)return!0}return!1},C:function(a,b){a>>>=\n0;b>>>=0;var c=0;Ca().forEach(function(f,g){var k=b+c;g=M[a+4*g>>2>>>0]=k;for(k=0;k<f.length;++k)J[g++>>0>>>0]=f.charCodeAt(k);J[g>>0>>>0]=0;c+=f.length+1});return 0},D:function(a,b){a>>>=0;b>>>=0;var c=Ca();M[a>>2>>>0]=c.length;var f=0;c.forEach(function(g){f+=g.length+1});M[b>>2>>>0]=f;return 0},f:()=>52,j:function(){return 52},r:function(){return 70},i:function(a,b,c,f){b>>>=0;c>>>=0;f>>>=0;for(var g=0,k=0;k<c;k++){var l=M[b>>2>>>0],r=M[b+4>>2>>>0];b+=8;for(var w=0;w<r;w++){var t=K[l+w>>>0],u=\nDa[a];0===t||10===t?((1===a?ca:E)(ua(u,0)),u.length=0):u.push(t)}g+=r}M[f>>2>>>0]=g;return 0},A:Ha,c:function(a,b,c,f){return Ha(a>>>0,b>>>0,c>>>0,f>>>0)}};\n(function(){function a(c){c=c.exports;I=c=Ka(c);H=I.J;ea();ha.unshift(I.K);N--;e.monitorRunDependencies&&e.monitorRunDependencies(N);if(0==N&&(null!==O&&(clearInterval(O),O=null),P)){var f=P;P=null;f()}return c}var b={a:Ja};N++;e.monitorRunDependencies&&e.monitorRunDependencies(N);if(e.instantiateWasm)try{return e.instantiateWasm(b,a)}catch(c){E(\"Module.instantiateWasm callback failed with error: \"+c),m(c)}pa(b,function(c){a(c.instance)}).catch(m);return{}})();\ne._OrtInit=(a,b)=>(e._OrtInit=I.L)(a,b);e._OrtGetLastError=(a,b)=>(e._OrtGetLastError=I.M)(a,b);e._OrtCreateSessionOptions=(a,b,c,f,g,k,l,r,w,t)=>(e._OrtCreateSessionOptions=I.N)(a,b,c,f,g,k,l,r,w,t);e._OrtAppendExecutionProvider=(a,b)=>(e._OrtAppendExecutionProvider=I.O)(a,b);e._OrtAddFreeDimensionOverride=(a,b,c)=>(e._OrtAddFreeDimensionOverride=I.P)(a,b,c);e._OrtAddSessionConfigEntry=(a,b,c)=>(e._OrtAddSessionConfigEntry=I.Q)(a,b,c);e._OrtReleaseSessionOptions=a=>(e._OrtReleaseSessionOptions=I.R)(a);\ne._OrtCreateSession=(a,b,c)=>(e._OrtCreateSession=I.S)(a,b,c);e._OrtReleaseSession=a=>(e._OrtReleaseSession=I.T)(a);e._OrtGetInputOutputCount=(a,b,c)=>(e._OrtGetInputOutputCount=I.U)(a,b,c);e._OrtGetInputName=(a,b)=>(e._OrtGetInputName=I.V)(a,b);e._OrtGetOutputName=(a,b)=>(e._OrtGetOutputName=I.W)(a,b);e._OrtFree=a=>(e._OrtFree=I.X)(a);e._OrtCreateTensor=(a,b,c,f,g)=>(e._OrtCreateTensor=I.Y)(a,b,c,f,g);e._OrtGetTensorData=(a,b,c,f,g)=>(e._OrtGetTensorData=I.Z)(a,b,c,f,g);\ne._OrtReleaseTensor=a=>(e._OrtReleaseTensor=I._)(a);e._OrtCreateRunOptions=(a,b,c,f)=>(e._OrtCreateRunOptions=I.$)(a,b,c,f);e._OrtAddRunConfigEntry=(a,b,c)=>(e._OrtAddRunConfigEntry=I.aa)(a,b,c);e._OrtReleaseRunOptions=a=>(e._OrtReleaseRunOptions=I.ba)(a);e._OrtRun=(a,b,c,f,g,k,l,r)=>(e._OrtRun=I.ca)(a,b,c,f,g,k,l,r);e._OrtEndProfiling=a=>(e._OrtEndProfiling=I.da)(a);var Aa=e._malloc=a=>(Aa=e._malloc=I.ea)(a);e._free=a=>(e._free=I.fa)(a);\nvar Ia=a=>(Ia=I.ha)(a),La=()=>(La=I.ia)(),Ma=a=>(Ma=I.ja)(a),Na=a=>(Na=I.ka)(a);function Ka(a){a=Object.assign({},a);var b=f=>()=>f()>>>0,c=f=>g=>f(g)>>>0;a.__errno_location=b(a.__errno_location);a.malloc=c(a.malloc);a.stackSave=b(a.stackSave);a.stackAlloc=c(a.stackAlloc);return a}e.stackAlloc=Na;e.stackSave=La;e.stackRestore=Ma;e.UTF8ToString=T;e.stringToUTF8=(a,b,c)=>V(a,K,b,c);e.lengthBytesUTF8=U;var Z;P=function Oa(){Z||Pa();Z||(P=Oa)};\nfunction Pa(){function a(){if(!Z&&(Z=!0,e.calledRun=!0,!da)){S(ha);h(e);if(e.onRuntimeInitialized)e.onRuntimeInitialized();if(e.postRun)for(\"function\"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var b=e.postRun.shift();ia.unshift(b)}S(ia)}}if(!(0<N)){if(e.preRun)for(\"function\"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)ja();S(fa);0<N||(e.setStatus?(e.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){e.setStatus(\"\")},1);a()},1)):a())}}\nif(e.preInit)for(\"function\"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();Pa();\n\n\n  return moduleArg.ready\n}\n\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], () => ortWasm);\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n            value: CustomError,\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n        name: {\n            get: function get() { return name; },\n            set: undefined,\n            enumerable: false,\n            // configurable: false would accurately preserve the behavior of\n            // the original, but I'm guessing that was not intentional.\n            // For an actual error subclass, this property would\n            // be configurable.\n            configurable: true,\n        },\n        toString: {\n            value: function value() { return this.name + \": \" + this.message; },\n            writable: true,\n            enumerable: false,\n            configurable: true,\n        },\n    });\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveBackend = exports.registerBackend = void 0;\nconst backends = new Map();\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @ignore\n */\nconst registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createSessionHandler === 'function') {\n        const currentBackend = backends.get(name);\n        if (currentBackend === undefined) {\n            backends.set(name, { backend, priority });\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends.get(backendsSortedByPriority[i]).priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\nexports.registerBackend = registerBackend;\n/**\n * Resolve backend by specified hints.\n *\n * @param backendHints - a list of execution provider names to lookup. If omitted use registered backends as list.\n * @returns a promise that resolves to the backend.\n *\n * @ignore\n */\nconst resolveBackend = async (backendHints) => {\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    const errors = [];\n    for (const backendName of backendNames) {\n        const backendInfo = backends.get(backendName);\n        if (backendInfo) {\n            if (backendInfo.initialized) {\n                return backendInfo.backend;\n            }\n            else if (backendInfo.aborted) {\n                continue; // current backend is unavailable; try next\n            }\n            const isInitializing = !!backendInfo.initPromise;\n            try {\n                if (!isInitializing) {\n                    backendInfo.initPromise = backendInfo.backend.init();\n                }\n                await backendInfo.initPromise;\n                backendInfo.initialized = true;\n                return backendInfo.backend;\n            }\n            catch (e) {\n                if (!isInitializing) {\n                    errors.push({ name: backendName, err: e });\n                }\n                backendInfo.aborted = true;\n            }\n            finally {\n                delete backendInfo.initPromise;\n            }\n        }\n    }\n    throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n};\nexports.resolveBackend = resolveBackend;\n//# sourceMappingURL=backend-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.registerBackend = void 0;\nvar backend_impl_js_1 = require(\"./backend-impl.js\");\nObject.defineProperty(exports, \"registerBackend\", { enumerable: true, get: function () { return backend_impl_js_1.registerBackend; } });\n//# sourceMappingURL=backend.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.env = void 0;\nconst version_js_1 = require(\"./version.js\");\nlet logLevelValue = 'warning';\nexports.env = {\n    wasm: {},\n    webgl: {},\n    webgpu: {},\n    versions: { common: version_js_1.version },\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        logLevelValue = value;\n    },\n    get logLevel() {\n        return logLevelValue;\n    },\n};\n// set property 'logLevel' so that they can be correctly transferred to worker by `postMessage()`.\nObject.defineProperty(exports.env, 'logLevel', { enumerable: true });\n//# sourceMappingURL=env-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.env = void 0;\nconst env_impl_js_1 = require(\"./env-impl.js\");\n/**\n * Represent a set of flags as a global singleton.\n */\nexports.env = env_impl_js_1.env;\n//# sourceMappingURL=env.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * # ONNX Runtime JavaScript API\n *\n * ONNX Runtime JavaScript API is a unified API for all JavaScript usages, including the following NPM packages:\n *\n * - [onnxruntime-node](https://www.npmjs.com/package/onnxruntime-node)\n * - [onnxruntime-web](https://www.npmjs.com/package/onnxruntime-web)\n * - [onnxruntime-react-native](https://www.npmjs.com/package/onnxruntime-react-native)\n *\n * See also:\n * - [Get Started](https://onnxruntime.ai/docs/get-started/with-javascript.html)\n * - [Inference examples](https://github.com/microsoft/onnxruntime-inference-examples/tree/main/js)\n *\n * @packageDocumentation\n */\n__exportStar(require(\"./backend.js\"), exports);\n__exportStar(require(\"./env.js\"), exports);\n__exportStar(require(\"./inference-session.js\"), exports);\n__exportStar(require(\"./tensor.js\"), exports);\n__exportStar(require(\"./onnx-value.js\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InferenceSession = void 0;\nconst backend_impl_js_1 = require(\"./backend-impl.js\");\nconst tensor_js_1 = require(\"./tensor.js\");\nclass InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof tensor_js_1.Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof tensor_js_1.Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof tensor_js_1.Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                const result = results[key];\n                if (result instanceof tensor_js_1.Tensor) {\n                    returnValue[key] = result;\n                }\n                else {\n                    returnValue[key] = new tensor_js_1.Tensor(result.type, result.data, result.dims);\n                }\n            }\n        }\n        return returnValue;\n    }\n    async release() {\n        return this.handler.dispose();\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // get backend hints\n        const eps = options.executionProviders || [];\n        const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n        const backend = await (0, backend_impl_js_1.resolveBackend)(backendHints);\n        const handler = await backend.createSessionHandler(filePathOrUint8Array, options);\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\nexports.InferenceSession = InferenceSession;\n//# sourceMappingURL=inference-session-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InferenceSession = void 0;\nconst inference_session_impl_js_1 = require(\"./inference-session-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.InferenceSession = inference_session_impl_js_1.InferenceSession;\n//# sourceMappingURL=inference-session.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=onnx-value.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorToImageData = exports.tensorToDataURL = void 0;\n/**\n * implementation of Tensor.toDataURL()\n */\nconst tensorToDataURL = (tensor, options) => {\n    const canvas = document.createElement('canvas');\n    canvas.width = tensor.dims[3];\n    canvas.height = tensor.dims[2];\n    const pixels2DContext = canvas.getContext('2d');\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n        }\n        const inputformat = options?.format !== undefined ? options.format : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        // Default pointer assignments\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n                const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n                const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n                const A = aTensorPointer === -1 ?\n                    255 :\n                    (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n                // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n                pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n                pixels2DContext.fillRect(j, i, 1, 1);\n            }\n        }\n        return canvas.toDataURL();\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n};\nexports.tensorToDataURL = tensorToDataURL;\n/**\n * implementation of Tensor.toImageData()\n */\nconst tensorToImageData = (tensor, options) => {\n    const pixels2DContext = document.createElement('canvas').getContext('2d');\n    let image;\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        let channels;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[1];\n            channels = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n            channels = tensor.dims[1];\n        }\n        const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        if (options !== undefined) {\n            if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                throw new Error('Tensor format doesn\\'t match input tensor dims');\n            }\n        }\n        // Default pointer assignments\n        const step = 4;\n        let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        image = pixels2DContext.createImageData(width, height);\n        for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n            image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n            image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n            image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n            image.data[aImagePointer] = aTensorPointer === -1 ?\n                255 :\n                (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n        }\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n    return image;\n};\nexports.tensorToImageData = tensorToImageData;\n//# sourceMappingURL=tensor-conversion-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorFromPinnedBuffer = exports.tensorFromGpuBuffer = exports.tensorFromTexture = exports.tensorFromImage = exports.bufferToTensor = void 0;\nconst tensor_impl_js_1 = require(\"./tensor-impl.js\");\n/**\n * Create a new tensor object from image object\n *\n * @param buffer - Extracted image buffer data - assuming RGBA format\n * @param imageFormat - input image configuration - required configurations height, width, format\n * @param tensorFormat - output tensor configuration - Default is RGB format\n */\nconst bufferToTensor = (buffer, options) => {\n    if (buffer === undefined) {\n        throw new Error('Image buffer must be defined');\n    }\n    if (options.height === undefined || options.width === undefined) {\n        throw new Error('Image height and width must be defined');\n    }\n    if (options.tensorLayout === 'NHWC') {\n        throw new Error('NHWC Tensor layout is not supported yet');\n    }\n    const { height, width } = options;\n    const norm = options.norm ?? { mean: 255, bias: 0 };\n    let normMean;\n    let normBias;\n    if (typeof (norm.mean) === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n    }\n    else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];\n    }\n    if (typeof (norm.bias) === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n    }\n    else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];\n    }\n    const inputformat = options.format !== undefined ? options.format : 'RGBA';\n    // default value is RGBA since imagedata and HTMLImageElement uses it\n    const outputformat = options.tensorFormat !== undefined ? (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') : 'RGB';\n    const stride = height * width;\n    const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n    // Default pointer assignments\n    let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n    let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGB') {\n        step = 3;\n        rImagePointer = 0;\n        gImagePointer = 1;\n        bImagePointer = 2;\n        aImagePointer = -1;\n    }\n    // Updating the pointer assignments based on the output tensor format\n    if (outputformat === 'RGBA') {\n        aTensorPointer = stride * 3;\n    }\n    else if (outputformat === 'RBG') {\n        rTensorPointer = 0;\n        bTensorPointer = stride;\n        gTensorPointer = stride * 2;\n    }\n    else if (outputformat === 'BGR') {\n        bTensorPointer = 0;\n        gTensorPointer = stride;\n        rTensorPointer = stride * 2;\n    }\n    for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n        float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n        float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n        float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n        if (aTensorPointer !== -1 && aImagePointer !== -1) {\n            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n        }\n    }\n    // Float32Array -> ort.Tensor\n    const outputTensor = outputformat === 'RGBA' ? new tensor_impl_js_1.Tensor('float32', float32Data, [1, 4, height, width]) :\n        new tensor_impl_js_1.Tensor('float32', float32Data, [1, 3, height, width]);\n    return outputTensor;\n};\nexports.bufferToTensor = bufferToTensor;\n/**\n * implementation of Tensor.fromImage().\n */\nconst tensorFromImage = async (image, options) => {\n    // checking the type of image object\n    const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n    const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n    const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n    const isString = typeof image === 'string';\n    let data;\n    let bufferToTensorOptions = options ?? {};\n    // filling and checking image configuration options\n    if (isHTMLImageEle) {\n        // HTMLImageElement - image object - format is RGBA by default\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = canvas.getContext('2d');\n        if (pixels2DContext != null) {\n            let height = image.height;\n            let width = image.width;\n            if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            if (options !== undefined) {\n                bufferToTensorOptions = options;\n                if (options.tensorFormat !== undefined) {\n                    throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                }\n                else {\n                    bufferToTensorOptions.tensorFormat = 'RGBA';\n                }\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            else {\n                bufferToTensorOptions.tensorFormat = 'RGBA';\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            pixels2DContext.drawImage(image, 0, 0);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isImageDataEle) {\n        let height;\n        let width;\n        if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n            height = options.resizedHeight;\n            width = options.resizedWidth;\n        }\n        else {\n            height = image.height;\n            width = image.width;\n        }\n        if (options !== undefined) {\n            bufferToTensorOptions = options;\n        }\n        bufferToTensorOptions.format = 'RGBA';\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n        if (options !== undefined) {\n            const tempCanvas = document.createElement('canvas');\n            tempCanvas.width = width;\n            tempCanvas.height = height;\n            const pixels2DContext = tempCanvas.getContext('2d');\n            if (pixels2DContext != null) {\n                pixels2DContext.putImageData(image, 0, 0);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else {\n            data = image.data;\n        }\n    }\n    else if (isImageBitmap) {\n        // ImageBitmap - image object - format must be provided by user\n        if (options === undefined) {\n            throw new Error('Please provide image config with format for Imagebitmap');\n        }\n        const canvas = document.createElement('canvas');\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = canvas.getContext('2d');\n        if (pixels2DContext != null) {\n            const height = image.height;\n            const width = image.width;\n            pixels2DContext.drawImage(image, 0, 0, width, height);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n            bufferToTensorOptions.height = height;\n            bufferToTensorOptions.width = width;\n            return (0, exports.bufferToTensor)(data, bufferToTensorOptions);\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isString) {\n        return new Promise((resolve, reject) => {\n            const canvas = document.createElement('canvas');\n            const context = canvas.getContext('2d');\n            if (!image || !context) {\n                return reject();\n            }\n            const newImage = new Image();\n            newImage.crossOrigin = 'Anonymous';\n            newImage.src = image;\n            newImage.onload = () => {\n                canvas.width = newImage.width;\n                canvas.height = newImage.height;\n                context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                bufferToTensorOptions.height = canvas.height;\n                bufferToTensorOptions.width = canvas.width;\n                resolve((0, exports.bufferToTensor)(img.data, bufferToTensorOptions));\n            };\n        });\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n    if (data !== undefined) {\n        return (0, exports.bufferToTensor)(data, bufferToTensorOptions);\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n};\nexports.tensorFromImage = tensorFromImage;\n/**\n * implementation of Tensor.fromTexture().\n */\nconst tensorFromTexture = (texture, options) => {\n    const { width, height, download, dispose } = options;\n    // Always assume RGBAF32. TODO: support different texture format\n    const dims = [1, height, width, 4];\n    return new tensor_impl_js_1.Tensor({ location: 'texture', type: 'float32', texture, dims, download, dispose });\n};\nexports.tensorFromTexture = tensorFromTexture;\n/**\n * implementation of Tensor.fromGpuBuffer().\n */\nconst tensorFromGpuBuffer = (gpuBuffer, options) => {\n    const { dataType, dims, download, dispose } = options;\n    return new tensor_impl_js_1.Tensor({ location: 'gpu-buffer', type: dataType ?? 'float32', gpuBuffer, dims, download, dispose });\n};\nexports.tensorFromGpuBuffer = tensorFromGpuBuffer;\n/**\n * implementation of Tensor.fromPinnedBuffer().\n */\nconst tensorFromPinnedBuffer = (type, buffer, dims) => new tensor_impl_js_1.Tensor({ location: 'cpu-pinned', type, data: buffer, dims: dims ?? [buffer.length] });\nexports.tensorFromPinnedBuffer = tensorFromPinnedBuffer;\n//# sourceMappingURL=tensor-factory-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkBigInt = exports.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = exports.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = void 0;\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nexports.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['float16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nexports.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\n// the following code allows delaying execution of BigInt checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt polyfill\n// if available.\nlet isBigIntChecked = false;\nconst checkBigInt = () => {\n    if (!isBigIntChecked) {\n        isBigIntChecked = true;\n        const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && typeof BigInt64Array.from === 'function';\n        const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && typeof BigUint64Array.from === 'function';\n        if (isBigInt64ArrayAvailable) {\n            exports.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n            exports.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n        }\n        if (isBigUint64ArrayAvailable) {\n            exports.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n            exports.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n        }\n    }\n};\nexports.checkBigInt = checkBigInt;\n//# sourceMappingURL=tensor-impl-type-mapping.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tensor = void 0;\nconst tensor_conversion_impl_js_1 = require(\"./tensor-conversion-impl.js\");\nconst tensor_factory_impl_js_1 = require(\"./tensor-factory-impl.js\");\nconst tensor_impl_type_mapping_js_1 = require(\"./tensor-impl-type-mapping.js\");\nconst tensor_utils_impl_js_1 = require(\"./tensor-utils-impl.js\");\n/**\n * the implementation of Tensor interface.\n *\n * @ignore\n */\nclass Tensor {\n    /**\n     * implementation.\n     */\n    constructor(arg0, arg1, arg2) {\n        // perform one-time check for BigInt support\n        (0, tensor_impl_type_mapping_js_1.checkBigInt)();\n        let type;\n        let dims;\n        if (typeof arg0 === 'object' && 'location' in arg0) {\n            //\n            // constructing tensor from specific location\n            //\n            this.dataLocation = arg0.location;\n            type = arg0.type;\n            dims = arg0.dims;\n            switch (arg0.location) {\n                case 'cpu-pinned': {\n                    const expectedTypedArrayConstructor = tensor_impl_type_mapping_js_1.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);\n                    if (!expectedTypedArrayConstructor) {\n                        throw new TypeError(`unsupported type \"${type}\" to create tensor from pinned buffer`);\n                    }\n                    if (!(arg0.data instanceof expectedTypedArrayConstructor)) {\n                        throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);\n                    }\n                    this.cpuData = arg0.data;\n                    break;\n                }\n                case 'texture': {\n                    if (type !== 'float32') {\n                        throw new TypeError(`unsupported type \"${type}\" to create tensor from texture`);\n                    }\n                    this.gpuTextureData = arg0.texture;\n                    this.downloader = arg0.download;\n                    this.disposer = arg0.dispose;\n                    break;\n                }\n                case 'gpu-buffer': {\n                    if ((type !== 'float32' && type !== 'float16' && type !== 'int32' && type !== 'int64' && type !== 'uint32' &&\n                        type !== 'bool')) {\n                        throw new TypeError(`unsupported type \"${type}\" to create tensor from gpu buffer`);\n                    }\n                    this.gpuBufferData = arg0.gpuBuffer;\n                    this.downloader = arg0.download;\n                    this.disposer = arg0.dispose;\n                    break;\n                }\n                default:\n                    throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);\n            }\n        }\n        else {\n            //\n            // constructing tensor of location 'cpu'\n            //\n            let data;\n            let maybeDims;\n            // check whether arg0 is type or data\n            if (typeof arg0 === 'string') {\n                //\n                // Override: constructor(type, data, ...)\n                //\n                type = arg0;\n                maybeDims = arg2;\n                if (arg0 === 'string') {\n                    // string tensor\n                    if (!Array.isArray(arg1)) {\n                        throw new TypeError('A string tensor\\'s data must be a string array.');\n                    }\n                    // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                    // error will be populated at inference\n                    data = arg1;\n                }\n                else {\n                    // numeric tensor\n                    const typedArrayConstructor = tensor_impl_type_mapping_js_1.NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                    if (typedArrayConstructor === undefined) {\n                        throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                    }\n                    if (Array.isArray(arg1)) {\n                        if (arg0 === 'float16') {\n                            // Throw error here because when user try to use number array as data,\n                            // e.g. new Tensor('float16', [1, 2, 3, 4], dims)), it will actually call\n                            // Uint16Array.from(arg1) which generates wrong data.\n                            throw new TypeError('Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.');\n                        }\n                        else if (arg0 === 'uint64' || arg0 === 'int64') {\n                            // use 'as any' here because:\n                            // 1. TypeScript's check on type of 'Array.isArray()' does not work with readonly arrays.\n                            // see https://github.com/microsoft/TypeScript/issues/17002\n                            // 2. TypeScript's check on union type of '(BigInt64ArrayConstructor|BigUint64ArrayConstructor).from()'\n                            // does not accept parameter mapFn.\n                            // 3. parameters of 'SupportedTypedArrayConstructors.from()' does not match the requirement of the union\n                            // type.\n                            // assume 'arg1' is of type \"readonly number[]|readonly bigint[]\" here.\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            data = typedArrayConstructor.from(arg1, BigInt);\n                        }\n                        else {\n                            // assume 'arg1' is of type \"readonly number[]\" here.\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            data = typedArrayConstructor.from(arg1);\n                        }\n                    }\n                    else if (arg1 instanceof typedArrayConstructor) {\n                        data = arg1;\n                    }\n                    else {\n                        throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                    }\n                }\n            }\n            else {\n                //\n                // Override: constructor(data, ...)\n                //\n                maybeDims = arg1;\n                if (Array.isArray(arg0)) {\n                    // only boolean[] and string[] is supported\n                    if (arg0.length === 0) {\n                        throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                    }\n                    const firstElementType = typeof arg0[0];\n                    if (firstElementType === 'string') {\n                        type = 'string';\n                        data = arg0;\n                    }\n                    else if (firstElementType === 'boolean') {\n                        type = 'bool';\n                        // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                        // wrong type. We use 'as any' to make it happy.\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        data = Uint8Array.from(arg0);\n                    }\n                    else {\n                        throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                    }\n                }\n                else {\n                    // get tensor type from TypedArray\n                    const mappedType = tensor_impl_type_mapping_js_1.NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                    if (mappedType === undefined) {\n                        throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                    }\n                    type = mappedType;\n                    data = arg0;\n                }\n            }\n            // type and data is processed, now processing dims\n            if (maybeDims === undefined) {\n                // assume 1-D tensor if dims omitted\n                maybeDims = [data.length];\n            }\n            else if (!Array.isArray(maybeDims)) {\n                throw new TypeError('A tensor\\'s dims must be a number array');\n            }\n            dims = maybeDims;\n            this.cpuData = data;\n            this.dataLocation = 'cpu';\n        }\n        // perform check on dims\n        const size = (0, tensor_utils_impl_js_1.calculateSize)(dims);\n        // if data is on CPU, check whether data length matches tensor size\n        if (this.cpuData && size !== this.cpuData.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);\n        }\n        this.type = type;\n        this.dims = dims;\n        this.size = size;\n    }\n    // #endregion\n    // #region factory\n    static async fromImage(image, options) {\n        return (0, tensor_factory_impl_js_1.tensorFromImage)(image, options);\n    }\n    static fromTexture(texture, options) {\n        return (0, tensor_factory_impl_js_1.tensorFromTexture)(texture, options);\n    }\n    static fromGpuBuffer(gpuBuffer, options) {\n        return (0, tensor_factory_impl_js_1.tensorFromGpuBuffer)(gpuBuffer, options);\n    }\n    static fromPinnedBuffer(type, buffer, dims) {\n        return (0, tensor_factory_impl_js_1.tensorFromPinnedBuffer)(type, buffer, dims);\n    }\n    // #endregion\n    // #region conversions\n    toDataURL(options) {\n        return (0, tensor_conversion_impl_js_1.tensorToDataURL)(this, options);\n    }\n    toImageData(options) {\n        return (0, tensor_conversion_impl_js_1.tensorToImageData)(this, options);\n    }\n    // #endregion\n    // #region properties\n    get data() {\n        this.ensureValid();\n        if (!this.cpuData) {\n            throw new Error('The data is not on CPU. Use `getData()` to download GPU data to CPU, ' +\n                'or use `texture` or `gpuBuffer` property to access the GPU data directly.');\n        }\n        return this.cpuData;\n    }\n    get location() {\n        return this.dataLocation;\n    }\n    get texture() {\n        this.ensureValid();\n        if (!this.gpuTextureData) {\n            throw new Error('The data is not stored as a WebGL texture.');\n        }\n        return this.gpuTextureData;\n    }\n    get gpuBuffer() {\n        this.ensureValid();\n        if (!this.gpuBufferData) {\n            throw new Error('The data is not stored as a WebGPU buffer.');\n        }\n        return this.gpuBufferData;\n    }\n    // #endregion\n    // #region methods\n    async getData(releaseData) {\n        this.ensureValid();\n        switch (this.dataLocation) {\n            case 'cpu':\n            case 'cpu-pinned':\n                return this.data;\n            case 'texture':\n            case 'gpu-buffer': {\n                if (!this.downloader) {\n                    throw new Error('The current tensor is not created with a specified data downloader.');\n                }\n                if (this.isDownloading) {\n                    throw new Error('The current tensor is being downloaded.');\n                }\n                try {\n                    this.isDownloading = true;\n                    const data = await this.downloader();\n                    this.downloader = undefined;\n                    this.dataLocation = 'cpu';\n                    this.cpuData = data;\n                    if (releaseData && this.disposer) {\n                        this.disposer();\n                        this.disposer = undefined;\n                    }\n                    return data;\n                }\n                finally {\n                    this.isDownloading = false;\n                }\n            }\n            default:\n                throw new Error(`cannot get data from location: ${this.dataLocation}`);\n        }\n    }\n    dispose() {\n        if (this.isDownloading) {\n            throw new Error('The current tensor is being downloaded.');\n        }\n        if (this.disposer) {\n            this.disposer();\n            this.disposer = undefined;\n        }\n        this.cpuData = undefined;\n        this.gpuTextureData = undefined;\n        this.gpuBufferData = undefined;\n        this.downloader = undefined;\n        this.isDownloading = undefined;\n        this.dataLocation = 'none';\n    }\n    // #endregion\n    // #region tensor utilities\n    ensureValid() {\n        if (this.dataLocation === 'none') {\n            throw new Error('The tensor is disposed.');\n        }\n    }\n    reshape(dims) {\n        this.ensureValid();\n        if (this.downloader || this.disposer) {\n            throw new Error('Cannot reshape a tensor that owns GPU resource.');\n        }\n        return (0, tensor_utils_impl_js_1.tensorReshape)(this, dims);\n    }\n}\nexports.Tensor = Tensor;\n//# sourceMappingURL=tensor-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tensorReshape = exports.calculateSize = void 0;\nconst tensor_impl_js_1 = require(\"./tensor-impl.js\");\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nconst calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\nexports.calculateSize = calculateSize;\n/**\n * implementation of Tensor.reshape()\n */\nconst tensorReshape = (tensor, dims) => {\n    switch (tensor.location) {\n        case 'cpu':\n            return new tensor_impl_js_1.Tensor(tensor.type, tensor.data, dims);\n        case 'cpu-pinned':\n            return new tensor_impl_js_1.Tensor({\n                location: 'cpu-pinned',\n                data: tensor.data,\n                type: tensor.type,\n                dims,\n            });\n        case 'texture':\n            return new tensor_impl_js_1.Tensor({\n                location: 'texture',\n                texture: tensor.texture,\n                type: tensor.type,\n                dims,\n            });\n        case 'gpu-buffer':\n            return new tensor_impl_js_1.Tensor({\n                location: 'gpu-buffer',\n                gpuBuffer: tensor.gpuBuffer,\n                type: tensor.type,\n                dims,\n            });\n        default:\n            throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);\n    }\n};\nexports.tensorReshape = tensorReshape;\n//# sourceMappingURL=tensor-utils-impl.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tensor = void 0;\nconst tensor_impl_js_1 = require(\"./tensor-impl.js\");\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.Tensor = tensor_impl_js_1.Tensor;\n//# sourceMappingURL=tensor.js.map","\"use strict\";\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.version = void 0;\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\nexports.version = '1.17.0';\n//# sourceMappingURL=version.js.map","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","define","amd","self","init","createSessionHandler","pathOrBuffer","options","session","Session","loadModel","OnnxjsSessionHandler","onnxjsBackend","OnnxjsBackend","initializeFlags","env","wasm","initTimeout","simd","proxy","numThreads","Number","isInteger","numCpuLogicalCores","navigator","cpus","length","hardwareConcurrency","Math","min","ceil","initializeWebAssemblyInstance","handler","OnnxruntimeWebAssemblySessionHandler","Promise","resolve","wasmBackend","OnnxruntimeWebAssemblyBackend","registerBackend","Object","defineProperty","versions","value","version","enumerable","attribute","assign","this","_cacheKey","getOwnPropertyNames","sort","map","name","join","createAttributeWithCacheKey","AttributeWithCacheKeyImpl","ortFbs","onnxruntime","experimental","fbs","attributes","_attributes","Map","attr","onnx","AttributeProto","set","Attribute","getValue","getType","size","Error","key","type","delete","getFloat","defaultValue","get","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","undefined","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","Array","i","maybeLong","Tensor","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","push","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","obj","o","initialize","dispose","webgl","WebGLBackend","resolveBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","async","glContext","createWebGLContext","Logger","setWithEnv","gl","verbose","e","warning","context","WebGLSessionHandler","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","glsl","getGlsl","floatTextureSetRGBASource","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","line1","line2","texture2D","programInfo","inputNames","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","coordsSnippet","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","indexOf","swapLastDimsSnippet","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","valuesPerRow","squeezedShape","slice","newInputShape","squeezeInputShape","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","params","index","tNumR","tNumC","squeezeShape","newShape","keptDims","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","GlslLib","CoordsGlslLib","FunctionType","GlslContext","addDependency","node","GlslLibRoutineNode","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","TopologicalSortGlslRoutines","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","EncodingGlslLib","isLittleEndian","decodeUint8","ArrayBuffer","a","Uint32Array","c","Uint8Array","setFragColor","getColorAsFloat","FragColorGlslLib","INLINE_FUNC_DEF_REGEX","script","match","inlineDefs","exec","split","tokens","trim","filter","v","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","keys","glslRegistry","lib","libName","routinesInLib","currentNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","samplers","uniformLines","sampler","arrayLength","GlslPreprocessor","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","dims","outputTextureData","createTextureData","build","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","adjustedKernelShape","adjustedLayout","buffer","numberData","numFeatureMaps","oldRowSize","newRowSize","Float32Array","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","data","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","channels","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WebGLInferenceHandler","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","cacheKey","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","inputCount","metadata","from","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","getShiftedChannelsSnippet","lastIndex","shift","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","fetchDataFromCorrectTextureMethod","getFetchDataFromCorrectTextureMethod","getSizeInConcatAxisValueFromIndexMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","searchAxis","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","group","autoPad","dilations","kernelShape","pads","calculateOutputShape","getActivationSnippet","activationFunction","applyActivation","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","TypeError","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","orank","irank","iDrank","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","GemmUtil","getShapeOfGemmResult","line","declareC","broadcastC","calculateC","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","getBiasMethod","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","getOutputCoordsSnippet","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","padFunction","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","poolingCode","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","hasOwnProperty","call","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","codeW","kw","sw","pwStart","pwEnd","dimW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","padCode","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","oRank","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","prepareInputs","scales","every","coordinateTransformMode","dim","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","Int32Array","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","transposeAttribute","isTransposeRequired","transposedInputShape","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","offset","validateInputsV13","sumProgramMetadata","createSumProgramInfo","sumLine","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","err","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","location","getUniformLocation","reference","ProgramManager","PreferLogicalStrategy","maxTextureSize","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","src","textureSize","constructor","allocate","dataSize","RedFloat32DataEncoder","dest","RGBAFloatDataEncoder","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","byteLength","Uint8DataEncoder","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","AlwaysKeepOriginalSizeStrategy","wh","computeTexture","logShape","squeezeResult","sizeFromShape","sizeToSquarishShape","isEmptyArray","isArray","parseAxisParam","assert","ax","isInt","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","createAndWaitForFence","tensorData","subscribers","deleteTexture","splice","Int16Array","Int8Array","Uint16Array","Float64Array","_dataType","len","checkFn","delayFn","maxCounter","_counter","reject","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","canvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","OffscreenCanvas","createOffscreenCanvas","document","createElement","createCanvas","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","n","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","isRenderFloat32Supported","textureHalfFloatExtension","HALF_FLOAT_OES","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","waitForQueryAndGetTime","repeatedTry","fenceContext","createFence","pollFence","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","isFencePassed","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","getNodes","_ops","KernelOp","reset","_starter","resolved","_values","getInputIndices","execute","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","ExecutionPlan","Graph","graphProto","initializer","GraphImpl","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","_nodeProto","NodeProto","opType","Node","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","Value","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","next","child","_severity","_content","_category","severity","content","category","console","color","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","NoOpLoggerProvider","ConsoleLoggerProvider","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","bind","logInternal","stack","Date","toISOString","previousConfig","logLevel","startTime","endCallback","timer","ctx","checkTimer","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","create","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","Event","endSync","EventRecord","toFixed","currentTime","previousPointer","Profiler","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","Model","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","bb","bb_pos","__init","getRootAsShape","Shape","readInt32","getSizePrefixedRootAsShape","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","startShape","builder","startObject","addDim","addFieldOffset","createDimVector","startVector","addOffset","endVector","startDimVector","numElems","endShape","endObject","createShape","getRootAsDimension","getSizePrefixedRootAsDimension","DimensionValue","denotation","optionalEncoding","__string","startDimension","addValue","valueOffset","addDenotation","denotationOffset","endDimension","createDimension","getRootAsDimensionValue","getSizePrefixedRootAsDimensionValue","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","startDimensionValue","addDimType","addFieldInt8","addDimValue","addFieldInt64","addDimParam","dimParamOffset","endDimensionValue","createDimensionValue","getRootAsTensorTypeAndShape","getSizePrefixedRootAsTensorTypeAndShape","UNDEFINED","startTensorTypeAndShape","addElemType","addFieldInt32","addShape","shapeOffset","endTensorTypeAndShape","createTensorTypeAndShape","getRootAsMapType","MapType","getSizePrefixedRootAsMapType","keyType","TypeInfo","startMapType","addKeyType","addValueType","valueTypeOffset","endMapType","createMapType","getRootAsSequenceType","SequenceType","getSizePrefixedRootAsSequenceType","startSequenceType","elemTypeOffset","endSequenceType","createSequenceType","readUint32","srcArgIndex","dstArgIndex","createEdgeEnd","node_index","src_arg_index","dst_arg_index","prep","writeInt32","EdgeEnd","getRootAsNodeEdge","NodeEdge","getSizePrefixedRootAsNodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","startNodeEdge","addNodeIndex","addInputEdges","inputEdgesOffset","startInputEdgesVector","addOutputEdges","outputEdgesOffset","startOutputEdgesVector","endNodeEdge","createNodeEdge","getRootAsNode","getSizePrefixedRootAsNode","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","startNode","addName","nameOffset","addDocString","docStringOffset","addDomain","domainOffset","addSinceVersion","addIndex","addOpType","opTypeOffset","addType","addExecutionProviderType","executionProviderTypeOffset","addInputs","inputsOffset","createInputsVector","startInputsVector","addOutputs","outputsOffset","createOutputsVector","startOutputsVector","addAttributes","attributesOffset","createAttributesVector","startAttributesVector","addInputArgCounts","inputArgCountsOffset","createInputArgCountsVector","addInt32","startInputArgCountsVector","addImplicitInputs","implicitInputsOffset","createImplicitInputsVector","startImplicitInputsVector","endNode","createNode","getRootAsValueInfo","ValueInfo","getSizePrefixedRootAsValueInfo","startValueInfo","typeOffset","endValueInfo","createValueInfo","getRootAsTypeInfo","getSizePrefixedRootAsTypeInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","createTypeInfo","getRootAsOperatorSetId","OperatorSetId","getSizePrefixedRootAsOperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","createOperatorSetId","getRootAsTensor","getSizePrefixedRootAsTensor","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","startTensor","addDims","dimsOffset","createDimsVector","addInt64","startDimsVector","addDataType","addRawData","rawDataOffset","createRawDataVector","addInt8","startRawDataVector","addStringData","stringDataOffset","createStringDataVector","startStringDataVector","endTensor","createTensor","getRootAsSparseTensor","SparseTensor","getSizePrefixedRootAsSparseTensor","values","indices","startSparseTensor","addValues","valuesOffset","addIndices","indicesOffset","endSparseTensor","createSparseTensor","getRootAsAttribute","getSizePrefixedRootAsAttribute","readFloat32","floatsLength","graphsLength","startAttribute","addF","addFieldFloat32","addI","addS","sOffset","addT","tOffset","addG","gOffset","addFloats","floatsOffset","createFloatsVector","addFloat32","startFloatsVector","addInts","intsOffset","createIntsVector","startIntsVector","addStrings","stringsOffset","createStringsVector","startStringsVector","addTensors","tensorsOffset","createTensorsVector","startTensorsVector","addGraphs","graphsOffset","createGraphsVector","startGraphsVector","endAttribute","createAttribute","getRootAsGraph","getSizePrefixedRootAsGraph","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","startGraph","addInitializers","initializersOffset","createInitializersVector","startInitializersVector","addNodeArgs","nodeArgsOffset","createNodeArgsVector","startNodeArgsVector","addNodes","nodesOffset","createNodesVector","startNodesVector","addMaxNodeIndex","addNodeEdges","nodeEdgesOffset","createNodeEdgesVector","startNodeEdgesVector","addSparseInitializers","sparseInitializersOffset","createSparseInitializersVector","startSparseInitializersVector","endGraph","createGraph","getRootAsModel","getSizePrefixedRootAsModel","producerName","producerVersion","modelVersion","graphDocString","startModel","addIrVersion","addOpsetImport","opsetImportOffset","createOpsetImportVector","startOpsetImportVector","addProducerName","producerNameOffset","addProducerVersion","producerVersionOffset","addModelVersion","addGraph","graphOffset","addGraphDocString","graphDocStringOffset","endModel","createModel","getRootAsKernelCreateInfos","KernelCreateInfos","getSizePrefixedRootAsKernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","startKernelCreateInfos","addNodeIndices","nodeIndicesOffset","createNodeIndicesVector","startNodeIndicesVector","addKernelDefHashes","kernelDefHashesOffset","createKernelDefHashesVector","startKernelDefHashesVector","endKernelCreateInfos","createKernelCreateInfos","getRootAsSubGraphSessionState","SubGraphSessionState","getSizePrefixedRootAsSubGraphSessionState","graphId","sessionState","SessionState","startSubGraphSessionState","addGraphId","graphIdOffset","addSessionState","sessionStateOffset","endSubGraphSessionState","requiredField","createSubGraphSessionState","getRootAsSessionState","getSizePrefixedRootAsSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","startSessionState","addKernels","kernelsOffset","addSubGraphSessionStates","subGraphSessionStatesOffset","createSubGraphSessionStatesVector","startSubGraphSessionStatesVector","endSessionState","createSessionState","getSizePrefixedRootAsInferenceSession","bufferHasIdentifier","__has_identifier","ortVersion","startInferenceSession","addOrtVersion","ortVersionOffset","addModel","modelOffset","endInferenceSession","finishInferenceSessionBuffer","finishSizePrefixedInferenceSessionBuffer","createInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","graphInputTypes","graphInputDims","_model","arg","process","promisify","readFile","fetch","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","normalizeAndValidateInputs","outputTensors","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","Guid","validateDimsAndCalcSize","empty","RangeError","dataviewConstructor","sizeof","dataBuffer","createView","_strides","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","fromData","ortTensor","BigInt64Array","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","calcMatMulShape","MatMulUtil","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","calc","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","isValidBroadcast","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","M","K","N","kDim","typeProto","tensorDataTypeStringToEnum","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","incrementIndex","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","sqr","axpy","powx","MathUtil","determineSplit","numElementsAlongAxis","calcReduce","keepdims","ReduceUtil","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","step","adjustPadAndReturnShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","currentKernelId","commandEncoder","computePassEncoder","pendingDispatchNumber","supportTimestampQuery","kernelCustomData","gpu","requestAdapter","adapter","requiredFeatures","deviceDescriptor","requiredLimits","maxComputeWorkgroupStorageSize","limits","maxComputeWorkgroupsPerDimension","maxStorageBufferBindingSize","maxBufferSize","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","features","requestDevice","device","gpuDataManager","createGpuDataManager","kernelPersistentData","configureLogger","onuncapturederror","ev","GPUValidationError","message","profilingQuerySet","createQuerySet","webgpu","getCommandEncoder","createCommandEncoder","getComputePassEncoder","beginComputePass","endComputePass","queue","submit","refreshPendingBuffers","createKernelOutput","createIntermediateOutput","inputDatas","gpuData","inputInfos","validatedOutputIndices","outputTensorViews","outputDatas","isTemporary","isPersistent","tensorView","temporaryData","persistentData","normalizedDispatchGroup","normalizeDispatchGroupSize","dispatchGroup","LOG_DEBUG","upload","gpuDataId","memcpy","dst","download","getTargetBuffer","alloc","id","free","ptr","release","createKernel","kernelId","nodeName","WEBGPU_OP_RESOLVE_RULES","releaseKernel","computeKernel","errors","kernelEntry","useErrorScope","pushErrorScope","popErrorScope","WebGpuBackend","getFloat32Array","elementCount","HEAP8","getBigInt64Array","getInt32Array","newDims","TensorViewImpl","contextDataOffset","customDataOffset","customDataSize","heapU32","HEAPU32","opKernelContext","outputCount","currentKernelCustomData","HEAPU8","compute","inputsOutputsMapping","mappedInputs","getTensorElementSize","bufferSize","stackSave","stackAlloc","_JsepOutput","stackRestore","jsepInit","isSourceGpu","dataOffset","profilingMode","UTF8ToString","_JsepGetNodeName","sessionId","ComputeContextImpl","configLogLevel","logLevelPrefix","$configLogLevel","$debug","LOG","level","messageLevel","logLevelStringToEnum","args","isChannelLast","calcNormalizedBufferSize","guid","storageCache","freeBuffers","buffersForUploadingPending","buffersPending","srcArrayBuffer","srcOffset","srcLength","gpuDataCache","originalSize","gpuBufferForUploading","mappedAtCreation","GPUBufferUsage","MAP_WRITE","COPY_SRC","getMappedRange","unmap","copyBufferToBuffer","sourceId","destinationId","sourceGpuDataCache","destinationGpuDataCache","STORAGE","COPY_DST","gpuBuffer","buffers","GpuDataType","default","cachedData","gpuReadBuffer","MAP_READ","mapAsync","GPUMapMode","READ","destroy","storage","GpuDataManagerImpl","acosh","argMax","parseArgMinMaxAttributes","argMin","asinh","atanh","pool","clipV10","cosh","einsum","parseEinsumAttributes","parseAlphaAttributes","erf","expand","gatherElements","parseGatherElementsAttributes","gelu","parseGlobalMaxPoolAttributes","greaterOrEqual","instanceNorm","parseInstanceNormAttributes","layerNorm","parseLayerNormAttributes","lessOrEqual","parsePadAttributes","reciprocal","reduceL1","reduceL2","reduceLogSumExp","reduceSumSquare","parseResizeAttributes","sinh","skipLayerNorm","parseSkipLayerNormAttributes","thresholdedRelu","typeSnippet","component","activationFnSnippet","_hasPreluActivationWeights","_packed","_coordsLength","biasActivationSnippet","createConv2DMatMulProgramInfo","dimAOuter","dimBOuter","dimInner","sequentialAccessByThreads","isChannelsLast","inChannels","outWidth","outHeight","isVec4","dispatchX","dispatchY","workGroupSize","elementsPerThread","dispatch","innerElementSize","tileAOuter","tileBOuter","tileInner","fitAOuter","fitBOuter","fitInner","elementsSize","declareInputs","declareFunctions","gpuDataType","z","getShaderSource","utilFunctions","addBias","hasPreluActivationWeights","innerElementSizeX","innerElementSizeW","coordASnippet","coordResSnippet","xHeight","xWidth","readXSnippet","getXSnippet","sampleX","sampleW","getWSnippet","resType","aType","bType","conv2dCommonSnippet","makeMatMulPackedVec4Source","makeMatMulPackedSource","createConvTranspose2DProgramInfo","squeezeOutputShapeFunction","outputSize","shaderHelper","is1DimensionDispatch","rowDim","colDim","channelDim","workPerThread","components","inputVariable","dy","inputVariables","outputVariable","codeSnippet4","codeSnippet","indicesGet","setByOffset","declareVariables","mainStart","guardAgainstOutOfBoundsWorkgroupSizes","createConvTranspose2DOpProgramShaderSource","workgroupSize","batchDims","transposeA","splitK","splitedDimInner","tileAWidth","tileAHight","rowPerThreadB","writeDataToSubAVec4Snippet","calculateResultSnippet","writeDataToSubASnippet","rowPerThreadA","colPerThreadA","matmulSnippet","readDataFromSubASnippet","reshapedOutputShape","outerDimsA","outerDimsB","outerDims","getActicationSnippet","A","batchAVariable","batchBVariable","batchVariable","aVariable","bVariable","broadCastADims","broadCastBDims","batchRank","resStr","getAIndices","getByIndices","getBIndices","setByIndices","matMulReadWriteFnSource","biasComponents","createArgMinMaxProgramInfoLoader","updatedAttributes","selectLastIndex","createArgMinMaxAttributesFromInputs","getByOffset","createBinaryOpProgramInfoLoader","funcCall","additionalImplementation","outputDataType","vectorize","isAOneElement","isBOneElement","sharedDimension","dimA","dimsOutput","doBroadcast","typeA","typeB","typeOutput","expressionScalar","expressionVector","vecSize","scalar","vector","assignment","broadcastImpl","calcOffsetImpl","singleAssignment","typeCast","expressionA","expressionB","createBinaryOpProgramShader","createBinaryOpProgramInfo","roundStr","WORKGROUP_SIZE","getWgslMappedType","tensorTypeToWsglStorageType","mappedType","tensorTypeToWsglValueType","createIndicesHelper","isInput","indicesType","storageType","normalizeDim","implementationUsed","o2iSnippet","offsetToIndicesImplementation","indicesToOffsetImplementation","getByIndicesImplementation","getImplementation","setByIndicesImplementation","setImplementation","impls","varOffset","varIndices","indicesSet","indicesAndValue","normalizedIndices","indicesHelpers","sizeInCode","workgroupSizeX","workgroupSizeY","workgroupSizeZ","paramList","globalIdxDefinition","declareVariable","bindingIndex","access","createShaderHelper","ShaderHelperImpl","adjustedAxis","inputVars","indicesAxis","returnSnippet","assignOutputData","createConcatProgramInfo","createConcatProgramInfoLoader","createGroupedConvProgramInfoLoader","createGroupedConvProgramInfo","updateOutputShape","wIsConst","createConvTranspose2DProgramInfoLoader","convTranspose1d","weightTransposeAttribute","auto_pad","kernel_shape","w_is_const","conv1d","inputChannels","weightHeight","weightWidth","sameSize","xReshaped","wReshaped","matmulOutputShape","wT","transposedWeight","convInputs","createConv2DMatMulProgramInfoLoader","createConv2DMatMulProgramMetadata","symbolPattern","termPattern","termPatternOnly","lhsPatternOnly","inputIndex","symbolToIndices","addSymbol","symbol","equation","hasEllipsis","symbolToInfo","lhs","includes","rhs","inputTerm","einsumTerm","processTerm","entries","sym","rhsSymbols","ellipsisDims","inputIndices","term","ellipsis","nextDim","indexSymbols","EinsumTerm","ellipsisDimLength","String","fromCharCode","charCodeAt","einsumEquation","EinsumEquation","reduceOpsSetIndices","reduceOpsLoopHeaders","reduceOpsLoopFooters","reduceOpCompute","isReduceOpsWithoutLoop","inputVar","createEinsumProgramInfo","createEinsumProgramInfoLoader","expandProgramMetadata","getAdjustedShape","diff","shapeIndex","inputShapeIndex","activation_params","inputOutputDataType","inputSize","indicesShape","indicesDataType","indicesSize","axisDimLimit","createGatherElementsProgramInfo","indicesRank","calcStr","calcDataIndices","calculateAlpha","m","broadcastM","broadcastN","offsetC","inputStorageBuffersDeclarations","H","normCount","createInstanceNormNHWCProgramInfo","normSize","createInstanceNormProgramInfo","scaleSize","biasSize","meanInvStdDevDim","hasMeanDataOutput","hasInvStdOutput","createLayerNormProgramInfo","createPadProgramInfoLoader","bigInt64Pads","createPadAttributesFromInputs","padSnippet","constantValue","getPadWrap","getPadSnippet","generatePadCode","validPads","inputShapeAsChannelFirst","outputShapeAsChannelFirst","dimIdxW","dimIdxH","parsePoolCommonAttributes","ceil_mode","count_include_pad","globalPoolAttributes","storage_order","noOp","axesInput","noopWithEmptyAxes","reduceOnAllAxes","inputOffsetAssignment","initinputOffsetLet","initinputOffsetVar","initinputOffset","l","createReduceProgramInfoLoader","createReduceAttributesFromInputs","_output","createResizeProgramInfoLoader","opsetVersion","sizes","roi","inputTensor","scalesInput","roiInput","roiTmp","roiLocal","updateRoI","round","initOutputShape","keepAspectRatioPolicy","scaleInPolicy","MAX_VALUE","MIN_VALUE","adjustedOutputShape","adjustOutputShape","noScale","coordinateTransferMode","checkInputIndices","getNearestPixelFromOriginal","calculateInputIndicesFromOutputIndices","calculateOriginalIndicesFromOutputIndices","batchIdx","heightIdx","widthIdx","bilinearInterpolation","cubicCoeffA","createCubicInterpolationFunction","direction","bicubicInterpolation","createResizeProgramInfo","customDataBuffer","getOpsetVersionFromCustomDataBuffer","roiInputIndex","scalesInputIndex","sizesInputIndex","validateScales","newScales","updateScales","skip","gamma","hiddenSize","sequenceLength","isTraining","hasBetaInput","hasBiasInput","hasMeanOutput","hasInvStdDevOutput","hasInputSkipBiasSumOutput","bindingNumber","createSkipLayerNormProgramInfo","createSkipLayerNormProgramInfoLoader","readInput","fixStartEndValues","steps","newValue","programInfoLoader","createSliceAttributesFromInputs","signs","sign","numSteps","newEnd","newStart","outputTensorInfo","calculateInputIndicesImpl","createSliceProgramInfoLoader","threadMaxDecl","_shaderHelper","createSoftmaxProgramInfo","splitSizes","createSplitAttributesFromInputs","outputsTensorInfo","outputShapes","writeBufferDataImpl","createSplitProgramInfoLoader","getRepeats","repeatsTensorView","repeats","permAttr","permFunctionBody","datasize","inputDataType","expression","createElementwiseProgramShader","erfImpl","varType","inputsTensorView","profilingEnabled","writeTimestamp","setPipeline","computePipeline","binding","resource","bindGroup","createBindGroup","getBindGroupLayout","setBindGroup","dispatchWorkgroups","profilingQueryData","QUERY_RESOLVE","resolveQuerySet","kernelInfo","mappedData","BigUint64Array","startTimeU64","endTimeU64","profilingTimeBase","isSafeInteger","inputShapes","tensorDataTypeEnumToString","normalizedDispatchGroupSize","extensions","userCode","code","additionalImplementations","shaderModule","createShaderModule","createComputePipeline","entryPoint","limitPerDimension","dispatchAverage","cbrt","proxyWorker","initWasmCallbacks","initOrtCallbacks","isProxy","initializing","initialized","aborted","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","in","postMessage","initializeWebAssembly","initializeRuntime","core","initRuntime","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","checkLastError","extra","iterateExtraOptions","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","_free","runtimeInitialized","runtimeInitializationPromise","path","response","modelData","fetches","inputArray","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","executionProviders","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","freeDimensionOverrides","_OrtAddFreeDimensionOverride","_OrtReleaseSessionOptions","dateType","tensorTypeToTypedArrayConstructor","loggingLevel","_OrtInit","activeSessions","modelDataOffset","_malloc","sessionHandle","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtCreateSession","_OrtGetInputOutputCount","HEAP32","getSessionInputOutputCount","_OrtGetInputName","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","jsepOnRunStart","errorCode","_OrtRun","runPromise","jsepRunPromise","jsepOnRunEnd","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","maxBytesToRead","typedArrayConstructor","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","ortWasmFactory","ortWasmFactoryThreaded","flags","timeout","useThreads","SharedArrayBuffer","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","useSimd","isSimdSupported","wasmPrefixOverride","wasmFileName","getWasmFileName","wasmPathOverride","isTimeout","tasks","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","mainScriptUrlOrBlob","__dirname","scriptSourceCode","what","race","PThread","terminateAllThreads","dataLength","lengthBytesUTF8","stringToUTF8","prefix","seen","paramsOffset","_OrtGetLastError","errorMessagePointer","errorMessage","Worker_fn","workerConstructor","workerOptions","url","globalScope","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","sparseTensors","typeProtos","prototype","refAttrName","newBuffer","sparseTensor","tp","emptyArray","writer","uint32","string","float","int64","fork","ldelim","TypeProto","int32","SparseTensorProto","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","isString","fromObject","object","LongBits","base64","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSON","toJSONOptions","getTypeUrl","typeUrlPrefix","ValueInfoProto","TrainingInfoProto","initializationBinding","updateBinding","initialization","algorithm","StringStringEntryProto","metadataProps","trainingInfo","functions","OperatorSetIdProto","FunctionProto","TensorAnnotation","quantParameterTensorNames","tensorName","sparseInitializer","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","oneOfGetter","oneOfSetter","oneofs","sequenceType","mapType","optionalType","sparseTensorType","Sequence","Optional","OperatorStatus","attributeProto","_scriptDir","__filename","F","W","Y","P","u","ready","h","importScripts","ENVIRONMENT_IS_PTHREAD","O","dirname","startsWith","normalize","readFileSync","thisProgram","argv","exitCode","inspect","global","Worker","href","XMLHttpRequest","open","send","responseText","responseType","onload","onerror","T","writeSync","S","print","E","printErr","quit","wasmBinary","R","noExitRuntime","ee","I","U","HEAP16","HEAPU16","HEAPF32","HEAPF64","G","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","L","q","J","$","V","Z","monitorRunDependencies","Q","clearInterval","onAbort","RuntimeError","te","re","ne","credentials","ok","catch","instantiate","ae","oe","ie","he","Fa","ue","Za","Ia","Ha","cmd","start_routine","gb","Ya","pthread_ptr","unref","mb","se","fe","ce","le","qe","hb","onExit","de","pe","La","Ta","Pa","ab","$a","receiveObjectTransfer","eb","threadInitTLS","Sa","setExitStatus","Ra","rb","pt","cb","targetThread","ct","qb","transferList","Ue","thread","loaded","alert","threadId","text","filename","lineno","on","handlers","urlOrBlob","wasmModule","Xa","me","establishStackSpace","_t","wt","ge","be","Oa","Wa","Va","Ua","ve","_e","ob","ye","we","invokeEntryPoint","gt","Oe","Me","Te","Se","Ae","Ee","Re","Fe","De","Ce","Ie","ke","xe","Ye","He","Pe","Atomics","nb","store","bt","__emscripten_thread_mailbox_await","checkMailbox","We","Ge","Ne","Le","je","ze","lt","Be","yt","arguments","Ot","mt","Je","Ke","Xe","$e","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Ve","Ze","Qe","et","tt","rt","nt","at","ot","it","ut","getFullYear","getMonth","getDate","getDay","Ja","Ka","getTime","setDate","setMonth","setFullYear","kb","jb","Ma","Qa","Na","Ga","sb","ib","lb","st","ft","dt","ref","NaN","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","getTimezoneOffset","setTime","getYear","vt","toTimeString","timeOrigin","pb","apply","grow","__errno_location","pthread_self","malloc","sa","ta","instantiateWasm","instantiateStreaming","instance","aa","ba","da","ea","fa","ga","ha","ia","ja","ka","la","ma","na","oa","_pthread_self","pa","qa","ra","__emscripten_tls_init","__emscripten_thread_init","ua","__emscripten_thread_crashed","va","ht","wa","xa","__emscripten_thread_exit","ya","__emscripten_check_mailbox","za","Aa","Ba","Ca","Da","Ea","Mt","calledRun","onRuntimeInitialized","postRun","startWorker","preRun","setStatus","keepRuntimeAlive","ExitStatus","preInit","ortWasm","moduleArg","fs","copyWithin","fn","pending","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","evt","off","listeners","emit","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","fromNumber","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","ifNotSet","newError","CustomError","captureStackTrace","writable","configurable","isNode","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","backends","backendsSortedByPriority","priority","currentBackend","backendHints","backendNames","backendName","backendInfo","isInitializing","initPromise","backend_impl_js_1","version_js_1","logLevelValue","common","env_impl_js_1","__createBinding","k2","desc","getOwnPropertyDescriptor","__exportStar","tensor_js_1","isFetchesEmpty","isFetches","arg1Keys","results","returnValue","static","filePathOrUint8Array","inference_session_impl_js_1","tensorToImageData","tensorToDataURL","pixels2DContext","tensorLayout","inputformat","norm","normMean","normBias","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","fillStyle","fillRect","toDataURL","image","rImagePointer","gImagePointer","bImagePointer","aImagePointer","createImageData","tensorFromPinnedBuffer","tensorFromGpuBuffer","tensorFromTexture","tensorFromImage","bufferToTensor","tensor_impl_js_1","outputformat","tensorFormat","float32Data","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","bufferToTensorOptions","resizedHeight","resizedWidth","drawImage","getImageData","newImage","Image","crossOrigin","img","tempCanvas","putImageData","checkBigInt","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","isBigIntChecked","isBigInt64ArrayAvailable","isBigUint64ArrayAvailable","tensor_conversion_impl_js_1","tensor_factory_impl_js_1","tensor_impl_type_mapping_js_1","tensor_utils_impl_js_1","expectedTypedArrayConstructor","cpuData","gpuTextureData","downloader","disposer","gpuBufferData","maybeDims","BigInt","firstElementType","calculateSize","toImageData","ensureValid","releaseData","isDownloading","tensorReshape","Instance","Module","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","comp","lessThanOrEqual","lte","greaterThan","gte","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","countLeadingZeros","clz","countTrailingZeros","ctz","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","_default","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}