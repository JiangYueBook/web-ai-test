/*!
 * ONNX Runtime Web v1.17.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";
var ort = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // common/dist/esm/backend-impl.js
  var backends, backendsSortedByPriority, registerBackend, resolveBackend;
  var init_backend_impl = __esm({
    "common/dist/esm/backend-impl.js"() {
      "use strict";
      backends = /* @__PURE__ */ new Map();
      backendsSortedByPriority = [];
      registerBackend = (name, backend, priority) => {
        if (backend && typeof backend.init === "function" && typeof backend.createInferenceSessionHandler === "function") {
          const currentBackend = backends.get(name);
          if (currentBackend === void 0) {
            backends.set(name, { backend, priority });
          } else if (currentBackend.priority > priority) {
            return;
          } else if (currentBackend.priority === priority) {
            if (currentBackend.backend !== backend) {
              throw new Error(`cannot register backend "${name}" using priority ${priority}`);
            }
          }
          if (priority >= 0) {
            const i = backendsSortedByPriority.indexOf(name);
            if (i !== -1) {
              backendsSortedByPriority.splice(i, 1);
            }
            for (let i2 = 0; i2 < backendsSortedByPriority.length; i2++) {
              if (backends.get(backendsSortedByPriority[i2]).priority <= priority) {
                backendsSortedByPriority.splice(i2, 0, name);
                return;
              }
            }
            backendsSortedByPriority.push(name);
          }
          return;
        }
        throw new TypeError("not a valid backend");
      };
      resolveBackend = async (backendHints) => {
        const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;
        const errors = [];
        for (const backendName of backendNames) {
          const backendInfo = backends.get(backendName);
          if (backendInfo) {
            if (backendInfo.initialized) {
              return backendInfo.backend;
            } else if (backendInfo.aborted) {
              continue;
            }
            const isInitializing = !!backendInfo.initPromise;
            try {
              if (!isInitializing) {
                backendInfo.initPromise = backendInfo.backend.init();
              }
              await backendInfo.initPromise;
              backendInfo.initialized = true;
              return backendInfo.backend;
            } catch (e) {
              if (!isInitializing) {
                errors.push({ name: backendName, err: e });
              }
              backendInfo.aborted = true;
            } finally {
              delete backendInfo.initPromise;
            }
          }
        }
        throw new Error(`no available backend found. ERR: ${errors.map((e) => `[${e.name}] ${e.err}`).join(", ")}`);
      };
    }
  });

  // common/dist/esm/backend.js
  var init_backend = __esm({
    "common/dist/esm/backend.js"() {
      "use strict";
      init_backend_impl();
    }
  });

  // common/dist/esm/version.js
  var version;
  var init_version = __esm({
    "common/dist/esm/version.js"() {
      "use strict";
      version = "1.17.0";
    }
  });

  // common/dist/esm/env-impl.js
  var logLevelValue, env;
  var init_env_impl = __esm({
    "common/dist/esm/env-impl.js"() {
      "use strict";
      init_version();
      logLevelValue = "warning";
      env = {
        wasm: {},
        webgl: {},
        webgpu: {},
        versions: { common: version },
        set logLevel(value) {
          if (value === void 0) {
            return;
          }
          if (typeof value !== "string" || ["verbose", "info", "warning", "error", "fatal"].indexOf(value) === -1) {
            throw new Error(`Unsupported logging level: ${value}`);
          }
          logLevelValue = value;
        },
        get logLevel() {
          return logLevelValue;
        }
      };
      Object.defineProperty(env, "logLevel", { enumerable: true });
    }
  });

  // common/dist/esm/env.js
  var env2;
  var init_env = __esm({
    "common/dist/esm/env.js"() {
      "use strict";
      init_env_impl();
      env2 = env;
    }
  });

  // common/dist/esm/tensor-conversion-impl.js
  var tensorToDataURL, tensorToImageData;
  var init_tensor_conversion_impl = __esm({
    "common/dist/esm/tensor-conversion-impl.js"() {
      "use strict";
      tensorToDataURL = (tensor, options) => {
        const canvas = document.createElement("canvas");
        canvas.width = tensor.dims[3];
        canvas.height = tensor.dims[2];
        const pixels2DContext = canvas.getContext("2d");
        if (pixels2DContext != null) {
          let width;
          let height;
          if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
            width = tensor.dims[2];
            height = tensor.dims[3];
          } else {
            width = tensor.dims[3];
            height = tensor.dims[2];
          }
          const inputformat = options?.format !== void 0 ? options.format : "RGB";
          const norm = options?.norm;
          let normMean;
          let normBias;
          if (norm === void 0 || norm.mean === void 0) {
            normMean = [255, 255, 255, 255];
          } else {
            if (typeof norm.mean === "number") {
              normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
            } else {
              normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];
              if (norm.mean[3] !== void 0) {
                normMean[3] = norm.mean[3];
              }
            }
          }
          if (norm === void 0 || norm.bias === void 0) {
            normBias = [0, 0, 0, 0];
          } else {
            if (typeof norm.bias === "number") {
              normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
            } else {
              normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
              if (norm.bias[3] !== void 0) {
                normBias[3] = norm.bias[3];
              }
            }
          }
          const stride = height * width;
          let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
          if (inputformat === "RGBA") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
            aTensorPointer = stride * 3;
          } else if (inputformat === "RGB") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
          } else if (inputformat === "RBG") {
            rTensorPointer = 0;
            bTensorPointer = stride;
            gTensorPointer = stride * 2;
          }
          for (let i = 0; i < height; i++) {
            for (let j = 0; j < width; j++) {
              const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
              const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
              const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
              const A = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
              pixels2DContext.fillStyle = "rgba(" + R + "," + G + "," + B + "," + A + ")";
              pixels2DContext.fillRect(j, i, 1, 1);
            }
          }
          return canvas.toDataURL();
        } else {
          throw new Error("Can not access image data");
        }
      };
      tensorToImageData = (tensor, options) => {
        const pixels2DContext = document.createElement("canvas").getContext("2d");
        let image;
        if (pixels2DContext != null) {
          let width;
          let height;
          let channels;
          if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
            width = tensor.dims[2];
            height = tensor.dims[1];
            channels = tensor.dims[3];
          } else {
            width = tensor.dims[3];
            height = tensor.dims[2];
            channels = tensor.dims[1];
          }
          const inputformat = options !== void 0 ? options.format !== void 0 ? options.format : "RGB" : "RGB";
          const norm = options?.norm;
          let normMean;
          let normBias;
          if (norm === void 0 || norm.mean === void 0) {
            normMean = [255, 255, 255, 255];
          } else {
            if (typeof norm.mean === "number") {
              normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
            } else {
              normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];
              if (norm.mean[3] !== void 0) {
                normMean[3] = norm.mean[3];
              }
            }
          }
          if (norm === void 0 || norm.bias === void 0) {
            normBias = [0, 0, 0, 0];
          } else {
            if (typeof norm.bias === "number") {
              normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
            } else {
              normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
              if (norm.bias[3] !== void 0) {
                normBias[3] = norm.bias[3];
              }
            }
          }
          const stride = height * width;
          if (options !== void 0) {
            if (options.format !== void 0 && (channels === 4 && options.format !== "RGBA") || channels === 3 && (options.format !== "RGB" && options.format !== "BGR")) {
              throw new Error("Tensor format doesn't match input tensor dims");
            }
          }
          const step = 4;
          let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
          let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
          if (inputformat === "RGBA") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
            aTensorPointer = stride * 3;
          } else if (inputformat === "RGB") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
          } else if (inputformat === "RBG") {
            rTensorPointer = 0;
            bTensorPointer = stride;
            gTensorPointer = stride * 2;
          }
          image = pixels2DContext.createImageData(width, height);
          for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {
            image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
            image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
            image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
            image.data[aImagePointer] = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
          }
        } else {
          throw new Error("Can not access image data");
        }
        return image;
      };
    }
  });

  // common/dist/esm/tensor-factory-impl.js
  var bufferToTensor, tensorFromImage, tensorFromTexture, tensorFromGpuBuffer, tensorFromPinnedBuffer;
  var init_tensor_factory_impl = __esm({
    "common/dist/esm/tensor-factory-impl.js"() {
      "use strict";
      init_tensor_impl();
      bufferToTensor = (buffer, options) => {
        if (buffer === void 0) {
          throw new Error("Image buffer must be defined");
        }
        if (options.height === void 0 || options.width === void 0) {
          throw new Error("Image height and width must be defined");
        }
        if (options.tensorLayout === "NHWC") {
          throw new Error("NHWC Tensor layout is not supported yet");
        }
        const { height, width } = options;
        const norm = options.norm ?? { mean: 255, bias: 0 };
        let normMean;
        let normBias;
        if (typeof norm.mean === "number") {
          normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
        } else {
          normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];
        }
        if (typeof norm.bias === "number") {
          normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
        } else {
          normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];
        }
        const inputformat = options.format !== void 0 ? options.format : "RGBA";
        const outputformat = options.tensorFormat !== void 0 ? options.tensorFormat !== void 0 ? options.tensorFormat : "RGB" : "RGB";
        const stride = height * width;
        const float32Data = outputformat === "RGBA" ? new Float32Array(stride * 4) : new Float32Array(stride * 3);
        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
        if (inputformat === "RGB") {
          step = 3;
          rImagePointer = 0;
          gImagePointer = 1;
          bImagePointer = 2;
          aImagePointer = -1;
        }
        if (outputformat === "RGBA") {
          aTensorPointer = stride * 3;
        } else if (outputformat === "RBG") {
          rTensorPointer = 0;
          bTensorPointer = stride;
          gTensorPointer = stride * 2;
        } else if (outputformat === "BGR") {
          bTensorPointer = 0;
          gTensorPointer = stride;
          rTensorPointer = stride * 2;
        }
        for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {
          float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];
          float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];
          float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];
          if (aTensorPointer !== -1 && aImagePointer !== -1) {
            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];
          }
        }
        const outputTensor = outputformat === "RGBA" ? new Tensor("float32", float32Data, [1, 4, height, width]) : new Tensor("float32", float32Data, [1, 3, height, width]);
        return outputTensor;
      };
      tensorFromImage = async (image, options) => {
        const isHTMLImageEle = typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement;
        const isImageDataEle = typeof ImageData !== "undefined" && image instanceof ImageData;
        const isImageBitmap = typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap;
        const isString = typeof image === "string";
        let data;
        let bufferToTensorOptions = options ?? {};
        if (isHTMLImageEle) {
          const canvas = document.createElement("canvas");
          canvas.width = image.width;
          canvas.height = image.height;
          const pixels2DContext = canvas.getContext("2d");
          if (pixels2DContext != null) {
            let height = image.height;
            let width = image.width;
            if (options !== void 0 && options.resizedHeight !== void 0 && options.resizedWidth !== void 0) {
              height = options.resizedHeight;
              width = options.resizedWidth;
            }
            if (options !== void 0) {
              bufferToTensorOptions = options;
              if (options.tensorFormat !== void 0) {
                throw new Error("Image input config format must be RGBA for HTMLImageElement");
              } else {
                bufferToTensorOptions.tensorFormat = "RGBA";
              }
              bufferToTensorOptions.height = height;
              bufferToTensorOptions.width = width;
            } else {
              bufferToTensorOptions.tensorFormat = "RGBA";
              bufferToTensorOptions.height = height;
              bufferToTensorOptions.width = width;
            }
            pixels2DContext.drawImage(image, 0, 0);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
          } else {
            throw new Error("Can not access image data");
          }
        } else if (isImageDataEle) {
          let height;
          let width;
          if (options !== void 0 && options.resizedWidth !== void 0 && options.resizedHeight !== void 0) {
            height = options.resizedHeight;
            width = options.resizedWidth;
          } else {
            height = image.height;
            width = image.width;
          }
          if (options !== void 0) {
            bufferToTensorOptions = options;
          }
          bufferToTensorOptions.format = "RGBA";
          bufferToTensorOptions.height = height;
          bufferToTensorOptions.width = width;
          if (options !== void 0) {
            const tempCanvas = document.createElement("canvas");
            tempCanvas.width = width;
            tempCanvas.height = height;
            const pixels2DContext = tempCanvas.getContext("2d");
            if (pixels2DContext != null) {
              pixels2DContext.putImageData(image, 0, 0);
              data = pixels2DContext.getImageData(0, 0, width, height).data;
            } else {
              throw new Error("Can not access image data");
            }
          } else {
            data = image.data;
          }
        } else if (isImageBitmap) {
          if (options === void 0) {
            throw new Error("Please provide image config with format for Imagebitmap");
          }
          const canvas = document.createElement("canvas");
          canvas.width = image.width;
          canvas.height = image.height;
          const pixels2DContext = canvas.getContext("2d");
          if (pixels2DContext != null) {
            const height = image.height;
            const width = image.width;
            pixels2DContext.drawImage(image, 0, 0, width, height);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
            return bufferToTensor(data, bufferToTensorOptions);
          } else {
            throw new Error("Can not access image data");
          }
        } else if (isString) {
          return new Promise((resolve, reject) => {
            const canvas = document.createElement("canvas");
            const context = canvas.getContext("2d");
            if (!image || !context) {
              return reject();
            }
            const newImage = new Image();
            newImage.crossOrigin = "Anonymous";
            newImage.src = image;
            newImage.onload = () => {
              canvas.width = newImage.width;
              canvas.height = newImage.height;
              context.drawImage(newImage, 0, 0, canvas.width, canvas.height);
              const img = context.getImageData(0, 0, canvas.width, canvas.height);
              bufferToTensorOptions.height = canvas.height;
              bufferToTensorOptions.width = canvas.width;
              resolve(bufferToTensor(img.data, bufferToTensorOptions));
            };
          });
        } else {
          throw new Error("Input data provided is not supported - aborted tensor creation");
        }
        if (data !== void 0) {
          return bufferToTensor(data, bufferToTensorOptions);
        } else {
          throw new Error("Input data provided is not supported - aborted tensor creation");
        }
      };
      tensorFromTexture = (texture, options) => {
        const { width, height, download, dispose } = options;
        const dims = [1, height, width, 4];
        return new Tensor({ location: "texture", type: "float32", texture, dims, download, dispose });
      };
      tensorFromGpuBuffer = (gpuBuffer, options) => {
        const { dataType, dims, download, dispose } = options;
        return new Tensor({ location: "gpu-buffer", type: dataType ?? "float32", gpuBuffer, dims, download, dispose });
      };
      tensorFromPinnedBuffer = (type, buffer, dims) => new Tensor({ location: "cpu-pinned", type, data: buffer, dims: dims ?? [buffer.length] });
    }
  });

  // common/dist/esm/tensor-impl-type-mapping.js
  var NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP, NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, isBigIntChecked, checkBigInt;
  var init_tensor_impl_type_mapping = __esm({
    "common/dist/esm/tensor-impl-type-mapping.js"() {
      "use strict";
      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = /* @__PURE__ */ new Map([
        ["float32", Float32Array],
        ["uint8", Uint8Array],
        ["int8", Int8Array],
        ["uint16", Uint16Array],
        ["float16", Uint16Array],
        ["int16", Int16Array],
        ["int32", Int32Array],
        ["bool", Uint8Array],
        ["float64", Float64Array],
        ["uint32", Uint32Array]
      ]);
      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = /* @__PURE__ */ new Map([
        [Float32Array, "float32"],
        [Uint8Array, "uint8"],
        [Int8Array, "int8"],
        [Uint16Array, "uint16"],
        [Int16Array, "int16"],
        [Int32Array, "int32"],
        [Float64Array, "float64"],
        [Uint32Array, "uint32"]
      ]);
      isBigIntChecked = false;
      checkBigInt = () => {
        if (!isBigIntChecked) {
          isBigIntChecked = true;
          const isBigInt64ArrayAvailable = typeof BigInt64Array !== "undefined" && typeof BigInt64Array.from === "function";
          const isBigUint64ArrayAvailable = typeof BigUint64Array !== "undefined" && typeof BigUint64Array.from === "function";
          if (isBigInt64ArrayAvailable) {
            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("int64", BigInt64Array);
            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, "int64");
          }
          if (isBigUint64ArrayAvailable) {
            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("uint64", BigUint64Array);
            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, "uint64");
          }
        }
      };
    }
  });

  // common/dist/esm/tensor-utils-impl.js
  var calculateSize, tensorReshape;
  var init_tensor_utils_impl = __esm({
    "common/dist/esm/tensor-utils-impl.js"() {
      "use strict";
      init_tensor_impl();
      calculateSize = (dims) => {
        let size = 1;
        for (let i = 0; i < dims.length; i++) {
          const dim = dims[i];
          if (typeof dim !== "number" || !Number.isSafeInteger(dim)) {
            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);
          }
          if (dim < 0) {
            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);
          }
          size *= dim;
        }
        return size;
      };
      tensorReshape = (tensor, dims) => {
        switch (tensor.location) {
          case "cpu":
            return new Tensor(tensor.type, tensor.data, dims);
          case "cpu-pinned":
            return new Tensor({
              location: "cpu-pinned",
              data: tensor.data,
              type: tensor.type,
              dims
            });
          case "texture":
            return new Tensor({
              location: "texture",
              texture: tensor.texture,
              type: tensor.type,
              dims
            });
          case "gpu-buffer":
            return new Tensor({
              location: "gpu-buffer",
              gpuBuffer: tensor.gpuBuffer,
              type: tensor.type,
              dims
            });
          default:
            throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);
        }
      };
    }
  });

  // common/dist/esm/tensor-impl.js
  var Tensor;
  var init_tensor_impl = __esm({
    "common/dist/esm/tensor-impl.js"() {
      "use strict";
      init_tensor_conversion_impl();
      init_tensor_factory_impl();
      init_tensor_impl_type_mapping();
      init_tensor_utils_impl();
      Tensor = class {
        /**
         * implementation.
         */
        constructor(arg0, arg1, arg2) {
          checkBigInt();
          let type;
          let dims;
          if (typeof arg0 === "object" && "location" in arg0) {
            this.dataLocation = arg0.location;
            type = arg0.type;
            dims = arg0.dims;
            switch (arg0.location) {
              case "cpu-pinned": {
                const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);
                if (!expectedTypedArrayConstructor) {
                  throw new TypeError(`unsupported type "${type}" to create tensor from pinned buffer`);
                }
                if (!(arg0.data instanceof expectedTypedArrayConstructor)) {
                  throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);
                }
                this.cpuData = arg0.data;
                break;
              }
              case "texture": {
                if (type !== "float32") {
                  throw new TypeError(`unsupported type "${type}" to create tensor from texture`);
                }
                this.gpuTextureData = arg0.texture;
                this.downloader = arg0.download;
                this.disposer = arg0.dispose;
                break;
              }
              case "gpu-buffer": {
                if (type !== "float32" && type !== "float16" && type !== "int32" && type !== "int64" && type !== "uint32" && type !== "bool") {
                  throw new TypeError(`unsupported type "${type}" to create tensor from gpu buffer`);
                }
                this.gpuBufferData = arg0.gpuBuffer;
                this.downloader = arg0.download;
                this.disposer = arg0.dispose;
                break;
              }
              default:
                throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);
            }
          } else {
            let data;
            let maybeDims;
            if (typeof arg0 === "string") {
              type = arg0;
              maybeDims = arg2;
              if (arg0 === "string") {
                if (!Array.isArray(arg1)) {
                  throw new TypeError("A string tensor's data must be a string array.");
                }
                data = arg1;
              } else {
                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);
                if (typedArrayConstructor === void 0) {
                  throw new TypeError(`Unsupported tensor type: ${arg0}.`);
                }
                if (Array.isArray(arg1)) {
                  if (arg0 === "float16") {
                    throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");
                  } else if (arg0 === "uint64" || arg0 === "int64") {
                    data = typedArrayConstructor.from(arg1, BigInt);
                  } else {
                    data = typedArrayConstructor.from(arg1);
                  }
                } else if (arg1 instanceof typedArrayConstructor) {
                  data = arg1;
                } else {
                  throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);
                }
              }
            } else {
              maybeDims = arg1;
              if (Array.isArray(arg0)) {
                if (arg0.length === 0) {
                  throw new TypeError("Tensor type cannot be inferred from an empty array.");
                }
                const firstElementType = typeof arg0[0];
                if (firstElementType === "string") {
                  type = "string";
                  data = arg0;
                } else if (firstElementType === "boolean") {
                  type = "bool";
                  data = Uint8Array.from(arg0);
                } else {
                  throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);
                }
              } else {
                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);
                if (mappedType === void 0) {
                  throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);
                }
                type = mappedType;
                data = arg0;
              }
            }
            if (maybeDims === void 0) {
              maybeDims = [data.length];
            } else if (!Array.isArray(maybeDims)) {
              throw new TypeError("A tensor's dims must be a number array");
            }
            dims = maybeDims;
            this.cpuData = data;
            this.dataLocation = "cpu";
          }
          const size = calculateSize(dims);
          if (this.cpuData && size !== this.cpuData.length) {
            throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);
          }
          this.type = type;
          this.dims = dims;
          this.size = size;
        }
        // #endregion
        // #region factory
        static async fromImage(image, options) {
          return tensorFromImage(image, options);
        }
        static fromTexture(texture, options) {
          return tensorFromTexture(texture, options);
        }
        static fromGpuBuffer(gpuBuffer, options) {
          return tensorFromGpuBuffer(gpuBuffer, options);
        }
        static fromPinnedBuffer(type, buffer, dims) {
          return tensorFromPinnedBuffer(type, buffer, dims);
        }
        // #endregion
        // #region conversions
        toDataURL(options) {
          return tensorToDataURL(this, options);
        }
        toImageData(options) {
          return tensorToImageData(this, options);
        }
        // #endregion
        // #region properties
        get data() {
          this.ensureValid();
          if (!this.cpuData) {
            throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");
          }
          return this.cpuData;
        }
        get location() {
          return this.dataLocation;
        }
        get texture() {
          this.ensureValid();
          if (!this.gpuTextureData) {
            throw new Error("The data is not stored as a WebGL texture.");
          }
          return this.gpuTextureData;
        }
        get gpuBuffer() {
          this.ensureValid();
          if (!this.gpuBufferData) {
            throw new Error("The data is not stored as a WebGPU buffer.");
          }
          return this.gpuBufferData;
        }
        // #endregion
        // #region methods
        async getData(releaseData) {
          this.ensureValid();
          switch (this.dataLocation) {
            case "cpu":
            case "cpu-pinned":
              return this.data;
            case "texture":
            case "gpu-buffer": {
              if (!this.downloader) {
                throw new Error("The current tensor is not created with a specified data downloader.");
              }
              if (this.isDownloading) {
                throw new Error("The current tensor is being downloaded.");
              }
              try {
                this.isDownloading = true;
                const data = await this.downloader();
                this.downloader = void 0;
                this.dataLocation = "cpu";
                this.cpuData = data;
                if (releaseData && this.disposer) {
                  this.disposer();
                  this.disposer = void 0;
                }
                return data;
              } finally {
                this.isDownloading = false;
              }
            }
            default:
              throw new Error(`cannot get data from location: ${this.dataLocation}`);
          }
        }
        dispose() {
          if (this.isDownloading) {
            throw new Error("The current tensor is being downloaded.");
          }
          if (this.disposer) {
            this.disposer();
            this.disposer = void 0;
          }
          this.cpuData = void 0;
          this.gpuTextureData = void 0;
          this.gpuBufferData = void 0;
          this.downloader = void 0;
          this.isDownloading = void 0;
          this.dataLocation = "none";
        }
        // #endregion
        // #region tensor utilities
        ensureValid() {
          if (this.dataLocation === "none") {
            throw new Error("The tensor is disposed.");
          }
        }
        reshape(dims) {
          this.ensureValid();
          if (this.downloader || this.disposer) {
            throw new Error("Cannot reshape a tensor that owns GPU resource.");
          }
          return tensorReshape(this, dims);
        }
      };
    }
  });

  // common/dist/esm/tensor.js
  var Tensor2;
  var init_tensor = __esm({
    "common/dist/esm/tensor.js"() {
      "use strict";
      init_tensor_impl();
      Tensor2 = Tensor;
    }
  });

  // common/dist/esm/inference-session-impl.js
  var InferenceSession;
  var init_inference_session_impl = __esm({
    "common/dist/esm/inference-session-impl.js"() {
      "use strict";
      init_backend_impl();
      init_tensor();
      InferenceSession = class _InferenceSession {
        constructor(handler) {
          this.handler = handler;
        }
        async run(feeds, arg1, arg2) {
          const fetches = {};
          let options = {};
          if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
            throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
          }
          let isFetchesEmpty = true;
          if (typeof arg1 === "object") {
            if (arg1 === null) {
              throw new TypeError("Unexpected argument[1]: cannot be null.");
            }
            if (arg1 instanceof Tensor2) {
              throw new TypeError("'fetches' cannot be a Tensor");
            }
            if (Array.isArray(arg1)) {
              if (arg1.length === 0) {
                throw new TypeError("'fetches' cannot be an empty array.");
              }
              isFetchesEmpty = false;
              for (const name of arg1) {
                if (typeof name !== "string") {
                  throw new TypeError("'fetches' must be a string array or an object.");
                }
                if (this.outputNames.indexOf(name) === -1) {
                  throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
                }
                fetches[name] = null;
              }
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              let isFetches = false;
              const arg1Keys = Object.getOwnPropertyNames(arg1);
              for (const name of this.outputNames) {
                if (arg1Keys.indexOf(name) !== -1) {
                  const v = arg1[name];
                  if (v === null || v instanceof Tensor2) {
                    isFetches = true;
                    isFetchesEmpty = false;
                    fetches[name] = v;
                  }
                }
              }
              if (isFetches) {
                if (typeof arg2 === "object" && arg2 !== null) {
                  options = arg2;
                } else if (typeof arg2 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else {
                options = arg1;
              }
            }
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
          }
          for (const name of this.inputNames) {
            if (typeof feeds[name] === "undefined") {
              throw new Error(`input '${name}' is missing in 'feeds'.`);
            }
          }
          if (isFetchesEmpty) {
            for (const name of this.outputNames) {
              fetches[name] = null;
            }
          }
          const results = await this.handler.run(feeds, fetches, options);
          const returnValue = {};
          for (const key in results) {
            if (Object.hasOwnProperty.call(results, key)) {
              const result = results[key];
              if (result instanceof Tensor2) {
                returnValue[key] = result;
              } else {
                returnValue[key] = new Tensor2(result.type, result.data, result.dims);
              }
            }
          }
          return returnValue;
        }
        async release() {
          return this.handler.dispose();
        }
        static async create(arg0, arg1, arg2, arg3) {
          let filePathOrUint8Array;
          let options = {};
          if (typeof arg0 === "string") {
            filePathOrUint8Array = arg0;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else if (arg0 instanceof Uint8Array) {
            filePathOrUint8Array = arg0;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else if (arg0 instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && arg0 instanceof SharedArrayBuffer) {
            const buffer = arg0;
            let byteOffset = 0;
            let byteLength = arg0.byteLength;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 === "number") {
              byteOffset = arg1;
              if (!Number.isSafeInteger(byteOffset)) {
                throw new RangeError("'byteOffset' must be an integer.");
              }
              if (byteOffset < 0 || byteOffset >= buffer.byteLength) {
                throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);
              }
              byteLength = arg0.byteLength - byteOffset;
              if (typeof arg2 === "number") {
                byteLength = arg2;
                if (!Number.isSafeInteger(byteLength)) {
                  throw new RangeError("'byteLength' must be an integer.");
                }
                if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {
                  throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);
                }
                if (typeof arg3 === "object" && arg3 !== null) {
                  options = arg3;
                } else if (typeof arg3 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'byteLength' must be a number.");
              }
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);
          } else {
            throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
          }
          const eps = options.executionProviders || [];
          const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
          const backend = await resolveBackend(backendHints);
          const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, options);
          return new _InferenceSession(handler);
        }
        startProfiling() {
          this.handler.startProfiling();
        }
        endProfiling() {
          this.handler.endProfiling();
        }
        get inputNames() {
          return this.handler.inputNames;
        }
        get outputNames() {
          return this.handler.outputNames;
        }
      };
    }
  });

  // common/dist/esm/inference-session.js
  var InferenceSession2;
  var init_inference_session = __esm({
    "common/dist/esm/inference-session.js"() {
      "use strict";
      init_inference_session_impl();
      InferenceSession2 = InferenceSession;
    }
  });

  // common/dist/esm/onnx-value.js
  var init_onnx_value = __esm({
    "common/dist/esm/onnx-value.js"() {
      "use strict";
    }
  });

  // common/dist/esm/training-session-impl.js
  var noBackendErrMsg, TrainingSession;
  var init_training_session_impl = __esm({
    "common/dist/esm/training-session-impl.js"() {
      "use strict";
      init_backend_impl();
      init_tensor();
      noBackendErrMsg = "Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.";
      TrainingSession = class _TrainingSession {
        constructor(handler, hasOptimizerModel, hasEvalModel) {
          this.handler = handler;
          this.hasOptimizerModel = hasOptimizerModel;
          this.hasEvalModel = hasEvalModel;
        }
        get trainingInputNames() {
          return this.handler.inputNames;
        }
        get trainingOutputNames() {
          return this.handler.outputNames;
        }
        get evalInputNames() {
          if (this.hasEvalModel) {
            return this.handler.evalInputNames;
          } else {
            throw new Error("This training session has no evalModel loaded.");
          }
        }
        get evalOutputNames() {
          if (this.hasEvalModel) {
            return this.handler.evalOutputNames;
          } else {
            throw new Error("This training session has no evalModel loaded.");
          }
        }
        static async create(trainingOptions, sessionOptions) {
          const evalModel = trainingOptions.evalModel || "";
          const optimizerModel = trainingOptions.optimizerModel || "";
          const options = sessionOptions || {};
          const eps = options.executionProviders || [];
          const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
          const backend = await resolveBackend(backendHints);
          if (backend.createTrainingSessionHandler) {
            const handler = await backend.createTrainingSessionHandler(trainingOptions.checkpointState, trainingOptions.trainModel, evalModel, optimizerModel, options);
            return new _TrainingSession(handler, !!trainingOptions.optimizerModel, !!trainingOptions.evalModel);
          } else {
            throw new Error(noBackendErrMsg);
          }
        }
        /**
         * Helper function for runTrainStep and future runStep methods that handles the type-narrowing conversion from
         * the given parameters to SessionHandler.FetchesType and RunOptions.
         *
         * @param inputNames the feeds object is checked that they contain all input names in the provided list of input
         * names.
         * @param outputNames the fetches object is checked that their keys match up with valid names in the list of output
         * names.
         * @param feeds the required input
         * @param arg1 narrowed & converted into the SessionHandler.FetchesType or RunOptions object
         * @param arg2 optional RunOptions object.
         * @returns
         */
        typeNarrowingForRunStep(inputNames, outputNames, feeds, arg1, arg2) {
          const fetches = {};
          let options = {};
          if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
            throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
          }
          let isFetchesEmpty = true;
          if (typeof arg1 === "object") {
            if (arg1 === null) {
              throw new TypeError("Unexpected argument[1]: cannot be null.");
            }
            if (arg1 instanceof Tensor2) {
              throw new TypeError("'fetches' cannot be a Tensor");
            }
            if (Array.isArray(arg1)) {
              if (arg1.length === 0) {
                throw new TypeError("'fetches' cannot be an empty array.");
              }
              isFetchesEmpty = false;
              for (const name of arg1) {
                if (typeof name !== "string") {
                  throw new TypeError("'fetches' must be a string array or an object.");
                }
                if (outputNames.indexOf(name) === -1) {
                  throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
                }
                fetches[name] = null;
              }
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              let isFetches = false;
              const arg1Keys = Object.getOwnPropertyNames(arg1);
              for (const name of outputNames) {
                if (arg1Keys.indexOf(name) !== -1) {
                  const v = arg1[name];
                  if (v === null || v instanceof Tensor2) {
                    isFetches = true;
                    isFetchesEmpty = false;
                    fetches[name] = v;
                  }
                }
              }
              if (isFetches) {
                if (typeof arg2 === "object" && arg2 !== null) {
                  options = arg2;
                } else if (typeof arg2 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else {
                options = arg1;
              }
            }
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
          }
          for (const name of inputNames) {
            if (typeof feeds[name] === "undefined") {
              throw new Error(`input '${name}' is missing in 'feeds'.`);
            }
          }
          if (isFetchesEmpty) {
            for (const name of outputNames) {
              fetches[name] = null;
            }
          }
          return [fetches, options];
        }
        /**
         * Helper method for runTrainStep and any other runStep methods. Takes the ReturnType result from the SessionHandler
         * and changes it into a map of Tensors.
         *
         * @param results
         * @returns
         */
        convertHandlerReturnTypeToMapOfTensors(results) {
          const returnValue = {};
          for (const key in results) {
            if (Object.hasOwnProperty.call(results, key)) {
              const result = results[key];
              if (result instanceof Tensor2) {
                returnValue[key] = result;
              } else {
                returnValue[key] = new Tensor2(result.type, result.data, result.dims);
              }
            }
          }
          return returnValue;
        }
        async lazyResetGrad() {
          await this.handler.lazyResetGrad();
        }
        async runTrainStep(feeds, arg1, arg2) {
          const [fetches, options] = this.typeNarrowingForRunStep(this.trainingInputNames, this.trainingOutputNames, feeds, arg1, arg2);
          const results = await this.handler.runTrainStep(feeds, fetches, options);
          return this.convertHandlerReturnTypeToMapOfTensors(results);
        }
        async runOptimizerStep(options) {
          if (this.hasOptimizerModel) {
            await this.handler.runOptimizerStep(options || {});
          } else {
            throw new Error("This TrainingSession has no OptimizerModel loaded.");
          }
        }
        async runEvalStep(feeds, arg1, arg2) {
          if (this.hasEvalModel) {
            const [fetches, options] = this.typeNarrowingForRunStep(this.evalInputNames, this.evalOutputNames, feeds, arg1, arg2);
            const results = await this.handler.runEvalStep(feeds, fetches, options);
            return this.convertHandlerReturnTypeToMapOfTensors(results);
          } else {
            throw new Error("This TrainingSession has no EvalModel loaded.");
          }
        }
        async getParametersSize(trainableOnly = true) {
          return this.handler.getParametersSize(trainableOnly);
        }
        async loadParametersBuffer(array, trainableOnly = true) {
          const paramsSize = await this.getParametersSize(trainableOnly);
          if (array.length !== 4 * paramsSize) {
            throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");
          }
          return this.handler.loadParametersBuffer(array, trainableOnly);
        }
        async getContiguousParameters(trainableOnly = true) {
          return this.handler.getContiguousParameters(trainableOnly);
        }
        async release() {
          return this.handler.dispose();
        }
      };
    }
  });

  // common/dist/esm/training-session.js
  var TrainingSession2;
  var init_training_session = __esm({
    "common/dist/esm/training-session.js"() {
      "use strict";
      init_training_session_impl();
      TrainingSession2 = TrainingSession;
    }
  });

  // common/dist/esm/index.js
  var esm_exports = {};
  __export(esm_exports, {
    InferenceSession: () => InferenceSession2,
    Tensor: () => Tensor2,
    TrainingSession: () => TrainingSession2,
    env: () => env2,
    registerBackend: () => registerBackend
  });
  var init_esm = __esm({
    "common/dist/esm/index.js"() {
      "use strict";
      init_backend();
      init_env();
      init_inference_session();
      init_tensor();
      init_onnx_value();
      init_training_session();
    }
  });

  // nodejs-ignore:node:os
  var cpus;
  var init_node_os = __esm({
    "nodejs-ignore:node:os"() {
      cpus = void 0;
    }
  });

  // nodejs-ignore:node:path
  var join;
  var init_node_path = __esm({
    "nodejs-ignore:node:path"() {
      join = void 0;
    }
  });

  // nodejs-ignore:fs
  var fs_exports = {};
  __export(fs_exports, {
    readFile: () => readFile
  });
  var readFile;
  var init_fs = __esm({
    "nodejs-ignore:fs"() {
      readFile = void 0;
    }
  });

  // nodejs-ignore:path
  var path_exports = {};
  __export(path_exports, {
    join: () => join2
  });
  var join2;
  var init_path = __esm({
    "nodejs-ignore:path"() {
      join2 = void 0;
    }
  });

  // web/lib/wasm/binding/ort-wasm.js
  var require_ort_wasm = __commonJS({
    "web/lib/wasm/binding/ort-wasm.js"(exports, module) {
      "use strict";
      var ortWasm = (() => {
        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
        if (typeof __filename !== "undefined")
          _scriptDir = _scriptDir || __filename;
        return function(moduleArg = {}) {
          var h = moduleArg, aa, ba;
          h.ready = new Promise((a, b) => {
            aa = a;
            ba = b;
          });
          var ca = Object.assign({}, h), da = "./this.program", ea = "object" == typeof window, m = "function" == typeof importScripts, fa = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, p = "", ha, t, w;
          if (fa) {
            var fs = (init_fs(), __toCommonJS(fs_exports)), ia = (init_path(), __toCommonJS(path_exports));
            p = m ? ia.dirname(p) + "/" : __dirname + "/";
            ha = (a, b) => {
              a = a.startsWith("file://") ? new URL(a) : ia.normalize(a);
              return fs.readFileSync(a, b ? void 0 : "utf8");
            };
            w = (a) => {
              a = ha(a, true);
              a.buffer || (a = new Uint8Array(a));
              return a;
            };
            t = (a, b, c, d = true) => {
              a = a.startsWith("file://") ? new URL(a) : ia.normalize(a);
              fs.readFile(a, d ? void 0 : "utf8", (e, g) => {
                e ? c(e) : b(d ? g.buffer : g);
              });
            };
            !h.thisProgram && 1 < process.argv.length && (da = process.argv[1].replace(/\\/g, "/"));
            process.argv.slice(2);
            h.inspect = () => "[Emscripten Module object]";
          } else if (ea || m)
            m ? p = self.location.href : "undefined" != typeof document && document.currentScript && (p = document.currentScript.src), _scriptDir && (p = _scriptDir), 0 !== p.indexOf("blob:") ? p = p.substr(0, p.replace(/[?#].*/, "").lastIndexOf("/") + 1) : p = "", ha = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.send(null);
              return b.responseText;
            }, m && (w = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.responseType = "arraybuffer";
              b.send(null);
              return new Uint8Array(b.response);
            }), t = (a, b, c) => {
              var d = new XMLHttpRequest();
              d.open("GET", a, true);
              d.responseType = "arraybuffer";
              d.onload = () => {
                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
              };
              d.onerror = c;
              d.send(null);
            };
          var ja = console.log.bind(console), x = console.error.bind(console);
          Object.assign(h, ca);
          ca = null;
          "object" != typeof WebAssembly && ka("no native wasm support detected");
          var z, la = false, A, B, C, D, E, G, ma, na, oa, pa;
          function qa() {
            var a = z.buffer;
            h.HEAP8 = A = new Int8Array(a);
            h.HEAP16 = C = new Int16Array(a);
            h.HEAPU8 = B = new Uint8Array(a);
            h.HEAPU16 = D = new Uint16Array(a);
            h.HEAP32 = E = new Int32Array(a);
            h.HEAPU32 = G = new Uint32Array(a);
            h.HEAPF32 = ma = new Float32Array(a);
            h.HEAPF64 = pa = new Float64Array(a);
            h.HEAP64 = na = new BigInt64Array(a);
            h.HEAPU64 = oa = new BigUint64Array(a);
          }
          var ra = [], sa = [], ta = [], I = 0, ua = null, J = null;
          function ka(a) {
            a = "Aborted(" + a + ")";
            x(a);
            la = true;
            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
            ba(a);
            throw a;
          }
          function va(a) {
            return a.startsWith("data:application/octet-stream;base64,");
          }
          var K;
          K = "ort-wasm.wasm";
          if (!va(K)) {
            var wa = K;
            K = h.locateFile ? h.locateFile(wa, p) : p + wa;
          }
          function xa(a) {
            if (w)
              return w(a);
            throw "both async and sync fetching of the wasm failed";
          }
          function ya(a) {
            if (ea || m) {
              if ("function" == typeof fetch && !a.startsWith("file://"))
                return fetch(a, { credentials: "same-origin" }).then((b) => {
                  if (!b.ok)
                    throw "failed to load wasm binary file at '" + a + "'";
                  return b.arrayBuffer();
                }).catch(() => xa(a));
              if (t)
                return new Promise((b, c) => {
                  t(a, (d) => b(new Uint8Array(d)), c);
                });
            }
            return Promise.resolve().then(() => xa(a));
          }
          function za(a, b, c) {
            return ya(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {
              x(`failed to asynchronously prepare wasm: ${d}`);
              ka(d);
            });
          }
          function Aa(a, b) {
            var c = K;
            return "function" != typeof WebAssembly.instantiateStreaming || va(c) || c.startsWith("file://") || fa || "function" != typeof fetch ? za(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(e) {
              x(`wasm streaming compile failed: ${e}`);
              x("falling back to ArrayBuffer instantiation");
              return za(c, a, b);
            }));
          }
          function Ba(a) {
            this.Va = a - 24;
            this.fb = function(b) {
              G[this.Va + 4 >>> 2 >>> 0] = b;
            };
            this.eb = function(b) {
              G[this.Va + 8 >>> 2 >>> 0] = b;
            };
            this.Za = function(b, c) {
              this.$a();
              this.fb(b);
              this.eb(c);
            };
            this.$a = function() {
              G[this.Va + 16 >>> 2 >>> 0] = 0;
            };
          }
          var Ca = 0, Da = 0, Ea = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Fa = (a, b, c) => {
            b >>>= 0;
            var d = b + c;
            for (c = b; a[c] && !(c >= d); )
              ++c;
            if (16 < c - b && a.buffer && Ea)
              return Ea.decode(a.subarray(b, c));
            for (d = ""; b < c; ) {
              var e = a[b++];
              if (e & 128) {
                var g = a[b++] & 63;
                if (192 == (e & 224))
                  d += String.fromCharCode((e & 31) << 6 | g);
                else {
                  var l = a[b++] & 63;
                  e = 224 == (e & 240) ? (e & 15) << 12 | g << 6 | l : (e & 7) << 18 | g << 12 | l << 6 | a[b++] & 63;
                  65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));
                }
              } else
                d += String.fromCharCode(e);
            }
            return d;
          }, L = (a, b) => (a >>>= 0) ? Fa(B, a, b) : "", M = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
            }
            return b;
          }, N = (a, b, c, d) => {
            c >>>= 0;
            if (!(0 < d))
              return 0;
            var e = c;
            d = c + d - 1;
            for (var g = 0; g < a.length; ++g) {
              var l = a.charCodeAt(g);
              if (55296 <= l && 57343 >= l) {
                var k = a.charCodeAt(++g);
                l = 65536 + ((l & 1023) << 10) | k & 1023;
              }
              if (127 >= l) {
                if (c >= d)
                  break;
                b[c++ >>> 0] = l;
              } else {
                if (2047 >= l) {
                  if (c + 1 >= d)
                    break;
                  b[c++ >>> 0] = 192 | l >> 6;
                } else {
                  if (65535 >= l) {
                    if (c + 2 >= d)
                      break;
                    b[c++ >>> 0] = 224 | l >> 12;
                  } else {
                    if (c + 3 >= d)
                      break;
                    b[c++ >>> 0] = 240 | l >> 18;
                    b[c++ >>> 0] = 128 | l >> 12 & 63;
                  }
                  b[c++ >>> 0] = 128 | l >> 6 & 63;
                }
                b[c++ >>> 0] = 128 | l & 63;
              }
            }
            b[c >>> 0] = 0;
            return c - e;
          }, Ga = (a) => {
            if (null === a)
              return "null";
            var b = typeof a;
            return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;
          }, Ha, O = (a) => {
            for (var b = ""; B[a >>> 0]; )
              b += Ha[B[a++ >>> 0]];
            return b;
          }, Ia = {}, Ja = {}, Ka = {}, P;
          function La(a, b, c = {}) {
            var d = b.name;
            if (!a)
              throw new P(`type "${d}" must have a positive integer typeid pointer`);
            if (Ja.hasOwnProperty(a)) {
              if (c.gb)
                return;
              throw new P(`Cannot register type '${d}' twice`);
            }
            Ja[a] = b;
            delete Ka[a];
            Ia.hasOwnProperty(a) && (b = Ia[a], delete Ia[a], b.forEach((e) => e()));
          }
          function Q(a, b, c = {}) {
            if (!("argPackAdvance" in b))
              throw new TypeError("registerType registeredInstance requires argPackAdvance");
            La(a, b, c);
          }
          var Ma = (a, b, c) => {
            switch (b) {
              case 1:
                return c ? (d) => A[d >>> 0 >>> 0] : (d) => B[d >>> 0 >>> 0];
              case 2:
                return c ? (d) => C[d >>> 1 >>> 0] : (d) => D[d >>> 1 >>> 0];
              case 4:
                return c ? (d) => E[d >>> 2 >>> 0] : (d) => G[d >>> 2 >>> 0];
              case 8:
                return c ? (d) => na[d >>> 3] : (d) => oa[d >>> 3];
              default:
                throw new TypeError(`invalid integer width (${b}): ${a}`);
            }
          };
          function Na() {
            this.Sa = [void 0];
            this.bb = [];
          }
          var R = new Na();
          function Oa(a) {
            a >>>= 0;
            a >= R.Va && 0 === --R.get(a).cb && R.$a(a);
          }
          var S = (a) => {
            if (!a)
              throw new P("Cannot use deleted val. handle = " + a);
            return R.get(a).value;
          }, T = (a) => {
            switch (a) {
              case void 0:
                return 1;
              case null:
                return 2;
              case true:
                return 3;
              case false:
                return 4;
              default:
                return R.Za({ cb: 1, value: a });
            }
          };
          function Pa(a) {
            return this.fromWireType(E[a >>> 2 >>> 0]);
          }
          var Qa = (a, b) => {
            switch (b) {
              case 4:
                return function(c) {
                  return this.fromWireType(ma[c >>> 2 >>> 0]);
                };
              case 8:
                return function(c) {
                  return this.fromWireType(pa[c >>> 3 >>> 0]);
                };
              default:
                throw new TypeError(`invalid float width (${b}): ${a}`);
            }
          };
          function Ra(a) {
            return this.fromWireType(G[a >>> 2 >>> 0]);
          }
          var Sa = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, Ta = (a, b) => {
            var c = a >> 1;
            for (var d = c + b / 2; !(c >= d) && D[c >>> 0]; )
              ++c;
            c <<= 1;
            if (32 < c - a && Sa)
              return Sa.decode(B.subarray(a >>> 0, c >>> 0));
            c = "";
            for (d = 0; !(d >= b / 2); ++d) {
              var e = C[a + 2 * d >>> 1 >>> 0];
              if (0 == e)
                break;
              c += String.fromCharCode(e);
            }
            return c;
          }, Ua = (a, b, c) => {
            void 0 === c && (c = 2147483647);
            if (2 > c)
              return 0;
            c -= 2;
            var d = b;
            c = c < 2 * a.length ? c / 2 : a.length;
            for (var e = 0; e < c; ++e)
              C[b >>> 1 >>> 0] = a.charCodeAt(e), b += 2;
            C[b >>> 1 >>> 0] = 0;
            return b - d;
          }, Va = (a) => 2 * a.length, Wa = (a, b) => {
            for (var c = 0, d = ""; !(c >= b / 4); ) {
              var e = E[a + 4 * c >>> 2 >>> 0];
              if (0 == e)
                break;
              ++c;
              65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e);
            }
            return d;
          }, Xa = (a, b, c) => {
            b >>>= 0;
            void 0 === c && (c = 2147483647);
            if (4 > c)
              return 0;
            var d = b;
            c = d + c - 4;
            for (var e = 0; e < a.length; ++e) {
              var g = a.charCodeAt(e);
              if (55296 <= g && 57343 >= g) {
                var l = a.charCodeAt(++e);
                g = 65536 + ((g & 1023) << 10) | l & 1023;
              }
              E[b >>> 2 >>> 0] = g;
              b += 4;
              if (b + 4 > c)
                break;
            }
            E[b >>> 2 >>> 0] = 0;
            return b - d;
          }, Ya = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              55296 <= d && 57343 >= d && ++c;
              b += 4;
            }
            return b;
          }, V = (a, b) => {
            var c = Ja[a];
            if (void 0 === c)
              throw a = Za(a), c = O(a), U(a), new P(b + " has unknown type " + c);
            return c;
          }, $a = {}, W = (a) => {
            var b = $a[a];
            return void 0 === b ? O(a) : b;
          }, X = [], bb = () => "object" == typeof globalThis ? globalThis : Function("return this")(), cb = (a) => {
            var b = X.length;
            X.push(a);
            return b;
          }, db = (a, b) => {
            for (var c = Array(a), d = 0; d < a; ++d)
              c[d] = V(G[b + 4 * d >>> 2 >>> 0], "parameter " + d);
            return c;
          }, eb = (a) => {
            if (void 0 === a)
              return "_unknown";
            a = a.replace(/[^a-zA-Z0-9_]/g, "$");
            var b = a.charCodeAt(0);
            return 48 <= b && 57 >= b ? `_${a}` : a;
          }, fb = {};
          function gb(a, b) {
            a = eb(a);
            return { [a]: function() {
              return b.apply(this, arguments);
            } }[a];
          }
          function hb(a) {
            var b = Function;
            if (!(b instanceof Function))
              throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);
            var c = gb(b.name || "unknownFunctionName", function() {
            });
            c.prototype = b.prototype;
            c = new c();
            a = b.apply(c, a);
            return a instanceof Object ? a : c;
          }
          var ib = (a) => {
            for (var b = "", c = 0; c < a; ++c)
              b += (0 !== c ? ", " : "") + "arg" + c;
            var d = "return function emval_allocator_" + a + "(constructor, argTypes, args) {\n  var HEAPU32 = getMemory();\n";
            for (c = 0; c < a; ++c)
              d += "var argType" + c + " = requireRegisteredType(HEAPU32[((argTypes)>>>2)], 'parameter " + c + "');\nvar arg" + c + " = argType" + c + ".readValueFromPointer(args);\nargs += argType" + c + "['argPackAdvance'];\nargTypes += 4;\n";
            return new Function("requireRegisteredType", "Module", "valueToHandle", "getMemory", d + ("var obj = new constructor(" + b + ");\nreturn valueToHandle(obj);\n}\n"))(V, h, T, () => G);
          }, jb = {}, Y = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), kb = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], lb = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], nb = (a) => {
            var b = M(a) + 1, c = mb(b);
            c && N(a, B, c, b);
            return c;
          }, ob = {}, qb = () => {
            if (!pb) {
              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: da || "./this.program" }, b;
              for (b in ob)
                void 0 === ob[b] ? delete a[b] : a[b] = ob[b];
              var c = [];
              for (b in a)
                c.push(`${b}=${a[b]}`);
              pb = c;
            }
            return pb;
          }, pb, rb = [null, [], []], sb = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], tb = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          function ub(a) {
            var b = Array(M(a) + 1);
            N(a, b, 0, b.length);
            return b;
          }
          function vb(a, b, c, d) {
            function e(f, r, u) {
              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < r; )
                f = u[0] + f;
              return f;
            }
            function g(f, r) {
              return e(f, r, "0");
            }
            function l(f, r) {
              function u(ab) {
                return 0 > ab ? -1 : 0 < ab ? 1 : 0;
              }
              var H;
              0 === (H = u(f.getFullYear() - r.getFullYear())) && 0 === (H = u(f.getMonth() - r.getMonth())) && (H = u(f.getDate() - r.getDate()));
              return H;
            }
            function k(f) {
              switch (f.getDay()) {
                case 0:
                  return new Date(f.getFullYear() - 1, 11, 29);
                case 1:
                  return f;
                case 2:
                  return new Date(f.getFullYear(), 0, 3);
                case 3:
                  return new Date(
                    f.getFullYear(),
                    0,
                    2
                  );
                case 4:
                  return new Date(f.getFullYear(), 0, 1);
                case 5:
                  return new Date(f.getFullYear() - 1, 11, 31);
                case 6:
                  return new Date(f.getFullYear() - 1, 11, 30);
              }
            }
            function n(f) {
              var r = f.Ta;
              for (f = new Date(new Date(f.Ua + 1900, 0, 1).getTime()); 0 < r; ) {
                var u = f.getMonth(), H = (Y(f.getFullYear()) ? sb : tb)[u];
                if (r > H - f.getDate())
                  r -= H - f.getDate() + 1, f.setDate(1), 11 > u ? f.setMonth(u + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));
                else {
                  f.setDate(f.getDate() + r);
                  break;
                }
              }
              u = new Date(f.getFullYear() + 1, 0, 4);
              r = k(new Date(
                f.getFullYear(),
                0,
                4
              ));
              u = k(u);
              return 0 >= l(r, f) ? 0 >= l(u, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;
            }
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            var q = G[d + 40 >>> 2 >>> 0];
            d = { kb: E[d >>> 2 >>> 0], jb: E[d + 4 >>> 2 >>> 0], Xa: E[d + 8 >>> 2 >>> 0], ab: E[d + 12 >>> 2 >>> 0], Ya: E[d + 16 >>> 2 >>> 0], Ua: E[d + 20 >>> 2 >>> 0], Oa: E[d + 24 >>> 2 >>> 0], Ta: E[d + 28 >>> 2 >>> 0], mb: E[d + 32 >>> 2 >>> 0], ib: E[d + 36 >>> 2 >>> 0], lb: q ? L(q) : "" };
            c = L(c);
            q = {
              "%c": "%a %b %d %H:%M:%S %Y",
              "%D": "%m/%d/%y",
              "%F": "%Y-%m-%d",
              "%h": "%b",
              "%r": "%I:%M:%S %p",
              "%R": "%H:%M",
              "%T": "%H:%M:%S",
              "%x": "%m/%d/%y",
              "%X": "%H:%M:%S",
              "%Ec": "%c",
              "%EC": "%C",
              "%Ex": "%m/%d/%y",
              "%EX": "%H:%M:%S",
              "%Ey": "%y",
              "%EY": "%Y",
              "%Od": "%d",
              "%Oe": "%e",
              "%OH": "%H",
              "%OI": "%I",
              "%Om": "%m",
              "%OM": "%M",
              "%OS": "%S",
              "%Ou": "%u",
              "%OU": "%U",
              "%OV": "%V",
              "%Ow": "%w",
              "%OW": "%W",
              "%Oy": "%y"
            };
            for (var v in q)
              c = c.replace(new RegExp(v, "g"), q[v]);
            var y = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), F = "January February March April May June July August September October November December".split(" ");
            q = { "%a": (f) => y[f.Oa].substring(0, 3), "%A": (f) => y[f.Oa], "%b": (f) => F[f.Ya].substring(0, 3), "%B": (f) => F[f.Ya], "%C": (f) => g((f.Ua + 1900) / 100 | 0, 2), "%d": (f) => g(f.ab, 2), "%e": (f) => e(f.ab, 2, " "), "%g": (f) => n(f).toString().substring(2), "%G": (f) => n(f), "%H": (f) => g(f.Xa, 2), "%I": (f) => {
              f = f.Xa;
              0 == f ? f = 12 : 12 < f && (f -= 12);
              return g(f, 2);
            }, "%j": (f) => {
              for (var r = 0, u = 0; u <= f.Ya - 1; r += (Y(f.Ua + 1900) ? sb : tb)[u++])
                ;
              return g(f.ab + r, 3);
            }, "%m": (f) => g(f.Ya + 1, 2), "%M": (f) => g(f.jb, 2), "%n": () => "\n", "%p": (f) => 0 <= f.Xa && 12 > f.Xa ? "AM" : "PM", "%S": (f) => g(f.kb, 2), "%t": () => "	", "%u": (f) => f.Oa || 7, "%U": (f) => g(Math.floor((f.Ta + 7 - f.Oa) / 7), 2), "%V": (f) => {
              var r = Math.floor((f.Ta + 7 - (f.Oa + 6) % 7) / 7);
              2 >= (f.Oa + 371 - f.Ta - 2) % 7 && r++;
              if (r)
                53 == r && (u = (f.Oa + 371 - f.Ta) % 7, 4 == u || 3 == u && Y(f.Ua) || (r = 1));
              else {
                r = 52;
                var u = (f.Oa + 7 - f.Ta - 1) % 7;
                (4 == u || 5 == u && Y(f.Ua % 400 - 1)) && r++;
              }
              return g(r, 2);
            }, "%w": (f) => f.Oa, "%W": (f) => g(Math.floor((f.Ta + 7 - (f.Oa + 6) % 7) / 7), 2), "%y": (f) => (f.Ua + 1900).toString().substring(2), "%Y": (f) => f.Ua + 1900, "%z": (f) => {
              f = f.ib;
              var r = 0 <= f;
              f = Math.abs(f) / 60;
              return (r ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);
            }, "%Z": (f) => f.lb, "%%": () => "%" };
            c = c.replace(/%%/g, "\0\0");
            for (v in q)
              c.includes(v) && (c = c.replace(new RegExp(v, "g"), q[v](d)));
            c = c.replace(/\0\0/g, "%");
            v = ub(c);
            if (v.length > b)
              return 0;
            A.set(v, a >>> 0);
            return v.length - 1;
          }
          for (var wb = Array(256), xb = 0; 256 > xb; ++xb)
            wb[xb] = String.fromCharCode(xb);
          Ha = wb;
          P = h.BindingError = class extends Error {
            constructor(a) {
              super(a);
              this.name = "BindingError";
            }
          };
          h.InternalError = class extends Error {
            constructor(a) {
              super(a);
              this.name = "InternalError";
            }
          };
          Object.assign(Na.prototype, { get(a) {
            return this.Sa[a];
          }, has(a) {
            return void 0 !== this.Sa[a];
          }, Za(a) {
            var b = this.bb.pop() || this.Sa.length;
            this.Sa[b] = a;
            return b;
          }, $a(a) {
            this.Sa[a] = void 0;
            this.bb.push(a);
          } });
          R.Sa.push({ value: void 0 }, { value: null }, { value: true }, { value: false });
          R.Va = R.Sa.length;
          h.count_emval_handles = () => {
            for (var a = 0, b = R.Va; b < R.Sa.length; ++b)
              void 0 !== R.Sa[b] && ++a;
            return a;
          };
          var yb = { a: function(a, b, c) {
            a >>>= 0;
            new Ba(a).Za(b >>> 0, c >>> 0);
            Ca = a;
            Da++;
            throw Ca;
          }, v: function() {
            return 0;
          }, ba: function() {
          }, N: function() {
          }, P: function() {
          }, H: function() {
            return 0;
          }, $: function() {
          }, V: function() {
          }, _: function() {
          }, A: function() {
          }, O: function() {
          }, L: function() {
          }, aa: function() {
          }, M: function() {
          }, D: function(a, b, c, d, e) {
            b >>>= 0;
            b = O(b);
            var g = -1 != b.indexOf("u");
            g && (e = (1n << 64n) - 1n);
            Q(a >>> 0, { name: b, fromWireType: (l) => l, toWireType: function(l, k) {
              if ("bigint" != typeof k && "number" != typeof k)
                throw new TypeError(`Cannot convert "${Ga(k)}" to ${this.name}`);
              if (k < d || k > e)
                throw new TypeError(`Passing a number "${Ga(k)}" from JS side to C/C++ side to an argument of type "${b}", which is outside the valid range [${d}, ${e}]!`);
              return k;
            }, argPackAdvance: 8, readValueFromPointer: Ma(b, c >>> 0, !g), Wa: null });
          }, ea: function(a, b, c, d) {
            b = O(b >>> 0);
            Q(a >>> 0, { name: b, fromWireType: function(e) {
              return !!e;
            }, toWireType: function(e, g) {
              return g ? c : d;
            }, argPackAdvance: 8, readValueFromPointer: function(e) {
              return this.fromWireType(B[e >>> 0]);
            }, Wa: null });
          }, da: function(a, b) {
            b = O(b >>> 0);
            Q(a >>> 0, {
              name: b,
              fromWireType: (c) => {
                var d = S(c);
                Oa(c);
                return d;
              },
              toWireType: (c, d) => T(d),
              argPackAdvance: 8,
              readValueFromPointer: Pa,
              Wa: null
            });
          }, C: function(a, b, c) {
            b = O(b >>> 0);
            Q(a >>> 0, { name: b, fromWireType: (d) => d, toWireType: (d, e) => e, argPackAdvance: 8, readValueFromPointer: Qa(b, c >>> 0), Wa: null });
          }, p: function(a, b, c, d, e) {
            a >>>= 0;
            c >>>= 0;
            b = O(b >>> 0);
            -1 === e && (e = 4294967295);
            e = (k) => k;
            if (0 === d) {
              var g = 32 - 8 * c;
              e = (k) => k << g >>> g;
            }
            var l = b.includes("unsigned") ? function(k, n) {
              return n >>> 0;
            } : function(k, n) {
              return n;
            };
            Q(a, {
              name: b,
              fromWireType: e,
              toWireType: l,
              argPackAdvance: 8,
              readValueFromPointer: Ma(b, c, 0 !== d),
              Wa: null
            });
          }, l: function(a, b, c) {
            function d(g) {
              return new e(A.buffer, G[g + 4 >>> 2 >>> 0], G[g >>> 2 >>> 0]);
            }
            var e = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][b];
            c = O(c >>> 0);
            Q(a >>> 0, { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d }, { gb: true });
          }, E: function(a, b) {
            b = O(b >>> 0);
            var c = "std::string" === b;
            Q(a >>> 0, { name: b, fromWireType: function(d) {
              var e = G[d >>> 2 >>> 0], g = d + 4;
              if (c)
                for (var l = g, k = 0; k <= e; ++k) {
                  var n = g + k;
                  if (k == e || 0 == B[n >>> 0]) {
                    l = L(l, n - l);
                    if (void 0 === q)
                      var q = l;
                    else
                      q += String.fromCharCode(0), q += l;
                    l = n + 1;
                  }
                }
              else {
                q = Array(e);
                for (k = 0; k < e; ++k)
                  q[k] = String.fromCharCode(B[g + k >>> 0]);
                q = q.join("");
              }
              U(d);
              return q;
            }, toWireType: function(d, e) {
              e instanceof ArrayBuffer && (e = new Uint8Array(e));
              var g = "string" == typeof e;
              if (!(g || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array))
                throw new P("Cannot pass non-string to std::string");
              var l = c && g ? M(e) : e.length;
              var k = mb(4 + l + 1), n = k + 4;
              G[k >>> 2 >>> 0] = l;
              if (c && g)
                N(e, B, n, l + 1);
              else if (g)
                for (g = 0; g < l; ++g) {
                  var q = e.charCodeAt(g);
                  if (255 < q)
                    throw U(n), new P("String has UTF-16 code units that do not fit in 8 bits");
                  B[n + g >>> 0] = q;
                }
              else
                for (g = 0; g < l; ++g)
                  B[n + g >>> 0] = e[g];
              null !== d && d.push(U, k);
              return k;
            }, argPackAdvance: 8, readValueFromPointer: Ra, Wa(d) {
              U(d);
            } });
          }, x: function(a, b, c) {
            b >>>= 0;
            c >>>= 0;
            c = O(c);
            if (2 === b) {
              var d = Ta;
              var e = Ua;
              var g = Va;
              var l = () => D;
              var k = 1;
            } else
              4 === b && (d = Wa, e = Xa, g = Ya, l = () => G, k = 2);
            Q(a >>> 0, { name: c, fromWireType: (n) => {
              for (var q = G[n >>> 2 >>> 0], v = l(), y, F = n + 4, f = 0; f <= q; ++f) {
                var r = n + 4 + f * b;
                if (f == q || 0 == v[r >>> k])
                  F = d(F, r - F), void 0 === y ? y = F : (y += String.fromCharCode(0), y += F), F = r + b;
              }
              U(n);
              return y;
            }, toWireType: (n, q) => {
              if ("string" != typeof q)
                throw new P(`Cannot pass non-string to C++ string type ${c}`);
              var v = g(q), y = mb(4 + v + b);
              G[y >>> 2] = v >> k;
              e(q, y + 4, v + b);
              null !== n && n.push(U, y);
              return y;
            }, argPackAdvance: 8, readValueFromPointer: Pa, Wa(n) {
              U(n);
            } });
          }, fa: function(a, b) {
            b = O(b >>> 0);
            Q(a >>> 0, { hb: true, name: b, argPackAdvance: 0, fromWireType: () => {
            }, toWireType: () => {
            } });
          }, ca: () => true, o: function(a, b, c) {
            b >>>= 0;
            c >>>= 0;
            a = S(a >>> 0);
            b = V(b, "emval::as");
            var d = [], e = T(d);
            G[c >>> 2 >>> 0] = e;
            return b.toWireType(d, a);
          }, h: function(a, b, c, d, e) {
            c >>>= 0;
            d >>>= 0;
            e >>>= 0;
            a = X[a >>> 0];
            b = S(b >>> 0);
            c = W(c);
            var g = [];
            G[d >>> 2 >>> 0] = T(g);
            return a(b, c, g, e);
          }, r: function(a, b, c, d) {
            c >>>= 0;
            d >>>= 0;
            a = X[a >>> 0];
            b = S(b >>> 0);
            c = W(c);
            a(b, c, null, d);
          }, b: Oa, F: function(a, b) {
            b >>>= 0;
            a = S(a >>> 0);
            b = S(b);
            return a == b;
          }, u: function(a) {
            a >>>= 0;
            if (0 === a)
              return T(bb());
            a = W(a);
            return T(bb()[a]);
          }, g: function(a, b) {
            var c = db(a, b >>> 0), d = c[0];
            b = d.name + "_$" + c.slice(1).map(function(v) {
              return v.name;
            }).join("_") + "$";
            var e = fb[b];
            if (void 0 !== e)
              return e;
            e = ["retType"];
            for (var g = [d], l = "", k = 0; k < a - 1; ++k)
              l += (0 !== k ? ", " : "") + "arg" + k, e.push("argType" + k), g.push(c[1 + k]);
            var n = "return function " + eb("methodCaller_" + b) + "(handle, name, destructors, args) {\n", q = 0;
            for (k = 0; k < a - 1; ++k)
              n += "    var arg" + k + " = argType" + k + ".readValueFromPointer(args" + (q ? "+" + q : "") + ");\n", q += c[k + 1].argPackAdvance;
            n += "    var rv = handle[name](" + l + ");\n";
            for (k = 0; k < a - 1; ++k)
              c[k + 1].deleteObject && (n += "    argType" + k + ".deleteObject(arg" + k + ");\n");
            d.hb || (n += "    return retType.toWireType(destructors, rv);\n");
            e.push(n + "};\n");
            a = hb(e).apply(null, g);
            e = cb(a);
            return fb[b] = e;
          }, q: function(a, b) {
            b >>>= 0;
            a = S(a >>> 0);
            b = S(b);
            return T(a[b]);
          }, c: function(a) {
            a >>>= 0;
            4 < a && (R.get(a).cb += 1);
          }, G: function(a, b, c, d) {
            c >>>= 0;
            d >>>= 0;
            a = S(a >>> 0);
            var e = jb[b];
            e || (e = ib(b), jb[b] = e);
            return e(a, c, d);
          }, s: function() {
            return T([]);
          }, k: function(a) {
            a = S(a >>> 0);
            for (var b = Array(a.length), c = 0; c < a.length; c++)
              b[c] = a[c];
            return T(b);
          }, d: function(a) {
            return T(W(a >>> 0));
          }, j: function() {
            return T({});
          }, f: function(a) {
            a >>>= 0;
            for (var b = S(a); b.length; ) {
              var c = b.pop();
              b.pop()(c);
            }
            Oa(a);
          }, i: function(a, b, c) {
            b >>>= 0;
            c >>>= 0;
            a = S(a >>> 0);
            b = S(b);
            c = S(c);
            a[b] = c;
          }, e: function(a, b) {
            b >>>= 0;
            a = V(a >>> 0, "_emval_take_value");
            a = a.readValueFromPointer(b);
            return T(a);
          }, S: function(a, b) {
            a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
            b >>>= 0;
            a = new Date(1e3 * a);
            E[b >>> 2 >>> 0] = a.getUTCSeconds();
            E[b + 4 >>> 2 >>> 0] = a.getUTCMinutes();
            E[b + 8 >>> 2 >>> 0] = a.getUTCHours();
            E[b + 12 >>> 2 >>> 0] = a.getUTCDate();
            E[b + 16 >>> 2 >>> 0] = a.getUTCMonth();
            E[b + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;
            E[b + 24 >>> 2 >>> 0] = a.getUTCDay();
            E[b + 28 >>> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
          }, T: function(a, b) {
            a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
            b >>>= 0;
            a = new Date(1e3 * a);
            E[b >>> 2 >>> 0] = a.getSeconds();
            E[b + 4 >>> 2 >>> 0] = a.getMinutes();
            E[b + 8 >>> 2 >>> 0] = a.getHours();
            E[b + 12 >>> 2 >>> 0] = a.getDate();
            E[b + 16 >>> 2 >>> 0] = a.getMonth();
            E[b + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;
            E[b + 24 >>> 2 >>> 0] = a.getDay();
            E[b + 28 >>> 2 >>> 0] = (Y(a.getFullYear()) ? kb : lb)[a.getMonth()] + a.getDate() - 1 | 0;
            E[b + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());
            var c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset(), d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
            E[b + 32 >>> 2 >>> 0] = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;
          }, U: function(a) {
            a >>>= 0;
            var b = new Date(E[a + 20 >>> 2 >>> 0] + 1900, E[a + 16 >>> 2 >>> 0], E[a + 12 >>> 2 >>> 0], E[a + 8 >>> 2 >>> 0], E[a + 4 >>> 2 >>> 0], E[a >>> 2 >>> 0], 0), c = E[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), e = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), g = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), l = Math.min(
              g,
              e
            );
            0 > c ? E[a + 32 >>> 2 >>> 0] = Number(e != g && l == d) : 0 < c != (l == d) && (e = Math.max(g, e), b.setTime(b.getTime() + 6e4 * ((0 < c ? l : e) - d)));
            E[a + 24 >>> 2 >>> 0] = b.getDay();
            E[a + 28 >>> 2 >>> 0] = (Y(b.getFullYear()) ? kb : lb)[b.getMonth()] + b.getDate() - 1 | 0;
            E[a >>> 2 >>> 0] = b.getSeconds();
            E[a + 4 >>> 2 >>> 0] = b.getMinutes();
            E[a + 8 >>> 2 >>> 0] = b.getHours();
            E[a + 12 >>> 2 >>> 0] = b.getDate();
            E[a + 16 >>> 2 >>> 0] = b.getMonth();
            E[a + 20 >>> 2 >>> 0] = b.getYear();
            return BigInt(b.getTime() / 1e3);
          }, Q: function() {
            return -52;
          }, R: function() {
          }, J: function(a, b, c) {
            function d(n) {
              return (n = n.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? n[1] : "GMT";
            }
            c >>>= 0;
            var e = (/* @__PURE__ */ new Date()).getFullYear(), g = new Date(e, 0, 1), l = new Date(e, 6, 1);
            e = g.getTimezoneOffset();
            var k = l.getTimezoneOffset();
            G[a >>> 0 >>> 2 >>> 0] = 60 * Math.max(e, k);
            E[b >>> 0 >>> 2 >>> 0] = Number(e != k);
            a = d(g);
            b = d(l);
            a = nb(a);
            b = nb(b);
            k < e ? (G[c >>> 2 >>> 0] = a, G[c + 4 >>> 2 >>> 0] = b) : (G[c >>> 2 >>> 0] = b, G[c + 4 >>> 2 >>> 0] = a);
          }, t: () => {
            ka("");
          }, B: () => Date.now(), K: function() {
            return 4294901760;
          }, n: () => performance.now(), Z: function(a, b, c) {
            b >>>= 0;
            return B.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);
          }, I: function(a) {
            a >>>= 0;
            var b = B.length;
            if (4294901760 < a)
              return false;
            for (var c = 1; 4 >= c; c *= 2) {
              var d = b * (1 + 0.2 / c);
              d = Math.min(d, a + 100663296);
              var e = Math;
              d = Math.max(a, d);
              a: {
                e = (e.min.call(e, 4294901760, d + (65536 - d % 65536) % 65536) - z.buffer.byteLength + 65535) / 65536;
                try {
                  z.grow(e);
                  qa();
                  var g = 1;
                  break a;
                } catch (l) {
                }
                g = void 0;
              }
              if (g)
                return true;
            }
            return false;
          }, X: function(a, b) {
            a >>>= 0;
            b >>>= 0;
            var c = 0;
            qb().forEach((d, e) => {
              var g = b + c;
              e = G[a + 4 * e >>> 2 >>> 0] = g;
              for (g = 0; g < d.length; ++g)
                A[e++ >>> 0 >>> 0] = d.charCodeAt(g);
              A[e >>> 0 >>> 0] = 0;
              c += d.length + 1;
            });
            return 0;
          }, Y: function(a, b) {
            a >>>= 0;
            b >>>= 0;
            var c = qb();
            G[a >>> 2 >>> 0] = c.length;
            var d = 0;
            c.forEach((e) => d += e.length + 1);
            G[b >>> 2 >>> 0] = d;
            return 0;
          }, w: () => 52, z: function() {
            return 52;
          }, W: function() {
            return 70;
          }, y: function(a, b, c, d) {
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            for (var e = 0, g = 0; g < c; g++) {
              var l = G[b >>> 2 >>> 0], k = G[b + 4 >>> 2 >>> 0];
              b += 8;
              for (var n = 0; n < k; n++) {
                var q = B[l + n >>> 0], v = rb[a];
                0 === q || 10 === q ? ((1 === a ? ja : x)(Fa(v, 0)), v.length = 0) : v.push(q);
              }
              e += k;
            }
            G[d >>> 2 >>> 0] = e;
            return 0;
          }, ga: vb, m: function(a, b, c, d) {
            return vb(a >>> 0, b >>> 0, c >>> 0, d >>> 0);
          } }, Z = function() {
            var a = { a: yb };
            I++;
            Aa(a, function(b) {
              Z = b.instance.exports;
              Z = zb();
              z = Z.ha;
              qa();
              sa.unshift(Z.ia);
              I--;
              0 == I && (null !== ua && (clearInterval(ua), ua = null), J && (b = J, J = null, b()));
            }).catch(ba);
            return {};
          }();
          h._OrtInit = (a, b) => (h._OrtInit = Z.ja)(a, b);
          h._OrtGetLastError = (a, b) => (h._OrtGetLastError = Z.ka)(a, b);
          h._OrtCreateSessionOptions = (a, b, c, d, e, g, l, k, n, q) => (h._OrtCreateSessionOptions = Z.la)(a, b, c, d, e, g, l, k, n, q);
          h._OrtAppendExecutionProvider = (a, b) => (h._OrtAppendExecutionProvider = Z.ma)(a, b);
          h._OrtAddFreeDimensionOverride = (a, b, c) => (h._OrtAddFreeDimensionOverride = Z.na)(a, b, c);
          h._OrtAddSessionConfigEntry = (a, b, c) => (h._OrtAddSessionConfigEntry = Z.oa)(a, b, c);
          h._OrtReleaseSessionOptions = (a) => (h._OrtReleaseSessionOptions = Z.pa)(a);
          h._OrtCreateSession = (a, b, c) => (h._OrtCreateSession = Z.qa)(a, b, c);
          h._OrtReleaseSession = (a) => (h._OrtReleaseSession = Z.ra)(a);
          h._OrtGetInputOutputCount = (a, b, c) => (h._OrtGetInputOutputCount = Z.sa)(a, b, c);
          h._OrtGetInputName = (a, b) => (h._OrtGetInputName = Z.ta)(a, b);
          h._OrtGetOutputName = (a, b) => (h._OrtGetOutputName = Z.ua)(a, b);
          h._OrtFree = (a) => (h._OrtFree = Z.va)(a);
          h._OrtCreateTensor = (a, b, c, d, e, g) => (h._OrtCreateTensor = Z.wa)(a, b, c, d, e, g);
          h._OrtGetTensorData = (a, b, c, d, e) => (h._OrtGetTensorData = Z.xa)(a, b, c, d, e);
          h._OrtReleaseTensor = (a) => (h._OrtReleaseTensor = Z.ya)(a);
          h._OrtCreateRunOptions = (a, b, c, d) => (h._OrtCreateRunOptions = Z.za)(a, b, c, d);
          h._OrtAddRunConfigEntry = (a, b, c) => (h._OrtAddRunConfigEntry = Z.Aa)(a, b, c);
          h._OrtReleaseRunOptions = (a) => (h._OrtReleaseRunOptions = Z.Ba)(a);
          h._OrtCreateBinding = (a) => (h._OrtCreateBinding = Z.Ca)(a);
          h._OrtBindInput = (a, b, c) => (h._OrtBindInput = Z.Da)(a, b, c);
          h._OrtBindOutput = (a, b, c, d) => (h._OrtBindOutput = Z.Ea)(a, b, c, d);
          h._OrtClearBoundOutputs = (a) => (h._OrtClearBoundOutputs = Z.Fa)(a);
          h._OrtReleaseBinding = (a) => (h._OrtReleaseBinding = Z.Ga)(a);
          h._OrtRunWithBinding = (a, b, c, d, e) => (h._OrtRunWithBinding = Z.Ha)(a, b, c, d, e);
          h._OrtRun = (a, b, c, d, e, g, l, k) => (h._OrtRun = Z.Ia)(a, b, c, d, e, g, l, k);
          h._OrtEndProfiling = (a) => (h._OrtEndProfiling = Z.Ja)(a);
          var mb = h._malloc = (a) => (mb = h._malloc = Z.Ka)(a), U = h._free = (a) => (U = h._free = Z.La)(a), Za = (a) => (Za = Z.Ma)(a);
          h.__embind_initialize_bindings = () => (h.__embind_initialize_bindings = Z.Na)();
          var Ab = () => (Ab = Z.Pa)(), Bb = (a) => (Bb = Z.Qa)(a), Cb = (a) => (Cb = Z.Ra)(a);
          function zb() {
            var a = Z;
            a = Object.assign({}, a);
            var b = (d) => () => d() >>> 0, c = (d) => (e) => d(e) >>> 0;
            a.__errno_location = b(a.__errno_location);
            a.Ka = c(a.Ka);
            a.Ma = c(a.Ma);
            a.Pa = b(a.Pa);
            a.Ra = c(a.Ra);
            return a;
          }
          h.stackAlloc = Cb;
          h.stackSave = Ab;
          h.stackRestore = Bb;
          h.UTF8ToString = L;
          h.stringToUTF8 = (a, b, c) => N(a, B, b, c);
          h.lengthBytesUTF8 = M;
          var Db;
          J = function Eb() {
            Db || Fb();
            Db || (J = Eb);
          };
          function Fb() {
            if (!(0 < I)) {
              for (; 0 < ra.length; )
                ra.shift()(h);
              if (!(0 < I || Db || (Db = true, h.calledRun = true, la))) {
                for (; 0 < sa.length; )
                  sa.shift()(h);
                for (aa(h); 0 < ta.length; )
                  ta.shift()(h);
              }
            }
          }
          Fb();
          return moduleArg.ready;
        };
      })();
      if (typeof exports === "object" && typeof module === "object")
        module.exports = ortWasm;
      else if (typeof define === "function" && define["amd"])
        define([], () => ortWasm);
    }
  });

  // nodejs-ignore:worker_threads
  var require_worker_threads = __commonJS({
    "nodejs-ignore:worker_threads"() {
    }
  });

  // nodejs-ignore:perf_hooks
  var require_perf_hooks = __commonJS({
    "nodejs-ignore:perf_hooks"() {
    }
  });

  // nodejs-ignore:os
  var os_exports = {};
  __export(os_exports, {
    cpus: () => cpus2
  });
  var cpus2;
  var init_os = __esm({
    "nodejs-ignore:os"() {
      cpus2 = void 0;
    }
  });

  // web/lib/wasm/binding/ort-wasm-threaded.js
  var require_ort_wasm_threaded = __commonJS({
    "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {
      "use strict";
      var ortWasmThreaded = (() => {
        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
        if (typeof __filename !== "undefined")
          _scriptDir = _scriptDir || __filename;
        return function(moduleArg = {}) {
          function h() {
            m.buffer != n.buffer && p();
            return n;
          }
          function t() {
            m.buffer != n.buffer && p();
            return aa;
          }
          function v() {
            m.buffer != n.buffer && p();
            return ba;
          }
          function ca() {
            m.buffer != n.buffer && p();
            return da;
          }
          function w() {
            m.buffer != n.buffer && p();
            return ea;
          }
          function z() {
            m.buffer != n.buffer && p();
            return fa;
          }
          function ha() {
            m.buffer != n.buffer && p();
            return ia;
          }
          var A = moduleArg, ja, ka;
          A.ready = new Promise((a, b) => {
            ja = a;
            ka = b;
          });
          var la = Object.assign({}, A), ma = "./this.program", na = (a, b) => {
            throw b;
          }, oa = "object" == typeof window, B = "function" == typeof importScripts, D = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, E = A.ENVIRONMENT_IS_PTHREAD || false, F = "";
          function pa(a) {
            return A.locateFile ? A.locateFile(a, F) : F + a;
          }
          var qa, ra, sa;
          if (D) {
            var fs = (init_fs(), __toCommonJS(fs_exports)), ta = (init_path(), __toCommonJS(path_exports));
            F = B ? ta.dirname(F) + "/" : __dirname + "/";
            qa = (b, c) => {
              b = b.startsWith("file://") ? new URL(b) : ta.normalize(b);
              return fs.readFileSync(b, c ? void 0 : "utf8");
            };
            sa = (b) => {
              b = qa(b, true);
              b.buffer || (b = new Uint8Array(b));
              return b;
            };
            ra = (b, c, d, e = true) => {
              b = b.startsWith("file://") ? new URL(b) : ta.normalize(b);
              fs.readFile(b, e ? void 0 : "utf8", (f, k) => {
                f ? d(f) : c(e ? k.buffer : k);
              });
            };
            !A.thisProgram && 1 < process.argv.length && (ma = process.argv[1].replace(/\\/g, "/"));
            process.argv.slice(2);
            na = (b, c) => {
              process.exitCode = b;
              throw c;
            };
            A.inspect = () => "[Emscripten Module object]";
            let a;
            try {
              a = require_worker_threads();
            } catch (b) {
              throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), b;
            }
            global.Worker = a.Worker;
          } else if (oa || B)
            B ? F = self.location.href : "undefined" != typeof document && document.currentScript && (F = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (F = _scriptDir), 0 !== F.indexOf("blob:") ? F = F.substr(0, F.replace(/[?#].*/, "").lastIndexOf("/") + 1) : F = "", D || (qa = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.send(null);
              return b.responseText;
            }, B && (sa = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.responseType = "arraybuffer";
              b.send(null);
              return new Uint8Array(b.response);
            }), ra = (a, b, c) => {
              var d = new XMLHttpRequest();
              d.open("GET", a, true);
              d.responseType = "arraybuffer";
              d.onload = () => {
                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
              };
              d.onerror = c;
              d.send(null);
            });
          D && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);
          var ua = console.log.bind(console), va = console.error.bind(console);
          D && (ua = (...a) => fs.writeSync(1, a.join(" ") + "\n"), va = (...a) => fs.writeSync(2, a.join(" ") + "\n"));
          var wa = ua, G = va;
          Object.assign(A, la);
          la = null;
          var noExitRuntime = true;
          "object" != typeof WebAssembly && H("no native wasm support detected");
          var m, xa, ya = false, I, n, aa, ba, da, ea, fa, za, J, Aa, ia;
          function p() {
            var a = m.buffer;
            A.HEAP8 = n = new Int8Array(a);
            A.HEAP16 = ba = new Int16Array(a);
            A.HEAPU8 = aa = new Uint8Array(a);
            A.HEAPU16 = da = new Uint16Array(a);
            A.HEAP32 = ea = new Int32Array(a);
            A.HEAPU32 = fa = new Uint32Array(a);
            A.HEAPF32 = za = new Float32Array(a);
            A.HEAPF64 = ia = new Float64Array(a);
            A.HEAP64 = J = new BigInt64Array(a);
            A.HEAPU64 = Aa = new BigUint64Array(a);
          }
          var Ba = 16777216;
          5242880 <= Ba || H("INITIAL_MEMORY should be larger than STACK_SIZE, was " + Ba + "! (STACK_SIZE=5242880)");
          if (E)
            m = A.wasmMemory;
          else if (m = new WebAssembly.Memory({ initial: Ba / 65536, maximum: 65536, shared: true }), !(m.buffer instanceof SharedArrayBuffer))
            throw G("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), D && G("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");
          p();
          Ba = m.buffer.byteLength;
          var Ca = [], Da = [], Ea = [], Fa = 0;
          function Ga() {
            return noExitRuntime || 0 < Fa;
          }
          var K = 0, Ha = null, L = null;
          function Ia() {
            K--;
            if (0 == K && (null !== Ha && (clearInterval(Ha), Ha = null), L)) {
              var a = L;
              L = null;
              a();
            }
          }
          function H(a) {
            a = "Aborted(" + a + ")";
            G(a);
            ya = true;
            I = 1;
            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
            ka(a);
            throw a;
          }
          function Ja(a) {
            return a.startsWith("data:application/octet-stream;base64,");
          }
          var M;
          M = "ort-wasm-threaded.wasm";
          Ja(M) || (M = pa(M));
          function Ka(a) {
            if (sa)
              return sa(a);
            throw "both async and sync fetching of the wasm failed";
          }
          function La(a) {
            if (oa || B) {
              if ("function" == typeof fetch && !a.startsWith("file://"))
                return fetch(a, { credentials: "same-origin" }).then((b) => {
                  if (!b.ok)
                    throw "failed to load wasm binary file at '" + a + "'";
                  return b.arrayBuffer();
                }).catch(() => Ka(a));
              if (ra)
                return new Promise((b, c) => {
                  ra(a, (d) => b(new Uint8Array(d)), c);
                });
            }
            return Promise.resolve().then(() => Ka(a));
          }
          function Ma(a, b, c) {
            return La(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {
              G(`failed to asynchronously prepare wasm: ${d}`);
              H(d);
            });
          }
          function Na(a, b) {
            var c = M;
            return "function" != typeof WebAssembly.instantiateStreaming || Ja(c) || c.startsWith("file://") || D || "function" != typeof fetch ? Ma(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(e) {
              G(`wasm streaming compile failed: ${e}`);
              G("falling back to ArrayBuffer instantiation");
              return Ma(c, a, b);
            }));
          }
          function Oa(a) {
            this.name = "ExitStatus";
            this.message = `Program terminated with exit(${a})`;
            this.status = a;
          }
          var Pa = (a) => {
            a.terminate();
            a.onmessage = () => {
            };
          }, Qa = (a) => {
            if (0 == O.qb.length) {
              var b = pa("ort-wasm-threaded.worker.js");
              b = new Worker(b);
              O.qb.push(b);
              O.Jb(O.qb[0]);
            }
            b = O.qb.pop();
            if (!b)
              return 6;
            O.nb.push(b);
            O.jb[a.mb] = b;
            b.mb = a.mb;
            var c = { cmd: "run", start_routine: a.Mb, arg: a.Fb, pthread_ptr: a.mb };
            D && b.unref();
            b.postMessage(c, a.Sb);
            return 0;
          }, Ra = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Sa = (a, b, c) => {
            b >>>= 0;
            var d = b + c;
            for (c = b; a[c] && !(c >= d); )
              ++c;
            if (16 < c - b && a.buffer && Ra)
              return Ra.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));
            for (d = ""; b < c; ) {
              var e = a[b++];
              if (e & 128) {
                var f = a[b++] & 63;
                if (192 == (e & 224))
                  d += String.fromCharCode((e & 31) << 6 | f);
                else {
                  var k = a[b++] & 63;
                  e = 224 == (e & 240) ? (e & 15) << 12 | f << 6 | k : (e & 7) << 18 | f << 12 | k << 6 | a[b++] & 63;
                  65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));
                }
              } else
                d += String.fromCharCode(e);
            }
            return d;
          }, Ta = (a, b) => (a >>>= 0) ? Sa(t(), a, b) : "";
          function Ua(a) {
            if (E)
              return P(0, 1, a);
            I = a;
            Ga() || (O.Nb(), ya = true);
            na(a, new Oa(a));
          }
          var Wa = (a) => {
            I = a;
            if (E)
              throw Va(a), "unwind";
            Ua(a);
          };
          function Xa() {
            Ca.unshift(() => {
              K++;
              Ia();
            });
          }
          var O = { qb: [], nb: [], Eb: [], jb: {}, vb() {
            E ? (O.receiveObjectTransfer = O.Lb, O.threadInitTLS = O.Db, O.setExitStatus = O.Cb, noExitRuntime = false) : Xa();
          }, Cb: (a) => {
            I = a;
          }, Vb: ["$terminateWorker"], Nb: () => {
            for (var a of O.nb)
              Pa(a);
            for (a of O.qb)
              Pa(a);
            O.qb = [];
            O.nb = [];
            O.jb = [];
          }, Bb: (a) => {
            var b = a.mb;
            delete O.jb[b];
            O.qb.push(a);
            O.nb.splice(O.nb.indexOf(a), 1);
            a.mb = 0;
            Ya(b);
          }, Lb() {
          }, Db() {
            O.Eb.forEach((a) => a());
          }, Jb: (a) => new Promise((b) => {
            a.onmessage = (f) => {
              f = f.data;
              var k = f.cmd;
              if (f.targetThread && f.targetThread != Za()) {
                var l = O.jb[f.targetThread];
                l ? l.postMessage(f, f.transferList) : G(`Internal error! Worker sent a message "${k}" to target pthread ${f.targetThread}, but that thread no longer exists!`);
              } else if ("checkMailbox" === k)
                $a();
              else if ("spawnThread" === k)
                Qa(f);
              else if ("cleanupThread" === k)
                (f = O.jb[f.thread]) || H(), O.Bb(f);
              else if ("killThread" === k)
                f = f.thread, k = O.jb[f], delete O.jb[f], Pa(k), Ya(f), O.nb.splice(O.nb.indexOf(k), 1), k.mb = 0;
              else if ("cancelThread" === k)
                O.jb[f.thread].postMessage({ cmd: "cancel" });
              else if ("loaded" === k)
                a.loaded = true, b(a);
              else if ("alert" === k)
                alert(`Thread ${f.threadId}: ${f.text}`);
              else if ("setimmediate" === f.target)
                a.postMessage(f);
              else if ("callHandler" === k)
                A[f.handler](...f.args);
              else
                k && G(`worker sent an unknown command ${k}`);
            };
            a.onerror = (f) => {
              G(`${"worker sent an error!"} ${f.filename}:${f.lineno}: ${f.message}`);
              throw f;
            };
            D && (a.on("message", (f) => a.onmessage({ data: f })), a.on("error", (f) => a.onerror(f)));
            var c = [], d = [], e;
            for (e of d)
              A.hasOwnProperty(e) && c.push(e);
            a.postMessage({
              cmd: "load",
              handlers: c,
              urlOrBlob: A.mainScriptUrlOrBlob || _scriptDir,
              wasmMemory: m,
              wasmModule: xa
            });
          }) };
          A.PThread = O;
          var ab = (a) => {
            for (; 0 < a.length; )
              a.shift()(A);
          };
          A.establishStackSpace = () => {
            var a = Za(), b = z()[a + 52 >>> 2 >>> 0];
            a = z()[a + 56 >>> 2 >>> 0];
            bb(b, b - a);
            cb(b);
          };
          function Va(a) {
            if (E)
              return P(1, 0, a);
            Wa(a);
          }
          var db = [], eb;
          A.invokeEntryPoint = (a, b) => {
            var c = db[a];
            c || (a >= db.length && (db.length = a + 1), db[a] = c = eb.get(a));
            a = c(b);
            Ga() ? O.Cb(a) : fb(a);
          };
          function gb(a) {
            this.sb = a - 24;
            this.Kb = function(b) {
              z()[this.sb + 4 >>> 2 >>> 0] = b;
            };
            this.xb = function(b) {
              z()[this.sb + 8 >>> 2 >>> 0] = b;
            };
            this.vb = function(b, c) {
              this.wb();
              this.Kb(b);
              this.xb(c);
            };
            this.wb = function() {
              z()[this.sb + 16 >>> 2 >>> 0] = 0;
            };
          }
          var hb = 0, ib = 0;
          function jb(a, b, c, d) {
            return E ? P(2, 1, a, b, c, d) : kb(a, b, c, d);
          }
          function kb(a, b, c, d) {
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            if ("undefined" == typeof SharedArrayBuffer)
              return G("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
            var e = [];
            if (E && 0 === e.length)
              return jb(a, b, c, d);
            a = { Mb: c, mb: a, Fb: d, Sb: e };
            return E ? (a.Ub = "spawnThread", postMessage(a, e), 0) : Qa(a);
          }
          function lb(a, b, c) {
            return E ? P(3, 1, a, b, c) : 0;
          }
          function mb(a, b) {
            if (E)
              return P(4, 1, a, b);
          }
          var nb = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
            }
            return b;
          }, ob = (a, b, c, d) => {
            c >>>= 0;
            if (!(0 < d))
              return 0;
            var e = c;
            d = c + d - 1;
            for (var f = 0; f < a.length; ++f) {
              var k = a.charCodeAt(f);
              if (55296 <= k && 57343 >= k) {
                var l = a.charCodeAt(++f);
                k = 65536 + ((k & 1023) << 10) | l & 1023;
              }
              if (127 >= k) {
                if (c >= d)
                  break;
                b[c++ >>> 0] = k;
              } else {
                if (2047 >= k) {
                  if (c + 1 >= d)
                    break;
                  b[c++ >>> 0] = 192 | k >> 6;
                } else {
                  if (65535 >= k) {
                    if (c + 2 >= d)
                      break;
                    b[c++ >>> 0] = 224 | k >> 12;
                  } else {
                    if (c + 3 >= d)
                      break;
                    b[c++ >>> 0] = 240 | k >> 18;
                    b[c++ >>> 0] = 128 | k >> 12 & 63;
                  }
                  b[c++ >>> 0] = 128 | k >> 6 & 63;
                }
                b[c++ >>> 0] = 128 | k & 63;
              }
            }
            b[c >>> 0] = 0;
            return c - e;
          }, pb = (a, b, c) => ob(a, t(), b, c);
          function qb(a, b) {
            if (E)
              return P(5, 1, a, b);
          }
          function rb(a, b, c) {
            if (E)
              return P(6, 1, a, b, c);
          }
          function sb(a, b, c) {
            return E ? P(7, 1, a, b, c) : 0;
          }
          function tb(a, b) {
            if (E)
              return P(8, 1, a, b);
          }
          function ub(a, b, c) {
            if (E)
              return P(9, 1, a, b, c);
          }
          function vb(a, b, c, d) {
            if (E)
              return P(10, 1, a, b, c, d);
          }
          function wb(a, b, c, d) {
            if (E)
              return P(11, 1, a, b, c, d);
          }
          function xb(a, b, c, d) {
            if (E)
              return P(12, 1, a, b, c, d);
          }
          function yb(a) {
            if (E)
              return P(13, 1, a);
          }
          function zb(a, b) {
            if (E)
              return P(14, 1, a, b);
          }
          function Ab(a, b, c) {
            if (E)
              return P(15, 1, a, b, c);
          }
          var Bb = (a) => {
            if (null === a)
              return "null";
            var b = typeof a;
            return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;
          }, Cb, R = (a) => {
            for (var b = ""; t()[a >>> 0]; )
              b += Cb[t()[a++ >>> 0]];
            return b;
          }, Db = {}, Eb = {}, Fb = {}, S;
          function Gb(a, b, c = {}) {
            var d = b.name;
            if (!a)
              throw new S(`type "${d}" must have a positive integer typeid pointer`);
            if (Eb.hasOwnProperty(a)) {
              if (c.Hb)
                return;
              throw new S(`Cannot register type '${d}' twice`);
            }
            Eb[a] = b;
            delete Fb[a];
            Db.hasOwnProperty(a) && (b = Db[a], delete Db[a], b.forEach((e) => e()));
          }
          function T(a, b, c = {}) {
            if (!("argPackAdvance" in b))
              throw new TypeError("registerType registeredInstance requires argPackAdvance");
            Gb(a, b, c);
          }
          var Hb = (a, b, c) => {
            switch (b) {
              case 1:
                return c ? (d) => h()[d >>> 0 >>> 0] : (d) => t()[d >>> 0 >>> 0];
              case 2:
                return c ? (d) => v()[d >>> 1 >>> 0] : (d) => ca()[d >>> 1 >>> 0];
              case 4:
                return c ? (d) => w()[d >>> 2 >>> 0] : (d) => z()[d >>> 2 >>> 0];
              case 8:
                return c ? (d) => J[d >>> 3] : (d) => Aa[d >>> 3];
              default:
                throw new TypeError(`invalid integer width (${b}): ${a}`);
            }
          };
          function Ib() {
            this.lb = [void 0];
            this.zb = [];
          }
          var U = new Ib();
          function Jb(a) {
            a >>>= 0;
            a >= U.sb && 0 === --U.get(a).Ab && U.xb(a);
          }
          var V = (a) => {
            if (!a)
              throw new S("Cannot use deleted val. handle = " + a);
            return U.get(a).value;
          }, W = (a) => {
            switch (a) {
              case void 0:
                return 1;
              case null:
                return 2;
              case true:
                return 3;
              case false:
                return 4;
              default:
                return U.wb({ Ab: 1, value: a });
            }
          };
          function Kb(a) {
            return this.fromWireType(w()[a >>> 2 >>> 0]);
          }
          var Lb = (a, b) => {
            switch (b) {
              case 4:
                return function(c) {
                  var d = this.fromWireType;
                  m.buffer != n.buffer && p();
                  return d.call(this, za[c >>> 2 >>> 0]);
                };
              case 8:
                return function(c) {
                  return this.fromWireType(ha()[c >>> 3 >>> 0]);
                };
              default:
                throw new TypeError(`invalid float width (${b}): ${a}`);
            }
          };
          function Mb(a) {
            return this.fromWireType(z()[a >>> 2 >>> 0]);
          }
          var Nb = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, Ob = (a, b) => {
            var c = a >> 1;
            for (var d = c + b / 2; !(c >= d) && ca()[c >>> 0]; )
              ++c;
            c <<= 1;
            if (32 < c - a && Nb)
              return Nb.decode(t().slice(a, c));
            c = "";
            for (d = 0; !(d >= b / 2); ++d) {
              var e = v()[a + 2 * d >>> 1 >>> 0];
              if (0 == e)
                break;
              c += String.fromCharCode(e);
            }
            return c;
          }, Pb = (a, b, c) => {
            void 0 === c && (c = 2147483647);
            if (2 > c)
              return 0;
            c -= 2;
            var d = b;
            c = c < 2 * a.length ? c / 2 : a.length;
            for (var e = 0; e < c; ++e) {
              var f = a.charCodeAt(e);
              v()[b >>> 1 >>> 0] = f;
              b += 2;
            }
            v()[b >>> 1 >>> 0] = 0;
            return b - d;
          }, Qb = (a) => 2 * a.length, Rb = (a, b) => {
            for (var c = 0, d = ""; !(c >= b / 4); ) {
              var e = w()[a + 4 * c >>> 2 >>> 0];
              if (0 == e)
                break;
              ++c;
              65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e);
            }
            return d;
          }, Sb = (a, b, c) => {
            b >>>= 0;
            void 0 === c && (c = 2147483647);
            if (4 > c)
              return 0;
            var d = b;
            c = d + c - 4;
            for (var e = 0; e < a.length; ++e) {
              var f = a.charCodeAt(e);
              if (55296 <= f && 57343 >= f) {
                var k = a.charCodeAt(++e);
                f = 65536 + ((f & 1023) << 10) | k & 1023;
              }
              w()[b >>> 2 >>> 0] = f;
              b += 4;
              if (b + 4 > c)
                break;
            }
            w()[b >>> 2 >>> 0] = 0;
            return b - d;
          }, Tb = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              55296 <= d && 57343 >= d && ++c;
              b += 4;
            }
            return b;
          }, Ub = (a) => {
            if (!ya)
              try {
                if (a(), !Ga())
                  try {
                    E ? fb(I) : Wa(I);
                  } catch (b) {
                    b instanceof Oa || "unwind" == b || na(1, b);
                  }
              } catch (b) {
                b instanceof Oa || "unwind" == b || na(1, b);
              }
          };
          function Vb(a) {
            a >>>= 0;
            "function" === typeof Atomics.Tb && (Atomics.Tb(w(), a >>> 2, a).value.then($a), a += 128, Atomics.store(w(), a >>> 2, 1));
          }
          A.__emscripten_thread_mailbox_await = Vb;
          var $a = () => {
            var a = Za();
            a && (Vb(a), Ub(() => Wb()));
          };
          A.checkMailbox = $a;
          var Yb = (a) => {
            var b = Xb();
            a = a();
            cb(b);
            return a;
          };
          function P(a, b) {
            var c = arguments.length - 2, d = arguments;
            return Yb(() => {
              for (var e = 2 * c, f = Zb(8 * e), k = f >>> 3, l = 0; l < c; l++) {
                var q = d[2 + l];
                "bigint" == typeof q ? (J[k + 2 * l] = 1n, J[k + 2 * l + 1] = q) : (J[k + 2 * l] = 0n, ha()[k + 2 * l + 1 >>> 0] = q);
              }
              return $b(a, e, f, b);
            });
          }
          var ac = [], cc = (a, b) => {
            var c = Eb[a];
            if (void 0 === c)
              throw a = bc(a), c = R(a), X(a), new S(b + " has unknown type " + c);
            return c;
          }, dc = {}, ec = (a) => {
            var b = dc[a];
            return void 0 === b ? R(a) : b;
          }, fc = [], gc = () => "object" == typeof globalThis ? globalThis : Function("return this")(), hc = (a) => {
            var b = fc.length;
            fc.push(a);
            return b;
          }, ic = (a, b) => {
            for (var c = Array(a), d = 0; d < a; ++d)
              c[d] = cc(z()[b + 4 * d >>> 2 >>> 0], "parameter " + d);
            return c;
          }, jc = (a) => {
            if (void 0 === a)
              return "_unknown";
            a = a.replace(/[^a-zA-Z0-9_]/g, "$");
            var b = a.charCodeAt(0);
            return 48 <= b && 57 >= b ? `_${a}` : a;
          }, lc = {};
          function mc(a, b) {
            a = jc(a);
            return { [a]: function() {
              return b.apply(this, arguments);
            } }[a];
          }
          function nc(a) {
            var b = Function;
            if (!(b instanceof Function))
              throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);
            var c = mc(b.name || "unknownFunctionName", function() {
            });
            c.prototype = b.prototype;
            c = new c();
            a = b.apply(c, a);
            return a instanceof Object ? a : c;
          }
          var oc = (a) => {
            for (var b = "", c = 0; c < a; ++c)
              b += (0 !== c ? ", " : "") + "arg" + c;
            var d = "return function emval_allocator_" + a + "(constructor, argTypes, args) {\n  var HEAPU32 = getMemory();\n";
            for (c = 0; c < a; ++c)
              d += "var argType" + c + " = requireRegisteredType(HEAPU32[((argTypes)>>>2)], 'parameter " + c + "');\nvar arg" + c + " = argType" + c + ".readValueFromPointer(args);\nargs += argType" + c + "['argPackAdvance'];\nargTypes += 4;\n";
            return new Function("requireRegisteredType", "Module", "valueToHandle", "getMemory", d + ("var obj = new constructor(" + b + ");\nreturn valueToHandle(obj);\n}\n"))(cc, A, W, () => z());
          }, pc = {}, Y = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), qc = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], rc = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
          function sc(a, b, c, d, e, f, k) {
            return E ? P(16, 1, a, b, c, d, e, f, k) : -52;
          }
          function tc(a, b, c, d, e, f) {
            if (E)
              return P(17, 1, a, b, c, d, e, f);
          }
          var vc = (a) => {
            var b = nb(a) + 1, c = uc(b);
            c && pb(a, c, b);
            return c;
          }, wc = {}, yc = () => {
            if (!xc) {
              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: ma || "./this.program" }, b;
              for (b in wc)
                void 0 === wc[b] ? delete a[b] : a[b] = wc[b];
              var c = [];
              for (b in a)
                c.push(`${b}=${a[b]}`);
              xc = c;
            }
            return xc;
          }, xc;
          function zc(a, b) {
            if (E)
              return P(18, 1, a, b);
            a >>>= 0;
            b >>>= 0;
            var c = 0;
            yc().forEach((d, e) => {
              var f = b + c;
              e = z()[a + 4 * e >>> 2 >>> 0] = f;
              for (f = 0; f < d.length; ++f)
                h()[e++ >>> 0 >>> 0] = d.charCodeAt(f);
              h()[e >>> 0 >>> 0] = 0;
              c += d.length + 1;
            });
            return 0;
          }
          function Ac(a, b) {
            if (E)
              return P(19, 1, a, b);
            a >>>= 0;
            b >>>= 0;
            var c = yc();
            z()[a >>> 2 >>> 0] = c.length;
            var d = 0;
            c.forEach((e) => d += e.length + 1);
            z()[b >>> 2 >>> 0] = d;
            return 0;
          }
          function Bc(a) {
            return E ? P(20, 1, a) : 52;
          }
          function Cc(a, b, c, d) {
            return E ? P(21, 1, a, b, c, d) : 52;
          }
          function Dc(a, b, c, d) {
            return E ? P(22, 1, a, b, c, d) : 70;
          }
          var Ec = [null, [], []];
          function Fc(a, b, c, d) {
            if (E)
              return P(23, 1, a, b, c, d);
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            for (var e = 0, f = 0; f < c; f++) {
              var k = z()[b >>> 2 >>> 0], l = z()[b + 4 >>> 2 >>> 0];
              b += 8;
              for (var q = 0; q < l; q++) {
                var r = t()[k + q >>> 0], x = Ec[a];
                0 === r || 10 === r ? ((1 === a ? wa : G)(Sa(x, 0)), x.length = 0) : x.push(r);
              }
              e += l;
            }
            z()[d >>> 2 >>> 0] = e;
            return 0;
          }
          var Gc = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Hc = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          function Ic(a) {
            var b = Array(nb(a) + 1);
            ob(a, b, 0, b.length);
            return b;
          }
          var Jc = (a, b) => {
            h().set(a, b >>> 0);
          };
          function Kc(a, b, c, d) {
            function e(g, u, y) {
              for (g = "number" == typeof g ? g.toString() : g || ""; g.length < u; )
                g = y[0] + g;
              return g;
            }
            function f(g, u) {
              return e(g, u, "0");
            }
            function k(g, u) {
              function y(kc) {
                return 0 > kc ? -1 : 0 < kc ? 1 : 0;
              }
              var Q;
              0 === (Q = y(g.getFullYear() - u.getFullYear())) && 0 === (Q = y(g.getMonth() - u.getMonth())) && (Q = y(g.getDate() - u.getDate()));
              return Q;
            }
            function l(g) {
              switch (g.getDay()) {
                case 0:
                  return new Date(g.getFullYear() - 1, 11, 29);
                case 1:
                  return g;
                case 2:
                  return new Date(g.getFullYear(), 0, 3);
                case 3:
                  return new Date(
                    g.getFullYear(),
                    0,
                    2
                  );
                case 4:
                  return new Date(g.getFullYear(), 0, 1);
                case 5:
                  return new Date(g.getFullYear() - 1, 11, 31);
                case 6:
                  return new Date(g.getFullYear() - 1, 11, 30);
              }
            }
            function q(g) {
              var u = g.ob;
              for (g = new Date(new Date(g.pb + 1900, 0, 1).getTime()); 0 < u; ) {
                var y = g.getMonth(), Q = (Y(g.getFullYear()) ? Gc : Hc)[y];
                if (u > Q - g.getDate())
                  u -= Q - g.getDate() + 1, g.setDate(1), 11 > y ? g.setMonth(y + 1) : (g.setMonth(0), g.setFullYear(g.getFullYear() + 1));
                else {
                  g.setDate(g.getDate() + u);
                  break;
                }
              }
              y = new Date(g.getFullYear() + 1, 0, 4);
              u = l(new Date(
                g.getFullYear(),
                0,
                4
              ));
              y = l(y);
              return 0 >= k(u, g) ? 0 >= k(y, g) ? g.getFullYear() + 1 : g.getFullYear() : g.getFullYear() - 1;
            }
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            var r = z()[d + 40 >>> 2 >>> 0];
            d = { Qb: w()[d >>> 2 >>> 0], Pb: w()[d + 4 >>> 2 >>> 0], tb: w()[d + 8 >>> 2 >>> 0], yb: w()[d + 12 >>> 2 >>> 0], ub: w()[d + 16 >>> 2 >>> 0], pb: w()[d + 20 >>> 2 >>> 0], kb: w()[d + 24 >>> 2 >>> 0], ob: w()[d + 28 >>> 2 >>> 0], Wb: w()[d + 32 >>> 2 >>> 0], Ob: w()[d + 36 >>> 2 >>> 0], Rb: r ? Ta(r) : "" };
            c = Ta(c);
            r = {
              "%c": "%a %b %d %H:%M:%S %Y",
              "%D": "%m/%d/%y",
              "%F": "%Y-%m-%d",
              "%h": "%b",
              "%r": "%I:%M:%S %p",
              "%R": "%H:%M",
              "%T": "%H:%M:%S",
              "%x": "%m/%d/%y",
              "%X": "%H:%M:%S",
              "%Ec": "%c",
              "%EC": "%C",
              "%Ex": "%m/%d/%y",
              "%EX": "%H:%M:%S",
              "%Ey": "%y",
              "%EY": "%Y",
              "%Od": "%d",
              "%Oe": "%e",
              "%OH": "%H",
              "%OI": "%I",
              "%Om": "%m",
              "%OM": "%M",
              "%OS": "%S",
              "%Ou": "%u",
              "%OU": "%U",
              "%OV": "%V",
              "%Ow": "%w",
              "%OW": "%W",
              "%Oy": "%y"
            };
            for (var x in r)
              c = c.replace(new RegExp(x, "g"), r[x]);
            var C = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), N = "January February March April May June July August September October November December".split(" ");
            r = { "%a": (g) => C[g.kb].substring(0, 3), "%A": (g) => C[g.kb], "%b": (g) => N[g.ub].substring(0, 3), "%B": (g) => N[g.ub], "%C": (g) => f((g.pb + 1900) / 100 | 0, 2), "%d": (g) => f(g.yb, 2), "%e": (g) => e(g.yb, 2, " "), "%g": (g) => q(g).toString().substring(2), "%G": (g) => q(g), "%H": (g) => f(g.tb, 2), "%I": (g) => {
              g = g.tb;
              0 == g ? g = 12 : 12 < g && (g -= 12);
              return f(g, 2);
            }, "%j": (g) => {
              for (var u = 0, y = 0; y <= g.ub - 1; u += (Y(g.pb + 1900) ? Gc : Hc)[y++])
                ;
              return f(g.yb + u, 3);
            }, "%m": (g) => f(g.ub + 1, 2), "%M": (g) => f(g.Pb, 2), "%n": () => "\n", "%p": (g) => 0 <= g.tb && 12 > g.tb ? "AM" : "PM", "%S": (g) => f(g.Qb, 2), "%t": () => "	", "%u": (g) => g.kb || 7, "%U": (g) => f(Math.floor((g.ob + 7 - g.kb) / 7), 2), "%V": (g) => {
              var u = Math.floor((g.ob + 7 - (g.kb + 6) % 7) / 7);
              2 >= (g.kb + 371 - g.ob - 2) % 7 && u++;
              if (u)
                53 == u && (y = (g.kb + 371 - g.ob) % 7, 4 == y || 3 == y && Y(g.pb) || (u = 1));
              else {
                u = 52;
                var y = (g.kb + 7 - g.ob - 1) % 7;
                (4 == y || 5 == y && Y(g.pb % 400 - 1)) && u++;
              }
              return f(u, 2);
            }, "%w": (g) => g.kb, "%W": (g) => f(Math.floor((g.ob + 7 - (g.kb + 6) % 7) / 7), 2), "%y": (g) => (g.pb + 1900).toString().substring(2), "%Y": (g) => g.pb + 1900, "%z": (g) => {
              g = g.Ob;
              var u = 0 <= g;
              g = Math.abs(g) / 60;
              return (u ? "+" : "-") + String("0000" + (g / 60 * 100 + g % 60)).slice(-4);
            }, "%Z": (g) => g.Rb, "%%": () => "%" };
            c = c.replace(/%%/g, "\0\0");
            for (x in r)
              c.includes(x) && (c = c.replace(new RegExp(x, "g"), r[x](d)));
            c = c.replace(/\0\0/g, "%");
            x = Ic(c);
            if (x.length > b)
              return 0;
            Jc(x, a);
            return x.length - 1;
          }
          O.vb();
          for (var Lc = Array(256), Mc = 0; 256 > Mc; ++Mc)
            Lc[Mc] = String.fromCharCode(Mc);
          Cb = Lc;
          S = A.BindingError = class extends Error {
            constructor(a) {
              super(a);
              this.name = "BindingError";
            }
          };
          A.InternalError = class extends Error {
            constructor(a) {
              super(a);
              this.name = "InternalError";
            }
          };
          Object.assign(Ib.prototype, { get(a) {
            return this.lb[a];
          }, has(a) {
            return void 0 !== this.lb[a];
          }, wb(a) {
            var b = this.zb.pop() || this.lb.length;
            this.lb[b] = a;
            return b;
          }, xb(a) {
            this.lb[a] = void 0;
            this.zb.push(a);
          } });
          U.lb.push({ value: void 0 }, { value: null }, { value: true }, { value: false });
          U.sb = U.lb.length;
          A.count_emval_handles = () => {
            for (var a = 0, b = U.sb; b < U.lb.length; ++b)
              void 0 !== U.lb[b] && ++a;
            return a;
          };
          var Nc = [Ua, Va, jb, lb, mb, qb, rb, sb, tb, ub, vb, wb, xb, yb, zb, Ab, sc, tc, zc, Ac, Bc, Cc, Dc, Fc], Pc = {
            b: function(a, b, c) {
              a >>>= 0;
              new gb(a).vb(b >>> 0, c >>> 0);
              hb = a;
              ib++;
              throw hb;
            },
            ea: function(a) {
              Oc(a >>> 0, !B, 1, !oa, 131072, false);
              O.Db();
            },
            D: function(a) {
              a >>>= 0;
              E ? postMessage({ cmd: "cleanupThread", thread: a }) : ((a = O.jb[a]) || H(), O.Bb(a));
            },
            W: kb,
            y: lb,
            ka: mb,
            S: qb,
            U: rb,
            L: sb,
            ia: tb,
            ba: ub,
            ha: vb,
            F: wb,
            T: xb,
            Q: yb,
            ja: zb,
            R: Ab,
            I: function(a, b, c, d, e) {
              a >>>= 0;
              b >>>= 0;
              c >>>= 0;
              b = R(b);
              var f = -1 != b.indexOf("u");
              f && (e = (1n << 64n) - 1n);
              T(a, { name: b, fromWireType: (k) => k, toWireType: function(k, l) {
                if ("bigint" != typeof l && "number" != typeof l)
                  throw new TypeError(`Cannot convert "${Bb(l)}" to ${this.name}`);
                if (l < d || l > e)
                  throw new TypeError(`Passing a number "${Bb(l)}" from JS side to C/C++ side to an argument of type "${b}", which is outside the valid range [${d}, ${e}]!`);
                return l;
              }, argPackAdvance: 8, readValueFromPointer: Hb(b, c, !f), rb: null });
            },
            qa: function(a, b, c, d) {
              a >>>= 0;
              b = R(b >>> 0);
              T(a, {
                name: b,
                fromWireType: function(e) {
                  return !!e;
                },
                toWireType: function(e, f) {
                  return f ? c : d;
                },
                argPackAdvance: 8,
                readValueFromPointer: function(e) {
                  return this.fromWireType(t()[e >>> 0]);
                },
                rb: null
              });
            },
            pa: function(a, b) {
              a >>>= 0;
              b = R(b >>> 0);
              T(a, { name: b, fromWireType: (c) => {
                var d = V(c);
                Jb(c);
                return d;
              }, toWireType: (c, d) => W(d), argPackAdvance: 8, readValueFromPointer: Kb, rb: null });
            },
            H: function(a, b, c) {
              a >>>= 0;
              c >>>= 0;
              b = R(b >>> 0);
              T(a, { name: b, fromWireType: (d) => d, toWireType: (d, e) => e, argPackAdvance: 8, readValueFromPointer: Lb(b, c), rb: null });
            },
            t: function(a, b, c, d, e) {
              a >>>= 0;
              c >>>= 0;
              b = R(b >>> 0);
              -1 === e && (e = 4294967295);
              e = (l) => l;
              if (0 === d) {
                var f = 32 - 8 * c;
                e = (l) => l << f >>> f;
              }
              var k = b.includes("unsigned") ? function(l, q) {
                return q >>> 0;
              } : function(l, q) {
                return q;
              };
              T(a, { name: b, fromWireType: e, toWireType: k, argPackAdvance: 8, readValueFromPointer: Hb(b, c, 0 !== d), rb: null });
            },
            m: function(a, b, c) {
              function d(f) {
                var k = z()[f >>> 2 >>> 0];
                f = z()[f + 4 >>> 2 >>> 0];
                return new e(h().buffer, f, k);
              }
              a >>>= 0;
              var e = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][b];
              c = R(c >>> 0);
              T(
                a,
                { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d },
                { Hb: true }
              );
            },
            J: function(a, b) {
              a >>>= 0;
              b = R(b >>> 0);
              var c = "std::string" === b;
              T(a, { name: b, fromWireType: function(d) {
                var e = z()[d >>> 2 >>> 0], f = d + 4;
                if (c)
                  for (var k = f, l = 0; l <= e; ++l) {
                    var q = f + l;
                    if (l == e || 0 == t()[q >>> 0]) {
                      k = Ta(k, q - k);
                      if (void 0 === r)
                        var r = k;
                      else
                        r += String.fromCharCode(0), r += k;
                      k = q + 1;
                    }
                  }
                else {
                  r = Array(e);
                  for (l = 0; l < e; ++l)
                    r[l] = String.fromCharCode(t()[f + l >>> 0]);
                  r = r.join("");
                }
                X(d);
                return r;
              }, toWireType: function(d, e) {
                e instanceof ArrayBuffer && (e = new Uint8Array(e));
                var f = "string" == typeof e;
                if (!(f || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array))
                  throw new S("Cannot pass non-string to std::string");
                var k = c && f ? nb(e) : e.length;
                var l = uc(4 + k + 1), q = l + 4;
                z()[l >>> 2 >>> 0] = k;
                if (c && f)
                  pb(e, q, k + 1);
                else if (f)
                  for (f = 0; f < k; ++f) {
                    var r = e.charCodeAt(f);
                    if (255 < r)
                      throw X(q), new S("String has UTF-16 code units that do not fit in 8 bits");
                    t()[q + f >>> 0] = r;
                  }
                else
                  for (f = 0; f < k; ++f)
                    t()[q + f >>> 0] = e[f];
                null !== d && d.push(X, l);
                return l;
              }, argPackAdvance: 8, readValueFromPointer: Mb, rb(d) {
                X(d);
              } });
            },
            A: function(a, b, c) {
              a >>>= 0;
              b >>>= 0;
              c >>>= 0;
              c = R(c);
              if (2 === b) {
                var d = Ob;
                var e = Pb;
                var f = Qb;
                var k = () => ca();
                var l = 1;
              } else
                4 === b && (d = Rb, e = Sb, f = Tb, k = () => z(), l = 2);
              T(a, {
                name: c,
                fromWireType: (q) => {
                  for (var r = z()[q >>> 2 >>> 0], x = k(), C, N = q + 4, g = 0; g <= r; ++g) {
                    var u = q + 4 + g * b;
                    if (g == r || 0 == x[u >>> l])
                      N = d(N, u - N), void 0 === C ? C = N : (C += String.fromCharCode(0), C += N), N = u + b;
                  }
                  X(q);
                  return C;
                },
                toWireType: (q, r) => {
                  if ("string" != typeof r)
                    throw new S(`Cannot pass non-string to C++ string type ${c}`);
                  var x = f(r), C = uc(4 + x + b);
                  z()[C >>> 2] = x >> l;
                  e(r, C + 4, x + b);
                  null !== q && q.push(X, C);
                  return C;
                },
                argPackAdvance: 8,
                readValueFromPointer: Kb,
                rb(q) {
                  X(q);
                }
              });
            },
            ra: function(a, b) {
              a >>>= 0;
              b = R(b >>> 0);
              T(a, { Ib: true, name: b, argPackAdvance: 0, fromWireType: () => {
              }, toWireType: () => {
              } });
            },
            na: () => true,
            O: function(a, b) {
              a >>>= 0;
              a == b >>> 0 ? setTimeout(() => $a()) : E ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = O.jb[a]) && a.postMessage({ cmd: "checkMailbox" });
            },
            X: function(a, b, c, d) {
              b >>>= 0;
              c /= 2;
              ac.length = c;
              d = d >>> 0 >>> 3;
              for (var e = 0; e < c; e++)
                ac[e] = J[d + 2 * e] ? J[d + 2 * e + 1] : ha()[d + 2 * e + 1 >>> 0];
              a = Nc[a];
              O.Gb = b;
              b = a.apply(null, ac);
              O.Gb = 0;
              return b;
            },
            da: Vb,
            ma: function(a) {
              D && O.jb[a >>> 0].ref();
            },
            r: function(a, b, c) {
              b >>>= 0;
              c >>>= 0;
              a = V(a >>> 0);
              b = cc(b, "emval::as");
              var d = [], e = W(d);
              z()[c >>> 2 >>> 0] = e;
              return b.toWireType(d, a);
            },
            i: function(a, b, c, d, e) {
              c >>>= 0;
              d >>>= 0;
              e >>>= 0;
              a = fc[a >>> 0];
              b = V(b >>> 0);
              c = ec(c);
              var f = [];
              z()[d >>> 2 >>> 0] = W(f);
              return a(b, c, f, e);
            },
            u: function(a, b, c, d) {
              c >>>= 0;
              d >>>= 0;
              a = fc[a >>> 0];
              b = V(b >>> 0);
              c = ec(c);
              a(b, c, null, d);
            },
            c: Jb,
            K: function(a, b) {
              b >>>= 0;
              a = V(a >>> 0);
              b = V(b);
              return a == b;
            },
            o: function(a) {
              a >>>= 0;
              if (0 === a)
                return W(gc());
              a = ec(a);
              return W(gc()[a]);
            },
            h: function(a, b) {
              var c = ic(a, b >>> 0), d = c[0];
              b = d.name + "_$" + c.slice(1).map(function(x) {
                return x.name;
              }).join("_") + "$";
              var e = lc[b];
              if (void 0 !== e)
                return e;
              e = ["retType"];
              for (var f = [d], k = "", l = 0; l < a - 1; ++l)
                k += (0 !== l ? ", " : "") + "arg" + l, e.push("argType" + l), f.push(c[1 + l]);
              var q = "return function " + jc("methodCaller_" + b) + "(handle, name, destructors, args) {\n", r = 0;
              for (l = 0; l < a - 1; ++l)
                q += "    var arg" + l + " = argType" + l + ".readValueFromPointer(args" + (r ? "+" + r : "") + ");\n", r += c[l + 1].argPackAdvance;
              q += "    var rv = handle[name](" + k + ");\n";
              for (l = 0; l < a - 1; ++l)
                c[l + 1].deleteObject && (q += "    argType" + l + ".deleteObject(arg" + l + ");\n");
              d.Ib || (q += "    return retType.toWireType(destructors, rv);\n");
              e.push(q + "};\n");
              a = nc(e).apply(null, f);
              e = hc(a);
              return lc[b] = e;
            },
            q: function(a, b) {
              b >>>= 0;
              a = V(a >>> 0);
              b = V(b);
              return W(a[b]);
            },
            d: function(a) {
              a >>>= 0;
              4 < a && (U.get(a).Ab += 1);
            },
            x: function(a, b, c, d) {
              c >>>= 0;
              d >>>= 0;
              a = V(a >>> 0);
              var e = pc[b];
              e || (e = oc(b), pc[b] = e);
              return e(a, c, d);
            },
            v: function() {
              return W([]);
            },
            l: function(a) {
              a = V(a >>> 0);
              for (var b = Array(a.length), c = 0; c < a.length; c++)
                b[c] = a[c];
              return W(b);
            },
            e: function(a) {
              return W(ec(a >>> 0));
            },
            k: function() {
              return W({});
            },
            g: function(a) {
              a >>>= 0;
              for (var b = V(a); b.length; ) {
                var c = b.pop();
                b.pop()(c);
              }
              Jb(a);
            },
            j: function(a, b, c) {
              b >>>= 0;
              c >>>= 0;
              a = V(a >>> 0);
              b = V(b);
              c = V(c);
              a[b] = c;
            },
            f: function(a, b) {
              b >>>= 0;
              a = cc(a >>> 0, "_emval_take_value");
              a = a.readValueFromPointer(b);
              return W(a);
            },
            _: function(a, b) {
              a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
              b >>>= 0;
              a = new Date(1e3 * a);
              w()[b >>> 2 >>> 0] = a.getUTCSeconds();
              w()[b + 4 >>> 2 >>> 0] = a.getUTCMinutes();
              w()[b + 8 >>> 2 >>> 0] = a.getUTCHours();
              w()[b + 12 >>> 2 >>> 0] = a.getUTCDate();
              w()[b + 16 >>> 2 >>> 0] = a.getUTCMonth();
              w()[b + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;
              w()[b + 24 >>> 2 >>> 0] = a.getUTCDay();
              a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
              w()[b + 28 >>> 2 >>> 0] = a;
            },
            $: function(a, b) {
              a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
              b >>>= 0;
              a = new Date(1e3 * a);
              w()[b >>> 2 >>> 0] = a.getSeconds();
              w()[b + 4 >>> 2 >>> 0] = a.getMinutes();
              w()[b + 8 >>> 2 >>> 0] = a.getHours();
              w()[b + 12 >>> 2 >>> 0] = a.getDate();
              w()[b + 16 >>> 2 >>> 0] = a.getMonth();
              w()[b + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;
              w()[b + 24 >>> 2 >>> 0] = a.getDay();
              var c = (Y(a.getFullYear()) ? qc : rc)[a.getMonth()] + a.getDate() - 1 | 0;
              w()[b + 28 >>> 2 >>> 0] = c;
              w()[b + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());
              c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();
              var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
              a = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;
              w()[b + 32 >>> 2 >>> 0] = a;
            },
            aa: function(a) {
              a >>>= 0;
              var b = new Date(w()[a + 20 >>> 2 >>> 0] + 1900, w()[a + 16 >>> 2 >>> 0], w()[a + 12 >>> 2 >>> 0], w()[a + 8 >>> 2 >>> 0], w()[a + 4 >>> 2 >>> 0], w()[a >>> 2 >>> 0], 0), c = w()[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), e = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), f = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), k = Math.min(f, e);
              0 > c ? w()[a + 32 >>> 2 >>> 0] = Number(e != f && k == d) : 0 < c != (k == d) && (e = Math.max(f, e), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : e) - d)));
              w()[a + 24 >>> 2 >>> 0] = b.getDay();
              c = (Y(b.getFullYear()) ? qc : rc)[b.getMonth()] + b.getDate() - 1 | 0;
              w()[a + 28 >>> 2 >>> 0] = c;
              w()[a >>> 2 >>> 0] = b.getSeconds();
              w()[a + 4 >>> 2 >>> 0] = b.getMinutes();
              w()[a + 8 >>> 2 >>> 0] = b.getHours();
              w()[a + 12 >>> 2 >>> 0] = b.getDate();
              w()[a + 16 >>> 2 >>> 0] = b.getMonth();
              w()[a + 20 >>> 2 >>> 0] = b.getYear();
              return BigInt(b.getTime() / 1e3);
            },
            Y: sc,
            Z: tc,
            N: function(a, b, c) {
              function d(r) {
                return (r = r.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? r[1] : "GMT";
              }
              a >>>= 0;
              b >>>= 0;
              c >>>= 0;
              var e = (/* @__PURE__ */ new Date()).getFullYear(), f = new Date(e, 0, 1), k = new Date(e, 6, 1);
              e = f.getTimezoneOffset();
              var l = k.getTimezoneOffset(), q = Math.max(e, l);
              z()[a >>> 2 >>> 0] = 60 * q;
              w()[b >>> 2 >>> 0] = Number(e != l);
              a = d(f);
              b = d(k);
              a = vc(a);
              b = vc(b);
              l < e ? (z()[c >>> 2 >>> 0] = a, z()[c + 4 >>> 2 >>> 0] = b) : (z()[c >>> 2 >>> 0] = b, z()[c + 4 >>> 2 >>> 0] = a);
            },
            n: () => {
              H("");
            },
            E: () => {
            },
            G: () => Date.now(),
            la: () => {
              Fa += 1;
              throw "unwind";
            },
            P: function() {
              return 4294901760;
            },
            s: () => performance.timeOrigin + performance.now(),
            w: () => D ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency,
            M: function(a) {
              a >>>= 0;
              var b = t().length;
              if (a <= b || 4294901760 < a)
                return false;
              for (var c = 1; 4 >= c; c *= 2) {
                var d = b * (1 + 0.2 / c);
                d = Math.min(d, a + 100663296);
                var e = Math;
                d = Math.max(a, d);
                a: {
                  e = (e.min.call(e, 4294901760, d + (65536 - d % 65536) % 65536) - m.buffer.byteLength + 65535) / 65536;
                  try {
                    m.grow(e);
                    p();
                    var f = 1;
                    break a;
                  } catch (k) {
                  }
                  f = void 0;
                }
                if (f)
                  return true;
              }
              return false;
            },
            fa: zc,
            ga: Ac,
            V: Wa,
            z: Bc,
            C: Cc,
            ca: Dc,
            B: Fc,
            a: m || A.wasmMemory,
            oa: Kc,
            p: function(a, b, c, d) {
              return Kc(a >>> 0, b >>> 0, c >>> 0, d >>> 0);
            }
          }, Z = function() {
            var a = { a: Pc };
            K++;
            Na(a, function(b) {
              var c = b.module;
              Z = b.instance.exports;
              Z = Qc();
              O.Eb.push(Z.Xa);
              eb = Z._a;
              Da.unshift(Z.sa);
              xa = c;
              Ia();
            }).catch(ka);
            return {};
          }();
          A._OrtInit = (a, b) => (A._OrtInit = Z.ta)(a, b);
          A._OrtGetLastError = (a, b) => (A._OrtGetLastError = Z.ua)(a, b);
          A._OrtCreateSessionOptions = (a, b, c, d, e, f, k, l, q, r) => (A._OrtCreateSessionOptions = Z.va)(a, b, c, d, e, f, k, l, q, r);
          A._OrtAppendExecutionProvider = (a, b) => (A._OrtAppendExecutionProvider = Z.wa)(a, b);
          A._OrtAddFreeDimensionOverride = (a, b, c) => (A._OrtAddFreeDimensionOverride = Z.xa)(a, b, c);
          A._OrtAddSessionConfigEntry = (a, b, c) => (A._OrtAddSessionConfigEntry = Z.ya)(a, b, c);
          A._OrtReleaseSessionOptions = (a) => (A._OrtReleaseSessionOptions = Z.za)(a);
          A._OrtCreateSession = (a, b, c) => (A._OrtCreateSession = Z.Aa)(a, b, c);
          A._OrtReleaseSession = (a) => (A._OrtReleaseSession = Z.Ba)(a);
          A._OrtGetInputOutputCount = (a, b, c) => (A._OrtGetInputOutputCount = Z.Ca)(a, b, c);
          A._OrtGetInputName = (a, b) => (A._OrtGetInputName = Z.Da)(a, b);
          A._OrtGetOutputName = (a, b) => (A._OrtGetOutputName = Z.Ea)(a, b);
          A._OrtFree = (a) => (A._OrtFree = Z.Fa)(a);
          A._OrtCreateTensor = (a, b, c, d, e, f) => (A._OrtCreateTensor = Z.Ga)(a, b, c, d, e, f);
          A._OrtGetTensorData = (a, b, c, d, e) => (A._OrtGetTensorData = Z.Ha)(a, b, c, d, e);
          A._OrtReleaseTensor = (a) => (A._OrtReleaseTensor = Z.Ia)(a);
          A._OrtCreateRunOptions = (a, b, c, d) => (A._OrtCreateRunOptions = Z.Ja)(a, b, c, d);
          A._OrtAddRunConfigEntry = (a, b, c) => (A._OrtAddRunConfigEntry = Z.Ka)(a, b, c);
          A._OrtReleaseRunOptions = (a) => (A._OrtReleaseRunOptions = Z.La)(a);
          A._OrtCreateBinding = (a) => (A._OrtCreateBinding = Z.Ma)(a);
          A._OrtBindInput = (a, b, c) => (A._OrtBindInput = Z.Na)(a, b, c);
          A._OrtBindOutput = (a, b, c, d) => (A._OrtBindOutput = Z.Oa)(a, b, c, d);
          A._OrtClearBoundOutputs = (a) => (A._OrtClearBoundOutputs = Z.Pa)(a);
          A._OrtReleaseBinding = (a) => (A._OrtReleaseBinding = Z.Qa)(a);
          A._OrtRunWithBinding = (a, b, c, d, e) => (A._OrtRunWithBinding = Z.Ra)(a, b, c, d, e);
          A._OrtRun = (a, b, c, d, e, f, k, l) => (A._OrtRun = Z.Sa)(a, b, c, d, e, f, k, l);
          A._OrtEndProfiling = (a) => (A._OrtEndProfiling = Z.Ta)(a);
          var Za = A._pthread_self = () => (Za = A._pthread_self = Z.Ua)(), uc = A._malloc = (a) => (uc = A._malloc = Z.Va)(a), X = A._free = (a) => (X = A._free = Z.Wa)(a);
          A.__emscripten_tls_init = () => (A.__emscripten_tls_init = Z.Xa)();
          var bc = (a) => (bc = Z.Ya)(a);
          A.__embind_initialize_bindings = () => (A.__embind_initialize_bindings = Z.Za)();
          var Oc = A.__emscripten_thread_init = (a, b, c, d, e, f) => (Oc = A.__emscripten_thread_init = Z.$a)(a, b, c, d, e, f);
          A.__emscripten_thread_crashed = () => (A.__emscripten_thread_crashed = Z.ab)();
          var $b = (a, b, c, d) => ($b = Z.bb)(a, b, c, d), Ya = (a) => (Ya = Z.cb)(a), fb = A.__emscripten_thread_exit = (a) => (fb = A.__emscripten_thread_exit = Z.db)(a), Wb = A.__emscripten_check_mailbox = () => (Wb = A.__emscripten_check_mailbox = Z.eb)(), bb = (a, b) => (bb = Z.fb)(a, b), Xb = () => (Xb = Z.gb)(), cb = (a) => (cb = Z.hb)(a), Zb = (a) => (Zb = Z.ib)(a);
          function Qc() {
            var a = Z;
            a = Object.assign({}, a);
            var b = (d) => () => d() >>> 0, c = (d) => (e) => d(e) >>> 0;
            a.__errno_location = b(a.__errno_location);
            a.Ua = b(a.Ua);
            a.Va = c(a.Va);
            a.Ya = c(a.Ya);
            a.gb = b(a.gb);
            a.ib = c(a.ib);
            return a;
          }
          A.keepRuntimeAlive = Ga;
          A.wasmMemory = m;
          A.stackAlloc = Zb;
          A.stackSave = Xb;
          A.stackRestore = cb;
          A.UTF8ToString = Ta;
          A.stringToUTF8 = pb;
          A.lengthBytesUTF8 = nb;
          A.ExitStatus = Oa;
          A.PThread = O;
          var Rc;
          L = function Sc() {
            Rc || Tc();
            Rc || (L = Sc);
          };
          function Tc() {
            0 < K || (E ? (ja(A), E || ab(Da), startWorker(A)) : (ab(Ca), 0 < K || Rc || (Rc = true, A.calledRun = true, ya || (E || ab(Da), ja(A), E || ab(Ea)))));
          }
          Tc();
          return moduleArg.ready;
        };
      })();
      if (typeof exports === "object" && typeof module === "object")
        module.exports = ortWasmThreaded;
      else if (typeof define === "function" && define["amd"])
        define([], () => ortWasmThreaded);
    }
  });

  // web/lib/wasm/binding/ort-wasm-threaded.worker.js
  var require_ort_wasm_threaded_worker = __commonJS({
    "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {
      module.exports = '"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*is_main=*/0,/*is_runtime=*/0,/*can_block=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){Module["__embind_initialize_bindings"]();initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err(`worker.js received unknown command ${e.data.cmd}`);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}}self.onmessage=handleMessage;\n';
    }
  });

  // web/lib/wasm/wasm-factory.ts
  var ortWasmFactory, ortWasmFactoryThreaded, wasm, initialized, initializing, aborted, isMultiThreadSupported, isSimdSupported, getWasmFileName, initializeWebAssembly, getInstance;
  var init_wasm_factory = __esm({
    "web/lib/wasm/wasm-factory.ts"() {
      "use strict";
      init_node_path();
      if (false) {
        ortWasmFactory = null;
      } else {
        ortWasmFactory = true ? require_ort_wasm() : null;
      }
      ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;
      initialized = false;
      initializing = false;
      aborted = false;
      isMultiThreadSupported = () => {
        try {
          if (typeof SharedArrayBuffer === "undefined") {
            return false;
          }
          if (typeof MessageChannel !== "undefined") {
            new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));
          }
          return WebAssembly.validate(new Uint8Array([
            0,
            97,
            115,
            109,
            1,
            0,
            0,
            0,
            1,
            4,
            1,
            96,
            0,
            0,
            3,
            2,
            1,
            0,
            5,
            4,
            1,
            3,
            1,
            1,
            10,
            11,
            1,
            9,
            0,
            65,
            0,
            254,
            16,
            2,
            0,
            26,
            11
          ]));
        } catch (e) {
          return false;
        }
      };
      isSimdSupported = () => {
        try {
          return WebAssembly.validate(new Uint8Array([
            0,
            97,
            115,
            109,
            1,
            0,
            0,
            0,
            1,
            4,
            1,
            96,
            0,
            0,
            3,
            2,
            1,
            0,
            10,
            30,
            1,
            28,
            0,
            65,
            0,
            253,
            15,
            253,
            12,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            253,
            186,
            1,
            26,
            11
          ]));
        } catch (e) {
          return false;
        }
      };
      getWasmFileName = (useSimd, useThreads) => {
        if (useSimd) {
          if (false) {
            return "ort-training-wasm-simd.wasm";
          }
          return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";
        } else {
          return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";
        }
      };
      initializeWebAssembly = async (flags) => {
        if (initialized) {
          return Promise.resolve();
        }
        if (initializing) {
          throw new Error("multiple calls to 'initializeWebAssembly()' detected.");
        }
        if (aborted) {
          throw new Error("previous call to 'initializeWebAssembly()' failed.");
        }
        initializing = true;
        const timeout = flags.initTimeout;
        const numThreads = flags.numThreads;
        const simd = flags.simd;
        const useThreads = numThreads > 1 && isMultiThreadSupported();
        const useSimd = simd && isSimdSupported();
        const wasmPaths = flags.wasmPaths;
        const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;
        const wasmFileName = getWasmFileName(useSimd, useThreads);
        const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;
        let isTimeout = false;
        const tasks = [];
        if (timeout > 0) {
          tasks.push(new Promise((resolve) => {
            setTimeout(() => {
              isTimeout = true;
              resolve();
            }, timeout);
          }));
        }
        tasks.push(new Promise((resolve, reject) => {
          const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;
          const config = {
            locateFile: (fileName, scriptDirectory) => {
              if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {
                return URL.createObjectURL(new Blob(
                  [
                    // This require() function is handled by esbuild plugin to load file content as string.
                    // eslint-disable-next-line @typescript-eslint/no-require-imports
                    require_ort_wasm_threaded_worker()
                  ],
                  { type: "text/javascript" }
                ));
              }
              if (fileName.endsWith(".wasm")) {
                if (wasmPathOverride) {
                  return wasmPathOverride;
                }
                const prefix = wasmPrefixOverride ?? scriptDirectory;
                if (false) {
                  if (wasmFileName === "ort-wasm-simd.wasm") {
                    return prefix + "ort-wasm-simd.jsep.wasm";
                  } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {
                    return prefix + "ort-wasm-simd-threaded.jsep.wasm";
                  }
                }
                return prefix + wasmFileName;
              }
              return scriptDirectory + fileName;
            }
          };
          if (useThreads) {
            if (typeof Blob === "undefined") {
              config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");
            } else {
              const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;
              config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });
            }
          }
          factory(config).then(
            // wasm module initialized successfully
            (module) => {
              initializing = false;
              initialized = true;
              wasm = module;
              resolve();
            },
            // wasm module failed to initialize
            (what) => {
              initializing = false;
              aborted = true;
              reject(what);
            }
          );
        }));
        await Promise.race(tasks);
        if (isTimeout) {
          throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);
        }
      };
      getInstance = () => {
        if (initialized && wasm) {
          return wasm;
        }
        throw new Error("WebAssembly is not initialized yet.");
      };
    }
  });

  // web/lib/wasm/wasm-utils.ts
  var allocWasmString, iterateExtraOptions, checkLastError;
  var init_wasm_utils = __esm({
    "web/lib/wasm/wasm-utils.ts"() {
      "use strict";
      init_wasm_factory();
      allocWasmString = (data, allocs) => {
        const wasm2 = getInstance();
        const dataLength = wasm2.lengthBytesUTF8(data) + 1;
        const dataOffset = wasm2._malloc(dataLength);
        wasm2.stringToUTF8(data, dataOffset, dataLength);
        allocs.push(dataOffset);
        return dataOffset;
      };
      iterateExtraOptions = (options, prefix, seen, handler) => {
        if (typeof options == "object" && options !== null) {
          if (seen.has(options)) {
            throw new Error("Circular reference in options");
          } else {
            seen.add(options);
          }
        }
        Object.entries(options).forEach(([key, value]) => {
          const name = prefix ? prefix + key : key;
          if (typeof value === "object") {
            iterateExtraOptions(value, name + ".", seen, handler);
          } else if (typeof value === "string" || typeof value === "number") {
            handler(name, value.toString());
          } else if (typeof value === "boolean") {
            handler(name, value ? "1" : "0");
          } else {
            throw new Error(`Can't handle extra config type: ${typeof value}`);
          }
        });
      };
      checkLastError = (message) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        try {
          const paramsOffset = wasm2.stackAlloc(8);
          wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);
          const errorCode = wasm2.HEAP32[paramsOffset / 4];
          const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];
          const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";
          throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);
        } finally {
          wasm2.stackRestore(stack);
        }
      };
    }
  });

  // web/lib/wasm/run-options.ts
  var setRunOptions;
  var init_run_options = __esm({
    "web/lib/wasm/run-options.ts"() {
      "use strict";
      init_wasm_factory();
      init_wasm_utils();
      setRunOptions = (options) => {
        const wasm2 = getInstance();
        let runOptionsHandle = 0;
        const allocs = [];
        const runOptions = options || {};
        try {
          if (options?.logSeverityLevel === void 0) {
            runOptions.logSeverityLevel = 2;
          } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {
            throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);
          }
          if (options?.logVerbosityLevel === void 0) {
            runOptions.logVerbosityLevel = 0;
          } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {
            throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);
          }
          if (options?.terminate === void 0) {
            runOptions.terminate = false;
          }
          let tagDataOffset = 0;
          if (options?.tag !== void 0) {
            tagDataOffset = allocWasmString(options.tag, allocs);
          }
          runOptionsHandle = wasm2._OrtCreateRunOptions(
            runOptions.logSeverityLevel,
            runOptions.logVerbosityLevel,
            !!runOptions.terminate,
            tagDataOffset
          );
          if (runOptionsHandle === 0) {
            checkLastError("Can't create run options.");
          }
          if (options?.extra !== void 0) {
            iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
              const keyDataOffset = allocWasmString(key, allocs);
              const valueDataOffset = allocWasmString(value, allocs);
              if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                checkLastError(`Can't set a run config entry: ${key} - ${value}.`);
              }
            });
          }
          return [runOptionsHandle, allocs];
        } catch (e) {
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
          throw e;
        }
      };
    }
  });

  // web/lib/wasm/session-options.ts
  var getGraphOptimzationLevel, getExecutionMode, appendDefaultOptions, setExecutionProviders, setSessionOptions;
  var init_session_options = __esm({
    "web/lib/wasm/session-options.ts"() {
      "use strict";
      init_wasm_factory();
      init_wasm_utils();
      getGraphOptimzationLevel = (graphOptimizationLevel) => {
        switch (graphOptimizationLevel) {
          case "disabled":
            return 0;
          case "basic":
            return 1;
          case "extended":
            return 2;
          case "all":
            return 99;
          default:
            throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);
        }
      };
      getExecutionMode = (executionMode) => {
        switch (executionMode) {
          case "sequential":
            return 0;
          case "parallel":
            return 1;
          default:
            throw new Error(`unsupported execution mode: ${executionMode}`);
        }
      };
      appendDefaultOptions = (options) => {
        if (!options.extra) {
          options.extra = {};
        }
        if (!options.extra.session) {
          options.extra.session = {};
        }
        const session = options.extra.session;
        if (!session.use_ort_model_bytes_directly) {
          session.use_ort_model_bytes_directly = "1";
        }
        if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {
          options.enableMemPattern = false;
        }
      };
      setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {
        for (const ep of executionProviders) {
          let epName = typeof ep === "string" ? ep : ep.name;
          switch (epName) {
            case "xnnpack":
              epName = "XNNPACK";
              break;
            case "webnn":
              epName = "WEBNN";
              if (typeof ep !== "string") {
                const webnnOptions = ep;
                if (webnnOptions?.deviceType) {
                  const keyDataOffset = allocWasmString("deviceType", allocs);
                  const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);
                  }
                }
                if (webnnOptions?.numThreads) {
                  let numThreads = webnnOptions.numThreads;
                  if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {
                    numThreads = 0;
                  }
                  const keyDataOffset = allocWasmString("numThreads", allocs);
                  const valueDataOffset = allocWasmString(numThreads.toString(), allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(`Can't set a session config entry: 'numThreads' - ${webnnOptions.numThreads}.`);
                  }
                }
                if (webnnOptions?.powerPreference) {
                  const keyDataOffset = allocWasmString("powerPreference", allocs);
                  const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(
                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`
                    );
                  }
                }
              }
              break;
            case "webgpu":
              epName = "JS";
              if (typeof ep !== "string") {
                const webgpuOptions = ep;
                if (webgpuOptions?.preferredLayout) {
                  if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {
                    throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);
                  }
                  const keyDataOffset = allocWasmString("preferredLayout", allocs);
                  const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(
                      `Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`
                    );
                  }
                }
              }
              break;
            case "wasm":
            case "cpu":
              continue;
            default:
              throw new Error(`not supported execution provider: ${epName}`);
          }
          const epNameDataOffset = allocWasmString(epName, allocs);
          if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {
            checkLastError(`Can't append execution provider: ${epName}.`);
          }
        }
      };
      setSessionOptions = (options) => {
        const wasm2 = getInstance();
        let sessionOptionsHandle = 0;
        const allocs = [];
        const sessionOptions = options || {};
        appendDefaultOptions(sessionOptions);
        try {
          const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");
          const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");
          const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;
          const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;
          if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {
            throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);
          }
          const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;
          if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {
            throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);
          }
          const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;
          sessionOptionsHandle = wasm2._OrtCreateSessionOptions(
            graphOptimizationLevel,
            !!sessionOptions.enableCpuMemArena,
            !!sessionOptions.enableMemPattern,
            executionMode,
            !!sessionOptions.enableProfiling,
            0,
            logIdDataOffset,
            logSeverityLevel,
            logVerbosityLevel,
            optimizedModelFilePathOffset
          );
          if (sessionOptionsHandle === 0) {
            checkLastError("Can't create session options.");
          }
          if (sessionOptions.executionProviders) {
            setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);
          }
          if (sessionOptions.freeDimensionOverrides) {
            for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {
              if (typeof name !== "string") {
                throw new Error(`free dimension override name must be a string: ${name}`);
              }
              if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {
                throw new Error(`free dimension override value must be a non-negative integer: ${value}`);
              }
              const nameOffset = allocWasmString(name, allocs);
              if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {
                checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);
              }
            }
          }
          if (sessionOptions.extra !== void 0) {
            iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
              const keyDataOffset = allocWasmString(key, allocs);
              const valueDataOffset = allocWasmString(value, allocs);
              if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                checkLastError(`Can't set a session config entry: ${key} - ${value}.`);
              }
            });
          }
          return [sessionOptionsHandle, allocs];
        } catch (e) {
          if (sessionOptionsHandle !== 0) {
            wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
          throw e;
        }
      };
    }
  });

  // web/lib/wasm/wasm-common.ts
  var tensorDataTypeStringToEnum, tensorDataTypeEnumToString, getTensorElementSize, tensorTypeToTypedArrayConstructor, logLevelStringToEnum, isGpuBufferSupportedType, dataLocationStringToEnum;
  var init_wasm_common = __esm({
    "web/lib/wasm/wasm-common.ts"() {
      "use strict";
      tensorDataTypeStringToEnum = (type) => {
        switch (type) {
          case "int8":
            return 3 /* int8 */;
          case "uint8":
            return 2 /* uint8 */;
          case "bool":
            return 9 /* bool */;
          case "int16":
            return 5 /* int16 */;
          case "uint16":
            return 4 /* uint16 */;
          case "int32":
            return 6 /* int32 */;
          case "uint32":
            return 12 /* uint32 */;
          case "float16":
            return 10 /* float16 */;
          case "float32":
            return 1 /* float */;
          case "float64":
            return 11 /* double */;
          case "string":
            return 8 /* string */;
          case "int64":
            return 7 /* int64 */;
          case "uint64":
            return 13 /* uint64 */;
          default:
            throw new Error(`unsupported data type: ${type}`);
        }
      };
      tensorDataTypeEnumToString = (typeProto) => {
        switch (typeProto) {
          case 3 /* int8 */:
            return "int8";
          case 2 /* uint8 */:
            return "uint8";
          case 9 /* bool */:
            return "bool";
          case 5 /* int16 */:
            return "int16";
          case 4 /* uint16 */:
            return "uint16";
          case 6 /* int32 */:
            return "int32";
          case 12 /* uint32 */:
            return "uint32";
          case 10 /* float16 */:
            return "float16";
          case 1 /* float */:
            return "float32";
          case 11 /* double */:
            return "float64";
          case 8 /* string */:
            return "string";
          case 7 /* int64 */:
            return "int64";
          case 13 /* uint64 */:
            return "uint64";
          default:
            throw new Error(`unsupported data type: ${typeProto}`);
        }
      };
      getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];
      tensorTypeToTypedArrayConstructor = (type) => {
        switch (type) {
          case "float16":
            return Uint16Array;
          case "float32":
            return Float32Array;
          case "uint8":
            return Uint8Array;
          case "int8":
            return Int8Array;
          case "uint16":
            return Uint16Array;
          case "int16":
            return Int16Array;
          case "int32":
            return Int32Array;
          case "bool":
            return Uint8Array;
          case "float64":
            return Float64Array;
          case "uint32":
            return Uint32Array;
          case "int64":
            return BigInt64Array;
          case "uint64":
            return BigUint64Array;
          default:
            throw new Error(`unsupported type: ${type}`);
        }
      };
      logLevelStringToEnum = (logLevel) => {
        switch (logLevel) {
          case "verbose":
            return 0;
          case "info":
            return 1;
          case "warning":
            return 2;
          case "error":
            return 3;
          case "fatal":
            return 4;
          default:
            throw new Error(`unsupported logging level: ${logLevel}`);
        }
      };
      isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";
      dataLocationStringToEnum = (location) => {
        switch (location) {
          case "none":
            return 0;
          case "cpu":
            return 1;
          case "cpu-pinned":
            return 2;
          case "texture":
            return 3;
          case "gpu-buffer":
            return 4;
          default:
            throw new Error(`unsupported data location: ${location}`);
        }
      };
    }
  });

  // web/lib/wasm/wasm-core-impl.ts
  var ortEnvInitialized, getSessionInputOutputCount, initOrt, initRuntime, activeSessions, isOrtEnvInitialized, createSessionAllocate, createSessionFinalize, createSession, releaseSession, prepareInputOutputTensor, run, endProfiling, extractTransferableBuffers;
  var init_wasm_core_impl = __esm({
    "web/lib/wasm/wasm-core-impl.ts"() {
      "use strict";
      init_run_options();
      init_session_options();
      init_wasm_common();
      init_wasm_factory();
      init_wasm_utils();
      ortEnvInitialized = false;
      getSessionInputOutputCount = (sessionHandle) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        try {
          const dataOffset = wasm2.stackAlloc(8);
          const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);
          if (errorCode !== 0) {
            checkLastError("Can't get session input/output count.");
          }
          return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];
        } finally {
          wasm2.stackRestore(stack);
        }
      };
      initOrt = (numThreads, loggingLevel) => {
        const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);
        if (errorCode !== 0) {
          checkLastError("Can't initialize onnxruntime.");
        }
      };
      initRuntime = async (env3) => {
        initOrt(env3.wasm.numThreads, logLevelStringToEnum(env3.logLevel));
        if (false) {
          const initJsep = null.init;
          await initJsep(getInstance(), env3);
        }
        ortEnvInitialized = true;
      };
      activeSessions = /* @__PURE__ */ new Map();
      isOrtEnvInitialized = () => ortEnvInitialized;
      createSessionAllocate = (model) => {
        const wasm2 = getInstance();
        const modelDataOffset = wasm2._malloc(model.byteLength);
        if (modelDataOffset === 0) {
          throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);
        }
        wasm2.HEAPU8.set(model, modelDataOffset);
        return [modelDataOffset, model.byteLength];
      };
      createSessionFinalize = (modelData, options) => {
        const wasm2 = getInstance();
        let sessionHandle = 0;
        let sessionOptionsHandle = 0;
        let ioBindingHandle = 0;
        let allocs = [];
        const inputNamesUTF8Encoded = [];
        const outputNamesUTF8Encoded = [];
        try {
          [sessionOptionsHandle, allocs] = setSessionOptions(options);
          sessionHandle = wasm2._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);
          if (sessionHandle === 0) {
            checkLastError("Can't create a session.");
          }
          const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);
          const inputNames = [];
          const outputNames = [];
          const outputPreferredLocations = [];
          for (let i = 0; i < inputCount; i++) {
            const name = wasm2._OrtGetInputName(sessionHandle, i);
            if (name === 0) {
              checkLastError("Can't get an input name.");
            }
            inputNamesUTF8Encoded.push(name);
            inputNames.push(wasm2.UTF8ToString(name));
          }
          for (let i = 0; i < outputCount; i++) {
            const name = wasm2._OrtGetOutputName(sessionHandle, i);
            if (name === 0) {
              checkLastError("Can't get an output name.");
            }
            outputNamesUTF8Encoded.push(name);
            const nameString = wasm2.UTF8ToString(name);
            outputNames.push(nameString);
            if (false) {
              const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";
              if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {
                throw new Error(`Not supported preferred output location: ${location}.`);
              }
              outputPreferredLocations.push(location);
            }
          }
          let bindingState = null;
          if (false) {
            ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);
            if (ioBindingHandle === 0) {
              checkLastError("Can't create IO binding.");
            }
            bindingState = {
              handle: ioBindingHandle,
              outputPreferredLocations,
              outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))
            };
          }
          activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);
          return [sessionHandle, inputNames, outputNames];
        } catch (e) {
          inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
          outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
          if (ioBindingHandle !== 0) {
            wasm2._OrtReleaseBinding(ioBindingHandle);
          }
          if (sessionHandle !== 0) {
            wasm2._OrtReleaseSession(sessionHandle);
          }
          throw e;
        } finally {
          wasm2._free(modelData[0]);
          if (sessionOptionsHandle !== 0) {
            wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
        }
      };
      createSession = (model, options) => {
        const modelData = createSessionAllocate(model);
        return createSessionFinalize(modelData, options);
      };
      releaseSession = (sessionId) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error(`cannot release session. invalid session id: ${sessionId}`);
        }
        const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;
        if (ioBindingState) {
          wasm2._OrtReleaseBinding(ioBindingState.handle);
        }
        wasm2.jsepUnregisterBuffers?.(sessionId);
        inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        wasm2._OrtReleaseSession(sessionHandle);
        activeSessions.delete(sessionId);
      };
      prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {
        if (!tensor) {
          tensorHandles.push(0);
          return;
        }
        const wasm2 = getInstance();
        const dataType = tensor[0];
        const dims = tensor[1];
        const location = tensor[3];
        let rawData;
        let dataByteLength;
        if (dataType === "string" && location === "gpu-buffer") {
          throw new Error("String tensor is not supported on GPU.");
        }
        if (location === "gpu-buffer") {
          const gpuBuffer = tensor[2].gpuBuffer;
          const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));
          dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;
          rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);
        } else {
          const data = tensor[2];
          if (Array.isArray(data)) {
            dataByteLength = 4 * data.length;
            rawData = wasm2._malloc(dataByteLength);
            allocs.push(rawData);
            let dataIndex = rawData / 4;
            for (let i = 0; i < data.length; i++) {
              if (typeof data[i] !== "string") {
                throw new TypeError(`tensor data at index ${i} is not a string`);
              }
              wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);
            }
          } else {
            dataByteLength = data.byteLength;
            rawData = wasm2._malloc(dataByteLength);
            allocs.push(rawData);
            wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);
          }
        }
        const stack = wasm2.stackSave();
        const dimsOffset = wasm2.stackAlloc(4 * dims.length);
        try {
          let dimIndex = dimsOffset / 4;
          dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);
          const tensor2 = wasm2._OrtCreateTensor(
            tensorDataTypeStringToEnum(dataType),
            rawData,
            dataByteLength,
            dimsOffset,
            dims.length,
            dataLocationStringToEnum(location)
          );
          if (tensor2 === 0) {
            checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);
          }
          tensorHandles.push(tensor2);
        } finally {
          wasm2.stackRestore(stack);
        }
      };
      run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error(`cannot run inference. invalid session id: ${sessionId}`);
        }
        const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;
        const inputCount = inputIndices.length;
        const outputCount = outputIndices.length;
        let runOptionsHandle = 0;
        let runOptionsAllocs = [];
        const inputTensorHandles = [];
        const outputTensorHandles = [];
        const inputOutputAllocs = [];
        const beforeRunStack = wasm2.stackSave();
        const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);
        const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);
        const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);
        const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);
        try {
          [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
          for (let i = 0; i < inputCount; i++) {
            prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);
          }
          for (let i = 0; i < outputCount; i++) {
            prepareInputOutputTensor(
              outputTensors[i],
              outputTensorHandles,
              inputOutputAllocs,
              sessionId,
              inputCount + outputIndices[i]
            );
          }
          let inputValuesIndex = inputValuesOffset / 4;
          let inputNamesIndex = inputNamesOffset / 4;
          let outputValuesIndex = outputValuesOffset / 4;
          let outputNamesIndex = outputNamesOffset / 4;
          for (let i = 0; i < inputCount; i++) {
            wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];
            wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];
          }
          for (let i = 0; i < outputCount; i++) {
            wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];
            wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];
          }
          if (false) {
            const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;
            if (inputNamesUTF8Encoded.length !== inputCount) {
              throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`);
            }
            for (let i = 0; i < inputCount; i++) {
              const index = inputIndices[i];
              const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);
              if (errorCode2 !== 0) {
                checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);
              }
            }
            for (let i = 0; i < outputCount; i++) {
              const index = outputIndices[i];
              const location = outputTensors[i]?.[3];
              if (location) {
                const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);
                if (errorCode2 !== 0) {
                  checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);
                }
              } else {
                const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);
                if (errorCode2 !== 0) {
                  checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);
                }
              }
            }
          }
          let errorCode;
          if (false) {
            errorCode = await wasm2._OrtRunWithBinding(
              sessionHandle,
              ioBindingState.handle,
              outputCount,
              outputValuesOffset,
              runOptionsHandle
            );
          } else {
            errorCode = await wasm2._OrtRun(
              sessionHandle,
              inputNamesOffset,
              inputValuesOffset,
              inputCount,
              outputNamesOffset,
              outputCount,
              outputValuesOffset,
              runOptionsHandle
            );
          }
          if (errorCode !== 0) {
            checkLastError("failed to call OrtRun().");
          }
          const output = [];
          for (let i = 0; i < outputCount; i++) {
            const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];
            if (tensor === outputTensorHandles[i]) {
              output.push(outputTensors[i]);
              continue;
            }
            const beforeGetTensorDataStack = wasm2.stackSave();
            const tensorDataOffset = wasm2.stackAlloc(4 * 4);
            let keepOutputTensor = false;
            let type, dataOffset = 0;
            try {
              const errorCode2 = wasm2._OrtGetTensorData(
                tensor,
                tensorDataOffset,
                tensorDataOffset + 4,
                tensorDataOffset + 8,
                tensorDataOffset + 12
              );
              if (errorCode2 !== 0) {
                checkLastError(`Can't access output tensor data on index ${i}.`);
              }
              let tensorDataIndex = tensorDataOffset / 4;
              const dataType = wasm2.HEAPU32[tensorDataIndex++];
              dataOffset = wasm2.HEAPU32[tensorDataIndex++];
              const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];
              const dimsLength = wasm2.HEAPU32[tensorDataIndex++];
              const dims = [];
              for (let i2 = 0; i2 < dimsLength; i2++) {
                dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);
              }
              wasm2._OrtFree(dimsOffset);
              const size = dims.reduce((a, b) => a * b, 1);
              type = tensorDataTypeEnumToString(dataType);
              const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];
              if (type === "string") {
                if (preferredLocation === "gpu-buffer") {
                  throw new Error("String tensor is not supported on GPU.");
                }
                const stringData = [];
                let dataIndex = dataOffset / 4;
                for (let i2 = 0; i2 < size; i2++) {
                  const offset = wasm2.HEAPU32[dataIndex++];
                  const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;
                  stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));
                }
                output.push([type, dims, stringData, "cpu"]);
              } else {
                if (preferredLocation === "gpu-buffer" && size > 0) {
                  const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);
                  const elementSize = getTensorElementSize(dataType);
                  if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {
                    throw new Error(`Unsupported data type: ${type}`);
                  }
                  keepOutputTensor = true;
                  output.push([
                    type,
                    dims,
                    {
                      gpuBuffer,
                      download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),
                      dispose: () => {
                        wasm2._OrtReleaseTensor(tensor);
                      }
                    },
                    "gpu-buffer"
                  ]);
                } else {
                  const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);
                  const data = new typedArrayConstructor(size);
                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));
                  output.push([type, dims, data, "cpu"]);
                }
              }
            } finally {
              wasm2.stackRestore(beforeGetTensorDataStack);
              if (type === "string" && dataOffset) {
                wasm2._free(dataOffset);
              }
              if (!keepOutputTensor) {
                wasm2._OrtReleaseTensor(tensor);
              }
            }
          }
          if (ioBindingState) {
            wasm2._OrtClearBoundOutputs(ioBindingState.handle);
          }
          return output;
        } finally {
          wasm2.stackRestore(beforeRunStack);
          inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          inputOutputAllocs.forEach((p) => wasm2._free(p));
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          runOptionsAllocs.forEach((p) => wasm2._free(p));
        }
      };
      endProfiling = (sessionId) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error("invalid session id");
        }
        const sessionHandle = session[0];
        const profileFileName = wasm2._OrtEndProfiling(sessionHandle);
        if (profileFileName === 0) {
          checkLastError("Can't get an profile file name.");
        }
        wasm2._OrtFree(profileFileName);
      };
      extractTransferableBuffers = (tensors) => {
        const buffers = [];
        for (const tensor of tensors) {
          const data = tensor[2];
          if (!Array.isArray(data) && "buffer" in data) {
            buffers.push(data.buffer);
          }
        }
        return buffers;
      };
    }
  });

  // proxy-worker:./proxy-worker/main
  var require_main = __commonJS({
    "proxy-worker:./proxy-worker/main"(exports, module) {
      module.exports = '/*!\n * ONNX Runtime Web v1.17.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";\n(() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === "object" || typeof from === "function") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n\n  // nodejs-ignore:fs\n  var fs_exports = {};\n  __export(fs_exports, {\n    readFile: () => readFile\n  });\n  var readFile;\n  var init_fs = __esm({\n    "nodejs-ignore:fs"() {\n      readFile = void 0;\n    }\n  });\n\n  // nodejs-ignore:path\n  var path_exports = {};\n  __export(path_exports, {\n    join: () => join2\n  });\n  var join2;\n  var init_path = __esm({\n    "nodejs-ignore:path"() {\n      join2 = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm.js\n  var require_ort_wasm = __commonJS({\n    "web/lib/wasm/binding/ort-wasm.js"(exports, module) {\n      "use strict";\n      var ortWasm = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          var h = moduleArg, aa, ba;\n          h.ready = new Promise((a, b) => {\n            aa = a;\n            ba = b;\n          });\n          var ca = Object.assign({}, h), da = "./this.program", ea = "object" == typeof window, m = "function" == typeof importScripts, fa = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, p = "", ha, t, w;\n          if (fa) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), ia = (init_path(), __toCommonJS(path_exports));\n            p = m ? ia.dirname(p) + "/" : __dirname + "/";\n            ha = (a, b) => {\n              a = a.startsWith("file://") ? new URL(a) : ia.normalize(a);\n              return fs.readFileSync(a, b ? void 0 : "utf8");\n            };\n            w = (a) => {\n              a = ha(a, true);\n              a.buffer || (a = new Uint8Array(a));\n              return a;\n            };\n            t = (a, b, c, d = true) => {\n              a = a.startsWith("file://") ? new URL(a) : ia.normalize(a);\n              fs.readFile(a, d ? void 0 : "utf8", (e, g) => {\n                e ? c(e) : b(d ? g.buffer : g);\n              });\n            };\n            !h.thisProgram && 1 < process.argv.length && (da = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            h.inspect = () => "[Emscripten Module object]";\n          } else if (ea || m)\n            m ? p = self.location.href : "undefined" != typeof document && document.currentScript && (p = document.currentScript.src), _scriptDir && (p = _scriptDir), 0 !== p.indexOf("blob:") ? p = p.substr(0, p.replace(/[?#].*/, "").lastIndexOf("/") + 1) : p = "", ha = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, m && (w = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), t = (a, b, c) => {\n              var d = new XMLHttpRequest();\n              d.open("GET", a, true);\n              d.responseType = "arraybuffer";\n              d.onload = () => {\n                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();\n              };\n              d.onerror = c;\n              d.send(null);\n            };\n          var ja = console.log.bind(console), x = console.error.bind(console);\n          Object.assign(h, ca);\n          ca = null;\n          "object" != typeof WebAssembly && ka("no native wasm support detected");\n          var z, la = false, A, B, C, D, E, G, ma, na, oa, pa;\n          function qa() {\n            var a = z.buffer;\n            h.HEAP8 = A = new Int8Array(a);\n            h.HEAP16 = C = new Int16Array(a);\n            h.HEAPU8 = B = new Uint8Array(a);\n            h.HEAPU16 = D = new Uint16Array(a);\n            h.HEAP32 = E = new Int32Array(a);\n            h.HEAPU32 = G = new Uint32Array(a);\n            h.HEAPF32 = ma = new Float32Array(a);\n            h.HEAPF64 = pa = new Float64Array(a);\n            h.HEAP64 = na = new BigInt64Array(a);\n            h.HEAPU64 = oa = new BigUint64Array(a);\n          }\n          var ra = [], sa = [], ta = [], I = 0, ua = null, J = null;\n          function ka(a) {\n            a = "Aborted(" + a + ")";\n            x(a);\n            la = true;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            ba(a);\n            throw a;\n          }\n          function va(a) {\n            return a.startsWith("data:application/octet-stream;base64,");\n          }\n          var K;\n          K = "ort-wasm.wasm";\n          if (!va(K)) {\n            var wa = K;\n            K = h.locateFile ? h.locateFile(wa, p) : p + wa;\n          }\n          function xa(a) {\n            if (w)\n              return w(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function ya(a) {\n            if (ea || m) {\n              if ("function" == typeof fetch && !a.startsWith("file://"))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => xa(a));\n              if (t)\n                return new Promise((b, c) => {\n                  t(a, (d) => b(new Uint8Array(d)), c);\n                });\n            }\n            return Promise.resolve().then(() => xa(a));\n          }\n          function za(a, b, c) {\n            return ya(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {\n              x(`failed to asynchronously prepare wasm: ${d}`);\n              ka(d);\n            });\n          }\n          function Aa(a, b) {\n            var c = K;\n            return "function" != typeof WebAssembly.instantiateStreaming || va(c) || c.startsWith("file://") || fa || "function" != typeof fetch ? za(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(e) {\n              x(`wasm streaming compile failed: ${e}`);\n              x("falling back to ArrayBuffer instantiation");\n              return za(c, a, b);\n            }));\n          }\n          function Ba(a) {\n            this.Va = a - 24;\n            this.fb = function(b) {\n              G[this.Va + 4 >>> 2 >>> 0] = b;\n            };\n            this.eb = function(b) {\n              G[this.Va + 8 >>> 2 >>> 0] = b;\n            };\n            this.Za = function(b, c) {\n              this.$a();\n              this.fb(b);\n              this.eb(c);\n            };\n            this.$a = function() {\n              G[this.Va + 16 >>> 2 >>> 0] = 0;\n            };\n          }\n          var Ca = 0, Da = 0, Ea = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Fa = (a, b, c) => {\n            b >>>= 0;\n            var d = b + c;\n            for (c = b; a[c] && !(c >= d); )\n              ++c;\n            if (16 < c - b && a.buffer && Ea)\n              return Ea.decode(a.subarray(b, c));\n            for (d = ""; b < c; ) {\n              var e = a[b++];\n              if (e & 128) {\n                var g = a[b++] & 63;\n                if (192 == (e & 224))\n                  d += String.fromCharCode((e & 31) << 6 | g);\n                else {\n                  var l = a[b++] & 63;\n                  e = 224 == (e & 240) ? (e & 15) << 12 | g << 6 | l : (e & 7) << 18 | g << 12 | l << 6 | a[b++] & 63;\n                  65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));\n                }\n              } else\n                d += String.fromCharCode(e);\n            }\n            return d;\n          }, L = (a, b) => (a >>>= 0) ? Fa(B, a, b) : "", M = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, N = (a, b, c, d) => {\n            c >>>= 0;\n            if (!(0 < d))\n              return 0;\n            var e = c;\n            d = c + d - 1;\n            for (var g = 0; g < a.length; ++g) {\n              var l = a.charCodeAt(g);\n              if (55296 <= l && 57343 >= l) {\n                var k = a.charCodeAt(++g);\n                l = 65536 + ((l & 1023) << 10) | k & 1023;\n              }\n              if (127 >= l) {\n                if (c >= d)\n                  break;\n                b[c++ >>> 0] = l;\n              } else {\n                if (2047 >= l) {\n                  if (c + 1 >= d)\n                    break;\n                  b[c++ >>> 0] = 192 | l >> 6;\n                } else {\n                  if (65535 >= l) {\n                    if (c + 2 >= d)\n                      break;\n                    b[c++ >>> 0] = 224 | l >> 12;\n                  } else {\n                    if (c + 3 >= d)\n                      break;\n                    b[c++ >>> 0] = 240 | l >> 18;\n                    b[c++ >>> 0] = 128 | l >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | l >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | l & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - e;\n          }, Ga = (a) => {\n            if (null === a)\n              return "null";\n            var b = typeof a;\n            return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;\n          }, Ha, O = (a) => {\n            for (var b = ""; B[a >>> 0]; )\n              b += Ha[B[a++ >>> 0]];\n            return b;\n          }, Ia = {}, Ja = {}, Ka = {}, P;\n          function La(a, b, c = {}) {\n            var d = b.name;\n            if (!a)\n              throw new P(`type "${d}" must have a positive integer typeid pointer`);\n            if (Ja.hasOwnProperty(a)) {\n              if (c.gb)\n                return;\n              throw new P(`Cannot register type \'${d}\' twice`);\n            }\n            Ja[a] = b;\n            delete Ka[a];\n            Ia.hasOwnProperty(a) && (b = Ia[a], delete Ia[a], b.forEach((e) => e()));\n          }\n          function Q(a, b, c = {}) {\n            if (!("argPackAdvance" in b))\n              throw new TypeError("registerType registeredInstance requires argPackAdvance");\n            La(a, b, c);\n          }\n          var Ma = (a, b, c) => {\n            switch (b) {\n              case 1:\n                return c ? (d) => A[d >>> 0 >>> 0] : (d) => B[d >>> 0 >>> 0];\n              case 2:\n                return c ? (d) => C[d >>> 1 >>> 0] : (d) => D[d >>> 1 >>> 0];\n              case 4:\n                return c ? (d) => E[d >>> 2 >>> 0] : (d) => G[d >>> 2 >>> 0];\n              case 8:\n                return c ? (d) => na[d >>> 3] : (d) => oa[d >>> 3];\n              default:\n                throw new TypeError(`invalid integer width (${b}): ${a}`);\n            }\n          };\n          function Na() {\n            this.Sa = [void 0];\n            this.bb = [];\n          }\n          var R = new Na();\n          function Oa(a) {\n            a >>>= 0;\n            a >= R.Va && 0 === --R.get(a).cb && R.$a(a);\n          }\n          var S = (a) => {\n            if (!a)\n              throw new P("Cannot use deleted val. handle = " + a);\n            return R.get(a).value;\n          }, T = (a) => {\n            switch (a) {\n              case void 0:\n                return 1;\n              case null:\n                return 2;\n              case true:\n                return 3;\n              case false:\n                return 4;\n              default:\n                return R.Za({ cb: 1, value: a });\n            }\n          };\n          function Pa(a) {\n            return this.fromWireType(E[a >>> 2 >>> 0]);\n          }\n          var Qa = (a, b) => {\n            switch (b) {\n              case 4:\n                return function(c) {\n                  return this.fromWireType(ma[c >>> 2 >>> 0]);\n                };\n              case 8:\n                return function(c) {\n                  return this.fromWireType(pa[c >>> 3 >>> 0]);\n                };\n              default:\n                throw new TypeError(`invalid float width (${b}): ${a}`);\n            }\n          };\n          function Ra(a) {\n            return this.fromWireType(G[a >>> 2 >>> 0]);\n          }\n          var Sa = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, Ta = (a, b) => {\n            var c = a >> 1;\n            for (var d = c + b / 2; !(c >= d) && D[c >>> 0]; )\n              ++c;\n            c <<= 1;\n            if (32 < c - a && Sa)\n              return Sa.decode(B.subarray(a >>> 0, c >>> 0));\n            c = "";\n            for (d = 0; !(d >= b / 2); ++d) {\n              var e = C[a + 2 * d >>> 1 >>> 0];\n              if (0 == e)\n                break;\n              c += String.fromCharCode(e);\n            }\n            return c;\n          }, Ua = (a, b, c) => {\n            void 0 === c && (c = 2147483647);\n            if (2 > c)\n              return 0;\n            c -= 2;\n            var d = b;\n            c = c < 2 * a.length ? c / 2 : a.length;\n            for (var e = 0; e < c; ++e)\n              C[b >>> 1 >>> 0] = a.charCodeAt(e), b += 2;\n            C[b >>> 1 >>> 0] = 0;\n            return b - d;\n          }, Va = (a) => 2 * a.length, Wa = (a, b) => {\n            for (var c = 0, d = ""; !(c >= b / 4); ) {\n              var e = E[a + 4 * c >>> 2 >>> 0];\n              if (0 == e)\n                break;\n              ++c;\n              65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e);\n            }\n            return d;\n          }, Xa = (a, b, c) => {\n            b >>>= 0;\n            void 0 === c && (c = 2147483647);\n            if (4 > c)\n              return 0;\n            var d = b;\n            c = d + c - 4;\n            for (var e = 0; e < a.length; ++e) {\n              var g = a.charCodeAt(e);\n              if (55296 <= g && 57343 >= g) {\n                var l = a.charCodeAt(++e);\n                g = 65536 + ((g & 1023) << 10) | l & 1023;\n              }\n              E[b >>> 2 >>> 0] = g;\n              b += 4;\n              if (b + 4 > c)\n                break;\n            }\n            E[b >>> 2 >>> 0] = 0;\n            return b - d;\n          }, Ya = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              55296 <= d && 57343 >= d && ++c;\n              b += 4;\n            }\n            return b;\n          }, V = (a, b) => {\n            var c = Ja[a];\n            if (void 0 === c)\n              throw a = Za(a), c = O(a), U(a), new P(b + " has unknown type " + c);\n            return c;\n          }, $a = {}, W = (a) => {\n            var b = $a[a];\n            return void 0 === b ? O(a) : b;\n          }, X = [], bb = () => "object" == typeof globalThis ? globalThis : Function("return this")(), cb = (a) => {\n            var b = X.length;\n            X.push(a);\n            return b;\n          }, db = (a, b) => {\n            for (var c = Array(a), d = 0; d < a; ++d)\n              c[d] = V(G[b + 4 * d >>> 2 >>> 0], "parameter " + d);\n            return c;\n          }, eb = (a) => {\n            if (void 0 === a)\n              return "_unknown";\n            a = a.replace(/[^a-zA-Z0-9_]/g, "$");\n            var b = a.charCodeAt(0);\n            return 48 <= b && 57 >= b ? `_${a}` : a;\n          }, fb = {};\n          function gb(a, b) {\n            a = eb(a);\n            return { [a]: function() {\n              return b.apply(this, arguments);\n            } }[a];\n          }\n          function hb(a) {\n            var b = Function;\n            if (!(b instanceof Function))\n              throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);\n            var c = gb(b.name || "unknownFunctionName", function() {\n            });\n            c.prototype = b.prototype;\n            c = new c();\n            a = b.apply(c, a);\n            return a instanceof Object ? a : c;\n          }\n          var ib = (a) => {\n            for (var b = "", c = 0; c < a; ++c)\n              b += (0 !== c ? ", " : "") + "arg" + c;\n            var d = "return function emval_allocator_" + a + "(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n";\n            for (c = 0; c < a; ++c)\n              d += "var argType" + c + " = requireRegisteredType(HEAPU32[((argTypes)>>>2)], \'parameter " + c + "\');\\nvar arg" + c + " = argType" + c + ".readValueFromPointer(args);\\nargs += argType" + c + "[\'argPackAdvance\'];\\nargTypes += 4;\\n";\n            return new Function("requireRegisteredType", "Module", "valueToHandle", "getMemory", d + ("var obj = new constructor(" + b + ");\\nreturn valueToHandle(obj);\\n}\\n"))(V, h, T, () => G);\n          }, jb = {}, Y = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), kb = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], lb = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], nb = (a) => {\n            var b = M(a) + 1, c = mb(b);\n            c && N(a, B, c, b);\n            return c;\n          }, ob = {}, qb = () => {\n            if (!pb) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: da || "./this.program" }, b;\n              for (b in ob)\n                void 0 === ob[b] ? delete a[b] : a[b] = ob[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              pb = c;\n            }\n            return pb;\n          }, pb, rb = [null, [], []], sb = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], tb = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function ub(a) {\n            var b = Array(M(a) + 1);\n            N(a, b, 0, b.length);\n            return b;\n          }\n          function vb(a, b, c, d) {\n            function e(f, r, u) {\n              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < r; )\n                f = u[0] + f;\n              return f;\n            }\n            function g(f, r) {\n              return e(f, r, "0");\n            }\n            function l(f, r) {\n              function u(ab) {\n                return 0 > ab ? -1 : 0 < ab ? 1 : 0;\n              }\n              var H;\n              0 === (H = u(f.getFullYear() - r.getFullYear())) && 0 === (H = u(f.getMonth() - r.getMonth())) && (H = u(f.getDate() - r.getDate()));\n              return H;\n            }\n            function k(f) {\n              switch (f.getDay()) {\n                case 0:\n                  return new Date(f.getFullYear() - 1, 11, 29);\n                case 1:\n                  return f;\n                case 2:\n                  return new Date(f.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    f.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(f.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(f.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(f.getFullYear() - 1, 11, 30);\n              }\n            }\n            function n(f) {\n              var r = f.Ta;\n              for (f = new Date(new Date(f.Ua + 1900, 0, 1).getTime()); 0 < r; ) {\n                var u = f.getMonth(), H = (Y(f.getFullYear()) ? sb : tb)[u];\n                if (r > H - f.getDate())\n                  r -= H - f.getDate() + 1, f.setDate(1), 11 > u ? f.setMonth(u + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));\n                else {\n                  f.setDate(f.getDate() + r);\n                  break;\n                }\n              }\n              u = new Date(f.getFullYear() + 1, 0, 4);\n              r = k(new Date(\n                f.getFullYear(),\n                0,\n                4\n              ));\n              u = k(u);\n              return 0 >= l(r, f) ? 0 >= l(u, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            var q = G[d + 40 >>> 2 >>> 0];\n            d = { kb: E[d >>> 2 >>> 0], jb: E[d + 4 >>> 2 >>> 0], Xa: E[d + 8 >>> 2 >>> 0], ab: E[d + 12 >>> 2 >>> 0], Ya: E[d + 16 >>> 2 >>> 0], Ua: E[d + 20 >>> 2 >>> 0], Oa: E[d + 24 >>> 2 >>> 0], Ta: E[d + 28 >>> 2 >>> 0], mb: E[d + 32 >>> 2 >>> 0], ib: E[d + 36 >>> 2 >>> 0], lb: q ? L(q) : "" };\n            c = L(c);\n            q = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var v in q)\n              c = c.replace(new RegExp(v, "g"), q[v]);\n            var y = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), F = "January February March April May June July August September October November December".split(" ");\n            q = { "%a": (f) => y[f.Oa].substring(0, 3), "%A": (f) => y[f.Oa], "%b": (f) => F[f.Ya].substring(0, 3), "%B": (f) => F[f.Ya], "%C": (f) => g((f.Ua + 1900) / 100 | 0, 2), "%d": (f) => g(f.ab, 2), "%e": (f) => e(f.ab, 2, " "), "%g": (f) => n(f).toString().substring(2), "%G": (f) => n(f), "%H": (f) => g(f.Xa, 2), "%I": (f) => {\n              f = f.Xa;\n              0 == f ? f = 12 : 12 < f && (f -= 12);\n              return g(f, 2);\n            }, "%j": (f) => {\n              for (var r = 0, u = 0; u <= f.Ya - 1; r += (Y(f.Ua + 1900) ? sb : tb)[u++])\n                ;\n              return g(f.ab + r, 3);\n            }, "%m": (f) => g(f.Ya + 1, 2), "%M": (f) => g(f.jb, 2), "%n": () => "\\n", "%p": (f) => 0 <= f.Xa && 12 > f.Xa ? "AM" : "PM", "%S": (f) => g(f.kb, 2), "%t": () => "	", "%u": (f) => f.Oa || 7, "%U": (f) => g(Math.floor((f.Ta + 7 - f.Oa) / 7), 2), "%V": (f) => {\n              var r = Math.floor((f.Ta + 7 - (f.Oa + 6) % 7) / 7);\n              2 >= (f.Oa + 371 - f.Ta - 2) % 7 && r++;\n              if (r)\n                53 == r && (u = (f.Oa + 371 - f.Ta) % 7, 4 == u || 3 == u && Y(f.Ua) || (r = 1));\n              else {\n                r = 52;\n                var u = (f.Oa + 7 - f.Ta - 1) % 7;\n                (4 == u || 5 == u && Y(f.Ua % 400 - 1)) && r++;\n              }\n              return g(r, 2);\n            }, "%w": (f) => f.Oa, "%W": (f) => g(Math.floor((f.Ta + 7 - (f.Oa + 6) % 7) / 7), 2), "%y": (f) => (f.Ua + 1900).toString().substring(2), "%Y": (f) => f.Ua + 1900, "%z": (f) => {\n              f = f.ib;\n              var r = 0 <= f;\n              f = Math.abs(f) / 60;\n              return (r ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);\n            }, "%Z": (f) => f.lb, "%%": () => "%" };\n            c = c.replace(/%%/g, "\\0\\0");\n            for (v in q)\n              c.includes(v) && (c = c.replace(new RegExp(v, "g"), q[v](d)));\n            c = c.replace(/\\0\\0/g, "%");\n            v = ub(c);\n            if (v.length > b)\n              return 0;\n            A.set(v, a >>> 0);\n            return v.length - 1;\n          }\n          for (var wb = Array(256), xb = 0; 256 > xb; ++xb)\n            wb[xb] = String.fromCharCode(xb);\n          Ha = wb;\n          P = h.BindingError = class extends Error {\n            constructor(a) {\n              super(a);\n              this.name = "BindingError";\n            }\n          };\n          h.InternalError = class extends Error {\n            constructor(a) {\n              super(a);\n              this.name = "InternalError";\n            }\n          };\n          Object.assign(Na.prototype, { get(a) {\n            return this.Sa[a];\n          }, has(a) {\n            return void 0 !== this.Sa[a];\n          }, Za(a) {\n            var b = this.bb.pop() || this.Sa.length;\n            this.Sa[b] = a;\n            return b;\n          }, $a(a) {\n            this.Sa[a] = void 0;\n            this.bb.push(a);\n          } });\n          R.Sa.push({ value: void 0 }, { value: null }, { value: true }, { value: false });\n          R.Va = R.Sa.length;\n          h.count_emval_handles = () => {\n            for (var a = 0, b = R.Va; b < R.Sa.length; ++b)\n              void 0 !== R.Sa[b] && ++a;\n            return a;\n          };\n          var yb = { a: function(a, b, c) {\n            a >>>= 0;\n            new Ba(a).Za(b >>> 0, c >>> 0);\n            Ca = a;\n            Da++;\n            throw Ca;\n          }, v: function() {\n            return 0;\n          }, ba: function() {\n          }, N: function() {\n          }, P: function() {\n          }, H: function() {\n            return 0;\n          }, $: function() {\n          }, V: function() {\n          }, _: function() {\n          }, A: function() {\n          }, O: function() {\n          }, L: function() {\n          }, aa: function() {\n          }, M: function() {\n          }, D: function(a, b, c, d, e) {\n            b >>>= 0;\n            b = O(b);\n            var g = -1 != b.indexOf("u");\n            g && (e = (1n << 64n) - 1n);\n            Q(a >>> 0, { name: b, fromWireType: (l) => l, toWireType: function(l, k) {\n              if ("bigint" != typeof k && "number" != typeof k)\n                throw new TypeError(`Cannot convert "${Ga(k)}" to ${this.name}`);\n              if (k < d || k > e)\n                throw new TypeError(`Passing a number "${Ga(k)}" from JS side to C/C++ side to an argument of type "${b}", which is outside the valid range [${d}, ${e}]!`);\n              return k;\n            }, argPackAdvance: 8, readValueFromPointer: Ma(b, c >>> 0, !g), Wa: null });\n          }, ea: function(a, b, c, d) {\n            b = O(b >>> 0);\n            Q(a >>> 0, { name: b, fromWireType: function(e) {\n              return !!e;\n            }, toWireType: function(e, g) {\n              return g ? c : d;\n            }, argPackAdvance: 8, readValueFromPointer: function(e) {\n              return this.fromWireType(B[e >>> 0]);\n            }, Wa: null });\n          }, da: function(a, b) {\n            b = O(b >>> 0);\n            Q(a >>> 0, {\n              name: b,\n              fromWireType: (c) => {\n                var d = S(c);\n                Oa(c);\n                return d;\n              },\n              toWireType: (c, d) => T(d),\n              argPackAdvance: 8,\n              readValueFromPointer: Pa,\n              Wa: null\n            });\n          }, C: function(a, b, c) {\n            b = O(b >>> 0);\n            Q(a >>> 0, { name: b, fromWireType: (d) => d, toWireType: (d, e) => e, argPackAdvance: 8, readValueFromPointer: Qa(b, c >>> 0), Wa: null });\n          }, p: function(a, b, c, d, e) {\n            a >>>= 0;\n            c >>>= 0;\n            b = O(b >>> 0);\n            -1 === e && (e = 4294967295);\n            e = (k) => k;\n            if (0 === d) {\n              var g = 32 - 8 * c;\n              e = (k) => k << g >>> g;\n            }\n            var l = b.includes("unsigned") ? function(k, n) {\n              return n >>> 0;\n            } : function(k, n) {\n              return n;\n            };\n            Q(a, {\n              name: b,\n              fromWireType: e,\n              toWireType: l,\n              argPackAdvance: 8,\n              readValueFromPointer: Ma(b, c, 0 !== d),\n              Wa: null\n            });\n          }, l: function(a, b, c) {\n            function d(g) {\n              return new e(A.buffer, G[g + 4 >>> 2 >>> 0], G[g >>> 2 >>> 0]);\n            }\n            var e = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][b];\n            c = O(c >>> 0);\n            Q(a >>> 0, { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d }, { gb: true });\n          }, E: function(a, b) {\n            b = O(b >>> 0);\n            var c = "std::string" === b;\n            Q(a >>> 0, { name: b, fromWireType: function(d) {\n              var e = G[d >>> 2 >>> 0], g = d + 4;\n              if (c)\n                for (var l = g, k = 0; k <= e; ++k) {\n                  var n = g + k;\n                  if (k == e || 0 == B[n >>> 0]) {\n                    l = L(l, n - l);\n                    if (void 0 === q)\n                      var q = l;\n                    else\n                      q += String.fromCharCode(0), q += l;\n                    l = n + 1;\n                  }\n                }\n              else {\n                q = Array(e);\n                for (k = 0; k < e; ++k)\n                  q[k] = String.fromCharCode(B[g + k >>> 0]);\n                q = q.join("");\n              }\n              U(d);\n              return q;\n            }, toWireType: function(d, e) {\n              e instanceof ArrayBuffer && (e = new Uint8Array(e));\n              var g = "string" == typeof e;\n              if (!(g || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array))\n                throw new P("Cannot pass non-string to std::string");\n              var l = c && g ? M(e) : e.length;\n              var k = mb(4 + l + 1), n = k + 4;\n              G[k >>> 2 >>> 0] = l;\n              if (c && g)\n                N(e, B, n, l + 1);\n              else if (g)\n                for (g = 0; g < l; ++g) {\n                  var q = e.charCodeAt(g);\n                  if (255 < q)\n                    throw U(n), new P("String has UTF-16 code units that do not fit in 8 bits");\n                  B[n + g >>> 0] = q;\n                }\n              else\n                for (g = 0; g < l; ++g)\n                  B[n + g >>> 0] = e[g];\n              null !== d && d.push(U, k);\n              return k;\n            }, argPackAdvance: 8, readValueFromPointer: Ra, Wa(d) {\n              U(d);\n            } });\n          }, x: function(a, b, c) {\n            b >>>= 0;\n            c >>>= 0;\n            c = O(c);\n            if (2 === b) {\n              var d = Ta;\n              var e = Ua;\n              var g = Va;\n              var l = () => D;\n              var k = 1;\n            } else\n              4 === b && (d = Wa, e = Xa, g = Ya, l = () => G, k = 2);\n            Q(a >>> 0, { name: c, fromWireType: (n) => {\n              for (var q = G[n >>> 2 >>> 0], v = l(), y, F = n + 4, f = 0; f <= q; ++f) {\n                var r = n + 4 + f * b;\n                if (f == q || 0 == v[r >>> k])\n                  F = d(F, r - F), void 0 === y ? y = F : (y += String.fromCharCode(0), y += F), F = r + b;\n              }\n              U(n);\n              return y;\n            }, toWireType: (n, q) => {\n              if ("string" != typeof q)\n                throw new P(`Cannot pass non-string to C++ string type ${c}`);\n              var v = g(q), y = mb(4 + v + b);\n              G[y >>> 2] = v >> k;\n              e(q, y + 4, v + b);\n              null !== n && n.push(U, y);\n              return y;\n            }, argPackAdvance: 8, readValueFromPointer: Pa, Wa(n) {\n              U(n);\n            } });\n          }, fa: function(a, b) {\n            b = O(b >>> 0);\n            Q(a >>> 0, { hb: true, name: b, argPackAdvance: 0, fromWireType: () => {\n            }, toWireType: () => {\n            } });\n          }, ca: () => true, o: function(a, b, c) {\n            b >>>= 0;\n            c >>>= 0;\n            a = S(a >>> 0);\n            b = V(b, "emval::as");\n            var d = [], e = T(d);\n            G[c >>> 2 >>> 0] = e;\n            return b.toWireType(d, a);\n          }, h: function(a, b, c, d, e) {\n            c >>>= 0;\n            d >>>= 0;\n            e >>>= 0;\n            a = X[a >>> 0];\n            b = S(b >>> 0);\n            c = W(c);\n            var g = [];\n            G[d >>> 2 >>> 0] = T(g);\n            return a(b, c, g, e);\n          }, r: function(a, b, c, d) {\n            c >>>= 0;\n            d >>>= 0;\n            a = X[a >>> 0];\n            b = S(b >>> 0);\n            c = W(c);\n            a(b, c, null, d);\n          }, b: Oa, F: function(a, b) {\n            b >>>= 0;\n            a = S(a >>> 0);\n            b = S(b);\n            return a == b;\n          }, u: function(a) {\n            a >>>= 0;\n            if (0 === a)\n              return T(bb());\n            a = W(a);\n            return T(bb()[a]);\n          }, g: function(a, b) {\n            var c = db(a, b >>> 0), d = c[0];\n            b = d.name + "_$" + c.slice(1).map(function(v) {\n              return v.name;\n            }).join("_") + "$";\n            var e = fb[b];\n            if (void 0 !== e)\n              return e;\n            e = ["retType"];\n            for (var g = [d], l = "", k = 0; k < a - 1; ++k)\n              l += (0 !== k ? ", " : "") + "arg" + k, e.push("argType" + k), g.push(c[1 + k]);\n            var n = "return function " + eb("methodCaller_" + b) + "(handle, name, destructors, args) {\\n", q = 0;\n            for (k = 0; k < a - 1; ++k)\n              n += "    var arg" + k + " = argType" + k + ".readValueFromPointer(args" + (q ? "+" + q : "") + ");\\n", q += c[k + 1].argPackAdvance;\n            n += "    var rv = handle[name](" + l + ");\\n";\n            for (k = 0; k < a - 1; ++k)\n              c[k + 1].deleteObject && (n += "    argType" + k + ".deleteObject(arg" + k + ");\\n");\n            d.hb || (n += "    return retType.toWireType(destructors, rv);\\n");\n            e.push(n + "};\\n");\n            a = hb(e).apply(null, g);\n            e = cb(a);\n            return fb[b] = e;\n          }, q: function(a, b) {\n            b >>>= 0;\n            a = S(a >>> 0);\n            b = S(b);\n            return T(a[b]);\n          }, c: function(a) {\n            a >>>= 0;\n            4 < a && (R.get(a).cb += 1);\n          }, G: function(a, b, c, d) {\n            c >>>= 0;\n            d >>>= 0;\n            a = S(a >>> 0);\n            var e = jb[b];\n            e || (e = ib(b), jb[b] = e);\n            return e(a, c, d);\n          }, s: function() {\n            return T([]);\n          }, k: function(a) {\n            a = S(a >>> 0);\n            for (var b = Array(a.length), c = 0; c < a.length; c++)\n              b[c] = a[c];\n            return T(b);\n          }, d: function(a) {\n            return T(W(a >>> 0));\n          }, j: function() {\n            return T({});\n          }, f: function(a) {\n            a >>>= 0;\n            for (var b = S(a); b.length; ) {\n              var c = b.pop();\n              b.pop()(c);\n            }\n            Oa(a);\n          }, i: function(a, b, c) {\n            b >>>= 0;\n            c >>>= 0;\n            a = S(a >>> 0);\n            b = S(b);\n            c = S(c);\n            a[b] = c;\n          }, e: function(a, b) {\n            b >>>= 0;\n            a = V(a >>> 0, "_emval_take_value");\n            a = a.readValueFromPointer(b);\n            return T(a);\n          }, S: function(a, b) {\n            a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);\n            b >>>= 0;\n            a = new Date(1e3 * a);\n            E[b >>> 2 >>> 0] = a.getUTCSeconds();\n            E[b + 4 >>> 2 >>> 0] = a.getUTCMinutes();\n            E[b + 8 >>> 2 >>> 0] = a.getUTCHours();\n            E[b + 12 >>> 2 >>> 0] = a.getUTCDate();\n            E[b + 16 >>> 2 >>> 0] = a.getUTCMonth();\n            E[b + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;\n            E[b + 24 >>> 2 >>> 0] = a.getUTCDay();\n            E[b + 28 >>> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n          }, T: function(a, b) {\n            a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);\n            b >>>= 0;\n            a = new Date(1e3 * a);\n            E[b >>> 2 >>> 0] = a.getSeconds();\n            E[b + 4 >>> 2 >>> 0] = a.getMinutes();\n            E[b + 8 >>> 2 >>> 0] = a.getHours();\n            E[b + 12 >>> 2 >>> 0] = a.getDate();\n            E[b + 16 >>> 2 >>> 0] = a.getMonth();\n            E[b + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;\n            E[b + 24 >>> 2 >>> 0] = a.getDay();\n            E[b + 28 >>> 2 >>> 0] = (Y(a.getFullYear()) ? kb : lb)[a.getMonth()] + a.getDate() - 1 | 0;\n            E[b + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n            var c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset(), d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n            E[b + 32 >>> 2 >>> 0] = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;\n          }, U: function(a) {\n            a >>>= 0;\n            var b = new Date(E[a + 20 >>> 2 >>> 0] + 1900, E[a + 16 >>> 2 >>> 0], E[a + 12 >>> 2 >>> 0], E[a + 8 >>> 2 >>> 0], E[a + 4 >>> 2 >>> 0], E[a >>> 2 >>> 0], 0), c = E[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), e = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), g = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), l = Math.min(\n              g,\n              e\n            );\n            0 > c ? E[a + 32 >>> 2 >>> 0] = Number(e != g && l == d) : 0 < c != (l == d) && (e = Math.max(g, e), b.setTime(b.getTime() + 6e4 * ((0 < c ? l : e) - d)));\n            E[a + 24 >>> 2 >>> 0] = b.getDay();\n            E[a + 28 >>> 2 >>> 0] = (Y(b.getFullYear()) ? kb : lb)[b.getMonth()] + b.getDate() - 1 | 0;\n            E[a >>> 2 >>> 0] = b.getSeconds();\n            E[a + 4 >>> 2 >>> 0] = b.getMinutes();\n            E[a + 8 >>> 2 >>> 0] = b.getHours();\n            E[a + 12 >>> 2 >>> 0] = b.getDate();\n            E[a + 16 >>> 2 >>> 0] = b.getMonth();\n            E[a + 20 >>> 2 >>> 0] = b.getYear();\n            return BigInt(b.getTime() / 1e3);\n          }, Q: function() {\n            return -52;\n          }, R: function() {\n          }, J: function(a, b, c) {\n            function d(n) {\n              return (n = n.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? n[1] : "GMT";\n            }\n            c >>>= 0;\n            var e = (/* @__PURE__ */ new Date()).getFullYear(), g = new Date(e, 0, 1), l = new Date(e, 6, 1);\n            e = g.getTimezoneOffset();\n            var k = l.getTimezoneOffset();\n            G[a >>> 0 >>> 2 >>> 0] = 60 * Math.max(e, k);\n            E[b >>> 0 >>> 2 >>> 0] = Number(e != k);\n            a = d(g);\n            b = d(l);\n            a = nb(a);\n            b = nb(b);\n            k < e ? (G[c >>> 2 >>> 0] = a, G[c + 4 >>> 2 >>> 0] = b) : (G[c >>> 2 >>> 0] = b, G[c + 4 >>> 2 >>> 0] = a);\n          }, t: () => {\n            ka("");\n          }, B: () => Date.now(), K: function() {\n            return 4294901760;\n          }, n: () => performance.now(), Z: function(a, b, c) {\n            b >>>= 0;\n            return B.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);\n          }, I: function(a) {\n            a >>>= 0;\n            var b = B.length;\n            if (4294901760 < a)\n              return false;\n            for (var c = 1; 4 >= c; c *= 2) {\n              var d = b * (1 + 0.2 / c);\n              d = Math.min(d, a + 100663296);\n              var e = Math;\n              d = Math.max(a, d);\n              a: {\n                e = (e.min.call(e, 4294901760, d + (65536 - d % 65536) % 65536) - z.buffer.byteLength + 65535) / 65536;\n                try {\n                  z.grow(e);\n                  qa();\n                  var g = 1;\n                  break a;\n                } catch (l) {\n                }\n                g = void 0;\n              }\n              if (g)\n                return true;\n            }\n            return false;\n          }, X: function(a, b) {\n            a >>>= 0;\n            b >>>= 0;\n            var c = 0;\n            qb().forEach((d, e) => {\n              var g = b + c;\n              e = G[a + 4 * e >>> 2 >>> 0] = g;\n              for (g = 0; g < d.length; ++g)\n                A[e++ >>> 0 >>> 0] = d.charCodeAt(g);\n              A[e >>> 0 >>> 0] = 0;\n              c += d.length + 1;\n            });\n            return 0;\n          }, Y: function(a, b) {\n            a >>>= 0;\n            b >>>= 0;\n            var c = qb();\n            G[a >>> 2 >>> 0] = c.length;\n            var d = 0;\n            c.forEach((e) => d += e.length + 1);\n            G[b >>> 2 >>> 0] = d;\n            return 0;\n          }, w: () => 52, z: function() {\n            return 52;\n          }, W: function() {\n            return 70;\n          }, y: function(a, b, c, d) {\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            for (var e = 0, g = 0; g < c; g++) {\n              var l = G[b >>> 2 >>> 0], k = G[b + 4 >>> 2 >>> 0];\n              b += 8;\n              for (var n = 0; n < k; n++) {\n                var q = B[l + n >>> 0], v = rb[a];\n                0 === q || 10 === q ? ((1 === a ? ja : x)(Fa(v, 0)), v.length = 0) : v.push(q);\n              }\n              e += k;\n            }\n            G[d >>> 2 >>> 0] = e;\n            return 0;\n          }, ga: vb, m: function(a, b, c, d) {\n            return vb(a >>> 0, b >>> 0, c >>> 0, d >>> 0);\n          } }, Z = function() {\n            var a = { a: yb };\n            I++;\n            Aa(a, function(b) {\n              Z = b.instance.exports;\n              Z = zb();\n              z = Z.ha;\n              qa();\n              sa.unshift(Z.ia);\n              I--;\n              0 == I && (null !== ua && (clearInterval(ua), ua = null), J && (b = J, J = null, b()));\n            }).catch(ba);\n            return {};\n          }();\n          h._OrtInit = (a, b) => (h._OrtInit = Z.ja)(a, b);\n          h._OrtGetLastError = (a, b) => (h._OrtGetLastError = Z.ka)(a, b);\n          h._OrtCreateSessionOptions = (a, b, c, d, e, g, l, k, n, q) => (h._OrtCreateSessionOptions = Z.la)(a, b, c, d, e, g, l, k, n, q);\n          h._OrtAppendExecutionProvider = (a, b) => (h._OrtAppendExecutionProvider = Z.ma)(a, b);\n          h._OrtAddFreeDimensionOverride = (a, b, c) => (h._OrtAddFreeDimensionOverride = Z.na)(a, b, c);\n          h._OrtAddSessionConfigEntry = (a, b, c) => (h._OrtAddSessionConfigEntry = Z.oa)(a, b, c);\n          h._OrtReleaseSessionOptions = (a) => (h._OrtReleaseSessionOptions = Z.pa)(a);\n          h._OrtCreateSession = (a, b, c) => (h._OrtCreateSession = Z.qa)(a, b, c);\n          h._OrtReleaseSession = (a) => (h._OrtReleaseSession = Z.ra)(a);\n          h._OrtGetInputOutputCount = (a, b, c) => (h._OrtGetInputOutputCount = Z.sa)(a, b, c);\n          h._OrtGetInputName = (a, b) => (h._OrtGetInputName = Z.ta)(a, b);\n          h._OrtGetOutputName = (a, b) => (h._OrtGetOutputName = Z.ua)(a, b);\n          h._OrtFree = (a) => (h._OrtFree = Z.va)(a);\n          h._OrtCreateTensor = (a, b, c, d, e, g) => (h._OrtCreateTensor = Z.wa)(a, b, c, d, e, g);\n          h._OrtGetTensorData = (a, b, c, d, e) => (h._OrtGetTensorData = Z.xa)(a, b, c, d, e);\n          h._OrtReleaseTensor = (a) => (h._OrtReleaseTensor = Z.ya)(a);\n          h._OrtCreateRunOptions = (a, b, c, d) => (h._OrtCreateRunOptions = Z.za)(a, b, c, d);\n          h._OrtAddRunConfigEntry = (a, b, c) => (h._OrtAddRunConfigEntry = Z.Aa)(a, b, c);\n          h._OrtReleaseRunOptions = (a) => (h._OrtReleaseRunOptions = Z.Ba)(a);\n          h._OrtCreateBinding = (a) => (h._OrtCreateBinding = Z.Ca)(a);\n          h._OrtBindInput = (a, b, c) => (h._OrtBindInput = Z.Da)(a, b, c);\n          h._OrtBindOutput = (a, b, c, d) => (h._OrtBindOutput = Z.Ea)(a, b, c, d);\n          h._OrtClearBoundOutputs = (a) => (h._OrtClearBoundOutputs = Z.Fa)(a);\n          h._OrtReleaseBinding = (a) => (h._OrtReleaseBinding = Z.Ga)(a);\n          h._OrtRunWithBinding = (a, b, c, d, e) => (h._OrtRunWithBinding = Z.Ha)(a, b, c, d, e);\n          h._OrtRun = (a, b, c, d, e, g, l, k) => (h._OrtRun = Z.Ia)(a, b, c, d, e, g, l, k);\n          h._OrtEndProfiling = (a) => (h._OrtEndProfiling = Z.Ja)(a);\n          var mb = h._malloc = (a) => (mb = h._malloc = Z.Ka)(a), U = h._free = (a) => (U = h._free = Z.La)(a), Za = (a) => (Za = Z.Ma)(a);\n          h.__embind_initialize_bindings = () => (h.__embind_initialize_bindings = Z.Na)();\n          var Ab = () => (Ab = Z.Pa)(), Bb = (a) => (Bb = Z.Qa)(a), Cb = (a) => (Cb = Z.Ra)(a);\n          function zb() {\n            var a = Z;\n            a = Object.assign({}, a);\n            var b = (d) => () => d() >>> 0, c = (d) => (e) => d(e) >>> 0;\n            a.__errno_location = b(a.__errno_location);\n            a.Ka = c(a.Ka);\n            a.Ma = c(a.Ma);\n            a.Pa = b(a.Pa);\n            a.Ra = c(a.Ra);\n            return a;\n          }\n          h.stackAlloc = Cb;\n          h.stackSave = Ab;\n          h.stackRestore = Bb;\n          h.UTF8ToString = L;\n          h.stringToUTF8 = (a, b, c) => N(a, B, b, c);\n          h.lengthBytesUTF8 = M;\n          var Db;\n          J = function Eb() {\n            Db || Fb();\n            Db || (J = Eb);\n          };\n          function Fb() {\n            if (!(0 < I)) {\n              for (; 0 < ra.length; )\n                ra.shift()(h);\n              if (!(0 < I || Db || (Db = true, h.calledRun = true, la))) {\n                for (; 0 < sa.length; )\n                  sa.shift()(h);\n                for (aa(h); 0 < ta.length; )\n                  ta.shift()(h);\n              }\n            }\n          }\n          Fb();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasm;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasm);\n    }\n  });\n\n  // nodejs-ignore:worker_threads\n  var require_worker_threads = __commonJS({\n    "nodejs-ignore:worker_threads"() {\n    }\n  });\n\n  // nodejs-ignore:perf_hooks\n  var require_perf_hooks = __commonJS({\n    "nodejs-ignore:perf_hooks"() {\n    }\n  });\n\n  // nodejs-ignore:os\n  var os_exports = {};\n  __export(os_exports, {\n    cpus: () => cpus\n  });\n  var cpus;\n  var init_os = __esm({\n    "nodejs-ignore:os"() {\n      cpus = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.js\n  var require_ort_wasm_threaded = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {\n      "use strict";\n      var ortWasmThreaded = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          function h() {\n            m.buffer != n.buffer && p();\n            return n;\n          }\n          function t() {\n            m.buffer != n.buffer && p();\n            return aa;\n          }\n          function v() {\n            m.buffer != n.buffer && p();\n            return ba;\n          }\n          function ca() {\n            m.buffer != n.buffer && p();\n            return da;\n          }\n          function w() {\n            m.buffer != n.buffer && p();\n            return ea;\n          }\n          function z() {\n            m.buffer != n.buffer && p();\n            return fa;\n          }\n          function ha() {\n            m.buffer != n.buffer && p();\n            return ia;\n          }\n          var A = moduleArg, ja, ka;\n          A.ready = new Promise((a, b) => {\n            ja = a;\n            ka = b;\n          });\n          var la = Object.assign({}, A), ma = "./this.program", na = (a, b) => {\n            throw b;\n          }, oa = "object" == typeof window, B = "function" == typeof importScripts, D = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, E = A.ENVIRONMENT_IS_PTHREAD || false, F = "";\n          function pa(a) {\n            return A.locateFile ? A.locateFile(a, F) : F + a;\n          }\n          var qa, ra, sa;\n          if (D) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), ta = (init_path(), __toCommonJS(path_exports));\n            F = B ? ta.dirname(F) + "/" : __dirname + "/";\n            qa = (b, c) => {\n              b = b.startsWith("file://") ? new URL(b) : ta.normalize(b);\n              return fs.readFileSync(b, c ? void 0 : "utf8");\n            };\n            sa = (b) => {\n              b = qa(b, true);\n              b.buffer || (b = new Uint8Array(b));\n              return b;\n            };\n            ra = (b, c, d, e = true) => {\n              b = b.startsWith("file://") ? new URL(b) : ta.normalize(b);\n              fs.readFile(b, e ? void 0 : "utf8", (f, k) => {\n                f ? d(f) : c(e ? k.buffer : k);\n              });\n            };\n            !A.thisProgram && 1 < process.argv.length && (ma = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            na = (b, c) => {\n              process.exitCode = b;\n              throw c;\n            };\n            A.inspect = () => "[Emscripten Module object]";\n            let a;\n            try {\n              a = require_worker_threads();\n            } catch (b) {\n              throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'), b;\n            }\n            global.Worker = a.Worker;\n          } else if (oa || B)\n            B ? F = self.location.href : "undefined" != typeof document && document.currentScript && (F = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (F = _scriptDir), 0 !== F.indexOf("blob:") ? F = F.substr(0, F.replace(/[?#].*/, "").lastIndexOf("/") + 1) : F = "", D || (qa = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, B && (sa = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), ra = (a, b, c) => {\n              var d = new XMLHttpRequest();\n              d.open("GET", a, true);\n              d.responseType = "arraybuffer";\n              d.onload = () => {\n                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();\n              };\n              d.onerror = c;\n              d.send(null);\n            });\n          D && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);\n          var ua = console.log.bind(console), va = console.error.bind(console);\n          D && (ua = (...a) => fs.writeSync(1, a.join(" ") + "\\n"), va = (...a) => fs.writeSync(2, a.join(" ") + "\\n"));\n          var wa = ua, G = va;\n          Object.assign(A, la);\n          la = null;\n          var noExitRuntime = true;\n          "object" != typeof WebAssembly && H("no native wasm support detected");\n          var m, xa, ya = false, I, n, aa, ba, da, ea, fa, za, J, Aa, ia;\n          function p() {\n            var a = m.buffer;\n            A.HEAP8 = n = new Int8Array(a);\n            A.HEAP16 = ba = new Int16Array(a);\n            A.HEAPU8 = aa = new Uint8Array(a);\n            A.HEAPU16 = da = new Uint16Array(a);\n            A.HEAP32 = ea = new Int32Array(a);\n            A.HEAPU32 = fa = new Uint32Array(a);\n            A.HEAPF32 = za = new Float32Array(a);\n            A.HEAPF64 = ia = new Float64Array(a);\n            A.HEAP64 = J = new BigInt64Array(a);\n            A.HEAPU64 = Aa = new BigUint64Array(a);\n          }\n          var Ba = 16777216;\n          5242880 <= Ba || H("INITIAL_MEMORY should be larger than STACK_SIZE, was " + Ba + "! (STACK_SIZE=5242880)");\n          if (E)\n            m = A.wasmMemory;\n          else if (m = new WebAssembly.Memory({ initial: Ba / 65536, maximum: 65536, shared: true }), !(m.buffer instanceof SharedArrayBuffer))\n            throw G("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), D && G("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");\n          p();\n          Ba = m.buffer.byteLength;\n          var Ca = [], Da = [], Ea = [], Fa = 0;\n          function Ga() {\n            return noExitRuntime || 0 < Fa;\n          }\n          var K = 0, Ha = null, L = null;\n          function Ia() {\n            K--;\n            if (0 == K && (null !== Ha && (clearInterval(Ha), Ha = null), L)) {\n              var a = L;\n              L = null;\n              a();\n            }\n          }\n          function H(a) {\n            a = "Aborted(" + a + ")";\n            G(a);\n            ya = true;\n            I = 1;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            ka(a);\n            throw a;\n          }\n          function Ja(a) {\n            return a.startsWith("data:application/octet-stream;base64,");\n          }\n          var M;\n          M = "ort-wasm-threaded.wasm";\n          Ja(M) || (M = pa(M));\n          function Ka(a) {\n            if (sa)\n              return sa(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function La(a) {\n            if (oa || B) {\n              if ("function" == typeof fetch && !a.startsWith("file://"))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => Ka(a));\n              if (ra)\n                return new Promise((b, c) => {\n                  ra(a, (d) => b(new Uint8Array(d)), c);\n                });\n            }\n            return Promise.resolve().then(() => Ka(a));\n          }\n          function Ma(a, b, c) {\n            return La(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {\n              G(`failed to asynchronously prepare wasm: ${d}`);\n              H(d);\n            });\n          }\n          function Na(a, b) {\n            var c = M;\n            return "function" != typeof WebAssembly.instantiateStreaming || Ja(c) || c.startsWith("file://") || D || "function" != typeof fetch ? Ma(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(e) {\n              G(`wasm streaming compile failed: ${e}`);\n              G("falling back to ArrayBuffer instantiation");\n              return Ma(c, a, b);\n            }));\n          }\n          function Oa(a) {\n            this.name = "ExitStatus";\n            this.message = `Program terminated with exit(${a})`;\n            this.status = a;\n          }\n          var Pa = (a) => {\n            a.terminate();\n            a.onmessage = () => {\n            };\n          }, Qa = (a) => {\n            if (0 == O.qb.length) {\n              var b = pa("ort-wasm-threaded.worker.js");\n              b = new Worker(b);\n              O.qb.push(b);\n              O.Jb(O.qb[0]);\n            }\n            b = O.qb.pop();\n            if (!b)\n              return 6;\n            O.nb.push(b);\n            O.jb[a.mb] = b;\n            b.mb = a.mb;\n            var c = { cmd: "run", start_routine: a.Mb, arg: a.Fb, pthread_ptr: a.mb };\n            D && b.unref();\n            b.postMessage(c, a.Sb);\n            return 0;\n          }, Ra = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Sa = (a, b, c) => {\n            b >>>= 0;\n            var d = b + c;\n            for (c = b; a[c] && !(c >= d); )\n              ++c;\n            if (16 < c - b && a.buffer && Ra)\n              return Ra.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));\n            for (d = ""; b < c; ) {\n              var e = a[b++];\n              if (e & 128) {\n                var f = a[b++] & 63;\n                if (192 == (e & 224))\n                  d += String.fromCharCode((e & 31) << 6 | f);\n                else {\n                  var k = a[b++] & 63;\n                  e = 224 == (e & 240) ? (e & 15) << 12 | f << 6 | k : (e & 7) << 18 | f << 12 | k << 6 | a[b++] & 63;\n                  65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));\n                }\n              } else\n                d += String.fromCharCode(e);\n            }\n            return d;\n          }, Ta = (a, b) => (a >>>= 0) ? Sa(t(), a, b) : "";\n          function Ua(a) {\n            if (E)\n              return P(0, 1, a);\n            I = a;\n            Ga() || (O.Nb(), ya = true);\n            na(a, new Oa(a));\n          }\n          var Wa = (a) => {\n            I = a;\n            if (E)\n              throw Va(a), "unwind";\n            Ua(a);\n          };\n          function Xa() {\n            Ca.unshift(() => {\n              K++;\n              Ia();\n            });\n          }\n          var O = { qb: [], nb: [], Eb: [], jb: {}, vb() {\n            E ? (O.receiveObjectTransfer = O.Lb, O.threadInitTLS = O.Db, O.setExitStatus = O.Cb, noExitRuntime = false) : Xa();\n          }, Cb: (a) => {\n            I = a;\n          }, Vb: ["$terminateWorker"], Nb: () => {\n            for (var a of O.nb)\n              Pa(a);\n            for (a of O.qb)\n              Pa(a);\n            O.qb = [];\n            O.nb = [];\n            O.jb = [];\n          }, Bb: (a) => {\n            var b = a.mb;\n            delete O.jb[b];\n            O.qb.push(a);\n            O.nb.splice(O.nb.indexOf(a), 1);\n            a.mb = 0;\n            Ya(b);\n          }, Lb() {\n          }, Db() {\n            O.Eb.forEach((a) => a());\n          }, Jb: (a) => new Promise((b) => {\n            a.onmessage = (f) => {\n              f = f.data;\n              var k = f.cmd;\n              if (f.targetThread && f.targetThread != Za()) {\n                var l = O.jb[f.targetThread];\n                l ? l.postMessage(f, f.transferList) : G(`Internal error! Worker sent a message "${k}" to target pthread ${f.targetThread}, but that thread no longer exists!`);\n              } else if ("checkMailbox" === k)\n                $a();\n              else if ("spawnThread" === k)\n                Qa(f);\n              else if ("cleanupThread" === k)\n                (f = O.jb[f.thread]) || H(), O.Bb(f);\n              else if ("killThread" === k)\n                f = f.thread, k = O.jb[f], delete O.jb[f], Pa(k), Ya(f), O.nb.splice(O.nb.indexOf(k), 1), k.mb = 0;\n              else if ("cancelThread" === k)\n                O.jb[f.thread].postMessage({ cmd: "cancel" });\n              else if ("loaded" === k)\n                a.loaded = true, b(a);\n              else if ("alert" === k)\n                alert(`Thread ${f.threadId}: ${f.text}`);\n              else if ("setimmediate" === f.target)\n                a.postMessage(f);\n              else if ("callHandler" === k)\n                A[f.handler](...f.args);\n              else\n                k && G(`worker sent an unknown command ${k}`);\n            };\n            a.onerror = (f) => {\n              G(`${"worker sent an error!"} ${f.filename}:${f.lineno}: ${f.message}`);\n              throw f;\n            };\n            D && (a.on("message", (f) => a.onmessage({ data: f })), a.on("error", (f) => a.onerror(f)));\n            var c = [], d = [], e;\n            for (e of d)\n              A.hasOwnProperty(e) && c.push(e);\n            a.postMessage({\n              cmd: "load",\n              handlers: c,\n              urlOrBlob: A.mainScriptUrlOrBlob || _scriptDir,\n              wasmMemory: m,\n              wasmModule: xa\n            });\n          }) };\n          A.PThread = O;\n          var ab = (a) => {\n            for (; 0 < a.length; )\n              a.shift()(A);\n          };\n          A.establishStackSpace = () => {\n            var a = Za(), b = z()[a + 52 >>> 2 >>> 0];\n            a = z()[a + 56 >>> 2 >>> 0];\n            bb(b, b - a);\n            cb(b);\n          };\n          function Va(a) {\n            if (E)\n              return P(1, 0, a);\n            Wa(a);\n          }\n          var db = [], eb;\n          A.invokeEntryPoint = (a, b) => {\n            var c = db[a];\n            c || (a >= db.length && (db.length = a + 1), db[a] = c = eb.get(a));\n            a = c(b);\n            Ga() ? O.Cb(a) : fb(a);\n          };\n          function gb(a) {\n            this.sb = a - 24;\n            this.Kb = function(b) {\n              z()[this.sb + 4 >>> 2 >>> 0] = b;\n            };\n            this.xb = function(b) {\n              z()[this.sb + 8 >>> 2 >>> 0] = b;\n            };\n            this.vb = function(b, c) {\n              this.wb();\n              this.Kb(b);\n              this.xb(c);\n            };\n            this.wb = function() {\n              z()[this.sb + 16 >>> 2 >>> 0] = 0;\n            };\n          }\n          var hb = 0, ib = 0;\n          function jb(a, b, c, d) {\n            return E ? P(2, 1, a, b, c, d) : kb(a, b, c, d);\n          }\n          function kb(a, b, c, d) {\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            if ("undefined" == typeof SharedArrayBuffer)\n              return G("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;\n            var e = [];\n            if (E && 0 === e.length)\n              return jb(a, b, c, d);\n            a = { Mb: c, mb: a, Fb: d, Sb: e };\n            return E ? (a.Ub = "spawnThread", postMessage(a, e), 0) : Qa(a);\n          }\n          function lb(a, b, c) {\n            return E ? P(3, 1, a, b, c) : 0;\n          }\n          function mb(a, b) {\n            if (E)\n              return P(4, 1, a, b);\n          }\n          var nb = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, ob = (a, b, c, d) => {\n            c >>>= 0;\n            if (!(0 < d))\n              return 0;\n            var e = c;\n            d = c + d - 1;\n            for (var f = 0; f < a.length; ++f) {\n              var k = a.charCodeAt(f);\n              if (55296 <= k && 57343 >= k) {\n                var l = a.charCodeAt(++f);\n                k = 65536 + ((k & 1023) << 10) | l & 1023;\n              }\n              if (127 >= k) {\n                if (c >= d)\n                  break;\n                b[c++ >>> 0] = k;\n              } else {\n                if (2047 >= k) {\n                  if (c + 1 >= d)\n                    break;\n                  b[c++ >>> 0] = 192 | k >> 6;\n                } else {\n                  if (65535 >= k) {\n                    if (c + 2 >= d)\n                      break;\n                    b[c++ >>> 0] = 224 | k >> 12;\n                  } else {\n                    if (c + 3 >= d)\n                      break;\n                    b[c++ >>> 0] = 240 | k >> 18;\n                    b[c++ >>> 0] = 128 | k >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | k >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | k & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - e;\n          }, pb = (a, b, c) => ob(a, t(), b, c);\n          function qb(a, b) {\n            if (E)\n              return P(5, 1, a, b);\n          }\n          function rb(a, b, c) {\n            if (E)\n              return P(6, 1, a, b, c);\n          }\n          function sb(a, b, c) {\n            return E ? P(7, 1, a, b, c) : 0;\n          }\n          function tb(a, b) {\n            if (E)\n              return P(8, 1, a, b);\n          }\n          function ub(a, b, c) {\n            if (E)\n              return P(9, 1, a, b, c);\n          }\n          function vb(a, b, c, d) {\n            if (E)\n              return P(10, 1, a, b, c, d);\n          }\n          function wb(a, b, c, d) {\n            if (E)\n              return P(11, 1, a, b, c, d);\n          }\n          function xb(a, b, c, d) {\n            if (E)\n              return P(12, 1, a, b, c, d);\n          }\n          function yb(a) {\n            if (E)\n              return P(13, 1, a);\n          }\n          function zb(a, b) {\n            if (E)\n              return P(14, 1, a, b);\n          }\n          function Ab(a, b, c) {\n            if (E)\n              return P(15, 1, a, b, c);\n          }\n          var Bb = (a) => {\n            if (null === a)\n              return "null";\n            var b = typeof a;\n            return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;\n          }, Cb, R = (a) => {\n            for (var b = ""; t()[a >>> 0]; )\n              b += Cb[t()[a++ >>> 0]];\n            return b;\n          }, Db = {}, Eb = {}, Fb = {}, S;\n          function Gb(a, b, c = {}) {\n            var d = b.name;\n            if (!a)\n              throw new S(`type "${d}" must have a positive integer typeid pointer`);\n            if (Eb.hasOwnProperty(a)) {\n              if (c.Hb)\n                return;\n              throw new S(`Cannot register type \'${d}\' twice`);\n            }\n            Eb[a] = b;\n            delete Fb[a];\n            Db.hasOwnProperty(a) && (b = Db[a], delete Db[a], b.forEach((e) => e()));\n          }\n          function T(a, b, c = {}) {\n            if (!("argPackAdvance" in b))\n              throw new TypeError("registerType registeredInstance requires argPackAdvance");\n            Gb(a, b, c);\n          }\n          var Hb = (a, b, c) => {\n            switch (b) {\n              case 1:\n                return c ? (d) => h()[d >>> 0 >>> 0] : (d) => t()[d >>> 0 >>> 0];\n              case 2:\n                return c ? (d) => v()[d >>> 1 >>> 0] : (d) => ca()[d >>> 1 >>> 0];\n              case 4:\n                return c ? (d) => w()[d >>> 2 >>> 0] : (d) => z()[d >>> 2 >>> 0];\n              case 8:\n                return c ? (d) => J[d >>> 3] : (d) => Aa[d >>> 3];\n              default:\n                throw new TypeError(`invalid integer width (${b}): ${a}`);\n            }\n          };\n          function Ib() {\n            this.lb = [void 0];\n            this.zb = [];\n          }\n          var U = new Ib();\n          function Jb(a) {\n            a >>>= 0;\n            a >= U.sb && 0 === --U.get(a).Ab && U.xb(a);\n          }\n          var V = (a) => {\n            if (!a)\n              throw new S("Cannot use deleted val. handle = " + a);\n            return U.get(a).value;\n          }, W = (a) => {\n            switch (a) {\n              case void 0:\n                return 1;\n              case null:\n                return 2;\n              case true:\n                return 3;\n              case false:\n                return 4;\n              default:\n                return U.wb({ Ab: 1, value: a });\n            }\n          };\n          function Kb(a) {\n            return this.fromWireType(w()[a >>> 2 >>> 0]);\n          }\n          var Lb = (a, b) => {\n            switch (b) {\n              case 4:\n                return function(c) {\n                  var d = this.fromWireType;\n                  m.buffer != n.buffer && p();\n                  return d.call(this, za[c >>> 2 >>> 0]);\n                };\n              case 8:\n                return function(c) {\n                  return this.fromWireType(ha()[c >>> 3 >>> 0]);\n                };\n              default:\n                throw new TypeError(`invalid float width (${b}): ${a}`);\n            }\n          };\n          function Mb(a) {\n            return this.fromWireType(z()[a >>> 2 >>> 0]);\n          }\n          var Nb = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, Ob = (a, b) => {\n            var c = a >> 1;\n            for (var d = c + b / 2; !(c >= d) && ca()[c >>> 0]; )\n              ++c;\n            c <<= 1;\n            if (32 < c - a && Nb)\n              return Nb.decode(t().slice(a, c));\n            c = "";\n            for (d = 0; !(d >= b / 2); ++d) {\n              var e = v()[a + 2 * d >>> 1 >>> 0];\n              if (0 == e)\n                break;\n              c += String.fromCharCode(e);\n            }\n            return c;\n          }, Pb = (a, b, c) => {\n            void 0 === c && (c = 2147483647);\n            if (2 > c)\n              return 0;\n            c -= 2;\n            var d = b;\n            c = c < 2 * a.length ? c / 2 : a.length;\n            for (var e = 0; e < c; ++e) {\n              var f = a.charCodeAt(e);\n              v()[b >>> 1 >>> 0] = f;\n              b += 2;\n            }\n            v()[b >>> 1 >>> 0] = 0;\n            return b - d;\n          }, Qb = (a) => 2 * a.length, Rb = (a, b) => {\n            for (var c = 0, d = ""; !(c >= b / 4); ) {\n              var e = w()[a + 4 * c >>> 2 >>> 0];\n              if (0 == e)\n                break;\n              ++c;\n              65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e);\n            }\n            return d;\n          }, Sb = (a, b, c) => {\n            b >>>= 0;\n            void 0 === c && (c = 2147483647);\n            if (4 > c)\n              return 0;\n            var d = b;\n            c = d + c - 4;\n            for (var e = 0; e < a.length; ++e) {\n              var f = a.charCodeAt(e);\n              if (55296 <= f && 57343 >= f) {\n                var k = a.charCodeAt(++e);\n                f = 65536 + ((f & 1023) << 10) | k & 1023;\n              }\n              w()[b >>> 2 >>> 0] = f;\n              b += 4;\n              if (b + 4 > c)\n                break;\n            }\n            w()[b >>> 2 >>> 0] = 0;\n            return b - d;\n          }, Tb = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              55296 <= d && 57343 >= d && ++c;\n              b += 4;\n            }\n            return b;\n          }, Ub = (a) => {\n            if (!ya)\n              try {\n                if (a(), !Ga())\n                  try {\n                    E ? fb(I) : Wa(I);\n                  } catch (b) {\n                    b instanceof Oa || "unwind" == b || na(1, b);\n                  }\n              } catch (b) {\n                b instanceof Oa || "unwind" == b || na(1, b);\n              }\n          };\n          function Vb(a) {\n            a >>>= 0;\n            "function" === typeof Atomics.Tb && (Atomics.Tb(w(), a >>> 2, a).value.then($a), a += 128, Atomics.store(w(), a >>> 2, 1));\n          }\n          A.__emscripten_thread_mailbox_await = Vb;\n          var $a = () => {\n            var a = Za();\n            a && (Vb(a), Ub(() => Wb()));\n          };\n          A.checkMailbox = $a;\n          var Yb = (a) => {\n            var b = Xb();\n            a = a();\n            cb(b);\n            return a;\n          };\n          function P(a, b) {\n            var c = arguments.length - 2, d = arguments;\n            return Yb(() => {\n              for (var e = 2 * c, f = Zb(8 * e), k = f >>> 3, l = 0; l < c; l++) {\n                var q = d[2 + l];\n                "bigint" == typeof q ? (J[k + 2 * l] = 1n, J[k + 2 * l + 1] = q) : (J[k + 2 * l] = 0n, ha()[k + 2 * l + 1 >>> 0] = q);\n              }\n              return $b(a, e, f, b);\n            });\n          }\n          var ac = [], cc = (a, b) => {\n            var c = Eb[a];\n            if (void 0 === c)\n              throw a = bc(a), c = R(a), X(a), new S(b + " has unknown type " + c);\n            return c;\n          }, dc = {}, ec = (a) => {\n            var b = dc[a];\n            return void 0 === b ? R(a) : b;\n          }, fc = [], gc = () => "object" == typeof globalThis ? globalThis : Function("return this")(), hc = (a) => {\n            var b = fc.length;\n            fc.push(a);\n            return b;\n          }, ic = (a, b) => {\n            for (var c = Array(a), d = 0; d < a; ++d)\n              c[d] = cc(z()[b + 4 * d >>> 2 >>> 0], "parameter " + d);\n            return c;\n          }, jc = (a) => {\n            if (void 0 === a)\n              return "_unknown";\n            a = a.replace(/[^a-zA-Z0-9_]/g, "$");\n            var b = a.charCodeAt(0);\n            return 48 <= b && 57 >= b ? `_${a}` : a;\n          }, lc = {};\n          function mc(a, b) {\n            a = jc(a);\n            return { [a]: function() {\n              return b.apply(this, arguments);\n            } }[a];\n          }\n          function nc(a) {\n            var b = Function;\n            if (!(b instanceof Function))\n              throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);\n            var c = mc(b.name || "unknownFunctionName", function() {\n            });\n            c.prototype = b.prototype;\n            c = new c();\n            a = b.apply(c, a);\n            return a instanceof Object ? a : c;\n          }\n          var oc = (a) => {\n            for (var b = "", c = 0; c < a; ++c)\n              b += (0 !== c ? ", " : "") + "arg" + c;\n            var d = "return function emval_allocator_" + a + "(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n";\n            for (c = 0; c < a; ++c)\n              d += "var argType" + c + " = requireRegisteredType(HEAPU32[((argTypes)>>>2)], \'parameter " + c + "\');\\nvar arg" + c + " = argType" + c + ".readValueFromPointer(args);\\nargs += argType" + c + "[\'argPackAdvance\'];\\nargTypes += 4;\\n";\n            return new Function("requireRegisteredType", "Module", "valueToHandle", "getMemory", d + ("var obj = new constructor(" + b + ");\\nreturn valueToHandle(obj);\\n}\\n"))(cc, A, W, () => z());\n          }, pc = {}, Y = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), qc = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], rc = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n          function sc(a, b, c, d, e, f, k) {\n            return E ? P(16, 1, a, b, c, d, e, f, k) : -52;\n          }\n          function tc(a, b, c, d, e, f) {\n            if (E)\n              return P(17, 1, a, b, c, d, e, f);\n          }\n          var vc = (a) => {\n            var b = nb(a) + 1, c = uc(b);\n            c && pb(a, c, b);\n            return c;\n          }, wc = {}, yc = () => {\n            if (!xc) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: ma || "./this.program" }, b;\n              for (b in wc)\n                void 0 === wc[b] ? delete a[b] : a[b] = wc[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              xc = c;\n            }\n            return xc;\n          }, xc;\n          function zc(a, b) {\n            if (E)\n              return P(18, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = 0;\n            yc().forEach((d, e) => {\n              var f = b + c;\n              e = z()[a + 4 * e >>> 2 >>> 0] = f;\n              for (f = 0; f < d.length; ++f)\n                h()[e++ >>> 0 >>> 0] = d.charCodeAt(f);\n              h()[e >>> 0 >>> 0] = 0;\n              c += d.length + 1;\n            });\n            return 0;\n          }\n          function Ac(a, b) {\n            if (E)\n              return P(19, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = yc();\n            z()[a >>> 2 >>> 0] = c.length;\n            var d = 0;\n            c.forEach((e) => d += e.length + 1);\n            z()[b >>> 2 >>> 0] = d;\n            return 0;\n          }\n          function Bc(a) {\n            return E ? P(20, 1, a) : 52;\n          }\n          function Cc(a, b, c, d) {\n            return E ? P(21, 1, a, b, c, d) : 52;\n          }\n          function Dc(a, b, c, d) {\n            return E ? P(22, 1, a, b, c, d) : 70;\n          }\n          var Ec = [null, [], []];\n          function Fc(a, b, c, d) {\n            if (E)\n              return P(23, 1, a, b, c, d);\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            for (var e = 0, f = 0; f < c; f++) {\n              var k = z()[b >>> 2 >>> 0], l = z()[b + 4 >>> 2 >>> 0];\n              b += 8;\n              for (var q = 0; q < l; q++) {\n                var r = t()[k + q >>> 0], x = Ec[a];\n                0 === r || 10 === r ? ((1 === a ? wa : G)(Sa(x, 0)), x.length = 0) : x.push(r);\n              }\n              e += l;\n            }\n            z()[d >>> 2 >>> 0] = e;\n            return 0;\n          }\n          var Gc = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Hc = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Ic(a) {\n            var b = Array(nb(a) + 1);\n            ob(a, b, 0, b.length);\n            return b;\n          }\n          var Jc = (a, b) => {\n            h().set(a, b >>> 0);\n          };\n          function Kc(a, b, c, d) {\n            function e(g, u, y) {\n              for (g = "number" == typeof g ? g.toString() : g || ""; g.length < u; )\n                g = y[0] + g;\n              return g;\n            }\n            function f(g, u) {\n              return e(g, u, "0");\n            }\n            function k(g, u) {\n              function y(kc) {\n                return 0 > kc ? -1 : 0 < kc ? 1 : 0;\n              }\n              var Q;\n              0 === (Q = y(g.getFullYear() - u.getFullYear())) && 0 === (Q = y(g.getMonth() - u.getMonth())) && (Q = y(g.getDate() - u.getDate()));\n              return Q;\n            }\n            function l(g) {\n              switch (g.getDay()) {\n                case 0:\n                  return new Date(g.getFullYear() - 1, 11, 29);\n                case 1:\n                  return g;\n                case 2:\n                  return new Date(g.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    g.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(g.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(g.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(g.getFullYear() - 1, 11, 30);\n              }\n            }\n            function q(g) {\n              var u = g.ob;\n              for (g = new Date(new Date(g.pb + 1900, 0, 1).getTime()); 0 < u; ) {\n                var y = g.getMonth(), Q = (Y(g.getFullYear()) ? Gc : Hc)[y];\n                if (u > Q - g.getDate())\n                  u -= Q - g.getDate() + 1, g.setDate(1), 11 > y ? g.setMonth(y + 1) : (g.setMonth(0), g.setFullYear(g.getFullYear() + 1));\n                else {\n                  g.setDate(g.getDate() + u);\n                  break;\n                }\n              }\n              y = new Date(g.getFullYear() + 1, 0, 4);\n              u = l(new Date(\n                g.getFullYear(),\n                0,\n                4\n              ));\n              y = l(y);\n              return 0 >= k(u, g) ? 0 >= k(y, g) ? g.getFullYear() + 1 : g.getFullYear() : g.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            var r = z()[d + 40 >>> 2 >>> 0];\n            d = { Qb: w()[d >>> 2 >>> 0], Pb: w()[d + 4 >>> 2 >>> 0], tb: w()[d + 8 >>> 2 >>> 0], yb: w()[d + 12 >>> 2 >>> 0], ub: w()[d + 16 >>> 2 >>> 0], pb: w()[d + 20 >>> 2 >>> 0], kb: w()[d + 24 >>> 2 >>> 0], ob: w()[d + 28 >>> 2 >>> 0], Wb: w()[d + 32 >>> 2 >>> 0], Ob: w()[d + 36 >>> 2 >>> 0], Rb: r ? Ta(r) : "" };\n            c = Ta(c);\n            r = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var x in r)\n              c = c.replace(new RegExp(x, "g"), r[x]);\n            var C = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), N = "January February March April May June July August September October November December".split(" ");\n            r = { "%a": (g) => C[g.kb].substring(0, 3), "%A": (g) => C[g.kb], "%b": (g) => N[g.ub].substring(0, 3), "%B": (g) => N[g.ub], "%C": (g) => f((g.pb + 1900) / 100 | 0, 2), "%d": (g) => f(g.yb, 2), "%e": (g) => e(g.yb, 2, " "), "%g": (g) => q(g).toString().substring(2), "%G": (g) => q(g), "%H": (g) => f(g.tb, 2), "%I": (g) => {\n              g = g.tb;\n              0 == g ? g = 12 : 12 < g && (g -= 12);\n              return f(g, 2);\n            }, "%j": (g) => {\n              for (var u = 0, y = 0; y <= g.ub - 1; u += (Y(g.pb + 1900) ? Gc : Hc)[y++])\n                ;\n              return f(g.yb + u, 3);\n            }, "%m": (g) => f(g.ub + 1, 2), "%M": (g) => f(g.Pb, 2), "%n": () => "\\n", "%p": (g) => 0 <= g.tb && 12 > g.tb ? "AM" : "PM", "%S": (g) => f(g.Qb, 2), "%t": () => "	", "%u": (g) => g.kb || 7, "%U": (g) => f(Math.floor((g.ob + 7 - g.kb) / 7), 2), "%V": (g) => {\n              var u = Math.floor((g.ob + 7 - (g.kb + 6) % 7) / 7);\n              2 >= (g.kb + 371 - g.ob - 2) % 7 && u++;\n              if (u)\n                53 == u && (y = (g.kb + 371 - g.ob) % 7, 4 == y || 3 == y && Y(g.pb) || (u = 1));\n              else {\n                u = 52;\n                var y = (g.kb + 7 - g.ob - 1) % 7;\n                (4 == y || 5 == y && Y(g.pb % 400 - 1)) && u++;\n              }\n              return f(u, 2);\n            }, "%w": (g) => g.kb, "%W": (g) => f(Math.floor((g.ob + 7 - (g.kb + 6) % 7) / 7), 2), "%y": (g) => (g.pb + 1900).toString().substring(2), "%Y": (g) => g.pb + 1900, "%z": (g) => {\n              g = g.Ob;\n              var u = 0 <= g;\n              g = Math.abs(g) / 60;\n              return (u ? "+" : "-") + String("0000" + (g / 60 * 100 + g % 60)).slice(-4);\n            }, "%Z": (g) => g.Rb, "%%": () => "%" };\n            c = c.replace(/%%/g, "\\0\\0");\n            for (x in r)\n              c.includes(x) && (c = c.replace(new RegExp(x, "g"), r[x](d)));\n            c = c.replace(/\\0\\0/g, "%");\n            x = Ic(c);\n            if (x.length > b)\n              return 0;\n            Jc(x, a);\n            return x.length - 1;\n          }\n          O.vb();\n          for (var Lc = Array(256), Mc = 0; 256 > Mc; ++Mc)\n            Lc[Mc] = String.fromCharCode(Mc);\n          Cb = Lc;\n          S = A.BindingError = class extends Error {\n            constructor(a) {\n              super(a);\n              this.name = "BindingError";\n            }\n          };\n          A.InternalError = class extends Error {\n            constructor(a) {\n              super(a);\n              this.name = "InternalError";\n            }\n          };\n          Object.assign(Ib.prototype, { get(a) {\n            return this.lb[a];\n          }, has(a) {\n            return void 0 !== this.lb[a];\n          }, wb(a) {\n            var b = this.zb.pop() || this.lb.length;\n            this.lb[b] = a;\n            return b;\n          }, xb(a) {\n            this.lb[a] = void 0;\n            this.zb.push(a);\n          } });\n          U.lb.push({ value: void 0 }, { value: null }, { value: true }, { value: false });\n          U.sb = U.lb.length;\n          A.count_emval_handles = () => {\n            for (var a = 0, b = U.sb; b < U.lb.length; ++b)\n              void 0 !== U.lb[b] && ++a;\n            return a;\n          };\n          var Nc = [Ua, Va, jb, lb, mb, qb, rb, sb, tb, ub, vb, wb, xb, yb, zb, Ab, sc, tc, zc, Ac, Bc, Cc, Dc, Fc], Pc = {\n            b: function(a, b, c) {\n              a >>>= 0;\n              new gb(a).vb(b >>> 0, c >>> 0);\n              hb = a;\n              ib++;\n              throw hb;\n            },\n            ea: function(a) {\n              Oc(a >>> 0, !B, 1, !oa, 131072, false);\n              O.Db();\n            },\n            D: function(a) {\n              a >>>= 0;\n              E ? postMessage({ cmd: "cleanupThread", thread: a }) : ((a = O.jb[a]) || H(), O.Bb(a));\n            },\n            W: kb,\n            y: lb,\n            ka: mb,\n            S: qb,\n            U: rb,\n            L: sb,\n            ia: tb,\n            ba: ub,\n            ha: vb,\n            F: wb,\n            T: xb,\n            Q: yb,\n            ja: zb,\n            R: Ab,\n            I: function(a, b, c, d, e) {\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              b = R(b);\n              var f = -1 != b.indexOf("u");\n              f && (e = (1n << 64n) - 1n);\n              T(a, { name: b, fromWireType: (k) => k, toWireType: function(k, l) {\n                if ("bigint" != typeof l && "number" != typeof l)\n                  throw new TypeError(`Cannot convert "${Bb(l)}" to ${this.name}`);\n                if (l < d || l > e)\n                  throw new TypeError(`Passing a number "${Bb(l)}" from JS side to C/C++ side to an argument of type "${b}", which is outside the valid range [${d}, ${e}]!`);\n                return l;\n              }, argPackAdvance: 8, readValueFromPointer: Hb(b, c, !f), rb: null });\n            },\n            qa: function(a, b, c, d) {\n              a >>>= 0;\n              b = R(b >>> 0);\n              T(a, {\n                name: b,\n                fromWireType: function(e) {\n                  return !!e;\n                },\n                toWireType: function(e, f) {\n                  return f ? c : d;\n                },\n                argPackAdvance: 8,\n                readValueFromPointer: function(e) {\n                  return this.fromWireType(t()[e >>> 0]);\n                },\n                rb: null\n              });\n            },\n            pa: function(a, b) {\n              a >>>= 0;\n              b = R(b >>> 0);\n              T(a, { name: b, fromWireType: (c) => {\n                var d = V(c);\n                Jb(c);\n                return d;\n              }, toWireType: (c, d) => W(d), argPackAdvance: 8, readValueFromPointer: Kb, rb: null });\n            },\n            H: function(a, b, c) {\n              a >>>= 0;\n              c >>>= 0;\n              b = R(b >>> 0);\n              T(a, { name: b, fromWireType: (d) => d, toWireType: (d, e) => e, argPackAdvance: 8, readValueFromPointer: Lb(b, c), rb: null });\n            },\n            t: function(a, b, c, d, e) {\n              a >>>= 0;\n              c >>>= 0;\n              b = R(b >>> 0);\n              -1 === e && (e = 4294967295);\n              e = (l) => l;\n              if (0 === d) {\n                var f = 32 - 8 * c;\n                e = (l) => l << f >>> f;\n              }\n              var k = b.includes("unsigned") ? function(l, q) {\n                return q >>> 0;\n              } : function(l, q) {\n                return q;\n              };\n              T(a, { name: b, fromWireType: e, toWireType: k, argPackAdvance: 8, readValueFromPointer: Hb(b, c, 0 !== d), rb: null });\n            },\n            m: function(a, b, c) {\n              function d(f) {\n                var k = z()[f >>> 2 >>> 0];\n                f = z()[f + 4 >>> 2 >>> 0];\n                return new e(h().buffer, f, k);\n              }\n              a >>>= 0;\n              var e = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][b];\n              c = R(c >>> 0);\n              T(\n                a,\n                { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d },\n                { Hb: true }\n              );\n            },\n            J: function(a, b) {\n              a >>>= 0;\n              b = R(b >>> 0);\n              var c = "std::string" === b;\n              T(a, { name: b, fromWireType: function(d) {\n                var e = z()[d >>> 2 >>> 0], f = d + 4;\n                if (c)\n                  for (var k = f, l = 0; l <= e; ++l) {\n                    var q = f + l;\n                    if (l == e || 0 == t()[q >>> 0]) {\n                      k = Ta(k, q - k);\n                      if (void 0 === r)\n                        var r = k;\n                      else\n                        r += String.fromCharCode(0), r += k;\n                      k = q + 1;\n                    }\n                  }\n                else {\n                  r = Array(e);\n                  for (l = 0; l < e; ++l)\n                    r[l] = String.fromCharCode(t()[f + l >>> 0]);\n                  r = r.join("");\n                }\n                X(d);\n                return r;\n              }, toWireType: function(d, e) {\n                e instanceof ArrayBuffer && (e = new Uint8Array(e));\n                var f = "string" == typeof e;\n                if (!(f || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array))\n                  throw new S("Cannot pass non-string to std::string");\n                var k = c && f ? nb(e) : e.length;\n                var l = uc(4 + k + 1), q = l + 4;\n                z()[l >>> 2 >>> 0] = k;\n                if (c && f)\n                  pb(e, q, k + 1);\n                else if (f)\n                  for (f = 0; f < k; ++f) {\n                    var r = e.charCodeAt(f);\n                    if (255 < r)\n                      throw X(q), new S("String has UTF-16 code units that do not fit in 8 bits");\n                    t()[q + f >>> 0] = r;\n                  }\n                else\n                  for (f = 0; f < k; ++f)\n                    t()[q + f >>> 0] = e[f];\n                null !== d && d.push(X, l);\n                return l;\n              }, argPackAdvance: 8, readValueFromPointer: Mb, rb(d) {\n                X(d);\n              } });\n            },\n            A: function(a, b, c) {\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              c = R(c);\n              if (2 === b) {\n                var d = Ob;\n                var e = Pb;\n                var f = Qb;\n                var k = () => ca();\n                var l = 1;\n              } else\n                4 === b && (d = Rb, e = Sb, f = Tb, k = () => z(), l = 2);\n              T(a, {\n                name: c,\n                fromWireType: (q) => {\n                  for (var r = z()[q >>> 2 >>> 0], x = k(), C, N = q + 4, g = 0; g <= r; ++g) {\n                    var u = q + 4 + g * b;\n                    if (g == r || 0 == x[u >>> l])\n                      N = d(N, u - N), void 0 === C ? C = N : (C += String.fromCharCode(0), C += N), N = u + b;\n                  }\n                  X(q);\n                  return C;\n                },\n                toWireType: (q, r) => {\n                  if ("string" != typeof r)\n                    throw new S(`Cannot pass non-string to C++ string type ${c}`);\n                  var x = f(r), C = uc(4 + x + b);\n                  z()[C >>> 2] = x >> l;\n                  e(r, C + 4, x + b);\n                  null !== q && q.push(X, C);\n                  return C;\n                },\n                argPackAdvance: 8,\n                readValueFromPointer: Kb,\n                rb(q) {\n                  X(q);\n                }\n              });\n            },\n            ra: function(a, b) {\n              a >>>= 0;\n              b = R(b >>> 0);\n              T(a, { Ib: true, name: b, argPackAdvance: 0, fromWireType: () => {\n              }, toWireType: () => {\n              } });\n            },\n            na: () => true,\n            O: function(a, b) {\n              a >>>= 0;\n              a == b >>> 0 ? setTimeout(() => $a()) : E ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = O.jb[a]) && a.postMessage({ cmd: "checkMailbox" });\n            },\n            X: function(a, b, c, d) {\n              b >>>= 0;\n              c /= 2;\n              ac.length = c;\n              d = d >>> 0 >>> 3;\n              for (var e = 0; e < c; e++)\n                ac[e] = J[d + 2 * e] ? J[d + 2 * e + 1] : ha()[d + 2 * e + 1 >>> 0];\n              a = Nc[a];\n              O.Gb = b;\n              b = a.apply(null, ac);\n              O.Gb = 0;\n              return b;\n            },\n            da: Vb,\n            ma: function(a) {\n              D && O.jb[a >>> 0].ref();\n            },\n            r: function(a, b, c) {\n              b >>>= 0;\n              c >>>= 0;\n              a = V(a >>> 0);\n              b = cc(b, "emval::as");\n              var d = [], e = W(d);\n              z()[c >>> 2 >>> 0] = e;\n              return b.toWireType(d, a);\n            },\n            i: function(a, b, c, d, e) {\n              c >>>= 0;\n              d >>>= 0;\n              e >>>= 0;\n              a = fc[a >>> 0];\n              b = V(b >>> 0);\n              c = ec(c);\n              var f = [];\n              z()[d >>> 2 >>> 0] = W(f);\n              return a(b, c, f, e);\n            },\n            u: function(a, b, c, d) {\n              c >>>= 0;\n              d >>>= 0;\n              a = fc[a >>> 0];\n              b = V(b >>> 0);\n              c = ec(c);\n              a(b, c, null, d);\n            },\n            c: Jb,\n            K: function(a, b) {\n              b >>>= 0;\n              a = V(a >>> 0);\n              b = V(b);\n              return a == b;\n            },\n            o: function(a) {\n              a >>>= 0;\n              if (0 === a)\n                return W(gc());\n              a = ec(a);\n              return W(gc()[a]);\n            },\n            h: function(a, b) {\n              var c = ic(a, b >>> 0), d = c[0];\n              b = d.name + "_$" + c.slice(1).map(function(x) {\n                return x.name;\n              }).join("_") + "$";\n              var e = lc[b];\n              if (void 0 !== e)\n                return e;\n              e = ["retType"];\n              for (var f = [d], k = "", l = 0; l < a - 1; ++l)\n                k += (0 !== l ? ", " : "") + "arg" + l, e.push("argType" + l), f.push(c[1 + l]);\n              var q = "return function " + jc("methodCaller_" + b) + "(handle, name, destructors, args) {\\n", r = 0;\n              for (l = 0; l < a - 1; ++l)\n                q += "    var arg" + l + " = argType" + l + ".readValueFromPointer(args" + (r ? "+" + r : "") + ");\\n", r += c[l + 1].argPackAdvance;\n              q += "    var rv = handle[name](" + k + ");\\n";\n              for (l = 0; l < a - 1; ++l)\n                c[l + 1].deleteObject && (q += "    argType" + l + ".deleteObject(arg" + l + ");\\n");\n              d.Ib || (q += "    return retType.toWireType(destructors, rv);\\n");\n              e.push(q + "};\\n");\n              a = nc(e).apply(null, f);\n              e = hc(a);\n              return lc[b] = e;\n            },\n            q: function(a, b) {\n              b >>>= 0;\n              a = V(a >>> 0);\n              b = V(b);\n              return W(a[b]);\n            },\n            d: function(a) {\n              a >>>= 0;\n              4 < a && (U.get(a).Ab += 1);\n            },\n            x: function(a, b, c, d) {\n              c >>>= 0;\n              d >>>= 0;\n              a = V(a >>> 0);\n              var e = pc[b];\n              e || (e = oc(b), pc[b] = e);\n              return e(a, c, d);\n            },\n            v: function() {\n              return W([]);\n            },\n            l: function(a) {\n              a = V(a >>> 0);\n              for (var b = Array(a.length), c = 0; c < a.length; c++)\n                b[c] = a[c];\n              return W(b);\n            },\n            e: function(a) {\n              return W(ec(a >>> 0));\n            },\n            k: function() {\n              return W({});\n            },\n            g: function(a) {\n              a >>>= 0;\n              for (var b = V(a); b.length; ) {\n                var c = b.pop();\n                b.pop()(c);\n              }\n              Jb(a);\n            },\n            j: function(a, b, c) {\n              b >>>= 0;\n              c >>>= 0;\n              a = V(a >>> 0);\n              b = V(b);\n              c = V(c);\n              a[b] = c;\n            },\n            f: function(a, b) {\n              b >>>= 0;\n              a = cc(a >>> 0, "_emval_take_value");\n              a = a.readValueFromPointer(b);\n              return W(a);\n            },\n            _: function(a, b) {\n              a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);\n              b >>>= 0;\n              a = new Date(1e3 * a);\n              w()[b >>> 2 >>> 0] = a.getUTCSeconds();\n              w()[b + 4 >>> 2 >>> 0] = a.getUTCMinutes();\n              w()[b + 8 >>> 2 >>> 0] = a.getUTCHours();\n              w()[b + 12 >>> 2 >>> 0] = a.getUTCDate();\n              w()[b + 16 >>> 2 >>> 0] = a.getUTCMonth();\n              w()[b + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;\n              w()[b + 24 >>> 2 >>> 0] = a.getUTCDay();\n              a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n              w()[b + 28 >>> 2 >>> 0] = a;\n            },\n            $: function(a, b) {\n              a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);\n              b >>>= 0;\n              a = new Date(1e3 * a);\n              w()[b >>> 2 >>> 0] = a.getSeconds();\n              w()[b + 4 >>> 2 >>> 0] = a.getMinutes();\n              w()[b + 8 >>> 2 >>> 0] = a.getHours();\n              w()[b + 12 >>> 2 >>> 0] = a.getDate();\n              w()[b + 16 >>> 2 >>> 0] = a.getMonth();\n              w()[b + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;\n              w()[b + 24 >>> 2 >>> 0] = a.getDay();\n              var c = (Y(a.getFullYear()) ? qc : rc)[a.getMonth()] + a.getDate() - 1 | 0;\n              w()[b + 28 >>> 2 >>> 0] = c;\n              w()[b + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n              c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n              var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n              a = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;\n              w()[b + 32 >>> 2 >>> 0] = a;\n            },\n            aa: function(a) {\n              a >>>= 0;\n              var b = new Date(w()[a + 20 >>> 2 >>> 0] + 1900, w()[a + 16 >>> 2 >>> 0], w()[a + 12 >>> 2 >>> 0], w()[a + 8 >>> 2 >>> 0], w()[a + 4 >>> 2 >>> 0], w()[a >>> 2 >>> 0], 0), c = w()[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), e = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), f = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), k = Math.min(f, e);\n              0 > c ? w()[a + 32 >>> 2 >>> 0] = Number(e != f && k == d) : 0 < c != (k == d) && (e = Math.max(f, e), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : e) - d)));\n              w()[a + 24 >>> 2 >>> 0] = b.getDay();\n              c = (Y(b.getFullYear()) ? qc : rc)[b.getMonth()] + b.getDate() - 1 | 0;\n              w()[a + 28 >>> 2 >>> 0] = c;\n              w()[a >>> 2 >>> 0] = b.getSeconds();\n              w()[a + 4 >>> 2 >>> 0] = b.getMinutes();\n              w()[a + 8 >>> 2 >>> 0] = b.getHours();\n              w()[a + 12 >>> 2 >>> 0] = b.getDate();\n              w()[a + 16 >>> 2 >>> 0] = b.getMonth();\n              w()[a + 20 >>> 2 >>> 0] = b.getYear();\n              return BigInt(b.getTime() / 1e3);\n            },\n            Y: sc,\n            Z: tc,\n            N: function(a, b, c) {\n              function d(r) {\n                return (r = r.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? r[1] : "GMT";\n              }\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              var e = (/* @__PURE__ */ new Date()).getFullYear(), f = new Date(e, 0, 1), k = new Date(e, 6, 1);\n              e = f.getTimezoneOffset();\n              var l = k.getTimezoneOffset(), q = Math.max(e, l);\n              z()[a >>> 2 >>> 0] = 60 * q;\n              w()[b >>> 2 >>> 0] = Number(e != l);\n              a = d(f);\n              b = d(k);\n              a = vc(a);\n              b = vc(b);\n              l < e ? (z()[c >>> 2 >>> 0] = a, z()[c + 4 >>> 2 >>> 0] = b) : (z()[c >>> 2 >>> 0] = b, z()[c + 4 >>> 2 >>> 0] = a);\n            },\n            n: () => {\n              H("");\n            },\n            E: () => {\n            },\n            G: () => Date.now(),\n            la: () => {\n              Fa += 1;\n              throw "unwind";\n            },\n            P: function() {\n              return 4294901760;\n            },\n            s: () => performance.timeOrigin + performance.now(),\n            w: () => D ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency,\n            M: function(a) {\n              a >>>= 0;\n              var b = t().length;\n              if (a <= b || 4294901760 < a)\n                return false;\n              for (var c = 1; 4 >= c; c *= 2) {\n                var d = b * (1 + 0.2 / c);\n                d = Math.min(d, a + 100663296);\n                var e = Math;\n                d = Math.max(a, d);\n                a: {\n                  e = (e.min.call(e, 4294901760, d + (65536 - d % 65536) % 65536) - m.buffer.byteLength + 65535) / 65536;\n                  try {\n                    m.grow(e);\n                    p();\n                    var f = 1;\n                    break a;\n                  } catch (k) {\n                  }\n                  f = void 0;\n                }\n                if (f)\n                  return true;\n              }\n              return false;\n            },\n            fa: zc,\n            ga: Ac,\n            V: Wa,\n            z: Bc,\n            C: Cc,\n            ca: Dc,\n            B: Fc,\n            a: m || A.wasmMemory,\n            oa: Kc,\n            p: function(a, b, c, d) {\n              return Kc(a >>> 0, b >>> 0, c >>> 0, d >>> 0);\n            }\n          }, Z = function() {\n            var a = { a: Pc };\n            K++;\n            Na(a, function(b) {\n              var c = b.module;\n              Z = b.instance.exports;\n              Z = Qc();\n              O.Eb.push(Z.Xa);\n              eb = Z._a;\n              Da.unshift(Z.sa);\n              xa = c;\n              Ia();\n            }).catch(ka);\n            return {};\n          }();\n          A._OrtInit = (a, b) => (A._OrtInit = Z.ta)(a, b);\n          A._OrtGetLastError = (a, b) => (A._OrtGetLastError = Z.ua)(a, b);\n          A._OrtCreateSessionOptions = (a, b, c, d, e, f, k, l, q, r) => (A._OrtCreateSessionOptions = Z.va)(a, b, c, d, e, f, k, l, q, r);\n          A._OrtAppendExecutionProvider = (a, b) => (A._OrtAppendExecutionProvider = Z.wa)(a, b);\n          A._OrtAddFreeDimensionOverride = (a, b, c) => (A._OrtAddFreeDimensionOverride = Z.xa)(a, b, c);\n          A._OrtAddSessionConfigEntry = (a, b, c) => (A._OrtAddSessionConfigEntry = Z.ya)(a, b, c);\n          A._OrtReleaseSessionOptions = (a) => (A._OrtReleaseSessionOptions = Z.za)(a);\n          A._OrtCreateSession = (a, b, c) => (A._OrtCreateSession = Z.Aa)(a, b, c);\n          A._OrtReleaseSession = (a) => (A._OrtReleaseSession = Z.Ba)(a);\n          A._OrtGetInputOutputCount = (a, b, c) => (A._OrtGetInputOutputCount = Z.Ca)(a, b, c);\n          A._OrtGetInputName = (a, b) => (A._OrtGetInputName = Z.Da)(a, b);\n          A._OrtGetOutputName = (a, b) => (A._OrtGetOutputName = Z.Ea)(a, b);\n          A._OrtFree = (a) => (A._OrtFree = Z.Fa)(a);\n          A._OrtCreateTensor = (a, b, c, d, e, f) => (A._OrtCreateTensor = Z.Ga)(a, b, c, d, e, f);\n          A._OrtGetTensorData = (a, b, c, d, e) => (A._OrtGetTensorData = Z.Ha)(a, b, c, d, e);\n          A._OrtReleaseTensor = (a) => (A._OrtReleaseTensor = Z.Ia)(a);\n          A._OrtCreateRunOptions = (a, b, c, d) => (A._OrtCreateRunOptions = Z.Ja)(a, b, c, d);\n          A._OrtAddRunConfigEntry = (a, b, c) => (A._OrtAddRunConfigEntry = Z.Ka)(a, b, c);\n          A._OrtReleaseRunOptions = (a) => (A._OrtReleaseRunOptions = Z.La)(a);\n          A._OrtCreateBinding = (a) => (A._OrtCreateBinding = Z.Ma)(a);\n          A._OrtBindInput = (a, b, c) => (A._OrtBindInput = Z.Na)(a, b, c);\n          A._OrtBindOutput = (a, b, c, d) => (A._OrtBindOutput = Z.Oa)(a, b, c, d);\n          A._OrtClearBoundOutputs = (a) => (A._OrtClearBoundOutputs = Z.Pa)(a);\n          A._OrtReleaseBinding = (a) => (A._OrtReleaseBinding = Z.Qa)(a);\n          A._OrtRunWithBinding = (a, b, c, d, e) => (A._OrtRunWithBinding = Z.Ra)(a, b, c, d, e);\n          A._OrtRun = (a, b, c, d, e, f, k, l) => (A._OrtRun = Z.Sa)(a, b, c, d, e, f, k, l);\n          A._OrtEndProfiling = (a) => (A._OrtEndProfiling = Z.Ta)(a);\n          var Za = A._pthread_self = () => (Za = A._pthread_self = Z.Ua)(), uc = A._malloc = (a) => (uc = A._malloc = Z.Va)(a), X = A._free = (a) => (X = A._free = Z.Wa)(a);\n          A.__emscripten_tls_init = () => (A.__emscripten_tls_init = Z.Xa)();\n          var bc = (a) => (bc = Z.Ya)(a);\n          A.__embind_initialize_bindings = () => (A.__embind_initialize_bindings = Z.Za)();\n          var Oc = A.__emscripten_thread_init = (a, b, c, d, e, f) => (Oc = A.__emscripten_thread_init = Z.$a)(a, b, c, d, e, f);\n          A.__emscripten_thread_crashed = () => (A.__emscripten_thread_crashed = Z.ab)();\n          var $b = (a, b, c, d) => ($b = Z.bb)(a, b, c, d), Ya = (a) => (Ya = Z.cb)(a), fb = A.__emscripten_thread_exit = (a) => (fb = A.__emscripten_thread_exit = Z.db)(a), Wb = A.__emscripten_check_mailbox = () => (Wb = A.__emscripten_check_mailbox = Z.eb)(), bb = (a, b) => (bb = Z.fb)(a, b), Xb = () => (Xb = Z.gb)(), cb = (a) => (cb = Z.hb)(a), Zb = (a) => (Zb = Z.ib)(a);\n          function Qc() {\n            var a = Z;\n            a = Object.assign({}, a);\n            var b = (d) => () => d() >>> 0, c = (d) => (e) => d(e) >>> 0;\n            a.__errno_location = b(a.__errno_location);\n            a.Ua = b(a.Ua);\n            a.Va = c(a.Va);\n            a.Ya = c(a.Ya);\n            a.gb = b(a.gb);\n            a.ib = c(a.ib);\n            return a;\n          }\n          A.keepRuntimeAlive = Ga;\n          A.wasmMemory = m;\n          A.stackAlloc = Zb;\n          A.stackSave = Xb;\n          A.stackRestore = cb;\n          A.UTF8ToString = Ta;\n          A.stringToUTF8 = pb;\n          A.lengthBytesUTF8 = nb;\n          A.ExitStatus = Oa;\n          A.PThread = O;\n          var Rc;\n          L = function Sc() {\n            Rc || Tc();\n            Rc || (L = Sc);\n          };\n          function Tc() {\n            0 < K || (E ? (ja(A), E || ab(Da), startWorker(A)) : (ab(Ca), 0 < K || Rc || (Rc = true, A.calledRun = true, ya || (E || ab(Da), ja(A), E || ab(Ea)))));\n          }\n          Tc();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasmThreaded;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasmThreaded);\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.worker.js\n  var require_ort_wasm_threaded_worker = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {\n      module.exports = \'"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*is_main=*/0,/*is_runtime=*/0,/*can_block=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){Module["__embind_initialize_bindings"]();initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err(`worker.js received unknown command ${e.data.cmd}`);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}}self.onmessage=handleMessage;\\n\';\n    }\n  });\n\n  // nodejs-ignore:node:path\n  var join = void 0;\n\n  // web/lib/wasm/wasm-factory.ts\n  var ortWasmFactory;\n  if (false) {\n    ortWasmFactory = null;\n  } else {\n    ortWasmFactory = true ? require_ort_wasm() : null;\n  }\n  var ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;\n  var wasm;\n  var initialized = false;\n  var initializing = false;\n  var aborted = false;\n  var isMultiThreadSupported = () => {\n    try {\n      if (typeof SharedArrayBuffer === "undefined") {\n        return false;\n      }\n      if (typeof MessageChannel !== "undefined") {\n        new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n      }\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        5,\n        4,\n        1,\n        3,\n        1,\n        1,\n        10,\n        11,\n        1,\n        9,\n        0,\n        65,\n        0,\n        254,\n        16,\n        2,\n        0,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var isSimdSupported = () => {\n    try {\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        10,\n        30,\n        1,\n        28,\n        0,\n        65,\n        0,\n        253,\n        15,\n        253,\n        12,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        253,\n        186,\n        1,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var getWasmFileName = (useSimd, useThreads) => {\n    if (useSimd) {\n      if (false) {\n        return "ort-training-wasm-simd.wasm";\n      }\n      return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";\n    } else {\n      return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";\n    }\n  };\n  var initializeWebAssembly = async (flags) => {\n    if (initialized) {\n      return Promise.resolve();\n    }\n    if (initializing) {\n      throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");\n    }\n    if (aborted) {\n      throw new Error("previous call to \'initializeWebAssembly()\' failed.");\n    }\n    initializing = true;\n    const timeout = flags.initTimeout;\n    const numThreads = flags.numThreads;\n    const simd = flags.simd;\n    const useThreads = numThreads > 1 && isMultiThreadSupported();\n    const useSimd = simd && isSimdSupported();\n    const wasmPaths = flags.wasmPaths;\n    const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;\n    const wasmFileName = getWasmFileName(useSimd, useThreads);\n    const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;\n    let isTimeout = false;\n    const tasks = [];\n    if (timeout > 0) {\n      tasks.push(new Promise((resolve) => {\n        setTimeout(() => {\n          isTimeout = true;\n          resolve();\n        }, timeout);\n      }));\n    }\n    tasks.push(new Promise((resolve, reject) => {\n      const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n      const config = {\n        locateFile: (fileName, scriptDirectory) => {\n          if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {\n            return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by esbuild plugin to load file content as string.\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require_ort_wasm_threaded_worker()\n              ],\n              { type: "text/javascript" }\n            ));\n          }\n          if (fileName.endsWith(".wasm")) {\n            if (wasmPathOverride) {\n              return wasmPathOverride;\n            }\n            const prefix = wasmPrefixOverride ?? scriptDirectory;\n            if (false) {\n              if (wasmFileName === "ort-wasm-simd.wasm") {\n                return prefix + "ort-wasm-simd.jsep.wasm";\n              } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {\n                return prefix + "ort-wasm-simd-threaded.jsep.wasm";\n              }\n            }\n            return prefix + wasmFileName;\n          }\n          return scriptDirectory + fileName;\n        }\n      };\n      if (useThreads) {\n        if (typeof Blob === "undefined") {\n          config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");\n        } else {\n          const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;\n          config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });\n        }\n      }\n      factory(config).then(\n        // wasm module initialized successfully\n        (module) => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        }\n      );\n    }));\n    await Promise.race(tasks);\n    if (isTimeout) {\n      throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n    }\n  };\n  var getInstance = () => {\n    if (initialized && wasm) {\n      return wasm;\n    }\n    throw new Error("WebAssembly is not initialized yet.");\n  };\n\n  // web/lib/wasm/wasm-utils.ts\n  var allocWasmString = (data, allocs) => {\n    const wasm2 = getInstance();\n    const dataLength = wasm2.lengthBytesUTF8(data) + 1;\n    const dataOffset = wasm2._malloc(dataLength);\n    wasm2.stringToUTF8(data, dataOffset, dataLength);\n    allocs.push(dataOffset);\n    return dataOffset;\n  };\n  var iterateExtraOptions = (options, prefix, seen, handler) => {\n    if (typeof options == "object" && options !== null) {\n      if (seen.has(options)) {\n        throw new Error("Circular reference in options");\n      } else {\n        seen.add(options);\n      }\n    }\n    Object.entries(options).forEach(([key, value]) => {\n      const name = prefix ? prefix + key : key;\n      if (typeof value === "object") {\n        iterateExtraOptions(value, name + ".", seen, handler);\n      } else if (typeof value === "string" || typeof value === "number") {\n        handler(name, value.toString());\n      } else if (typeof value === "boolean") {\n        handler(name, value ? "1" : "0");\n      } else {\n        throw new Error(`Can\'t handle extra config type: ${typeof value}`);\n      }\n    });\n  };\n  var checkLastError = (message) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const paramsOffset = wasm2.stackAlloc(8);\n      wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);\n      const errorCode = wasm2.HEAP32[paramsOffset / 4];\n      const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];\n      const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";\n      throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n\n  // web/lib/wasm/run-options.ts\n  var setRunOptions = (options) => {\n    const wasm2 = getInstance();\n    let runOptionsHandle = 0;\n    const allocs = [];\n    const runOptions = options || {};\n    try {\n      if (options?.logSeverityLevel === void 0) {\n        runOptions.logSeverityLevel = 2;\n      } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n      }\n      if (options?.logVerbosityLevel === void 0) {\n        runOptions.logVerbosityLevel = 0;\n      } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {\n        throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n      }\n      if (options?.terminate === void 0) {\n        runOptions.terminate = false;\n      }\n      let tagDataOffset = 0;\n      if (options?.tag !== void 0) {\n        tagDataOffset = allocWasmString(options.tag, allocs);\n      }\n      runOptionsHandle = wasm2._OrtCreateRunOptions(\n        runOptions.logSeverityLevel,\n        runOptions.logVerbosityLevel,\n        !!runOptions.terminate,\n        tagDataOffset\n      );\n      if (runOptionsHandle === 0) {\n        checkLastError("Can\'t create run options.");\n      }\n      if (options?.extra !== void 0) {\n        iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a run config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [runOptionsHandle, allocs];\n    } catch (e) {\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/session-options.ts\n  var getGraphOptimzationLevel = (graphOptimizationLevel) => {\n    switch (graphOptimizationLevel) {\n      case "disabled":\n        return 0;\n      case "basic":\n        return 1;\n      case "extended":\n        return 2;\n      case "all":\n        return 99;\n      default:\n        throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n    }\n  };\n  var getExecutionMode = (executionMode) => {\n    switch (executionMode) {\n      case "sequential":\n        return 0;\n      case "parallel":\n        return 1;\n      default:\n        throw new Error(`unsupported execution mode: ${executionMode}`);\n    }\n  };\n  var appendDefaultOptions = (options) => {\n    if (!options.extra) {\n      options.extra = {};\n    }\n    if (!options.extra.session) {\n      options.extra.session = {};\n    }\n    const session = options.extra.session;\n    if (!session.use_ort_model_bytes_directly) {\n      session.use_ort_model_bytes_directly = "1";\n    }\n    if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {\n      options.enableMemPattern = false;\n    }\n  };\n  var setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {\n    for (const ep of executionProviders) {\n      let epName = typeof ep === "string" ? ep : ep.name;\n      switch (epName) {\n        case "xnnpack":\n          epName = "XNNPACK";\n          break;\n        case "webnn":\n          epName = "WEBNN";\n          if (typeof ep !== "string") {\n            const webnnOptions = ep;\n            if (webnnOptions?.deviceType) {\n              const keyDataOffset = allocWasmString("deviceType", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'deviceType\' - ${webnnOptions.deviceType}.`);\n              }\n            }\n            if (webnnOptions?.numThreads) {\n              let numThreads = webnnOptions.numThreads;\n              if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {\n                numThreads = 0;\n              }\n              const keyDataOffset = allocWasmString("numThreads", allocs);\n              const valueDataOffset = allocWasmString(numThreads.toString(), allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'numThreads\' - ${webnnOptions.numThreads}.`);\n              }\n            }\n            if (webnnOptions?.powerPreference) {\n              const keyDataOffset = allocWasmString("powerPreference", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'powerPreference\' - ${webnnOptions.powerPreference}.`\n                );\n              }\n            }\n          }\n          break;\n        case "webgpu":\n          epName = "JS";\n          if (typeof ep !== "string") {\n            const webgpuOptions = ep;\n            if (webgpuOptions?.preferredLayout) {\n              if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {\n                throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${webgpuOptions.preferredLayout}`);\n              }\n              const keyDataOffset = allocWasmString("preferredLayout", allocs);\n              const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'preferredLayout\' - ${webgpuOptions.preferredLayout}.`\n                );\n              }\n            }\n          }\n          break;\n        case "wasm":\n        case "cpu":\n          continue;\n        default:\n          throw new Error(`not supported execution provider: ${epName}`);\n      }\n      const epNameDataOffset = allocWasmString(epName, allocs);\n      if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n        checkLastError(`Can\'t append execution provider: ${epName}.`);\n      }\n    }\n  };\n  var setSessionOptions = (options) => {\n    const wasm2 = getInstance();\n    let sessionOptionsHandle = 0;\n    const allocs = [];\n    const sessionOptions = options || {};\n    appendDefaultOptions(sessionOptions);\n    try {\n      const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");\n      const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");\n      const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;\n      const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;\n      if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n      }\n      const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;\n      if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n        throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n      }\n      const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;\n      sessionOptionsHandle = wasm2._OrtCreateSessionOptions(\n        graphOptimizationLevel,\n        !!sessionOptions.enableCpuMemArena,\n        !!sessionOptions.enableMemPattern,\n        executionMode,\n        !!sessionOptions.enableProfiling,\n        0,\n        logIdDataOffset,\n        logSeverityLevel,\n        logVerbosityLevel,\n        optimizedModelFilePathOffset\n      );\n      if (sessionOptionsHandle === 0) {\n        checkLastError("Can\'t create session options.");\n      }\n      if (sessionOptions.executionProviders) {\n        setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n      }\n      if (sessionOptions.freeDimensionOverrides) {\n        for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n          if (typeof name !== "string") {\n            throw new Error(`free dimension override name must be a string: ${name}`);\n          }\n          if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {\n            throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n          }\n          const nameOffset = allocWasmString(name, allocs);\n          if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n            checkLastError(`Can\'t set a free dimension override: ${name} - ${value}.`);\n          }\n        }\n      }\n      if (sessionOptions.extra !== void 0) {\n        iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a session config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [sessionOptionsHandle, allocs];\n    } catch (e) {\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/wasm-common.ts\n  var tensorDataTypeStringToEnum = (type) => {\n    switch (type) {\n      case "int8":\n        return 3 /* int8 */;\n      case "uint8":\n        return 2 /* uint8 */;\n      case "bool":\n        return 9 /* bool */;\n      case "int16":\n        return 5 /* int16 */;\n      case "uint16":\n        return 4 /* uint16 */;\n      case "int32":\n        return 6 /* int32 */;\n      case "uint32":\n        return 12 /* uint32 */;\n      case "float16":\n        return 10 /* float16 */;\n      case "float32":\n        return 1 /* float */;\n      case "float64":\n        return 11 /* double */;\n      case "string":\n        return 8 /* string */;\n      case "int64":\n        return 7 /* int64 */;\n      case "uint64":\n        return 13 /* uint64 */;\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  };\n  var tensorDataTypeEnumToString = (typeProto) => {\n    switch (typeProto) {\n      case 3 /* int8 */:\n        return "int8";\n      case 2 /* uint8 */:\n        return "uint8";\n      case 9 /* bool */:\n        return "bool";\n      case 5 /* int16 */:\n        return "int16";\n      case 4 /* uint16 */:\n        return "uint16";\n      case 6 /* int32 */:\n        return "int32";\n      case 12 /* uint32 */:\n        return "uint32";\n      case 10 /* float16 */:\n        return "float16";\n      case 1 /* float */:\n        return "float32";\n      case 11 /* double */:\n        return "float64";\n      case 8 /* string */:\n        return "string";\n      case 7 /* int64 */:\n        return "int64";\n      case 13 /* uint64 */:\n        return "uint64";\n      default:\n        throw new Error(`unsupported data type: ${typeProto}`);\n    }\n  };\n  var getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];\n  var tensorTypeToTypedArrayConstructor = (type) => {\n    switch (type) {\n      case "float16":\n        return Uint16Array;\n      case "float32":\n        return Float32Array;\n      case "uint8":\n        return Uint8Array;\n      case "int8":\n        return Int8Array;\n      case "uint16":\n        return Uint16Array;\n      case "int16":\n        return Int16Array;\n      case "int32":\n        return Int32Array;\n      case "bool":\n        return Uint8Array;\n      case "float64":\n        return Float64Array;\n      case "uint32":\n        return Uint32Array;\n      case "int64":\n        return BigInt64Array;\n      case "uint64":\n        return BigUint64Array;\n      default:\n        throw new Error(`unsupported type: ${type}`);\n    }\n  };\n  var logLevelStringToEnum = (logLevel) => {\n    switch (logLevel) {\n      case "verbose":\n        return 0;\n      case "info":\n        return 1;\n      case "warning":\n        return 2;\n      case "error":\n        return 3;\n      case "fatal":\n        return 4;\n      default:\n        throw new Error(`unsupported logging level: ${logLevel}`);\n    }\n  };\n  var isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";\n  var dataLocationStringToEnum = (location) => {\n    switch (location) {\n      case "none":\n        return 0;\n      case "cpu":\n        return 1;\n      case "cpu-pinned":\n        return 2;\n      case "texture":\n        return 3;\n      case "gpu-buffer":\n        return 4;\n      default:\n        throw new Error(`unsupported data location: ${location}`);\n    }\n  };\n\n  // web/lib/wasm/wasm-core-impl.ts\n  var ortEnvInitialized = false;\n  var getSessionInputOutputCount = (sessionHandle) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const dataOffset = wasm2.stackAlloc(8);\n      const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n      if (errorCode !== 0) {\n        checkLastError("Can\'t get session input/output count.");\n      }\n      return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var initOrt = (numThreads, loggingLevel) => {\n    const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n    if (errorCode !== 0) {\n      checkLastError("Can\'t initialize onnxruntime.");\n    }\n  };\n  var initRuntime = async (env) => {\n    initOrt(env.wasm.numThreads, logLevelStringToEnum(env.logLevel));\n    if (false) {\n      const initJsep = null.init;\n      await initJsep(getInstance(), env);\n    }\n    ortEnvInitialized = true;\n  };\n  var activeSessions = /* @__PURE__ */ new Map();\n  var isOrtEnvInitialized = () => ortEnvInitialized;\n  var createSessionAllocate = (model) => {\n    const wasm2 = getInstance();\n    const modelDataOffset = wasm2._malloc(model.byteLength);\n    if (modelDataOffset === 0) {\n      throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n    }\n    wasm2.HEAPU8.set(model, modelDataOffset);\n    return [modelDataOffset, model.byteLength];\n  };\n  var createSessionFinalize = (modelData, options) => {\n    const wasm2 = getInstance();\n    let sessionHandle = 0;\n    let sessionOptionsHandle = 0;\n    let ioBindingHandle = 0;\n    let allocs = [];\n    const inputNamesUTF8Encoded = [];\n    const outputNamesUTF8Encoded = [];\n    try {\n      [sessionOptionsHandle, allocs] = setSessionOptions(options);\n      sessionHandle = wasm2._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n      if (sessionHandle === 0) {\n        checkLastError("Can\'t create a session.");\n      }\n      const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n      const inputNames = [];\n      const outputNames = [];\n      const outputPreferredLocations = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm2._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an input name.");\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm2.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm2._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an output name.");\n        }\n        outputNamesUTF8Encoded.push(name);\n        const nameString = wasm2.UTF8ToString(name);\n        outputNames.push(nameString);\n        if (false) {\n          const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";\n          if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {\n            throw new Error(`Not supported preferred output location: ${location}.`);\n          }\n          outputPreferredLocations.push(location);\n        }\n      }\n      let bindingState = null;\n      if (false) {\n        ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);\n        if (ioBindingHandle === 0) {\n          checkLastError("Can\'t create IO binding.");\n        }\n        bindingState = {\n          handle: ioBindingHandle,\n          outputPreferredLocations,\n          outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))\n        };\n      }\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);\n      return [sessionHandle, inputNames, outputNames];\n    } catch (e) {\n      inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      if (ioBindingHandle !== 0) {\n        wasm2._OrtReleaseBinding(ioBindingHandle);\n      }\n      if (sessionHandle !== 0) {\n        wasm2._OrtReleaseSession(sessionHandle);\n      }\n      throw e;\n    } finally {\n      wasm2._free(modelData[0]);\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n    }\n  };\n  var createSession = (model, options) => {\n    const modelData = createSessionAllocate(model);\n    return createSessionFinalize(modelData, options);\n  };\n  var releaseSession = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    if (ioBindingState) {\n      wasm2._OrtReleaseBinding(ioBindingState.handle);\n    }\n    wasm2.jsepUnregisterBuffers?.(sessionId);\n    inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    wasm2._OrtReleaseSession(sessionHandle);\n    activeSessions.delete(sessionId);\n  };\n  var prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {\n    if (!tensor) {\n      tensorHandles.push(0);\n      return;\n    }\n    const wasm2 = getInstance();\n    const dataType = tensor[0];\n    const dims = tensor[1];\n    const location = tensor[3];\n    let rawData;\n    let dataByteLength;\n    if (dataType === "string" && location === "gpu-buffer") {\n      throw new Error("String tensor is not supported on GPU.");\n    }\n    if (location === "gpu-buffer") {\n      const gpuBuffer = tensor[2].gpuBuffer;\n      const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));\n      dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;\n      rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);\n    } else {\n      const data = tensor[2];\n      if (Array.isArray(data)) {\n        dataByteLength = 4 * data.length;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        let dataIndex = rawData / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== "string") {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n      }\n    }\n    const stack = wasm2.stackSave();\n    const dimsOffset = wasm2.stackAlloc(4 * dims.length);\n    try {\n      let dimIndex = dimsOffset / 4;\n      dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);\n      const tensor2 = wasm2._OrtCreateTensor(\n        tensorDataTypeStringToEnum(dataType),\n        rawData,\n        dataByteLength,\n        dimsOffset,\n        dims.length,\n        dataLocationStringToEnum(location)\n      );\n      if (tensor2 === 0) {\n        checkLastError(`Can\'t create tensor for input/output. session=${sessionId}, index=${index}.`);\n      }\n      tensorHandles.push(tensor2);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    const inputCount = inputIndices.length;\n    const outputCount = outputIndices.length;\n    let runOptionsHandle = 0;\n    let runOptionsAllocs = [];\n    const inputTensorHandles = [];\n    const outputTensorHandles = [];\n    const inputOutputAllocs = [];\n    const beforeRunStack = wasm2.stackSave();\n    const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);\n    try {\n      [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n      for (let i = 0; i < inputCount; i++) {\n        prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);\n      }\n      for (let i = 0; i < outputCount; i++) {\n        prepareInputOutputTensor(\n          outputTensors[i],\n          outputTensorHandles,\n          inputOutputAllocs,\n          sessionId,\n          inputCount + outputIndices[i]\n        );\n      }\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];\n        wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];\n        wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n      if (false) {\n        const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;\n        if (inputNamesUTF8Encoded.length !== inputCount) {\n          throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model\'s input count (${inputNamesUTF8Encoded.length}).`);\n        }\n        for (let i = 0; i < inputCount; i++) {\n          const index = inputIndices[i];\n          const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t bind input[${i}] for session=${sessionId}.`);\n          }\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const index = outputIndices[i];\n          const location = outputTensors[i]?.[3];\n          if (location) {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind pre-allocated output[${i}] for session=${sessionId}.`);\n            }\n          } else {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n            }\n          }\n        }\n      }\n      let errorCode;\n      if (false) {\n        errorCode = await wasm2._OrtRunWithBinding(\n          sessionHandle,\n          ioBindingState.handle,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      } else {\n        errorCode = await wasm2._OrtRun(\n          sessionHandle,\n          inputNamesOffset,\n          inputValuesOffset,\n          inputCount,\n          outputNamesOffset,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      }\n      if (errorCode !== 0) {\n        checkLastError("failed to call OrtRun().");\n      }\n      const output = [];\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];\n        if (tensor === outputTensorHandles[i]) {\n          output.push(outputTensors[i]);\n          continue;\n        }\n        const beforeGetTensorDataStack = wasm2.stackSave();\n        const tensorDataOffset = wasm2.stackAlloc(4 * 4);\n        let keepOutputTensor = false;\n        let type, dataOffset = 0;\n        try {\n          const errorCode2 = wasm2._OrtGetTensorData(\n            tensor,\n            tensorDataOffset,\n            tensorDataOffset + 4,\n            tensorDataOffset + 8,\n            tensorDataOffset + 12\n          );\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm2.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm2.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i2 = 0; i2 < dimsLength; i2++) {\n            dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);\n          }\n          wasm2._OrtFree(dimsOffset);\n          const size = dims.reduce((a, b) => a * b, 1);\n          type = tensorDataTypeEnumToString(dataType);\n          const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n          if (type === "string") {\n            if (preferredLocation === "gpu-buffer") {\n              throw new Error("String tensor is not supported on GPU.");\n            }\n            const stringData = [];\n            let dataIndex = dataOffset / 4;\n            for (let i2 = 0; i2 < size; i2++) {\n              const offset = wasm2.HEAPU32[dataIndex++];\n              const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData, "cpu"]);\n          } else {\n            if (preferredLocation === "gpu-buffer" && size > 0) {\n              const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);\n              const elementSize = getTensorElementSize(dataType);\n              if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {\n                throw new Error(`Unsupported data type: ${type}`);\n              }\n              keepOutputTensor = true;\n              output.push([\n                type,\n                dims,\n                {\n                  gpuBuffer,\n                  download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),\n                  dispose: () => {\n                    wasm2._OrtReleaseTensor(tensor);\n                  }\n                },\n                "gpu-buffer"\n              ]);\n            } else {\n              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n              const data = new typedArrayConstructor(size);\n              new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n              output.push([type, dims, data, "cpu"]);\n            }\n          }\n        } finally {\n          wasm2.stackRestore(beforeGetTensorDataStack);\n          if (type === "string" && dataOffset) {\n            wasm2._free(dataOffset);\n          }\n          if (!keepOutputTensor) {\n            wasm2._OrtReleaseTensor(tensor);\n          }\n        }\n      }\n      if (ioBindingState) {\n        wasm2._OrtClearBoundOutputs(ioBindingState.handle);\n      }\n      return output;\n    } finally {\n      wasm2.stackRestore(beforeRunStack);\n      inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      inputOutputAllocs.forEach((p) => wasm2._free(p));\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      runOptionsAllocs.forEach((p) => wasm2._free(p));\n    }\n  };\n  var endProfiling = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error("invalid session id");\n    }\n    const sessionHandle = session[0];\n    const profileFileName = wasm2._OrtEndProfiling(sessionHandle);\n    if (profileFileName === 0) {\n      checkLastError("Can\'t get an profile file name.");\n    }\n    wasm2._OrtFree(profileFileName);\n  };\n  var extractTransferableBuffers = (tensors) => {\n    const buffers = [];\n    for (const tensor of tensors) {\n      const data = tensor[2];\n      if (!Array.isArray(data) && "buffer" in data) {\n        buffers.push(data.buffer);\n      }\n    }\n    return buffers;\n  };\n\n  // web/lib/wasm/proxy-worker/main.ts\n  self.onmessage = (ev) => {\n    switch (ev.data.type) {\n      case "init-wasm":\n        try {\n          initializeWebAssembly(ev.data.in).then(\n            () => postMessage({ type: "init-wasm" }),\n            (err) => postMessage({ type: "init-wasm", err })\n          );\n        } catch (err) {\n          postMessage({ type: "init-wasm", err });\n        }\n        break;\n      case "init-ort":\n        try {\n          initRuntime(ev.data.in).then(() => postMessage({ type: "init-ort" }), (err) => postMessage({\n            type: "init-ort",\n            err\n          }));\n        } catch (err) {\n          postMessage({ type: "init-ort", err });\n        }\n        break;\n      case "create_allocate":\n        try {\n          const { model } = ev.data.in;\n          const modeldata = createSessionAllocate(model);\n          postMessage({ type: "create_allocate", out: modeldata });\n        } catch (err) {\n          postMessage({ type: "create_allocate", err });\n        }\n        break;\n      case "create_finalize":\n        try {\n          const { modeldata, options } = ev.data.in;\n          const sessionMetadata = createSessionFinalize(modeldata, options);\n          postMessage({ type: "create_finalize", out: sessionMetadata });\n        } catch (err) {\n          postMessage({ type: "create_finalize", err });\n        }\n        break;\n      case "create":\n        try {\n          const { model, options } = ev.data.in;\n          const sessionMetadata = createSession(model, options);\n          postMessage({ type: "create", out: sessionMetadata });\n        } catch (err) {\n          postMessage({ type: "create", err });\n        }\n        break;\n      case "release":\n        try {\n          releaseSession(ev.data.in);\n          postMessage({ type: "release" });\n        } catch (err) {\n          postMessage({ type: "release", err });\n        }\n        break;\n      case "run":\n        try {\n          const { sessionId, inputIndices, inputs, outputIndices, options } = ev.data.in;\n          run(sessionId, inputIndices, inputs, outputIndices, new Array(outputIndices.length).fill(null), options).then(\n            (outputs) => {\n              if (outputs.some((o) => o[3] !== "cpu")) {\n                postMessage({ type: "run", err: "Proxy does not support non-cpu tensor location." });\n              } else {\n                postMessage(\n                  { type: "run", out: outputs },\n                  extractTransferableBuffers(outputs)\n                );\n              }\n            },\n            (err) => {\n              postMessage({ type: "run", err });\n            }\n          );\n        } catch (err) {\n          postMessage({ type: "run", err });\n        }\n        break;\n      case "end-profiling":\n        try {\n          const handler = ev.data.in;\n          endProfiling(handler);\n          postMessage({ type: "end-profiling" });\n        } catch (err) {\n          postMessage({ type: "end-profiling", err });\n        }\n        break;\n      case "is-ort-env-initialized":\n        try {\n          const ortEnvInitialized2 = isOrtEnvInitialized();\n          postMessage({ type: "is-ort-env-initialized", out: ortEnvInitialized2 });\n        } catch (err) {\n          postMessage({ type: "is-ort-env-initialized", err });\n        }\n        break;\n      default:\n    }\n  };\n})();\n//# sourceMappingURL=data:application/json;base64,\n';
    }
  });

  // web/lib/wasm/proxy-wrapper.ts
  var isProxy, proxyWorker, initializing2, initialized2, aborted2, initWasmCallbacks, initOrtCallbacks, createSessionAllocateCallbacks, createSessionFinalizeCallbacks, createSessionCallbacks, releaseSessionCallbacks, runCallbacks, endProfilingCallbacks, isOrtEnvInitializedCallbacks, ensureWorker, onProxyWorkerMessage, scriptSrc, initializeWebAssemblyInstance, initializeRuntime, createSessionAllocate2, createSessionFinalize2, createSession2, releaseSession2, run2, endProfiling2, isOrtEnvInitialized2;
  var init_proxy_wrapper = __esm({
    "web/lib/wasm/proxy-wrapper.ts"() {
      "use strict";
      init_esm();
      init_wasm_core_impl();
      init_wasm_factory();
      isProxy = () => !!env2.wasm.proxy && typeof document !== "undefined";
      initializing2 = false;
      initialized2 = false;
      aborted2 = false;
      createSessionAllocateCallbacks = [];
      createSessionFinalizeCallbacks = [];
      createSessionCallbacks = [];
      releaseSessionCallbacks = [];
      runCallbacks = [];
      endProfilingCallbacks = [];
      isOrtEnvInitializedCallbacks = [];
      ensureWorker = () => {
        if (initializing2 || !initialized2 || aborted2 || !proxyWorker) {
          throw new Error("worker not ready");
        }
      };
      onProxyWorkerMessage = (ev) => {
        switch (ev.data.type) {
          case "init-wasm":
            initializing2 = false;
            if (ev.data.err) {
              aborted2 = true;
              initWasmCallbacks[1](ev.data.err);
            } else {
              initialized2 = true;
              initWasmCallbacks[0]();
            }
            break;
          case "init-ort":
            if (ev.data.err) {
              initOrtCallbacks[1](ev.data.err);
            } else {
              initOrtCallbacks[0]();
            }
            break;
          case "create_allocate":
            if (ev.data.err) {
              createSessionAllocateCallbacks.shift()[1](ev.data.err);
            } else {
              createSessionAllocateCallbacks.shift()[0](ev.data.out);
            }
            break;
          case "create_finalize":
            if (ev.data.err) {
              createSessionFinalizeCallbacks.shift()[1](ev.data.err);
            } else {
              createSessionFinalizeCallbacks.shift()[0](ev.data.out);
            }
            break;
          case "create":
            if (ev.data.err) {
              createSessionCallbacks.shift()[1](ev.data.err);
            } else {
              createSessionCallbacks.shift()[0](ev.data.out);
            }
            break;
          case "release":
            if (ev.data.err) {
              releaseSessionCallbacks.shift()[1](ev.data.err);
            } else {
              releaseSessionCallbacks.shift()[0]();
            }
            break;
          case "run":
            if (ev.data.err) {
              runCallbacks.shift()[1](ev.data.err);
            } else {
              runCallbacks.shift()[0](ev.data.out);
            }
            break;
          case "end-profiling":
            if (ev.data.err) {
              endProfilingCallbacks.shift()[1](ev.data.err);
            } else {
              endProfilingCallbacks.shift()[0]();
            }
            break;
          case "is-ort-env-initialized":
            if (ev.data.err) {
              isOrtEnvInitializedCallbacks.shift()[1](ev.data.err);
            } else {
              isOrtEnvInitializedCallbacks.shift()[0](ev.data.out);
            }
            break;
          default:
        }
      };
      scriptSrc = typeof document !== "undefined" ? document?.currentScript?.src : void 0;
      initializeWebAssemblyInstance = async () => {
        if (isProxy()) {
          if (initialized2) {
            return;
          }
          if (initializing2) {
            throw new Error("multiple calls to 'initWasm()' detected.");
          }
          if (aborted2) {
            throw new Error("previous call to 'initWasm()' failed.");
          }
          initializing2 = true;
          if (env2.wasm.wasmPaths === void 0) {
            if (scriptSrc && scriptSrc.indexOf("blob:") !== 0) {
              env2.wasm.wasmPaths = scriptSrc.substr(0, +scriptSrc.lastIndexOf("/") + 1);
            }
          }
          return new Promise((resolve, reject) => {
            proxyWorker?.terminate();
            const workerUrl = URL.createObjectURL(new Blob(
              [
                // This require() function is handled by esbuild plugin to load file content as string.
                // eslint-disable-next-line @typescript-eslint/no-require-imports
                require_main()
              ],
              { type: "text/javascript" }
            ));
            proxyWorker = new Worker(workerUrl, { name: "ort-wasm-proxy-worker" });
            proxyWorker.onerror = (ev) => reject(ev);
            proxyWorker.onmessage = onProxyWorkerMessage;
            URL.revokeObjectURL(workerUrl);
            initWasmCallbacks = [resolve, reject];
            const message = { type: "init-wasm", in: env2.wasm };
            proxyWorker.postMessage(message);
          });
        } else {
          return initializeWebAssembly(env2.wasm);
        }
      };
      initializeRuntime = async (env3) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            initOrtCallbacks = [resolve, reject];
            const message = { type: "init-ort", in: env3 };
            proxyWorker.postMessage(message);
          });
        } else {
          await initRuntime(env3);
        }
      };
      createSessionAllocate2 = async (model) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            createSessionAllocateCallbacks.push([resolve, reject]);
            const message = { type: "create_allocate", in: { model } };
            proxyWorker.postMessage(message, [model.buffer]);
          });
        } else {
          return createSessionAllocate(model);
        }
      };
      createSessionFinalize2 = async (modeldata, options) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            createSessionFinalizeCallbacks.push([resolve, reject]);
            const message = { type: "create_finalize", in: { modeldata, options } };
            proxyWorker.postMessage(message);
          });
        } else {
          return createSessionFinalize(modeldata, options);
        }
      };
      createSession2 = async (model, options) => {
        if (isProxy()) {
          if (options?.preferredOutputLocation) {
            throw new Error('session option "preferredOutputLocation" is not supported for proxy.');
          }
          ensureWorker();
          return new Promise((resolve, reject) => {
            createSessionCallbacks.push([resolve, reject]);
            const message = { type: "create", in: { model, options } };
            proxyWorker.postMessage(message, [model.buffer]);
          });
        } else {
          return createSession(model, options);
        }
      };
      releaseSession2 = async (sessionId) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            releaseSessionCallbacks.push([resolve, reject]);
            const message = { type: "release", in: sessionId };
            proxyWorker.postMessage(message);
          });
        } else {
          releaseSession(sessionId);
        }
      };
      run2 = async (sessionId, inputIndices, inputs, outputIndices, outputs, options) => {
        if (isProxy()) {
          if (inputs.some((t) => t[3] !== "cpu")) {
            throw new Error("input tensor on GPU is not supported for proxy.");
          }
          if (outputs.some((t) => t)) {
            throw new Error("pre-allocated output tensor is not supported for proxy.");
          }
          ensureWorker();
          return new Promise((resolve, reject) => {
            runCallbacks.push([resolve, reject]);
            const serializableInputs = inputs;
            const message = { type: "run", in: { sessionId, inputIndices, inputs: serializableInputs, outputIndices, options } };
            proxyWorker.postMessage(message, extractTransferableBuffers(serializableInputs));
          });
        } else {
          return run(sessionId, inputIndices, inputs, outputIndices, outputs, options);
        }
      };
      endProfiling2 = async (sessionId) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            endProfilingCallbacks.push([resolve, reject]);
            const message = { type: "end-profiling", in: sessionId };
            proxyWorker.postMessage(message);
          });
        } else {
          endProfiling(sessionId);
        }
      };
      isOrtEnvInitialized2 = async () => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            isOrtEnvInitializedCallbacks.push([resolve, reject]);
            const message = { type: "is-ort-env-initialized" };
            proxyWorker.postMessage(message);
          });
        } else {
          return isOrtEnvInitialized();
        }
      };
    }
  });

  // nodejs-ignore:node:fs/promises
  var readFile2;
  var init_promises = __esm({
    "nodejs-ignore:node:fs/promises"() {
      readFile2 = void 0;
    }
  });

  // web/lib/wasm/session-handler-inference.ts
  var runtimeInitializationPromise, encodeTensorMetadata, decodeTensorMetadata, OnnxruntimeWebAssemblySessionHandler;
  var init_session_handler_inference = __esm({
    "web/lib/wasm/session-handler-inference.ts"() {
      "use strict";
      init_promises();
      init_esm();
      init_proxy_wrapper();
      init_wasm_common();
      encodeTensorMetadata = (tensor, getName) => {
        switch (tensor.location) {
          case "cpu":
            return [tensor.type, tensor.dims, tensor.data, "cpu"];
          case "gpu-buffer":
            return [tensor.type, tensor.dims, { gpuBuffer: tensor.gpuBuffer }, "gpu-buffer"];
          default:
            throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);
        }
      };
      decodeTensorMetadata = (tensor) => {
        switch (tensor[3]) {
          case "cpu":
            return new Tensor2(tensor[0], tensor[2], tensor[1]);
          case "gpu-buffer": {
            const dataType = tensor[0];
            if (!isGpuBufferSupportedType(dataType)) {
              throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);
            }
            const { gpuBuffer, download, dispose } = tensor[2];
            return Tensor2.fromGpuBuffer(gpuBuffer, { dataType, dims: tensor[1], download, dispose });
          }
          default:
            throw new Error(`invalid data location: ${tensor[3]}`);
        }
      };
      OnnxruntimeWebAssemblySessionHandler = class {
        async createSessionAllocate(path) {
          const response = await fetch(path);
          if (response.status !== 200) {
            throw new Error(`failed to load model: ${path}`);
          }
          const arrayBuffer = await response.arrayBuffer();
          return createSessionAllocate2(new Uint8Array(arrayBuffer));
        }
        async loadModel(pathOrBuffer, options) {
          if (!await isOrtEnvInitialized2()) {
            if (!runtimeInitializationPromise) {
              runtimeInitializationPromise = initializeRuntime(env2);
            }
            await runtimeInitializationPromise;
            runtimeInitializationPromise = void 0;
          }
          if (typeof pathOrBuffer === "string") {
            if (typeof process !== "undefined" && process.versions && process.versions.node) {
              const model = await readFile2(pathOrBuffer);
              [this.sessionId, this.inputNames, this.outputNames] = await createSession2(model, options);
            } else {
              const modelData = await this.createSessionAllocate(pathOrBuffer);
              [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize2(modelData, options);
            }
          } else {
            [this.sessionId, this.inputNames, this.outputNames] = await createSession2(pathOrBuffer, options);
          }
        }
        async dispose() {
          return releaseSession2(this.sessionId);
        }
        async run(feeds, fetches, options) {
          const inputArray = [];
          const inputIndices = [];
          Object.entries(feeds).forEach((kvp) => {
            const name = kvp[0];
            const tensor = kvp[1];
            const index = this.inputNames.indexOf(name);
            if (index === -1) {
              throw new Error(`invalid input '${name}'`);
            }
            inputArray.push(tensor);
            inputIndices.push(index);
          });
          const outputArray = [];
          const outputIndices = [];
          Object.entries(fetches).forEach((kvp) => {
            const name = kvp[0];
            const tensor = kvp[1];
            const index = this.outputNames.indexOf(name);
            if (index === -1) {
              throw new Error(`invalid output '${name}'`);
            }
            outputArray.push(tensor);
            outputIndices.push(index);
          });
          const inputs = inputArray.map((t, i) => encodeTensorMetadata(t, () => `input "${this.inputNames[inputIndices[i]]}"`));
          const outputs = outputArray.map(
            (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.outputNames[outputIndices[i]]}"`) : null
          );
          const results = await run2(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
          const resultMap = {};
          for (let i = 0; i < results.length; i++) {
            resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);
          }
          return resultMap;
        }
        startProfiling() {
        }
        endProfiling() {
          void endProfiling2(this.sessionId);
        }
      };
    }
  });

  // web/lib/backend-wasm.ts
  var initializeFlags, OnnxruntimeWebAssemblyBackend;
  var init_backend_wasm = __esm({
    "web/lib/backend-wasm.ts"() {
      "use strict";
      init_node_os();
      init_esm();
      init_proxy_wrapper();
      init_session_handler_inference();
      initializeFlags = () => {
        if (typeof env2.wasm.initTimeout !== "number" || env2.wasm.initTimeout < 0) {
          env2.wasm.initTimeout = 0;
        }
        if (typeof env2.wasm.simd !== "boolean") {
          env2.wasm.simd = true;
        }
        if (typeof env2.wasm.proxy !== "boolean") {
          env2.wasm.proxy = false;
        }
        if (typeof env2.wasm.numThreads !== "number" || !Number.isInteger(env2.wasm.numThreads) || env2.wasm.numThreads <= 0) {
          const numCpuLogicalCores = typeof navigator === "undefined" ? cpus().length : navigator.hardwareConcurrency;
          env2.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));
        }
      };
      OnnxruntimeWebAssemblyBackend = class {
        async init() {
          initializeFlags();
          await initializeWebAssemblyInstance();
        }
        async createInferenceSessionHandler(pathOrBuffer, options) {
          const handler = new OnnxruntimeWebAssemblySessionHandler();
          await handler.loadModel(pathOrBuffer, options);
          return Promise.resolve(handler);
        }
      };
    }
  });

  // web/lib/backend-wasm-inference.ts
  var backend_wasm_inference_exports = {};
  __export(backend_wasm_inference_exports, {
    wasmBackend: () => wasmBackend
  });
  var wasmBackend;
  var init_backend_wasm_inference = __esm({
    "web/lib/backend-wasm-inference.ts"() {
      "use strict";
      init_backend_wasm();
      wasmBackend = new OnnxruntimeWebAssemblyBackend();
    }
  });

  // web/lib/index.ts
  var lib_exports = {};
  __export(lib_exports, {
    InferenceSession: () => InferenceSession2,
    Tensor: () => Tensor2,
    TrainingSession: () => TrainingSession2,
    default: () => lib_default,
    env: () => env2,
    registerBackend: () => registerBackend
  });
  init_esm();
  init_esm();
  init_esm();

  // web/lib/version.ts
  var version2 = "1.17.0";

  // web/lib/index.ts
  var lib_default = esm_exports;
  if (false) {
    const onnxjsBackend = null.onnxjsBackend;
    registerBackend("webgl", onnxjsBackend, -10);
  }
  if (true) {
    const wasmBackend2 = true ? (init_backend_wasm_inference(), __toCommonJS(backend_wasm_inference_exports)).wasmBackend : null.wasmBackend;
    if (false) {
      registerBackend("webgpu", wasmBackend2, 5);
    }
    registerBackend("cpu", wasmBackend2, 10);
    registerBackend("wasm", wasmBackend2, 10);
    if (true) {
      registerBackend("xnnpack", wasmBackend2, 9);
      registerBackend("webnn", wasmBackend2, 9);
    }
  }
  Object.defineProperty(env2.versions, "web", { value: version2, enumerable: true });
  return __toCommonJS(lib_exports);
})();
//# sourceMappingURL=data:application/json;base64,
