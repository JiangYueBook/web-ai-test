/*!
 * ONNX Runtime Web v1.17.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";
var ort = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // common/dist/esm/backend-impl.js
  var backends, backendsSortedByPriority, registerBackend, resolveBackend;
  var init_backend_impl = __esm({
    "common/dist/esm/backend-impl.js"() {
      "use strict";
      backends = /* @__PURE__ */ new Map();
      backendsSortedByPriority = [];
      registerBackend = (name, backend, priority) => {
        if (backend && typeof backend.init === "function" && typeof backend.createInferenceSessionHandler === "function") {
          const currentBackend = backends.get(name);
          if (currentBackend === void 0) {
            backends.set(name, { backend, priority });
          } else if (currentBackend.priority > priority) {
            return;
          } else if (currentBackend.priority === priority) {
            if (currentBackend.backend !== backend) {
              throw new Error(`cannot register backend "${name}" using priority ${priority}`);
            }
          }
          if (priority >= 0) {
            const i = backendsSortedByPriority.indexOf(name);
            if (i !== -1) {
              backendsSortedByPriority.splice(i, 1);
            }
            for (let i2 = 0; i2 < backendsSortedByPriority.length; i2++) {
              if (backends.get(backendsSortedByPriority[i2]).priority <= priority) {
                backendsSortedByPriority.splice(i2, 0, name);
                return;
              }
            }
            backendsSortedByPriority.push(name);
          }
          return;
        }
        throw new TypeError("not a valid backend");
      };
      resolveBackend = async (backendHints) => {
        const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;
        const errors = [];
        for (const backendName of backendNames) {
          const backendInfo = backends.get(backendName);
          if (backendInfo) {
            if (backendInfo.initialized) {
              return backendInfo.backend;
            } else if (backendInfo.aborted) {
              continue;
            }
            const isInitializing = !!backendInfo.initPromise;
            try {
              if (!isInitializing) {
                backendInfo.initPromise = backendInfo.backend.init(backendName);
              }
              await backendInfo.initPromise;
              backendInfo.initialized = true;
              return backendInfo.backend;
            } catch (e) {
              if (!isInitializing) {
                errors.push({ name: backendName, err: e });
              }
              backendInfo.aborted = true;
            } finally {
              delete backendInfo.initPromise;
            }
          }
        }
        throw new Error(`no available backend found. ERR: ${errors.map((e) => `[${e.name}] ${e.err}`).join(", ")}`);
      };
    }
  });

  // common/dist/esm/backend.js
  var init_backend = __esm({
    "common/dist/esm/backend.js"() {
      "use strict";
      init_backend_impl();
    }
  });

  // common/dist/esm/version.js
  var version;
  var init_version = __esm({
    "common/dist/esm/version.js"() {
      "use strict";
      version = "1.17.0";
    }
  });

  // common/dist/esm/env-impl.js
  var logLevelValue, env;
  var init_env_impl = __esm({
    "common/dist/esm/env-impl.js"() {
      "use strict";
      init_version();
      logLevelValue = "warning";
      env = {
        wasm: {},
        webgl: {},
        webgpu: {},
        versions: { common: version },
        set logLevel(value) {
          if (value === void 0) {
            return;
          }
          if (typeof value !== "string" || ["verbose", "info", "warning", "error", "fatal"].indexOf(value) === -1) {
            throw new Error(`Unsupported logging level: ${value}`);
          }
          logLevelValue = value;
        },
        get logLevel() {
          return logLevelValue;
        }
      };
      Object.defineProperty(env, "logLevel", { enumerable: true });
    }
  });

  // common/dist/esm/env.js
  var env2;
  var init_env = __esm({
    "common/dist/esm/env.js"() {
      "use strict";
      init_env_impl();
      env2 = env;
    }
  });

  // common/dist/esm/tensor-conversion-impl.js
  var tensorToDataURL, tensorToImageData;
  var init_tensor_conversion_impl = __esm({
    "common/dist/esm/tensor-conversion-impl.js"() {
      "use strict";
      tensorToDataURL = (tensor, options) => {
        const canvas = document.createElement("canvas");
        canvas.width = tensor.dims[3];
        canvas.height = tensor.dims[2];
        const pixels2DContext = canvas.getContext("2d");
        if (pixels2DContext != null) {
          let width;
          let height;
          if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
            width = tensor.dims[2];
            height = tensor.dims[3];
          } else {
            width = tensor.dims[3];
            height = tensor.dims[2];
          }
          const inputformat = options?.format !== void 0 ? options.format : "RGB";
          const norm = options?.norm;
          let normMean;
          let normBias;
          if (norm === void 0 || norm.mean === void 0) {
            normMean = [255, 255, 255, 255];
          } else {
            if (typeof norm.mean === "number") {
              normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
            } else {
              normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];
              if (norm.mean[3] !== void 0) {
                normMean[3] = norm.mean[3];
              }
            }
          }
          if (norm === void 0 || norm.bias === void 0) {
            normBias = [0, 0, 0, 0];
          } else {
            if (typeof norm.bias === "number") {
              normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
            } else {
              normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
              if (norm.bias[3] !== void 0) {
                normBias[3] = norm.bias[3];
              }
            }
          }
          const stride = height * width;
          let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
          if (inputformat === "RGBA") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
            aTensorPointer = stride * 3;
          } else if (inputformat === "RGB") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
          } else if (inputformat === "RBG") {
            rTensorPointer = 0;
            bTensorPointer = stride;
            gTensorPointer = stride * 2;
          }
          for (let i = 0; i < height; i++) {
            for (let j = 0; j < width; j++) {
              const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
              const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
              const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
              const A = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
              pixels2DContext.fillStyle = "rgba(" + R + "," + G + "," + B + "," + A + ")";
              pixels2DContext.fillRect(j, i, 1, 1);
            }
          }
          return canvas.toDataURL();
        } else {
          throw new Error("Can not access image data");
        }
      };
      tensorToImageData = (tensor, options) => {
        const pixels2DContext = document.createElement("canvas").getContext("2d");
        let image;
        if (pixels2DContext != null) {
          let width;
          let height;
          let channels;
          if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
            width = tensor.dims[2];
            height = tensor.dims[1];
            channels = tensor.dims[3];
          } else {
            width = tensor.dims[3];
            height = tensor.dims[2];
            channels = tensor.dims[1];
          }
          const inputformat = options !== void 0 ? options.format !== void 0 ? options.format : "RGB" : "RGB";
          const norm = options?.norm;
          let normMean;
          let normBias;
          if (norm === void 0 || norm.mean === void 0) {
            normMean = [255, 255, 255, 255];
          } else {
            if (typeof norm.mean === "number") {
              normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
            } else {
              normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];
              if (norm.mean[3] !== void 0) {
                normMean[3] = norm.mean[3];
              }
            }
          }
          if (norm === void 0 || norm.bias === void 0) {
            normBias = [0, 0, 0, 0];
          } else {
            if (typeof norm.bias === "number") {
              normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
            } else {
              normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
              if (norm.bias[3] !== void 0) {
                normBias[3] = norm.bias[3];
              }
            }
          }
          const stride = height * width;
          if (options !== void 0) {
            if (options.format !== void 0 && (channels === 4 && options.format !== "RGBA") || channels === 3 && (options.format !== "RGB" && options.format !== "BGR")) {
              throw new Error("Tensor format doesn't match input tensor dims");
            }
          }
          const step = 4;
          let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
          let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
          if (inputformat === "RGBA") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
            aTensorPointer = stride * 3;
          } else if (inputformat === "RGB") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
          } else if (inputformat === "RBG") {
            rTensorPointer = 0;
            bTensorPointer = stride;
            gTensorPointer = stride * 2;
          }
          image = pixels2DContext.createImageData(width, height);
          for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {
            image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
            image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
            image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
            image.data[aImagePointer] = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
          }
        } else {
          throw new Error("Can not access image data");
        }
        return image;
      };
    }
  });

  // common/dist/esm/tensor-factory-impl.js
  var bufferToTensor, tensorFromImage, tensorFromTexture, tensorFromGpuBuffer, tensorFromPinnedBuffer;
  var init_tensor_factory_impl = __esm({
    "common/dist/esm/tensor-factory-impl.js"() {
      "use strict";
      init_tensor_impl();
      bufferToTensor = (buffer, options) => {
        if (buffer === void 0) {
          throw new Error("Image buffer must be defined");
        }
        if (options.height === void 0 || options.width === void 0) {
          throw new Error("Image height and width must be defined");
        }
        if (options.tensorLayout === "NHWC") {
          throw new Error("NHWC Tensor layout is not supported yet");
        }
        const { height, width } = options;
        const norm = options.norm ?? { mean: 255, bias: 0 };
        let normMean;
        let normBias;
        if (typeof norm.mean === "number") {
          normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
        } else {
          normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];
        }
        if (typeof norm.bias === "number") {
          normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
        } else {
          normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];
        }
        const inputformat = options.format !== void 0 ? options.format : "RGBA";
        const outputformat = options.tensorFormat !== void 0 ? options.tensorFormat !== void 0 ? options.tensorFormat : "RGB" : "RGB";
        const stride = height * width;
        const float32Data = outputformat === "RGBA" ? new Float32Array(stride * 4) : new Float32Array(stride * 3);
        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
        if (inputformat === "RGB") {
          step = 3;
          rImagePointer = 0;
          gImagePointer = 1;
          bImagePointer = 2;
          aImagePointer = -1;
        }
        if (outputformat === "RGBA") {
          aTensorPointer = stride * 3;
        } else if (outputformat === "RBG") {
          rTensorPointer = 0;
          bTensorPointer = stride;
          gTensorPointer = stride * 2;
        } else if (outputformat === "BGR") {
          bTensorPointer = 0;
          gTensorPointer = stride;
          rTensorPointer = stride * 2;
        }
        for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {
          float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];
          float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];
          float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];
          if (aTensorPointer !== -1 && aImagePointer !== -1) {
            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];
          }
        }
        const outputTensor = outputformat === "RGBA" ? new Tensor("float32", float32Data, [1, 4, height, width]) : new Tensor("float32", float32Data, [1, 3, height, width]);
        return outputTensor;
      };
      tensorFromImage = async (image, options) => {
        const isHTMLImageEle = typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement;
        const isImageDataEle = typeof ImageData !== "undefined" && image instanceof ImageData;
        const isImageBitmap = typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap;
        const isString = typeof image === "string";
        let data;
        let bufferToTensorOptions = options ?? {};
        if (isHTMLImageEle) {
          const canvas = document.createElement("canvas");
          canvas.width = image.width;
          canvas.height = image.height;
          const pixels2DContext = canvas.getContext("2d");
          if (pixels2DContext != null) {
            let height = image.height;
            let width = image.width;
            if (options !== void 0 && options.resizedHeight !== void 0 && options.resizedWidth !== void 0) {
              height = options.resizedHeight;
              width = options.resizedWidth;
            }
            if (options !== void 0) {
              bufferToTensorOptions = options;
              if (options.tensorFormat !== void 0) {
                throw new Error("Image input config format must be RGBA for HTMLImageElement");
              } else {
                bufferToTensorOptions.tensorFormat = "RGBA";
              }
              bufferToTensorOptions.height = height;
              bufferToTensorOptions.width = width;
            } else {
              bufferToTensorOptions.tensorFormat = "RGBA";
              bufferToTensorOptions.height = height;
              bufferToTensorOptions.width = width;
            }
            pixels2DContext.drawImage(image, 0, 0);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
          } else {
            throw new Error("Can not access image data");
          }
        } else if (isImageDataEle) {
          let height;
          let width;
          if (options !== void 0 && options.resizedWidth !== void 0 && options.resizedHeight !== void 0) {
            height = options.resizedHeight;
            width = options.resizedWidth;
          } else {
            height = image.height;
            width = image.width;
          }
          if (options !== void 0) {
            bufferToTensorOptions = options;
          }
          bufferToTensorOptions.format = "RGBA";
          bufferToTensorOptions.height = height;
          bufferToTensorOptions.width = width;
          if (options !== void 0) {
            const tempCanvas = document.createElement("canvas");
            tempCanvas.width = width;
            tempCanvas.height = height;
            const pixels2DContext = tempCanvas.getContext("2d");
            if (pixels2DContext != null) {
              pixels2DContext.putImageData(image, 0, 0);
              data = pixels2DContext.getImageData(0, 0, width, height).data;
            } else {
              throw new Error("Can not access image data");
            }
          } else {
            data = image.data;
          }
        } else if (isImageBitmap) {
          if (options === void 0) {
            throw new Error("Please provide image config with format for Imagebitmap");
          }
          const canvas = document.createElement("canvas");
          canvas.width = image.width;
          canvas.height = image.height;
          const pixels2DContext = canvas.getContext("2d");
          if (pixels2DContext != null) {
            const height = image.height;
            const width = image.width;
            pixels2DContext.drawImage(image, 0, 0, width, height);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
            return bufferToTensor(data, bufferToTensorOptions);
          } else {
            throw new Error("Can not access image data");
          }
        } else if (isString) {
          return new Promise((resolve, reject) => {
            const canvas = document.createElement("canvas");
            const context = canvas.getContext("2d");
            if (!image || !context) {
              return reject();
            }
            const newImage = new Image();
            newImage.crossOrigin = "Anonymous";
            newImage.src = image;
            newImage.onload = () => {
              canvas.width = newImage.width;
              canvas.height = newImage.height;
              context.drawImage(newImage, 0, 0, canvas.width, canvas.height);
              const img = context.getImageData(0, 0, canvas.width, canvas.height);
              bufferToTensorOptions.height = canvas.height;
              bufferToTensorOptions.width = canvas.width;
              resolve(bufferToTensor(img.data, bufferToTensorOptions));
            };
          });
        } else {
          throw new Error("Input data provided is not supported - aborted tensor creation");
        }
        if (data !== void 0) {
          return bufferToTensor(data, bufferToTensorOptions);
        } else {
          throw new Error("Input data provided is not supported - aborted tensor creation");
        }
      };
      tensorFromTexture = (texture, options) => {
        const { width, height, download, dispose } = options;
        const dims = [1, height, width, 4];
        return new Tensor({ location: "texture", type: "float32", texture, dims, download, dispose });
      };
      tensorFromGpuBuffer = (gpuBuffer, options) => {
        const { dataType, dims, download, dispose } = options;
        return new Tensor({ location: "gpu-buffer", type: dataType ?? "float32", gpuBuffer, dims, download, dispose });
      };
      tensorFromPinnedBuffer = (type, buffer, dims) => new Tensor({ location: "cpu-pinned", type, data: buffer, dims: dims ?? [buffer.length] });
    }
  });

  // common/dist/esm/tensor-impl-type-mapping.js
  var NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP, NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, isBigIntChecked, checkBigInt;
  var init_tensor_impl_type_mapping = __esm({
    "common/dist/esm/tensor-impl-type-mapping.js"() {
      "use strict";
      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = /* @__PURE__ */ new Map([
        ["float32", Float32Array],
        ["uint8", Uint8Array],
        ["int8", Int8Array],
        ["uint16", Uint16Array],
        ["float16", Uint16Array],
        ["int16", Int16Array],
        ["int32", Int32Array],
        ["bool", Uint8Array],
        ["float64", Float64Array],
        ["uint32", Uint32Array]
      ]);
      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = /* @__PURE__ */ new Map([
        [Float32Array, "float32"],
        [Uint8Array, "uint8"],
        [Int8Array, "int8"],
        [Uint16Array, "uint16"],
        [Int16Array, "int16"],
        [Int32Array, "int32"],
        [Float64Array, "float64"],
        [Uint32Array, "uint32"]
      ]);
      isBigIntChecked = false;
      checkBigInt = () => {
        if (!isBigIntChecked) {
          isBigIntChecked = true;
          const isBigInt64ArrayAvailable = typeof BigInt64Array !== "undefined" && typeof BigInt64Array.from === "function";
          const isBigUint64ArrayAvailable = typeof BigUint64Array !== "undefined" && typeof BigUint64Array.from === "function";
          if (isBigInt64ArrayAvailable) {
            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("int64", BigInt64Array);
            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, "int64");
          }
          if (isBigUint64ArrayAvailable) {
            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("uint64", BigUint64Array);
            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, "uint64");
          }
        }
      };
    }
  });

  // common/dist/esm/tensor-utils-impl.js
  var calculateSize, tensorReshape;
  var init_tensor_utils_impl = __esm({
    "common/dist/esm/tensor-utils-impl.js"() {
      "use strict";
      init_tensor_impl();
      calculateSize = (dims) => {
        let size = 1;
        for (let i = 0; i < dims.length; i++) {
          const dim = dims[i];
          if (typeof dim !== "number" || !Number.isSafeInteger(dim)) {
            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);
          }
          if (dim < 0) {
            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);
          }
          size *= dim;
        }
        return size;
      };
      tensorReshape = (tensor, dims) => {
        switch (tensor.location) {
          case "cpu":
            return new Tensor(tensor.type, tensor.data, dims);
          case "cpu-pinned":
            return new Tensor({
              location: "cpu-pinned",
              data: tensor.data,
              type: tensor.type,
              dims
            });
          case "texture":
            return new Tensor({
              location: "texture",
              texture: tensor.texture,
              type: tensor.type,
              dims
            });
          case "gpu-buffer":
            return new Tensor({
              location: "gpu-buffer",
              gpuBuffer: tensor.gpuBuffer,
              type: tensor.type,
              dims
            });
          default:
            throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);
        }
      };
    }
  });

  // common/dist/esm/tensor-impl.js
  var Tensor;
  var init_tensor_impl = __esm({
    "common/dist/esm/tensor-impl.js"() {
      "use strict";
      init_tensor_conversion_impl();
      init_tensor_factory_impl();
      init_tensor_impl_type_mapping();
      init_tensor_utils_impl();
      Tensor = class {
        /**
         * implementation.
         */
        constructor(arg0, arg1, arg2) {
          checkBigInt();
          let type;
          let dims;
          if (typeof arg0 === "object" && "location" in arg0) {
            this.dataLocation = arg0.location;
            type = arg0.type;
            dims = arg0.dims;
            switch (arg0.location) {
              case "cpu-pinned": {
                const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);
                if (!expectedTypedArrayConstructor) {
                  throw new TypeError(`unsupported type "${type}" to create tensor from pinned buffer`);
                }
                if (!(arg0.data instanceof expectedTypedArrayConstructor)) {
                  throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);
                }
                this.cpuData = arg0.data;
                break;
              }
              case "texture": {
                if (type !== "float32") {
                  throw new TypeError(`unsupported type "${type}" to create tensor from texture`);
                }
                this.gpuTextureData = arg0.texture;
                this.downloader = arg0.download;
                this.disposer = arg0.dispose;
                break;
              }
              case "gpu-buffer": {
                if (type !== "float32" && type !== "float16" && type !== "int32" && type !== "int64" && type !== "uint32" && type !== "bool") {
                  throw new TypeError(`unsupported type "${type}" to create tensor from gpu buffer`);
                }
                this.gpuBufferData = arg0.gpuBuffer;
                this.downloader = arg0.download;
                this.disposer = arg0.dispose;
                break;
              }
              default:
                throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);
            }
          } else {
            let data;
            let maybeDims;
            if (typeof arg0 === "string") {
              type = arg0;
              maybeDims = arg2;
              if (arg0 === "string") {
                if (!Array.isArray(arg1)) {
                  throw new TypeError("A string tensor's data must be a string array.");
                }
                data = arg1;
              } else {
                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);
                if (typedArrayConstructor === void 0) {
                  throw new TypeError(`Unsupported tensor type: ${arg0}.`);
                }
                if (Array.isArray(arg1)) {
                  if (arg0 === "float16") {
                    throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");
                  } else if (arg0 === "uint64" || arg0 === "int64") {
                    data = typedArrayConstructor.from(arg1, BigInt);
                  } else {
                    data = typedArrayConstructor.from(arg1);
                  }
                } else if (arg1 instanceof typedArrayConstructor) {
                  data = arg1;
                } else {
                  throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);
                }
              }
            } else {
              maybeDims = arg1;
              if (Array.isArray(arg0)) {
                if (arg0.length === 0) {
                  throw new TypeError("Tensor type cannot be inferred from an empty array.");
                }
                const firstElementType = typeof arg0[0];
                if (firstElementType === "string") {
                  type = "string";
                  data = arg0;
                } else if (firstElementType === "boolean") {
                  type = "bool";
                  data = Uint8Array.from(arg0);
                } else {
                  throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);
                }
              } else {
                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);
                if (mappedType === void 0) {
                  throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);
                }
                type = mappedType;
                data = arg0;
              }
            }
            if (maybeDims === void 0) {
              maybeDims = [data.length];
            } else if (!Array.isArray(maybeDims)) {
              throw new TypeError("A tensor's dims must be a number array");
            }
            dims = maybeDims;
            this.cpuData = data;
            this.dataLocation = "cpu";
          }
          const size = calculateSize(dims);
          if (this.cpuData && size !== this.cpuData.length) {
            throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);
          }
          this.type = type;
          this.dims = dims;
          this.size = size;
        }
        // #endregion
        // #region factory
        static async fromImage(image, options) {
          return tensorFromImage(image, options);
        }
        static fromTexture(texture, options) {
          return tensorFromTexture(texture, options);
        }
        static fromGpuBuffer(gpuBuffer, options) {
          return tensorFromGpuBuffer(gpuBuffer, options);
        }
        static fromPinnedBuffer(type, buffer, dims) {
          return tensorFromPinnedBuffer(type, buffer, dims);
        }
        // #endregion
        // #region conversions
        toDataURL(options) {
          return tensorToDataURL(this, options);
        }
        toImageData(options) {
          return tensorToImageData(this, options);
        }
        // #endregion
        // #region properties
        get data() {
          this.ensureValid();
          if (!this.cpuData) {
            throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");
          }
          return this.cpuData;
        }
        get location() {
          return this.dataLocation;
        }
        get texture() {
          this.ensureValid();
          if (!this.gpuTextureData) {
            throw new Error("The data is not stored as a WebGL texture.");
          }
          return this.gpuTextureData;
        }
        get gpuBuffer() {
          this.ensureValid();
          if (!this.gpuBufferData) {
            throw new Error("The data is not stored as a WebGPU buffer.");
          }
          return this.gpuBufferData;
        }
        // #endregion
        // #region methods
        async getData(releaseData) {
          this.ensureValid();
          switch (this.dataLocation) {
            case "cpu":
            case "cpu-pinned":
              return this.data;
            case "texture":
            case "gpu-buffer": {
              if (!this.downloader) {
                throw new Error("The current tensor is not created with a specified data downloader.");
              }
              if (this.isDownloading) {
                throw new Error("The current tensor is being downloaded.");
              }
              try {
                this.isDownloading = true;
                const data = await this.downloader();
                this.downloader = void 0;
                this.dataLocation = "cpu";
                this.cpuData = data;
                if (releaseData && this.disposer) {
                  this.disposer();
                  this.disposer = void 0;
                }
                return data;
              } finally {
                this.isDownloading = false;
              }
            }
            default:
              throw new Error(`cannot get data from location: ${this.dataLocation}`);
          }
        }
        dispose() {
          if (this.isDownloading) {
            throw new Error("The current tensor is being downloaded.");
          }
          if (this.disposer) {
            this.disposer();
            this.disposer = void 0;
          }
          this.cpuData = void 0;
          this.gpuTextureData = void 0;
          this.gpuBufferData = void 0;
          this.downloader = void 0;
          this.isDownloading = void 0;
          this.dataLocation = "none";
        }
        // #endregion
        // #region tensor utilities
        ensureValid() {
          if (this.dataLocation === "none") {
            throw new Error("The tensor is disposed.");
          }
        }
        reshape(dims) {
          this.ensureValid();
          if (this.downloader || this.disposer) {
            throw new Error("Cannot reshape a tensor that owns GPU resource.");
          }
          return tensorReshape(this, dims);
        }
      };
    }
  });

  // common/dist/esm/tensor.js
  var Tensor2;
  var init_tensor = __esm({
    "common/dist/esm/tensor.js"() {
      "use strict";
      init_tensor_impl();
      Tensor2 = Tensor;
    }
  });

  // common/dist/esm/trace.js
  var TRACE, TRACE_FUNC, TRACE_FUNC_BEGIN, TRACE_FUNC_END;
  var init_trace = __esm({
    "common/dist/esm/trace.js"() {
      "use strict";
      init_env_impl();
      TRACE = (deviceType, label) => {
        if (!env.wasm.trace) {
          return;
        }
        console.timeStamp(`${deviceType}::ORT::${label}`);
      };
      TRACE_FUNC = (msg, extraMsg) => {
        const stack = new Error().stack?.split(/\r\n|\r|\n/g) || [];
        let hasTraceFunc = false;
        for (let i = 0; i < stack.length; i++) {
          if (hasTraceFunc && !stack[i].includes("TRACE_FUNC")) {
            let label = `FUNC_${msg}::${stack[i].trim().split(" ")[1]}`;
            if (extraMsg) {
              label += `::${extraMsg}`;
            }
            TRACE("CPU", label);
            return;
          }
          if (stack[i].includes("TRACE_FUNC")) {
            hasTraceFunc = true;
          }
        }
      };
      TRACE_FUNC_BEGIN = (extraMsg) => {
        if (!env.wasm.trace) {
          return;
        }
        TRACE_FUNC("BEGIN", extraMsg);
      };
      TRACE_FUNC_END = (extraMsg) => {
        if (!env.wasm.trace) {
          return;
        }
        TRACE_FUNC("END", extraMsg);
      };
    }
  });

  // common/dist/esm/inference-session-impl.js
  var InferenceSession;
  var init_inference_session_impl = __esm({
    "common/dist/esm/inference-session-impl.js"() {
      "use strict";
      init_backend_impl();
      init_tensor();
      init_trace();
      InferenceSession = class _InferenceSession {
        constructor(handler) {
          this.handler = handler;
        }
        async run(feeds, arg1, arg2) {
          TRACE_FUNC_BEGIN();
          const fetches = {};
          let options = {};
          if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
            throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
          }
          let isFetchesEmpty = true;
          if (typeof arg1 === "object") {
            if (arg1 === null) {
              throw new TypeError("Unexpected argument[1]: cannot be null.");
            }
            if (arg1 instanceof Tensor2) {
              throw new TypeError("'fetches' cannot be a Tensor");
            }
            if (Array.isArray(arg1)) {
              if (arg1.length === 0) {
                throw new TypeError("'fetches' cannot be an empty array.");
              }
              isFetchesEmpty = false;
              for (const name of arg1) {
                if (typeof name !== "string") {
                  throw new TypeError("'fetches' must be a string array or an object.");
                }
                if (this.outputNames.indexOf(name) === -1) {
                  throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
                }
                fetches[name] = null;
              }
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              let isFetches = false;
              const arg1Keys = Object.getOwnPropertyNames(arg1);
              for (const name of this.outputNames) {
                if (arg1Keys.indexOf(name) !== -1) {
                  const v = arg1[name];
                  if (v === null || v instanceof Tensor2) {
                    isFetches = true;
                    isFetchesEmpty = false;
                    fetches[name] = v;
                  }
                }
              }
              if (isFetches) {
                if (typeof arg2 === "object" && arg2 !== null) {
                  options = arg2;
                } else if (typeof arg2 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else {
                options = arg1;
              }
            }
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
          }
          for (const name of this.inputNames) {
            if (typeof feeds[name] === "undefined") {
              throw new Error(`input '${name}' is missing in 'feeds'.`);
            }
          }
          if (isFetchesEmpty) {
            for (const name of this.outputNames) {
              fetches[name] = null;
            }
          }
          const results = await this.handler.run(feeds, fetches, options);
          const returnValue = {};
          for (const key in results) {
            if (Object.hasOwnProperty.call(results, key)) {
              const result = results[key];
              if (result instanceof Tensor2) {
                returnValue[key] = result;
              } else {
                returnValue[key] = new Tensor2(result.type, result.data, result.dims);
              }
            }
          }
          TRACE_FUNC_END();
          return returnValue;
        }
        async release() {
          return this.handler.dispose();
        }
        static async create(arg0, arg1, arg2, arg3) {
          TRACE_FUNC_BEGIN();
          let filePathOrUint8Array;
          let options = {};
          if (typeof arg0 === "string") {
            filePathOrUint8Array = arg0;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else if (arg0 instanceof Uint8Array) {
            filePathOrUint8Array = arg0;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else if (arg0 instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && arg0 instanceof SharedArrayBuffer) {
            const buffer = arg0;
            let byteOffset = 0;
            let byteLength = arg0.byteLength;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 === "number") {
              byteOffset = arg1;
              if (!Number.isSafeInteger(byteOffset)) {
                throw new RangeError("'byteOffset' must be an integer.");
              }
              if (byteOffset < 0 || byteOffset >= buffer.byteLength) {
                throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);
              }
              byteLength = arg0.byteLength - byteOffset;
              if (typeof arg2 === "number") {
                byteLength = arg2;
                if (!Number.isSafeInteger(byteLength)) {
                  throw new RangeError("'byteLength' must be an integer.");
                }
                if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {
                  throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);
                }
                if (typeof arg3 === "object" && arg3 !== null) {
                  options = arg3;
                } else if (typeof arg3 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'byteLength' must be a number.");
              }
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);
          } else {
            throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
          }
          const eps = options.executionProviders || [];
          const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
          const backend = await resolveBackend(backendHints);
          const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, options);
          TRACE_FUNC_END();
          return new _InferenceSession(handler);
        }
        startProfiling() {
          this.handler.startProfiling();
        }
        endProfiling() {
          this.handler.endProfiling();
        }
        get inputNames() {
          return this.handler.inputNames;
        }
        get outputNames() {
          return this.handler.outputNames;
        }
      };
    }
  });

  // common/dist/esm/inference-session.js
  var InferenceSession2;
  var init_inference_session = __esm({
    "common/dist/esm/inference-session.js"() {
      "use strict";
      init_inference_session_impl();
      InferenceSession2 = InferenceSession;
    }
  });

  // common/dist/esm/onnx-value.js
  var init_onnx_value = __esm({
    "common/dist/esm/onnx-value.js"() {
      "use strict";
    }
  });

  // common/dist/esm/training-session-impl.js
  var noBackendErrMsg, TrainingSession;
  var init_training_session_impl = __esm({
    "common/dist/esm/training-session-impl.js"() {
      "use strict";
      init_backend_impl();
      init_tensor();
      noBackendErrMsg = "Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.";
      TrainingSession = class _TrainingSession {
        constructor(handler, hasOptimizerModel, hasEvalModel) {
          this.handler = handler;
          this.hasOptimizerModel = hasOptimizerModel;
          this.hasEvalModel = hasEvalModel;
        }
        get trainingInputNames() {
          return this.handler.inputNames;
        }
        get trainingOutputNames() {
          return this.handler.outputNames;
        }
        get evalInputNames() {
          if (this.hasEvalModel) {
            return this.handler.evalInputNames;
          } else {
            throw new Error("This training session has no evalModel loaded.");
          }
        }
        get evalOutputNames() {
          if (this.hasEvalModel) {
            return this.handler.evalOutputNames;
          } else {
            throw new Error("This training session has no evalModel loaded.");
          }
        }
        static async create(trainingOptions, sessionOptions) {
          const evalModel = trainingOptions.evalModel || "";
          const optimizerModel = trainingOptions.optimizerModel || "";
          const options = sessionOptions || {};
          const eps = options.executionProviders || [];
          const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
          const backend = await resolveBackend(backendHints);
          if (backend.createTrainingSessionHandler) {
            const handler = await backend.createTrainingSessionHandler(trainingOptions.checkpointState, trainingOptions.trainModel, evalModel, optimizerModel, options);
            return new _TrainingSession(handler, !!trainingOptions.optimizerModel, !!trainingOptions.evalModel);
          } else {
            throw new Error(noBackendErrMsg);
          }
        }
        /**
         * Helper function for runTrainStep and future runStep methods that handles the type-narrowing conversion from
         * the given parameters to SessionHandler.FetchesType and RunOptions.
         *
         * @param inputNames the feeds object is checked that they contain all input names in the provided list of input
         * names.
         * @param outputNames the fetches object is checked that their keys match up with valid names in the list of output
         * names.
         * @param feeds the required input
         * @param arg1 narrowed & converted into the SessionHandler.FetchesType or RunOptions object
         * @param arg2 optional RunOptions object.
         * @returns
         */
        typeNarrowingForRunStep(inputNames, outputNames, feeds, arg1, arg2) {
          const fetches = {};
          let options = {};
          if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
            throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
          }
          let isFetchesEmpty = true;
          if (typeof arg1 === "object") {
            if (arg1 === null) {
              throw new TypeError("Unexpected argument[1]: cannot be null.");
            }
            if (arg1 instanceof Tensor2) {
              throw new TypeError("'fetches' cannot be a Tensor");
            }
            if (Array.isArray(arg1)) {
              if (arg1.length === 0) {
                throw new TypeError("'fetches' cannot be an empty array.");
              }
              isFetchesEmpty = false;
              for (const name of arg1) {
                if (typeof name !== "string") {
                  throw new TypeError("'fetches' must be a string array or an object.");
                }
                if (outputNames.indexOf(name) === -1) {
                  throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
                }
                fetches[name] = null;
              }
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              let isFetches = false;
              const arg1Keys = Object.getOwnPropertyNames(arg1);
              for (const name of outputNames) {
                if (arg1Keys.indexOf(name) !== -1) {
                  const v = arg1[name];
                  if (v === null || v instanceof Tensor2) {
                    isFetches = true;
                    isFetchesEmpty = false;
                    fetches[name] = v;
                  }
                }
              }
              if (isFetches) {
                if (typeof arg2 === "object" && arg2 !== null) {
                  options = arg2;
                } else if (typeof arg2 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else {
                options = arg1;
              }
            }
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
          }
          for (const name of inputNames) {
            if (typeof feeds[name] === "undefined") {
              throw new Error(`input '${name}' is missing in 'feeds'.`);
            }
          }
          if (isFetchesEmpty) {
            for (const name of outputNames) {
              fetches[name] = null;
            }
          }
          return [fetches, options];
        }
        /**
         * Helper method for runTrainStep and any other runStep methods. Takes the ReturnType result from the SessionHandler
         * and changes it into a map of Tensors.
         *
         * @param results
         * @returns
         */
        convertHandlerReturnTypeToMapOfTensors(results) {
          const returnValue = {};
          for (const key in results) {
            if (Object.hasOwnProperty.call(results, key)) {
              const result = results[key];
              if (result instanceof Tensor2) {
                returnValue[key] = result;
              } else {
                returnValue[key] = new Tensor2(result.type, result.data, result.dims);
              }
            }
          }
          return returnValue;
        }
        async lazyResetGrad() {
          await this.handler.lazyResetGrad();
        }
        async runTrainStep(feeds, arg1, arg2) {
          const [fetches, options] = this.typeNarrowingForRunStep(this.trainingInputNames, this.trainingOutputNames, feeds, arg1, arg2);
          const results = await this.handler.runTrainStep(feeds, fetches, options);
          return this.convertHandlerReturnTypeToMapOfTensors(results);
        }
        async runOptimizerStep(options) {
          if (this.hasOptimizerModel) {
            await this.handler.runOptimizerStep(options || {});
          } else {
            throw new Error("This TrainingSession has no OptimizerModel loaded.");
          }
        }
        async runEvalStep(feeds, arg1, arg2) {
          if (this.hasEvalModel) {
            const [fetches, options] = this.typeNarrowingForRunStep(this.evalInputNames, this.evalOutputNames, feeds, arg1, arg2);
            const results = await this.handler.runEvalStep(feeds, fetches, options);
            return this.convertHandlerReturnTypeToMapOfTensors(results);
          } else {
            throw new Error("This TrainingSession has no EvalModel loaded.");
          }
        }
        async getParametersSize(trainableOnly = true) {
          return this.handler.getParametersSize(trainableOnly);
        }
        async loadParametersBuffer(array, trainableOnly = true) {
          const paramsSize = await this.getParametersSize(trainableOnly);
          if (array.length !== 4 * paramsSize) {
            throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");
          }
          return this.handler.loadParametersBuffer(array, trainableOnly);
        }
        async getContiguousParameters(trainableOnly = true) {
          return this.handler.getContiguousParameters(trainableOnly);
        }
        async release() {
          return this.handler.dispose();
        }
      };
    }
  });

  // common/dist/esm/training-session.js
  var TrainingSession2;
  var init_training_session = __esm({
    "common/dist/esm/training-session.js"() {
      "use strict";
      init_training_session_impl();
      TrainingSession2 = TrainingSession;
    }
  });

  // common/dist/esm/index.js
  var esm_exports = {};
  __export(esm_exports, {
    InferenceSession: () => InferenceSession2,
    TRACE: () => TRACE,
    TRACE_FUNC_BEGIN: () => TRACE_FUNC_BEGIN,
    TRACE_FUNC_END: () => TRACE_FUNC_END,
    Tensor: () => Tensor2,
    TrainingSession: () => TrainingSession2,
    env: () => env2,
    registerBackend: () => registerBackend
  });
  var init_esm = __esm({
    "common/dist/esm/index.js"() {
      "use strict";
      init_backend();
      init_env();
      init_inference_session();
      init_tensor();
      init_trace();
      init_onnx_value();
      init_training_session();
    }
  });

  // nodejs-ignore:node:os
  var cpus;
  var init_node_os = __esm({
    "nodejs-ignore:node:os"() {
      cpus = void 0;
    }
  });

  // nodejs-ignore:node:path
  var join;
  var init_node_path = __esm({
    "nodejs-ignore:node:path"() {
      join = void 0;
    }
  });

  // nodejs-ignore:fs
  var fs_exports = {};
  __export(fs_exports, {
    readFile: () => readFile
  });
  var readFile;
  var init_fs = __esm({
    "nodejs-ignore:fs"() {
      readFile = void 0;
    }
  });

  // nodejs-ignore:path
  var path_exports = {};
  __export(path_exports, {
    join: () => join2
  });
  var join2;
  var init_path = __esm({
    "nodejs-ignore:path"() {
      join2 = void 0;
    }
  });

  // web/lib/wasm/binding/ort-wasm.js
  var require_ort_wasm = __commonJS({
    "web/lib/wasm/binding/ort-wasm.js"(exports, module) {
      "use strict";
      var ortWasm = (() => {
        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
        if (typeof __filename !== "undefined")
          _scriptDir = _scriptDir || __filename;
        return function(moduleArg = {}) {
          var h = moduleArg, aa, ba;
          h.ready = new Promise((a, b) => {
            aa = a;
            ba = b;
          });
          var ca = Object.assign({}, h), da = "./this.program", ea = "object" == typeof window, m = "function" == typeof importScripts, fa = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, p = "", ha, t, w;
          if (fa) {
            var fs = (init_fs(), __toCommonJS(fs_exports)), ia = (init_path(), __toCommonJS(path_exports));
            p = m ? ia.dirname(p) + "/" : __dirname + "/";
            ha = (a, b) => {
              a = a.startsWith("file://") ? new URL(a) : ia.normalize(a);
              return fs.readFileSync(a, b ? void 0 : "utf8");
            };
            w = (a) => {
              a = ha(a, true);
              a.buffer || (a = new Uint8Array(a));
              return a;
            };
            t = (a, b, c, d = true) => {
              a = a.startsWith("file://") ? new URL(a) : ia.normalize(a);
              fs.readFile(a, d ? void 0 : "utf8", (e, g) => {
                e ? c(e) : b(d ? g.buffer : g);
              });
            };
            !h.thisProgram && 1 < process.argv.length && (da = process.argv[1].replace(/\\/g, "/"));
            process.argv.slice(2);
            h.inspect = () => "[Emscripten Module object]";
          } else if (ea || m)
            m ? p = self.location.href : "undefined" != typeof document && document.currentScript && (p = document.currentScript.src), _scriptDir && (p = _scriptDir), 0 !== p.indexOf("blob:") ? p = p.substr(0, p.replace(/[?#].*/, "").lastIndexOf("/") + 1) : p = "", ha = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.send(null);
              return b.responseText;
            }, m && (w = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.responseType = "arraybuffer";
              b.send(null);
              return new Uint8Array(b.response);
            }), t = (a, b, c) => {
              var d = new XMLHttpRequest();
              d.open("GET", a, true);
              d.responseType = "arraybuffer";
              d.onload = () => {
                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
              };
              d.onerror = c;
              d.send(null);
            };
          var ja = console.log.bind(console), x = console.error.bind(console);
          Object.assign(h, ca);
          ca = null;
          "object" != typeof WebAssembly && ka("no native wasm support detected");
          var z, la = false, A, B, C, D, E, G, ma, na, oa, pa;
          function qa() {
            var a = z.buffer;
            h.HEAP8 = A = new Int8Array(a);
            h.HEAP16 = C = new Int16Array(a);
            h.HEAPU8 = B = new Uint8Array(a);
            h.HEAPU16 = D = new Uint16Array(a);
            h.HEAP32 = E = new Int32Array(a);
            h.HEAPU32 = G = new Uint32Array(a);
            h.HEAPF32 = ma = new Float32Array(a);
            h.HEAPF64 = pa = new Float64Array(a);
            h.HEAP64 = na = new BigInt64Array(a);
            h.HEAPU64 = oa = new BigUint64Array(a);
          }
          var ra = [], sa = [], ta = [], I = 0, ua = null, J = null;
          function ka(a) {
            a = "Aborted(" + a + ")";
            x(a);
            la = true;
            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
            ba(a);
            throw a;
          }
          function va(a) {
            return a.startsWith("data:application/octet-stream;base64,");
          }
          var K;
          K = "ort-wasm.wasm";
          if (!va(K)) {
            var wa = K;
            K = h.locateFile ? h.locateFile(wa, p) : p + wa;
          }
          function xa(a) {
            if (w)
              return w(a);
            throw "both async and sync fetching of the wasm failed";
          }
          function ya(a) {
            if (ea || m) {
              if ("function" == typeof fetch && !a.startsWith("file://"))
                return fetch(a, { credentials: "same-origin" }).then((b) => {
                  if (!b.ok)
                    throw "failed to load wasm binary file at '" + a + "'";
                  return b.arrayBuffer();
                }).catch(() => xa(a));
              if (t)
                return new Promise((b, c) => {
                  t(a, (d) => b(new Uint8Array(d)), c);
                });
            }
            return Promise.resolve().then(() => xa(a));
          }
          function za(a, b, c) {
            return ya(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {
              x(`failed to asynchronously prepare wasm: ${d}`);
              ka(d);
            });
          }
          function Aa(a, b) {
            var c = K;
            return "function" != typeof WebAssembly.instantiateStreaming || va(c) || c.startsWith("file://") || fa || "function" != typeof fetch ? za(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(e) {
              x(`wasm streaming compile failed: ${e}`);
              x("falling back to ArrayBuffer instantiation");
              return za(c, a, b);
            }));
          }
          function Ba(a) {
            this.Va = a - 24;
            this.fb = function(b) {
              G[this.Va + 4 >>> 2 >>> 0] = b;
            };
            this.eb = function(b) {
              G[this.Va + 8 >>> 2 >>> 0] = b;
            };
            this.Za = function(b, c) {
              this.$a();
              this.fb(b);
              this.eb(c);
            };
            this.$a = function() {
              G[this.Va + 16 >>> 2 >>> 0] = 0;
            };
          }
          var Ca = 0, Da = 0, Ea = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Fa = (a, b, c) => {
            b >>>= 0;
            var d = b + c;
            for (c = b; a[c] && !(c >= d); )
              ++c;
            if (16 < c - b && a.buffer && Ea)
              return Ea.decode(a.subarray(b, c));
            for (d = ""; b < c; ) {
              var e = a[b++];
              if (e & 128) {
                var g = a[b++] & 63;
                if (192 == (e & 224))
                  d += String.fromCharCode((e & 31) << 6 | g);
                else {
                  var l = a[b++] & 63;
                  e = 224 == (e & 240) ? (e & 15) << 12 | g << 6 | l : (e & 7) << 18 | g << 12 | l << 6 | a[b++] & 63;
                  65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));
                }
              } else
                d += String.fromCharCode(e);
            }
            return d;
          }, L = (a, b) => (a >>>= 0) ? Fa(B, a, b) : "", M = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
            }
            return b;
          }, N = (a, b, c, d) => {
            c >>>= 0;
            if (!(0 < d))
              return 0;
            var e = c;
            d = c + d - 1;
            for (var g = 0; g < a.length; ++g) {
              var l = a.charCodeAt(g);
              if (55296 <= l && 57343 >= l) {
                var k = a.charCodeAt(++g);
                l = 65536 + ((l & 1023) << 10) | k & 1023;
              }
              if (127 >= l) {
                if (c >= d)
                  break;
                b[c++ >>> 0] = l;
              } else {
                if (2047 >= l) {
                  if (c + 1 >= d)
                    break;
                  b[c++ >>> 0] = 192 | l >> 6;
                } else {
                  if (65535 >= l) {
                    if (c + 2 >= d)
                      break;
                    b[c++ >>> 0] = 224 | l >> 12;
                  } else {
                    if (c + 3 >= d)
                      break;
                    b[c++ >>> 0] = 240 | l >> 18;
                    b[c++ >>> 0] = 128 | l >> 12 & 63;
                  }
                  b[c++ >>> 0] = 128 | l >> 6 & 63;
                }
                b[c++ >>> 0] = 128 | l & 63;
              }
            }
            b[c >>> 0] = 0;
            return c - e;
          }, Ga = (a) => {
            if (null === a)
              return "null";
            var b = typeof a;
            return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;
          }, Ha, O = (a) => {
            for (var b = ""; B[a >>> 0]; )
              b += Ha[B[a++ >>> 0]];
            return b;
          }, Ia = {}, Ja = {}, Ka = {}, P;
          function La(a, b, c = {}) {
            var d = b.name;
            if (!a)
              throw new P(`type "${d}" must have a positive integer typeid pointer`);
            if (Ja.hasOwnProperty(a)) {
              if (c.gb)
                return;
              throw new P(`Cannot register type '${d}' twice`);
            }
            Ja[a] = b;
            delete Ka[a];
            Ia.hasOwnProperty(a) && (b = Ia[a], delete Ia[a], b.forEach((e) => e()));
          }
          function Q(a, b, c = {}) {
            if (!("argPackAdvance" in b))
              throw new TypeError("registerType registeredInstance requires argPackAdvance");
            La(a, b, c);
          }
          var Ma = (a, b, c) => {
            switch (b) {
              case 1:
                return c ? (d) => A[d >>> 0 >>> 0] : (d) => B[d >>> 0 >>> 0];
              case 2:
                return c ? (d) => C[d >>> 1 >>> 0] : (d) => D[d >>> 1 >>> 0];
              case 4:
                return c ? (d) => E[d >>> 2 >>> 0] : (d) => G[d >>> 2 >>> 0];
              case 8:
                return c ? (d) => na[d >>> 3] : (d) => oa[d >>> 3];
              default:
                throw new TypeError(`invalid integer width (${b}): ${a}`);
            }
          };
          function Na() {
            this.Sa = [void 0];
            this.bb = [];
          }
          var R = new Na();
          function Oa(a) {
            a >>>= 0;
            a >= R.Va && 0 === --R.get(a).cb && R.$a(a);
          }
          var S = (a) => {
            if (!a)
              throw new P("Cannot use deleted val. handle = " + a);
            return R.get(a).value;
          }, T = (a) => {
            switch (a) {
              case void 0:
                return 1;
              case null:
                return 2;
              case true:
                return 3;
              case false:
                return 4;
              default:
                return R.Za({ cb: 1, value: a });
            }
          };
          function Pa(a) {
            return this.fromWireType(E[a >>> 2 >>> 0]);
          }
          var Qa = (a, b) => {
            switch (b) {
              case 4:
                return function(c) {
                  return this.fromWireType(ma[c >>> 2 >>> 0]);
                };
              case 8:
                return function(c) {
                  return this.fromWireType(pa[c >>> 3 >>> 0]);
                };
              default:
                throw new TypeError(`invalid float width (${b}): ${a}`);
            }
          };
          function Ra(a) {
            return this.fromWireType(G[a >>> 2 >>> 0]);
          }
          var Sa = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, Ta = (a, b) => {
            var c = a >> 1;
            for (var d = c + b / 2; !(c >= d) && D[c >>> 0]; )
              ++c;
            c <<= 1;
            if (32 < c - a && Sa)
              return Sa.decode(B.subarray(a >>> 0, c >>> 0));
            c = "";
            for (d = 0; !(d >= b / 2); ++d) {
              var e = C[a + 2 * d >>> 1 >>> 0];
              if (0 == e)
                break;
              c += String.fromCharCode(e);
            }
            return c;
          }, Ua = (a, b, c) => {
            void 0 === c && (c = 2147483647);
            if (2 > c)
              return 0;
            c -= 2;
            var d = b;
            c = c < 2 * a.length ? c / 2 : a.length;
            for (var e = 0; e < c; ++e)
              C[b >>> 1 >>> 0] = a.charCodeAt(e), b += 2;
            C[b >>> 1 >>> 0] = 0;
            return b - d;
          }, Va = (a) => 2 * a.length, Wa = (a, b) => {
            for (var c = 0, d = ""; !(c >= b / 4); ) {
              var e = E[a + 4 * c >>> 2 >>> 0];
              if (0 == e)
                break;
              ++c;
              65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e);
            }
            return d;
          }, Xa = (a, b, c) => {
            b >>>= 0;
            void 0 === c && (c = 2147483647);
            if (4 > c)
              return 0;
            var d = b;
            c = d + c - 4;
            for (var e = 0; e < a.length; ++e) {
              var g = a.charCodeAt(e);
              if (55296 <= g && 57343 >= g) {
                var l = a.charCodeAt(++e);
                g = 65536 + ((g & 1023) << 10) | l & 1023;
              }
              E[b >>> 2 >>> 0] = g;
              b += 4;
              if (b + 4 > c)
                break;
            }
            E[b >>> 2 >>> 0] = 0;
            return b - d;
          }, Ya = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              55296 <= d && 57343 >= d && ++c;
              b += 4;
            }
            return b;
          }, V = (a, b) => {
            var c = Ja[a];
            if (void 0 === c)
              throw a = Za(a), c = O(a), U(a), new P(b + " has unknown type " + c);
            return c;
          }, $a = {}, W = (a) => {
            var b = $a[a];
            return void 0 === b ? O(a) : b;
          }, X = [], bb = () => "object" == typeof globalThis ? globalThis : Function("return this")(), cb = (a) => {
            var b = X.length;
            X.push(a);
            return b;
          }, db = (a, b) => {
            for (var c = Array(a), d = 0; d < a; ++d)
              c[d] = V(G[b + 4 * d >>> 2 >>> 0], "parameter " + d);
            return c;
          }, eb = (a) => {
            if (void 0 === a)
              return "_unknown";
            a = a.replace(/[^a-zA-Z0-9_]/g, "$");
            var b = a.charCodeAt(0);
            return 48 <= b && 57 >= b ? `_${a}` : a;
          }, fb = {};
          function gb(a, b) {
            a = eb(a);
            return { [a]: function() {
              return b.apply(this, arguments);
            } }[a];
          }
          function hb(a) {
            var b = Function;
            if (!(b instanceof Function))
              throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);
            var c = gb(b.name || "unknownFunctionName", function() {
            });
            c.prototype = b.prototype;
            c = new c();
            a = b.apply(c, a);
            return a instanceof Object ? a : c;
          }
          var ib = (a) => {
            for (var b = "", c = 0; c < a; ++c)
              b += (0 !== c ? ", " : "") + "arg" + c;
            var d = "return function emval_allocator_" + a + "(constructor, argTypes, args) {\n  var HEAPU32 = getMemory();\n";
            for (c = 0; c < a; ++c)
              d += "var argType" + c + " = requireRegisteredType(HEAPU32[((argTypes)>>>2)], 'parameter " + c + "');\nvar arg" + c + " = argType" + c + ".readValueFromPointer(args);\nargs += argType" + c + "['argPackAdvance'];\nargTypes += 4;\n";
            return new Function("requireRegisteredType", "Module", "valueToHandle", "getMemory", d + ("var obj = new constructor(" + b + ");\nreturn valueToHandle(obj);\n}\n"))(V, h, T, () => G);
          }, jb = {}, Y = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), kb = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], lb = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], nb = (a) => {
            var b = M(a) + 1, c = mb(b);
            c && N(a, B, c, b);
            return c;
          }, ob = {}, qb = () => {
            if (!pb) {
              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: da || "./this.program" }, b;
              for (b in ob)
                void 0 === ob[b] ? delete a[b] : a[b] = ob[b];
              var c = [];
              for (b in a)
                c.push(`${b}=${a[b]}`);
              pb = c;
            }
            return pb;
          }, pb, rb = [null, [], []], sb = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], tb = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          function ub(a) {
            var b = Array(M(a) + 1);
            N(a, b, 0, b.length);
            return b;
          }
          function vb(a, b, c, d) {
            function e(f, r, u) {
              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < r; )
                f = u[0] + f;
              return f;
            }
            function g(f, r) {
              return e(f, r, "0");
            }
            function l(f, r) {
              function u(ab) {
                return 0 > ab ? -1 : 0 < ab ? 1 : 0;
              }
              var H;
              0 === (H = u(f.getFullYear() - r.getFullYear())) && 0 === (H = u(f.getMonth() - r.getMonth())) && (H = u(f.getDate() - r.getDate()));
              return H;
            }
            function k(f) {
              switch (f.getDay()) {
                case 0:
                  return new Date(f.getFullYear() - 1, 11, 29);
                case 1:
                  return f;
                case 2:
                  return new Date(f.getFullYear(), 0, 3);
                case 3:
                  return new Date(
                    f.getFullYear(),
                    0,
                    2
                  );
                case 4:
                  return new Date(f.getFullYear(), 0, 1);
                case 5:
                  return new Date(f.getFullYear() - 1, 11, 31);
                case 6:
                  return new Date(f.getFullYear() - 1, 11, 30);
              }
            }
            function n(f) {
              var r = f.Ta;
              for (f = new Date(new Date(f.Ua + 1900, 0, 1).getTime()); 0 < r; ) {
                var u = f.getMonth(), H = (Y(f.getFullYear()) ? sb : tb)[u];
                if (r > H - f.getDate())
                  r -= H - f.getDate() + 1, f.setDate(1), 11 > u ? f.setMonth(u + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));
                else {
                  f.setDate(f.getDate() + r);
                  break;
                }
              }
              u = new Date(f.getFullYear() + 1, 0, 4);
              r = k(new Date(
                f.getFullYear(),
                0,
                4
              ));
              u = k(u);
              return 0 >= l(r, f) ? 0 >= l(u, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;
            }
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            var q = G[d + 40 >>> 2 >>> 0];
            d = { kb: E[d >>> 2 >>> 0], jb: E[d + 4 >>> 2 >>> 0], Xa: E[d + 8 >>> 2 >>> 0], ab: E[d + 12 >>> 2 >>> 0], Ya: E[d + 16 >>> 2 >>> 0], Ua: E[d + 20 >>> 2 >>> 0], Oa: E[d + 24 >>> 2 >>> 0], Ta: E[d + 28 >>> 2 >>> 0], mb: E[d + 32 >>> 2 >>> 0], ib: E[d + 36 >>> 2 >>> 0], lb: q ? L(q) : "" };
            c = L(c);
            q = {
              "%c": "%a %b %d %H:%M:%S %Y",
              "%D": "%m/%d/%y",
              "%F": "%Y-%m-%d",
              "%h": "%b",
              "%r": "%I:%M:%S %p",
              "%R": "%H:%M",
              "%T": "%H:%M:%S",
              "%x": "%m/%d/%y",
              "%X": "%H:%M:%S",
              "%Ec": "%c",
              "%EC": "%C",
              "%Ex": "%m/%d/%y",
              "%EX": "%H:%M:%S",
              "%Ey": "%y",
              "%EY": "%Y",
              "%Od": "%d",
              "%Oe": "%e",
              "%OH": "%H",
              "%OI": "%I",
              "%Om": "%m",
              "%OM": "%M",
              "%OS": "%S",
              "%Ou": "%u",
              "%OU": "%U",
              "%OV": "%V",
              "%Ow": "%w",
              "%OW": "%W",
              "%Oy": "%y"
            };
            for (var v in q)
              c = c.replace(new RegExp(v, "g"), q[v]);
            var y = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), F = "January February March April May June July August September October November December".split(" ");
            q = { "%a": (f) => y[f.Oa].substring(0, 3), "%A": (f) => y[f.Oa], "%b": (f) => F[f.Ya].substring(0, 3), "%B": (f) => F[f.Ya], "%C": (f) => g((f.Ua + 1900) / 100 | 0, 2), "%d": (f) => g(f.ab, 2), "%e": (f) => e(f.ab, 2, " "), "%g": (f) => n(f).toString().substring(2), "%G": (f) => n(f), "%H": (f) => g(f.Xa, 2), "%I": (f) => {
              f = f.Xa;
              0 == f ? f = 12 : 12 < f && (f -= 12);
              return g(f, 2);
            }, "%j": (f) => {
              for (var r = 0, u = 0; u <= f.Ya - 1; r += (Y(f.Ua + 1900) ? sb : tb)[u++])
                ;
              return g(f.ab + r, 3);
            }, "%m": (f) => g(f.Ya + 1, 2), "%M": (f) => g(f.jb, 2), "%n": () => "\n", "%p": (f) => 0 <= f.Xa && 12 > f.Xa ? "AM" : "PM", "%S": (f) => g(f.kb, 2), "%t": () => "	", "%u": (f) => f.Oa || 7, "%U": (f) => g(Math.floor((f.Ta + 7 - f.Oa) / 7), 2), "%V": (f) => {
              var r = Math.floor((f.Ta + 7 - (f.Oa + 6) % 7) / 7);
              2 >= (f.Oa + 371 - f.Ta - 2) % 7 && r++;
              if (r)
                53 == r && (u = (f.Oa + 371 - f.Ta) % 7, 4 == u || 3 == u && Y(f.Ua) || (r = 1));
              else {
                r = 52;
                var u = (f.Oa + 7 - f.Ta - 1) % 7;
                (4 == u || 5 == u && Y(f.Ua % 400 - 1)) && r++;
              }
              return g(r, 2);
            }, "%w": (f) => f.Oa, "%W": (f) => g(Math.floor((f.Ta + 7 - (f.Oa + 6) % 7) / 7), 2), "%y": (f) => (f.Ua + 1900).toString().substring(2), "%Y": (f) => f.Ua + 1900, "%z": (f) => {
              f = f.ib;
              var r = 0 <= f;
              f = Math.abs(f) / 60;
              return (r ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);
            }, "%Z": (f) => f.lb, "%%": () => "%" };
            c = c.replace(/%%/g, "\0\0");
            for (v in q)
              c.includes(v) && (c = c.replace(new RegExp(v, "g"), q[v](d)));
            c = c.replace(/\0\0/g, "%");
            v = ub(c);
            if (v.length > b)
              return 0;
            A.set(v, a >>> 0);
            return v.length - 1;
          }
          for (var wb = Array(256), xb = 0; 256 > xb; ++xb)
            wb[xb] = String.fromCharCode(xb);
          Ha = wb;
          P = h.BindingError = class extends Error {
            constructor(a) {
              super(a);
              this.name = "BindingError";
            }
          };
          h.InternalError = class extends Error {
            constructor(a) {
              super(a);
              this.name = "InternalError";
            }
          };
          Object.assign(Na.prototype, { get(a) {
            return this.Sa[a];
          }, has(a) {
            return void 0 !== this.Sa[a];
          }, Za(a) {
            var b = this.bb.pop() || this.Sa.length;
            this.Sa[b] = a;
            return b;
          }, $a(a) {
            this.Sa[a] = void 0;
            this.bb.push(a);
          } });
          R.Sa.push({ value: void 0 }, { value: null }, { value: true }, { value: false });
          R.Va = R.Sa.length;
          h.count_emval_handles = () => {
            for (var a = 0, b = R.Va; b < R.Sa.length; ++b)
              void 0 !== R.Sa[b] && ++a;
            return a;
          };
          var yb = { a: function(a, b, c) {
            a >>>= 0;
            new Ba(a).Za(b >>> 0, c >>> 0);
            Ca = a;
            Da++;
            throw Ca;
          }, v: function() {
            return 0;
          }, ba: function() {
          }, N: function() {
          }, P: function() {
          }, H: function() {
            return 0;
          }, $: function() {
          }, V: function() {
          }, _: function() {
          }, B: function() {
          }, O: function() {
          }, L: function() {
          }, aa: function() {
          }, M: function() {
          }, E: function(a, b, c, d, e) {
            b >>>= 0;
            b = O(b);
            var g = -1 != b.indexOf("u");
            g && (e = (1n << 64n) - 1n);
            Q(a >>> 0, { name: b, fromWireType: (l) => l, toWireType: function(l, k) {
              if ("bigint" != typeof k && "number" != typeof k)
                throw new TypeError(`Cannot convert "${Ga(k)}" to ${this.name}`);
              if (k < d || k > e)
                throw new TypeError(`Passing a number "${Ga(k)}" from JS side to C/C++ side to an argument of type "${b}", which is outside the valid range [${d}, ${e}]!`);
              return k;
            }, argPackAdvance: 8, readValueFromPointer: Ma(b, c >>> 0, !g), Wa: null });
          }, ea: function(a, b, c, d) {
            b = O(b >>> 0);
            Q(a >>> 0, { name: b, fromWireType: function(e) {
              return !!e;
            }, toWireType: function(e, g) {
              return g ? c : d;
            }, argPackAdvance: 8, readValueFromPointer: function(e) {
              return this.fromWireType(B[e >>> 0]);
            }, Wa: null });
          }, da: function(a, b) {
            b = O(b >>> 0);
            Q(a >>> 0, {
              name: b,
              fromWireType: (c) => {
                var d = S(c);
                Oa(c);
                return d;
              },
              toWireType: (c, d) => T(d),
              argPackAdvance: 8,
              readValueFromPointer: Pa,
              Wa: null
            });
          }, D: function(a, b, c) {
            b = O(b >>> 0);
            Q(a >>> 0, { name: b, fromWireType: (d) => d, toWireType: (d, e) => e, argPackAdvance: 8, readValueFromPointer: Qa(b, c >>> 0), Wa: null });
          }, p: function(a, b, c, d, e) {
            a >>>= 0;
            c >>>= 0;
            b = O(b >>> 0);
            -1 === e && (e = 4294967295);
            e = (k) => k;
            if (0 === d) {
              var g = 32 - 8 * c;
              e = (k) => k << g >>> g;
            }
            var l = b.includes("unsigned") ? function(k, n) {
              return n >>> 0;
            } : function(k, n) {
              return n;
            };
            Q(a, {
              name: b,
              fromWireType: e,
              toWireType: l,
              argPackAdvance: 8,
              readValueFromPointer: Ma(b, c, 0 !== d),
              Wa: null
            });
          }, l: function(a, b, c) {
            function d(g) {
              return new e(A.buffer, G[g + 4 >>> 2 >>> 0], G[g >>> 2 >>> 0]);
            }
            var e = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][b];
            c = O(c >>> 0);
            Q(a >>> 0, { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d }, { gb: true });
          }, F: function(a, b) {
            b = O(b >>> 0);
            var c = "std::string" === b;
            Q(a >>> 0, { name: b, fromWireType: function(d) {
              var e = G[d >>> 2 >>> 0], g = d + 4;
              if (c)
                for (var l = g, k = 0; k <= e; ++k) {
                  var n = g + k;
                  if (k == e || 0 == B[n >>> 0]) {
                    l = L(l, n - l);
                    if (void 0 === q)
                      var q = l;
                    else
                      q += String.fromCharCode(0), q += l;
                    l = n + 1;
                  }
                }
              else {
                q = Array(e);
                for (k = 0; k < e; ++k)
                  q[k] = String.fromCharCode(B[g + k >>> 0]);
                q = q.join("");
              }
              U(d);
              return q;
            }, toWireType: function(d, e) {
              e instanceof ArrayBuffer && (e = new Uint8Array(e));
              var g = "string" == typeof e;
              if (!(g || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array))
                throw new P("Cannot pass non-string to std::string");
              var l = c && g ? M(e) : e.length;
              var k = mb(4 + l + 1), n = k + 4;
              G[k >>> 2 >>> 0] = l;
              if (c && g)
                N(e, B, n, l + 1);
              else if (g)
                for (g = 0; g < l; ++g) {
                  var q = e.charCodeAt(g);
                  if (255 < q)
                    throw U(n), new P("String has UTF-16 code units that do not fit in 8 bits");
                  B[n + g >>> 0] = q;
                }
              else
                for (g = 0; g < l; ++g)
                  B[n + g >>> 0] = e[g];
              null !== d && d.push(U, k);
              return k;
            }, argPackAdvance: 8, readValueFromPointer: Ra, Wa(d) {
              U(d);
            } });
          }, x: function(a, b, c) {
            b >>>= 0;
            c >>>= 0;
            c = O(c);
            if (2 === b) {
              var d = Ta;
              var e = Ua;
              var g = Va;
              var l = () => D;
              var k = 1;
            } else
              4 === b && (d = Wa, e = Xa, g = Ya, l = () => G, k = 2);
            Q(a >>> 0, { name: c, fromWireType: (n) => {
              for (var q = G[n >>> 2 >>> 0], v = l(), y, F = n + 4, f = 0; f <= q; ++f) {
                var r = n + 4 + f * b;
                if (f == q || 0 == v[r >>> k])
                  F = d(F, r - F), void 0 === y ? y = F : (y += String.fromCharCode(0), y += F), F = r + b;
              }
              U(n);
              return y;
            }, toWireType: (n, q) => {
              if ("string" != typeof q)
                throw new P(`Cannot pass non-string to C++ string type ${c}`);
              var v = g(q), y = mb(4 + v + b);
              G[y >>> 2] = v >> k;
              e(q, y + 4, v + b);
              null !== n && n.push(U, y);
              return y;
            }, argPackAdvance: 8, readValueFromPointer: Pa, Wa(n) {
              U(n);
            } });
          }, fa: function(a, b) {
            b = O(b >>> 0);
            Q(a >>> 0, { hb: true, name: b, argPackAdvance: 0, fromWireType: () => {
            }, toWireType: () => {
            } });
          }, ca: () => true, o: function(a, b, c) {
            b >>>= 0;
            c >>>= 0;
            a = S(a >>> 0);
            b = V(b, "emval::as");
            var d = [], e = T(d);
            G[c >>> 2 >>> 0] = e;
            return b.toWireType(d, a);
          }, h: function(a, b, c, d, e) {
            c >>>= 0;
            d >>>= 0;
            e >>>= 0;
            a = X[a >>> 0];
            b = S(b >>> 0);
            c = W(c);
            var g = [];
            G[d >>> 2 >>> 0] = T(g);
            return a(b, c, g, e);
          }, r: function(a, b, c, d) {
            c >>>= 0;
            d >>>= 0;
            a = X[a >>> 0];
            b = S(b >>> 0);
            c = W(c);
            a(b, c, null, d);
          }, b: Oa, y: function(a, b) {
            b >>>= 0;
            a = S(a >>> 0);
            b = S(b);
            return a == b;
          }, u: function(a) {
            a >>>= 0;
            if (0 === a)
              return T(bb());
            a = W(a);
            return T(bb()[a]);
          }, g: function(a, b) {
            var c = db(a, b >>> 0), d = c[0];
            b = d.name + "_$" + c.slice(1).map(function(v) {
              return v.name;
            }).join("_") + "$";
            var e = fb[b];
            if (void 0 !== e)
              return e;
            e = ["retType"];
            for (var g = [d], l = "", k = 0; k < a - 1; ++k)
              l += (0 !== k ? ", " : "") + "arg" + k, e.push("argType" + k), g.push(c[1 + k]);
            var n = "return function " + eb("methodCaller_" + b) + "(handle, name, destructors, args) {\n", q = 0;
            for (k = 0; k < a - 1; ++k)
              n += "    var arg" + k + " = argType" + k + ".readValueFromPointer(args" + (q ? "+" + q : "") + ");\n", q += c[k + 1].argPackAdvance;
            n += "    var rv = handle[name](" + l + ");\n";
            for (k = 0; k < a - 1; ++k)
              c[k + 1].deleteObject && (n += "    argType" + k + ".deleteObject(arg" + k + ");\n");
            d.hb || (n += "    return retType.toWireType(destructors, rv);\n");
            e.push(n + "};\n");
            a = hb(e).apply(null, g);
            e = cb(a);
            return fb[b] = e;
          }, q: function(a, b) {
            b >>>= 0;
            a = S(a >>> 0);
            b = S(b);
            return T(a[b]);
          }, c: function(a) {
            a >>>= 0;
            4 < a && (R.get(a).cb += 1);
          }, G: function(a, b, c, d) {
            c >>>= 0;
            d >>>= 0;
            a = S(a >>> 0);
            var e = jb[b];
            e || (e = ib(b), jb[b] = e);
            return e(a, c, d);
          }, s: function() {
            return T([]);
          }, k: function(a) {
            a = S(a >>> 0);
            for (var b = Array(a.length), c = 0; c < a.length; c++)
              b[c] = a[c];
            return T(b);
          }, d: function(a) {
            return T(W(a >>> 0));
          }, j: function() {
            return T({});
          }, e: function(a) {
            a >>>= 0;
            for (var b = S(a); b.length; ) {
              var c = b.pop();
              b.pop()(c);
            }
            Oa(a);
          }, i: function(a, b, c) {
            b >>>= 0;
            c >>>= 0;
            a = S(a >>> 0);
            b = S(b);
            c = S(c);
            a[b] = c;
          }, f: function(a, b) {
            b >>>= 0;
            a = V(a >>> 0, "_emval_take_value");
            a = a.readValueFromPointer(b);
            return T(a);
          }, S: function(a, b) {
            a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
            b >>>= 0;
            a = new Date(1e3 * a);
            E[b >>> 2 >>> 0] = a.getUTCSeconds();
            E[b + 4 >>> 2 >>> 0] = a.getUTCMinutes();
            E[b + 8 >>> 2 >>> 0] = a.getUTCHours();
            E[b + 12 >>> 2 >>> 0] = a.getUTCDate();
            E[b + 16 >>> 2 >>> 0] = a.getUTCMonth();
            E[b + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;
            E[b + 24 >>> 2 >>> 0] = a.getUTCDay();
            E[b + 28 >>> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
          }, T: function(a, b) {
            a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
            b >>>= 0;
            a = new Date(1e3 * a);
            E[b >>> 2 >>> 0] = a.getSeconds();
            E[b + 4 >>> 2 >>> 0] = a.getMinutes();
            E[b + 8 >>> 2 >>> 0] = a.getHours();
            E[b + 12 >>> 2 >>> 0] = a.getDate();
            E[b + 16 >>> 2 >>> 0] = a.getMonth();
            E[b + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;
            E[b + 24 >>> 2 >>> 0] = a.getDay();
            E[b + 28 >>> 2 >>> 0] = (Y(a.getFullYear()) ? kb : lb)[a.getMonth()] + a.getDate() - 1 | 0;
            E[b + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());
            var c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset(), d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
            E[b + 32 >>> 2 >>> 0] = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;
          }, U: function(a) {
            a >>>= 0;
            var b = new Date(E[a + 20 >>> 2 >>> 0] + 1900, E[a + 16 >>> 2 >>> 0], E[a + 12 >>> 2 >>> 0], E[a + 8 >>> 2 >>> 0], E[a + 4 >>> 2 >>> 0], E[a >>> 2 >>> 0], 0), c = E[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), e = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), g = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), l = Math.min(
              g,
              e
            );
            0 > c ? E[a + 32 >>> 2 >>> 0] = Number(e != g && l == d) : 0 < c != (l == d) && (e = Math.max(g, e), b.setTime(b.getTime() + 6e4 * ((0 < c ? l : e) - d)));
            E[a + 24 >>> 2 >>> 0] = b.getDay();
            E[a + 28 >>> 2 >>> 0] = (Y(b.getFullYear()) ? kb : lb)[b.getMonth()] + b.getDate() - 1 | 0;
            E[a >>> 2 >>> 0] = b.getSeconds();
            E[a + 4 >>> 2 >>> 0] = b.getMinutes();
            E[a + 8 >>> 2 >>> 0] = b.getHours();
            E[a + 12 >>> 2 >>> 0] = b.getDate();
            E[a + 16 >>> 2 >>> 0] = b.getMonth();
            E[a + 20 >>> 2 >>> 0] = b.getYear();
            return BigInt(b.getTime() / 1e3);
          }, Q: function() {
            return -52;
          }, R: function() {
          }, J: function(a, b, c) {
            function d(n) {
              return (n = n.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? n[1] : "GMT";
            }
            c >>>= 0;
            var e = (/* @__PURE__ */ new Date()).getFullYear(), g = new Date(e, 0, 1), l = new Date(e, 6, 1);
            e = g.getTimezoneOffset();
            var k = l.getTimezoneOffset();
            G[a >>> 0 >>> 2 >>> 0] = 60 * Math.max(e, k);
            E[b >>> 0 >>> 2 >>> 0] = Number(e != k);
            a = d(g);
            b = d(l);
            a = nb(a);
            b = nb(b);
            k < e ? (G[c >>> 2 >>> 0] = a, G[c + 4 >>> 2 >>> 0] = b) : (G[c >>> 2 >>> 0] = b, G[c + 4 >>> 2 >>> 0] = a);
          }, t: () => {
            ka("");
          }, C: () => Date.now(), K: function() {
            return 4294901760;
          }, n: () => performance.now(), Z: function(a, b, c) {
            b >>>= 0;
            return B.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);
          }, I: function(a) {
            a >>>= 0;
            var b = B.length;
            if (4294901760 < a)
              return false;
            for (var c = 1; 4 >= c; c *= 2) {
              var d = b * (1 + 0.2 / c);
              d = Math.min(d, a + 100663296);
              var e = Math;
              d = Math.max(a, d);
              a: {
                e = (e.min.call(e, 4294901760, d + (65536 - d % 65536) % 65536) - z.buffer.byteLength + 65535) / 65536;
                try {
                  z.grow(e);
                  qa();
                  var g = 1;
                  break a;
                } catch (l) {
                }
                g = void 0;
              }
              if (g)
                return true;
            }
            return false;
          }, X: function(a, b) {
            a >>>= 0;
            b >>>= 0;
            var c = 0;
            qb().forEach((d, e) => {
              var g = b + c;
              e = G[a + 4 * e >>> 2 >>> 0] = g;
              for (g = 0; g < d.length; ++g)
                A[e++ >>> 0 >>> 0] = d.charCodeAt(g);
              A[e >>> 0 >>> 0] = 0;
              c += d.length + 1;
            });
            return 0;
          }, Y: function(a, b) {
            a >>>= 0;
            b >>>= 0;
            var c = qb();
            G[a >>> 2 >>> 0] = c.length;
            var d = 0;
            c.forEach((e) => d += e.length + 1);
            G[b >>> 2 >>> 0] = d;
            return 0;
          }, w: () => 52, A: function() {
            return 52;
          }, W: function() {
            return 70;
          }, z: function(a, b, c, d) {
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            for (var e = 0, g = 0; g < c; g++) {
              var l = G[b >>> 2 >>> 0], k = G[b + 4 >>> 2 >>> 0];
              b += 8;
              for (var n = 0; n < k; n++) {
                var q = B[l + n >>> 0], v = rb[a];
                0 === q || 10 === q ? ((1 === a ? ja : x)(Fa(v, 0)), v.length = 0) : v.push(q);
              }
              e += k;
            }
            G[d >>> 2 >>> 0] = e;
            return 0;
          }, ga: vb, m: function(a, b, c, d) {
            return vb(a >>> 0, b >>> 0, c >>> 0, d >>> 0);
          } }, Z = function() {
            var a = { a: yb };
            I++;
            Aa(a, function(b) {
              Z = b.instance.exports;
              Z = zb();
              z = Z.ha;
              qa();
              sa.unshift(Z.ia);
              I--;
              0 == I && (null !== ua && (clearInterval(ua), ua = null), J && (b = J, J = null, b()));
            }).catch(ba);
            return {};
          }();
          h._OrtInit = (a, b) => (h._OrtInit = Z.ja)(a, b);
          h._OrtGetLastError = (a, b) => (h._OrtGetLastError = Z.ka)(a, b);
          h._OrtCreateSessionOptions = (a, b, c, d, e, g, l, k, n, q) => (h._OrtCreateSessionOptions = Z.la)(a, b, c, d, e, g, l, k, n, q);
          h._OrtAppendExecutionProvider = (a, b) => (h._OrtAppendExecutionProvider = Z.ma)(a, b);
          h._OrtAddFreeDimensionOverride = (a, b, c) => (h._OrtAddFreeDimensionOverride = Z.na)(a, b, c);
          h._OrtAddSessionConfigEntry = (a, b, c) => (h._OrtAddSessionConfigEntry = Z.oa)(a, b, c);
          h._OrtReleaseSessionOptions = (a) => (h._OrtReleaseSessionOptions = Z.pa)(a);
          h._OrtCreateSession = (a, b, c) => (h._OrtCreateSession = Z.qa)(a, b, c);
          h._OrtReleaseSession = (a) => (h._OrtReleaseSession = Z.ra)(a);
          h._OrtGetInputOutputCount = (a, b, c) => (h._OrtGetInputOutputCount = Z.sa)(a, b, c);
          h._OrtGetInputName = (a, b) => (h._OrtGetInputName = Z.ta)(a, b);
          h._OrtGetOutputName = (a, b) => (h._OrtGetOutputName = Z.ua)(a, b);
          h._OrtFree = (a) => (h._OrtFree = Z.va)(a);
          h._OrtCreateTensor = (a, b, c, d, e, g) => (h._OrtCreateTensor = Z.wa)(a, b, c, d, e, g);
          h._OrtGetTensorData = (a, b, c, d, e) => (h._OrtGetTensorData = Z.xa)(a, b, c, d, e);
          h._OrtReleaseTensor = (a) => (h._OrtReleaseTensor = Z.ya)(a);
          h._OrtCreateRunOptions = (a, b, c, d) => (h._OrtCreateRunOptions = Z.za)(a, b, c, d);
          h._OrtAddRunConfigEntry = (a, b, c) => (h._OrtAddRunConfigEntry = Z.Aa)(a, b, c);
          h._OrtReleaseRunOptions = (a) => (h._OrtReleaseRunOptions = Z.Ba)(a);
          h._OrtCreateBinding = (a) => (h._OrtCreateBinding = Z.Ca)(a);
          h._OrtBindInput = (a, b, c) => (h._OrtBindInput = Z.Da)(a, b, c);
          h._OrtBindOutput = (a, b, c, d) => (h._OrtBindOutput = Z.Ea)(a, b, c, d);
          h._OrtClearBoundOutputs = (a) => (h._OrtClearBoundOutputs = Z.Fa)(a);
          h._OrtReleaseBinding = (a) => (h._OrtReleaseBinding = Z.Ga)(a);
          h._OrtRunWithBinding = (a, b, c, d, e) => (h._OrtRunWithBinding = Z.Ha)(a, b, c, d, e);
          h._OrtRun = (a, b, c, d, e, g, l, k) => (h._OrtRun = Z.Ia)(a, b, c, d, e, g, l, k);
          h._OrtEndProfiling = (a) => (h._OrtEndProfiling = Z.Ja)(a);
          var mb = h._malloc = (a) => (mb = h._malloc = Z.Ka)(a), U = h._free = (a) => (U = h._free = Z.La)(a), Za = (a) => (Za = Z.Ma)(a);
          h.__embind_initialize_bindings = () => (h.__embind_initialize_bindings = Z.Na)();
          var Ab = () => (Ab = Z.Pa)(), Bb = (a) => (Bb = Z.Qa)(a), Cb = (a) => (Cb = Z.Ra)(a);
          function zb() {
            var a = Z;
            a = Object.assign({}, a);
            var b = (d) => () => d() >>> 0, c = (d) => (e) => d(e) >>> 0;
            a.__errno_location = b(a.__errno_location);
            a.Ka = c(a.Ka);
            a.Ma = c(a.Ma);
            a.Pa = b(a.Pa);
            a.Ra = c(a.Ra);
            return a;
          }
          h.stackAlloc = Cb;
          h.stackSave = Ab;
          h.stackRestore = Bb;
          h.UTF8ToString = L;
          h.stringToUTF8 = (a, b, c) => N(a, B, b, c);
          h.lengthBytesUTF8 = M;
          var Db;
          J = function Eb() {
            Db || Fb();
            Db || (J = Eb);
          };
          function Fb() {
            if (!(0 < I)) {
              for (; 0 < ra.length; )
                ra.shift()(h);
              if (!(0 < I || Db || (Db = true, h.calledRun = true, la))) {
                for (; 0 < sa.length; )
                  sa.shift()(h);
                for (aa(h); 0 < ta.length; )
                  ta.shift()(h);
              }
            }
          }
          Fb();
          return moduleArg.ready;
        };
      })();
      if (typeof exports === "object" && typeof module === "object")
        module.exports = ortWasm;
      else if (typeof define === "function" && define["amd"])
        define([], () => ortWasm);
    }
  });

  // nodejs-ignore:worker_threads
  var require_worker_threads = __commonJS({
    "nodejs-ignore:worker_threads"() {
    }
  });

  // nodejs-ignore:perf_hooks
  var require_perf_hooks = __commonJS({
    "nodejs-ignore:perf_hooks"() {
    }
  });

  // nodejs-ignore:os
  var os_exports = {};
  __export(os_exports, {
    cpus: () => cpus2
  });
  var cpus2;
  var init_os = __esm({
    "nodejs-ignore:os"() {
      cpus2 = void 0;
    }
  });

  // web/lib/wasm/binding/ort-wasm-threaded.js
  var require_ort_wasm_threaded = __commonJS({
    "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {
      "use strict";
      var ortWasmThreaded = (() => {
        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
        if (typeof __filename !== "undefined")
          _scriptDir = _scriptDir || __filename;
        return function(moduleArg = {}) {
          function h() {
            m.buffer != n.buffer && p();
            return n;
          }
          function t() {
            m.buffer != n.buffer && p();
            return aa;
          }
          function v() {
            m.buffer != n.buffer && p();
            return ba;
          }
          function ca() {
            m.buffer != n.buffer && p();
            return da;
          }
          function w() {
            m.buffer != n.buffer && p();
            return ea;
          }
          function z() {
            m.buffer != n.buffer && p();
            return fa;
          }
          function ha() {
            m.buffer != n.buffer && p();
            return ia;
          }
          var A = moduleArg, ja, ka;
          A.ready = new Promise((a, b) => {
            ja = a;
            ka = b;
          });
          var la = Object.assign({}, A), ma = "./this.program", na = (a, b) => {
            throw b;
          }, oa = "object" == typeof window, B = "function" == typeof importScripts, D = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, E = A.ENVIRONMENT_IS_PTHREAD || false, F = "";
          function pa(a) {
            return A.locateFile ? A.locateFile(a, F) : F + a;
          }
          var qa, ra, sa;
          if (D) {
            var fs = (init_fs(), __toCommonJS(fs_exports)), ta = (init_path(), __toCommonJS(path_exports));
            F = B ? ta.dirname(F) + "/" : __dirname + "/";
            qa = (b, c) => {
              b = b.startsWith("file://") ? new URL(b) : ta.normalize(b);
              return fs.readFileSync(b, c ? void 0 : "utf8");
            };
            sa = (b) => {
              b = qa(b, true);
              b.buffer || (b = new Uint8Array(b));
              return b;
            };
            ra = (b, c, d, e = true) => {
              b = b.startsWith("file://") ? new URL(b) : ta.normalize(b);
              fs.readFile(b, e ? void 0 : "utf8", (f, k) => {
                f ? d(f) : c(e ? k.buffer : k);
              });
            };
            !A.thisProgram && 1 < process.argv.length && (ma = process.argv[1].replace(/\\/g, "/"));
            process.argv.slice(2);
            na = (b, c) => {
              process.exitCode = b;
              throw c;
            };
            A.inspect = () => "[Emscripten Module object]";
            let a;
            try {
              a = require_worker_threads();
            } catch (b) {
              throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), b;
            }
            global.Worker = a.Worker;
          } else if (oa || B)
            B ? F = self.location.href : "undefined" != typeof document && document.currentScript && (F = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (F = _scriptDir), 0 !== F.indexOf("blob:") ? F = F.substr(0, F.replace(/[?#].*/, "").lastIndexOf("/") + 1) : F = "", D || (qa = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.send(null);
              return b.responseText;
            }, B && (sa = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.responseType = "arraybuffer";
              b.send(null);
              return new Uint8Array(b.response);
            }), ra = (a, b, c) => {
              var d = new XMLHttpRequest();
              d.open("GET", a, true);
              d.responseType = "arraybuffer";
              d.onload = () => {
                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
              };
              d.onerror = c;
              d.send(null);
            });
          D && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);
          var ua = console.log.bind(console), va = console.error.bind(console);
          D && (ua = (...a) => fs.writeSync(1, a.join(" ") + "\n"), va = (...a) => fs.writeSync(2, a.join(" ") + "\n"));
          var wa = ua, G = va;
          Object.assign(A, la);
          la = null;
          var noExitRuntime = true;
          "object" != typeof WebAssembly && H("no native wasm support detected");
          var m, xa, ya = false, I, n, aa, ba, da, ea, fa, za, J, Aa, ia;
          function p() {
            var a = m.buffer;
            A.HEAP8 = n = new Int8Array(a);
            A.HEAP16 = ba = new Int16Array(a);
            A.HEAPU8 = aa = new Uint8Array(a);
            A.HEAPU16 = da = new Uint16Array(a);
            A.HEAP32 = ea = new Int32Array(a);
            A.HEAPU32 = fa = new Uint32Array(a);
            A.HEAPF32 = za = new Float32Array(a);
            A.HEAPF64 = ia = new Float64Array(a);
            A.HEAP64 = J = new BigInt64Array(a);
            A.HEAPU64 = Aa = new BigUint64Array(a);
          }
          var Ba = 16777216;
          5242880 <= Ba || H("INITIAL_MEMORY should be larger than STACK_SIZE, was " + Ba + "! (STACK_SIZE=5242880)");
          if (E)
            m = A.wasmMemory;
          else if (m = new WebAssembly.Memory({ initial: Ba / 65536, maximum: 65536, shared: true }), !(m.buffer instanceof SharedArrayBuffer))
            throw G("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), D && G("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");
          p();
          Ba = m.buffer.byteLength;
          var Ca = [], Da = [], Ea = [], Fa = 0;
          function Ga() {
            return noExitRuntime || 0 < Fa;
          }
          var K = 0, Ha = null, L = null;
          function Ia() {
            K--;
            if (0 == K && (null !== Ha && (clearInterval(Ha), Ha = null), L)) {
              var a = L;
              L = null;
              a();
            }
          }
          function H(a) {
            a = "Aborted(" + a + ")";
            G(a);
            ya = true;
            I = 1;
            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
            ka(a);
            throw a;
          }
          function Ja(a) {
            return a.startsWith("data:application/octet-stream;base64,");
          }
          var M;
          M = "ort-wasm-threaded.wasm";
          Ja(M) || (M = pa(M));
          function Ka(a) {
            if (sa)
              return sa(a);
            throw "both async and sync fetching of the wasm failed";
          }
          function La(a) {
            if (oa || B) {
              if ("function" == typeof fetch && !a.startsWith("file://"))
                return fetch(a, { credentials: "same-origin" }).then((b) => {
                  if (!b.ok)
                    throw "failed to load wasm binary file at '" + a + "'";
                  return b.arrayBuffer();
                }).catch(() => Ka(a));
              if (ra)
                return new Promise((b, c) => {
                  ra(a, (d) => b(new Uint8Array(d)), c);
                });
            }
            return Promise.resolve().then(() => Ka(a));
          }
          function Ma(a, b, c) {
            return La(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {
              G(`failed to asynchronously prepare wasm: ${d}`);
              H(d);
            });
          }
          function Na(a, b) {
            var c = M;
            return "function" != typeof WebAssembly.instantiateStreaming || Ja(c) || c.startsWith("file://") || D || "function" != typeof fetch ? Ma(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(e) {
              G(`wasm streaming compile failed: ${e}`);
              G("falling back to ArrayBuffer instantiation");
              return Ma(c, a, b);
            }));
          }
          function Oa(a) {
            this.name = "ExitStatus";
            this.message = `Program terminated with exit(${a})`;
            this.status = a;
          }
          var Pa = (a) => {
            a.terminate();
            a.onmessage = () => {
            };
          }, Ra = (a) => {
            0 == O.nb.length && (Qa(), O.Ab(O.nb[0]));
            var b = O.nb.pop();
            if (!b)
              return 6;
            O.ob.push(b);
            O.jb[a.mb] = b;
            b.mb = a.mb;
            var c = { cmd: "run", start_routine: a.Mb, arg: a.Gb, pthread_ptr: a.mb };
            D && b.unref();
            b.postMessage(c, a.Sb);
            return 0;
          }, Sa = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Ta = (a, b, c) => {
            b >>>= 0;
            var d = b + c;
            for (c = b; a[c] && !(c >= d); )
              ++c;
            if (16 < c - b && a.buffer && Sa)
              return Sa.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));
            for (d = ""; b < c; ) {
              var e = a[b++];
              if (e & 128) {
                var f = a[b++] & 63;
                if (192 == (e & 224))
                  d += String.fromCharCode((e & 31) << 6 | f);
                else {
                  var k = a[b++] & 63;
                  e = 224 == (e & 240) ? (e & 15) << 12 | f << 6 | k : (e & 7) << 18 | f << 12 | k << 6 | a[b++] & 63;
                  65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));
                }
              } else
                d += String.fromCharCode(e);
            }
            return d;
          }, Ua = (a, b) => (a >>>= 0) ? Ta(t(), a, b) : "";
          function Va(a) {
            if (E)
              return P(0, 1, a);
            I = a;
            Ga() || (O.Nb(), ya = true);
            na(a, new Oa(a));
          }
          var Xa = (a) => {
            I = a;
            if (E)
              throw Wa(a), "unwind";
            Va(a);
          };
          function Ya() {
            for (var a = A.numThreads; a--; )
              Qa();
            Ca.unshift(() => {
              K++;
              Za(() => Ia());
            });
          }
          function Qa() {
            var a = pa("ort-wasm-threaded.worker.js");
            a = new Worker(a);
            O.nb.push(a);
          }
          function Za(a) {
            E ? a() : Promise.all(O.nb.map(O.Ab)).then(a);
          }
          var O = { nb: [], ob: [], Fb: [], jb: {}, vb() {
            E ? (O.receiveObjectTransfer = O.Lb, O.threadInitTLS = O.Eb, O.setExitStatus = O.Db, noExitRuntime = false) : Ya();
          }, Db: (a) => {
            I = a;
          }, Vb: ["$terminateWorker"], Nb: () => {
            for (var a of O.ob)
              Pa(a);
            for (a of O.nb)
              Pa(a);
            O.nb = [];
            O.ob = [];
            O.jb = [];
          }, Cb: (a) => {
            var b = a.mb;
            delete O.jb[b];
            O.nb.push(a);
            O.ob.splice(O.ob.indexOf(a), 1);
            a.mb = 0;
            $a(b);
          }, Lb() {
          }, Eb() {
            O.Fb.forEach((a) => a());
          }, Ab: (a) => new Promise((b) => {
            a.onmessage = (f) => {
              f = f.data;
              var k = f.cmd;
              if (f.targetThread && f.targetThread != ab()) {
                var l = O.jb[f.targetThread];
                l ? l.postMessage(f, f.transferList) : G(`Internal error! Worker sent a message "${k}" to target pthread ${f.targetThread}, but that thread no longer exists!`);
              } else if ("checkMailbox" === k)
                bb();
              else if ("spawnThread" === k)
                Ra(f);
              else if ("cleanupThread" === k)
                (f = O.jb[f.thread]) || H(), O.Cb(f);
              else if ("killThread" === k)
                f = f.thread, k = O.jb[f], delete O.jb[f], Pa(k), $a(f), O.ob.splice(O.ob.indexOf(k), 1), k.mb = 0;
              else if ("cancelThread" === k)
                O.jb[f.thread].postMessage({ cmd: "cancel" });
              else if ("loaded" === k)
                a.loaded = true, D && !a.mb && a.unref(), b(a);
              else if ("alert" === k)
                alert(`Thread ${f.threadId}: ${f.text}`);
              else if ("setimmediate" === f.target)
                a.postMessage(f);
              else if ("callHandler" === k)
                A[f.handler](...f.args);
              else
                k && G(`worker sent an unknown command ${k}`);
            };
            a.onerror = (f) => {
              G(`${"worker sent an error!"} ${f.filename}:${f.lineno}: ${f.message}`);
              throw f;
            };
            D && (a.on("message", (f) => a.onmessage({ data: f })), a.on("error", (f) => a.onerror(f)));
            var c = [], d = [], e;
            for (e of d)
              A.hasOwnProperty(e) && c.push(e);
            a.postMessage({ cmd: "load", handlers: c, urlOrBlob: A.mainScriptUrlOrBlob || _scriptDir, wasmMemory: m, wasmModule: xa });
          }) };
          A.PThread = O;
          var cb = (a) => {
            for (; 0 < a.length; )
              a.shift()(A);
          };
          A.establishStackSpace = () => {
            var a = ab(), b = z()[a + 52 >>> 2 >>> 0];
            a = z()[a + 56 >>> 2 >>> 0];
            db(b, b - a);
            eb(b);
          };
          function Wa(a) {
            if (E)
              return P(1, 0, a);
            Xa(a);
          }
          var fb = [], gb;
          A.invokeEntryPoint = (a, b) => {
            var c = fb[a];
            c || (a >= fb.length && (fb.length = a + 1), fb[a] = c = gb.get(a));
            a = c(b);
            Ga() ? O.Db(a) : hb(a);
          };
          function ib(a) {
            this.sb = a - 24;
            this.Kb = function(b) {
              z()[this.sb + 4 >>> 2 >>> 0] = b;
            };
            this.xb = function(b) {
              z()[this.sb + 8 >>> 2 >>> 0] = b;
            };
            this.vb = function(b, c) {
              this.wb();
              this.Kb(b);
              this.xb(c);
            };
            this.wb = function() {
              z()[this.sb + 16 >>> 2 >>> 0] = 0;
            };
          }
          var jb = 0, kb = 0;
          function lb(a, b, c, d) {
            return E ? P(2, 1, a, b, c, d) : mb(a, b, c, d);
          }
          function mb(a, b, c, d) {
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            if ("undefined" == typeof SharedArrayBuffer)
              return G("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
            var e = [];
            if (E && 0 === e.length)
              return lb(a, b, c, d);
            a = { Mb: c, mb: a, Gb: d, Sb: e };
            return E ? (a.Ub = "spawnThread", postMessage(a, e), 0) : Ra(a);
          }
          function nb(a, b, c) {
            return E ? P(3, 1, a, b, c) : 0;
          }
          function ob(a, b) {
            if (E)
              return P(4, 1, a, b);
          }
          var pb = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
            }
            return b;
          }, qb = (a, b, c, d) => {
            c >>>= 0;
            if (!(0 < d))
              return 0;
            var e = c;
            d = c + d - 1;
            for (var f = 0; f < a.length; ++f) {
              var k = a.charCodeAt(f);
              if (55296 <= k && 57343 >= k) {
                var l = a.charCodeAt(++f);
                k = 65536 + ((k & 1023) << 10) | l & 1023;
              }
              if (127 >= k) {
                if (c >= d)
                  break;
                b[c++ >>> 0] = k;
              } else {
                if (2047 >= k) {
                  if (c + 1 >= d)
                    break;
                  b[c++ >>> 0] = 192 | k >> 6;
                } else {
                  if (65535 >= k) {
                    if (c + 2 >= d)
                      break;
                    b[c++ >>> 0] = 224 | k >> 12;
                  } else {
                    if (c + 3 >= d)
                      break;
                    b[c++ >>> 0] = 240 | k >> 18;
                    b[c++ >>> 0] = 128 | k >> 12 & 63;
                  }
                  b[c++ >>> 0] = 128 | k >> 6 & 63;
                }
                b[c++ >>> 0] = 128 | k & 63;
              }
            }
            b[c >>> 0] = 0;
            return c - e;
          }, rb = (a, b, c) => qb(a, t(), b, c);
          function sb(a, b) {
            if (E)
              return P(5, 1, a, b);
          }
          function tb(a, b, c) {
            if (E)
              return P(6, 1, a, b, c);
          }
          function ub(a, b, c) {
            return E ? P(7, 1, a, b, c) : 0;
          }
          function vb(a, b) {
            if (E)
              return P(8, 1, a, b);
          }
          function wb(a, b, c) {
            if (E)
              return P(9, 1, a, b, c);
          }
          function xb(a, b, c, d) {
            if (E)
              return P(10, 1, a, b, c, d);
          }
          function yb(a, b, c, d) {
            if (E)
              return P(11, 1, a, b, c, d);
          }
          function zb(a, b, c, d) {
            if (E)
              return P(12, 1, a, b, c, d);
          }
          function Ab(a) {
            if (E)
              return P(13, 1, a);
          }
          function Bb(a, b) {
            if (E)
              return P(14, 1, a, b);
          }
          function Cb(a, b, c) {
            if (E)
              return P(15, 1, a, b, c);
          }
          var Db = (a) => {
            if (null === a)
              return "null";
            var b = typeof a;
            return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;
          }, Eb, R = (a) => {
            for (var b = ""; t()[a >>> 0]; )
              b += Eb[t()[a++ >>> 0]];
            return b;
          }, Fb = {}, Gb = {}, Hb = {}, S;
          function Ib(a, b, c = {}) {
            var d = b.name;
            if (!a)
              throw new S(`type "${d}" must have a positive integer typeid pointer`);
            if (Gb.hasOwnProperty(a)) {
              if (c.Ib)
                return;
              throw new S(`Cannot register type '${d}' twice`);
            }
            Gb[a] = b;
            delete Hb[a];
            Fb.hasOwnProperty(a) && (b = Fb[a], delete Fb[a], b.forEach((e) => e()));
          }
          function T(a, b, c = {}) {
            if (!("argPackAdvance" in b))
              throw new TypeError("registerType registeredInstance requires argPackAdvance");
            Ib(a, b, c);
          }
          var Jb = (a, b, c) => {
            switch (b) {
              case 1:
                return c ? (d) => h()[d >>> 0 >>> 0] : (d) => t()[d >>> 0 >>> 0];
              case 2:
                return c ? (d) => v()[d >>> 1 >>> 0] : (d) => ca()[d >>> 1 >>> 0];
              case 4:
                return c ? (d) => w()[d >>> 2 >>> 0] : (d) => z()[d >>> 2 >>> 0];
              case 8:
                return c ? (d) => J[d >>> 3] : (d) => Aa[d >>> 3];
              default:
                throw new TypeError(`invalid integer width (${b}): ${a}`);
            }
          };
          function Kb() {
            this.lb = [void 0];
            this.zb = [];
          }
          var U = new Kb();
          function Lb(a) {
            a >>>= 0;
            a >= U.sb && 0 === --U.get(a).Bb && U.xb(a);
          }
          var V = (a) => {
            if (!a)
              throw new S("Cannot use deleted val. handle = " + a);
            return U.get(a).value;
          }, W = (a) => {
            switch (a) {
              case void 0:
                return 1;
              case null:
                return 2;
              case true:
                return 3;
              case false:
                return 4;
              default:
                return U.wb({ Bb: 1, value: a });
            }
          };
          function Mb(a) {
            return this.fromWireType(w()[a >>> 2 >>> 0]);
          }
          var Nb = (a, b) => {
            switch (b) {
              case 4:
                return function(c) {
                  var d = this.fromWireType;
                  m.buffer != n.buffer && p();
                  return d.call(this, za[c >>> 2 >>> 0]);
                };
              case 8:
                return function(c) {
                  return this.fromWireType(ha()[c >>> 3 >>> 0]);
                };
              default:
                throw new TypeError(`invalid float width (${b}): ${a}`);
            }
          };
          function Ob(a) {
            return this.fromWireType(z()[a >>> 2 >>> 0]);
          }
          var Pb = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, Qb = (a, b) => {
            var c = a >> 1;
            for (var d = c + b / 2; !(c >= d) && ca()[c >>> 0]; )
              ++c;
            c <<= 1;
            if (32 < c - a && Pb)
              return Pb.decode(t().slice(a, c));
            c = "";
            for (d = 0; !(d >= b / 2); ++d) {
              var e = v()[a + 2 * d >>> 1 >>> 0];
              if (0 == e)
                break;
              c += String.fromCharCode(e);
            }
            return c;
          }, Rb = (a, b, c) => {
            void 0 === c && (c = 2147483647);
            if (2 > c)
              return 0;
            c -= 2;
            var d = b;
            c = c < 2 * a.length ? c / 2 : a.length;
            for (var e = 0; e < c; ++e) {
              var f = a.charCodeAt(e);
              v()[b >>> 1 >>> 0] = f;
              b += 2;
            }
            v()[b >>> 1 >>> 0] = 0;
            return b - d;
          }, Sb = (a) => 2 * a.length, Tb = (a, b) => {
            for (var c = 0, d = ""; !(c >= b / 4); ) {
              var e = w()[a + 4 * c >>> 2 >>> 0];
              if (0 == e)
                break;
              ++c;
              65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e);
            }
            return d;
          }, Ub = (a, b, c) => {
            b >>>= 0;
            void 0 === c && (c = 2147483647);
            if (4 > c)
              return 0;
            var d = b;
            c = d + c - 4;
            for (var e = 0; e < a.length; ++e) {
              var f = a.charCodeAt(e);
              if (55296 <= f && 57343 >= f) {
                var k = a.charCodeAt(++e);
                f = 65536 + ((f & 1023) << 10) | k & 1023;
              }
              w()[b >>> 2 >>> 0] = f;
              b += 4;
              if (b + 4 > c)
                break;
            }
            w()[b >>> 2 >>> 0] = 0;
            return b - d;
          }, Vb = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              55296 <= d && 57343 >= d && ++c;
              b += 4;
            }
            return b;
          }, Wb = (a) => {
            if (!ya)
              try {
                if (a(), !Ga())
                  try {
                    E ? hb(I) : Xa(I);
                  } catch (b) {
                    b instanceof Oa || "unwind" == b || na(1, b);
                  }
              } catch (b) {
                b instanceof Oa || "unwind" == b || na(1, b);
              }
          };
          function Xb(a) {
            a >>>= 0;
            "function" === typeof Atomics.Tb && (Atomics.Tb(w(), a >>> 2, a).value.then(bb), a += 128, Atomics.store(w(), a >>> 2, 1));
          }
          A.__emscripten_thread_mailbox_await = Xb;
          var bb = () => {
            var a = ab();
            a && (Xb(a), Wb(() => Yb()));
          };
          A.checkMailbox = bb;
          var $b = (a) => {
            var b = Zb();
            a = a();
            eb(b);
            return a;
          };
          function P(a, b) {
            var c = arguments.length - 2, d = arguments;
            return $b(() => {
              for (var e = 2 * c, f = ac(8 * e), k = f >>> 3, l = 0; l < c; l++) {
                var q = d[2 + l];
                "bigint" == typeof q ? (J[k + 2 * l] = 1n, J[k + 2 * l + 1] = q) : (J[k + 2 * l] = 0n, ha()[k + 2 * l + 1 >>> 0] = q);
              }
              return bc(a, e, f, b);
            });
          }
          var cc = [], ec = (a, b) => {
            var c = Gb[a];
            if (void 0 === c)
              throw a = dc(a), c = R(a), X(a), new S(b + " has unknown type " + c);
            return c;
          }, fc = {}, gc = (a) => {
            var b = fc[a];
            return void 0 === b ? R(a) : b;
          }, hc = [], ic = () => "object" == typeof globalThis ? globalThis : Function("return this")(), jc = (a) => {
            var b = hc.length;
            hc.push(a);
            return b;
          }, kc = (a, b) => {
            for (var c = Array(a), d = 0; d < a; ++d)
              c[d] = ec(z()[b + 4 * d >>> 2 >>> 0], "parameter " + d);
            return c;
          }, mc = (a) => {
            if (void 0 === a)
              return "_unknown";
            a = a.replace(/[^a-zA-Z0-9_]/g, "$");
            var b = a.charCodeAt(0);
            return 48 <= b && 57 >= b ? `_${a}` : a;
          }, nc = {};
          function oc(a, b) {
            a = mc(a);
            return { [a]: function() {
              return b.apply(this, arguments);
            } }[a];
          }
          function pc(a) {
            var b = Function;
            if (!(b instanceof Function))
              throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);
            var c = oc(b.name || "unknownFunctionName", function() {
            });
            c.prototype = b.prototype;
            c = new c();
            a = b.apply(c, a);
            return a instanceof Object ? a : c;
          }
          var qc = (a) => {
            for (var b = "", c = 0; c < a; ++c)
              b += (0 !== c ? ", " : "") + "arg" + c;
            var d = "return function emval_allocator_" + a + "(constructor, argTypes, args) {\n  var HEAPU32 = getMemory();\n";
            for (c = 0; c < a; ++c)
              d += "var argType" + c + " = requireRegisteredType(HEAPU32[((argTypes)>>>2)], 'parameter " + c + "');\nvar arg" + c + " = argType" + c + ".readValueFromPointer(args);\nargs += argType" + c + "['argPackAdvance'];\nargTypes += 4;\n";
            return new Function("requireRegisteredType", "Module", "valueToHandle", "getMemory", d + ("var obj = new constructor(" + b + ");\nreturn valueToHandle(obj);\n}\n"))(ec, A, W, () => z());
          }, rc = {}, Y = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), sc = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], tc = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
          function uc(a, b, c, d, e, f, k) {
            return E ? P(16, 1, a, b, c, d, e, f, k) : -52;
          }
          function vc(a, b, c, d, e, f) {
            if (E)
              return P(17, 1, a, b, c, d, e, f);
          }
          var xc = (a) => {
            var b = pb(a) + 1, c = wc(b);
            c && rb(a, c, b);
            return c;
          }, yc = {}, Ac = () => {
            if (!zc) {
              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: ma || "./this.program" }, b;
              for (b in yc)
                void 0 === yc[b] ? delete a[b] : a[b] = yc[b];
              var c = [];
              for (b in a)
                c.push(`${b}=${a[b]}`);
              zc = c;
            }
            return zc;
          }, zc;
          function Bc(a, b) {
            if (E)
              return P(18, 1, a, b);
            a >>>= 0;
            b >>>= 0;
            var c = 0;
            Ac().forEach((d, e) => {
              var f = b + c;
              e = z()[a + 4 * e >>> 2 >>> 0] = f;
              for (f = 0; f < d.length; ++f)
                h()[e++ >>> 0 >>> 0] = d.charCodeAt(f);
              h()[e >>> 0 >>> 0] = 0;
              c += d.length + 1;
            });
            return 0;
          }
          function Cc(a, b) {
            if (E)
              return P(19, 1, a, b);
            a >>>= 0;
            b >>>= 0;
            var c = Ac();
            z()[a >>> 2 >>> 0] = c.length;
            var d = 0;
            c.forEach((e) => d += e.length + 1);
            z()[b >>> 2 >>> 0] = d;
            return 0;
          }
          function Dc(a) {
            return E ? P(20, 1, a) : 52;
          }
          function Ec(a, b, c, d) {
            return E ? P(21, 1, a, b, c, d) : 52;
          }
          function Fc(a, b, c, d) {
            return E ? P(22, 1, a, b, c, d) : 70;
          }
          var Gc = [null, [], []];
          function Hc(a, b, c, d) {
            if (E)
              return P(23, 1, a, b, c, d);
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            for (var e = 0, f = 0; f < c; f++) {
              var k = z()[b >>> 2 >>> 0], l = z()[b + 4 >>> 2 >>> 0];
              b += 8;
              for (var q = 0; q < l; q++) {
                var r = t()[k + q >>> 0], x = Gc[a];
                0 === r || 10 === r ? ((1 === a ? wa : G)(Ta(x, 0)), x.length = 0) : x.push(r);
              }
              e += l;
            }
            z()[d >>> 2 >>> 0] = e;
            return 0;
          }
          var Ic = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Jc = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          function Kc(a) {
            var b = Array(pb(a) + 1);
            qb(a, b, 0, b.length);
            return b;
          }
          var Lc = (a, b) => {
            h().set(a, b >>> 0);
          };
          function Mc(a, b, c, d) {
            function e(g, u, y) {
              for (g = "number" == typeof g ? g.toString() : g || ""; g.length < u; )
                g = y[0] + g;
              return g;
            }
            function f(g, u) {
              return e(g, u, "0");
            }
            function k(g, u) {
              function y(lc) {
                return 0 > lc ? -1 : 0 < lc ? 1 : 0;
              }
              var Q;
              0 === (Q = y(g.getFullYear() - u.getFullYear())) && 0 === (Q = y(g.getMonth() - u.getMonth())) && (Q = y(g.getDate() - u.getDate()));
              return Q;
            }
            function l(g) {
              switch (g.getDay()) {
                case 0:
                  return new Date(g.getFullYear() - 1, 11, 29);
                case 1:
                  return g;
                case 2:
                  return new Date(g.getFullYear(), 0, 3);
                case 3:
                  return new Date(
                    g.getFullYear(),
                    0,
                    2
                  );
                case 4:
                  return new Date(g.getFullYear(), 0, 1);
                case 5:
                  return new Date(g.getFullYear() - 1, 11, 31);
                case 6:
                  return new Date(g.getFullYear() - 1, 11, 30);
              }
            }
            function q(g) {
              var u = g.pb;
              for (g = new Date(new Date(g.qb + 1900, 0, 1).getTime()); 0 < u; ) {
                var y = g.getMonth(), Q = (Y(g.getFullYear()) ? Ic : Jc)[y];
                if (u > Q - g.getDate())
                  u -= Q - g.getDate() + 1, g.setDate(1), 11 > y ? g.setMonth(y + 1) : (g.setMonth(0), g.setFullYear(g.getFullYear() + 1));
                else {
                  g.setDate(g.getDate() + u);
                  break;
                }
              }
              y = new Date(g.getFullYear() + 1, 0, 4);
              u = l(new Date(
                g.getFullYear(),
                0,
                4
              ));
              y = l(y);
              return 0 >= k(u, g) ? 0 >= k(y, g) ? g.getFullYear() + 1 : g.getFullYear() : g.getFullYear() - 1;
            }
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            var r = z()[d + 40 >>> 2 >>> 0];
            d = { Qb: w()[d >>> 2 >>> 0], Pb: w()[d + 4 >>> 2 >>> 0], tb: w()[d + 8 >>> 2 >>> 0], yb: w()[d + 12 >>> 2 >>> 0], ub: w()[d + 16 >>> 2 >>> 0], qb: w()[d + 20 >>> 2 >>> 0], kb: w()[d + 24 >>> 2 >>> 0], pb: w()[d + 28 >>> 2 >>> 0], Wb: w()[d + 32 >>> 2 >>> 0], Ob: w()[d + 36 >>> 2 >>> 0], Rb: r ? Ua(r) : "" };
            c = Ua(c);
            r = {
              "%c": "%a %b %d %H:%M:%S %Y",
              "%D": "%m/%d/%y",
              "%F": "%Y-%m-%d",
              "%h": "%b",
              "%r": "%I:%M:%S %p",
              "%R": "%H:%M",
              "%T": "%H:%M:%S",
              "%x": "%m/%d/%y",
              "%X": "%H:%M:%S",
              "%Ec": "%c",
              "%EC": "%C",
              "%Ex": "%m/%d/%y",
              "%EX": "%H:%M:%S",
              "%Ey": "%y",
              "%EY": "%Y",
              "%Od": "%d",
              "%Oe": "%e",
              "%OH": "%H",
              "%OI": "%I",
              "%Om": "%m",
              "%OM": "%M",
              "%OS": "%S",
              "%Ou": "%u",
              "%OU": "%U",
              "%OV": "%V",
              "%Ow": "%w",
              "%OW": "%W",
              "%Oy": "%y"
            };
            for (var x in r)
              c = c.replace(new RegExp(x, "g"), r[x]);
            var C = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), N = "January February March April May June July August September October November December".split(" ");
            r = { "%a": (g) => C[g.kb].substring(0, 3), "%A": (g) => C[g.kb], "%b": (g) => N[g.ub].substring(0, 3), "%B": (g) => N[g.ub], "%C": (g) => f((g.qb + 1900) / 100 | 0, 2), "%d": (g) => f(g.yb, 2), "%e": (g) => e(g.yb, 2, " "), "%g": (g) => q(g).toString().substring(2), "%G": (g) => q(g), "%H": (g) => f(g.tb, 2), "%I": (g) => {
              g = g.tb;
              0 == g ? g = 12 : 12 < g && (g -= 12);
              return f(g, 2);
            }, "%j": (g) => {
              for (var u = 0, y = 0; y <= g.ub - 1; u += (Y(g.qb + 1900) ? Ic : Jc)[y++])
                ;
              return f(g.yb + u, 3);
            }, "%m": (g) => f(g.ub + 1, 2), "%M": (g) => f(g.Pb, 2), "%n": () => "\n", "%p": (g) => 0 <= g.tb && 12 > g.tb ? "AM" : "PM", "%S": (g) => f(g.Qb, 2), "%t": () => "	", "%u": (g) => g.kb || 7, "%U": (g) => f(Math.floor((g.pb + 7 - g.kb) / 7), 2), "%V": (g) => {
              var u = Math.floor((g.pb + 7 - (g.kb + 6) % 7) / 7);
              2 >= (g.kb + 371 - g.pb - 2) % 7 && u++;
              if (u)
                53 == u && (y = (g.kb + 371 - g.pb) % 7, 4 == y || 3 == y && Y(g.qb) || (u = 1));
              else {
                u = 52;
                var y = (g.kb + 7 - g.pb - 1) % 7;
                (4 == y || 5 == y && Y(g.qb % 400 - 1)) && u++;
              }
              return f(u, 2);
            }, "%w": (g) => g.kb, "%W": (g) => f(Math.floor((g.pb + 7 - (g.kb + 6) % 7) / 7), 2), "%y": (g) => (g.qb + 1900).toString().substring(2), "%Y": (g) => g.qb + 1900, "%z": (g) => {
              g = g.Ob;
              var u = 0 <= g;
              g = Math.abs(g) / 60;
              return (u ? "+" : "-") + String("0000" + (g / 60 * 100 + g % 60)).slice(-4);
            }, "%Z": (g) => g.Rb, "%%": () => "%" };
            c = c.replace(/%%/g, "\0\0");
            for (x in r)
              c.includes(x) && (c = c.replace(new RegExp(x, "g"), r[x](d)));
            c = c.replace(/\0\0/g, "%");
            x = Kc(c);
            if (x.length > b)
              return 0;
            Lc(x, a);
            return x.length - 1;
          }
          O.vb();
          for (var Nc = Array(256), Oc = 0; 256 > Oc; ++Oc)
            Nc[Oc] = String.fromCharCode(Oc);
          Eb = Nc;
          S = A.BindingError = class extends Error {
            constructor(a) {
              super(a);
              this.name = "BindingError";
            }
          };
          A.InternalError = class extends Error {
            constructor(a) {
              super(a);
              this.name = "InternalError";
            }
          };
          Object.assign(Kb.prototype, { get(a) {
            return this.lb[a];
          }, has(a) {
            return void 0 !== this.lb[a];
          }, wb(a) {
            var b = this.zb.pop() || this.lb.length;
            this.lb[b] = a;
            return b;
          }, xb(a) {
            this.lb[a] = void 0;
            this.zb.push(a);
          } });
          U.lb.push({ value: void 0 }, { value: null }, { value: true }, { value: false });
          U.sb = U.lb.length;
          A.count_emval_handles = () => {
            for (var a = 0, b = U.sb; b < U.lb.length; ++b)
              void 0 !== U.lb[b] && ++a;
            return a;
          };
          var Pc = [Va, Wa, lb, nb, ob, sb, tb, ub, vb, wb, xb, yb, zb, Ab, Bb, Cb, uc, vc, Bc, Cc, Dc, Ec, Fc, Hc], Rc = {
            b: function(a, b, c) {
              a >>>= 0;
              new ib(a).vb(b >>> 0, c >>> 0);
              jb = a;
              kb++;
              throw jb;
            },
            ea: function(a) {
              Qc(a >>> 0, !B, 1, !oa, 131072, false);
              O.Eb();
            },
            E: function(a) {
              a >>>= 0;
              E ? postMessage({ cmd: "cleanupThread", thread: a }) : ((a = O.jb[a]) || H(), O.Cb(a));
            },
            W: mb,
            y: nb,
            ka: ob,
            S: sb,
            U: tb,
            L: ub,
            ia: vb,
            ba: wb,
            ha: xb,
            G: yb,
            T: zb,
            Q: Ab,
            ja: Bb,
            R: Cb,
            J: function(a, b, c, d, e) {
              a >>>= 0;
              b >>>= 0;
              c >>>= 0;
              b = R(b);
              var f = -1 != b.indexOf("u");
              f && (e = (1n << 64n) - 1n);
              T(a, { name: b, fromWireType: (k) => k, toWireType: function(k, l) {
                if ("bigint" != typeof l && "number" != typeof l)
                  throw new TypeError(`Cannot convert "${Db(l)}" to ${this.name}`);
                if (l < d || l > e)
                  throw new TypeError(`Passing a number "${Db(l)}" from JS side to C/C++ side to an argument of type "${b}", which is outside the valid range [${d}, ${e}]!`);
                return l;
              }, argPackAdvance: 8, readValueFromPointer: Jb(b, c, !f), rb: null });
            },
            qa: function(a, b, c, d) {
              a >>>= 0;
              b = R(b >>> 0);
              T(a, {
                name: b,
                fromWireType: function(e) {
                  return !!e;
                },
                toWireType: function(e, f) {
                  return f ? c : d;
                },
                argPackAdvance: 8,
                readValueFromPointer: function(e) {
                  return this.fromWireType(t()[e >>> 0]);
                },
                rb: null
              });
            },
            pa: function(a, b) {
              a >>>= 0;
              b = R(b >>> 0);
              T(a, { name: b, fromWireType: (c) => {
                var d = V(c);
                Lb(c);
                return d;
              }, toWireType: (c, d) => W(d), argPackAdvance: 8, readValueFromPointer: Mb, rb: null });
            },
            I: function(a, b, c) {
              a >>>= 0;
              c >>>= 0;
              b = R(b >>> 0);
              T(a, { name: b, fromWireType: (d) => d, toWireType: (d, e) => e, argPackAdvance: 8, readValueFromPointer: Nb(b, c), rb: null });
            },
            u: function(a, b, c, d, e) {
              a >>>= 0;
              c >>>= 0;
              b = R(b >>> 0);
              -1 === e && (e = 4294967295);
              e = (l) => l;
              if (0 === d) {
                var f = 32 - 8 * c;
                e = (l) => l << f >>> f;
              }
              var k = b.includes("unsigned") ? function(l, q) {
                return q >>> 0;
              } : function(l, q) {
                return q;
              };
              T(a, { name: b, fromWireType: e, toWireType: k, argPackAdvance: 8, readValueFromPointer: Jb(b, c, 0 !== d), rb: null });
            },
            m: function(a, b, c) {
              function d(f) {
                var k = z()[f >>> 2 >>> 0];
                f = z()[f + 4 >>> 2 >>> 0];
                return new e(h().buffer, f, k);
              }
              a >>>= 0;
              var e = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][b];
              c = R(c >>> 0);
              T(
                a,
                { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d },
                { Ib: true }
              );
            },
            K: function(a, b) {
              a >>>= 0;
              b = R(b >>> 0);
              var c = "std::string" === b;
              T(a, { name: b, fromWireType: function(d) {
                var e = z()[d >>> 2 >>> 0], f = d + 4;
                if (c)
                  for (var k = f, l = 0; l <= e; ++l) {
                    var q = f + l;
                    if (l == e || 0 == t()[q >>> 0]) {
                      k = Ua(k, q - k);
                      if (void 0 === r)
                        var r = k;
                      else
                        r += String.fromCharCode(0), r += k;
                      k = q + 1;
                    }
                  }
                else {
                  r = Array(e);
                  for (l = 0; l < e; ++l)
                    r[l] = String.fromCharCode(t()[f + l >>> 0]);
                  r = r.join("");
                }
                X(d);
                return r;
              }, toWireType: function(d, e) {
                e instanceof ArrayBuffer && (e = new Uint8Array(e));
                var f = "string" == typeof e;
                if (!(f || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array))
                  throw new S("Cannot pass non-string to std::string");
                var k = c && f ? pb(e) : e.length;
                var l = wc(4 + k + 1), q = l + 4;
                z()[l >>> 2 >>> 0] = k;
                if (c && f)
                  rb(e, q, k + 1);
                else if (f)
                  for (f = 0; f < k; ++f) {
                    var r = e.charCodeAt(f);
                    if (255 < r)
                      throw X(q), new S("String has UTF-16 code units that do not fit in 8 bits");
                    t()[q + f >>> 0] = r;
                  }
                else
                  for (f = 0; f < k; ++f)
                    t()[q + f >>> 0] = e[f];
                null !== d && d.push(X, l);
                return l;
              }, argPackAdvance: 8, readValueFromPointer: Ob, rb(d) {
                X(d);
              } });
            },
            A: function(a, b, c) {
              a >>>= 0;
              b >>>= 0;
              c >>>= 0;
              c = R(c);
              if (2 === b) {
                var d = Qb;
                var e = Rb;
                var f = Sb;
                var k = () => ca();
                var l = 1;
              } else
                4 === b && (d = Tb, e = Ub, f = Vb, k = () => z(), l = 2);
              T(a, {
                name: c,
                fromWireType: (q) => {
                  for (var r = z()[q >>> 2 >>> 0], x = k(), C, N = q + 4, g = 0; g <= r; ++g) {
                    var u = q + 4 + g * b;
                    if (g == r || 0 == x[u >>> l])
                      N = d(N, u - N), void 0 === C ? C = N : (C += String.fromCharCode(0), C += N), N = u + b;
                  }
                  X(q);
                  return C;
                },
                toWireType: (q, r) => {
                  if ("string" != typeof r)
                    throw new S(`Cannot pass non-string to C++ string type ${c}`);
                  var x = f(r), C = wc(4 + x + b);
                  z()[C >>> 2] = x >> l;
                  e(r, C + 4, x + b);
                  null !== q && q.push(X, C);
                  return C;
                },
                argPackAdvance: 8,
                readValueFromPointer: Mb,
                rb(q) {
                  X(q);
                }
              });
            },
            ra: function(a, b) {
              a >>>= 0;
              b = R(b >>> 0);
              T(a, { Jb: true, name: b, argPackAdvance: 0, fromWireType: () => {
              }, toWireType: () => {
              } });
            },
            na: () => true,
            O: function(a, b) {
              a >>>= 0;
              a == b >>> 0 ? setTimeout(() => bb()) : E ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = O.jb[a]) && a.postMessage({ cmd: "checkMailbox" });
            },
            X: function(a, b, c, d) {
              b >>>= 0;
              c /= 2;
              cc.length = c;
              d = d >>> 0 >>> 3;
              for (var e = 0; e < c; e++)
                cc[e] = J[d + 2 * e] ? J[d + 2 * e + 1] : ha()[d + 2 * e + 1 >>> 0];
              a = Pc[a];
              O.Hb = b;
              b = a.apply(null, cc);
              O.Hb = 0;
              return b;
            },
            da: Xb,
            ma: function(a) {
              D && O.jb[a >>> 0].ref();
            },
            r: function(a, b, c) {
              b >>>= 0;
              c >>>= 0;
              a = V(a >>> 0);
              b = ec(b, "emval::as");
              var d = [], e = W(d);
              z()[c >>> 2 >>> 0] = e;
              return b.toWireType(d, a);
            },
            i: function(a, b, c, d, e) {
              c >>>= 0;
              d >>>= 0;
              e >>>= 0;
              a = hc[a >>> 0];
              b = V(b >>> 0);
              c = gc(c);
              var f = [];
              z()[d >>> 2 >>> 0] = W(f);
              return a(b, c, f, e);
            },
            s: function(a, b, c, d) {
              c >>>= 0;
              d >>>= 0;
              a = hc[a >>> 0];
              b = V(b >>> 0);
              c = gc(c);
              a(b, c, null, d);
            },
            c: Lb,
            B: function(a, b) {
              b >>>= 0;
              a = V(a >>> 0);
              b = V(b);
              return a == b;
            },
            o: function(a) {
              a >>>= 0;
              if (0 === a)
                return W(ic());
              a = gc(a);
              return W(ic()[a]);
            },
            g: function(a, b) {
              var c = kc(a, b >>> 0), d = c[0];
              b = d.name + "_$" + c.slice(1).map(function(x) {
                return x.name;
              }).join("_") + "$";
              var e = nc[b];
              if (void 0 !== e)
                return e;
              e = ["retType"];
              for (var f = [d], k = "", l = 0; l < a - 1; ++l)
                k += (0 !== l ? ", " : "") + "arg" + l, e.push("argType" + l), f.push(c[1 + l]);
              var q = "return function " + mc("methodCaller_" + b) + "(handle, name, destructors, args) {\n", r = 0;
              for (l = 0; l < a - 1; ++l)
                q += "    var arg" + l + " = argType" + l + ".readValueFromPointer(args" + (r ? "+" + r : "") + ");\n", r += c[l + 1].argPackAdvance;
              q += "    var rv = handle[name](" + k + ");\n";
              for (l = 0; l < a - 1; ++l)
                c[l + 1].deleteObject && (q += "    argType" + l + ".deleteObject(arg" + l + ");\n");
              d.Jb || (q += "    return retType.toWireType(destructors, rv);\n");
              e.push(q + "};\n");
              a = pc(e).apply(null, f);
              e = jc(a);
              return nc[b] = e;
            },
            q: function(a, b) {
              b >>>= 0;
              a = V(a >>> 0);
              b = V(b);
              return W(a[b]);
            },
            d: function(a) {
              a >>>= 0;
              4 < a && (U.get(a).Bb += 1);
            },
            x: function(a, b, c, d) {
              c >>>= 0;
              d >>>= 0;
              a = V(a >>> 0);
              var e = rc[b];
              e || (e = qc(b), rc[b] = e);
              return e(a, c, d);
            },
            v: function() {
              return W([]);
            },
            l: function(a) {
              a = V(a >>> 0);
              for (var b = Array(a.length), c = 0; c < a.length; c++)
                b[c] = a[c];
              return W(b);
            },
            e: function(a) {
              return W(gc(a >>> 0));
            },
            k: function() {
              return W({});
            },
            f: function(a) {
              a >>>= 0;
              for (var b = V(a); b.length; ) {
                var c = b.pop();
                b.pop()(c);
              }
              Lb(a);
            },
            j: function(a, b, c) {
              b >>>= 0;
              c >>>= 0;
              a = V(a >>> 0);
              b = V(b);
              c = V(c);
              a[b] = c;
            },
            h: function(a, b) {
              b >>>= 0;
              a = ec(a >>> 0, "_emval_take_value");
              a = a.readValueFromPointer(b);
              return W(a);
            },
            _: function(a, b) {
              a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
              b >>>= 0;
              a = new Date(1e3 * a);
              w()[b >>> 2 >>> 0] = a.getUTCSeconds();
              w()[b + 4 >>> 2 >>> 0] = a.getUTCMinutes();
              w()[b + 8 >>> 2 >>> 0] = a.getUTCHours();
              w()[b + 12 >>> 2 >>> 0] = a.getUTCDate();
              w()[b + 16 >>> 2 >>> 0] = a.getUTCMonth();
              w()[b + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;
              w()[b + 24 >>> 2 >>> 0] = a.getUTCDay();
              a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
              w()[b + 28 >>> 2 >>> 0] = a;
            },
            $: function(a, b) {
              a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
              b >>>= 0;
              a = new Date(1e3 * a);
              w()[b >>> 2 >>> 0] = a.getSeconds();
              w()[b + 4 >>> 2 >>> 0] = a.getMinutes();
              w()[b + 8 >>> 2 >>> 0] = a.getHours();
              w()[b + 12 >>> 2 >>> 0] = a.getDate();
              w()[b + 16 >>> 2 >>> 0] = a.getMonth();
              w()[b + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;
              w()[b + 24 >>> 2 >>> 0] = a.getDay();
              var c = (Y(a.getFullYear()) ? sc : tc)[a.getMonth()] + a.getDate() - 1 | 0;
              w()[b + 28 >>> 2 >>> 0] = c;
              w()[b + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());
              c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();
              var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
              a = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;
              w()[b + 32 >>> 2 >>> 0] = a;
            },
            aa: function(a) {
              a >>>= 0;
              var b = new Date(w()[a + 20 >>> 2 >>> 0] + 1900, w()[a + 16 >>> 2 >>> 0], w()[a + 12 >>> 2 >>> 0], w()[a + 8 >>> 2 >>> 0], w()[a + 4 >>> 2 >>> 0], w()[a >>> 2 >>> 0], 0), c = w()[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), e = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), f = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), k = Math.min(f, e);
              0 > c ? w()[a + 32 >>> 2 >>> 0] = Number(e != f && k == d) : 0 < c != (k == d) && (e = Math.max(f, e), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : e) - d)));
              w()[a + 24 >>> 2 >>> 0] = b.getDay();
              c = (Y(b.getFullYear()) ? sc : tc)[b.getMonth()] + b.getDate() - 1 | 0;
              w()[a + 28 >>> 2 >>> 0] = c;
              w()[a >>> 2 >>> 0] = b.getSeconds();
              w()[a + 4 >>> 2 >>> 0] = b.getMinutes();
              w()[a + 8 >>> 2 >>> 0] = b.getHours();
              w()[a + 12 >>> 2 >>> 0] = b.getDate();
              w()[a + 16 >>> 2 >>> 0] = b.getMonth();
              w()[a + 20 >>> 2 >>> 0] = b.getYear();
              return BigInt(b.getTime() / 1e3);
            },
            Y: uc,
            Z: vc,
            N: function(a, b, c) {
              function d(r) {
                return (r = r.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? r[1] : "GMT";
              }
              a >>>= 0;
              b >>>= 0;
              c >>>= 0;
              var e = (/* @__PURE__ */ new Date()).getFullYear(), f = new Date(e, 0, 1), k = new Date(e, 6, 1);
              e = f.getTimezoneOffset();
              var l = k.getTimezoneOffset(), q = Math.max(e, l);
              z()[a >>> 2 >>> 0] = 60 * q;
              w()[b >>> 2 >>> 0] = Number(e != l);
              a = d(f);
              b = d(k);
              a = xc(a);
              b = xc(b);
              l < e ? (z()[c >>> 2 >>> 0] = a, z()[c + 4 >>> 2 >>> 0] = b) : (z()[c >>> 2 >>> 0] = b, z()[c + 4 >>> 2 >>> 0] = a);
            },
            n: () => {
              H("");
            },
            F: () => {
            },
            H: () => Date.now(),
            la: () => {
              Fa += 1;
              throw "unwind";
            },
            P: function() {
              return 4294901760;
            },
            t: () => performance.timeOrigin + performance.now(),
            w: () => D ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency,
            M: function(a) {
              a >>>= 0;
              var b = t().length;
              if (a <= b || 4294901760 < a)
                return false;
              for (var c = 1; 4 >= c; c *= 2) {
                var d = b * (1 + 0.2 / c);
                d = Math.min(d, a + 100663296);
                var e = Math;
                d = Math.max(a, d);
                a: {
                  e = (e.min.call(e, 4294901760, d + (65536 - d % 65536) % 65536) - m.buffer.byteLength + 65535) / 65536;
                  try {
                    m.grow(e);
                    p();
                    var f = 1;
                    break a;
                  } catch (k) {
                  }
                  f = void 0;
                }
                if (f)
                  return true;
              }
              return false;
            },
            fa: Bc,
            ga: Cc,
            V: Xa,
            z: Dc,
            D: Ec,
            ca: Fc,
            C: Hc,
            a: m || A.wasmMemory,
            oa: Mc,
            p: function(a, b, c, d) {
              return Mc(a >>> 0, b >>> 0, c >>> 0, d >>> 0);
            }
          }, Z = function() {
            var a = { a: Rc };
            K++;
            Na(a, function(b) {
              var c = b.module;
              Z = b.instance.exports;
              Z = Sc();
              O.Fb.push(Z.Xa);
              gb = Z._a;
              Da.unshift(Z.sa);
              xa = c;
              Ia();
            }).catch(ka);
            return {};
          }();
          A._OrtInit = (a, b) => (A._OrtInit = Z.ta)(a, b);
          A._OrtGetLastError = (a, b) => (A._OrtGetLastError = Z.ua)(a, b);
          A._OrtCreateSessionOptions = (a, b, c, d, e, f, k, l, q, r) => (A._OrtCreateSessionOptions = Z.va)(a, b, c, d, e, f, k, l, q, r);
          A._OrtAppendExecutionProvider = (a, b) => (A._OrtAppendExecutionProvider = Z.wa)(a, b);
          A._OrtAddFreeDimensionOverride = (a, b, c) => (A._OrtAddFreeDimensionOverride = Z.xa)(a, b, c);
          A._OrtAddSessionConfigEntry = (a, b, c) => (A._OrtAddSessionConfigEntry = Z.ya)(a, b, c);
          A._OrtReleaseSessionOptions = (a) => (A._OrtReleaseSessionOptions = Z.za)(a);
          A._OrtCreateSession = (a, b, c) => (A._OrtCreateSession = Z.Aa)(a, b, c);
          A._OrtReleaseSession = (a) => (A._OrtReleaseSession = Z.Ba)(a);
          A._OrtGetInputOutputCount = (a, b, c) => (A._OrtGetInputOutputCount = Z.Ca)(a, b, c);
          A._OrtGetInputName = (a, b) => (A._OrtGetInputName = Z.Da)(a, b);
          A._OrtGetOutputName = (a, b) => (A._OrtGetOutputName = Z.Ea)(a, b);
          A._OrtFree = (a) => (A._OrtFree = Z.Fa)(a);
          A._OrtCreateTensor = (a, b, c, d, e, f) => (A._OrtCreateTensor = Z.Ga)(a, b, c, d, e, f);
          A._OrtGetTensorData = (a, b, c, d, e) => (A._OrtGetTensorData = Z.Ha)(a, b, c, d, e);
          A._OrtReleaseTensor = (a) => (A._OrtReleaseTensor = Z.Ia)(a);
          A._OrtCreateRunOptions = (a, b, c, d) => (A._OrtCreateRunOptions = Z.Ja)(a, b, c, d);
          A._OrtAddRunConfigEntry = (a, b, c) => (A._OrtAddRunConfigEntry = Z.Ka)(a, b, c);
          A._OrtReleaseRunOptions = (a) => (A._OrtReleaseRunOptions = Z.La)(a);
          A._OrtCreateBinding = (a) => (A._OrtCreateBinding = Z.Ma)(a);
          A._OrtBindInput = (a, b, c) => (A._OrtBindInput = Z.Na)(a, b, c);
          A._OrtBindOutput = (a, b, c, d) => (A._OrtBindOutput = Z.Oa)(a, b, c, d);
          A._OrtClearBoundOutputs = (a) => (A._OrtClearBoundOutputs = Z.Pa)(a);
          A._OrtReleaseBinding = (a) => (A._OrtReleaseBinding = Z.Qa)(a);
          A._OrtRunWithBinding = (a, b, c, d, e) => (A._OrtRunWithBinding = Z.Ra)(a, b, c, d, e);
          A._OrtRun = (a, b, c, d, e, f, k, l) => (A._OrtRun = Z.Sa)(a, b, c, d, e, f, k, l);
          A._OrtEndProfiling = (a) => (A._OrtEndProfiling = Z.Ta)(a);
          var ab = A._pthread_self = () => (ab = A._pthread_self = Z.Ua)(), wc = A._malloc = (a) => (wc = A._malloc = Z.Va)(a), X = A._free = (a) => (X = A._free = Z.Wa)(a);
          A.__emscripten_tls_init = () => (A.__emscripten_tls_init = Z.Xa)();
          var dc = (a) => (dc = Z.Ya)(a);
          A.__embind_initialize_bindings = () => (A.__embind_initialize_bindings = Z.Za)();
          var Qc = A.__emscripten_thread_init = (a, b, c, d, e, f) => (Qc = A.__emscripten_thread_init = Z.$a)(a, b, c, d, e, f);
          A.__emscripten_thread_crashed = () => (A.__emscripten_thread_crashed = Z.ab)();
          var bc = (a, b, c, d) => (bc = Z.bb)(a, b, c, d), $a = (a) => ($a = Z.cb)(a), hb = A.__emscripten_thread_exit = (a) => (hb = A.__emscripten_thread_exit = Z.db)(a), Yb = A.__emscripten_check_mailbox = () => (Yb = A.__emscripten_check_mailbox = Z.eb)(), db = (a, b) => (db = Z.fb)(a, b), Zb = () => (Zb = Z.gb)(), eb = (a) => (eb = Z.hb)(a), ac = (a) => (ac = Z.ib)(a);
          function Sc() {
            var a = Z;
            a = Object.assign({}, a);
            var b = (d) => () => d() >>> 0, c = (d) => (e) => d(e) >>> 0;
            a.__errno_location = b(a.__errno_location);
            a.Ua = b(a.Ua);
            a.Va = c(a.Va);
            a.Ya = c(a.Ya);
            a.gb = b(a.gb);
            a.ib = c(a.ib);
            return a;
          }
          A.keepRuntimeAlive = Ga;
          A.wasmMemory = m;
          A.stackAlloc = ac;
          A.stackSave = Zb;
          A.stackRestore = eb;
          A.UTF8ToString = Ua;
          A.stringToUTF8 = rb;
          A.lengthBytesUTF8 = pb;
          A.ExitStatus = Oa;
          A.PThread = O;
          var Tc;
          L = function Uc() {
            Tc || Vc();
            Tc || (L = Uc);
          };
          function Vc() {
            0 < K || (E ? (ja(A), E || cb(Da), startWorker(A)) : (cb(Ca), 0 < K || Tc || (Tc = true, A.calledRun = true, ya || (E || cb(Da), ja(A), E || cb(Ea)))));
          }
          Vc();
          return moduleArg.ready;
        };
      })();
      if (typeof exports === "object" && typeof module === "object")
        module.exports = ortWasmThreaded;
      else if (typeof define === "function" && define["amd"])
        define([], () => ortWasmThreaded);
    }
  });

  // web/lib/wasm/binding/ort-wasm-threaded.worker.js
  var require_ort_wasm_threaded_worker = __commonJS({
    "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {
      module.exports = '"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*is_main=*/0,/*is_runtime=*/0,/*can_block=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){Module["__embind_initialize_bindings"]();initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err(`worker.js received unknown command ${e.data.cmd}`);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}}self.onmessage=handleMessage;\n';
    }
  });

  // web/lib/wasm/wasm-factory.ts
  var ortWasmFactory, ortWasmFactoryThreaded, wasm, initialized, initializing, aborted, isMultiThreadSupported, isSimdSupported, getWasmFileName, initializeWebAssembly, getInstance;
  var init_wasm_factory = __esm({
    "web/lib/wasm/wasm-factory.ts"() {
      "use strict";
      init_node_path();
      if (false) {
        ortWasmFactory = null;
      } else {
        ortWasmFactory = true ? require_ort_wasm() : null;
      }
      ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;
      initialized = false;
      initializing = false;
      aborted = false;
      isMultiThreadSupported = () => {
        try {
          if (typeof SharedArrayBuffer === "undefined") {
            return false;
          }
          if (typeof MessageChannel !== "undefined") {
            new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));
          }
          return WebAssembly.validate(new Uint8Array([
            0,
            97,
            115,
            109,
            1,
            0,
            0,
            0,
            1,
            4,
            1,
            96,
            0,
            0,
            3,
            2,
            1,
            0,
            5,
            4,
            1,
            3,
            1,
            1,
            10,
            11,
            1,
            9,
            0,
            65,
            0,
            254,
            16,
            2,
            0,
            26,
            11
          ]));
        } catch (e) {
          return false;
        }
      };
      isSimdSupported = () => {
        try {
          return WebAssembly.validate(new Uint8Array([
            0,
            97,
            115,
            109,
            1,
            0,
            0,
            0,
            1,
            4,
            1,
            96,
            0,
            0,
            3,
            2,
            1,
            0,
            10,
            30,
            1,
            28,
            0,
            65,
            0,
            253,
            15,
            253,
            12,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            253,
            186,
            1,
            26,
            11
          ]));
        } catch (e) {
          return false;
        }
      };
      getWasmFileName = (useSimd, useThreads) => {
        if (useSimd) {
          if (false) {
            return "ort-training-wasm-simd.wasm";
          }
          return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";
        } else {
          return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";
        }
      };
      initializeWebAssembly = async (flags) => {
        if (initialized) {
          return Promise.resolve();
        }
        if (initializing) {
          throw new Error("multiple calls to 'initializeWebAssembly()' detected.");
        }
        if (aborted) {
          throw new Error("previous call to 'initializeWebAssembly()' failed.");
        }
        initializing = true;
        const timeout = flags.initTimeout;
        const numThreads = flags.numThreads;
        const simd = flags.simd;
        const useThreads = numThreads > 1 && isMultiThreadSupported();
        const useSimd = simd && isSimdSupported();
        const wasmPaths = flags.wasmPaths;
        const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;
        const wasmFileName = getWasmFileName(useSimd, useThreads);
        const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;
        let isTimeout = false;
        const tasks = [];
        if (timeout > 0) {
          tasks.push(new Promise((resolve) => {
            setTimeout(() => {
              isTimeout = true;
              resolve();
            }, timeout);
          }));
        }
        tasks.push(new Promise((resolve, reject) => {
          const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;
          const config = {
            locateFile: (fileName, scriptDirectory) => {
              if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {
                return URL.createObjectURL(new Blob(
                  [
                    // This require() function is handled by esbuild plugin to load file content as string.
                    // eslint-disable-next-line @typescript-eslint/no-require-imports
                    require_ort_wasm_threaded_worker()
                  ],
                  { type: "text/javascript" }
                ));
              }
              if (fileName.endsWith(".wasm")) {
                if (wasmPathOverride) {
                  return wasmPathOverride;
                }
                const prefix = wasmPrefixOverride ?? scriptDirectory;
                if (false) {
                  if (wasmFileName === "ort-wasm-simd.wasm") {
                    return prefix + "ort-wasm-simd.jsep.wasm";
                  } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {
                    return prefix + "ort-wasm-simd-threaded.jsep.wasm";
                  }
                }
                return prefix + wasmFileName;
              }
              return scriptDirectory + fileName;
            }
          };
          if (useThreads) {
            config.numThreads = numThreads;
            if (typeof Blob === "undefined") {
              config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");
            } else {
              const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;
              config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });
            }
          }
          factory(config).then(
            // wasm module initialized successfully
            (module) => {
              initializing = false;
              initialized = true;
              wasm = module;
              resolve();
            },
            // wasm module failed to initialize
            (what) => {
              initializing = false;
              aborted = true;
              reject(what);
            }
          );
        }));
        await Promise.race(tasks);
        if (isTimeout) {
          throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);
        }
      };
      getInstance = () => {
        if (initialized && wasm) {
          return wasm;
        }
        throw new Error("WebAssembly is not initialized yet.");
      };
    }
  });

  // web/lib/wasm/wasm-utils.ts
  var allocWasmString, iterateExtraOptions, checkLastError;
  var init_wasm_utils = __esm({
    "web/lib/wasm/wasm-utils.ts"() {
      "use strict";
      init_wasm_factory();
      allocWasmString = (data, allocs) => {
        const wasm2 = getInstance();
        const dataLength = wasm2.lengthBytesUTF8(data) + 1;
        const dataOffset = wasm2._malloc(dataLength);
        wasm2.stringToUTF8(data, dataOffset, dataLength);
        allocs.push(dataOffset);
        return dataOffset;
      };
      iterateExtraOptions = (options, prefix, seen, handler) => {
        if (typeof options == "object" && options !== null) {
          if (seen.has(options)) {
            throw new Error("Circular reference in options");
          } else {
            seen.add(options);
          }
        }
        Object.entries(options).forEach(([key, value]) => {
          const name = prefix ? prefix + key : key;
          if (typeof value === "object") {
            iterateExtraOptions(value, name + ".", seen, handler);
          } else if (typeof value === "string" || typeof value === "number") {
            handler(name, value.toString());
          } else if (typeof value === "boolean") {
            handler(name, value ? "1" : "0");
          } else {
            throw new Error(`Can't handle extra config type: ${typeof value}`);
          }
        });
      };
      checkLastError = (message) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        try {
          const paramsOffset = wasm2.stackAlloc(8);
          wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);
          const errorCode = wasm2.HEAP32[paramsOffset / 4];
          const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];
          const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";
          throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);
        } finally {
          wasm2.stackRestore(stack);
        }
      };
    }
  });

  // web/lib/wasm/run-options.ts
  var setRunOptions;
  var init_run_options = __esm({
    "web/lib/wasm/run-options.ts"() {
      "use strict";
      init_wasm_factory();
      init_wasm_utils();
      setRunOptions = (options) => {
        const wasm2 = getInstance();
        let runOptionsHandle = 0;
        const allocs = [];
        const runOptions = options || {};
        try {
          if (options?.logSeverityLevel === void 0) {
            runOptions.logSeverityLevel = 2;
          } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {
            throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);
          }
          if (options?.logVerbosityLevel === void 0) {
            runOptions.logVerbosityLevel = 0;
          } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {
            throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);
          }
          if (options?.terminate === void 0) {
            runOptions.terminate = false;
          }
          let tagDataOffset = 0;
          if (options?.tag !== void 0) {
            tagDataOffset = allocWasmString(options.tag, allocs);
          }
          runOptionsHandle = wasm2._OrtCreateRunOptions(
            runOptions.logSeverityLevel,
            runOptions.logVerbosityLevel,
            !!runOptions.terminate,
            tagDataOffset
          );
          if (runOptionsHandle === 0) {
            checkLastError("Can't create run options.");
          }
          if (options?.extra !== void 0) {
            iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
              const keyDataOffset = allocWasmString(key, allocs);
              const valueDataOffset = allocWasmString(value, allocs);
              if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                checkLastError(`Can't set a run config entry: ${key} - ${value}.`);
              }
            });
          }
          return [runOptionsHandle, allocs];
        } catch (e) {
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
          throw e;
        }
      };
    }
  });

  // web/lib/wasm/session-options.ts
  var getGraphOptimzationLevel, getExecutionMode, appendDefaultOptions, setExecutionProviders, setSessionOptions;
  var init_session_options = __esm({
    "web/lib/wasm/session-options.ts"() {
      "use strict";
      init_wasm_factory();
      init_wasm_utils();
      getGraphOptimzationLevel = (graphOptimizationLevel) => {
        switch (graphOptimizationLevel) {
          case "disabled":
            return 0;
          case "basic":
            return 1;
          case "extended":
            return 2;
          case "all":
            return 99;
          default:
            throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);
        }
      };
      getExecutionMode = (executionMode) => {
        switch (executionMode) {
          case "sequential":
            return 0;
          case "parallel":
            return 1;
          default:
            throw new Error(`unsupported execution mode: ${executionMode}`);
        }
      };
      appendDefaultOptions = (options) => {
        if (!options.extra) {
          options.extra = {};
        }
        if (!options.extra.session) {
          options.extra.session = {};
        }
        const session = options.extra.session;
        if (!session.use_ort_model_bytes_directly) {
          session.use_ort_model_bytes_directly = "1";
        }
        if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {
          options.enableMemPattern = false;
        }
      };
      setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {
        for (const ep of executionProviders) {
          let epName = typeof ep === "string" ? ep : ep.name;
          switch (epName) {
            case "xnnpack":
              epName = "XNNPACK";
              break;
            case "webnn":
              epName = "WEBNN";
              if (typeof ep !== "string") {
                const webnnOptions = ep;
                if (webnnOptions?.deviceType) {
                  const keyDataOffset = allocWasmString("deviceType", allocs);
                  const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);
                  }
                }
                if (webnnOptions?.numThreads) {
                  let numThreads = webnnOptions.numThreads;
                  if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {
                    numThreads = 0;
                  }
                  const keyDataOffset = allocWasmString("numThreads", allocs);
                  const valueDataOffset = allocWasmString(numThreads.toString(), allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(`Can't set a session config entry: 'numThreads' - ${webnnOptions.numThreads}.`);
                  }
                }
                if (webnnOptions?.powerPreference) {
                  const keyDataOffset = allocWasmString("powerPreference", allocs);
                  const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(
                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`
                    );
                  }
                }
              }
              break;
            case "webgpu":
              epName = "JS";
              if (typeof ep !== "string") {
                const webgpuOptions = ep;
                if (webgpuOptions?.preferredLayout) {
                  if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {
                    throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);
                  }
                  const keyDataOffset = allocWasmString("preferredLayout", allocs);
                  const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(
                      `Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`
                    );
                  }
                }
              }
              break;
            case "wasm":
            case "cpu":
              continue;
            default:
              throw new Error(`not supported execution provider: ${epName}`);
          }
          const epNameDataOffset = allocWasmString(epName, allocs);
          if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {
            checkLastError(`Can't append execution provider: ${epName}.`);
          }
        }
      };
      setSessionOptions = (options) => {
        const wasm2 = getInstance();
        let sessionOptionsHandle = 0;
        const allocs = [];
        const sessionOptions = options || {};
        appendDefaultOptions(sessionOptions);
        try {
          const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");
          const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");
          const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;
          const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;
          if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {
            throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);
          }
          const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;
          if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {
            throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);
          }
          const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;
          sessionOptionsHandle = wasm2._OrtCreateSessionOptions(
            graphOptimizationLevel,
            !!sessionOptions.enableCpuMemArena,
            !!sessionOptions.enableMemPattern,
            executionMode,
            !!sessionOptions.enableProfiling,
            0,
            logIdDataOffset,
            logSeverityLevel,
            logVerbosityLevel,
            optimizedModelFilePathOffset
          );
          if (sessionOptionsHandle === 0) {
            checkLastError("Can't create session options.");
          }
          if (sessionOptions.executionProviders) {
            setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);
          }
          if (sessionOptions.freeDimensionOverrides) {
            for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {
              if (typeof name !== "string") {
                throw new Error(`free dimension override name must be a string: ${name}`);
              }
              if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {
                throw new Error(`free dimension override value must be a non-negative integer: ${value}`);
              }
              const nameOffset = allocWasmString(name, allocs);
              if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {
                checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);
              }
            }
          }
          if (sessionOptions.extra !== void 0) {
            iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
              const keyDataOffset = allocWasmString(key, allocs);
              const valueDataOffset = allocWasmString(value, allocs);
              if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                checkLastError(`Can't set a session config entry: ${key} - ${value}.`);
              }
            });
          }
          return [sessionOptionsHandle, allocs];
        } catch (e) {
          if (sessionOptionsHandle !== 0) {
            wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
          throw e;
        }
      };
    }
  });

  // web/lib/wasm/wasm-common.ts
  var tensorDataTypeStringToEnum, tensorDataTypeEnumToString, getTensorElementSize, tensorTypeToTypedArrayConstructor, logLevelStringToEnum, isGpuBufferSupportedType, dataLocationStringToEnum;
  var init_wasm_common = __esm({
    "web/lib/wasm/wasm-common.ts"() {
      "use strict";
      tensorDataTypeStringToEnum = (type) => {
        switch (type) {
          case "int8":
            return 3 /* int8 */;
          case "uint8":
            return 2 /* uint8 */;
          case "bool":
            return 9 /* bool */;
          case "int16":
            return 5 /* int16 */;
          case "uint16":
            return 4 /* uint16 */;
          case "int32":
            return 6 /* int32 */;
          case "uint32":
            return 12 /* uint32 */;
          case "float16":
            return 10 /* float16 */;
          case "float32":
            return 1 /* float */;
          case "float64":
            return 11 /* double */;
          case "string":
            return 8 /* string */;
          case "int64":
            return 7 /* int64 */;
          case "uint64":
            return 13 /* uint64 */;
          default:
            throw new Error(`unsupported data type: ${type}`);
        }
      };
      tensorDataTypeEnumToString = (typeProto) => {
        switch (typeProto) {
          case 3 /* int8 */:
            return "int8";
          case 2 /* uint8 */:
            return "uint8";
          case 9 /* bool */:
            return "bool";
          case 5 /* int16 */:
            return "int16";
          case 4 /* uint16 */:
            return "uint16";
          case 6 /* int32 */:
            return "int32";
          case 12 /* uint32 */:
            return "uint32";
          case 10 /* float16 */:
            return "float16";
          case 1 /* float */:
            return "float32";
          case 11 /* double */:
            return "float64";
          case 8 /* string */:
            return "string";
          case 7 /* int64 */:
            return "int64";
          case 13 /* uint64 */:
            return "uint64";
          default:
            throw new Error(`unsupported data type: ${typeProto}`);
        }
      };
      getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];
      tensorTypeToTypedArrayConstructor = (type) => {
        switch (type) {
          case "float16":
            return Uint16Array;
          case "float32":
            return Float32Array;
          case "uint8":
            return Uint8Array;
          case "int8":
            return Int8Array;
          case "uint16":
            return Uint16Array;
          case "int16":
            return Int16Array;
          case "int32":
            return Int32Array;
          case "bool":
            return Uint8Array;
          case "float64":
            return Float64Array;
          case "uint32":
            return Uint32Array;
          case "int64":
            return BigInt64Array;
          case "uint64":
            return BigUint64Array;
          default:
            throw new Error(`unsupported type: ${type}`);
        }
      };
      logLevelStringToEnum = (logLevel) => {
        switch (logLevel) {
          case "verbose":
            return 0;
          case "info":
            return 1;
          case "warning":
            return 2;
          case "error":
            return 3;
          case "fatal":
            return 4;
          default:
            throw new Error(`unsupported logging level: ${logLevel}`);
        }
      };
      isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";
      dataLocationStringToEnum = (location) => {
        switch (location) {
          case "none":
            return 0;
          case "cpu":
            return 1;
          case "cpu-pinned":
            return 2;
          case "texture":
            return 3;
          case "gpu-buffer":
            return 4;
          default:
            throw new Error(`unsupported data location: ${location}`);
        }
      };
    }
  });

  // web/lib/wasm/wasm-core-impl.ts
  var initOrt, initRuntime, initEp, activeSessions, getSessionInputOutputCount, copyFromExternalBuffer, createSession, releaseSession, prepareInputOutputTensor, run, endProfiling, extractTransferableBuffers;
  var init_wasm_core_impl = __esm({
    "web/lib/wasm/wasm-core-impl.ts"() {
      "use strict";
      init_run_options();
      init_session_options();
      init_wasm_common();
      init_wasm_factory();
      init_wasm_utils();
      initOrt = (numThreads, loggingLevel) => {
        const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);
        if (errorCode !== 0) {
          checkLastError("Can't initialize onnxruntime.");
        }
      };
      initRuntime = async (env3) => {
        initOrt(env3.wasm.numThreads, logLevelStringToEnum(env3.logLevel));
      };
      initEp = async (env3, epName) => {
        if (false) {
          if (typeof navigator === "undefined" || !navigator.gpu) {
            throw new Error("WebGPU is not supported in current environment");
          }
          const adapter = await navigator.gpu.requestAdapter();
          if (!adapter) {
            throw new Error(
              'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.'
            );
          }
          if (!env3.wasm.simd) {
            throw new Error(
              "Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP"
            );
          }
          const initJsep = null.init;
          await initJsep(getInstance(), env3, adapter);
        }
      };
      activeSessions = /* @__PURE__ */ new Map();
      getSessionInputOutputCount = (sessionHandle) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        try {
          const dataOffset = wasm2.stackAlloc(8);
          const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);
          if (errorCode !== 0) {
            checkLastError("Can't get session input/output count.");
          }
          return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];
        } finally {
          wasm2.stackRestore(stack);
        }
      };
      copyFromExternalBuffer = (model) => {
        const wasm2 = getInstance();
        const modelDataOffset = wasm2._malloc(model.byteLength);
        if (modelDataOffset === 0) {
          throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);
        }
        wasm2.HEAPU8.set(model, modelDataOffset);
        return [modelDataOffset, model.byteLength];
      };
      createSession = (modelData, options) => {
        let modelDataOffset, modelDataLength;
        const wasm2 = getInstance();
        if (Array.isArray(modelData)) {
          [modelDataOffset, modelDataLength] = modelData;
        } else if (modelData.buffer === wasm2.HEAPU8.buffer) {
          [modelDataOffset, modelDataLength] = [modelData.byteOffset, modelData.byteLength];
        } else {
          [modelDataOffset, modelDataLength] = copyFromExternalBuffer(modelData);
        }
        let sessionHandle = 0;
        let sessionOptionsHandle = 0;
        let ioBindingHandle = 0;
        let allocs = [];
        const inputNamesUTF8Encoded = [];
        const outputNamesUTF8Encoded = [];
        try {
          [sessionOptionsHandle, allocs] = setSessionOptions(options);
          sessionHandle = wasm2._OrtCreateSession(modelDataOffset, modelDataLength, sessionOptionsHandle);
          if (sessionHandle === 0) {
            checkLastError("Can't create a session.");
          }
          const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);
          const inputNames = [];
          const outputNames = [];
          const outputPreferredLocations = [];
          for (let i = 0; i < inputCount; i++) {
            const name = wasm2._OrtGetInputName(sessionHandle, i);
            if (name === 0) {
              checkLastError("Can't get an input name.");
            }
            inputNamesUTF8Encoded.push(name);
            inputNames.push(wasm2.UTF8ToString(name));
          }
          for (let i = 0; i < outputCount; i++) {
            const name = wasm2._OrtGetOutputName(sessionHandle, i);
            if (name === 0) {
              checkLastError("Can't get an output name.");
            }
            outputNamesUTF8Encoded.push(name);
            const nameString = wasm2.UTF8ToString(name);
            outputNames.push(nameString);
            if (false) {
              const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";
              if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {
                throw new Error(`Not supported preferred output location: ${location}.`);
              }
              outputPreferredLocations.push(location);
            }
          }
          let bindingState = null;
          if (false) {
            ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);
            if (ioBindingHandle === 0) {
              checkLastError("Can't create IO binding.");
            }
            bindingState = {
              handle: ioBindingHandle,
              outputPreferredLocations,
              outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))
            };
          }
          activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);
          return [sessionHandle, inputNames, outputNames];
        } catch (e) {
          inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
          outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
          if (ioBindingHandle !== 0) {
            wasm2._OrtReleaseBinding(ioBindingHandle);
          }
          if (sessionHandle !== 0) {
            wasm2._OrtReleaseSession(sessionHandle);
          }
          throw e;
        } finally {
          wasm2._free(modelDataOffset);
          if (sessionOptionsHandle !== 0) {
            wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
        }
      };
      releaseSession = (sessionId) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error(`cannot release session. invalid session id: ${sessionId}`);
        }
        const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;
        if (ioBindingState) {
          wasm2._OrtReleaseBinding(ioBindingState.handle);
        }
        wasm2.jsepUnregisterBuffers?.(sessionId);
        inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        wasm2._OrtReleaseSession(sessionHandle);
        activeSessions.delete(sessionId);
      };
      prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {
        if (!tensor) {
          tensorHandles.push(0);
          return;
        }
        const wasm2 = getInstance();
        const dataType = tensor[0];
        const dims = tensor[1];
        const location = tensor[3];
        let rawData;
        let dataByteLength;
        if (dataType === "string" && location === "gpu-buffer") {
          throw new Error("String tensor is not supported on GPU.");
        }
        if (location === "gpu-buffer") {
          const gpuBuffer = tensor[2].gpuBuffer;
          const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));
          dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;
          rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);
        } else {
          const data = tensor[2];
          if (Array.isArray(data)) {
            dataByteLength = 4 * data.length;
            rawData = wasm2._malloc(dataByteLength);
            allocs.push(rawData);
            let dataIndex = rawData / 4;
            for (let i = 0; i < data.length; i++) {
              if (typeof data[i] !== "string") {
                throw new TypeError(`tensor data at index ${i} is not a string`);
              }
              wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);
            }
          } else {
            dataByteLength = data.byteLength;
            rawData = wasm2._malloc(dataByteLength);
            allocs.push(rawData);
            wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);
          }
        }
        const stack = wasm2.stackSave();
        const dimsOffset = wasm2.stackAlloc(4 * dims.length);
        try {
          let dimIndex = dimsOffset / 4;
          dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);
          const tensor2 = wasm2._OrtCreateTensor(
            tensorDataTypeStringToEnum(dataType),
            rawData,
            dataByteLength,
            dimsOffset,
            dims.length,
            dataLocationStringToEnum(location)
          );
          if (tensor2 === 0) {
            checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);
          }
          tensorHandles.push(tensor2);
        } finally {
          wasm2.stackRestore(stack);
        }
      };
      run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error(`cannot run inference. invalid session id: ${sessionId}`);
        }
        const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;
        const inputCount = inputIndices.length;
        const outputCount = outputIndices.length;
        let runOptionsHandle = 0;
        let runOptionsAllocs = [];
        const inputTensorHandles = [];
        const outputTensorHandles = [];
        const inputOutputAllocs = [];
        const beforeRunStack = wasm2.stackSave();
        const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);
        const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);
        const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);
        const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);
        try {
          [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
          for (let i = 0; i < inputCount; i++) {
            prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);
          }
          for (let i = 0; i < outputCount; i++) {
            prepareInputOutputTensor(
              outputTensors[i],
              outputTensorHandles,
              inputOutputAllocs,
              sessionId,
              inputCount + outputIndices[i]
            );
          }
          let inputValuesIndex = inputValuesOffset / 4;
          let inputNamesIndex = inputNamesOffset / 4;
          let outputValuesIndex = outputValuesOffset / 4;
          let outputNamesIndex = outputNamesOffset / 4;
          for (let i = 0; i < inputCount; i++) {
            wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];
            wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];
          }
          for (let i = 0; i < outputCount; i++) {
            wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];
            wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];
          }
          if (false) {
            const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;
            if (inputNamesUTF8Encoded.length !== inputCount) {
              throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`);
            }
            for (let i = 0; i < inputCount; i++) {
              const index = inputIndices[i];
              const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);
              if (errorCode2 !== 0) {
                checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);
              }
            }
            for (let i = 0; i < outputCount; i++) {
              const index = outputIndices[i];
              const location = outputTensors[i]?.[3];
              if (location) {
                const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);
                if (errorCode2 !== 0) {
                  checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);
                }
              } else {
                const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);
                if (errorCode2 !== 0) {
                  checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);
                }
              }
            }
          }
          let errorCode;
          if (false) {
            errorCode = await wasm2._OrtRunWithBinding(
              sessionHandle,
              ioBindingState.handle,
              outputCount,
              outputValuesOffset,
              runOptionsHandle
            );
          } else {
            errorCode = await wasm2._OrtRun(
              sessionHandle,
              inputNamesOffset,
              inputValuesOffset,
              inputCount,
              outputNamesOffset,
              outputCount,
              outputValuesOffset,
              runOptionsHandle
            );
          }
          if (errorCode !== 0) {
            checkLastError("failed to call OrtRun().");
          }
          const output = [];
          for (let i = 0; i < outputCount; i++) {
            const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];
            if (tensor === outputTensorHandles[i]) {
              output.push(outputTensors[i]);
              continue;
            }
            const beforeGetTensorDataStack = wasm2.stackSave();
            const tensorDataOffset = wasm2.stackAlloc(4 * 4);
            let keepOutputTensor = false;
            let type, dataOffset = 0;
            try {
              const errorCode2 = wasm2._OrtGetTensorData(
                tensor,
                tensorDataOffset,
                tensorDataOffset + 4,
                tensorDataOffset + 8,
                tensorDataOffset + 12
              );
              if (errorCode2 !== 0) {
                checkLastError(`Can't access output tensor data on index ${i}.`);
              }
              let tensorDataIndex = tensorDataOffset / 4;
              const dataType = wasm2.HEAPU32[tensorDataIndex++];
              dataOffset = wasm2.HEAPU32[tensorDataIndex++];
              const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];
              const dimsLength = wasm2.HEAPU32[tensorDataIndex++];
              const dims = [];
              for (let i2 = 0; i2 < dimsLength; i2++) {
                dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);
              }
              wasm2._OrtFree(dimsOffset);
              const size = dims.reduce((a, b) => a * b, 1);
              type = tensorDataTypeEnumToString(dataType);
              const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];
              if (type === "string") {
                if (preferredLocation === "gpu-buffer") {
                  throw new Error("String tensor is not supported on GPU.");
                }
                const stringData = [];
                let dataIndex = dataOffset / 4;
                for (let i2 = 0; i2 < size; i2++) {
                  const offset = wasm2.HEAPU32[dataIndex++];
                  const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;
                  stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));
                }
                output.push([type, dims, stringData, "cpu"]);
              } else {
                if (preferredLocation === "gpu-buffer" && size > 0) {
                  const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);
                  const elementSize = getTensorElementSize(dataType);
                  if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {
                    throw new Error(`Unsupported data type: ${type}`);
                  }
                  keepOutputTensor = true;
                  output.push([
                    type,
                    dims,
                    {
                      gpuBuffer,
                      download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),
                      dispose: () => {
                        wasm2._OrtReleaseTensor(tensor);
                      }
                    },
                    "gpu-buffer"
                  ]);
                } else {
                  const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);
                  const data = new typedArrayConstructor(size);
                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));
                  output.push([type, dims, data, "cpu"]);
                }
              }
            } finally {
              wasm2.stackRestore(beforeGetTensorDataStack);
              if (type === "string" && dataOffset) {
                wasm2._free(dataOffset);
              }
              if (!keepOutputTensor) {
                wasm2._OrtReleaseTensor(tensor);
              }
            }
          }
          if (ioBindingState) {
            wasm2._OrtClearBoundOutputs(ioBindingState.handle);
          }
          return output;
        } finally {
          wasm2.stackRestore(beforeRunStack);
          inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          inputOutputAllocs.forEach((p) => wasm2._free(p));
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          runOptionsAllocs.forEach((p) => wasm2._free(p));
        }
      };
      endProfiling = (sessionId) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error("invalid session id");
        }
        const sessionHandle = session[0];
        const profileFileName = wasm2._OrtEndProfiling(sessionHandle);
        if (profileFileName === 0) {
          checkLastError("Can't get an profile file name.");
        }
        wasm2._OrtFree(profileFileName);
      };
      extractTransferableBuffers = (tensors) => {
        const buffers = [];
        for (const tensor of tensors) {
          const data = tensor[2];
          if (!Array.isArray(data) && "buffer" in data) {
            buffers.push(data.buffer);
          }
        }
        return buffers;
      };
    }
  });

  // proxy-worker:./proxy-worker/main
  var require_main = __commonJS({
    "proxy-worker:./proxy-worker/main"(exports, module) {
      module.exports = '/*!\n * ONNX Runtime Web v1.17.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";\n(() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === "object" || typeof from === "function") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n\n  // nodejs-ignore:fs\n  var fs_exports = {};\n  __export(fs_exports, {\n    readFile: () => readFile\n  });\n  var readFile;\n  var init_fs = __esm({\n    "nodejs-ignore:fs"() {\n      readFile = void 0;\n    }\n  });\n\n  // nodejs-ignore:path\n  var path_exports = {};\n  __export(path_exports, {\n    join: () => join2\n  });\n  var join2;\n  var init_path = __esm({\n    "nodejs-ignore:path"() {\n      join2 = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm.js\n  var require_ort_wasm = __commonJS({\n    "web/lib/wasm/binding/ort-wasm.js"(exports, module) {\n      "use strict";\n      var ortWasm = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          var h = moduleArg, aa, ba;\n          h.ready = new Promise((a, b) => {\n            aa = a;\n            ba = b;\n          });\n          var ca = Object.assign({}, h), da = "./this.program", ea = "object" == typeof window, m = "function" == typeof importScripts, fa = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, p = "", ha, t, w;\n          if (fa) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), ia = (init_path(), __toCommonJS(path_exports));\n            p = m ? ia.dirname(p) + "/" : __dirname + "/";\n            ha = (a, b) => {\n              a = a.startsWith("file://") ? new URL(a) : ia.normalize(a);\n              return fs.readFileSync(a, b ? void 0 : "utf8");\n            };\n            w = (a) => {\n              a = ha(a, true);\n              a.buffer || (a = new Uint8Array(a));\n              return a;\n            };\n            t = (a, b, c, d = true) => {\n              a = a.startsWith("file://") ? new URL(a) : ia.normalize(a);\n              fs.readFile(a, d ? void 0 : "utf8", (e, g) => {\n                e ? c(e) : b(d ? g.buffer : g);\n              });\n            };\n            !h.thisProgram && 1 < process.argv.length && (da = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            h.inspect = () => "[Emscripten Module object]";\n          } else if (ea || m)\n            m ? p = self.location.href : "undefined" != typeof document && document.currentScript && (p = document.currentScript.src), _scriptDir && (p = _scriptDir), 0 !== p.indexOf("blob:") ? p = p.substr(0, p.replace(/[?#].*/, "").lastIndexOf("/") + 1) : p = "", ha = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, m && (w = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), t = (a, b, c) => {\n              var d = new XMLHttpRequest();\n              d.open("GET", a, true);\n              d.responseType = "arraybuffer";\n              d.onload = () => {\n                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();\n              };\n              d.onerror = c;\n              d.send(null);\n            };\n          var ja = console.log.bind(console), x = console.error.bind(console);\n          Object.assign(h, ca);\n          ca = null;\n          "object" != typeof WebAssembly && ka("no native wasm support detected");\n          var z, la = false, A, B, C, D, E, G, ma, na, oa, pa;\n          function qa() {\n            var a = z.buffer;\n            h.HEAP8 = A = new Int8Array(a);\n            h.HEAP16 = C = new Int16Array(a);\n            h.HEAPU8 = B = new Uint8Array(a);\n            h.HEAPU16 = D = new Uint16Array(a);\n            h.HEAP32 = E = new Int32Array(a);\n            h.HEAPU32 = G = new Uint32Array(a);\n            h.HEAPF32 = ma = new Float32Array(a);\n            h.HEAPF64 = pa = new Float64Array(a);\n            h.HEAP64 = na = new BigInt64Array(a);\n            h.HEAPU64 = oa = new BigUint64Array(a);\n          }\n          var ra = [], sa = [], ta = [], I = 0, ua = null, J = null;\n          function ka(a) {\n            a = "Aborted(" + a + ")";\n            x(a);\n            la = true;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            ba(a);\n            throw a;\n          }\n          function va(a) {\n            return a.startsWith("data:application/octet-stream;base64,");\n          }\n          var K;\n          K = "ort-wasm.wasm";\n          if (!va(K)) {\n            var wa = K;\n            K = h.locateFile ? h.locateFile(wa, p) : p + wa;\n          }\n          function xa(a) {\n            if (w)\n              return w(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function ya(a) {\n            if (ea || m) {\n              if ("function" == typeof fetch && !a.startsWith("file://"))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => xa(a));\n              if (t)\n                return new Promise((b, c) => {\n                  t(a, (d) => b(new Uint8Array(d)), c);\n                });\n            }\n            return Promise.resolve().then(() => xa(a));\n          }\n          function za(a, b, c) {\n            return ya(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {\n              x(`failed to asynchronously prepare wasm: ${d}`);\n              ka(d);\n            });\n          }\n          function Aa(a, b) {\n            var c = K;\n            return "function" != typeof WebAssembly.instantiateStreaming || va(c) || c.startsWith("file://") || fa || "function" != typeof fetch ? za(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(e) {\n              x(`wasm streaming compile failed: ${e}`);\n              x("falling back to ArrayBuffer instantiation");\n              return za(c, a, b);\n            }));\n          }\n          function Ba(a) {\n            this.Va = a - 24;\n            this.fb = function(b) {\n              G[this.Va + 4 >>> 2 >>> 0] = b;\n            };\n            this.eb = function(b) {\n              G[this.Va + 8 >>> 2 >>> 0] = b;\n            };\n            this.Za = function(b, c) {\n              this.$a();\n              this.fb(b);\n              this.eb(c);\n            };\n            this.$a = function() {\n              G[this.Va + 16 >>> 2 >>> 0] = 0;\n            };\n          }\n          var Ca = 0, Da = 0, Ea = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Fa = (a, b, c) => {\n            b >>>= 0;\n            var d = b + c;\n            for (c = b; a[c] && !(c >= d); )\n              ++c;\n            if (16 < c - b && a.buffer && Ea)\n              return Ea.decode(a.subarray(b, c));\n            for (d = ""; b < c; ) {\n              var e = a[b++];\n              if (e & 128) {\n                var g = a[b++] & 63;\n                if (192 == (e & 224))\n                  d += String.fromCharCode((e & 31) << 6 | g);\n                else {\n                  var l = a[b++] & 63;\n                  e = 224 == (e & 240) ? (e & 15) << 12 | g << 6 | l : (e & 7) << 18 | g << 12 | l << 6 | a[b++] & 63;\n                  65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));\n                }\n              } else\n                d += String.fromCharCode(e);\n            }\n            return d;\n          }, L = (a, b) => (a >>>= 0) ? Fa(B, a, b) : "", M = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, N = (a, b, c, d) => {\n            c >>>= 0;\n            if (!(0 < d))\n              return 0;\n            var e = c;\n            d = c + d - 1;\n            for (var g = 0; g < a.length; ++g) {\n              var l = a.charCodeAt(g);\n              if (55296 <= l && 57343 >= l) {\n                var k = a.charCodeAt(++g);\n                l = 65536 + ((l & 1023) << 10) | k & 1023;\n              }\n              if (127 >= l) {\n                if (c >= d)\n                  break;\n                b[c++ >>> 0] = l;\n              } else {\n                if (2047 >= l) {\n                  if (c + 1 >= d)\n                    break;\n                  b[c++ >>> 0] = 192 | l >> 6;\n                } else {\n                  if (65535 >= l) {\n                    if (c + 2 >= d)\n                      break;\n                    b[c++ >>> 0] = 224 | l >> 12;\n                  } else {\n                    if (c + 3 >= d)\n                      break;\n                    b[c++ >>> 0] = 240 | l >> 18;\n                    b[c++ >>> 0] = 128 | l >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | l >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | l & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - e;\n          }, Ga = (a) => {\n            if (null === a)\n              return "null";\n            var b = typeof a;\n            return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;\n          }, Ha, O = (a) => {\n            for (var b = ""; B[a >>> 0]; )\n              b += Ha[B[a++ >>> 0]];\n            return b;\n          }, Ia = {}, Ja = {}, Ka = {}, P;\n          function La(a, b, c = {}) {\n            var d = b.name;\n            if (!a)\n              throw new P(`type "${d}" must have a positive integer typeid pointer`);\n            if (Ja.hasOwnProperty(a)) {\n              if (c.gb)\n                return;\n              throw new P(`Cannot register type \'${d}\' twice`);\n            }\n            Ja[a] = b;\n            delete Ka[a];\n            Ia.hasOwnProperty(a) && (b = Ia[a], delete Ia[a], b.forEach((e) => e()));\n          }\n          function Q(a, b, c = {}) {\n            if (!("argPackAdvance" in b))\n              throw new TypeError("registerType registeredInstance requires argPackAdvance");\n            La(a, b, c);\n          }\n          var Ma = (a, b, c) => {\n            switch (b) {\n              case 1:\n                return c ? (d) => A[d >>> 0 >>> 0] : (d) => B[d >>> 0 >>> 0];\n              case 2:\n                return c ? (d) => C[d >>> 1 >>> 0] : (d) => D[d >>> 1 >>> 0];\n              case 4:\n                return c ? (d) => E[d >>> 2 >>> 0] : (d) => G[d >>> 2 >>> 0];\n              case 8:\n                return c ? (d) => na[d >>> 3] : (d) => oa[d >>> 3];\n              default:\n                throw new TypeError(`invalid integer width (${b}): ${a}`);\n            }\n          };\n          function Na() {\n            this.Sa = [void 0];\n            this.bb = [];\n          }\n          var R = new Na();\n          function Oa(a) {\n            a >>>= 0;\n            a >= R.Va && 0 === --R.get(a).cb && R.$a(a);\n          }\n          var S = (a) => {\n            if (!a)\n              throw new P("Cannot use deleted val. handle = " + a);\n            return R.get(a).value;\n          }, T = (a) => {\n            switch (a) {\n              case void 0:\n                return 1;\n              case null:\n                return 2;\n              case true:\n                return 3;\n              case false:\n                return 4;\n              default:\n                return R.Za({ cb: 1, value: a });\n            }\n          };\n          function Pa(a) {\n            return this.fromWireType(E[a >>> 2 >>> 0]);\n          }\n          var Qa = (a, b) => {\n            switch (b) {\n              case 4:\n                return function(c) {\n                  return this.fromWireType(ma[c >>> 2 >>> 0]);\n                };\n              case 8:\n                return function(c) {\n                  return this.fromWireType(pa[c >>> 3 >>> 0]);\n                };\n              default:\n                throw new TypeError(`invalid float width (${b}): ${a}`);\n            }\n          };\n          function Ra(a) {\n            return this.fromWireType(G[a >>> 2 >>> 0]);\n          }\n          var Sa = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, Ta = (a, b) => {\n            var c = a >> 1;\n            for (var d = c + b / 2; !(c >= d) && D[c >>> 0]; )\n              ++c;\n            c <<= 1;\n            if (32 < c - a && Sa)\n              return Sa.decode(B.subarray(a >>> 0, c >>> 0));\n            c = "";\n            for (d = 0; !(d >= b / 2); ++d) {\n              var e = C[a + 2 * d >>> 1 >>> 0];\n              if (0 == e)\n                break;\n              c += String.fromCharCode(e);\n            }\n            return c;\n          }, Ua = (a, b, c) => {\n            void 0 === c && (c = 2147483647);\n            if (2 > c)\n              return 0;\n            c -= 2;\n            var d = b;\n            c = c < 2 * a.length ? c / 2 : a.length;\n            for (var e = 0; e < c; ++e)\n              C[b >>> 1 >>> 0] = a.charCodeAt(e), b += 2;\n            C[b >>> 1 >>> 0] = 0;\n            return b - d;\n          }, Va = (a) => 2 * a.length, Wa = (a, b) => {\n            for (var c = 0, d = ""; !(c >= b / 4); ) {\n              var e = E[a + 4 * c >>> 2 >>> 0];\n              if (0 == e)\n                break;\n              ++c;\n              65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e);\n            }\n            return d;\n          }, Xa = (a, b, c) => {\n            b >>>= 0;\n            void 0 === c && (c = 2147483647);\n            if (4 > c)\n              return 0;\n            var d = b;\n            c = d + c - 4;\n            for (var e = 0; e < a.length; ++e) {\n              var g = a.charCodeAt(e);\n              if (55296 <= g && 57343 >= g) {\n                var l = a.charCodeAt(++e);\n                g = 65536 + ((g & 1023) << 10) | l & 1023;\n              }\n              E[b >>> 2 >>> 0] = g;\n              b += 4;\n              if (b + 4 > c)\n                break;\n            }\n            E[b >>> 2 >>> 0] = 0;\n            return b - d;\n          }, Ya = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              55296 <= d && 57343 >= d && ++c;\n              b += 4;\n            }\n            return b;\n          }, V = (a, b) => {\n            var c = Ja[a];\n            if (void 0 === c)\n              throw a = Za(a), c = O(a), U(a), new P(b + " has unknown type " + c);\n            return c;\n          }, $a = {}, W = (a) => {\n            var b = $a[a];\n            return void 0 === b ? O(a) : b;\n          }, X = [], bb = () => "object" == typeof globalThis ? globalThis : Function("return this")(), cb = (a) => {\n            var b = X.length;\n            X.push(a);\n            return b;\n          }, db = (a, b) => {\n            for (var c = Array(a), d = 0; d < a; ++d)\n              c[d] = V(G[b + 4 * d >>> 2 >>> 0], "parameter " + d);\n            return c;\n          }, eb = (a) => {\n            if (void 0 === a)\n              return "_unknown";\n            a = a.replace(/[^a-zA-Z0-9_]/g, "$");\n            var b = a.charCodeAt(0);\n            return 48 <= b && 57 >= b ? `_${a}` : a;\n          }, fb = {};\n          function gb(a, b) {\n            a = eb(a);\n            return { [a]: function() {\n              return b.apply(this, arguments);\n            } }[a];\n          }\n          function hb(a) {\n            var b = Function;\n            if (!(b instanceof Function))\n              throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);\n            var c = gb(b.name || "unknownFunctionName", function() {\n            });\n            c.prototype = b.prototype;\n            c = new c();\n            a = b.apply(c, a);\n            return a instanceof Object ? a : c;\n          }\n          var ib = (a) => {\n            for (var b = "", c = 0; c < a; ++c)\n              b += (0 !== c ? ", " : "") + "arg" + c;\n            var d = "return function emval_allocator_" + a + "(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n";\n            for (c = 0; c < a; ++c)\n              d += "var argType" + c + " = requireRegisteredType(HEAPU32[((argTypes)>>>2)], \'parameter " + c + "\');\\nvar arg" + c + " = argType" + c + ".readValueFromPointer(args);\\nargs += argType" + c + "[\'argPackAdvance\'];\\nargTypes += 4;\\n";\n            return new Function("requireRegisteredType", "Module", "valueToHandle", "getMemory", d + ("var obj = new constructor(" + b + ");\\nreturn valueToHandle(obj);\\n}\\n"))(V, h, T, () => G);\n          }, jb = {}, Y = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), kb = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], lb = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], nb = (a) => {\n            var b = M(a) + 1, c = mb(b);\n            c && N(a, B, c, b);\n            return c;\n          }, ob = {}, qb = () => {\n            if (!pb) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: da || "./this.program" }, b;\n              for (b in ob)\n                void 0 === ob[b] ? delete a[b] : a[b] = ob[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              pb = c;\n            }\n            return pb;\n          }, pb, rb = [null, [], []], sb = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], tb = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function ub(a) {\n            var b = Array(M(a) + 1);\n            N(a, b, 0, b.length);\n            return b;\n          }\n          function vb(a, b, c, d) {\n            function e(f, r, u) {\n              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < r; )\n                f = u[0] + f;\n              return f;\n            }\n            function g(f, r) {\n              return e(f, r, "0");\n            }\n            function l(f, r) {\n              function u(ab) {\n                return 0 > ab ? -1 : 0 < ab ? 1 : 0;\n              }\n              var H;\n              0 === (H = u(f.getFullYear() - r.getFullYear())) && 0 === (H = u(f.getMonth() - r.getMonth())) && (H = u(f.getDate() - r.getDate()));\n              return H;\n            }\n            function k(f) {\n              switch (f.getDay()) {\n                case 0:\n                  return new Date(f.getFullYear() - 1, 11, 29);\n                case 1:\n                  return f;\n                case 2:\n                  return new Date(f.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    f.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(f.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(f.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(f.getFullYear() - 1, 11, 30);\n              }\n            }\n            function n(f) {\n              var r = f.Ta;\n              for (f = new Date(new Date(f.Ua + 1900, 0, 1).getTime()); 0 < r; ) {\n                var u = f.getMonth(), H = (Y(f.getFullYear()) ? sb : tb)[u];\n                if (r > H - f.getDate())\n                  r -= H - f.getDate() + 1, f.setDate(1), 11 > u ? f.setMonth(u + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));\n                else {\n                  f.setDate(f.getDate() + r);\n                  break;\n                }\n              }\n              u = new Date(f.getFullYear() + 1, 0, 4);\n              r = k(new Date(\n                f.getFullYear(),\n                0,\n                4\n              ));\n              u = k(u);\n              return 0 >= l(r, f) ? 0 >= l(u, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            var q = G[d + 40 >>> 2 >>> 0];\n            d = { kb: E[d >>> 2 >>> 0], jb: E[d + 4 >>> 2 >>> 0], Xa: E[d + 8 >>> 2 >>> 0], ab: E[d + 12 >>> 2 >>> 0], Ya: E[d + 16 >>> 2 >>> 0], Ua: E[d + 20 >>> 2 >>> 0], Oa: E[d + 24 >>> 2 >>> 0], Ta: E[d + 28 >>> 2 >>> 0], mb: E[d + 32 >>> 2 >>> 0], ib: E[d + 36 >>> 2 >>> 0], lb: q ? L(q) : "" };\n            c = L(c);\n            q = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var v in q)\n              c = c.replace(new RegExp(v, "g"), q[v]);\n            var y = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), F = "January February March April May June July August September October November December".split(" ");\n            q = { "%a": (f) => y[f.Oa].substring(0, 3), "%A": (f) => y[f.Oa], "%b": (f) => F[f.Ya].substring(0, 3), "%B": (f) => F[f.Ya], "%C": (f) => g((f.Ua + 1900) / 100 | 0, 2), "%d": (f) => g(f.ab, 2), "%e": (f) => e(f.ab, 2, " "), "%g": (f) => n(f).toString().substring(2), "%G": (f) => n(f), "%H": (f) => g(f.Xa, 2), "%I": (f) => {\n              f = f.Xa;\n              0 == f ? f = 12 : 12 < f && (f -= 12);\n              return g(f, 2);\n            }, "%j": (f) => {\n              for (var r = 0, u = 0; u <= f.Ya - 1; r += (Y(f.Ua + 1900) ? sb : tb)[u++])\n                ;\n              return g(f.ab + r, 3);\n            }, "%m": (f) => g(f.Ya + 1, 2), "%M": (f) => g(f.jb, 2), "%n": () => "\\n", "%p": (f) => 0 <= f.Xa && 12 > f.Xa ? "AM" : "PM", "%S": (f) => g(f.kb, 2), "%t": () => "	", "%u": (f) => f.Oa || 7, "%U": (f) => g(Math.floor((f.Ta + 7 - f.Oa) / 7), 2), "%V": (f) => {\n              var r = Math.floor((f.Ta + 7 - (f.Oa + 6) % 7) / 7);\n              2 >= (f.Oa + 371 - f.Ta - 2) % 7 && r++;\n              if (r)\n                53 == r && (u = (f.Oa + 371 - f.Ta) % 7, 4 == u || 3 == u && Y(f.Ua) || (r = 1));\n              else {\n                r = 52;\n                var u = (f.Oa + 7 - f.Ta - 1) % 7;\n                (4 == u || 5 == u && Y(f.Ua % 400 - 1)) && r++;\n              }\n              return g(r, 2);\n            }, "%w": (f) => f.Oa, "%W": (f) => g(Math.floor((f.Ta + 7 - (f.Oa + 6) % 7) / 7), 2), "%y": (f) => (f.Ua + 1900).toString().substring(2), "%Y": (f) => f.Ua + 1900, "%z": (f) => {\n              f = f.ib;\n              var r = 0 <= f;\n              f = Math.abs(f) / 60;\n              return (r ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);\n            }, "%Z": (f) => f.lb, "%%": () => "%" };\n            c = c.replace(/%%/g, "\\0\\0");\n            for (v in q)\n              c.includes(v) && (c = c.replace(new RegExp(v, "g"), q[v](d)));\n            c = c.replace(/\\0\\0/g, "%");\n            v = ub(c);\n            if (v.length > b)\n              return 0;\n            A.set(v, a >>> 0);\n            return v.length - 1;\n          }\n          for (var wb = Array(256), xb = 0; 256 > xb; ++xb)\n            wb[xb] = String.fromCharCode(xb);\n          Ha = wb;\n          P = h.BindingError = class extends Error {\n            constructor(a) {\n              super(a);\n              this.name = "BindingError";\n            }\n          };\n          h.InternalError = class extends Error {\n            constructor(a) {\n              super(a);\n              this.name = "InternalError";\n            }\n          };\n          Object.assign(Na.prototype, { get(a) {\n            return this.Sa[a];\n          }, has(a) {\n            return void 0 !== this.Sa[a];\n          }, Za(a) {\n            var b = this.bb.pop() || this.Sa.length;\n            this.Sa[b] = a;\n            return b;\n          }, $a(a) {\n            this.Sa[a] = void 0;\n            this.bb.push(a);\n          } });\n          R.Sa.push({ value: void 0 }, { value: null }, { value: true }, { value: false });\n          R.Va = R.Sa.length;\n          h.count_emval_handles = () => {\n            for (var a = 0, b = R.Va; b < R.Sa.length; ++b)\n              void 0 !== R.Sa[b] && ++a;\n            return a;\n          };\n          var yb = { a: function(a, b, c) {\n            a >>>= 0;\n            new Ba(a).Za(b >>> 0, c >>> 0);\n            Ca = a;\n            Da++;\n            throw Ca;\n          }, v: function() {\n            return 0;\n          }, ba: function() {\n          }, N: function() {\n          }, P: function() {\n          }, H: function() {\n            return 0;\n          }, $: function() {\n          }, V: function() {\n          }, _: function() {\n          }, B: function() {\n          }, O: function() {\n          }, L: function() {\n          }, aa: function() {\n          }, M: function() {\n          }, E: function(a, b, c, d, e) {\n            b >>>= 0;\n            b = O(b);\n            var g = -1 != b.indexOf("u");\n            g && (e = (1n << 64n) - 1n);\n            Q(a >>> 0, { name: b, fromWireType: (l) => l, toWireType: function(l, k) {\n              if ("bigint" != typeof k && "number" != typeof k)\n                throw new TypeError(`Cannot convert "${Ga(k)}" to ${this.name}`);\n              if (k < d || k > e)\n                throw new TypeError(`Passing a number "${Ga(k)}" from JS side to C/C++ side to an argument of type "${b}", which is outside the valid range [${d}, ${e}]!`);\n              return k;\n            }, argPackAdvance: 8, readValueFromPointer: Ma(b, c >>> 0, !g), Wa: null });\n          }, ea: function(a, b, c, d) {\n            b = O(b >>> 0);\n            Q(a >>> 0, { name: b, fromWireType: function(e) {\n              return !!e;\n            }, toWireType: function(e, g) {\n              return g ? c : d;\n            }, argPackAdvance: 8, readValueFromPointer: function(e) {\n              return this.fromWireType(B[e >>> 0]);\n            }, Wa: null });\n          }, da: function(a, b) {\n            b = O(b >>> 0);\n            Q(a >>> 0, {\n              name: b,\n              fromWireType: (c) => {\n                var d = S(c);\n                Oa(c);\n                return d;\n              },\n              toWireType: (c, d) => T(d),\n              argPackAdvance: 8,\n              readValueFromPointer: Pa,\n              Wa: null\n            });\n          }, D: function(a, b, c) {\n            b = O(b >>> 0);\n            Q(a >>> 0, { name: b, fromWireType: (d) => d, toWireType: (d, e) => e, argPackAdvance: 8, readValueFromPointer: Qa(b, c >>> 0), Wa: null });\n          }, p: function(a, b, c, d, e) {\n            a >>>= 0;\n            c >>>= 0;\n            b = O(b >>> 0);\n            -1 === e && (e = 4294967295);\n            e = (k) => k;\n            if (0 === d) {\n              var g = 32 - 8 * c;\n              e = (k) => k << g >>> g;\n            }\n            var l = b.includes("unsigned") ? function(k, n) {\n              return n >>> 0;\n            } : function(k, n) {\n              return n;\n            };\n            Q(a, {\n              name: b,\n              fromWireType: e,\n              toWireType: l,\n              argPackAdvance: 8,\n              readValueFromPointer: Ma(b, c, 0 !== d),\n              Wa: null\n            });\n          }, l: function(a, b, c) {\n            function d(g) {\n              return new e(A.buffer, G[g + 4 >>> 2 >>> 0], G[g >>> 2 >>> 0]);\n            }\n            var e = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][b];\n            c = O(c >>> 0);\n            Q(a >>> 0, { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d }, { gb: true });\n          }, F: function(a, b) {\n            b = O(b >>> 0);\n            var c = "std::string" === b;\n            Q(a >>> 0, { name: b, fromWireType: function(d) {\n              var e = G[d >>> 2 >>> 0], g = d + 4;\n              if (c)\n                for (var l = g, k = 0; k <= e; ++k) {\n                  var n = g + k;\n                  if (k == e || 0 == B[n >>> 0]) {\n                    l = L(l, n - l);\n                    if (void 0 === q)\n                      var q = l;\n                    else\n                      q += String.fromCharCode(0), q += l;\n                    l = n + 1;\n                  }\n                }\n              else {\n                q = Array(e);\n                for (k = 0; k < e; ++k)\n                  q[k] = String.fromCharCode(B[g + k >>> 0]);\n                q = q.join("");\n              }\n              U(d);\n              return q;\n            }, toWireType: function(d, e) {\n              e instanceof ArrayBuffer && (e = new Uint8Array(e));\n              var g = "string" == typeof e;\n              if (!(g || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array))\n                throw new P("Cannot pass non-string to std::string");\n              var l = c && g ? M(e) : e.length;\n              var k = mb(4 + l + 1), n = k + 4;\n              G[k >>> 2 >>> 0] = l;\n              if (c && g)\n                N(e, B, n, l + 1);\n              else if (g)\n                for (g = 0; g < l; ++g) {\n                  var q = e.charCodeAt(g);\n                  if (255 < q)\n                    throw U(n), new P("String has UTF-16 code units that do not fit in 8 bits");\n                  B[n + g >>> 0] = q;\n                }\n              else\n                for (g = 0; g < l; ++g)\n                  B[n + g >>> 0] = e[g];\n              null !== d && d.push(U, k);\n              return k;\n            }, argPackAdvance: 8, readValueFromPointer: Ra, Wa(d) {\n              U(d);\n            } });\n          }, x: function(a, b, c) {\n            b >>>= 0;\n            c >>>= 0;\n            c = O(c);\n            if (2 === b) {\n              var d = Ta;\n              var e = Ua;\n              var g = Va;\n              var l = () => D;\n              var k = 1;\n            } else\n              4 === b && (d = Wa, e = Xa, g = Ya, l = () => G, k = 2);\n            Q(a >>> 0, { name: c, fromWireType: (n) => {\n              for (var q = G[n >>> 2 >>> 0], v = l(), y, F = n + 4, f = 0; f <= q; ++f) {\n                var r = n + 4 + f * b;\n                if (f == q || 0 == v[r >>> k])\n                  F = d(F, r - F), void 0 === y ? y = F : (y += String.fromCharCode(0), y += F), F = r + b;\n              }\n              U(n);\n              return y;\n            }, toWireType: (n, q) => {\n              if ("string" != typeof q)\n                throw new P(`Cannot pass non-string to C++ string type ${c}`);\n              var v = g(q), y = mb(4 + v + b);\n              G[y >>> 2] = v >> k;\n              e(q, y + 4, v + b);\n              null !== n && n.push(U, y);\n              return y;\n            }, argPackAdvance: 8, readValueFromPointer: Pa, Wa(n) {\n              U(n);\n            } });\n          }, fa: function(a, b) {\n            b = O(b >>> 0);\n            Q(a >>> 0, { hb: true, name: b, argPackAdvance: 0, fromWireType: () => {\n            }, toWireType: () => {\n            } });\n          }, ca: () => true, o: function(a, b, c) {\n            b >>>= 0;\n            c >>>= 0;\n            a = S(a >>> 0);\n            b = V(b, "emval::as");\n            var d = [], e = T(d);\n            G[c >>> 2 >>> 0] = e;\n            return b.toWireType(d, a);\n          }, h: function(a, b, c, d, e) {\n            c >>>= 0;\n            d >>>= 0;\n            e >>>= 0;\n            a = X[a >>> 0];\n            b = S(b >>> 0);\n            c = W(c);\n            var g = [];\n            G[d >>> 2 >>> 0] = T(g);\n            return a(b, c, g, e);\n          }, r: function(a, b, c, d) {\n            c >>>= 0;\n            d >>>= 0;\n            a = X[a >>> 0];\n            b = S(b >>> 0);\n            c = W(c);\n            a(b, c, null, d);\n          }, b: Oa, y: function(a, b) {\n            b >>>= 0;\n            a = S(a >>> 0);\n            b = S(b);\n            return a == b;\n          }, u: function(a) {\n            a >>>= 0;\n            if (0 === a)\n              return T(bb());\n            a = W(a);\n            return T(bb()[a]);\n          }, g: function(a, b) {\n            var c = db(a, b >>> 0), d = c[0];\n            b = d.name + "_$" + c.slice(1).map(function(v) {\n              return v.name;\n            }).join("_") + "$";\n            var e = fb[b];\n            if (void 0 !== e)\n              return e;\n            e = ["retType"];\n            for (var g = [d], l = "", k = 0; k < a - 1; ++k)\n              l += (0 !== k ? ", " : "") + "arg" + k, e.push("argType" + k), g.push(c[1 + k]);\n            var n = "return function " + eb("methodCaller_" + b) + "(handle, name, destructors, args) {\\n", q = 0;\n            for (k = 0; k < a - 1; ++k)\n              n += "    var arg" + k + " = argType" + k + ".readValueFromPointer(args" + (q ? "+" + q : "") + ");\\n", q += c[k + 1].argPackAdvance;\n            n += "    var rv = handle[name](" + l + ");\\n";\n            for (k = 0; k < a - 1; ++k)\n              c[k + 1].deleteObject && (n += "    argType" + k + ".deleteObject(arg" + k + ");\\n");\n            d.hb || (n += "    return retType.toWireType(destructors, rv);\\n");\n            e.push(n + "};\\n");\n            a = hb(e).apply(null, g);\n            e = cb(a);\n            return fb[b] = e;\n          }, q: function(a, b) {\n            b >>>= 0;\n            a = S(a >>> 0);\n            b = S(b);\n            return T(a[b]);\n          }, c: function(a) {\n            a >>>= 0;\n            4 < a && (R.get(a).cb += 1);\n          }, G: function(a, b, c, d) {\n            c >>>= 0;\n            d >>>= 0;\n            a = S(a >>> 0);\n            var e = jb[b];\n            e || (e = ib(b), jb[b] = e);\n            return e(a, c, d);\n          }, s: function() {\n            return T([]);\n          }, k: function(a) {\n            a = S(a >>> 0);\n            for (var b = Array(a.length), c = 0; c < a.length; c++)\n              b[c] = a[c];\n            return T(b);\n          }, d: function(a) {\n            return T(W(a >>> 0));\n          }, j: function() {\n            return T({});\n          }, e: function(a) {\n            a >>>= 0;\n            for (var b = S(a); b.length; ) {\n              var c = b.pop();\n              b.pop()(c);\n            }\n            Oa(a);\n          }, i: function(a, b, c) {\n            b >>>= 0;\n            c >>>= 0;\n            a = S(a >>> 0);\n            b = S(b);\n            c = S(c);\n            a[b] = c;\n          }, f: function(a, b) {\n            b >>>= 0;\n            a = V(a >>> 0, "_emval_take_value");\n            a = a.readValueFromPointer(b);\n            return T(a);\n          }, S: function(a, b) {\n            a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);\n            b >>>= 0;\n            a = new Date(1e3 * a);\n            E[b >>> 2 >>> 0] = a.getUTCSeconds();\n            E[b + 4 >>> 2 >>> 0] = a.getUTCMinutes();\n            E[b + 8 >>> 2 >>> 0] = a.getUTCHours();\n            E[b + 12 >>> 2 >>> 0] = a.getUTCDate();\n            E[b + 16 >>> 2 >>> 0] = a.getUTCMonth();\n            E[b + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;\n            E[b + 24 >>> 2 >>> 0] = a.getUTCDay();\n            E[b + 28 >>> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n          }, T: function(a, b) {\n            a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);\n            b >>>= 0;\n            a = new Date(1e3 * a);\n            E[b >>> 2 >>> 0] = a.getSeconds();\n            E[b + 4 >>> 2 >>> 0] = a.getMinutes();\n            E[b + 8 >>> 2 >>> 0] = a.getHours();\n            E[b + 12 >>> 2 >>> 0] = a.getDate();\n            E[b + 16 >>> 2 >>> 0] = a.getMonth();\n            E[b + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;\n            E[b + 24 >>> 2 >>> 0] = a.getDay();\n            E[b + 28 >>> 2 >>> 0] = (Y(a.getFullYear()) ? kb : lb)[a.getMonth()] + a.getDate() - 1 | 0;\n            E[b + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n            var c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset(), d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n            E[b + 32 >>> 2 >>> 0] = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;\n          }, U: function(a) {\n            a >>>= 0;\n            var b = new Date(E[a + 20 >>> 2 >>> 0] + 1900, E[a + 16 >>> 2 >>> 0], E[a + 12 >>> 2 >>> 0], E[a + 8 >>> 2 >>> 0], E[a + 4 >>> 2 >>> 0], E[a >>> 2 >>> 0], 0), c = E[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), e = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), g = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), l = Math.min(\n              g,\n              e\n            );\n            0 > c ? E[a + 32 >>> 2 >>> 0] = Number(e != g && l == d) : 0 < c != (l == d) && (e = Math.max(g, e), b.setTime(b.getTime() + 6e4 * ((0 < c ? l : e) - d)));\n            E[a + 24 >>> 2 >>> 0] = b.getDay();\n            E[a + 28 >>> 2 >>> 0] = (Y(b.getFullYear()) ? kb : lb)[b.getMonth()] + b.getDate() - 1 | 0;\n            E[a >>> 2 >>> 0] = b.getSeconds();\n            E[a + 4 >>> 2 >>> 0] = b.getMinutes();\n            E[a + 8 >>> 2 >>> 0] = b.getHours();\n            E[a + 12 >>> 2 >>> 0] = b.getDate();\n            E[a + 16 >>> 2 >>> 0] = b.getMonth();\n            E[a + 20 >>> 2 >>> 0] = b.getYear();\n            return BigInt(b.getTime() / 1e3);\n          }, Q: function() {\n            return -52;\n          }, R: function() {\n          }, J: function(a, b, c) {\n            function d(n) {\n              return (n = n.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? n[1] : "GMT";\n            }\n            c >>>= 0;\n            var e = (/* @__PURE__ */ new Date()).getFullYear(), g = new Date(e, 0, 1), l = new Date(e, 6, 1);\n            e = g.getTimezoneOffset();\n            var k = l.getTimezoneOffset();\n            G[a >>> 0 >>> 2 >>> 0] = 60 * Math.max(e, k);\n            E[b >>> 0 >>> 2 >>> 0] = Number(e != k);\n            a = d(g);\n            b = d(l);\n            a = nb(a);\n            b = nb(b);\n            k < e ? (G[c >>> 2 >>> 0] = a, G[c + 4 >>> 2 >>> 0] = b) : (G[c >>> 2 >>> 0] = b, G[c + 4 >>> 2 >>> 0] = a);\n          }, t: () => {\n            ka("");\n          }, C: () => Date.now(), K: function() {\n            return 4294901760;\n          }, n: () => performance.now(), Z: function(a, b, c) {\n            b >>>= 0;\n            return B.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);\n          }, I: function(a) {\n            a >>>= 0;\n            var b = B.length;\n            if (4294901760 < a)\n              return false;\n            for (var c = 1; 4 >= c; c *= 2) {\n              var d = b * (1 + 0.2 / c);\n              d = Math.min(d, a + 100663296);\n              var e = Math;\n              d = Math.max(a, d);\n              a: {\n                e = (e.min.call(e, 4294901760, d + (65536 - d % 65536) % 65536) - z.buffer.byteLength + 65535) / 65536;\n                try {\n                  z.grow(e);\n                  qa();\n                  var g = 1;\n                  break a;\n                } catch (l) {\n                }\n                g = void 0;\n              }\n              if (g)\n                return true;\n            }\n            return false;\n          }, X: function(a, b) {\n            a >>>= 0;\n            b >>>= 0;\n            var c = 0;\n            qb().forEach((d, e) => {\n              var g = b + c;\n              e = G[a + 4 * e >>> 2 >>> 0] = g;\n              for (g = 0; g < d.length; ++g)\n                A[e++ >>> 0 >>> 0] = d.charCodeAt(g);\n              A[e >>> 0 >>> 0] = 0;\n              c += d.length + 1;\n            });\n            return 0;\n          }, Y: function(a, b) {\n            a >>>= 0;\n            b >>>= 0;\n            var c = qb();\n            G[a >>> 2 >>> 0] = c.length;\n            var d = 0;\n            c.forEach((e) => d += e.length + 1);\n            G[b >>> 2 >>> 0] = d;\n            return 0;\n          }, w: () => 52, A: function() {\n            return 52;\n          }, W: function() {\n            return 70;\n          }, z: function(a, b, c, d) {\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            for (var e = 0, g = 0; g < c; g++) {\n              var l = G[b >>> 2 >>> 0], k = G[b + 4 >>> 2 >>> 0];\n              b += 8;\n              for (var n = 0; n < k; n++) {\n                var q = B[l + n >>> 0], v = rb[a];\n                0 === q || 10 === q ? ((1 === a ? ja : x)(Fa(v, 0)), v.length = 0) : v.push(q);\n              }\n              e += k;\n            }\n            G[d >>> 2 >>> 0] = e;\n            return 0;\n          }, ga: vb, m: function(a, b, c, d) {\n            return vb(a >>> 0, b >>> 0, c >>> 0, d >>> 0);\n          } }, Z = function() {\n            var a = { a: yb };\n            I++;\n            Aa(a, function(b) {\n              Z = b.instance.exports;\n              Z = zb();\n              z = Z.ha;\n              qa();\n              sa.unshift(Z.ia);\n              I--;\n              0 == I && (null !== ua && (clearInterval(ua), ua = null), J && (b = J, J = null, b()));\n            }).catch(ba);\n            return {};\n          }();\n          h._OrtInit = (a, b) => (h._OrtInit = Z.ja)(a, b);\n          h._OrtGetLastError = (a, b) => (h._OrtGetLastError = Z.ka)(a, b);\n          h._OrtCreateSessionOptions = (a, b, c, d, e, g, l, k, n, q) => (h._OrtCreateSessionOptions = Z.la)(a, b, c, d, e, g, l, k, n, q);\n          h._OrtAppendExecutionProvider = (a, b) => (h._OrtAppendExecutionProvider = Z.ma)(a, b);\n          h._OrtAddFreeDimensionOverride = (a, b, c) => (h._OrtAddFreeDimensionOverride = Z.na)(a, b, c);\n          h._OrtAddSessionConfigEntry = (a, b, c) => (h._OrtAddSessionConfigEntry = Z.oa)(a, b, c);\n          h._OrtReleaseSessionOptions = (a) => (h._OrtReleaseSessionOptions = Z.pa)(a);\n          h._OrtCreateSession = (a, b, c) => (h._OrtCreateSession = Z.qa)(a, b, c);\n          h._OrtReleaseSession = (a) => (h._OrtReleaseSession = Z.ra)(a);\n          h._OrtGetInputOutputCount = (a, b, c) => (h._OrtGetInputOutputCount = Z.sa)(a, b, c);\n          h._OrtGetInputName = (a, b) => (h._OrtGetInputName = Z.ta)(a, b);\n          h._OrtGetOutputName = (a, b) => (h._OrtGetOutputName = Z.ua)(a, b);\n          h._OrtFree = (a) => (h._OrtFree = Z.va)(a);\n          h._OrtCreateTensor = (a, b, c, d, e, g) => (h._OrtCreateTensor = Z.wa)(a, b, c, d, e, g);\n          h._OrtGetTensorData = (a, b, c, d, e) => (h._OrtGetTensorData = Z.xa)(a, b, c, d, e);\n          h._OrtReleaseTensor = (a) => (h._OrtReleaseTensor = Z.ya)(a);\n          h._OrtCreateRunOptions = (a, b, c, d) => (h._OrtCreateRunOptions = Z.za)(a, b, c, d);\n          h._OrtAddRunConfigEntry = (a, b, c) => (h._OrtAddRunConfigEntry = Z.Aa)(a, b, c);\n          h._OrtReleaseRunOptions = (a) => (h._OrtReleaseRunOptions = Z.Ba)(a);\n          h._OrtCreateBinding = (a) => (h._OrtCreateBinding = Z.Ca)(a);\n          h._OrtBindInput = (a, b, c) => (h._OrtBindInput = Z.Da)(a, b, c);\n          h._OrtBindOutput = (a, b, c, d) => (h._OrtBindOutput = Z.Ea)(a, b, c, d);\n          h._OrtClearBoundOutputs = (a) => (h._OrtClearBoundOutputs = Z.Fa)(a);\n          h._OrtReleaseBinding = (a) => (h._OrtReleaseBinding = Z.Ga)(a);\n          h._OrtRunWithBinding = (a, b, c, d, e) => (h._OrtRunWithBinding = Z.Ha)(a, b, c, d, e);\n          h._OrtRun = (a, b, c, d, e, g, l, k) => (h._OrtRun = Z.Ia)(a, b, c, d, e, g, l, k);\n          h._OrtEndProfiling = (a) => (h._OrtEndProfiling = Z.Ja)(a);\n          var mb = h._malloc = (a) => (mb = h._malloc = Z.Ka)(a), U = h._free = (a) => (U = h._free = Z.La)(a), Za = (a) => (Za = Z.Ma)(a);\n          h.__embind_initialize_bindings = () => (h.__embind_initialize_bindings = Z.Na)();\n          var Ab = () => (Ab = Z.Pa)(), Bb = (a) => (Bb = Z.Qa)(a), Cb = (a) => (Cb = Z.Ra)(a);\n          function zb() {\n            var a = Z;\n            a = Object.assign({}, a);\n            var b = (d) => () => d() >>> 0, c = (d) => (e) => d(e) >>> 0;\n            a.__errno_location = b(a.__errno_location);\n            a.Ka = c(a.Ka);\n            a.Ma = c(a.Ma);\n            a.Pa = b(a.Pa);\n            a.Ra = c(a.Ra);\n            return a;\n          }\n          h.stackAlloc = Cb;\n          h.stackSave = Ab;\n          h.stackRestore = Bb;\n          h.UTF8ToString = L;\n          h.stringToUTF8 = (a, b, c) => N(a, B, b, c);\n          h.lengthBytesUTF8 = M;\n          var Db;\n          J = function Eb() {\n            Db || Fb();\n            Db || (J = Eb);\n          };\n          function Fb() {\n            if (!(0 < I)) {\n              for (; 0 < ra.length; )\n                ra.shift()(h);\n              if (!(0 < I || Db || (Db = true, h.calledRun = true, la))) {\n                for (; 0 < sa.length; )\n                  sa.shift()(h);\n                for (aa(h); 0 < ta.length; )\n                  ta.shift()(h);\n              }\n            }\n          }\n          Fb();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasm;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasm);\n    }\n  });\n\n  // nodejs-ignore:worker_threads\n  var require_worker_threads = __commonJS({\n    "nodejs-ignore:worker_threads"() {\n    }\n  });\n\n  // nodejs-ignore:perf_hooks\n  var require_perf_hooks = __commonJS({\n    "nodejs-ignore:perf_hooks"() {\n    }\n  });\n\n  // nodejs-ignore:os\n  var os_exports = {};\n  __export(os_exports, {\n    cpus: () => cpus\n  });\n  var cpus;\n  var init_os = __esm({\n    "nodejs-ignore:os"() {\n      cpus = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.js\n  var require_ort_wasm_threaded = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {\n      "use strict";\n      var ortWasmThreaded = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          function h() {\n            m.buffer != n.buffer && p();\n            return n;\n          }\n          function t() {\n            m.buffer != n.buffer && p();\n            return aa;\n          }\n          function v() {\n            m.buffer != n.buffer && p();\n            return ba;\n          }\n          function ca() {\n            m.buffer != n.buffer && p();\n            return da;\n          }\n          function w() {\n            m.buffer != n.buffer && p();\n            return ea;\n          }\n          function z() {\n            m.buffer != n.buffer && p();\n            return fa;\n          }\n          function ha() {\n            m.buffer != n.buffer && p();\n            return ia;\n          }\n          var A = moduleArg, ja, ka;\n          A.ready = new Promise((a, b) => {\n            ja = a;\n            ka = b;\n          });\n          var la = Object.assign({}, A), ma = "./this.program", na = (a, b) => {\n            throw b;\n          }, oa = "object" == typeof window, B = "function" == typeof importScripts, D = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, E = A.ENVIRONMENT_IS_PTHREAD || false, F = "";\n          function pa(a) {\n            return A.locateFile ? A.locateFile(a, F) : F + a;\n          }\n          var qa, ra, sa;\n          if (D) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), ta = (init_path(), __toCommonJS(path_exports));\n            F = B ? ta.dirname(F) + "/" : __dirname + "/";\n            qa = (b, c) => {\n              b = b.startsWith("file://") ? new URL(b) : ta.normalize(b);\n              return fs.readFileSync(b, c ? void 0 : "utf8");\n            };\n            sa = (b) => {\n              b = qa(b, true);\n              b.buffer || (b = new Uint8Array(b));\n              return b;\n            };\n            ra = (b, c, d, e = true) => {\n              b = b.startsWith("file://") ? new URL(b) : ta.normalize(b);\n              fs.readFile(b, e ? void 0 : "utf8", (f, k) => {\n                f ? d(f) : c(e ? k.buffer : k);\n              });\n            };\n            !A.thisProgram && 1 < process.argv.length && (ma = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            na = (b, c) => {\n              process.exitCode = b;\n              throw c;\n            };\n            A.inspect = () => "[Emscripten Module object]";\n            let a;\n            try {\n              a = require_worker_threads();\n            } catch (b) {\n              throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'), b;\n            }\n            global.Worker = a.Worker;\n          } else if (oa || B)\n            B ? F = self.location.href : "undefined" != typeof document && document.currentScript && (F = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (F = _scriptDir), 0 !== F.indexOf("blob:") ? F = F.substr(0, F.replace(/[?#].*/, "").lastIndexOf("/") + 1) : F = "", D || (qa = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, B && (sa = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), ra = (a, b, c) => {\n              var d = new XMLHttpRequest();\n              d.open("GET", a, true);\n              d.responseType = "arraybuffer";\n              d.onload = () => {\n                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();\n              };\n              d.onerror = c;\n              d.send(null);\n            });\n          D && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);\n          var ua = console.log.bind(console), va = console.error.bind(console);\n          D && (ua = (...a) => fs.writeSync(1, a.join(" ") + "\\n"), va = (...a) => fs.writeSync(2, a.join(" ") + "\\n"));\n          var wa = ua, G = va;\n          Object.assign(A, la);\n          la = null;\n          var noExitRuntime = true;\n          "object" != typeof WebAssembly && H("no native wasm support detected");\n          var m, xa, ya = false, I, n, aa, ba, da, ea, fa, za, J, Aa, ia;\n          function p() {\n            var a = m.buffer;\n            A.HEAP8 = n = new Int8Array(a);\n            A.HEAP16 = ba = new Int16Array(a);\n            A.HEAPU8 = aa = new Uint8Array(a);\n            A.HEAPU16 = da = new Uint16Array(a);\n            A.HEAP32 = ea = new Int32Array(a);\n            A.HEAPU32 = fa = new Uint32Array(a);\n            A.HEAPF32 = za = new Float32Array(a);\n            A.HEAPF64 = ia = new Float64Array(a);\n            A.HEAP64 = J = new BigInt64Array(a);\n            A.HEAPU64 = Aa = new BigUint64Array(a);\n          }\n          var Ba = 16777216;\n          5242880 <= Ba || H("INITIAL_MEMORY should be larger than STACK_SIZE, was " + Ba + "! (STACK_SIZE=5242880)");\n          if (E)\n            m = A.wasmMemory;\n          else if (m = new WebAssembly.Memory({ initial: Ba / 65536, maximum: 65536, shared: true }), !(m.buffer instanceof SharedArrayBuffer))\n            throw G("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), D && G("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");\n          p();\n          Ba = m.buffer.byteLength;\n          var Ca = [], Da = [], Ea = [], Fa = 0;\n          function Ga() {\n            return noExitRuntime || 0 < Fa;\n          }\n          var K = 0, Ha = null, L = null;\n          function Ia() {\n            K--;\n            if (0 == K && (null !== Ha && (clearInterval(Ha), Ha = null), L)) {\n              var a = L;\n              L = null;\n              a();\n            }\n          }\n          function H(a) {\n            a = "Aborted(" + a + ")";\n            G(a);\n            ya = true;\n            I = 1;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            ka(a);\n            throw a;\n          }\n          function Ja(a) {\n            return a.startsWith("data:application/octet-stream;base64,");\n          }\n          var M;\n          M = "ort-wasm-threaded.wasm";\n          Ja(M) || (M = pa(M));\n          function Ka(a) {\n            if (sa)\n              return sa(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function La(a) {\n            if (oa || B) {\n              if ("function" == typeof fetch && !a.startsWith("file://"))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => Ka(a));\n              if (ra)\n                return new Promise((b, c) => {\n                  ra(a, (d) => b(new Uint8Array(d)), c);\n                });\n            }\n            return Promise.resolve().then(() => Ka(a));\n          }\n          function Ma(a, b, c) {\n            return La(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {\n              G(`failed to asynchronously prepare wasm: ${d}`);\n              H(d);\n            });\n          }\n          function Na(a, b) {\n            var c = M;\n            return "function" != typeof WebAssembly.instantiateStreaming || Ja(c) || c.startsWith("file://") || D || "function" != typeof fetch ? Ma(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(e) {\n              G(`wasm streaming compile failed: ${e}`);\n              G("falling back to ArrayBuffer instantiation");\n              return Ma(c, a, b);\n            }));\n          }\n          function Oa(a) {\n            this.name = "ExitStatus";\n            this.message = `Program terminated with exit(${a})`;\n            this.status = a;\n          }\n          var Pa = (a) => {\n            a.terminate();\n            a.onmessage = () => {\n            };\n          }, Ra = (a) => {\n            0 == O.nb.length && (Qa(), O.Ab(O.nb[0]));\n            var b = O.nb.pop();\n            if (!b)\n              return 6;\n            O.ob.push(b);\n            O.jb[a.mb] = b;\n            b.mb = a.mb;\n            var c = { cmd: "run", start_routine: a.Mb, arg: a.Gb, pthread_ptr: a.mb };\n            D && b.unref();\n            b.postMessage(c, a.Sb);\n            return 0;\n          }, Sa = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Ta = (a, b, c) => {\n            b >>>= 0;\n            var d = b + c;\n            for (c = b; a[c] && !(c >= d); )\n              ++c;\n            if (16 < c - b && a.buffer && Sa)\n              return Sa.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));\n            for (d = ""; b < c; ) {\n              var e = a[b++];\n              if (e & 128) {\n                var f = a[b++] & 63;\n                if (192 == (e & 224))\n                  d += String.fromCharCode((e & 31) << 6 | f);\n                else {\n                  var k = a[b++] & 63;\n                  e = 224 == (e & 240) ? (e & 15) << 12 | f << 6 | k : (e & 7) << 18 | f << 12 | k << 6 | a[b++] & 63;\n                  65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));\n                }\n              } else\n                d += String.fromCharCode(e);\n            }\n            return d;\n          }, Ua = (a, b) => (a >>>= 0) ? Ta(t(), a, b) : "";\n          function Va(a) {\n            if (E)\n              return P(0, 1, a);\n            I = a;\n            Ga() || (O.Nb(), ya = true);\n            na(a, new Oa(a));\n          }\n          var Xa = (a) => {\n            I = a;\n            if (E)\n              throw Wa(a), "unwind";\n            Va(a);\n          };\n          function Ya() {\n            for (var a = A.numThreads; a--; )\n              Qa();\n            Ca.unshift(() => {\n              K++;\n              Za(() => Ia());\n            });\n          }\n          function Qa() {\n            var a = pa("ort-wasm-threaded.worker.js");\n            a = new Worker(a);\n            O.nb.push(a);\n          }\n          function Za(a) {\n            E ? a() : Promise.all(O.nb.map(O.Ab)).then(a);\n          }\n          var O = { nb: [], ob: [], Fb: [], jb: {}, vb() {\n            E ? (O.receiveObjectTransfer = O.Lb, O.threadInitTLS = O.Eb, O.setExitStatus = O.Db, noExitRuntime = false) : Ya();\n          }, Db: (a) => {\n            I = a;\n          }, Vb: ["$terminateWorker"], Nb: () => {\n            for (var a of O.ob)\n              Pa(a);\n            for (a of O.nb)\n              Pa(a);\n            O.nb = [];\n            O.ob = [];\n            O.jb = [];\n          }, Cb: (a) => {\n            var b = a.mb;\n            delete O.jb[b];\n            O.nb.push(a);\n            O.ob.splice(O.ob.indexOf(a), 1);\n            a.mb = 0;\n            $a(b);\n          }, Lb() {\n          }, Eb() {\n            O.Fb.forEach((a) => a());\n          }, Ab: (a) => new Promise((b) => {\n            a.onmessage = (f) => {\n              f = f.data;\n              var k = f.cmd;\n              if (f.targetThread && f.targetThread != ab()) {\n                var l = O.jb[f.targetThread];\n                l ? l.postMessage(f, f.transferList) : G(`Internal error! Worker sent a message "${k}" to target pthread ${f.targetThread}, but that thread no longer exists!`);\n              } else if ("checkMailbox" === k)\n                bb();\n              else if ("spawnThread" === k)\n                Ra(f);\n              else if ("cleanupThread" === k)\n                (f = O.jb[f.thread]) || H(), O.Cb(f);\n              else if ("killThread" === k)\n                f = f.thread, k = O.jb[f], delete O.jb[f], Pa(k), $a(f), O.ob.splice(O.ob.indexOf(k), 1), k.mb = 0;\n              else if ("cancelThread" === k)\n                O.jb[f.thread].postMessage({ cmd: "cancel" });\n              else if ("loaded" === k)\n                a.loaded = true, D && !a.mb && a.unref(), b(a);\n              else if ("alert" === k)\n                alert(`Thread ${f.threadId}: ${f.text}`);\n              else if ("setimmediate" === f.target)\n                a.postMessage(f);\n              else if ("callHandler" === k)\n                A[f.handler](...f.args);\n              else\n                k && G(`worker sent an unknown command ${k}`);\n            };\n            a.onerror = (f) => {\n              G(`${"worker sent an error!"} ${f.filename}:${f.lineno}: ${f.message}`);\n              throw f;\n            };\n            D && (a.on("message", (f) => a.onmessage({ data: f })), a.on("error", (f) => a.onerror(f)));\n            var c = [], d = [], e;\n            for (e of d)\n              A.hasOwnProperty(e) && c.push(e);\n            a.postMessage({ cmd: "load", handlers: c, urlOrBlob: A.mainScriptUrlOrBlob || _scriptDir, wasmMemory: m, wasmModule: xa });\n          }) };\n          A.PThread = O;\n          var cb = (a) => {\n            for (; 0 < a.length; )\n              a.shift()(A);\n          };\n          A.establishStackSpace = () => {\n            var a = ab(), b = z()[a + 52 >>> 2 >>> 0];\n            a = z()[a + 56 >>> 2 >>> 0];\n            db(b, b - a);\n            eb(b);\n          };\n          function Wa(a) {\n            if (E)\n              return P(1, 0, a);\n            Xa(a);\n          }\n          var fb = [], gb;\n          A.invokeEntryPoint = (a, b) => {\n            var c = fb[a];\n            c || (a >= fb.length && (fb.length = a + 1), fb[a] = c = gb.get(a));\n            a = c(b);\n            Ga() ? O.Db(a) : hb(a);\n          };\n          function ib(a) {\n            this.sb = a - 24;\n            this.Kb = function(b) {\n              z()[this.sb + 4 >>> 2 >>> 0] = b;\n            };\n            this.xb = function(b) {\n              z()[this.sb + 8 >>> 2 >>> 0] = b;\n            };\n            this.vb = function(b, c) {\n              this.wb();\n              this.Kb(b);\n              this.xb(c);\n            };\n            this.wb = function() {\n              z()[this.sb + 16 >>> 2 >>> 0] = 0;\n            };\n          }\n          var jb = 0, kb = 0;\n          function lb(a, b, c, d) {\n            return E ? P(2, 1, a, b, c, d) : mb(a, b, c, d);\n          }\n          function mb(a, b, c, d) {\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            if ("undefined" == typeof SharedArrayBuffer)\n              return G("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;\n            var e = [];\n            if (E && 0 === e.length)\n              return lb(a, b, c, d);\n            a = { Mb: c, mb: a, Gb: d, Sb: e };\n            return E ? (a.Ub = "spawnThread", postMessage(a, e), 0) : Ra(a);\n          }\n          function nb(a, b, c) {\n            return E ? P(3, 1, a, b, c) : 0;\n          }\n          function ob(a, b) {\n            if (E)\n              return P(4, 1, a, b);\n          }\n          var pb = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, qb = (a, b, c, d) => {\n            c >>>= 0;\n            if (!(0 < d))\n              return 0;\n            var e = c;\n            d = c + d - 1;\n            for (var f = 0; f < a.length; ++f) {\n              var k = a.charCodeAt(f);\n              if (55296 <= k && 57343 >= k) {\n                var l = a.charCodeAt(++f);\n                k = 65536 + ((k & 1023) << 10) | l & 1023;\n              }\n              if (127 >= k) {\n                if (c >= d)\n                  break;\n                b[c++ >>> 0] = k;\n              } else {\n                if (2047 >= k) {\n                  if (c + 1 >= d)\n                    break;\n                  b[c++ >>> 0] = 192 | k >> 6;\n                } else {\n                  if (65535 >= k) {\n                    if (c + 2 >= d)\n                      break;\n                    b[c++ >>> 0] = 224 | k >> 12;\n                  } else {\n                    if (c + 3 >= d)\n                      break;\n                    b[c++ >>> 0] = 240 | k >> 18;\n                    b[c++ >>> 0] = 128 | k >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | k >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | k & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - e;\n          }, rb = (a, b, c) => qb(a, t(), b, c);\n          function sb(a, b) {\n            if (E)\n              return P(5, 1, a, b);\n          }\n          function tb(a, b, c) {\n            if (E)\n              return P(6, 1, a, b, c);\n          }\n          function ub(a, b, c) {\n            return E ? P(7, 1, a, b, c) : 0;\n          }\n          function vb(a, b) {\n            if (E)\n              return P(8, 1, a, b);\n          }\n          function wb(a, b, c) {\n            if (E)\n              return P(9, 1, a, b, c);\n          }\n          function xb(a, b, c, d) {\n            if (E)\n              return P(10, 1, a, b, c, d);\n          }\n          function yb(a, b, c, d) {\n            if (E)\n              return P(11, 1, a, b, c, d);\n          }\n          function zb(a, b, c, d) {\n            if (E)\n              return P(12, 1, a, b, c, d);\n          }\n          function Ab(a) {\n            if (E)\n              return P(13, 1, a);\n          }\n          function Bb(a, b) {\n            if (E)\n              return P(14, 1, a, b);\n          }\n          function Cb(a, b, c) {\n            if (E)\n              return P(15, 1, a, b, c);\n          }\n          var Db = (a) => {\n            if (null === a)\n              return "null";\n            var b = typeof a;\n            return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;\n          }, Eb, R = (a) => {\n            for (var b = ""; t()[a >>> 0]; )\n              b += Eb[t()[a++ >>> 0]];\n            return b;\n          }, Fb = {}, Gb = {}, Hb = {}, S;\n          function Ib(a, b, c = {}) {\n            var d = b.name;\n            if (!a)\n              throw new S(`type "${d}" must have a positive integer typeid pointer`);\n            if (Gb.hasOwnProperty(a)) {\n              if (c.Ib)\n                return;\n              throw new S(`Cannot register type \'${d}\' twice`);\n            }\n            Gb[a] = b;\n            delete Hb[a];\n            Fb.hasOwnProperty(a) && (b = Fb[a], delete Fb[a], b.forEach((e) => e()));\n          }\n          function T(a, b, c = {}) {\n            if (!("argPackAdvance" in b))\n              throw new TypeError("registerType registeredInstance requires argPackAdvance");\n            Ib(a, b, c);\n          }\n          var Jb = (a, b, c) => {\n            switch (b) {\n              case 1:\n                return c ? (d) => h()[d >>> 0 >>> 0] : (d) => t()[d >>> 0 >>> 0];\n              case 2:\n                return c ? (d) => v()[d >>> 1 >>> 0] : (d) => ca()[d >>> 1 >>> 0];\n              case 4:\n                return c ? (d) => w()[d >>> 2 >>> 0] : (d) => z()[d >>> 2 >>> 0];\n              case 8:\n                return c ? (d) => J[d >>> 3] : (d) => Aa[d >>> 3];\n              default:\n                throw new TypeError(`invalid integer width (${b}): ${a}`);\n            }\n          };\n          function Kb() {\n            this.lb = [void 0];\n            this.zb = [];\n          }\n          var U = new Kb();\n          function Lb(a) {\n            a >>>= 0;\n            a >= U.sb && 0 === --U.get(a).Bb && U.xb(a);\n          }\n          var V = (a) => {\n            if (!a)\n              throw new S("Cannot use deleted val. handle = " + a);\n            return U.get(a).value;\n          }, W = (a) => {\n            switch (a) {\n              case void 0:\n                return 1;\n              case null:\n                return 2;\n              case true:\n                return 3;\n              case false:\n                return 4;\n              default:\n                return U.wb({ Bb: 1, value: a });\n            }\n          };\n          function Mb(a) {\n            return this.fromWireType(w()[a >>> 2 >>> 0]);\n          }\n          var Nb = (a, b) => {\n            switch (b) {\n              case 4:\n                return function(c) {\n                  var d = this.fromWireType;\n                  m.buffer != n.buffer && p();\n                  return d.call(this, za[c >>> 2 >>> 0]);\n                };\n              case 8:\n                return function(c) {\n                  return this.fromWireType(ha()[c >>> 3 >>> 0]);\n                };\n              default:\n                throw new TypeError(`invalid float width (${b}): ${a}`);\n            }\n          };\n          function Ob(a) {\n            return this.fromWireType(z()[a >>> 2 >>> 0]);\n          }\n          var Pb = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, Qb = (a, b) => {\n            var c = a >> 1;\n            for (var d = c + b / 2; !(c >= d) && ca()[c >>> 0]; )\n              ++c;\n            c <<= 1;\n            if (32 < c - a && Pb)\n              return Pb.decode(t().slice(a, c));\n            c = "";\n            for (d = 0; !(d >= b / 2); ++d) {\n              var e = v()[a + 2 * d >>> 1 >>> 0];\n              if (0 == e)\n                break;\n              c += String.fromCharCode(e);\n            }\n            return c;\n          }, Rb = (a, b, c) => {\n            void 0 === c && (c = 2147483647);\n            if (2 > c)\n              return 0;\n            c -= 2;\n            var d = b;\n            c = c < 2 * a.length ? c / 2 : a.length;\n            for (var e = 0; e < c; ++e) {\n              var f = a.charCodeAt(e);\n              v()[b >>> 1 >>> 0] = f;\n              b += 2;\n            }\n            v()[b >>> 1 >>> 0] = 0;\n            return b - d;\n          }, Sb = (a) => 2 * a.length, Tb = (a, b) => {\n            for (var c = 0, d = ""; !(c >= b / 4); ) {\n              var e = w()[a + 4 * c >>> 2 >>> 0];\n              if (0 == e)\n                break;\n              ++c;\n              65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e);\n            }\n            return d;\n          }, Ub = (a, b, c) => {\n            b >>>= 0;\n            void 0 === c && (c = 2147483647);\n            if (4 > c)\n              return 0;\n            var d = b;\n            c = d + c - 4;\n            for (var e = 0; e < a.length; ++e) {\n              var f = a.charCodeAt(e);\n              if (55296 <= f && 57343 >= f) {\n                var k = a.charCodeAt(++e);\n                f = 65536 + ((f & 1023) << 10) | k & 1023;\n              }\n              w()[b >>> 2 >>> 0] = f;\n              b += 4;\n              if (b + 4 > c)\n                break;\n            }\n            w()[b >>> 2 >>> 0] = 0;\n            return b - d;\n          }, Vb = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              55296 <= d && 57343 >= d && ++c;\n              b += 4;\n            }\n            return b;\n          }, Wb = (a) => {\n            if (!ya)\n              try {\n                if (a(), !Ga())\n                  try {\n                    E ? hb(I) : Xa(I);\n                  } catch (b) {\n                    b instanceof Oa || "unwind" == b || na(1, b);\n                  }\n              } catch (b) {\n                b instanceof Oa || "unwind" == b || na(1, b);\n              }\n          };\n          function Xb(a) {\n            a >>>= 0;\n            "function" === typeof Atomics.Tb && (Atomics.Tb(w(), a >>> 2, a).value.then(bb), a += 128, Atomics.store(w(), a >>> 2, 1));\n          }\n          A.__emscripten_thread_mailbox_await = Xb;\n          var bb = () => {\n            var a = ab();\n            a && (Xb(a), Wb(() => Yb()));\n          };\n          A.checkMailbox = bb;\n          var $b = (a) => {\n            var b = Zb();\n            a = a();\n            eb(b);\n            return a;\n          };\n          function P(a, b) {\n            var c = arguments.length - 2, d = arguments;\n            return $b(() => {\n              for (var e = 2 * c, f = ac(8 * e), k = f >>> 3, l = 0; l < c; l++) {\n                var q = d[2 + l];\n                "bigint" == typeof q ? (J[k + 2 * l] = 1n, J[k + 2 * l + 1] = q) : (J[k + 2 * l] = 0n, ha()[k + 2 * l + 1 >>> 0] = q);\n              }\n              return bc(a, e, f, b);\n            });\n          }\n          var cc = [], ec = (a, b) => {\n            var c = Gb[a];\n            if (void 0 === c)\n              throw a = dc(a), c = R(a), X(a), new S(b + " has unknown type " + c);\n            return c;\n          }, fc = {}, gc = (a) => {\n            var b = fc[a];\n            return void 0 === b ? R(a) : b;\n          }, hc = [], ic = () => "object" == typeof globalThis ? globalThis : Function("return this")(), jc = (a) => {\n            var b = hc.length;\n            hc.push(a);\n            return b;\n          }, kc = (a, b) => {\n            for (var c = Array(a), d = 0; d < a; ++d)\n              c[d] = ec(z()[b + 4 * d >>> 2 >>> 0], "parameter " + d);\n            return c;\n          }, mc = (a) => {\n            if (void 0 === a)\n              return "_unknown";\n            a = a.replace(/[^a-zA-Z0-9_]/g, "$");\n            var b = a.charCodeAt(0);\n            return 48 <= b && 57 >= b ? `_${a}` : a;\n          }, nc = {};\n          function oc(a, b) {\n            a = mc(a);\n            return { [a]: function() {\n              return b.apply(this, arguments);\n            } }[a];\n          }\n          function pc(a) {\n            var b = Function;\n            if (!(b instanceof Function))\n              throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);\n            var c = oc(b.name || "unknownFunctionName", function() {\n            });\n            c.prototype = b.prototype;\n            c = new c();\n            a = b.apply(c, a);\n            return a instanceof Object ? a : c;\n          }\n          var qc = (a) => {\n            for (var b = "", c = 0; c < a; ++c)\n              b += (0 !== c ? ", " : "") + "arg" + c;\n            var d = "return function emval_allocator_" + a + "(constructor, argTypes, args) {\\n  var HEAPU32 = getMemory();\\n";\n            for (c = 0; c < a; ++c)\n              d += "var argType" + c + " = requireRegisteredType(HEAPU32[((argTypes)>>>2)], \'parameter " + c + "\');\\nvar arg" + c + " = argType" + c + ".readValueFromPointer(args);\\nargs += argType" + c + "[\'argPackAdvance\'];\\nargTypes += 4;\\n";\n            return new Function("requireRegisteredType", "Module", "valueToHandle", "getMemory", d + ("var obj = new constructor(" + b + ");\\nreturn valueToHandle(obj);\\n}\\n"))(ec, A, W, () => z());\n          }, rc = {}, Y = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), sc = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], tc = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n          function uc(a, b, c, d, e, f, k) {\n            return E ? P(16, 1, a, b, c, d, e, f, k) : -52;\n          }\n          function vc(a, b, c, d, e, f) {\n            if (E)\n              return P(17, 1, a, b, c, d, e, f);\n          }\n          var xc = (a) => {\n            var b = pb(a) + 1, c = wc(b);\n            c && rb(a, c, b);\n            return c;\n          }, yc = {}, Ac = () => {\n            if (!zc) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: ma || "./this.program" }, b;\n              for (b in yc)\n                void 0 === yc[b] ? delete a[b] : a[b] = yc[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              zc = c;\n            }\n            return zc;\n          }, zc;\n          function Bc(a, b) {\n            if (E)\n              return P(18, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = 0;\n            Ac().forEach((d, e) => {\n              var f = b + c;\n              e = z()[a + 4 * e >>> 2 >>> 0] = f;\n              for (f = 0; f < d.length; ++f)\n                h()[e++ >>> 0 >>> 0] = d.charCodeAt(f);\n              h()[e >>> 0 >>> 0] = 0;\n              c += d.length + 1;\n            });\n            return 0;\n          }\n          function Cc(a, b) {\n            if (E)\n              return P(19, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = Ac();\n            z()[a >>> 2 >>> 0] = c.length;\n            var d = 0;\n            c.forEach((e) => d += e.length + 1);\n            z()[b >>> 2 >>> 0] = d;\n            return 0;\n          }\n          function Dc(a) {\n            return E ? P(20, 1, a) : 52;\n          }\n          function Ec(a, b, c, d) {\n            return E ? P(21, 1, a, b, c, d) : 52;\n          }\n          function Fc(a, b, c, d) {\n            return E ? P(22, 1, a, b, c, d) : 70;\n          }\n          var Gc = [null, [], []];\n          function Hc(a, b, c, d) {\n            if (E)\n              return P(23, 1, a, b, c, d);\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            for (var e = 0, f = 0; f < c; f++) {\n              var k = z()[b >>> 2 >>> 0], l = z()[b + 4 >>> 2 >>> 0];\n              b += 8;\n              for (var q = 0; q < l; q++) {\n                var r = t()[k + q >>> 0], x = Gc[a];\n                0 === r || 10 === r ? ((1 === a ? wa : G)(Ta(x, 0)), x.length = 0) : x.push(r);\n              }\n              e += l;\n            }\n            z()[d >>> 2 >>> 0] = e;\n            return 0;\n          }\n          var Ic = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Jc = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Kc(a) {\n            var b = Array(pb(a) + 1);\n            qb(a, b, 0, b.length);\n            return b;\n          }\n          var Lc = (a, b) => {\n            h().set(a, b >>> 0);\n          };\n          function Mc(a, b, c, d) {\n            function e(g, u, y) {\n              for (g = "number" == typeof g ? g.toString() : g || ""; g.length < u; )\n                g = y[0] + g;\n              return g;\n            }\n            function f(g, u) {\n              return e(g, u, "0");\n            }\n            function k(g, u) {\n              function y(lc) {\n                return 0 > lc ? -1 : 0 < lc ? 1 : 0;\n              }\n              var Q;\n              0 === (Q = y(g.getFullYear() - u.getFullYear())) && 0 === (Q = y(g.getMonth() - u.getMonth())) && (Q = y(g.getDate() - u.getDate()));\n              return Q;\n            }\n            function l(g) {\n              switch (g.getDay()) {\n                case 0:\n                  return new Date(g.getFullYear() - 1, 11, 29);\n                case 1:\n                  return g;\n                case 2:\n                  return new Date(g.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    g.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(g.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(g.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(g.getFullYear() - 1, 11, 30);\n              }\n            }\n            function q(g) {\n              var u = g.pb;\n              for (g = new Date(new Date(g.qb + 1900, 0, 1).getTime()); 0 < u; ) {\n                var y = g.getMonth(), Q = (Y(g.getFullYear()) ? Ic : Jc)[y];\n                if (u > Q - g.getDate())\n                  u -= Q - g.getDate() + 1, g.setDate(1), 11 > y ? g.setMonth(y + 1) : (g.setMonth(0), g.setFullYear(g.getFullYear() + 1));\n                else {\n                  g.setDate(g.getDate() + u);\n                  break;\n                }\n              }\n              y = new Date(g.getFullYear() + 1, 0, 4);\n              u = l(new Date(\n                g.getFullYear(),\n                0,\n                4\n              ));\n              y = l(y);\n              return 0 >= k(u, g) ? 0 >= k(y, g) ? g.getFullYear() + 1 : g.getFullYear() : g.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            var r = z()[d + 40 >>> 2 >>> 0];\n            d = { Qb: w()[d >>> 2 >>> 0], Pb: w()[d + 4 >>> 2 >>> 0], tb: w()[d + 8 >>> 2 >>> 0], yb: w()[d + 12 >>> 2 >>> 0], ub: w()[d + 16 >>> 2 >>> 0], qb: w()[d + 20 >>> 2 >>> 0], kb: w()[d + 24 >>> 2 >>> 0], pb: w()[d + 28 >>> 2 >>> 0], Wb: w()[d + 32 >>> 2 >>> 0], Ob: w()[d + 36 >>> 2 >>> 0], Rb: r ? Ua(r) : "" };\n            c = Ua(c);\n            r = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var x in r)\n              c = c.replace(new RegExp(x, "g"), r[x]);\n            var C = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), N = "January February March April May June July August September October November December".split(" ");\n            r = { "%a": (g) => C[g.kb].substring(0, 3), "%A": (g) => C[g.kb], "%b": (g) => N[g.ub].substring(0, 3), "%B": (g) => N[g.ub], "%C": (g) => f((g.qb + 1900) / 100 | 0, 2), "%d": (g) => f(g.yb, 2), "%e": (g) => e(g.yb, 2, " "), "%g": (g) => q(g).toString().substring(2), "%G": (g) => q(g), "%H": (g) => f(g.tb, 2), "%I": (g) => {\n              g = g.tb;\n              0 == g ? g = 12 : 12 < g && (g -= 12);\n              return f(g, 2);\n            }, "%j": (g) => {\n              for (var u = 0, y = 0; y <= g.ub - 1; u += (Y(g.qb + 1900) ? Ic : Jc)[y++])\n                ;\n              return f(g.yb + u, 3);\n            }, "%m": (g) => f(g.ub + 1, 2), "%M": (g) => f(g.Pb, 2), "%n": () => "\\n", "%p": (g) => 0 <= g.tb && 12 > g.tb ? "AM" : "PM", "%S": (g) => f(g.Qb, 2), "%t": () => "	", "%u": (g) => g.kb || 7, "%U": (g) => f(Math.floor((g.pb + 7 - g.kb) / 7), 2), "%V": (g) => {\n              var u = Math.floor((g.pb + 7 - (g.kb + 6) % 7) / 7);\n              2 >= (g.kb + 371 - g.pb - 2) % 7 && u++;\n              if (u)\n                53 == u && (y = (g.kb + 371 - g.pb) % 7, 4 == y || 3 == y && Y(g.qb) || (u = 1));\n              else {\n                u = 52;\n                var y = (g.kb + 7 - g.pb - 1) % 7;\n                (4 == y || 5 == y && Y(g.qb % 400 - 1)) && u++;\n              }\n              return f(u, 2);\n            }, "%w": (g) => g.kb, "%W": (g) => f(Math.floor((g.pb + 7 - (g.kb + 6) % 7) / 7), 2), "%y": (g) => (g.qb + 1900).toString().substring(2), "%Y": (g) => g.qb + 1900, "%z": (g) => {\n              g = g.Ob;\n              var u = 0 <= g;\n              g = Math.abs(g) / 60;\n              return (u ? "+" : "-") + String("0000" + (g / 60 * 100 + g % 60)).slice(-4);\n            }, "%Z": (g) => g.Rb, "%%": () => "%" };\n            c = c.replace(/%%/g, "\\0\\0");\n            for (x in r)\n              c.includes(x) && (c = c.replace(new RegExp(x, "g"), r[x](d)));\n            c = c.replace(/\\0\\0/g, "%");\n            x = Kc(c);\n            if (x.length > b)\n              return 0;\n            Lc(x, a);\n            return x.length - 1;\n          }\n          O.vb();\n          for (var Nc = Array(256), Oc = 0; 256 > Oc; ++Oc)\n            Nc[Oc] = String.fromCharCode(Oc);\n          Eb = Nc;\n          S = A.BindingError = class extends Error {\n            constructor(a) {\n              super(a);\n              this.name = "BindingError";\n            }\n          };\n          A.InternalError = class extends Error {\n            constructor(a) {\n              super(a);\n              this.name = "InternalError";\n            }\n          };\n          Object.assign(Kb.prototype, { get(a) {\n            return this.lb[a];\n          }, has(a) {\n            return void 0 !== this.lb[a];\n          }, wb(a) {\n            var b = this.zb.pop() || this.lb.length;\n            this.lb[b] = a;\n            return b;\n          }, xb(a) {\n            this.lb[a] = void 0;\n            this.zb.push(a);\n          } });\n          U.lb.push({ value: void 0 }, { value: null }, { value: true }, { value: false });\n          U.sb = U.lb.length;\n          A.count_emval_handles = () => {\n            for (var a = 0, b = U.sb; b < U.lb.length; ++b)\n              void 0 !== U.lb[b] && ++a;\n            return a;\n          };\n          var Pc = [Va, Wa, lb, nb, ob, sb, tb, ub, vb, wb, xb, yb, zb, Ab, Bb, Cb, uc, vc, Bc, Cc, Dc, Ec, Fc, Hc], Rc = {\n            b: function(a, b, c) {\n              a >>>= 0;\n              new ib(a).vb(b >>> 0, c >>> 0);\n              jb = a;\n              kb++;\n              throw jb;\n            },\n            ea: function(a) {\n              Qc(a >>> 0, !B, 1, !oa, 131072, false);\n              O.Eb();\n            },\n            E: function(a) {\n              a >>>= 0;\n              E ? postMessage({ cmd: "cleanupThread", thread: a }) : ((a = O.jb[a]) || H(), O.Cb(a));\n            },\n            W: mb,\n            y: nb,\n            ka: ob,\n            S: sb,\n            U: tb,\n            L: ub,\n            ia: vb,\n            ba: wb,\n            ha: xb,\n            G: yb,\n            T: zb,\n            Q: Ab,\n            ja: Bb,\n            R: Cb,\n            J: function(a, b, c, d, e) {\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              b = R(b);\n              var f = -1 != b.indexOf("u");\n              f && (e = (1n << 64n) - 1n);\n              T(a, { name: b, fromWireType: (k) => k, toWireType: function(k, l) {\n                if ("bigint" != typeof l && "number" != typeof l)\n                  throw new TypeError(`Cannot convert "${Db(l)}" to ${this.name}`);\n                if (l < d || l > e)\n                  throw new TypeError(`Passing a number "${Db(l)}" from JS side to C/C++ side to an argument of type "${b}", which is outside the valid range [${d}, ${e}]!`);\n                return l;\n              }, argPackAdvance: 8, readValueFromPointer: Jb(b, c, !f), rb: null });\n            },\n            qa: function(a, b, c, d) {\n              a >>>= 0;\n              b = R(b >>> 0);\n              T(a, {\n                name: b,\n                fromWireType: function(e) {\n                  return !!e;\n                },\n                toWireType: function(e, f) {\n                  return f ? c : d;\n                },\n                argPackAdvance: 8,\n                readValueFromPointer: function(e) {\n                  return this.fromWireType(t()[e >>> 0]);\n                },\n                rb: null\n              });\n            },\n            pa: function(a, b) {\n              a >>>= 0;\n              b = R(b >>> 0);\n              T(a, { name: b, fromWireType: (c) => {\n                var d = V(c);\n                Lb(c);\n                return d;\n              }, toWireType: (c, d) => W(d), argPackAdvance: 8, readValueFromPointer: Mb, rb: null });\n            },\n            I: function(a, b, c) {\n              a >>>= 0;\n              c >>>= 0;\n              b = R(b >>> 0);\n              T(a, { name: b, fromWireType: (d) => d, toWireType: (d, e) => e, argPackAdvance: 8, readValueFromPointer: Nb(b, c), rb: null });\n            },\n            u: function(a, b, c, d, e) {\n              a >>>= 0;\n              c >>>= 0;\n              b = R(b >>> 0);\n              -1 === e && (e = 4294967295);\n              e = (l) => l;\n              if (0 === d) {\n                var f = 32 - 8 * c;\n                e = (l) => l << f >>> f;\n              }\n              var k = b.includes("unsigned") ? function(l, q) {\n                return q >>> 0;\n              } : function(l, q) {\n                return q;\n              };\n              T(a, { name: b, fromWireType: e, toWireType: k, argPackAdvance: 8, readValueFromPointer: Jb(b, c, 0 !== d), rb: null });\n            },\n            m: function(a, b, c) {\n              function d(f) {\n                var k = z()[f >>> 2 >>> 0];\n                f = z()[f + 4 >>> 2 >>> 0];\n                return new e(h().buffer, f, k);\n              }\n              a >>>= 0;\n              var e = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][b];\n              c = R(c >>> 0);\n              T(\n                a,\n                { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d },\n                { Ib: true }\n              );\n            },\n            K: function(a, b) {\n              a >>>= 0;\n              b = R(b >>> 0);\n              var c = "std::string" === b;\n              T(a, { name: b, fromWireType: function(d) {\n                var e = z()[d >>> 2 >>> 0], f = d + 4;\n                if (c)\n                  for (var k = f, l = 0; l <= e; ++l) {\n                    var q = f + l;\n                    if (l == e || 0 == t()[q >>> 0]) {\n                      k = Ua(k, q - k);\n                      if (void 0 === r)\n                        var r = k;\n                      else\n                        r += String.fromCharCode(0), r += k;\n                      k = q + 1;\n                    }\n                  }\n                else {\n                  r = Array(e);\n                  for (l = 0; l < e; ++l)\n                    r[l] = String.fromCharCode(t()[f + l >>> 0]);\n                  r = r.join("");\n                }\n                X(d);\n                return r;\n              }, toWireType: function(d, e) {\n                e instanceof ArrayBuffer && (e = new Uint8Array(e));\n                var f = "string" == typeof e;\n                if (!(f || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array))\n                  throw new S("Cannot pass non-string to std::string");\n                var k = c && f ? pb(e) : e.length;\n                var l = wc(4 + k + 1), q = l + 4;\n                z()[l >>> 2 >>> 0] = k;\n                if (c && f)\n                  rb(e, q, k + 1);\n                else if (f)\n                  for (f = 0; f < k; ++f) {\n                    var r = e.charCodeAt(f);\n                    if (255 < r)\n                      throw X(q), new S("String has UTF-16 code units that do not fit in 8 bits");\n                    t()[q + f >>> 0] = r;\n                  }\n                else\n                  for (f = 0; f < k; ++f)\n                    t()[q + f >>> 0] = e[f];\n                null !== d && d.push(X, l);\n                return l;\n              }, argPackAdvance: 8, readValueFromPointer: Ob, rb(d) {\n                X(d);\n              } });\n            },\n            A: function(a, b, c) {\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              c = R(c);\n              if (2 === b) {\n                var d = Qb;\n                var e = Rb;\n                var f = Sb;\n                var k = () => ca();\n                var l = 1;\n              } else\n                4 === b && (d = Tb, e = Ub, f = Vb, k = () => z(), l = 2);\n              T(a, {\n                name: c,\n                fromWireType: (q) => {\n                  for (var r = z()[q >>> 2 >>> 0], x = k(), C, N = q + 4, g = 0; g <= r; ++g) {\n                    var u = q + 4 + g * b;\n                    if (g == r || 0 == x[u >>> l])\n                      N = d(N, u - N), void 0 === C ? C = N : (C += String.fromCharCode(0), C += N), N = u + b;\n                  }\n                  X(q);\n                  return C;\n                },\n                toWireType: (q, r) => {\n                  if ("string" != typeof r)\n                    throw new S(`Cannot pass non-string to C++ string type ${c}`);\n                  var x = f(r), C = wc(4 + x + b);\n                  z()[C >>> 2] = x >> l;\n                  e(r, C + 4, x + b);\n                  null !== q && q.push(X, C);\n                  return C;\n                },\n                argPackAdvance: 8,\n                readValueFromPointer: Mb,\n                rb(q) {\n                  X(q);\n                }\n              });\n            },\n            ra: function(a, b) {\n              a >>>= 0;\n              b = R(b >>> 0);\n              T(a, { Jb: true, name: b, argPackAdvance: 0, fromWireType: () => {\n              }, toWireType: () => {\n              } });\n            },\n            na: () => true,\n            O: function(a, b) {\n              a >>>= 0;\n              a == b >>> 0 ? setTimeout(() => bb()) : E ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = O.jb[a]) && a.postMessage({ cmd: "checkMailbox" });\n            },\n            X: function(a, b, c, d) {\n              b >>>= 0;\n              c /= 2;\n              cc.length = c;\n              d = d >>> 0 >>> 3;\n              for (var e = 0; e < c; e++)\n                cc[e] = J[d + 2 * e] ? J[d + 2 * e + 1] : ha()[d + 2 * e + 1 >>> 0];\n              a = Pc[a];\n              O.Hb = b;\n              b = a.apply(null, cc);\n              O.Hb = 0;\n              return b;\n            },\n            da: Xb,\n            ma: function(a) {\n              D && O.jb[a >>> 0].ref();\n            },\n            r: function(a, b, c) {\n              b >>>= 0;\n              c >>>= 0;\n              a = V(a >>> 0);\n              b = ec(b, "emval::as");\n              var d = [], e = W(d);\n              z()[c >>> 2 >>> 0] = e;\n              return b.toWireType(d, a);\n            },\n            i: function(a, b, c, d, e) {\n              c >>>= 0;\n              d >>>= 0;\n              e >>>= 0;\n              a = hc[a >>> 0];\n              b = V(b >>> 0);\n              c = gc(c);\n              var f = [];\n              z()[d >>> 2 >>> 0] = W(f);\n              return a(b, c, f, e);\n            },\n            s: function(a, b, c, d) {\n              c >>>= 0;\n              d >>>= 0;\n              a = hc[a >>> 0];\n              b = V(b >>> 0);\n              c = gc(c);\n              a(b, c, null, d);\n            },\n            c: Lb,\n            B: function(a, b) {\n              b >>>= 0;\n              a = V(a >>> 0);\n              b = V(b);\n              return a == b;\n            },\n            o: function(a) {\n              a >>>= 0;\n              if (0 === a)\n                return W(ic());\n              a = gc(a);\n              return W(ic()[a]);\n            },\n            g: function(a, b) {\n              var c = kc(a, b >>> 0), d = c[0];\n              b = d.name + "_$" + c.slice(1).map(function(x) {\n                return x.name;\n              }).join("_") + "$";\n              var e = nc[b];\n              if (void 0 !== e)\n                return e;\n              e = ["retType"];\n              for (var f = [d], k = "", l = 0; l < a - 1; ++l)\n                k += (0 !== l ? ", " : "") + "arg" + l, e.push("argType" + l), f.push(c[1 + l]);\n              var q = "return function " + mc("methodCaller_" + b) + "(handle, name, destructors, args) {\\n", r = 0;\n              for (l = 0; l < a - 1; ++l)\n                q += "    var arg" + l + " = argType" + l + ".readValueFromPointer(args" + (r ? "+" + r : "") + ");\\n", r += c[l + 1].argPackAdvance;\n              q += "    var rv = handle[name](" + k + ");\\n";\n              for (l = 0; l < a - 1; ++l)\n                c[l + 1].deleteObject && (q += "    argType" + l + ".deleteObject(arg" + l + ");\\n");\n              d.Jb || (q += "    return retType.toWireType(destructors, rv);\\n");\n              e.push(q + "};\\n");\n              a = pc(e).apply(null, f);\n              e = jc(a);\n              return nc[b] = e;\n            },\n            q: function(a, b) {\n              b >>>= 0;\n              a = V(a >>> 0);\n              b = V(b);\n              return W(a[b]);\n            },\n            d: function(a) {\n              a >>>= 0;\n              4 < a && (U.get(a).Bb += 1);\n            },\n            x: function(a, b, c, d) {\n              c >>>= 0;\n              d >>>= 0;\n              a = V(a >>> 0);\n              var e = rc[b];\n              e || (e = qc(b), rc[b] = e);\n              return e(a, c, d);\n            },\n            v: function() {\n              return W([]);\n            },\n            l: function(a) {\n              a = V(a >>> 0);\n              for (var b = Array(a.length), c = 0; c < a.length; c++)\n                b[c] = a[c];\n              return W(b);\n            },\n            e: function(a) {\n              return W(gc(a >>> 0));\n            },\n            k: function() {\n              return W({});\n            },\n            f: function(a) {\n              a >>>= 0;\n              for (var b = V(a); b.length; ) {\n                var c = b.pop();\n                b.pop()(c);\n              }\n              Lb(a);\n            },\n            j: function(a, b, c) {\n              b >>>= 0;\n              c >>>= 0;\n              a = V(a >>> 0);\n              b = V(b);\n              c = V(c);\n              a[b] = c;\n            },\n            h: function(a, b) {\n              b >>>= 0;\n              a = ec(a >>> 0, "_emval_take_value");\n              a = a.readValueFromPointer(b);\n              return W(a);\n            },\n            _: function(a, b) {\n              a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);\n              b >>>= 0;\n              a = new Date(1e3 * a);\n              w()[b >>> 2 >>> 0] = a.getUTCSeconds();\n              w()[b + 4 >>> 2 >>> 0] = a.getUTCMinutes();\n              w()[b + 8 >>> 2 >>> 0] = a.getUTCHours();\n              w()[b + 12 >>> 2 >>> 0] = a.getUTCDate();\n              w()[b + 16 >>> 2 >>> 0] = a.getUTCMonth();\n              w()[b + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;\n              w()[b + 24 >>> 2 >>> 0] = a.getUTCDay();\n              a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n              w()[b + 28 >>> 2 >>> 0] = a;\n            },\n            $: function(a, b) {\n              a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);\n              b >>>= 0;\n              a = new Date(1e3 * a);\n              w()[b >>> 2 >>> 0] = a.getSeconds();\n              w()[b + 4 >>> 2 >>> 0] = a.getMinutes();\n              w()[b + 8 >>> 2 >>> 0] = a.getHours();\n              w()[b + 12 >>> 2 >>> 0] = a.getDate();\n              w()[b + 16 >>> 2 >>> 0] = a.getMonth();\n              w()[b + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;\n              w()[b + 24 >>> 2 >>> 0] = a.getDay();\n              var c = (Y(a.getFullYear()) ? sc : tc)[a.getMonth()] + a.getDate() - 1 | 0;\n              w()[b + 28 >>> 2 >>> 0] = c;\n              w()[b + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n              c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n              var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n              a = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;\n              w()[b + 32 >>> 2 >>> 0] = a;\n            },\n            aa: function(a) {\n              a >>>= 0;\n              var b = new Date(w()[a + 20 >>> 2 >>> 0] + 1900, w()[a + 16 >>> 2 >>> 0], w()[a + 12 >>> 2 >>> 0], w()[a + 8 >>> 2 >>> 0], w()[a + 4 >>> 2 >>> 0], w()[a >>> 2 >>> 0], 0), c = w()[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), e = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), f = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), k = Math.min(f, e);\n              0 > c ? w()[a + 32 >>> 2 >>> 0] = Number(e != f && k == d) : 0 < c != (k == d) && (e = Math.max(f, e), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : e) - d)));\n              w()[a + 24 >>> 2 >>> 0] = b.getDay();\n              c = (Y(b.getFullYear()) ? sc : tc)[b.getMonth()] + b.getDate() - 1 | 0;\n              w()[a + 28 >>> 2 >>> 0] = c;\n              w()[a >>> 2 >>> 0] = b.getSeconds();\n              w()[a + 4 >>> 2 >>> 0] = b.getMinutes();\n              w()[a + 8 >>> 2 >>> 0] = b.getHours();\n              w()[a + 12 >>> 2 >>> 0] = b.getDate();\n              w()[a + 16 >>> 2 >>> 0] = b.getMonth();\n              w()[a + 20 >>> 2 >>> 0] = b.getYear();\n              return BigInt(b.getTime() / 1e3);\n            },\n            Y: uc,\n            Z: vc,\n            N: function(a, b, c) {\n              function d(r) {\n                return (r = r.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? r[1] : "GMT";\n              }\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              var e = (/* @__PURE__ */ new Date()).getFullYear(), f = new Date(e, 0, 1), k = new Date(e, 6, 1);\n              e = f.getTimezoneOffset();\n              var l = k.getTimezoneOffset(), q = Math.max(e, l);\n              z()[a >>> 2 >>> 0] = 60 * q;\n              w()[b >>> 2 >>> 0] = Number(e != l);\n              a = d(f);\n              b = d(k);\n              a = xc(a);\n              b = xc(b);\n              l < e ? (z()[c >>> 2 >>> 0] = a, z()[c + 4 >>> 2 >>> 0] = b) : (z()[c >>> 2 >>> 0] = b, z()[c + 4 >>> 2 >>> 0] = a);\n            },\n            n: () => {\n              H("");\n            },\n            F: () => {\n            },\n            H: () => Date.now(),\n            la: () => {\n              Fa += 1;\n              throw "unwind";\n            },\n            P: function() {\n              return 4294901760;\n            },\n            t: () => performance.timeOrigin + performance.now(),\n            w: () => D ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency,\n            M: function(a) {\n              a >>>= 0;\n              var b = t().length;\n              if (a <= b || 4294901760 < a)\n                return false;\n              for (var c = 1; 4 >= c; c *= 2) {\n                var d = b * (1 + 0.2 / c);\n                d = Math.min(d, a + 100663296);\n                var e = Math;\n                d = Math.max(a, d);\n                a: {\n                  e = (e.min.call(e, 4294901760, d + (65536 - d % 65536) % 65536) - m.buffer.byteLength + 65535) / 65536;\n                  try {\n                    m.grow(e);\n                    p();\n                    var f = 1;\n                    break a;\n                  } catch (k) {\n                  }\n                  f = void 0;\n                }\n                if (f)\n                  return true;\n              }\n              return false;\n            },\n            fa: Bc,\n            ga: Cc,\n            V: Xa,\n            z: Dc,\n            D: Ec,\n            ca: Fc,\n            C: Hc,\n            a: m || A.wasmMemory,\n            oa: Mc,\n            p: function(a, b, c, d) {\n              return Mc(a >>> 0, b >>> 0, c >>> 0, d >>> 0);\n            }\n          }, Z = function() {\n            var a = { a: Rc };\n            K++;\n            Na(a, function(b) {\n              var c = b.module;\n              Z = b.instance.exports;\n              Z = Sc();\n              O.Fb.push(Z.Xa);\n              gb = Z._a;\n              Da.unshift(Z.sa);\n              xa = c;\n              Ia();\n            }).catch(ka);\n            return {};\n          }();\n          A._OrtInit = (a, b) => (A._OrtInit = Z.ta)(a, b);\n          A._OrtGetLastError = (a, b) => (A._OrtGetLastError = Z.ua)(a, b);\n          A._OrtCreateSessionOptions = (a, b, c, d, e, f, k, l, q, r) => (A._OrtCreateSessionOptions = Z.va)(a, b, c, d, e, f, k, l, q, r);\n          A._OrtAppendExecutionProvider = (a, b) => (A._OrtAppendExecutionProvider = Z.wa)(a, b);\n          A._OrtAddFreeDimensionOverride = (a, b, c) => (A._OrtAddFreeDimensionOverride = Z.xa)(a, b, c);\n          A._OrtAddSessionConfigEntry = (a, b, c) => (A._OrtAddSessionConfigEntry = Z.ya)(a, b, c);\n          A._OrtReleaseSessionOptions = (a) => (A._OrtReleaseSessionOptions = Z.za)(a);\n          A._OrtCreateSession = (a, b, c) => (A._OrtCreateSession = Z.Aa)(a, b, c);\n          A._OrtReleaseSession = (a) => (A._OrtReleaseSession = Z.Ba)(a);\n          A._OrtGetInputOutputCount = (a, b, c) => (A._OrtGetInputOutputCount = Z.Ca)(a, b, c);\n          A._OrtGetInputName = (a, b) => (A._OrtGetInputName = Z.Da)(a, b);\n          A._OrtGetOutputName = (a, b) => (A._OrtGetOutputName = Z.Ea)(a, b);\n          A._OrtFree = (a) => (A._OrtFree = Z.Fa)(a);\n          A._OrtCreateTensor = (a, b, c, d, e, f) => (A._OrtCreateTensor = Z.Ga)(a, b, c, d, e, f);\n          A._OrtGetTensorData = (a, b, c, d, e) => (A._OrtGetTensorData = Z.Ha)(a, b, c, d, e);\n          A._OrtReleaseTensor = (a) => (A._OrtReleaseTensor = Z.Ia)(a);\n          A._OrtCreateRunOptions = (a, b, c, d) => (A._OrtCreateRunOptions = Z.Ja)(a, b, c, d);\n          A._OrtAddRunConfigEntry = (a, b, c) => (A._OrtAddRunConfigEntry = Z.Ka)(a, b, c);\n          A._OrtReleaseRunOptions = (a) => (A._OrtReleaseRunOptions = Z.La)(a);\n          A._OrtCreateBinding = (a) => (A._OrtCreateBinding = Z.Ma)(a);\n          A._OrtBindInput = (a, b, c) => (A._OrtBindInput = Z.Na)(a, b, c);\n          A._OrtBindOutput = (a, b, c, d) => (A._OrtBindOutput = Z.Oa)(a, b, c, d);\n          A._OrtClearBoundOutputs = (a) => (A._OrtClearBoundOutputs = Z.Pa)(a);\n          A._OrtReleaseBinding = (a) => (A._OrtReleaseBinding = Z.Qa)(a);\n          A._OrtRunWithBinding = (a, b, c, d, e) => (A._OrtRunWithBinding = Z.Ra)(a, b, c, d, e);\n          A._OrtRun = (a, b, c, d, e, f, k, l) => (A._OrtRun = Z.Sa)(a, b, c, d, e, f, k, l);\n          A._OrtEndProfiling = (a) => (A._OrtEndProfiling = Z.Ta)(a);\n          var ab = A._pthread_self = () => (ab = A._pthread_self = Z.Ua)(), wc = A._malloc = (a) => (wc = A._malloc = Z.Va)(a), X = A._free = (a) => (X = A._free = Z.Wa)(a);\n          A.__emscripten_tls_init = () => (A.__emscripten_tls_init = Z.Xa)();\n          var dc = (a) => (dc = Z.Ya)(a);\n          A.__embind_initialize_bindings = () => (A.__embind_initialize_bindings = Z.Za)();\n          var Qc = A.__emscripten_thread_init = (a, b, c, d, e, f) => (Qc = A.__emscripten_thread_init = Z.$a)(a, b, c, d, e, f);\n          A.__emscripten_thread_crashed = () => (A.__emscripten_thread_crashed = Z.ab)();\n          var bc = (a, b, c, d) => (bc = Z.bb)(a, b, c, d), $a = (a) => ($a = Z.cb)(a), hb = A.__emscripten_thread_exit = (a) => (hb = A.__emscripten_thread_exit = Z.db)(a), Yb = A.__emscripten_check_mailbox = () => (Yb = A.__emscripten_check_mailbox = Z.eb)(), db = (a, b) => (db = Z.fb)(a, b), Zb = () => (Zb = Z.gb)(), eb = (a) => (eb = Z.hb)(a), ac = (a) => (ac = Z.ib)(a);\n          function Sc() {\n            var a = Z;\n            a = Object.assign({}, a);\n            var b = (d) => () => d() >>> 0, c = (d) => (e) => d(e) >>> 0;\n            a.__errno_location = b(a.__errno_location);\n            a.Ua = b(a.Ua);\n            a.Va = c(a.Va);\n            a.Ya = c(a.Ya);\n            a.gb = b(a.gb);\n            a.ib = c(a.ib);\n            return a;\n          }\n          A.keepRuntimeAlive = Ga;\n          A.wasmMemory = m;\n          A.stackAlloc = ac;\n          A.stackSave = Zb;\n          A.stackRestore = eb;\n          A.UTF8ToString = Ua;\n          A.stringToUTF8 = rb;\n          A.lengthBytesUTF8 = pb;\n          A.ExitStatus = Oa;\n          A.PThread = O;\n          var Tc;\n          L = function Uc() {\n            Tc || Vc();\n            Tc || (L = Uc);\n          };\n          function Vc() {\n            0 < K || (E ? (ja(A), E || cb(Da), startWorker(A)) : (cb(Ca), 0 < K || Tc || (Tc = true, A.calledRun = true, ya || (E || cb(Da), ja(A), E || cb(Ea)))));\n          }\n          Vc();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasmThreaded;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasmThreaded);\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.worker.js\n  var require_ort_wasm_threaded_worker = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {\n      module.exports = \'"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*is_main=*/0,/*is_runtime=*/0,/*can_block=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){Module["__embind_initialize_bindings"]();initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err(`worker.js received unknown command ${e.data.cmd}`);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}}self.onmessage=handleMessage;\\n\';\n    }\n  });\n\n  // nodejs-ignore:node:path\n  var join = void 0;\n\n  // web/lib/wasm/wasm-factory.ts\n  var ortWasmFactory;\n  if (false) {\n    ortWasmFactory = null;\n  } else {\n    ortWasmFactory = true ? require_ort_wasm() : null;\n  }\n  var ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;\n  var wasm;\n  var initialized = false;\n  var initializing = false;\n  var aborted = false;\n  var isMultiThreadSupported = () => {\n    try {\n      if (typeof SharedArrayBuffer === "undefined") {\n        return false;\n      }\n      if (typeof MessageChannel !== "undefined") {\n        new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n      }\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        5,\n        4,\n        1,\n        3,\n        1,\n        1,\n        10,\n        11,\n        1,\n        9,\n        0,\n        65,\n        0,\n        254,\n        16,\n        2,\n        0,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var isSimdSupported = () => {\n    try {\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        10,\n        30,\n        1,\n        28,\n        0,\n        65,\n        0,\n        253,\n        15,\n        253,\n        12,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        253,\n        186,\n        1,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var getWasmFileName = (useSimd, useThreads) => {\n    if (useSimd) {\n      if (false) {\n        return "ort-training-wasm-simd.wasm";\n      }\n      return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";\n    } else {\n      return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";\n    }\n  };\n  var initializeWebAssembly = async (flags) => {\n    if (initialized) {\n      return Promise.resolve();\n    }\n    if (initializing) {\n      throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");\n    }\n    if (aborted) {\n      throw new Error("previous call to \'initializeWebAssembly()\' failed.");\n    }\n    initializing = true;\n    const timeout = flags.initTimeout;\n    const numThreads = flags.numThreads;\n    const simd = flags.simd;\n    const useThreads = numThreads > 1 && isMultiThreadSupported();\n    const useSimd = simd && isSimdSupported();\n    const wasmPaths = flags.wasmPaths;\n    const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;\n    const wasmFileName = getWasmFileName(useSimd, useThreads);\n    const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;\n    let isTimeout = false;\n    const tasks = [];\n    if (timeout > 0) {\n      tasks.push(new Promise((resolve) => {\n        setTimeout(() => {\n          isTimeout = true;\n          resolve();\n        }, timeout);\n      }));\n    }\n    tasks.push(new Promise((resolve, reject) => {\n      const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n      const config = {\n        locateFile: (fileName, scriptDirectory) => {\n          if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {\n            return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by esbuild plugin to load file content as string.\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require_ort_wasm_threaded_worker()\n              ],\n              { type: "text/javascript" }\n            ));\n          }\n          if (fileName.endsWith(".wasm")) {\n            if (wasmPathOverride) {\n              return wasmPathOverride;\n            }\n            const prefix = wasmPrefixOverride ?? scriptDirectory;\n            if (false) {\n              if (wasmFileName === "ort-wasm-simd.wasm") {\n                return prefix + "ort-wasm-simd.jsep.wasm";\n              } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {\n                return prefix + "ort-wasm-simd-threaded.jsep.wasm";\n              }\n            }\n            return prefix + wasmFileName;\n          }\n          return scriptDirectory + fileName;\n        }\n      };\n      if (useThreads) {\n        config.numThreads = numThreads;\n        if (typeof Blob === "undefined") {\n          config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");\n        } else {\n          const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;\n          config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });\n        }\n      }\n      factory(config).then(\n        // wasm module initialized successfully\n        (module) => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        }\n      );\n    }));\n    await Promise.race(tasks);\n    if (isTimeout) {\n      throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n    }\n  };\n  var getInstance = () => {\n    if (initialized && wasm) {\n      return wasm;\n    }\n    throw new Error("WebAssembly is not initialized yet.");\n  };\n\n  // web/lib/wasm/wasm-utils.ts\n  var allocWasmString = (data, allocs) => {\n    const wasm2 = getInstance();\n    const dataLength = wasm2.lengthBytesUTF8(data) + 1;\n    const dataOffset = wasm2._malloc(dataLength);\n    wasm2.stringToUTF8(data, dataOffset, dataLength);\n    allocs.push(dataOffset);\n    return dataOffset;\n  };\n  var iterateExtraOptions = (options, prefix, seen, handler) => {\n    if (typeof options == "object" && options !== null) {\n      if (seen.has(options)) {\n        throw new Error("Circular reference in options");\n      } else {\n        seen.add(options);\n      }\n    }\n    Object.entries(options).forEach(([key, value]) => {\n      const name = prefix ? prefix + key : key;\n      if (typeof value === "object") {\n        iterateExtraOptions(value, name + ".", seen, handler);\n      } else if (typeof value === "string" || typeof value === "number") {\n        handler(name, value.toString());\n      } else if (typeof value === "boolean") {\n        handler(name, value ? "1" : "0");\n      } else {\n        throw new Error(`Can\'t handle extra config type: ${typeof value}`);\n      }\n    });\n  };\n  var checkLastError = (message) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const paramsOffset = wasm2.stackAlloc(8);\n      wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);\n      const errorCode = wasm2.HEAP32[paramsOffset / 4];\n      const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];\n      const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";\n      throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n\n  // web/lib/wasm/run-options.ts\n  var setRunOptions = (options) => {\n    const wasm2 = getInstance();\n    let runOptionsHandle = 0;\n    const allocs = [];\n    const runOptions = options || {};\n    try {\n      if (options?.logSeverityLevel === void 0) {\n        runOptions.logSeverityLevel = 2;\n      } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n      }\n      if (options?.logVerbosityLevel === void 0) {\n        runOptions.logVerbosityLevel = 0;\n      } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {\n        throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n      }\n      if (options?.terminate === void 0) {\n        runOptions.terminate = false;\n      }\n      let tagDataOffset = 0;\n      if (options?.tag !== void 0) {\n        tagDataOffset = allocWasmString(options.tag, allocs);\n      }\n      runOptionsHandle = wasm2._OrtCreateRunOptions(\n        runOptions.logSeverityLevel,\n        runOptions.logVerbosityLevel,\n        !!runOptions.terminate,\n        tagDataOffset\n      );\n      if (runOptionsHandle === 0) {\n        checkLastError("Can\'t create run options.");\n      }\n      if (options?.extra !== void 0) {\n        iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a run config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [runOptionsHandle, allocs];\n    } catch (e) {\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/session-options.ts\n  var getGraphOptimzationLevel = (graphOptimizationLevel) => {\n    switch (graphOptimizationLevel) {\n      case "disabled":\n        return 0;\n      case "basic":\n        return 1;\n      case "extended":\n        return 2;\n      case "all":\n        return 99;\n      default:\n        throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n    }\n  };\n  var getExecutionMode = (executionMode) => {\n    switch (executionMode) {\n      case "sequential":\n        return 0;\n      case "parallel":\n        return 1;\n      default:\n        throw new Error(`unsupported execution mode: ${executionMode}`);\n    }\n  };\n  var appendDefaultOptions = (options) => {\n    if (!options.extra) {\n      options.extra = {};\n    }\n    if (!options.extra.session) {\n      options.extra.session = {};\n    }\n    const session = options.extra.session;\n    if (!session.use_ort_model_bytes_directly) {\n      session.use_ort_model_bytes_directly = "1";\n    }\n    if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {\n      options.enableMemPattern = false;\n    }\n  };\n  var setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {\n    for (const ep of executionProviders) {\n      let epName = typeof ep === "string" ? ep : ep.name;\n      switch (epName) {\n        case "xnnpack":\n          epName = "XNNPACK";\n          break;\n        case "webnn":\n          epName = "WEBNN";\n          if (typeof ep !== "string") {\n            const webnnOptions = ep;\n            if (webnnOptions?.deviceType) {\n              const keyDataOffset = allocWasmString("deviceType", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'deviceType\' - ${webnnOptions.deviceType}.`);\n              }\n            }\n            if (webnnOptions?.numThreads) {\n              let numThreads = webnnOptions.numThreads;\n              if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {\n                numThreads = 0;\n              }\n              const keyDataOffset = allocWasmString("numThreads", allocs);\n              const valueDataOffset = allocWasmString(numThreads.toString(), allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'numThreads\' - ${webnnOptions.numThreads}.`);\n              }\n            }\n            if (webnnOptions?.powerPreference) {\n              const keyDataOffset = allocWasmString("powerPreference", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'powerPreference\' - ${webnnOptions.powerPreference}.`\n                );\n              }\n            }\n          }\n          break;\n        case "webgpu":\n          epName = "JS";\n          if (typeof ep !== "string") {\n            const webgpuOptions = ep;\n            if (webgpuOptions?.preferredLayout) {\n              if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {\n                throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${webgpuOptions.preferredLayout}`);\n              }\n              const keyDataOffset = allocWasmString("preferredLayout", allocs);\n              const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'preferredLayout\' - ${webgpuOptions.preferredLayout}.`\n                );\n              }\n            }\n          }\n          break;\n        case "wasm":\n        case "cpu":\n          continue;\n        default:\n          throw new Error(`not supported execution provider: ${epName}`);\n      }\n      const epNameDataOffset = allocWasmString(epName, allocs);\n      if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n        checkLastError(`Can\'t append execution provider: ${epName}.`);\n      }\n    }\n  };\n  var setSessionOptions = (options) => {\n    const wasm2 = getInstance();\n    let sessionOptionsHandle = 0;\n    const allocs = [];\n    const sessionOptions = options || {};\n    appendDefaultOptions(sessionOptions);\n    try {\n      const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");\n      const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");\n      const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;\n      const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;\n      if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n      }\n      const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;\n      if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n        throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n      }\n      const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;\n      sessionOptionsHandle = wasm2._OrtCreateSessionOptions(\n        graphOptimizationLevel,\n        !!sessionOptions.enableCpuMemArena,\n        !!sessionOptions.enableMemPattern,\n        executionMode,\n        !!sessionOptions.enableProfiling,\n        0,\n        logIdDataOffset,\n        logSeverityLevel,\n        logVerbosityLevel,\n        optimizedModelFilePathOffset\n      );\n      if (sessionOptionsHandle === 0) {\n        checkLastError("Can\'t create session options.");\n      }\n      if (sessionOptions.executionProviders) {\n        setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n      }\n      if (sessionOptions.freeDimensionOverrides) {\n        for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n          if (typeof name !== "string") {\n            throw new Error(`free dimension override name must be a string: ${name}`);\n          }\n          if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {\n            throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n          }\n          const nameOffset = allocWasmString(name, allocs);\n          if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n            checkLastError(`Can\'t set a free dimension override: ${name} - ${value}.`);\n          }\n        }\n      }\n      if (sessionOptions.extra !== void 0) {\n        iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a session config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [sessionOptionsHandle, allocs];\n    } catch (e) {\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/wasm-common.ts\n  var tensorDataTypeStringToEnum = (type) => {\n    switch (type) {\n      case "int8":\n        return 3 /* int8 */;\n      case "uint8":\n        return 2 /* uint8 */;\n      case "bool":\n        return 9 /* bool */;\n      case "int16":\n        return 5 /* int16 */;\n      case "uint16":\n        return 4 /* uint16 */;\n      case "int32":\n        return 6 /* int32 */;\n      case "uint32":\n        return 12 /* uint32 */;\n      case "float16":\n        return 10 /* float16 */;\n      case "float32":\n        return 1 /* float */;\n      case "float64":\n        return 11 /* double */;\n      case "string":\n        return 8 /* string */;\n      case "int64":\n        return 7 /* int64 */;\n      case "uint64":\n        return 13 /* uint64 */;\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  };\n  var tensorDataTypeEnumToString = (typeProto) => {\n    switch (typeProto) {\n      case 3 /* int8 */:\n        return "int8";\n      case 2 /* uint8 */:\n        return "uint8";\n      case 9 /* bool */:\n        return "bool";\n      case 5 /* int16 */:\n        return "int16";\n      case 4 /* uint16 */:\n        return "uint16";\n      case 6 /* int32 */:\n        return "int32";\n      case 12 /* uint32 */:\n        return "uint32";\n      case 10 /* float16 */:\n        return "float16";\n      case 1 /* float */:\n        return "float32";\n      case 11 /* double */:\n        return "float64";\n      case 8 /* string */:\n        return "string";\n      case 7 /* int64 */:\n        return "int64";\n      case 13 /* uint64 */:\n        return "uint64";\n      default:\n        throw new Error(`unsupported data type: ${typeProto}`);\n    }\n  };\n  var getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];\n  var tensorTypeToTypedArrayConstructor = (type) => {\n    switch (type) {\n      case "float16":\n        return Uint16Array;\n      case "float32":\n        return Float32Array;\n      case "uint8":\n        return Uint8Array;\n      case "int8":\n        return Int8Array;\n      case "uint16":\n        return Uint16Array;\n      case "int16":\n        return Int16Array;\n      case "int32":\n        return Int32Array;\n      case "bool":\n        return Uint8Array;\n      case "float64":\n        return Float64Array;\n      case "uint32":\n        return Uint32Array;\n      case "int64":\n        return BigInt64Array;\n      case "uint64":\n        return BigUint64Array;\n      default:\n        throw new Error(`unsupported type: ${type}`);\n    }\n  };\n  var logLevelStringToEnum = (logLevel) => {\n    switch (logLevel) {\n      case "verbose":\n        return 0;\n      case "info":\n        return 1;\n      case "warning":\n        return 2;\n      case "error":\n        return 3;\n      case "fatal":\n        return 4;\n      default:\n        throw new Error(`unsupported logging level: ${logLevel}`);\n    }\n  };\n  var isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";\n  var dataLocationStringToEnum = (location) => {\n    switch (location) {\n      case "none":\n        return 0;\n      case "cpu":\n        return 1;\n      case "cpu-pinned":\n        return 2;\n      case "texture":\n        return 3;\n      case "gpu-buffer":\n        return 4;\n      default:\n        throw new Error(`unsupported data location: ${location}`);\n    }\n  };\n\n  // web/lib/wasm/wasm-core-impl.ts\n  var initOrt = (numThreads, loggingLevel) => {\n    const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n    if (errorCode !== 0) {\n      checkLastError("Can\'t initialize onnxruntime.");\n    }\n  };\n  var initRuntime = async (env) => {\n    initOrt(env.wasm.numThreads, logLevelStringToEnum(env.logLevel));\n  };\n  var initEp = async (env, epName) => {\n    if (false) {\n      if (typeof navigator === "undefined" || !navigator.gpu) {\n        throw new Error("WebGPU is not supported in current environment");\n      }\n      const adapter = await navigator.gpu.requestAdapter();\n      if (!adapter) {\n        throw new Error(\n          \'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.\'\n        );\n      }\n      if (!env.wasm.simd) {\n        throw new Error(\n          "Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP"\n        );\n      }\n      const initJsep = null.init;\n      await initJsep(getInstance(), env, adapter);\n    }\n  };\n  var activeSessions = /* @__PURE__ */ new Map();\n  var getSessionInputOutputCount = (sessionHandle) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const dataOffset = wasm2.stackAlloc(8);\n      const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n      if (errorCode !== 0) {\n        checkLastError("Can\'t get session input/output count.");\n      }\n      return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var copyFromExternalBuffer = (model) => {\n    const wasm2 = getInstance();\n    const modelDataOffset = wasm2._malloc(model.byteLength);\n    if (modelDataOffset === 0) {\n      throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n    }\n    wasm2.HEAPU8.set(model, modelDataOffset);\n    return [modelDataOffset, model.byteLength];\n  };\n  var createSession = (modelData, options) => {\n    let modelDataOffset, modelDataLength;\n    const wasm2 = getInstance();\n    if (Array.isArray(modelData)) {\n      [modelDataOffset, modelDataLength] = modelData;\n    } else if (modelData.buffer === wasm2.HEAPU8.buffer) {\n      [modelDataOffset, modelDataLength] = [modelData.byteOffset, modelData.byteLength];\n    } else {\n      [modelDataOffset, modelDataLength] = copyFromExternalBuffer(modelData);\n    }\n    let sessionHandle = 0;\n    let sessionOptionsHandle = 0;\n    let ioBindingHandle = 0;\n    let allocs = [];\n    const inputNamesUTF8Encoded = [];\n    const outputNamesUTF8Encoded = [];\n    try {\n      [sessionOptionsHandle, allocs] = setSessionOptions(options);\n      sessionHandle = wasm2._OrtCreateSession(modelDataOffset, modelDataLength, sessionOptionsHandle);\n      if (sessionHandle === 0) {\n        checkLastError("Can\'t create a session.");\n      }\n      const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n      const inputNames = [];\n      const outputNames = [];\n      const outputPreferredLocations = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm2._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an input name.");\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm2.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm2._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an output name.");\n        }\n        outputNamesUTF8Encoded.push(name);\n        const nameString = wasm2.UTF8ToString(name);\n        outputNames.push(nameString);\n        if (false) {\n          const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";\n          if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {\n            throw new Error(`Not supported preferred output location: ${location}.`);\n          }\n          outputPreferredLocations.push(location);\n        }\n      }\n      let bindingState = null;\n      if (false) {\n        ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);\n        if (ioBindingHandle === 0) {\n          checkLastError("Can\'t create IO binding.");\n        }\n        bindingState = {\n          handle: ioBindingHandle,\n          outputPreferredLocations,\n          outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))\n        };\n      }\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);\n      return [sessionHandle, inputNames, outputNames];\n    } catch (e) {\n      inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      if (ioBindingHandle !== 0) {\n        wasm2._OrtReleaseBinding(ioBindingHandle);\n      }\n      if (sessionHandle !== 0) {\n        wasm2._OrtReleaseSession(sessionHandle);\n      }\n      throw e;\n    } finally {\n      wasm2._free(modelDataOffset);\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n    }\n  };\n  var releaseSession = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    if (ioBindingState) {\n      wasm2._OrtReleaseBinding(ioBindingState.handle);\n    }\n    wasm2.jsepUnregisterBuffers?.(sessionId);\n    inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    wasm2._OrtReleaseSession(sessionHandle);\n    activeSessions.delete(sessionId);\n  };\n  var prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {\n    if (!tensor) {\n      tensorHandles.push(0);\n      return;\n    }\n    const wasm2 = getInstance();\n    const dataType = tensor[0];\n    const dims = tensor[1];\n    const location = tensor[3];\n    let rawData;\n    let dataByteLength;\n    if (dataType === "string" && location === "gpu-buffer") {\n      throw new Error("String tensor is not supported on GPU.");\n    }\n    if (location === "gpu-buffer") {\n      const gpuBuffer = tensor[2].gpuBuffer;\n      const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));\n      dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;\n      rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);\n    } else {\n      const data = tensor[2];\n      if (Array.isArray(data)) {\n        dataByteLength = 4 * data.length;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        let dataIndex = rawData / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== "string") {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n      }\n    }\n    const stack = wasm2.stackSave();\n    const dimsOffset = wasm2.stackAlloc(4 * dims.length);\n    try {\n      let dimIndex = dimsOffset / 4;\n      dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);\n      const tensor2 = wasm2._OrtCreateTensor(\n        tensorDataTypeStringToEnum(dataType),\n        rawData,\n        dataByteLength,\n        dimsOffset,\n        dims.length,\n        dataLocationStringToEnum(location)\n      );\n      if (tensor2 === 0) {\n        checkLastError(`Can\'t create tensor for input/output. session=${sessionId}, index=${index}.`);\n      }\n      tensorHandles.push(tensor2);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    const inputCount = inputIndices.length;\n    const outputCount = outputIndices.length;\n    let runOptionsHandle = 0;\n    let runOptionsAllocs = [];\n    const inputTensorHandles = [];\n    const outputTensorHandles = [];\n    const inputOutputAllocs = [];\n    const beforeRunStack = wasm2.stackSave();\n    const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);\n    try {\n      [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n      for (let i = 0; i < inputCount; i++) {\n        prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);\n      }\n      for (let i = 0; i < outputCount; i++) {\n        prepareInputOutputTensor(\n          outputTensors[i],\n          outputTensorHandles,\n          inputOutputAllocs,\n          sessionId,\n          inputCount + outputIndices[i]\n        );\n      }\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];\n        wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];\n        wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n      if (false) {\n        const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;\n        if (inputNamesUTF8Encoded.length !== inputCount) {\n          throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model\'s input count (${inputNamesUTF8Encoded.length}).`);\n        }\n        for (let i = 0; i < inputCount; i++) {\n          const index = inputIndices[i];\n          const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t bind input[${i}] for session=${sessionId}.`);\n          }\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const index = outputIndices[i];\n          const location = outputTensors[i]?.[3];\n          if (location) {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind pre-allocated output[${i}] for session=${sessionId}.`);\n            }\n          } else {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n            }\n          }\n        }\n      }\n      let errorCode;\n      if (false) {\n        errorCode = await wasm2._OrtRunWithBinding(\n          sessionHandle,\n          ioBindingState.handle,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      } else {\n        errorCode = await wasm2._OrtRun(\n          sessionHandle,\n          inputNamesOffset,\n          inputValuesOffset,\n          inputCount,\n          outputNamesOffset,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      }\n      if (errorCode !== 0) {\n        checkLastError("failed to call OrtRun().");\n      }\n      const output = [];\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];\n        if (tensor === outputTensorHandles[i]) {\n          output.push(outputTensors[i]);\n          continue;\n        }\n        const beforeGetTensorDataStack = wasm2.stackSave();\n        const tensorDataOffset = wasm2.stackAlloc(4 * 4);\n        let keepOutputTensor = false;\n        let type, dataOffset = 0;\n        try {\n          const errorCode2 = wasm2._OrtGetTensorData(\n            tensor,\n            tensorDataOffset,\n            tensorDataOffset + 4,\n            tensorDataOffset + 8,\n            tensorDataOffset + 12\n          );\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm2.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm2.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i2 = 0; i2 < dimsLength; i2++) {\n            dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);\n          }\n          wasm2._OrtFree(dimsOffset);\n          const size = dims.reduce((a, b) => a * b, 1);\n          type = tensorDataTypeEnumToString(dataType);\n          const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n          if (type === "string") {\n            if (preferredLocation === "gpu-buffer") {\n              throw new Error("String tensor is not supported on GPU.");\n            }\n            const stringData = [];\n            let dataIndex = dataOffset / 4;\n            for (let i2 = 0; i2 < size; i2++) {\n              const offset = wasm2.HEAPU32[dataIndex++];\n              const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData, "cpu"]);\n          } else {\n            if (preferredLocation === "gpu-buffer" && size > 0) {\n              const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);\n              const elementSize = getTensorElementSize(dataType);\n              if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {\n                throw new Error(`Unsupported data type: ${type}`);\n              }\n              keepOutputTensor = true;\n              output.push([\n                type,\n                dims,\n                {\n                  gpuBuffer,\n                  download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),\n                  dispose: () => {\n                    wasm2._OrtReleaseTensor(tensor);\n                  }\n                },\n                "gpu-buffer"\n              ]);\n            } else {\n              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n              const data = new typedArrayConstructor(size);\n              new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n              output.push([type, dims, data, "cpu"]);\n            }\n          }\n        } finally {\n          wasm2.stackRestore(beforeGetTensorDataStack);\n          if (type === "string" && dataOffset) {\n            wasm2._free(dataOffset);\n          }\n          if (!keepOutputTensor) {\n            wasm2._OrtReleaseTensor(tensor);\n          }\n        }\n      }\n      if (ioBindingState) {\n        wasm2._OrtClearBoundOutputs(ioBindingState.handle);\n      }\n      return output;\n    } finally {\n      wasm2.stackRestore(beforeRunStack);\n      inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      inputOutputAllocs.forEach((p) => wasm2._free(p));\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      runOptionsAllocs.forEach((p) => wasm2._free(p));\n    }\n  };\n  var endProfiling = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error("invalid session id");\n    }\n    const sessionHandle = session[0];\n    const profileFileName = wasm2._OrtEndProfiling(sessionHandle);\n    if (profileFileName === 0) {\n      checkLastError("Can\'t get an profile file name.");\n    }\n    wasm2._OrtFree(profileFileName);\n  };\n  var extractTransferableBuffers = (tensors) => {\n    const buffers = [];\n    for (const tensor of tensors) {\n      const data = tensor[2];\n      if (!Array.isArray(data) && "buffer" in data) {\n        buffers.push(data.buffer);\n      }\n    }\n    return buffers;\n  };\n\n  // web/lib/wasm/proxy-worker/main.ts\n  self.onmessage = (ev) => {\n    const { type, in: message } = ev.data;\n    try {\n      switch (type) {\n        case "init-wasm":\n          initializeWebAssembly(message.wasm).then(\n            () => {\n              initRuntime(message).then(\n                () => {\n                  postMessage({ type });\n                },\n                (err) => {\n                  postMessage({ type, err });\n                }\n              );\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        case "init-ep": {\n          const { epName, env } = message;\n          initEp(env, epName).then(\n            () => {\n              postMessage({ type });\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        }\n        case "copy-from": {\n          const { buffer } = message;\n          const bufferData = copyFromExternalBuffer(buffer);\n          postMessage({ type, out: bufferData });\n          break;\n        }\n        case "create": {\n          const { model, options } = message;\n          const sessionMetadata = createSession(model, options);\n          postMessage({ type, out: sessionMetadata });\n          break;\n        }\n        case "release":\n          releaseSession(message);\n          postMessage({ type });\n          break;\n        case "run": {\n          const { sessionId, inputIndices, inputs, outputIndices, options } = message;\n          run(sessionId, inputIndices, inputs, outputIndices, new Array(outputIndices.length).fill(null), options).then(\n            (outputs) => {\n              if (outputs.some((o) => o[3] !== "cpu")) {\n                postMessage({ type, err: "Proxy does not support non-cpu tensor location." });\n              } else {\n                postMessage(\n                  { type, out: outputs },\n                  extractTransferableBuffers(outputs)\n                );\n              }\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        }\n        case "end-profiling":\n          endProfiling(message);\n          postMessage({ type });\n          break;\n        default:\n      }\n    } catch (err) {\n      postMessage({ type, err });\n    }\n  };\n})();\n//# sourceMappingURL=data:application/json;base64,\n';
    }
  });

  // web/lib/wasm/proxy-wrapper.ts
  var isProxy, proxyWorker, initializing2, initialized2, aborted2, initWasmCallbacks, queuedCallbacks, enqueueCallbacks, ensureWorker, onProxyWorkerMessage, scriptSrc, initializeWebAssemblyAndOrtRuntime, initializeOrtEp, copyFromExternalBuffer2, createSession2, releaseSession2, run2, endProfiling2;
  var init_proxy_wrapper = __esm({
    "web/lib/wasm/proxy-wrapper.ts"() {
      "use strict";
      init_esm();
      init_wasm_core_impl();
      init_wasm_factory();
      isProxy = () => !!env2.wasm.proxy && typeof document !== "undefined";
      initializing2 = false;
      initialized2 = false;
      aborted2 = false;
      queuedCallbacks = /* @__PURE__ */ new Map();
      enqueueCallbacks = (type, callbacks) => {
        const queue = queuedCallbacks.get(type);
        if (queue) {
          queue.push(callbacks);
        } else {
          queuedCallbacks.set(type, [callbacks]);
        }
      };
      ensureWorker = () => {
        if (initializing2 || !initialized2 || aborted2 || !proxyWorker) {
          throw new Error("worker not ready");
        }
      };
      onProxyWorkerMessage = (ev) => {
        switch (ev.data.type) {
          case "init-wasm":
            initializing2 = false;
            if (ev.data.err) {
              aborted2 = true;
              initWasmCallbacks[1](ev.data.err);
            } else {
              initialized2 = true;
              initWasmCallbacks[0]();
            }
            break;
          case "init-ep":
          case "copy-from":
          case "create":
          case "release":
          case "run":
          case "end-profiling": {
            const callbacks = queuedCallbacks.get(ev.data.type);
            if (ev.data.err) {
              callbacks.shift()[1](ev.data.err);
            } else {
              callbacks.shift()[0](ev.data.out);
            }
            break;
          }
          default:
        }
      };
      scriptSrc = typeof document !== "undefined" ? document?.currentScript?.src : void 0;
      initializeWebAssemblyAndOrtRuntime = async () => {
        if (initialized2) {
          return;
        }
        if (initializing2) {
          throw new Error("multiple calls to 'initWasm()' detected.");
        }
        if (aborted2) {
          throw new Error("previous call to 'initWasm()' failed.");
        }
        initializing2 = true;
        if (isProxy()) {
          if (env2.wasm.wasmPaths === void 0) {
            if (scriptSrc && scriptSrc.indexOf("blob:") !== 0) {
              env2.wasm.wasmPaths = scriptSrc.substr(0, +scriptSrc.lastIndexOf("/") + 1);
            }
          }
          return new Promise((resolve, reject) => {
            proxyWorker?.terminate();
            const workerUrl = URL.createObjectURL(new Blob(
              [
                // This require() function is handled by esbuild plugin to load file content as string.
                // eslint-disable-next-line @typescript-eslint/no-require-imports
                require_main()
              ],
              { type: "text/javascript" }
            ));
            proxyWorker = new Worker(workerUrl, { name: "ort-wasm-proxy-worker" });
            proxyWorker.onerror = (ev) => reject(ev);
            proxyWorker.onmessage = onProxyWorkerMessage;
            URL.revokeObjectURL(workerUrl);
            initWasmCallbacks = [resolve, reject];
            const message = { type: "init-wasm", in: env2 };
            proxyWorker.postMessage(message);
          });
        } else {
          try {
            await initializeWebAssembly(env2.wasm);
            await initRuntime(env2);
            initialized2 = true;
          } catch (e) {
            aborted2 = true;
            throw e;
          } finally {
            initializing2 = false;
          }
        }
      };
      initializeOrtEp = async (epName) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            enqueueCallbacks("init-ep", [resolve, reject]);
            const message = { type: "init-ep", in: { epName, env: env2 } };
            proxyWorker.postMessage(message);
          });
        } else {
          await initEp(env2, epName);
        }
      };
      copyFromExternalBuffer2 = async (buffer) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            enqueueCallbacks("copy-from", [resolve, reject]);
            const message = { type: "copy-from", in: { buffer } };
            proxyWorker.postMessage(message, [buffer.buffer]);
          });
        } else {
          return copyFromExternalBuffer(buffer);
        }
      };
      createSession2 = async (model, options) => {
        if (isProxy()) {
          if (options?.preferredOutputLocation) {
            throw new Error('session option "preferredOutputLocation" is not supported for proxy.');
          }
          ensureWorker();
          return new Promise((resolve, reject) => {
            enqueueCallbacks("create", [resolve, reject]);
            const message = { type: "create", in: { model, options } };
            const transferable = [];
            if (model instanceof Uint8Array) {
              transferable.push(model.buffer);
            }
            proxyWorker.postMessage(message, transferable);
          });
        } else {
          return createSession(model, options);
        }
      };
      releaseSession2 = async (sessionId) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            enqueueCallbacks("release", [resolve, reject]);
            const message = { type: "release", in: sessionId };
            proxyWorker.postMessage(message);
          });
        } else {
          releaseSession(sessionId);
        }
      };
      run2 = async (sessionId, inputIndices, inputs, outputIndices, outputs, options) => {
        if (isProxy()) {
          if (inputs.some((t) => t[3] !== "cpu")) {
            throw new Error("input tensor on GPU is not supported for proxy.");
          }
          if (outputs.some((t) => t)) {
            throw new Error("pre-allocated output tensor is not supported for proxy.");
          }
          ensureWorker();
          return new Promise((resolve, reject) => {
            enqueueCallbacks("run", [resolve, reject]);
            const serializableInputs = inputs;
            const message = { type: "run", in: { sessionId, inputIndices, inputs: serializableInputs, outputIndices, options } };
            proxyWorker.postMessage(message, extractTransferableBuffers(serializableInputs));
          });
        } else {
          return run(sessionId, inputIndices, inputs, outputIndices, outputs, options);
        }
      };
      endProfiling2 = async (sessionId) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            enqueueCallbacks("end-profiling", [resolve, reject]);
            const message = { type: "end-profiling", in: sessionId };
            proxyWorker.postMessage(message);
          });
        } else {
          endProfiling(sessionId);
        }
      };
    }
  });

  // nodejs-ignore:node:fs/promises
  var readFile2;
  var init_promises = __esm({
    "nodejs-ignore:node:fs/promises"() {
      readFile2 = void 0;
    }
  });

  // web/lib/wasm/session-handler-inference.ts
  var encodeTensorMetadata, decodeTensorMetadata, OnnxruntimeWebAssemblySessionHandler;
  var init_session_handler_inference = __esm({
    "web/lib/wasm/session-handler-inference.ts"() {
      "use strict";
      init_promises();
      init_esm();
      init_proxy_wrapper();
      init_wasm_common();
      encodeTensorMetadata = (tensor, getName) => {
        switch (tensor.location) {
          case "cpu":
            return [tensor.type, tensor.dims, tensor.data, "cpu"];
          case "gpu-buffer":
            return [tensor.type, tensor.dims, { gpuBuffer: tensor.gpuBuffer }, "gpu-buffer"];
          default:
            throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);
        }
      };
      decodeTensorMetadata = (tensor) => {
        switch (tensor[3]) {
          case "cpu":
            return new Tensor2(tensor[0], tensor[2], tensor[1]);
          case "gpu-buffer": {
            const dataType = tensor[0];
            if (!isGpuBufferSupportedType(dataType)) {
              throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);
            }
            const { gpuBuffer, download, dispose } = tensor[2];
            return Tensor2.fromGpuBuffer(gpuBuffer, { dataType, dims: tensor[1], download, dispose });
          }
          default:
            throw new Error(`invalid data location: ${tensor[3]}`);
        }
      };
      OnnxruntimeWebAssemblySessionHandler = class {
        async fetchModelAndCopyToWasmMemory(path) {
          const response = await fetch(path);
          if (response.status !== 200) {
            throw new Error(`failed to load model: ${path}`);
          }
          const arrayBuffer = await response.arrayBuffer();
          return copyFromExternalBuffer2(new Uint8Array(arrayBuffer));
        }
        async loadModel(pathOrBuffer, options) {
          TRACE_FUNC_BEGIN();
          let model;
          if (typeof pathOrBuffer === "string") {
            if (typeof process !== "undefined" && process.versions && process.versions.node) {
              model = await readFile2(pathOrBuffer);
            } else {
              model = await this.fetchModelAndCopyToWasmMemory(pathOrBuffer);
            }
          } else {
            model = pathOrBuffer;
          }
          [this.sessionId, this.inputNames, this.outputNames] = await createSession2(model, options);
          TRACE_FUNC_END();
        }
        async dispose() {
          return releaseSession2(this.sessionId);
        }
        async run(feeds, fetches, options) {
          TRACE_FUNC_BEGIN();
          const inputArray = [];
          const inputIndices = [];
          Object.entries(feeds).forEach((kvp) => {
            const name = kvp[0];
            const tensor = kvp[1];
            const index = this.inputNames.indexOf(name);
            if (index === -1) {
              throw new Error(`invalid input '${name}'`);
            }
            inputArray.push(tensor);
            inputIndices.push(index);
          });
          const outputArray = [];
          const outputIndices = [];
          Object.entries(fetches).forEach((kvp) => {
            const name = kvp[0];
            const tensor = kvp[1];
            const index = this.outputNames.indexOf(name);
            if (index === -1) {
              throw new Error(`invalid output '${name}'`);
            }
            outputArray.push(tensor);
            outputIndices.push(index);
          });
          const inputs = inputArray.map((t, i) => encodeTensorMetadata(t, () => `input "${this.inputNames[inputIndices[i]]}"`));
          const outputs = outputArray.map(
            (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.outputNames[outputIndices[i]]}"`) : null
          );
          const results = await run2(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
          const resultMap = {};
          for (let i = 0; i < results.length; i++) {
            resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);
          }
          TRACE_FUNC_END();
          return resultMap;
        }
        startProfiling() {
        }
        endProfiling() {
          void endProfiling2(this.sessionId);
        }
      };
    }
  });

  // web/lib/backend-wasm.ts
  var initializeFlags, OnnxruntimeWebAssemblyBackend;
  var init_backend_wasm = __esm({
    "web/lib/backend-wasm.ts"() {
      "use strict";
      init_node_os();
      init_esm();
      init_proxy_wrapper();
      init_session_handler_inference();
      initializeFlags = () => {
        if (typeof env2.wasm.initTimeout !== "number" || env2.wasm.initTimeout < 0) {
          env2.wasm.initTimeout = 0;
        }
        if (typeof env2.wasm.simd !== "boolean") {
          env2.wasm.simd = true;
        }
        if (typeof env2.wasm.proxy !== "boolean") {
          env2.wasm.proxy = false;
        }
        if (typeof env2.wasm.trace !== "boolean") {
          env2.wasm.trace = false;
        }
        if (typeof env2.wasm.numThreads !== "number" || !Number.isInteger(env2.wasm.numThreads) || env2.wasm.numThreads <= 0) {
          const numCpuLogicalCores = typeof navigator === "undefined" ? cpus().length : navigator.hardwareConcurrency;
          env2.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));
        }
      };
      OnnxruntimeWebAssemblyBackend = class {
        /**
         * This function initializes the WebAssembly backend.
         *
         * This function will be called only once for each backend name. It will be called the first time when
         * `ort.InferenceSession.create()` is called with a registered backend name.
         *
         * @param backendName - the registered backend name.
         */
        async init(backendName) {
          initializeFlags();
          await initializeWebAssemblyAndOrtRuntime();
          await initializeOrtEp(backendName);
        }
        async createInferenceSessionHandler(pathOrBuffer, options) {
          const handler = new OnnxruntimeWebAssemblySessionHandler();
          await handler.loadModel(pathOrBuffer, options);
          return Promise.resolve(handler);
        }
      };
    }
  });

  // web/lib/backend-wasm-inference.ts
  var backend_wasm_inference_exports = {};
  __export(backend_wasm_inference_exports, {
    wasmBackend: () => wasmBackend
  });
  var wasmBackend;
  var init_backend_wasm_inference = __esm({
    "web/lib/backend-wasm-inference.ts"() {
      "use strict";
      init_backend_wasm();
      wasmBackend = new OnnxruntimeWebAssemblyBackend();
    }
  });

  // web/lib/index.ts
  var lib_exports = {};
  __export(lib_exports, {
    InferenceSession: () => InferenceSession2,
    TRACE: () => TRACE,
    TRACE_FUNC_BEGIN: () => TRACE_FUNC_BEGIN,
    TRACE_FUNC_END: () => TRACE_FUNC_END,
    Tensor: () => Tensor2,
    TrainingSession: () => TrainingSession2,
    default: () => lib_default,
    env: () => env2,
    registerBackend: () => registerBackend
  });
  init_esm();
  init_esm();
  init_esm();

  // web/lib/version.ts
  var version2 = "1.17.0";

  // web/lib/index.ts
  var lib_default = esm_exports;
  if (false) {
    const onnxjsBackend = null.onnxjsBackend;
    registerBackend("webgl", onnxjsBackend, -10);
  }
  if (true) {
    const wasmBackend2 = true ? (init_backend_wasm_inference(), __toCommonJS(backend_wasm_inference_exports)).wasmBackend : null.wasmBackend;
    if (false) {
      registerBackend("webgpu", wasmBackend2, 5);
    }
    registerBackend("cpu", wasmBackend2, 10);
    registerBackend("wasm", wasmBackend2, 10);
    if (true) {
      registerBackend("xnnpack", wasmBackend2, 9);
      if (true) {
        registerBackend("webnn", wasmBackend2, 9);
      }
    }
  }
  Object.defineProperty(env2.versions, "web", { value: version2, enumerable: true });
  return __toCommonJS(lib_exports);
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vY29tbW9uL2xpYi9iYWNrZW5kLWltcGwudHMiLCAiLi4vLi4vY29tbW9uL2xpYi9iYWNrZW5kLnRzIiwgIi4uLy4uL2NvbW1vbi9saWIvdmVyc2lvbi50cyIsICIuLi8uLi9jb21tb24vbGliL2Vudi1pbXBsLnRzIiwgIi4uLy4uL2NvbW1vbi9saWIvZW52LnRzIiwgIi4uLy4uL2NvbW1vbi9saWIvdGVuc29yLWNvbnZlcnNpb24taW1wbC50cyIsICIuLi8uLi9jb21tb24vbGliL3RlbnNvci1mYWN0b3J5LWltcGwudHMiLCAiLi4vLi4vY29tbW9uL2xpYi90ZW5zb3ItaW1wbC10eXBlLW1hcHBpbmcudHMiLCAiLi4vLi4vY29tbW9uL2xpYi90ZW5zb3ItdXRpbHMtaW1wbC50cyIsICIuLi8uLi9jb21tb24vbGliL3RlbnNvci1pbXBsLnRzIiwgIi4uLy4uL2NvbW1vbi9saWIvdGVuc29yLnRzIiwgIi4uLy4uL2NvbW1vbi9saWIvdHJhY2UudHMiLCAiLi4vLi4vY29tbW9uL2xpYi9pbmZlcmVuY2Utc2Vzc2lvbi1pbXBsLnRzIiwgIi4uLy4uL2NvbW1vbi9saWIvaW5mZXJlbmNlLXNlc3Npb24udHMiLCAiLi4vLi4vY29tbW9uL2xpYi9vbm54LXZhbHVlLnRzIiwgIi4uLy4uL2NvbW1vbi9saWIvdHJhaW5pbmctc2Vzc2lvbi1pbXBsLnRzIiwgIi4uLy4uL2NvbW1vbi9saWIvdHJhaW5pbmctc2Vzc2lvbi50cyIsICIuLi8uLi9jb21tb24vbGliL2luZGV4LnRzIiwgIm5vZGVqcy1pZ25vcmU6bm9kZTpvcyIsICJub2RlanMtaWdub3JlOm5vZGU6cGF0aCIsICJub2RlanMtaWdub3JlOmZzIiwgIm5vZGVqcy1pZ25vcmU6cGF0aCIsICIuLi9saWIvd2FzbS9iaW5kaW5nL29ydC13YXNtLmpzIiwgIm5vZGVqcy1pZ25vcmU6d29ya2VyX3RocmVhZHMiLCAibm9kZWpzLWlnbm9yZTpwZXJmX2hvb2tzIiwgIm5vZGVqcy1pZ25vcmU6b3MiLCAiLi4vbGliL3dhc20vYmluZGluZy9vcnQtd2FzbS10aHJlYWRlZC5qcyIsICIuLi9saWIvd2FzbS9iaW5kaW5nL29ydC13YXNtLXRocmVhZGVkLndvcmtlci5qcyIsICIuLi9saWIvd2FzbS93YXNtLWZhY3RvcnkudHMiLCAiLi4vbGliL3dhc20vd2FzbS11dGlscy50cyIsICIuLi9saWIvd2FzbS9ydW4tb3B0aW9ucy50cyIsICIuLi9saWIvd2FzbS9zZXNzaW9uLW9wdGlvbnMudHMiLCAiLi4vbGliL3dhc20vd2FzbS1jb21tb24udHMiLCAiLi4vbGliL3dhc20vd2FzbS1jb3JlLWltcGwudHMiLCAicHJveHktd29ya2VyOi4vcHJveHktd29ya2VyL21haW4iLCAiLi4vbGliL3dhc20vcHJveHktd3JhcHBlci50cyIsICJub2RlanMtaWdub3JlOm5vZGU6ZnMvcHJvbWlzZXMiLCAiLi4vbGliL3dhc20vc2Vzc2lvbi1oYW5kbGVyLWluZmVyZW5jZS50cyIsICIuLi9saWIvYmFja2VuZC13YXNtLnRzIiwgIi4uL2xpYi9iYWNrZW5kLXdhc20taW5mZXJlbmNlLnRzIiwgIi4uL2xpYi9pbmRleC50cyIsICIuLi9saWIvdmVyc2lvbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7QmFja2VuZH0gZnJvbSAnLi9iYWNrZW5kLmpzJztcblxuaW50ZXJmYWNlIEJhY2tlbmRJbmZvIHtcbiAgYmFja2VuZDogQmFja2VuZDtcbiAgcHJpb3JpdHk6IG51bWJlcjtcblxuICBpbml0UHJvbWlzZT86IFByb21pc2U8dm9pZD47XG4gIGluaXRpYWxpemVkPzogYm9vbGVhbjtcbiAgYWJvcnRlZD86IGJvb2xlYW47XG59XG5cbmNvbnN0IGJhY2tlbmRzOiBNYXA8c3RyaW5nLCBCYWNrZW5kSW5mbz4gPSBuZXcgTWFwKCk7XG5jb25zdCBiYWNrZW5kc1NvcnRlZEJ5UHJpb3JpdHk6IHN0cmluZ1tdID0gW107XG5cbi8qKlxuICogUmVnaXN0ZXIgYSBiYWNrZW5kLlxuICpcbiAqIEBwYXJhbSBuYW1lIC0gdGhlIG5hbWUgYXMgYSBrZXkgdG8gbG9va3VwIGFzIGFuIGV4ZWN1dGlvbiBwcm92aWRlci5cbiAqIEBwYXJhbSBiYWNrZW5kIC0gdGhlIGJhY2tlbmQgb2JqZWN0LlxuICogQHBhcmFtIHByaW9yaXR5IC0gYW4gaW50ZWdlciBpbmRpY2F0aW5nIHRoZSBwcmlvcml0eSBvZiB0aGUgYmFja2VuZC4gSGlnaGVyIG51bWJlciBtZWFucyBoaWdoZXIgcHJpb3JpdHkuIGlmIHByaW9yaXR5XG4gKiA8IDAsIGl0IHdpbGwgYmUgY29uc2lkZXJlZCBhcyBhICdiZXRhJyB2ZXJzaW9uIGFuZCB3aWxsIG5vdCBiZSB1c2VkIGFzIGEgZmFsbGJhY2sgYmFja2VuZCBieSBkZWZhdWx0LlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyQmFja2VuZCA9IChuYW1lOiBzdHJpbmcsIGJhY2tlbmQ6IEJhY2tlbmQsIHByaW9yaXR5OiBudW1iZXIpOiB2b2lkID0+IHtcbiAgaWYgKGJhY2tlbmQgJiYgdHlwZW9mIGJhY2tlbmQuaW5pdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYmFja2VuZC5jcmVhdGVJbmZlcmVuY2VTZXNzaW9uSGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnN0IGN1cnJlbnRCYWNrZW5kID0gYmFja2VuZHMuZ2V0KG5hbWUpO1xuICAgIGlmIChjdXJyZW50QmFja2VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBiYWNrZW5kcy5zZXQobmFtZSwge2JhY2tlbmQsIHByaW9yaXR5fSk7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50QmFja2VuZC5wcmlvcml0eSA+IHByaW9yaXR5KSB7XG4gICAgICAvLyBzYW1lIG5hbWUgaXMgYWxyZWFkeSByZWdpc3RlcmVkIHdpdGggYSBoaWdoZXIgcHJpb3JpdHkuIHNraXAgcmVnaXN0ZXJhdGlvbi5cbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRCYWNrZW5kLnByaW9yaXR5ID09PSBwcmlvcml0eSkge1xuICAgICAgaWYgKGN1cnJlbnRCYWNrZW5kLmJhY2tlbmQgIT09IGJhY2tlbmQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgcmVnaXN0ZXIgYmFja2VuZCBcIiR7bmFtZX1cIiB1c2luZyBwcmlvcml0eSAke3ByaW9yaXR5fWApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmlvcml0eSA+PSAwKSB7XG4gICAgICBjb25zdCBpID0gYmFja2VuZHNTb3J0ZWRCeVByaW9yaXR5LmluZGV4T2YobmFtZSk7XG4gICAgICBpZiAoaSAhPT0gLTEpIHtcbiAgICAgICAgYmFja2VuZHNTb3J0ZWRCeVByaW9yaXR5LnNwbGljZShpLCAxKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYWNrZW5kc1NvcnRlZEJ5UHJpb3JpdHkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGJhY2tlbmRzLmdldChiYWNrZW5kc1NvcnRlZEJ5UHJpb3JpdHlbaV0pIS5wcmlvcml0eSA8PSBwcmlvcml0eSkge1xuICAgICAgICAgIGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eS5zcGxpY2UoaSwgMCwgbmFtZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiYWNrZW5kc1NvcnRlZEJ5UHJpb3JpdHkucHVzaChuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignbm90IGEgdmFsaWQgYmFja2VuZCcpO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlIGJhY2tlbmQgYnkgc3BlY2lmaWVkIGhpbnRzLlxuICpcbiAqIEBwYXJhbSBiYWNrZW5kSGludHMgLSBhIGxpc3Qgb2YgZXhlY3V0aW9uIHByb3ZpZGVyIG5hbWVzIHRvIGxvb2t1cC4gSWYgb21pdHRlZCB1c2UgcmVnaXN0ZXJlZCBiYWNrZW5kcyBhcyBsaXN0LlxuICogQHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGJhY2tlbmQuXG4gKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgY29uc3QgcmVzb2x2ZUJhY2tlbmQgPSBhc3luYyhiYWNrZW5kSGludHM6IHJlYWRvbmx5IHN0cmluZ1tdKTogUHJvbWlzZTxCYWNrZW5kPiA9PiB7XG4gIGNvbnN0IGJhY2tlbmROYW1lcyA9IGJhY2tlbmRIaW50cy5sZW5ndGggPT09IDAgPyBiYWNrZW5kc1NvcnRlZEJ5UHJpb3JpdHkgOiBiYWNrZW5kSGludHM7XG4gIGNvbnN0IGVycm9ycyA9IFtdO1xuICBmb3IgKGNvbnN0IGJhY2tlbmROYW1lIG9mIGJhY2tlbmROYW1lcykge1xuICAgIGNvbnN0IGJhY2tlbmRJbmZvID0gYmFja2VuZHMuZ2V0KGJhY2tlbmROYW1lKTtcbiAgICBpZiAoYmFja2VuZEluZm8pIHtcbiAgICAgIGlmIChiYWNrZW5kSW5mby5pbml0aWFsaXplZCkge1xuICAgICAgICByZXR1cm4gYmFja2VuZEluZm8uYmFja2VuZDtcbiAgICAgIH0gZWxzZSBpZiAoYmFja2VuZEluZm8uYWJvcnRlZCkge1xuICAgICAgICBjb250aW51ZTsgIC8vIGN1cnJlbnQgYmFja2VuZCBpcyB1bmF2YWlsYWJsZTsgdHJ5IG5leHRcbiAgICAgIH1cblxuICAgICAgY29uc3QgaXNJbml0aWFsaXppbmcgPSAhIWJhY2tlbmRJbmZvLmluaXRQcm9taXNlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFpc0luaXRpYWxpemluZykge1xuICAgICAgICAgIGJhY2tlbmRJbmZvLmluaXRQcm9taXNlID0gYmFja2VuZEluZm8uYmFja2VuZC5pbml0KGJhY2tlbmROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBiYWNrZW5kSW5mby5pbml0UHJvbWlzZTtcbiAgICAgICAgYmFja2VuZEluZm8uaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gYmFja2VuZEluZm8uYmFja2VuZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKCFpc0luaXRpYWxpemluZykge1xuICAgICAgICAgIGVycm9ycy5wdXNoKHtuYW1lOiBiYWNrZW5kTmFtZSwgZXJyOiBlfSk7XG4gICAgICAgIH1cbiAgICAgICAgYmFja2VuZEluZm8uYWJvcnRlZCA9IHRydWU7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBkZWxldGUgYmFja2VuZEluZm8uaW5pdFByb21pc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKGBubyBhdmFpbGFibGUgYmFja2VuZCBmb3VuZC4gRVJSOiAke2Vycm9ycy5tYXAoZSA9PiBgWyR7ZS5uYW1lfV0gJHtlLmVycn1gKS5qb2luKCcsICcpfWApO1xufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9ufSBmcm9tICcuL2luZmVyZW5jZS1zZXNzaW9uLmpzJztcbmltcG9ydCB7T25ueFZhbHVlfSBmcm9tICcuL29ubngtdmFsdWUuanMnO1xuaW1wb3J0IHtUcmFpbmluZ1Nlc3Npb259IGZyb20gJy4vdHJhaW5pbmctc2Vzc2lvbi5qcyc7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgU2Vzc2lvbkhhbmRsZXIge1xuICB0eXBlIEZlZWRzVHlwZSA9IHtbbmFtZTogc3RyaW5nXTogT25ueFZhbHVlfTtcbiAgdHlwZSBGZXRjaGVzVHlwZSA9IHtbbmFtZTogc3RyaW5nXTogT25ueFZhbHVlIHwgbnVsbH07XG4gIHR5cGUgUmV0dXJuVHlwZSA9IHtbbmFtZTogc3RyaW5nXTogT25ueFZhbHVlfTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHNoYXJlZCBTZXNzaW9uSGFuZGxlciBmdW5jdGlvbmFsaXR5XG4gKlxuICogQGlnbm9yZVxuICovXG5pbnRlcmZhY2UgU2Vzc2lvbkhhbmRsZXIge1xuICBkaXNwb3NlKCk6IFByb21pc2U8dm9pZD47XG5cbiAgcmVhZG9ubHkgaW5wdXROYW1lczogcmVhZG9ubHkgc3RyaW5nW107XG4gIHJlYWRvbmx5IG91dHB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYSBoYW5kbGVyIGluc3RhbmNlIG9mIGFuIGluZmVyZW5jZSBzZXNzaW9uLlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbmZlcmVuY2VTZXNzaW9uSGFuZGxlciBleHRlbmRzIFNlc3Npb25IYW5kbGVyIHtcbiAgc3RhcnRQcm9maWxpbmcoKTogdm9pZDtcbiAgZW5kUHJvZmlsaW5nKCk6IHZvaWQ7XG5cbiAgcnVuKGZlZWRzOiBTZXNzaW9uSGFuZGxlci5GZWVkc1R5cGUsIGZldGNoZXM6IFNlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlLFxuICAgICAgb3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxTZXNzaW9uSGFuZGxlci5SZXR1cm5UeXBlPjtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYSBoYW5kbGVyIGluc3RhbmNlIG9mIGEgdHJhaW5pbmcgaW5mZXJlbmNlIHNlc3Npb24uXG4gKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYWluaW5nU2Vzc2lvbkhhbmRsZXIgZXh0ZW5kcyBTZXNzaW9uSGFuZGxlciB7XG4gIHJlYWRvbmx5IGV2YWxJbnB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcbiAgcmVhZG9ubHkgZXZhbE91dHB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcblxuICBsYXp5UmVzZXRHcmFkKCk6IFByb21pc2U8dm9pZD47XG4gIHJ1blRyYWluU3RlcChcbiAgICAgIGZlZWRzOiBTZXNzaW9uSGFuZGxlci5GZWVkc1R5cGUsIGZldGNoZXM6IFNlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlLFxuICAgICAgb3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxTZXNzaW9uSGFuZGxlci5SZXR1cm5UeXBlPjtcbiAgcnVuT3B0aW1pemVyU3RlcChvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+O1xuICBydW5FdmFsU3RlcChcbiAgICAgIGZlZWRzOiBTZXNzaW9uSGFuZGxlci5GZWVkc1R5cGUsIGZldGNoZXM6IFNlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlLFxuICAgICAgb3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxTZXNzaW9uSGFuZGxlci5SZXR1cm5UeXBlPjtcblxuICBnZXRQYXJhbWV0ZXJzU2l6ZSh0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTxudW1iZXI+O1xuICBsb2FkUGFyYW1ldGVyc0J1ZmZlcihhcnJheTogVWludDhBcnJheSwgdHJhaW5hYmxlT25seTogYm9vbGVhbik6IFByb21pc2U8dm9pZD47XG4gIGdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzKHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBQcm9taXNlPE9ubnhWYWx1ZT47XG59XG5cbi8qKlxuICogUmVwcmVzZW50IGEgYmFja2VuZCB0aGF0IHByb3ZpZGVzIGltcGxlbWVudGF0aW9uIG9mIG1vZGVsIGluZmVyZW5jaW5nLlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYWNrZW5kIHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgdGhlIGJhY2tlbmQgYXN5bmNocm9ub3VzbHkuIFNob3VsZCB0aHJvdyB3aGVuIGZhaWxlZC5cbiAgICovXG4gIGluaXQoYmFja2VuZE5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD47XG5cbiAgY3JlYXRlSW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXIodXJpT3JCdWZmZXI6IHN0cmluZ3xVaW50OEFycmF5LCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPEluZmVyZW5jZVNlc3Npb25IYW5kbGVyPjtcblxuICBjcmVhdGVUcmFpbmluZ1Nlc3Npb25IYW5kbGVyP1xuICAgICAgKGNoZWNrcG9pbnRTdGF0ZVVyaU9yQnVmZmVyOiBUcmFpbmluZ1Nlc3Npb24uVVJJb3JCdWZmZXIsIHRyYWluTW9kZWxVcmlPckJ1ZmZlcjogVHJhaW5pbmdTZXNzaW9uLlVSSW9yQnVmZmVyLFxuICAgICAgIGV2YWxNb2RlbFVyaU9yQnVmZmVyOiBUcmFpbmluZ1Nlc3Npb24uVVJJb3JCdWZmZXIsIG9wdGltaXplck1vZGVsVXJpT3JCdWZmZXI6IFRyYWluaW5nU2Vzc2lvbi5VUklvckJ1ZmZlcixcbiAgICAgICBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTogUHJvbWlzZTxUcmFpbmluZ1Nlc3Npb25IYW5kbGVyPjtcbn1cblxuZXhwb3J0IHtyZWdpc3RlckJhY2tlbmR9IGZyb20gJy4vYmFja2VuZC1pbXBsLmpzJztcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuLy8gVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSAvanMvc2NyaXB0cy91cGRhdGUtdmVyc2lvbi50c1xuLy8gRG8gbm90IG1vZGlmeSBmaWxlIGNvbnRlbnQgbWFudWFsbHkuXG5cbmV4cG9ydCBjb25zdCB2ZXJzaW9uID0gJzEuMTcuMCc7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7RW52fSBmcm9tICcuL2Vudi5qcyc7XG5pbXBvcnQge3ZlcnNpb259IGZyb20gJy4vdmVyc2lvbi5qcyc7XG5cbnR5cGUgTG9nTGV2ZWxUeXBlID0gRW52Wydsb2dMZXZlbCddO1xuXG5sZXQgbG9nTGV2ZWxWYWx1ZTogUmVxdWlyZWQ8TG9nTGV2ZWxUeXBlPiA9ICd3YXJuaW5nJztcblxuZXhwb3J0IGNvbnN0IGVudjogRW52ID0ge1xuICB3YXNtOiB7fSBhcyBFbnYuV2ViQXNzZW1ibHlGbGFncyxcbiAgd2ViZ2w6IHt9IGFzIEVudi5XZWJHTEZsYWdzLFxuICB3ZWJncHU6IHt9IGFzIEVudi5XZWJHcHVGbGFncyxcbiAgdmVyc2lvbnM6IHtjb21tb246IHZlcnNpb259LFxuXG4gIHNldCBsb2dMZXZlbCh2YWx1ZTogTG9nTGV2ZWxUeXBlKSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgfHwgWyd2ZXJib3NlJywgJ2luZm8nLCAnd2FybmluZycsICdlcnJvcicsICdmYXRhbCddLmluZGV4T2YodmFsdWUpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBsb2dnaW5nIGxldmVsOiAke3ZhbHVlfWApO1xuICAgIH1cbiAgICBsb2dMZXZlbFZhbHVlID0gdmFsdWU7XG4gIH0sXG4gIGdldCBsb2dMZXZlbCgpOiBSZXF1aXJlZDxMb2dMZXZlbFR5cGU+IHtcbiAgICByZXR1cm4gbG9nTGV2ZWxWYWx1ZTtcbiAgfSxcbn07XG5cbi8vIHNldCBwcm9wZXJ0eSAnbG9nTGV2ZWwnIHNvIHRoYXQgdGhleSBjYW4gYmUgY29ycmVjdGx5IHRyYW5zZmVycmVkIHRvIHdvcmtlciBieSBgcG9zdE1lc3NhZ2UoKWAuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZW52LCAnbG9nTGV2ZWwnLCB7ZW51bWVyYWJsZTogdHJ1ZX0pO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge2VudiBhcyBlbnZJbXBsfSBmcm9tICcuL2Vudi1pbXBsLmpzJztcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIEVudiB7XG4gIGV4cG9ydCB0eXBlIFdhc21QcmVmaXhPckZpbGVQYXRocyA9IHN0cmluZ3x7XG4gICAgLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uICovXG4gICAgJ29ydC13YXNtLndhc20nPzogc3RyaW5nO1xuICAgICdvcnQtd2FzbS10aHJlYWRlZC53YXNtJz86IHN0cmluZztcbiAgICAnb3J0LXdhc20tc2ltZC53YXNtJz86IHN0cmluZztcbiAgICAnb3J0LXRyYWluaW5nLXdhc20tc2ltZC53YXNtJz86IHN0cmluZztcbiAgICAnb3J0LXdhc20tc2ltZC10aHJlYWRlZC53YXNtJz86IHN0cmluZztcbiAgICAvKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuICB9O1xuICBleHBvcnQgaW50ZXJmYWNlIFdlYkFzc2VtYmx5RmxhZ3Mge1xuICAgIC8qKlxuICAgICAqIHNldCBvciBnZXQgbnVtYmVyIG9mIHRocmVhZChzKS4gSWYgb21pdHRlZCBvciBzZXQgdG8gMCwgbnVtYmVyIG9mIHRocmVhZChzKSB3aWxsIGJlIGRldGVybWluZWQgYnkgc3lzdGVtLiBJZiBzZXRcbiAgICAgKiB0byAxLCBubyB3b3JrZXIgdGhyZWFkIHdpbGwgYmUgc3Bhd25lZC5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSB3aGVuIFdlYkFzc2VtYmx5IG11bHRpdGhyZWFkIGZlYXR1cmUgaXMgYXZhaWxhYmxlIGluIGN1cnJlbnQgY29udGV4dC5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYDBgXG4gICAgICovXG4gICAgbnVtVGhyZWFkcz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIHNldCBvciBnZXQgYSBib29sZWFuIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciB0byBlbmFibGUgU0lNRC4gSWYgc2V0IHRvIGZhbHNlLCBTSU1EIHdpbGwgYmUgZm9yY2VseSBkaXNhYmxlZC5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSB3aGVuIFdlYkFzc2VtYmx5IFNJTUQgZmVhdHVyZSBpcyBhdmFpbGFibGUgaW4gY3VycmVudCBjb250ZXh0LlxuICAgICAqXG4gICAgICogQGRlZmF1bHRWYWx1ZSBgdHJ1ZWBcbiAgICAgKi9cbiAgICBzaW1kPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIHNldCBvciBnZXQgYSBib29sZWFuIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciB0byBlbmFibGUgdHJhY2UuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcbiAgICAgKi9cbiAgICB0cmFjZT86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBTZXQgb3IgZ2V0IGEgbnVtYmVyIHNwZWNpZnlpbmcgdGhlIHRpbWVvdXQgZm9yIGluaXRpYWxpemF0aW9uIG9mIFdlYkFzc2VtYmx5IGJhY2tlbmQsIGluIG1pbGxpc2Vjb25kcy4gQSB6ZXJvXG4gICAgICogdmFsdWUgaW5kaWNhdGVzIG5vIHRpbWVvdXQgaXMgc2V0LlxuICAgICAqXG4gICAgICogQGRlZmF1bHRWYWx1ZSBgMGBcbiAgICAgKi9cbiAgICBpbml0VGltZW91dD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFNldCBhIGN1c3RvbSBVUkwgcHJlZml4IHRvIHRoZSAud2FzbSBmaWxlcyBvciBhIHNldCBvZiBvdmVycmlkZXMgZm9yIGVhY2ggLndhc20gZmlsZS4gVGhlIG92ZXJyaWRlIHBhdGggc2hvdWxkIGJlXG4gICAgICogYW4gYWJzb2x1dGUgcGF0aC5cbiAgICAgKi9cbiAgICB3YXNtUGF0aHM/OiBXYXNtUHJlZml4T3JGaWxlUGF0aHM7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgb3IgZ2V0IGEgYm9vbGVhbiB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gcHJveHkgdGhlIGV4ZWN1dGlvbiBvZiBtYWluIHRocmVhZCB0byBhIHdvcmtlciB0aHJlYWQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBwcm94eT86IGJvb2xlYW47XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIFdlYkdMRmxhZ3Mge1xuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgdGhlIFdlYkdMIENvbnRleHQgSUQgKHdlYmdsIG9yIHdlYmdsMikuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGAnd2ViZ2wyJ2BcbiAgICAgKi9cbiAgICBjb250ZXh0SWQ/OiAnd2ViZ2wnfCd3ZWJnbDInO1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgV2ViR0wgcmVuZGVyaW5nIGNvbnRleHQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgdGhlIG1heGltdW0gYmF0Y2ggc2l6ZSBmb3IgbWF0bXVsLiAwIG1lYW5zIHRvIGRpc2FibGUgYmF0Y2hpbmcuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIG1hdG11bE1heEJhdGNoU2l6ZT86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBTZXQgb3IgZ2V0IHRoZSB0ZXh0dXJlIGNhY2hlIG1vZGUuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGAnZnVsbCdgXG4gICAgICovXG4gICAgdGV4dHVyZUNhY2hlTW9kZT86ICdpbml0aWFsaXplck9ubHknfCdmdWxsJztcbiAgICAvKipcbiAgICAgKiBTZXQgb3IgZ2V0IHRoZSBwYWNrZWQgdGV4dHVyZSBtb2RlXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBwYWNrPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXQgb3IgZ2V0IHdoZXRoZXIgZW5hYmxlIGFzeW5jIGRvd25sb2FkLlxuICAgICAqXG4gICAgICogQGRlZmF1bHRWYWx1ZSBgZmFsc2VgXG4gICAgICovXG4gICAgYXN5bmM/OiBib29sZWFuO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBXZWJHcHVQcm9maWxpbmdEYXRhVjFUZW5zb3JNZXRhZGF0YSB7XG4gICAgZGltczogcmVhZG9ubHkgbnVtYmVyW107XG4gICAgZGF0YVR5cGU6IHN0cmluZztcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIFdlYkdwdVByb2ZpbGluZ0RhdGFWMSB7XG4gICAgdmVyc2lvbjogMTtcbiAgICBpbnB1dHNNZXRhZGF0YTogcmVhZG9ubHkgV2ViR3B1UHJvZmlsaW5nRGF0YVYxVGVuc29yTWV0YWRhdGFbXTtcbiAgICBvdXRwdXRzTWV0YWRhdGE6IHJlYWRvbmx5IFdlYkdwdVByb2ZpbGluZ0RhdGFWMVRlbnNvck1ldGFkYXRhW107XG4gICAga2VybmVsSWQ6IG51bWJlcjtcbiAgICBrZXJuZWxUeXBlOiBzdHJpbmc7XG4gICAga2VybmVsTmFtZTogc3RyaW5nO1xuICAgIHN0YXJ0VGltZTogbnVtYmVyO1xuICAgIGVuZFRpbWU6IG51bWJlcjtcbiAgfVxuXG4gIGV4cG9ydCB0eXBlIFdlYkdwdVByb2ZpbGluZ0RhdGEgPSBXZWJHcHVQcm9maWxpbmdEYXRhVjE7XG5cbiAgZXhwb3J0IGludGVyZmFjZSBXZWJHcHVGbGFncyB7XG4gICAgLyoqXG4gICAgICogU2V0IG9yIGdldCB0aGUgcHJvZmlsaW5nIG1vZGUuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgYGVudi53ZWJncHUucHJvZmlsaW5nLm1vZGVgIGluc3RlYWQuIElmIGBlbnYud2ViZ3B1LnByb2ZpbGluZy5tb2RlYCBpcyBzZXQsIHRoaXMgcHJvcGVydHkgd2lsbCBiZVxuICAgICAqIGlnbm9yZWQuXG4gICAgICovXG4gICAgcHJvZmlsaW5nTW9kZT86ICdvZmYnfCdkZWZhdWx0JztcbiAgICAvKipcbiAgICAgKiBTZXQgb3IgZ2V0IHRoZSBwcm9maWxpbmcgY29uZmlndXJhdGlvbi5cbiAgICAgKi9cbiAgICBwcm9maWxpbmc/OiB7XG4gICAgICAvKipcbiAgICAgICAqIFNldCBvciBnZXQgdGhlIHByb2ZpbGluZyBtb2RlLlxuICAgICAgICpcbiAgICAgICAqIEBkZWZhdWx0VmFsdWUgYCdvZmYnYFxuICAgICAgICovXG4gICAgICBtb2RlPzogJ29mZid8J2RlZmF1bHQnO1xuXG4gICAgICAvKipcbiAgICAgICAqIFNldCBvciBnZXQgYSBjYWxsYmFjayBmdW5jdGlvbiB3aGVuIGEgcHJvZmlsaW5nIGRhdGEgaXMgcmVjZWl2ZWQuIElmIG5vdCBzZXQsIHRoZSBwcm9maWxpbmcgZGF0YSB3aWxsIGJlXG4gICAgICAgKiBwcmludGVkIHRvIGNvbnNvbGUuXG4gICAgICAgKi9cbiAgICAgIG9uZGF0YT86IChkYXRhOiBXZWJHcHVQcm9maWxpbmdEYXRhKSA9PiB2b2lkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZXZpY2UgZm9yIFdlYkdQVS5cbiAgICAgKlxuICAgICAqIFdoZW4gdXNlIHdpdGggVHlwZVNjcmlwdCwgdGhlIHR5cGUgb2YgdGhpcyBwcm9wZXJ0eSBpcyBgR1BVRGV2aWNlYCBkZWZpbmVkIGluIFwiQHdlYmdwdS90eXBlc1wiLlxuICAgICAqIFVzZSBgY29uc3QgZGV2aWNlID0gZW52LndlYmdwdS5kZXZpY2UgYXMgR1BVRGV2aWNlO2AgaW4gVHlwZVNjcmlwdCB0byBhY2Nlc3MgdGhpcyBwcm9wZXJ0eSB3aXRoIGNvcnJlY3QgdHlwZS5cbiAgICAgKlxuICAgICAqIHNlZSBjb21tZW50cyBvbiB7QGxpbmsgR3B1QnVmZmVyVHlwZX0gZm9yIG1vcmUgZGV0YWlscyBhYm91dCB3aHkgbm90IHVzZSB0eXBlcyBkZWZpbmVkIGluIFwiQHdlYmdwdS90eXBlc1wiLlxuICAgICAqL1xuICAgIHJlYWRvbmx5IGRldmljZTogdW5rbm93bjtcbiAgICAvKipcbiAgICAgKiBTZXQgb3IgZ2V0IHdoZXRoZXIgdmFsaWRhdGUgaW5wdXQgY29udGVudC5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYGZhbHNlYFxuICAgICAqL1xuICAgIHZhbGlkYXRlSW5wdXRDb250ZW50PzogYm9vbGVhbjtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVudiB7XG4gIC8qKlxuICAgKiBzZXQgdGhlIHNldmVyaXR5IGxldmVsIGZvciBsb2dnaW5nLlxuICAgKlxuICAgKiBAZGVmYXVsdFZhbHVlIGAnd2FybmluZydgXG4gICAqL1xuICBsb2dMZXZlbD86ICd2ZXJib3NlJ3wnaW5mbyd8J3dhcm5pbmcnfCdlcnJvcid8J2ZhdGFsJztcbiAgLyoqXG4gICAqIEluZGljYXRlIHdoZXRoZXIgcnVuIGluIGRlYnVnIG1vZGUuXG4gICAqXG4gICAqIEBkZWZhdWx0VmFsdWUgYGZhbHNlYFxuICAgKi9cbiAgZGVidWc/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBHZXQgdmVyc2lvbiBvZiB0aGUgY3VycmVudCBwYWNrYWdlLlxuICAgKi9cbiAgcmVhZG9ubHkgdmVyc2lvbnM6IHtcbiAgICByZWFkb25seSBjb21tb246IHN0cmluZztcbiAgICByZWFkb25seSB3ZWI/OiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgbm9kZT86IHN0cmluZztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG4gICAgcmVhZG9ubHkgJ3JlYWN0LW5hdGl2ZSc/OiBzdHJpbmc7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlcHJlc2VudCBhIHNldCBvZiBmbGFncyBmb3IgV2ViQXNzZW1ibHlcbiAgICovXG4gIHJlYWRvbmx5IHdhc206IEVudi5XZWJBc3NlbWJseUZsYWdzO1xuXG4gIC8qKlxuICAgKiBSZXByZXNlbnQgYSBzZXQgb2YgZmxhZ3MgZm9yIFdlYkdMXG4gICAqL1xuICByZWFkb25seSB3ZWJnbDogRW52LldlYkdMRmxhZ3M7XG5cbiAgLyoqXG4gICAqIFJlcHJlc2VudCBhIHNldCBvZiBmbGFncyBmb3IgV2ViR1BVXG4gICAqL1xuICByZWFkb25seSB3ZWJncHU6IEVudi5XZWJHcHVGbGFncztcblxuICBbbmFtZTogc3RyaW5nXTogdW5rbm93bjtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYSBzZXQgb2YgZmxhZ3MgYXMgYSBnbG9iYWwgc2luZ2xldG9uLlxuICovXG5leHBvcnQgY29uc3QgZW52OiBFbnYgPSBlbnZJbXBsO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge1RlbnNvclRvRGF0YVVybE9wdGlvbnMsIFRlbnNvclRvSW1hZ2VEYXRhT3B0aW9uc30gZnJvbSAnLi90ZW5zb3ItY29udmVyc2lvbi5qcyc7XG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi90ZW5zb3IuanMnO1xuXG4vKipcbiAqIGltcGxlbWVudGF0aW9uIG9mIFRlbnNvci50b0RhdGFVUkwoKVxuICovXG5leHBvcnQgY29uc3QgdGVuc29yVG9EYXRhVVJMID0gKHRlbnNvcjogVGVuc29yLCBvcHRpb25zPzogVGVuc29yVG9EYXRhVXJsT3B0aW9ucyk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICBjYW52YXMud2lkdGggPSB0ZW5zb3IuZGltc1szXTtcbiAgY2FudmFzLmhlaWdodCA9IHRlbnNvci5kaW1zWzJdO1xuICBjb25zdCBwaXhlbHMyRENvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICBpZiAocGl4ZWxzMkRDb250ZXh0ICE9IG51bGwpIHtcbiAgICAvLyBEZWZhdWx0IHZhbHVlcyBmb3IgaGVpZ2h0IGFuZCB3aWR0aCAmIGZvcm1hdFxuICAgIGxldCB3aWR0aDogbnVtYmVyO1xuICAgIGxldCBoZWlnaHQ6IG51bWJlcjtcbiAgICBpZiAob3B0aW9ucz8udGVuc29yTGF5b3V0ICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy50ZW5zb3JMYXlvdXQgPT09ICdOSFdDJykge1xuICAgICAgd2lkdGggPSB0ZW5zb3IuZGltc1syXTtcbiAgICAgIGhlaWdodCA9IHRlbnNvci5kaW1zWzNdO1xuICAgIH0gZWxzZSB7ICAvLyBEZWZhdWx0IGxheW91dCBpcyBOQ1dIXG4gICAgICB3aWR0aCA9IHRlbnNvci5kaW1zWzNdO1xuICAgICAgaGVpZ2h0ID0gdGVuc29yLmRpbXNbMl07XG4gICAgfVxuXG4gICAgY29uc3QgaW5wdXRmb3JtYXQgPSBvcHRpb25zPy5mb3JtYXQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZm9ybWF0IDogJ1JHQic7XG5cbiAgICBjb25zdCBub3JtID0gb3B0aW9ucz8ubm9ybTtcbiAgICBsZXQgbm9ybU1lYW46IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuICAgIGxldCBub3JtQmlhczogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG4gICAgaWYgKG5vcm0gPT09IHVuZGVmaW5lZCB8fCBub3JtLm1lYW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgbm9ybU1lYW4gPSBbMjU1LCAyNTUsIDI1NSwgMjU1XTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiAobm9ybS5tZWFuKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbm9ybU1lYW4gPSBbbm9ybS5tZWFuLCBub3JtLm1lYW4sIG5vcm0ubWVhbiwgbm9ybS5tZWFuXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vcm1NZWFuID0gW25vcm0ubWVhblswXSwgbm9ybS5tZWFuWzFdLCBub3JtLm1lYW5bMl0sIDBdO1xuICAgICAgICBpZiAobm9ybS5tZWFuWzNdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBub3JtTWVhblszXSA9IG5vcm0ubWVhblszXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9ybSA9PT0gdW5kZWZpbmVkIHx8IG5vcm0uYmlhcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBub3JtQmlhcyA9IFswLCAwLCAwLCAwXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiAobm9ybS5iaWFzKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbm9ybUJpYXMgPSBbbm9ybS5iaWFzLCBub3JtLmJpYXMsIG5vcm0uYmlhcywgbm9ybS5iaWFzXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vcm1CaWFzID0gW25vcm0uYmlhc1swXSwgbm9ybS5iaWFzWzFdLCBub3JtLmJpYXNbMl0sIDBdO1xuICAgICAgICBpZiAobm9ybS5iaWFzWzNdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBub3JtQmlhc1szXSA9IG5vcm0uYmlhc1szXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHN0cmlkZSA9IGhlaWdodCAqIHdpZHRoO1xuICAgIC8vIERlZmF1bHQgcG9pbnRlciBhc3NpZ25tZW50c1xuICAgIGxldCByVGVuc29yUG9pbnRlciA9IDAsIGdUZW5zb3JQb2ludGVyID0gc3RyaWRlLCBiVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDIsIGFUZW5zb3JQb2ludGVyID0gLTE7XG5cbiAgICAvLyBVcGRhdGluZyB0aGUgcG9pbnRlciBhc3NpZ25tZW50cyBiYXNlZCBvbiB0aGUgaW5wdXQgaW1hZ2UgZm9ybWF0XG4gICAgaWYgKGlucHV0Zm9ybWF0ID09PSAnUkdCQScpIHtcbiAgICAgIHJUZW5zb3JQb2ludGVyID0gMDtcbiAgICAgIGdUZW5zb3JQb2ludGVyID0gc3RyaWRlO1xuICAgICAgYlRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyO1xuICAgICAgYVRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAzO1xuICAgIH0gZWxzZSBpZiAoaW5wdXRmb3JtYXQgPT09ICdSR0InKSB7XG4gICAgICByVGVuc29yUG9pbnRlciA9IDA7XG4gICAgICBnVGVuc29yUG9pbnRlciA9IHN0cmlkZTtcbiAgICAgIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMjtcbiAgICB9IGVsc2UgaWYgKGlucHV0Zm9ybWF0ID09PSAnUkJHJykge1xuICAgICAgclRlbnNvclBvaW50ZXIgPSAwO1xuICAgICAgYlRlbnNvclBvaW50ZXIgPSBzdHJpZGU7XG4gICAgICBnVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDI7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWlnaHQ7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB3aWR0aDsgaisrKSB7XG4gICAgICAgIGNvbnN0IFIgPSAoKHRlbnNvci5kYXRhW3JUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1swXSkgKiBub3JtTWVhblswXTsgIC8vIFIgdmFsdWVcbiAgICAgICAgY29uc3QgRyA9ICgodGVuc29yLmRhdGFbZ1RlbnNvclBvaW50ZXIrK10gYXMgbnVtYmVyKSAtIG5vcm1CaWFzWzFdKSAqIG5vcm1NZWFuWzFdOyAgLy8gRyB2YWx1ZVxuICAgICAgICBjb25zdCBCID0gKCh0ZW5zb3IuZGF0YVtiVGVuc29yUG9pbnRlcisrXSBhcyBudW1iZXIpIC0gbm9ybUJpYXNbMl0pICogbm9ybU1lYW5bMl07ICAvLyBCIHZhbHVlXG4gICAgICAgIGNvbnN0IEEgPSBhVGVuc29yUG9pbnRlciA9PT0gLTEgP1xuICAgICAgICAgICAgMjU1IDpcbiAgICAgICAgICAgICgodGVuc29yLmRhdGFbYVRlbnNvclBvaW50ZXIrK10gYXMgbnVtYmVyKSAtIG5vcm1CaWFzWzNdKSAqIG5vcm1NZWFuWzNdOyAgLy8gQSB2YWx1ZVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3Jlc3RyaWN0LXBsdXMtb3BlcmFuZHNcbiAgICAgICAgcGl4ZWxzMkRDb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKCcgKyBSICsgJywnICsgRyArICcsJyArIEIgKyAnLCcgKyBBICsgJyknO1xuICAgICAgICBwaXhlbHMyRENvbnRleHQuZmlsbFJlY3QoaiwgaSwgMSwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjYW52YXMudG9EYXRhVVJMKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IGFjY2VzcyBpbWFnZSBkYXRhJyk7XG4gIH1cbn07XG5cbi8qKlxuICogaW1wbGVtZW50YXRpb24gb2YgVGVuc29yLnRvSW1hZ2VEYXRhKClcbiAqL1xuZXhwb3J0IGNvbnN0IHRlbnNvclRvSW1hZ2VEYXRhID0gKHRlbnNvcjogVGVuc29yLCBvcHRpb25zPzogVGVuc29yVG9JbWFnZURhdGFPcHRpb25zKTogSW1hZ2VEYXRhID0+IHtcbiAgY29uc3QgcGl4ZWxzMkRDb250ZXh0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykuZ2V0Q29udGV4dCgnMmQnKTtcbiAgbGV0IGltYWdlOiBJbWFnZURhdGE7XG4gIGlmIChwaXhlbHMyRENvbnRleHQgIT0gbnVsbCkge1xuICAgIC8vIERlZmF1bHQgdmFsdWVzIGZvciBoZWlnaHQgYW5kIHdpZHRoICYgZm9ybWF0XG4gICAgbGV0IHdpZHRoOiBudW1iZXI7XG4gICAgbGV0IGhlaWdodDogbnVtYmVyO1xuICAgIGxldCBjaGFubmVsczogbnVtYmVyO1xuICAgIGlmIChvcHRpb25zPy50ZW5zb3JMYXlvdXQgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnRlbnNvckxheW91dCA9PT0gJ05IV0MnKSB7XG4gICAgICB3aWR0aCA9IHRlbnNvci5kaW1zWzJdO1xuICAgICAgaGVpZ2h0ID0gdGVuc29yLmRpbXNbMV07XG4gICAgICBjaGFubmVscyA9IHRlbnNvci5kaW1zWzNdO1xuICAgIH0gZWxzZSB7ICAvLyBEZWZhdWx0IGxheW91dCBpcyBOQ1dIXG4gICAgICB3aWR0aCA9IHRlbnNvci5kaW1zWzNdO1xuICAgICAgaGVpZ2h0ID0gdGVuc29yLmRpbXNbMl07XG4gICAgICBjaGFubmVscyA9IHRlbnNvci5kaW1zWzFdO1xuICAgIH1cbiAgICBjb25zdCBpbnB1dGZvcm1hdCA9IG9wdGlvbnMgIT09IHVuZGVmaW5lZCA/IChvcHRpb25zLmZvcm1hdCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5mb3JtYXQgOiAnUkdCJykgOiAnUkdCJztcblxuICAgIGNvbnN0IG5vcm0gPSBvcHRpb25zPy5ub3JtO1xuICAgIGxldCBub3JtTWVhbjogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG4gICAgbGV0IG5vcm1CaWFzOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgICBpZiAobm9ybSA9PT0gdW5kZWZpbmVkIHx8IG5vcm0ubWVhbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBub3JtTWVhbiA9IFsyNTUsIDI1NSwgMjU1LCAyNTVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIChub3JtLm1lYW4pID09PSAnbnVtYmVyJykge1xuICAgICAgICBub3JtTWVhbiA9IFtub3JtLm1lYW4sIG5vcm0ubWVhbiwgbm9ybS5tZWFuLCBub3JtLm1lYW5dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9ybU1lYW4gPSBbbm9ybS5tZWFuWzBdLCBub3JtLm1lYW5bMV0sIG5vcm0ubWVhblsyXSwgMjU1XTtcbiAgICAgICAgaWYgKG5vcm0ubWVhblszXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbm9ybU1lYW5bM10gPSBub3JtLm1lYW5bM107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vcm0gPT09IHVuZGVmaW5lZCB8fCBub3JtLmJpYXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbm9ybUJpYXMgPSBbMCwgMCwgMCwgMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgKG5vcm0uYmlhcykgPT09ICdudW1iZXInKSB7XG4gICAgICAgIG5vcm1CaWFzID0gW25vcm0uYmlhcywgbm9ybS5iaWFzLCBub3JtLmJpYXMsIG5vcm0uYmlhc107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3JtQmlhcyA9IFtub3JtLmJpYXNbMF0sIG5vcm0uYmlhc1sxXSwgbm9ybS5iaWFzWzJdLCAwXTtcbiAgICAgICAgaWYgKG5vcm0uYmlhc1szXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbm9ybUJpYXNbM10gPSBub3JtLmJpYXNbM107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzdHJpZGUgPSBoZWlnaHQgKiB3aWR0aDtcbiAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAob3B0aW9ucy5mb3JtYXQgIT09IHVuZGVmaW5lZCAmJiAoY2hhbm5lbHMgPT09IDQgJiYgb3B0aW9ucy5mb3JtYXQgIT09ICdSR0JBJykgfHxcbiAgICAgICAgICAoY2hhbm5lbHMgPT09IDMgJiYgKG9wdGlvbnMuZm9ybWF0ICE9PSAnUkdCJyAmJiBvcHRpb25zLmZvcm1hdCAhPT0gJ0JHUicpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RlbnNvciBmb3JtYXQgZG9lc25cXCd0IG1hdGNoIGlucHV0IHRlbnNvciBkaW1zJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCBwb2ludGVyIGFzc2lnbm1lbnRzXG4gICAgY29uc3Qgc3RlcCA9IDQ7XG4gICAgbGV0IHJJbWFnZVBvaW50ZXIgPSAwLCBnSW1hZ2VQb2ludGVyID0gMSwgYkltYWdlUG9pbnRlciA9IDIsIGFJbWFnZVBvaW50ZXIgPSAzO1xuICAgIGxldCByVGVuc29yUG9pbnRlciA9IDAsIGdUZW5zb3JQb2ludGVyID0gc3RyaWRlLCBiVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDIsIGFUZW5zb3JQb2ludGVyID0gLTE7XG5cbiAgICAvLyBVcGRhdGluZyB0aGUgcG9pbnRlciBhc3NpZ25tZW50cyBiYXNlZCBvbiB0aGUgaW5wdXQgaW1hZ2UgZm9ybWF0XG4gICAgaWYgKGlucHV0Zm9ybWF0ID09PSAnUkdCQScpIHtcbiAgICAgIHJUZW5zb3JQb2ludGVyID0gMDtcbiAgICAgIGdUZW5zb3JQb2ludGVyID0gc3RyaWRlO1xuICAgICAgYlRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyO1xuICAgICAgYVRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAzO1xuICAgIH0gZWxzZSBpZiAoaW5wdXRmb3JtYXQgPT09ICdSR0InKSB7XG4gICAgICByVGVuc29yUG9pbnRlciA9IDA7XG4gICAgICBnVGVuc29yUG9pbnRlciA9IHN0cmlkZTtcbiAgICAgIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMjtcbiAgICB9IGVsc2UgaWYgKGlucHV0Zm9ybWF0ID09PSAnUkJHJykge1xuICAgICAgclRlbnNvclBvaW50ZXIgPSAwO1xuICAgICAgYlRlbnNvclBvaW50ZXIgPSBzdHJpZGU7XG4gICAgICBnVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDI7XG4gICAgfVxuXG4gICAgaW1hZ2UgPSBwaXhlbHMyRENvbnRleHQuY3JlYXRlSW1hZ2VEYXRhKHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBoZWlnaHQgKiB3aWR0aDtcbiAgICAgICAgIHJJbWFnZVBvaW50ZXIgKz0gc3RlcCwgZ0ltYWdlUG9pbnRlciArPSBzdGVwLCBiSW1hZ2VQb2ludGVyICs9IHN0ZXAsIGFJbWFnZVBvaW50ZXIgKz0gc3RlcCwgaSsrKSB7XG4gICAgICBpbWFnZS5kYXRhW3JJbWFnZVBvaW50ZXJdID0gKCh0ZW5zb3IuZGF0YVtyVGVuc29yUG9pbnRlcisrXSBhcyBudW1iZXIpIC0gbm9ybUJpYXNbMF0pICogbm9ybU1lYW5bMF07ICAvLyBSIHZhbHVlXG4gICAgICBpbWFnZS5kYXRhW2dJbWFnZVBvaW50ZXJdID0gKCh0ZW5zb3IuZGF0YVtnVGVuc29yUG9pbnRlcisrXSBhcyBudW1iZXIpIC0gbm9ybUJpYXNbMV0pICogbm9ybU1lYW5bMV07ICAvLyBHIHZhbHVlXG4gICAgICBpbWFnZS5kYXRhW2JJbWFnZVBvaW50ZXJdID0gKCh0ZW5zb3IuZGF0YVtiVGVuc29yUG9pbnRlcisrXSBhcyBudW1iZXIpIC0gbm9ybUJpYXNbMl0pICogbm9ybU1lYW5bMl07ICAvLyBCIHZhbHVlXG4gICAgICBpbWFnZS5kYXRhW2FJbWFnZVBvaW50ZXJdID0gYVRlbnNvclBvaW50ZXIgPT09IC0xID9cbiAgICAgICAgICAyNTUgOlxuICAgICAgICAgICgodGVuc29yLmRhdGFbYVRlbnNvclBvaW50ZXIrK10gYXMgbnVtYmVyKSAtIG5vcm1CaWFzWzNdKSAqIG5vcm1NZWFuWzNdOyAgLy8gQSB2YWx1ZVxuICAgIH1cblxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG5vdCBhY2Nlc3MgaW1hZ2UgZGF0YScpO1xuICB9XG4gIHJldHVybiBpbWFnZTtcbn07XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7T3B0aW9uc0RpbWVuc2lvbnMsIE9wdGlvbnNGb3JtYXQsIE9wdGlvbnNOb3JtYWxpemF0aW9uUGFyYW1ldGVycywgT3B0aW9uc1RlbnNvckZvcm1hdCwgT3B0aW9uc1RlbnNvckxheW91dCwgVGVuc29yRnJvbUdwdUJ1ZmZlck9wdGlvbnMsIFRlbnNvckZyb21JbWFnZUJpdG1hcE9wdGlvbnMsIFRlbnNvckZyb21JbWFnZURhdGFPcHRpb25zLCBUZW5zb3JGcm9tSW1hZ2VFbGVtZW50T3B0aW9ucywgVGVuc29yRnJvbVRleHR1cmVPcHRpb25zLCBUZW5zb3JGcm9tVXJsT3B0aW9uc30gZnJvbSAnLi90ZW5zb3ItZmFjdG9yeS5qcyc7XG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi90ZW5zb3ItaW1wbC5qcyc7XG5pbXBvcnQge1RlbnNvciBhcyBUZW5zb3JJbnRlcmZhY2V9IGZyb20gJy4vdGVuc29yLmpzJztcblxuaW50ZXJmYWNlIEJ1ZmZlclRvVGVuc29yT3B0aW9ucyBleHRlbmRzIE9wdGlvbnNEaW1lbnNpb25zLCBPcHRpb25zVGVuc29yTGF5b3V0LCBPcHRpb25zTm9ybWFsaXphdGlvblBhcmFtZXRlcnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT3B0aW9uc0Zvcm1hdCwgT3B0aW9uc1RlbnNvckZvcm1hdCB7fVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyB0ZW5zb3Igb2JqZWN0IGZyb20gaW1hZ2Ugb2JqZWN0XG4gKlxuICogQHBhcmFtIGJ1ZmZlciAtIEV4dHJhY3RlZCBpbWFnZSBidWZmZXIgZGF0YSAtIGFzc3VtaW5nIFJHQkEgZm9ybWF0XG4gKiBAcGFyYW0gaW1hZ2VGb3JtYXQgLSBpbnB1dCBpbWFnZSBjb25maWd1cmF0aW9uIC0gcmVxdWlyZWQgY29uZmlndXJhdGlvbnMgaGVpZ2h0LCB3aWR0aCwgZm9ybWF0XG4gKiBAcGFyYW0gdGVuc29yRm9ybWF0IC0gb3V0cHV0IHRlbnNvciBjb25maWd1cmF0aW9uIC0gRGVmYXVsdCBpcyBSR0IgZm9ybWF0XG4gKi9cbmV4cG9ydCBjb25zdCBidWZmZXJUb1RlbnNvciA9IChidWZmZXI6IFVpbnQ4Q2xhbXBlZEFycmF5fHVuZGVmaW5lZCwgb3B0aW9uczogQnVmZmVyVG9UZW5zb3JPcHRpb25zKTogVGVuc29yID0+IHtcbiAgaWYgKGJ1ZmZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbWFnZSBidWZmZXIgbXVzdCBiZSBkZWZpbmVkJyk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGVpZ2h0ID09PSB1bmRlZmluZWQgfHwgb3B0aW9ucy53aWR0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbWFnZSBoZWlnaHQgYW5kIHdpZHRoIG11c3QgYmUgZGVmaW5lZCcpO1xuICB9XG4gIGlmIChvcHRpb25zLnRlbnNvckxheW91dCA9PT0gJ05IV0MnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOSFdDIFRlbnNvciBsYXlvdXQgaXMgbm90IHN1cHBvcnRlZCB5ZXQnKTtcbiAgfVxuXG4gIGNvbnN0IHtoZWlnaHQsIHdpZHRofSA9IG9wdGlvbnM7XG5cbiAgY29uc3Qgbm9ybSA9IG9wdGlvbnMubm9ybSA/PyB7bWVhbjogMjU1LCBiaWFzOiAwfTtcbiAgbGV0IG5vcm1NZWFuOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgbGV0IG5vcm1CaWFzOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcblxuICBpZiAodHlwZW9mIChub3JtLm1lYW4pID09PSAnbnVtYmVyJykge1xuICAgIG5vcm1NZWFuID0gW25vcm0ubWVhbiwgbm9ybS5tZWFuLCBub3JtLm1lYW4sIG5vcm0ubWVhbl07XG4gIH0gZWxzZSB7XG4gICAgbm9ybU1lYW4gPSBbbm9ybS5tZWFuIVswXSwgbm9ybS5tZWFuIVsxXSwgbm9ybS5tZWFuIVsyXSwgbm9ybS5tZWFuIVszXSA/PyAyNTVdO1xuICB9XG5cbiAgaWYgKHR5cGVvZiAobm9ybS5iaWFzKSA9PT0gJ251bWJlcicpIHtcbiAgICBub3JtQmlhcyA9IFtub3JtLmJpYXMsIG5vcm0uYmlhcywgbm9ybS5iaWFzLCBub3JtLmJpYXNdO1xuICB9IGVsc2Uge1xuICAgIG5vcm1CaWFzID0gW25vcm0uYmlhcyFbMF0sIG5vcm0uYmlhcyFbMV0sIG5vcm0uYmlhcyFbMl0sIG5vcm0uYmlhcyFbM10gPz8gMF07XG4gIH1cblxuICBjb25zdCBpbnB1dGZvcm1hdCA9IG9wdGlvbnMuZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmZvcm1hdCA6ICdSR0JBJztcbiAgLy8gZGVmYXVsdCB2YWx1ZSBpcyBSR0JBIHNpbmNlIGltYWdlZGF0YSBhbmQgSFRNTEltYWdlRWxlbWVudCB1c2VzIGl0XG5cbiAgY29uc3Qgb3V0cHV0Zm9ybWF0ID1cbiAgICAgIG9wdGlvbnMudGVuc29yRm9ybWF0ICE9PSB1bmRlZmluZWQgPyAob3B0aW9ucy50ZW5zb3JGb3JtYXQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMudGVuc29yRm9ybWF0IDogJ1JHQicpIDogJ1JHQic7XG4gIGNvbnN0IHN0cmlkZSA9IGhlaWdodCAqIHdpZHRoO1xuICBjb25zdCBmbG9hdDMyRGF0YSA9IG91dHB1dGZvcm1hdCA9PT0gJ1JHQkEnID8gbmV3IEZsb2F0MzJBcnJheShzdHJpZGUgKiA0KSA6IG5ldyBGbG9hdDMyQXJyYXkoc3RyaWRlICogMyk7XG5cbiAgLy8gRGVmYXVsdCBwb2ludGVyIGFzc2lnbm1lbnRzXG4gIGxldCBzdGVwID0gNCwgckltYWdlUG9pbnRlciA9IDAsIGdJbWFnZVBvaW50ZXIgPSAxLCBiSW1hZ2VQb2ludGVyID0gMiwgYUltYWdlUG9pbnRlciA9IDM7XG4gIGxldCByVGVuc29yUG9pbnRlciA9IDAsIGdUZW5zb3JQb2ludGVyID0gc3RyaWRlLCBiVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDIsIGFUZW5zb3JQb2ludGVyID0gLTE7XG5cbiAgLy8gVXBkYXRpbmcgdGhlIHBvaW50ZXIgYXNzaWdubWVudHMgYmFzZWQgb24gdGhlIGlucHV0IGltYWdlIGZvcm1hdFxuICBpZiAoaW5wdXRmb3JtYXQgPT09ICdSR0InKSB7XG4gICAgc3RlcCA9IDM7XG4gICAgckltYWdlUG9pbnRlciA9IDA7XG4gICAgZ0ltYWdlUG9pbnRlciA9IDE7XG4gICAgYkltYWdlUG9pbnRlciA9IDI7XG4gICAgYUltYWdlUG9pbnRlciA9IC0xO1xuICB9XG5cbiAgLy8gVXBkYXRpbmcgdGhlIHBvaW50ZXIgYXNzaWdubWVudHMgYmFzZWQgb24gdGhlIG91dHB1dCB0ZW5zb3IgZm9ybWF0XG4gIGlmIChvdXRwdXRmb3JtYXQgPT09ICdSR0JBJykge1xuICAgIGFUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMztcbiAgfSBlbHNlIGlmIChvdXRwdXRmb3JtYXQgPT09ICdSQkcnKSB7XG4gICAgclRlbnNvclBvaW50ZXIgPSAwO1xuICAgIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlO1xuICAgIGdUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMjtcbiAgfSBlbHNlIGlmIChvdXRwdXRmb3JtYXQgPT09ICdCR1InKSB7XG4gICAgYlRlbnNvclBvaW50ZXIgPSAwO1xuICAgIGdUZW5zb3JQb2ludGVyID0gc3RyaWRlO1xuICAgIHJUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMjtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaWRlO1xuICAgICAgIGkrKywgckltYWdlUG9pbnRlciArPSBzdGVwLCBiSW1hZ2VQb2ludGVyICs9IHN0ZXAsIGdJbWFnZVBvaW50ZXIgKz0gc3RlcCwgYUltYWdlUG9pbnRlciArPSBzdGVwKSB7XG4gICAgZmxvYXQzMkRhdGFbclRlbnNvclBvaW50ZXIrK10gPSAoYnVmZmVyW3JJbWFnZVBvaW50ZXJdICsgbm9ybUJpYXNbMF0pIC8gbm9ybU1lYW5bMF07XG4gICAgZmxvYXQzMkRhdGFbZ1RlbnNvclBvaW50ZXIrK10gPSAoYnVmZmVyW2dJbWFnZVBvaW50ZXJdICsgbm9ybUJpYXNbMV0pIC8gbm9ybU1lYW5bMV07XG4gICAgZmxvYXQzMkRhdGFbYlRlbnNvclBvaW50ZXIrK10gPSAoYnVmZmVyW2JJbWFnZVBvaW50ZXJdICsgbm9ybUJpYXNbMl0pIC8gbm9ybU1lYW5bMl07XG4gICAgaWYgKGFUZW5zb3JQb2ludGVyICE9PSAtMSAmJiBhSW1hZ2VQb2ludGVyICE9PSAtMSkge1xuICAgICAgZmxvYXQzMkRhdGFbYVRlbnNvclBvaW50ZXIrK10gPSAoYnVmZmVyW2FJbWFnZVBvaW50ZXJdICsgbm9ybUJpYXNbM10pIC8gbm9ybU1lYW5bM107XG4gICAgfVxuICB9XG5cbiAgLy8gRmxvYXQzMkFycmF5IC0+IG9ydC5UZW5zb3JcbiAgY29uc3Qgb3V0cHV0VGVuc29yID0gb3V0cHV0Zm9ybWF0ID09PSAnUkdCQScgPyBuZXcgVGVuc29yKCdmbG9hdDMyJywgZmxvYXQzMkRhdGEsIFsxLCA0LCBoZWlnaHQsIHdpZHRoXSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBUZW5zb3IoJ2Zsb2F0MzInLCBmbG9hdDMyRGF0YSwgWzEsIDMsIGhlaWdodCwgd2lkdGhdKTtcbiAgcmV0dXJuIG91dHB1dFRlbnNvcjtcbn07XG5cbi8qKlxuICogaW1wbGVtZW50YXRpb24gb2YgVGVuc29yLmZyb21JbWFnZSgpLlxuICovXG5leHBvcnQgY29uc3QgdGVuc29yRnJvbUltYWdlID0gYXN5bmMoXG4gICAgaW1hZ2U6IEltYWdlRGF0YXxIVE1MSW1hZ2VFbGVtZW50fEltYWdlQml0bWFwfHN0cmluZyxcbiAgICBvcHRpb25zPzogVGVuc29yRnJvbUltYWdlRGF0YU9wdGlvbnN8VGVuc29yRnJvbUltYWdlRWxlbWVudE9wdGlvbnN8VGVuc29yRnJvbUltYWdlQml0bWFwT3B0aW9uc3xcbiAgICBUZW5zb3JGcm9tVXJsT3B0aW9ucyk6IFByb21pc2U8VGVuc29yPiA9PiB7XG4gIC8vIGNoZWNraW5nIHRoZSB0eXBlIG9mIGltYWdlIG9iamVjdFxuICBjb25zdCBpc0hUTUxJbWFnZUVsZSA9IHR5cGVvZiAoSFRNTEltYWdlRWxlbWVudCkgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudDtcbiAgY29uc3QgaXNJbWFnZURhdGFFbGUgPSB0eXBlb2YgKEltYWdlRGF0YSkgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSW1hZ2VEYXRhO1xuICBjb25zdCBpc0ltYWdlQml0bWFwID0gdHlwZW9mIChJbWFnZUJpdG1hcCkgIT09ICd1bmRlZmluZWQnICYmIGltYWdlIGluc3RhbmNlb2YgSW1hZ2VCaXRtYXA7XG4gIGNvbnN0IGlzU3RyaW5nID0gdHlwZW9mIGltYWdlID09PSAnc3RyaW5nJztcblxuICBsZXQgZGF0YTogVWludDhDbGFtcGVkQXJyYXl8dW5kZWZpbmVkO1xuICBsZXQgYnVmZmVyVG9UZW5zb3JPcHRpb25zOiBCdWZmZXJUb1RlbnNvck9wdGlvbnMgPSBvcHRpb25zID8/IHt9O1xuXG4gIC8vIGZpbGxpbmcgYW5kIGNoZWNraW5nIGltYWdlIGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICBpZiAoaXNIVE1MSW1hZ2VFbGUpIHtcbiAgICAvLyBIVE1MSW1hZ2VFbGVtZW50IC0gaW1hZ2Ugb2JqZWN0IC0gZm9ybWF0IGlzIFJHQkEgYnkgZGVmYXVsdFxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNhbnZhcy53aWR0aCA9IGltYWdlLndpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgY29uc3QgcGl4ZWxzMkRDb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICBpZiAocGl4ZWxzMkRDb250ZXh0ICE9IG51bGwpIHtcbiAgICAgIGxldCBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgICBsZXQgd2lkdGggPSBpbWFnZS53aWR0aDtcbiAgICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5yZXNpemVkSGVpZ2h0ICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5yZXNpemVkV2lkdGggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBoZWlnaHQgPSBvcHRpb25zLnJlc2l6ZWRIZWlnaHQ7XG4gICAgICAgIHdpZHRoID0gb3B0aW9ucy5yZXNpemVkV2lkdGg7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgaWYgKG9wdGlvbnMudGVuc29yRm9ybWF0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ltYWdlIGlucHV0IGNvbmZpZyBmb3JtYXQgbXVzdCBiZSBSR0JBIGZvciBIVE1MSW1hZ2VFbGVtZW50Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLnRlbnNvckZvcm1hdCA9ICdSR0JBJztcbiAgICAgICAgfVxuICAgICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMud2lkdGggPSB3aWR0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy50ZW5zb3JGb3JtYXQgPSAnUkdCQSc7XG4gICAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy53aWR0aCA9IHdpZHRoO1xuICAgICAgfVxuXG4gICAgICBwaXhlbHMyRENvbnRleHQuZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcbiAgICAgIGRhdGEgPSBwaXhlbHMyRENvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHdpZHRoLCBoZWlnaHQpLmRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG5vdCBhY2Nlc3MgaW1hZ2UgZGF0YScpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0ltYWdlRGF0YUVsZSkge1xuICAgIGxldCBoZWlnaHQ6IG51bWJlcjtcbiAgICBsZXQgd2lkdGg6IG51bWJlcjtcblxuICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5yZXNpemVkV2lkdGggIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnJlc2l6ZWRIZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaGVpZ2h0ID0gb3B0aW9ucy5yZXNpemVkSGVpZ2h0O1xuICAgICAgd2lkdGggPSBvcHRpb25zLnJlc2l6ZWRXaWR0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuICAgICAgd2lkdGggPSBpbWFnZS53aWR0aDtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMuZm9ybWF0ID0gJ1JHQkEnO1xuICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLndpZHRoID0gd2lkdGg7XG5cbiAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCB0ZW1wQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG5cbiAgICAgIHRlbXBDYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgIHRlbXBDYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICBjb25zdCBwaXhlbHMyRENvbnRleHQgPSB0ZW1wQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICAgIGlmIChwaXhlbHMyRENvbnRleHQgIT0gbnVsbCkge1xuICAgICAgICBwaXhlbHMyRENvbnRleHQucHV0SW1hZ2VEYXRhKGltYWdlLCAwLCAwKTtcbiAgICAgICAgZGF0YSA9IHBpeGVsczJEQ29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCkuZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG5vdCBhY2Nlc3MgaW1hZ2UgZGF0YScpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhID0gaW1hZ2UuZGF0YTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNJbWFnZUJpdG1hcCkge1xuICAgIC8vIEltYWdlQml0bWFwIC0gaW1hZ2Ugb2JqZWN0IC0gZm9ybWF0IG11c3QgYmUgcHJvdmlkZWQgYnkgdXNlclxuICAgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHByb3ZpZGUgaW1hZ2UgY29uZmlnIHdpdGggZm9ybWF0IGZvciBJbWFnZWJpdG1hcCcpO1xuICAgIH1cblxuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNhbnZhcy53aWR0aCA9IGltYWdlLndpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgY29uc3QgcGl4ZWxzMkRDb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICBpZiAocGl4ZWxzMkRDb250ZXh0ICE9IG51bGwpIHtcbiAgICAgIGNvbnN0IGhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgICAgIGNvbnN0IHdpZHRoID0gaW1hZ2Uud2lkdGg7XG4gICAgICBwaXhlbHMyRENvbnRleHQuZHJhd0ltYWdlKGltYWdlLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIGRhdGEgPSBwaXhlbHMyRENvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIHdpZHRoLCBoZWlnaHQpLmRhdGE7XG4gICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLndpZHRoID0gd2lkdGg7XG4gICAgICByZXR1cm4gYnVmZmVyVG9UZW5zb3IoZGF0YSwgYnVmZmVyVG9UZW5zb3JPcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IGFjY2VzcyBpbWFnZSBkYXRhJyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzU3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgaWYgKCFpbWFnZSB8fCAhY29udGV4dCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0KCk7XG4gICAgICB9XG4gICAgICBjb25zdCBuZXdJbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgbmV3SW1hZ2UuY3Jvc3NPcmlnaW4gPSAnQW5vbnltb3VzJztcbiAgICAgIG5ld0ltYWdlLnNyYyA9IGltYWdlO1xuICAgICAgbmV3SW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuICAgICAgICBjYW52YXMud2lkdGggPSBuZXdJbWFnZS53aWR0aDtcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IG5ld0ltYWdlLmhlaWdodDtcbiAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UobmV3SW1hZ2UsIDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgIGNvbnN0IGltZyA9IGNvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG5cbiAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLmhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XG4gICAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy53aWR0aCA9IGNhbnZhcy53aWR0aDtcbiAgICAgICAgcmVzb2x2ZShidWZmZXJUb1RlbnNvcihpbWcuZGF0YSwgYnVmZmVyVG9UZW5zb3JPcHRpb25zKSk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignSW5wdXQgZGF0YSBwcm92aWRlZCBpcyBub3Qgc3VwcG9ydGVkIC0gYWJvcnRlZCB0ZW5zb3IgY3JlYXRpb24nKTtcbiAgfVxuXG4gIGlmIChkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYnVmZmVyVG9UZW5zb3IoZGF0YSwgYnVmZmVyVG9UZW5zb3JPcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0lucHV0IGRhdGEgcHJvdmlkZWQgaXMgbm90IHN1cHBvcnRlZCAtIGFib3J0ZWQgdGVuc29yIGNyZWF0aW9uJyk7XG4gIH1cbn07XG5cbi8qKlxuICogaW1wbGVtZW50YXRpb24gb2YgVGVuc29yLmZyb21UZXh0dXJlKCkuXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JGcm9tVGV4dHVyZSA9IDxUIGV4dGVuZHMgVGVuc29ySW50ZXJmYWNlLlRleHR1cmVEYXRhVHlwZXM+KFxuICAgIHRleHR1cmU6IFRlbnNvckludGVyZmFjZS5UZXh0dXJlVHlwZSwgb3B0aW9uczogVGVuc29yRnJvbVRleHR1cmVPcHRpb25zPFQ+KTogVGVuc29yID0+IHtcbiAgY29uc3Qge3dpZHRoLCBoZWlnaHQsIGRvd25sb2FkLCBkaXNwb3NlfSA9IG9wdGlvbnM7XG4gIC8vIEFsd2F5cyBhc3N1bWUgUkdCQUYzMi4gVE9ETzogc3VwcG9ydCBkaWZmZXJlbnQgdGV4dHVyZSBmb3JtYXRcbiAgY29uc3QgZGltcyA9IFsxLCBoZWlnaHQsIHdpZHRoLCA0XTtcbiAgcmV0dXJuIG5ldyBUZW5zb3Ioe2xvY2F0aW9uOiAndGV4dHVyZScsIHR5cGU6ICdmbG9hdDMyJywgdGV4dHVyZSwgZGltcywgZG93bmxvYWQsIGRpc3Bvc2V9KTtcbn07XG5cbi8qKlxuICogaW1wbGVtZW50YXRpb24gb2YgVGVuc29yLmZyb21HcHVCdWZmZXIoKS5cbiAqL1xuZXhwb3J0IGNvbnN0IHRlbnNvckZyb21HcHVCdWZmZXIgPSA8VCBleHRlbmRzIFRlbnNvckludGVyZmFjZS5HcHVCdWZmZXJEYXRhVHlwZXM+KFxuICAgIGdwdUJ1ZmZlcjogVGVuc29ySW50ZXJmYWNlLkdwdUJ1ZmZlclR5cGUsIG9wdGlvbnM6IFRlbnNvckZyb21HcHVCdWZmZXJPcHRpb25zPFQ+KTogVGVuc29yID0+IHtcbiAgY29uc3Qge2RhdGFUeXBlLCBkaW1zLCBkb3dubG9hZCwgZGlzcG9zZX0gPSBvcHRpb25zO1xuICByZXR1cm4gbmV3IFRlbnNvcih7bG9jYXRpb246ICdncHUtYnVmZmVyJywgdHlwZTogZGF0YVR5cGUgPz8gJ2Zsb2F0MzInLCBncHVCdWZmZXIsIGRpbXMsIGRvd25sb2FkLCBkaXNwb3NlfSk7XG59O1xuXG4vKipcbiAqIGltcGxlbWVudGF0aW9uIG9mIFRlbnNvci5mcm9tUGlubmVkQnVmZmVyKCkuXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JGcm9tUGlubmVkQnVmZmVyID0gPFQgZXh0ZW5kcyBUZW5zb3JJbnRlcmZhY2UuQ3B1UGlubmVkRGF0YVR5cGVzPihcbiAgICB0eXBlOiBULCBidWZmZXI6IFRlbnNvckludGVyZmFjZS5EYXRhVHlwZU1hcFtUXSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVGVuc29yID0+XG4gICAgbmV3IFRlbnNvcih7bG9jYXRpb246ICdjcHUtcGlubmVkJywgdHlwZSwgZGF0YTogYnVmZmVyLCBkaW1zOiBkaW1zID8/IFtidWZmZXIubGVuZ3RoXX0pO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi90ZW5zb3IuanMnO1xuXG5leHBvcnQgdHlwZSBTdXBwb3J0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gRmxvYXQzMkFycmF5Q29uc3RydWN0b3J8VWludDhBcnJheUNvbnN0cnVjdG9yfEludDhBcnJheUNvbnN0cnVjdG9yfFxuICAgIFVpbnQxNkFycmF5Q29uc3RydWN0b3J8SW50MTZBcnJheUNvbnN0cnVjdG9yfEludDMyQXJyYXlDb25zdHJ1Y3RvcnxCaWdJbnQ2NEFycmF5Q29uc3RydWN0b3J8VWludDhBcnJheUNvbnN0cnVjdG9yfFxuICAgIEZsb2F0NjRBcnJheUNvbnN0cnVjdG9yfFVpbnQzMkFycmF5Q29uc3RydWN0b3J8QmlnVWludDY0QXJyYXlDb25zdHJ1Y3RvcjtcbmV4cG9ydCB0eXBlIFN1cHBvcnRlZFR5cGVkQXJyYXkgPSBJbnN0YW5jZVR5cGU8U3VwcG9ydGVkVHlwZWRBcnJheUNvbnN0cnVjdG9ycz47XG5cbi8vIGEgcnVudGltZSBtYXAgdGhhdCBtYXBzIHR5cGUgc3RyaW5nIHRvIFR5cGVkQXJyYXkgY29uc3RydWN0b3IuIFNob3VsZCBtYXRjaCBUZW5zb3IuRGF0YVR5cGVNYXAuXG5leHBvcnQgY29uc3QgTlVNRVJJQ19URU5TT1JfVFlQRV9UT19UWVBFREFSUkFZX01BUCA9IG5ldyBNYXA8c3RyaW5nLCBTdXBwb3J0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3JzPihbXG4gIFsnZmxvYXQzMicsIEZsb2F0MzJBcnJheV0sXG4gIFsndWludDgnLCBVaW50OEFycmF5XSxcbiAgWydpbnQ4JywgSW50OEFycmF5XSxcbiAgWyd1aW50MTYnLCBVaW50MTZBcnJheV0sXG4gIFsnZmxvYXQxNicsIFVpbnQxNkFycmF5XSxcbiAgWydpbnQxNicsIEludDE2QXJyYXldLFxuICBbJ2ludDMyJywgSW50MzJBcnJheV0sXG4gIFsnYm9vbCcsIFVpbnQ4QXJyYXldLFxuICBbJ2Zsb2F0NjQnLCBGbG9hdDY0QXJyYXldLFxuICBbJ3VpbnQzMicsIFVpbnQzMkFycmF5XSxcbl0pO1xuXG4vLyBhIHJ1bnRpbWUgbWFwIHRoYXQgbWFwcyB0eXBlIHN0cmluZyB0byBUeXBlZEFycmF5IGNvbnN0cnVjdG9yLiBTaG91bGQgbWF0Y2ggVGVuc29yLkRhdGFUeXBlTWFwLlxuZXhwb3J0IGNvbnN0IE5VTUVSSUNfVEVOU09SX1RZUEVEQVJSQVlfVE9fVFlQRV9NQVAgPSBuZXcgTWFwPFN1cHBvcnRlZFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMsIFRlbnNvci5UeXBlPihbXG4gIFtGbG9hdDMyQXJyYXksICdmbG9hdDMyJ10sXG4gIFtVaW50OEFycmF5LCAndWludDgnXSxcbiAgW0ludDhBcnJheSwgJ2ludDgnXSxcbiAgW1VpbnQxNkFycmF5LCAndWludDE2J10sXG4gIFtJbnQxNkFycmF5LCAnaW50MTYnXSxcbiAgW0ludDMyQXJyYXksICdpbnQzMiddLFxuICBbRmxvYXQ2NEFycmF5LCAnZmxvYXQ2NCddLFxuICBbVWludDMyQXJyYXksICd1aW50MzInXSxcbl0pO1xuXG4vLyB0aGUgZm9sbG93aW5nIGNvZGUgYWxsb3dzIGRlbGF5aW5nIGV4ZWN1dGlvbiBvZiBCaWdJbnQgY2hlY2tpbmcuIFRoaXMgYWxsb3dzIGxhenkgaW5pdGlhbGl6YXRpb24gZm9yXG4vLyBOVU1FUklDX1RFTlNPUl9UWVBFX1RPX1RZUEVEQVJSQVlfTUFQIGFuZCBOVU1FUklDX1RFTlNPUl9UWVBFREFSUkFZX1RPX1RZUEVfTUFQLCB3aGljaCBhbGxvd3MgQmlnSW50IHBvbHlmaWxsXG4vLyBpZiBhdmFpbGFibGUuXG5sZXQgaXNCaWdJbnRDaGVja2VkID0gZmFsc2U7XG5leHBvcnQgY29uc3QgY2hlY2tCaWdJbnQgPSAoKSA9PiB7XG4gIGlmICghaXNCaWdJbnRDaGVja2VkKSB7XG4gICAgaXNCaWdJbnRDaGVja2VkID0gdHJ1ZTtcbiAgICBjb25zdCBpc0JpZ0ludDY0QXJyYXlBdmFpbGFibGUgPSB0eXBlb2YgQmlnSW50NjRBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEJpZ0ludDY0QXJyYXkuZnJvbSA9PT0gJ2Z1bmN0aW9uJztcbiAgICBjb25zdCBpc0JpZ1VpbnQ2NEFycmF5QXZhaWxhYmxlID1cbiAgICAgICAgdHlwZW9mIEJpZ1VpbnQ2NEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQmlnVWludDY0QXJyYXkuZnJvbSA9PT0gJ2Z1bmN0aW9uJztcblxuICAgIGlmIChpc0JpZ0ludDY0QXJyYXlBdmFpbGFibGUpIHtcbiAgICAgIE5VTUVSSUNfVEVOU09SX1RZUEVfVE9fVFlQRURBUlJBWV9NQVAuc2V0KCdpbnQ2NCcsIEJpZ0ludDY0QXJyYXkpO1xuICAgICAgTlVNRVJJQ19URU5TT1JfVFlQRURBUlJBWV9UT19UWVBFX01BUC5zZXQoQmlnSW50NjRBcnJheSwgJ2ludDY0Jyk7XG4gICAgfVxuICAgIGlmIChpc0JpZ1VpbnQ2NEFycmF5QXZhaWxhYmxlKSB7XG4gICAgICBOVU1FUklDX1RFTlNPUl9UWVBFX1RPX1RZUEVEQVJSQVlfTUFQLnNldCgndWludDY0JywgQmlnVWludDY0QXJyYXkpO1xuICAgICAgTlVNRVJJQ19URU5TT1JfVFlQRURBUlJBWV9UT19UWVBFX01BUC5zZXQoQmlnVWludDY0QXJyYXksICd1aW50NjQnKTtcbiAgICB9XG4gIH1cbn07XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7Q3B1UGlubmVkQ29uc3RydWN0b3JQYXJhbWV0ZXJzLCBHcHVCdWZmZXJDb25zdHJ1Y3RvclBhcmFtZXRlcnMsIFRleHR1cmVDb25zdHJ1Y3RvclBhcmFtZXRlcnN9IGZyb20gJy4vdGVuc29yLWZhY3RvcnkuanMnO1xuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4vdGVuc29yLWltcGwuanMnO1xuXG4vKipcbiAqIGNhbGN1bGF0ZSBzaXplIGZyb20gZGltcy5cbiAqXG4gKiBAcGFyYW0gZGltcyB0aGUgZGltcyBhcnJheS4gTWF5IGJlIGFuIGlsbGVnYWwgaW5wdXQuXG4gKi9cbmV4cG9ydCBjb25zdCBjYWxjdWxhdGVTaXplID0gKGRpbXM6IHJlYWRvbmx5IHVua25vd25bXSk6IG51bWJlciA9PiB7XG4gIGxldCBzaXplID0gMTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZGltID0gZGltc1tpXTtcbiAgICBpZiAodHlwZW9mIGRpbSAhPT0gJ251bWJlcicgfHwgIU51bWJlci5pc1NhZmVJbnRlZ2VyKGRpbSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGRpbXNbJHtpfV0gbXVzdCBiZSBhbiBpbnRlZ2VyLCBnb3Q6ICR7ZGltfWApO1xuICAgIH1cbiAgICBpZiAoZGltIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYGRpbXNbJHtpfV0gbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyLCBnb3Q6ICR7ZGltfWApO1xuICAgIH1cbiAgICBzaXplICo9IGRpbTtcbiAgfVxuICByZXR1cm4gc2l6ZTtcbn07XG5cbi8qKlxuICogaW1wbGVtZW50YXRpb24gb2YgVGVuc29yLnJlc2hhcGUoKVxuICovXG5leHBvcnQgY29uc3QgdGVuc29yUmVzaGFwZSA9ICh0ZW5zb3I6IFRlbnNvciwgZGltczogcmVhZG9ubHkgbnVtYmVyW10pOiBUZW5zb3IgPT4ge1xuICBzd2l0Y2ggKHRlbnNvci5sb2NhdGlvbikge1xuICAgIGNhc2UgJ2NwdSc6XG4gICAgICByZXR1cm4gbmV3IFRlbnNvcih0ZW5zb3IudHlwZSwgdGVuc29yLmRhdGEsIGRpbXMpO1xuICAgIGNhc2UgJ2NwdS1waW5uZWQnOlxuICAgICAgcmV0dXJuIG5ldyBUZW5zb3Ioe1xuICAgICAgICBsb2NhdGlvbjogJ2NwdS1waW5uZWQnLFxuICAgICAgICBkYXRhOiB0ZW5zb3IuZGF0YSBhcyBDcHVQaW5uZWRDb25zdHJ1Y3RvclBhcmFtZXRlcnNbJ2RhdGEnXSxcbiAgICAgICAgdHlwZTogdGVuc29yLnR5cGUgYXMgQ3B1UGlubmVkQ29uc3RydWN0b3JQYXJhbWV0ZXJzWyd0eXBlJ10sXG4gICAgICAgIGRpbXMsXG4gICAgICB9KTtcbiAgICBjYXNlICd0ZXh0dXJlJzpcbiAgICAgIHJldHVybiBuZXcgVGVuc29yKHtcbiAgICAgICAgbG9jYXRpb246ICd0ZXh0dXJlJyxcbiAgICAgICAgdGV4dHVyZTogdGVuc29yLnRleHR1cmUsXG4gICAgICAgIHR5cGU6IHRlbnNvci50eXBlIGFzIFRleHR1cmVDb25zdHJ1Y3RvclBhcmFtZXRlcnNbJ3R5cGUnXSxcbiAgICAgICAgZGltcyxcbiAgICAgIH0pO1xuICAgIGNhc2UgJ2dwdS1idWZmZXInOlxuICAgICAgcmV0dXJuIG5ldyBUZW5zb3Ioe1xuICAgICAgICBsb2NhdGlvbjogJ2dwdS1idWZmZXInLFxuICAgICAgICBncHVCdWZmZXI6IHRlbnNvci5ncHVCdWZmZXIsXG4gICAgICAgIHR5cGU6IHRlbnNvci50eXBlIGFzIEdwdUJ1ZmZlckNvbnN0cnVjdG9yUGFyYW1ldGVyc1sndHlwZSddLFxuICAgICAgICBkaW1zLFxuICAgICAgfSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdGVuc29yUmVzaGFwZTogdGVuc29yIGxvY2F0aW9uICR7dGVuc29yLmxvY2F0aW9ufSBpcyBub3Qgc3VwcG9ydGVkYCk7XG4gIH1cbn07XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7dGVuc29yVG9EYXRhVVJMLCB0ZW5zb3JUb0ltYWdlRGF0YX0gZnJvbSAnLi90ZW5zb3ItY29udmVyc2lvbi1pbXBsLmpzJztcbmltcG9ydCB7VGVuc29yVG9EYXRhVXJsT3B0aW9ucywgVGVuc29yVG9JbWFnZURhdGFPcHRpb25zfSBmcm9tICcuL3RlbnNvci1jb252ZXJzaW9uLmpzJztcbmltcG9ydCB7dGVuc29yRnJvbUdwdUJ1ZmZlciwgdGVuc29yRnJvbUltYWdlLCB0ZW5zb3JGcm9tUGlubmVkQnVmZmVyLCB0ZW5zb3JGcm9tVGV4dHVyZX0gZnJvbSAnLi90ZW5zb3ItZmFjdG9yeS1pbXBsLmpzJztcbmltcG9ydCB7Q3B1UGlubmVkQ29uc3RydWN0b3JQYXJhbWV0ZXJzLCBHcHVCdWZmZXJDb25zdHJ1Y3RvclBhcmFtZXRlcnMsIFRlbnNvckZyb21HcHVCdWZmZXJPcHRpb25zLCBUZW5zb3JGcm9tSW1hZ2VCaXRtYXBPcHRpb25zLCBUZW5zb3JGcm9tSW1hZ2VEYXRhT3B0aW9ucywgVGVuc29yRnJvbUltYWdlRWxlbWVudE9wdGlvbnMsIFRlbnNvckZyb21UZXh0dXJlT3B0aW9ucywgVGVuc29yRnJvbVVybE9wdGlvbnMsIFRleHR1cmVDb25zdHJ1Y3RvclBhcmFtZXRlcnN9IGZyb20gJy4vdGVuc29yLWZhY3RvcnkuanMnO1xuaW1wb3J0IHtjaGVja0JpZ0ludCwgTlVNRVJJQ19URU5TT1JfVFlQRV9UT19UWVBFREFSUkFZX01BUCwgTlVNRVJJQ19URU5TT1JfVFlQRURBUlJBWV9UT19UWVBFX01BUCwgU3VwcG9ydGVkVHlwZWRBcnJheSwgU3VwcG9ydGVkVHlwZWRBcnJheUNvbnN0cnVjdG9yc30gZnJvbSAnLi90ZW5zb3ItaW1wbC10eXBlLW1hcHBpbmcuanMnO1xuaW1wb3J0IHtjYWxjdWxhdGVTaXplLCB0ZW5zb3JSZXNoYXBlfSBmcm9tICcuL3RlbnNvci11dGlscy1pbXBsLmpzJztcbmltcG9ydCB7VGVuc29yIGFzIFRlbnNvckludGVyZmFjZX0gZnJvbSAnLi90ZW5zb3IuanMnO1xuXG4vLyB0eXBlIGFsaWFzZXMgZm9yIHRob3NlIGV4cG9ydGVkIGZyb20gVGVuc29yIGludGVyZmFjZVxuXG50eXBlIFRlbnNvclR5cGUgPSBUZW5zb3JJbnRlcmZhY2UuVHlwZTtcbnR5cGUgVGVuc29yRGF0YVR5cGUgPSBUZW5zb3JJbnRlcmZhY2UuRGF0YVR5cGU7XG50eXBlIFRlbnNvckRhdGFMb2NhdGlvbiA9IFRlbnNvckludGVyZmFjZS5EYXRhTG9jYXRpb247XG50eXBlIFRlbnNvclRleHR1cmVUeXBlID0gVGVuc29ySW50ZXJmYWNlLlRleHR1cmVUeXBlO1xudHlwZSBUZW5zb3JHcHVCdWZmZXJUeXBlID0gVGVuc29ySW50ZXJmYWNlLkdwdUJ1ZmZlclR5cGU7XG5cbi8qKlxuICogdGhlIGltcGxlbWVudGF0aW9uIG9mIFRlbnNvciBpbnRlcmZhY2UuXG4gKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgY2xhc3MgVGVuc29yIGltcGxlbWVudHMgVGVuc29ySW50ZXJmYWNlIHtcbiAgLy8gI3JlZ2lvbiBjb25zdHJ1Y3RvcnNcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IENQVSB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIHR5cGUsIGRhdGEgYW5kIGRpbXMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIHR5cGU6IFRlbnNvclR5cGUsIGRhdGE6IFRlbnNvckRhdGFUeXBlfHJlYWRvbmx5IHN0cmluZ1tdfHJlYWRvbmx5IG51bWJlcltdfHJlYWRvbmx5IGJvb2xlYW5bXSxcbiAgICAgIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgQ1BVIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy4gVHlwZSBpcyBpbmZlcnJlZCBmcm9tIGRhdGEuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihkYXRhOiBUZW5zb3JEYXRhVHlwZXxyZWFkb25seSBzdHJpbmdbXXxyZWFkb25seSBib29sZWFuW10sIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBwaW5uZWQgQ1BVIGRhdGEgd2l0aCB0aGUgZ2l2ZW4gdHlwZSBhbmQgZGltcy5cbiAgICpcbiAgICogVGVuc29yJ3MgbG9jYXRpb24gd2lsbCBiZSBzZXQgdG8gJ2NwdS1waW5uZWQnLlxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zIC0gU3BlY2lmeSB0aGUgcGFyYW1ldGVycyB0byBjb25zdHJ1Y3QgdGhlIHRlbnNvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmFtczogQ3B1UGlubmVkQ29uc3RydWN0b3JQYXJhbWV0ZXJzKTtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIFdlYkdMIHRleHR1cmUgd2l0aCB0aGUgZ2l2ZW4gdHlwZSBhbmQgZGltcy5cbiAgICpcbiAgICogVGVuc29yJ3MgbG9jYXRpb24gd2lsbCBiZSBzZXQgdG8gJ3RleHR1cmUnLlxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zIC0gU3BlY2lmeSB0aGUgcGFyYW1ldGVycyB0byBjb25zdHJ1Y3QgdGhlIHRlbnNvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmFtczogVGV4dHVyZUNvbnN0cnVjdG9yUGFyYW1ldGVycyk7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBXZWJHUFUgYnVmZmVyIHdpdGggdGhlIGdpdmVuIHR5cGUgYW5kIGRpbXMuXG4gICAqXG4gICAqIFRlbnNvcidzIGxvY2F0aW9uIHdpbGwgYmUgc2V0IHRvICdncHUtYnVmZmVyJy5cbiAgICpcbiAgICogQHBhcmFtIHBhcmFtcyAtIFNwZWNpZnkgdGhlIHBhcmFtZXRlcnMgdG8gY29uc3RydWN0IHRoZSB0ZW5zb3IuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJhbXM6IEdwdUJ1ZmZlckNvbnN0cnVjdG9yUGFyYW1ldGVycyk7XG5cbiAgLyoqXG4gICAqIGltcGxlbWVudGF0aW9uLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgICBhcmcwOiBUZW5zb3JUeXBlfFRlbnNvckRhdGFUeXBlfHJlYWRvbmx5IHN0cmluZ1tdfHJlYWRvbmx5IGJvb2xlYW5bXXxDcHVQaW5uZWRDb25zdHJ1Y3RvclBhcmFtZXRlcnN8XG4gICAgICBUZXh0dXJlQ29uc3RydWN0b3JQYXJhbWV0ZXJzfEdwdUJ1ZmZlckNvbnN0cnVjdG9yUGFyYW1ldGVycyxcbiAgICAgIGFyZzE/OiBUZW5zb3JEYXRhVHlwZXxyZWFkb25seSBudW1iZXJbXXxyZWFkb25seSBzdHJpbmdbXXxyZWFkb25seSBib29sZWFuW10sIGFyZzI/OiByZWFkb25seSBudW1iZXJbXSkge1xuICAgIC8vIHBlcmZvcm0gb25lLXRpbWUgY2hlY2sgZm9yIEJpZ0ludCBzdXBwb3J0XG4gICAgY2hlY2tCaWdJbnQoKTtcblxuICAgIGxldCB0eXBlOiBUZW5zb3JUeXBlO1xuICAgIGxldCBkaW1zOiByZWFkb25seSBudW1iZXJbXTtcblxuICAgIGlmICh0eXBlb2YgYXJnMCA9PT0gJ29iamVjdCcgJiYgJ2xvY2F0aW9uJyBpbiBhcmcwKSB7XG4gICAgICAvL1xuICAgICAgLy8gY29uc3RydWN0aW5nIHRlbnNvciBmcm9tIHNwZWNpZmljIGxvY2F0aW9uXG4gICAgICAvL1xuICAgICAgdGhpcy5kYXRhTG9jYXRpb24gPSBhcmcwLmxvY2F0aW9uO1xuICAgICAgdHlwZSA9IGFyZzAudHlwZTtcbiAgICAgIGRpbXMgPSBhcmcwLmRpbXM7XG4gICAgICBzd2l0Y2ggKGFyZzAubG9jYXRpb24pIHtcbiAgICAgICAgY2FzZSAnY3B1LXBpbm5lZCc6IHtcbiAgICAgICAgICBjb25zdCBleHBlY3RlZFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IE5VTUVSSUNfVEVOU09SX1RZUEVfVE9fVFlQRURBUlJBWV9NQVAuZ2V0KHR5cGUpO1xuICAgICAgICAgIGlmICghZXhwZWN0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYHVuc3VwcG9ydGVkIHR5cGUgXCIke3R5cGV9XCIgdG8gY3JlYXRlIHRlbnNvciBmcm9tIHBpbm5lZCBidWZmZXJgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCEoYXJnMC5kYXRhIGluc3RhbmNlb2YgZXhwZWN0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3IpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBidWZmZXIgc2hvdWxkIGJlIG9mIHR5cGUgJHtleHBlY3RlZFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5uYW1lfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmNwdURhdGEgPSBhcmcwLmRhdGE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAndGV4dHVyZSc6IHtcbiAgICAgICAgICBpZiAodHlwZSAhPT0gJ2Zsb2F0MzInKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGB1bnN1cHBvcnRlZCB0eXBlIFwiJHt0eXBlfVwiIHRvIGNyZWF0ZSB0ZW5zb3IgZnJvbSB0ZXh0dXJlYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZ3B1VGV4dHVyZURhdGEgPSBhcmcwLnRleHR1cmU7XG4gICAgICAgICAgdGhpcy5kb3dubG9hZGVyID0gYXJnMC5kb3dubG9hZDtcbiAgICAgICAgICB0aGlzLmRpc3Bvc2VyID0gYXJnMC5kaXNwb3NlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ2dwdS1idWZmZXInOiB7XG4gICAgICAgICAgaWYgKCh0eXBlICE9PSAnZmxvYXQzMicgJiYgdHlwZSAhPT0gJ2Zsb2F0MTYnICYmIHR5cGUgIT09ICdpbnQzMicgJiYgdHlwZSAhPT0gJ2ludDY0JyAmJiB0eXBlICE9PSAndWludDMyJyAmJlxuICAgICAgICAgICAgICAgdHlwZSAhPT0gJ2Jvb2wnKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgdW5zdXBwb3J0ZWQgdHlwZSBcIiR7dHlwZX1cIiB0byBjcmVhdGUgdGVuc29yIGZyb20gZ3B1IGJ1ZmZlcmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmdwdUJ1ZmZlckRhdGEgPSBhcmcwLmdwdUJ1ZmZlcjtcbiAgICAgICAgICB0aGlzLmRvd25sb2FkZXIgPSBhcmcwLmRvd25sb2FkO1xuICAgICAgICAgIHRoaXMuZGlzcG9zZXIgPSBhcmcwLmRpc3Bvc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRlbnNvciBjb25zdHJ1Y3RvcjogdW5zdXBwb3J0ZWQgbG9jYXRpb24gJyR7dGhpcy5kYXRhTG9jYXRpb259J2ApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvL1xuICAgICAgLy8gY29uc3RydWN0aW5nIHRlbnNvciBvZiBsb2NhdGlvbiAnY3B1J1xuICAgICAgLy9cbiAgICAgIGxldCBkYXRhOiBUZW5zb3JEYXRhVHlwZTtcbiAgICAgIGxldCBtYXliZURpbXM6IHR5cGVvZiBhcmcxfHR5cGVvZiBhcmcyO1xuICAgICAgLy8gY2hlY2sgd2hldGhlciBhcmcwIGlzIHR5cGUgb3IgZGF0YVxuICAgICAgaWYgKHR5cGVvZiBhcmcwID09PSAnc3RyaW5nJykge1xuICAgICAgICAvL1xuICAgICAgICAvLyBPdmVycmlkZTogY29uc3RydWN0b3IodHlwZSwgZGF0YSwgLi4uKVxuICAgICAgICAvL1xuICAgICAgICB0eXBlID0gYXJnMDtcbiAgICAgICAgbWF5YmVEaW1zID0gYXJnMjtcbiAgICAgICAgaWYgKGFyZzAgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgLy8gc3RyaW5nIHRlbnNvclxuICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShhcmcxKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBzdHJpbmcgdGVuc29yXFwncyBkYXRhIG11c3QgYmUgYSBzdHJpbmcgYXJyYXkuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIHdlIGRvbid0IGNoZWNrIHdoZXRoZXIgZXZlcnkgZWxlbWVudCBpbiB0aGUgYXJyYXkgaXMgc3RyaW5nOyB0aGlzIGlzIHRvbyBzbG93LiB3ZSBhc3N1bWUgaXQncyBjb3JyZWN0IGFuZFxuICAgICAgICAgIC8vIGVycm9yIHdpbGwgYmUgcG9wdWxhdGVkIGF0IGluZmVyZW5jZVxuICAgICAgICAgIGRhdGEgPSBhcmcxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG51bWVyaWMgdGVuc29yXG4gICAgICAgICAgY29uc3QgdHlwZWRBcnJheUNvbnN0cnVjdG9yID0gTlVNRVJJQ19URU5TT1JfVFlQRV9UT19UWVBFREFSUkFZX01BUC5nZXQoYXJnMCk7XG4gICAgICAgICAgaWYgKHR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBVbnN1cHBvcnRlZCB0ZW5zb3IgdHlwZTogJHthcmcwfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnMSkpIHtcbiAgICAgICAgICAgIGlmIChhcmcwID09PSAnZmxvYXQxNicpIHtcbiAgICAgICAgICAgICAgLy8gVGhyb3cgZXJyb3IgaGVyZSBiZWNhdXNlIHdoZW4gdXNlciB0cnkgdG8gdXNlIG51bWJlciBhcnJheSBhcyBkYXRhLFxuICAgICAgICAgICAgICAvLyBlLmcuIG5ldyBUZW5zb3IoJ2Zsb2F0MTYnLCBbMSwgMiwgMywgNF0sIGRpbXMpKSwgaXQgd2lsbCBhY3R1YWxseSBjYWxsXG4gICAgICAgICAgICAgIC8vIFVpbnQxNkFycmF5LmZyb20oYXJnMSkgd2hpY2ggZ2VuZXJhdGVzIHdyb25nIGRhdGEuXG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAgICAgICAnQ3JlYXRpbmcgYSBmbG9hdDE2IHRlbnNvciBmcm9tIG51bWJlciBhcnJheSBpcyBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgdXNlIFVpbnQxNkFycmF5IGFzIGRhdGEuJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFyZzAgPT09ICd1aW50NjQnIHx8IGFyZzAgPT09ICdpbnQ2NCcpIHtcbiAgICAgICAgICAgICAgLy8gdXNlICdhcyBhbnknIGhlcmUgYmVjYXVzZTpcbiAgICAgICAgICAgICAgLy8gMS4gVHlwZVNjcmlwdCdzIGNoZWNrIG9uIHR5cGUgb2YgJ0FycmF5LmlzQXJyYXkoKScgZG9lcyBub3Qgd29yayB3aXRoIHJlYWRvbmx5IGFycmF5cy5cbiAgICAgICAgICAgICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTcwMDJcbiAgICAgICAgICAgICAgLy8gMi4gVHlwZVNjcmlwdCdzIGNoZWNrIG9uIHVuaW9uIHR5cGUgb2YgJyhCaWdJbnQ2NEFycmF5Q29uc3RydWN0b3J8QmlnVWludDY0QXJyYXlDb25zdHJ1Y3RvcikuZnJvbSgpJ1xuICAgICAgICAgICAgICAvLyBkb2VzIG5vdCBhY2NlcHQgcGFyYW1ldGVyIG1hcEZuLlxuICAgICAgICAgICAgICAvLyAzLiBwYXJhbWV0ZXJzIG9mICdTdXBwb3J0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3JzLmZyb20oKScgZG9lcyBub3QgbWF0Y2ggdGhlIHJlcXVpcmVtZW50IG9mIHRoZSB1bmlvblxuICAgICAgICAgICAgICAvLyB0eXBlLlxuXG4gICAgICAgICAgICAgIC8vIGFzc3VtZSAnYXJnMScgaXMgb2YgdHlwZSBcInJlYWRvbmx5IG51bWJlcltdfHJlYWRvbmx5IGJpZ2ludFtdXCIgaGVyZS5cblxuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICBkYXRhID0gKHR5cGVkQXJyYXlDb25zdHJ1Y3RvciBhcyBhbnkpLmZyb20oYXJnMSwgQmlnSW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGFzc3VtZSAnYXJnMScgaXMgb2YgdHlwZSBcInJlYWRvbmx5IG51bWJlcltdXCIgaGVyZS5cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgICAgZGF0YSA9ICh0eXBlZEFycmF5Q29uc3RydWN0b3IgYXMgYW55KS5mcm9tKGFyZzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoYXJnMSBpbnN0YW5jZW9mIHR5cGVkQXJyYXlDb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgZGF0YSA9IGFyZzE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEEgJHt0eXBlfSB0ZW5zb3IncyBkYXRhIG11c3QgYmUgdHlwZSBvZiAke3R5cGVkQXJyYXlDb25zdHJ1Y3Rvcn1gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIE92ZXJyaWRlOiBjb25zdHJ1Y3RvcihkYXRhLCAuLi4pXG4gICAgICAgIC8vXG4gICAgICAgIG1heWJlRGltcyA9IGFyZzE7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZzApKSB7XG4gICAgICAgICAgLy8gb25seSBib29sZWFuW10gYW5kIHN0cmluZ1tdIGlzIHN1cHBvcnRlZFxuICAgICAgICAgIGlmIChhcmcwLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGVuc29yIHR5cGUgY2Fubm90IGJlIGluZmVycmVkIGZyb20gYW4gZW1wdHkgYXJyYXkuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGZpcnN0RWxlbWVudFR5cGUgPSB0eXBlb2YgYXJnMFswXTtcbiAgICAgICAgICBpZiAoZmlyc3RFbGVtZW50VHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHR5cGUgPSAnc3RyaW5nJztcbiAgICAgICAgICAgIGRhdGEgPSBhcmcwO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZmlyc3RFbGVtZW50VHlwZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICB0eXBlID0gJ2Jvb2wnO1xuICAgICAgICAgICAgLy8gJ2FyZzAnIGlzIG9mIHR5cGUgJ2Jvb2xlYW5bXScuIFVpbnQ4QXJyYXkuZnJvbShib29sZWFuW10pIGFjdHVhbGx5IHdvcmtzLCBidXQgdHlwZXNjcmlwdCB0aGlua3MgdGhpcyBpc1xuICAgICAgICAgICAgLy8gd3JvbmcgdHlwZS4gV2UgdXNlICdhcyBhbnknIHRvIG1ha2UgaXQgaGFwcHkuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgZGF0YSA9IFVpbnQ4QXJyYXkuZnJvbShhcmcwIGFzIGFueVtdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBlbGVtZW50IHR5cGUgb2YgZGF0YSBhcnJheTogJHtmaXJzdEVsZW1lbnRUeXBlfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZ2V0IHRlbnNvciB0eXBlIGZyb20gVHlwZWRBcnJheVxuICAgICAgICAgIGNvbnN0IG1hcHBlZFR5cGUgPVxuICAgICAgICAgICAgICBOVU1FUklDX1RFTlNPUl9UWVBFREFSUkFZX1RPX1RZUEVfTUFQLmdldChhcmcwLmNvbnN0cnVjdG9yIGFzIFN1cHBvcnRlZFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMpO1xuICAgICAgICAgIGlmIChtYXBwZWRUeXBlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFVuc3VwcG9ydGVkIHR5cGUgZm9yIHRlbnNvciBkYXRhOiAke2FyZzAuY29uc3RydWN0b3J9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0eXBlID0gbWFwcGVkVHlwZTtcbiAgICAgICAgICBkYXRhID0gYXJnMCBhcyBTdXBwb3J0ZWRUeXBlZEFycmF5O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHR5cGUgYW5kIGRhdGEgaXMgcHJvY2Vzc2VkLCBub3cgcHJvY2Vzc2luZyBkaW1zXG4gICAgICBpZiAobWF5YmVEaW1zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gYXNzdW1lIDEtRCB0ZW5zb3IgaWYgZGltcyBvbWl0dGVkXG4gICAgICAgIG1heWJlRGltcyA9IFtkYXRhLmxlbmd0aF07XG4gICAgICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KG1heWJlRGltcykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSB0ZW5zb3JcXCdzIGRpbXMgbXVzdCBiZSBhIG51bWJlciBhcnJheScpO1xuICAgICAgfVxuICAgICAgZGltcyA9IG1heWJlRGltcyBhcyByZWFkb25seSBudW1iZXJbXTtcblxuICAgICAgdGhpcy5jcHVEYXRhID0gZGF0YTtcbiAgICAgIHRoaXMuZGF0YUxvY2F0aW9uID0gJ2NwdSc7XG4gICAgfVxuXG4gICAgLy8gcGVyZm9ybSBjaGVjayBvbiBkaW1zXG4gICAgY29uc3Qgc2l6ZSA9IGNhbGN1bGF0ZVNpemUoZGltcyk7XG4gICAgLy8gaWYgZGF0YSBpcyBvbiBDUFUsIGNoZWNrIHdoZXRoZXIgZGF0YSBsZW5ndGggbWF0Y2hlcyB0ZW5zb3Igc2l6ZVxuICAgIGlmICh0aGlzLmNwdURhdGEgJiYgc2l6ZSAhPT0gdGhpcy5jcHVEYXRhLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUZW5zb3IncyBzaXplKCR7c2l6ZX0pIGRvZXMgbm90IG1hdGNoIGRhdGEgbGVuZ3RoKCR7dGhpcy5jcHVEYXRhLmxlbmd0aH0pLmApO1xuICAgIH1cblxuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5kaW1zID0gZGltcztcbiAgICB0aGlzLnNpemUgPSBzaXplO1xuICB9XG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIGZhY3RvcnlcbiAgc3RhdGljIGFzeW5jIGZyb21JbWFnZShcbiAgICAgIGltYWdlOiBJbWFnZURhdGF8SFRNTEltYWdlRWxlbWVudHxJbWFnZUJpdG1hcHxzdHJpbmcsXG4gICAgICBvcHRpb25zPzogVGVuc29yRnJvbUltYWdlRGF0YU9wdGlvbnN8VGVuc29yRnJvbUltYWdlRWxlbWVudE9wdGlvbnN8VGVuc29yRnJvbUltYWdlQml0bWFwT3B0aW9uc3xcbiAgICAgIFRlbnNvckZyb21VcmxPcHRpb25zKTogUHJvbWlzZTxUZW5zb3JJbnRlcmZhY2U+IHtcbiAgICByZXR1cm4gdGVuc29yRnJvbUltYWdlKGltYWdlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tVGV4dHVyZTxUIGV4dGVuZHMgVGVuc29ySW50ZXJmYWNlLlRleHR1cmVEYXRhVHlwZXM+KFxuICAgICAgdGV4dHVyZTogVGVuc29yVGV4dHVyZVR5cGUsIG9wdGlvbnM6IFRlbnNvckZyb21UZXh0dXJlT3B0aW9uczxUPik6IFRlbnNvckludGVyZmFjZSB7XG4gICAgcmV0dXJuIHRlbnNvckZyb21UZXh0dXJlKHRleHR1cmUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21HcHVCdWZmZXI8VCBleHRlbmRzIFRlbnNvckludGVyZmFjZS5HcHVCdWZmZXJEYXRhVHlwZXM+KFxuICAgICAgZ3B1QnVmZmVyOiBUZW5zb3JHcHVCdWZmZXJUeXBlLCBvcHRpb25zOiBUZW5zb3JGcm9tR3B1QnVmZmVyT3B0aW9uczxUPik6IFRlbnNvckludGVyZmFjZSB7XG4gICAgcmV0dXJuIHRlbnNvckZyb21HcHVCdWZmZXIoZ3B1QnVmZmVyLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tUGlubmVkQnVmZmVyPFQgZXh0ZW5kcyBUZW5zb3JJbnRlcmZhY2UuQ3B1UGlubmVkRGF0YVR5cGVzPihcbiAgICAgIHR5cGU6IFQsIGJ1ZmZlcjogVGVuc29ySW50ZXJmYWNlLkRhdGFUeXBlTWFwW1RdLCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUZW5zb3Ige1xuICAgIHJldHVybiB0ZW5zb3JGcm9tUGlubmVkQnVmZmVyKHR5cGUsIGJ1ZmZlciwgZGltcyk7XG4gIH1cblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBjb252ZXJzaW9uc1xuICB0b0RhdGFVUkwob3B0aW9ucz86IFRlbnNvclRvRGF0YVVybE9wdGlvbnMpOiBzdHJpbmcge1xuICAgIHJldHVybiB0ZW5zb3JUb0RhdGFVUkwodGhpcywgb3B0aW9ucyk7XG4gIH1cblxuICB0b0ltYWdlRGF0YShvcHRpb25zPzogVGVuc29yVG9JbWFnZURhdGFPcHRpb25zKTogSW1hZ2VEYXRhIHtcbiAgICByZXR1cm4gdGVuc29yVG9JbWFnZURhdGEodGhpcywgb3B0aW9ucyk7XG4gIH1cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gcHVibGljIGZpZWxkc1xuICByZWFkb25seSBkaW1zOiByZWFkb25seSBudW1iZXJbXTtcbiAgcmVhZG9ubHkgdHlwZTogVGVuc29yVHlwZTtcbiAgcmVhZG9ubHkgc2l6ZTogbnVtYmVyO1xuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBwcml2YXRlIGZpZWxkc1xuXG4gIC8qKlxuICAgKiBzdG9yZXMgdGhlIGxvY2F0aW9uIG9mIHRoZSBkYXRhLlxuICAgKi9cbiAgcHJpdmF0ZSBkYXRhTG9jYXRpb246IFRlbnNvckRhdGFMb2NhdGlvbjtcblxuICAvKipcbiAgICogc3RvcmVzIHRoZSBkYXRhIG9uIENQVSwgaWYgbG9jYXRpb24gaXMgJ2NwdScgb3IgJ2NwdS1waW5uZWQnLiBvdGhlcndpc2UgZW1wdHkuXG4gICAqL1xuICBwcml2YXRlIGNwdURhdGE/OiBUZW5zb3JEYXRhVHlwZTtcblxuICAvKipcbiAgICogc3RvcmVzIHRoZSB1bmRlcmx5aW5nIHRleHR1cmUgd2hlbiBsb2NhdGlvbiBpcyAndGV4dHVyZScuIG90aGVyd2lzZSBlbXB0eS5cbiAgICovXG4gIHByaXZhdGUgZ3B1VGV4dHVyZURhdGE/OiBUZW5zb3JUZXh0dXJlVHlwZTtcblxuICAvKipcbiAgICogc3RvcmVzIHRoZSB1bmRlcmx5aW5nIEdQVSBidWZmZXIgd2hlbiBsb2NhdGlvbiBpcyAnZ3B1LWJ1ZmZlcicuIG90aGVyd2lzZSBlbXB0eS5cbiAgICovXG4gIHByaXZhdGUgZ3B1QnVmZmVyRGF0YT86IFRlbnNvckdwdUJ1ZmZlclR5cGU7XG5cbiAgLyoqXG4gICAqIHN0b3JlcyBhbiBvcHRpb25hbCBkb3dubG9hZGVyIGZ1bmN0aW9uIHRvIGRvd25sb2FkIGRhdGEgZnJvbSBHUFUgdG8gQ1BVLlxuICAgKi9cbiAgcHJpdmF0ZSBkb3dubG9hZGVyPygpOiBQcm9taXNlPFRlbnNvckRhdGFUeXBlPjtcblxuICAvKipcbiAgICogYSBmbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgZGF0YSBpcyBiZWluZyBkb3dubG9hZGVkIGZyb20gR1BVIHRvIENQVS5cbiAgICovXG4gIHByaXZhdGUgaXNEb3dubG9hZGluZz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIHN0b3JlcyBhbiBvcHRpb25hbCBkaXNwb3NlciBmdW5jdGlvbiB0byBkaXNwb3NlIHRoZSB1bmRlcmx5aW5nIGRhdGEuXG4gICAqL1xuICBwcml2YXRlIGRpc3Bvc2VyPygpOiB2b2lkO1xuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBwcm9wZXJ0aWVzXG4gIGdldCBkYXRhKCk6IFRlbnNvckRhdGFUeXBlIHtcbiAgICB0aGlzLmVuc3VyZVZhbGlkKCk7XG4gICAgaWYgKCF0aGlzLmNwdURhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnVGhlIGRhdGEgaXMgbm90IG9uIENQVS4gVXNlIGBnZXREYXRhKClgIHRvIGRvd25sb2FkIEdQVSBkYXRhIHRvIENQVSwgJyArXG4gICAgICAgICAgJ29yIHVzZSBgdGV4dHVyZWAgb3IgYGdwdUJ1ZmZlcmAgcHJvcGVydHkgdG8gYWNjZXNzIHRoZSBHUFUgZGF0YSBkaXJlY3RseS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY3B1RGF0YTtcbiAgfVxuXG4gIGdldCBsb2NhdGlvbigpOiBUZW5zb3JEYXRhTG9jYXRpb24ge1xuICAgIHJldHVybiB0aGlzLmRhdGFMb2NhdGlvbjtcbiAgfVxuXG4gIGdldCB0ZXh0dXJlKCk6IFRlbnNvclRleHR1cmVUeXBlIHtcbiAgICB0aGlzLmVuc3VyZVZhbGlkKCk7XG4gICAgaWYgKCF0aGlzLmdwdVRleHR1cmVEYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBkYXRhIGlzIG5vdCBzdG9yZWQgYXMgYSBXZWJHTCB0ZXh0dXJlLicpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5ncHVUZXh0dXJlRGF0YTtcbiAgfVxuXG4gIGdldCBncHVCdWZmZXIoKTogVGVuc29yR3B1QnVmZmVyVHlwZSB7XG4gICAgdGhpcy5lbnN1cmVWYWxpZCgpO1xuICAgIGlmICghdGhpcy5ncHVCdWZmZXJEYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBkYXRhIGlzIG5vdCBzdG9yZWQgYXMgYSBXZWJHUFUgYnVmZmVyLicpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5ncHVCdWZmZXJEYXRhO1xuICB9XG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIG1ldGhvZHNcblxuICBhc3luYyBnZXREYXRhKHJlbGVhc2VEYXRhPzogYm9vbGVhbik6IFByb21pc2U8VGVuc29yRGF0YVR5cGU+IHtcbiAgICB0aGlzLmVuc3VyZVZhbGlkKCk7XG4gICAgc3dpdGNoICh0aGlzLmRhdGFMb2NhdGlvbikge1xuICAgICAgY2FzZSAnY3B1JzpcbiAgICAgIGNhc2UgJ2NwdS1waW5uZWQnOlxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhO1xuICAgICAgY2FzZSAndGV4dHVyZSc6XG4gICAgICBjYXNlICdncHUtYnVmZmVyJzoge1xuICAgICAgICBpZiAoIXRoaXMuZG93bmxvYWRlcikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGN1cnJlbnQgdGVuc29yIGlzIG5vdCBjcmVhdGVkIHdpdGggYSBzcGVjaWZpZWQgZGF0YSBkb3dubG9hZGVyLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzRG93bmxvYWRpbmcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjdXJyZW50IHRlbnNvciBpcyBiZWluZyBkb3dubG9hZGVkLicpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5pc0Rvd25sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5kb3dubG9hZGVyKCk7XG4gICAgICAgICAgdGhpcy5kb3dubG9hZGVyID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHRoaXMuZGF0YUxvY2F0aW9uID0gJ2NwdSc7XG4gICAgICAgICAgdGhpcy5jcHVEYXRhID0gZGF0YTtcblxuICAgICAgICAgIGlmIChyZWxlYXNlRGF0YSAmJiB0aGlzLmRpc3Bvc2VyKSB7XG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2VyKCk7XG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2VyID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBkYXRhO1xuXG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhpcy5pc0Rvd25sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGdldCBkYXRhIGZyb20gbG9jYXRpb246ICR7dGhpcy5kYXRhTG9jYXRpb259YCk7XG4gICAgfVxuICB9XG5cbiAgZGlzcG9zZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc0Rvd25sb2FkaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjdXJyZW50IHRlbnNvciBpcyBiZWluZyBkb3dubG9hZGVkLicpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmRpc3Bvc2VyKSB7XG4gICAgICB0aGlzLmRpc3Bvc2VyKCk7XG4gICAgICB0aGlzLmRpc3Bvc2VyID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aGlzLmNwdURhdGEgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ncHVUZXh0dXJlRGF0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmdwdUJ1ZmZlckRhdGEgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kb3dubG9hZGVyID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaXNEb3dubG9hZGluZyA9IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuZGF0YUxvY2F0aW9uID0gJ25vbmUnO1xuICB9XG5cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gdGVuc29yIHV0aWxpdGllc1xuICBwcml2YXRlIGVuc3VyZVZhbGlkKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRhdGFMb2NhdGlvbiA9PT0gJ25vbmUnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB0ZW5zb3IgaXMgZGlzcG9zZWQuJyk7XG4gICAgfVxuICB9XG5cbiAgcmVzaGFwZShkaW1zOiByZWFkb25seSBudW1iZXJbXSk6IFRlbnNvckludGVyZmFjZSB7XG4gICAgdGhpcy5lbnN1cmVWYWxpZCgpO1xuICAgIGlmICh0aGlzLmRvd25sb2FkZXIgfHwgdGhpcy5kaXNwb3Nlcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgcmVzaGFwZSBhIHRlbnNvciB0aGF0IG93bnMgR1BVIHJlc291cmNlLicpO1xuICAgIH1cbiAgICByZXR1cm4gdGVuc29yUmVzaGFwZSh0aGlzLCBkaW1zKTtcbiAgfVxuICAvLyAjZW5kcmVnaW9uXG59XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7VGVuc29yRmFjdG9yeX0gZnJvbSAnLi90ZW5zb3ItZmFjdG9yeS5qcyc7XG5pbXBvcnQge1RlbnNvciBhcyBUZW5zb3JJbXBsfSBmcm9tICcuL3RlbnNvci1pbXBsLmpzJztcbmltcG9ydCB7VHlwZWRUZW5zb3JVdGlsc30gZnJvbSAnLi90ZW5zb3ItdXRpbHMuanMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlICovXG5cbi8qKlxuICogcmVwcmVzZW50IGEgYmFzaWMgdGVuc29yIHdpdGggc3BlY2lmaWVkIGRpbWVuc2lvbnMgYW5kIGRhdGEgdHlwZS5cbiAqL1xuaW50ZXJmYWNlIFR5cGVkVGVuc29yQmFzZTxUIGV4dGVuZHMgVGVuc29yLlR5cGU+IHtcbiAgLyoqXG4gICAqIEdldCB0aGUgZGltZW5zaW9ucyBvZiB0aGUgdGVuc29yLlxuICAgKi9cbiAgcmVhZG9ubHkgZGltczogcmVhZG9ubHkgbnVtYmVyW107XG4gIC8qKlxuICAgKiBHZXQgdGhlIGRhdGEgdHlwZSBvZiB0aGUgdGVuc29yLlxuICAgKi9cbiAgcmVhZG9ubHkgdHlwZTogVDtcbiAgLyoqXG4gICAqIEdldCB0aGUgYnVmZmVyIGRhdGEgb2YgdGhlIHRlbnNvci5cbiAgICpcbiAgICogSWYgdGhlIGRhdGEgaXMgbm90IG9uIENQVSAoZWcuIGl0J3MgaW4gdGhlIGZvcm0gb2YgV2ViR0wgdGV4dHVyZSBvciBXZWJHUFUgYnVmZmVyKSwgdGhyb3cgZXJyb3IuXG4gICAqL1xuICByZWFkb25seSBkYXRhOiBUZW5zb3IuRGF0YVR5cGVNYXBbVF07XG4gIC8qKlxuICAgKiBHZXQgdGhlIGxvY2F0aW9uIG9mIHRoZSBkYXRhLlxuICAgKi9cbiAgcmVhZG9ubHkgbG9jYXRpb246IFRlbnNvci5EYXRhTG9jYXRpb247XG4gIC8qKlxuICAgKiBHZXQgdGhlIFdlYkdMIHRleHR1cmUgdGhhdCBob2xkcyB0aGUgdGVuc29yIGRhdGEuXG4gICAqXG4gICAqIElmIHRoZSBkYXRhIGlzIG5vdCBvbiBHUFUgYXMgV2ViR0wgdGV4dHVyZSwgdGhyb3cgZXJyb3IuXG4gICAqL1xuICByZWFkb25seSB0ZXh0dXJlOiBUZW5zb3IuVGV4dHVyZVR5cGU7XG4gIC8qKlxuICAgKiBHZXQgdGhlIFdlYkdQVSBidWZmZXIgdGhhdCBob2xkcyB0aGUgdGVuc29yIGRhdGEuXG4gICAqXG4gICAqIElmIHRoZSBkYXRhIGlzIG5vdCBvbiBHUFUgYXMgV2ViR1BVIGJ1ZmZlciwgdGhyb3cgZXJyb3IuXG4gICAqL1xuICByZWFkb25seSBncHVCdWZmZXI6IFRlbnNvci5HcHVCdWZmZXJUeXBlO1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGJ1ZmZlciBkYXRhIG9mIHRoZSB0ZW5zb3IuXG4gICAqXG4gICAqIElmIHRoZSBkYXRhIGlzIG9uIENQVSwgcmV0dXJucyB0aGUgZGF0YSBpbW1lZGlhdGVseS5cbiAgICogSWYgdGhlIGRhdGEgaXMgb24gR1BVLCBkb3dubG9hZHMgdGhlIGRhdGEgYW5kIHJldHVybnMgdGhlIHByb21pc2UuXG4gICAqXG4gICAqIEBwYXJhbSByZWxlYXNlRGF0YSAtIHdoZXRoZXIgcmVsZWFzZSB0aGUgZGF0YSBvbiBHUFUuIElnbm9yZSBpZiBkYXRhIGlzIGFscmVhZHkgb24gQ1BVLlxuICAgKi9cbiAgZ2V0RGF0YShyZWxlYXNlRGF0YT86IGJvb2xlYW4pOiBQcm9taXNlPFRlbnNvci5EYXRhVHlwZU1hcFtUXT47XG5cbiAgLyoqXG4gICAqIERpc3Bvc2UgdGhlIHRlbnNvciBkYXRhLlxuICAgKlxuICAgKiBJZiB0aGUgZGF0YSBpcyBvbiBDUFUsIHJlbW92ZSBpdHMgaW50ZXJuYWwgcmVmZXJlbmNlIHRvIHRoZSB1bmRlcmx5aW5nIGRhdGEuXG4gICAqIElmIHRoZSBkYXRhIGlzIG9uIEdQVSwgcmVsZWFzZSB0aGUgZGF0YSBvbiBHUFUuXG4gICAqXG4gICAqIEFmdGVyIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiwgdGhlIHRlbnNvciBpcyBjb25zaWRlcmVkIG5vIGxvbmdlciB2YWxpZC4gSXRzIGxvY2F0aW9uIHdpbGwgYmUgc2V0IHRvICdub25lJy5cbiAgICovXG4gIGRpc3Bvc2UoKTogdm9pZDtcbn1cblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIFRlbnNvciB7XG4gIGludGVyZmFjZSBEYXRhVHlwZU1hcCB7XG4gICAgZmxvYXQzMjogRmxvYXQzMkFycmF5O1xuICAgIHVpbnQ4OiBVaW50OEFycmF5O1xuICAgIGludDg6IEludDhBcnJheTtcbiAgICB1aW50MTY6IFVpbnQxNkFycmF5O1xuICAgIGludDE2OiBJbnQxNkFycmF5O1xuICAgIGludDMyOiBJbnQzMkFycmF5O1xuICAgIGludDY0OiBCaWdJbnQ2NEFycmF5O1xuICAgIHN0cmluZzogc3RyaW5nW107XG4gICAgYm9vbDogVWludDhBcnJheTtcbiAgICBmbG9hdDE2OiBVaW50MTZBcnJheTsgIC8vIEtlZXAgdXNpbmcgVWludDE2QXJyYXkgdW50aWwgd2UgaGF2ZSBhIGNvbmNyZXRlIHNvbHV0aW9uIGZvciBmbG9hdCAxNi5cbiAgICBmbG9hdDY0OiBGbG9hdDY0QXJyYXk7XG4gICAgdWludDMyOiBVaW50MzJBcnJheTtcbiAgICB1aW50NjQ6IEJpZ1VpbnQ2NEFycmF5O1xuICAgIC8vIGNvbXBsZXg2NDogbmV2ZXI7XG4gICAgLy8gY29tcGxleDEyODogbmV2ZXI7XG4gICAgLy8gYmZsb2F0MTY6IG5ldmVyO1xuICB9XG5cbiAgaW50ZXJmYWNlIEVsZW1lbnRUeXBlTWFwIHtcbiAgICBmbG9hdDMyOiBudW1iZXI7XG4gICAgdWludDg6IG51bWJlcjtcbiAgICBpbnQ4OiBudW1iZXI7XG4gICAgdWludDE2OiBudW1iZXI7XG4gICAgaW50MTY6IG51bWJlcjtcbiAgICBpbnQzMjogbnVtYmVyO1xuICAgIGludDY0OiBiaWdpbnQ7XG4gICAgc3RyaW5nOiBzdHJpbmc7XG4gICAgYm9vbDogYm9vbGVhbjtcbiAgICBmbG9hdDE2OiBudW1iZXI7ICAvLyBLZWVwIHVzaW5nIFVpbnQxNkFycmF5IHVudGlsIHdlIGhhdmUgYSBjb25jcmV0ZSBzb2x1dGlvbiBmb3IgZmxvYXQgMTYuXG4gICAgZmxvYXQ2NDogbnVtYmVyO1xuICAgIHVpbnQzMjogbnVtYmVyO1xuICAgIHVpbnQ2NDogYmlnaW50O1xuICAgIC8vIGNvbXBsZXg2NDogbmV2ZXI7XG4gICAgLy8gY29tcGxleDEyODogbmV2ZXI7XG4gICAgLy8gYmZsb2F0MTY6IG5ldmVyO1xuICB9XG5cbiAgdHlwZSBEYXRhVHlwZSA9IERhdGFUeXBlTWFwW1R5cGVdO1xuICB0eXBlIEVsZW1lbnRUeXBlID0gRWxlbWVudFR5cGVNYXBbVHlwZV07XG5cbiAgLyoqXG4gICAqIHN1cHBvcnRlZCBkYXRhIHR5cGVzIGZvciBjb25zdHJ1Y3RpbmcgYSB0ZW5zb3IgZnJvbSBhIHBpbm5lZCBDUFUgYnVmZmVyXG4gICAqL1xuICBleHBvcnQgdHlwZSBDcHVQaW5uZWREYXRhVHlwZXMgPSBFeGNsdWRlPFRlbnNvci5UeXBlLCAnc3RyaW5nJz47XG5cbiAgLyoqXG4gICAqIHR5cGUgYWxpYXMgZm9yIFdlYkdMIHRleHR1cmVcbiAgICovXG4gIGV4cG9ydCB0eXBlIFRleHR1cmVUeXBlID0gV2ViR0xUZXh0dXJlO1xuXG4gIC8qKlxuICAgKiBzdXBwb3J0ZWQgZGF0YSB0eXBlcyBmb3IgY29uc3RydWN0aW5nIGEgdGVuc29yIGZyb20gYSBXZWJHTCB0ZXh0dXJlXG4gICAqL1xuICBleHBvcnQgdHlwZSBUZXh0dXJlRGF0YVR5cGVzID0gJ2Zsb2F0MzInO1xuXG4gIC8qKlxuICAgKiB0eXBlIGFsaWFzIGZvciBXZWJHUFUgYnVmZmVyXG4gICAqXG4gICAqIFRoZSByZWFzb24gd2h5IHdlIGRvbid0IHVzZSB0eXBlIFwiR1BVQnVmZmVyXCIgZGVmaW5lZCBpbiB3ZWJncHUuZC50cyBmcm9tIEB3ZWJncHUvdHlwZXMgaXMgYmVjYXVzZSBcIkB3ZWJncHUvdHlwZXNcIlxuICAgKiByZXF1aXJlcyBcIkB0eXBlcy9kb20td2ViY29kZWNzXCIgYXMgcGVlciBkZXBlbmRlbmN5IHdoZW4gdXNpbmcgVHlwZVNjcmlwdCA8IHY1LjEgYW5kIGl0cyB2ZXJzaW9uIG5lZWQgdG8gYmUgY2hvc2VuXG4gICAqIGNhcmVmdWxseSBhY2NvcmRpbmcgdG8gdGhlIFR5cGVTY3JpcHQgdmVyc2lvbiBiZWluZyB1c2VkLiBUaGlzIG1lYW5zIHNvIGZhciB0aGVyZSBpcyBub3QgYSB3YXkgdG8ga2VlcCBldmVyeVxuICAgKiBUeXBlU2NyaXB0IHZlcnNpb24gaGFwcHkuIEl0IHR1cm5zIG91dCB0aGF0IHdlIHdpbGwgZWFzaWx5IGJyb2tlIHVzZXJzIG9uIHNvbWUgVHlwZVNjcmlwdCB2ZXJzaW9uLlxuICAgKlxuICAgKiBmb3IgbW9yZSBpbmZvIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZ3B1d2ViL3R5cGVzL2lzc3Vlcy8xMjdcbiAgICovXG4gIGV4cG9ydCB0eXBlIEdwdUJ1ZmZlclR5cGUgPSB7c2l6ZTogbnVtYmVyOyBtYXBTdGF0ZTogJ3VubWFwcGVkJyB8ICdwZW5kaW5nJyB8ICdtYXBwZWQnfTtcblxuICAvKipcbiAgICogc3VwcG9ydGVkIGRhdGEgdHlwZXMgZm9yIGNvbnN0cnVjdGluZyBhIHRlbnNvciBmcm9tIGEgV2ViR1BVIGJ1ZmZlclxuICAgKi9cbiAgZXhwb3J0IHR5cGUgR3B1QnVmZmVyRGF0YVR5cGVzID0gJ2Zsb2F0MzInfCdmbG9hdDE2J3wnaW50MzInfCdpbnQ2NCd8J3VpbnQzMid8J2Jvb2wnO1xuXG4gIC8qKlxuICAgKiByZXByZXNlbnQgd2hlcmUgdGhlIHRlbnNvciBkYXRhIGlzIHN0b3JlZFxuICAgKi9cbiAgZXhwb3J0IHR5cGUgRGF0YUxvY2F0aW9uID0gJ25vbmUnfCdjcHUnfCdjcHUtcGlubmVkJ3wndGV4dHVyZSd8J2dwdS1idWZmZXInO1xuXG4gIC8qKlxuICAgKiByZXByZXNlbnQgdGhlIGRhdGEgdHlwZSBvZiBhIHRlbnNvclxuICAgKi9cbiAgZXhwb3J0IHR5cGUgVHlwZSA9IGtleW9mIERhdGFUeXBlTWFwO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudCBtdWx0aS1kaW1lbnNpb25hbCBhcnJheXMgdG8gZmVlZCB0byBvciBmZXRjaCBmcm9tIG1vZGVsIGluZmVyZW5jaW5nLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFR5cGVkVGVuc29yPFQgZXh0ZW5kcyBUZW5zb3IuVHlwZT4gZXh0ZW5kcyBUeXBlZFRlbnNvckJhc2U8VD4sIFR5cGVkVGVuc29yVXRpbHM8VD4ge31cbi8qKlxuICogUmVwcmVzZW50IG11bHRpLWRpbWVuc2lvbmFsIGFycmF5cyB0byBmZWVkIHRvIG9yIGZldGNoIGZyb20gbW9kZWwgaW5mZXJlbmNpbmcuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGVuc29yIGV4dGVuZHMgVHlwZWRUZW5zb3JCYXNlPFRlbnNvci5UeXBlPiwgVHlwZWRUZW5zb3JVdGlsczxUZW5zb3IuVHlwZT4ge31cblxuLyoqXG4gKiB0eXBlIFRlbnNvckNvbnN0cnVjdG9yIGRlZmluZXMgdGhlIGNvbnN0cnVjdG9ycyBvZiAnVGVuc29yJyB0byBjcmVhdGUgQ1BVIHRlbnNvciBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGVuc29yQ29uc3RydWN0b3Ige1xuICAvLyAjcmVnaW9uIENQVSB0ZW5zb3IgLSBzcGVjaWZ5IGVsZW1lbnQgdHlwZVxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHN0cmluZyB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIHR5cGUsIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSB0eXBlIC0gU3BlY2lmeSB0aGUgZWxlbWVudCB0eXBlLlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcodHlwZTogJ3N0cmluZycsIGRhdGE6IFRlbnNvci5EYXRhVHlwZU1hcFsnc3RyaW5nJ118cmVhZG9ubHkgc3RyaW5nW10sXG4gICAgICBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnc3RyaW5nJz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBib29sIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gdHlwZSwgZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIHR5cGUgLSBTcGVjaWZ5IHRoZSBlbGVtZW50IHR5cGUuXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyh0eXBlOiAnYm9vbCcsIGRhdGE6IFRlbnNvci5EYXRhVHlwZU1hcFsnYm9vbCddfHJlYWRvbmx5IGJvb2xlYW5bXSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J2Jvb2wnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IDY0LWJpdCBpbnRlZ2VyIHR5cGVkIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gdHlwZSwgZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIHR5cGUgLSBTcGVjaWZ5IHRoZSBlbGVtZW50IHR5cGUuXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldzxUIGV4dGVuZHMgJ3VpbnQ2NCd8J2ludDY0Jz4oXG4gICAgICB0eXBlOiBULCBkYXRhOiBUZW5zb3IuRGF0YVR5cGVNYXBbVF18cmVhZG9ubHkgYmlnaW50W118cmVhZG9ubHkgbnVtYmVyW10sXG4gICAgICBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjxUPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IG51bWVyaWMgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiB0eXBlLCBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gdHlwZSAtIFNwZWNpZnkgdGhlIGVsZW1lbnQgdHlwZS5cbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3PFQgZXh0ZW5kcyBFeGNsdWRlPFRlbnNvci5UeXBlLCAnc3RyaW5nJ3wnYm9vbCd8J3VpbnQ2NCd8J2ludDY0Jz4+KFxuICAgICAgdHlwZTogVCwgZGF0YTogVGVuc29yLkRhdGFUeXBlTWFwW1RdfHJlYWRvbmx5IG51bWJlcltdLCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjxUPjtcbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gQ1BVIHRlbnNvciAtIGluZmVyIGVsZW1lbnQgdHlwZXNcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IGZsb2F0MzIgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogRmxvYXQzMkFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnZmxvYXQzMic+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgaW50OCB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBJbnQ4QXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdpbnQ4Jz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB1aW50OCB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBVaW50OEFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwndWludDgnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHVpbnQxNiB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBVaW50MTZBcnJheSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J3VpbnQxNic+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgaW50MTYgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogSW50MTZBcnJheSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J2ludDE2Jz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBpbnQzMiB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBJbnQzMkFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnaW50MzInPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IGludDY0IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IEJpZ0ludDY0QXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdpbnQ2NCc+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgc3RyaW5nIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IHJlYWRvbmx5IHN0cmluZ1tdLCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnc3RyaW5nJz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBib29sIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IHJlYWRvbmx5IGJvb2xlYW5bXSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J2Jvb2wnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IGZsb2F0NjQgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogRmxvYXQ2NEFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnZmxvYXQ2NCc+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgdWludDMyIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IFVpbnQzMkFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwndWludDMyJz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB1aW50NjQgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogQmlnVWludDY0QXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCd1aW50NjQnPjtcblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBDUFUgdGVuc29yIC0gZmFsbCBiYWNrIHRvIG5vbi1nZW5lcmljIHRlbnNvciB0eXBlIGRlY2xhcmF0aW9uXG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIHR5cGUsIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSB0eXBlIC0gU3BlY2lmeSB0aGUgZWxlbWVudCB0eXBlLlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcodHlwZTogVGVuc29yLlR5cGUsIGRhdGE6IFRlbnNvci5EYXRhVHlwZXxyZWFkb25seSBudW1iZXJbXXxyZWFkb25seSBzdHJpbmdbXXxyZWFkb25seSBiaWdpbnRbXXxyZWFkb25seSBib29sZWFuW10sXG4gICAgICBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUZW5zb3I7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBUZW5zb3IuRGF0YVR5cGUsIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFRlbnNvcjtcbiAgLy8gI2VuZHJlZ2lvblxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgY29uc3QgVGVuc29yID0gVGVuc29ySW1wbCBhcyAoVGVuc29yQ29uc3RydWN0b3IgJiBUZW5zb3JGYWN0b3J5KTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtlbnZ9IGZyb20gJy4vZW52LWltcGwuanMnO1xuXG5leHBvcnQgY29uc3QgVFJBQ0UgPSAoZGV2aWNlVHlwZTogc3RyaW5nLCBsYWJlbDogc3RyaW5nKSA9PiB7XG4gIGlmICghZW52Lndhc20udHJhY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgY29uc29sZS50aW1lU3RhbXAoYCR7ZGV2aWNlVHlwZX06Ok9SVDo6JHtsYWJlbH1gKTtcbn07XG5cbmNvbnN0IFRSQUNFX0ZVTkMgPSAobXNnOiBzdHJpbmcsIGV4dHJhTXNnPzogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IHN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s/LnNwbGl0KC9cXHJcXG58XFxyfFxcbi9nKSB8fCBbXTtcbiAgbGV0IGhhc1RyYWNlRnVuYyA9IGZhbHNlO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGhhc1RyYWNlRnVuYyAmJiAhc3RhY2tbaV0uaW5jbHVkZXMoJ1RSQUNFX0ZVTkMnKSkge1xuICAgICAgbGV0IGxhYmVsID0gYEZVTkNfJHttc2d9Ojoke3N0YWNrW2ldLnRyaW0oKS5zcGxpdCgnICcpWzFdfWA7XG4gICAgICBpZiAoZXh0cmFNc2cpIHtcbiAgICAgICAgbGFiZWwgKz0gYDo6JHtleHRyYU1zZ31gO1xuICAgICAgfVxuICAgICAgVFJBQ0UoJ0NQVScsIGxhYmVsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN0YWNrW2ldLmluY2x1ZGVzKCdUUkFDRV9GVU5DJykpIHtcbiAgICAgIGhhc1RyYWNlRnVuYyA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgVFJBQ0VfRlVOQ19CRUdJTiA9IChleHRyYU1zZz86IHN0cmluZykgPT4ge1xuICBpZiAoIWVudi53YXNtLnRyYWNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIFRSQUNFX0ZVTkMoJ0JFR0lOJywgZXh0cmFNc2cpO1xufTtcblxuZXhwb3J0IGNvbnN0IFRSQUNFX0ZVTkNfRU5EID0gKGV4dHJhTXNnPzogc3RyaW5nKSA9PiB7XG4gIGlmICghZW52Lndhc20udHJhY2UpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgVFJBQ0VfRlVOQygnRU5EJywgZXh0cmFNc2cpO1xufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtyZXNvbHZlQmFja2VuZH0gZnJvbSAnLi9iYWNrZW5kLWltcGwuanMnO1xuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcn0gZnJvbSAnLi9iYWNrZW5kLmpzJztcbmltcG9ydCB7SW5mZXJlbmNlU2Vzc2lvbiBhcyBJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlfSBmcm9tICcuL2luZmVyZW5jZS1zZXNzaW9uLmpzJztcbmltcG9ydCB7T25ueFZhbHVlfSBmcm9tICcuL29ubngtdmFsdWUuanMnO1xuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4vdGVuc29yLmpzJztcbmltcG9ydCB7VFJBQ0VfRlVOQ19CRUdJTiwgVFJBQ0VfRlVOQ19FTkR9IGZyb20gJy4vdHJhY2UuanMnO1xuXG50eXBlIFNlc3Npb25PcHRpb25zID0gSW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZS5TZXNzaW9uT3B0aW9ucztcbnR5cGUgUnVuT3B0aW9ucyA9IEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2UuUnVuT3B0aW9ucztcbnR5cGUgRmVlZHNUeXBlID0gSW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZS5GZWVkc1R5cGU7XG50eXBlIEZldGNoZXNUeXBlID0gSW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZS5GZXRjaGVzVHlwZTtcbnR5cGUgUmV0dXJuVHlwZSA9IEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2UuUmV0dXJuVHlwZTtcblxuZXhwb3J0IGNsYXNzIEluZmVyZW5jZVNlc3Npb24gaW1wbGVtZW50cyBJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlIHtcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihoYW5kbGVyOiBJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcikge1xuICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG4gIH1cbiAgcnVuKGZlZWRzOiBGZWVkc1R5cGUsIG9wdGlvbnM/OiBSdW5PcHRpb25zKTogUHJvbWlzZTxSZXR1cm5UeXBlPjtcbiAgcnVuKGZlZWRzOiBGZWVkc1R5cGUsIGZldGNoZXM6IEZldGNoZXNUeXBlLCBvcHRpb25zPzogUnVuT3B0aW9ucyk6IFByb21pc2U8UmV0dXJuVHlwZT47XG4gIGFzeW5jIHJ1bihmZWVkczogRmVlZHNUeXBlLCBhcmcxPzogRmV0Y2hlc1R5cGV8UnVuT3B0aW9ucywgYXJnMj86IFJ1bk9wdGlvbnMpOiBQcm9taXNlPFJldHVyblR5cGU+IHtcbiAgICBUUkFDRV9GVU5DX0JFR0lOKCk7XG4gICAgY29uc3QgZmV0Y2hlczoge1tuYW1lOiBzdHJpbmddOiBPbm54VmFsdWV8bnVsbH0gPSB7fTtcbiAgICBsZXQgb3B0aW9uczogUnVuT3B0aW9ucyA9IHt9O1xuICAgIC8vIGNoZWNrIGlucHV0c1xuICAgIGlmICh0eXBlb2YgZmVlZHMgIT09ICdvYmplY3QnIHx8IGZlZWRzID09PSBudWxsIHx8IGZlZWRzIGluc3RhbmNlb2YgVGVuc29yIHx8IEFycmF5LmlzQXJyYXkoZmVlZHMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdcXCdmZWVkc1xcJyBtdXN0IGJlIGFuIG9iamVjdCB0aGF0IHVzZSBpbnB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgYXMgY29ycmVzcG9uZGluZyB2YWx1ZXMuJyk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmV0Y2hlc0VtcHR5ID0gdHJ1ZTtcbiAgICAvLyBkZXRlcm1pbmUgd2hpY2ggb3ZlcnJpZGUgaXMgYmVpbmcgdXNlZFxuICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChhcmcxID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuZXhwZWN0ZWQgYXJndW1lbnRbMV06IGNhbm5vdCBiZSBudWxsLicpO1xuICAgICAgfVxuICAgICAgaWYgKGFyZzEgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBjYW5ub3QgYmUgYSBUZW5zb3InKTtcbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnMSkpIHtcbiAgICAgICAgaWYgKGFyZzEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBjYW5ub3QgYmUgYW4gZW1wdHkgYXJyYXkuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaXNGZXRjaGVzRW1wdHkgPSBmYWxzZTtcbiAgICAgICAgLy8gb3V0cHV0IG5hbWVzXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBhcmcxKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBtdXN0IGJlIGEgc3RyaW5nIGFycmF5IG9yIGFuIG9iamVjdC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMub3V0cHV0TmFtZXMuaW5kZXhPZihuYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGAnZmV0Y2hlcycgY29udGFpbnMgaW52YWxpZCBvdXRwdXQgbmFtZTogJHtuYW1lfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmV0Y2hlc1tuYW1lXSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGFyZzIgPT09ICdvYmplY3QnICYmIGFyZzIgIT09IG51bGwpIHtcbiAgICAgICAgICBvcHRpb25zID0gYXJnMjtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdvcHRpb25zXFwnIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWNpZGUgd2hldGhlciBhcmcxIGlzIGZldGNoZXMgb3Igb3B0aW9uc1xuICAgICAgICAvLyBpZiBhbnkgb3V0cHV0IG5hbWUgaXMgcHJlc2VudCBhbmQgaXRzIHZhbHVlIGlzIHZhbGlkIE9ubnhWYWx1ZSwgd2UgY29uc2lkZXIgaXQgZmV0Y2hlc1xuICAgICAgICBsZXQgaXNGZXRjaGVzID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGFyZzFLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJnMSk7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiB0aGlzLm91dHB1dE5hbWVzKSB7XG4gICAgICAgICAgaWYgKGFyZzFLZXlzLmluZGV4T2YobmFtZSkgIT09IC0xKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gKGFyZzEgYXMgSW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZS5OdWxsYWJsZU9ubnhWYWx1ZU1hcFR5cGUpW25hbWVdO1xuICAgICAgICAgICAgaWYgKHYgPT09IG51bGwgfHwgdiBpbnN0YW5jZW9mIFRlbnNvcikge1xuICAgICAgICAgICAgICBpc0ZldGNoZXMgPSB0cnVlO1xuICAgICAgICAgICAgICBpc0ZldGNoZXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICBmZXRjaGVzW25hbWVdID0gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGZXRjaGVzKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmcyID09PSAnb2JqZWN0JyAmJiBhcmcyICE9PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gYXJnMjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnb3B0aW9uc1xcJyBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9ucyA9IGFyZzEgYXMgUnVuT3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmV4cGVjdGVkIGFyZ3VtZW50WzFdOiBtdXN0IGJlIFxcJ2ZldGNoZXNcXCcgb3IgXFwnb3B0aW9uc1xcJy4nKTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBpZiBhbGwgaW5wdXRzIGFyZSBpbiBmZWVkXG4gICAgZm9yIChjb25zdCBuYW1lIG9mIHRoaXMuaW5wdXROYW1lcykge1xuICAgICAgaWYgKHR5cGVvZiBmZWVkc1tuYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnB1dCAnJHtuYW1lfScgaXMgbWlzc2luZyBpbiAnZmVlZHMnLmApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlmIG5vIGZldGNoZXMgaXMgc3BlY2lmaWVkLCB3ZSB1c2UgdGhlIGZ1bGwgb3V0cHV0IG5hbWVzIGxpc3RcbiAgICBpZiAoaXNGZXRjaGVzRW1wdHkpIHtcbiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiB0aGlzLm91dHB1dE5hbWVzKSB7XG4gICAgICAgIGZldGNoZXNbbmFtZV0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGZlZWRzLCBmZXRjaGVzIGFuZCBvcHRpb25zIGFyZSBwcmVwYXJlZFxuXG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHRoaXMuaGFuZGxlci5ydW4oZmVlZHMsIGZldGNoZXMsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHJldHVyblZhbHVlOiB7W25hbWU6IHN0cmluZ106IE9ubnhWYWx1ZX0gPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiByZXN1bHRzKSB7XG4gICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocmVzdWx0cywga2V5KSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSByZXN1bHRzW2tleV07XG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICAgICAgICByZXR1cm5WYWx1ZVtrZXldID0gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVyblZhbHVlW2tleV0gPSBuZXcgVGVuc29yKHJlc3VsdC50eXBlLCByZXN1bHQuZGF0YSwgcmVzdWx0LmRpbXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIFRSQUNFX0ZVTkNfRU5EKCk7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9XG5cbiAgYXN5bmMgcmVsZWFzZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUocGF0aDogc3RyaW5nLCBvcHRpb25zPzogU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2U+O1xuICBzdGF0aWMgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXJMaWtlLCBvcHRpb25zPzogU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2U+O1xuICBzdGF0aWMgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXJMaWtlLCBieXRlT2Zmc2V0OiBudW1iZXIsIGJ5dGVMZW5ndGg/OiBudW1iZXIsIG9wdGlvbnM/OiBTZXNzaW9uT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2U+O1xuICBzdGF0aWMgY3JlYXRlKGJ1ZmZlcjogVWludDhBcnJheSwgb3B0aW9ucz86IFNlc3Npb25PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlPjtcbiAgc3RhdGljIGFzeW5jIGNyZWF0ZShcbiAgICAgIGFyZzA6IHN0cmluZ3xBcnJheUJ1ZmZlckxpa2V8VWludDhBcnJheSwgYXJnMT86IFNlc3Npb25PcHRpb25zfG51bWJlciwgYXJnMj86IG51bWJlcixcbiAgICAgIGFyZzM/OiBTZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZT4ge1xuICAgIFRSQUNFX0ZVTkNfQkVHSU4oKTtcbiAgICAvLyBlaXRoZXIgbG9hZCBmcm9tIGEgZmlsZSBvciBidWZmZXJcbiAgICBsZXQgZmlsZVBhdGhPclVpbnQ4QXJyYXk6IHN0cmluZ3xVaW50OEFycmF5O1xuICAgIGxldCBvcHRpb25zOiBTZXNzaW9uT3B0aW9ucyA9IHt9O1xuXG4gICAgaWYgKHR5cGVvZiBhcmcwID09PSAnc3RyaW5nJykge1xuICAgICAgZmlsZVBhdGhPclVpbnQ4QXJyYXkgPSBhcmcwO1xuICAgICAgaWYgKHR5cGVvZiBhcmcxID09PSAnb2JqZWN0JyAmJiBhcmcxICE9PSBudWxsKSB7XG4gICAgICAgIG9wdGlvbnMgPSBhcmcxO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnb3B0aW9uc1xcJyBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFyZzAgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICBmaWxlUGF0aE9yVWludDhBcnJheSA9IGFyZzA7XG4gICAgICBpZiAodHlwZW9mIGFyZzEgPT09ICdvYmplY3QnICYmIGFyZzEgIT09IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucyA9IGFyZzE7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcxICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdvcHRpb25zXFwnIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGFyZzAgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fFxuICAgICAgICAodHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiBhcmcwIGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXIpKSB7XG4gICAgICBjb25zdCBidWZmZXIgPSBhcmcwO1xuICAgICAgbGV0IGJ5dGVPZmZzZXQgPSAwO1xuICAgICAgbGV0IGJ5dGVMZW5ndGggPSBhcmcwLmJ5dGVMZW5ndGg7XG4gICAgICBpZiAodHlwZW9mIGFyZzEgPT09ICdvYmplY3QnICYmIGFyZzEgIT09IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucyA9IGFyZzE7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcxID09PSAnbnVtYmVyJykge1xuICAgICAgICBieXRlT2Zmc2V0ID0gYXJnMTtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNTYWZlSW50ZWdlcihieXRlT2Zmc2V0KSkge1xuICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdieXRlT2Zmc2V0XFwnIG11c3QgYmUgYW4gaW50ZWdlci4nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYnl0ZU9mZnNldCA+PSBidWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGAnYnl0ZU9mZnNldCcgaXMgb3V0IG9mIHJhbmdlIFswLCAke2J1ZmZlci5ieXRlTGVuZ3RofSkuYCk7XG4gICAgICAgIH1cbiAgICAgICAgYnl0ZUxlbmd0aCA9IGFyZzAuYnl0ZUxlbmd0aCAtIGJ5dGVPZmZzZXQ7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnMiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBieXRlTGVuZ3RoID0gYXJnMjtcbiAgICAgICAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKGJ5dGVMZW5ndGgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnYnl0ZUxlbmd0aFxcJyBtdXN0IGJlIGFuIGludGVnZXIuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDw9IDAgfHwgYnl0ZU9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYCdieXRlTGVuZ3RoJyBpcyBvdXQgb2YgcmFuZ2UgKDAsICR7YnVmZmVyLmJ5dGVMZW5ndGggLSBieXRlT2Zmc2V0fV0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgYXJnMyA9PT0gJ29iamVjdCcgJiYgYXJnMyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IGFyZzM7XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ29wdGlvbnNcXCcgbXVzdCBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ2J5dGVMZW5ndGhcXCcgbXVzdCBiZSBhIG51bWJlci4nKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnb3B0aW9uc1xcJyBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgIH1cbiAgICAgIGZpbGVQYXRoT3JVaW50OEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5leHBlY3RlZCBhcmd1bWVudFswXTogbXVzdCBiZSBcXCdwYXRoXFwnIG9yIFxcJ2J1ZmZlclxcJy4nKTtcbiAgICB9XG5cbiAgICAvLyBnZXQgYmFja2VuZCBoaW50c1xuICAgIGNvbnN0IGVwcyA9IG9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzIHx8IFtdO1xuICAgIGNvbnN0IGJhY2tlbmRIaW50cyA9IGVwcy5tYXAoaSA9PiB0eXBlb2YgaSA9PT0gJ3N0cmluZycgPyBpIDogaS5uYW1lKTtcbiAgICBjb25zdCBiYWNrZW5kID0gYXdhaXQgcmVzb2x2ZUJhY2tlbmQoYmFja2VuZEhpbnRzKTtcbiAgICBjb25zdCBoYW5kbGVyID0gYXdhaXQgYmFja2VuZC5jcmVhdGVJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcihmaWxlUGF0aE9yVWludDhBcnJheSwgb3B0aW9ucyk7XG4gICAgVFJBQ0VfRlVOQ19FTkQoKTtcbiAgICByZXR1cm4gbmV3IEluZmVyZW5jZVNlc3Npb24oaGFuZGxlcik7XG4gIH1cblxuICBzdGFydFByb2ZpbGluZygpOiB2b2lkIHtcbiAgICB0aGlzLmhhbmRsZXIuc3RhcnRQcm9maWxpbmcoKTtcbiAgfVxuICBlbmRQcm9maWxpbmcoKTogdm9pZCB7XG4gICAgdGhpcy5oYW5kbGVyLmVuZFByb2ZpbGluZygpO1xuICB9XG5cbiAgZ2V0IGlucHV0TmFtZXMoKTogcmVhZG9ubHkgc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXIuaW5wdXROYW1lcztcbiAgfVxuICBnZXQgb3V0cHV0TmFtZXMoKTogcmVhZG9ubHkgc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXIub3V0cHV0TmFtZXM7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZXI6IEluZmVyZW5jZVNlc3Npb25IYW5kbGVyO1xufVxuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb24gYXMgSW5mZXJlbmNlU2Vzc2lvbkltcGx9IGZyb20gJy4vaW5mZXJlbmNlLXNlc3Npb24taW1wbC5qcyc7XG5pbXBvcnQge09ubnhWYWx1ZSwgT25ueFZhbHVlRGF0YUxvY2F0aW9ufSBmcm9tICcuL29ubngtdmFsdWUuanMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlICovXG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBJbmZlcmVuY2VTZXNzaW9uIHtcbiAgLy8gI3JlZ2lvbiBpbnB1dC9vdXRwdXQgdHlwZXNcblxuICB0eXBlIE9ubnhWYWx1ZU1hcFR5cGUgPSB7cmVhZG9ubHkgW25hbWU6IHN0cmluZ106IE9ubnhWYWx1ZX07XG4gIHR5cGUgTnVsbGFibGVPbm54VmFsdWVNYXBUeXBlID0ge3JlYWRvbmx5IFtuYW1lOiBzdHJpbmddOiBPbm54VmFsdWUgfCBudWxsfTtcblxuICAvKipcbiAgICogQSBmZWVkcyAobW9kZWwgaW5wdXRzKSBpcyBhbiBvYmplY3QgdGhhdCB1c2VzIGlucHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICovXG4gIHR5cGUgRmVlZHNUeXBlID0gT25ueFZhbHVlTWFwVHlwZTtcblxuICAvKipcbiAgICogQSBmZXRjaGVzIChtb2RlbCBvdXRwdXRzKSBjb3VsZCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAgICpcbiAgICogLSBPbWl0dGVkLiBVc2UgbW9kZWwncyBvdXRwdXQgbmFtZXMgZGVmaW5pdGlvbi5cbiAgICogLSBBbiBhcnJheSBvZiBzdHJpbmcgaW5kaWNhdGluZyB0aGUgb3V0cHV0IG5hbWVzLlxuICAgKiAtIEFuIG9iamVjdCB0aGF0IHVzZSBvdXRwdXQgbmFtZXMgYXMga2V5cyBhbmQgT25ueFZhbHVlIG9yIG51bGwgYXMgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAqXG4gICAqIEByZW1hcmtcbiAgICogZGlmZmVyZW50IGZyb20gaW5wdXQgYXJndW1lbnQsIGluIG91dHB1dCwgT25ueFZhbHVlIGlzIG9wdGlvbmFsLiBJZiBhbiBPbm54VmFsdWUgaXMgcHJlc2VudCBpdCB3aWxsIGJlXG4gICAqIHVzZWQgYXMgYSBwcmUtYWxsb2NhdGVkIHZhbHVlIGJ5IHRoZSBpbmZlcmVuY2UgZW5naW5lOyBpZiBvbWl0dGVkLCBpbmZlcmVuY2UgZW5naW5lIHdpbGwgYWxsb2NhdGUgYnVmZmVyXG4gICAqIGludGVybmFsbHkuXG4gICAqL1xuICB0eXBlIEZldGNoZXNUeXBlID0gcmVhZG9ubHkgc3RyaW5nW118TnVsbGFibGVPbm54VmFsdWVNYXBUeXBlO1xuXG4gIC8qKlxuICAgKiBBIGluZmVyZW5jaW5nIHJldHVybiB0eXBlIGlzIGFuIG9iamVjdCB0aGF0IHVzZXMgb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICovXG4gIHR5cGUgUmV0dXJuVHlwZSA9IE9ubnhWYWx1ZU1hcFR5cGU7XG5cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gc2Vzc2lvbiBvcHRpb25zXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGNvbmZpZ3VyYXRpb25zIGZvciBzZXNzaW9uIGJlaGF2aW9yLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uT3B0aW9ucyB7XG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgZXhlY3V0aW9uIHByb3ZpZGVyIG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBBbiBleGVjdXRpb24gcHJvdmlkZXIgb3B0aW9uIGNhbiBiZSBhIHN0cmluZyBpbmRpY2F0aW5nIHRoZSBuYW1lIG9mIHRoZSBleGVjdXRpb24gcHJvdmlkZXIsXG4gICAgICogb3IgYW4gb2JqZWN0IG9mIGNvcnJlc3BvbmRpbmcgdHlwZS5cbiAgICAgKi9cbiAgICBleGVjdXRpb25Qcm92aWRlcnM/OiByZWFkb25seSBFeGVjdXRpb25Qcm92aWRlckNvbmZpZ1tdO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGludHJhIE9QIHRocmVhZHMgbnVtYmVyLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkuXG4gICAgICovXG4gICAgaW50cmFPcE51bVRocmVhZHM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW50ZXIgT1AgdGhyZWFkcyBudW1iZXIuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gT05OWFJ1bnRpbWUgKE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlKS5cbiAgICAgKi9cbiAgICBpbnRlck9wTnVtVGhyZWFkcz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmcmVlIGRpbWVuc2lvbiBvdmVycmlkZS5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBmcmVlRGltZW5zaW9uT3ZlcnJpZGVzPzoge3JlYWRvbmx5IFtkaW1lbnNpb25OYW1lOiBzdHJpbmddOiBudW1iZXJ9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wdGltaXphdGlvbiBsZXZlbC5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBncmFwaE9wdGltaXphdGlvbkxldmVsPzogJ2Rpc2FibGVkJ3wnYmFzaWMnfCdleHRlbmRlZCd8J2FsbCc7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGVuYWJsZSBDUFUgbWVtb3J5IGFyZW5hLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkgb3IgV2ViQXNzZW1ibHkgYmFja2VuZFxuICAgICAqL1xuICAgIGVuYWJsZUNwdU1lbUFyZW5hPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgZW5hYmxlIG1lbW9yeSBwYXR0ZXJuLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkgb3IgV2ViQXNzZW1ibHkgYmFja2VuZFxuICAgICAqL1xuICAgIGVuYWJsZU1lbVBhdHRlcm4/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogRXhlY3V0aW9uIG1vZGUuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gT05OWFJ1bnRpbWUgKE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlKSBvciBXZWJBc3NlbWJseSBiYWNrZW5kXG4gICAgICovXG4gICAgZXhlY3V0aW9uTW9kZT86ICdzZXF1ZW50aWFsJ3wncGFyYWxsZWwnO1xuXG4gICAgLyoqXG4gICAgICogT3B0aW1pemVkIG1vZGVsIGZpbGUgcGF0aC5cbiAgICAgKlxuICAgICAqIElmIHRoaXMgc2V0dGluZyBpcyBzcGVjaWZpZWQsIHRoZSBvcHRpbWl6ZWQgbW9kZWwgd2lsbCBiZSBkdW1wZWQuIEluIGJyb3dzZXIsIGEgYmxvYiB3aWxsIGJlIGNyZWF0ZWRcbiAgICAgKiB3aXRoIGEgcG9wLXVwIHdpbmRvdy5cbiAgICAgKi9cbiAgICBvcHRpbWl6ZWRNb2RlbEZpbGVQYXRoPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogV2V0aGVyIGVuYWJsZSBwcm9maWxpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYSBwbGFjZWhvbGRlciBmb3IgYSBmdXR1cmUgdXNlLlxuICAgICAqL1xuICAgIGVuYWJsZVByb2ZpbGluZz86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBGaWxlIHByZWZpeCBmb3IgcHJvZmlsaW5nLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGEgcGxhY2Vob2xkZXIgZm9yIGEgZnV0dXJlIHVzZS5cbiAgICAgKi9cbiAgICBwcm9maWxlRmlsZVByZWZpeD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIExvZyBJRC5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBsb2dJZD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIExvZyBzZXZlcml0eSBsZXZlbC4gU2VlXG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9vbm54cnVudGltZS9ibG9iL21haW4vaW5jbHVkZS9vbm54cnVudGltZS9jb3JlL2NvbW1vbi9sb2dnaW5nL3NldmVyaXR5LmhcbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBsb2dTZXZlcml0eUxldmVsPzogMHwxfDJ8M3w0O1xuXG4gICAgLyoqXG4gICAgICogTG9nIHZlcmJvc2l0eSBsZXZlbC5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBXZWJBc3NlbWJseSBiYWNrZW5kLiBXaWxsIHN1cHBvcnQgTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUgbGF0ZXJcbiAgICAgKi9cbiAgICBsb2dWZXJib3NpdHlMZXZlbD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgc3RyaW5nIGFzIGEgcHJlZmVycmVkIGRhdGEgbG9jYXRpb24gZm9yIGFsbCBvdXRwdXRzLCBvciBhbiBvYmplY3QgdGhhdCB1c2Ugb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIGFcbiAgICAgKiBwcmVmZXJyZWQgZGF0YSBsb2NhdGlvbiBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSBXZWIgZm9yIFdlYkdMIGFuZCBXZWJHUFUgRVAuXG4gICAgICovXG4gICAgcHJlZmVycmVkT3V0cHV0TG9jYXRpb24/OiBPbm54VmFsdWVEYXRhTG9jYXRpb258e3JlYWRvbmx5IFtvdXRwdXROYW1lOiBzdHJpbmddOiBPbm54VmFsdWVEYXRhTG9jYXRpb259O1xuXG4gICAgLyoqXG4gICAgICogU3RvcmUgY29uZmlndXJhdGlvbnMgZm9yIGEgc2Vzc2lvbi4gU2VlXG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9vbm54cnVudGltZS9ibG9iL21haW4vaW5jbHVkZS9vbm54cnVudGltZS9jb3JlL3Nlc3Npb24vXG4gICAgICogb25ueHJ1bnRpbWVfc2Vzc2lvbl9vcHRpb25zX2NvbmZpZ19rZXlzLmhcbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBXZWJBc3NlbWJseSBiYWNrZW5kLiBXaWxsIHN1cHBvcnQgTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUgbGF0ZXJcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBganNcbiAgICAgKiBleHRyYToge1xuICAgICAqICAgc2Vzc2lvbjoge1xuICAgICAqICAgICBzZXRfZGVub3JtYWxfYXNfemVybzogXCIxXCIsXG4gICAgICogICAgIGRpc2FibGVfcHJlcGFja2luZzogXCIxXCJcbiAgICAgKiAgIH0sXG4gICAgICogICBvcHRpbWl6YXRpb246IHtcbiAgICAgKiAgICAgZW5hYmxlX2dlbHVfYXBwcm94aW1hdGlvbjogXCIxXCJcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZXh0cmE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgfVxuXG4gIC8vICNyZWdpb24gZXhlY3V0aW9uIHByb3ZpZGVyc1xuXG4gIC8vIEN1cnJlbnRseSwgd2UgaGF2ZSB0aGUgZm9sbG93aW5nIGJhY2tlbmRzIHRvIHN1cHBvcnQgZXhlY3V0aW9uIHByb3ZpZGVyczpcbiAgLy8gQmFja2VuZCBOb2RlLmpzIGJpbmRpbmc6IHN1cHBvcnRzICdjcHUnIGFuZCAnY3VkYScuXG4gIC8vIEJhY2tlbmQgV2ViQXNzZW1ibHk6IHN1cHBvcnRzICdjcHUnLCAnd2FzbScsICd4bm5wYWNrJyBhbmQgJ3dlYm5uJy5cbiAgLy8gQmFja2VuZCBPTk5YLmpzOiBzdXBwb3J0cyAnd2ViZ2wnLlxuICAvLyBCYWNrZW5kIFJlYWN0IE5hdGl2ZTogc3VwcG9ydHMgJ2NwdScsICd4bm5wYWNrJywgJ2NvcmVtbCcgKGlPUyksICdubmFwaScgKEFuZHJvaWQpLlxuICBpbnRlcmZhY2UgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb25NYXAge1xuICAgIGNwdTogQ3B1RXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgY29yZW1sOiBDb3JlTWxFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICBjdWRhOiBDdWRhRXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgZG1sOiBEbWxFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICB0ZW5zb3JydDogVGVuc29yUnRFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICB3YXNtOiBXZWJBc3NlbWJseUV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIHdlYmdsOiBXZWJHTEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIHhubnBhY2s6IFhubnBhY2tFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICB3ZWJncHU6IFdlYkdwdUV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIHdlYm5uOiBXZWJOTkV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIG5uYXBpOiBObmFwaUV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICB9XG5cbiAgdHlwZSBFeGVjdXRpb25Qcm92aWRlck5hbWUgPSBrZXlvZiBFeGVjdXRpb25Qcm92aWRlck9wdGlvbk1hcDtcbiAgdHlwZSBFeGVjdXRpb25Qcm92aWRlckNvbmZpZyA9XG4gICAgICBFeGVjdXRpb25Qcm92aWRlck9wdGlvbk1hcFtFeGVjdXRpb25Qcm92aWRlck5hbWVdfEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9ufEV4ZWN1dGlvblByb3ZpZGVyTmFtZXxzdHJpbmc7XG5cbiAgZXhwb3J0IGludGVyZmFjZSBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgQ3B1RXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ2NwdSc7XG4gICAgdXNlQXJlbmE/OiBib29sZWFuO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgQ3VkYUV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICdjdWRhJztcbiAgICBkZXZpY2VJZD86IG51bWJlcjtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIENvcmVNbEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICdjb3JlbWwnO1xuICAgIGNvcmVNbEZsYWdzPzogbnVtYmVyO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgRG1sRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ2RtbCc7XG4gICAgZGV2aWNlSWQ/OiBudW1iZXI7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBUZW5zb3JSdEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICd0ZW5zb3JydCc7XG4gICAgZGV2aWNlSWQ/OiBudW1iZXI7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBXZWJBc3NlbWJseUV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICd3YXNtJztcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIFdlYkdMRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ3dlYmdsJztcbiAgICAvLyBUT0RPOiBhZGQgZmxhZ3NcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIFhubnBhY2tFeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAneG5ucGFjayc7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBXZWJHcHVFeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAnd2ViZ3B1JztcbiAgICBwcmVmZXJyZWRMYXlvdXQ/OiAnTkNIVyd8J05IV0MnO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgV2ViTk5FeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAnd2Vibm4nO1xuICAgIGRldmljZVR5cGU/OiAnY3B1J3wnZ3B1J3wnbnB1JztcbiAgICBudW1UaHJlYWRzPzogbnVtYmVyO1xuICAgIHBvd2VyUHJlZmVyZW5jZT86ICdkZWZhdWx0J3wnbG93LXBvd2VyJ3wnaGlnaC1wZXJmb3JtYW5jZSc7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBDb3JlTUxFeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAnY29yZW1sJztcbiAgICB1c2VDUFVPbmx5PzogYm9vbGVhbjtcbiAgICBlbmFibGVPblN1YmdyYXBoPzogYm9vbGVhbjtcbiAgICBvbmx5RW5hYmxlRGV2aWNlV2l0aEFORT86IGJvb2xlYW47XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBObmFwaUV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICdubmFwaSc7XG4gICAgdXNlRlAxNj86IGJvb2xlYW47XG4gICAgdXNlTkNIVz86IGJvb2xlYW47XG4gICAgY3B1RGlzYWJsZWQ/OiBib29sZWFuO1xuICAgIGNwdU9ubHk/OiBib29sZWFuO1xuICB9XG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBydW4gb3B0aW9uc1xuXG4gIC8qKlxuICAgKiBBIHNldCBvZiBjb25maWd1cmF0aW9ucyBmb3IgaW5mZXJlbmNlIHJ1biBiZWhhdmlvclxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBSdW5PcHRpb25zIHtcbiAgICAvKipcbiAgICAgKiBMb2cgc2V2ZXJpdHkgbGV2ZWwuIFNlZVxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvb25ueHJ1bnRpbWUvYmxvYi9tYWluL2luY2x1ZGUvb25ueHJ1bnRpbWUvY29yZS9jb21tb24vbG9nZ2luZy9zZXZlcml0eS5oXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gT05OWFJ1bnRpbWUgKE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlKSBvciBXZWJBc3NlbWJseSBiYWNrZW5kXG4gICAgICovXG4gICAgbG9nU2V2ZXJpdHlMZXZlbD86IDB8MXwyfDN8NDtcblxuICAgIC8qKlxuICAgICAqIExvZyB2ZXJib3NpdHkgbGV2ZWwuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gV2ViQXNzZW1ibHkgYmFja2VuZC4gV2lsbCBzdXBwb3J0IE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlIGxhdGVyXG4gICAgICovXG4gICAgbG9nVmVyYm9zaXR5TGV2ZWw/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUZXJtaW5hdGUgYWxsIGluY29tcGxldGUgT3J0UnVuIGNhbGxzIGFzIHNvb24gYXMgcG9zc2libGUgaWYgdHJ1ZVxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIFdlYkFzc2VtYmx5IGJhY2tlbmQuIFdpbGwgc3VwcG9ydCBOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSBsYXRlclxuICAgICAqL1xuICAgIHRlcm1pbmF0ZT86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBIHRhZyBmb3IgdGhlIFJ1bigpIGNhbGxzIHVzaW5nIHRoaXNcbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICB0YWc/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgYSBzaW5nbGUgcnVuIGNvbmZpZ3VyYXRpb24gZW50cnkuIFNlZVxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvb25ueHJ1bnRpbWUvYmxvYi9tYWluL2luY2x1ZGUvb25ueHJ1bnRpbWUvY29yZS9zZXNzaW9uL1xuICAgICAqIG9ubnhydW50aW1lX3J1bl9vcHRpb25zX2NvbmZpZ19rZXlzLmhcbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBXZWJBc3NlbWJseSBiYWNrZW5kLiBXaWxsIHN1cHBvcnQgTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUgbGF0ZXJcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGV4dHJhOiB7XG4gICAgICogICBtZW1vcnk6IHtcbiAgICAgKiAgICAgZW5hYmxlX21lbW9yeV9hcmVuYV9zaHJpbmthZ2U6IFwiMVwiLFxuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBleHRyYT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICB9XG5cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gdmFsdWUgbWV0YWRhdGFcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWludGVyZmFjZVxuICBpbnRlcmZhY2UgVmFsdWVNZXRhZGF0YSB7XG4gICAgLy8gVEJEXG4gIH1cblxuICAvLyAjZW5kcmVnaW9uXG59XG5cbi8qKlxuICogUmVwcmVzZW50IGEgcnVudGltZSBpbnN0YW5jZSBvZiBhbiBPTk5YIG1vZGVsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEluZmVyZW5jZVNlc3Npb24ge1xuICAvLyAjcmVnaW9uIHJ1bigpXG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgdGhlIG1vZGVsIGFzeW5jaHJvbm91c2x5IHdpdGggdGhlIGdpdmVuIGZlZWRzIGFuZCBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gZmVlZHMgLSBSZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgaW5wdXQuIFNlZSB0eXBlIGRlc2NyaXB0aW9uIG9mIGBJbmZlcmVuY2VTZXNzaW9uLklucHV0VHlwZWAgZm9yIGRldGFpbC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbC4gQSBzZXQgb2Ygb3B0aW9ucyB0aGF0IGNvbnRyb2xzIHRoZSBiZWhhdmlvciBvZiBtb2RlbCBpbmZlcmVuY2UuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgbWFwLCB3aGljaCB1c2VzIG91dHB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgYXMgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAqL1xuICBydW4oZmVlZHM6IEluZmVyZW5jZVNlc3Npb24uRmVlZHNUeXBlLCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uLlJldHVyblR5cGU+O1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlIHRoZSBtb2RlbCBhc3luY2hyb25vdXNseSB3aXRoIHRoZSBnaXZlbiBmZWVkcywgZmV0Y2hlcyBhbmQgb3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIGZlZWRzIC0gUmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIGlucHV0LiBTZWUgdHlwZSBkZXNjcmlwdGlvbiBvZiBgSW5mZXJlbmNlU2Vzc2lvbi5JbnB1dFR5cGVgIGZvciBkZXRhaWwuXG4gICAqIEBwYXJhbSBmZXRjaGVzIC0gUmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIG91dHB1dC4gU2VlIHR5cGUgZGVzY3JpcHRpb24gb2YgYEluZmVyZW5jZVNlc3Npb24uT3V0cHV0VHlwZWAgZm9yXG4gICAqIGRldGFpbC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbC4gQSBzZXQgb2Ygb3B0aW9ucyB0aGF0IGNvbnRyb2xzIHRoZSBiZWhhdmlvciBvZiBtb2RlbCBpbmZlcmVuY2UuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgbWFwLCB3aGljaCB1c2VzIG91dHB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgYXMgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAqL1xuICBydW4oZmVlZHM6IEluZmVyZW5jZVNlc3Npb24uRmVlZHNUeXBlLCBmZXRjaGVzOiBJbmZlcmVuY2VTZXNzaW9uLkZldGNoZXNUeXBlLFxuICAgICAgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbi5SZXR1cm5UeXBlPjtcblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiByZWxlYXNlKClcblxuICAvKipcbiAgICogUmVsZWFzZSB0aGUgaW5mZXJlbmNlIHNlc3Npb24gYW5kIHRoZSB1bmRlcmx5aW5nIHJlc291cmNlcy5cbiAgICovXG4gIHJlbGVhc2UoKTogUHJvbWlzZTx2b2lkPjtcblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBwcm9maWxpbmdcblxuICAvKipcbiAgICogU3RhcnQgcHJvZmlsaW5nLlxuICAgKi9cbiAgc3RhcnRQcm9maWxpbmcoKTogdm9pZDtcblxuICAvKipcbiAgICogRW5kIHByb2ZpbGluZy5cbiAgICovXG4gIGVuZFByb2ZpbGluZygpOiB2b2lkO1xuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIG1ldGFkYXRhXG5cbiAgLyoqXG4gICAqIEdldCBpbnB1dCBuYW1lcyBvZiB0aGUgbG9hZGVkIG1vZGVsLlxuICAgKi9cbiAgcmVhZG9ubHkgaW5wdXROYW1lczogcmVhZG9ubHkgc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIEdldCBvdXRwdXQgbmFtZXMgb2YgdGhlIGxvYWRlZCBtb2RlbC5cbiAgICovXG4gIHJlYWRvbmx5IG91dHB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcblxuICAvLyAvKipcbiAgLy8gICogR2V0IGlucHV0IG1ldGFkYXRhIG9mIHRoZSBsb2FkZWQgbW9kZWwuXG4gIC8vICAqL1xuICAvLyByZWFkb25seSBpbnB1dE1ldGFkYXRhOiBSZWFkb25seUFycmF5PFJlYWRvbmx5PEluZmVyZW5jZVNlc3Npb24uVmFsdWVNZXRhZGF0YT4+O1xuXG4gIC8vIC8qKlxuICAvLyAgKiBHZXQgb3V0cHV0IG1ldGFkYXRhIG9mIHRoZSBsb2FkZWQgbW9kZWwuXG4gIC8vICAqL1xuICAvLyByZWFkb25seSBvdXRwdXRNZXRhZGF0YTogUmVhZG9ubHlBcnJheTxSZWFkb25seTxJbmZlcmVuY2VTZXNzaW9uLlZhbHVlTWV0YWRhdGE+PjtcblxuICAvLyAjZW5kcmVnaW9uXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5mZXJlbmNlU2Vzc2lvbkZhY3Rvcnkge1xuICAvLyAjcmVnaW9uIGNyZWF0ZSgpXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbmZlcmVuY2Ugc2Vzc2lvbiBhbmQgbG9hZCBtb2RlbCBhc3luY2hyb25vdXNseSBmcm9tIGFuIE9OTlggbW9kZWwgZmlsZS5cbiAgICpcbiAgICogQHBhcmFtIHVyaSAtIFRoZSBVUkkgb3IgZmlsZSBwYXRoIG9mIHRoZSBtb2RlbCB0byBsb2FkLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIHNwZWNpZnkgY29uZmlndXJhdGlvbiBmb3IgY3JlYXRpbmcgYSBuZXcgaW5mZXJlbmNlIHNlc3Npb24uXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIEluZmVyZW5jZVNlc3Npb24gb2JqZWN0LlxuICAgKi9cbiAgY3JlYXRlKHVyaTogc3RyaW5nLCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbj47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbmZlcmVuY2Ugc2Vzc2lvbiBhbmQgbG9hZCBtb2RlbCBhc3luY2hyb25vdXNseSBmcm9tIGFuIGFycmF5IGJ1ZmVyLlxuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyIC0gQW4gQXJyYXlCdWZmZXIgcmVwcmVzZW50YXRpb24gb2YgYW4gT05OWCBtb2RlbC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBzcGVjaWZ5IGNvbmZpZ3VyYXRpb24gZm9yIGNyZWF0aW5nIGEgbmV3IGluZmVyZW5jZSBzZXNzaW9uLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBJbmZlcmVuY2VTZXNzaW9uIG9iamVjdC5cbiAgICovXG4gIGNyZWF0ZShidWZmZXI6IEFycmF5QnVmZmVyTGlrZSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb24+O1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaW5mZXJlbmNlIHNlc3Npb24gYW5kIGxvYWQgbW9kZWwgYXN5bmNocm9ub3VzbHkgZnJvbSBzZWdtZW50IG9mIGFuIGFycmF5IGJ1ZmVyLlxuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyIC0gQW4gQXJyYXlCdWZmZXIgcmVwcmVzZW50YXRpb24gb2YgYW4gT05OWCBtb2RlbC5cbiAgICogQHBhcmFtIGJ5dGVPZmZzZXQgLSBUaGUgYmVnaW5uaW5nIG9mIHRoZSBzcGVjaWZpZWQgcG9ydGlvbiBvZiB0aGUgYXJyYXkgYnVmZmVyLlxuICAgKiBAcGFyYW0gYnl0ZUxlbmd0aCAtIFRoZSBsZW5ndGggaW4gYnl0ZXMgb2YgdGhlIGFycmF5IGJ1ZmZlci5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBzcGVjaWZ5IGNvbmZpZ3VyYXRpb24gZm9yIGNyZWF0aW5nIGEgbmV3IGluZmVyZW5jZSBzZXNzaW9uLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBJbmZlcmVuY2VTZXNzaW9uIG9iamVjdC5cbiAgICovXG4gIGNyZWF0ZShidWZmZXI6IEFycmF5QnVmZmVyTGlrZSwgYnl0ZU9mZnNldDogbnVtYmVyLCBieXRlTGVuZ3RoPzogbnVtYmVyLCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPEluZmVyZW5jZVNlc3Npb24+O1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaW5mZXJlbmNlIHNlc3Npb24gYW5kIGxvYWQgbW9kZWwgYXN5bmNocm9ub3VzbHkgZnJvbSBhIFVpbnQ4QXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgLSBBIFVpbnQ4QXJyYXkgcmVwcmVzZW50YXRpb24gb2YgYW4gT05OWCBtb2RlbC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBzcGVjaWZ5IGNvbmZpZ3VyYXRpb24gZm9yIGNyZWF0aW5nIGEgbmV3IGluZmVyZW5jZSBzZXNzaW9uLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBJbmZlcmVuY2VTZXNzaW9uIG9iamVjdC5cbiAgICovXG4gIGNyZWF0ZShidWZmZXI6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uPjtcblxuICAvLyAjZW5kcmVnaW9uXG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBjb25zdCBJbmZlcmVuY2VTZXNzaW9uOiBJbmZlcmVuY2VTZXNzaW9uRmFjdG9yeSA9IEluZmVyZW5jZVNlc3Npb25JbXBsO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi90ZW5zb3IuanMnO1xuXG50eXBlIE5vblRlbnNvclR5cGUgPSBuZXZlcjtcblxuLyoqXG4gKiBUeXBlIE9ubnhWYWx1ZSBSZXByZXNlbnRzIGJvdGggdGVuc29ycyBhbmQgbm9uLXRlbnNvcnMgdmFsdWUgZm9yIG1vZGVsJ3MgaW5wdXRzL291dHB1dHMuXG4gKlxuICogTk9URTogY3VycmVudGx5IG5vdCBzdXBwb3J0IG5vbi10ZW5zb3JcbiAqL1xuZXhwb3J0IHR5cGUgT25ueFZhbHVlID0gVGVuc29yfE5vblRlbnNvclR5cGU7XG5cbi8qKlxuICogVHlwZSBPbm54VmFsdWVEYXRhTG9jYXRpb24gcmVwcmVzZW50cyB0aGUgbG9jYXRpb24gb2YgdGhlIGRhdGEgb2YgYW4gT25ueFZhbHVlLlxuICovXG5leHBvcnQgdHlwZSBPbm54VmFsdWVEYXRhTG9jYXRpb24gPSBUZW5zb3IuRGF0YUxvY2F0aW9uO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge3Jlc29sdmVCYWNrZW5kfSBmcm9tICcuL2JhY2tlbmQtaW1wbC5qcyc7XG5pbXBvcnQge1Nlc3Npb25IYW5kbGVyLCBUcmFpbmluZ1Nlc3Npb25IYW5kbGVyfSBmcm9tICcuL2JhY2tlbmQuanMnO1xuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9uIGFzIEluZmVyZW5jZVNlc3Npb259IGZyb20gJy4vaW5mZXJlbmNlLXNlc3Npb24uanMnO1xuaW1wb3J0IHtPbm54VmFsdWV9IGZyb20gJy4vb25ueC12YWx1ZS5qcyc7XG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi90ZW5zb3IuanMnO1xuaW1wb3J0IHtUcmFpbmluZ1Nlc3Npb24gYXMgVHJhaW5pbmdTZXNzaW9uSW50ZXJmYWNlLCBUcmFpbmluZ1Nlc3Npb25DcmVhdGVPcHRpb25zfSBmcm9tICcuL3RyYWluaW5nLXNlc3Npb24uanMnO1xuXG50eXBlIFNlc3Npb25PcHRpb25zID0gSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucztcbnR5cGUgRmVlZHNUeXBlID0gSW5mZXJlbmNlU2Vzc2lvbi5GZWVkc1R5cGU7XG50eXBlIEZldGNoZXNUeXBlID0gSW5mZXJlbmNlU2Vzc2lvbi5GZXRjaGVzVHlwZTtcbnR5cGUgUmV0dXJuVHlwZSA9IEluZmVyZW5jZVNlc3Npb24uUmV0dXJuVHlwZTtcbnR5cGUgUnVuT3B0aW9ucyA9IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucztcblxuY29uc3Qgbm9CYWNrZW5kRXJyTXNnOiBzdHJpbmcgPSAnVHJhaW5pbmcgYmFja2VuZCBjb3VsZCBub3QgYmUgcmVzb2x2ZWQuICcgK1xuICAgICdNYWtlIHN1cmUgeW91XFwncmUgdXNpbmcgdGhlIGNvcnJlY3QgY29uZmlndXJhdGlvbiAmIFdlYkFzc2VtYmx5IGZpbGVzLic7XG5cbmV4cG9ydCBjbGFzcyBUcmFpbmluZ1Nlc3Npb24gaW1wbGVtZW50cyBUcmFpbmluZ1Nlc3Npb25JbnRlcmZhY2Uge1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKGhhbmRsZXI6IFRyYWluaW5nU2Vzc2lvbkhhbmRsZXIsIGhhc09wdGltaXplck1vZGVsOiBib29sZWFuLCBoYXNFdmFsTW9kZWw6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xuICAgIHRoaXMuaGFzT3B0aW1pemVyTW9kZWwgPSBoYXNPcHRpbWl6ZXJNb2RlbDtcbiAgICB0aGlzLmhhc0V2YWxNb2RlbCA9IGhhc0V2YWxNb2RlbDtcbiAgfVxuICBwcml2YXRlIGhhbmRsZXI6IFRyYWluaW5nU2Vzc2lvbkhhbmRsZXI7XG4gIHByaXZhdGUgaGFzT3B0aW1pemVyTW9kZWw6IGJvb2xlYW47XG4gIHByaXZhdGUgaGFzRXZhbE1vZGVsOiBib29sZWFuO1xuXG4gIGdldCB0cmFpbmluZ0lucHV0TmFtZXMoKTogcmVhZG9ubHkgc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXIuaW5wdXROYW1lcztcbiAgfVxuICBnZXQgdHJhaW5pbmdPdXRwdXROYW1lcygpOiByZWFkb25seSBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5vdXRwdXROYW1lcztcbiAgfVxuXG4gIGdldCBldmFsSW5wdXROYW1lcygpOiByZWFkb25seSBzdHJpbmdbXSB7XG4gICAgaWYgKHRoaXMuaGFzRXZhbE1vZGVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVyLmV2YWxJbnB1dE5hbWVzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgdHJhaW5pbmcgc2Vzc2lvbiBoYXMgbm8gZXZhbE1vZGVsIGxvYWRlZC4nKTtcbiAgICB9XG4gIH1cbiAgZ2V0IGV2YWxPdXRwdXROYW1lcygpOiByZWFkb25seSBzdHJpbmdbXSB7XG4gICAgaWYgKHRoaXMuaGFzRXZhbE1vZGVsKSB7XG4gICAgICByZXR1cm4gdGhpcy5oYW5kbGVyLmV2YWxPdXRwdXROYW1lcztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIHRyYWluaW5nIHNlc3Npb24gaGFzIG5vIGV2YWxNb2RlbCBsb2FkZWQuJyk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGFzeW5jIGNyZWF0ZSh0cmFpbmluZ09wdGlvbnM6IFRyYWluaW5nU2Vzc2lvbkNyZWF0ZU9wdGlvbnMsIHNlc3Npb25PcHRpb25zPzogU2Vzc2lvbk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxUcmFpbmluZ1Nlc3Npb24+IHtcbiAgICBjb25zdCBldmFsTW9kZWw6IHN0cmluZ3xVaW50OEFycmF5ID0gdHJhaW5pbmdPcHRpb25zLmV2YWxNb2RlbCB8fCAnJztcbiAgICBjb25zdCBvcHRpbWl6ZXJNb2RlbDogc3RyaW5nfFVpbnQ4QXJyYXkgPSB0cmFpbmluZ09wdGlvbnMub3B0aW1pemVyTW9kZWwgfHwgJyc7XG4gICAgY29uc3Qgb3B0aW9uczogU2Vzc2lvbk9wdGlvbnMgPSBzZXNzaW9uT3B0aW9ucyB8fCB7fTtcblxuICAgIC8vIGdldCBiYWNrZW5kIGhpbnRzXG4gICAgY29uc3QgZXBzID0gb3B0aW9ucy5leGVjdXRpb25Qcm92aWRlcnMgfHwgW107XG4gICAgY29uc3QgYmFja2VuZEhpbnRzID0gZXBzLm1hcChpID0+IHR5cGVvZiBpID09PSAnc3RyaW5nJyA/IGkgOiBpLm5hbWUpO1xuICAgIGNvbnN0IGJhY2tlbmQgPSBhd2FpdCByZXNvbHZlQmFja2VuZChiYWNrZW5kSGludHMpO1xuICAgIGlmIChiYWNrZW5kLmNyZWF0ZVRyYWluaW5nU2Vzc2lvbkhhbmRsZXIpIHtcbiAgICAgIGNvbnN0IGhhbmRsZXIgPSBhd2FpdCBiYWNrZW5kLmNyZWF0ZVRyYWluaW5nU2Vzc2lvbkhhbmRsZXIoXG4gICAgICAgICAgdHJhaW5pbmdPcHRpb25zLmNoZWNrcG9pbnRTdGF0ZSwgdHJhaW5pbmdPcHRpb25zLnRyYWluTW9kZWwsIGV2YWxNb2RlbCwgb3B0aW1pemVyTW9kZWwsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIG5ldyBUcmFpbmluZ1Nlc3Npb24oaGFuZGxlciwgISF0cmFpbmluZ09wdGlvbnMub3B0aW1pemVyTW9kZWwsICEhdHJhaW5pbmdPcHRpb25zLmV2YWxNb2RlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihub0JhY2tlbmRFcnJNc2cpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgZnVuY3Rpb24gZm9yIHJ1blRyYWluU3RlcCBhbmQgZnV0dXJlIHJ1blN0ZXAgbWV0aG9kcyB0aGF0IGhhbmRsZXMgdGhlIHR5cGUtbmFycm93aW5nIGNvbnZlcnNpb24gZnJvbVxuICAgKiB0aGUgZ2l2ZW4gcGFyYW1ldGVycyB0byBTZXNzaW9uSGFuZGxlci5GZXRjaGVzVHlwZSBhbmQgUnVuT3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIGlucHV0TmFtZXMgdGhlIGZlZWRzIG9iamVjdCBpcyBjaGVja2VkIHRoYXQgdGhleSBjb250YWluIGFsbCBpbnB1dCBuYW1lcyBpbiB0aGUgcHJvdmlkZWQgbGlzdCBvZiBpbnB1dFxuICAgKiBuYW1lcy5cbiAgICogQHBhcmFtIG91dHB1dE5hbWVzIHRoZSBmZXRjaGVzIG9iamVjdCBpcyBjaGVja2VkIHRoYXQgdGhlaXIga2V5cyBtYXRjaCB1cCB3aXRoIHZhbGlkIG5hbWVzIGluIHRoZSBsaXN0IG9mIG91dHB1dFxuICAgKiBuYW1lcy5cbiAgICogQHBhcmFtIGZlZWRzIHRoZSByZXF1aXJlZCBpbnB1dFxuICAgKiBAcGFyYW0gYXJnMSBuYXJyb3dlZCAmIGNvbnZlcnRlZCBpbnRvIHRoZSBTZXNzaW9uSGFuZGxlci5GZXRjaGVzVHlwZSBvciBSdW5PcHRpb25zIG9iamVjdFxuICAgKiBAcGFyYW0gYXJnMiBvcHRpb25hbCBSdW5PcHRpb25zIG9iamVjdC5cbiAgICogQHJldHVybnNcbiAgICovXG4gIHR5cGVOYXJyb3dpbmdGb3JSdW5TdGVwKFxuICAgICAgaW5wdXROYW1lczogcmVhZG9ubHkgc3RyaW5nW10sIG91dHB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXSwgZmVlZHM6IEZlZWRzVHlwZSwgYXJnMT86IEZldGNoZXNUeXBlfFJ1bk9wdGlvbnMsXG4gICAgICBhcmcyPzogUnVuT3B0aW9ucyk6IFtTZXNzaW9uSGFuZGxlci5GZXRjaGVzVHlwZSwgUnVuT3B0aW9uc10ge1xuICAgIGNvbnN0IGZldGNoZXM6IHtbbmFtZTogc3RyaW5nXTogT25ueFZhbHVlfG51bGx9ID0ge307XG4gICAgbGV0IG9wdGlvbnM6IFJ1bk9wdGlvbnMgPSB7fTtcbiAgICAvLyBjaGVjayBpbnB1dHNcbiAgICBpZiAodHlwZW9mIGZlZWRzICE9PSAnb2JqZWN0JyB8fCBmZWVkcyA9PT0gbnVsbCB8fCBmZWVkcyBpbnN0YW5jZW9mIFRlbnNvciB8fCBBcnJheS5pc0FycmF5KGZlZWRzKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAnXFwnZmVlZHNcXCcgbXVzdCBiZSBhbiBvYmplY3QgdGhhdCB1c2UgaW5wdXQgbmFtZXMgYXMga2V5cyBhbmQgT25ueFZhbHVlIGFzIGNvcnJlc3BvbmRpbmcgdmFsdWVzLicpO1xuICAgIH1cblxuICAgIGxldCBpc0ZldGNoZXNFbXB0eSA9IHRydWU7XG4gICAgLy8gZGV0ZXJtaW5lIHdoaWNoIG92ZXJyaWRlIGlzIGJlaW5nIHVzZWRcbiAgICBpZiAodHlwZW9mIGFyZzEgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoYXJnMSA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmV4cGVjdGVkIGFyZ3VtZW50WzFdOiBjYW5ub3QgYmUgbnVsbC4nKTtcbiAgICAgIH1cbiAgICAgIGlmIChhcmcxIGluc3RhbmNlb2YgVGVuc29yKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ2ZldGNoZXNcXCcgY2Fubm90IGJlIGEgVGVuc29yJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZzEpKSB7XG4gICAgICAgIGlmIChhcmcxLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ2ZldGNoZXNcXCcgY2Fubm90IGJlIGFuIGVtcHR5IGFycmF5LicpO1xuICAgICAgICB9XG4gICAgICAgIGlzRmV0Y2hlc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgIC8vIG91dHB1dCBuYW1lc1xuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgYXJnMSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ2ZldGNoZXNcXCcgbXVzdCBiZSBhIHN0cmluZyBhcnJheSBvciBhbiBvYmplY3QuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvdXRwdXROYW1lcy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYCdmZXRjaGVzJyBjb250YWlucyBpbnZhbGlkIG91dHB1dCBuYW1lOiAke25hbWV9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmZXRjaGVzW25hbWVdID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgYXJnMiA9PT0gJ29iamVjdCcgJiYgYXJnMiAhPT0gbnVsbCkge1xuICAgICAgICAgIG9wdGlvbnMgPSBhcmcyO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ29wdGlvbnNcXCcgbXVzdCBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlY2lkZSB3aGV0aGVyIGFyZzEgaXMgZmV0Y2hlcyBvciBvcHRpb25zXG4gICAgICAgIC8vIGlmIGFueSBvdXRwdXQgbmFtZSBpcyBwcmVzZW50IGFuZCBpdHMgdmFsdWUgaXMgdmFsaWQgT25ueFZhbHVlLCB3ZSBjb25zaWRlciBpdCBmZXRjaGVzXG4gICAgICAgIGxldCBpc0ZldGNoZXMgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgYXJnMUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcmcxKTtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIG91dHB1dE5hbWVzKSB7XG4gICAgICAgICAgaWYgKGFyZzFLZXlzLmluZGV4T2YobmFtZSkgIT09IC0xKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gKGFyZzEgYXMgSW5mZXJlbmNlU2Vzc2lvbi5OdWxsYWJsZU9ubnhWYWx1ZU1hcFR5cGUpW25hbWVdO1xuICAgICAgICAgICAgaWYgKHYgPT09IG51bGwgfHwgdiBpbnN0YW5jZW9mIFRlbnNvcikge1xuICAgICAgICAgICAgICBpc0ZldGNoZXMgPSB0cnVlO1xuICAgICAgICAgICAgICBpc0ZldGNoZXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICBmZXRjaGVzW25hbWVdID0gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGZXRjaGVzKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmcyID09PSAnb2JqZWN0JyAmJiBhcmcyICE9PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gYXJnMjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnb3B0aW9uc1xcJyBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9ucyA9IGFyZzEgYXMgUnVuT3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmV4cGVjdGVkIGFyZ3VtZW50WzFdOiBtdXN0IGJlIFxcJ2ZldGNoZXNcXCcgb3IgXFwnb3B0aW9uc1xcJy4nKTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBpZiBhbGwgaW5wdXRzIGFyZSBpbiBmZWVkXG4gICAgZm9yIChjb25zdCBuYW1lIG9mIGlucHV0TmFtZXMpIHtcbiAgICAgIGlmICh0eXBlb2YgZmVlZHNbbmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW5wdXQgJyR7bmFtZX0nIGlzIG1pc3NpbmcgaW4gJ2ZlZWRzJy5gKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpZiBubyBmZXRjaGVzIGlzIHNwZWNpZmllZCwgd2UgdXNlIHRoZSBmdWxsIG91dHB1dCBuYW1lcyBsaXN0XG4gICAgaWYgKGlzRmV0Y2hlc0VtcHR5KSB7XG4gICAgICBmb3IgKGNvbnN0IG5hbWUgb2Ygb3V0cHV0TmFtZXMpIHtcbiAgICAgICAgZmV0Y2hlc1tuYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFtmZXRjaGVzLCBvcHRpb25zXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgbWV0aG9kIGZvciBydW5UcmFpblN0ZXAgYW5kIGFueSBvdGhlciBydW5TdGVwIG1ldGhvZHMuIFRha2VzIHRoZSBSZXR1cm5UeXBlIHJlc3VsdCBmcm9tIHRoZSBTZXNzaW9uSGFuZGxlclxuICAgKiBhbmQgY2hhbmdlcyBpdCBpbnRvIGEgbWFwIG9mIFRlbnNvcnMuXG4gICAqXG4gICAqIEBwYXJhbSByZXN1bHRzXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBjb252ZXJ0SGFuZGxlclJldHVyblR5cGVUb01hcE9mVGVuc29ycyhyZXN1bHRzOiBTZXNzaW9uSGFuZGxlci5SZXR1cm5UeXBlKTogUmV0dXJuVHlwZSB7XG4gICAgY29uc3QgcmV0dXJuVmFsdWU6IHtbbmFtZTogc3RyaW5nXTogT25ueFZhbHVlfSA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHJlc3VsdHMpIHtcbiAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHRzLCBrZXkpKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3VsdHNba2V5XTtcbiAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFRlbnNvcikge1xuICAgICAgICAgIHJldHVyblZhbHVlW2tleV0gPSByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuVmFsdWVba2V5XSA9IG5ldyBUZW5zb3IocmVzdWx0LnR5cGUsIHJlc3VsdC5kYXRhLCByZXN1bHQuZGltcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9XG5cbiAgYXN5bmMgbGF6eVJlc2V0R3JhZCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLmhhbmRsZXIubGF6eVJlc2V0R3JhZCgpO1xuICB9XG5cbiAgcnVuVHJhaW5TdGVwKGZlZWRzOiBGZWVkc1R5cGUsIG9wdGlvbnM/OiBSdW5PcHRpb25zKTogUHJvbWlzZTxSZXR1cm5UeXBlPjtcbiAgcnVuVHJhaW5TdGVwKGZlZWRzOiBGZWVkc1R5cGUsIGZldGNoZXM6IEZldGNoZXNUeXBlLCBvcHRpb25zPzogUnVuT3B0aW9ucyk6IFByb21pc2U8UmV0dXJuVHlwZT47XG4gIGFzeW5jIHJ1blRyYWluU3RlcChmZWVkczogRmVlZHNUeXBlLCBhcmcxPzogRmV0Y2hlc1R5cGV8UnVuT3B0aW9ucywgYXJnMj86IFJ1bk9wdGlvbnMpOiBQcm9taXNlPFJldHVyblR5cGU+IHtcbiAgICBjb25zdCBbZmV0Y2hlcywgb3B0aW9uc10gPVxuICAgICAgICB0aGlzLnR5cGVOYXJyb3dpbmdGb3JSdW5TdGVwKHRoaXMudHJhaW5pbmdJbnB1dE5hbWVzLCB0aGlzLnRyYWluaW5nT3V0cHV0TmFtZXMsIGZlZWRzLCBhcmcxLCBhcmcyKTtcbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgdGhpcy5oYW5kbGVyLnJ1blRyYWluU3RlcChmZWVkcywgZmV0Y2hlcywgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXMuY29udmVydEhhbmRsZXJSZXR1cm5UeXBlVG9NYXBPZlRlbnNvcnMocmVzdWx0cyk7XG4gIH1cblxuICBhc3luYyBydW5PcHRpbWl6ZXJTdGVwKG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnN8dW5kZWZpbmVkKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMuaGFzT3B0aW1pemVyTW9kZWwpIHtcbiAgICAgIGF3YWl0IHRoaXMuaGFuZGxlci5ydW5PcHRpbWl6ZXJTdGVwKG9wdGlvbnMgfHwge30pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgVHJhaW5pbmdTZXNzaW9uIGhhcyBubyBPcHRpbWl6ZXJNb2RlbCBsb2FkZWQuJyk7XG4gICAgfVxuICB9XG5cbiAgcnVuRXZhbFN0ZXAoZmVlZHM6IEZlZWRzVHlwZSwgb3B0aW9ucz86IFJ1bk9wdGlvbnN8dW5kZWZpbmVkKTogUHJvbWlzZTxSZXR1cm5UeXBlPjtcbiAgcnVuRXZhbFN0ZXAoZmVlZHM6IEZlZWRzVHlwZSwgZmV0Y2hlczogRmV0Y2hlc1R5cGUsIG9wdGlvbnM/OiBSdW5PcHRpb25zfHVuZGVmaW5lZCk6IFByb21pc2U8UmV0dXJuVHlwZT47XG4gIGFzeW5jIHJ1bkV2YWxTdGVwKGZlZWRzOiBGZWVkc1R5cGUsIGFyZzE/OiBGZXRjaGVzVHlwZXxSdW5PcHRpb25zLCBhcmcyPzogUnVuT3B0aW9ucyk6IFByb21pc2U8UmV0dXJuVHlwZT4ge1xuICAgIGlmICh0aGlzLmhhc0V2YWxNb2RlbCkge1xuICAgICAgY29uc3QgW2ZldGNoZXMsIG9wdGlvbnNdID1cbiAgICAgICAgICB0aGlzLnR5cGVOYXJyb3dpbmdGb3JSdW5TdGVwKHRoaXMuZXZhbElucHV0TmFtZXMsIHRoaXMuZXZhbE91dHB1dE5hbWVzLCBmZWVkcywgYXJnMSwgYXJnMik7XG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgdGhpcy5oYW5kbGVyLnJ1bkV2YWxTdGVwKGZlZWRzLCBmZXRjaGVzLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRIYW5kbGVyUmV0dXJuVHlwZVRvTWFwT2ZUZW5zb3JzKHJlc3VsdHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgVHJhaW5pbmdTZXNzaW9uIGhhcyBubyBFdmFsTW9kZWwgbG9hZGVkLicpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldFBhcmFtZXRlcnNTaXplKHRyYWluYWJsZU9ubHkgPSB0cnVlKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLmdldFBhcmFtZXRlcnNTaXplKHRyYWluYWJsZU9ubHkpO1xuICB9XG5cbiAgYXN5bmMgbG9hZFBhcmFtZXRlcnNCdWZmZXIoYXJyYXk6IFVpbnQ4QXJyYXksIHRyYWluYWJsZU9ubHkgPSB0cnVlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgY29uc3QgcGFyYW1zU2l6ZSA9IGF3YWl0IHRoaXMuZ2V0UGFyYW1ldGVyc1NpemUodHJhaW5hYmxlT25seSk7XG4gICAgLy8gY2hlY2tpbmcgdGhhdCB0aGUgc2l6ZSBvZiB0aGUgVWludDhBcnJheSBpcyBlcXVpdmFsZW50IHRvIHRoZSBieXRlIGxlbmd0aCBvZiBhIEZsb2F0MzJBcnJheSBvZiB0aGUgbnVtYmVyXG4gICAgLy8gb2YgcGFyYW1ldGVyc1xuICAgIGlmIChhcnJheS5sZW5ndGggIT09IDQgKiBwYXJhbXNTaXplKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1NpemUgb2YgdGhlIGJ1ZmZlciBwYXNzZWQgaW50byBsb2FkUGFyYW1ldGVyc0J1ZmZlciBtdXN0IG1hdGNoIHRoZSBudW1iZXIgb2YgcGFyYW1ldGVycyBpbiAnICtcbiAgICAgICAgICAndGhlIG1vZGVsLiBQbGVhc2UgdXNlIGdldFBhcmFtZXRlcnNTaXplIG1ldGhvZCB0byBjaGVjay4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5sb2FkUGFyYW1ldGVyc0J1ZmZlcihhcnJheSwgdHJhaW5hYmxlT25seSk7XG4gIH1cblxuICBhc3luYyBnZXRDb250aWd1b3VzUGFyYW1ldGVycyh0cmFpbmFibGVPbmx5ID0gdHJ1ZSk6IFByb21pc2U8T25ueFZhbHVlPiB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5nZXRDb250aWd1b3VzUGFyYW1ldGVycyh0cmFpbmFibGVPbmx5KTtcbiAgfVxuXG4gIGFzeW5jIHJlbGVhc2UoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5kaXNwb3NlKCk7XG4gIH1cbn1cbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9ufSBmcm9tICcuL2luZmVyZW5jZS1zZXNzaW9uLmpzJztcbmltcG9ydCB7T25ueFZhbHVlfSBmcm9tICcuL29ubngtdmFsdWUuanMnO1xuaW1wb3J0IHtUcmFpbmluZ1Nlc3Npb24gYXMgVHJhaW5pbmdTZXNzaW9uSW1wbH0gZnJvbSAnLi90cmFpbmluZy1zZXNzaW9uLWltcGwuanMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlICovXG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBUcmFpbmluZ1Nlc3Npb24ge1xuICAvKipcbiAgICogRWl0aGVyIFVSSSBmaWxlIHBhdGggKHN0cmluZykgb3IgVWludDhBcnJheSBjb250YWluaW5nIG1vZGVsIG9yIGNoZWNrcG9pbnQgaW5mb3JtYXRpb24uXG4gICAqL1xuICB0eXBlIFVSSW9yQnVmZmVyID0gc3RyaW5nfFVpbnQ4QXJyYXk7XG59XG5cbi8qKlxuICogUmVwcmVzZW50IGEgcnVudGltZSBpbnN0YW5jZSBvZiBhbiBPTk5YIHRyYWluaW5nIHNlc3Npb24sXG4gKiB3aGljaCBjb250YWlucyBhIG1vZGVsIHRoYXQgY2FuIGJlIHRyYWluZWQsIGFuZCwgb3B0aW9uYWxseSxcbiAqIGFuIGV2YWwgYW5kIG9wdGltaXplciBtb2RlbC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFpbmluZ1Nlc3Npb24ge1xuICAvLyAjcmVnaW9uIHJ1bigpXG5cbiAgLyoqXG4gICAqIExhemlseSByZXNldHMgdGhlIGdyYWRpZW50cyBvZiBhbGwgdHJhaW5hYmxlIHBhcmFtZXRlcnMgdG8gemVyby4gU2hvdWxkIGhhcHBlbiBhZnRlciB0aGUgaW52b2NhdGlvbiBvZlxuICAgKiBydW5PcHRpbWl6ZXJTdGVwLlxuICAgKi9cbiAgbGF6eVJlc2V0R3JhZCgpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBSdW4gVHJhaW5TdGVwIGFzeW5jaHJvbm91c2x5IHdpdGggdGhlIGdpdmVuIGZlZWRzIGFuZCBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gZmVlZHMgLSBSZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgaW5wdXQuIFNlZSB0eXBlIGRlc2NyaXB0aW9uIG9mIGBJbmZlcmVuY2VTZXNzaW9uLklucHV0VHlwZWAgZm9yXG4gICBkZXRhaWwuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwuIEEgc2V0IG9mIG9wdGlvbnMgdGhhdCBjb250cm9scyB0aGUgYmVoYXZpb3Igb2YgbW9kZWwgdHJhaW5pbmcuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgbWFwLCB3aGljaCB1c2VzIG91dHB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgYXMgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAqL1xuICBydW5UcmFpblN0ZXAoZmVlZHM6IEluZmVyZW5jZVNlc3Npb24uRmVlZHNUeXBlLCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTpcbiAgICAgIFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbi5SZXR1cm5UeXBlPjtcblxuICAvKipcbiAgICogUnVuIGEgc2luZ2xlIHRyYWluIHN0ZXAgd2l0aCB0aGUgZ2l2ZW4gaW5wdXRzIGFuZCBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gZmVlZHMgLSBSZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgaW5wdXQuXG4gICAqIEBwYXJhbSBmZXRjaGVzIC0gUmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIG91dHB1dC5cbiAgICogZGV0YWlsLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsLiBBIHNldCBvZiBvcHRpb25zIHRoYXQgY29udHJvbHMgdGhlIGJlaGF2aW9yIG9mIG1vZGVsIHRyYWluaW5nLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIG1hcCwgd2hpY2ggdXNlcyBvdXRwdXQgbmFtZXMgYXMga2V5cyBhbmQgT25ueFZhbHVlIGFzIGNvcnJlc3BvbmRpbmdcbiAgIHZhbHVlcy5cbiAgICovXG4gIHJ1blRyYWluU3RlcChcbiAgICAgIGZlZWRzOiBJbmZlcmVuY2VTZXNzaW9uLkZlZWRzVHlwZSwgZmV0Y2hlczogSW5mZXJlbmNlU2Vzc2lvbi5GZXRjaGVzVHlwZSxcbiAgICAgIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb24uUmV0dXJuVHlwZT47XG5cbiAgLyoqXG4gICAqIFJ1bnMgYSBzaW5nbGUgb3B0aW1pemVyIHN0ZXAsIHdoaWNoIHBlcmZvcm1zIHdlaWdodCB1cGRhdGVzIGZvciB0aGUgdHJhaW5hYmxlIHBhcmFtZXRlcnMgdXNpbmcgdGhlIG9wdGltaXplciBtb2RlbC5cbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbC4gQSBzZXQgb2Ygb3B0aW9ucyB0aGF0IGNvbnRyb2xzIHRoZSBiZWhhdmlvciBvZiBtb2RlbCBvcHRpbWl6aW5nLlxuICAgKi9cbiAgcnVuT3B0aW1pemVyU3RlcChvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTx2b2lkPjtcblxuICAvKipcbiAgICogUnVuIGEgc2luZ2xlIGV2YWwgc3RlcCB3aXRoIHRoZSBnaXZlbiBpbnB1dHMgYW5kIG9wdGlvbnMgdXNpbmcgdGhlIGV2YWwgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBmZWVkcyAtIFJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBpbnB1dC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbC4gQSBzZXQgb2Ygb3B0aW9ucyB0aGF0IGNvbnRyb2xzIHRoZSBiZWhhdmlvciBvZiBtb2RlbCBldmFsIHN0ZXAuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgbWFwLCB3aGljaCB1c2VzIG91dHB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgYXMgY29ycmVzcG9uZGluZ1xuICAgdmFsdWVzLlxuICAgKi9cbiAgcnVuRXZhbFN0ZXAoZmVlZHM6IEluZmVyZW5jZVNlc3Npb24uRmVlZHNUeXBlLCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTpcbiAgICAgIFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbi5SZXR1cm5UeXBlPjtcblxuICAvKipcbiAgICogUnVuIGEgc2luZ2xlIGV2YWwgc3RlcCB3aXRoIHRoZSBnaXZlbiBpbnB1dHMgYW5kIG9wdGlvbnMgdXNpbmcgdGhlIGV2YWwgbW9kZWwuXG4gICAqXG4gICAqIEBwYXJhbSBmZWVkcyAtIFJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBpbnB1dC5cbiAgICogQHBhcmFtIGZldGNoZXMgLSBSZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgb3V0cHV0LlxuICAgKiBkZXRhaWwuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwuIEEgc2V0IG9mIG9wdGlvbnMgdGhhdCBjb250cm9scyB0aGUgYmVoYXZpb3Igb2YgbW9kZWwgZXZhbCBzdGVwLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIG1hcCwgd2hpY2ggdXNlcyBvdXRwdXQgbmFtZXMgYXMga2V5cyBhbmQgT25ueFZhbHVlIGFzIGNvcnJlc3BvbmRpbmdcbiAgIHZhbHVlcy5cbiAgICovXG4gIHJ1bkV2YWxTdGVwKFxuICAgICAgZmVlZHM6IEluZmVyZW5jZVNlc3Npb24uRmVlZHNUeXBlLCBmZXRjaGVzOiBJbmZlcmVuY2VTZXNzaW9uLkZldGNoZXNUeXBlLFxuICAgICAgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbi5SZXR1cm5UeXBlPjtcblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBjb3B5IHBhcmFtZXRlcnNcblxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBzaXplIG9mIGFsbCBwYXJhbWV0ZXJzIGZvciB0aGUgdHJhaW5pbmcgc3RhdGUuIENhbGN1bGF0ZXMgdGhlIHRvdGFsIG51bWJlciBvZiBwcmltaXRpdmUgKGRhdGF0eXBlIG9mXG4gICAqIHRoZSBwYXJhbWV0ZXJzKSBlbGVtZW50cyBvZiBhbGwgdGhlIHBhcmFtZXRlcnMgaW4gdGhlIHRyYWluaW5nIHN0YXRlLlxuICAgKlxuICAgKiBAcGFyYW0gdHJhaW5hYmxlT25seSAtIFdoZW4gc2V0IHRvIHRydWUsIHRoZSBzaXplIGlzIGNhbGN1bGF0ZWQgZm9yIHRyYWluYWJsZSBwYXJhbXMgb25seS4gRGVmYXVsdCB2YWx1ZSBpcyB0cnVlLlxuICAgKi9cbiAgZ2V0UGFyYW1ldGVyc1NpemUodHJhaW5hYmxlT25seTogYm9vbGVhbik6IFByb21pc2U8bnVtYmVyPjtcblxuICAvKipcbiAgICogQ29waWVzIHBhcmFtZXRlciB2YWx1ZXMgZnJvbSB0aGUgZ2l2ZW4gYXJyYXkgdG8gdGhlIHRyYWluaW5nIHN0YXRlLiBDdXJyZW50bHksIG9ubHkgc3VwcG9ydGluZyBtb2RlbHMgd2l0aFxuICAgKiBwYXJhbWV0ZXJzIG9mIHR5cGUgRmxvYXQzMi5cbiAgICpcbiAgICogQHBhcmFtIGJ1ZmZlciAtIEZsb2F0MzIgYnVmZmVyIGNvbnRhaW5pbmcgcGFyYW1ldGVycyBjb252ZXJ0ZWQgdG8gYSBVaW50OEFycmF5LlxuICAgKiBAcGFyYW0gdHJhaW5hYmxlT25seSAtIFRydWUgaWYgdHJhaW5hYmxlIHBhcmFtZXRlcnMgb25seSB0byBiZSBtb2RpZmllZCwgZmFsc2Ugb3RoZXJ3aXNlLiBEZWZhdWx0IHZhbHVlIGlzIHRydWUuXG4gICAqL1xuICBsb2FkUGFyYW1ldGVyc0J1ZmZlcihhcnJheTogVWludDhBcnJheSwgdHJhaW5hYmxlT25seTogYm9vbGVhbik6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIENvcGllcyB0aGUgbW9kZWwgcGFyYW1ldGVycyB0byBhIGNvbnRpZ3VvdXMgYnVmZmVyLiBVc3VhbGx5IHVzZWQgaW4gdGhlIGNvbnRleHQgb2YgRmVkZXJhdGVkIExlYXJuaW5nLlxuICAgKiBDdXJyZW50bHksIG9ubHkgc3VwcG9ydGluZyBtb2RlbHMgd2l0aCBwYXJhbWV0ZXJzIG9mIHR5cGUgRmxvYXQzMi5cbiAgICpcbiAgICogQHBhcmFtIHRyYWluYWJsZU9ubHkgLSBXaGVuIHNldCB0byB0cnVlLCBvbmx5IHRyYWluYWJsZSBwYXJhbWV0ZXJzIGFyZSBjb3BpZWQuIFRyYWluYWJsZSBwYXJhbWV0ZXJzIGFyZSBwYXJhbWV0ZXJzXG4gICAqIGZvciB3aGljaCByZXF1aXJlc19ncmFkIGlzIHNldCB0byB0cnVlLiBEZWZhdWx0IHZhbHVlIGlzIHRydWUuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgRmxvYXQzMiBPbm54VmFsdWUgb2YgdGhlIHJlcXVlc3RlZCBwYXJhbWV0ZXJzLlxuICAgKi9cbiAgZ2V0Q29udGlndW91c1BhcmFtZXRlcnModHJhaW5hYmxlT25seTogYm9vbGVhbik6IFByb21pc2U8T25ueFZhbHVlPjtcbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gcmVsZWFzZSgpXG5cbiAgLyoqXG4gICAqIFJlbGVhc2UgdGhlIGluZmVyZW5jZSBzZXNzaW9uIGFuZCB0aGUgdW5kZXJseWluZyByZXNvdXJjZXMuXG4gICAqL1xuICByZWxlYXNlKCk6IFByb21pc2U8dm9pZD47XG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIG1ldGFkYXRhXG5cbiAgLyoqXG4gICAqIEdldCBpbnB1dCBuYW1lcyBvZiB0aGUgbG9hZGVkIHRyYWluaW5nIG1vZGVsLlxuICAgKi9cbiAgcmVhZG9ubHkgdHJhaW5pbmdJbnB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcblxuICAvKipcbiAgICogR2V0IG91dHB1dCBuYW1lcyBvZiB0aGUgbG9hZGVkIHRyYWluaW5nIG1vZGVsLlxuICAgKi9cbiAgcmVhZG9ubHkgdHJhaW5pbmdPdXRwdXROYW1lczogcmVhZG9ubHkgc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIEdldCBpbnB1dCBuYW1lcyBvZiB0aGUgbG9hZGVkIGV2YWwgbW9kZWwuIElzIGFuIGVtcHR5IGFycmF5IGlmIG5vIGV2YWwgbW9kZWwgaXMgbG9hZGVkLlxuICAgKi9cbiAgcmVhZG9ubHkgZXZhbElucHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBHZXQgb3V0cHV0IG5hbWVzIG9mIHRoZSBsb2FkZWQgZXZhbCBtb2RlbC4gSXMgYW4gZW1wdHkgYXJyYXkgaWYgbm8gZXZhbCBtb2RlbCBpcyBsb2FkZWQuXG4gICAqL1xuICByZWFkb25seSBldmFsT3V0cHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xuXG4gIC8vICNlbmRyZWdpb25cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBvcHRpb25hbCBwYXJhbWV0ZXJzIHRoYXQgY2FuIGJlIHBhc3NlZCBpbnRvIHRoZSBUcmFpbmluZ1Nlc3Npb25GYWN0b3J5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRyYWluaW5nU2Vzc2lvbkNyZWF0ZU9wdGlvbnMge1xuICAvKipcbiAgICogVVJJIG9yIGJ1ZmZlciBmb3IgYSAuY2twdCBmaWxlIHRoYXQgY29udGFpbnMgdGhlIGNoZWNrcG9pbnQgZm9yIHRoZSB0cmFpbmluZyBtb2RlbC5cbiAgICovXG4gIGNoZWNrcG9pbnRTdGF0ZTogVHJhaW5pbmdTZXNzaW9uLlVSSW9yQnVmZmVyO1xuICAvKipcbiAgICogVVJJIG9yIGJ1ZmZlciBmb3IgdGhlIC5vbm54IHRyYWluaW5nIGZpbGUuXG4gICAqL1xuICB0cmFpbk1vZGVsOiBUcmFpbmluZ1Nlc3Npb24uVVJJb3JCdWZmZXI7XG4gIC8qKlxuICAgKiBPcHRpb25hbC4gVVJJIG9yIGJ1ZmZlciBmb3IgdGhlIC5vbm54IG9wdGltaXplciBtb2RlbCBmaWxlLlxuICAgKi9cbiAgb3B0aW1pemVyTW9kZWw/OiBUcmFpbmluZ1Nlc3Npb24uVVJJb3JCdWZmZXI7XG4gIC8qKlxuICAgKiBPcHRpb25hbC4gVVJJIG9yIGJ1ZmZlciBmb3IgdGhlIC5vbm54IGV2YWwgbW9kZWwgZmlsZS5cbiAgICovXG4gIGV2YWxNb2RlbD86IFRyYWluaW5nU2Vzc2lvbi5VUklvckJ1ZmZlcjtcbn1cblxuLyoqXG4gKiBEZWZpbmVzIG1ldGhvZCBvdmVybG9hZCBwb3NzaWJpbGl0aWVzIGZvciBjcmVhdGluZyBhIFRyYWluaW5nU2Vzc2lvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFpbmluZ1Nlc3Npb25GYWN0b3J5IHtcbiAgLy8gI3JlZ2lvbiBjcmVhdGUoKVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFRyYWluaW5nU2Vzc2lvbiBhbmQgYXN5bmNocm9ub3VzbHkgbG9hZHMgYW55IG1vZGVscyBwYXNzZWQgaW4gdGhyb3VnaCB0cmFpbmluZ09wdGlvbnNcbiAgICpcbiAgICogQHBhcmFtIHRyYWluaW5nT3B0aW9ucyBzcGVjaWZ5IG1vZGVscyBhbmQgY2hlY2twb2ludHMgdG8gbG9hZCBpbnRvIHRoZSBUcmFpbmluZyBTZXNzaW9uXG4gICAqIEBwYXJhbSBzZXNzaW9uT3B0aW9ucyBzcGVjaWZ5IGNvbmZpZ3VyYXRpb24gZm9yIHRyYWluaW5nIHNlc3Npb24gYmVoYXZpb3JcbiAgICpcbiAgICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgVHJhaW5pbmdTZXNzaW9uIG9iamVjdFxuICAgKi9cbiAgY3JlYXRlKHRyYWluaW5nT3B0aW9uczogVHJhaW5pbmdTZXNzaW9uQ3JlYXRlT3B0aW9ucywgc2Vzc2lvbk9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTpcbiAgICAgIFByb21pc2U8VHJhaW5pbmdTZXNzaW9uPjtcblxuICAvLyAjZW5kcmVnaW9uXG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBjb25zdCBUcmFpbmluZ1Nlc3Npb246IFRyYWluaW5nU2Vzc2lvbkZhY3RvcnkgPSBUcmFpbmluZ1Nlc3Npb25JbXBsO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG4vKipcbiAqICMgT05OWCBSdW50aW1lIEphdmFTY3JpcHQgQVBJXG4gKlxuICogT05OWCBSdW50aW1lIEphdmFTY3JpcHQgQVBJIGlzIGEgdW5pZmllZCBBUEkgZm9yIGFsbCBKYXZhU2NyaXB0IHVzYWdlcywgaW5jbHVkaW5nIHRoZSBmb2xsb3dpbmcgTlBNIHBhY2thZ2VzOlxuICpcbiAqIC0gW29ubnhydW50aW1lLW5vZGVdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL29ubnhydW50aW1lLW5vZGUpXG4gKiAtIFtvbm54cnVudGltZS13ZWJdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL29ubnhydW50aW1lLXdlYilcbiAqIC0gW29ubnhydW50aW1lLXJlYWN0LW5hdGl2ZV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvb25ueHJ1bnRpbWUtcmVhY3QtbmF0aXZlKVxuICpcbiAqIFNlZSBhbHNvOlxuICogLSBbR2V0IFN0YXJ0ZWRdKGh0dHBzOi8vb25ueHJ1bnRpbWUuYWkvZG9jcy9nZXQtc3RhcnRlZC93aXRoLWphdmFzY3JpcHQuaHRtbClcbiAqIC0gW0luZmVyZW5jZSBleGFtcGxlc10oaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9vbm54cnVudGltZS1pbmZlcmVuY2UtZXhhbXBsZXMvdHJlZS9tYWluL2pzKVxuICpcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICovXG5cbmV4cG9ydCAqIGZyb20gJy4vYmFja2VuZC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2Vudi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2luZmVyZW5jZS1zZXNzaW9uLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdGVuc29yLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHJhY2UuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9vbm54LXZhbHVlLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHJhaW5pbmctc2Vzc2lvbi5qcyc7XG4iLCAiZXhwb3J0IGNvbnN0IGNwdXMgPSB1bmRlZmluZWQ7IiwgImV4cG9ydCBjb25zdCBqb2luID0gdW5kZWZpbmVkOyIsICJleHBvcnQgY29uc3QgcmVhZEZpbGUgPSB1bmRlZmluZWQ7IiwgImV4cG9ydCBjb25zdCBqb2luID0gdW5kZWZpbmVkOyIsICJcbnZhciBvcnRXYXNtID0gKCgpID0+IHtcbiAgdmFyIF9zY3JpcHREaXIgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyA6IHVuZGVmaW5lZDtcbiAgaWYgKHR5cGVvZiBfX2ZpbGVuYW1lICE9PSAndW5kZWZpbmVkJykgX3NjcmlwdERpciA9IF9zY3JpcHREaXIgfHwgX19maWxlbmFtZTtcbiAgcmV0dXJuIChcbmZ1bmN0aW9uKG1vZHVsZUFyZyA9IHt9KSB7XG5cbnZhciBoPW1vZHVsZUFyZyxhYSxiYTtoLnJlYWR5PW5ldyBQcm9taXNlKChhLGIpPT57YWE9YTtiYT1ifSk7dmFyIGNhPU9iamVjdC5hc3NpZ24oe30saCksZGE9XCIuL3RoaXMucHJvZ3JhbVwiLGVhPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3csbT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpbXBvcnRTY3JpcHRzLGZhPVwib2JqZWN0XCI9PXR5cGVvZiBwcm9jZXNzJiZcIm9iamVjdFwiPT10eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyYmXCJzdHJpbmdcIj09dHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSxwPVwiXCIsaGEsdCx3O1xuaWYoZmEpe3ZhciBmcz1yZXF1aXJlKFwiZnNcIiksaWE9cmVxdWlyZShcInBhdGhcIik7cD1tP2lhLmRpcm5hbWUocCkrXCIvXCI6X19kaXJuYW1lK1wiL1wiO2hhPShhLGIpPT57YT1hLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpP25ldyBVUkwoYSk6aWEubm9ybWFsaXplKGEpO3JldHVybiBmcy5yZWFkRmlsZVN5bmMoYSxiP3ZvaWQgMDpcInV0ZjhcIil9O3c9YT0+e2E9aGEoYSwhMCk7YS5idWZmZXJ8fChhPW5ldyBVaW50OEFycmF5KGEpKTtyZXR1cm4gYX07dD0oYSxiLGMsZD0hMCk9PnthPWEuc3RhcnRzV2l0aChcImZpbGU6Ly9cIik/bmV3IFVSTChhKTppYS5ub3JtYWxpemUoYSk7ZnMucmVhZEZpbGUoYSxkP3ZvaWQgMDpcInV0ZjhcIiwoZSxnKT0+e2U/YyhlKTpiKGQ/Zy5idWZmZXI6Zyl9KX07IWgudGhpc1Byb2dyYW0mJjE8cHJvY2Vzcy5hcmd2Lmxlbmd0aCYmKGRhPXByb2Nlc3MuYXJndlsxXS5yZXBsYWNlKC9cXFxcL2csXCIvXCIpKTtwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7aC5pbnNwZWN0PSgpPT5cIltFbXNjcmlwdGVuIE1vZHVsZSBvYmplY3RdXCJ9ZWxzZSBpZihlYXx8XG5tKW0/cD1zZWxmLmxvY2F0aW9uLmhyZWY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50JiZkb2N1bWVudC5jdXJyZW50U2NyaXB0JiYocD1kb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyksX3NjcmlwdERpciYmKHA9X3NjcmlwdERpciksMCE9PXAuaW5kZXhPZihcImJsb2I6XCIpP3A9cC5zdWJzdHIoMCxwLnJlcGxhY2UoL1s/I10uKi8sXCJcIikubGFzdEluZGV4T2YoXCIvXCIpKzEpOnA9XCJcIixoYT1hPT57dmFyIGI9bmV3IFhNTEh0dHBSZXF1ZXN0O2Iub3BlbihcIkdFVFwiLGEsITEpO2Iuc2VuZChudWxsKTtyZXR1cm4gYi5yZXNwb25zZVRleHR9LG0mJih3PWE9Pnt2YXIgYj1uZXcgWE1MSHR0cFJlcXVlc3Q7Yi5vcGVuKFwiR0VUXCIsYSwhMSk7Yi5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiO2Iuc2VuZChudWxsKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYi5yZXNwb25zZSl9KSx0PShhLGIsYyk9Pnt2YXIgZD1uZXcgWE1MSHR0cFJlcXVlc3Q7ZC5vcGVuKFwiR0VUXCIsYSwhMCk7ZC5yZXNwb25zZVR5cGU9XG5cImFycmF5YnVmZmVyXCI7ZC5vbmxvYWQ9KCk9PnsyMDA9PWQuc3RhdHVzfHwwPT1kLnN0YXR1cyYmZC5yZXNwb25zZT9iKGQucmVzcG9uc2UpOmMoKX07ZC5vbmVycm9yPWM7ZC5zZW5kKG51bGwpfTt2YXIgamE9Y29uc29sZS5sb2cuYmluZChjb25zb2xlKSx4PWNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlKTtPYmplY3QuYXNzaWduKGgsY2EpO2NhPW51bGw7XCJvYmplY3RcIiE9dHlwZW9mIFdlYkFzc2VtYmx5JiZrYShcIm5vIG5hdGl2ZSB3YXNtIHN1cHBvcnQgZGV0ZWN0ZWRcIik7dmFyIHosbGE9ITEsQSxCLEMsRCxFLEcsbWEsbmEsb2EscGE7XG5mdW5jdGlvbiBxYSgpe3ZhciBhPXouYnVmZmVyO2guSEVBUDg9QT1uZXcgSW50OEFycmF5KGEpO2guSEVBUDE2PUM9bmV3IEludDE2QXJyYXkoYSk7aC5IRUFQVTg9Qj1uZXcgVWludDhBcnJheShhKTtoLkhFQVBVMTY9RD1uZXcgVWludDE2QXJyYXkoYSk7aC5IRUFQMzI9RT1uZXcgSW50MzJBcnJheShhKTtoLkhFQVBVMzI9Rz1uZXcgVWludDMyQXJyYXkoYSk7aC5IRUFQRjMyPW1hPW5ldyBGbG9hdDMyQXJyYXkoYSk7aC5IRUFQRjY0PXBhPW5ldyBGbG9hdDY0QXJyYXkoYSk7aC5IRUFQNjQ9bmE9bmV3IEJpZ0ludDY0QXJyYXkoYSk7aC5IRUFQVTY0PW9hPW5ldyBCaWdVaW50NjRBcnJheShhKX12YXIgcmE9W10sc2E9W10sdGE9W10sST0wLHVhPW51bGwsSj1udWxsO1xuZnVuY3Rpb24ga2EoYSl7YT1cIkFib3J0ZWQoXCIrYStcIilcIjt4KGEpO2xhPSEwO2E9bmV3IFdlYkFzc2VtYmx5LlJ1bnRpbWVFcnJvcihhK1wiLiBCdWlsZCB3aXRoIC1zQVNTRVJUSU9OUyBmb3IgbW9yZSBpbmZvLlwiKTtiYShhKTt0aHJvdyBhO31mdW5jdGlvbiB2YShhKXtyZXR1cm4gYS5zdGFydHNXaXRoKFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiKX12YXIgSztLPVwib3J0LXdhc20ud2FzbVwiO2lmKCF2YShLKSl7dmFyIHdhPUs7Sz1oLmxvY2F0ZUZpbGU/aC5sb2NhdGVGaWxlKHdhLHApOnArd2F9ZnVuY3Rpb24geGEoYSl7aWYodylyZXR1cm4gdyhhKTt0aHJvd1wiYm90aCBhc3luYyBhbmQgc3luYyBmZXRjaGluZyBvZiB0aGUgd2FzbSBmYWlsZWRcIjt9XG5mdW5jdGlvbiB5YShhKXtpZihlYXx8bSl7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZmV0Y2gmJiFhLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpKXJldHVybiBmZXRjaChhLHtjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCJ9KS50aGVuKGI9PntpZighYi5vayl0aHJvd1wiZmFpbGVkIHRvIGxvYWQgd2FzbSBiaW5hcnkgZmlsZSBhdCAnXCIrYStcIidcIjtyZXR1cm4gYi5hcnJheUJ1ZmZlcigpfSkuY2F0Y2goKCk9PnhhKGEpKTtpZih0KXJldHVybiBuZXcgUHJvbWlzZSgoYixjKT0+e3QoYSxkPT5iKG5ldyBVaW50OEFycmF5KGQpKSxjKX0pfXJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpPT54YShhKSl9ZnVuY3Rpb24gemEoYSxiLGMpe3JldHVybiB5YShhKS50aGVuKGQ9PldlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGQsYikpLnRoZW4oZD0+ZCkudGhlbihjLGQ9Pnt4KGBmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiAke2R9YCk7a2EoZCl9KX1cbmZ1bmN0aW9uIEFhKGEsYil7dmFyIGM9SztyZXR1cm5cImZ1bmN0aW9uXCIhPXR5cGVvZiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZ3x8dmEoYyl8fGMuc3RhcnRzV2l0aChcImZpbGU6Ly9cIil8fGZhfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBmZXRjaD96YShjLGEsYik6ZmV0Y2goYyx7Y3JlZGVudGlhbHM6XCJzYW1lLW9yaWdpblwifSkudGhlbihkPT5XZWJBc3NlbWJseS5pbnN0YW50aWF0ZVN0cmVhbWluZyhkLGEpLnRoZW4oYixmdW5jdGlvbihlKXt4KGB3YXNtIHN0cmVhbWluZyBjb21waWxlIGZhaWxlZDogJHtlfWApO3goXCJmYWxsaW5nIGJhY2sgdG8gQXJyYXlCdWZmZXIgaW5zdGFudGlhdGlvblwiKTtyZXR1cm4gemEoYyxhLGIpfSkpfVxuZnVuY3Rpb24gQmEoYSl7dGhpcy5WYT1hLTI0O3RoaXMuZmI9ZnVuY3Rpb24oYil7R1t0aGlzLlZhKzQ+Pj4yPj4+MF09Yn07dGhpcy5lYj1mdW5jdGlvbihiKXtHW3RoaXMuVmErOD4+PjI+Pj4wXT1ifTt0aGlzLlphPWZ1bmN0aW9uKGIsYyl7dGhpcy4kYSgpO3RoaXMuZmIoYik7dGhpcy5lYihjKX07dGhpcy4kYT1mdW5jdGlvbigpe0dbdGhpcy5WYSsxNj4+PjI+Pj4wXT0wfX1cbnZhciBDYT0wLERhPTAsRWE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFRleHREZWNvZGVyP25ldyBUZXh0RGVjb2RlcihcInV0ZjhcIik6dm9pZCAwLEZhPShhLGIsYyk9PntiPj4+PTA7dmFyIGQ9YitjO2ZvcihjPWI7YVtjXSYmIShjPj1kKTspKytjO2lmKDE2PGMtYiYmYS5idWZmZXImJkVhKXJldHVybiBFYS5kZWNvZGUoYS5zdWJhcnJheShiLGMpKTtmb3IoZD1cIlwiO2I8Yzspe3ZhciBlPWFbYisrXTtpZihlJjEyOCl7dmFyIGc9YVtiKytdJjYzO2lmKDE5Mj09KGUmMjI0KSlkKz1TdHJpbmcuZnJvbUNoYXJDb2RlKChlJjMxKTw8NnxnKTtlbHNle3ZhciBsPWFbYisrXSY2MztlPTIyND09KGUmMjQwKT8oZSYxNSk8PDEyfGc8PDZ8bDooZSY3KTw8MTh8Zzw8MTJ8bDw8NnxhW2IrK10mNjM7NjU1MzY+ZT9kKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGUpOihlLT02NTUzNixkKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fGU+PjEwLDU2MzIwfGUmMTAyMykpfX1lbHNlIGQrPVN0cmluZy5mcm9tQ2hhckNvZGUoZSl9cmV0dXJuIGR9LFxuTD0oYSxiKT0+KGE+Pj49MCk/RmEoQixhLGIpOlwiXCIsTT1hPT57Zm9yKHZhciBiPTAsYz0wO2M8YS5sZW5ndGg7KytjKXt2YXIgZD1hLmNoYXJDb2RlQXQoYyk7MTI3Pj1kP2IrKzoyMDQ3Pj1kP2IrPTI6NTUyOTY8PWQmJjU3MzQzPj1kPyhiKz00LCsrYyk6Yis9M31yZXR1cm4gYn0sTj0oYSxiLGMsZCk9PntjPj4+PTA7aWYoISgwPGQpKXJldHVybiAwO3ZhciBlPWM7ZD1jK2QtMTtmb3IodmFyIGc9MDtnPGEubGVuZ3RoOysrZyl7dmFyIGw9YS5jaGFyQ29kZUF0KGcpO2lmKDU1Mjk2PD1sJiY1NzM0Mz49bCl7dmFyIGs9YS5jaGFyQ29kZUF0KCsrZyk7bD02NTUzNisoKGwmMTAyMyk8PDEwKXxrJjEwMjN9aWYoMTI3Pj1sKXtpZihjPj1kKWJyZWFrO2JbYysrPj4+MF09bH1lbHNle2lmKDIwNDc+PWwpe2lmKGMrMT49ZClicmVhaztiW2MrKz4+PjBdPTE5MnxsPj42fWVsc2V7aWYoNjU1MzU+PWwpe2lmKGMrMj49ZClicmVhaztiW2MrKz4+PjBdPTIyNHxsPj4xMn1lbHNle2lmKGMrMz49XG5kKWJyZWFrO2JbYysrPj4+MF09MjQwfGw+PjE4O2JbYysrPj4+MF09MTI4fGw+PjEyJjYzfWJbYysrPj4+MF09MTI4fGw+PjYmNjN9YltjKys+Pj4wXT0xMjh8bCY2M319YltjPj4+MF09MDtyZXR1cm4gYy1lfSxHYT1hPT57aWYobnVsbD09PWEpcmV0dXJuXCJudWxsXCI7dmFyIGI9dHlwZW9mIGE7cmV0dXJuXCJvYmplY3RcIj09PWJ8fFwiYXJyYXlcIj09PWJ8fFwiZnVuY3Rpb25cIj09PWI/YS50b1N0cmluZygpOlwiXCIrYX0sSGEsTz1hPT57Zm9yKHZhciBiPVwiXCI7QlthPj4+MF07KWIrPUhhW0JbYSsrPj4+MF1dO3JldHVybiBifSxJYT17fSxKYT17fSxLYT17fSxQO1xuZnVuY3Rpb24gTGEoYSxiLGM9e30pe3ZhciBkPWIubmFtZTtpZighYSl0aHJvdyBuZXcgUChgdHlwZSBcIiR7ZH1cIiBtdXN0IGhhdmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIHR5cGVpZCBwb2ludGVyYCk7aWYoSmEuaGFzT3duUHJvcGVydHkoYSkpe2lmKGMuZ2IpcmV0dXJuO3Rocm93IG5ldyBQKGBDYW5ub3QgcmVnaXN0ZXIgdHlwZSAnJHtkfScgdHdpY2VgKTt9SmFbYV09YjtkZWxldGUgS2FbYV07SWEuaGFzT3duUHJvcGVydHkoYSkmJihiPUlhW2FdLGRlbGV0ZSBJYVthXSxiLmZvckVhY2goZT0+ZSgpKSl9ZnVuY3Rpb24gUShhLGIsYz17fSl7aWYoIShcImFyZ1BhY2tBZHZhbmNlXCJpbiBiKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwicmVnaXN0ZXJUeXBlIHJlZ2lzdGVyZWRJbnN0YW5jZSByZXF1aXJlcyBhcmdQYWNrQWR2YW5jZVwiKTtMYShhLGIsYyl9XG52YXIgTWE9KGEsYixjKT0+e3N3aXRjaChiKXtjYXNlIDE6cmV0dXJuIGM/ZD0+QVtkPj4+MD4+PjBdOmQ9PkJbZD4+PjA+Pj4wXTtjYXNlIDI6cmV0dXJuIGM/ZD0+Q1tkPj4+MT4+PjBdOmQ9PkRbZD4+PjE+Pj4wXTtjYXNlIDQ6cmV0dXJuIGM/ZD0+RVtkPj4+Mj4+PjBdOmQ9PkdbZD4+PjI+Pj4wXTtjYXNlIDg6cmV0dXJuIGM/ZD0+bmFbZD4+PjNdOmQ9Pm9hW2Q+Pj4zXTtkZWZhdWx0OnRocm93IG5ldyBUeXBlRXJyb3IoYGludmFsaWQgaW50ZWdlciB3aWR0aCAoJHtifSk6ICR7YX1gKTt9fTtmdW5jdGlvbiBOYSgpe3RoaXMuU2E9W3ZvaWQgMF07dGhpcy5iYj1bXX12YXIgUj1uZXcgTmE7ZnVuY3Rpb24gT2EoYSl7YT4+Pj0wO2E+PVIuVmEmJjA9PT0tLVIuZ2V0KGEpLmNiJiZSLiRhKGEpfVxudmFyIFM9YT0+e2lmKCFhKXRocm93IG5ldyBQKFwiQ2Fubm90IHVzZSBkZWxldGVkIHZhbC4gaGFuZGxlID0gXCIrYSk7cmV0dXJuIFIuZ2V0KGEpLnZhbHVlfSxUPWE9Pntzd2l0Y2goYSl7Y2FzZSB2b2lkIDA6cmV0dXJuIDE7Y2FzZSBudWxsOnJldHVybiAyO2Nhc2UgITA6cmV0dXJuIDM7Y2FzZSAhMTpyZXR1cm4gNDtkZWZhdWx0OnJldHVybiBSLlphKHtjYjoxLHZhbHVlOmF9KX19O2Z1bmN0aW9uIFBhKGEpe3JldHVybiB0aGlzLmZyb21XaXJlVHlwZShFW2E+Pj4yPj4+MF0pfXZhciBRYT0oYSxiKT0+e3N3aXRjaChiKXtjYXNlIDQ6cmV0dXJuIGZ1bmN0aW9uKGMpe3JldHVybiB0aGlzLmZyb21XaXJlVHlwZShtYVtjPj4+Mj4+PjBdKX07Y2FzZSA4OnJldHVybiBmdW5jdGlvbihjKXtyZXR1cm4gdGhpcy5mcm9tV2lyZVR5cGUocGFbYz4+PjM+Pj4wXSl9O2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcihgaW52YWxpZCBmbG9hdCB3aWR0aCAoJHtifSk6ICR7YX1gKTt9fTtcbmZ1bmN0aW9uIFJhKGEpe3JldHVybiB0aGlzLmZyb21XaXJlVHlwZShHW2E+Pj4yPj4+MF0pfVxudmFyIFNhPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBUZXh0RGVjb2Rlcj9uZXcgVGV4dERlY29kZXIoXCJ1dGYtMTZsZVwiKTp2b2lkIDAsVGE9KGEsYik9Pnt2YXIgYz1hPj4xO2Zvcih2YXIgZD1jK2IvMjshKGM+PWQpJiZEW2M+Pj4wXTspKytjO2M8PD0xO2lmKDMyPGMtYSYmU2EpcmV0dXJuIFNhLmRlY29kZShCLnN1YmFycmF5KGE+Pj4wLGM+Pj4wKSk7Yz1cIlwiO2ZvcihkPTA7IShkPj1iLzIpOysrZCl7dmFyIGU9Q1thKzIqZD4+PjE+Pj4wXTtpZigwPT1lKWJyZWFrO2MrPVN0cmluZy5mcm9tQ2hhckNvZGUoZSl9cmV0dXJuIGN9LFVhPShhLGIsYyk9Pnt2b2lkIDA9PT1jJiYoYz0yMTQ3NDgzNjQ3KTtpZigyPmMpcmV0dXJuIDA7Yy09Mjt2YXIgZD1iO2M9YzwyKmEubGVuZ3RoP2MvMjphLmxlbmd0aDtmb3IodmFyIGU9MDtlPGM7KytlKUNbYj4+PjE+Pj4wXT1hLmNoYXJDb2RlQXQoZSksYis9MjtDW2I+Pj4xPj4+MF09MDtyZXR1cm4gYi1kfSxWYT1hPT4yKmEubGVuZ3RoLFdhPShhLGIpPT5cbntmb3IodmFyIGM9MCxkPVwiXCI7IShjPj1iLzQpOyl7dmFyIGU9RVthKzQqYz4+PjI+Pj4wXTtpZigwPT1lKWJyZWFrOysrYzs2NTUzNjw9ZT8oZS09NjU1MzYsZCs9U3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NnxlPj4xMCw1NjMyMHxlJjEwMjMpKTpkKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGUpfXJldHVybiBkfSxYYT0oYSxiLGMpPT57Yj4+Pj0wO3ZvaWQgMD09PWMmJihjPTIxNDc0ODM2NDcpO2lmKDQ+YylyZXR1cm4gMDt2YXIgZD1iO2M9ZCtjLTQ7Zm9yKHZhciBlPTA7ZTxhLmxlbmd0aDsrK2Upe3ZhciBnPWEuY2hhckNvZGVBdChlKTtpZig1NTI5Njw9ZyYmNTczNDM+PWcpe3ZhciBsPWEuY2hhckNvZGVBdCgrK2UpO2c9NjU1MzYrKChnJjEwMjMpPDwxMCl8bCYxMDIzfUVbYj4+PjI+Pj4wXT1nO2IrPTQ7aWYoYis0PmMpYnJlYWt9RVtiPj4+Mj4+PjBdPTA7cmV0dXJuIGItZH0sWWE9YT0+e2Zvcih2YXIgYj0wLGM9MDtjPGEubGVuZ3RoOysrYyl7dmFyIGQ9YS5jaGFyQ29kZUF0KGMpO1xuNTUyOTY8PWQmJjU3MzQzPj1kJiYrK2M7Yis9NH1yZXR1cm4gYn0sVj0oYSxiKT0+e3ZhciBjPUphW2FdO2lmKHZvaWQgMD09PWMpdGhyb3cgYT1aYShhKSxjPU8oYSksVShhKSxuZXcgUChiK1wiIGhhcyB1bmtub3duIHR5cGUgXCIrYyk7cmV0dXJuIGN9LCRhPXt9LFc9YT0+e3ZhciBiPSRhW2FdO3JldHVybiB2b2lkIDA9PT1iP08oYSk6Yn0sWD1bXSxiYj0oKT0+XCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCksY2I9YT0+e3ZhciBiPVgubGVuZ3RoO1gucHVzaChhKTtyZXR1cm4gYn0sZGI9KGEsYik9Pntmb3IodmFyIGM9QXJyYXkoYSksZD0wO2Q8YTsrK2QpY1tkXT1WKEdbYis0KmQ+Pj4yPj4+MF0sXCJwYXJhbWV0ZXIgXCIrZCk7cmV0dXJuIGN9LGViPWE9PntpZih2b2lkIDA9PT1hKXJldHVyblwiX3Vua25vd25cIjthPWEucmVwbGFjZSgvW15hLXpBLVowLTlfXS9nLFwiJFwiKTt2YXIgYj1hLmNoYXJDb2RlQXQoMCk7cmV0dXJuIDQ4PD1cbmImJjU3Pj1iP2BfJHthfWA6YX0sZmI9e307ZnVuY3Rpb24gZ2IoYSxiKXthPWViKGEpO3JldHVybntbYV06ZnVuY3Rpb24oKXtyZXR1cm4gYi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fVthXX1mdW5jdGlvbiBoYihhKXt2YXIgYj1GdW5jdGlvbjtpZighKGIgaW5zdGFuY2VvZiBGdW5jdGlvbikpdGhyb3cgbmV3IFR5cGVFcnJvcihgbmV3XyBjYWxsZWQgd2l0aCBjb25zdHJ1Y3RvciB0eXBlICR7dHlwZW9mIGJ9IHdoaWNoIGlzIG5vdCBhIGZ1bmN0aW9uYCk7dmFyIGM9Z2IoYi5uYW1lfHxcInVua25vd25GdW5jdGlvbk5hbWVcIixmdW5jdGlvbigpe30pO2MucHJvdG90eXBlPWIucHJvdG90eXBlO2M9bmV3IGM7YT1iLmFwcGx5KGMsYSk7cmV0dXJuIGEgaW5zdGFuY2VvZiBPYmplY3Q/YTpjfVxudmFyIGliPWE9Pntmb3IodmFyIGI9XCJcIixjPTA7YzxhOysrYyliKz0oMCE9PWM/XCIsIFwiOlwiXCIpK1wiYXJnXCIrYzt2YXIgZD1cInJldHVybiBmdW5jdGlvbiBlbXZhbF9hbGxvY2F0b3JfXCIrYStcIihjb25zdHJ1Y3RvciwgYXJnVHlwZXMsIGFyZ3MpIHtcXG4gIHZhciBIRUFQVTMyID0gZ2V0TWVtb3J5KCk7XFxuXCI7Zm9yKGM9MDtjPGE7KytjKWQrPVwidmFyIGFyZ1R5cGVcIitjK1wiID0gcmVxdWlyZVJlZ2lzdGVyZWRUeXBlKEhFQVBVMzJbKChhcmdUeXBlcyk+Pj4yKV0sICdwYXJhbWV0ZXIgXCIrYytcIicpO1xcbnZhciBhcmdcIitjK1wiID0gYXJnVHlwZVwiK2MrXCIucmVhZFZhbHVlRnJvbVBvaW50ZXIoYXJncyk7XFxuYXJncyArPSBhcmdUeXBlXCIrYytcIlsnYXJnUGFja0FkdmFuY2UnXTtcXG5hcmdUeXBlcyArPSA0O1xcblwiO3JldHVybihuZXcgRnVuY3Rpb24oXCJyZXF1aXJlUmVnaXN0ZXJlZFR5cGVcIixcIk1vZHVsZVwiLFwidmFsdWVUb0hhbmRsZVwiLFwiZ2V0TWVtb3J5XCIsZCsoXCJ2YXIgb2JqID0gbmV3IGNvbnN0cnVjdG9yKFwiK1xuYitcIik7XFxucmV0dXJuIHZhbHVlVG9IYW5kbGUob2JqKTtcXG59XFxuXCIpKSkoVixoLFQsKCk9PkcpfSxqYj17fSxZPWE9PjA9PT1hJTQmJigwIT09YSUxMDB8fDA9PT1hJTQwMCksa2I9WzAsMzEsNjAsOTEsMTIxLDE1MiwxODIsMjEzLDI0NCwyNzQsMzA1LDMzNV0sbGI9WzAsMzEsNTksOTAsMTIwLDE1MSwxODEsMjEyLDI0MywyNzMsMzA0LDMzNF0sbmI9YT0+e3ZhciBiPU0oYSkrMSxjPW1iKGIpO2MmJk4oYSxCLGMsYik7cmV0dXJuIGN9LG9iPXt9LHFiPSgpPT57aWYoIXBiKXt2YXIgYT17VVNFUjpcIndlYl91c2VyXCIsTE9HTkFNRTpcIndlYl91c2VyXCIsUEFUSDpcIi9cIixQV0Q6XCIvXCIsSE9NRTpcIi9ob21lL3dlYl91c2VyXCIsTEFORzooXCJvYmplY3RcIj09dHlwZW9mIG5hdmlnYXRvciYmbmF2aWdhdG9yLmxhbmd1YWdlcyYmbmF2aWdhdG9yLmxhbmd1YWdlc1swXXx8XCJDXCIpLnJlcGxhY2UoXCItXCIsXCJfXCIpK1wiLlVURi04XCIsXzpkYXx8XCIuL3RoaXMucHJvZ3JhbVwifSxiO2ZvcihiIGluIG9iKXZvaWQgMD09PVxub2JbYl0/ZGVsZXRlIGFbYl06YVtiXT1vYltiXTt2YXIgYz1bXTtmb3IoYiBpbiBhKWMucHVzaChgJHtifT0ke2FbYl19YCk7cGI9Y31yZXR1cm4gcGJ9LHBiLHJiPVtudWxsLFtdLFtdXSxzYj1bMzEsMjksMzEsMzAsMzEsMzAsMzEsMzEsMzAsMzEsMzAsMzFdLHRiPVszMSwyOCwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV07ZnVuY3Rpb24gdWIoYSl7dmFyIGI9QXJyYXkoTShhKSsxKTtOKGEsYiwwLGIubGVuZ3RoKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHZiKGEsYixjLGQpe2Z1bmN0aW9uIGUoZixyLHUpe2ZvcihmPVwibnVtYmVyXCI9PXR5cGVvZiBmP2YudG9TdHJpbmcoKTpmfHxcIlwiO2YubGVuZ3RoPHI7KWY9dVswXStmO3JldHVybiBmfWZ1bmN0aW9uIGcoZixyKXtyZXR1cm4gZShmLHIsXCIwXCIpfWZ1bmN0aW9uIGwoZixyKXtmdW5jdGlvbiB1KGFiKXtyZXR1cm4gMD5hYj8tMTowPGFiPzE6MH12YXIgSDswPT09KEg9dShmLmdldEZ1bGxZZWFyKCktci5nZXRGdWxsWWVhcigpKSkmJjA9PT0oSD11KGYuZ2V0TW9udGgoKS1yLmdldE1vbnRoKCkpKSYmKEg9dShmLmdldERhdGUoKS1yLmdldERhdGUoKSkpO3JldHVybiBIfWZ1bmN0aW9uIGsoZil7c3dpdGNoKGYuZ2V0RGF5KCkpe2Nhc2UgMDpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLTEsMTEsMjkpO2Nhc2UgMTpyZXR1cm4gZjtjYXNlIDI6cmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSwwLDMpO2Nhc2UgMzpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLFxuMCwyKTtjYXNlIDQ6cmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSwwLDEpO2Nhc2UgNTpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLTEsMTEsMzEpO2Nhc2UgNjpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLTEsMTEsMzApfX1mdW5jdGlvbiBuKGYpe3ZhciByPWYuVGE7Zm9yKGY9bmV3IERhdGUoKG5ldyBEYXRlKGYuVWErMTkwMCwwLDEpKS5nZXRUaW1lKCkpOzA8cjspe3ZhciB1PWYuZ2V0TW9udGgoKSxIPShZKGYuZ2V0RnVsbFllYXIoKSk/c2I6dGIpW3VdO2lmKHI+SC1mLmdldERhdGUoKSlyLT1ILWYuZ2V0RGF0ZSgpKzEsZi5zZXREYXRlKDEpLDExPnU/Zi5zZXRNb250aCh1KzEpOihmLnNldE1vbnRoKDApLGYuc2V0RnVsbFllYXIoZi5nZXRGdWxsWWVhcigpKzEpKTtlbHNle2Yuc2V0RGF0ZShmLmdldERhdGUoKStyKTticmVha319dT1uZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkrMSwwLDQpO3I9ayhuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksXG4wLDQpKTt1PWsodSk7cmV0dXJuIDA+PWwocixmKT8wPj1sKHUsZik/Zi5nZXRGdWxsWWVhcigpKzE6Zi5nZXRGdWxsWWVhcigpOmYuZ2V0RnVsbFllYXIoKS0xfWE+Pj49MDtiPj4+PTA7Yz4+Pj0wO2Q+Pj49MDt2YXIgcT1HW2QrNDA+Pj4yPj4+MF07ZD17a2I6RVtkPj4+Mj4+PjBdLGpiOkVbZCs0Pj4+Mj4+PjBdLFhhOkVbZCs4Pj4+Mj4+PjBdLGFiOkVbZCsxMj4+PjI+Pj4wXSxZYTpFW2QrMTY+Pj4yPj4+MF0sVWE6RVtkKzIwPj4+Mj4+PjBdLE9hOkVbZCsyND4+PjI+Pj4wXSxUYTpFW2QrMjg+Pj4yPj4+MF0sbWI6RVtkKzMyPj4+Mj4+PjBdLGliOkVbZCszNj4+PjI+Pj4wXSxsYjpxP0wocSk6XCJcIn07Yz1MKGMpO3E9e1wiJWNcIjpcIiVhICViICVkICVIOiVNOiVTICVZXCIsXCIlRFwiOlwiJW0vJWQvJXlcIixcIiVGXCI6XCIlWS0lbS0lZFwiLFwiJWhcIjpcIiViXCIsXCIlclwiOlwiJUk6JU06JVMgJXBcIixcIiVSXCI6XCIlSDolTVwiLFwiJVRcIjpcIiVIOiVNOiVTXCIsXCIleFwiOlwiJW0vJWQvJXlcIixcIiVYXCI6XCIlSDolTTolU1wiLFxuXCIlRWNcIjpcIiVjXCIsXCIlRUNcIjpcIiVDXCIsXCIlRXhcIjpcIiVtLyVkLyV5XCIsXCIlRVhcIjpcIiVIOiVNOiVTXCIsXCIlRXlcIjpcIiV5XCIsXCIlRVlcIjpcIiVZXCIsXCIlT2RcIjpcIiVkXCIsXCIlT2VcIjpcIiVlXCIsXCIlT0hcIjpcIiVIXCIsXCIlT0lcIjpcIiVJXCIsXCIlT21cIjpcIiVtXCIsXCIlT01cIjpcIiVNXCIsXCIlT1NcIjpcIiVTXCIsXCIlT3VcIjpcIiV1XCIsXCIlT1VcIjpcIiVVXCIsXCIlT1ZcIjpcIiVWXCIsXCIlT3dcIjpcIiV3XCIsXCIlT1dcIjpcIiVXXCIsXCIlT3lcIjpcIiV5XCJ9O2Zvcih2YXIgdiBpbiBxKWM9Yy5yZXBsYWNlKG5ldyBSZWdFeHAodixcImdcIikscVt2XSk7dmFyIHk9XCJTdW5kYXkgTW9uZGF5IFR1ZXNkYXkgV2VkbmVzZGF5IFRodXJzZGF5IEZyaWRheSBTYXR1cmRheVwiLnNwbGl0KFwiIFwiKSxGPVwiSmFudWFyeSBGZWJydWFyeSBNYXJjaCBBcHJpbCBNYXkgSnVuZSBKdWx5IEF1Z3VzdCBTZXB0ZW1iZXIgT2N0b2JlciBOb3ZlbWJlciBEZWNlbWJlclwiLnNwbGl0KFwiIFwiKTtxPXtcIiVhXCI6Zj0+eVtmLk9hXS5zdWJzdHJpbmcoMCwzKSxcIiVBXCI6Zj0+eVtmLk9hXSxcIiViXCI6Zj0+XG5GW2YuWWFdLnN1YnN0cmluZygwLDMpLFwiJUJcIjpmPT5GW2YuWWFdLFwiJUNcIjpmPT5nKChmLlVhKzE5MDApLzEwMHwwLDIpLFwiJWRcIjpmPT5nKGYuYWIsMiksXCIlZVwiOmY9PmUoZi5hYiwyLFwiIFwiKSxcIiVnXCI6Zj0+bihmKS50b1N0cmluZygpLnN1YnN0cmluZygyKSxcIiVHXCI6Zj0+bihmKSxcIiVIXCI6Zj0+ZyhmLlhhLDIpLFwiJUlcIjpmPT57Zj1mLlhhOzA9PWY/Zj0xMjoxMjxmJiYoZi09MTIpO3JldHVybiBnKGYsMil9LFwiJWpcIjpmPT57Zm9yKHZhciByPTAsdT0wO3U8PWYuWWEtMTtyKz0oWShmLlVhKzE5MDApP3NiOnRiKVt1KytdKTtyZXR1cm4gZyhmLmFiK3IsMyl9LFwiJW1cIjpmPT5nKGYuWWErMSwyKSxcIiVNXCI6Zj0+ZyhmLmpiLDIpLFwiJW5cIjooKT0+XCJcXG5cIixcIiVwXCI6Zj0+MDw9Zi5YYSYmMTI+Zi5YYT9cIkFNXCI6XCJQTVwiLFwiJVNcIjpmPT5nKGYua2IsMiksXCIldFwiOigpPT5cIlxcdFwiLFwiJXVcIjpmPT5mLk9hfHw3LFwiJVVcIjpmPT5nKE1hdGguZmxvb3IoKGYuVGErNy1mLk9hKS83KSwyKSxcIiVWXCI6Zj0+XG57dmFyIHI9TWF0aC5mbG9vcigoZi5UYSs3LShmLk9hKzYpJTcpLzcpOzI+PShmLk9hKzM3MS1mLlRhLTIpJTcmJnIrKztpZihyKTUzPT1yJiYodT0oZi5PYSszNzEtZi5UYSklNyw0PT11fHwzPT11JiZZKGYuVWEpfHwocj0xKSk7ZWxzZXtyPTUyO3ZhciB1PShmLk9hKzctZi5UYS0xKSU3Oyg0PT11fHw1PT11JiZZKGYuVWElNDAwLTEpKSYmcisrfXJldHVybiBnKHIsMil9LFwiJXdcIjpmPT5mLk9hLFwiJVdcIjpmPT5nKE1hdGguZmxvb3IoKGYuVGErNy0oZi5PYSs2KSU3KS83KSwyKSxcIiV5XCI6Zj0+KGYuVWErMTkwMCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXCIlWVwiOmY9PmYuVWErMTkwMCxcIiV6XCI6Zj0+e2Y9Zi5pYjt2YXIgcj0wPD1mO2Y9TWF0aC5hYnMoZikvNjA7cmV0dXJuKHI/XCIrXCI6XCItXCIpK1N0cmluZyhcIjAwMDBcIisoZi82MCoxMDArZiU2MCkpLnNsaWNlKC00KX0sXCIlWlwiOmY9PmYubGIsXCIlJVwiOigpPT5cIiVcIn07Yz1jLnJlcGxhY2UoLyUlL2csXCJcXHgwMFxceDAwXCIpO2Zvcih2IGluIHEpYy5pbmNsdWRlcyh2KSYmXG4oYz1jLnJlcGxhY2UobmV3IFJlZ0V4cCh2LFwiZ1wiKSxxW3ZdKGQpKSk7Yz1jLnJlcGxhY2UoL1xcMFxcMC9nLFwiJVwiKTt2PXViKGMpO2lmKHYubGVuZ3RoPmIpcmV0dXJuIDA7QS5zZXQodixhPj4+MCk7cmV0dXJuIHYubGVuZ3RoLTF9Zm9yKHZhciB3Yj1BcnJheSgyNTYpLHhiPTA7MjU2PnhiOysreGIpd2JbeGJdPVN0cmluZy5mcm9tQ2hhckNvZGUoeGIpO0hhPXdiO1A9aC5CaW5kaW5nRXJyb3I9Y2xhc3MgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihhKXtzdXBlcihhKTt0aGlzLm5hbWU9XCJCaW5kaW5nRXJyb3JcIn19O2guSW50ZXJuYWxFcnJvcj1jbGFzcyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGEpe3N1cGVyKGEpO3RoaXMubmFtZT1cIkludGVybmFsRXJyb3JcIn19O1xuT2JqZWN0LmFzc2lnbihOYS5wcm90b3R5cGUse2dldChhKXtyZXR1cm4gdGhpcy5TYVthXX0saGFzKGEpe3JldHVybiB2b2lkIDAhPT10aGlzLlNhW2FdfSxaYShhKXt2YXIgYj10aGlzLmJiLnBvcCgpfHx0aGlzLlNhLmxlbmd0aDt0aGlzLlNhW2JdPWE7cmV0dXJuIGJ9LCRhKGEpe3RoaXMuU2FbYV09dm9pZCAwO3RoaXMuYmIucHVzaChhKX19KTtSLlNhLnB1c2goe3ZhbHVlOnZvaWQgMH0se3ZhbHVlOm51bGx9LHt2YWx1ZTohMH0se3ZhbHVlOiExfSk7Ui5WYT1SLlNhLmxlbmd0aDtoLmNvdW50X2VtdmFsX2hhbmRsZXM9KCk9Pntmb3IodmFyIGE9MCxiPVIuVmE7YjxSLlNhLmxlbmd0aDsrK2Ipdm9pZCAwIT09Ui5TYVtiXSYmKythO3JldHVybiBhfTtcbnZhciB5Yj17YTpmdW5jdGlvbihhLGIsYyl7YT4+Pj0wOyhuZXcgQmEoYSkpLlphKGI+Pj4wLGM+Pj4wKTtDYT1hO0RhKys7dGhyb3cgQ2E7fSx2OmZ1bmN0aW9uKCl7cmV0dXJuIDB9LGJhOmZ1bmN0aW9uKCl7fSxOOmZ1bmN0aW9uKCl7fSxQOmZ1bmN0aW9uKCl7fSxIOmZ1bmN0aW9uKCl7cmV0dXJuIDB9LCQ6ZnVuY3Rpb24oKXt9LFY6ZnVuY3Rpb24oKXt9LF86ZnVuY3Rpb24oKXt9LEI6ZnVuY3Rpb24oKXt9LE86ZnVuY3Rpb24oKXt9LEw6ZnVuY3Rpb24oKXt9LGFhOmZ1bmN0aW9uKCl7fSxNOmZ1bmN0aW9uKCl7fSxFOmZ1bmN0aW9uKGEsYixjLGQsZSl7Yj4+Pj0wO2I9TyhiKTt2YXIgZz0tMSE9Yi5pbmRleE9mKFwidVwiKTtnJiYoZT0oMW48PDY0biktMW4pO1EoYT4+PjAse25hbWU6Yixmcm9tV2lyZVR5cGU6bD0+bCx0b1dpcmVUeXBlOmZ1bmN0aW9uKGwsayl7aWYoXCJiaWdpbnRcIiE9dHlwZW9mIGsmJlwibnVtYmVyXCIhPXR5cGVvZiBrKXRocm93IG5ldyBUeXBlRXJyb3IoYENhbm5vdCBjb252ZXJ0IFwiJHtHYShrKX1cIiB0byAke3RoaXMubmFtZX1gKTtcbmlmKGs8ZHx8az5lKXRocm93IG5ldyBUeXBlRXJyb3IoYFBhc3NpbmcgYSBudW1iZXIgXCIke0dhKGspfVwiIGZyb20gSlMgc2lkZSB0byBDL0MrKyBzaWRlIHRvIGFuIGFyZ3VtZW50IG9mIHR5cGUgXCIke2J9XCIsIHdoaWNoIGlzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIFske2R9LCAke2V9XSFgKTtyZXR1cm4ga30sYXJnUGFja0FkdmFuY2U6OCxyZWFkVmFsdWVGcm9tUG9pbnRlcjpNYShiLGM+Pj4wLCFnKSxXYTpudWxsfSl9LGVhOmZ1bmN0aW9uKGEsYixjLGQpe2I9TyhiPj4+MCk7UShhPj4+MCx7bmFtZTpiLGZyb21XaXJlVHlwZTpmdW5jdGlvbihlKXtyZXR1cm4hIWV9LHRvV2lyZVR5cGU6ZnVuY3Rpb24oZSxnKXtyZXR1cm4gZz9jOmR9LGFyZ1BhY2tBZHZhbmNlOjgscmVhZFZhbHVlRnJvbVBvaW50ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZnJvbVdpcmVUeXBlKEJbZT4+PjBdKX0sV2E6bnVsbH0pfSxkYTpmdW5jdGlvbihhLGIpe2I9TyhiPj4+MCk7UShhPj4+MCx7bmFtZTpiLFxuZnJvbVdpcmVUeXBlOmM9Pnt2YXIgZD1TKGMpO09hKGMpO3JldHVybiBkfSx0b1dpcmVUeXBlOihjLGQpPT5UKGQpLGFyZ1BhY2tBZHZhbmNlOjgscmVhZFZhbHVlRnJvbVBvaW50ZXI6UGEsV2E6bnVsbH0pfSxEOmZ1bmN0aW9uKGEsYixjKXtiPU8oYj4+PjApO1EoYT4+PjAse25hbWU6Yixmcm9tV2lyZVR5cGU6ZD0+ZCx0b1dpcmVUeXBlOihkLGUpPT5lLGFyZ1BhY2tBZHZhbmNlOjgscmVhZFZhbHVlRnJvbVBvaW50ZXI6UWEoYixjPj4+MCksV2E6bnVsbH0pfSxwOmZ1bmN0aW9uKGEsYixjLGQsZSl7YT4+Pj0wO2M+Pj49MDtiPU8oYj4+PjApOy0xPT09ZSYmKGU9NDI5NDk2NzI5NSk7ZT1rPT5rO2lmKDA9PT1kKXt2YXIgZz0zMi04KmM7ZT1rPT5rPDxnPj4+Z312YXIgbD1iLmluY2x1ZGVzKFwidW5zaWduZWRcIik/ZnVuY3Rpb24oayxuKXtyZXR1cm4gbj4+PjB9OmZ1bmN0aW9uKGssbil7cmV0dXJuIG59O1EoYSx7bmFtZTpiLGZyb21XaXJlVHlwZTplLHRvV2lyZVR5cGU6bCxhcmdQYWNrQWR2YW5jZTo4LFxucmVhZFZhbHVlRnJvbVBvaW50ZXI6TWEoYixjLDAhPT1kKSxXYTpudWxsfSl9LGw6ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQoZyl7cmV0dXJuIG5ldyBlKEEuYnVmZmVyLEdbZys0Pj4+Mj4+PjBdLEdbZz4+PjI+Pj4wXSl9dmFyIGU9W0ludDhBcnJheSxVaW50OEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5LEJpZ0ludDY0QXJyYXksQmlnVWludDY0QXJyYXldW2JdO2M9TyhjPj4+MCk7UShhPj4+MCx7bmFtZTpjLGZyb21XaXJlVHlwZTpkLGFyZ1BhY2tBZHZhbmNlOjgscmVhZFZhbHVlRnJvbVBvaW50ZXI6ZH0se2diOiEwfSl9LEY6ZnVuY3Rpb24oYSxiKXtiPU8oYj4+PjApO3ZhciBjPVwic3RkOjpzdHJpbmdcIj09PWI7UShhPj4+MCx7bmFtZTpiLGZyb21XaXJlVHlwZTpmdW5jdGlvbihkKXt2YXIgZT1HW2Q+Pj4yPj4+MF0sZz1kKzQ7aWYoYylmb3IodmFyIGw9ZyxrPTA7azw9ZTsrK2spe3ZhciBuPVxuZytrO2lmKGs9PWV8fDA9PUJbbj4+PjBdKXtsPUwobCxuLWwpO2lmKHZvaWQgMD09PXEpdmFyIHE9bDtlbHNlIHErPVN0cmluZy5mcm9tQ2hhckNvZGUoMCkscSs9bDtsPW4rMX19ZWxzZXtxPUFycmF5KGUpO2ZvcihrPTA7azxlOysraylxW2tdPVN0cmluZy5mcm9tQ2hhckNvZGUoQltnK2s+Pj4wXSk7cT1xLmpvaW4oXCJcIil9VShkKTtyZXR1cm4gcX0sdG9XaXJlVHlwZTpmdW5jdGlvbihkLGUpe2UgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciYmKGU9bmV3IFVpbnQ4QXJyYXkoZSkpO3ZhciBnPVwic3RyaW5nXCI9PXR5cGVvZiBlO2lmKCEoZ3x8ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXl8fGUgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheXx8ZSBpbnN0YW5jZW9mIEludDhBcnJheSkpdGhyb3cgbmV3IFAoXCJDYW5ub3QgcGFzcyBub24tc3RyaW5nIHRvIHN0ZDo6c3RyaW5nXCIpO3ZhciBsPWMmJmc/TShlKTplLmxlbmd0aDt2YXIgaz1tYig0K2wrMSksbj1rKzQ7R1trPj4+Mj4+PjBdPWw7XG5pZihjJiZnKU4oZSxCLG4sbCsxKTtlbHNlIGlmKGcpZm9yKGc9MDtnPGw7KytnKXt2YXIgcT1lLmNoYXJDb2RlQXQoZyk7aWYoMjU1PHEpdGhyb3cgVShuKSxuZXcgUChcIlN0cmluZyBoYXMgVVRGLTE2IGNvZGUgdW5pdHMgdGhhdCBkbyBub3QgZml0IGluIDggYml0c1wiKTtCW24rZz4+PjBdPXF9ZWxzZSBmb3IoZz0wO2c8bDsrK2cpQltuK2c+Pj4wXT1lW2ddO251bGwhPT1kJiZkLnB1c2goVSxrKTtyZXR1cm4ga30sYXJnUGFja0FkdmFuY2U6OCxyZWFkVmFsdWVGcm9tUG9pbnRlcjpSYSxXYShkKXtVKGQpfX0pfSx4OmZ1bmN0aW9uKGEsYixjKXtiPj4+PTA7Yz4+Pj0wO2M9TyhjKTtpZigyPT09Yil7dmFyIGQ9VGE7dmFyIGU9VWE7dmFyIGc9VmE7dmFyIGw9KCk9PkQ7dmFyIGs9MX1lbHNlIDQ9PT1iJiYoZD1XYSxlPVhhLGc9WWEsbD0oKT0+RyxrPTIpO1EoYT4+PjAse25hbWU6Yyxmcm9tV2lyZVR5cGU6bj0+e2Zvcih2YXIgcT1HW24+Pj4yPj4+MF0sdj1sKCkseSxGPW4rNCxmPVxuMDtmPD1xOysrZil7dmFyIHI9bis0K2YqYjtpZihmPT1xfHwwPT12W3I+Pj5rXSlGPWQoRixyLUYpLHZvaWQgMD09PXk/eT1GOih5Kz1TdHJpbmcuZnJvbUNoYXJDb2RlKDApLHkrPUYpLEY9citifVUobik7cmV0dXJuIHl9LHRvV2lyZVR5cGU6KG4scSk9PntpZihcInN0cmluZ1wiIT10eXBlb2YgcSl0aHJvdyBuZXcgUChgQ2Fubm90IHBhc3Mgbm9uLXN0cmluZyB0byBDKysgc3RyaW5nIHR5cGUgJHtjfWApO3ZhciB2PWcocSkseT1tYig0K3YrYik7R1t5Pj4+Ml09dj4+aztlKHEseSs0LHYrYik7bnVsbCE9PW4mJm4ucHVzaChVLHkpO3JldHVybiB5fSxhcmdQYWNrQWR2YW5jZTo4LHJlYWRWYWx1ZUZyb21Qb2ludGVyOlBhLFdhKG4pe1Uobil9fSl9LGZhOmZ1bmN0aW9uKGEsYil7Yj1PKGI+Pj4wKTtRKGE+Pj4wLHtoYjohMCxuYW1lOmIsYXJnUGFja0FkdmFuY2U6MCxmcm9tV2lyZVR5cGU6KCk9Pnt9LHRvV2lyZVR5cGU6KCk9Pnt9fSl9LGNhOigpPT4hMCxvOmZ1bmN0aW9uKGEsYixcbmMpe2I+Pj49MDtjPj4+PTA7YT1TKGE+Pj4wKTtiPVYoYixcImVtdmFsOjphc1wiKTt2YXIgZD1bXSxlPVQoZCk7R1tjPj4+Mj4+PjBdPWU7cmV0dXJuIGIudG9XaXJlVHlwZShkLGEpfSxoOmZ1bmN0aW9uKGEsYixjLGQsZSl7Yz4+Pj0wO2Q+Pj49MDtlPj4+PTA7YT1YW2E+Pj4wXTtiPVMoYj4+PjApO2M9VyhjKTt2YXIgZz1bXTtHW2Q+Pj4yPj4+MF09VChnKTtyZXR1cm4gYShiLGMsZyxlKX0scjpmdW5jdGlvbihhLGIsYyxkKXtjPj4+PTA7ZD4+Pj0wO2E9WFthPj4+MF07Yj1TKGI+Pj4wKTtjPVcoYyk7YShiLGMsbnVsbCxkKX0sYjpPYSx5OmZ1bmN0aW9uKGEsYil7Yj4+Pj0wO2E9UyhhPj4+MCk7Yj1TKGIpO3JldHVybiBhPT1ifSx1OmZ1bmN0aW9uKGEpe2E+Pj49MDtpZigwPT09YSlyZXR1cm4gVChiYigpKTthPVcoYSk7cmV0dXJuIFQoYmIoKVthXSl9LGc6ZnVuY3Rpb24oYSxiKXt2YXIgYz1kYihhLGI+Pj4wKSxkPWNbMF07Yj1kLm5hbWUrXCJfJFwiK2Muc2xpY2UoMSkubWFwKGZ1bmN0aW9uKHYpe3JldHVybiB2Lm5hbWV9KS5qb2luKFwiX1wiKStcblwiJFwiO3ZhciBlPWZiW2JdO2lmKHZvaWQgMCE9PWUpcmV0dXJuIGU7ZT1bXCJyZXRUeXBlXCJdO2Zvcih2YXIgZz1bZF0sbD1cIlwiLGs9MDtrPGEtMTsrK2spbCs9KDAhPT1rP1wiLCBcIjpcIlwiKStcImFyZ1wiK2ssZS5wdXNoKFwiYXJnVHlwZVwiK2spLGcucHVzaChjWzEra10pO3ZhciBuPVwicmV0dXJuIGZ1bmN0aW9uIFwiK2ViKFwibWV0aG9kQ2FsbGVyX1wiK2IpK1wiKGhhbmRsZSwgbmFtZSwgZGVzdHJ1Y3RvcnMsIGFyZ3MpIHtcXG5cIixxPTA7Zm9yKGs9MDtrPGEtMTsrK2spbis9XCIgICAgdmFyIGFyZ1wiK2srXCIgPSBhcmdUeXBlXCIraytcIi5yZWFkVmFsdWVGcm9tUG9pbnRlcihhcmdzXCIrKHE/XCIrXCIrcTpcIlwiKStcIik7XFxuXCIscSs9Y1trKzFdLmFyZ1BhY2tBZHZhbmNlO24rPVwiICAgIHZhciBydiA9IGhhbmRsZVtuYW1lXShcIitsK1wiKTtcXG5cIjtmb3Ioaz0wO2s8YS0xOysrayljW2srMV0uZGVsZXRlT2JqZWN0JiYobis9XCIgICAgYXJnVHlwZVwiK2srXCIuZGVsZXRlT2JqZWN0KGFyZ1wiK2srXCIpO1xcblwiKTtkLmhifHxcbihuKz1cIiAgICByZXR1cm4gcmV0VHlwZS50b1dpcmVUeXBlKGRlc3RydWN0b3JzLCBydik7XFxuXCIpO2UucHVzaChuK1wifTtcXG5cIik7YT1oYihlKS5hcHBseShudWxsLGcpO2U9Y2IoYSk7cmV0dXJuIGZiW2JdPWV9LHE6ZnVuY3Rpb24oYSxiKXtiPj4+PTA7YT1TKGE+Pj4wKTtiPVMoYik7cmV0dXJuIFQoYVtiXSl9LGM6ZnVuY3Rpb24oYSl7YT4+Pj0wOzQ8YSYmKFIuZ2V0KGEpLmNiKz0xKX0sRzpmdW5jdGlvbihhLGIsYyxkKXtjPj4+PTA7ZD4+Pj0wO2E9UyhhPj4+MCk7dmFyIGU9amJbYl07ZXx8KGU9aWIoYiksamJbYl09ZSk7cmV0dXJuIGUoYSxjLGQpfSxzOmZ1bmN0aW9uKCl7cmV0dXJuIFQoW10pfSxrOmZ1bmN0aW9uKGEpe2E9UyhhPj4+MCk7Zm9yKHZhciBiPUFycmF5KGEubGVuZ3RoKSxjPTA7YzxhLmxlbmd0aDtjKyspYltjXT1hW2NdO3JldHVybiBUKGIpfSxkOmZ1bmN0aW9uKGEpe3JldHVybiBUKFcoYT4+PjApKX0sajpmdW5jdGlvbigpe3JldHVybiBUKHt9KX0sZTpmdW5jdGlvbihhKXthPj4+PVxuMDtmb3IodmFyIGI9UyhhKTtiLmxlbmd0aDspe3ZhciBjPWIucG9wKCk7Yi5wb3AoKShjKX1PYShhKX0saTpmdW5jdGlvbihhLGIsYyl7Yj4+Pj0wO2M+Pj49MDthPVMoYT4+PjApO2I9UyhiKTtjPVMoYyk7YVtiXT1jfSxmOmZ1bmN0aW9uKGEsYil7Yj4+Pj0wO2E9VihhPj4+MCxcIl9lbXZhbF90YWtlX3ZhbHVlXCIpO2E9YS5yZWFkVmFsdWVGcm9tUG9pbnRlcihiKTtyZXR1cm4gVChhKX0sUzpmdW5jdGlvbihhLGIpe2E9LTkwMDcxOTkyNTQ3NDA5OTI+YXx8OTAwNzE5OTI1NDc0MDk5MjxhP05hTjpOdW1iZXIoYSk7Yj4+Pj0wO2E9bmV3IERhdGUoMUUzKmEpO0VbYj4+PjI+Pj4wXT1hLmdldFVUQ1NlY29uZHMoKTtFW2IrND4+PjI+Pj4wXT1hLmdldFVUQ01pbnV0ZXMoKTtFW2IrOD4+PjI+Pj4wXT1hLmdldFVUQ0hvdXJzKCk7RVtiKzEyPj4+Mj4+PjBdPWEuZ2V0VVRDRGF0ZSgpO0VbYisxNj4+PjI+Pj4wXT1hLmdldFVUQ01vbnRoKCk7RVtiKzIwPj4+Mj4+PjBdPWEuZ2V0VVRDRnVsbFllYXIoKS1cbjE5MDA7RVtiKzI0Pj4+Mj4+PjBdPWEuZ2V0VVRDRGF5KCk7RVtiKzI4Pj4+Mj4+PjBdPShhLmdldFRpbWUoKS1EYXRlLlVUQyhhLmdldFVUQ0Z1bGxZZWFyKCksMCwxLDAsMCwwLDApKS84NjRFNXwwfSxUOmZ1bmN0aW9uKGEsYil7YT0tOTAwNzE5OTI1NDc0MDk5Mj5hfHw5MDA3MTk5MjU0NzQwOTkyPGE/TmFOOk51bWJlcihhKTtiPj4+PTA7YT1uZXcgRGF0ZSgxRTMqYSk7RVtiPj4+Mj4+PjBdPWEuZ2V0U2Vjb25kcygpO0VbYis0Pj4+Mj4+PjBdPWEuZ2V0TWludXRlcygpO0VbYis4Pj4+Mj4+PjBdPWEuZ2V0SG91cnMoKTtFW2IrMTI+Pj4yPj4+MF09YS5nZXREYXRlKCk7RVtiKzE2Pj4+Mj4+PjBdPWEuZ2V0TW9udGgoKTtFW2IrMjA+Pj4yPj4+MF09YS5nZXRGdWxsWWVhcigpLTE5MDA7RVtiKzI0Pj4+Mj4+PjBdPWEuZ2V0RGF5KCk7RVtiKzI4Pj4+Mj4+PjBdPShZKGEuZ2V0RnVsbFllYXIoKSk/a2I6bGIpW2EuZ2V0TW9udGgoKV0rYS5nZXREYXRlKCktMXwwO0VbYiszNj4+PlxuMj4+PjBdPS0oNjAqYS5nZXRUaW1lem9uZU9mZnNldCgpKTt2YXIgYz0obmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLDYsMSkpLmdldFRpbWV6b25lT2Zmc2V0KCksZD0obmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLDAsMSkpLmdldFRpbWV6b25lT2Zmc2V0KCk7RVtiKzMyPj4+Mj4+PjBdPShjIT1kJiZhLmdldFRpbWV6b25lT2Zmc2V0KCk9PU1hdGgubWluKGQsYykpfDB9LFU6ZnVuY3Rpb24oYSl7YT4+Pj0wO3ZhciBiPW5ldyBEYXRlKEVbYSsyMD4+PjI+Pj4wXSsxOTAwLEVbYSsxNj4+PjI+Pj4wXSxFW2ErMTI+Pj4yPj4+MF0sRVthKzg+Pj4yPj4+MF0sRVthKzQ+Pj4yPj4+MF0sRVthPj4+Mj4+PjBdLDApLGM9RVthKzMyPj4+Mj4+PjBdLGQ9Yi5nZXRUaW1lem9uZU9mZnNldCgpLGU9KG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSw2LDEpKS5nZXRUaW1lem9uZU9mZnNldCgpLGc9KG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSwwLDEpKS5nZXRUaW1lem9uZU9mZnNldCgpLGw9TWF0aC5taW4oZyxcbmUpOzA+Yz9FW2ErMzI+Pj4yPj4+MF09TnVtYmVyKGUhPWcmJmw9PWQpOjA8YyE9KGw9PWQpJiYoZT1NYXRoLm1heChnLGUpLGIuc2V0VGltZShiLmdldFRpbWUoKSs2RTQqKCgwPGM/bDplKS1kKSkpO0VbYSsyND4+PjI+Pj4wXT1iLmdldERheSgpO0VbYSsyOD4+PjI+Pj4wXT0oWShiLmdldEZ1bGxZZWFyKCkpP2tiOmxiKVtiLmdldE1vbnRoKCldK2IuZ2V0RGF0ZSgpLTF8MDtFW2E+Pj4yPj4+MF09Yi5nZXRTZWNvbmRzKCk7RVthKzQ+Pj4yPj4+MF09Yi5nZXRNaW51dGVzKCk7RVthKzg+Pj4yPj4+MF09Yi5nZXRIb3VycygpO0VbYSsxMj4+PjI+Pj4wXT1iLmdldERhdGUoKTtFW2ErMTY+Pj4yPj4+MF09Yi5nZXRNb250aCgpO0VbYSsyMD4+PjI+Pj4wXT1iLmdldFllYXIoKTtyZXR1cm4gQmlnSW50KGIuZ2V0VGltZSgpLzFFMyl9LFE6ZnVuY3Rpb24oKXtyZXR1cm4tNTJ9LFI6ZnVuY3Rpb24oKXt9LEo6ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQobil7cmV0dXJuKG49bi50b1RpbWVTdHJpbmcoKS5tYXRjaCgvXFwoKFtBLVphLXogXSspXFwpJC8pKT9cbm5bMV06XCJHTVRcIn1jPj4+PTA7dmFyIGU9KG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpLGc9bmV3IERhdGUoZSwwLDEpLGw9bmV3IERhdGUoZSw2LDEpO2U9Zy5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciBrPWwuZ2V0VGltZXpvbmVPZmZzZXQoKTtHW2E+Pj4wPj4+Mj4+PjBdPTYwKk1hdGgubWF4KGUsayk7RVtiPj4+MD4+PjI+Pj4wXT1OdW1iZXIoZSE9ayk7YT1kKGcpO2I9ZChsKTthPW5iKGEpO2I9bmIoYik7azxlPyhHW2M+Pj4yPj4+MF09YSxHW2MrND4+PjI+Pj4wXT1iKTooR1tjPj4+Mj4+PjBdPWIsR1tjKzQ+Pj4yPj4+MF09YSl9LHQ6KCk9PntrYShcIlwiKX0sQzooKT0+RGF0ZS5ub3coKSxLOmZ1bmN0aW9uKCl7cmV0dXJuIDQyOTQ5MDE3NjB9LG46KCk9PnBlcmZvcm1hbmNlLm5vdygpLFo6ZnVuY3Rpb24oYSxiLGMpe2I+Pj49MDtyZXR1cm4gQi5jb3B5V2l0aGluKGE+Pj4wPj4+MCxiPj4+MCxiKyhjPj4+MCk+Pj4wKX0sSTpmdW5jdGlvbihhKXthPj4+PTA7dmFyIGI9Qi5sZW5ndGg7XG5pZig0Mjk0OTAxNzYwPGEpcmV0dXJuITE7Zm9yKHZhciBjPTE7ND49YztjKj0yKXt2YXIgZD1iKigxKy4yL2MpO2Q9TWF0aC5taW4oZCxhKzEwMDY2MzI5Nik7dmFyIGU9TWF0aDtkPU1hdGgubWF4KGEsZCk7YTp7ZT0oZS5taW4uY2FsbChlLDQyOTQ5MDE3NjAsZCsoNjU1MzYtZCU2NTUzNiklNjU1MzYpLXouYnVmZmVyLmJ5dGVMZW5ndGgrNjU1MzUpLzY1NTM2O3RyeXt6Lmdyb3coZSk7cWEoKTt2YXIgZz0xO2JyZWFrIGF9Y2F0Y2gobCl7fWc9dm9pZCAwfWlmKGcpcmV0dXJuITB9cmV0dXJuITF9LFg6ZnVuY3Rpb24oYSxiKXthPj4+PTA7Yj4+Pj0wO3ZhciBjPTA7cWIoKS5mb3JFYWNoKChkLGUpPT57dmFyIGc9YitjO2U9R1thKzQqZT4+PjI+Pj4wXT1nO2ZvcihnPTA7ZzxkLmxlbmd0aDsrK2cpQVtlKys+Pj4wPj4+MF09ZC5jaGFyQ29kZUF0KGcpO0FbZT4+PjA+Pj4wXT0wO2MrPWQubGVuZ3RoKzF9KTtyZXR1cm4gMH0sWTpmdW5jdGlvbihhLGIpe2E+Pj49MDtiPj4+PTA7dmFyIGM9XG5xYigpO0dbYT4+PjI+Pj4wXT1jLmxlbmd0aDt2YXIgZD0wO2MuZm9yRWFjaChlPT5kKz1lLmxlbmd0aCsxKTtHW2I+Pj4yPj4+MF09ZDtyZXR1cm4gMH0sdzooKT0+NTIsQTpmdW5jdGlvbigpe3JldHVybiA1Mn0sVzpmdW5jdGlvbigpe3JldHVybiA3MH0sejpmdW5jdGlvbihhLGIsYyxkKXtiPj4+PTA7Yz4+Pj0wO2Q+Pj49MDtmb3IodmFyIGU9MCxnPTA7ZzxjO2crKyl7dmFyIGw9R1tiPj4+Mj4+PjBdLGs9R1tiKzQ+Pj4yPj4+MF07Yis9ODtmb3IodmFyIG49MDtuPGs7bisrKXt2YXIgcT1CW2wrbj4+PjBdLHY9cmJbYV07MD09PXF8fDEwPT09cT8oKDE9PT1hP2phOngpKEZhKHYsMCkpLHYubGVuZ3RoPTApOnYucHVzaChxKX1lKz1rfUdbZD4+PjI+Pj4wXT1lO3JldHVybiAwfSxnYTp2YixtOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiB2YihhPj4+MCxiPj4+MCxjPj4+MCxkPj4+MCl9fSxaPWZ1bmN0aW9uKCl7dmFyIGE9e2E6eWJ9O0krKztBYShhLGZ1bmN0aW9uKGIpe1o9Yi5pbnN0YW5jZS5leHBvcnRzO1xuWj16YigpO3o9Wi5oYTtxYSgpO3NhLnVuc2hpZnQoWi5pYSk7SS0tOzA9PUkmJihudWxsIT09dWEmJihjbGVhckludGVydmFsKHVhKSx1YT1udWxsKSxKJiYoYj1KLEo9bnVsbCxiKCkpKX0pLmNhdGNoKGJhKTtyZXR1cm57fX0oKTtoLl9PcnRJbml0PShhLGIpPT4oaC5fT3J0SW5pdD1aLmphKShhLGIpO2guX09ydEdldExhc3RFcnJvcj0oYSxiKT0+KGguX09ydEdldExhc3RFcnJvcj1aLmthKShhLGIpO2guX09ydENyZWF0ZVNlc3Npb25PcHRpb25zPShhLGIsYyxkLGUsZyxsLGssbixxKT0+KGguX09ydENyZWF0ZVNlc3Npb25PcHRpb25zPVoubGEpKGEsYixjLGQsZSxnLGwsayxuLHEpO2guX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyPShhLGIpPT4oaC5fT3J0QXBwZW5kRXhlY3V0aW9uUHJvdmlkZXI9Wi5tYSkoYSxiKTtoLl9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGU9KGEsYixjKT0+KGguX09ydEFkZEZyZWVEaW1lbnNpb25PdmVycmlkZT1aLm5hKShhLGIsYyk7XG5oLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnk9KGEsYixjKT0+KGguX09ydEFkZFNlc3Npb25Db25maWdFbnRyeT1aLm9hKShhLGIsYyk7aC5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zPWE9PihoLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnM9Wi5wYSkoYSk7aC5fT3J0Q3JlYXRlU2Vzc2lvbj0oYSxiLGMpPT4oaC5fT3J0Q3JlYXRlU2Vzc2lvbj1aLnFhKShhLGIsYyk7aC5fT3J0UmVsZWFzZVNlc3Npb249YT0+KGguX09ydFJlbGVhc2VTZXNzaW9uPVoucmEpKGEpO2guX09ydEdldElucHV0T3V0cHV0Q291bnQ9KGEsYixjKT0+KGguX09ydEdldElucHV0T3V0cHV0Q291bnQ9Wi5zYSkoYSxiLGMpO2guX09ydEdldElucHV0TmFtZT0oYSxiKT0+KGguX09ydEdldElucHV0TmFtZT1aLnRhKShhLGIpO2guX09ydEdldE91dHB1dE5hbWU9KGEsYik9PihoLl9PcnRHZXRPdXRwdXROYW1lPVoudWEpKGEsYik7aC5fT3J0RnJlZT1hPT4oaC5fT3J0RnJlZT1aLnZhKShhKTtcbmguX09ydENyZWF0ZVRlbnNvcj0oYSxiLGMsZCxlLGcpPT4oaC5fT3J0Q3JlYXRlVGVuc29yPVoud2EpKGEsYixjLGQsZSxnKTtoLl9PcnRHZXRUZW5zb3JEYXRhPShhLGIsYyxkLGUpPT4oaC5fT3J0R2V0VGVuc29yRGF0YT1aLnhhKShhLGIsYyxkLGUpO2guX09ydFJlbGVhc2VUZW5zb3I9YT0+KGguX09ydFJlbGVhc2VUZW5zb3I9Wi55YSkoYSk7aC5fT3J0Q3JlYXRlUnVuT3B0aW9ucz0oYSxiLGMsZCk9PihoLl9PcnRDcmVhdGVSdW5PcHRpb25zPVouemEpKGEsYixjLGQpO2guX09ydEFkZFJ1bkNvbmZpZ0VudHJ5PShhLGIsYyk9PihoLl9PcnRBZGRSdW5Db25maWdFbnRyeT1aLkFhKShhLGIsYyk7aC5fT3J0UmVsZWFzZVJ1bk9wdGlvbnM9YT0+KGguX09ydFJlbGVhc2VSdW5PcHRpb25zPVouQmEpKGEpO2guX09ydENyZWF0ZUJpbmRpbmc9YT0+KGguX09ydENyZWF0ZUJpbmRpbmc9Wi5DYSkoYSk7XG5oLl9PcnRCaW5kSW5wdXQ9KGEsYixjKT0+KGguX09ydEJpbmRJbnB1dD1aLkRhKShhLGIsYyk7aC5fT3J0QmluZE91dHB1dD0oYSxiLGMsZCk9PihoLl9PcnRCaW5kT3V0cHV0PVouRWEpKGEsYixjLGQpO2guX09ydENsZWFyQm91bmRPdXRwdXRzPWE9PihoLl9PcnRDbGVhckJvdW5kT3V0cHV0cz1aLkZhKShhKTtoLl9PcnRSZWxlYXNlQmluZGluZz1hPT4oaC5fT3J0UmVsZWFzZUJpbmRpbmc9Wi5HYSkoYSk7aC5fT3J0UnVuV2l0aEJpbmRpbmc9KGEsYixjLGQsZSk9PihoLl9PcnRSdW5XaXRoQmluZGluZz1aLkhhKShhLGIsYyxkLGUpO2guX09ydFJ1bj0oYSxiLGMsZCxlLGcsbCxrKT0+KGguX09ydFJ1bj1aLklhKShhLGIsYyxkLGUsZyxsLGspO2guX09ydEVuZFByb2ZpbGluZz1hPT4oaC5fT3J0RW5kUHJvZmlsaW5nPVouSmEpKGEpO1xudmFyIG1iPWguX21hbGxvYz1hPT4obWI9aC5fbWFsbG9jPVouS2EpKGEpLFU9aC5fZnJlZT1hPT4oVT1oLl9mcmVlPVouTGEpKGEpLFphPWE9PihaYT1aLk1hKShhKTtoLl9fZW1iaW5kX2luaXRpYWxpemVfYmluZGluZ3M9KCk9PihoLl9fZW1iaW5kX2luaXRpYWxpemVfYmluZGluZ3M9Wi5OYSkoKTt2YXIgQWI9KCk9PihBYj1aLlBhKSgpLEJiPWE9PihCYj1aLlFhKShhKSxDYj1hPT4oQ2I9Wi5SYSkoYSk7ZnVuY3Rpb24gemIoKXt2YXIgYT1aO2E9T2JqZWN0LmFzc2lnbih7fSxhKTt2YXIgYj1kPT4oKT0+ZCgpPj4+MCxjPWQ9PmU9PmQoZSk+Pj4wO2EuX19lcnJub19sb2NhdGlvbj1iKGEuX19lcnJub19sb2NhdGlvbik7YS5LYT1jKGEuS2EpO2EuTWE9YyhhLk1hKTthLlBhPWIoYS5QYSk7YS5SYT1jKGEuUmEpO3JldHVybiBhfWguc3RhY2tBbGxvYz1DYjtoLnN0YWNrU2F2ZT1BYjtoLnN0YWNrUmVzdG9yZT1CYjtoLlVURjhUb1N0cmluZz1MO1xuaC5zdHJpbmdUb1VURjg9KGEsYixjKT0+TihhLEIsYixjKTtoLmxlbmd0aEJ5dGVzVVRGOD1NO3ZhciBEYjtKPWZ1bmN0aW9uIEViKCl7RGJ8fEZiKCk7RGJ8fChKPUViKX07ZnVuY3Rpb24gRmIoKXtpZighKDA8SSkpe2Zvcig7MDxyYS5sZW5ndGg7KXJhLnNoaWZ0KCkoaCk7aWYoISgwPEl8fERifHwoRGI9ITAsaC5jYWxsZWRSdW49ITAsbGEpKSl7Zm9yKDswPHNhLmxlbmd0aDspc2Euc2hpZnQoKShoKTtmb3IoYWEoaCk7MDx0YS5sZW5ndGg7KXRhLnNoaWZ0KCkoaCl9fX1GYigpO1xuXG5cbiAgcmV0dXJuIG1vZHVsZUFyZy5yZWFkeVxufVxuXG4pO1xufSkoKTtcbmlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG4gIG1vZHVsZS5leHBvcnRzID0gb3J0V2FzbTtcbmVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSlcbiAgZGVmaW5lKFtdLCAoKSA9PiBvcnRXYXNtKTtcbiIsICIiLCAiIiwgImV4cG9ydCBjb25zdCBjcHVzID0gdW5kZWZpbmVkOyIsICJcbnZhciBvcnRXYXNtVGhyZWFkZWQgPSAoKCkgPT4ge1xuICB2YXIgX3NjcmlwdERpciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdCA/IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjIDogdW5kZWZpbmVkO1xuICBpZiAodHlwZW9mIF9fZmlsZW5hbWUgIT09ICd1bmRlZmluZWQnKSBfc2NyaXB0RGlyID0gX3NjcmlwdERpciB8fCBfX2ZpbGVuYW1lO1xuICByZXR1cm4gKFxuZnVuY3Rpb24obW9kdWxlQXJnID0ge30pIHtcblxuZnVuY3Rpb24gaCgpe20uYnVmZmVyIT1uLmJ1ZmZlciYmcCgpO3JldHVybiBufWZ1bmN0aW9uIHQoKXttLmJ1ZmZlciE9bi5idWZmZXImJnAoKTtyZXR1cm4gYWF9ZnVuY3Rpb24gdigpe20uYnVmZmVyIT1uLmJ1ZmZlciYmcCgpO3JldHVybiBiYX1mdW5jdGlvbiBjYSgpe20uYnVmZmVyIT1uLmJ1ZmZlciYmcCgpO3JldHVybiBkYX1mdW5jdGlvbiB3KCl7bS5idWZmZXIhPW4uYnVmZmVyJiZwKCk7cmV0dXJuIGVhfWZ1bmN0aW9uIHooKXttLmJ1ZmZlciE9bi5idWZmZXImJnAoKTtyZXR1cm4gZmF9ZnVuY3Rpb24gaGEoKXttLmJ1ZmZlciE9bi5idWZmZXImJnAoKTtyZXR1cm4gaWF9dmFyIEE9bW9kdWxlQXJnLGphLGthO0EucmVhZHk9bmV3IFByb21pc2UoKGEsYik9PntqYT1hO2thPWJ9KTtcbnZhciBsYT1PYmplY3QuYXNzaWduKHt9LEEpLG1hPVwiLi90aGlzLnByb2dyYW1cIixuYT0oYSxiKT0+e3Rocm93IGI7fSxvYT1cIm9iamVjdFwiPT10eXBlb2Ygd2luZG93LEI9XCJmdW5jdGlvblwiPT10eXBlb2YgaW1wb3J0U2NyaXB0cyxEPVwib2JqZWN0XCI9PXR5cGVvZiBwcm9jZXNzJiZcIm9iamVjdFwiPT10eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyYmXCJzdHJpbmdcIj09dHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSxFPUEuRU5WSVJPTk1FTlRfSVNfUFRIUkVBRHx8ITEsRj1cIlwiO2Z1bmN0aW9uIHBhKGEpe3JldHVybiBBLmxvY2F0ZUZpbGU/QS5sb2NhdGVGaWxlKGEsRik6RithfXZhciBxYSxyYSxzYTtcbmlmKEQpe3ZhciBmcz1yZXF1aXJlKFwiZnNcIiksdGE9cmVxdWlyZShcInBhdGhcIik7Rj1CP3RhLmRpcm5hbWUoRikrXCIvXCI6X19kaXJuYW1lK1wiL1wiO3FhPShiLGMpPT57Yj1iLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpP25ldyBVUkwoYik6dGEubm9ybWFsaXplKGIpO3JldHVybiBmcy5yZWFkRmlsZVN5bmMoYixjP3ZvaWQgMDpcInV0ZjhcIil9O3NhPWI9PntiPXFhKGIsITApO2IuYnVmZmVyfHwoYj1uZXcgVWludDhBcnJheShiKSk7cmV0dXJuIGJ9O3JhPShiLGMsZCxlPSEwKT0+e2I9Yi5zdGFydHNXaXRoKFwiZmlsZTovL1wiKT9uZXcgVVJMKGIpOnRhLm5vcm1hbGl6ZShiKTtmcy5yZWFkRmlsZShiLGU/dm9pZCAwOlwidXRmOFwiLChmLGspPT57Zj9kKGYpOmMoZT9rLmJ1ZmZlcjprKX0pfTshQS50aGlzUHJvZ3JhbSYmMTxwcm9jZXNzLmFyZ3YubGVuZ3RoJiYobWE9cHJvY2Vzcy5hcmd2WzFdLnJlcGxhY2UoL1xcXFwvZyxcIi9cIikpO3Byb2Nlc3MuYXJndi5zbGljZSgyKTtuYT0oYixjKT0+e3Byb2Nlc3MuZXhpdENvZGU9XG5iO3Rocm93IGM7fTtBLmluc3BlY3Q9KCk9PlwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cIjtsZXQgYTt0cnl7YT1yZXF1aXJlKFwid29ya2VyX3RocmVhZHNcIil9Y2F0Y2goYil7dGhyb3cgY29uc29sZS5lcnJvcignVGhlIFwid29ya2VyX3RocmVhZHNcIiBtb2R1bGUgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIG5vZGUuanMgYnVpbGQgLSBwZXJoYXBzIGEgbmV3ZXIgdmVyc2lvbiBpcyBuZWVkZWQ/JyksYjt9Z2xvYmFsLldvcmtlcj1hLldvcmtlcn1lbHNlIGlmKG9hfHxCKUI/Rj1zZWxmLmxvY2F0aW9uLmhyZWY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50JiZkb2N1bWVudC5jdXJyZW50U2NyaXB0JiYoRj1kb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyksKHR5cGVvZiBfc2NyaXB0RGlyICE9PSBcInVuZGVmaW5lZFwiICYmIF9zY3JpcHREaXIpJiYoRj1fc2NyaXB0RGlyKSwwIT09Ri5pbmRleE9mKFwiYmxvYjpcIik/Rj1GLnN1YnN0cigwLEYucmVwbGFjZSgvWz8jXS4qLyxcIlwiKS5sYXN0SW5kZXhPZihcIi9cIikrMSk6Rj1cIlwiLER8fChxYT1hPT57dmFyIGI9XG5uZXcgWE1MSHR0cFJlcXVlc3Q7Yi5vcGVuKFwiR0VUXCIsYSwhMSk7Yi5zZW5kKG51bGwpO3JldHVybiBiLnJlc3BvbnNlVGV4dH0sQiYmKHNhPWE9Pnt2YXIgYj1uZXcgWE1MSHR0cFJlcXVlc3Q7Yi5vcGVuKFwiR0VUXCIsYSwhMSk7Yi5yZXNwb25zZVR5cGU9XCJhcnJheWJ1ZmZlclwiO2Iuc2VuZChudWxsKTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYi5yZXNwb25zZSl9KSxyYT0oYSxiLGMpPT57dmFyIGQ9bmV3IFhNTEh0dHBSZXF1ZXN0O2Qub3BlbihcIkdFVFwiLGEsITApO2QucmVzcG9uc2VUeXBlPVwiYXJyYXlidWZmZXJcIjtkLm9ubG9hZD0oKT0+ezIwMD09ZC5zdGF0dXN8fDA9PWQuc3RhdHVzJiZkLnJlc3BvbnNlP2IoZC5yZXNwb25zZSk6YygpfTtkLm9uZXJyb3I9YztkLnNlbmQobnVsbCl9KTtEJiZcInVuZGVmaW5lZFwiPT10eXBlb2YgcGVyZm9ybWFuY2UmJihnbG9iYWwucGVyZm9ybWFuY2U9cmVxdWlyZShcInBlcmZfaG9va3NcIikucGVyZm9ybWFuY2UpO1xudmFyIHVhPWNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksdmE9Y29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpO0QmJih1YT0oLi4uYSk9PmZzLndyaXRlU3luYygxLGEuam9pbihcIiBcIikrXCJcXG5cIiksdmE9KC4uLmEpPT5mcy53cml0ZVN5bmMoMixhLmpvaW4oXCIgXCIpK1wiXFxuXCIpKTt2YXIgd2E9dWEsRz12YTtPYmplY3QuYXNzaWduKEEsbGEpO2xhPW51bGw7dmFyIG5vRXhpdFJ1bnRpbWU9ITA7XCJvYmplY3RcIiE9dHlwZW9mIFdlYkFzc2VtYmx5JiZIKFwibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZFwiKTt2YXIgbSx4YSx5YT0hMSxJLG4sYWEsYmEsZGEsZWEsZmEsemEsSixBYSxpYTtcbmZ1bmN0aW9uIHAoKXt2YXIgYT1tLmJ1ZmZlcjtBLkhFQVA4PW49bmV3IEludDhBcnJheShhKTtBLkhFQVAxNj1iYT1uZXcgSW50MTZBcnJheShhKTtBLkhFQVBVOD1hYT1uZXcgVWludDhBcnJheShhKTtBLkhFQVBVMTY9ZGE9bmV3IFVpbnQxNkFycmF5KGEpO0EuSEVBUDMyPWVhPW5ldyBJbnQzMkFycmF5KGEpO0EuSEVBUFUzMj1mYT1uZXcgVWludDMyQXJyYXkoYSk7QS5IRUFQRjMyPXphPW5ldyBGbG9hdDMyQXJyYXkoYSk7QS5IRUFQRjY0PWlhPW5ldyBGbG9hdDY0QXJyYXkoYSk7QS5IRUFQNjQ9Sj1uZXcgQmlnSW50NjRBcnJheShhKTtBLkhFQVBVNjQ9QWE9bmV3IEJpZ1VpbnQ2NEFycmF5KGEpfXZhciBCYT0xNjc3NzIxNjs1MjQyODgwPD1CYXx8SChcIklOSVRJQUxfTUVNT1JZIHNob3VsZCBiZSBsYXJnZXIgdGhhbiBTVEFDS19TSVpFLCB3YXMgXCIrQmErXCIhIChTVEFDS19TSVpFPTUyNDI4ODApXCIpO1xuaWYoRSltPUEud2FzbU1lbW9yeTtlbHNlIGlmKG09bmV3IFdlYkFzc2VtYmx5Lk1lbW9yeSh7aW5pdGlhbDpCYS82NTUzNixtYXhpbXVtOjY1NTM2LHNoYXJlZDohMH0pLCEobS5idWZmZXIgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcikpdGhyb3cgRyhcInJlcXVlc3RlZCBhIHNoYXJlZCBXZWJBc3NlbWJseS5NZW1vcnkgYnV0IHRoZSByZXR1cm5lZCBidWZmZXIgaXMgbm90IGEgU2hhcmVkQXJyYXlCdWZmZXIsIGluZGljYXRpbmcgdGhhdCB3aGlsZSB0aGUgYnJvd3NlciBoYXMgU2hhcmVkQXJyYXlCdWZmZXIgaXQgZG9lcyBub3QgaGF2ZSBXZWJBc3NlbWJseSB0aHJlYWRzIHN1cHBvcnQgLSB5b3UgbWF5IG5lZWQgdG8gc2V0IGEgZmxhZ1wiKSxEJiZHKFwiKG9uIG5vZGUgeW91IG1heSBuZWVkOiAtLWV4cGVyaW1lbnRhbC13YXNtLXRocmVhZHMgLS1leHBlcmltZW50YWwtd2FzbS1idWxrLW1lbW9yeSBhbmQvb3IgcmVjZW50IHZlcnNpb24pXCIpLEVycm9yKFwiYmFkIG1lbW9yeVwiKTtcbnAoKTtCYT1tLmJ1ZmZlci5ieXRlTGVuZ3RoO3ZhciBDYT1bXSxEYT1bXSxFYT1bXSxGYT0wO2Z1bmN0aW9uIEdhKCl7cmV0dXJuIG5vRXhpdFJ1bnRpbWV8fDA8RmF9dmFyIEs9MCxIYT1udWxsLEw9bnVsbDtmdW5jdGlvbiBJYSgpe0stLTtpZigwPT1LJiYobnVsbCE9PUhhJiYoY2xlYXJJbnRlcnZhbChIYSksSGE9bnVsbCksTCkpe3ZhciBhPUw7TD1udWxsO2EoKX19ZnVuY3Rpb24gSChhKXthPVwiQWJvcnRlZChcIithK1wiKVwiO0coYSk7eWE9ITA7ST0xO2E9bmV3IFdlYkFzc2VtYmx5LlJ1bnRpbWVFcnJvcihhK1wiLiBCdWlsZCB3aXRoIC1zQVNTRVJUSU9OUyBmb3IgbW9yZSBpbmZvLlwiKTtrYShhKTt0aHJvdyBhO31mdW5jdGlvbiBKYShhKXtyZXR1cm4gYS5zdGFydHNXaXRoKFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiKX12YXIgTTtNPVwib3J0LXdhc20tdGhyZWFkZWQud2FzbVwiO0phKE0pfHwoTT1wYShNKSk7XG5mdW5jdGlvbiBLYShhKXtpZihzYSlyZXR1cm4gc2EoYSk7dGhyb3dcImJvdGggYXN5bmMgYW5kIHN5bmMgZmV0Y2hpbmcgb2YgdGhlIHdhc20gZmFpbGVkXCI7fWZ1bmN0aW9uIExhKGEpe2lmKG9hfHxCKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBmZXRjaCYmIWEuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikpcmV0dXJuIGZldGNoKGEse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4oYj0+e2lmKCFiLm9rKXRocm93XCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcIithK1wiJ1wiO3JldHVybiBiLmFycmF5QnVmZmVyKCl9KS5jYXRjaCgoKT0+S2EoYSkpO2lmKHJhKXJldHVybiBuZXcgUHJvbWlzZSgoYixjKT0+e3JhKGEsZD0+YihuZXcgVWludDhBcnJheShkKSksYyl9KX1yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+S2EoYSkpfVxuZnVuY3Rpb24gTWEoYSxiLGMpe3JldHVybiBMYShhKS50aGVuKGQ9PldlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGQsYikpLnRoZW4oZD0+ZCkudGhlbihjLGQ9PntHKGBmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiAke2R9YCk7SChkKX0pfVxuZnVuY3Rpb24gTmEoYSxiKXt2YXIgYz1NO3JldHVyblwiZnVuY3Rpb25cIiE9dHlwZW9mIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nfHxKYShjKXx8Yy5zdGFydHNXaXRoKFwiZmlsZTovL1wiKXx8RHx8XCJmdW5jdGlvblwiIT10eXBlb2YgZmV0Y2g/TWEoYyxhLGIpOmZldGNoKGMse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4oZD0+V2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcoZCxhKS50aGVuKGIsZnVuY3Rpb24oZSl7Ryhgd2FzbSBzdHJlYW1pbmcgY29tcGlsZSBmYWlsZWQ6ICR7ZX1gKTtHKFwiZmFsbGluZyBiYWNrIHRvIEFycmF5QnVmZmVyIGluc3RhbnRpYXRpb25cIik7cmV0dXJuIE1hKGMsYSxiKX0pKX1mdW5jdGlvbiBPYShhKXt0aGlzLm5hbWU9XCJFeGl0U3RhdHVzXCI7dGhpcy5tZXNzYWdlPWBQcm9ncmFtIHRlcm1pbmF0ZWQgd2l0aCBleGl0KCR7YX0pYDt0aGlzLnN0YXR1cz1hfVxudmFyIFBhPWE9PnthLnRlcm1pbmF0ZSgpO2Eub25tZXNzYWdlPSgpPT57fX0sUmE9YT0+ezA9PU8ubmIubGVuZ3RoJiYoUWEoKSxPLkFiKE8ubmJbMF0pKTt2YXIgYj1PLm5iLnBvcCgpO2lmKCFiKXJldHVybiA2O08ub2IucHVzaChiKTtPLmpiW2EubWJdPWI7Yi5tYj1hLm1iO3ZhciBjPXtjbWQ6XCJydW5cIixzdGFydF9yb3V0aW5lOmEuTWIsYXJnOmEuR2IscHRocmVhZF9wdHI6YS5tYn07RCYmYi51bnJlZigpO2IucG9zdE1lc3NhZ2UoYyxhLlNiKTtyZXR1cm4gMH0sU2E9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFRleHREZWNvZGVyP25ldyBUZXh0RGVjb2RlcihcInV0ZjhcIik6dm9pZCAwLFRhPShhLGIsYyk9PntiPj4+PTA7dmFyIGQ9YitjO2ZvcihjPWI7YVtjXSYmIShjPj1kKTspKytjO2lmKDE2PGMtYiYmYS5idWZmZXImJlNhKXJldHVybiBTYS5kZWNvZGUoYS5idWZmZXIgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcj9hLnNsaWNlKGIsYyk6YS5zdWJhcnJheShiLGMpKTtmb3IoZD1cblwiXCI7YjxjOyl7dmFyIGU9YVtiKytdO2lmKGUmMTI4KXt2YXIgZj1hW2IrK10mNjM7aWYoMTkyPT0oZSYyMjQpKWQrPVN0cmluZy5mcm9tQ2hhckNvZGUoKGUmMzEpPDw2fGYpO2Vsc2V7dmFyIGs9YVtiKytdJjYzO2U9MjI0PT0oZSYyNDApPyhlJjE1KTw8MTJ8Zjw8NnxrOihlJjcpPDwxOHxmPDwxMnxrPDw2fGFbYisrXSY2Mzs2NTUzNj5lP2QrPVN0cmluZy5mcm9tQ2hhckNvZGUoZSk6KGUtPTY1NTM2LGQrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8ZT4+MTAsNTYzMjB8ZSYxMDIzKSl9fWVsc2UgZCs9U3RyaW5nLmZyb21DaGFyQ29kZShlKX1yZXR1cm4gZH0sVWE9KGEsYik9PihhPj4+PTApP1RhKHQoKSxhLGIpOlwiXCI7ZnVuY3Rpb24gVmEoYSl7aWYoRSlyZXR1cm4gUCgwLDEsYSk7ST1hO0dhKCl8fChPLk5iKCkseWE9ITApO25hKGEsbmV3IE9hKGEpKX12YXIgWGE9YT0+e0k9YTtpZihFKXRocm93IFdhKGEpLFwidW53aW5kXCI7VmEoYSl9O1xuZnVuY3Rpb24gWWEoKXtmb3IodmFyIGE9QS5udW1UaHJlYWRzO2EtLTspUWEoKTtDYS51bnNoaWZ0KCgpPT57SysrO1phKCgpPT5JYSgpKX0pfWZ1bmN0aW9uIFFhKCl7dmFyIGE9cGEoXCJvcnQtd2FzbS10aHJlYWRlZC53b3JrZXIuanNcIik7YT1uZXcgV29ya2VyKGEpO08ubmIucHVzaChhKX1mdW5jdGlvbiBaYShhKXtFP2EoKTpQcm9taXNlLmFsbChPLm5iLm1hcChPLkFiKSkudGhlbihhKX1cbnZhciBPPXtuYjpbXSxvYjpbXSxGYjpbXSxqYjp7fSx2Yigpe0U/KE8ucmVjZWl2ZU9iamVjdFRyYW5zZmVyPU8uTGIsTy50aHJlYWRJbml0VExTPU8uRWIsTy5zZXRFeGl0U3RhdHVzPU8uRGIsbm9FeGl0UnVudGltZT0hMSk6WWEoKX0sRGI6YT0+e0k9YX0sVmI6W1wiJHRlcm1pbmF0ZVdvcmtlclwiXSxOYjooKT0+e2Zvcih2YXIgYSBvZiBPLm9iKVBhKGEpO2ZvcihhIG9mIE8ubmIpUGEoYSk7Ty5uYj1bXTtPLm9iPVtdO08uamI9W119LENiOmE9Pnt2YXIgYj1hLm1iO2RlbGV0ZSBPLmpiW2JdO08ubmIucHVzaChhKTtPLm9iLnNwbGljZShPLm9iLmluZGV4T2YoYSksMSk7YS5tYj0wOyRhKGIpfSxMYigpe30sRWIoKXtPLkZiLmZvckVhY2goYT0+YSgpKX0sQWI6YT0+bmV3IFByb21pc2UoYj0+e2Eub25tZXNzYWdlPWY9PntmPWYuZGF0YTt2YXIgaz1mLmNtZDtpZihmLnRhcmdldFRocmVhZCYmZi50YXJnZXRUaHJlYWQhPWFiKCkpe3ZhciBsPU8uamJbZi50YXJnZXRUaHJlYWRdO2w/XG5sLnBvc3RNZXNzYWdlKGYsZi50cmFuc2Zlckxpc3QpOkcoYEludGVybmFsIGVycm9yISBXb3JrZXIgc2VudCBhIG1lc3NhZ2UgXCIke2t9XCIgdG8gdGFyZ2V0IHB0aHJlYWQgJHtmLnRhcmdldFRocmVhZH0sIGJ1dCB0aGF0IHRocmVhZCBubyBsb25nZXIgZXhpc3RzIWApfWVsc2UgaWYoXCJjaGVja01haWxib3hcIj09PWspYmIoKTtlbHNlIGlmKFwic3Bhd25UaHJlYWRcIj09PWspUmEoZik7ZWxzZSBpZihcImNsZWFudXBUaHJlYWRcIj09PWspKGY9Ty5qYltmLnRocmVhZF0pfHxIKCksTy5DYihmKTtlbHNlIGlmKFwia2lsbFRocmVhZFwiPT09aylmPWYudGhyZWFkLGs9Ty5qYltmXSxkZWxldGUgTy5qYltmXSxQYShrKSwkYShmKSxPLm9iLnNwbGljZShPLm9iLmluZGV4T2YoayksMSksay5tYj0wO2Vsc2UgaWYoXCJjYW5jZWxUaHJlYWRcIj09PWspTy5qYltmLnRocmVhZF0ucG9zdE1lc3NhZ2Uoe2NtZDpcImNhbmNlbFwifSk7ZWxzZSBpZihcImxvYWRlZFwiPT09aylhLmxvYWRlZD0hMCxEJiYhYS5tYiYmXG5hLnVucmVmKCksYihhKTtlbHNlIGlmKFwiYWxlcnRcIj09PWspYWxlcnQoYFRocmVhZCAke2YudGhyZWFkSWR9OiAke2YudGV4dH1gKTtlbHNlIGlmKFwic2V0aW1tZWRpYXRlXCI9PT1mLnRhcmdldClhLnBvc3RNZXNzYWdlKGYpO2Vsc2UgaWYoXCJjYWxsSGFuZGxlclwiPT09aylBW2YuaGFuZGxlcl0oLi4uZi5hcmdzKTtlbHNlIGsmJkcoYHdvcmtlciBzZW50IGFuIHVua25vd24gY29tbWFuZCAke2t9YCl9O2Eub25lcnJvcj1mPT57RyhgJHtcIndvcmtlciBzZW50IGFuIGVycm9yIVwifSAke2YuZmlsZW5hbWV9OiR7Zi5saW5lbm99OiAke2YubWVzc2FnZX1gKTt0aHJvdyBmO307RCYmKGEub24oXCJtZXNzYWdlXCIsZj0+YS5vbm1lc3NhZ2Uoe2RhdGE6Zn0pKSxhLm9uKFwiZXJyb3JcIixmPT5hLm9uZXJyb3IoZikpKTt2YXIgYz1bXSxkPVtdLGU7Zm9yKGUgb2YgZClBLmhhc093blByb3BlcnR5KGUpJiZjLnB1c2goZSk7YS5wb3N0TWVzc2FnZSh7Y21kOlwibG9hZFwiLGhhbmRsZXJzOmMsdXJsT3JCbG9iOkEubWFpblNjcmlwdFVybE9yQmxvYnx8XG5fc2NyaXB0RGlyLHdhc21NZW1vcnk6bSx3YXNtTW9kdWxlOnhhfSl9KX07QS5QVGhyZWFkPU87dmFyIGNiPWE9Pntmb3IoOzA8YS5sZW5ndGg7KWEuc2hpZnQoKShBKX07QS5lc3RhYmxpc2hTdGFja1NwYWNlPSgpPT57dmFyIGE9YWIoKSxiPXooKVthKzUyPj4+Mj4+PjBdO2E9eigpW2ErNTY+Pj4yPj4+MF07ZGIoYixiLWEpO2ViKGIpfTtmdW5jdGlvbiBXYShhKXtpZihFKXJldHVybiBQKDEsMCxhKTtYYShhKX12YXIgZmI9W10sZ2I7QS5pbnZva2VFbnRyeVBvaW50PShhLGIpPT57dmFyIGM9ZmJbYV07Y3x8KGE+PWZiLmxlbmd0aCYmKGZiLmxlbmd0aD1hKzEpLGZiW2FdPWM9Z2IuZ2V0KGEpKTthPWMoYik7R2EoKT9PLkRiKGEpOmhiKGEpfTtcbmZ1bmN0aW9uIGliKGEpe3RoaXMuc2I9YS0yNDt0aGlzLktiPWZ1bmN0aW9uKGIpe3ooKVt0aGlzLnNiKzQ+Pj4yPj4+MF09Yn07dGhpcy54Yj1mdW5jdGlvbihiKXt6KClbdGhpcy5zYis4Pj4+Mj4+PjBdPWJ9O3RoaXMudmI9ZnVuY3Rpb24oYixjKXt0aGlzLndiKCk7dGhpcy5LYihiKTt0aGlzLnhiKGMpfTt0aGlzLndiPWZ1bmN0aW9uKCl7eigpW3RoaXMuc2IrMTY+Pj4yPj4+MF09MH19dmFyIGpiPTAsa2I9MDtmdW5jdGlvbiBsYihhLGIsYyxkKXtyZXR1cm4gRT9QKDIsMSxhLGIsYyxkKTptYihhLGIsYyxkKX1cbmZ1bmN0aW9uIG1iKGEsYixjLGQpe2E+Pj49MDtiPj4+PTA7Yz4+Pj0wO2Q+Pj49MDtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIpcmV0dXJuIEcoXCJDdXJyZW50IGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgU2hhcmVkQXJyYXlCdWZmZXIsIHB0aHJlYWRzIGFyZSBub3QgYXZhaWxhYmxlIVwiKSw2O3ZhciBlPVtdO2lmKEUmJjA9PT1lLmxlbmd0aClyZXR1cm4gbGIoYSxiLGMsZCk7YT17TWI6YyxtYjphLEdiOmQsU2I6ZX07cmV0dXJuIEU/KGEuVWI9XCJzcGF3blRocmVhZFwiLHBvc3RNZXNzYWdlKGEsZSksMCk6UmEoYSl9ZnVuY3Rpb24gbmIoYSxiLGMpe3JldHVybiBFP1AoMywxLGEsYixjKTowfWZ1bmN0aW9uIG9iKGEsYil7aWYoRSlyZXR1cm4gUCg0LDEsYSxiKX1cbnZhciBwYj1hPT57Zm9yKHZhciBiPTAsYz0wO2M8YS5sZW5ndGg7KytjKXt2YXIgZD1hLmNoYXJDb2RlQXQoYyk7MTI3Pj1kP2IrKzoyMDQ3Pj1kP2IrPTI6NTUyOTY8PWQmJjU3MzQzPj1kPyhiKz00LCsrYyk6Yis9M31yZXR1cm4gYn0scWI9KGEsYixjLGQpPT57Yz4+Pj0wO2lmKCEoMDxkKSlyZXR1cm4gMDt2YXIgZT1jO2Q9YytkLTE7Zm9yKHZhciBmPTA7ZjxhLmxlbmd0aDsrK2Ype3ZhciBrPWEuY2hhckNvZGVBdChmKTtpZig1NTI5Njw9ayYmNTczNDM+PWspe3ZhciBsPWEuY2hhckNvZGVBdCgrK2YpO2s9NjU1MzYrKChrJjEwMjMpPDwxMCl8bCYxMDIzfWlmKDEyNz49ayl7aWYoYz49ZClicmVhaztiW2MrKz4+PjBdPWt9ZWxzZXtpZigyMDQ3Pj1rKXtpZihjKzE+PWQpYnJlYWs7YltjKys+Pj4wXT0xOTJ8az4+Nn1lbHNle2lmKDY1NTM1Pj1rKXtpZihjKzI+PWQpYnJlYWs7YltjKys+Pj4wXT0yMjR8az4+MTJ9ZWxzZXtpZihjKzM+PWQpYnJlYWs7YltjKys+Pj4wXT0yNDB8az4+XG4xODtiW2MrKz4+PjBdPTEyOHxrPj4xMiY2M31iW2MrKz4+PjBdPTEyOHxrPj42JjYzfWJbYysrPj4+MF09MTI4fGsmNjN9fWJbYz4+PjBdPTA7cmV0dXJuIGMtZX0scmI9KGEsYixjKT0+cWIoYSx0KCksYixjKTtmdW5jdGlvbiBzYihhLGIpe2lmKEUpcmV0dXJuIFAoNSwxLGEsYil9ZnVuY3Rpb24gdGIoYSxiLGMpe2lmKEUpcmV0dXJuIFAoNiwxLGEsYixjKX1mdW5jdGlvbiB1YihhLGIsYyl7cmV0dXJuIEU/UCg3LDEsYSxiLGMpOjB9ZnVuY3Rpb24gdmIoYSxiKXtpZihFKXJldHVybiBQKDgsMSxhLGIpfWZ1bmN0aW9uIHdiKGEsYixjKXtpZihFKXJldHVybiBQKDksMSxhLGIsYyl9ZnVuY3Rpb24geGIoYSxiLGMsZCl7aWYoRSlyZXR1cm4gUCgxMCwxLGEsYixjLGQpfWZ1bmN0aW9uIHliKGEsYixjLGQpe2lmKEUpcmV0dXJuIFAoMTEsMSxhLGIsYyxkKX1mdW5jdGlvbiB6YihhLGIsYyxkKXtpZihFKXJldHVybiBQKDEyLDEsYSxiLGMsZCl9XG5mdW5jdGlvbiBBYihhKXtpZihFKXJldHVybiBQKDEzLDEsYSl9ZnVuY3Rpb24gQmIoYSxiKXtpZihFKXJldHVybiBQKDE0LDEsYSxiKX1mdW5jdGlvbiBDYihhLGIsYyl7aWYoRSlyZXR1cm4gUCgxNSwxLGEsYixjKX12YXIgRGI9YT0+e2lmKG51bGw9PT1hKXJldHVyblwibnVsbFwiO3ZhciBiPXR5cGVvZiBhO3JldHVyblwib2JqZWN0XCI9PT1ifHxcImFycmF5XCI9PT1ifHxcImZ1bmN0aW9uXCI9PT1iP2EudG9TdHJpbmcoKTpcIlwiK2F9LEViLFI9YT0+e2Zvcih2YXIgYj1cIlwiO3QoKVthPj4+MF07KWIrPUViW3QoKVthKys+Pj4wXV07cmV0dXJuIGJ9LEZiPXt9LEdiPXt9LEhiPXt9LFM7XG5mdW5jdGlvbiBJYihhLGIsYz17fSl7dmFyIGQ9Yi5uYW1lO2lmKCFhKXRocm93IG5ldyBTKGB0eXBlIFwiJHtkfVwiIG11c3QgaGF2ZSBhIHBvc2l0aXZlIGludGVnZXIgdHlwZWlkIHBvaW50ZXJgKTtpZihHYi5oYXNPd25Qcm9wZXJ0eShhKSl7aWYoYy5JYilyZXR1cm47dGhyb3cgbmV3IFMoYENhbm5vdCByZWdpc3RlciB0eXBlICcke2R9JyB0d2ljZWApO31HYlthXT1iO2RlbGV0ZSBIYlthXTtGYi5oYXNPd25Qcm9wZXJ0eShhKSYmKGI9RmJbYV0sZGVsZXRlIEZiW2FdLGIuZm9yRWFjaChlPT5lKCkpKX1mdW5jdGlvbiBUKGEsYixjPXt9KXtpZighKFwiYXJnUGFja0FkdmFuY2VcImluIGIpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJyZWdpc3RlclR5cGUgcmVnaXN0ZXJlZEluc3RhbmNlIHJlcXVpcmVzIGFyZ1BhY2tBZHZhbmNlXCIpO0liKGEsYixjKX1cbnZhciBKYj0oYSxiLGMpPT57c3dpdGNoKGIpe2Nhc2UgMTpyZXR1cm4gYz9kPT5oKClbZD4+PjA+Pj4wXTpkPT50KClbZD4+PjA+Pj4wXTtjYXNlIDI6cmV0dXJuIGM/ZD0+digpW2Q+Pj4xPj4+MF06ZD0+Y2EoKVtkPj4+MT4+PjBdO2Nhc2UgNDpyZXR1cm4gYz9kPT53KClbZD4+PjI+Pj4wXTpkPT56KClbZD4+PjI+Pj4wXTtjYXNlIDg6cmV0dXJuIGM/ZD0+SltkPj4+M106ZD0+QWFbZD4+PjNdO2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcihgaW52YWxpZCBpbnRlZ2VyIHdpZHRoICgke2J9KTogJHthfWApO319O2Z1bmN0aW9uIEtiKCl7dGhpcy5sYj1bdm9pZCAwXTt0aGlzLnpiPVtdfXZhciBVPW5ldyBLYjtmdW5jdGlvbiBMYihhKXthPj4+PTA7YT49VS5zYiYmMD09PS0tVS5nZXQoYSkuQmImJlUueGIoYSl9XG52YXIgVj1hPT57aWYoIWEpdGhyb3cgbmV3IFMoXCJDYW5ub3QgdXNlIGRlbGV0ZWQgdmFsLiBoYW5kbGUgPSBcIithKTtyZXR1cm4gVS5nZXQoYSkudmFsdWV9LFc9YT0+e3N3aXRjaChhKXtjYXNlIHZvaWQgMDpyZXR1cm4gMTtjYXNlIG51bGw6cmV0dXJuIDI7Y2FzZSAhMDpyZXR1cm4gMztjYXNlICExOnJldHVybiA0O2RlZmF1bHQ6cmV0dXJuIFUud2Ioe0JiOjEsdmFsdWU6YX0pfX07ZnVuY3Rpb24gTWIoYSl7cmV0dXJuIHRoaXMuZnJvbVdpcmVUeXBlKHcoKVthPj4+Mj4+PjBdKX1cbnZhciBOYj0oYSxiKT0+e3N3aXRjaChiKXtjYXNlIDQ6cmV0dXJuIGZ1bmN0aW9uKGMpe3ZhciBkPXRoaXMuZnJvbVdpcmVUeXBlO20uYnVmZmVyIT1uLmJ1ZmZlciYmcCgpO3JldHVybiBkLmNhbGwodGhpcyx6YVtjPj4+Mj4+PjBdKX07Y2FzZSA4OnJldHVybiBmdW5jdGlvbihjKXtyZXR1cm4gdGhpcy5mcm9tV2lyZVR5cGUoaGEoKVtjPj4+Mz4+PjBdKX07ZGVmYXVsdDp0aHJvdyBuZXcgVHlwZUVycm9yKGBpbnZhbGlkIGZsb2F0IHdpZHRoICgke2J9KTogJHthfWApO319O2Z1bmN0aW9uIE9iKGEpe3JldHVybiB0aGlzLmZyb21XaXJlVHlwZSh6KClbYT4+PjI+Pj4wXSl9XG52YXIgUGI9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFRleHREZWNvZGVyP25ldyBUZXh0RGVjb2RlcihcInV0Zi0xNmxlXCIpOnZvaWQgMCxRYj0oYSxiKT0+e3ZhciBjPWE+PjE7Zm9yKHZhciBkPWMrYi8yOyEoYz49ZCkmJmNhKClbYz4+PjBdOykrK2M7Yzw8PTE7aWYoMzI8Yy1hJiZQYilyZXR1cm4gUGIuZGVjb2RlKHQoKS5zbGljZShhLGMpKTtjPVwiXCI7Zm9yKGQ9MDshKGQ+PWIvMik7KytkKXt2YXIgZT12KClbYSsyKmQ+Pj4xPj4+MF07aWYoMD09ZSlicmVhaztjKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGUpfXJldHVybiBjfSxSYj0oYSxiLGMpPT57dm9pZCAwPT09YyYmKGM9MjE0NzQ4MzY0Nyk7aWYoMj5jKXJldHVybiAwO2MtPTI7dmFyIGQ9YjtjPWM8MiphLmxlbmd0aD9jLzI6YS5sZW5ndGg7Zm9yKHZhciBlPTA7ZTxjOysrZSl7dmFyIGY9YS5jaGFyQ29kZUF0KGUpO3YoKVtiPj4+MT4+PjBdPWY7Yis9Mn12KClbYj4+PjE+Pj4wXT0wO3JldHVybiBiLWR9LFNiPWE9PjIqYS5sZW5ndGgsXG5UYj0oYSxiKT0+e2Zvcih2YXIgYz0wLGQ9XCJcIjshKGM+PWIvNCk7KXt2YXIgZT13KClbYSs0KmM+Pj4yPj4+MF07aWYoMD09ZSlicmVhazsrK2M7NjU1MzY8PWU/KGUtPTY1NTM2LGQrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8ZT4+MTAsNTYzMjB8ZSYxMDIzKSk6ZCs9U3RyaW5nLmZyb21DaGFyQ29kZShlKX1yZXR1cm4gZH0sVWI9KGEsYixjKT0+e2I+Pj49MDt2b2lkIDA9PT1jJiYoYz0yMTQ3NDgzNjQ3KTtpZig0PmMpcmV0dXJuIDA7dmFyIGQ9YjtjPWQrYy00O2Zvcih2YXIgZT0wO2U8YS5sZW5ndGg7KytlKXt2YXIgZj1hLmNoYXJDb2RlQXQoZSk7aWYoNTUyOTY8PWYmJjU3MzQzPj1mKXt2YXIgaz1hLmNoYXJDb2RlQXQoKytlKTtmPTY1NTM2KygoZiYxMDIzKTw8MTApfGsmMTAyM313KClbYj4+PjI+Pj4wXT1mO2IrPTQ7aWYoYis0PmMpYnJlYWt9dygpW2I+Pj4yPj4+MF09MDtyZXR1cm4gYi1kfSxWYj1hPT57Zm9yKHZhciBiPTAsYz0wO2M8YS5sZW5ndGg7KytjKXt2YXIgZD1cbmEuY2hhckNvZGVBdChjKTs1NTI5Njw9ZCYmNTczNDM+PWQmJisrYztiKz00fXJldHVybiBifSxXYj1hPT57aWYoIXlhKXRyeXtpZihhKCksIUdhKCkpdHJ5e0U/aGIoSSk6WGEoSSl9Y2F0Y2goYil7YiBpbnN0YW5jZW9mIE9hfHxcInVud2luZFwiPT1ifHxuYSgxLGIpfX1jYXRjaChiKXtiIGluc3RhbmNlb2YgT2F8fFwidW53aW5kXCI9PWJ8fG5hKDEsYil9fTtmdW5jdGlvbiBYYihhKXthPj4+PTA7XCJmdW5jdGlvblwiPT09dHlwZW9mIEF0b21pY3MuVGImJihBdG9taWNzLlRiKHcoKSxhPj4+MixhKS52YWx1ZS50aGVuKGJiKSxhKz0xMjgsQXRvbWljcy5zdG9yZSh3KCksYT4+PjIsMSkpfUEuX19lbXNjcmlwdGVuX3RocmVhZF9tYWlsYm94X2F3YWl0PVhiO3ZhciBiYj0oKT0+e3ZhciBhPWFiKCk7YSYmKFhiKGEpLFdiKCgpPT5ZYigpKSl9O0EuY2hlY2tNYWlsYm94PWJiO3ZhciAkYj1hPT57dmFyIGI9WmIoKTthPWEoKTtlYihiKTtyZXR1cm4gYX07XG5mdW5jdGlvbiBQKGEsYil7dmFyIGM9YXJndW1lbnRzLmxlbmd0aC0yLGQ9YXJndW1lbnRzO3JldHVybiAkYigoKT0+e2Zvcih2YXIgZT0yKmMsZj1hYyg4KmUpLGs9Zj4+PjMsbD0wO2w8YztsKyspe3ZhciBxPWRbMitsXTtcImJpZ2ludFwiPT10eXBlb2YgcT8oSltrKzIqbF09MW4sSltrKzIqbCsxXT1xKTooSltrKzIqbF09MG4saGEoKVtrKzIqbCsxPj4+MF09cSl9cmV0dXJuIGJjKGEsZSxmLGIpfSl9XG52YXIgY2M9W10sZWM9KGEsYik9Pnt2YXIgYz1HYlthXTtpZih2b2lkIDA9PT1jKXRocm93IGE9ZGMoYSksYz1SKGEpLFgoYSksbmV3IFMoYitcIiBoYXMgdW5rbm93biB0eXBlIFwiK2MpO3JldHVybiBjfSxmYz17fSxnYz1hPT57dmFyIGI9ZmNbYV07cmV0dXJuIHZvaWQgMD09PWI/UihhKTpifSxoYz1bXSxpYz0oKT0+XCJvYmplY3RcIj09dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCksamM9YT0+e3ZhciBiPWhjLmxlbmd0aDtoYy5wdXNoKGEpO3JldHVybiBifSxrYz0oYSxiKT0+e2Zvcih2YXIgYz1BcnJheShhKSxkPTA7ZDxhOysrZCljW2RdPWVjKHooKVtiKzQqZD4+PjI+Pj4wXSxcInBhcmFtZXRlciBcIitkKTtyZXR1cm4gY30sbWM9YT0+e2lmKHZvaWQgMD09PWEpcmV0dXJuXCJfdW5rbm93blwiO2E9YS5yZXBsYWNlKC9bXmEtekEtWjAtOV9dL2csXCIkXCIpO3ZhciBiPWEuY2hhckNvZGVBdCgwKTtyZXR1cm4gNDg8PWImJjU3Pj1iP2BfJHthfWA6XG5hfSxuYz17fTtmdW5jdGlvbiBvYyhhLGIpe2E9bWMoYSk7cmV0dXJue1thXTpmdW5jdGlvbigpe3JldHVybiBiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX19W2FdfWZ1bmN0aW9uIHBjKGEpe3ZhciBiPUZ1bmN0aW9uO2lmKCEoYiBpbnN0YW5jZW9mIEZ1bmN0aW9uKSl0aHJvdyBuZXcgVHlwZUVycm9yKGBuZXdfIGNhbGxlZCB3aXRoIGNvbnN0cnVjdG9yIHR5cGUgJHt0eXBlb2YgYn0gd2hpY2ggaXMgbm90IGEgZnVuY3Rpb25gKTt2YXIgYz1vYyhiLm5hbWV8fFwidW5rbm93bkZ1bmN0aW9uTmFtZVwiLGZ1bmN0aW9uKCl7fSk7Yy5wcm90b3R5cGU9Yi5wcm90b3R5cGU7Yz1uZXcgYzthPWIuYXBwbHkoYyxhKTtyZXR1cm4gYSBpbnN0YW5jZW9mIE9iamVjdD9hOmN9XG52YXIgcWM9YT0+e2Zvcih2YXIgYj1cIlwiLGM9MDtjPGE7KytjKWIrPSgwIT09Yz9cIiwgXCI6XCJcIikrXCJhcmdcIitjO3ZhciBkPVwicmV0dXJuIGZ1bmN0aW9uIGVtdmFsX2FsbG9jYXRvcl9cIithK1wiKGNvbnN0cnVjdG9yLCBhcmdUeXBlcywgYXJncykge1xcbiAgdmFyIEhFQVBVMzIgPSBnZXRNZW1vcnkoKTtcXG5cIjtmb3IoYz0wO2M8YTsrK2MpZCs9XCJ2YXIgYXJnVHlwZVwiK2MrXCIgPSByZXF1aXJlUmVnaXN0ZXJlZFR5cGUoSEVBUFUzMlsoKGFyZ1R5cGVzKT4+PjIpXSwgJ3BhcmFtZXRlciBcIitjK1wiJyk7XFxudmFyIGFyZ1wiK2MrXCIgPSBhcmdUeXBlXCIrYytcIi5yZWFkVmFsdWVGcm9tUG9pbnRlcihhcmdzKTtcXG5hcmdzICs9IGFyZ1R5cGVcIitjK1wiWydhcmdQYWNrQWR2YW5jZSddO1xcbmFyZ1R5cGVzICs9IDQ7XFxuXCI7cmV0dXJuKG5ldyBGdW5jdGlvbihcInJlcXVpcmVSZWdpc3RlcmVkVHlwZVwiLFwiTW9kdWxlXCIsXCJ2YWx1ZVRvSGFuZGxlXCIsXCJnZXRNZW1vcnlcIixkKyhcInZhciBvYmogPSBuZXcgY29uc3RydWN0b3IoXCIrXG5iK1wiKTtcXG5yZXR1cm4gdmFsdWVUb0hhbmRsZShvYmopO1xcbn1cXG5cIikpKShlYyxBLFcsKCk9PnooKSl9LHJjPXt9LFk9YT0+MD09PWElNCYmKDAhPT1hJTEwMHx8MD09PWElNDAwKSxzYz1bMCwzMSw2MCw5MSwxMjEsMTUyLDE4MiwyMTMsMjQ0LDI3NCwzMDUsMzM1XSx0Yz1bMCwzMSw1OSw5MCwxMjAsMTUxLDE4MSwyMTIsMjQzLDI3MywzMDQsMzM0XTtmdW5jdGlvbiB1YyhhLGIsYyxkLGUsZixrKXtyZXR1cm4gRT9QKDE2LDEsYSxiLGMsZCxlLGYsayk6LTUyfWZ1bmN0aW9uIHZjKGEsYixjLGQsZSxmKXtpZihFKXJldHVybiBQKDE3LDEsYSxiLGMsZCxlLGYpfVxudmFyIHhjPWE9Pnt2YXIgYj1wYihhKSsxLGM9d2MoYik7YyYmcmIoYSxjLGIpO3JldHVybiBjfSx5Yz17fSxBYz0oKT0+e2lmKCF6Yyl7dmFyIGE9e1VTRVI6XCJ3ZWJfdXNlclwiLExPR05BTUU6XCJ3ZWJfdXNlclwiLFBBVEg6XCIvXCIsUFdEOlwiL1wiLEhPTUU6XCIvaG9tZS93ZWJfdXNlclwiLExBTkc6KFwib2JqZWN0XCI9PXR5cGVvZiBuYXZpZ2F0b3ImJm5hdmlnYXRvci5sYW5ndWFnZXMmJm5hdmlnYXRvci5sYW5ndWFnZXNbMF18fFwiQ1wiKS5yZXBsYWNlKFwiLVwiLFwiX1wiKStcIi5VVEYtOFwiLF86bWF8fFwiLi90aGlzLnByb2dyYW1cIn0sYjtmb3IoYiBpbiB5Yyl2b2lkIDA9PT15Y1tiXT9kZWxldGUgYVtiXTphW2JdPXljW2JdO3ZhciBjPVtdO2ZvcihiIGluIGEpYy5wdXNoKGAke2J9PSR7YVtiXX1gKTt6Yz1jfXJldHVybiB6Y30semM7XG5mdW5jdGlvbiBCYyhhLGIpe2lmKEUpcmV0dXJuIFAoMTgsMSxhLGIpO2E+Pj49MDtiPj4+PTA7dmFyIGM9MDtBYygpLmZvckVhY2goKGQsZSk9Pnt2YXIgZj1iK2M7ZT16KClbYSs0KmU+Pj4yPj4+MF09Zjtmb3IoZj0wO2Y8ZC5sZW5ndGg7KytmKWgoKVtlKys+Pj4wPj4+MF09ZC5jaGFyQ29kZUF0KGYpO2goKVtlPj4+MD4+PjBdPTA7Yys9ZC5sZW5ndGgrMX0pO3JldHVybiAwfWZ1bmN0aW9uIENjKGEsYil7aWYoRSlyZXR1cm4gUCgxOSwxLGEsYik7YT4+Pj0wO2I+Pj49MDt2YXIgYz1BYygpO3ooKVthPj4+Mj4+PjBdPWMubGVuZ3RoO3ZhciBkPTA7Yy5mb3JFYWNoKGU9PmQrPWUubGVuZ3RoKzEpO3ooKVtiPj4+Mj4+PjBdPWQ7cmV0dXJuIDB9ZnVuY3Rpb24gRGMoYSl7cmV0dXJuIEU/UCgyMCwxLGEpOjUyfWZ1bmN0aW9uIEVjKGEsYixjLGQpe3JldHVybiBFP1AoMjEsMSxhLGIsYyxkKTo1Mn1cbmZ1bmN0aW9uIEZjKGEsYixjLGQpe3JldHVybiBFP1AoMjIsMSxhLGIsYyxkKTo3MH12YXIgR2M9W251bGwsW10sW11dO2Z1bmN0aW9uIEhjKGEsYixjLGQpe2lmKEUpcmV0dXJuIFAoMjMsMSxhLGIsYyxkKTtiPj4+PTA7Yz4+Pj0wO2Q+Pj49MDtmb3IodmFyIGU9MCxmPTA7ZjxjO2YrKyl7dmFyIGs9eigpW2I+Pj4yPj4+MF0sbD16KClbYis0Pj4+Mj4+PjBdO2IrPTg7Zm9yKHZhciBxPTA7cTxsO3ErKyl7dmFyIHI9dCgpW2srcT4+PjBdLHg9R2NbYV07MD09PXJ8fDEwPT09cj8oKDE9PT1hP3dhOkcpKFRhKHgsMCkpLHgubGVuZ3RoPTApOngucHVzaChyKX1lKz1sfXooKVtkPj4+Mj4+PjBdPWU7cmV0dXJuIDB9dmFyIEljPVszMSwyOSwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV0sSmM9WzMxLDI4LDMxLDMwLDMxLDMwLDMxLDMxLDMwLDMxLDMwLDMxXTtmdW5jdGlvbiBLYyhhKXt2YXIgYj1BcnJheShwYihhKSsxKTtxYihhLGIsMCxiLmxlbmd0aCk7cmV0dXJuIGJ9XG52YXIgTGM9KGEsYik9PntoKCkuc2V0KGEsYj4+PjApfTtcbmZ1bmN0aW9uIE1jKGEsYixjLGQpe2Z1bmN0aW9uIGUoZyx1LHkpe2ZvcihnPVwibnVtYmVyXCI9PXR5cGVvZiBnP2cudG9TdHJpbmcoKTpnfHxcIlwiO2cubGVuZ3RoPHU7KWc9eVswXStnO3JldHVybiBnfWZ1bmN0aW9uIGYoZyx1KXtyZXR1cm4gZShnLHUsXCIwXCIpfWZ1bmN0aW9uIGsoZyx1KXtmdW5jdGlvbiB5KGxjKXtyZXR1cm4gMD5sYz8tMTowPGxjPzE6MH12YXIgUTswPT09KFE9eShnLmdldEZ1bGxZZWFyKCktdS5nZXRGdWxsWWVhcigpKSkmJjA9PT0oUT15KGcuZ2V0TW9udGgoKS11LmdldE1vbnRoKCkpKSYmKFE9eShnLmdldERhdGUoKS11LmdldERhdGUoKSkpO3JldHVybiBRfWZ1bmN0aW9uIGwoZyl7c3dpdGNoKGcuZ2V0RGF5KCkpe2Nhc2UgMDpyZXR1cm4gbmV3IERhdGUoZy5nZXRGdWxsWWVhcigpLTEsMTEsMjkpO2Nhc2UgMTpyZXR1cm4gZztjYXNlIDI6cmV0dXJuIG5ldyBEYXRlKGcuZ2V0RnVsbFllYXIoKSwwLDMpO2Nhc2UgMzpyZXR1cm4gbmV3IERhdGUoZy5nZXRGdWxsWWVhcigpLFxuMCwyKTtjYXNlIDQ6cmV0dXJuIG5ldyBEYXRlKGcuZ2V0RnVsbFllYXIoKSwwLDEpO2Nhc2UgNTpyZXR1cm4gbmV3IERhdGUoZy5nZXRGdWxsWWVhcigpLTEsMTEsMzEpO2Nhc2UgNjpyZXR1cm4gbmV3IERhdGUoZy5nZXRGdWxsWWVhcigpLTEsMTEsMzApfX1mdW5jdGlvbiBxKGcpe3ZhciB1PWcucGI7Zm9yKGc9bmV3IERhdGUoKG5ldyBEYXRlKGcucWIrMTkwMCwwLDEpKS5nZXRUaW1lKCkpOzA8dTspe3ZhciB5PWcuZ2V0TW9udGgoKSxRPShZKGcuZ2V0RnVsbFllYXIoKSk/SWM6SmMpW3ldO2lmKHU+US1nLmdldERhdGUoKSl1LT1RLWcuZ2V0RGF0ZSgpKzEsZy5zZXREYXRlKDEpLDExPnk/Zy5zZXRNb250aCh5KzEpOihnLnNldE1vbnRoKDApLGcuc2V0RnVsbFllYXIoZy5nZXRGdWxsWWVhcigpKzEpKTtlbHNle2cuc2V0RGF0ZShnLmdldERhdGUoKSt1KTticmVha319eT1uZXcgRGF0ZShnLmdldEZ1bGxZZWFyKCkrMSwwLDQpO3U9bChuZXcgRGF0ZShnLmdldEZ1bGxZZWFyKCksXG4wLDQpKTt5PWwoeSk7cmV0dXJuIDA+PWsodSxnKT8wPj1rKHksZyk/Zy5nZXRGdWxsWWVhcigpKzE6Zy5nZXRGdWxsWWVhcigpOmcuZ2V0RnVsbFllYXIoKS0xfWE+Pj49MDtiPj4+PTA7Yz4+Pj0wO2Q+Pj49MDt2YXIgcj16KClbZCs0MD4+PjI+Pj4wXTtkPXtRYjp3KClbZD4+PjI+Pj4wXSxQYjp3KClbZCs0Pj4+Mj4+PjBdLHRiOncoKVtkKzg+Pj4yPj4+MF0seWI6dygpW2QrMTI+Pj4yPj4+MF0sdWI6dygpW2QrMTY+Pj4yPj4+MF0scWI6dygpW2QrMjA+Pj4yPj4+MF0sa2I6dygpW2QrMjQ+Pj4yPj4+MF0scGI6dygpW2QrMjg+Pj4yPj4+MF0sV2I6dygpW2QrMzI+Pj4yPj4+MF0sT2I6dygpW2QrMzY+Pj4yPj4+MF0sUmI6cj9VYShyKTpcIlwifTtjPVVhKGMpO3I9e1wiJWNcIjpcIiVhICViICVkICVIOiVNOiVTICVZXCIsXCIlRFwiOlwiJW0vJWQvJXlcIixcIiVGXCI6XCIlWS0lbS0lZFwiLFwiJWhcIjpcIiViXCIsXCIlclwiOlwiJUk6JU06JVMgJXBcIixcIiVSXCI6XCIlSDolTVwiLFwiJVRcIjpcIiVIOiVNOiVTXCIsXCIleFwiOlwiJW0vJWQvJXlcIixcblwiJVhcIjpcIiVIOiVNOiVTXCIsXCIlRWNcIjpcIiVjXCIsXCIlRUNcIjpcIiVDXCIsXCIlRXhcIjpcIiVtLyVkLyV5XCIsXCIlRVhcIjpcIiVIOiVNOiVTXCIsXCIlRXlcIjpcIiV5XCIsXCIlRVlcIjpcIiVZXCIsXCIlT2RcIjpcIiVkXCIsXCIlT2VcIjpcIiVlXCIsXCIlT0hcIjpcIiVIXCIsXCIlT0lcIjpcIiVJXCIsXCIlT21cIjpcIiVtXCIsXCIlT01cIjpcIiVNXCIsXCIlT1NcIjpcIiVTXCIsXCIlT3VcIjpcIiV1XCIsXCIlT1VcIjpcIiVVXCIsXCIlT1ZcIjpcIiVWXCIsXCIlT3dcIjpcIiV3XCIsXCIlT1dcIjpcIiVXXCIsXCIlT3lcIjpcIiV5XCJ9O2Zvcih2YXIgeCBpbiByKWM9Yy5yZXBsYWNlKG5ldyBSZWdFeHAoeCxcImdcIiksclt4XSk7dmFyIEM9XCJTdW5kYXkgTW9uZGF5IFR1ZXNkYXkgV2VkbmVzZGF5IFRodXJzZGF5IEZyaWRheSBTYXR1cmRheVwiLnNwbGl0KFwiIFwiKSxOPVwiSmFudWFyeSBGZWJydWFyeSBNYXJjaCBBcHJpbCBNYXkgSnVuZSBKdWx5IEF1Z3VzdCBTZXB0ZW1iZXIgT2N0b2JlciBOb3ZlbWJlciBEZWNlbWJlclwiLnNwbGl0KFwiIFwiKTtyPXtcIiVhXCI6Zz0+Q1tnLmtiXS5zdWJzdHJpbmcoMCwzKSxcIiVBXCI6Zz0+XG5DW2cua2JdLFwiJWJcIjpnPT5OW2cudWJdLnN1YnN0cmluZygwLDMpLFwiJUJcIjpnPT5OW2cudWJdLFwiJUNcIjpnPT5mKChnLnFiKzE5MDApLzEwMHwwLDIpLFwiJWRcIjpnPT5mKGcueWIsMiksXCIlZVwiOmc9PmUoZy55YiwyLFwiIFwiKSxcIiVnXCI6Zz0+cShnKS50b1N0cmluZygpLnN1YnN0cmluZygyKSxcIiVHXCI6Zz0+cShnKSxcIiVIXCI6Zz0+ZihnLnRiLDIpLFwiJUlcIjpnPT57Zz1nLnRiOzA9PWc/Zz0xMjoxMjxnJiYoZy09MTIpO3JldHVybiBmKGcsMil9LFwiJWpcIjpnPT57Zm9yKHZhciB1PTAseT0wO3k8PWcudWItMTt1Kz0oWShnLnFiKzE5MDApP0ljOkpjKVt5KytdKTtyZXR1cm4gZihnLnliK3UsMyl9LFwiJW1cIjpnPT5mKGcudWIrMSwyKSxcIiVNXCI6Zz0+ZihnLlBiLDIpLFwiJW5cIjooKT0+XCJcXG5cIixcIiVwXCI6Zz0+MDw9Zy50YiYmMTI+Zy50Yj9cIkFNXCI6XCJQTVwiLFwiJVNcIjpnPT5mKGcuUWIsMiksXCIldFwiOigpPT5cIlxcdFwiLFwiJXVcIjpnPT5nLmtifHw3LFwiJVVcIjpnPT5mKE1hdGguZmxvb3IoKGcucGIrNy1nLmtiKS9cbjcpLDIpLFwiJVZcIjpnPT57dmFyIHU9TWF0aC5mbG9vcigoZy5wYis3LShnLmtiKzYpJTcpLzcpOzI+PShnLmtiKzM3MS1nLnBiLTIpJTcmJnUrKztpZih1KTUzPT11JiYoeT0oZy5rYiszNzEtZy5wYiklNyw0PT15fHwzPT15JiZZKGcucWIpfHwodT0xKSk7ZWxzZXt1PTUyO3ZhciB5PShnLmtiKzctZy5wYi0xKSU3Oyg0PT15fHw1PT15JiZZKGcucWIlNDAwLTEpKSYmdSsrfXJldHVybiBmKHUsMil9LFwiJXdcIjpnPT5nLmtiLFwiJVdcIjpnPT5mKE1hdGguZmxvb3IoKGcucGIrNy0oZy5rYis2KSU3KS83KSwyKSxcIiV5XCI6Zz0+KGcucWIrMTkwMCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXCIlWVwiOmc9PmcucWIrMTkwMCxcIiV6XCI6Zz0+e2c9Zy5PYjt2YXIgdT0wPD1nO2c9TWF0aC5hYnMoZykvNjA7cmV0dXJuKHU/XCIrXCI6XCItXCIpK1N0cmluZyhcIjAwMDBcIisoZy82MCoxMDArZyU2MCkpLnNsaWNlKC00KX0sXCIlWlwiOmc9PmcuUmIsXCIlJVwiOigpPT5cIiVcIn07Yz1jLnJlcGxhY2UoLyUlL2csXCJcXHgwMFxceDAwXCIpO1xuZm9yKHggaW4gciljLmluY2x1ZGVzKHgpJiYoYz1jLnJlcGxhY2UobmV3IFJlZ0V4cCh4LFwiZ1wiKSxyW3hdKGQpKSk7Yz1jLnJlcGxhY2UoL1xcMFxcMC9nLFwiJVwiKTt4PUtjKGMpO2lmKHgubGVuZ3RoPmIpcmV0dXJuIDA7TGMoeCxhKTtyZXR1cm4geC5sZW5ndGgtMX1PLnZiKCk7Zm9yKHZhciBOYz1BcnJheSgyNTYpLE9jPTA7MjU2Pk9jOysrT2MpTmNbT2NdPVN0cmluZy5mcm9tQ2hhckNvZGUoT2MpO0ViPU5jO1M9QS5CaW5kaW5nRXJyb3I9Y2xhc3MgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihhKXtzdXBlcihhKTt0aGlzLm5hbWU9XCJCaW5kaW5nRXJyb3JcIn19O0EuSW50ZXJuYWxFcnJvcj1jbGFzcyBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGEpe3N1cGVyKGEpO3RoaXMubmFtZT1cIkludGVybmFsRXJyb3JcIn19O1xuT2JqZWN0LmFzc2lnbihLYi5wcm90b3R5cGUse2dldChhKXtyZXR1cm4gdGhpcy5sYlthXX0saGFzKGEpe3JldHVybiB2b2lkIDAhPT10aGlzLmxiW2FdfSx3YihhKXt2YXIgYj10aGlzLnpiLnBvcCgpfHx0aGlzLmxiLmxlbmd0aDt0aGlzLmxiW2JdPWE7cmV0dXJuIGJ9LHhiKGEpe3RoaXMubGJbYV09dm9pZCAwO3RoaXMuemIucHVzaChhKX19KTtVLmxiLnB1c2goe3ZhbHVlOnZvaWQgMH0se3ZhbHVlOm51bGx9LHt2YWx1ZTohMH0se3ZhbHVlOiExfSk7VS5zYj1VLmxiLmxlbmd0aDtBLmNvdW50X2VtdmFsX2hhbmRsZXM9KCk9Pntmb3IodmFyIGE9MCxiPVUuc2I7YjxVLmxiLmxlbmd0aDsrK2Ipdm9pZCAwIT09VS5sYltiXSYmKythO3JldHVybiBhfTtcbnZhciBQYz1bVmEsV2EsbGIsbmIsb2Isc2IsdGIsdWIsdmIsd2IseGIseWIsemIsQWIsQmIsQ2IsdWMsdmMsQmMsQ2MsRGMsRWMsRmMsSGNdLFJjPXtiOmZ1bmN0aW9uKGEsYixjKXthPj4+PTA7KG5ldyBpYihhKSkudmIoYj4+PjAsYz4+PjApO2piPWE7a2IrKzt0aHJvdyBqYjt9LGVhOmZ1bmN0aW9uKGEpe1FjKGE+Pj4wLCFCLDEsIW9hLDEzMTA3MiwhMSk7Ty5FYigpfSxFOmZ1bmN0aW9uKGEpe2E+Pj49MDtFP3Bvc3RNZXNzYWdlKHtjbWQ6XCJjbGVhbnVwVGhyZWFkXCIsdGhyZWFkOmF9KTooKGE9Ty5qYlthXSl8fEgoKSxPLkNiKGEpKX0sVzptYix5Om5iLGthOm9iLFM6c2IsVTp0YixMOnViLGlhOnZiLGJhOndiLGhhOnhiLEc6eWIsVDp6YixROkFiLGphOkJiLFI6Q2IsSjpmdW5jdGlvbihhLGIsYyxkLGUpe2E+Pj49MDtiPj4+PTA7Yz4+Pj0wO2I9UihiKTt2YXIgZj0tMSE9Yi5pbmRleE9mKFwidVwiKTtmJiYoZT0oMW48PDY0biktMW4pO1QoYSx7bmFtZTpiLGZyb21XaXJlVHlwZTprPT5cbmssdG9XaXJlVHlwZTpmdW5jdGlvbihrLGwpe2lmKFwiYmlnaW50XCIhPXR5cGVvZiBsJiZcIm51bWJlclwiIT10eXBlb2YgbCl0aHJvdyBuZXcgVHlwZUVycm9yKGBDYW5ub3QgY29udmVydCBcIiR7RGIobCl9XCIgdG8gJHt0aGlzLm5hbWV9YCk7aWYobDxkfHxsPmUpdGhyb3cgbmV3IFR5cGVFcnJvcihgUGFzc2luZyBhIG51bWJlciBcIiR7RGIobCl9XCIgZnJvbSBKUyBzaWRlIHRvIEMvQysrIHNpZGUgdG8gYW4gYXJndW1lbnQgb2YgdHlwZSBcIiR7Yn1cIiwgd2hpY2ggaXMgb3V0c2lkZSB0aGUgdmFsaWQgcmFuZ2UgWyR7ZH0sICR7ZX1dIWApO3JldHVybiBsfSxhcmdQYWNrQWR2YW5jZTo4LHJlYWRWYWx1ZUZyb21Qb2ludGVyOkpiKGIsYywhZikscmI6bnVsbH0pfSxxYTpmdW5jdGlvbihhLGIsYyxkKXthPj4+PTA7Yj1SKGI+Pj4wKTtUKGEse25hbWU6Yixmcm9tV2lyZVR5cGU6ZnVuY3Rpb24oZSl7cmV0dXJuISFlfSx0b1dpcmVUeXBlOmZ1bmN0aW9uKGUsZil7cmV0dXJuIGY/YzpkfSxhcmdQYWNrQWR2YW5jZTo4LFxucmVhZFZhbHVlRnJvbVBvaW50ZXI6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZnJvbVdpcmVUeXBlKHQoKVtlPj4+MF0pfSxyYjpudWxsfSl9LHBhOmZ1bmN0aW9uKGEsYil7YT4+Pj0wO2I9UihiPj4+MCk7VChhLHtuYW1lOmIsZnJvbVdpcmVUeXBlOmM9Pnt2YXIgZD1WKGMpO0xiKGMpO3JldHVybiBkfSx0b1dpcmVUeXBlOihjLGQpPT5XKGQpLGFyZ1BhY2tBZHZhbmNlOjgscmVhZFZhbHVlRnJvbVBvaW50ZXI6TWIscmI6bnVsbH0pfSxJOmZ1bmN0aW9uKGEsYixjKXthPj4+PTA7Yz4+Pj0wO2I9UihiPj4+MCk7VChhLHtuYW1lOmIsZnJvbVdpcmVUeXBlOmQ9PmQsdG9XaXJlVHlwZTooZCxlKT0+ZSxhcmdQYWNrQWR2YW5jZTo4LHJlYWRWYWx1ZUZyb21Qb2ludGVyOk5iKGIsYykscmI6bnVsbH0pfSx1OmZ1bmN0aW9uKGEsYixjLGQsZSl7YT4+Pj0wO2M+Pj49MDtiPVIoYj4+PjApOy0xPT09ZSYmKGU9NDI5NDk2NzI5NSk7ZT1sPT5sO2lmKDA9PT1kKXt2YXIgZj0zMi04KmM7ZT1sPT5cbmw8PGY+Pj5mfXZhciBrPWIuaW5jbHVkZXMoXCJ1bnNpZ25lZFwiKT9mdW5jdGlvbihsLHEpe3JldHVybiBxPj4+MH06ZnVuY3Rpb24obCxxKXtyZXR1cm4gcX07VChhLHtuYW1lOmIsZnJvbVdpcmVUeXBlOmUsdG9XaXJlVHlwZTprLGFyZ1BhY2tBZHZhbmNlOjgscmVhZFZhbHVlRnJvbVBvaW50ZXI6SmIoYixjLDAhPT1kKSxyYjpudWxsfSl9LG06ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQoZil7dmFyIGs9eigpW2Y+Pj4yPj4+MF07Zj16KClbZis0Pj4+Mj4+PjBdO3JldHVybiBuZXcgZShoKCkuYnVmZmVyLGYsayl9YT4+Pj0wO3ZhciBlPVtJbnQ4QXJyYXksVWludDhBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSxCaWdJbnQ2NEFycmF5LEJpZ1VpbnQ2NEFycmF5XVtiXTtjPVIoYz4+PjApO1QoYSx7bmFtZTpjLGZyb21XaXJlVHlwZTpkLGFyZ1BhY2tBZHZhbmNlOjgscmVhZFZhbHVlRnJvbVBvaW50ZXI6ZH0sXG57SWI6ITB9KX0sSzpmdW5jdGlvbihhLGIpe2E+Pj49MDtiPVIoYj4+PjApO3ZhciBjPVwic3RkOjpzdHJpbmdcIj09PWI7VChhLHtuYW1lOmIsZnJvbVdpcmVUeXBlOmZ1bmN0aW9uKGQpe3ZhciBlPXooKVtkPj4+Mj4+PjBdLGY9ZCs0O2lmKGMpZm9yKHZhciBrPWYsbD0wO2w8PWU7KytsKXt2YXIgcT1mK2w7aWYobD09ZXx8MD09dCgpW3E+Pj4wXSl7az1VYShrLHEtayk7aWYodm9pZCAwPT09cil2YXIgcj1rO2Vsc2Ugcis9U3RyaW5nLmZyb21DaGFyQ29kZSgwKSxyKz1rO2s9cSsxfX1lbHNle3I9QXJyYXkoZSk7Zm9yKGw9MDtsPGU7KytsKXJbbF09U3RyaW5nLmZyb21DaGFyQ29kZSh0KClbZitsPj4+MF0pO3I9ci5qb2luKFwiXCIpfVgoZCk7cmV0dXJuIHJ9LHRvV2lyZVR5cGU6ZnVuY3Rpb24oZCxlKXtlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXImJihlPW5ldyBVaW50OEFycmF5KGUpKTt2YXIgZj1cInN0cmluZ1wiPT10eXBlb2YgZTtpZighKGZ8fGUgaW5zdGFuY2VvZiBVaW50OEFycmF5fHxcbmUgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheXx8ZSBpbnN0YW5jZW9mIEludDhBcnJheSkpdGhyb3cgbmV3IFMoXCJDYW5ub3QgcGFzcyBub24tc3RyaW5nIHRvIHN0ZDo6c3RyaW5nXCIpO3ZhciBrPWMmJmY/cGIoZSk6ZS5sZW5ndGg7dmFyIGw9d2MoNCtrKzEpLHE9bCs0O3ooKVtsPj4+Mj4+PjBdPWs7aWYoYyYmZilyYihlLHEsaysxKTtlbHNlIGlmKGYpZm9yKGY9MDtmPGs7KytmKXt2YXIgcj1lLmNoYXJDb2RlQXQoZik7aWYoMjU1PHIpdGhyb3cgWChxKSxuZXcgUyhcIlN0cmluZyBoYXMgVVRGLTE2IGNvZGUgdW5pdHMgdGhhdCBkbyBub3QgZml0IGluIDggYml0c1wiKTt0KClbcStmPj4+MF09cn1lbHNlIGZvcihmPTA7ZjxrOysrZil0KClbcStmPj4+MF09ZVtmXTtudWxsIT09ZCYmZC5wdXNoKFgsbCk7cmV0dXJuIGx9LGFyZ1BhY2tBZHZhbmNlOjgscmVhZFZhbHVlRnJvbVBvaW50ZXI6T2IscmIoZCl7WChkKX19KX0sQTpmdW5jdGlvbihhLGIsYyl7YT4+Pj0wO2I+Pj49MDtcbmM+Pj49MDtjPVIoYyk7aWYoMj09PWIpe3ZhciBkPVFiO3ZhciBlPVJiO3ZhciBmPVNiO3ZhciBrPSgpPT5jYSgpO3ZhciBsPTF9ZWxzZSA0PT09YiYmKGQ9VGIsZT1VYixmPVZiLGs9KCk9PnooKSxsPTIpO1QoYSx7bmFtZTpjLGZyb21XaXJlVHlwZTpxPT57Zm9yKHZhciByPXooKVtxPj4+Mj4+PjBdLHg9aygpLEMsTj1xKzQsZz0wO2c8PXI7KytnKXt2YXIgdT1xKzQrZypiO2lmKGc9PXJ8fDA9PXhbdT4+PmxdKU49ZChOLHUtTiksdm9pZCAwPT09Qz9DPU46KEMrPVN0cmluZy5mcm9tQ2hhckNvZGUoMCksQys9TiksTj11K2J9WChxKTtyZXR1cm4gQ30sdG9XaXJlVHlwZToocSxyKT0+e2lmKFwic3RyaW5nXCIhPXR5cGVvZiByKXRocm93IG5ldyBTKGBDYW5ub3QgcGFzcyBub24tc3RyaW5nIHRvIEMrKyBzdHJpbmcgdHlwZSAke2N9YCk7dmFyIHg9ZihyKSxDPXdjKDQreCtiKTt6KClbQz4+PjJdPXg+Pmw7ZShyLEMrNCx4K2IpO251bGwhPT1xJiZxLnB1c2goWCxDKTtyZXR1cm4gQ30sXG5hcmdQYWNrQWR2YW5jZTo4LHJlYWRWYWx1ZUZyb21Qb2ludGVyOk1iLHJiKHEpe1gocSl9fSl9LHJhOmZ1bmN0aW9uKGEsYil7YT4+Pj0wO2I9UihiPj4+MCk7VChhLHtKYjohMCxuYW1lOmIsYXJnUGFja0FkdmFuY2U6MCxmcm9tV2lyZVR5cGU6KCk9Pnt9LHRvV2lyZVR5cGU6KCk9Pnt9fSl9LG5hOigpPT4hMCxPOmZ1bmN0aW9uKGEsYil7YT4+Pj0wO2E9PWI+Pj4wP3NldFRpbWVvdXQoKCk9PmJiKCkpOkU/cG9zdE1lc3NhZ2Uoe3RhcmdldFRocmVhZDphLGNtZDpcImNoZWNrTWFpbGJveFwifSk6KGE9Ty5qYlthXSkmJmEucG9zdE1lc3NhZ2Uoe2NtZDpcImNoZWNrTWFpbGJveFwifSl9LFg6ZnVuY3Rpb24oYSxiLGMsZCl7Yj4+Pj0wO2MvPTI7Y2MubGVuZ3RoPWM7ZD1kPj4+MD4+PjM7Zm9yKHZhciBlPTA7ZTxjO2UrKyljY1tlXT1KW2QrMiplXT9KW2QrMiplKzFdOmhhKClbZCsyKmUrMT4+PjBdO2E9UGNbYV07Ty5IYj1iO2I9YS5hcHBseShudWxsLGNjKTtPLkhiPTA7cmV0dXJuIGJ9LFxuZGE6WGIsbWE6ZnVuY3Rpb24oYSl7RCYmTy5qYlthPj4+MF0ucmVmKCl9LHI6ZnVuY3Rpb24oYSxiLGMpe2I+Pj49MDtjPj4+PTA7YT1WKGE+Pj4wKTtiPWVjKGIsXCJlbXZhbDo6YXNcIik7dmFyIGQ9W10sZT1XKGQpO3ooKVtjPj4+Mj4+PjBdPWU7cmV0dXJuIGIudG9XaXJlVHlwZShkLGEpfSxpOmZ1bmN0aW9uKGEsYixjLGQsZSl7Yz4+Pj0wO2Q+Pj49MDtlPj4+PTA7YT1oY1thPj4+MF07Yj1WKGI+Pj4wKTtjPWdjKGMpO3ZhciBmPVtdO3ooKVtkPj4+Mj4+PjBdPVcoZik7cmV0dXJuIGEoYixjLGYsZSl9LHM6ZnVuY3Rpb24oYSxiLGMsZCl7Yz4+Pj0wO2Q+Pj49MDthPWhjW2E+Pj4wXTtiPVYoYj4+PjApO2M9Z2MoYyk7YShiLGMsbnVsbCxkKX0sYzpMYixCOmZ1bmN0aW9uKGEsYil7Yj4+Pj0wO2E9VihhPj4+MCk7Yj1WKGIpO3JldHVybiBhPT1ifSxvOmZ1bmN0aW9uKGEpe2E+Pj49MDtpZigwPT09YSlyZXR1cm4gVyhpYygpKTthPWdjKGEpO3JldHVybiBXKGljKClbYV0pfSxnOmZ1bmN0aW9uKGEsXG5iKXt2YXIgYz1rYyhhLGI+Pj4wKSxkPWNbMF07Yj1kLm5hbWUrXCJfJFwiK2Muc2xpY2UoMSkubWFwKGZ1bmN0aW9uKHgpe3JldHVybiB4Lm5hbWV9KS5qb2luKFwiX1wiKStcIiRcIjt2YXIgZT1uY1tiXTtpZih2b2lkIDAhPT1lKXJldHVybiBlO2U9W1wicmV0VHlwZVwiXTtmb3IodmFyIGY9W2RdLGs9XCJcIixsPTA7bDxhLTE7KytsKWsrPSgwIT09bD9cIiwgXCI6XCJcIikrXCJhcmdcIitsLGUucHVzaChcImFyZ1R5cGVcIitsKSxmLnB1c2goY1sxK2xdKTt2YXIgcT1cInJldHVybiBmdW5jdGlvbiBcIittYyhcIm1ldGhvZENhbGxlcl9cIitiKStcIihoYW5kbGUsIG5hbWUsIGRlc3RydWN0b3JzLCBhcmdzKSB7XFxuXCIscj0wO2ZvcihsPTA7bDxhLTE7KytsKXErPVwiICAgIHZhciBhcmdcIitsK1wiID0gYXJnVHlwZVwiK2wrXCIucmVhZFZhbHVlRnJvbVBvaW50ZXIoYXJnc1wiKyhyP1wiK1wiK3I6XCJcIikrXCIpO1xcblwiLHIrPWNbbCsxXS5hcmdQYWNrQWR2YW5jZTtxKz1cIiAgICB2YXIgcnYgPSBoYW5kbGVbbmFtZV0oXCIraytcIik7XFxuXCI7XG5mb3IobD0wO2w8YS0xOysrbCljW2wrMV0uZGVsZXRlT2JqZWN0JiYocSs9XCIgICAgYXJnVHlwZVwiK2wrXCIuZGVsZXRlT2JqZWN0KGFyZ1wiK2wrXCIpO1xcblwiKTtkLkpifHwocSs9XCIgICAgcmV0dXJuIHJldFR5cGUudG9XaXJlVHlwZShkZXN0cnVjdG9ycywgcnYpO1xcblwiKTtlLnB1c2gocStcIn07XFxuXCIpO2E9cGMoZSkuYXBwbHkobnVsbCxmKTtlPWpjKGEpO3JldHVybiBuY1tiXT1lfSxxOmZ1bmN0aW9uKGEsYil7Yj4+Pj0wO2E9VihhPj4+MCk7Yj1WKGIpO3JldHVybiBXKGFbYl0pfSxkOmZ1bmN0aW9uKGEpe2E+Pj49MDs0PGEmJihVLmdldChhKS5CYis9MSl9LHg6ZnVuY3Rpb24oYSxiLGMsZCl7Yz4+Pj0wO2Q+Pj49MDthPVYoYT4+PjApO3ZhciBlPXJjW2JdO2V8fChlPXFjKGIpLHJjW2JdPWUpO3JldHVybiBlKGEsYyxkKX0sdjpmdW5jdGlvbigpe3JldHVybiBXKFtdKX0sbDpmdW5jdGlvbihhKXthPVYoYT4+PjApO2Zvcih2YXIgYj1BcnJheShhLmxlbmd0aCksYz0wO2M8YS5sZW5ndGg7YysrKWJbY109XG5hW2NdO3JldHVybiBXKGIpfSxlOmZ1bmN0aW9uKGEpe3JldHVybiBXKGdjKGE+Pj4wKSl9LGs6ZnVuY3Rpb24oKXtyZXR1cm4gVyh7fSl9LGY6ZnVuY3Rpb24oYSl7YT4+Pj0wO2Zvcih2YXIgYj1WKGEpO2IubGVuZ3RoOyl7dmFyIGM9Yi5wb3AoKTtiLnBvcCgpKGMpfUxiKGEpfSxqOmZ1bmN0aW9uKGEsYixjKXtiPj4+PTA7Yz4+Pj0wO2E9VihhPj4+MCk7Yj1WKGIpO2M9VihjKTthW2JdPWN9LGg6ZnVuY3Rpb24oYSxiKXtiPj4+PTA7YT1lYyhhPj4+MCxcIl9lbXZhbF90YWtlX3ZhbHVlXCIpO2E9YS5yZWFkVmFsdWVGcm9tUG9pbnRlcihiKTtyZXR1cm4gVyhhKX0sXzpmdW5jdGlvbihhLGIpe2E9LTkwMDcxOTkyNTQ3NDA5OTI+YXx8OTAwNzE5OTI1NDc0MDk5MjxhP05hTjpOdW1iZXIoYSk7Yj4+Pj0wO2E9bmV3IERhdGUoMUUzKmEpO3coKVtiPj4+Mj4+PjBdPWEuZ2V0VVRDU2Vjb25kcygpO3coKVtiKzQ+Pj4yPj4+MF09YS5nZXRVVENNaW51dGVzKCk7dygpW2IrOD4+PjI+Pj4wXT1cbmEuZ2V0VVRDSG91cnMoKTt3KClbYisxMj4+PjI+Pj4wXT1hLmdldFVUQ0RhdGUoKTt3KClbYisxNj4+PjI+Pj4wXT1hLmdldFVUQ01vbnRoKCk7dygpW2IrMjA+Pj4yPj4+MF09YS5nZXRVVENGdWxsWWVhcigpLTE5MDA7dygpW2IrMjQ+Pj4yPj4+MF09YS5nZXRVVENEYXkoKTthPShhLmdldFRpbWUoKS1EYXRlLlVUQyhhLmdldFVUQ0Z1bGxZZWFyKCksMCwxLDAsMCwwLDApKS84NjRFNXwwO3coKVtiKzI4Pj4+Mj4+PjBdPWF9LCQ6ZnVuY3Rpb24oYSxiKXthPS05MDA3MTk5MjU0NzQwOTkyPmF8fDkwMDcxOTkyNTQ3NDA5OTI8YT9OYU46TnVtYmVyKGEpO2I+Pj49MDthPW5ldyBEYXRlKDFFMyphKTt3KClbYj4+PjI+Pj4wXT1hLmdldFNlY29uZHMoKTt3KClbYis0Pj4+Mj4+PjBdPWEuZ2V0TWludXRlcygpO3coKVtiKzg+Pj4yPj4+MF09YS5nZXRIb3VycygpO3coKVtiKzEyPj4+Mj4+PjBdPWEuZ2V0RGF0ZSgpO3coKVtiKzE2Pj4+Mj4+PjBdPWEuZ2V0TW9udGgoKTt3KClbYisyMD4+PlxuMj4+PjBdPWEuZ2V0RnVsbFllYXIoKS0xOTAwO3coKVtiKzI0Pj4+Mj4+PjBdPWEuZ2V0RGF5KCk7dmFyIGM9KFkoYS5nZXRGdWxsWWVhcigpKT9zYzp0YylbYS5nZXRNb250aCgpXSthLmdldERhdGUoKS0xfDA7dygpW2IrMjg+Pj4yPj4+MF09Yzt3KClbYiszNj4+PjI+Pj4wXT0tKDYwKmEuZ2V0VGltZXpvbmVPZmZzZXQoKSk7Yz0obmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLDYsMSkpLmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIGQ9KG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwwLDEpKS5nZXRUaW1lem9uZU9mZnNldCgpO2E9KGMhPWQmJmEuZ2V0VGltZXpvbmVPZmZzZXQoKT09TWF0aC5taW4oZCxjKSl8MDt3KClbYiszMj4+PjI+Pj4wXT1hfSxhYTpmdW5jdGlvbihhKXthPj4+PTA7dmFyIGI9bmV3IERhdGUodygpW2ErMjA+Pj4yPj4+MF0rMTkwMCx3KClbYSsxNj4+PjI+Pj4wXSx3KClbYSsxMj4+PjI+Pj4wXSx3KClbYSs4Pj4+Mj4+PjBdLHcoKVthKzQ+Pj4yPj4+MF0sdygpW2E+Pj5cbjI+Pj4wXSwwKSxjPXcoKVthKzMyPj4+Mj4+PjBdLGQ9Yi5nZXRUaW1lem9uZU9mZnNldCgpLGU9KG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSw2LDEpKS5nZXRUaW1lem9uZU9mZnNldCgpLGY9KG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSwwLDEpKS5nZXRUaW1lem9uZU9mZnNldCgpLGs9TWF0aC5taW4oZixlKTswPmM/dygpW2ErMzI+Pj4yPj4+MF09TnVtYmVyKGUhPWYmJms9PWQpOjA8YyE9KGs9PWQpJiYoZT1NYXRoLm1heChmLGUpLGIuc2V0VGltZShiLmdldFRpbWUoKSs2RTQqKCgwPGM/azplKS1kKSkpO3coKVthKzI0Pj4+Mj4+PjBdPWIuZ2V0RGF5KCk7Yz0oWShiLmdldEZ1bGxZZWFyKCkpP3NjOnRjKVtiLmdldE1vbnRoKCldK2IuZ2V0RGF0ZSgpLTF8MDt3KClbYSsyOD4+PjI+Pj4wXT1jO3coKVthPj4+Mj4+PjBdPWIuZ2V0U2Vjb25kcygpO3coKVthKzQ+Pj4yPj4+MF09Yi5nZXRNaW51dGVzKCk7dygpW2ErOD4+PjI+Pj4wXT1iLmdldEhvdXJzKCk7dygpW2ErMTI+Pj5cbjI+Pj4wXT1iLmdldERhdGUoKTt3KClbYSsxNj4+PjI+Pj4wXT1iLmdldE1vbnRoKCk7dygpW2ErMjA+Pj4yPj4+MF09Yi5nZXRZZWFyKCk7cmV0dXJuIEJpZ0ludChiLmdldFRpbWUoKS8xRTMpfSxZOnVjLFo6dmMsTjpmdW5jdGlvbihhLGIsYyl7ZnVuY3Rpb24gZChyKXtyZXR1cm4ocj1yLnRvVGltZVN0cmluZygpLm1hdGNoKC9cXCgoW0EtWmEteiBdKylcXCkkLykpP3JbMV06XCJHTVRcIn1hPj4+PTA7Yj4+Pj0wO2M+Pj49MDt2YXIgZT0obmV3IERhdGUpLmdldEZ1bGxZZWFyKCksZj1uZXcgRGF0ZShlLDAsMSksaz1uZXcgRGF0ZShlLDYsMSk7ZT1mLmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIGw9ay5nZXRUaW1lem9uZU9mZnNldCgpLHE9TWF0aC5tYXgoZSxsKTt6KClbYT4+PjI+Pj4wXT02MCpxO3coKVtiPj4+Mj4+PjBdPU51bWJlcihlIT1sKTthPWQoZik7Yj1kKGspO2E9eGMoYSk7Yj14YyhiKTtsPGU/KHooKVtjPj4+Mj4+PjBdPWEseigpW2MrND4+PjI+Pj4wXT1iKTooeigpW2M+Pj5cbjI+Pj4wXT1iLHooKVtjKzQ+Pj4yPj4+MF09YSl9LG46KCk9PntIKFwiXCIpfSxGOigpPT57fSxIOigpPT5EYXRlLm5vdygpLGxhOigpPT57RmErPTE7dGhyb3dcInVud2luZFwiO30sUDpmdW5jdGlvbigpe3JldHVybiA0Mjk0OTAxNzYwfSx0OigpPT5wZXJmb3JtYW5jZS50aW1lT3JpZ2luK3BlcmZvcm1hbmNlLm5vdygpLHc6KCk9PkQ/cmVxdWlyZShcIm9zXCIpLmNwdXMoKS5sZW5ndGg6bmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3ksTTpmdW5jdGlvbihhKXthPj4+PTA7dmFyIGI9dCgpLmxlbmd0aDtpZihhPD1ifHw0Mjk0OTAxNzYwPGEpcmV0dXJuITE7Zm9yKHZhciBjPTE7ND49YztjKj0yKXt2YXIgZD1iKigxKy4yL2MpO2Q9TWF0aC5taW4oZCxhKzEwMDY2MzI5Nik7dmFyIGU9TWF0aDtkPU1hdGgubWF4KGEsZCk7YTp7ZT0oZS5taW4uY2FsbChlLDQyOTQ5MDE3NjAsZCsoNjU1MzYtZCU2NTUzNiklNjU1MzYpLW0uYnVmZmVyLmJ5dGVMZW5ndGgrNjU1MzUpLzY1NTM2O3RyeXttLmdyb3coZSk7XG5wKCk7dmFyIGY9MTticmVhayBhfWNhdGNoKGspe31mPXZvaWQgMH1pZihmKXJldHVybiEwfXJldHVybiExfSxmYTpCYyxnYTpDYyxWOlhhLHo6RGMsRDpFYyxjYTpGYyxDOkhjLGE6bXx8QS53YXNtTWVtb3J5LG9hOk1jLHA6ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIE1jKGE+Pj4wLGI+Pj4wLGM+Pj4wLGQ+Pj4wKX19LFo9ZnVuY3Rpb24oKXt2YXIgYT17YTpSY307SysrO05hKGEsZnVuY3Rpb24oYil7dmFyIGM9Yi5tb2R1bGU7Wj1iLmluc3RhbmNlLmV4cG9ydHM7Wj1TYygpO08uRmIucHVzaChaLlhhKTtnYj1aLl9hO0RhLnVuc2hpZnQoWi5zYSk7eGE9YztJYSgpfSkuY2F0Y2goa2EpO3JldHVybnt9fSgpO0EuX09ydEluaXQ9KGEsYik9PihBLl9PcnRJbml0PVoudGEpKGEsYik7QS5fT3J0R2V0TGFzdEVycm9yPShhLGIpPT4oQS5fT3J0R2V0TGFzdEVycm9yPVoudWEpKGEsYik7XG5BLl9PcnRDcmVhdGVTZXNzaW9uT3B0aW9ucz0oYSxiLGMsZCxlLGYsayxsLHEscik9PihBLl9PcnRDcmVhdGVTZXNzaW9uT3B0aW9ucz1aLnZhKShhLGIsYyxkLGUsZixrLGwscSxyKTtBLl9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlcj0oYSxiKT0+KEEuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyPVoud2EpKGEsYik7QS5fT3J0QWRkRnJlZURpbWVuc2lvbk92ZXJyaWRlPShhLGIsYyk9PihBLl9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGU9Wi54YSkoYSxiLGMpO0EuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeT0oYSxiLGMpPT4oQS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5PVoueWEpKGEsYixjKTtBLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnM9YT0+KEEuX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucz1aLnphKShhKTtBLl9PcnRDcmVhdGVTZXNzaW9uPShhLGIsYyk9PihBLl9PcnRDcmVhdGVTZXNzaW9uPVouQWEpKGEsYixjKTtcbkEuX09ydFJlbGVhc2VTZXNzaW9uPWE9PihBLl9PcnRSZWxlYXNlU2Vzc2lvbj1aLkJhKShhKTtBLl9PcnRHZXRJbnB1dE91dHB1dENvdW50PShhLGIsYyk9PihBLl9PcnRHZXRJbnB1dE91dHB1dENvdW50PVouQ2EpKGEsYixjKTtBLl9PcnRHZXRJbnB1dE5hbWU9KGEsYik9PihBLl9PcnRHZXRJbnB1dE5hbWU9Wi5EYSkoYSxiKTtBLl9PcnRHZXRPdXRwdXROYW1lPShhLGIpPT4oQS5fT3J0R2V0T3V0cHV0TmFtZT1aLkVhKShhLGIpO0EuX09ydEZyZWU9YT0+KEEuX09ydEZyZWU9Wi5GYSkoYSk7QS5fT3J0Q3JlYXRlVGVuc29yPShhLGIsYyxkLGUsZik9PihBLl9PcnRDcmVhdGVUZW5zb3I9Wi5HYSkoYSxiLGMsZCxlLGYpO0EuX09ydEdldFRlbnNvckRhdGE9KGEsYixjLGQsZSk9PihBLl9PcnRHZXRUZW5zb3JEYXRhPVouSGEpKGEsYixjLGQsZSk7QS5fT3J0UmVsZWFzZVRlbnNvcj1hPT4oQS5fT3J0UmVsZWFzZVRlbnNvcj1aLklhKShhKTtcbkEuX09ydENyZWF0ZVJ1bk9wdGlvbnM9KGEsYixjLGQpPT4oQS5fT3J0Q3JlYXRlUnVuT3B0aW9ucz1aLkphKShhLGIsYyxkKTtBLl9PcnRBZGRSdW5Db25maWdFbnRyeT0oYSxiLGMpPT4oQS5fT3J0QWRkUnVuQ29uZmlnRW50cnk9Wi5LYSkoYSxiLGMpO0EuX09ydFJlbGVhc2VSdW5PcHRpb25zPWE9PihBLl9PcnRSZWxlYXNlUnVuT3B0aW9ucz1aLkxhKShhKTtBLl9PcnRDcmVhdGVCaW5kaW5nPWE9PihBLl9PcnRDcmVhdGVCaW5kaW5nPVouTWEpKGEpO0EuX09ydEJpbmRJbnB1dD0oYSxiLGMpPT4oQS5fT3J0QmluZElucHV0PVouTmEpKGEsYixjKTtBLl9PcnRCaW5kT3V0cHV0PShhLGIsYyxkKT0+KEEuX09ydEJpbmRPdXRwdXQ9Wi5PYSkoYSxiLGMsZCk7QS5fT3J0Q2xlYXJCb3VuZE91dHB1dHM9YT0+KEEuX09ydENsZWFyQm91bmRPdXRwdXRzPVouUGEpKGEpO0EuX09ydFJlbGVhc2VCaW5kaW5nPWE9PihBLl9PcnRSZWxlYXNlQmluZGluZz1aLlFhKShhKTtcbkEuX09ydFJ1bldpdGhCaW5kaW5nPShhLGIsYyxkLGUpPT4oQS5fT3J0UnVuV2l0aEJpbmRpbmc9Wi5SYSkoYSxiLGMsZCxlKTtBLl9PcnRSdW49KGEsYixjLGQsZSxmLGssbCk9PihBLl9PcnRSdW49Wi5TYSkoYSxiLGMsZCxlLGYsayxsKTtBLl9PcnRFbmRQcm9maWxpbmc9YT0+KEEuX09ydEVuZFByb2ZpbGluZz1aLlRhKShhKTt2YXIgYWI9QS5fcHRocmVhZF9zZWxmPSgpPT4oYWI9QS5fcHRocmVhZF9zZWxmPVouVWEpKCksd2M9QS5fbWFsbG9jPWE9Pih3Yz1BLl9tYWxsb2M9Wi5WYSkoYSksWD1BLl9mcmVlPWE9PihYPUEuX2ZyZWU9Wi5XYSkoYSk7QS5fX2Vtc2NyaXB0ZW5fdGxzX2luaXQ9KCk9PihBLl9fZW1zY3JpcHRlbl90bHNfaW5pdD1aLlhhKSgpO3ZhciBkYz1hPT4oZGM9Wi5ZYSkoYSk7QS5fX2VtYmluZF9pbml0aWFsaXplX2JpbmRpbmdzPSgpPT4oQS5fX2VtYmluZF9pbml0aWFsaXplX2JpbmRpbmdzPVouWmEpKCk7XG52YXIgUWM9QS5fX2Vtc2NyaXB0ZW5fdGhyZWFkX2luaXQ9KGEsYixjLGQsZSxmKT0+KFFjPUEuX19lbXNjcmlwdGVuX3RocmVhZF9pbml0PVouJGEpKGEsYixjLGQsZSxmKTtBLl9fZW1zY3JpcHRlbl90aHJlYWRfY3Jhc2hlZD0oKT0+KEEuX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkPVouYWIpKCk7dmFyIGJjPShhLGIsYyxkKT0+KGJjPVouYmIpKGEsYixjLGQpLCRhPWE9PigkYT1aLmNiKShhKSxoYj1BLl9fZW1zY3JpcHRlbl90aHJlYWRfZXhpdD1hPT4oaGI9QS5fX2Vtc2NyaXB0ZW5fdGhyZWFkX2V4aXQ9Wi5kYikoYSksWWI9QS5fX2Vtc2NyaXB0ZW5fY2hlY2tfbWFpbGJveD0oKT0+KFliPUEuX19lbXNjcmlwdGVuX2NoZWNrX21haWxib3g9Wi5lYikoKSxkYj0oYSxiKT0+KGRiPVouZmIpKGEsYiksWmI9KCk9PihaYj1aLmdiKSgpLGViPWE9PihlYj1aLmhiKShhKSxhYz1hPT4oYWM9Wi5pYikoYSk7XG5mdW5jdGlvbiBTYygpe3ZhciBhPVo7YT1PYmplY3QuYXNzaWduKHt9LGEpO3ZhciBiPWQ9PigpPT5kKCk+Pj4wLGM9ZD0+ZT0+ZChlKT4+PjA7YS5fX2Vycm5vX2xvY2F0aW9uPWIoYS5fX2Vycm5vX2xvY2F0aW9uKTthLlVhPWIoYS5VYSk7YS5WYT1jKGEuVmEpO2EuWWE9YyhhLllhKTthLmdiPWIoYS5nYik7YS5pYj1jKGEuaWIpO3JldHVybiBhfUEua2VlcFJ1bnRpbWVBbGl2ZT1HYTtBLndhc21NZW1vcnk9bTtBLnN0YWNrQWxsb2M9YWM7QS5zdGFja1NhdmU9WmI7QS5zdGFja1Jlc3RvcmU9ZWI7QS5VVEY4VG9TdHJpbmc9VWE7QS5zdHJpbmdUb1VURjg9cmI7QS5sZW5ndGhCeXRlc1VURjg9cGI7QS5FeGl0U3RhdHVzPU9hO0EuUFRocmVhZD1PO3ZhciBUYztMPWZ1bmN0aW9uIFVjKCl7VGN8fFZjKCk7VGN8fChMPVVjKX07XG5mdW5jdGlvbiBWYygpezA8S3x8KEU/KGphKEEpLEV8fGNiKERhKSxzdGFydFdvcmtlcihBKSk6KGNiKENhKSwwPEt8fFRjfHwoVGM9ITAsQS5jYWxsZWRSdW49ITAseWF8fChFfHxjYihEYSksamEoQSksRXx8Y2IoRWEpKSkpKX1WYygpO1xuXG5cbiAgcmV0dXJuIG1vZHVsZUFyZy5yZWFkeVxufVxuXG4pO1xufSkoKTtcbmlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG4gIG1vZHVsZS5leHBvcnRzID0gb3J0V2FzbVRocmVhZGVkO1xuZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmVbJ2FtZCddKVxuICBkZWZpbmUoW10sICgpID0+IG9ydFdhc21UaHJlYWRlZCk7XG4iLCAiXCJ1c2Ugc3RyaWN0XCI7dmFyIE1vZHVsZT17fTt2YXIgRU5WSVJPTk1FTlRfSVNfTk9ERT10eXBlb2YgcHJvY2Vzcz09XCJvYmplY3RcIiYmdHlwZW9mIHByb2Nlc3MudmVyc2lvbnM9PVwib2JqZWN0XCImJnR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGU9PVwic3RyaW5nXCI7aWYoRU5WSVJPTk1FTlRfSVNfTk9ERSl7dmFyIG5vZGVXb3JrZXJUaHJlYWRzPXJlcXVpcmUoXCJ3b3JrZXJfdGhyZWFkc1wiKTt2YXIgcGFyZW50UG9ydD1ub2RlV29ya2VyVGhyZWFkcy5wYXJlbnRQb3J0O3BhcmVudFBvcnQub24oXCJtZXNzYWdlXCIsZGF0YT0+b25tZXNzYWdlKHtkYXRhOmRhdGF9KSk7dmFyIGZzPXJlcXVpcmUoXCJmc1wiKTtPYmplY3QuYXNzaWduKGdsb2JhbCx7c2VsZjpnbG9iYWwscmVxdWlyZTpyZXF1aXJlLE1vZHVsZTpNb2R1bGUsbG9jYXRpb246e2hyZWY6X19maWxlbmFtZX0sV29ya2VyOm5vZGVXb3JrZXJUaHJlYWRzLldvcmtlcixpbXBvcnRTY3JpcHRzOmY9PigwLGV2YWwpKGZzLnJlYWRGaWxlU3luYyhmLFwidXRmOFwiKStcIi8vIyBzb3VyY2VVUkw9XCIrZikscG9zdE1lc3NhZ2U6bXNnPT5wYXJlbnRQb3J0LnBvc3RNZXNzYWdlKG1zZykscGVyZm9ybWFuY2U6Z2xvYmFsLnBlcmZvcm1hbmNlfHx7bm93OkRhdGUubm93fX0pfXZhciBpbml0aWFsaXplZEpTPWZhbHNlO2Z1bmN0aW9uIHRocmVhZFByaW50RXJyKCl7dmFyIHRleHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5qb2luKFwiIFwiKTtpZihFTlZJUk9OTUVOVF9JU19OT0RFKXtmcy53cml0ZVN5bmMoMix0ZXh0K1wiXFxuXCIpO3JldHVybn1jb25zb2xlLmVycm9yKHRleHQpfWZ1bmN0aW9uIHRocmVhZEFsZXJ0KCl7dmFyIHRleHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5qb2luKFwiIFwiKTtwb3N0TWVzc2FnZSh7Y21kOlwiYWxlcnRcIix0ZXh0OnRleHQsdGhyZWFkSWQ6TW9kdWxlW1wiX3B0aHJlYWRfc2VsZlwiXSgpfSl9dmFyIGVycj10aHJlYWRQcmludEVycjtzZWxmLmFsZXJ0PXRocmVhZEFsZXJ0O01vZHVsZVtcImluc3RhbnRpYXRlV2FzbVwiXT0oaW5mbyxyZWNlaXZlSW5zdGFuY2UpPT57dmFyIG1vZHVsZT1Nb2R1bGVbXCJ3YXNtTW9kdWxlXCJdO01vZHVsZVtcIndhc21Nb2R1bGVcIl09bnVsbDt2YXIgaW5zdGFuY2U9bmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKG1vZHVsZSxpbmZvKTtyZXR1cm4gcmVjZWl2ZUluc3RhbmNlKGluc3RhbmNlKX07c2VsZi5vbnVuaGFuZGxlZHJlamVjdGlvbj1lPT57dGhyb3cgZS5yZWFzb258fGV9O2Z1bmN0aW9uIGhhbmRsZU1lc3NhZ2UoZSl7dHJ5e2lmKGUuZGF0YS5jbWQ9PT1cImxvYWRcIil7bGV0IG1lc3NhZ2VRdWV1ZT1bXTtzZWxmLm9ubWVzc2FnZT1lPT5tZXNzYWdlUXVldWUucHVzaChlKTtzZWxmLnN0YXJ0V29ya2VyPWluc3RhbmNlPT57TW9kdWxlPWluc3RhbmNlO3Bvc3RNZXNzYWdlKHtcImNtZFwiOlwibG9hZGVkXCJ9KTtmb3IobGV0IG1zZyBvZiBtZXNzYWdlUXVldWUpe2hhbmRsZU1lc3NhZ2UobXNnKX1zZWxmLm9ubWVzc2FnZT1oYW5kbGVNZXNzYWdlfTtNb2R1bGVbXCJ3YXNtTW9kdWxlXCJdPWUuZGF0YS53YXNtTW9kdWxlO2Zvcihjb25zdCBoYW5kbGVyIG9mIGUuZGF0YS5oYW5kbGVycyl7TW9kdWxlW2hhbmRsZXJdPSguLi5hcmdzKT0+e3Bvc3RNZXNzYWdlKHtjbWQ6XCJjYWxsSGFuZGxlclwiLGhhbmRsZXI6aGFuZGxlcixhcmdzOmFyZ3N9KX19TW9kdWxlW1wid2FzbU1lbW9yeVwiXT1lLmRhdGEud2FzbU1lbW9yeTtNb2R1bGVbXCJidWZmZXJcIl09TW9kdWxlW1wid2FzbU1lbW9yeVwiXS5idWZmZXI7TW9kdWxlW1wiRU5WSVJPTk1FTlRfSVNfUFRIUkVBRFwiXT10cnVlO2lmKHR5cGVvZiBlLmRhdGEudXJsT3JCbG9iPT1cInN0cmluZ1wiKXtpbXBvcnRTY3JpcHRzKGUuZGF0YS51cmxPckJsb2IpfWVsc2V7dmFyIG9iamVjdFVybD1VUkwuY3JlYXRlT2JqZWN0VVJMKGUuZGF0YS51cmxPckJsb2IpO2ltcG9ydFNjcmlwdHMob2JqZWN0VXJsKTtVUkwucmV2b2tlT2JqZWN0VVJMKG9iamVjdFVybCl9b3J0V2FzbVRocmVhZGVkKE1vZHVsZSl9ZWxzZSBpZihlLmRhdGEuY21kPT09XCJydW5cIil7TW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9pbml0XCJdKGUuZGF0YS5wdGhyZWFkX3B0ciwvKmlzX21haW49Ki8wLC8qaXNfcnVudGltZT0qLzAsLypjYW5fYmxvY2s9Ki8xKTtNb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX21haWxib3hfYXdhaXRcIl0oZS5kYXRhLnB0aHJlYWRfcHRyKTtNb2R1bGVbXCJlc3RhYmxpc2hTdGFja1NwYWNlXCJdKCk7TW9kdWxlW1wiUFRocmVhZFwiXS5yZWNlaXZlT2JqZWN0VHJhbnNmZXIoZS5kYXRhKTtNb2R1bGVbXCJQVGhyZWFkXCJdLnRocmVhZEluaXRUTFMoKTtpZighaW5pdGlhbGl6ZWRKUyl7TW9kdWxlW1wiX19lbWJpbmRfaW5pdGlhbGl6ZV9iaW5kaW5nc1wiXSgpO2luaXRpYWxpemVkSlM9dHJ1ZX10cnl7TW9kdWxlW1wiaW52b2tlRW50cnlQb2ludFwiXShlLmRhdGEuc3RhcnRfcm91dGluZSxlLmRhdGEuYXJnKX1jYXRjaChleCl7aWYoZXghPVwidW53aW5kXCIpe3Rocm93IGV4fX19ZWxzZSBpZihlLmRhdGEuY21kPT09XCJjYW5jZWxcIil7aWYoTW9kdWxlW1wiX3B0aHJlYWRfc2VsZlwiXSgpKXtNb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX2V4aXRcIl0oLTEpfX1lbHNlIGlmKGUuZGF0YS50YXJnZXQ9PT1cInNldGltbWVkaWF0ZVwiKXt9ZWxzZSBpZihlLmRhdGEuY21kPT09XCJjaGVja01haWxib3hcIil7aWYoaW5pdGlhbGl6ZWRKUyl7TW9kdWxlW1wiY2hlY2tNYWlsYm94XCJdKCl9fWVsc2UgaWYoZS5kYXRhLmNtZCl7ZXJyKGB3b3JrZXIuanMgcmVjZWl2ZWQgdW5rbm93biBjb21tYW5kICR7ZS5kYXRhLmNtZH1gKTtlcnIoZS5kYXRhKX19Y2F0Y2goZXgpe2lmKE1vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfY3Jhc2hlZFwiXSl7TW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkXCJdKCl9dGhyb3cgZXh9fXNlbGYub25tZXNzYWdlPWhhbmRsZU1lc3NhZ2U7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCAqIGFzIHBhdGggZnJvbSAnbm9kZTpwYXRoJztcbmltcG9ydCB7RW52fSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG5pbXBvcnQge09ydFdhc21Nb2R1bGV9IGZyb20gJy4vYmluZGluZy9vcnQtd2FzbSc7XG5pbXBvcnQge09ydFdhc21UaHJlYWRlZE1vZHVsZX0gZnJvbSAnLi9iaW5kaW5nL29ydC13YXNtLXRocmVhZGVkJztcblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0cyAqL1xubGV0IG9ydFdhc21GYWN0b3J5OiBFbXNjcmlwdGVuTW9kdWxlRmFjdG9yeTxPcnRXYXNtTW9kdWxlPjtcblxuaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfVFJBSU5JTkcpIHtcbiAgb3J0V2FzbUZhY3RvcnkgPSByZXF1aXJlKCcuL2JpbmRpbmcvb3J0LXRyYWluaW5nLXdhc20tc2ltZC5qcycpO1xufSBlbHNlIHtcbiAgb3J0V2FzbUZhY3RvcnkgPVxuICAgICAgQlVJTERfREVGUy5ESVNBQkxFX1dFQkdQVSA/IHJlcXVpcmUoJy4vYmluZGluZy9vcnQtd2FzbS5qcycpIDogcmVxdWlyZSgnLi9iaW5kaW5nL29ydC13YXNtLXNpbWQuanNlcC5qcycpO1xufVxuXG5jb25zdCBvcnRXYXNtRmFjdG9yeVRocmVhZGVkOiBFbXNjcmlwdGVuTW9kdWxlRmFjdG9yeTxPcnRXYXNtTW9kdWxlPiA9ICFCVUlMRF9ERUZTLkRJU0FCTEVfV0FTTV9USFJFQUQgP1xuICAgIChCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR1BVID8gcmVxdWlyZSgnLi9iaW5kaW5nL29ydC13YXNtLXRocmVhZGVkLmpzJykgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZSgnLi9iaW5kaW5nL29ydC13YXNtLXNpbWQtdGhyZWFkZWQuanNlcC5qcycpKSA6XG4gICAgb3J0V2FzbUZhY3Rvcnk7XG4vKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHMgKi9cblxubGV0IHdhc206IE9ydFdhc21Nb2R1bGV8dW5kZWZpbmVkO1xubGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG5sZXQgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG5sZXQgYWJvcnRlZCA9IGZhbHNlO1xuXG5jb25zdCBpc011bHRpVGhyZWFkU3VwcG9ydGVkID0gKCk6IGJvb2xlYW4gPT4ge1xuICB0cnkge1xuICAgIC8vIElmICdTaGFyZWRBcnJheUJ1ZmZlcicgaXMgbm90IGF2YWlsYWJsZSwgV2ViQXNzZW1ibHkgdGhyZWFkcyB3aWxsIG5vdCB3b3JrLlxuICAgIGlmICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVGVzdCBmb3IgdHJhbnNmZXJhYmlsaXR5IG9mIFNBQnMgKGZvciBicm93c2Vycy4gbmVlZGVkIGZvciBGaXJlZm94KVxuICAgIC8vIGh0dHBzOi8vZ3JvdXBzLmdvb2dsZS5jb20vZm9ydW0vIyFtc2cvbW96aWxsYS5kZXYucGxhdGZvcm0vSUhrQlpsSEVUcEEvZHdzTU5jaFdFUUFKXG4gICAgaWYgKHR5cGVvZiBNZXNzYWdlQ2hhbm5lbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG5ldyBNZXNzYWdlQ2hhbm5lbCgpLnBvcnQxLnBvc3RNZXNzYWdlKG5ldyBTaGFyZWRBcnJheUJ1ZmZlcigxKSk7XG4gICAgfVxuXG4gICAgLy8gVGVzdCBmb3IgV2ViQXNzZW1ibHkgdGhyZWFkcyBjYXBhYmlsaXR5IChmb3IgYm90aCBicm93c2VycyBhbmQgTm9kZS5qcylcbiAgICAvLyBUaGlzIHR5cGVkIGFycmF5IGlzIGEgV2ViQXNzZW1ibHkgcHJvZ3JhbSBjb250YWluaW5nIHRocmVhZGVkIGluc3RydWN0aW9ucy5cbiAgICByZXR1cm4gV2ViQXNzZW1ibHkudmFsaWRhdGUobmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMCwgOTcsIDExNSwgMTA5LCAxLCAwLCAgMCwgIDAsIDEsIDQsIDEsICA5NiwgMCwgICAwLCAgMywgMiwgMSwgIDAsIDUsXG4gICAgICA0LCAxLCAgMywgICAxLCAgIDEsIDEwLCAxMSwgMSwgOSwgMCwgNjUsIDAsICAyNTQsIDE2LCAyLCAwLCAyNiwgMTFcbiAgICBdKSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbmNvbnN0IGlzU2ltZFN1cHBvcnRlZCA9ICgpOiBib29sZWFuID0+IHtcbiAgdHJ5IHtcbiAgICAvLyBUZXN0IGZvciBXZWJBc3NlbWJseSBTSU1EIGNhcGFiaWxpdHkgKGZvciBib3RoIGJyb3dzZXJzIGFuZCBOb2RlLmpzKVxuICAgIC8vIFRoaXMgdHlwZWQgYXJyYXkgaXMgYSBXZWJBc3NlbWJseSBwcm9ncmFtIGNvbnRhaW5pbmcgU0lNRCBpbnN0cnVjdGlvbnMuXG5cbiAgICAvLyBUaGUgYmluYXJ5IGRhdGEgaXMgZ2VuZXJhdGVkIGZyb20gdGhlIGZvbGxvd2luZyBjb2RlIGJ5IHdhdDJ3YXNtOlxuICAgIC8vXG4gICAgLy8gKG1vZHVsZVxuICAgIC8vICAgKHR5cGUgJHQwIChmdW5jKSlcbiAgICAvLyAgIChmdW5jICRmMCAodHlwZSAkdDApXG4gICAgLy8gICAgIChkcm9wXG4gICAgLy8gICAgICAgKGkzMng0LmRvdF9pMTZ4OF9zXG4gICAgLy8gICAgICAgICAoaTh4MTYuc3BsYXRcbiAgICAvLyAgICAgICAgICAgKGkzMi5jb25zdCAwKSlcbiAgICAvLyAgICAgICAgICh2MTI4LmNvbnN0IGkzMng0IDB4MDAwMDAwMDAgMHgwMDAwMDAwMCAweDAwMDAwMDAwIDB4MDAwMDAwMDApKSkpKVxuXG4gICAgcmV0dXJuIFdlYkFzc2VtYmx5LnZhbGlkYXRlKG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDAsICAgOTcsIDExNSwgMTA5LCAxLCAwLCAwLCAwLCAxLCA0LCAxLCA5NiwgMCwgMCwgMywgMiwgMSwgMCwgMTAsIDMwLCAxLCAgIDI4LCAgMCwgNjUsIDAsXG4gICAgICAyNTMsIDE1LCAyNTMsIDEyLCAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgIDAsIDAsIDAsIDAsIDAsIDAsIDAsICAwLCAgMjUzLCAxODYsIDEsIDI2LCAxMVxuICAgIF0pKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuY29uc3QgZ2V0V2FzbUZpbGVOYW1lID0gKHVzZVNpbWQ6IGJvb2xlYW4sIHVzZVRocmVhZHM6IGJvb2xlYW4pID0+IHtcbiAgaWYgKHVzZVNpbWQpIHtcbiAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9UUkFJTklORykge1xuICAgICAgcmV0dXJuICdvcnQtdHJhaW5pbmctd2FzbS1zaW1kLndhc20nO1xuICAgIH1cbiAgICByZXR1cm4gdXNlVGhyZWFkcyA/ICdvcnQtd2FzbS1zaW1kLXRocmVhZGVkLndhc20nIDogJ29ydC13YXNtLXNpbWQud2FzbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVzZVRocmVhZHMgPyAnb3J0LXdhc20tdGhyZWFkZWQud2FzbScgOiAnb3J0LXdhc20ud2FzbSc7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplV2ViQXNzZW1ibHkgPSBhc3luYyhmbGFnczogRW52LldlYkFzc2VtYmx5RmxhZ3MpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG4gIGlmIChpbml0aWFsaXppbmcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ211bHRpcGxlIGNhbGxzIHRvIFxcJ2luaXRpYWxpemVXZWJBc3NlbWJseSgpXFwnIGRldGVjdGVkLicpO1xuICB9XG4gIGlmIChhYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcmV2aW91cyBjYWxsIHRvIFxcJ2luaXRpYWxpemVXZWJBc3NlbWJseSgpXFwnIGZhaWxlZC4nKTtcbiAgfVxuXG4gIGluaXRpYWxpemluZyA9IHRydWU7XG5cbiAgLy8gd2FzbSBmbGFncyBhcmUgYWxyZWFkeSBpbml0aWFsaXplZFxuICBjb25zdCB0aW1lb3V0ID0gZmxhZ3MuaW5pdFRpbWVvdXQhO1xuICBjb25zdCBudW1UaHJlYWRzID0gZmxhZ3MubnVtVGhyZWFkcyE7XG4gIGNvbnN0IHNpbWQgPSBmbGFncy5zaW1kITtcblxuICBjb25zdCB1c2VUaHJlYWRzID0gbnVtVGhyZWFkcyA+IDEgJiYgaXNNdWx0aVRocmVhZFN1cHBvcnRlZCgpO1xuICBjb25zdCB1c2VTaW1kID0gc2ltZCAmJiBpc1NpbWRTdXBwb3J0ZWQoKTtcblxuICBjb25zdCB3YXNtUGF0aHMgPSBmbGFncy53YXNtUGF0aHM7XG4gIGNvbnN0IHdhc21QcmVmaXhPdmVycmlkZSA9IHR5cGVvZiB3YXNtUGF0aHMgPT09ICdzdHJpbmcnID8gd2FzbVBhdGhzIDogdW5kZWZpbmVkO1xuICBjb25zdCB3YXNtRmlsZU5hbWUgPSBnZXRXYXNtRmlsZU5hbWUodXNlU2ltZCwgdXNlVGhyZWFkcyk7XG4gIGNvbnN0IHdhc21QYXRoT3ZlcnJpZGUgPSB0eXBlb2Ygd2FzbVBhdGhzID09PSAnb2JqZWN0JyA/IHdhc21QYXRoc1t3YXNtRmlsZU5hbWVdIDogdW5kZWZpbmVkO1xuXG4gIGxldCBpc1RpbWVvdXQgPSBmYWxzZTtcblxuICBjb25zdCB0YXNrczogQXJyYXk8UHJvbWlzZTx2b2lkPj4gPSBbXTtcblxuICAvLyBwcm9taXNlIGZvciB0aW1lb3V0XG4gIGlmICh0aW1lb3V0ID4gMCkge1xuICAgIHRhc2tzLnB1c2gobmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpc1RpbWVvdXQgPSB0cnVlO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9LCB0aW1lb3V0KTtcbiAgICB9KSk7XG4gIH1cblxuICAvLyBwcm9taXNlIGZvciBtb2R1bGUgaW5pdGlhbGl6YXRpb25cbiAgdGFza3MucHVzaChuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgZmFjdG9yeSA9IHVzZVRocmVhZHMgPyBvcnRXYXNtRmFjdG9yeVRocmVhZGVkIDogb3J0V2FzbUZhY3Rvcnk7XG4gICAgY29uc3QgY29uZmlnOiBQYXJ0aWFsPE9ydFdhc21Nb2R1bGU+ID0ge1xuICAgICAgbG9jYXRlRmlsZTogKGZpbGVOYW1lOiBzdHJpbmcsIHNjcmlwdERpcmVjdG9yeTogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fVEhSRUFEICYmIHVzZVRocmVhZHMgJiYgZmlsZU5hbWUuZW5kc1dpdGgoJy53b3JrZXIuanMnKSAmJlxuICAgICAgICAgICAgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcmV0dXJuIFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHJlcXVpcmUoKSBmdW5jdGlvbiBpcyBoYW5kbGVkIGJ5IGVzYnVpbGQgcGx1Z2luIHRvIGxvYWQgZmlsZSBjb250ZW50IGFzIHN0cmluZy5cbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0c1xuICAgICAgICAgICAgICAgIHJlcXVpcmUoJy4vYmluZGluZy9vcnQtd2FzbS10aHJlYWRlZC53b3JrZXIuanMnKVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICB7dHlwZTogJ3RleHQvamF2YXNjcmlwdCd9KSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmlsZU5hbWUuZW5kc1dpdGgoJy53YXNtJykpIHtcbiAgICAgICAgICBpZiAod2FzbVBhdGhPdmVycmlkZSkge1xuICAgICAgICAgICAgcmV0dXJuIHdhc21QYXRoT3ZlcnJpZGU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgcHJlZml4ID0gd2FzbVByZWZpeE92ZXJyaWRlID8/IHNjcmlwdERpcmVjdG9yeTtcblxuICAgICAgICAgIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dFQkdQVSkge1xuICAgICAgICAgICAgaWYgKHdhc21GaWxlTmFtZSA9PT0gJ29ydC13YXNtLXNpbWQud2FzbScpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHByZWZpeCArICdvcnQtd2FzbS1zaW1kLmpzZXAud2FzbSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHdhc21GaWxlTmFtZSA9PT0gJ29ydC13YXNtLXNpbWQtdGhyZWFkZWQud2FzbScpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHByZWZpeCArICdvcnQtd2FzbS1zaW1kLXRocmVhZGVkLmpzZXAud2FzbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHByZWZpeCArIHdhc21GaWxlTmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzY3JpcHREaXJlY3RvcnkgKyBmaWxlTmFtZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0FTTV9USFJFQUQgJiYgdXNlVGhyZWFkcykge1xuICAgICAgY29uZmlnLm51bVRocmVhZHMgPSBudW1UaHJlYWRzO1xuICAgICAgaWYgKHR5cGVvZiBCbG9iID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25maWcubWFpblNjcmlwdFVybE9yQmxvYiA9IHBhdGguam9pbihfX2Rpcm5hbWUsICdvcnQtd2FzbS10aHJlYWRlZC5qcycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2NyaXB0U291cmNlQ29kZSA9IGB2YXIgb3J0V2FzbVRocmVhZGVkPSR7ZmFjdG9yeS50b1N0cmluZygpfTtgO1xuICAgICAgICBjb25maWcubWFpblNjcmlwdFVybE9yQmxvYiA9IG5ldyBCbG9iKFtzY3JpcHRTb3VyY2VDb2RlXSwge3R5cGU6ICd0ZXh0L2phdmFzY3JpcHQnfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmFjdG9yeShjb25maWcpLnRoZW4oXG4gICAgICAgIC8vIHdhc20gbW9kdWxlIGluaXRpYWxpemVkIHN1Y2Nlc3NmdWxseVxuICAgICAgICBtb2R1bGUgPT4ge1xuICAgICAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuICAgICAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICB3YXNtID0gbW9kdWxlO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gd2FzbSBtb2R1bGUgZmFpbGVkIHRvIGluaXRpYWxpemVcbiAgICAgICAgKHdoYXQpID0+IHtcbiAgICAgICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgICAgICBhYm9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICByZWplY3Qod2hhdCk7XG4gICAgICAgIH0pO1xuICB9KSk7XG5cbiAgYXdhaXQgUHJvbWlzZS5yYWNlKHRhc2tzKTtcblxuICBpZiAoaXNUaW1lb3V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBXZWJBc3NlbWJseSBiYWNrZW5kIGluaXRpYWxpemluZyBmYWlsZWQgZHVlIHRvIHRpbWVvdXQ6ICR7dGltZW91dH1tc2ApO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0SW5zdGFuY2UgPSAoKTogT3J0V2FzbU1vZHVsZSA9PiB7XG4gIGlmIChpbml0aWFsaXplZCAmJiB3YXNtKSB7XG4gICAgcmV0dXJuIHdhc207XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ1dlYkFzc2VtYmx5IGlzIG5vdCBpbml0aWFsaXplZCB5ZXQuJyk7XG59O1xuXG5leHBvcnQgY29uc3QgZGlzcG9zZSA9ICgpOiB2b2lkID0+IHtcbiAgaWYgKGluaXRpYWxpemVkICYmICFpbml0aWFsaXppbmcgJiYgIWFib3J0ZWQpIHtcbiAgICBpbml0aWFsaXppbmcgPSB0cnVlO1xuXG4gICAgKHdhc20gYXMgT3J0V2FzbVRocmVhZGVkTW9kdWxlKS5QVGhyZWFkPy50ZXJtaW5hdGVBbGxUaHJlYWRzKCk7XG4gICAgd2FzbSA9IHVuZGVmaW5lZDtcblxuICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuICAgIGluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgYWJvcnRlZCA9IHRydWU7XG4gIH1cbn07XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7Z2V0SW5zdGFuY2V9IGZyb20gJy4vd2FzbS1mYWN0b3J5JztcblxuZXhwb3J0IGNvbnN0IGFsbG9jV2FzbVN0cmluZyA9IChkYXRhOiBzdHJpbmcsIGFsbG9jczogbnVtYmVyW10pOiBudW1iZXIgPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcblxuICBjb25zdCBkYXRhTGVuZ3RoID0gd2FzbS5sZW5ndGhCeXRlc1VURjgoZGF0YSkgKyAxO1xuICBjb25zdCBkYXRhT2Zmc2V0ID0gd2FzbS5fbWFsbG9jKGRhdGFMZW5ndGgpO1xuICB3YXNtLnN0cmluZ1RvVVRGOChkYXRhLCBkYXRhT2Zmc2V0LCBkYXRhTGVuZ3RoKTtcbiAgYWxsb2NzLnB1c2goZGF0YU9mZnNldCk7XG5cbiAgcmV0dXJuIGRhdGFPZmZzZXQ7XG59O1xuXG5pbnRlcmZhY2UgRXh0cmFPcHRpb25zSGFuZGxlciB7XG4gIChuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiB2b2lkO1xufVxuXG5leHBvcnQgY29uc3QgaXRlcmF0ZUV4dHJhT3B0aW9ucyA9XG4gICAgKG9wdGlvbnM6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCBwcmVmaXg6IHN0cmluZywgc2VlbjogV2Vha1NldDxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4sXG4gICAgIGhhbmRsZXI6IEV4dHJhT3B0aW9uc0hhbmRsZXIpOiB2b2lkID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PSAnb2JqZWN0JyAmJiBvcHRpb25zICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChzZWVuLmhhcyhvcHRpb25zKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2lyY3VsYXIgcmVmZXJlbmNlIGluIG9wdGlvbnMnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWVuLmFkZChvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBPYmplY3QuZW50cmllcyhvcHRpb25zKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IChwcmVmaXgpID8gcHJlZml4ICsga2V5IDoga2V5O1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIGl0ZXJhdGVFeHRyYU9wdGlvbnModmFsdWUgYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj4sIG5hbWUgKyAnLicsIHNlZW4sIGhhbmRsZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGhhbmRsZXIobmFtZSwgdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICBoYW5kbGVyKG5hbWUsICh2YWx1ZSkgPyAnMScgOiAnMCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2FuJ3QgaGFuZGxlIGV4dHJhIGNvbmZpZyB0eXBlOiAke3R5cGVvZiB2YWx1ZX1gKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuLyoqXG4gKiBjaGVjayB3ZWIgYXNzZW1ibHkgQVBJJ3MgbGFzdCBlcnJvciBhbmQgdGhyb3cgZXJyb3IgaWYgYW55IGVycm9yIG9jY3VycmVkLlxuICogQHBhcmFtIG1lc3NhZ2UgYSBtZXNzYWdlIHVzZWQgd2hlbiBhbiBlcnJvciBvY2N1cnJlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGNoZWNrTGFzdEVycm9yID0gKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQgPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcblxuICBjb25zdCBzdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgcGFyYW1zT2Zmc2V0ID0gd2FzbS5zdGFja0FsbG9jKDgpO1xuICAgIHdhc20uX09ydEdldExhc3RFcnJvcihwYXJhbXNPZmZzZXQsIHBhcmFtc09mZnNldCArIDQpO1xuICAgIGNvbnN0IGVycm9yQ29kZSA9IHdhc20uSEVBUDMyW3BhcmFtc09mZnNldCAvIDRdO1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZVBvaW50ZXIgPSB3YXNtLkhFQVBVMzJbcGFyYW1zT2Zmc2V0IC8gNCArIDFdO1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yTWVzc2FnZVBvaW50ZXIgPyB3YXNtLlVURjhUb1N0cmluZyhlcnJvck1lc3NhZ2VQb2ludGVyKSA6ICcnO1xuICAgIHRocm93IG5ldyBFcnJvcihgJHttZXNzYWdlfSBFUlJPUl9DT0RFOiAke2Vycm9yQ29kZX0sIEVSUk9SX01FU1NBR0U6ICR7ZXJyb3JNZXNzYWdlfWApO1xuICB9IGZpbmFsbHkge1xuICAgIHdhc20uc3RhY2tSZXN0b3JlKHN0YWNrKTtcbiAgfVxufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9ufSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG5pbXBvcnQge2dldEluc3RhbmNlfSBmcm9tICcuL3dhc20tZmFjdG9yeSc7XG5pbXBvcnQge2FsbG9jV2FzbVN0cmluZywgY2hlY2tMYXN0RXJyb3IsIGl0ZXJhdGVFeHRyYU9wdGlvbnN9IGZyb20gJy4vd2FzbS11dGlscyc7XG5cbmV4cG9ydCBjb25zdCBzZXRSdW5PcHRpb25zID0gKG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFtudW1iZXIsIG51bWJlcltdXSA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBsZXQgcnVuT3B0aW9uc0hhbmRsZSA9IDA7XG4gIGNvbnN0IGFsbG9jczogbnVtYmVyW10gPSBbXTtcblxuICBjb25zdCBydW5PcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHRyeSB7XG4gICAgaWYgKG9wdGlvbnM/LmxvZ1NldmVyaXR5TGV2ZWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVuT3B0aW9ucy5sb2dTZXZlcml0eUxldmVsID0gMjsgIC8vIERlZmF1bHQgdG8gd2FybmluZ1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHR5cGVvZiBvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgIT09ICdudW1iZXInIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKG9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCkgfHxcbiAgICAgICAgb3B0aW9ucy5sb2dTZXZlcml0eUxldmVsIDwgMCB8fCBvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgPiA0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGxvZyBzZXJ2ZXJpdHkgbGV2ZWwgaXMgbm90IHZhbGlkOiAke29wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbH1gKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucz8ubG9nVmVyYm9zaXR5TGV2ZWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVuT3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbCA9IDA7ICAvLyBEZWZhdWx0IHRvIDBcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzSW50ZWdlcihvcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBsb2cgdmVyYm9zaXR5IGxldmVsIGlzIG5vdCB2YWxpZDogJHtvcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsfWApO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zPy50ZXJtaW5hdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcnVuT3B0aW9ucy50ZXJtaW5hdGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBsZXQgdGFnRGF0YU9mZnNldCA9IDA7XG4gICAgaWYgKG9wdGlvbnM/LnRhZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YWdEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKG9wdGlvbnMudGFnLCBhbGxvY3MpO1xuICAgIH1cblxuICAgIHJ1bk9wdGlvbnNIYW5kbGUgPSB3YXNtLl9PcnRDcmVhdGVSdW5PcHRpb25zKFxuICAgICAgICBydW5PcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwhLCBydW5PcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsISwgISFydW5PcHRpb25zLnRlcm1pbmF0ZSEsIHRhZ0RhdGFPZmZzZXQpO1xuICAgIGlmIChydW5PcHRpb25zSGFuZGxlID09PSAwKSB7XG4gICAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBjcmVhdGUgcnVuIG9wdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnM/LmV4dHJhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGl0ZXJhdGVFeHRyYU9wdGlvbnMob3B0aW9ucy5leHRyYSwgJycsIG5ldyBXZWFrU2V0PFJlY29yZDxzdHJpbmcsIHVua25vd24+PigpLCAoa2V5LCB2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKGtleSwgYWxsb2NzKTtcbiAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHZhbHVlLCBhbGxvY3MpO1xuXG4gICAgICAgIGlmICh3YXNtLl9PcnRBZGRSdW5Db25maWdFbnRyeShydW5PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PSAwKSB7XG4gICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IHNldCBhIHJ1biBjb25maWcgZW50cnk6ICR7a2V5fSAtICR7dmFsdWV9LmApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3J1bk9wdGlvbnNIYW5kbGUsIGFsbG9jc107XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAocnVuT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0UmVsZWFzZVJ1bk9wdGlvbnMocnVuT3B0aW9uc0hhbmRsZSk7XG4gICAgfVxuICAgIGFsbG9jcy5mb3JFYWNoKGFsbG9jID0+IHdhc20uX2ZyZWUoYWxsb2MpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb259IGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5cbmltcG9ydCB7Z2V0SW5zdGFuY2V9IGZyb20gJy4vd2FzbS1mYWN0b3J5JztcbmltcG9ydCB7YWxsb2NXYXNtU3RyaW5nLCBjaGVja0xhc3RFcnJvciwgaXRlcmF0ZUV4dHJhT3B0aW9uc30gZnJvbSAnLi93YXNtLXV0aWxzJztcblxuY29uc3QgZ2V0R3JhcGhPcHRpbXphdGlvbkxldmVsID0gKGdyYXBoT3B0aW1pemF0aW9uTGV2ZWw6IHN0cmluZ3x1bmtub3duKTogbnVtYmVyID0+IHtcbiAgc3dpdGNoIChncmFwaE9wdGltaXphdGlvbkxldmVsKSB7XG4gICAgY2FzZSAnZGlzYWJsZWQnOlxuICAgICAgcmV0dXJuIDA7XG4gICAgY2FzZSAnYmFzaWMnOlxuICAgICAgcmV0dXJuIDE7XG4gICAgY2FzZSAnZXh0ZW5kZWQnOlxuICAgICAgcmV0dXJuIDI7XG4gICAgY2FzZSAnYWxsJzpcbiAgICAgIHJldHVybiA5OTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBncmFwaCBvcHRpbWl6YXRpb24gbGV2ZWw6ICR7Z3JhcGhPcHRpbWl6YXRpb25MZXZlbH1gKTtcbiAgfVxufTtcblxuY29uc3QgZ2V0RXhlY3V0aW9uTW9kZSA9IChleGVjdXRpb25Nb2RlOiAnc2VxdWVudGlhbCd8J3BhcmFsbGVsJyk6IG51bWJlciA9PiB7XG4gIHN3aXRjaCAoZXhlY3V0aW9uTW9kZSkge1xuICAgIGNhc2UgJ3NlcXVlbnRpYWwnOlxuICAgICAgcmV0dXJuIDA7XG4gICAgY2FzZSAncGFyYWxsZWwnOlxuICAgICAgcmV0dXJuIDE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgZXhlY3V0aW9uIG1vZGU6ICR7ZXhlY3V0aW9uTW9kZX1gKTtcbiAgfVxufTtcblxuY29uc3QgYXBwZW5kRGVmYXVsdE9wdGlvbnMgPSAob3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6IHZvaWQgPT4ge1xuICBpZiAoIW9wdGlvbnMuZXh0cmEpIHtcbiAgICBvcHRpb25zLmV4dHJhID0ge307XG4gIH1cbiAgaWYgKCFvcHRpb25zLmV4dHJhLnNlc3Npb24pIHtcbiAgICBvcHRpb25zLmV4dHJhLnNlc3Npb24gPSB7fTtcbiAgfVxuICBjb25zdCBzZXNzaW9uID0gb3B0aW9ucy5leHRyYS5zZXNzaW9uIGFzIFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG4gIGlmICghc2Vzc2lvbi51c2Vfb3J0X21vZGVsX2J5dGVzX2RpcmVjdGx5KSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICAgIHNlc3Npb24udXNlX29ydF9tb2RlbF9ieXRlc19kaXJlY3RseSA9ICcxJztcbiAgfVxuXG4gIC8vIGlmIHVzaW5nIEpTRVAgd2l0aCBXZWJHUFUsIGFsd2F5cyBkaXNhYmxlIG1lbW9yeSBwYXR0ZXJuXG4gIGlmIChvcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycyAmJlxuICAgICAgb3B0aW9ucy5leGVjdXRpb25Qcm92aWRlcnMuc29tZShlcCA9PiAodHlwZW9mIGVwID09PSAnc3RyaW5nJyA/IGVwIDogZXAubmFtZSkgPT09ICd3ZWJncHUnKSkge1xuICAgIG9wdGlvbnMuZW5hYmxlTWVtUGF0dGVybiA9IGZhbHNlO1xuICB9XG59O1xuXG5jb25zdCBzZXRFeGVjdXRpb25Qcm92aWRlcnMgPVxuICAgIChzZXNzaW9uT3B0aW9uc0hhbmRsZTogbnVtYmVyLCBleGVjdXRpb25Qcm92aWRlcnM6IHJlYWRvbmx5IEluZmVyZW5jZVNlc3Npb24uRXhlY3V0aW9uUHJvdmlkZXJDb25maWdbXSxcbiAgICAgYWxsb2NzOiBudW1iZXJbXSk6IHZvaWQgPT4ge1xuICAgICAgZm9yIChjb25zdCBlcCBvZiBleGVjdXRpb25Qcm92aWRlcnMpIHtcbiAgICAgICAgbGV0IGVwTmFtZSA9IHR5cGVvZiBlcCA9PT0gJ3N0cmluZycgPyBlcCA6IGVwLm5hbWU7XG5cbiAgICAgICAgLy8gY2hlY2sgRVAgbmFtZVxuICAgICAgICBzd2l0Y2ggKGVwTmFtZSkge1xuICAgICAgICAgIGNhc2UgJ3hubnBhY2snOlxuICAgICAgICAgICAgZXBOYW1lID0gJ1hOTlBBQ0snO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnd2Vibm4nOlxuICAgICAgICAgICAgZXBOYW1lID0gJ1dFQk5OJztcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZXAgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHdlYm5uT3B0aW9ucyA9IGVwIGFzIEluZmVyZW5jZVNlc3Npb24uV2ViTk5FeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICAgICAgICAgICAgaWYgKHdlYm5uT3B0aW9ucz8uZGV2aWNlVHlwZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoJ2RldmljZVR5cGUnLCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh3ZWJubk9wdGlvbnMuZGV2aWNlVHlwZSwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0SW5zdGFuY2UoKS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PVxuICAgICAgICAgICAgICAgICAgICAwKSB7XG4gICAgICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICdkZXZpY2VUeXBlJyAtICR7d2Vibm5PcHRpb25zLmRldmljZVR5cGV9LmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAod2Vibm5PcHRpb25zPy5udW1UaHJlYWRzKSB7XG4gICAgICAgICAgICAgICAgbGV0IG51bVRocmVhZHMgPSB3ZWJubk9wdGlvbnMubnVtVGhyZWFkcztcbiAgICAgICAgICAgICAgICAvLyBKdXN0IGlnbm9yZSBpbnZhbGlkIHdlYm5uT3B0aW9ucy5udW1UaHJlYWRzLlxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbnVtVGhyZWFkcyAhPSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzSW50ZWdlcihudW1UaHJlYWRzKSB8fCBudW1UaHJlYWRzIDwgMCkge1xuICAgICAgICAgICAgICAgICAgbnVtVGhyZWFkcyA9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoJ251bVRocmVhZHMnLCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhudW1UaHJlYWRzLnRvU3RyaW5nKCksIGFsbG9jcyk7XG4gICAgICAgICAgICAgICAgaWYgKGdldEluc3RhbmNlKCkuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeShzZXNzaW9uT3B0aW9uc0hhbmRsZSwga2V5RGF0YU9mZnNldCwgdmFsdWVEYXRhT2Zmc2V0KSAhPT1cbiAgICAgICAgICAgICAgICAgICAgMCkge1xuICAgICAgICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IHNldCBhIHNlc3Npb24gY29uZmlnIGVudHJ5OiAnbnVtVGhyZWFkcycgLSAke3dlYm5uT3B0aW9ucy5udW1UaHJlYWRzfS5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHdlYm5uT3B0aW9ucz8ucG93ZXJQcmVmZXJlbmNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZygncG93ZXJQcmVmZXJlbmNlJywgYWxsb2NzKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcod2Vibm5PcHRpb25zLnBvd2VyUHJlZmVyZW5jZSwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0SW5zdGFuY2UoKS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PVxuICAgICAgICAgICAgICAgICAgICAwKSB7XG4gICAgICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICBgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICdwb3dlclByZWZlcmVuY2UnIC0gJHt3ZWJubk9wdGlvbnMucG93ZXJQcmVmZXJlbmNlfS5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3dlYmdwdSc6XG4gICAgICAgICAgICBlcE5hbWUgPSAnSlMnO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlcCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29uc3Qgd2ViZ3B1T3B0aW9ucyA9IGVwIGFzIEluZmVyZW5jZVNlc3Npb24uV2ViR3B1RXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgICAgICAgICAgIGlmICh3ZWJncHVPcHRpb25zPy5wcmVmZXJyZWRMYXlvdXQpIHtcbiAgICAgICAgICAgICAgICBpZiAod2ViZ3B1T3B0aW9ucy5wcmVmZXJyZWRMYXlvdXQgIT09ICdOQ0hXJyAmJiB3ZWJncHVPcHRpb25zLnByZWZlcnJlZExheW91dCAhPT0gJ05IV0MnKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHByZWZlcnJlZExheW91dCBtdXN0IGJlIGVpdGhlciAnTkNIVycgb3IgJ05IV0MnOiAke3dlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0fWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKCdwcmVmZXJyZWRMYXlvdXQnLCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh3ZWJncHVPcHRpb25zLnByZWZlcnJlZExheW91dCwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0SW5zdGFuY2UoKS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PVxuICAgICAgICAgICAgICAgICAgICAwKSB7XG4gICAgICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICBgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICdwcmVmZXJyZWRMYXlvdXQnIC0gJHt3ZWJncHVPcHRpb25zLnByZWZlcnJlZExheW91dH0uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICd3YXNtJzpcbiAgICAgICAgICBjYXNlICdjcHUnOlxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbm90IHN1cHBvcnRlZCBleGVjdXRpb24gcHJvdmlkZXI6ICR7ZXBOYW1lfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZXBOYW1lRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhlcE5hbWUsIGFsbG9jcyk7XG4gICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlcihzZXNzaW9uT3B0aW9uc0hhbmRsZSwgZXBOYW1lRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgYXBwZW5kIGV4ZWN1dGlvbiBwcm92aWRlcjogJHtlcE5hbWV9LmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuZXhwb3J0IGNvbnN0IHNldFNlc3Npb25PcHRpb25zID0gKG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTogW251bWJlciwgbnVtYmVyW11dID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gIGxldCBzZXNzaW9uT3B0aW9uc0hhbmRsZSA9IDA7XG4gIGNvbnN0IGFsbG9jczogbnVtYmVyW10gPSBbXTtcblxuICBjb25zdCBzZXNzaW9uT3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGFwcGVuZERlZmF1bHRPcHRpb25zKHNlc3Npb25PcHRpb25zKTtcblxuICB0cnkge1xuICAgIGNvbnN0IGdyYXBoT3B0aW1pemF0aW9uTGV2ZWwgPSBnZXRHcmFwaE9wdGltemF0aW9uTGV2ZWwoc2Vzc2lvbk9wdGlvbnMuZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCA/PyAnYWxsJyk7XG4gICAgY29uc3QgZXhlY3V0aW9uTW9kZSA9IGdldEV4ZWN1dGlvbk1vZGUoc2Vzc2lvbk9wdGlvbnMuZXhlY3V0aW9uTW9kZSA/PyAnc2VxdWVudGlhbCcpO1xuICAgIGNvbnN0IGxvZ0lkRGF0YU9mZnNldCA9XG4gICAgICAgIHR5cGVvZiBzZXNzaW9uT3B0aW9ucy5sb2dJZCA9PT0gJ3N0cmluZycgPyBhbGxvY1dhc21TdHJpbmcoc2Vzc2lvbk9wdGlvbnMubG9nSWQsIGFsbG9jcykgOiAwO1xuXG4gICAgY29uc3QgbG9nU2V2ZXJpdHlMZXZlbCA9IHNlc3Npb25PcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgPz8gMjsgIC8vIERlZmF1bHQgdG8gMiAtIHdhcm5pbmdcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobG9nU2V2ZXJpdHlMZXZlbCkgfHwgbG9nU2V2ZXJpdHlMZXZlbCA8IDAgfHwgbG9nU2V2ZXJpdHlMZXZlbCA+IDQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgbG9nIHNlcnZlcml0eSBsZXZlbCBpcyBub3QgdmFsaWQ6ICR7bG9nU2V2ZXJpdHlMZXZlbH1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBsb2dWZXJib3NpdHlMZXZlbCA9IHNlc3Npb25PcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsID8/IDA7ICAvLyBEZWZhdWx0IHRvIDAgLSB2ZXJib3NlXG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGxvZ1ZlcmJvc2l0eUxldmVsKSB8fCBsb2dWZXJib3NpdHlMZXZlbCA8IDAgfHwgbG9nVmVyYm9zaXR5TGV2ZWwgPiA0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGxvZyB2ZXJib3NpdHkgbGV2ZWwgaXMgbm90IHZhbGlkOiAke2xvZ1ZlcmJvc2l0eUxldmVsfWApO1xuICAgIH1cblxuICAgIGNvbnN0IG9wdGltaXplZE1vZGVsRmlsZVBhdGhPZmZzZXQgPSB0eXBlb2Ygc2Vzc2lvbk9wdGlvbnMub3B0aW1pemVkTW9kZWxGaWxlUGF0aCA9PT0gJ3N0cmluZycgP1xuICAgICAgICBhbGxvY1dhc21TdHJpbmcoc2Vzc2lvbk9wdGlvbnMub3B0aW1pemVkTW9kZWxGaWxlUGF0aCwgYWxsb2NzKSA6XG4gICAgICAgIDA7XG5cbiAgICBzZXNzaW9uT3B0aW9uc0hhbmRsZSA9IHdhc20uX09ydENyZWF0ZVNlc3Npb25PcHRpb25zKFxuICAgICAgICBncmFwaE9wdGltaXphdGlvbkxldmVsLCAhIXNlc3Npb25PcHRpb25zLmVuYWJsZUNwdU1lbUFyZW5hLCAhIXNlc3Npb25PcHRpb25zLmVuYWJsZU1lbVBhdHRlcm4sIGV4ZWN1dGlvbk1vZGUsXG4gICAgICAgICEhc2Vzc2lvbk9wdGlvbnMuZW5hYmxlUHJvZmlsaW5nLCAwLCBsb2dJZERhdGFPZmZzZXQsIGxvZ1NldmVyaXR5TGV2ZWwsIGxvZ1ZlcmJvc2l0eUxldmVsLFxuICAgICAgICBvcHRpbWl6ZWRNb2RlbEZpbGVQYXRoT2Zmc2V0KTtcbiAgICBpZiAoc2Vzc2lvbk9wdGlvbnNIYW5kbGUgPT09IDApIHtcbiAgICAgIGNoZWNrTGFzdEVycm9yKCdDYW5cXCd0IGNyZWF0ZSBzZXNzaW9uIG9wdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHNlc3Npb25PcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycykge1xuICAgICAgc2V0RXhlY3V0aW9uUHJvdmlkZXJzKHNlc3Npb25PcHRpb25zSGFuZGxlLCBzZXNzaW9uT3B0aW9ucy5leGVjdXRpb25Qcm92aWRlcnMsIGFsbG9jcyk7XG4gICAgfVxuXG4gICAgaWYgKHNlc3Npb25PcHRpb25zLmZyZWVEaW1lbnNpb25PdmVycmlkZXMpIHtcbiAgICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzZXNzaW9uT3B0aW9ucy5mcmVlRGltZW5zaW9uT3ZlcnJpZGVzKSkge1xuICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBmcmVlIGRpbWVuc2lvbiBvdmVycmlkZSBuYW1lIG11c3QgYmUgYSBzdHJpbmc6ICR7bmFtZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkgfHwgdmFsdWUgPCAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBmcmVlIGRpbWVuc2lvbiBvdmVycmlkZSB2YWx1ZSBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXI6ICR7dmFsdWV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmFtZU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhuYW1lLCBhbGxvY3MpO1xuICAgICAgICBpZiAod2FzbS5fT3J0QWRkRnJlZURpbWVuc2lvbk92ZXJyaWRlKHNlc3Npb25PcHRpb25zSGFuZGxlLCBuYW1lT2Zmc2V0LCB2YWx1ZSkgIT09IDApIHtcbiAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgZnJlZSBkaW1lbnNpb24gb3ZlcnJpZGU6ICR7bmFtZX0gLSAke3ZhbHVlfS5gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzZXNzaW9uT3B0aW9ucy5leHRyYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpdGVyYXRlRXh0cmFPcHRpb25zKHNlc3Npb25PcHRpb25zLmV4dHJhLCAnJywgbmV3IFdlYWtTZXQ8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+KCksIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoa2V5LCBhbGxvY3MpO1xuICAgICAgICBjb25zdCB2YWx1ZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcodmFsdWUsIGFsbG9jcyk7XG5cbiAgICAgICAgaWYgKHdhc20uX09ydEFkZFNlc3Npb25Db25maWdFbnRyeShzZXNzaW9uT3B0aW9uc0hhbmRsZSwga2V5RGF0YU9mZnNldCwgdmFsdWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJHtrZXl9IC0gJHt2YWx1ZX0uYCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBbc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGFsbG9jc107XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoc2Vzc2lvbk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgIHdhc20uX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucyhzZXNzaW9uT3B0aW9uc0hhbmRsZSk7XG4gICAgfVxuICAgIGFsbG9jcy5mb3JFYWNoKGFsbG9jID0+IHdhc20uX2ZyZWUoYWxsb2MpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuLy8gVGhpcyBmaWxlIGluY2x1ZGVzIGNvbW1vbiBkZWZpbml0aW9ucy4gVGhleSBkbyBOT1QgaGF2ZSBkZXBlbmRlbmN5IG9uIHRoZSBXZWJBc3NlbWJseSBpbnN0YW5jZS5cblxuLyoqXG4gKiBDb3BpZWQgZnJvbSBPTk5YIGRlZmluaXRpb24uIFVzZSB0aGlzIHRvIGRyb3AgZGVwZW5kZW5jeSAnb25ueF9wcm90bycgdG8gZGVjcmVhc2UgY29tcGlsZWQgLmpzIGZpbGUgc2l6ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGVudW0gRGF0YVR5cGUge1xuICB1bmRlZmluZWQgPSAwLFxuICBmbG9hdCA9IDEsXG4gIHVpbnQ4ID0gMixcbiAgaW50OCA9IDMsXG4gIHVpbnQxNiA9IDQsXG4gIGludDE2ID0gNSxcbiAgaW50MzIgPSA2LFxuICBpbnQ2NCA9IDcsXG4gIHN0cmluZyA9IDgsXG4gIGJvb2wgPSA5LFxuICBmbG9hdDE2ID0gMTAsXG4gIGRvdWJsZSA9IDExLFxuICB1aW50MzIgPSAxMixcbiAgdWludDY0ID0gMTMsXG4gIGNvbXBsZXg2NCA9IDE0LFxuICBjb21wbGV4MTI4ID0gMTUsXG4gIGJmbG9hdDE2ID0gMTZcbn1cblxuLyoqXG4gKiBNYXAgc3RyaW5nIHRlbnNvciBkYXRhIHRvIGVudW0gdmFsdWVcbiAqL1xuZXhwb3J0IGNvbnN0IHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtID0gKHR5cGU6IHN0cmluZyk6IERhdGFUeXBlID0+IHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnaW50OCc6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuaW50ODtcbiAgICBjYXNlICd1aW50OCc6XG4gICAgICByZXR1cm4gRGF0YVR5cGUudWludDg7XG4gICAgY2FzZSAnYm9vbCc6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuYm9vbDtcbiAgICBjYXNlICdpbnQxNic6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuaW50MTY7XG4gICAgY2FzZSAndWludDE2JzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS51aW50MTY7XG4gICAgY2FzZSAnaW50MzInOlxuICAgICAgcmV0dXJuIERhdGFUeXBlLmludDMyO1xuICAgIGNhc2UgJ3VpbnQzMic6XG4gICAgICByZXR1cm4gRGF0YVR5cGUudWludDMyO1xuICAgIGNhc2UgJ2Zsb2F0MTYnOlxuICAgICAgcmV0dXJuIERhdGFUeXBlLmZsb2F0MTY7XG4gICAgY2FzZSAnZmxvYXQzMic6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuZmxvYXQ7XG4gICAgY2FzZSAnZmxvYXQ2NCc6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuZG91YmxlO1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuc3RyaW5nO1xuICAgIGNhc2UgJ2ludDY0JzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5pbnQ2NDtcbiAgICBjYXNlICd1aW50NjQnOlxuICAgICAgcmV0dXJuIERhdGFUeXBlLnVpbnQ2NDtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGRhdGEgdHlwZTogJHt0eXBlfWApO1xuICB9XG59O1xuXG4vKipcbiAqIE1hcCBlbnVtIHZhbHVlIHRvIHN0cmluZyB0ZW5zb3IgZGF0YVxuICovXG5leHBvcnQgY29uc3QgdGVuc29yRGF0YVR5cGVFbnVtVG9TdHJpbmcgPSAodHlwZVByb3RvOiBEYXRhVHlwZSk6IFRlbnNvci5UeXBlID0+IHtcbiAgc3dpdGNoICh0eXBlUHJvdG8pIHtcbiAgICBjYXNlIERhdGFUeXBlLmludDg6XG4gICAgICByZXR1cm4gJ2ludDgnO1xuICAgIGNhc2UgRGF0YVR5cGUudWludDg6XG4gICAgICByZXR1cm4gJ3VpbnQ4JztcbiAgICBjYXNlIERhdGFUeXBlLmJvb2w6XG4gICAgICByZXR1cm4gJ2Jvb2wnO1xuICAgIGNhc2UgRGF0YVR5cGUuaW50MTY6XG4gICAgICByZXR1cm4gJ2ludDE2JztcbiAgICBjYXNlIERhdGFUeXBlLnVpbnQxNjpcbiAgICAgIHJldHVybiAndWludDE2JztcbiAgICBjYXNlIERhdGFUeXBlLmludDMyOlxuICAgICAgcmV0dXJuICdpbnQzMic7XG4gICAgY2FzZSBEYXRhVHlwZS51aW50MzI6XG4gICAgICByZXR1cm4gJ3VpbnQzMic7XG4gICAgY2FzZSBEYXRhVHlwZS5mbG9hdDE2OlxuICAgICAgcmV0dXJuICdmbG9hdDE2JztcbiAgICBjYXNlIERhdGFUeXBlLmZsb2F0OlxuICAgICAgcmV0dXJuICdmbG9hdDMyJztcbiAgICBjYXNlIERhdGFUeXBlLmRvdWJsZTpcbiAgICAgIHJldHVybiAnZmxvYXQ2NCc7XG4gICAgY2FzZSBEYXRhVHlwZS5zdHJpbmc6XG4gICAgICByZXR1cm4gJ3N0cmluZyc7XG4gICAgY2FzZSBEYXRhVHlwZS5pbnQ2NDpcbiAgICAgIHJldHVybiAnaW50NjQnO1xuICAgIGNhc2UgRGF0YVR5cGUudWludDY0OlxuICAgICAgcmV0dXJuICd1aW50NjQnO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgZGF0YSB0eXBlOiAke3R5cGVQcm90b31gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBnZXQgdGVuc29yIGVsZW1lbnQgc2l6ZSBpbiBieXRlcyBieSB0aGUgZ2l2ZW4gZGF0YSB0eXBlXG4gKiBAcmV0dXJucyBzaXplIGluIGludGVnZXIgb3IgdW5kZWZpbmVkIGlmIHRoZSBkYXRhIHR5cGUgaXMgbm90IHN1cHBvcnRlZFxuICovXG5leHBvcnQgY29uc3QgZ2V0VGVuc29yRWxlbWVudFNpemUgPSAoZGF0ZVR5cGU6IG51bWJlcik6IG51bWJlcnxcbiAgICB1bmRlZmluZWQgPT4gW3VuZGVmaW5lZCwgNCwgMSwgMSwgMiwgMiwgNCwgOCwgdW5kZWZpbmVkLCAxLCAyLCA4LCA0LCA4LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVtkYXRlVHlwZV07XG5cbi8qKlxuICogZ2V0IHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIGJ5IHRoZSBnaXZlbiB0ZW5zb3IgdHlwZVxuICovXG5leHBvcnQgY29uc3QgdGVuc29yVHlwZVRvVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gKHR5cGU6IFRlbnNvci5UeXBlKTogRmxvYXQzMkFycmF5Q29uc3RydWN0b3J8VWludDhBcnJheUNvbnN0cnVjdG9yfFxuICAgIEludDhBcnJheUNvbnN0cnVjdG9yfFVpbnQxNkFycmF5Q29uc3RydWN0b3J8SW50MTZBcnJheUNvbnN0cnVjdG9yfEludDMyQXJyYXlDb25zdHJ1Y3RvcnxCaWdJbnQ2NEFycmF5Q29uc3RydWN0b3J8XG4gICAgVWludDhBcnJheUNvbnN0cnVjdG9yfEZsb2F0NjRBcnJheUNvbnN0cnVjdG9yfFVpbnQzMkFycmF5Q29uc3RydWN0b3J8QmlnVWludDY0QXJyYXlDb25zdHJ1Y3RvciA9PiB7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnZmxvYXQxNic6XG4gICAgICAgICAgcmV0dXJuIFVpbnQxNkFycmF5O1xuICAgICAgICBjYXNlICdmbG9hdDMyJzpcbiAgICAgICAgICByZXR1cm4gRmxvYXQzMkFycmF5O1xuICAgICAgICBjYXNlICd1aW50OCc6XG4gICAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXk7XG4gICAgICAgIGNhc2UgJ2ludDgnOlxuICAgICAgICAgIHJldHVybiBJbnQ4QXJyYXk7XG4gICAgICAgIGNhc2UgJ3VpbnQxNic6XG4gICAgICAgICAgcmV0dXJuIFVpbnQxNkFycmF5O1xuICAgICAgICBjYXNlICdpbnQxNic6XG4gICAgICAgICAgcmV0dXJuIEludDE2QXJyYXk7XG4gICAgICAgIGNhc2UgJ2ludDMyJzpcbiAgICAgICAgICByZXR1cm4gSW50MzJBcnJheTtcbiAgICAgICAgY2FzZSAnYm9vbCc6XG4gICAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXk7XG4gICAgICAgIGNhc2UgJ2Zsb2F0NjQnOlxuICAgICAgICAgIHJldHVybiBGbG9hdDY0QXJyYXk7XG4gICAgICAgIGNhc2UgJ3VpbnQzMic6XG4gICAgICAgICAgcmV0dXJuIFVpbnQzMkFycmF5O1xuICAgICAgICBjYXNlICdpbnQ2NCc6XG4gICAgICAgICAgcmV0dXJuIEJpZ0ludDY0QXJyYXk7XG4gICAgICAgIGNhc2UgJ3VpbnQ2NCc6XG4gICAgICAgICAgcmV0dXJuIEJpZ1VpbnQ2NEFycmF5O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgdHlwZTogJHt0eXBlfWApO1xuICAgICAgfVxuICAgIH07XG5cbi8qKlxuICogTWFwIHN0cmluZyBsb2cgbGV2ZWwgdG8gaW50ZWdlciB2YWx1ZVxuICovXG5leHBvcnQgY29uc3QgbG9nTGV2ZWxTdHJpbmdUb0VudW0gPSAobG9nTGV2ZWw/OiAndmVyYm9zZSd8J2luZm8nfCd3YXJuaW5nJ3wnZXJyb3InfCdmYXRhbCcpOiBudW1iZXIgPT4ge1xuICBzd2l0Y2ggKGxvZ0xldmVsKSB7XG4gICAgY2FzZSAndmVyYm9zZSc6XG4gICAgICByZXR1cm4gMDtcbiAgICBjYXNlICdpbmZvJzpcbiAgICAgIHJldHVybiAxO1xuICAgIGNhc2UgJ3dhcm5pbmcnOlxuICAgICAgcmV0dXJuIDI7XG4gICAgY2FzZSAnZXJyb3InOlxuICAgICAgcmV0dXJuIDM7XG4gICAgY2FzZSAnZmF0YWwnOlxuICAgICAgcmV0dXJuIDQ7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgbG9nZ2luZyBsZXZlbDogJHtsb2dMZXZlbH1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBnaXZlbiB0ZW5zb3IgdHlwZSBpcyBzdXBwb3J0ZWQgYnkgR1BVIGJ1ZmZlclxuICovXG5leHBvcnQgY29uc3QgaXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlID0gKHR5cGU6IFRlbnNvci5UeXBlKTogdHlwZSBpcyBUZW5zb3IuR3B1QnVmZmVyRGF0YVR5cGVzID0+IHR5cGUgPT09ICdmbG9hdDMyJyB8fFxuICAgIHR5cGUgPT09ICdpbnQzMicgfHwgdHlwZSA9PT0gJ2ludDY0JyB8fCB0eXBlID09PSAnYm9vbCcgfHwgdHlwZSA9PT0gJ2Zsb2F0MTYnIHx8IHR5cGUgPT09ICd1aW50MzInO1xuXG4vKipcbiAqIE1hcCBzdHJpbmcgZGF0YSBsb2NhdGlvbiB0byBpbnRlZ2VyIHZhbHVlXG4gKi9cbmV4cG9ydCBjb25zdCBkYXRhTG9jYXRpb25TdHJpbmdUb0VudW0gPSAobG9jYXRpb246IFRlbnNvci5EYXRhTG9jYXRpb24pOiBudW1iZXIgPT4ge1xuICBzd2l0Y2ggKGxvY2F0aW9uKSB7XG4gICAgY2FzZSAnbm9uZSc6XG4gICAgICByZXR1cm4gMDtcbiAgICBjYXNlICdjcHUnOlxuICAgICAgcmV0dXJuIDE7XG4gICAgY2FzZSAnY3B1LXBpbm5lZCc6XG4gICAgICByZXR1cm4gMjtcbiAgICBjYXNlICd0ZXh0dXJlJzpcbiAgICAgIHJldHVybiAzO1xuICAgIGNhc2UgJ2dwdS1idWZmZXInOlxuICAgICAgcmV0dXJuIDQ7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgZGF0YSBsb2NhdGlvbjogJHtsb2NhdGlvbn1gKTtcbiAgfVxufTtcblxuLyoqXG4gKiBNYXAgaW50ZWdlciBkYXRhIGxvY2F0aW9uIHRvIHN0cmluZyB2YWx1ZVxuICovXG5leHBvcnQgY29uc3QgZGF0YUxvY2F0aW9uRW51bVRvU3RyaW5nID0gKGxvY2F0aW9uOiBudW1iZXIpOiBUZW5zb3IuRGF0YUxvY2F0aW9ufHVuZGVmaW5lZCA9PlxuICAgIChbJ25vbmUnLCAnY3B1JywgJ2NwdS1waW5uZWQnLCAndGV4dHVyZScsICdncHUtYnVmZmVyJ10gYXMgY29uc3QpW2xvY2F0aW9uXTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtFbnYsIEluZmVyZW5jZVNlc3Npb24sIFRlbnNvcn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtTZXJpYWxpemFibGVJbnRlcm5hbEJ1ZmZlciwgU2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhLCBTZXJpYWxpemFibGVUZW5zb3JNZXRhZGF0YSwgVGVuc29yTWV0YWRhdGF9IGZyb20gJy4vcHJveHktbWVzc2FnZXMnO1xuaW1wb3J0IHtzZXRSdW5PcHRpb25zfSBmcm9tICcuL3J1bi1vcHRpb25zJztcbmltcG9ydCB7c2V0U2Vzc2lvbk9wdGlvbnN9IGZyb20gJy4vc2Vzc2lvbi1vcHRpb25zJztcbmltcG9ydCB7ZGF0YUxvY2F0aW9uU3RyaW5nVG9FbnVtLCBnZXRUZW5zb3JFbGVtZW50U2l6ZSwgaXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlLCBsb2dMZXZlbFN0cmluZ1RvRW51bSwgdGVuc29yRGF0YVR5cGVFbnVtVG9TdHJpbmcsIHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtLCB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3J9IGZyb20gJy4vd2FzbS1jb21tb24nO1xuaW1wb3J0IHtnZXRJbnN0YW5jZX0gZnJvbSAnLi93YXNtLWZhY3RvcnknO1xuaW1wb3J0IHthbGxvY1dhc21TdHJpbmcsIGNoZWNrTGFzdEVycm9yfSBmcm9tICcuL3dhc20tdXRpbHMnO1xuXG4vLyAjcmVnaW9uIEluaXRpYWxpemF0aW9uc1xuXG4vKipcbiAqIFRoZXJlIGFyZSA0IGRpZmZlcmVudCBcImluaXRpYWxpemF0aW9uXCIgc3RlcHMgZm9yIE9SVC4gVGhleSBoYXBwZW4gaW4gZGlmZmVyZW50IHBsYWNlcyBhbmQgZGlmZmVyZW50IHRpbWUuXG4gKlxuICogMS4gSmF2YVNjcmlwdCBpbml0aWFsaXphdGlvbiBmb3Igb25ueHJ1bnRpbWUtY29tbW9uIGFuZCBvbm54cnVudGltZS13ZWIuXG4gKiAgICBUaGlzIGlzIHRoZSBmaXJzdCBpbml0aWFsaXphdGlvbiBzdGVwLiBJbiB0aGlzIHN0ZXAsIG9ubnhydW50aW1lLXdlYiBjYWxscyBvbm54cnVudGltZS1jb21tb24ncyByZWdpc3RlckJhY2tlbmQoKVxuICogZnVuY3Rpb24gbXVsdGlwbGUgdGltZXMgdG8gcmVnaXN0ZXIgYWxsIHRoZSBhdmFpbGFibGUgYmFja2VuZHMuIFRoZSBiYWNrZW5kIHJlZ2lzdHJhdGlvbiBpcyB2ZXJ5IGZhc3QuIEl0IG9ubHlcbiAqIHJlZ2lzdGVycyB0aGUgYmFja2VuZCBuYW1lIHdpdGggdGhlIHVuaW5pdGlhbGl6ZWQgYmFja2VuZCBvYmplY3QuIE5vIGhlYXZ5IGluaXRpYWxpemF0aW9uIGlzIGRvbmUgaW4gdGhpcyBzdGVwLlxuICogICAgUmVmZXIgdG8gd2ViL2xpYi9pbmRleC50cyBmb3IgdGhlIGJhY2tlbmQgcmVnaXN0cmF0aW9uLlxuICpcbiAqIDIuIFdlYkFzc2VtYmx5IGFydGlmYWN0IGluaXRpYWxpemF0aW9uLlxuICogICAgVGhpcyBoYXBwZW5zIHdoZW4gYW55IHJlZ2lzdGVyZWQgd2FzbSBiYWNrZW5kIGlzIHVzZWQgZm9yIHRoZSBmaXJzdCB0aW1lIChpZS4gYG9ydC5JbmZlcmVuY2VTZXNzaW9uLmNyZWF0ZSgpYCBvclxuICogYG9ydC5UcmFpbmluZ1Nlc3Npb24uY3JlYXRlKClgIGlzIGNhbGxlZCkuIEluIHRoaXMgc3RlcCwgb25ueHJ1bnRpbWUtd2ViIGRvZXMgdGhlIGZvbGxvd2luZ3M6XG4gKiAgICAgLSBjcmVhdGUgYSBwcm94eSB3b3JrZXIgYW5kIG1ha2Ugc3VyZSB0aGUgcHJveHkgd29ya2VyIGlzIHJlYWR5IHRvIHJlY2VpdmUgbWVzc2FnZXMsIGlmIHByb3h5IGlzIGVuYWJsZWQuXG4gKiAgICAgLSBwZXJmb3JtIGZlYXR1cmUgZGV0ZWN0aW9uLCBsb2NhdGUgY29ycmVjdCBXZWJBc3NlbWJseSBhcnRpZmFjdCBwYXRoIGFuZCBjYWxsIHRoZSBFbXNjcmlwdGVuIGdlbmVyYXRlZFxuICogSmF2YVNjcmlwdCBjb2RlIHRvIGluaXRpYWxpemUgdGhlIFdlYkFzc2VtYmx5IHJ1bnRpbWUuXG4gKiAgICAgICAgIC0gaWYgcHJveHkgaXMgZW5hYmxlZCwgdGhpcyBzdGVwIGhhcHBlbnMgaW4gdGhlIHByb3h5IHdvcmtlciB1c2luZyBtZXNzYWdlICdpbml0LXdhc20nLlxuICogICAgICAgICAtIGRvd25sb2FkaW5nIHRoZSAnb3J0LXdhc217Li4ufS53YXNtJyBmaWxlIGlzIGRvbmUgaW4gdGhpcyBzdGVwLlxuICogICAgICAgICAtIGlmIG11bHRpLXRocmVhZCBpcyBlbmFibGVkLCBvbmUgb3IgbW9yZSB3ZWJ3b3JrZXIgd2lsbCBiZSBjcmVhdGVkIHRvIGluaXRpYWxpemUgdGhlIFBUaHJlYWQgdGhyZWFkcG9vbC5cbiAqXG4gKiAzLiBPUlQgZW52aXJvbm1lbnQgaW5pdGlhbGl6YXRpb24uXG4gKiAgICBUaGlzIGhhcHBlbnMgYWZ0ZXIgc3RlcCAyLiBJbiB0aGlzIHN0ZXAsIG9ubnhydW50aW1lLXdlYiBwZXJmb3JtcyBPTk5YIFJ1bnRpbWUgZW52aXJvbm1lbnQgaW5pdGlhbGl6YXRpb24uXG4gKiBGdW5jdGlvbiBgX09ydEluaXQoKWAgaXMgY2FsbGVkIGluIHRoaXMgc3RlcC5cbiAqICAgICAtIGlmIHByb3h5IGlzIGVuYWJsZWQsIHRoaXMgc3RlcCBoYXBwZW5zIGluIHRoZSBwcm94eSB3b3JrZXIgdXNpbmcgbWVzc2FnZSAnaW5pdC1vcnQnLlxuICogICAgIC0gbG9nZ2luZyBsZXZlbCAob3J0LmVudi5sb2dMZXZlbCkgYW5kIHRocmVhZCBudW1iZXIgKG9ydC5lbnYud2FzbS5udW1UaHJlYWRzKSBhcmUgc2V0IGluIHRoaXMgc3RlcC5cbiAqXG4gKiA0LiBTZXNzaW9uIGluaXRpYWxpemF0aW9uLlxuICogICAgVGhpcyBoYXBwZW5zIHdoZW4gYG9ydC5JbmZlcmVuY2VTZXNzaW9uLmNyZWF0ZSgpYCBvciBgb3J0LlRyYWluaW5nU2Vzc2lvbi5jcmVhdGUoKWAgaXMgY2FsbGVkLiBVbmxpa2UgdGhlIGZpcnN0IDNcbiAqIHN0ZXBzICh0aGV5IG9ubHkgY2FsbGVkIG9uY2UpLCB0aGlzIHN0ZXAgd2lsbCBiZSBkb25lIGZvciBlYWNoIHNlc3Npb24uIEluIHRoaXMgc3RlcCwgb25ueHJ1bnRpbWUtd2ViIGRvZXMgdGhlXG4gKiBmb2xsb3dpbmdzOlxuICogICAgSWYgdGhlIHBhcmFtZXRlciBpcyBhIFVSTDpcbiAqICAgIC0gZG93bmxvYWQgdGhlIG1vZGVsIGRhdGEgZnJvbSB0aGUgVVJMLlxuICogICAgLSBjb3B5IHRoZSBtb2RlbCBkYXRhIHRvIHRoZSBXQVNNIGhlYXAuIChwcm94eTogJ2NvcHktZnJvbScpXG4gKiAgICAtIGRlcmVmZXJlbmNlIHRoZSBtb2RlbCBidWZmZXIuIFRoaXMgc3RlcCBhbGxvd3MgdGhlIG9yaWdpbmFsIEFycmF5QnVmZmVyIHRvIGJlIGdhcmJhZ2UgY29sbGVjdGVkLlxuICogICAgLSBjYWxsIGBfT3J0Q3JlYXRlU2Vzc2lvbigpYCB0byBjcmVhdGUgdGhlIHNlc3Npb24uIChwcm94eTogJ2NyZWF0ZScpXG4gKlxuICogICAgSWYgdGhlIHBhcmFtZXRlciBpcyBhIFVpbnQ4QXJyYXkgb2JqZWN0OlxuICogICAgLSBjb3B5IHRoZSBtb2RlbCBkYXRhIHRvIHRoZSBXQVNNIGhlYXAuIChwcm94eTogJ2NvcHktZnJvbScpXG4gKiAgICAtIGNhbGwgYF9PcnRDcmVhdGVTZXNzaW9uKClgIHRvIGNyZWF0ZSB0aGUgc2Vzc2lvbi4gKHByb3h5OiAnY3JlYXRlJylcbiAqXG4gKlxuICovXG5cbi8qKlxuICogaW5pdGlhbGl6ZSBPUlQgZW52aXJvbm1lbnQuXG4gKlxuICogQHBhcmFtIG51bVRocmVhZHMgU2V0R2xvYmFsSW50cmFPcE51bVRocmVhZHMobnVtVGhyZWFkcylcbiAqIEBwYXJhbSBsb2dnaW5nTGV2ZWwgQ3JlYXRlRW52KHN0YXRpY19jYXN0PE9ydExvZ2dpbmdMZXZlbD4obG9nZ2luZ19sZXZlbCkpXG4gKi9cbmNvbnN0IGluaXRPcnQgPSAobnVtVGhyZWFkczogbnVtYmVyLCBsb2dnaW5nTGV2ZWw6IG51bWJlcik6IHZvaWQgPT4ge1xuICBjb25zdCBlcnJvckNvZGUgPSBnZXRJbnN0YW5jZSgpLl9PcnRJbml0KG51bVRocmVhZHMsIGxvZ2dpbmdMZXZlbCk7XG4gIGlmIChlcnJvckNvZGUgIT09IDApIHtcbiAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBpbml0aWFsaXplIG9ubnhydW50aW1lLicpO1xuICB9XG59O1xuXG4vKipcbiAqIGludGlhbGl6ZSBydW50aW1lIGVudmlyb25tZW50LlxuICogQHBhcmFtIGVudiBwYXNzZWQgaW4gdGhlIGVudmlyb25tZW50IGNvbmZpZyBvYmplY3QuXG4gKi9cbmV4cG9ydCBjb25zdCBpbml0UnVudGltZSA9IGFzeW5jKGVudjogRW52KTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIC8vIGluaXQgT1JUXG4gIGluaXRPcnQoZW52Lndhc20ubnVtVGhyZWFkcyEsIGxvZ0xldmVsU3RyaW5nVG9FbnVtKGVudi5sb2dMZXZlbCkpO1xufTtcblxuLyoqXG4gKiBwZXJmb3JtIEVQIHNwZWNpZmljIGluaXRpYWxpemF0aW9uLlxuICpcbiAqIEBwYXJhbSBlbnZcbiAqIEBwYXJhbSBlcE5hbWVcbiAqL1xuZXhwb3J0IGNvbnN0IGluaXRFcCA9IGFzeW5jKGVudjogRW52LCBlcE5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUgJiYgZXBOYW1lID09PSAnd2ViZ3B1Jykge1xuICAgIC8vIHBlcmZvcm0gV2ViR1BVIGF2YWlsYWJpbGl0eSBjaGVja1xuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCAhbmF2aWdhdG9yLmdwdSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZWJHUFUgaXMgbm90IHN1cHBvcnRlZCBpbiBjdXJyZW50IGVudmlyb25tZW50Jyk7XG4gICAgfVxuICAgIGNvbnN0IGFkYXB0ZXIgPSBhd2FpdCBuYXZpZ2F0b3IuZ3B1LnJlcXVlc3RBZGFwdGVyKCk7XG4gICAgaWYgKCFhZGFwdGVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0ZhaWxlZCB0byBnZXQgR1BVIGFkYXB0ZXIuIFlvdSBtYXkgbmVlZCB0byBlbmFibGUgZmxhZyBcIi0tZW5hYmxlLXVuc2FmZS13ZWJncHVcIiBpZiB5b3UgYXJlIHVzaW5nIENocm9tZS4nKTtcbiAgICB9XG5cbiAgICBpZiAoIWVudi53YXNtLnNpbWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnTm90IHN1cHBvcnRlZCBmb3IgV2ViR1BVPU9OIGFuZCBTSU1EPU9GRi4gUGxlYXNlIHNldCBgZW52Lndhc20uc2ltZGAgdG8gdHJ1ZSB3aGVuIHVzaW5nIGB3ZWJncHVgIEVQJyk7XG4gICAgfVxuXG4gICAgLy8gaW5pdCBKU0VQIGlmIGF2YWlsYWJsZVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHMsIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbiAgICBjb25zdCBpbml0SnNlcCA9IHJlcXVpcmUoJy4vanNlcC9pbml0JykuaW5pdDtcbiAgICBhd2FpdCBpbml0SnNlcChnZXRJbnN0YW5jZSgpLCBlbnYsIGFkYXB0ZXIpO1xuICB9XG59O1xuXG4vLyAjZW5kcmVnaW9uIEluaXRpYWxpemF0aW9uc1xuXG4vKipcbiAqIHZhbGlkIGRhdGEgbG9jYXRpb25zIGZvciBpbnB1dC9vdXRwdXQgdGVuc29ycy5cbiAqL1xudHlwZSBTdXBwb3J0ZWRUZW5zb3JEYXRhTG9jYXRpb25Gb3JJbnB1dE91dHB1dCA9ICdjcHUnfCdjcHUtcGlubmVkJ3wnZ3B1LWJ1ZmZlcic7XG5cbnR5cGUgSU9CaW5kaW5nU3RhdGUgPSB7XG4gIC8qKlxuICAgKiB0aGUgaGFuZGxlIG9mIElPIGJpbmRpbmcuXG4gICAqL1xuICByZWFkb25seSBoYW5kbGU6IG51bWJlcjtcblxuICAvKipcbiAgICogdGhlIHByZWZlcnJlZCBsb2NhdGlvbiBmb3IgZWFjaCBvdXRwdXQgdGVuc29yLlxuICAgKlxuICAgKiB2YWx1ZSBpcyBvbmUgb2YgJ2NwdScsICdjcHUtcGlubmVkJywgJ2dwdS1idWZmZXInLlxuICAgKi9cbiAgcmVhZG9ubHkgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zOiByZWFkb25seSBTdXBwb3J0ZWRUZW5zb3JEYXRhTG9jYXRpb25Gb3JJbnB1dE91dHB1dFtdO1xuXG4gIC8qKlxuICAgKiBlbnVtIHZhbHVlIG9mIHRoZSBwcmVmZXJyZWQgbG9jYXRpb24gZm9yIGVhY2ggb3V0cHV0IHRlbnNvci5cbiAgICovXG4gIHJlYWRvbmx5IG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWQ6IHJlYWRvbmx5IG51bWJlcltdO1xufTtcblxuLyoqXG4gKiAgdHVwbGUgZWxlbWVudHMgYXJlOiBJbmZlcmVuY2VTZXNzaW9uIElEOyBpbnB1dE5hbWVzVVRGOEVuY29kZWQ7IG91dHB1dE5hbWVzVVRGOEVuY29kZWQ7IGJpbmRpbmdTdGF0ZVxuICovXG50eXBlIFNlc3Npb25NZXRhZGF0YSA9IFtcbiAgaW5mZXJlbmNlU2Vzc2lvbklkOiBudW1iZXIsIGlucHV0TmFtZXNVVEY4RW5jb2RlZDogbnVtYmVyW10sIG91dHB1dE5hbWVzVVRGOEVuY29kZWQ6IG51bWJlcltdLFxuICBiaW5kaW5nU3RhdGU6IElPQmluZGluZ1N0YXRlfG51bGxcbl07XG5cbmNvbnN0IGFjdGl2ZVNlc3Npb25zID0gbmV3IE1hcDxudW1iZXIsIFNlc3Npb25NZXRhZGF0YT4oKTtcblxuLyoqXG4gKiBnZXQgdGhlIGlucHV0L291dHB1dCBjb3VudCBvZiB0aGUgc2Vzc2lvbi5cbiAqIEBwYXJhbSBzZXNzaW9uSGFuZGxlIHRoZSBoYW5kbGUgcmVwcmVzZW50aW5nIHRoZSBzZXNzaW9uLiBzaG91bGQgYmUgbm9uLXplcm8uXG4gKiBAcmV0dXJucyBhIHR1cGxlIGluY2x1ZGluZyAyIG51bWJlcnMsIHJlcHJlc2VudGluZyB0aGUgaW5wdXQgY291bnQgYW5kIG91dHB1dCBjb3VudC5cbiAqL1xuY29uc3QgZ2V0U2Vzc2lvbklucHV0T3V0cHV0Q291bnQgPSAoc2Vzc2lvbkhhbmRsZTogbnVtYmVyKTogW251bWJlciwgbnVtYmVyXSA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBjb25zdCBzdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgZGF0YU9mZnNldCA9IHdhc20uc3RhY2tBbGxvYyg4KTtcbiAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtLl9PcnRHZXRJbnB1dE91dHB1dENvdW50KHNlc3Npb25IYW5kbGUsIGRhdGFPZmZzZXQsIGRhdGFPZmZzZXQgKyA0KTtcbiAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBnZXQgc2Vzc2lvbiBpbnB1dC9vdXRwdXQgY291bnQuJyk7XG4gICAgfVxuICAgIHJldHVybiBbd2FzbS5IRUFQMzJbZGF0YU9mZnNldCAvIDRdLCB3YXNtLkhFQVAzMltkYXRhT2Zmc2V0IC8gNCArIDFdXTtcbiAgfSBmaW5hbGx5IHtcbiAgICB3YXNtLnN0YWNrUmVzdG9yZShzdGFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogYWxsb2NhdGUgdGhlIG1lbW9yeSBhbmQgbWVtY3B5IHRoZSBleHRlcm5hbCBidWZmZXIuXG4gKlxuICogQHBhcmFtIG1vZGVsIC0gdGhlIGV4dGVybmFsIGJ1ZmZlciBjb250YWluaW5nIHRoZSBtb2RlbCBkYXRhLiBNdXN0IG5vdCBiZSB0aGUgc2FtZSBidWZmZXIgYXMgdGhlIFdBU00gaGVhcC5cbiAqIEByZXR1cm5zIGEgMi1lbGVtZW50cyB0dXBsZSAtIHRoZSBwb2ludGVyIGFuZCBzaXplIG9mIHRoZSBhbGxvY2F0ZWQgYnVmZmVyXG4gKi9cbmV4cG9ydCBjb25zdCBjb3B5RnJvbUV4dGVybmFsQnVmZmVyID0gKG1vZGVsOiBVaW50OEFycmF5KTogW251bWJlciwgbnVtYmVyXSA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBjb25zdCBtb2RlbERhdGFPZmZzZXQgPSB3YXNtLl9tYWxsb2MobW9kZWwuYnl0ZUxlbmd0aCk7XG4gIGlmIChtb2RlbERhdGFPZmZzZXQgPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGNyZWF0ZSBhIHNlc3Npb24uIGZhaWxlZCB0byBhbGxvY2F0ZSBhIGJ1ZmZlciBvZiBzaXplICR7bW9kZWwuYnl0ZUxlbmd0aH0uYCk7XG4gIH1cbiAgd2FzbS5IRUFQVTguc2V0KG1vZGVsLCBtb2RlbERhdGFPZmZzZXQpO1xuICByZXR1cm4gW21vZGVsRGF0YU9mZnNldCwgbW9kZWwuYnl0ZUxlbmd0aF07XG59O1xuXG4vKipcbiAqIGNyZWF0ZSBhbiBpbmZlcmVuY2Ugc2Vzc2lvbiBmcm9tIGEgbW9kZWwgZGF0YSBidWZmZXIuXG4gKlxuICogQHBhcmFtIG1vZGVsRGF0YSAtIGVpdGhlciBhIFVpbnQ4QXJyYXkgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgbW9kZWwgZGF0YSwgb3IgYSAyLWVsZW1lbnRzIHR1cGxlIGNvbnRhaW5pbmcgdGhlXG4gKiAgICAgcG9pbnRlciBhbmQgc2l6ZSBvZiB0aGUgbW9kZWwgZGF0YSBidWZmZXIuXG4gKiBAcGFyYW0gb3B0aW9ucyBhbiBvcHRpb25hbCBzZXNzaW9uIG9wdGlvbnMgb2JqZWN0LlxuICogQHJldHVybnMgYSAzLWVsZW1lbnRzIHR1cGxlIGNvbnRhaW5pbmcgW3Nlc3Npb24gaGFuZGxlLCBpbnB1dCBuYW1lcywgb3V0cHV0IG5hbWVzXVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlU2Vzc2lvbiA9XG4gICAgKG1vZGVsRGF0YTogVWludDhBcnJheXxTZXJpYWxpemFibGVJbnRlcm5hbEJ1ZmZlcixcbiAgICAgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBTZXJpYWxpemFibGVTZXNzaW9uTWV0YWRhdGEgPT4ge1xuICAgICAgbGV0IG1vZGVsRGF0YU9mZnNldDogbnVtYmVyLCBtb2RlbERhdGFMZW5ndGg6IG51bWJlcjtcbiAgICAgIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShtb2RlbERhdGEpKSB7XG4gICAgICAgIC8vIGlmIG1vZGVsIGRhdGEgaXMgYW4gYXJyYXksIGl0IG11c3QgYmUgYSAyLWVsZW1lbnRzIHR1cGxlIGNvbnRhaW5pbmcgdGhlIHBvaW50ZXIgYW5kIHNpemUgb2YgdGhlIG1vZGVsIGRhdGFcbiAgICAgICAgW21vZGVsRGF0YU9mZnNldCwgbW9kZWxEYXRhTGVuZ3RoXSA9IG1vZGVsRGF0YTtcbiAgICAgIH0gZWxzZSBpZiAobW9kZWxEYXRhLmJ1ZmZlciA9PT0gd2FzbS5IRUFQVTguYnVmZmVyKSB7XG4gICAgICAgIC8vIGlmIG1vZGVsIGRhdGEgdXNlcyB0aGUgc2FtZSBidWZmZXIgYXMgdGhlIFdBU00gaGVhcCwgd2UgZG9uJ3QgbmVlZCB0byBjb3B5IGl0LlxuICAgICAgICBbbW9kZWxEYXRhT2Zmc2V0LCBtb2RlbERhdGFMZW5ndGhdID0gW21vZGVsRGF0YS5ieXRlT2Zmc2V0LCBtb2RlbERhdGEuYnl0ZUxlbmd0aF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBvdGhlcndpc2UsIGNvcHkgdGhlIG1vZGVsIGRhdGEgdG8gdGhlIFdBU00gaGVhcC5cbiAgICAgICAgW21vZGVsRGF0YU9mZnNldCwgbW9kZWxEYXRhTGVuZ3RoXSA9IGNvcHlGcm9tRXh0ZXJuYWxCdWZmZXIobW9kZWxEYXRhKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHNlc3Npb25IYW5kbGUgPSAwO1xuICAgICAgbGV0IHNlc3Npb25PcHRpb25zSGFuZGxlID0gMDtcbiAgICAgIGxldCBpb0JpbmRpbmdIYW5kbGUgPSAwO1xuICAgICAgbGV0IGFsbG9jczogbnVtYmVyW10gPSBbXTtcbiAgICAgIGNvbnN0IGlucHV0TmFtZXNVVEY4RW5jb2RlZCA9IFtdO1xuICAgICAgY29uc3Qgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZCA9IFtdO1xuXG4gICAgICB0cnkge1xuICAgICAgICBbc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGFsbG9jc10gPSBzZXRTZXNzaW9uT3B0aW9ucyhvcHRpb25zKTtcblxuICAgICAgICBzZXNzaW9uSGFuZGxlID0gd2FzbS5fT3J0Q3JlYXRlU2Vzc2lvbihtb2RlbERhdGFPZmZzZXQsIG1vZGVsRGF0YUxlbmd0aCwgc2Vzc2lvbk9wdGlvbnNIYW5kbGUpO1xuICAgICAgICBpZiAoc2Vzc2lvbkhhbmRsZSA9PT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKCdDYW5cXCd0IGNyZWF0ZSBhIHNlc3Npb24uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBbaW5wdXRDb3VudCwgb3V0cHV0Q291bnRdID0gZ2V0U2Vzc2lvbklucHV0T3V0cHV0Q291bnQoc2Vzc2lvbkhhbmRsZSk7XG5cbiAgICAgICAgY29uc3QgaW5wdXROYW1lcyA9IFtdO1xuICAgICAgICBjb25zdCBvdXRwdXROYW1lcyA9IFtdO1xuICAgICAgICBjb25zdCBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnM6IFN1cHBvcnRlZFRlbnNvckRhdGFMb2NhdGlvbkZvcklucHV0T3V0cHV0W10gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgICAgICBjb25zdCBuYW1lID0gd2FzbS5fT3J0R2V0SW5wdXROYW1lKHNlc3Npb25IYW5kbGUsIGkpO1xuICAgICAgICAgIGlmIChuYW1lID09PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBnZXQgYW4gaW5wdXQgbmFtZS4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5wdXROYW1lc1VURjhFbmNvZGVkLnB1c2gobmFtZSk7XG4gICAgICAgICAgaW5wdXROYW1lcy5wdXNoKHdhc20uVVRGOFRvU3RyaW5nKG5hbWUpKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgICAgICBjb25zdCBuYW1lID0gd2FzbS5fT3J0R2V0T3V0cHV0TmFtZShzZXNzaW9uSGFuZGxlLCBpKTtcbiAgICAgICAgICBpZiAobmFtZSA9PT0gMCkge1xuICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoJ0NhblxcJ3QgZ2V0IGFuIG91dHB1dCBuYW1lLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXRwdXROYW1lc1VURjhFbmNvZGVkLnB1c2gobmFtZSk7XG4gICAgICAgICAgY29uc3QgbmFtZVN0cmluZyA9IHdhc20uVVRGOFRvU3RyaW5nKG5hbWUpO1xuICAgICAgICAgIG91dHB1dE5hbWVzLnB1c2gobmFtZVN0cmluZyk7XG5cbiAgICAgICAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdHlwZW9mIG9wdGlvbnM/LnByZWZlcnJlZE91dHB1dExvY2F0aW9uID09PSAnc3RyaW5nJyA/XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wcmVmZXJyZWRPdXRwdXRMb2NhdGlvbiA6XG4gICAgICAgICAgICAgICAgb3B0aW9ucz8ucHJlZmVycmVkT3V0cHV0TG9jYXRpb24/LltuYW1lU3RyaW5nXSA/PyAnY3B1JztcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbiAhPT0gJ2NwdScgJiYgbG9jYXRpb24gIT09ICdjcHUtcGlubmVkJyAmJiBsb2NhdGlvbiAhPT0gJ2dwdS1idWZmZXInKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm90IHN1cHBvcnRlZCBwcmVmZXJyZWQgb3V0cHV0IGxvY2F0aW9uOiAke2xvY2F0aW9ufS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dHB1dFByZWZlcnJlZExvY2F0aW9ucy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1c2UgSU8gYmluZGluZyBvbmx5IHdoZW4gYXQgbGVhc3Qgb25lIG91dHB1dCBpcyBwcmVmZmVyZWQgdG8gYmUgb24gR1BVLlxuICAgICAgICBsZXQgYmluZGluZ1N0YXRlOiBJT0JpbmRpbmdTdGF0ZXxudWxsID0gbnVsbDtcbiAgICAgICAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR1BVICYmIG91dHB1dFByZWZlcnJlZExvY2F0aW9ucy5zb21lKGwgPT4gbCA9PT0gJ2dwdS1idWZmZXInKSkge1xuICAgICAgICAgIGlvQmluZGluZ0hhbmRsZSA9IHdhc20uX09ydENyZWF0ZUJpbmRpbmcoc2Vzc2lvbkhhbmRsZSk7XG4gICAgICAgICAgaWYgKGlvQmluZGluZ0hhbmRsZSA9PT0gMCkge1xuICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoJ0NhblxcJ3QgY3JlYXRlIElPIGJpbmRpbmcuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYmluZGluZ1N0YXRlID0ge1xuICAgICAgICAgICAgaGFuZGxlOiBpb0JpbmRpbmdIYW5kbGUsXG4gICAgICAgICAgICBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMsXG4gICAgICAgICAgICBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnNFbmNvZGVkOiBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMubWFwKGwgPT4gZGF0YUxvY2F0aW9uU3RyaW5nVG9FbnVtKGwpKSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgYWN0aXZlU2Vzc2lvbnMuc2V0KHNlc3Npb25IYW5kbGUsIFtzZXNzaW9uSGFuZGxlLCBpbnB1dE5hbWVzVVRGOEVuY29kZWQsIG91dHB1dE5hbWVzVVRGOEVuY29kZWQsIGJpbmRpbmdTdGF0ZV0pO1xuICAgICAgICByZXR1cm4gW3Nlc3Npb25IYW5kbGUsIGlucHV0TmFtZXMsIG91dHB1dE5hbWVzXTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaW5wdXROYW1lc1VURjhFbmNvZGVkLmZvckVhY2goYnVmID0+IHdhc20uX09ydEZyZWUoYnVmKSk7XG4gICAgICAgIG91dHB1dE5hbWVzVVRGOEVuY29kZWQuZm9yRWFjaChidWYgPT4gd2FzbS5fT3J0RnJlZShidWYpKTtcblxuICAgICAgICBpZiAoaW9CaW5kaW5nSGFuZGxlICE9PSAwKSB7XG4gICAgICAgICAgd2FzbS5fT3J0UmVsZWFzZUJpbmRpbmcoaW9CaW5kaW5nSGFuZGxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXNzaW9uSGFuZGxlICE9PSAwKSB7XG4gICAgICAgICAgd2FzbS5fT3J0UmVsZWFzZVNlc3Npb24oc2Vzc2lvbkhhbmRsZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHdhc20uX2ZyZWUobW9kZWxEYXRhT2Zmc2V0KTtcbiAgICAgICAgaWYgKHNlc3Npb25PcHRpb25zSGFuZGxlICE9PSAwKSB7XG4gICAgICAgICAgd2FzbS5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zKHNlc3Npb25PcHRpb25zSGFuZGxlKTtcbiAgICAgICAgfVxuICAgICAgICBhbGxvY3MuZm9yRWFjaChhbGxvYyA9PiB3YXNtLl9mcmVlKGFsbG9jKSk7XG4gICAgICB9XG4gICAgfTtcblxuZXhwb3J0IGNvbnN0IHJlbGVhc2VTZXNzaW9uID0gKHNlc3Npb25JZDogbnVtYmVyKTogdm9pZCA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBjb25zdCBzZXNzaW9uID0gYWN0aXZlU2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7XG4gIGlmICghc2Vzc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IHJlbGVhc2Ugc2Vzc2lvbi4gaW52YWxpZCBzZXNzaW9uIGlkOiAke3Nlc3Npb25JZH1gKTtcbiAgfVxuICBjb25zdCBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lc1VURjhFbmNvZGVkLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkLCBpb0JpbmRpbmdTdGF0ZV0gPSBzZXNzaW9uO1xuXG4gIGlmIChpb0JpbmRpbmdTdGF0ZSkge1xuICAgIHdhc20uX09ydFJlbGVhc2VCaW5kaW5nKGlvQmluZGluZ1N0YXRlLmhhbmRsZSk7XG4gIH1cblxuICB3YXNtLmpzZXBVbnJlZ2lzdGVyQnVmZmVycz8uKHNlc3Npb25JZCk7XG5cbiAgaW5wdXROYW1lc1VURjhFbmNvZGVkLmZvckVhY2goYnVmID0+IHdhc20uX09ydEZyZWUoYnVmKSk7XG4gIG91dHB1dE5hbWVzVVRGOEVuY29kZWQuZm9yRWFjaChidWYgPT4gd2FzbS5fT3J0RnJlZShidWYpKTtcbiAgd2FzbS5fT3J0UmVsZWFzZVNlc3Npb24oc2Vzc2lvbkhhbmRsZSk7XG4gIGFjdGl2ZVNlc3Npb25zLmRlbGV0ZShzZXNzaW9uSWQpO1xufTtcblxuZXhwb3J0IGNvbnN0IHByZXBhcmVJbnB1dE91dHB1dFRlbnNvciA9XG4gICAgKHRlbnNvcjogVGVuc29yTWV0YWRhdGF8bnVsbCwgdGVuc29ySGFuZGxlczogbnVtYmVyW10sIGFsbG9jczogbnVtYmVyW10sIHNlc3Npb25JZDogbnVtYmVyLCBpbmRleDogbnVtYmVyKTpcbiAgICAgICAgdm9pZCA9PiB7XG4gICAgICAgICAgaWYgKCF0ZW5zb3IpIHtcbiAgICAgICAgICAgIHRlbnNvckhhbmRsZXMucHVzaCgwKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcblxuICAgICAgICAgIGNvbnN0IGRhdGFUeXBlID0gdGVuc29yWzBdO1xuICAgICAgICAgIGNvbnN0IGRpbXMgPSB0ZW5zb3JbMV07XG4gICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0ZW5zb3JbM107XG5cbiAgICAgICAgICBsZXQgcmF3RGF0YTogbnVtYmVyO1xuICAgICAgICAgIGxldCBkYXRhQnl0ZUxlbmd0aDogbnVtYmVyO1xuXG4gICAgICAgICAgaWYgKGRhdGFUeXBlID09PSAnc3RyaW5nJyAmJiBsb2NhdGlvbiA9PT0gJ2dwdS1idWZmZXInKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N0cmluZyB0ZW5zb3IgaXMgbm90IHN1cHBvcnRlZCBvbiBHUFUuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGxvY2F0aW9uID09PSAnZ3B1LWJ1ZmZlcicpIHtcbiAgICAgICAgICAgIGNvbnN0IGdwdUJ1ZmZlciA9IHRlbnNvclsyXS5ncHVCdWZmZXIgYXMgR1BVQnVmZmVyO1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudFNpemVJbkJ5dGVzID0gZ2V0VGVuc29yRWxlbWVudFNpemUodGVuc29yRGF0YVR5cGVTdHJpbmdUb0VudW0oZGF0YVR5cGUpKSE7XG4gICAgICAgICAgICBkYXRhQnl0ZUxlbmd0aCA9IGRpbXMucmVkdWNlKChhLCBiKSA9PiBhICogYiwgMSkgKiBlbGVtZW50U2l6ZUluQnl0ZXM7XG4gICAgICAgICAgICByYXdEYXRhID0gd2FzbS5qc2VwUmVnaXN0ZXJCdWZmZXIoc2Vzc2lvbklkLCBpbmRleCwgZ3B1QnVmZmVyLCBkYXRhQnl0ZUxlbmd0aCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0ZW5zb3JbMl07XG5cbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgICAgICAgIC8vIHN0cmluZyB0ZW5zb3JcbiAgICAgICAgICAgICAgZGF0YUJ5dGVMZW5ndGggPSA0ICogZGF0YS5sZW5ndGg7XG4gICAgICAgICAgICAgIHJhd0RhdGEgPSB3YXNtLl9tYWxsb2MoZGF0YUJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICBhbGxvY3MucHVzaChyYXdEYXRhKTtcbiAgICAgICAgICAgICAgbGV0IGRhdGFJbmRleCA9IHJhd0RhdGEgLyA0O1xuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbaV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGB0ZW5zb3IgZGF0YSBhdCBpbmRleCAke2l9IGlzIG5vdCBhIHN0cmluZ2ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3YXNtLkhFQVBVMzJbZGF0YUluZGV4KytdID0gYWxsb2NXYXNtU3RyaW5nKGRhdGFbaV0sIGFsbG9jcyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGRhdGFCeXRlTGVuZ3RoID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgICByYXdEYXRhID0gd2FzbS5fbWFsbG9jKGRhdGFCeXRlTGVuZ3RoKTtcbiAgICAgICAgICAgICAgYWxsb2NzLnB1c2gocmF3RGF0YSk7XG4gICAgICAgICAgICAgIHdhc20uSEVBUFU4LnNldChuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhQnl0ZUxlbmd0aCksIHJhd0RhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHN0YWNrID0gd2FzbS5zdGFja1NhdmUoKTtcbiAgICAgICAgICBjb25zdCBkaW1zT2Zmc2V0ID0gd2FzbS5zdGFja0FsbG9jKDQgKiBkaW1zLmxlbmd0aCk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBkaW1JbmRleCA9IGRpbXNPZmZzZXQgLyA0O1xuICAgICAgICAgICAgZGltcy5mb3JFYWNoKGQgPT4gd2FzbS5IRUFQMzJbZGltSW5kZXgrK10gPSBkKTtcbiAgICAgICAgICAgIGNvbnN0IHRlbnNvciA9IHdhc20uX09ydENyZWF0ZVRlbnNvcihcbiAgICAgICAgICAgICAgICB0ZW5zb3JEYXRhVHlwZVN0cmluZ1RvRW51bShkYXRhVHlwZSksIHJhd0RhdGEsIGRhdGFCeXRlTGVuZ3RoLCBkaW1zT2Zmc2V0LCBkaW1zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBkYXRhTG9jYXRpb25TdHJpbmdUb0VudW0obG9jYXRpb24pKTtcbiAgICAgICAgICAgIGlmICh0ZW5zb3IgPT09IDApIHtcbiAgICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IGNyZWF0ZSB0ZW5zb3IgZm9yIGlucHV0L291dHB1dC4gc2Vzc2lvbj0ke3Nlc3Npb25JZH0sIGluZGV4PSR7aW5kZXh9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVuc29ySGFuZGxlcy5wdXNoKHRlbnNvcik7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHdhc20uc3RhY2tSZXN0b3JlKHN0YWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbi8qKlxuICogcGVyZm9ybSBpbmZlcmVuY2UgcnVuXG4gKi9cbmV4cG9ydCBjb25zdCBydW4gPSBhc3luYyhcbiAgICBzZXNzaW9uSWQ6IG51bWJlciwgaW5wdXRJbmRpY2VzOiBudW1iZXJbXSwgaW5wdXRUZW5zb3JzOiBUZW5zb3JNZXRhZGF0YVtdLCBvdXRwdXRJbmRpY2VzOiBudW1iZXJbXSxcbiAgICBvdXRwdXRUZW5zb3JzOiBBcnJheTxUZW5zb3JNZXRhZGF0YXxudWxsPiwgb3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxUZW5zb3JNZXRhZGF0YVtdPiA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBjb25zdCBzZXNzaW9uID0gYWN0aXZlU2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7XG4gIGlmICghc2Vzc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IHJ1biBpbmZlcmVuY2UuIGludmFsaWQgc2Vzc2lvbiBpZDogJHtzZXNzaW9uSWR9YCk7XG4gIH1cbiAgY29uc3QgW3Nlc3Npb25IYW5kbGUsIGlucHV0TmFtZXNVVEY4RW5jb2RlZCwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZCwgaW9CaW5kaW5nU3RhdGVdID0gc2Vzc2lvbjtcblxuICBjb25zdCBpbnB1dENvdW50ID0gaW5wdXRJbmRpY2VzLmxlbmd0aDtcbiAgY29uc3Qgb3V0cHV0Q291bnQgPSBvdXRwdXRJbmRpY2VzLmxlbmd0aDtcblxuICBsZXQgcnVuT3B0aW9uc0hhbmRsZSA9IDA7XG4gIGxldCBydW5PcHRpb25zQWxsb2NzOiBudW1iZXJbXSA9IFtdO1xuXG4gIGNvbnN0IGlucHV0VGVuc29ySGFuZGxlczogbnVtYmVyW10gPSBbXTtcbiAgY29uc3Qgb3V0cHV0VGVuc29ySGFuZGxlczogbnVtYmVyW10gPSBbXTtcbiAgY29uc3QgaW5wdXRPdXRwdXRBbGxvY3M6IG51bWJlcltdID0gW107XG5cbiAgY29uc3QgYmVmb3JlUnVuU3RhY2sgPSB3YXNtLnN0YWNrU2F2ZSgpO1xuICBjb25zdCBpbnB1dFZhbHVlc09mZnNldCA9IHdhc20uc3RhY2tBbGxvYyhpbnB1dENvdW50ICogNCk7XG4gIGNvbnN0IGlucHV0TmFtZXNPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2MoaW5wdXRDb3VudCAqIDQpO1xuICBjb25zdCBvdXRwdXRWYWx1ZXNPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2Mob3V0cHV0Q291bnQgKiA0KTtcbiAgY29uc3Qgb3V0cHV0TmFtZXNPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2Mob3V0cHV0Q291bnQgKiA0KTtcblxuICB0cnkge1xuICAgIFtydW5PcHRpb25zSGFuZGxlLCBydW5PcHRpb25zQWxsb2NzXSA9IHNldFJ1bk9wdGlvbnMob3B0aW9ucyk7XG5cbiAgICAvLyBjcmVhdGUgaW5wdXQgdGVuc29yc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRDb3VudDsgaSsrKSB7XG4gICAgICBwcmVwYXJlSW5wdXRPdXRwdXRUZW5zb3IoaW5wdXRUZW5zb3JzW2ldLCBpbnB1dFRlbnNvckhhbmRsZXMsIGlucHV0T3V0cHV0QWxsb2NzLCBzZXNzaW9uSWQsIGlucHV0SW5kaWNlc1tpXSk7XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIG91dHB1dCB0ZW5zb3JzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICBwcmVwYXJlSW5wdXRPdXRwdXRUZW5zb3IoXG4gICAgICAgICAgb3V0cHV0VGVuc29yc1tpXSwgb3V0cHV0VGVuc29ySGFuZGxlcywgaW5wdXRPdXRwdXRBbGxvY3MsIHNlc3Npb25JZCwgaW5wdXRDb3VudCArIG91dHB1dEluZGljZXNbaV0pO1xuICAgIH1cblxuICAgIGxldCBpbnB1dFZhbHVlc0luZGV4ID0gaW5wdXRWYWx1ZXNPZmZzZXQgLyA0O1xuICAgIGxldCBpbnB1dE5hbWVzSW5kZXggPSBpbnB1dE5hbWVzT2Zmc2V0IC8gNDtcbiAgICBsZXQgb3V0cHV0VmFsdWVzSW5kZXggPSBvdXRwdXRWYWx1ZXNPZmZzZXQgLyA0O1xuICAgIGxldCBvdXRwdXROYW1lc0luZGV4ID0gb3V0cHV0TmFtZXNPZmZzZXQgLyA0O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRDb3VudDsgaSsrKSB7XG4gICAgICB3YXNtLkhFQVBVMzJbaW5wdXRWYWx1ZXNJbmRleCsrXSA9IGlucHV0VGVuc29ySGFuZGxlc1tpXTtcbiAgICAgIHdhc20uSEVBUFUzMltpbnB1dE5hbWVzSW5kZXgrK10gPSBpbnB1dE5hbWVzVVRGOEVuY29kZWRbaW5wdXRJbmRpY2VzW2ldXTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICB3YXNtLkhFQVBVMzJbb3V0cHV0VmFsdWVzSW5kZXgrK10gPSBvdXRwdXRUZW5zb3JIYW5kbGVzW2ldO1xuICAgICAgd2FzbS5IRUFQVTMyW291dHB1dE5hbWVzSW5kZXgrK10gPSBvdXRwdXROYW1lc1VURjhFbmNvZGVkW291dHB1dEluZGljZXNbaV1dO1xuICAgIH1cblxuICAgIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dFQkdQVSAmJiBpb0JpbmRpbmdTdGF0ZSkge1xuICAgICAgY29uc3Qge2hhbmRsZSwgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zLCBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnNFbmNvZGVkfSA9IGlvQmluZGluZ1N0YXRlO1xuXG4gICAgICBpZiAoaW5wdXROYW1lc1VURjhFbmNvZGVkLmxlbmd0aCAhPT0gaW5wdXRDb3VudCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGlucHV0IGNvdW50IGZyb20gZmVlZHMgKCR7XG4gICAgICAgICAgICBpbnB1dENvdW50fSkgaXMgZXhwZWN0ZWQgdG8gYmUgYWx3YXlzIGVxdWFsIHRvIG1vZGVsJ3MgaW5wdXQgY291bnQgKCR7aW5wdXROYW1lc1VURjhFbmNvZGVkLmxlbmd0aH0pLmApO1xuICAgICAgfVxuXG4gICAgICAvLyBwcm9jZXNzIGlucHV0c1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBpbnB1dEluZGljZXNbaV07XG4gICAgICAgIGNvbnN0IGVycm9yQ29kZSA9IGF3YWl0IHdhc20uX09ydEJpbmRJbnB1dChoYW5kbGUsIGlucHV0TmFtZXNVVEY4RW5jb2RlZFtpbmRleF0sIGlucHV0VGVuc29ySGFuZGxlc1tpXSk7XG4gICAgICAgIGlmIChlcnJvckNvZGUgIT09IDApIHtcbiAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgYmluZCBpbnB1dFske2l9XSBmb3Igc2Vzc2lvbj0ke3Nlc3Npb25JZH0uYCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gcHJvY2VzcyBwcmUtYWxsb2NhdGVkIG91dHB1dHNcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgICBjb25zdCBpbmRleCA9IG91dHB1dEluZGljZXNbaV07XG4gICAgICAgIGNvbnN0IGxvY2F0aW9uID0gb3V0cHV0VGVuc29yc1tpXT8uWzNdOyAgLy8gdW5kZWZpbmVkIG1lYW5zIG91dHB1dCBpcyBub3QgcHJlLWFsbG9jYXRlZC5cblxuICAgICAgICBpZiAobG9jYXRpb24pIHtcbiAgICAgICAgICAvLyBvdXRwdXQgaXMgcHJlLWFsbG9jYXRlZC4gYmluZCB0aGUgdGVuc29yLlxuICAgICAgICAgIGNvbnN0IGVycm9yQ29kZSA9IHdhc20uX09ydEJpbmRPdXRwdXQoaGFuZGxlLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkW2luZGV4XSwgb3V0cHV0VGVuc29ySGFuZGxlc1tpXSwgMCk7XG4gICAgICAgICAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IGJpbmQgcHJlLWFsbG9jYXRlZCBvdXRwdXRbJHtpfV0gZm9yIHNlc3Npb249JHtzZXNzaW9uSWR9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBvdXRwdXQgaXMgbm90IHByZS1hbGxvY2F0ZWQuIHJlc2V0IHByZWZlcnJlZCBsb2NhdGlvbi5cbiAgICAgICAgICBjb25zdCBlcnJvckNvZGUgPVxuICAgICAgICAgICAgICB3YXNtLl9PcnRCaW5kT3V0cHV0KGhhbmRsZSwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZFtpbmRleF0sIDAsIG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWRbaW5kZXhdKTtcbiAgICAgICAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgYmluZCBvdXRwdXRbJHtpfV0gdG8gJHtvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnNbaV19IGZvciBzZXNzaW9uPSR7c2Vzc2lvbklkfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgZXJyb3JDb2RlOiBudW1iZXI7XG5cbiAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUgJiYgaW9CaW5kaW5nU3RhdGUpIHtcbiAgICAgIGVycm9yQ29kZSA9IGF3YWl0IHdhc20uX09ydFJ1bldpdGhCaW5kaW5nKFxuICAgICAgICAgIHNlc3Npb25IYW5kbGUsIGlvQmluZGluZ1N0YXRlLmhhbmRsZSwgb3V0cHV0Q291bnQsIG91dHB1dFZhbHVlc09mZnNldCwgcnVuT3B0aW9uc0hhbmRsZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVycm9yQ29kZSA9IGF3YWl0IHdhc20uX09ydFJ1bihcbiAgICAgICAgICBzZXNzaW9uSGFuZGxlLCBpbnB1dE5hbWVzT2Zmc2V0LCBpbnB1dFZhbHVlc09mZnNldCwgaW5wdXRDb3VudCwgb3V0cHV0TmFtZXNPZmZzZXQsIG91dHB1dENvdW50LFxuICAgICAgICAgIG91dHB1dFZhbHVlc09mZnNldCwgcnVuT3B0aW9uc0hhbmRsZSk7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgY2hlY2tMYXN0RXJyb3IoJ2ZhaWxlZCB0byBjYWxsIE9ydFJ1bigpLicpO1xuICAgIH1cblxuICAgIGNvbnN0IG91dHB1dDogVGVuc29yTWV0YWRhdGFbXSA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICBjb25zdCB0ZW5zb3IgPSB3YXNtLkhFQVBVMzJbb3V0cHV0VmFsdWVzT2Zmc2V0IC8gNCArIGldO1xuICAgICAgaWYgKHRlbnNvciA9PT0gb3V0cHV0VGVuc29ySGFuZGxlc1tpXSkge1xuICAgICAgICAvLyBvdXRwdXQgdGVuc29yIGlzIHByZS1hbGxvY2F0ZWQuIG5vIG5lZWQgdG8gY29weSBkYXRhLlxuICAgICAgICBvdXRwdXQucHVzaChvdXRwdXRUZW5zb3JzW2ldISk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBiZWZvcmVHZXRUZW5zb3JEYXRhU3RhY2sgPSB3YXNtLnN0YWNrU2F2ZSgpO1xuICAgICAgLy8gc3RhY2sgYWxsb2NhdGUgNCBwb2ludGVyIHZhbHVlXG4gICAgICBjb25zdCB0ZW5zb3JEYXRhT2Zmc2V0ID0gd2FzbS5zdGFja0FsbG9jKDQgKiA0KTtcblxuICAgICAgbGV0IGtlZXBPdXRwdXRUZW5zb3IgPSBmYWxzZTtcbiAgICAgIGxldCB0eXBlOiBUZW5zb3IuVHlwZXx1bmRlZmluZWQsIGRhdGFPZmZzZXQgPSAwO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZXJyb3JDb2RlID0gd2FzbS5fT3J0R2V0VGVuc29yRGF0YShcbiAgICAgICAgICAgIHRlbnNvciwgdGVuc29yRGF0YU9mZnNldCwgdGVuc29yRGF0YU9mZnNldCArIDQsIHRlbnNvckRhdGFPZmZzZXQgKyA4LCB0ZW5zb3JEYXRhT2Zmc2V0ICsgMTIpO1xuICAgICAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IGFjY2VzcyBvdXRwdXQgdGVuc29yIGRhdGEgb24gaW5kZXggJHtpfS5gKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgdGVuc29yRGF0YUluZGV4ID0gdGVuc29yRGF0YU9mZnNldCAvIDQ7XG4gICAgICAgIGNvbnN0IGRhdGFUeXBlID0gd2FzbS5IRUFQVTMyW3RlbnNvckRhdGFJbmRleCsrXTtcbiAgICAgICAgZGF0YU9mZnNldCA9IHdhc20uSEVBUFUzMlt0ZW5zb3JEYXRhSW5kZXgrK107XG4gICAgICAgIGNvbnN0IGRpbXNPZmZzZXQgPSB3YXNtLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICBjb25zdCBkaW1zTGVuZ3RoID0gd2FzbS5IRUFQVTMyW3RlbnNvckRhdGFJbmRleCsrXTtcbiAgICAgICAgY29uc3QgZGltcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpbXNMZW5ndGg7IGkrKykge1xuICAgICAgICAgIGRpbXMucHVzaCh3YXNtLkhFQVBVMzJbZGltc09mZnNldCAvIDQgKyBpXSk7XG4gICAgICAgIH1cbiAgICAgICAgd2FzbS5fT3J0RnJlZShkaW1zT2Zmc2V0KTtcblxuICAgICAgICBjb25zdCBzaXplID0gZGltcy5yZWR1Y2UoKGEsIGIpID0+IGEgKiBiLCAxKTtcbiAgICAgICAgdHlwZSA9IHRlbnNvckRhdGFUeXBlRW51bVRvU3RyaW5nKGRhdGFUeXBlKTtcblxuICAgICAgICBjb25zdCBwcmVmZXJyZWRMb2NhdGlvbiA9IGlvQmluZGluZ1N0YXRlPy5vdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnNbb3V0cHV0SW5kaWNlc1tpXV07XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHByZWZlcnJlZExvY2F0aW9uID09PSAnZ3B1LWJ1ZmZlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3RyaW5nIHRlbnNvciBpcyBub3Qgc3VwcG9ydGVkIG9uIEdQVS4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3Qgc3RyaW5nRGF0YTogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICBsZXQgZGF0YUluZGV4ID0gZGF0YU9mZnNldCAvIDQ7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaXplOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHdhc20uSEVBUFUzMltkYXRhSW5kZXgrK107XG4gICAgICAgICAgICBjb25zdCBtYXhCeXRlc1RvUmVhZCA9IGkgPT09IHNpemUgLSAxID8gdW5kZWZpbmVkIDogd2FzbS5IRUFQVTMyW2RhdGFJbmRleF0gLSBvZmZzZXQ7XG4gICAgICAgICAgICBzdHJpbmdEYXRhLnB1c2god2FzbS5VVEY4VG9TdHJpbmcob2Zmc2V0LCBtYXhCeXRlc1RvUmVhZCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXRwdXQucHVzaChbdHlwZSwgZGltcywgc3RyaW5nRGF0YSwgJ2NwdSddKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiBhIGNlcnRhaW4gb3V0cHV0J3MgcHJlZmVycmVkIGxvY2F0aW9uIGlzIEdQVSBidXQgdGhlIHRlbnNvciBpcyBlbXB0eSwgd2Ugc3RpbGwgbmVlZCB0byBjcmVhdGUgYSBDUFVcbiAgICAgICAgICAvLyB0ZW5zb3IgZm9yIGl0LiBUaGVyZSBpcyBubyBtYXBwaW5nIEdQVSBidWZmZXIgZm9yIGFuIGVtcHR5IHRlbnNvci5cbiAgICAgICAgICBpZiAocHJlZmVycmVkTG9jYXRpb24gPT09ICdncHUtYnVmZmVyJyAmJiBzaXplID4gMCkge1xuICAgICAgICAgICAgY29uc3QgZ3B1QnVmZmVyID0gd2FzbS5qc2VwR2V0QnVmZmVyKGRhdGFPZmZzZXQpO1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudFNpemUgPSBnZXRUZW5zb3JFbGVtZW50U2l6ZShkYXRhVHlwZSk7XG4gICAgICAgICAgICBpZiAoZWxlbWVudFNpemUgPT09IHVuZGVmaW5lZCB8fCAhaXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZGF0YSB0eXBlOiAke3R5cGV9YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGRvIG5vdCByZWxlYXNlIHRoZSB0ZW5zb3IgcmlnaHQgbm93LiBpdCB3aWxsIGJlIHJlbGVhc2VkIHdoZW4gdXNlciBjYWxscyB0ZW5zb3IuZGlzcG9zZSgpLlxuICAgICAgICAgICAga2VlcE91dHB1dFRlbnNvciA9IHRydWU7XG5cbiAgICAgICAgICAgIG91dHB1dC5wdXNoKFtcbiAgICAgICAgICAgICAgdHlwZSwgZGltcywge1xuICAgICAgICAgICAgICAgIGdwdUJ1ZmZlcixcbiAgICAgICAgICAgICAgICBkb3dubG9hZDogd2FzbS5qc2VwQ3JlYXRlRG93bmxvYWRlcihncHVCdWZmZXIsIHNpemUgKiBlbGVtZW50U2l6ZSwgdHlwZSksXG4gICAgICAgICAgICAgICAgZGlzcG9zZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgd2FzbS5fT3J0UmVsZWFzZVRlbnNvcih0ZW5zb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgJ2dwdS1idWZmZXInXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdHlwZWRBcnJheUNvbnN0cnVjdG9yID0gdGVuc29yVHlwZVRvVHlwZWRBcnJheUNvbnN0cnVjdG9yKHR5cGUpO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IG5ldyB0eXBlZEFycmF5Q29uc3RydWN0b3Ioc2l6ZSk7XG4gICAgICAgICAgICBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpXG4gICAgICAgICAgICAgICAgLnNldCh3YXNtLkhFQVBVOC5zdWJhcnJheShkYXRhT2Zmc2V0LCBkYXRhT2Zmc2V0ICsgZGF0YS5ieXRlTGVuZ3RoKSk7XG4gICAgICAgICAgICBvdXRwdXQucHVzaChbdHlwZSwgZGltcywgZGF0YSwgJ2NwdSddKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHdhc20uc3RhY2tSZXN0b3JlKGJlZm9yZUdldFRlbnNvckRhdGFTdGFjayk7XG4gICAgICAgIGlmICh0eXBlID09PSAnc3RyaW5nJyAmJiBkYXRhT2Zmc2V0KSB7XG4gICAgICAgICAgd2FzbS5fZnJlZShkYXRhT2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWtlZXBPdXRwdXRUZW5zb3IpIHtcbiAgICAgICAgICB3YXNtLl9PcnRSZWxlYXNlVGVuc29yKHRlbnNvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaW9CaW5kaW5nU3RhdGUpIHtcbiAgICAgIHdhc20uX09ydENsZWFyQm91bmRPdXRwdXRzKGlvQmluZGluZ1N0YXRlLmhhbmRsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfSBmaW5hbGx5IHtcbiAgICB3YXNtLnN0YWNrUmVzdG9yZShiZWZvcmVSdW5TdGFjayk7XG5cbiAgICBpbnB1dFRlbnNvckhhbmRsZXMuZm9yRWFjaCh2ID0+IHdhc20uX09ydFJlbGVhc2VUZW5zb3IodikpO1xuICAgIG91dHB1dFRlbnNvckhhbmRsZXMuZm9yRWFjaCh2ID0+IHdhc20uX09ydFJlbGVhc2VUZW5zb3IodikpO1xuICAgIGlucHV0T3V0cHV0QWxsb2NzLmZvckVhY2gocCA9PiB3YXNtLl9mcmVlKHApKTtcblxuICAgIGlmIChydW5PcHRpb25zSGFuZGxlICE9PSAwKSB7XG4gICAgICB3YXNtLl9PcnRSZWxlYXNlUnVuT3B0aW9ucyhydW5PcHRpb25zSGFuZGxlKTtcbiAgICB9XG4gICAgcnVuT3B0aW9uc0FsbG9jcy5mb3JFYWNoKHAgPT4gd2FzbS5fZnJlZShwKSk7XG4gIH1cbn07XG5cbi8qKlxuICogZW5kIHByb2ZpbGluZ1xuICovXG5leHBvcnQgY29uc3QgZW5kUHJvZmlsaW5nID0gKHNlc3Npb25JZDogbnVtYmVyKTogdm9pZCA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBjb25zdCBzZXNzaW9uID0gYWN0aXZlU2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7XG4gIGlmICghc2Vzc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzZXNzaW9uIGlkJyk7XG4gIH1cbiAgY29uc3Qgc2Vzc2lvbkhhbmRsZSA9IHNlc3Npb25bMF07XG5cbiAgLy8gcHJvZmlsZSBmaWxlIG5hbWUgaXMgbm90IHVzZWQgeWV0LCBidXQgaXQgbXVzdCBiZSBmcmVlZC5cbiAgY29uc3QgcHJvZmlsZUZpbGVOYW1lID0gd2FzbS5fT3J0RW5kUHJvZmlsaW5nKHNlc3Npb25IYW5kbGUpO1xuICBpZiAocHJvZmlsZUZpbGVOYW1lID09PSAwKSB7XG4gICAgY2hlY2tMYXN0RXJyb3IoJ0NhblxcJ3QgZ2V0IGFuIHByb2ZpbGUgZmlsZSBuYW1lLicpO1xuICB9XG4gIHdhc20uX09ydEZyZWUocHJvZmlsZUZpbGVOYW1lKTtcbn07XG5cbmV4cG9ydCBjb25zdCBleHRyYWN0VHJhbnNmZXJhYmxlQnVmZmVycyA9ICh0ZW5zb3JzOiByZWFkb25seSBTZXJpYWxpemFibGVUZW5zb3JNZXRhZGF0YVtdKTogQXJyYXlCdWZmZXJMaWtlW10gPT4ge1xuICBjb25zdCBidWZmZXJzOiBBcnJheUJ1ZmZlckxpa2VbXSA9IFtdO1xuICBmb3IgKGNvbnN0IHRlbnNvciBvZiB0ZW5zb3JzKSB7XG4gICAgY29uc3QgZGF0YSA9IHRlbnNvclsyXTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkgJiYgJ2J1ZmZlcicgaW4gZGF0YSkge1xuICAgICAgYnVmZmVycy5wdXNoKGRhdGEuYnVmZmVyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJ1ZmZlcnM7XG59O1xuIiwgIi8qIVxuICogT05OWCBSdW50aW1lIFdlYiB2MS4xNy4wXG4gKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7XG4oKCkgPT4ge1xuICB2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICB2YXIgX19nZXRPd25Qcm9wRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gIHZhciBfX2dldE93blByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICB2YXIgX19oYXNPd25Qcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIF9fZXNtID0gKGZuLCByZXMpID0+IGZ1bmN0aW9uIF9faW5pdCgpIHtcbiAgICByZXR1cm4gZm4gJiYgKHJlcyA9ICgwLCBmbltfX2dldE93blByb3BOYW1lcyhmbilbMF1dKShmbiA9IDApKSwgcmVzO1xuICB9O1xuICB2YXIgX19jb21tb25KUyA9IChjYiwgbW9kKSA9PiBmdW5jdGlvbiBfX3JlcXVpcmUoKSB7XG4gICAgcmV0dXJuIG1vZCB8fCAoMCwgY2JbX19nZXRPd25Qcm9wTmFtZXMoY2IpWzBdXSkoKG1vZCA9IHsgZXhwb3J0czoge30gfSkuZXhwb3J0cywgbW9kKSwgbW9kLmV4cG9ydHM7XG4gIH07XG4gIHZhciBfX2V4cG9ydCA9ICh0YXJnZXQsIGFsbCkgPT4ge1xuICAgIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgICAgX19kZWZQcm9wKHRhcmdldCwgbmFtZSwgeyBnZXQ6IGFsbFtuYW1lXSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgfTtcbiAgdmFyIF9fY29weVByb3BzID0gKHRvLCBmcm9tLCBleGNlcHQsIGRlc2MpID0+IHtcbiAgICBpZiAoZnJvbSAmJiB0eXBlb2YgZnJvbSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZnJvbSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBmb3IgKGxldCBrZXkgb2YgX19nZXRPd25Qcm9wTmFtZXMoZnJvbSkpXG4gICAgICAgIGlmICghX19oYXNPd25Qcm9wLmNhbGwodG8sIGtleSkgJiYga2V5ICE9PSBleGNlcHQpXG4gICAgICAgICAgX19kZWZQcm9wKHRvLCBrZXksIHsgZ2V0OiAoKSA9PiBmcm9tW2tleV0sIGVudW1lcmFibGU6ICEoZGVzYyA9IF9fZ2V0T3duUHJvcERlc2MoZnJvbSwga2V5KSkgfHwgZGVzYy5lbnVtZXJhYmxlIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdG87XG4gIH07XG4gIHZhciBfX3RvQ29tbW9uSlMgPSAobW9kKSA9PiBfX2NvcHlQcm9wcyhfX2RlZlByb3Aoe30sIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pLCBtb2QpO1xuXG4gIC8vIG5vZGVqcy1pZ25vcmU6ZnNcbiAgdmFyIGZzX2V4cG9ydHMgPSB7fTtcbiAgX19leHBvcnQoZnNfZXhwb3J0cywge1xuICAgIHJlYWRGaWxlOiAoKSA9PiByZWFkRmlsZVxuICB9KTtcbiAgdmFyIHJlYWRGaWxlO1xuICB2YXIgaW5pdF9mcyA9IF9fZXNtKHtcbiAgICBcIm5vZGVqcy1pZ25vcmU6ZnNcIigpIHtcbiAgICAgIHJlYWRGaWxlID0gdm9pZCAwO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gbm9kZWpzLWlnbm9yZTpwYXRoXG4gIHZhciBwYXRoX2V4cG9ydHMgPSB7fTtcbiAgX19leHBvcnQocGF0aF9leHBvcnRzLCB7XG4gICAgam9pbjogKCkgPT4gam9pbjJcbiAgfSk7XG4gIHZhciBqb2luMjtcbiAgdmFyIGluaXRfcGF0aCA9IF9fZXNtKHtcbiAgICBcIm5vZGVqcy1pZ25vcmU6cGF0aFwiKCkge1xuICAgICAgam9pbjIgPSB2b2lkIDA7XG4gICAgfVxuICB9KTtcblxuICAvLyB3ZWIvbGliL3dhc20vYmluZGluZy9vcnQtd2FzbS5qc1xuICB2YXIgcmVxdWlyZV9vcnRfd2FzbSA9IF9fY29tbW9uSlMoe1xuICAgIFwid2ViL2xpYi93YXNtL2JpbmRpbmcvb3J0LXdhc20uanNcIihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgdmFyIG9ydFdhc20gPSAoKCkgPT4ge1xuICAgICAgICB2YXIgX3NjcmlwdERpciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ID8gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMgOiB2b2lkIDA7XG4gICAgICAgIGlmICh0eXBlb2YgX19maWxlbmFtZSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICBfc2NyaXB0RGlyID0gX3NjcmlwdERpciB8fCBfX2ZpbGVuYW1lO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24obW9kdWxlQXJnID0ge30pIHtcbiAgICAgICAgICB2YXIgaCA9IG1vZHVsZUFyZywgYWEsIGJhO1xuICAgICAgICAgIGgucmVhZHkgPSBuZXcgUHJvbWlzZSgoYSwgYikgPT4ge1xuICAgICAgICAgICAgYWEgPSBhO1xuICAgICAgICAgICAgYmEgPSBiO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBjYSA9IE9iamVjdC5hc3NpZ24oe30sIGgpLCBkYSA9IFwiLi90aGlzLnByb2dyYW1cIiwgZWEgPSBcIm9iamVjdFwiID09IHR5cGVvZiB3aW5kb3csIG0gPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGltcG9ydFNjcmlwdHMsIGZhID0gXCJvYmplY3RcIiA9PSB0eXBlb2YgcHJvY2VzcyAmJiBcIm9iamVjdFwiID09IHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSwgcCA9IFwiXCIsIGhhLCB0LCB3O1xuICAgICAgICAgIGlmIChmYSkge1xuICAgICAgICAgICAgdmFyIGZzID0gKGluaXRfZnMoKSwgX190b0NvbW1vbkpTKGZzX2V4cG9ydHMpKSwgaWEgPSAoaW5pdF9wYXRoKCksIF9fdG9Db21tb25KUyhwYXRoX2V4cG9ydHMpKTtcbiAgICAgICAgICAgIHAgPSBtID8gaWEuZGlybmFtZShwKSArIFwiL1wiIDogX19kaXJuYW1lICsgXCIvXCI7XG4gICAgICAgICAgICBoYSA9IChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgIGEgPSBhLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpID8gbmV3IFVSTChhKSA6IGlhLm5vcm1hbGl6ZShhKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGZzLnJlYWRGaWxlU3luYyhhLCBiID8gdm9pZCAwIDogXCJ1dGY4XCIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHcgPSAoYSkgPT4ge1xuICAgICAgICAgICAgICBhID0gaGEoYSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIGEuYnVmZmVyIHx8IChhID0gbmV3IFVpbnQ4QXJyYXkoYSkpO1xuICAgICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0ID0gKGEsIGIsIGMsIGQgPSB0cnVlKSA9PiB7XG4gICAgICAgICAgICAgIGEgPSBhLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpID8gbmV3IFVSTChhKSA6IGlhLm5vcm1hbGl6ZShhKTtcbiAgICAgICAgICAgICAgZnMucmVhZEZpbGUoYSwgZCA/IHZvaWQgMCA6IFwidXRmOFwiLCAoZSwgZykgPT4ge1xuICAgICAgICAgICAgICAgIGUgPyBjKGUpIDogYihkID8gZy5idWZmZXIgOiBnKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgIWgudGhpc1Byb2dyYW0gJiYgMSA8IHByb2Nlc3MuYXJndi5sZW5ndGggJiYgKGRhID0gcHJvY2Vzcy5hcmd2WzFdLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpKTtcbiAgICAgICAgICAgIHByb2Nlc3MuYXJndi5zbGljZSgyKTtcbiAgICAgICAgICAgIGguaW5zcGVjdCA9ICgpID0+IFwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGVhIHx8IG0pXG4gICAgICAgICAgICBtID8gcCA9IHNlbGYubG9jYXRpb24uaHJlZiA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGRvY3VtZW50ICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgJiYgKHAgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyksIF9zY3JpcHREaXIgJiYgKHAgPSBfc2NyaXB0RGlyKSwgMCAhPT0gcC5pbmRleE9mKFwiYmxvYjpcIikgPyBwID0gcC5zdWJzdHIoMCwgcC5yZXBsYWNlKC9bPyNdLiovLCBcIlwiKS5sYXN0SW5kZXhPZihcIi9cIikgKyAxKSA6IHAgPSBcIlwiLCBoYSA9IChhKSA9PiB7XG4gICAgICAgICAgICAgIHZhciBiID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgIGIub3BlbihcIkdFVFwiLCBhLCBmYWxzZSk7XG4gICAgICAgICAgICAgIGIuc2VuZChudWxsKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGIucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgfSwgbSAmJiAodyA9IChhKSA9PiB7XG4gICAgICAgICAgICAgIHZhciBiID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgIGIub3BlbihcIkdFVFwiLCBhLCBmYWxzZSk7XG4gICAgICAgICAgICAgIGIucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgICAgICAgICBiLnNlbmQobnVsbCk7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheShiLnJlc3BvbnNlKTtcbiAgICAgICAgICAgIH0pLCB0ID0gKGEsIGIsIGMpID0+IHtcbiAgICAgICAgICAgICAgdmFyIGQgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgZC5vcGVuKFwiR0VUXCIsIGEsIHRydWUpO1xuICAgICAgICAgICAgICBkLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgICAgICAgICAgICAgZC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgMjAwID09IGQuc3RhdHVzIHx8IDAgPT0gZC5zdGF0dXMgJiYgZC5yZXNwb25zZSA/IGIoZC5yZXNwb25zZSkgOiBjKCk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGQub25lcnJvciA9IGM7XG4gICAgICAgICAgICAgIGQuc2VuZChudWxsKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgdmFyIGphID0gY29uc29sZS5sb2cuYmluZChjb25zb2xlKSwgeCA9IGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlKTtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKGgsIGNhKTtcbiAgICAgICAgICBjYSA9IG51bGw7XG4gICAgICAgICAgXCJvYmplY3RcIiAhPSB0eXBlb2YgV2ViQXNzZW1ibHkgJiYga2EoXCJubyBuYXRpdmUgd2FzbSBzdXBwb3J0IGRldGVjdGVkXCIpO1xuICAgICAgICAgIHZhciB6LCBsYSA9IGZhbHNlLCBBLCBCLCBDLCBELCBFLCBHLCBtYSwgbmEsIG9hLCBwYTtcbiAgICAgICAgICBmdW5jdGlvbiBxYSgpIHtcbiAgICAgICAgICAgIHZhciBhID0gei5idWZmZXI7XG4gICAgICAgICAgICBoLkhFQVA4ID0gQSA9IG5ldyBJbnQ4QXJyYXkoYSk7XG4gICAgICAgICAgICBoLkhFQVAxNiA9IEMgPSBuZXcgSW50MTZBcnJheShhKTtcbiAgICAgICAgICAgIGguSEVBUFU4ID0gQiA9IG5ldyBVaW50OEFycmF5KGEpO1xuICAgICAgICAgICAgaC5IRUFQVTE2ID0gRCA9IG5ldyBVaW50MTZBcnJheShhKTtcbiAgICAgICAgICAgIGguSEVBUDMyID0gRSA9IG5ldyBJbnQzMkFycmF5KGEpO1xuICAgICAgICAgICAgaC5IRUFQVTMyID0gRyA9IG5ldyBVaW50MzJBcnJheShhKTtcbiAgICAgICAgICAgIGguSEVBUEYzMiA9IG1hID0gbmV3IEZsb2F0MzJBcnJheShhKTtcbiAgICAgICAgICAgIGguSEVBUEY2NCA9IHBhID0gbmV3IEZsb2F0NjRBcnJheShhKTtcbiAgICAgICAgICAgIGguSEVBUDY0ID0gbmEgPSBuZXcgQmlnSW50NjRBcnJheShhKTtcbiAgICAgICAgICAgIGguSEVBUFU2NCA9IG9hID0gbmV3IEJpZ1VpbnQ2NEFycmF5KGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmEgPSBbXSwgc2EgPSBbXSwgdGEgPSBbXSwgSSA9IDAsIHVhID0gbnVsbCwgSiA9IG51bGw7XG4gICAgICAgICAgZnVuY3Rpb24ga2EoYSkge1xuICAgICAgICAgICAgYSA9IFwiQWJvcnRlZChcIiArIGEgKyBcIilcIjtcbiAgICAgICAgICAgIHgoYSk7XG4gICAgICAgICAgICBsYSA9IHRydWU7XG4gICAgICAgICAgICBhID0gbmV3IFdlYkFzc2VtYmx5LlJ1bnRpbWVFcnJvcihhICsgXCIuIEJ1aWxkIHdpdGggLXNBU1NFUlRJT05TIGZvciBtb3JlIGluZm8uXCIpO1xuICAgICAgICAgICAgYmEoYSk7XG4gICAgICAgICAgICB0aHJvdyBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB2YShhKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5zdGFydHNXaXRoKFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIEs7XG4gICAgICAgICAgSyA9IFwib3J0LXdhc20ud2FzbVwiO1xuICAgICAgICAgIGlmICghdmEoSykpIHtcbiAgICAgICAgICAgIHZhciB3YSA9IEs7XG4gICAgICAgICAgICBLID0gaC5sb2NhdGVGaWxlID8gaC5sb2NhdGVGaWxlKHdhLCBwKSA6IHAgKyB3YTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24geGEoYSkge1xuICAgICAgICAgICAgaWYgKHcpXG4gICAgICAgICAgICAgIHJldHVybiB3KGEpO1xuICAgICAgICAgICAgdGhyb3cgXCJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB5YShhKSB7XG4gICAgICAgICAgICBpZiAoZWEgfHwgbSkge1xuICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBmZXRjaCAmJiAhYS5zdGFydHNXaXRoKFwiZmlsZTovL1wiKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2goYSwgeyBjcmVkZW50aWFsczogXCJzYW1lLW9yaWdpblwiIH0pLnRoZW4oKGIpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmICghYi5vaylcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcIiArIGEgKyBcIidcIjtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBiLmFycmF5QnVmZmVyKCk7XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKCkgPT4geGEoYSkpO1xuICAgICAgICAgICAgICBpZiAodClcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKGIsIGMpID0+IHtcbiAgICAgICAgICAgICAgICAgIHQoYSwgKGQpID0+IGIobmV3IFVpbnQ4QXJyYXkoZCkpLCBjKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHhhKGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gemEoYSwgYiwgYykge1xuICAgICAgICAgICAgcmV0dXJuIHlhKGEpLnRoZW4oKGQpID0+IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlKGQsIGIpKS50aGVuKChkKSA9PiBkKS50aGVuKGMsIChkKSA9PiB7XG4gICAgICAgICAgICAgIHgoYGZhaWxlZCB0byBhc3luY2hyb25vdXNseSBwcmVwYXJlIHdhc206ICR7ZH1gKTtcbiAgICAgICAgICAgICAga2EoZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gQWEoYSwgYikge1xuICAgICAgICAgICAgdmFyIGMgPSBLO1xuICAgICAgICAgICAgcmV0dXJuIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcgfHwgdmEoYykgfHwgYy5zdGFydHNXaXRoKFwiZmlsZTovL1wiKSB8fCBmYSB8fCBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGZldGNoID8gemEoYywgYSwgYikgOiBmZXRjaChjLCB7IGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCIgfSkudGhlbigoZCkgPT4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcoZCwgYSkudGhlbihiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgIHgoYHdhc20gc3RyZWFtaW5nIGNvbXBpbGUgZmFpbGVkOiAke2V9YCk7XG4gICAgICAgICAgICAgIHgoXCJmYWxsaW5nIGJhY2sgdG8gQXJyYXlCdWZmZXIgaW5zdGFudGlhdGlvblwiKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHphKGMsIGEsIGIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBCYShhKSB7XG4gICAgICAgICAgICB0aGlzLlZhID0gYSAtIDI0O1xuICAgICAgICAgICAgdGhpcy5mYiA9IGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgICAgR1t0aGlzLlZhICsgNCA+Pj4gMiA+Pj4gMF0gPSBiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuZWIgPSBmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgIEdbdGhpcy5WYSArIDggPj4+IDIgPj4+IDBdID0gYjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLlphID0gZnVuY3Rpb24oYiwgYykge1xuICAgICAgICAgICAgICB0aGlzLiRhKCk7XG4gICAgICAgICAgICAgIHRoaXMuZmIoYik7XG4gICAgICAgICAgICAgIHRoaXMuZWIoYyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy4kYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBHW3RoaXMuVmEgKyAxNiA+Pj4gMiA+Pj4gMF0gPSAwO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIENhID0gMCwgRGEgPSAwLCBFYSA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFRleHREZWNvZGVyID8gbmV3IFRleHREZWNvZGVyKFwidXRmOFwiKSA6IHZvaWQgMCwgRmEgPSAoYSwgYiwgYykgPT4ge1xuICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICB2YXIgZCA9IGIgKyBjO1xuICAgICAgICAgICAgZm9yIChjID0gYjsgYVtjXSAmJiAhKGMgPj0gZCk7IClcbiAgICAgICAgICAgICAgKytjO1xuICAgICAgICAgICAgaWYgKDE2IDwgYyAtIGIgJiYgYS5idWZmZXIgJiYgRWEpXG4gICAgICAgICAgICAgIHJldHVybiBFYS5kZWNvZGUoYS5zdWJhcnJheShiLCBjKSk7XG4gICAgICAgICAgICBmb3IgKGQgPSBcIlwiOyBiIDwgYzsgKSB7XG4gICAgICAgICAgICAgIHZhciBlID0gYVtiKytdO1xuICAgICAgICAgICAgICBpZiAoZSAmIDEyOCkge1xuICAgICAgICAgICAgICAgIHZhciBnID0gYVtiKytdICYgNjM7XG4gICAgICAgICAgICAgICAgaWYgKDE5MiA9PSAoZSAmIDIyNCkpXG4gICAgICAgICAgICAgICAgICBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGUgJiAzMSkgPDwgNiB8IGcpO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdmFyIGwgPSBhW2IrK10gJiA2MztcbiAgICAgICAgICAgICAgICAgIGUgPSAyMjQgPT0gKGUgJiAyNDApID8gKGUgJiAxNSkgPDwgMTIgfCBnIDw8IDYgfCBsIDogKGUgJiA3KSA8PCAxOCB8IGcgPDwgMTIgfCBsIDw8IDYgfCBhW2IrK10gJiA2MztcbiAgICAgICAgICAgICAgICAgIDY1NTM2ID4gZSA/IGQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShlKSA6IChlIC09IDY1NTM2LCBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTYgfCBlID4+IDEwLCA1NjMyMCB8IGUgJiAxMDIzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICB9LCBMID0gKGEsIGIpID0+IChhID4+Pj0gMCkgPyBGYShCLCBhLCBiKSA6IFwiXCIsIE0gPSAoYSkgPT4ge1xuICAgICAgICAgICAgZm9yICh2YXIgYiA9IDAsIGMgPSAwOyBjIDwgYS5sZW5ndGg7ICsrYykge1xuICAgICAgICAgICAgICB2YXIgZCA9IGEuY2hhckNvZGVBdChjKTtcbiAgICAgICAgICAgICAgMTI3ID49IGQgPyBiKysgOiAyMDQ3ID49IGQgPyBiICs9IDIgOiA1NTI5NiA8PSBkICYmIDU3MzQzID49IGQgPyAoYiArPSA0LCArK2MpIDogYiArPSAzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgfSwgTiA9IChhLCBiLCBjLCBkKSA9PiB7XG4gICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgIGlmICghKDAgPCBkKSlcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB2YXIgZSA9IGM7XG4gICAgICAgICAgICBkID0gYyArIGQgLSAxO1xuICAgICAgICAgICAgZm9yICh2YXIgZyA9IDA7IGcgPCBhLmxlbmd0aDsgKytnKSB7XG4gICAgICAgICAgICAgIHZhciBsID0gYS5jaGFyQ29kZUF0KGcpO1xuICAgICAgICAgICAgICBpZiAoNTUyOTYgPD0gbCAmJiA1NzM0MyA+PSBsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGsgPSBhLmNoYXJDb2RlQXQoKytnKTtcbiAgICAgICAgICAgICAgICBsID0gNjU1MzYgKyAoKGwgJiAxMDIzKSA8PCAxMCkgfCBrICYgMTAyMztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoMTI3ID49IGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoYyA+PSBkKVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gbDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoMjA0NyA+PSBsKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoYyArIDEgPj0gZClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAxOTIgfCBsID4+IDY7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlmICg2NTUzNSA+PSBsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjICsgMiA+PSBkKVxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAyMjQgfCBsID4+IDEyO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMgKyAzID49IGQpXG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDI0MCB8IGwgPj4gMTg7XG4gICAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDEyOCB8IGwgPj4gMTIgJiA2MztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDEyOCB8IGwgPj4gNiAmIDYzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAxMjggfCBsICYgNjM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJbYyA+Pj4gMF0gPSAwO1xuICAgICAgICAgICAgcmV0dXJuIGMgLSBlO1xuICAgICAgICAgIH0sIEdhID0gKGEpID0+IHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSBhKVxuICAgICAgICAgICAgICByZXR1cm4gXCJudWxsXCI7XG4gICAgICAgICAgICB2YXIgYiA9IHR5cGVvZiBhO1xuICAgICAgICAgICAgcmV0dXJuIFwib2JqZWN0XCIgPT09IGIgfHwgXCJhcnJheVwiID09PSBiIHx8IFwiZnVuY3Rpb25cIiA9PT0gYiA/IGEudG9TdHJpbmcoKSA6IFwiXCIgKyBhO1xuICAgICAgICAgIH0sIEhhLCBPID0gKGEpID0+IHtcbiAgICAgICAgICAgIGZvciAodmFyIGIgPSBcIlwiOyBCW2EgPj4+IDBdOyApXG4gICAgICAgICAgICAgIGIgKz0gSGFbQlthKysgPj4+IDBdXTtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgIH0sIElhID0ge30sIEphID0ge30sIEthID0ge30sIFA7XG4gICAgICAgICAgZnVuY3Rpb24gTGEoYSwgYiwgYyA9IHt9KSB7XG4gICAgICAgICAgICB2YXIgZCA9IGIubmFtZTtcbiAgICAgICAgICAgIGlmICghYSlcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFAoYHR5cGUgXCIke2R9XCIgbXVzdCBoYXZlIGEgcG9zaXRpdmUgaW50ZWdlciB0eXBlaWQgcG9pbnRlcmApO1xuICAgICAgICAgICAgaWYgKEphLmhhc093blByb3BlcnR5KGEpKSB7XG4gICAgICAgICAgICAgIGlmIChjLmdiKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFAoYENhbm5vdCByZWdpc3RlciB0eXBlICcke2R9JyB0d2ljZWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgSmFbYV0gPSBiO1xuICAgICAgICAgICAgZGVsZXRlIEthW2FdO1xuICAgICAgICAgICAgSWEuaGFzT3duUHJvcGVydHkoYSkgJiYgKGIgPSBJYVthXSwgZGVsZXRlIElhW2FdLCBiLmZvckVhY2goKGUpID0+IGUoKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBRKGEsIGIsIGMgPSB7fSkge1xuICAgICAgICAgICAgaWYgKCEoXCJhcmdQYWNrQWR2YW5jZVwiIGluIGIpKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwicmVnaXN0ZXJUeXBlIHJlZ2lzdGVyZWRJbnN0YW5jZSByZXF1aXJlcyBhcmdQYWNrQWR2YW5jZVwiKTtcbiAgICAgICAgICAgIExhKGEsIGIsIGMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgTWEgPSAoYSwgYiwgYykgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChiKSB7XG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gYyA/IChkKSA9PiBBW2QgPj4+IDAgPj4+IDBdIDogKGQpID0+IEJbZCA+Pj4gMCA+Pj4gMF07XG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gYyA/IChkKSA9PiBDW2QgPj4+IDEgPj4+IDBdIDogKGQpID0+IERbZCA+Pj4gMSA+Pj4gMF07XG4gICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICByZXR1cm4gYyA/IChkKSA9PiBFW2QgPj4+IDIgPj4+IDBdIDogKGQpID0+IEdbZCA+Pj4gMiA+Pj4gMF07XG4gICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICByZXR1cm4gYyA/IChkKSA9PiBuYVtkID4+PiAzXSA6IChkKSA9PiBvYVtkID4+PiAzXTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBpbnZhbGlkIGludGVnZXIgd2lkdGggKCR7Yn0pOiAke2F9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmdW5jdGlvbiBOYSgpIHtcbiAgICAgICAgICAgIHRoaXMuU2EgPSBbdm9pZCAwXTtcbiAgICAgICAgICAgIHRoaXMuYmIgPSBbXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFIgPSBuZXcgTmEoKTtcbiAgICAgICAgICBmdW5jdGlvbiBPYShhKSB7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGEgPj0gUi5WYSAmJiAwID09PSAtLVIuZ2V0KGEpLmNiICYmIFIuJGEoYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBTID0gKGEpID0+IHtcbiAgICAgICAgICAgIGlmICghYSlcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFAoXCJDYW5ub3QgdXNlIGRlbGV0ZWQgdmFsLiBoYW5kbGUgPSBcIiArIGEpO1xuICAgICAgICAgICAgcmV0dXJuIFIuZ2V0KGEpLnZhbHVlO1xuICAgICAgICAgIH0sIFQgPSAoYSkgPT4ge1xuICAgICAgICAgICAgc3dpdGNoIChhKSB7XG4gICAgICAgICAgICAgIGNhc2Ugdm9pZCAwOlxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgICAgICAgIGNhc2UgdHJ1ZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gMztcbiAgICAgICAgICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gNDtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gUi5aYSh7IGNiOiAxLCB2YWx1ZTogYSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIFBhKGEpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZyb21XaXJlVHlwZShFW2EgPj4+IDIgPj4+IDBdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFFhID0gKGEsIGIpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaCAoYikge1xuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZyb21XaXJlVHlwZShtYVtjID4+PiAyID4+PiAwXSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mcm9tV2lyZVR5cGUocGFbYyA+Pj4gMyA+Pj4gMF0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgaW52YWxpZCBmbG9hdCB3aWR0aCAoJHtifSk6ICR7YX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIFJhKGEpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZyb21XaXJlVHlwZShHW2EgPj4+IDIgPj4+IDBdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFNhID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgVGV4dERlY29kZXIgPyBuZXcgVGV4dERlY29kZXIoXCJ1dGYtMTZsZVwiKSA6IHZvaWQgMCwgVGEgPSAoYSwgYikgPT4ge1xuICAgICAgICAgICAgdmFyIGMgPSBhID4+IDE7XG4gICAgICAgICAgICBmb3IgKHZhciBkID0gYyArIGIgLyAyOyAhKGMgPj0gZCkgJiYgRFtjID4+PiAwXTsgKVxuICAgICAgICAgICAgICArK2M7XG4gICAgICAgICAgICBjIDw8PSAxO1xuICAgICAgICAgICAgaWYgKDMyIDwgYyAtIGEgJiYgU2EpXG4gICAgICAgICAgICAgIHJldHVybiBTYS5kZWNvZGUoQi5zdWJhcnJheShhID4+PiAwLCBjID4+PiAwKSk7XG4gICAgICAgICAgICBjID0gXCJcIjtcbiAgICAgICAgICAgIGZvciAoZCA9IDA7ICEoZCA+PSBiIC8gMik7ICsrZCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IENbYSArIDIgKiBkID4+PiAxID4+PiAwXTtcbiAgICAgICAgICAgICAgaWYgKDAgPT0gZSlcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgYyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgfSwgVWEgPSAoYSwgYiwgYykgPT4ge1xuICAgICAgICAgICAgdm9pZCAwID09PSBjICYmIChjID0gMjE0NzQ4MzY0Nyk7XG4gICAgICAgICAgICBpZiAoMiA+IGMpXG4gICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgYyAtPSAyO1xuICAgICAgICAgICAgdmFyIGQgPSBiO1xuICAgICAgICAgICAgYyA9IGMgPCAyICogYS5sZW5ndGggPyBjIC8gMiA6IGEubGVuZ3RoO1xuICAgICAgICAgICAgZm9yICh2YXIgZSA9IDA7IGUgPCBjOyArK2UpXG4gICAgICAgICAgICAgIENbYiA+Pj4gMSA+Pj4gMF0gPSBhLmNoYXJDb2RlQXQoZSksIGIgKz0gMjtcbiAgICAgICAgICAgIENbYiA+Pj4gMSA+Pj4gMF0gPSAwO1xuICAgICAgICAgICAgcmV0dXJuIGIgLSBkO1xuICAgICAgICAgIH0sIFZhID0gKGEpID0+IDIgKiBhLmxlbmd0aCwgV2EgPSAoYSwgYikgPT4ge1xuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDAsIGQgPSBcIlwiOyAhKGMgPj0gYiAvIDQpOyApIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSBFW2EgKyA0ICogYyA+Pj4gMiA+Pj4gMF07XG4gICAgICAgICAgICAgIGlmICgwID09IGUpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICsrYztcbiAgICAgICAgICAgICAgNjU1MzYgPD0gZSA/IChlIC09IDY1NTM2LCBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTYgfCBlID4+IDEwLCA1NjMyMCB8IGUgJiAxMDIzKSkgOiBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICB9LCBYYSA9IChhLCBiLCBjKSA9PiB7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIHZvaWQgMCA9PT0gYyAmJiAoYyA9IDIxNDc0ODM2NDcpO1xuICAgICAgICAgICAgaWYgKDQgPiBjKVxuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIHZhciBkID0gYjtcbiAgICAgICAgICAgIGMgPSBkICsgYyAtIDQ7XG4gICAgICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IGEubGVuZ3RoOyArK2UpIHtcbiAgICAgICAgICAgICAgdmFyIGcgPSBhLmNoYXJDb2RlQXQoZSk7XG4gICAgICAgICAgICAgIGlmICg1NTI5NiA8PSBnICYmIDU3MzQzID49IGcpIHtcbiAgICAgICAgICAgICAgICB2YXIgbCA9IGEuY2hhckNvZGVBdCgrK2UpO1xuICAgICAgICAgICAgICAgIGcgPSA2NTUzNiArICgoZyAmIDEwMjMpIDw8IDEwKSB8IGwgJiAxMDIzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIEVbYiA+Pj4gMiA+Pj4gMF0gPSBnO1xuICAgICAgICAgICAgICBiICs9IDQ7XG4gICAgICAgICAgICAgIGlmIChiICsgNCA+IGMpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBFW2IgPj4+IDIgPj4+IDBdID0gMDtcbiAgICAgICAgICAgIHJldHVybiBiIC0gZDtcbiAgICAgICAgICB9LCBZYSA9IChhKSA9PiB7XG4gICAgICAgICAgICBmb3IgKHZhciBiID0gMCwgYyA9IDA7IGMgPCBhLmxlbmd0aDsgKytjKSB7XG4gICAgICAgICAgICAgIHZhciBkID0gYS5jaGFyQ29kZUF0KGMpO1xuICAgICAgICAgICAgICA1NTI5NiA8PSBkICYmIDU3MzQzID49IGQgJiYgKytjO1xuICAgICAgICAgICAgICBiICs9IDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICB9LCBWID0gKGEsIGIpID0+IHtcbiAgICAgICAgICAgIHZhciBjID0gSmFbYV07XG4gICAgICAgICAgICBpZiAodm9pZCAwID09PSBjKVxuICAgICAgICAgICAgICB0aHJvdyBhID0gWmEoYSksIGMgPSBPKGEpLCBVKGEpLCBuZXcgUChiICsgXCIgaGFzIHVua25vd24gdHlwZSBcIiArIGMpO1xuICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgfSwgJGEgPSB7fSwgVyA9IChhKSA9PiB7XG4gICAgICAgICAgICB2YXIgYiA9ICRhW2FdO1xuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gYiA/IE8oYSkgOiBiO1xuICAgICAgICAgIH0sIFggPSBbXSwgYmIgPSAoKSA9PiBcIm9iamVjdFwiID09IHR5cGVvZiBnbG9iYWxUaGlzID8gZ2xvYmFsVGhpcyA6IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSwgY2IgPSAoYSkgPT4ge1xuICAgICAgICAgICAgdmFyIGIgPSBYLmxlbmd0aDtcbiAgICAgICAgICAgIFgucHVzaChhKTtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgIH0sIGRiID0gKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGZvciAodmFyIGMgPSBBcnJheShhKSwgZCA9IDA7IGQgPCBhOyArK2QpXG4gICAgICAgICAgICAgIGNbZF0gPSBWKEdbYiArIDQgKiBkID4+PiAyID4+PiAwXSwgXCJwYXJhbWV0ZXIgXCIgKyBkKTtcbiAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgIH0sIGViID0gKGEpID0+IHtcbiAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IGEpXG4gICAgICAgICAgICAgIHJldHVybiBcIl91bmtub3duXCI7XG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKC9bXmEtekEtWjAtOV9dL2csIFwiJFwiKTtcbiAgICAgICAgICAgIHZhciBiID0gYS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgcmV0dXJuIDQ4IDw9IGIgJiYgNTcgPj0gYiA/IGBfJHthfWAgOiBhO1xuICAgICAgICAgIH0sIGZiID0ge307XG4gICAgICAgICAgZnVuY3Rpb24gZ2IoYSwgYikge1xuICAgICAgICAgICAgYSA9IGViKGEpO1xuICAgICAgICAgICAgcmV0dXJuIHsgW2FdOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH0gfVthXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gaGIoYSkge1xuICAgICAgICAgICAgdmFyIGIgPSBGdW5jdGlvbjtcbiAgICAgICAgICAgIGlmICghKGIgaW5zdGFuY2VvZiBGdW5jdGlvbikpXG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYG5ld18gY2FsbGVkIHdpdGggY29uc3RydWN0b3IgdHlwZSAke3R5cGVvZiBifSB3aGljaCBpcyBub3QgYSBmdW5jdGlvbmApO1xuICAgICAgICAgICAgdmFyIGMgPSBnYihiLm5hbWUgfHwgXCJ1bmtub3duRnVuY3Rpb25OYW1lXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjLnByb3RvdHlwZSA9IGIucHJvdG90eXBlO1xuICAgICAgICAgICAgYyA9IG5ldyBjKCk7XG4gICAgICAgICAgICBhID0gYi5hcHBseShjLCBhKTtcbiAgICAgICAgICAgIHJldHVybiBhIGluc3RhbmNlb2YgT2JqZWN0ID8gYSA6IGM7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpYiA9IChhKSA9PiB7XG4gICAgICAgICAgICBmb3IgKHZhciBiID0gXCJcIiwgYyA9IDA7IGMgPCBhOyArK2MpXG4gICAgICAgICAgICAgIGIgKz0gKDAgIT09IGMgPyBcIiwgXCIgOiBcIlwiKSArIFwiYXJnXCIgKyBjO1xuICAgICAgICAgICAgdmFyIGQgPSBcInJldHVybiBmdW5jdGlvbiBlbXZhbF9hbGxvY2F0b3JfXCIgKyBhICsgXCIoY29uc3RydWN0b3IsIGFyZ1R5cGVzLCBhcmdzKSB7XFxuICB2YXIgSEVBUFUzMiA9IGdldE1lbW9yeSgpO1xcblwiO1xuICAgICAgICAgICAgZm9yIChjID0gMDsgYyA8IGE7ICsrYylcbiAgICAgICAgICAgICAgZCArPSBcInZhciBhcmdUeXBlXCIgKyBjICsgXCIgPSByZXF1aXJlUmVnaXN0ZXJlZFR5cGUoSEVBUFUzMlsoKGFyZ1R5cGVzKT4+PjIpXSwgJ3BhcmFtZXRlciBcIiArIGMgKyBcIicpO1xcbnZhciBhcmdcIiArIGMgKyBcIiA9IGFyZ1R5cGVcIiArIGMgKyBcIi5yZWFkVmFsdWVGcm9tUG9pbnRlcihhcmdzKTtcXG5hcmdzICs9IGFyZ1R5cGVcIiArIGMgKyBcIlsnYXJnUGFja0FkdmFuY2UnXTtcXG5hcmdUeXBlcyArPSA0O1xcblwiO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbihcInJlcXVpcmVSZWdpc3RlcmVkVHlwZVwiLCBcIk1vZHVsZVwiLCBcInZhbHVlVG9IYW5kbGVcIiwgXCJnZXRNZW1vcnlcIiwgZCArIChcInZhciBvYmogPSBuZXcgY29uc3RydWN0b3IoXCIgKyBiICsgXCIpO1xcbnJldHVybiB2YWx1ZVRvSGFuZGxlKG9iaik7XFxufVxcblwiKSkoViwgaCwgVCwgKCkgPT4gRyk7XG4gICAgICAgICAgfSwgamIgPSB7fSwgWSA9IChhKSA9PiAwID09PSBhICUgNCAmJiAoMCAhPT0gYSAlIDEwMCB8fCAwID09PSBhICUgNDAwKSwga2IgPSBbMCwgMzEsIDYwLCA5MSwgMTIxLCAxNTIsIDE4MiwgMjEzLCAyNDQsIDI3NCwgMzA1LCAzMzVdLCBsYiA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNF0sIG5iID0gKGEpID0+IHtcbiAgICAgICAgICAgIHZhciBiID0gTShhKSArIDEsIGMgPSBtYihiKTtcbiAgICAgICAgICAgIGMgJiYgTihhLCBCLCBjLCBiKTtcbiAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgIH0sIG9iID0ge30sIHFiID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFwYikge1xuICAgICAgICAgICAgICB2YXIgYSA9IHsgVVNFUjogXCJ3ZWJfdXNlclwiLCBMT0dOQU1FOiBcIndlYl91c2VyXCIsIFBBVEg6IFwiL1wiLCBQV0Q6IFwiL1wiLCBIT01FOiBcIi9ob21lL3dlYl91c2VyXCIsIExBTkc6IChcIm9iamVjdFwiID09IHR5cGVvZiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLmxhbmd1YWdlcyAmJiBuYXZpZ2F0b3IubGFuZ3VhZ2VzWzBdIHx8IFwiQ1wiKS5yZXBsYWNlKFwiLVwiLCBcIl9cIikgKyBcIi5VVEYtOFwiLCBfOiBkYSB8fCBcIi4vdGhpcy5wcm9ncmFtXCIgfSwgYjtcbiAgICAgICAgICAgICAgZm9yIChiIGluIG9iKVxuICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gb2JbYl0gPyBkZWxldGUgYVtiXSA6IGFbYl0gPSBvYltiXTtcbiAgICAgICAgICAgICAgdmFyIGMgPSBbXTtcbiAgICAgICAgICAgICAgZm9yIChiIGluIGEpXG4gICAgICAgICAgICAgICAgYy5wdXNoKGAke2J9PSR7YVtiXX1gKTtcbiAgICAgICAgICAgICAgcGIgPSBjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHBiO1xuICAgICAgICAgIH0sIHBiLCByYiA9IFtudWxsLCBbXSwgW11dLCBzYiA9IFszMSwgMjksIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXSwgdGIgPSBbMzEsIDI4LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV07XG4gICAgICAgICAgZnVuY3Rpb24gdWIoYSkge1xuICAgICAgICAgICAgdmFyIGIgPSBBcnJheShNKGEpICsgMSk7XG4gICAgICAgICAgICBOKGEsIGIsIDAsIGIubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB2YihhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBlKGYsIHIsIHUpIHtcbiAgICAgICAgICAgICAgZm9yIChmID0gXCJudW1iZXJcIiA9PSB0eXBlb2YgZiA/IGYudG9TdHJpbmcoKSA6IGYgfHwgXCJcIjsgZi5sZW5ndGggPCByOyApXG4gICAgICAgICAgICAgICAgZiA9IHVbMF0gKyBmO1xuICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGcoZiwgcikge1xuICAgICAgICAgICAgICByZXR1cm4gZShmLCByLCBcIjBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBsKGYsIHIpIHtcbiAgICAgICAgICAgICAgZnVuY3Rpb24gdShhYikge1xuICAgICAgICAgICAgICAgIHJldHVybiAwID4gYWIgPyAtMSA6IDAgPCBhYiA/IDEgOiAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciBIO1xuICAgICAgICAgICAgICAwID09PSAoSCA9IHUoZi5nZXRGdWxsWWVhcigpIC0gci5nZXRGdWxsWWVhcigpKSkgJiYgMCA9PT0gKEggPSB1KGYuZ2V0TW9udGgoKSAtIHIuZ2V0TW9udGgoKSkpICYmIChIID0gdShmLmdldERhdGUoKSAtIHIuZ2V0RGF0ZSgpKSk7XG4gICAgICAgICAgICAgIHJldHVybiBIO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gayhmKSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAoZi5nZXREYXkoKSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkgLSAxLCAxMSwgMjkpO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksIDAsIDMpO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICAgICAgZi5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgICAyXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksIDAsIDEpO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkgLSAxLCAxMSwgMzEpO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkgLSAxLCAxMSwgMzApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBuKGYpIHtcbiAgICAgICAgICAgICAgdmFyIHIgPSBmLlRhO1xuICAgICAgICAgICAgICBmb3IgKGYgPSBuZXcgRGF0ZShuZXcgRGF0ZShmLlVhICsgMTkwMCwgMCwgMSkuZ2V0VGltZSgpKTsgMCA8IHI7ICkge1xuICAgICAgICAgICAgICAgIHZhciB1ID0gZi5nZXRNb250aCgpLCBIID0gKFkoZi5nZXRGdWxsWWVhcigpKSA/IHNiIDogdGIpW3VdO1xuICAgICAgICAgICAgICAgIGlmIChyID4gSCAtIGYuZ2V0RGF0ZSgpKVxuICAgICAgICAgICAgICAgICAgciAtPSBIIC0gZi5nZXREYXRlKCkgKyAxLCBmLnNldERhdGUoMSksIDExID4gdSA/IGYuc2V0TW9udGgodSArIDEpIDogKGYuc2V0TW9udGgoMCksIGYuc2V0RnVsbFllYXIoZi5nZXRGdWxsWWVhcigpICsgMSkpO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZi5zZXREYXRlKGYuZ2V0RGF0ZSgpICsgcik7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdSA9IG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSArIDEsIDAsIDQpO1xuICAgICAgICAgICAgICByID0gayhuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICBmLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICA0XG4gICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgICB1ID0gayh1KTtcbiAgICAgICAgICAgICAgcmV0dXJuIDAgPj0gbChyLCBmKSA/IDAgPj0gbCh1LCBmKSA/IGYuZ2V0RnVsbFllYXIoKSArIDEgOiBmLmdldEZ1bGxZZWFyKCkgOiBmLmdldEZ1bGxZZWFyKCkgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgZCA+Pj49IDA7XG4gICAgICAgICAgICB2YXIgcSA9IEdbZCArIDQwID4+PiAyID4+PiAwXTtcbiAgICAgICAgICAgIGQgPSB7IGtiOiBFW2QgPj4+IDIgPj4+IDBdLCBqYjogRVtkICsgNCA+Pj4gMiA+Pj4gMF0sIFhhOiBFW2QgKyA4ID4+PiAyID4+PiAwXSwgYWI6IEVbZCArIDEyID4+PiAyID4+PiAwXSwgWWE6IEVbZCArIDE2ID4+PiAyID4+PiAwXSwgVWE6IEVbZCArIDIwID4+PiAyID4+PiAwXSwgT2E6IEVbZCArIDI0ID4+PiAyID4+PiAwXSwgVGE6IEVbZCArIDI4ID4+PiAyID4+PiAwXSwgbWI6IEVbZCArIDMyID4+PiAyID4+PiAwXSwgaWI6IEVbZCArIDM2ID4+PiAyID4+PiAwXSwgbGI6IHEgPyBMKHEpIDogXCJcIiB9O1xuICAgICAgICAgICAgYyA9IEwoYyk7XG4gICAgICAgICAgICBxID0ge1xuICAgICAgICAgICAgICBcIiVjXCI6IFwiJWEgJWIgJWQgJUg6JU06JVMgJVlcIixcbiAgICAgICAgICAgICAgXCIlRFwiOiBcIiVtLyVkLyV5XCIsXG4gICAgICAgICAgICAgIFwiJUZcIjogXCIlWS0lbS0lZFwiLFxuICAgICAgICAgICAgICBcIiVoXCI6IFwiJWJcIixcbiAgICAgICAgICAgICAgXCIlclwiOiBcIiVJOiVNOiVTICVwXCIsXG4gICAgICAgICAgICAgIFwiJVJcIjogXCIlSDolTVwiLFxuICAgICAgICAgICAgICBcIiVUXCI6IFwiJUg6JU06JVNcIixcbiAgICAgICAgICAgICAgXCIleFwiOiBcIiVtLyVkLyV5XCIsXG4gICAgICAgICAgICAgIFwiJVhcIjogXCIlSDolTTolU1wiLFxuICAgICAgICAgICAgICBcIiVFY1wiOiBcIiVjXCIsXG4gICAgICAgICAgICAgIFwiJUVDXCI6IFwiJUNcIixcbiAgICAgICAgICAgICAgXCIlRXhcIjogXCIlbS8lZC8leVwiLFxuICAgICAgICAgICAgICBcIiVFWFwiOiBcIiVIOiVNOiVTXCIsXG4gICAgICAgICAgICAgIFwiJUV5XCI6IFwiJXlcIixcbiAgICAgICAgICAgICAgXCIlRVlcIjogXCIlWVwiLFxuICAgICAgICAgICAgICBcIiVPZFwiOiBcIiVkXCIsXG4gICAgICAgICAgICAgIFwiJU9lXCI6IFwiJWVcIixcbiAgICAgICAgICAgICAgXCIlT0hcIjogXCIlSFwiLFxuICAgICAgICAgICAgICBcIiVPSVwiOiBcIiVJXCIsXG4gICAgICAgICAgICAgIFwiJU9tXCI6IFwiJW1cIixcbiAgICAgICAgICAgICAgXCIlT01cIjogXCIlTVwiLFxuICAgICAgICAgICAgICBcIiVPU1wiOiBcIiVTXCIsXG4gICAgICAgICAgICAgIFwiJU91XCI6IFwiJXVcIixcbiAgICAgICAgICAgICAgXCIlT1VcIjogXCIlVVwiLFxuICAgICAgICAgICAgICBcIiVPVlwiOiBcIiVWXCIsXG4gICAgICAgICAgICAgIFwiJU93XCI6IFwiJXdcIixcbiAgICAgICAgICAgICAgXCIlT1dcIjogXCIlV1wiLFxuICAgICAgICAgICAgICBcIiVPeVwiOiBcIiV5XCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKHZhciB2IGluIHEpXG4gICAgICAgICAgICAgIGMgPSBjLnJlcGxhY2UobmV3IFJlZ0V4cCh2LCBcImdcIiksIHFbdl0pO1xuICAgICAgICAgICAgdmFyIHkgPSBcIlN1bmRheSBNb25kYXkgVHVlc2RheSBXZWRuZXNkYXkgVGh1cnNkYXkgRnJpZGF5IFNhdHVyZGF5XCIuc3BsaXQoXCIgXCIpLCBGID0gXCJKYW51YXJ5IEZlYnJ1YXJ5IE1hcmNoIEFwcmlsIE1heSBKdW5lIEp1bHkgQXVndXN0IFNlcHRlbWJlciBPY3RvYmVyIE5vdmVtYmVyIERlY2VtYmVyXCIuc3BsaXQoXCIgXCIpO1xuICAgICAgICAgICAgcSA9IHsgXCIlYVwiOiAoZikgPT4geVtmLk9hXS5zdWJzdHJpbmcoMCwgMyksIFwiJUFcIjogKGYpID0+IHlbZi5PYV0sIFwiJWJcIjogKGYpID0+IEZbZi5ZYV0uc3Vic3RyaW5nKDAsIDMpLCBcIiVCXCI6IChmKSA9PiBGW2YuWWFdLCBcIiVDXCI6IChmKSA9PiBnKChmLlVhICsgMTkwMCkgLyAxMDAgfCAwLCAyKSwgXCIlZFwiOiAoZikgPT4gZyhmLmFiLCAyKSwgXCIlZVwiOiAoZikgPT4gZShmLmFiLCAyLCBcIiBcIiksIFwiJWdcIjogKGYpID0+IG4oZikudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksIFwiJUdcIjogKGYpID0+IG4oZiksIFwiJUhcIjogKGYpID0+IGcoZi5YYSwgMiksIFwiJUlcIjogKGYpID0+IHtcbiAgICAgICAgICAgICAgZiA9IGYuWGE7XG4gICAgICAgICAgICAgIDAgPT0gZiA/IGYgPSAxMiA6IDEyIDwgZiAmJiAoZiAtPSAxMik7XG4gICAgICAgICAgICAgIHJldHVybiBnKGYsIDIpO1xuICAgICAgICAgICAgfSwgXCIlalwiOiAoZikgPT4ge1xuICAgICAgICAgICAgICBmb3IgKHZhciByID0gMCwgdSA9IDA7IHUgPD0gZi5ZYSAtIDE7IHIgKz0gKFkoZi5VYSArIDE5MDApID8gc2IgOiB0YilbdSsrXSlcbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgIHJldHVybiBnKGYuYWIgKyByLCAzKTtcbiAgICAgICAgICAgIH0sIFwiJW1cIjogKGYpID0+IGcoZi5ZYSArIDEsIDIpLCBcIiVNXCI6IChmKSA9PiBnKGYuamIsIDIpLCBcIiVuXCI6ICgpID0+IFwiXFxuXCIsIFwiJXBcIjogKGYpID0+IDAgPD0gZi5YYSAmJiAxMiA+IGYuWGEgPyBcIkFNXCIgOiBcIlBNXCIsIFwiJVNcIjogKGYpID0+IGcoZi5rYiwgMiksIFwiJXRcIjogKCkgPT4gXCJcdFwiLCBcIiV1XCI6IChmKSA9PiBmLk9hIHx8IDcsIFwiJVVcIjogKGYpID0+IGcoTWF0aC5mbG9vcigoZi5UYSArIDcgLSBmLk9hKSAvIDcpLCAyKSwgXCIlVlwiOiAoZikgPT4ge1xuICAgICAgICAgICAgICB2YXIgciA9IE1hdGguZmxvb3IoKGYuVGEgKyA3IC0gKGYuT2EgKyA2KSAlIDcpIC8gNyk7XG4gICAgICAgICAgICAgIDIgPj0gKGYuT2EgKyAzNzEgLSBmLlRhIC0gMikgJSA3ICYmIHIrKztcbiAgICAgICAgICAgICAgaWYgKHIpXG4gICAgICAgICAgICAgICAgNTMgPT0gciAmJiAodSA9IChmLk9hICsgMzcxIC0gZi5UYSkgJSA3LCA0ID09IHUgfHwgMyA9PSB1ICYmIFkoZi5VYSkgfHwgKHIgPSAxKSk7XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHIgPSA1MjtcbiAgICAgICAgICAgICAgICB2YXIgdSA9IChmLk9hICsgNyAtIGYuVGEgLSAxKSAlIDc7XG4gICAgICAgICAgICAgICAgKDQgPT0gdSB8fCA1ID09IHUgJiYgWShmLlVhICUgNDAwIC0gMSkpICYmIHIrKztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gZyhyLCAyKTtcbiAgICAgICAgICAgIH0sIFwiJXdcIjogKGYpID0+IGYuT2EsIFwiJVdcIjogKGYpID0+IGcoTWF0aC5mbG9vcigoZi5UYSArIDcgLSAoZi5PYSArIDYpICUgNykgLyA3KSwgMiksIFwiJXlcIjogKGYpID0+IChmLlVhICsgMTkwMCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksIFwiJVlcIjogKGYpID0+IGYuVWEgKyAxOTAwLCBcIiV6XCI6IChmKSA9PiB7XG4gICAgICAgICAgICAgIGYgPSBmLmliO1xuICAgICAgICAgICAgICB2YXIgciA9IDAgPD0gZjtcbiAgICAgICAgICAgICAgZiA9IE1hdGguYWJzKGYpIC8gNjA7XG4gICAgICAgICAgICAgIHJldHVybiAociA/IFwiK1wiIDogXCItXCIpICsgU3RyaW5nKFwiMDAwMFwiICsgKGYgLyA2MCAqIDEwMCArIGYgJSA2MCkpLnNsaWNlKC00KTtcbiAgICAgICAgICAgIH0sIFwiJVpcIjogKGYpID0+IGYubGIsIFwiJSVcIjogKCkgPT4gXCIlXCIgfTtcbiAgICAgICAgICAgIGMgPSBjLnJlcGxhY2UoLyUlL2csIFwiXFwwXFwwXCIpO1xuICAgICAgICAgICAgZm9yICh2IGluIHEpXG4gICAgICAgICAgICAgIGMuaW5jbHVkZXModikgJiYgKGMgPSBjLnJlcGxhY2UobmV3IFJlZ0V4cCh2LCBcImdcIiksIHFbdl0oZCkpKTtcbiAgICAgICAgICAgIGMgPSBjLnJlcGxhY2UoL1xcMFxcMC9nLCBcIiVcIik7XG4gICAgICAgICAgICB2ID0gdWIoYyk7XG4gICAgICAgICAgICBpZiAodi5sZW5ndGggPiBiKVxuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIEEuc2V0KHYsIGEgPj4+IDApO1xuICAgICAgICAgICAgcmV0dXJuIHYubGVuZ3RoIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yICh2YXIgd2IgPSBBcnJheSgyNTYpLCB4YiA9IDA7IDI1NiA+IHhiOyArK3hiKVxuICAgICAgICAgICAgd2JbeGJdID0gU3RyaW5nLmZyb21DaGFyQ29kZSh4Yik7XG4gICAgICAgICAgSGEgPSB3YjtcbiAgICAgICAgICBQID0gaC5CaW5kaW5nRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKGEpIHtcbiAgICAgICAgICAgICAgc3VwZXIoYSk7XG4gICAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiQmluZGluZ0Vycm9yXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBoLkludGVybmFsRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKGEpIHtcbiAgICAgICAgICAgICAgc3VwZXIoYSk7XG4gICAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiSW50ZXJuYWxFcnJvclwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihOYS5wcm90b3R5cGUsIHsgZ2V0KGEpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLlNhW2FdO1xuICAgICAgICAgIH0sIGhhcyhhKSB7XG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0aGlzLlNhW2FdO1xuICAgICAgICAgIH0sIFphKGEpIHtcbiAgICAgICAgICAgIHZhciBiID0gdGhpcy5iYi5wb3AoKSB8fCB0aGlzLlNhLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuU2FbYl0gPSBhO1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgfSwgJGEoYSkge1xuICAgICAgICAgICAgdGhpcy5TYVthXSA9IHZvaWQgMDtcbiAgICAgICAgICAgIHRoaXMuYmIucHVzaChhKTtcbiAgICAgICAgICB9IH0pO1xuICAgICAgICAgIFIuU2EucHVzaCh7IHZhbHVlOiB2b2lkIDAgfSwgeyB2YWx1ZTogbnVsbCB9LCB7IHZhbHVlOiB0cnVlIH0sIHsgdmFsdWU6IGZhbHNlIH0pO1xuICAgICAgICAgIFIuVmEgPSBSLlNhLmxlbmd0aDtcbiAgICAgICAgICBoLmNvdW50X2VtdmFsX2hhbmRsZXMgPSAoKSA9PiB7XG4gICAgICAgICAgICBmb3IgKHZhciBhID0gMCwgYiA9IFIuVmE7IGIgPCBSLlNhLmxlbmd0aDsgKytiKVxuICAgICAgICAgICAgICB2b2lkIDAgIT09IFIuU2FbYl0gJiYgKythO1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgeWIgPSB7IGE6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgbmV3IEJhKGEpLlphKGIgPj4+IDAsIGMgPj4+IDApO1xuICAgICAgICAgICAgQ2EgPSBhO1xuICAgICAgICAgICAgRGErKztcbiAgICAgICAgICAgIHRocm93IENhO1xuICAgICAgICAgIH0sIHY6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfSwgYmE6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH0sIE46IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH0sIFA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH0sIEg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfSwgJDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfSwgVjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfSwgXzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfSwgQjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfSwgTzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfSwgTDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfSwgYWE6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH0sIE06IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIH0sIEU6IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUpIHtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYiA9IE8oYik7XG4gICAgICAgICAgICB2YXIgZyA9IC0xICE9IGIuaW5kZXhPZihcInVcIik7XG4gICAgICAgICAgICBnICYmIChlID0gKDFuIDw8IDY0bikgLSAxbik7XG4gICAgICAgICAgICBRKGEgPj4+IDAsIHsgbmFtZTogYiwgZnJvbVdpcmVUeXBlOiAobCkgPT4gbCwgdG9XaXJlVHlwZTogZnVuY3Rpb24obCwgaykge1xuICAgICAgICAgICAgICBpZiAoXCJiaWdpbnRcIiAhPSB0eXBlb2YgayAmJiBcIm51bWJlclwiICE9IHR5cGVvZiBrKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYENhbm5vdCBjb252ZXJ0IFwiJHtHYShrKX1cIiB0byAke3RoaXMubmFtZX1gKTtcbiAgICAgICAgICAgICAgaWYgKGsgPCBkIHx8IGsgPiBlKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhc3NpbmcgYSBudW1iZXIgXCIke0dhKGspfVwiIGZyb20gSlMgc2lkZSB0byBDL0MrKyBzaWRlIHRvIGFuIGFyZ3VtZW50IG9mIHR5cGUgXCIke2J9XCIsIHdoaWNoIGlzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIFske2R9LCAke2V9XSFgKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGs7XG4gICAgICAgICAgICB9LCBhcmdQYWNrQWR2YW5jZTogOCwgcmVhZFZhbHVlRnJvbVBvaW50ZXI6IE1hKGIsIGMgPj4+IDAsICFnKSwgV2E6IG51bGwgfSk7XG4gICAgICAgICAgfSwgZWE6IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIGIgPSBPKGIgPj4+IDApO1xuICAgICAgICAgICAgUShhID4+PiAwLCB7IG5hbWU6IGIsIGZyb21XaXJlVHlwZTogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICByZXR1cm4gISFlO1xuICAgICAgICAgICAgfSwgdG9XaXJlVHlwZTogZnVuY3Rpb24oZSwgZykge1xuICAgICAgICAgICAgICByZXR1cm4gZyA/IGMgOiBkO1xuICAgICAgICAgICAgfSwgYXJnUGFja0FkdmFuY2U6IDgsIHJlYWRWYWx1ZUZyb21Qb2ludGVyOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmZyb21XaXJlVHlwZShCW2UgPj4+IDBdKTtcbiAgICAgICAgICAgIH0sIFdhOiBudWxsIH0pO1xuICAgICAgICAgIH0sIGRhOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICBiID0gTyhiID4+PiAwKTtcbiAgICAgICAgICAgIFEoYSA+Pj4gMCwge1xuICAgICAgICAgICAgICBuYW1lOiBiLFxuICAgICAgICAgICAgICBmcm9tV2lyZVR5cGU6IChjKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBTKGMpO1xuICAgICAgICAgICAgICAgIE9hKGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB0b1dpcmVUeXBlOiAoYywgZCkgPT4gVChkKSxcbiAgICAgICAgICAgICAgYXJnUGFja0FkdmFuY2U6IDgsXG4gICAgICAgICAgICAgIHJlYWRWYWx1ZUZyb21Qb2ludGVyOiBQYSxcbiAgICAgICAgICAgICAgV2E6IG51bGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIEQ6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIGIgPSBPKGIgPj4+IDApO1xuICAgICAgICAgICAgUShhID4+PiAwLCB7IG5hbWU6IGIsIGZyb21XaXJlVHlwZTogKGQpID0+IGQsIHRvV2lyZVR5cGU6IChkLCBlKSA9PiBlLCBhcmdQYWNrQWR2YW5jZTogOCwgcmVhZFZhbHVlRnJvbVBvaW50ZXI6IFFhKGIsIGMgPj4+IDApLCBXYTogbnVsbCB9KTtcbiAgICAgICAgICB9LCBwOiBmdW5jdGlvbihhLCBiLCBjLCBkLCBlKSB7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgYiA9IE8oYiA+Pj4gMCk7XG4gICAgICAgICAgICAtMSA9PT0gZSAmJiAoZSA9IDQyOTQ5NjcyOTUpO1xuICAgICAgICAgICAgZSA9IChrKSA9PiBrO1xuICAgICAgICAgICAgaWYgKDAgPT09IGQpIHtcbiAgICAgICAgICAgICAgdmFyIGcgPSAzMiAtIDggKiBjO1xuICAgICAgICAgICAgICBlID0gKGspID0+IGsgPDwgZyA+Pj4gZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBsID0gYi5pbmNsdWRlcyhcInVuc2lnbmVkXCIpID8gZnVuY3Rpb24oaywgbikge1xuICAgICAgICAgICAgICByZXR1cm4gbiA+Pj4gMDtcbiAgICAgICAgICAgIH0gOiBmdW5jdGlvbihrLCBuKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFEoYSwge1xuICAgICAgICAgICAgICBuYW1lOiBiLFxuICAgICAgICAgICAgICBmcm9tV2lyZVR5cGU6IGUsXG4gICAgICAgICAgICAgIHRvV2lyZVR5cGU6IGwsXG4gICAgICAgICAgICAgIGFyZ1BhY2tBZHZhbmNlOiA4LFxuICAgICAgICAgICAgICByZWFkVmFsdWVGcm9tUG9pbnRlcjogTWEoYiwgYywgMCAhPT0gZCksXG4gICAgICAgICAgICAgIFdhOiBudWxsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCBsOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBkKGcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBlKEEuYnVmZmVyLCBHW2cgKyA0ID4+PiAyID4+PiAwXSwgR1tnID4+PiAyID4+PiAwXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZSA9IFtJbnQ4QXJyYXksIFVpbnQ4QXJyYXksIEludDE2QXJyYXksIFVpbnQxNkFycmF5LCBJbnQzMkFycmF5LCBVaW50MzJBcnJheSwgRmxvYXQzMkFycmF5LCBGbG9hdDY0QXJyYXksIEJpZ0ludDY0QXJyYXksIEJpZ1VpbnQ2NEFycmF5XVtiXTtcbiAgICAgICAgICAgIGMgPSBPKGMgPj4+IDApO1xuICAgICAgICAgICAgUShhID4+PiAwLCB7IG5hbWU6IGMsIGZyb21XaXJlVHlwZTogZCwgYXJnUGFja0FkdmFuY2U6IDgsIHJlYWRWYWx1ZUZyb21Qb2ludGVyOiBkIH0sIHsgZ2I6IHRydWUgfSk7XG4gICAgICAgICAgfSwgRjogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgYiA9IE8oYiA+Pj4gMCk7XG4gICAgICAgICAgICB2YXIgYyA9IFwic3RkOjpzdHJpbmdcIiA9PT0gYjtcbiAgICAgICAgICAgIFEoYSA+Pj4gMCwgeyBuYW1lOiBiLCBmcm9tV2lyZVR5cGU6IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSBHW2QgPj4+IDIgPj4+IDBdLCBnID0gZCArIDQ7XG4gICAgICAgICAgICAgIGlmIChjKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGwgPSBnLCBrID0gMDsgayA8PSBlOyArK2spIHtcbiAgICAgICAgICAgICAgICAgIHZhciBuID0gZyArIGs7XG4gICAgICAgICAgICAgICAgICBpZiAoayA9PSBlIHx8IDAgPT0gQltuID4+PiAwXSkge1xuICAgICAgICAgICAgICAgICAgICBsID0gTChsLCBuIC0gbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IHEpXG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHEgPSBsO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgcSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDApLCBxICs9IGw7XG4gICAgICAgICAgICAgICAgICAgIGwgPSBuICsgMTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHEgPSBBcnJheShlKTtcbiAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgZTsgKytrKVxuICAgICAgICAgICAgICAgICAgcVtrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoQltnICsgayA+Pj4gMF0pO1xuICAgICAgICAgICAgICAgIHEgPSBxLmpvaW4oXCJcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgVShkKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHE7XG4gICAgICAgICAgICB9LCB0b1dpcmVUeXBlOiBmdW5jdGlvbihkLCBlKSB7XG4gICAgICAgICAgICAgIGUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciAmJiAoZSA9IG5ldyBVaW50OEFycmF5KGUpKTtcbiAgICAgICAgICAgICAgdmFyIGcgPSBcInN0cmluZ1wiID09IHR5cGVvZiBlO1xuICAgICAgICAgICAgICBpZiAoIShnIHx8IGUgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IGUgaW5zdGFuY2VvZiBVaW50OENsYW1wZWRBcnJheSB8fCBlIGluc3RhbmNlb2YgSW50OEFycmF5KSlcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUChcIkNhbm5vdCBwYXNzIG5vbi1zdHJpbmcgdG8gc3RkOjpzdHJpbmdcIik7XG4gICAgICAgICAgICAgIHZhciBsID0gYyAmJiBnID8gTShlKSA6IGUubGVuZ3RoO1xuICAgICAgICAgICAgICB2YXIgayA9IG1iKDQgKyBsICsgMSksIG4gPSBrICsgNDtcbiAgICAgICAgICAgICAgR1trID4+PiAyID4+PiAwXSA9IGw7XG4gICAgICAgICAgICAgIGlmIChjICYmIGcpXG4gICAgICAgICAgICAgICAgTihlLCBCLCBuLCBsICsgMSk7XG4gICAgICAgICAgICAgIGVsc2UgaWYgKGcpXG4gICAgICAgICAgICAgICAgZm9yIChnID0gMDsgZyA8IGw7ICsrZykge1xuICAgICAgICAgICAgICAgICAgdmFyIHEgPSBlLmNoYXJDb2RlQXQoZyk7XG4gICAgICAgICAgICAgICAgICBpZiAoMjU1IDwgcSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgVShuKSwgbmV3IFAoXCJTdHJpbmcgaGFzIFVURi0xNiBjb2RlIHVuaXRzIHRoYXQgZG8gbm90IGZpdCBpbiA4IGJpdHNcIik7XG4gICAgICAgICAgICAgICAgICBCW24gKyBnID4+PiAwXSA9IHE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZm9yIChnID0gMDsgZyA8IGw7ICsrZylcbiAgICAgICAgICAgICAgICAgIEJbbiArIGcgPj4+IDBdID0gZVtnXTtcbiAgICAgICAgICAgICAgbnVsbCAhPT0gZCAmJiBkLnB1c2goVSwgayk7XG4gICAgICAgICAgICAgIHJldHVybiBrO1xuICAgICAgICAgICAgfSwgYXJnUGFja0FkdmFuY2U6IDgsIHJlYWRWYWx1ZUZyb21Qb2ludGVyOiBSYSwgV2EoZCkge1xuICAgICAgICAgICAgICBVKGQpO1xuICAgICAgICAgICAgfSB9KTtcbiAgICAgICAgICB9LCB4OiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgYyA9IE8oYyk7XG4gICAgICAgICAgICBpZiAoMiA9PT0gYikge1xuICAgICAgICAgICAgICB2YXIgZCA9IFRhO1xuICAgICAgICAgICAgICB2YXIgZSA9IFVhO1xuICAgICAgICAgICAgICB2YXIgZyA9IFZhO1xuICAgICAgICAgICAgICB2YXIgbCA9ICgpID0+IEQ7XG4gICAgICAgICAgICAgIHZhciBrID0gMTtcbiAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICA0ID09PSBiICYmIChkID0gV2EsIGUgPSBYYSwgZyA9IFlhLCBsID0gKCkgPT4gRywgayA9IDIpO1xuICAgICAgICAgICAgUShhID4+PiAwLCB7IG5hbWU6IGMsIGZyb21XaXJlVHlwZTogKG4pID0+IHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgcSA9IEdbbiA+Pj4gMiA+Pj4gMF0sIHYgPSBsKCksIHksIEYgPSBuICsgNCwgZiA9IDA7IGYgPD0gcTsgKytmKSB7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSBuICsgNCArIGYgKiBiO1xuICAgICAgICAgICAgICAgIGlmIChmID09IHEgfHwgMCA9PSB2W3IgPj4+IGtdKVxuICAgICAgICAgICAgICAgICAgRiA9IGQoRiwgciAtIEYpLCB2b2lkIDAgPT09IHkgPyB5ID0gRiA6ICh5ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMCksIHkgKz0gRiksIEYgPSByICsgYjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBVKG4pO1xuICAgICAgICAgICAgICByZXR1cm4geTtcbiAgICAgICAgICAgIH0sIHRvV2lyZVR5cGU6IChuLCBxKSA9PiB7XG4gICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiICE9IHR5cGVvZiBxKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBQKGBDYW5ub3QgcGFzcyBub24tc3RyaW5nIHRvIEMrKyBzdHJpbmcgdHlwZSAke2N9YCk7XG4gICAgICAgICAgICAgIHZhciB2ID0gZyhxKSwgeSA9IG1iKDQgKyB2ICsgYik7XG4gICAgICAgICAgICAgIEdbeSA+Pj4gMl0gPSB2ID4+IGs7XG4gICAgICAgICAgICAgIGUocSwgeSArIDQsIHYgKyBiKTtcbiAgICAgICAgICAgICAgbnVsbCAhPT0gbiAmJiBuLnB1c2goVSwgeSk7XG4gICAgICAgICAgICAgIHJldHVybiB5O1xuICAgICAgICAgICAgfSwgYXJnUGFja0FkdmFuY2U6IDgsIHJlYWRWYWx1ZUZyb21Qb2ludGVyOiBQYSwgV2Eobikge1xuICAgICAgICAgICAgICBVKG4pO1xuICAgICAgICAgICAgfSB9KTtcbiAgICAgICAgICB9LCBmYTogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgYiA9IE8oYiA+Pj4gMCk7XG4gICAgICAgICAgICBRKGEgPj4+IDAsIHsgaGI6IHRydWUsIG5hbWU6IGIsIGFyZ1BhY2tBZHZhbmNlOiAwLCBmcm9tV2lyZVR5cGU6ICgpID0+IHtcbiAgICAgICAgICAgIH0sIHRvV2lyZVR5cGU6ICgpID0+IHtcbiAgICAgICAgICAgIH0gfSk7XG4gICAgICAgICAgfSwgY2E6ICgpID0+IHRydWUsIG86IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBhID0gUyhhID4+PiAwKTtcbiAgICAgICAgICAgIGIgPSBWKGIsIFwiZW12YWw6OmFzXCIpO1xuICAgICAgICAgICAgdmFyIGQgPSBbXSwgZSA9IFQoZCk7XG4gICAgICAgICAgICBHW2MgPj4+IDIgPj4+IDBdID0gZTtcbiAgICAgICAgICAgIHJldHVybiBiLnRvV2lyZVR5cGUoZCwgYSk7XG4gICAgICAgICAgfSwgaDogZnVuY3Rpb24oYSwgYiwgYywgZCwgZSkge1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBkID4+Pj0gMDtcbiAgICAgICAgICAgIGUgPj4+PSAwO1xuICAgICAgICAgICAgYSA9IFhbYSA+Pj4gMF07XG4gICAgICAgICAgICBiID0gUyhiID4+PiAwKTtcbiAgICAgICAgICAgIGMgPSBXKGMpO1xuICAgICAgICAgICAgdmFyIGcgPSBbXTtcbiAgICAgICAgICAgIEdbZCA+Pj4gMiA+Pj4gMF0gPSBUKGcpO1xuICAgICAgICAgICAgcmV0dXJuIGEoYiwgYywgZywgZSk7XG4gICAgICAgICAgfSwgcjogZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBkID4+Pj0gMDtcbiAgICAgICAgICAgIGEgPSBYW2EgPj4+IDBdO1xuICAgICAgICAgICAgYiA9IFMoYiA+Pj4gMCk7XG4gICAgICAgICAgICBjID0gVyhjKTtcbiAgICAgICAgICAgIGEoYiwgYywgbnVsbCwgZCk7XG4gICAgICAgICAgfSwgYjogT2EsIHk6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYSA9IFMoYSA+Pj4gMCk7XG4gICAgICAgICAgICBiID0gUyhiKTtcbiAgICAgICAgICAgIHJldHVybiBhID09IGI7XG4gICAgICAgICAgfSwgdTogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBpZiAoMCA9PT0gYSlcbiAgICAgICAgICAgICAgcmV0dXJuIFQoYmIoKSk7XG4gICAgICAgICAgICBhID0gVyhhKTtcbiAgICAgICAgICAgIHJldHVybiBUKGJiKClbYV0pO1xuICAgICAgICAgIH0sIGc6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHZhciBjID0gZGIoYSwgYiA+Pj4gMCksIGQgPSBjWzBdO1xuICAgICAgICAgICAgYiA9IGQubmFtZSArIFwiXyRcIiArIGMuc2xpY2UoMSkubWFwKGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHYubmFtZTtcbiAgICAgICAgICAgIH0pLmpvaW4oXCJfXCIpICsgXCIkXCI7XG4gICAgICAgICAgICB2YXIgZSA9IGZiW2JdO1xuICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gZSlcbiAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICBlID0gW1wicmV0VHlwZVwiXTtcbiAgICAgICAgICAgIGZvciAodmFyIGcgPSBbZF0sIGwgPSBcIlwiLCBrID0gMDsgayA8IGEgLSAxOyArK2spXG4gICAgICAgICAgICAgIGwgKz0gKDAgIT09IGsgPyBcIiwgXCIgOiBcIlwiKSArIFwiYXJnXCIgKyBrLCBlLnB1c2goXCJhcmdUeXBlXCIgKyBrKSwgZy5wdXNoKGNbMSArIGtdKTtcbiAgICAgICAgICAgIHZhciBuID0gXCJyZXR1cm4gZnVuY3Rpb24gXCIgKyBlYihcIm1ldGhvZENhbGxlcl9cIiArIGIpICsgXCIoaGFuZGxlLCBuYW1lLCBkZXN0cnVjdG9ycywgYXJncykge1xcblwiLCBxID0gMDtcbiAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBhIC0gMTsgKytrKVxuICAgICAgICAgICAgICBuICs9IFwiICAgIHZhciBhcmdcIiArIGsgKyBcIiA9IGFyZ1R5cGVcIiArIGsgKyBcIi5yZWFkVmFsdWVGcm9tUG9pbnRlcihhcmdzXCIgKyAocSA/IFwiK1wiICsgcSA6IFwiXCIpICsgXCIpO1xcblwiLCBxICs9IGNbayArIDFdLmFyZ1BhY2tBZHZhbmNlO1xuICAgICAgICAgICAgbiArPSBcIiAgICB2YXIgcnYgPSBoYW5kbGVbbmFtZV0oXCIgKyBsICsgXCIpO1xcblwiO1xuICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGEgLSAxOyArK2spXG4gICAgICAgICAgICAgIGNbayArIDFdLmRlbGV0ZU9iamVjdCAmJiAobiArPSBcIiAgICBhcmdUeXBlXCIgKyBrICsgXCIuZGVsZXRlT2JqZWN0KGFyZ1wiICsgayArIFwiKTtcXG5cIik7XG4gICAgICAgICAgICBkLmhiIHx8IChuICs9IFwiICAgIHJldHVybiByZXRUeXBlLnRvV2lyZVR5cGUoZGVzdHJ1Y3RvcnMsIHJ2KTtcXG5cIik7XG4gICAgICAgICAgICBlLnB1c2gobiArIFwifTtcXG5cIik7XG4gICAgICAgICAgICBhID0gaGIoZSkuYXBwbHkobnVsbCwgZyk7XG4gICAgICAgICAgICBlID0gY2IoYSk7XG4gICAgICAgICAgICByZXR1cm4gZmJbYl0gPSBlO1xuICAgICAgICAgIH0sIHE6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYSA9IFMoYSA+Pj4gMCk7XG4gICAgICAgICAgICBiID0gUyhiKTtcbiAgICAgICAgICAgIHJldHVybiBUKGFbYl0pO1xuICAgICAgICAgIH0sIGM6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgNCA8IGEgJiYgKFIuZ2V0KGEpLmNiICs9IDEpO1xuICAgICAgICAgIH0sIEc6IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgZCA+Pj49IDA7XG4gICAgICAgICAgICBhID0gUyhhID4+PiAwKTtcbiAgICAgICAgICAgIHZhciBlID0gamJbYl07XG4gICAgICAgICAgICBlIHx8IChlID0gaWIoYiksIGpiW2JdID0gZSk7XG4gICAgICAgICAgICByZXR1cm4gZShhLCBjLCBkKTtcbiAgICAgICAgICB9LCBzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBUKFtdKTtcbiAgICAgICAgICB9LCBrOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICBhID0gUyhhID4+PiAwKTtcbiAgICAgICAgICAgIGZvciAodmFyIGIgPSBBcnJheShhLmxlbmd0aCksIGMgPSAwOyBjIDwgYS5sZW5ndGg7IGMrKylcbiAgICAgICAgICAgICAgYltjXSA9IGFbY107XG4gICAgICAgICAgICByZXR1cm4gVChiKTtcbiAgICAgICAgICB9LCBkOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICByZXR1cm4gVChXKGEgPj4+IDApKTtcbiAgICAgICAgICB9LCBqOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBUKHt9KTtcbiAgICAgICAgICB9LCBlOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIGIgPSBTKGEpOyBiLmxlbmd0aDsgKSB7XG4gICAgICAgICAgICAgIHZhciBjID0gYi5wb3AoKTtcbiAgICAgICAgICAgICAgYi5wb3AoKShjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIE9hKGEpO1xuICAgICAgICAgIH0sIGk6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBhID0gUyhhID4+PiAwKTtcbiAgICAgICAgICAgIGIgPSBTKGIpO1xuICAgICAgICAgICAgYyA9IFMoYyk7XG4gICAgICAgICAgICBhW2JdID0gYztcbiAgICAgICAgICB9LCBmOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIGEgPSBWKGEgPj4+IDAsIFwiX2VtdmFsX3Rha2VfdmFsdWVcIik7XG4gICAgICAgICAgICBhID0gYS5yZWFkVmFsdWVGcm9tUG9pbnRlcihiKTtcbiAgICAgICAgICAgIHJldHVybiBUKGEpO1xuICAgICAgICAgIH0sIFM6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIGEgPSAtOTAwNzE5OTI1NDc0MDk5MiA+IGEgfHwgOTAwNzE5OTI1NDc0MDk5MiA8IGEgPyBOYU4gOiBOdW1iZXIoYSk7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIGEgPSBuZXcgRGF0ZSgxZTMgKiBhKTtcbiAgICAgICAgICAgIEVbYiA+Pj4gMiA+Pj4gMF0gPSBhLmdldFVUQ1NlY29uZHMoKTtcbiAgICAgICAgICAgIEVbYiArIDQgPj4+IDIgPj4+IDBdID0gYS5nZXRVVENNaW51dGVzKCk7XG4gICAgICAgICAgICBFW2IgKyA4ID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDSG91cnMoKTtcbiAgICAgICAgICAgIEVbYiArIDEyID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICAgICAgRVtiICsgMTYgPj4+IDIgPj4+IDBdID0gYS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgRVtiICsgMjAgPj4+IDIgPj4+IDBdID0gYS5nZXRVVENGdWxsWWVhcigpIC0gMTkwMDtcbiAgICAgICAgICAgIEVbYiArIDI0ID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgICBFW2IgKyAyOCA+Pj4gMiA+Pj4gMF0gPSAoYS5nZXRUaW1lKCkgLSBEYXRlLlVUQyhhLmdldFVUQ0Z1bGxZZWFyKCksIDAsIDEsIDAsIDAsIDAsIDApKSAvIDg2NGU1IHwgMDtcbiAgICAgICAgICB9LCBUOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICBhID0gLTkwMDcxOTkyNTQ3NDA5OTIgPiBhIHx8IDkwMDcxOTkyNTQ3NDA5OTIgPCBhID8gTmFOIDogTnVtYmVyKGEpO1xuICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICBhID0gbmV3IERhdGUoMWUzICogYSk7XG4gICAgICAgICAgICBFW2IgPj4+IDIgPj4+IDBdID0gYS5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICBFW2IgKyA0ID4+PiAyID4+PiAwXSA9IGEuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgRVtiICsgOCA+Pj4gMiA+Pj4gMF0gPSBhLmdldEhvdXJzKCk7XG4gICAgICAgICAgICBFW2IgKyAxMiA+Pj4gMiA+Pj4gMF0gPSBhLmdldERhdGUoKTtcbiAgICAgICAgICAgIEVbYiArIDE2ID4+PiAyID4+PiAwXSA9IGEuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgIEVbYiArIDIwID4+PiAyID4+PiAwXSA9IGEuZ2V0RnVsbFllYXIoKSAtIDE5MDA7XG4gICAgICAgICAgICBFW2IgKyAyNCA+Pj4gMiA+Pj4gMF0gPSBhLmdldERheSgpO1xuICAgICAgICAgICAgRVtiICsgMjggPj4+IDIgPj4+IDBdID0gKFkoYS5nZXRGdWxsWWVhcigpKSA/IGtiIDogbGIpW2EuZ2V0TW9udGgoKV0gKyBhLmdldERhdGUoKSAtIDEgfCAwO1xuICAgICAgICAgICAgRVtiICsgMzYgPj4+IDIgPj4+IDBdID0gLSg2MCAqIGEuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgICAgICAgICB2YXIgYyA9IG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwgNiwgMSkuZ2V0VGltZXpvbmVPZmZzZXQoKSwgZCA9IG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwgMCwgMSkuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgIEVbYiArIDMyID4+PiAyID4+PiAwXSA9IChjICE9IGQgJiYgYS5nZXRUaW1lem9uZU9mZnNldCgpID09IE1hdGgubWluKGQsIGMpKSB8IDA7XG4gICAgICAgICAgfSwgVTogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICB2YXIgYiA9IG5ldyBEYXRlKEVbYSArIDIwID4+PiAyID4+PiAwXSArIDE5MDAsIEVbYSArIDE2ID4+PiAyID4+PiAwXSwgRVthICsgMTIgPj4+IDIgPj4+IDBdLCBFW2EgKyA4ID4+PiAyID4+PiAwXSwgRVthICsgNCA+Pj4gMiA+Pj4gMF0sIEVbYSA+Pj4gMiA+Pj4gMF0sIDApLCBjID0gRVthICsgMzIgPj4+IDIgPj4+IDBdLCBkID0gYi5nZXRUaW1lem9uZU9mZnNldCgpLCBlID0gbmV3IERhdGUoYi5nZXRGdWxsWWVhcigpLCA2LCAxKS5nZXRUaW1lem9uZU9mZnNldCgpLCBnID0gbmV3IERhdGUoYi5nZXRGdWxsWWVhcigpLCAwLCAxKS5nZXRUaW1lem9uZU9mZnNldCgpLCBsID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgIGcsXG4gICAgICAgICAgICAgIGVcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICAwID4gYyA/IEVbYSArIDMyID4+PiAyID4+PiAwXSA9IE51bWJlcihlICE9IGcgJiYgbCA9PSBkKSA6IDAgPCBjICE9IChsID09IGQpICYmIChlID0gTWF0aC5tYXgoZywgZSksIGIuc2V0VGltZShiLmdldFRpbWUoKSArIDZlNCAqICgoMCA8IGMgPyBsIDogZSkgLSBkKSkpO1xuICAgICAgICAgICAgRVthICsgMjQgPj4+IDIgPj4+IDBdID0gYi5nZXREYXkoKTtcbiAgICAgICAgICAgIEVbYSArIDI4ID4+PiAyID4+PiAwXSA9IChZKGIuZ2V0RnVsbFllYXIoKSkgPyBrYiA6IGxiKVtiLmdldE1vbnRoKCldICsgYi5nZXREYXRlKCkgLSAxIHwgMDtcbiAgICAgICAgICAgIEVbYSA+Pj4gMiA+Pj4gMF0gPSBiLmdldFNlY29uZHMoKTtcbiAgICAgICAgICAgIEVbYSArIDQgPj4+IDIgPj4+IDBdID0gYi5nZXRNaW51dGVzKCk7XG4gICAgICAgICAgICBFW2EgKyA4ID4+PiAyID4+PiAwXSA9IGIuZ2V0SG91cnMoKTtcbiAgICAgICAgICAgIEVbYSArIDEyID4+PiAyID4+PiAwXSA9IGIuZ2V0RGF0ZSgpO1xuICAgICAgICAgICAgRVthICsgMTYgPj4+IDIgPj4+IDBdID0gYi5nZXRNb250aCgpO1xuICAgICAgICAgICAgRVthICsgMjAgPj4+IDIgPj4+IDBdID0gYi5nZXRZZWFyKCk7XG4gICAgICAgICAgICByZXR1cm4gQmlnSW50KGIuZ2V0VGltZSgpIC8gMWUzKTtcbiAgICAgICAgICB9LCBROiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAtNTI7XG4gICAgICAgICAgfSwgUjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgfSwgSjogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgZnVuY3Rpb24gZChuKSB7XG4gICAgICAgICAgICAgIHJldHVybiAobiA9IG4udG9UaW1lU3RyaW5nKCkubWF0Y2goL1xcKChbQS1aYS16IF0rKVxcKSQvKSkgPyBuWzFdIDogXCJHTVRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgdmFyIGUgPSAoLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCkpLmdldEZ1bGxZZWFyKCksIGcgPSBuZXcgRGF0ZShlLCAwLCAxKSwgbCA9IG5ldyBEYXRlKGUsIDYsIDEpO1xuICAgICAgICAgICAgZSA9IGcuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgIHZhciBrID0gbC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgR1thID4+PiAwID4+PiAyID4+PiAwXSA9IDYwICogTWF0aC5tYXgoZSwgayk7XG4gICAgICAgICAgICBFW2IgPj4+IDAgPj4+IDIgPj4+IDBdID0gTnVtYmVyKGUgIT0gayk7XG4gICAgICAgICAgICBhID0gZChnKTtcbiAgICAgICAgICAgIGIgPSBkKGwpO1xuICAgICAgICAgICAgYSA9IG5iKGEpO1xuICAgICAgICAgICAgYiA9IG5iKGIpO1xuICAgICAgICAgICAgayA8IGUgPyAoR1tjID4+PiAyID4+PiAwXSA9IGEsIEdbYyArIDQgPj4+IDIgPj4+IDBdID0gYikgOiAoR1tjID4+PiAyID4+PiAwXSA9IGIsIEdbYyArIDQgPj4+IDIgPj4+IDBdID0gYSk7XG4gICAgICAgICAgfSwgdDogKCkgPT4ge1xuICAgICAgICAgICAga2EoXCJcIik7XG4gICAgICAgICAgfSwgQzogKCkgPT4gRGF0ZS5ub3coKSwgSzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gNDI5NDkwMTc2MDtcbiAgICAgICAgICB9LCBuOiAoKSA9PiBwZXJmb3JtYW5jZS5ub3coKSwgWjogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICByZXR1cm4gQi5jb3B5V2l0aGluKGEgPj4+IDAgPj4+IDAsIGIgPj4+IDAsIGIgKyAoYyA+Pj4gMCkgPj4+IDApO1xuICAgICAgICAgIH0sIEk6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgdmFyIGIgPSBCLmxlbmd0aDtcbiAgICAgICAgICAgIGlmICg0Mjk0OTAxNzYwIDwgYSlcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDE7IDQgPj0gYzsgYyAqPSAyKSB7XG4gICAgICAgICAgICAgIHZhciBkID0gYiAqICgxICsgMC4yIC8gYyk7XG4gICAgICAgICAgICAgIGQgPSBNYXRoLm1pbihkLCBhICsgMTAwNjYzMjk2KTtcbiAgICAgICAgICAgICAgdmFyIGUgPSBNYXRoO1xuICAgICAgICAgICAgICBkID0gTWF0aC5tYXgoYSwgZCk7XG4gICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICBlID0gKGUubWluLmNhbGwoZSwgNDI5NDkwMTc2MCwgZCArICg2NTUzNiAtIGQgJSA2NTUzNikgJSA2NTUzNikgLSB6LmJ1ZmZlci5ieXRlTGVuZ3RoICsgNjU1MzUpIC8gNjU1MzY7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHouZ3JvdyhlKTtcbiAgICAgICAgICAgICAgICAgIHFhKCk7XG4gICAgICAgICAgICAgICAgICB2YXIgZyA9IDE7XG4gICAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGwpIHtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZyA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZylcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9LCBYOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgdmFyIGMgPSAwO1xuICAgICAgICAgICAgcWIoKS5mb3JFYWNoKChkLCBlKSA9PiB7XG4gICAgICAgICAgICAgIHZhciBnID0gYiArIGM7XG4gICAgICAgICAgICAgIGUgPSBHW2EgKyA0ICogZSA+Pj4gMiA+Pj4gMF0gPSBnO1xuICAgICAgICAgICAgICBmb3IgKGcgPSAwOyBnIDwgZC5sZW5ndGg7ICsrZylcbiAgICAgICAgICAgICAgICBBW2UrKyA+Pj4gMCA+Pj4gMF0gPSBkLmNoYXJDb2RlQXQoZyk7XG4gICAgICAgICAgICAgIEFbZSA+Pj4gMCA+Pj4gMF0gPSAwO1xuICAgICAgICAgICAgICBjICs9IGQubGVuZ3RoICsgMTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfSwgWTogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciBjID0gcWIoKTtcbiAgICAgICAgICAgIEdbYSA+Pj4gMiA+Pj4gMF0gPSBjLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBkID0gMDtcbiAgICAgICAgICAgIGMuZm9yRWFjaCgoZSkgPT4gZCArPSBlLmxlbmd0aCArIDEpO1xuICAgICAgICAgICAgR1tiID4+PiAyID4+PiAwXSA9IGQ7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9LCB3OiAoKSA9PiA1MiwgQTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gNTI7XG4gICAgICAgICAgfSwgVzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gNzA7XG4gICAgICAgICAgfSwgejogZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgIGQgPj4+PSAwO1xuICAgICAgICAgICAgZm9yICh2YXIgZSA9IDAsIGcgPSAwOyBnIDwgYzsgZysrKSB7XG4gICAgICAgICAgICAgIHZhciBsID0gR1tiID4+PiAyID4+PiAwXSwgayA9IEdbYiArIDQgPj4+IDIgPj4+IDBdO1xuICAgICAgICAgICAgICBiICs9IDg7XG4gICAgICAgICAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgazsgbisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHEgPSBCW2wgKyBuID4+PiAwXSwgdiA9IHJiW2FdO1xuICAgICAgICAgICAgICAgIDAgPT09IHEgfHwgMTAgPT09IHEgPyAoKDEgPT09IGEgPyBqYSA6IHgpKEZhKHYsIDApKSwgdi5sZW5ndGggPSAwKSA6IHYucHVzaChxKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlICs9IGs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBHW2QgPj4+IDIgPj4+IDBdID0gZTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH0sIGdhOiB2YiwgbTogZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgcmV0dXJuIHZiKGEgPj4+IDAsIGIgPj4+IDAsIGMgPj4+IDAsIGQgPj4+IDApO1xuICAgICAgICAgIH0gfSwgWiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGEgPSB7IGE6IHliIH07XG4gICAgICAgICAgICBJKys7XG4gICAgICAgICAgICBBYShhLCBmdW5jdGlvbihiKSB7XG4gICAgICAgICAgICAgIFogPSBiLmluc3RhbmNlLmV4cG9ydHM7XG4gICAgICAgICAgICAgIFogPSB6YigpO1xuICAgICAgICAgICAgICB6ID0gWi5oYTtcbiAgICAgICAgICAgICAgcWEoKTtcbiAgICAgICAgICAgICAgc2EudW5zaGlmdChaLmlhKTtcbiAgICAgICAgICAgICAgSS0tO1xuICAgICAgICAgICAgICAwID09IEkgJiYgKG51bGwgIT09IHVhICYmIChjbGVhckludGVydmFsKHVhKSwgdWEgPSBudWxsKSwgSiAmJiAoYiA9IEosIEogPSBudWxsLCBiKCkpKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGJhKTtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICB9KCk7XG4gICAgICAgICAgaC5fT3J0SW5pdCA9IChhLCBiKSA9PiAoaC5fT3J0SW5pdCA9IFouamEpKGEsIGIpO1xuICAgICAgICAgIGguX09ydEdldExhc3RFcnJvciA9IChhLCBiKSA9PiAoaC5fT3J0R2V0TGFzdEVycm9yID0gWi5rYSkoYSwgYik7XG4gICAgICAgICAgaC5fT3J0Q3JlYXRlU2Vzc2lvbk9wdGlvbnMgPSAoYSwgYiwgYywgZCwgZSwgZywgbCwgaywgbiwgcSkgPT4gKGguX09ydENyZWF0ZVNlc3Npb25PcHRpb25zID0gWi5sYSkoYSwgYiwgYywgZCwgZSwgZywgbCwgaywgbiwgcSk7XG4gICAgICAgICAgaC5fT3J0QXBwZW5kRXhlY3V0aW9uUHJvdmlkZXIgPSAoYSwgYikgPT4gKGguX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyID0gWi5tYSkoYSwgYik7XG4gICAgICAgICAgaC5fT3J0QWRkRnJlZURpbWVuc2lvbk92ZXJyaWRlID0gKGEsIGIsIGMpID0+IChoLl9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGUgPSBaLm5hKShhLCBiLCBjKTtcbiAgICAgICAgICBoLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkgPSAoYSwgYiwgYykgPT4gKGguX09ydEFkZFNlc3Npb25Db25maWdFbnRyeSA9IFoub2EpKGEsIGIsIGMpO1xuICAgICAgICAgIGguX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucyA9IChhKSA9PiAoaC5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zID0gWi5wYSkoYSk7XG4gICAgICAgICAgaC5fT3J0Q3JlYXRlU2Vzc2lvbiA9IChhLCBiLCBjKSA9PiAoaC5fT3J0Q3JlYXRlU2Vzc2lvbiA9IFoucWEpKGEsIGIsIGMpO1xuICAgICAgICAgIGguX09ydFJlbGVhc2VTZXNzaW9uID0gKGEpID0+IChoLl9PcnRSZWxlYXNlU2Vzc2lvbiA9IFoucmEpKGEpO1xuICAgICAgICAgIGguX09ydEdldElucHV0T3V0cHV0Q291bnQgPSAoYSwgYiwgYykgPT4gKGguX09ydEdldElucHV0T3V0cHV0Q291bnQgPSBaLnNhKShhLCBiLCBjKTtcbiAgICAgICAgICBoLl9PcnRHZXRJbnB1dE5hbWUgPSAoYSwgYikgPT4gKGguX09ydEdldElucHV0TmFtZSA9IFoudGEpKGEsIGIpO1xuICAgICAgICAgIGguX09ydEdldE91dHB1dE5hbWUgPSAoYSwgYikgPT4gKGguX09ydEdldE91dHB1dE5hbWUgPSBaLnVhKShhLCBiKTtcbiAgICAgICAgICBoLl9PcnRGcmVlID0gKGEpID0+IChoLl9PcnRGcmVlID0gWi52YSkoYSk7XG4gICAgICAgICAgaC5fT3J0Q3JlYXRlVGVuc29yID0gKGEsIGIsIGMsIGQsIGUsIGcpID0+IChoLl9PcnRDcmVhdGVUZW5zb3IgPSBaLndhKShhLCBiLCBjLCBkLCBlLCBnKTtcbiAgICAgICAgICBoLl9PcnRHZXRUZW5zb3JEYXRhID0gKGEsIGIsIGMsIGQsIGUpID0+IChoLl9PcnRHZXRUZW5zb3JEYXRhID0gWi54YSkoYSwgYiwgYywgZCwgZSk7XG4gICAgICAgICAgaC5fT3J0UmVsZWFzZVRlbnNvciA9IChhKSA9PiAoaC5fT3J0UmVsZWFzZVRlbnNvciA9IFoueWEpKGEpO1xuICAgICAgICAgIGguX09ydENyZWF0ZVJ1bk9wdGlvbnMgPSAoYSwgYiwgYywgZCkgPT4gKGguX09ydENyZWF0ZVJ1bk9wdGlvbnMgPSBaLnphKShhLCBiLCBjLCBkKTtcbiAgICAgICAgICBoLl9PcnRBZGRSdW5Db25maWdFbnRyeSA9IChhLCBiLCBjKSA9PiAoaC5fT3J0QWRkUnVuQ29uZmlnRW50cnkgPSBaLkFhKShhLCBiLCBjKTtcbiAgICAgICAgICBoLl9PcnRSZWxlYXNlUnVuT3B0aW9ucyA9IChhKSA9PiAoaC5fT3J0UmVsZWFzZVJ1bk9wdGlvbnMgPSBaLkJhKShhKTtcbiAgICAgICAgICBoLl9PcnRDcmVhdGVCaW5kaW5nID0gKGEpID0+IChoLl9PcnRDcmVhdGVCaW5kaW5nID0gWi5DYSkoYSk7XG4gICAgICAgICAgaC5fT3J0QmluZElucHV0ID0gKGEsIGIsIGMpID0+IChoLl9PcnRCaW5kSW5wdXQgPSBaLkRhKShhLCBiLCBjKTtcbiAgICAgICAgICBoLl9PcnRCaW5kT3V0cHV0ID0gKGEsIGIsIGMsIGQpID0+IChoLl9PcnRCaW5kT3V0cHV0ID0gWi5FYSkoYSwgYiwgYywgZCk7XG4gICAgICAgICAgaC5fT3J0Q2xlYXJCb3VuZE91dHB1dHMgPSAoYSkgPT4gKGguX09ydENsZWFyQm91bmRPdXRwdXRzID0gWi5GYSkoYSk7XG4gICAgICAgICAgaC5fT3J0UmVsZWFzZUJpbmRpbmcgPSAoYSkgPT4gKGguX09ydFJlbGVhc2VCaW5kaW5nID0gWi5HYSkoYSk7XG4gICAgICAgICAgaC5fT3J0UnVuV2l0aEJpbmRpbmcgPSAoYSwgYiwgYywgZCwgZSkgPT4gKGguX09ydFJ1bldpdGhCaW5kaW5nID0gWi5IYSkoYSwgYiwgYywgZCwgZSk7XG4gICAgICAgICAgaC5fT3J0UnVuID0gKGEsIGIsIGMsIGQsIGUsIGcsIGwsIGspID0+IChoLl9PcnRSdW4gPSBaLklhKShhLCBiLCBjLCBkLCBlLCBnLCBsLCBrKTtcbiAgICAgICAgICBoLl9PcnRFbmRQcm9maWxpbmcgPSAoYSkgPT4gKGguX09ydEVuZFByb2ZpbGluZyA9IFouSmEpKGEpO1xuICAgICAgICAgIHZhciBtYiA9IGguX21hbGxvYyA9IChhKSA9PiAobWIgPSBoLl9tYWxsb2MgPSBaLkthKShhKSwgVSA9IGguX2ZyZWUgPSAoYSkgPT4gKFUgPSBoLl9mcmVlID0gWi5MYSkoYSksIFphID0gKGEpID0+IChaYSA9IFouTWEpKGEpO1xuICAgICAgICAgIGguX19lbWJpbmRfaW5pdGlhbGl6ZV9iaW5kaW5ncyA9ICgpID0+IChoLl9fZW1iaW5kX2luaXRpYWxpemVfYmluZGluZ3MgPSBaLk5hKSgpO1xuICAgICAgICAgIHZhciBBYiA9ICgpID0+IChBYiA9IFouUGEpKCksIEJiID0gKGEpID0+IChCYiA9IFouUWEpKGEpLCBDYiA9IChhKSA9PiAoQ2IgPSBaLlJhKShhKTtcbiAgICAgICAgICBmdW5jdGlvbiB6YigpIHtcbiAgICAgICAgICAgIHZhciBhID0gWjtcbiAgICAgICAgICAgIGEgPSBPYmplY3QuYXNzaWduKHt9LCBhKTtcbiAgICAgICAgICAgIHZhciBiID0gKGQpID0+ICgpID0+IGQoKSA+Pj4gMCwgYyA9IChkKSA9PiAoZSkgPT4gZChlKSA+Pj4gMDtcbiAgICAgICAgICAgIGEuX19lcnJub19sb2NhdGlvbiA9IGIoYS5fX2Vycm5vX2xvY2F0aW9uKTtcbiAgICAgICAgICAgIGEuS2EgPSBjKGEuS2EpO1xuICAgICAgICAgICAgYS5NYSA9IGMoYS5NYSk7XG4gICAgICAgICAgICBhLlBhID0gYihhLlBhKTtcbiAgICAgICAgICAgIGEuUmEgPSBjKGEuUmEpO1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGguc3RhY2tBbGxvYyA9IENiO1xuICAgICAgICAgIGguc3RhY2tTYXZlID0gQWI7XG4gICAgICAgICAgaC5zdGFja1Jlc3RvcmUgPSBCYjtcbiAgICAgICAgICBoLlVURjhUb1N0cmluZyA9IEw7XG4gICAgICAgICAgaC5zdHJpbmdUb1VURjggPSAoYSwgYiwgYykgPT4gTihhLCBCLCBiLCBjKTtcbiAgICAgICAgICBoLmxlbmd0aEJ5dGVzVVRGOCA9IE07XG4gICAgICAgICAgdmFyIERiO1xuICAgICAgICAgIEogPSBmdW5jdGlvbiBFYigpIHtcbiAgICAgICAgICAgIERiIHx8IEZiKCk7XG4gICAgICAgICAgICBEYiB8fCAoSiA9IEViKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIEZiKCkge1xuICAgICAgICAgICAgaWYgKCEoMCA8IEkpKSB7XG4gICAgICAgICAgICAgIGZvciAoOyAwIDwgcmEubGVuZ3RoOyApXG4gICAgICAgICAgICAgICAgcmEuc2hpZnQoKShoKTtcbiAgICAgICAgICAgICAgaWYgKCEoMCA8IEkgfHwgRGIgfHwgKERiID0gdHJ1ZSwgaC5jYWxsZWRSdW4gPSB0cnVlLCBsYSkpKSB7XG4gICAgICAgICAgICAgICAgZm9yICg7IDAgPCBzYS5sZW5ndGg7IClcbiAgICAgICAgICAgICAgICAgIHNhLnNoaWZ0KCkoaCk7XG4gICAgICAgICAgICAgICAgZm9yIChhYShoKTsgMCA8IHRhLmxlbmd0aDsgKVxuICAgICAgICAgICAgICAgICAgdGEuc2hpZnQoKShoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBGYigpO1xuICAgICAgICAgIHJldHVybiBtb2R1bGVBcmcucmVhZHk7XG4gICAgICAgIH07XG4gICAgICB9KSgpO1xuICAgICAgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIpXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gb3J0V2FzbTtcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmVbXCJhbWRcIl0pXG4gICAgICAgIGRlZmluZShbXSwgKCkgPT4gb3J0V2FzbSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBub2RlanMtaWdub3JlOndvcmtlcl90aHJlYWRzXG4gIHZhciByZXF1aXJlX3dvcmtlcl90aHJlYWRzID0gX19jb21tb25KUyh7XG4gICAgXCJub2RlanMtaWdub3JlOndvcmtlcl90aHJlYWRzXCIoKSB7XG4gICAgfVxuICB9KTtcblxuICAvLyBub2RlanMtaWdub3JlOnBlcmZfaG9va3NcbiAgdmFyIHJlcXVpcmVfcGVyZl9ob29rcyA9IF9fY29tbW9uSlMoe1xuICAgIFwibm9kZWpzLWlnbm9yZTpwZXJmX2hvb2tzXCIoKSB7XG4gICAgfVxuICB9KTtcblxuICAvLyBub2RlanMtaWdub3JlOm9zXG4gIHZhciBvc19leHBvcnRzID0ge307XG4gIF9fZXhwb3J0KG9zX2V4cG9ydHMsIHtcbiAgICBjcHVzOiAoKSA9PiBjcHVzXG4gIH0pO1xuICB2YXIgY3B1cztcbiAgdmFyIGluaXRfb3MgPSBfX2VzbSh7XG4gICAgXCJub2RlanMtaWdub3JlOm9zXCIoKSB7XG4gICAgICBjcHVzID0gdm9pZCAwO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gd2ViL2xpYi93YXNtL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQuanNcbiAgdmFyIHJlcXVpcmVfb3J0X3dhc21fdGhyZWFkZWQgPSBfX2NvbW1vbkpTKHtcbiAgICBcIndlYi9saWIvd2FzbS9iaW5kaW5nL29ydC13YXNtLXRocmVhZGVkLmpzXCIoZXhwb3J0cywgbW9kdWxlKSB7XG4gICAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAgIHZhciBvcnRXYXNtVGhyZWFkZWQgPSAoKCkgPT4ge1xuICAgICAgICB2YXIgX3NjcmlwdERpciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ID8gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMgOiB2b2lkIDA7XG4gICAgICAgIGlmICh0eXBlb2YgX19maWxlbmFtZSAhPT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICBfc2NyaXB0RGlyID0gX3NjcmlwdERpciB8fCBfX2ZpbGVuYW1lO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24obW9kdWxlQXJnID0ge30pIHtcbiAgICAgICAgICBmdW5jdGlvbiBoKCkge1xuICAgICAgICAgICAgbS5idWZmZXIgIT0gbi5idWZmZXIgJiYgcCgpO1xuICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgICAgICBtLmJ1ZmZlciAhPSBuLmJ1ZmZlciAmJiBwKCk7XG4gICAgICAgICAgICByZXR1cm4gYWE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHYoKSB7XG4gICAgICAgICAgICBtLmJ1ZmZlciAhPSBuLmJ1ZmZlciAmJiBwKCk7XG4gICAgICAgICAgICByZXR1cm4gYmE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGNhKCkge1xuICAgICAgICAgICAgbS5idWZmZXIgIT0gbi5idWZmZXIgJiYgcCgpO1xuICAgICAgICAgICAgcmV0dXJuIGRhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB3KCkge1xuICAgICAgICAgICAgbS5idWZmZXIgIT0gbi5idWZmZXIgJiYgcCgpO1xuICAgICAgICAgICAgcmV0dXJuIGVhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB6KCkge1xuICAgICAgICAgICAgbS5idWZmZXIgIT0gbi5idWZmZXIgJiYgcCgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBoYSgpIHtcbiAgICAgICAgICAgIG0uYnVmZmVyICE9IG4uYnVmZmVyICYmIHAoKTtcbiAgICAgICAgICAgIHJldHVybiBpYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIEEgPSBtb2R1bGVBcmcsIGphLCBrYTtcbiAgICAgICAgICBBLnJlYWR5ID0gbmV3IFByb21pc2UoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGphID0gYTtcbiAgICAgICAgICAgIGthID0gYjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgbGEgPSBPYmplY3QuYXNzaWduKHt9LCBBKSwgbWEgPSBcIi4vdGhpcy5wcm9ncmFtXCIsIG5hID0gKGEsIGIpID0+IHtcbiAgICAgICAgICAgIHRocm93IGI7XG4gICAgICAgICAgfSwgb2EgPSBcIm9iamVjdFwiID09IHR5cGVvZiB3aW5kb3csIEIgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGltcG9ydFNjcmlwdHMsIEQgPSBcIm9iamVjdFwiID09IHR5cGVvZiBwcm9jZXNzICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLCBFID0gQS5FTlZJUk9OTUVOVF9JU19QVEhSRUFEIHx8IGZhbHNlLCBGID0gXCJcIjtcbiAgICAgICAgICBmdW5jdGlvbiBwYShhKSB7XG4gICAgICAgICAgICByZXR1cm4gQS5sb2NhdGVGaWxlID8gQS5sb2NhdGVGaWxlKGEsIEYpIDogRiArIGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBxYSwgcmEsIHNhO1xuICAgICAgICAgIGlmIChEKSB7XG4gICAgICAgICAgICB2YXIgZnMgPSAoaW5pdF9mcygpLCBfX3RvQ29tbW9uSlMoZnNfZXhwb3J0cykpLCB0YSA9IChpbml0X3BhdGgoKSwgX190b0NvbW1vbkpTKHBhdGhfZXhwb3J0cykpO1xuICAgICAgICAgICAgRiA9IEIgPyB0YS5kaXJuYW1lKEYpICsgXCIvXCIgOiBfX2Rpcm5hbWUgKyBcIi9cIjtcbiAgICAgICAgICAgIHFhID0gKGIsIGMpID0+IHtcbiAgICAgICAgICAgICAgYiA9IGIuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikgPyBuZXcgVVJMKGIpIDogdGEubm9ybWFsaXplKGIpO1xuICAgICAgICAgICAgICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKGIsIGMgPyB2b2lkIDAgOiBcInV0ZjhcIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgc2EgPSAoYikgPT4ge1xuICAgICAgICAgICAgICBiID0gcWEoYiwgdHJ1ZSk7XG4gICAgICAgICAgICAgIGIuYnVmZmVyIHx8IChiID0gbmV3IFVpbnQ4QXJyYXkoYikpO1xuICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByYSA9IChiLCBjLCBkLCBlID0gdHJ1ZSkgPT4ge1xuICAgICAgICAgICAgICBiID0gYi5zdGFydHNXaXRoKFwiZmlsZTovL1wiKSA/IG5ldyBVUkwoYikgOiB0YS5ub3JtYWxpemUoYik7XG4gICAgICAgICAgICAgIGZzLnJlYWRGaWxlKGIsIGUgPyB2b2lkIDAgOiBcInV0ZjhcIiwgKGYsIGspID0+IHtcbiAgICAgICAgICAgICAgICBmID8gZChmKSA6IGMoZSA/IGsuYnVmZmVyIDogayk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICFBLnRoaXNQcm9ncmFtICYmIDEgPCBwcm9jZXNzLmFyZ3YubGVuZ3RoICYmIChtYSA9IHByb2Nlc3MuYXJndlsxXS5yZXBsYWNlKC9cXFxcL2csIFwiL1wiKSk7XG4gICAgICAgICAgICBwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7XG4gICAgICAgICAgICBuYSA9IChiLCBjKSA9PiB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZXhpdENvZGUgPSBiO1xuICAgICAgICAgICAgICB0aHJvdyBjO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEEuaW5zcGVjdCA9ICgpID0+IFwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cIjtcbiAgICAgICAgICAgIGxldCBhO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYSA9IHJlcXVpcmVfd29ya2VyX3RocmVhZHMoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgdGhyb3cgY29uc29sZS5lcnJvcignVGhlIFwid29ya2VyX3RocmVhZHNcIiBtb2R1bGUgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIG5vZGUuanMgYnVpbGQgLSBwZXJoYXBzIGEgbmV3ZXIgdmVyc2lvbiBpcyBuZWVkZWQ/JyksIGI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnbG9iYWwuV29ya2VyID0gYS5Xb3JrZXI7XG4gICAgICAgICAgfSBlbHNlIGlmIChvYSB8fCBCKVxuICAgICAgICAgICAgQiA/IEYgPSBzZWxmLmxvY2F0aW9uLmhyZWYgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBkb2N1bWVudCAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ICYmIChGID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMpLCB0eXBlb2YgX3NjcmlwdERpciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBfc2NyaXB0RGlyICYmIChGID0gX3NjcmlwdERpciksIDAgIT09IEYuaW5kZXhPZihcImJsb2I6XCIpID8gRiA9IEYuc3Vic3RyKDAsIEYucmVwbGFjZSgvWz8jXS4qLywgXCJcIikubGFzdEluZGV4T2YoXCIvXCIpICsgMSkgOiBGID0gXCJcIiwgRCB8fCAocWEgPSAoYSkgPT4ge1xuICAgICAgICAgICAgICB2YXIgYiA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICBiLm9wZW4oXCJHRVRcIiwgYSwgZmFsc2UpO1xuICAgICAgICAgICAgICBiLnNlbmQobnVsbCk7XG4gICAgICAgICAgICAgIHJldHVybiBiLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgIH0sIEIgJiYgKHNhID0gKGEpID0+IHtcbiAgICAgICAgICAgICAgdmFyIGIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgYi5vcGVuKFwiR0VUXCIsIGEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgYi5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgICAgICAgICAgIGIuc2VuZChudWxsKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGIucmVzcG9uc2UpO1xuICAgICAgICAgICAgfSksIHJhID0gKGEsIGIsIGMpID0+IHtcbiAgICAgICAgICAgICAgdmFyIGQgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgZC5vcGVuKFwiR0VUXCIsIGEsIHRydWUpO1xuICAgICAgICAgICAgICBkLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgICAgICAgICAgICAgZC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgMjAwID09IGQuc3RhdHVzIHx8IDAgPT0gZC5zdGF0dXMgJiYgZC5yZXNwb25zZSA/IGIoZC5yZXNwb25zZSkgOiBjKCk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGQub25lcnJvciA9IGM7XG4gICAgICAgICAgICAgIGQuc2VuZChudWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIEQgJiYgXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgcGVyZm9ybWFuY2UgJiYgKGdsb2JhbC5wZXJmb3JtYW5jZSA9IHJlcXVpcmVfcGVyZl9ob29rcygpLnBlcmZvcm1hbmNlKTtcbiAgICAgICAgICB2YXIgdWEgPSBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpLCB2YSA9IGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlKTtcbiAgICAgICAgICBEICYmICh1YSA9ICguLi5hKSA9PiBmcy53cml0ZVN5bmMoMSwgYS5qb2luKFwiIFwiKSArIFwiXFxuXCIpLCB2YSA9ICguLi5hKSA9PiBmcy53cml0ZVN5bmMoMiwgYS5qb2luKFwiIFwiKSArIFwiXFxuXCIpKTtcbiAgICAgICAgICB2YXIgd2EgPSB1YSwgRyA9IHZhO1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24oQSwgbGEpO1xuICAgICAgICAgIGxhID0gbnVsbDtcbiAgICAgICAgICB2YXIgbm9FeGl0UnVudGltZSA9IHRydWU7XG4gICAgICAgICAgXCJvYmplY3RcIiAhPSB0eXBlb2YgV2ViQXNzZW1ibHkgJiYgSChcIm5vIG5hdGl2ZSB3YXNtIHN1cHBvcnQgZGV0ZWN0ZWRcIik7XG4gICAgICAgICAgdmFyIG0sIHhhLCB5YSA9IGZhbHNlLCBJLCBuLCBhYSwgYmEsIGRhLCBlYSwgZmEsIHphLCBKLCBBYSwgaWE7XG4gICAgICAgICAgZnVuY3Rpb24gcCgpIHtcbiAgICAgICAgICAgIHZhciBhID0gbS5idWZmZXI7XG4gICAgICAgICAgICBBLkhFQVA4ID0gbiA9IG5ldyBJbnQ4QXJyYXkoYSk7XG4gICAgICAgICAgICBBLkhFQVAxNiA9IGJhID0gbmV3IEludDE2QXJyYXkoYSk7XG4gICAgICAgICAgICBBLkhFQVBVOCA9IGFhID0gbmV3IFVpbnQ4QXJyYXkoYSk7XG4gICAgICAgICAgICBBLkhFQVBVMTYgPSBkYSA9IG5ldyBVaW50MTZBcnJheShhKTtcbiAgICAgICAgICAgIEEuSEVBUDMyID0gZWEgPSBuZXcgSW50MzJBcnJheShhKTtcbiAgICAgICAgICAgIEEuSEVBUFUzMiA9IGZhID0gbmV3IFVpbnQzMkFycmF5KGEpO1xuICAgICAgICAgICAgQS5IRUFQRjMyID0gemEgPSBuZXcgRmxvYXQzMkFycmF5KGEpO1xuICAgICAgICAgICAgQS5IRUFQRjY0ID0gaWEgPSBuZXcgRmxvYXQ2NEFycmF5KGEpO1xuICAgICAgICAgICAgQS5IRUFQNjQgPSBKID0gbmV3IEJpZ0ludDY0QXJyYXkoYSk7XG4gICAgICAgICAgICBBLkhFQVBVNjQgPSBBYSA9IG5ldyBCaWdVaW50NjRBcnJheShhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIEJhID0gMTY3NzcyMTY7XG4gICAgICAgICAgNTI0Mjg4MCA8PSBCYSB8fCBIKFwiSU5JVElBTF9NRU1PUlkgc2hvdWxkIGJlIGxhcmdlciB0aGFuIFNUQUNLX1NJWkUsIHdhcyBcIiArIEJhICsgXCIhIChTVEFDS19TSVpFPTUyNDI4ODApXCIpO1xuICAgICAgICAgIGlmIChFKVxuICAgICAgICAgICAgbSA9IEEud2FzbU1lbW9yeTtcbiAgICAgICAgICBlbHNlIGlmIChtID0gbmV3IFdlYkFzc2VtYmx5Lk1lbW9yeSh7IGluaXRpYWw6IEJhIC8gNjU1MzYsIG1heGltdW06IDY1NTM2LCBzaGFyZWQ6IHRydWUgfSksICEobS5idWZmZXIgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcikpXG4gICAgICAgICAgICB0aHJvdyBHKFwicmVxdWVzdGVkIGEgc2hhcmVkIFdlYkFzc2VtYmx5Lk1lbW9yeSBidXQgdGhlIHJldHVybmVkIGJ1ZmZlciBpcyBub3QgYSBTaGFyZWRBcnJheUJ1ZmZlciwgaW5kaWNhdGluZyB0aGF0IHdoaWxlIHRoZSBicm93c2VyIGhhcyBTaGFyZWRBcnJheUJ1ZmZlciBpdCBkb2VzIG5vdCBoYXZlIFdlYkFzc2VtYmx5IHRocmVhZHMgc3VwcG9ydCAtIHlvdSBtYXkgbmVlZCB0byBzZXQgYSBmbGFnXCIpLCBEICYmIEcoXCIob24gbm9kZSB5b3UgbWF5IG5lZWQ6IC0tZXhwZXJpbWVudGFsLXdhc20tdGhyZWFkcyAtLWV4cGVyaW1lbnRhbC13YXNtLWJ1bGstbWVtb3J5IGFuZC9vciByZWNlbnQgdmVyc2lvbilcIiksIEVycm9yKFwiYmFkIG1lbW9yeVwiKTtcbiAgICAgICAgICBwKCk7XG4gICAgICAgICAgQmEgPSBtLmJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgICAgICAgIHZhciBDYSA9IFtdLCBEYSA9IFtdLCBFYSA9IFtdLCBGYSA9IDA7XG4gICAgICAgICAgZnVuY3Rpb24gR2EoKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9FeGl0UnVudGltZSB8fCAwIDwgRmE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBLID0gMCwgSGEgPSBudWxsLCBMID0gbnVsbDtcbiAgICAgICAgICBmdW5jdGlvbiBJYSgpIHtcbiAgICAgICAgICAgIEstLTtcbiAgICAgICAgICAgIGlmICgwID09IEsgJiYgKG51bGwgIT09IEhhICYmIChjbGVhckludGVydmFsKEhhKSwgSGEgPSBudWxsKSwgTCkpIHtcbiAgICAgICAgICAgICAgdmFyIGEgPSBMO1xuICAgICAgICAgICAgICBMID0gbnVsbDtcbiAgICAgICAgICAgICAgYSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBIKGEpIHtcbiAgICAgICAgICAgIGEgPSBcIkFib3J0ZWQoXCIgKyBhICsgXCIpXCI7XG4gICAgICAgICAgICBHKGEpO1xuICAgICAgICAgICAgeWEgPSB0cnVlO1xuICAgICAgICAgICAgSSA9IDE7XG4gICAgICAgICAgICBhID0gbmV3IFdlYkFzc2VtYmx5LlJ1bnRpbWVFcnJvcihhICsgXCIuIEJ1aWxkIHdpdGggLXNBU1NFUlRJT05TIGZvciBtb3JlIGluZm8uXCIpO1xuICAgICAgICAgICAga2EoYSk7XG4gICAgICAgICAgICB0aHJvdyBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBKYShhKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5zdGFydHNXaXRoKFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIE07XG4gICAgICAgICAgTSA9IFwib3J0LXdhc20tdGhyZWFkZWQud2FzbVwiO1xuICAgICAgICAgIEphKE0pIHx8IChNID0gcGEoTSkpO1xuICAgICAgICAgIGZ1bmN0aW9uIEthKGEpIHtcbiAgICAgICAgICAgIGlmIChzYSlcbiAgICAgICAgICAgICAgcmV0dXJuIHNhKGEpO1xuICAgICAgICAgICAgdGhyb3cgXCJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBMYShhKSB7XG4gICAgICAgICAgICBpZiAob2EgfHwgQikge1xuICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBmZXRjaCAmJiAhYS5zdGFydHNXaXRoKFwiZmlsZTovL1wiKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2goYSwgeyBjcmVkZW50aWFsczogXCJzYW1lLW9yaWdpblwiIH0pLnRoZW4oKGIpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmICghYi5vaylcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcIiArIGEgKyBcIidcIjtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBiLmFycmF5QnVmZmVyKCk7XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKCkgPT4gS2EoYSkpO1xuICAgICAgICAgICAgICBpZiAocmEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChiLCBjKSA9PiB7XG4gICAgICAgICAgICAgICAgICByYShhLCAoZCkgPT4gYihuZXcgVWludDhBcnJheShkKSksIGMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4gS2EoYSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBNYShhLCBiLCBjKSB7XG4gICAgICAgICAgICByZXR1cm4gTGEoYSkudGhlbigoZCkgPT4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoZCwgYikpLnRoZW4oKGQpID0+IGQpLnRoZW4oYywgKGQpID0+IHtcbiAgICAgICAgICAgICAgRyhgZmFpbGVkIHRvIGFzeW5jaHJvbm91c2x5IHByZXBhcmUgd2FzbTogJHtkfWApO1xuICAgICAgICAgICAgICBIKGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIE5hKGEsIGIpIHtcbiAgICAgICAgICAgIHZhciBjID0gTTtcbiAgICAgICAgICAgIHJldHVybiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nIHx8IEphKGMpIHx8IGMuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikgfHwgRCB8fCBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGZldGNoID8gTWEoYywgYSwgYikgOiBmZXRjaChjLCB7IGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCIgfSkudGhlbigoZCkgPT4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcoZCwgYSkudGhlbihiLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgIEcoYHdhc20gc3RyZWFtaW5nIGNvbXBpbGUgZmFpbGVkOiAke2V9YCk7XG4gICAgICAgICAgICAgIEcoXCJmYWxsaW5nIGJhY2sgdG8gQXJyYXlCdWZmZXIgaW5zdGFudGlhdGlvblwiKTtcbiAgICAgICAgICAgICAgcmV0dXJuIE1hKGMsIGEsIGIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBPYShhKSB7XG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBcIkV4aXRTdGF0dXNcIjtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IGBQcm9ncmFtIHRlcm1pbmF0ZWQgd2l0aCBleGl0KCR7YX0pYDtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFBhID0gKGEpID0+IHtcbiAgICAgICAgICAgIGEudGVybWluYXRlKCk7XG4gICAgICAgICAgICBhLm9ubWVzc2FnZSA9ICgpID0+IHtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSwgUmEgPSAoYSkgPT4ge1xuICAgICAgICAgICAgMCA9PSBPLm5iLmxlbmd0aCAmJiAoUWEoKSwgTy5BYihPLm5iWzBdKSk7XG4gICAgICAgICAgICB2YXIgYiA9IE8ubmIucG9wKCk7XG4gICAgICAgICAgICBpZiAoIWIpXG4gICAgICAgICAgICAgIHJldHVybiA2O1xuICAgICAgICAgICAgTy5vYi5wdXNoKGIpO1xuICAgICAgICAgICAgTy5qYlthLm1iXSA9IGI7XG4gICAgICAgICAgICBiLm1iID0gYS5tYjtcbiAgICAgICAgICAgIHZhciBjID0geyBjbWQ6IFwicnVuXCIsIHN0YXJ0X3JvdXRpbmU6IGEuTWIsIGFyZzogYS5HYiwgcHRocmVhZF9wdHI6IGEubWIgfTtcbiAgICAgICAgICAgIEQgJiYgYi51bnJlZigpO1xuICAgICAgICAgICAgYi5wb3N0TWVzc2FnZShjLCBhLlNiKTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH0sIFNhID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgVGV4dERlY29kZXIgPyBuZXcgVGV4dERlY29kZXIoXCJ1dGY4XCIpIDogdm9pZCAwLCBUYSA9IChhLCBiLCBjKSA9PiB7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciBkID0gYiArIGM7XG4gICAgICAgICAgICBmb3IgKGMgPSBiOyBhW2NdICYmICEoYyA+PSBkKTsgKVxuICAgICAgICAgICAgICArK2M7XG4gICAgICAgICAgICBpZiAoMTYgPCBjIC0gYiAmJiBhLmJ1ZmZlciAmJiBTYSlcbiAgICAgICAgICAgICAgcmV0dXJuIFNhLmRlY29kZShhLmJ1ZmZlciBpbnN0YW5jZW9mIFNoYXJlZEFycmF5QnVmZmVyID8gYS5zbGljZShiLCBjKSA6IGEuc3ViYXJyYXkoYiwgYykpO1xuICAgICAgICAgICAgZm9yIChkID0gXCJcIjsgYiA8IGM7ICkge1xuICAgICAgICAgICAgICB2YXIgZSA9IGFbYisrXTtcbiAgICAgICAgICAgICAgaWYgKGUgJiAxMjgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZiA9IGFbYisrXSAmIDYzO1xuICAgICAgICAgICAgICAgIGlmICgxOTIgPT0gKGUgJiAyMjQpKVxuICAgICAgICAgICAgICAgICAgZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChlICYgMzEpIDw8IDYgfCBmKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHZhciBrID0gYVtiKytdICYgNjM7XG4gICAgICAgICAgICAgICAgICBlID0gMjI0ID09IChlICYgMjQwKSA/IChlICYgMTUpIDw8IDEyIHwgZiA8PCA2IHwgayA6IChlICYgNykgPDwgMTggfCBmIDw8IDEyIHwgayA8PCA2IHwgYVtiKytdICYgNjM7XG4gICAgICAgICAgICAgICAgICA2NTUzNiA+IGUgPyBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZSkgOiAoZSAtPSA2NTUzNiwgZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2IHwgZSA+PiAxMCwgNTYzMjAgfCBlICYgMTAyMykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgfSwgVWEgPSAoYSwgYikgPT4gKGEgPj4+PSAwKSA/IFRhKHQoKSwgYSwgYikgOiBcIlwiO1xuICAgICAgICAgIGZ1bmN0aW9uIFZhKGEpIHtcbiAgICAgICAgICAgIGlmIChFKVxuICAgICAgICAgICAgICByZXR1cm4gUCgwLCAxLCBhKTtcbiAgICAgICAgICAgIEkgPSBhO1xuICAgICAgICAgICAgR2EoKSB8fCAoTy5OYigpLCB5YSA9IHRydWUpO1xuICAgICAgICAgICAgbmEoYSwgbmV3IE9hKGEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFhhID0gKGEpID0+IHtcbiAgICAgICAgICAgIEkgPSBhO1xuICAgICAgICAgICAgaWYgKEUpXG4gICAgICAgICAgICAgIHRocm93IFdhKGEpLCBcInVud2luZFwiO1xuICAgICAgICAgICAgVmEoYSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmdW5jdGlvbiBZYSgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGEgPSBBLm51bVRocmVhZHM7IGEtLTsgKVxuICAgICAgICAgICAgICBRYSgpO1xuICAgICAgICAgICAgQ2EudW5zaGlmdCgoKSA9PiB7XG4gICAgICAgICAgICAgIEsrKztcbiAgICAgICAgICAgICAgWmEoKCkgPT4gSWEoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gUWEoKSB7XG4gICAgICAgICAgICB2YXIgYSA9IHBhKFwib3J0LXdhc20tdGhyZWFkZWQud29ya2VyLmpzXCIpO1xuICAgICAgICAgICAgYSA9IG5ldyBXb3JrZXIoYSk7XG4gICAgICAgICAgICBPLm5iLnB1c2goYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIFphKGEpIHtcbiAgICAgICAgICAgIEUgPyBhKCkgOiBQcm9taXNlLmFsbChPLm5iLm1hcChPLkFiKSkudGhlbihhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIE8gPSB7IG5iOiBbXSwgb2I6IFtdLCBGYjogW10sIGpiOiB7fSwgdmIoKSB7XG4gICAgICAgICAgICBFID8gKE8ucmVjZWl2ZU9iamVjdFRyYW5zZmVyID0gTy5MYiwgTy50aHJlYWRJbml0VExTID0gTy5FYiwgTy5zZXRFeGl0U3RhdHVzID0gTy5EYiwgbm9FeGl0UnVudGltZSA9IGZhbHNlKSA6IFlhKCk7XG4gICAgICAgICAgfSwgRGI6IChhKSA9PiB7XG4gICAgICAgICAgICBJID0gYTtcbiAgICAgICAgICB9LCBWYjogW1wiJHRlcm1pbmF0ZVdvcmtlclwiXSwgTmI6ICgpID0+IHtcbiAgICAgICAgICAgIGZvciAodmFyIGEgb2YgTy5vYilcbiAgICAgICAgICAgICAgUGEoYSk7XG4gICAgICAgICAgICBmb3IgKGEgb2YgTy5uYilcbiAgICAgICAgICAgICAgUGEoYSk7XG4gICAgICAgICAgICBPLm5iID0gW107XG4gICAgICAgICAgICBPLm9iID0gW107XG4gICAgICAgICAgICBPLmpiID0gW107XG4gICAgICAgICAgfSwgQ2I6IChhKSA9PiB7XG4gICAgICAgICAgICB2YXIgYiA9IGEubWI7XG4gICAgICAgICAgICBkZWxldGUgTy5qYltiXTtcbiAgICAgICAgICAgIE8ubmIucHVzaChhKTtcbiAgICAgICAgICAgIE8ub2Iuc3BsaWNlKE8ub2IuaW5kZXhPZihhKSwgMSk7XG4gICAgICAgICAgICBhLm1iID0gMDtcbiAgICAgICAgICAgICRhKGIpO1xuICAgICAgICAgIH0sIExiKCkge1xuICAgICAgICAgIH0sIEViKCkge1xuICAgICAgICAgICAgTy5GYi5mb3JFYWNoKChhKSA9PiBhKCkpO1xuICAgICAgICAgIH0sIEFiOiAoYSkgPT4gbmV3IFByb21pc2UoKGIpID0+IHtcbiAgICAgICAgICAgIGEub25tZXNzYWdlID0gKGYpID0+IHtcbiAgICAgICAgICAgICAgZiA9IGYuZGF0YTtcbiAgICAgICAgICAgICAgdmFyIGsgPSBmLmNtZDtcbiAgICAgICAgICAgICAgaWYgKGYudGFyZ2V0VGhyZWFkICYmIGYudGFyZ2V0VGhyZWFkICE9IGFiKCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbCA9IE8uamJbZi50YXJnZXRUaHJlYWRdO1xuICAgICAgICAgICAgICAgIGwgPyBsLnBvc3RNZXNzYWdlKGYsIGYudHJhbnNmZXJMaXN0KSA6IEcoYEludGVybmFsIGVycm9yISBXb3JrZXIgc2VudCBhIG1lc3NhZ2UgXCIke2t9XCIgdG8gdGFyZ2V0IHB0aHJlYWQgJHtmLnRhcmdldFRocmVhZH0sIGJ1dCB0aGF0IHRocmVhZCBubyBsb25nZXIgZXhpc3RzIWApO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKFwiY2hlY2tNYWlsYm94XCIgPT09IGspXG4gICAgICAgICAgICAgICAgYmIoKTtcbiAgICAgICAgICAgICAgZWxzZSBpZiAoXCJzcGF3blRocmVhZFwiID09PSBrKVxuICAgICAgICAgICAgICAgIFJhKGYpO1xuICAgICAgICAgICAgICBlbHNlIGlmIChcImNsZWFudXBUaHJlYWRcIiA9PT0gaylcbiAgICAgICAgICAgICAgICAoZiA9IE8uamJbZi50aHJlYWRdKSB8fCBIKCksIE8uQ2IoZik7XG4gICAgICAgICAgICAgIGVsc2UgaWYgKFwia2lsbFRocmVhZFwiID09PSBrKVxuICAgICAgICAgICAgICAgIGYgPSBmLnRocmVhZCwgayA9IE8uamJbZl0sIGRlbGV0ZSBPLmpiW2ZdLCBQYShrKSwgJGEoZiksIE8ub2Iuc3BsaWNlKE8ub2IuaW5kZXhPZihrKSwgMSksIGsubWIgPSAwO1xuICAgICAgICAgICAgICBlbHNlIGlmIChcImNhbmNlbFRocmVhZFwiID09PSBrKVxuICAgICAgICAgICAgICAgIE8uamJbZi50aHJlYWRdLnBvc3RNZXNzYWdlKHsgY21kOiBcImNhbmNlbFwiIH0pO1xuICAgICAgICAgICAgICBlbHNlIGlmIChcImxvYWRlZFwiID09PSBrKVxuICAgICAgICAgICAgICAgIGEubG9hZGVkID0gdHJ1ZSwgRCAmJiAhYS5tYiAmJiBhLnVucmVmKCksIGIoYSk7XG4gICAgICAgICAgICAgIGVsc2UgaWYgKFwiYWxlcnRcIiA9PT0gaylcbiAgICAgICAgICAgICAgICBhbGVydChgVGhyZWFkICR7Zi50aHJlYWRJZH06ICR7Zi50ZXh0fWApO1xuICAgICAgICAgICAgICBlbHNlIGlmIChcInNldGltbWVkaWF0ZVwiID09PSBmLnRhcmdldClcbiAgICAgICAgICAgICAgICBhLnBvc3RNZXNzYWdlKGYpO1xuICAgICAgICAgICAgICBlbHNlIGlmIChcImNhbGxIYW5kbGVyXCIgPT09IGspXG4gICAgICAgICAgICAgICAgQVtmLmhhbmRsZXJdKC4uLmYuYXJncyk7XG4gICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBrICYmIEcoYHdvcmtlciBzZW50IGFuIHVua25vd24gY29tbWFuZCAke2t9YCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYS5vbmVycm9yID0gKGYpID0+IHtcbiAgICAgICAgICAgICAgRyhgJHtcIndvcmtlciBzZW50IGFuIGVycm9yIVwifSAke2YuZmlsZW5hbWV9OiR7Zi5saW5lbm99OiAke2YubWVzc2FnZX1gKTtcbiAgICAgICAgICAgICAgdGhyb3cgZjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBEICYmIChhLm9uKFwibWVzc2FnZVwiLCAoZikgPT4gYS5vbm1lc3NhZ2UoeyBkYXRhOiBmIH0pKSwgYS5vbihcImVycm9yXCIsIChmKSA9PiBhLm9uZXJyb3IoZikpKTtcbiAgICAgICAgICAgIHZhciBjID0gW10sIGQgPSBbXSwgZTtcbiAgICAgICAgICAgIGZvciAoZSBvZiBkKVxuICAgICAgICAgICAgICBBLmhhc093blByb3BlcnR5KGUpICYmIGMucHVzaChlKTtcbiAgICAgICAgICAgIGEucG9zdE1lc3NhZ2UoeyBjbWQ6IFwibG9hZFwiLCBoYW5kbGVyczogYywgdXJsT3JCbG9iOiBBLm1haW5TY3JpcHRVcmxPckJsb2IgfHwgX3NjcmlwdERpciwgd2FzbU1lbW9yeTogbSwgd2FzbU1vZHVsZTogeGEgfSk7XG4gICAgICAgICAgfSkgfTtcbiAgICAgICAgICBBLlBUaHJlYWQgPSBPO1xuICAgICAgICAgIHZhciBjYiA9IChhKSA9PiB7XG4gICAgICAgICAgICBmb3IgKDsgMCA8IGEubGVuZ3RoOyApXG4gICAgICAgICAgICAgIGEuc2hpZnQoKShBKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIEEuZXN0YWJsaXNoU3RhY2tTcGFjZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHZhciBhID0gYWIoKSwgYiA9IHooKVthICsgNTIgPj4+IDIgPj4+IDBdO1xuICAgICAgICAgICAgYSA9IHooKVthICsgNTYgPj4+IDIgPj4+IDBdO1xuICAgICAgICAgICAgZGIoYiwgYiAtIGEpO1xuICAgICAgICAgICAgZWIoYik7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmdW5jdGlvbiBXYShhKSB7XG4gICAgICAgICAgICBpZiAoRSlcbiAgICAgICAgICAgICAgcmV0dXJuIFAoMSwgMCwgYSk7XG4gICAgICAgICAgICBYYShhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGZiID0gW10sIGdiO1xuICAgICAgICAgIEEuaW52b2tlRW50cnlQb2ludCA9IChhLCBiKSA9PiB7XG4gICAgICAgICAgICB2YXIgYyA9IGZiW2FdO1xuICAgICAgICAgICAgYyB8fCAoYSA+PSBmYi5sZW5ndGggJiYgKGZiLmxlbmd0aCA9IGEgKyAxKSwgZmJbYV0gPSBjID0gZ2IuZ2V0KGEpKTtcbiAgICAgICAgICAgIGEgPSBjKGIpO1xuICAgICAgICAgICAgR2EoKSA/IE8uRGIoYSkgOiBoYihhKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIGliKGEpIHtcbiAgICAgICAgICAgIHRoaXMuc2IgPSBhIC0gMjQ7XG4gICAgICAgICAgICB0aGlzLktiID0gZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICB6KClbdGhpcy5zYiArIDQgPj4+IDIgPj4+IDBdID0gYjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnhiID0gZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICB6KClbdGhpcy5zYiArIDggPj4+IDIgPj4+IDBdID0gYjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnZiID0gZnVuY3Rpb24oYiwgYykge1xuICAgICAgICAgICAgICB0aGlzLndiKCk7XG4gICAgICAgICAgICAgIHRoaXMuS2IoYik7XG4gICAgICAgICAgICAgIHRoaXMueGIoYyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy53YiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB6KClbdGhpcy5zYiArIDE2ID4+PiAyID4+PiAwXSA9IDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgamIgPSAwLCBrYiA9IDA7XG4gICAgICAgICAgZnVuY3Rpb24gbGIoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgcmV0dXJuIEUgPyBQKDIsIDEsIGEsIGIsIGMsIGQpIDogbWIoYSwgYiwgYywgZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIG1iKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgIGQgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyKVxuICAgICAgICAgICAgICByZXR1cm4gRyhcIkN1cnJlbnQgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBTaGFyZWRBcnJheUJ1ZmZlciwgcHRocmVhZHMgYXJlIG5vdCBhdmFpbGFibGUhXCIpLCA2O1xuICAgICAgICAgICAgdmFyIGUgPSBbXTtcbiAgICAgICAgICAgIGlmIChFICYmIDAgPT09IGUubGVuZ3RoKVxuICAgICAgICAgICAgICByZXR1cm4gbGIoYSwgYiwgYywgZCk7XG4gICAgICAgICAgICBhID0geyBNYjogYywgbWI6IGEsIEdiOiBkLCBTYjogZSB9O1xuICAgICAgICAgICAgcmV0dXJuIEUgPyAoYS5VYiA9IFwic3Bhd25UaHJlYWRcIiwgcG9zdE1lc3NhZ2UoYSwgZSksIDApIDogUmEoYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIG5iKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIHJldHVybiBFID8gUCgzLCAxLCBhLCBiLCBjKSA6IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIG9iKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChFKVxuICAgICAgICAgICAgICByZXR1cm4gUCg0LCAxLCBhLCBiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHBiID0gKGEpID0+IHtcbiAgICAgICAgICAgIGZvciAodmFyIGIgPSAwLCBjID0gMDsgYyA8IGEubGVuZ3RoOyArK2MpIHtcbiAgICAgICAgICAgICAgdmFyIGQgPSBhLmNoYXJDb2RlQXQoYyk7XG4gICAgICAgICAgICAgIDEyNyA+PSBkID8gYisrIDogMjA0NyA+PSBkID8gYiArPSAyIDogNTUyOTYgPD0gZCAmJiA1NzM0MyA+PSBkID8gKGIgKz0gNCwgKytjKSA6IGIgKz0gMztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgIH0sIHFiID0gKGEsIGIsIGMsIGQpID0+IHtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKCEoMCA8IGQpKVxuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIHZhciBlID0gYztcbiAgICAgICAgICAgIGQgPSBjICsgZCAtIDE7XG4gICAgICAgICAgICBmb3IgKHZhciBmID0gMDsgZiA8IGEubGVuZ3RoOyArK2YpIHtcbiAgICAgICAgICAgICAgdmFyIGsgPSBhLmNoYXJDb2RlQXQoZik7XG4gICAgICAgICAgICAgIGlmICg1NTI5NiA8PSBrICYmIDU3MzQzID49IGspIHtcbiAgICAgICAgICAgICAgICB2YXIgbCA9IGEuY2hhckNvZGVBdCgrK2YpO1xuICAgICAgICAgICAgICAgIGsgPSA2NTUzNiArICgoayAmIDEwMjMpIDw8IDEwKSB8IGwgJiAxMDIzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICgxMjcgPj0gaykge1xuICAgICAgICAgICAgICAgIGlmIChjID49IGQpXG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSBrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgyMDQ3ID49IGspIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjICsgMSA+PSBkKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDE5MiB8IGsgPj4gNjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaWYgKDY1NTM1ID49IGspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMgKyAyID49IGQpXG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDIyNCB8IGsgPj4gMTI7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYyArIDMgPj0gZClcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMjQwIHwgayA+PiAxODtcbiAgICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMTI4IHwgayA+PiAxMiAmIDYzO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMTI4IHwgayA+PiA2ICYgNjM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDEyOCB8IGsgJiA2MztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYltjID4+PiAwXSA9IDA7XG4gICAgICAgICAgICByZXR1cm4gYyAtIGU7XG4gICAgICAgICAgfSwgcmIgPSAoYSwgYiwgYykgPT4gcWIoYSwgdCgpLCBiLCBjKTtcbiAgICAgICAgICBmdW5jdGlvbiBzYihhLCBiKSB7XG4gICAgICAgICAgICBpZiAoRSlcbiAgICAgICAgICAgICAgcmV0dXJuIFAoNSwgMSwgYSwgYik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHRiKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIGlmIChFKVxuICAgICAgICAgICAgICByZXR1cm4gUCg2LCAxLCBhLCBiLCBjKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gdWIoYSwgYiwgYykge1xuICAgICAgICAgICAgcmV0dXJuIEUgPyBQKDcsIDEsIGEsIGIsIGMpIDogMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gdmIoYSwgYikge1xuICAgICAgICAgICAgaWYgKEUpXG4gICAgICAgICAgICAgIHJldHVybiBQKDgsIDEsIGEsIGIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB3YihhLCBiLCBjKSB7XG4gICAgICAgICAgICBpZiAoRSlcbiAgICAgICAgICAgICAgcmV0dXJuIFAoOSwgMSwgYSwgYiwgYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHhiKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIGlmIChFKVxuICAgICAgICAgICAgICByZXR1cm4gUCgxMCwgMSwgYSwgYiwgYywgZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHliKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIGlmIChFKVxuICAgICAgICAgICAgICByZXR1cm4gUCgxMSwgMSwgYSwgYiwgYywgZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHpiKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIGlmIChFKVxuICAgICAgICAgICAgICByZXR1cm4gUCgxMiwgMSwgYSwgYiwgYywgZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEFiKGEpIHtcbiAgICAgICAgICAgIGlmIChFKVxuICAgICAgICAgICAgICByZXR1cm4gUCgxMywgMSwgYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEJiKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChFKVxuICAgICAgICAgICAgICByZXR1cm4gUCgxNCwgMSwgYSwgYik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIENiKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIGlmIChFKVxuICAgICAgICAgICAgICByZXR1cm4gUCgxNSwgMSwgYSwgYiwgYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBEYiA9IChhKSA9PiB7XG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gYSlcbiAgICAgICAgICAgICAgcmV0dXJuIFwibnVsbFwiO1xuICAgICAgICAgICAgdmFyIGIgPSB0eXBlb2YgYTtcbiAgICAgICAgICAgIHJldHVybiBcIm9iamVjdFwiID09PSBiIHx8IFwiYXJyYXlcIiA9PT0gYiB8fCBcImZ1bmN0aW9uXCIgPT09IGIgPyBhLnRvU3RyaW5nKCkgOiBcIlwiICsgYTtcbiAgICAgICAgICB9LCBFYiwgUiA9IChhKSA9PiB7XG4gICAgICAgICAgICBmb3IgKHZhciBiID0gXCJcIjsgdCgpW2EgPj4+IDBdOyApXG4gICAgICAgICAgICAgIGIgKz0gRWJbdCgpW2ErKyA+Pj4gMF1dO1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgfSwgRmIgPSB7fSwgR2IgPSB7fSwgSGIgPSB7fSwgUztcbiAgICAgICAgICBmdW5jdGlvbiBJYihhLCBiLCBjID0ge30pIHtcbiAgICAgICAgICAgIHZhciBkID0gYi5uYW1lO1xuICAgICAgICAgICAgaWYgKCFhKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgUyhgdHlwZSBcIiR7ZH1cIiBtdXN0IGhhdmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIHR5cGVpZCBwb2ludGVyYCk7XG4gICAgICAgICAgICBpZiAoR2IuaGFzT3duUHJvcGVydHkoYSkpIHtcbiAgICAgICAgICAgICAgaWYgKGMuSWIpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgUyhgQ2Fubm90IHJlZ2lzdGVyIHR5cGUgJyR7ZH0nIHR3aWNlYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBHYlthXSA9IGI7XG4gICAgICAgICAgICBkZWxldGUgSGJbYV07XG4gICAgICAgICAgICBGYi5oYXNPd25Qcm9wZXJ0eShhKSAmJiAoYiA9IEZiW2FdLCBkZWxldGUgRmJbYV0sIGIuZm9yRWFjaCgoZSkgPT4gZSgpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIFQoYSwgYiwgYyA9IHt9KSB7XG4gICAgICAgICAgICBpZiAoIShcImFyZ1BhY2tBZHZhbmNlXCIgaW4gYikpXG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJyZWdpc3RlclR5cGUgcmVnaXN0ZXJlZEluc3RhbmNlIHJlcXVpcmVzIGFyZ1BhY2tBZHZhbmNlXCIpO1xuICAgICAgICAgICAgSWIoYSwgYiwgYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBKYiA9IChhLCBiLCBjKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJldHVybiBjID8gKGQpID0+IGgoKVtkID4+PiAwID4+PiAwXSA6IChkKSA9PiB0KClbZCA+Pj4gMCA+Pj4gMF07XG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICByZXR1cm4gYyA/IChkKSA9PiB2KClbZCA+Pj4gMSA+Pj4gMF0gOiAoZCkgPT4gY2EoKVtkID4+PiAxID4+PiAwXTtcbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiBjID8gKGQpID0+IHcoKVtkID4+PiAyID4+PiAwXSA6IChkKSA9PiB6KClbZCA+Pj4gMiA+Pj4gMF07XG4gICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICByZXR1cm4gYyA/IChkKSA9PiBKW2QgPj4+IDNdIDogKGQpID0+IEFhW2QgPj4+IDNdO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGludmFsaWQgaW50ZWdlciB3aWR0aCAoJHtifSk6ICR7YX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIEtiKCkge1xuICAgICAgICAgICAgdGhpcy5sYiA9IFt2b2lkIDBdO1xuICAgICAgICAgICAgdGhpcy56YiA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgVSA9IG5ldyBLYigpO1xuICAgICAgICAgIGZ1bmN0aW9uIExiKGEpIHtcbiAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgYSA+PSBVLnNiICYmIDAgPT09IC0tVS5nZXQoYSkuQmIgJiYgVS54YihhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFYgPSAoYSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFhKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgUyhcIkNhbm5vdCB1c2UgZGVsZXRlZCB2YWwuIGhhbmRsZSA9IFwiICsgYSk7XG4gICAgICAgICAgICByZXR1cm4gVS5nZXQoYSkudmFsdWU7XG4gICAgICAgICAgfSwgVyA9IChhKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGEpIHtcbiAgICAgICAgICAgICAgY2FzZSB2b2lkIDA6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgIGNhc2UgbnVsbDpcbiAgICAgICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgICAgICAgY2FzZSB0cnVlOlxuICAgICAgICAgICAgICAgIHJldHVybiAzO1xuICAgICAgICAgICAgICBjYXNlIGZhbHNlOlxuICAgICAgICAgICAgICAgIHJldHVybiA0O1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBVLndiKHsgQmI6IDEsIHZhbHVlOiBhIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgZnVuY3Rpb24gTWIoYSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVdpcmVUeXBlKHcoKVthID4+PiAyID4+PiAwXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBOYiA9IChhLCBiKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZCA9IHRoaXMuZnJvbVdpcmVUeXBlO1xuICAgICAgICAgICAgICAgICAgbS5idWZmZXIgIT0gbi5idWZmZXIgJiYgcCgpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuY2FsbCh0aGlzLCB6YVtjID4+PiAyID4+PiAwXSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mcm9tV2lyZVR5cGUoaGEoKVtjID4+PiAzID4+PiAwXSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBpbnZhbGlkIGZsb2F0IHdpZHRoICgke2J9KTogJHthfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgZnVuY3Rpb24gT2IoYSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVdpcmVUeXBlKHooKVthID4+PiAyID4+PiAwXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBQYiA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFRleHREZWNvZGVyID8gbmV3IFRleHREZWNvZGVyKFwidXRmLTE2bGVcIikgOiB2b2lkIDAsIFFiID0gKGEsIGIpID0+IHtcbiAgICAgICAgICAgIHZhciBjID0gYSA+PiAxO1xuICAgICAgICAgICAgZm9yICh2YXIgZCA9IGMgKyBiIC8gMjsgIShjID49IGQpICYmIGNhKClbYyA+Pj4gMF07IClcbiAgICAgICAgICAgICAgKytjO1xuICAgICAgICAgICAgYyA8PD0gMTtcbiAgICAgICAgICAgIGlmICgzMiA8IGMgLSBhICYmIFBiKVxuICAgICAgICAgICAgICByZXR1cm4gUGIuZGVjb2RlKHQoKS5zbGljZShhLCBjKSk7XG4gICAgICAgICAgICBjID0gXCJcIjtcbiAgICAgICAgICAgIGZvciAoZCA9IDA7ICEoZCA+PSBiIC8gMik7ICsrZCkge1xuICAgICAgICAgICAgICB2YXIgZSA9IHYoKVthICsgMiAqIGQgPj4+IDEgPj4+IDBdO1xuICAgICAgICAgICAgICBpZiAoMCA9PSBlKVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICB9LCBSYiA9IChhLCBiLCBjKSA9PiB7XG4gICAgICAgICAgICB2b2lkIDAgPT09IGMgJiYgKGMgPSAyMTQ3NDgzNjQ3KTtcbiAgICAgICAgICAgIGlmICgyID4gYylcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICBjIC09IDI7XG4gICAgICAgICAgICB2YXIgZCA9IGI7XG4gICAgICAgICAgICBjID0gYyA8IDIgKiBhLmxlbmd0aCA/IGMgLyAyIDogYS5sZW5ndGg7XG4gICAgICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IGM7ICsrZSkge1xuICAgICAgICAgICAgICB2YXIgZiA9IGEuY2hhckNvZGVBdChlKTtcbiAgICAgICAgICAgICAgdigpW2IgPj4+IDEgPj4+IDBdID0gZjtcbiAgICAgICAgICAgICAgYiArPSAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdigpW2IgPj4+IDEgPj4+IDBdID0gMDtcbiAgICAgICAgICAgIHJldHVybiBiIC0gZDtcbiAgICAgICAgICB9LCBTYiA9IChhKSA9PiAyICogYS5sZW5ndGgsIFRiID0gKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGZvciAodmFyIGMgPSAwLCBkID0gXCJcIjsgIShjID49IGIgLyA0KTsgKSB7XG4gICAgICAgICAgICAgIHZhciBlID0gdygpW2EgKyA0ICogYyA+Pj4gMiA+Pj4gMF07XG4gICAgICAgICAgICAgIGlmICgwID09IGUpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICsrYztcbiAgICAgICAgICAgICAgNjU1MzYgPD0gZSA/IChlIC09IDY1NTM2LCBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTYgfCBlID4+IDEwLCA1NjMyMCB8IGUgJiAxMDIzKSkgOiBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICB9LCBVYiA9IChhLCBiLCBjKSA9PiB7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIHZvaWQgMCA9PT0gYyAmJiAoYyA9IDIxNDc0ODM2NDcpO1xuICAgICAgICAgICAgaWYgKDQgPiBjKVxuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIHZhciBkID0gYjtcbiAgICAgICAgICAgIGMgPSBkICsgYyAtIDQ7XG4gICAgICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IGEubGVuZ3RoOyArK2UpIHtcbiAgICAgICAgICAgICAgdmFyIGYgPSBhLmNoYXJDb2RlQXQoZSk7XG4gICAgICAgICAgICAgIGlmICg1NTI5NiA8PSBmICYmIDU3MzQzID49IGYpIHtcbiAgICAgICAgICAgICAgICB2YXIgayA9IGEuY2hhckNvZGVBdCgrK2UpO1xuICAgICAgICAgICAgICAgIGYgPSA2NTUzNiArICgoZiAmIDEwMjMpIDw8IDEwKSB8IGsgJiAxMDIzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHcoKVtiID4+PiAyID4+PiAwXSA9IGY7XG4gICAgICAgICAgICAgIGIgKz0gNDtcbiAgICAgICAgICAgICAgaWYgKGIgKyA0ID4gYylcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHcoKVtiID4+PiAyID4+PiAwXSA9IDA7XG4gICAgICAgICAgICByZXR1cm4gYiAtIGQ7XG4gICAgICAgICAgfSwgVmIgPSAoYSkgPT4ge1xuICAgICAgICAgICAgZm9yICh2YXIgYiA9IDAsIGMgPSAwOyBjIDwgYS5sZW5ndGg7ICsrYykge1xuICAgICAgICAgICAgICB2YXIgZCA9IGEuY2hhckNvZGVBdChjKTtcbiAgICAgICAgICAgICAgNTUyOTYgPD0gZCAmJiA1NzM0MyA+PSBkICYmICsrYztcbiAgICAgICAgICAgICAgYiArPSA0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgfSwgV2IgPSAoYSkgPT4ge1xuICAgICAgICAgICAgaWYgKCF5YSlcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoYSgpLCAhR2EoKSlcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIEUgPyBoYihJKSA6IFhhKEkpO1xuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoYikge1xuICAgICAgICAgICAgICAgICAgICBiIGluc3RhbmNlb2YgT2EgfHwgXCJ1bndpbmRcIiA9PSBiIHx8IG5hKDEsIGIpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChiKSB7XG4gICAgICAgICAgICAgICAgYiBpbnN0YW5jZW9mIE9hIHx8IFwidW53aW5kXCIgPT0gYiB8fCBuYSgxLCBiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgZnVuY3Rpb24gWGIoYSkge1xuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBBdG9taWNzLlRiICYmIChBdG9taWNzLlRiKHcoKSwgYSA+Pj4gMiwgYSkudmFsdWUudGhlbihiYiksIGEgKz0gMTI4LCBBdG9taWNzLnN0b3JlKHcoKSwgYSA+Pj4gMiwgMSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBBLl9fZW1zY3JpcHRlbl90aHJlYWRfbWFpbGJveF9hd2FpdCA9IFhiO1xuICAgICAgICAgIHZhciBiYiA9ICgpID0+IHtcbiAgICAgICAgICAgIHZhciBhID0gYWIoKTtcbiAgICAgICAgICAgIGEgJiYgKFhiKGEpLCBXYigoKSA9PiBZYigpKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBBLmNoZWNrTWFpbGJveCA9IGJiO1xuICAgICAgICAgIHZhciAkYiA9IChhKSA9PiB7XG4gICAgICAgICAgICB2YXIgYiA9IFpiKCk7XG4gICAgICAgICAgICBhID0gYSgpO1xuICAgICAgICAgICAgZWIoYik7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIFAoYSwgYikge1xuICAgICAgICAgICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoIC0gMiwgZCA9IGFyZ3VtZW50cztcbiAgICAgICAgICAgIHJldHVybiAkYigoKSA9PiB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGUgPSAyICogYywgZiA9IGFjKDggKiBlKSwgayA9IGYgPj4+IDMsIGwgPSAwOyBsIDwgYzsgbCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHEgPSBkWzIgKyBsXTtcbiAgICAgICAgICAgICAgICBcImJpZ2ludFwiID09IHR5cGVvZiBxID8gKEpbayArIDIgKiBsXSA9IDFuLCBKW2sgKyAyICogbCArIDFdID0gcSkgOiAoSltrICsgMiAqIGxdID0gMG4sIGhhKClbayArIDIgKiBsICsgMSA+Pj4gMF0gPSBxKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gYmMoYSwgZSwgZiwgYik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGNjID0gW10sIGVjID0gKGEsIGIpID0+IHtcbiAgICAgICAgICAgIHZhciBjID0gR2JbYV07XG4gICAgICAgICAgICBpZiAodm9pZCAwID09PSBjKVxuICAgICAgICAgICAgICB0aHJvdyBhID0gZGMoYSksIGMgPSBSKGEpLCBYKGEpLCBuZXcgUyhiICsgXCIgaGFzIHVua25vd24gdHlwZSBcIiArIGMpO1xuICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgfSwgZmMgPSB7fSwgZ2MgPSAoYSkgPT4ge1xuICAgICAgICAgICAgdmFyIGIgPSBmY1thXTtcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IGIgPyBSKGEpIDogYjtcbiAgICAgICAgICB9LCBoYyA9IFtdLCBpYyA9ICgpID0+IFwib2JqZWN0XCIgPT0gdHlwZW9mIGdsb2JhbFRoaXMgPyBnbG9iYWxUaGlzIDogRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpLCBqYyA9IChhKSA9PiB7XG4gICAgICAgICAgICB2YXIgYiA9IGhjLmxlbmd0aDtcbiAgICAgICAgICAgIGhjLnB1c2goYSk7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICB9LCBrYyA9IChhLCBiKSA9PiB7XG4gICAgICAgICAgICBmb3IgKHZhciBjID0gQXJyYXkoYSksIGQgPSAwOyBkIDwgYTsgKytkKVxuICAgICAgICAgICAgICBjW2RdID0gZWMoeigpW2IgKyA0ICogZCA+Pj4gMiA+Pj4gMF0sIFwicGFyYW1ldGVyIFwiICsgZCk7XG4gICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICB9LCBtYyA9IChhKSA9PiB7XG4gICAgICAgICAgICBpZiAodm9pZCAwID09PSBhKVxuICAgICAgICAgICAgICByZXR1cm4gXCJfdW5rbm93blwiO1xuICAgICAgICAgICAgYSA9IGEucmVwbGFjZSgvW15hLXpBLVowLTlfXS9nLCBcIiRcIik7XG4gICAgICAgICAgICB2YXIgYiA9IGEuY2hhckNvZGVBdCgwKTtcbiAgICAgICAgICAgIHJldHVybiA0OCA8PSBiICYmIDU3ID49IGIgPyBgXyR7YX1gIDogYTtcbiAgICAgICAgICB9LCBuYyA9IHt9O1xuICAgICAgICAgIGZ1bmN0aW9uIG9jKGEsIGIpIHtcbiAgICAgICAgICAgIGEgPSBtYyhhKTtcbiAgICAgICAgICAgIHJldHVybiB7IFthXTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICB9IH1bYV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHBjKGEpIHtcbiAgICAgICAgICAgIHZhciBiID0gRnVuY3Rpb247XG4gICAgICAgICAgICBpZiAoIShiIGluc3RhbmNlb2YgRnVuY3Rpb24pKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBuZXdfIGNhbGxlZCB3aXRoIGNvbnN0cnVjdG9yIHR5cGUgJHt0eXBlb2YgYn0gd2hpY2ggaXMgbm90IGEgZnVuY3Rpb25gKTtcbiAgICAgICAgICAgIHZhciBjID0gb2MoYi5uYW1lIHx8IFwidW5rbm93bkZ1bmN0aW9uTmFtZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZTtcbiAgICAgICAgICAgIGMgPSBuZXcgYygpO1xuICAgICAgICAgICAgYSA9IGIuYXBwbHkoYywgYSk7XG4gICAgICAgICAgICByZXR1cm4gYSBpbnN0YW5jZW9mIE9iamVjdCA/IGEgOiBjO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcWMgPSAoYSkgPT4ge1xuICAgICAgICAgICAgZm9yICh2YXIgYiA9IFwiXCIsIGMgPSAwOyBjIDwgYTsgKytjKVxuICAgICAgICAgICAgICBiICs9ICgwICE9PSBjID8gXCIsIFwiIDogXCJcIikgKyBcImFyZ1wiICsgYztcbiAgICAgICAgICAgIHZhciBkID0gXCJyZXR1cm4gZnVuY3Rpb24gZW12YWxfYWxsb2NhdG9yX1wiICsgYSArIFwiKGNvbnN0cnVjdG9yLCBhcmdUeXBlcywgYXJncykge1xcbiAgdmFyIEhFQVBVMzIgPSBnZXRNZW1vcnkoKTtcXG5cIjtcbiAgICAgICAgICAgIGZvciAoYyA9IDA7IGMgPCBhOyArK2MpXG4gICAgICAgICAgICAgIGQgKz0gXCJ2YXIgYXJnVHlwZVwiICsgYyArIFwiID0gcmVxdWlyZVJlZ2lzdGVyZWRUeXBlKEhFQVBVMzJbKChhcmdUeXBlcyk+Pj4yKV0sICdwYXJhbWV0ZXIgXCIgKyBjICsgXCInKTtcXG52YXIgYXJnXCIgKyBjICsgXCIgPSBhcmdUeXBlXCIgKyBjICsgXCIucmVhZFZhbHVlRnJvbVBvaW50ZXIoYXJncyk7XFxuYXJncyArPSBhcmdUeXBlXCIgKyBjICsgXCJbJ2FyZ1BhY2tBZHZhbmNlJ107XFxuYXJnVHlwZXMgKz0gNDtcXG5cIjtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb24oXCJyZXF1aXJlUmVnaXN0ZXJlZFR5cGVcIiwgXCJNb2R1bGVcIiwgXCJ2YWx1ZVRvSGFuZGxlXCIsIFwiZ2V0TWVtb3J5XCIsIGQgKyAoXCJ2YXIgb2JqID0gbmV3IGNvbnN0cnVjdG9yKFwiICsgYiArIFwiKTtcXG5yZXR1cm4gdmFsdWVUb0hhbmRsZShvYmopO1xcbn1cXG5cIikpKGVjLCBBLCBXLCAoKSA9PiB6KCkpO1xuICAgICAgICAgIH0sIHJjID0ge30sIFkgPSAoYSkgPT4gMCA9PT0gYSAlIDQgJiYgKDAgIT09IGEgJSAxMDAgfHwgMCA9PT0gYSAlIDQwMCksIHNjID0gWzAsIDMxLCA2MCwgOTEsIDEyMSwgMTUyLCAxODIsIDIxMywgMjQ0LCAyNzQsIDMwNSwgMzM1XSwgdGMgPSBbMCwgMzEsIDU5LCA5MCwgMTIwLCAxNTEsIDE4MSwgMjEyLCAyNDMsIDI3MywgMzA0LCAzMzRdO1xuICAgICAgICAgIGZ1bmN0aW9uIHVjKGEsIGIsIGMsIGQsIGUsIGYsIGspIHtcbiAgICAgICAgICAgIHJldHVybiBFID8gUCgxNiwgMSwgYSwgYiwgYywgZCwgZSwgZiwgaykgOiAtNTI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHZjKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAgICAgICAgIGlmIChFKVxuICAgICAgICAgICAgICByZXR1cm4gUCgxNywgMSwgYSwgYiwgYywgZCwgZSwgZik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB4YyA9IChhKSA9PiB7XG4gICAgICAgICAgICB2YXIgYiA9IHBiKGEpICsgMSwgYyA9IHdjKGIpO1xuICAgICAgICAgICAgYyAmJiByYihhLCBjLCBiKTtcbiAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgIH0sIHljID0ge30sIEFjID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF6Yykge1xuICAgICAgICAgICAgICB2YXIgYSA9IHsgVVNFUjogXCJ3ZWJfdXNlclwiLCBMT0dOQU1FOiBcIndlYl91c2VyXCIsIFBBVEg6IFwiL1wiLCBQV0Q6IFwiL1wiLCBIT01FOiBcIi9ob21lL3dlYl91c2VyXCIsIExBTkc6IChcIm9iamVjdFwiID09IHR5cGVvZiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLmxhbmd1YWdlcyAmJiBuYXZpZ2F0b3IubGFuZ3VhZ2VzWzBdIHx8IFwiQ1wiKS5yZXBsYWNlKFwiLVwiLCBcIl9cIikgKyBcIi5VVEYtOFwiLCBfOiBtYSB8fCBcIi4vdGhpcy5wcm9ncmFtXCIgfSwgYjtcbiAgICAgICAgICAgICAgZm9yIChiIGluIHljKVxuICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0geWNbYl0gPyBkZWxldGUgYVtiXSA6IGFbYl0gPSB5Y1tiXTtcbiAgICAgICAgICAgICAgdmFyIGMgPSBbXTtcbiAgICAgICAgICAgICAgZm9yIChiIGluIGEpXG4gICAgICAgICAgICAgICAgYy5wdXNoKGAke2J9PSR7YVtiXX1gKTtcbiAgICAgICAgICAgICAgemMgPSBjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHpjO1xuICAgICAgICAgIH0sIHpjO1xuICAgICAgICAgIGZ1bmN0aW9uIEJjKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChFKVxuICAgICAgICAgICAgICByZXR1cm4gUCgxOCwgMSwgYSwgYik7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgdmFyIGMgPSAwO1xuICAgICAgICAgICAgQWMoKS5mb3JFYWNoKChkLCBlKSA9PiB7XG4gICAgICAgICAgICAgIHZhciBmID0gYiArIGM7XG4gICAgICAgICAgICAgIGUgPSB6KClbYSArIDQgKiBlID4+PiAyID4+PiAwXSA9IGY7XG4gICAgICAgICAgICAgIGZvciAoZiA9IDA7IGYgPCBkLmxlbmd0aDsgKytmKVxuICAgICAgICAgICAgICAgIGgoKVtlKysgPj4+IDAgPj4+IDBdID0gZC5jaGFyQ29kZUF0KGYpO1xuICAgICAgICAgICAgICBoKClbZSA+Pj4gMCA+Pj4gMF0gPSAwO1xuICAgICAgICAgICAgICBjICs9IGQubGVuZ3RoICsgMTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIENjKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChFKVxuICAgICAgICAgICAgICByZXR1cm4gUCgxOSwgMSwgYSwgYik7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgdmFyIGMgPSBBYygpO1xuICAgICAgICAgICAgeigpW2EgPj4+IDIgPj4+IDBdID0gYy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgZCA9IDA7XG4gICAgICAgICAgICBjLmZvckVhY2goKGUpID0+IGQgKz0gZS5sZW5ndGggKyAxKTtcbiAgICAgICAgICAgIHooKVtiID4+PiAyID4+PiAwXSA9IGQ7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gRGMoYSkge1xuICAgICAgICAgICAgcmV0dXJuIEUgPyBQKDIwLCAxLCBhKSA6IDUyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBFYyhhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICByZXR1cm4gRSA/IFAoMjEsIDEsIGEsIGIsIGMsIGQpIDogNTI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEZjKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBFID8gUCgyMiwgMSwgYSwgYiwgYywgZCkgOiA3MDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIEdjID0gW251bGwsIFtdLCBbXV07XG4gICAgICAgICAgZnVuY3Rpb24gSGMoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgaWYgKEUpXG4gICAgICAgICAgICAgIHJldHVybiBQKDIzLCAxLCBhLCBiLCBjLCBkKTtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBkID4+Pj0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIGUgPSAwLCBmID0gMDsgZiA8IGM7IGYrKykge1xuICAgICAgICAgICAgICB2YXIgayA9IHooKVtiID4+PiAyID4+PiAwXSwgbCA9IHooKVtiICsgNCA+Pj4gMiA+Pj4gMF07XG4gICAgICAgICAgICAgIGIgKz0gODtcbiAgICAgICAgICAgICAgZm9yICh2YXIgcSA9IDA7IHEgPCBsOyBxKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgciA9IHQoKVtrICsgcSA+Pj4gMF0sIHggPSBHY1thXTtcbiAgICAgICAgICAgICAgICAwID09PSByIHx8IDEwID09PSByID8gKCgxID09PSBhID8gd2EgOiBHKShUYSh4LCAwKSksIHgubGVuZ3RoID0gMCkgOiB4LnB1c2gocik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZSArPSBsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeigpW2QgPj4+IDIgPj4+IDBdID0gZTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgSWMgPSBbMzEsIDI5LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV0sIEpjID0gWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdO1xuICAgICAgICAgIGZ1bmN0aW9uIEtjKGEpIHtcbiAgICAgICAgICAgIHZhciBiID0gQXJyYXkocGIoYSkgKyAxKTtcbiAgICAgICAgICAgIHFiKGEsIGIsIDAsIGIubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgTGMgPSAoYSwgYikgPT4ge1xuICAgICAgICAgICAgaCgpLnNldChhLCBiID4+PiAwKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIE1jKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGUoZywgdSwgeSkge1xuICAgICAgICAgICAgICBmb3IgKGcgPSBcIm51bWJlclwiID09IHR5cGVvZiBnID8gZy50b1N0cmluZygpIDogZyB8fCBcIlwiOyBnLmxlbmd0aCA8IHU7IClcbiAgICAgICAgICAgICAgICBnID0geVswXSArIGc7XG4gICAgICAgICAgICAgIHJldHVybiBnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gZihnLCB1KSB7XG4gICAgICAgICAgICAgIHJldHVybiBlKGcsIHUsIFwiMFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGsoZywgdSkge1xuICAgICAgICAgICAgICBmdW5jdGlvbiB5KGxjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAgPiBsYyA/IC0xIDogMCA8IGxjID8gMSA6IDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIFE7XG4gICAgICAgICAgICAgIDAgPT09IChRID0geShnLmdldEZ1bGxZZWFyKCkgLSB1LmdldEZ1bGxZZWFyKCkpKSAmJiAwID09PSAoUSA9IHkoZy5nZXRNb250aCgpIC0gdS5nZXRNb250aCgpKSkgJiYgKFEgPSB5KGcuZ2V0RGF0ZSgpIC0gdS5nZXREYXRlKCkpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBsKGcpIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChnLmdldERheSgpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGcuZ2V0RnVsbFllYXIoKSAtIDEsIDExLCAyOSk7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIGc7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGcuZ2V0RnVsbFllYXIoKSwgMCwgMyk7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgICAgICBnLmdldEZ1bGxZZWFyKCksXG4gICAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICAgIDJcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGcuZ2V0RnVsbFllYXIoKSwgMCwgMSk7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGcuZ2V0RnVsbFllYXIoKSAtIDEsIDExLCAzMSk7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGcuZ2V0RnVsbFllYXIoKSAtIDEsIDExLCAzMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHEoZykge1xuICAgICAgICAgICAgICB2YXIgdSA9IGcucGI7XG4gICAgICAgICAgICAgIGZvciAoZyA9IG5ldyBEYXRlKG5ldyBEYXRlKGcucWIgKyAxOTAwLCAwLCAxKS5nZXRUaW1lKCkpOyAwIDwgdTsgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHkgPSBnLmdldE1vbnRoKCksIFEgPSAoWShnLmdldEZ1bGxZZWFyKCkpID8gSWMgOiBKYylbeV07XG4gICAgICAgICAgICAgICAgaWYgKHUgPiBRIC0gZy5nZXREYXRlKCkpXG4gICAgICAgICAgICAgICAgICB1IC09IFEgLSBnLmdldERhdGUoKSArIDEsIGcuc2V0RGF0ZSgxKSwgMTEgPiB5ID8gZy5zZXRNb250aCh5ICsgMSkgOiAoZy5zZXRNb250aCgwKSwgZy5zZXRGdWxsWWVhcihnLmdldEZ1bGxZZWFyKCkgKyAxKSk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICBnLnNldERhdGUoZy5nZXREYXRlKCkgKyB1KTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB5ID0gbmV3IERhdGUoZy5nZXRGdWxsWWVhcigpICsgMSwgMCwgNCk7XG4gICAgICAgICAgICAgIHUgPSBsKG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgIGcuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgIDRcbiAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgIHkgPSBsKHkpO1xuICAgICAgICAgICAgICByZXR1cm4gMCA+PSBrKHUsIGcpID8gMCA+PSBrKHksIGcpID8gZy5nZXRGdWxsWWVhcigpICsgMSA6IGcuZ2V0RnVsbFllYXIoKSA6IGcuZ2V0RnVsbFllYXIoKSAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBkID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciByID0geigpW2QgKyA0MCA+Pj4gMiA+Pj4gMF07XG4gICAgICAgICAgICBkID0geyBRYjogdygpW2QgPj4+IDIgPj4+IDBdLCBQYjogdygpW2QgKyA0ID4+PiAyID4+PiAwXSwgdGI6IHcoKVtkICsgOCA+Pj4gMiA+Pj4gMF0sIHliOiB3KClbZCArIDEyID4+PiAyID4+PiAwXSwgdWI6IHcoKVtkICsgMTYgPj4+IDIgPj4+IDBdLCBxYjogdygpW2QgKyAyMCA+Pj4gMiA+Pj4gMF0sIGtiOiB3KClbZCArIDI0ID4+PiAyID4+PiAwXSwgcGI6IHcoKVtkICsgMjggPj4+IDIgPj4+IDBdLCBXYjogdygpW2QgKyAzMiA+Pj4gMiA+Pj4gMF0sIE9iOiB3KClbZCArIDM2ID4+PiAyID4+PiAwXSwgUmI6IHIgPyBVYShyKSA6IFwiXCIgfTtcbiAgICAgICAgICAgIGMgPSBVYShjKTtcbiAgICAgICAgICAgIHIgPSB7XG4gICAgICAgICAgICAgIFwiJWNcIjogXCIlYSAlYiAlZCAlSDolTTolUyAlWVwiLFxuICAgICAgICAgICAgICBcIiVEXCI6IFwiJW0vJWQvJXlcIixcbiAgICAgICAgICAgICAgXCIlRlwiOiBcIiVZLSVtLSVkXCIsXG4gICAgICAgICAgICAgIFwiJWhcIjogXCIlYlwiLFxuICAgICAgICAgICAgICBcIiVyXCI6IFwiJUk6JU06JVMgJXBcIixcbiAgICAgICAgICAgICAgXCIlUlwiOiBcIiVIOiVNXCIsXG4gICAgICAgICAgICAgIFwiJVRcIjogXCIlSDolTTolU1wiLFxuICAgICAgICAgICAgICBcIiV4XCI6IFwiJW0vJWQvJXlcIixcbiAgICAgICAgICAgICAgXCIlWFwiOiBcIiVIOiVNOiVTXCIsXG4gICAgICAgICAgICAgIFwiJUVjXCI6IFwiJWNcIixcbiAgICAgICAgICAgICAgXCIlRUNcIjogXCIlQ1wiLFxuICAgICAgICAgICAgICBcIiVFeFwiOiBcIiVtLyVkLyV5XCIsXG4gICAgICAgICAgICAgIFwiJUVYXCI6IFwiJUg6JU06JVNcIixcbiAgICAgICAgICAgICAgXCIlRXlcIjogXCIleVwiLFxuICAgICAgICAgICAgICBcIiVFWVwiOiBcIiVZXCIsXG4gICAgICAgICAgICAgIFwiJU9kXCI6IFwiJWRcIixcbiAgICAgICAgICAgICAgXCIlT2VcIjogXCIlZVwiLFxuICAgICAgICAgICAgICBcIiVPSFwiOiBcIiVIXCIsXG4gICAgICAgICAgICAgIFwiJU9JXCI6IFwiJUlcIixcbiAgICAgICAgICAgICAgXCIlT21cIjogXCIlbVwiLFxuICAgICAgICAgICAgICBcIiVPTVwiOiBcIiVNXCIsXG4gICAgICAgICAgICAgIFwiJU9TXCI6IFwiJVNcIixcbiAgICAgICAgICAgICAgXCIlT3VcIjogXCIldVwiLFxuICAgICAgICAgICAgICBcIiVPVVwiOiBcIiVVXCIsXG4gICAgICAgICAgICAgIFwiJU9WXCI6IFwiJVZcIixcbiAgICAgICAgICAgICAgXCIlT3dcIjogXCIld1wiLFxuICAgICAgICAgICAgICBcIiVPV1wiOiBcIiVXXCIsXG4gICAgICAgICAgICAgIFwiJU95XCI6IFwiJXlcIlxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIHggaW4gcilcbiAgICAgICAgICAgICAgYyA9IGMucmVwbGFjZShuZXcgUmVnRXhwKHgsIFwiZ1wiKSwgclt4XSk7XG4gICAgICAgICAgICB2YXIgQyA9IFwiU3VuZGF5IE1vbmRheSBUdWVzZGF5IFdlZG5lc2RheSBUaHVyc2RheSBGcmlkYXkgU2F0dXJkYXlcIi5zcGxpdChcIiBcIiksIE4gPSBcIkphbnVhcnkgRmVicnVhcnkgTWFyY2ggQXByaWwgTWF5IEp1bmUgSnVseSBBdWd1c3QgU2VwdGVtYmVyIE9jdG9iZXIgTm92ZW1iZXIgRGVjZW1iZXJcIi5zcGxpdChcIiBcIik7XG4gICAgICAgICAgICByID0geyBcIiVhXCI6IChnKSA9PiBDW2cua2JdLnN1YnN0cmluZygwLCAzKSwgXCIlQVwiOiAoZykgPT4gQ1tnLmtiXSwgXCIlYlwiOiAoZykgPT4gTltnLnViXS5zdWJzdHJpbmcoMCwgMyksIFwiJUJcIjogKGcpID0+IE5bZy51Yl0sIFwiJUNcIjogKGcpID0+IGYoKGcucWIgKyAxOTAwKSAvIDEwMCB8IDAsIDIpLCBcIiVkXCI6IChnKSA9PiBmKGcueWIsIDIpLCBcIiVlXCI6IChnKSA9PiBlKGcueWIsIDIsIFwiIFwiKSwgXCIlZ1wiOiAoZykgPT4gcShnKS50b1N0cmluZygpLnN1YnN0cmluZygyKSwgXCIlR1wiOiAoZykgPT4gcShnKSwgXCIlSFwiOiAoZykgPT4gZihnLnRiLCAyKSwgXCIlSVwiOiAoZykgPT4ge1xuICAgICAgICAgICAgICBnID0gZy50YjtcbiAgICAgICAgICAgICAgMCA9PSBnID8gZyA9IDEyIDogMTIgPCBnICYmIChnIC09IDEyKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGYoZywgMik7XG4gICAgICAgICAgICB9LCBcIiVqXCI6IChnKSA9PiB7XG4gICAgICAgICAgICAgIGZvciAodmFyIHUgPSAwLCB5ID0gMDsgeSA8PSBnLnViIC0gMTsgdSArPSAoWShnLnFiICsgMTkwMCkgPyBJYyA6IEpjKVt5KytdKVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgcmV0dXJuIGYoZy55YiArIHUsIDMpO1xuICAgICAgICAgICAgfSwgXCIlbVwiOiAoZykgPT4gZihnLnViICsgMSwgMiksIFwiJU1cIjogKGcpID0+IGYoZy5QYiwgMiksIFwiJW5cIjogKCkgPT4gXCJcXG5cIiwgXCIlcFwiOiAoZykgPT4gMCA8PSBnLnRiICYmIDEyID4gZy50YiA/IFwiQU1cIiA6IFwiUE1cIiwgXCIlU1wiOiAoZykgPT4gZihnLlFiLCAyKSwgXCIldFwiOiAoKSA9PiBcIlx0XCIsIFwiJXVcIjogKGcpID0+IGcua2IgfHwgNywgXCIlVVwiOiAoZykgPT4gZihNYXRoLmZsb29yKChnLnBiICsgNyAtIGcua2IpIC8gNyksIDIpLCBcIiVWXCI6IChnKSA9PiB7XG4gICAgICAgICAgICAgIHZhciB1ID0gTWF0aC5mbG9vcigoZy5wYiArIDcgLSAoZy5rYiArIDYpICUgNykgLyA3KTtcbiAgICAgICAgICAgICAgMiA+PSAoZy5rYiArIDM3MSAtIGcucGIgLSAyKSAlIDcgJiYgdSsrO1xuICAgICAgICAgICAgICBpZiAodSlcbiAgICAgICAgICAgICAgICA1MyA9PSB1ICYmICh5ID0gKGcua2IgKyAzNzEgLSBnLnBiKSAlIDcsIDQgPT0geSB8fCAzID09IHkgJiYgWShnLnFiKSB8fCAodSA9IDEpKTtcbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdSA9IDUyO1xuICAgICAgICAgICAgICAgIHZhciB5ID0gKGcua2IgKyA3IC0gZy5wYiAtIDEpICUgNztcbiAgICAgICAgICAgICAgICAoNCA9PSB5IHx8IDUgPT0geSAmJiBZKGcucWIgJSA0MDAgLSAxKSkgJiYgdSsrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmKHUsIDIpO1xuICAgICAgICAgICAgfSwgXCIld1wiOiAoZykgPT4gZy5rYiwgXCIlV1wiOiAoZykgPT4gZihNYXRoLmZsb29yKChnLnBiICsgNyAtIChnLmtiICsgNikgJSA3KSAvIDcpLCAyKSwgXCIleVwiOiAoZykgPT4gKGcucWIgKyAxOTAwKS50b1N0cmluZygpLnN1YnN0cmluZygyKSwgXCIlWVwiOiAoZykgPT4gZy5xYiArIDE5MDAsIFwiJXpcIjogKGcpID0+IHtcbiAgICAgICAgICAgICAgZyA9IGcuT2I7XG4gICAgICAgICAgICAgIHZhciB1ID0gMCA8PSBnO1xuICAgICAgICAgICAgICBnID0gTWF0aC5hYnMoZykgLyA2MDtcbiAgICAgICAgICAgICAgcmV0dXJuICh1ID8gXCIrXCIgOiBcIi1cIikgKyBTdHJpbmcoXCIwMDAwXCIgKyAoZyAvIDYwICogMTAwICsgZyAlIDYwKSkuc2xpY2UoLTQpO1xuICAgICAgICAgICAgfSwgXCIlWlwiOiAoZykgPT4gZy5SYiwgXCIlJVwiOiAoKSA9PiBcIiVcIiB9O1xuICAgICAgICAgICAgYyA9IGMucmVwbGFjZSgvJSUvZywgXCJcXDBcXDBcIik7XG4gICAgICAgICAgICBmb3IgKHggaW4gcilcbiAgICAgICAgICAgICAgYy5pbmNsdWRlcyh4KSAmJiAoYyA9IGMucmVwbGFjZShuZXcgUmVnRXhwKHgsIFwiZ1wiKSwgclt4XShkKSkpO1xuICAgICAgICAgICAgYyA9IGMucmVwbGFjZSgvXFwwXFwwL2csIFwiJVwiKTtcbiAgICAgICAgICAgIHggPSBLYyhjKTtcbiAgICAgICAgICAgIGlmICh4Lmxlbmd0aCA+IGIpXG4gICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgTGMoeCwgYSk7XG4gICAgICAgICAgICByZXR1cm4geC5sZW5ndGggLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBPLnZiKCk7XG4gICAgICAgICAgZm9yICh2YXIgTmMgPSBBcnJheSgyNTYpLCBPYyA9IDA7IDI1NiA+IE9jOyArK09jKVxuICAgICAgICAgICAgTmNbT2NdID0gU3RyaW5nLmZyb21DaGFyQ29kZShPYyk7XG4gICAgICAgICAgRWIgPSBOYztcbiAgICAgICAgICBTID0gQS5CaW5kaW5nRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKGEpIHtcbiAgICAgICAgICAgICAgc3VwZXIoYSk7XG4gICAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiQmluZGluZ0Vycm9yXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBBLkludGVybmFsRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKGEpIHtcbiAgICAgICAgICAgICAgc3VwZXIoYSk7XG4gICAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiSW50ZXJuYWxFcnJvclwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihLYi5wcm90b3R5cGUsIHsgZ2V0KGEpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxiW2FdO1xuICAgICAgICAgIH0sIGhhcyhhKSB7XG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0aGlzLmxiW2FdO1xuICAgICAgICAgIH0sIHdiKGEpIHtcbiAgICAgICAgICAgIHZhciBiID0gdGhpcy56Yi5wb3AoKSB8fCB0aGlzLmxiLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMubGJbYl0gPSBhO1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgfSwgeGIoYSkge1xuICAgICAgICAgICAgdGhpcy5sYlthXSA9IHZvaWQgMDtcbiAgICAgICAgICAgIHRoaXMuemIucHVzaChhKTtcbiAgICAgICAgICB9IH0pO1xuICAgICAgICAgIFUubGIucHVzaCh7IHZhbHVlOiB2b2lkIDAgfSwgeyB2YWx1ZTogbnVsbCB9LCB7IHZhbHVlOiB0cnVlIH0sIHsgdmFsdWU6IGZhbHNlIH0pO1xuICAgICAgICAgIFUuc2IgPSBVLmxiLmxlbmd0aDtcbiAgICAgICAgICBBLmNvdW50X2VtdmFsX2hhbmRsZXMgPSAoKSA9PiB7XG4gICAgICAgICAgICBmb3IgKHZhciBhID0gMCwgYiA9IFUuc2I7IGIgPCBVLmxiLmxlbmd0aDsgKytiKVxuICAgICAgICAgICAgICB2b2lkIDAgIT09IFUubGJbYl0gJiYgKythO1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgUGMgPSBbVmEsIFdhLCBsYiwgbmIsIG9iLCBzYiwgdGIsIHViLCB2Yiwgd2IsIHhiLCB5YiwgemIsIEFiLCBCYiwgQ2IsIHVjLCB2YywgQmMsIENjLCBEYywgRWMsIEZjLCBIY10sIFJjID0ge1xuICAgICAgICAgICAgYjogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgbmV3IGliKGEpLnZiKGIgPj4+IDAsIGMgPj4+IDApO1xuICAgICAgICAgICAgICBqYiA9IGE7XG4gICAgICAgICAgICAgIGtiKys7XG4gICAgICAgICAgICAgIHRocm93IGpiO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVhOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgIFFjKGEgPj4+IDAsICFCLCAxLCAhb2EsIDEzMTA3MiwgZmFsc2UpO1xuICAgICAgICAgICAgICBPLkViKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgRTogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgRSA/IHBvc3RNZXNzYWdlKHsgY21kOiBcImNsZWFudXBUaHJlYWRcIiwgdGhyZWFkOiBhIH0pIDogKChhID0gTy5qYlthXSkgfHwgSCgpLCBPLkNiKGEpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBXOiBtYixcbiAgICAgICAgICAgIHk6IG5iLFxuICAgICAgICAgICAga2E6IG9iLFxuICAgICAgICAgICAgUzogc2IsXG4gICAgICAgICAgICBVOiB0YixcbiAgICAgICAgICAgIEw6IHViLFxuICAgICAgICAgICAgaWE6IHZiLFxuICAgICAgICAgICAgYmE6IHdiLFxuICAgICAgICAgICAgaGE6IHhiLFxuICAgICAgICAgICAgRzogeWIsXG4gICAgICAgICAgICBUOiB6YixcbiAgICAgICAgICAgIFE6IEFiLFxuICAgICAgICAgICAgamE6IEJiLFxuICAgICAgICAgICAgUjogQ2IsXG4gICAgICAgICAgICBKOiBmdW5jdGlvbihhLCBiLCBjLCBkLCBlKSB7XG4gICAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICAgIGIgPSBSKGIpO1xuICAgICAgICAgICAgICB2YXIgZiA9IC0xICE9IGIuaW5kZXhPZihcInVcIik7XG4gICAgICAgICAgICAgIGYgJiYgKGUgPSAoMW4gPDwgNjRuKSAtIDFuKTtcbiAgICAgICAgICAgICAgVChhLCB7IG5hbWU6IGIsIGZyb21XaXJlVHlwZTogKGspID0+IGssIHRvV2lyZVR5cGU6IGZ1bmN0aW9uKGssIGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJiaWdpbnRcIiAhPSB0eXBlb2YgbCAmJiBcIm51bWJlclwiICE9IHR5cGVvZiBsKVxuICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgQ2Fubm90IGNvbnZlcnQgXCIke0RiKGwpfVwiIHRvICR7dGhpcy5uYW1lfWApO1xuICAgICAgICAgICAgICAgIGlmIChsIDwgZCB8fCBsID4gZSlcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFBhc3NpbmcgYSBudW1iZXIgXCIke0RiKGwpfVwiIGZyb20gSlMgc2lkZSB0byBDL0MrKyBzaWRlIHRvIGFuIGFyZ3VtZW50IG9mIHR5cGUgXCIke2J9XCIsIHdoaWNoIGlzIG91dHNpZGUgdGhlIHZhbGlkIHJhbmdlIFske2R9LCAke2V9XSFgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbDtcbiAgICAgICAgICAgICAgfSwgYXJnUGFja0FkdmFuY2U6IDgsIHJlYWRWYWx1ZUZyb21Qb2ludGVyOiBKYihiLCBjLCAhZiksIHJiOiBudWxsIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHFhOiBmdW5jdGlvbihhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgICBiID0gUihiID4+PiAwKTtcbiAgICAgICAgICAgICAgVChhLCB7XG4gICAgICAgICAgICAgICAgbmFtZTogYixcbiAgICAgICAgICAgICAgICBmcm9tV2lyZVR5cGU6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAhIWU7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b1dpcmVUeXBlOiBmdW5jdGlvbihlLCBmKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZiA/IGMgOiBkO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXJnUGFja0FkdmFuY2U6IDgsXG4gICAgICAgICAgICAgICAgcmVhZFZhbHVlRnJvbVBvaW50ZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZyb21XaXJlVHlwZSh0KClbZSA+Pj4gMF0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmI6IG51bGxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGE6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIGIgPSBSKGIgPj4+IDApO1xuICAgICAgICAgICAgICBUKGEsIHsgbmFtZTogYiwgZnJvbVdpcmVUeXBlOiAoYykgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBkID0gVihjKTtcbiAgICAgICAgICAgICAgICBMYihjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgICAgfSwgdG9XaXJlVHlwZTogKGMsIGQpID0+IFcoZCksIGFyZ1BhY2tBZHZhbmNlOiA4LCByZWFkVmFsdWVGcm9tUG9pbnRlcjogTWIsIHJiOiBudWxsIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEk6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgICBiID0gUihiID4+PiAwKTtcbiAgICAgICAgICAgICAgVChhLCB7IG5hbWU6IGIsIGZyb21XaXJlVHlwZTogKGQpID0+IGQsIHRvV2lyZVR5cGU6IChkLCBlKSA9PiBlLCBhcmdQYWNrQWR2YW5jZTogOCwgcmVhZFZhbHVlRnJvbVBvaW50ZXI6IE5iKGIsIGMpLCByYjogbnVsbCB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1OiBmdW5jdGlvbihhLCBiLCBjLCBkLCBlKSB7XG4gICAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgICAgYiA9IFIoYiA+Pj4gMCk7XG4gICAgICAgICAgICAgIC0xID09PSBlICYmIChlID0gNDI5NDk2NzI5NSk7XG4gICAgICAgICAgICAgIGUgPSAobCkgPT4gbDtcbiAgICAgICAgICAgICAgaWYgKDAgPT09IGQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZiA9IDMyIC0gOCAqIGM7XG4gICAgICAgICAgICAgICAgZSA9IChsKSA9PiBsIDw8IGYgPj4+IGY7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIGsgPSBiLmluY2x1ZGVzKFwidW5zaWduZWRcIikgPyBmdW5jdGlvbihsLCBxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHEgPj4+IDA7XG4gICAgICAgICAgICAgIH0gOiBmdW5jdGlvbihsLCBxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHE7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIFQoYSwgeyBuYW1lOiBiLCBmcm9tV2lyZVR5cGU6IGUsIHRvV2lyZVR5cGU6IGssIGFyZ1BhY2tBZHZhbmNlOiA4LCByZWFkVmFsdWVGcm9tUG9pbnRlcjogSmIoYiwgYywgMCAhPT0gZCksIHJiOiBudWxsIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG06IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgZnVuY3Rpb24gZChmKSB7XG4gICAgICAgICAgICAgICAgdmFyIGsgPSB6KClbZiA+Pj4gMiA+Pj4gMF07XG4gICAgICAgICAgICAgICAgZiA9IHooKVtmICsgNCA+Pj4gMiA+Pj4gMF07XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBlKGgoKS5idWZmZXIsIGYsIGspO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgICB2YXIgZSA9IFtJbnQ4QXJyYXksIFVpbnQ4QXJyYXksIEludDE2QXJyYXksIFVpbnQxNkFycmF5LCBJbnQzMkFycmF5LCBVaW50MzJBcnJheSwgRmxvYXQzMkFycmF5LCBGbG9hdDY0QXJyYXksIEJpZ0ludDY0QXJyYXksIEJpZ1VpbnQ2NEFycmF5XVtiXTtcbiAgICAgICAgICAgICAgYyA9IFIoYyA+Pj4gMCk7XG4gICAgICAgICAgICAgIFQoXG4gICAgICAgICAgICAgICAgYSxcbiAgICAgICAgICAgICAgICB7IG5hbWU6IGMsIGZyb21XaXJlVHlwZTogZCwgYXJnUGFja0FkdmFuY2U6IDgsIHJlYWRWYWx1ZUZyb21Qb2ludGVyOiBkIH0sXG4gICAgICAgICAgICAgICAgeyBJYjogdHJ1ZSB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgSzogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgYiA9IFIoYiA+Pj4gMCk7XG4gICAgICAgICAgICAgIHZhciBjID0gXCJzdGQ6OnN0cmluZ1wiID09PSBiO1xuICAgICAgICAgICAgICBUKGEsIHsgbmFtZTogYiwgZnJvbVdpcmVUeXBlOiBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSB6KClbZCA+Pj4gMiA+Pj4gMF0sIGYgPSBkICsgNDtcbiAgICAgICAgICAgICAgICBpZiAoYylcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSBmLCBsID0gMDsgbCA8PSBlOyArK2wpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHEgPSBmICsgbDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGwgPT0gZSB8fCAwID09IHQoKVtxID4+PiAwXSkge1xuICAgICAgICAgICAgICAgICAgICAgIGsgPSBVYShrLCBxIC0gayk7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gaztcbiAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICByICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMCksIHIgKz0gaztcbiAgICAgICAgICAgICAgICAgICAgICBrID0gcSArIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHIgPSBBcnJheShlKTtcbiAgICAgICAgICAgICAgICAgIGZvciAobCA9IDA7IGwgPCBlOyArK2wpXG4gICAgICAgICAgICAgICAgICAgIHJbbF0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHQoKVtmICsgbCA+Pj4gMF0pO1xuICAgICAgICAgICAgICAgICAgciA9IHIuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgWChkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgICAgICAgfSwgdG9XaXJlVHlwZTogZnVuY3Rpb24oZCwgZSkge1xuICAgICAgICAgICAgICAgIGUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciAmJiAoZSA9IG5ldyBVaW50OEFycmF5KGUpKTtcbiAgICAgICAgICAgICAgICB2YXIgZiA9IFwic3RyaW5nXCIgPT0gdHlwZW9mIGU7XG4gICAgICAgICAgICAgICAgaWYgKCEoZiB8fCBlIGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBlIGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXkgfHwgZSBpbnN0YW5jZW9mIEludDhBcnJheSkpXG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUyhcIkNhbm5vdCBwYXNzIG5vbi1zdHJpbmcgdG8gc3RkOjpzdHJpbmdcIik7XG4gICAgICAgICAgICAgICAgdmFyIGsgPSBjICYmIGYgPyBwYihlKSA6IGUubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBsID0gd2MoNCArIGsgKyAxKSwgcSA9IGwgKyA0O1xuICAgICAgICAgICAgICAgIHooKVtsID4+PiAyID4+PiAwXSA9IGs7XG4gICAgICAgICAgICAgICAgaWYgKGMgJiYgZilcbiAgICAgICAgICAgICAgICAgIHJiKGUsIHEsIGsgKyAxKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChmKVxuICAgICAgICAgICAgICAgICAgZm9yIChmID0gMDsgZiA8IGs7ICsrZikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGUuY2hhckNvZGVBdChmKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKDI1NSA8IHIpXG4gICAgICAgICAgICAgICAgICAgICAgdGhyb3cgWChxKSwgbmV3IFMoXCJTdHJpbmcgaGFzIFVURi0xNiBjb2RlIHVuaXRzIHRoYXQgZG8gbm90IGZpdCBpbiA4IGJpdHNcIik7XG4gICAgICAgICAgICAgICAgICAgIHQoKVtxICsgZiA+Pj4gMF0gPSByO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgIGZvciAoZiA9IDA7IGYgPCBrOyArK2YpXG4gICAgICAgICAgICAgICAgICAgIHQoKVtxICsgZiA+Pj4gMF0gPSBlW2ZdO1xuICAgICAgICAgICAgICAgIG51bGwgIT09IGQgJiYgZC5wdXNoKFgsIGwpO1xuICAgICAgICAgICAgICAgIHJldHVybiBsO1xuICAgICAgICAgICAgICB9LCBhcmdQYWNrQWR2YW5jZTogOCwgcmVhZFZhbHVlRnJvbVBvaW50ZXI6IE9iLCByYihkKSB7XG4gICAgICAgICAgICAgICAgWChkKTtcbiAgICAgICAgICAgICAgfSB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBBOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICAgIGMgPSBSKGMpO1xuICAgICAgICAgICAgICBpZiAoMiA9PT0gYikge1xuICAgICAgICAgICAgICAgIHZhciBkID0gUWI7XG4gICAgICAgICAgICAgICAgdmFyIGUgPSBSYjtcbiAgICAgICAgICAgICAgICB2YXIgZiA9IFNiO1xuICAgICAgICAgICAgICAgIHZhciBrID0gKCkgPT4gY2EoKTtcbiAgICAgICAgICAgICAgICB2YXIgbCA9IDE7XG4gICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgIDQgPT09IGIgJiYgKGQgPSBUYiwgZSA9IFViLCBmID0gVmIsIGsgPSAoKSA9PiB6KCksIGwgPSAyKTtcbiAgICAgICAgICAgICAgVChhLCB7XG4gICAgICAgICAgICAgICAgbmFtZTogYyxcbiAgICAgICAgICAgICAgICBmcm9tV2lyZVR5cGU6IChxKSA9PiB7XG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0geigpW3EgPj4+IDIgPj4+IDBdLCB4ID0gaygpLCBDLCBOID0gcSArIDQsIGcgPSAwOyBnIDw9IHI7ICsrZykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IHEgKyA0ICsgZyAqIGI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnID09IHIgfHwgMCA9PSB4W3UgPj4+IGxdKVxuICAgICAgICAgICAgICAgICAgICAgIE4gPSBkKE4sIHUgLSBOKSwgdm9pZCAwID09PSBDID8gQyA9IE4gOiAoQyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDApLCBDICs9IE4pLCBOID0gdSArIGI7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBYKHEpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIEM7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b1dpcmVUeXBlOiAocSwgcikgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIHIpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBTKGBDYW5ub3QgcGFzcyBub24tc3RyaW5nIHRvIEMrKyBzdHJpbmcgdHlwZSAke2N9YCk7XG4gICAgICAgICAgICAgICAgICB2YXIgeCA9IGYociksIEMgPSB3Yyg0ICsgeCArIGIpO1xuICAgICAgICAgICAgICAgICAgeigpW0MgPj4+IDJdID0geCA+PiBsO1xuICAgICAgICAgICAgICAgICAgZShyLCBDICsgNCwgeCArIGIpO1xuICAgICAgICAgICAgICAgICAgbnVsbCAhPT0gcSAmJiBxLnB1c2goWCwgQyk7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gQztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFyZ1BhY2tBZHZhbmNlOiA4LFxuICAgICAgICAgICAgICAgIHJlYWRWYWx1ZUZyb21Qb2ludGVyOiBNYixcbiAgICAgICAgICAgICAgICByYihxKSB7XG4gICAgICAgICAgICAgICAgICBYKHEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmE6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIGIgPSBSKGIgPj4+IDApO1xuICAgICAgICAgICAgICBUKGEsIHsgSmI6IHRydWUsIG5hbWU6IGIsIGFyZ1BhY2tBZHZhbmNlOiAwLCBmcm9tV2lyZVR5cGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgfSwgdG9XaXJlVHlwZTogKCkgPT4ge1xuICAgICAgICAgICAgICB9IH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5hOiAoKSA9PiB0cnVlLFxuICAgICAgICAgICAgTzogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgYSA9PSBiID4+PiAwID8gc2V0VGltZW91dCgoKSA9PiBiYigpKSA6IEUgPyBwb3N0TWVzc2FnZSh7IHRhcmdldFRocmVhZDogYSwgY21kOiBcImNoZWNrTWFpbGJveFwiIH0pIDogKGEgPSBPLmpiW2FdKSAmJiBhLnBvc3RNZXNzYWdlKHsgY21kOiBcImNoZWNrTWFpbGJveFwiIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFg6IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICAgIGMgLz0gMjtcbiAgICAgICAgICAgICAgY2MubGVuZ3RoID0gYztcbiAgICAgICAgICAgICAgZCA9IGQgPj4+IDAgPj4+IDM7XG4gICAgICAgICAgICAgIGZvciAodmFyIGUgPSAwOyBlIDwgYzsgZSsrKVxuICAgICAgICAgICAgICAgIGNjW2VdID0gSltkICsgMiAqIGVdID8gSltkICsgMiAqIGUgKyAxXSA6IGhhKClbZCArIDIgKiBlICsgMSA+Pj4gMF07XG4gICAgICAgICAgICAgIGEgPSBQY1thXTtcbiAgICAgICAgICAgICAgTy5IYiA9IGI7XG4gICAgICAgICAgICAgIGIgPSBhLmFwcGx5KG51bGwsIGNjKTtcbiAgICAgICAgICAgICAgTy5IYiA9IDA7XG4gICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhOiBYYixcbiAgICAgICAgICAgIG1hOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgIEQgJiYgTy5qYlthID4+PiAwXS5yZWYoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgICAgYSA9IFYoYSA+Pj4gMCk7XG4gICAgICAgICAgICAgIGIgPSBlYyhiLCBcImVtdmFsOjphc1wiKTtcbiAgICAgICAgICAgICAgdmFyIGQgPSBbXSwgZSA9IFcoZCk7XG4gICAgICAgICAgICAgIHooKVtjID4+PiAyID4+PiAwXSA9IGU7XG4gICAgICAgICAgICAgIHJldHVybiBiLnRvV2lyZVR5cGUoZCwgYSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaTogZnVuY3Rpb24oYSwgYiwgYywgZCwgZSkge1xuICAgICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgICAgZCA+Pj49IDA7XG4gICAgICAgICAgICAgIGUgPj4+PSAwO1xuICAgICAgICAgICAgICBhID0gaGNbYSA+Pj4gMF07XG4gICAgICAgICAgICAgIGIgPSBWKGIgPj4+IDApO1xuICAgICAgICAgICAgICBjID0gZ2MoYyk7XG4gICAgICAgICAgICAgIHZhciBmID0gW107XG4gICAgICAgICAgICAgIHooKVtkID4+PiAyID4+PiAwXSA9IFcoZik7XG4gICAgICAgICAgICAgIHJldHVybiBhKGIsIGMsIGYsIGUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHM6IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICAgIGQgPj4+PSAwO1xuICAgICAgICAgICAgICBhID0gaGNbYSA+Pj4gMF07XG4gICAgICAgICAgICAgIGIgPSBWKGIgPj4+IDApO1xuICAgICAgICAgICAgICBjID0gZ2MoYyk7XG4gICAgICAgICAgICAgIGEoYiwgYywgbnVsbCwgZCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYzogTGIsXG4gICAgICAgICAgICBCOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgICBhID0gVihhID4+PiAwKTtcbiAgICAgICAgICAgICAgYiA9IFYoYik7XG4gICAgICAgICAgICAgIHJldHVybiBhID09IGI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbzogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgaWYgKDAgPT09IGEpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFcoaWMoKSk7XG4gICAgICAgICAgICAgIGEgPSBnYyhhKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFcoaWMoKVthXSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZzogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICB2YXIgYyA9IGtjKGEsIGIgPj4+IDApLCBkID0gY1swXTtcbiAgICAgICAgICAgICAgYiA9IGQubmFtZSArIFwiXyRcIiArIGMuc2xpY2UoMSkubWFwKGZ1bmN0aW9uKHgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geC5uYW1lO1xuICAgICAgICAgICAgICB9KS5qb2luKFwiX1wiKSArIFwiJFwiO1xuICAgICAgICAgICAgICB2YXIgZSA9IG5jW2JdO1xuICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBlKVxuICAgICAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICAgICAgICBlID0gW1wicmV0VHlwZVwiXTtcbiAgICAgICAgICAgICAgZm9yICh2YXIgZiA9IFtkXSwgayA9IFwiXCIsIGwgPSAwOyBsIDwgYSAtIDE7ICsrbClcbiAgICAgICAgICAgICAgICBrICs9ICgwICE9PSBsID8gXCIsIFwiIDogXCJcIikgKyBcImFyZ1wiICsgbCwgZS5wdXNoKFwiYXJnVHlwZVwiICsgbCksIGYucHVzaChjWzEgKyBsXSk7XG4gICAgICAgICAgICAgIHZhciBxID0gXCJyZXR1cm4gZnVuY3Rpb24gXCIgKyBtYyhcIm1ldGhvZENhbGxlcl9cIiArIGIpICsgXCIoaGFuZGxlLCBuYW1lLCBkZXN0cnVjdG9ycywgYXJncykge1xcblwiLCByID0gMDtcbiAgICAgICAgICAgICAgZm9yIChsID0gMDsgbCA8IGEgLSAxOyArK2wpXG4gICAgICAgICAgICAgICAgcSArPSBcIiAgICB2YXIgYXJnXCIgKyBsICsgXCIgPSBhcmdUeXBlXCIgKyBsICsgXCIucmVhZFZhbHVlRnJvbVBvaW50ZXIoYXJnc1wiICsgKHIgPyBcIitcIiArIHIgOiBcIlwiKSArIFwiKTtcXG5cIiwgciArPSBjW2wgKyAxXS5hcmdQYWNrQWR2YW5jZTtcbiAgICAgICAgICAgICAgcSArPSBcIiAgICB2YXIgcnYgPSBoYW5kbGVbbmFtZV0oXCIgKyBrICsgXCIpO1xcblwiO1xuICAgICAgICAgICAgICBmb3IgKGwgPSAwOyBsIDwgYSAtIDE7ICsrbClcbiAgICAgICAgICAgICAgICBjW2wgKyAxXS5kZWxldGVPYmplY3QgJiYgKHEgKz0gXCIgICAgYXJnVHlwZVwiICsgbCArIFwiLmRlbGV0ZU9iamVjdChhcmdcIiArIGwgKyBcIik7XFxuXCIpO1xuICAgICAgICAgICAgICBkLkpiIHx8IChxICs9IFwiICAgIHJldHVybiByZXRUeXBlLnRvV2lyZVR5cGUoZGVzdHJ1Y3RvcnMsIHJ2KTtcXG5cIik7XG4gICAgICAgICAgICAgIGUucHVzaChxICsgXCJ9O1xcblwiKTtcbiAgICAgICAgICAgICAgYSA9IHBjKGUpLmFwcGx5KG51bGwsIGYpO1xuICAgICAgICAgICAgICBlID0gamMoYSk7XG4gICAgICAgICAgICAgIHJldHVybiBuY1tiXSA9IGU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcTogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgICAgYSA9IFYoYSA+Pj4gMCk7XG4gICAgICAgICAgICAgIGIgPSBWKGIpO1xuICAgICAgICAgICAgICByZXR1cm4gVyhhW2JdKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgICA0IDwgYSAmJiAoVS5nZXQoYSkuQmIgKz0gMSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeDogZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgICAgZCA+Pj49IDA7XG4gICAgICAgICAgICAgIGEgPSBWKGEgPj4+IDApO1xuICAgICAgICAgICAgICB2YXIgZSA9IHJjW2JdO1xuICAgICAgICAgICAgICBlIHx8IChlID0gcWMoYiksIHJjW2JdID0gZSk7XG4gICAgICAgICAgICAgIHJldHVybiBlKGEsIGMsIGQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHY6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gVyhbXSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbDogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICBhID0gVihhID4+PiAwKTtcbiAgICAgICAgICAgICAgZm9yICh2YXIgYiA9IEFycmF5KGEubGVuZ3RoKSwgYyA9IDA7IGMgPCBhLmxlbmd0aDsgYysrKVxuICAgICAgICAgICAgICAgIGJbY10gPSBhW2NdO1xuICAgICAgICAgICAgICByZXR1cm4gVyhiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgIHJldHVybiBXKGdjKGEgPj4+IDApKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFcoe30pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGY6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIGZvciAodmFyIGIgPSBWKGEpOyBiLmxlbmd0aDsgKSB7XG4gICAgICAgICAgICAgICAgdmFyIGMgPSBiLnBvcCgpO1xuICAgICAgICAgICAgICAgIGIucG9wKCkoYyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgTGIoYSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgajogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICAgIGEgPSBWKGEgPj4+IDApO1xuICAgICAgICAgICAgICBiID0gVihiKTtcbiAgICAgICAgICAgICAgYyA9IFYoYyk7XG4gICAgICAgICAgICAgIGFbYl0gPSBjO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGg6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICAgIGEgPSBlYyhhID4+PiAwLCBcIl9lbXZhbF90YWtlX3ZhbHVlXCIpO1xuICAgICAgICAgICAgICBhID0gYS5yZWFkVmFsdWVGcm9tUG9pbnRlcihiKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFcoYSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXzogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICBhID0gLTkwMDcxOTkyNTQ3NDA5OTIgPiBhIHx8IDkwMDcxOTkyNTQ3NDA5OTIgPCBhID8gTmFOIDogTnVtYmVyKGEpO1xuICAgICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgICAgYSA9IG5ldyBEYXRlKDFlMyAqIGEpO1xuICAgICAgICAgICAgICB3KClbYiA+Pj4gMiA+Pj4gMF0gPSBhLmdldFVUQ1NlY29uZHMoKTtcbiAgICAgICAgICAgICAgdygpW2IgKyA0ID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDTWludXRlcygpO1xuICAgICAgICAgICAgICB3KClbYiArIDggPj4+IDIgPj4+IDBdID0gYS5nZXRVVENIb3VycygpO1xuICAgICAgICAgICAgICB3KClbYiArIDEyID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICAgICAgICB3KClbYiArIDE2ID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICAgICAgdygpW2IgKyAyMCA+Pj4gMiA+Pj4gMF0gPSBhLmdldFVUQ0Z1bGxZZWFyKCkgLSAxOTAwO1xuICAgICAgICAgICAgICB3KClbYiArIDI0ID4+PiAyID4+PiAwXSA9IGEuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgICAgIGEgPSAoYS5nZXRUaW1lKCkgLSBEYXRlLlVUQyhhLmdldFVUQ0Z1bGxZZWFyKCksIDAsIDEsIDAsIDAsIDAsIDApKSAvIDg2NGU1IHwgMDtcbiAgICAgICAgICAgICAgdygpW2IgKyAyOCA+Pj4gMiA+Pj4gMF0gPSBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICQ6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgYSA9IC05MDA3MTk5MjU0NzQwOTkyID4gYSB8fCA5MDA3MTk5MjU0NzQwOTkyIDwgYSA/IE5hTiA6IE51bWJlcihhKTtcbiAgICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICAgIGEgPSBuZXcgRGF0ZSgxZTMgKiBhKTtcbiAgICAgICAgICAgICAgdygpW2IgPj4+IDIgPj4+IDBdID0gYS5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICAgIHcoKVtiICsgNCA+Pj4gMiA+Pj4gMF0gPSBhLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgICAgICAgdygpW2IgKyA4ID4+PiAyID4+PiAwXSA9IGEuZ2V0SG91cnMoKTtcbiAgICAgICAgICAgICAgdygpW2IgKyAxMiA+Pj4gMiA+Pj4gMF0gPSBhLmdldERhdGUoKTtcbiAgICAgICAgICAgICAgdygpW2IgKyAxNiA+Pj4gMiA+Pj4gMF0gPSBhLmdldE1vbnRoKCk7XG4gICAgICAgICAgICAgIHcoKVtiICsgMjAgPj4+IDIgPj4+IDBdID0gYS5nZXRGdWxsWWVhcigpIC0gMTkwMDtcbiAgICAgICAgICAgICAgdygpW2IgKyAyNCA+Pj4gMiA+Pj4gMF0gPSBhLmdldERheSgpO1xuICAgICAgICAgICAgICB2YXIgYyA9IChZKGEuZ2V0RnVsbFllYXIoKSkgPyBzYyA6IHRjKVthLmdldE1vbnRoKCldICsgYS5nZXREYXRlKCkgLSAxIHwgMDtcbiAgICAgICAgICAgICAgdygpW2IgKyAyOCA+Pj4gMiA+Pj4gMF0gPSBjO1xuICAgICAgICAgICAgICB3KClbYiArIDM2ID4+PiAyID4+PiAwXSA9IC0oNjAgKiBhLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICAgICAgICBjID0gbmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLCA2LCAxKS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwgMCwgMSkuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgICAgYSA9IChjICE9IGQgJiYgYS5nZXRUaW1lem9uZU9mZnNldCgpID09IE1hdGgubWluKGQsIGMpKSB8IDA7XG4gICAgICAgICAgICAgIHcoKVtiICsgMzIgPj4+IDIgPj4+IDBdID0gYTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhYTogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgdmFyIGIgPSBuZXcgRGF0ZSh3KClbYSArIDIwID4+PiAyID4+PiAwXSArIDE5MDAsIHcoKVthICsgMTYgPj4+IDIgPj4+IDBdLCB3KClbYSArIDEyID4+PiAyID4+PiAwXSwgdygpW2EgKyA4ID4+PiAyID4+PiAwXSwgdygpW2EgKyA0ID4+PiAyID4+PiAwXSwgdygpW2EgPj4+IDIgPj4+IDBdLCAwKSwgYyA9IHcoKVthICsgMzIgPj4+IDIgPj4+IDBdLCBkID0gYi5nZXRUaW1lem9uZU9mZnNldCgpLCBlID0gbmV3IERhdGUoYi5nZXRGdWxsWWVhcigpLCA2LCAxKS5nZXRUaW1lem9uZU9mZnNldCgpLCBmID0gbmV3IERhdGUoYi5nZXRGdWxsWWVhcigpLCAwLCAxKS5nZXRUaW1lem9uZU9mZnNldCgpLCBrID0gTWF0aC5taW4oZiwgZSk7XG4gICAgICAgICAgICAgIDAgPiBjID8gdygpW2EgKyAzMiA+Pj4gMiA+Pj4gMF0gPSBOdW1iZXIoZSAhPSBmICYmIGsgPT0gZCkgOiAwIDwgYyAhPSAoayA9PSBkKSAmJiAoZSA9IE1hdGgubWF4KGYsIGUpLCBiLnNldFRpbWUoYi5nZXRUaW1lKCkgKyA2ZTQgKiAoKDAgPCBjID8gayA6IGUpIC0gZCkpKTtcbiAgICAgICAgICAgICAgdygpW2EgKyAyNCA+Pj4gMiA+Pj4gMF0gPSBiLmdldERheSgpO1xuICAgICAgICAgICAgICBjID0gKFkoYi5nZXRGdWxsWWVhcigpKSA/IHNjIDogdGMpW2IuZ2V0TW9udGgoKV0gKyBiLmdldERhdGUoKSAtIDEgfCAwO1xuICAgICAgICAgICAgICB3KClbYSArIDI4ID4+PiAyID4+PiAwXSA9IGM7XG4gICAgICAgICAgICAgIHcoKVthID4+PiAyID4+PiAwXSA9IGIuZ2V0U2Vjb25kcygpO1xuICAgICAgICAgICAgICB3KClbYSArIDQgPj4+IDIgPj4+IDBdID0gYi5nZXRNaW51dGVzKCk7XG4gICAgICAgICAgICAgIHcoKVthICsgOCA+Pj4gMiA+Pj4gMF0gPSBiLmdldEhvdXJzKCk7XG4gICAgICAgICAgICAgIHcoKVthICsgMTIgPj4+IDIgPj4+IDBdID0gYi5nZXREYXRlKCk7XG4gICAgICAgICAgICAgIHcoKVthICsgMTYgPj4+IDIgPj4+IDBdID0gYi5nZXRNb250aCgpO1xuICAgICAgICAgICAgICB3KClbYSArIDIwID4+PiAyID4+PiAwXSA9IGIuZ2V0WWVhcigpO1xuICAgICAgICAgICAgICByZXR1cm4gQmlnSW50KGIuZ2V0VGltZSgpIC8gMWUzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBZOiB1YyxcbiAgICAgICAgICAgIFo6IHZjLFxuICAgICAgICAgICAgTjogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICBmdW5jdGlvbiBkKHIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHIgPSByLnRvVGltZVN0cmluZygpLm1hdGNoKC9cXCgoW0EtWmEteiBdKylcXCkkLykpID8gclsxXSA6IFwiR01UXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgICAgdmFyIGUgPSAoLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCkpLmdldEZ1bGxZZWFyKCksIGYgPSBuZXcgRGF0ZShlLCAwLCAxKSwgayA9IG5ldyBEYXRlKGUsIDYsIDEpO1xuICAgICAgICAgICAgICBlID0gZi5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgICB2YXIgbCA9IGsuZ2V0VGltZXpvbmVPZmZzZXQoKSwgcSA9IE1hdGgubWF4KGUsIGwpO1xuICAgICAgICAgICAgICB6KClbYSA+Pj4gMiA+Pj4gMF0gPSA2MCAqIHE7XG4gICAgICAgICAgICAgIHcoKVtiID4+PiAyID4+PiAwXSA9IE51bWJlcihlICE9IGwpO1xuICAgICAgICAgICAgICBhID0gZChmKTtcbiAgICAgICAgICAgICAgYiA9IGQoayk7XG4gICAgICAgICAgICAgIGEgPSB4YyhhKTtcbiAgICAgICAgICAgICAgYiA9IHhjKGIpO1xuICAgICAgICAgICAgICBsIDwgZSA/ICh6KClbYyA+Pj4gMiA+Pj4gMF0gPSBhLCB6KClbYyArIDQgPj4+IDIgPj4+IDBdID0gYikgOiAoeigpW2MgPj4+IDIgPj4+IDBdID0gYiwgeigpW2MgKyA0ID4+PiAyID4+PiAwXSA9IGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG46ICgpID0+IHtcbiAgICAgICAgICAgICAgSChcIlwiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBGOiAoKSA9PiB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgSDogKCkgPT4gRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIGxhOiAoKSA9PiB7XG4gICAgICAgICAgICAgIEZhICs9IDE7XG4gICAgICAgICAgICAgIHRocm93IFwidW53aW5kXCI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgUDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiA0Mjk0OTAxNzYwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHQ6ICgpID0+IHBlcmZvcm1hbmNlLnRpbWVPcmlnaW4gKyBwZXJmb3JtYW5jZS5ub3coKSxcbiAgICAgICAgICAgIHc6ICgpID0+IEQgPyAoaW5pdF9vcygpLCBfX3RvQ29tbW9uSlMob3NfZXhwb3J0cykpLmNwdXMoKS5sZW5ndGggOiBuYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeSxcbiAgICAgICAgICAgIE06IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIHZhciBiID0gdCgpLmxlbmd0aDtcbiAgICAgICAgICAgICAgaWYgKGEgPD0gYiB8fCA0Mjk0OTAxNzYwIDwgYSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIGZvciAodmFyIGMgPSAxOyA0ID49IGM7IGMgKj0gMikge1xuICAgICAgICAgICAgICAgIHZhciBkID0gYiAqICgxICsgMC4yIC8gYyk7XG4gICAgICAgICAgICAgICAgZCA9IE1hdGgubWluKGQsIGEgKyAxMDA2NjMyOTYpO1xuICAgICAgICAgICAgICAgIHZhciBlID0gTWF0aDtcbiAgICAgICAgICAgICAgICBkID0gTWF0aC5tYXgoYSwgZCk7XG4gICAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgICAgZSA9IChlLm1pbi5jYWxsKGUsIDQyOTQ5MDE3NjAsIGQgKyAoNjU1MzYgLSBkICUgNjU1MzYpICUgNjU1MzYpIC0gbS5idWZmZXIuYnl0ZUxlbmd0aCArIDY1NTM1KSAvIDY1NTM2O1xuICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbS5ncm93KGUpO1xuICAgICAgICAgICAgICAgICAgICBwKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmID0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGspIHtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGYgPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmKVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZhOiBCYyxcbiAgICAgICAgICAgIGdhOiBDYyxcbiAgICAgICAgICAgIFY6IFhhLFxuICAgICAgICAgICAgejogRGMsXG4gICAgICAgICAgICBEOiBFYyxcbiAgICAgICAgICAgIGNhOiBGYyxcbiAgICAgICAgICAgIEM6IEhjLFxuICAgICAgICAgICAgYTogbSB8fCBBLndhc21NZW1vcnksXG4gICAgICAgICAgICBvYTogTWMsXG4gICAgICAgICAgICBwOiBmdW5jdGlvbihhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBNYyhhID4+PiAwLCBiID4+PiAwLCBjID4+PiAwLCBkID4+PiAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBaID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IHsgYTogUmMgfTtcbiAgICAgICAgICAgIEsrKztcbiAgICAgICAgICAgIE5hKGEsIGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgICAgdmFyIGMgPSBiLm1vZHVsZTtcbiAgICAgICAgICAgICAgWiA9IGIuaW5zdGFuY2UuZXhwb3J0cztcbiAgICAgICAgICAgICAgWiA9IFNjKCk7XG4gICAgICAgICAgICAgIE8uRmIucHVzaChaLlhhKTtcbiAgICAgICAgICAgICAgZ2IgPSBaLl9hO1xuICAgICAgICAgICAgICBEYS51bnNoaWZ0KFouc2EpO1xuICAgICAgICAgICAgICB4YSA9IGM7XG4gICAgICAgICAgICAgIElhKCk7XG4gICAgICAgICAgICB9KS5jYXRjaChrYSk7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgfSgpO1xuICAgICAgICAgIEEuX09ydEluaXQgPSAoYSwgYikgPT4gKEEuX09ydEluaXQgPSBaLnRhKShhLCBiKTtcbiAgICAgICAgICBBLl9PcnRHZXRMYXN0RXJyb3IgPSAoYSwgYikgPT4gKEEuX09ydEdldExhc3RFcnJvciA9IFoudWEpKGEsIGIpO1xuICAgICAgICAgIEEuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zID0gKGEsIGIsIGMsIGQsIGUsIGYsIGssIGwsIHEsIHIpID0+IChBLl9PcnRDcmVhdGVTZXNzaW9uT3B0aW9ucyA9IFoudmEpKGEsIGIsIGMsIGQsIGUsIGYsIGssIGwsIHEsIHIpO1xuICAgICAgICAgIEEuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyID0gKGEsIGIpID0+IChBLl9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlciA9IFoud2EpKGEsIGIpO1xuICAgICAgICAgIEEuX09ydEFkZEZyZWVEaW1lbnNpb25PdmVycmlkZSA9IChhLCBiLCBjKSA9PiAoQS5fT3J0QWRkRnJlZURpbWVuc2lvbk92ZXJyaWRlID0gWi54YSkoYSwgYiwgYyk7XG4gICAgICAgICAgQS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5ID0gKGEsIGIsIGMpID0+IChBLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkgPSBaLnlhKShhLCBiLCBjKTtcbiAgICAgICAgICBBLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnMgPSAoYSkgPT4gKEEuX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucyA9IFouemEpKGEpO1xuICAgICAgICAgIEEuX09ydENyZWF0ZVNlc3Npb24gPSAoYSwgYiwgYykgPT4gKEEuX09ydENyZWF0ZVNlc3Npb24gPSBaLkFhKShhLCBiLCBjKTtcbiAgICAgICAgICBBLl9PcnRSZWxlYXNlU2Vzc2lvbiA9IChhKSA9PiAoQS5fT3J0UmVsZWFzZVNlc3Npb24gPSBaLkJhKShhKTtcbiAgICAgICAgICBBLl9PcnRHZXRJbnB1dE91dHB1dENvdW50ID0gKGEsIGIsIGMpID0+IChBLl9PcnRHZXRJbnB1dE91dHB1dENvdW50ID0gWi5DYSkoYSwgYiwgYyk7XG4gICAgICAgICAgQS5fT3J0R2V0SW5wdXROYW1lID0gKGEsIGIpID0+IChBLl9PcnRHZXRJbnB1dE5hbWUgPSBaLkRhKShhLCBiKTtcbiAgICAgICAgICBBLl9PcnRHZXRPdXRwdXROYW1lID0gKGEsIGIpID0+IChBLl9PcnRHZXRPdXRwdXROYW1lID0gWi5FYSkoYSwgYik7XG4gICAgICAgICAgQS5fT3J0RnJlZSA9IChhKSA9PiAoQS5fT3J0RnJlZSA9IFouRmEpKGEpO1xuICAgICAgICAgIEEuX09ydENyZWF0ZVRlbnNvciA9IChhLCBiLCBjLCBkLCBlLCBmKSA9PiAoQS5fT3J0Q3JlYXRlVGVuc29yID0gWi5HYSkoYSwgYiwgYywgZCwgZSwgZik7XG4gICAgICAgICAgQS5fT3J0R2V0VGVuc29yRGF0YSA9IChhLCBiLCBjLCBkLCBlKSA9PiAoQS5fT3J0R2V0VGVuc29yRGF0YSA9IFouSGEpKGEsIGIsIGMsIGQsIGUpO1xuICAgICAgICAgIEEuX09ydFJlbGVhc2VUZW5zb3IgPSAoYSkgPT4gKEEuX09ydFJlbGVhc2VUZW5zb3IgPSBaLklhKShhKTtcbiAgICAgICAgICBBLl9PcnRDcmVhdGVSdW5PcHRpb25zID0gKGEsIGIsIGMsIGQpID0+IChBLl9PcnRDcmVhdGVSdW5PcHRpb25zID0gWi5KYSkoYSwgYiwgYywgZCk7XG4gICAgICAgICAgQS5fT3J0QWRkUnVuQ29uZmlnRW50cnkgPSAoYSwgYiwgYykgPT4gKEEuX09ydEFkZFJ1bkNvbmZpZ0VudHJ5ID0gWi5LYSkoYSwgYiwgYyk7XG4gICAgICAgICAgQS5fT3J0UmVsZWFzZVJ1bk9wdGlvbnMgPSAoYSkgPT4gKEEuX09ydFJlbGVhc2VSdW5PcHRpb25zID0gWi5MYSkoYSk7XG4gICAgICAgICAgQS5fT3J0Q3JlYXRlQmluZGluZyA9IChhKSA9PiAoQS5fT3J0Q3JlYXRlQmluZGluZyA9IFouTWEpKGEpO1xuICAgICAgICAgIEEuX09ydEJpbmRJbnB1dCA9IChhLCBiLCBjKSA9PiAoQS5fT3J0QmluZElucHV0ID0gWi5OYSkoYSwgYiwgYyk7XG4gICAgICAgICAgQS5fT3J0QmluZE91dHB1dCA9IChhLCBiLCBjLCBkKSA9PiAoQS5fT3J0QmluZE91dHB1dCA9IFouT2EpKGEsIGIsIGMsIGQpO1xuICAgICAgICAgIEEuX09ydENsZWFyQm91bmRPdXRwdXRzID0gKGEpID0+IChBLl9PcnRDbGVhckJvdW5kT3V0cHV0cyA9IFouUGEpKGEpO1xuICAgICAgICAgIEEuX09ydFJlbGVhc2VCaW5kaW5nID0gKGEpID0+IChBLl9PcnRSZWxlYXNlQmluZGluZyA9IFouUWEpKGEpO1xuICAgICAgICAgIEEuX09ydFJ1bldpdGhCaW5kaW5nID0gKGEsIGIsIGMsIGQsIGUpID0+IChBLl9PcnRSdW5XaXRoQmluZGluZyA9IFouUmEpKGEsIGIsIGMsIGQsIGUpO1xuICAgICAgICAgIEEuX09ydFJ1biA9IChhLCBiLCBjLCBkLCBlLCBmLCBrLCBsKSA9PiAoQS5fT3J0UnVuID0gWi5TYSkoYSwgYiwgYywgZCwgZSwgZiwgaywgbCk7XG4gICAgICAgICAgQS5fT3J0RW5kUHJvZmlsaW5nID0gKGEpID0+IChBLl9PcnRFbmRQcm9maWxpbmcgPSBaLlRhKShhKTtcbiAgICAgICAgICB2YXIgYWIgPSBBLl9wdGhyZWFkX3NlbGYgPSAoKSA9PiAoYWIgPSBBLl9wdGhyZWFkX3NlbGYgPSBaLlVhKSgpLCB3YyA9IEEuX21hbGxvYyA9IChhKSA9PiAod2MgPSBBLl9tYWxsb2MgPSBaLlZhKShhKSwgWCA9IEEuX2ZyZWUgPSAoYSkgPT4gKFggPSBBLl9mcmVlID0gWi5XYSkoYSk7XG4gICAgICAgICAgQS5fX2Vtc2NyaXB0ZW5fdGxzX2luaXQgPSAoKSA9PiAoQS5fX2Vtc2NyaXB0ZW5fdGxzX2luaXQgPSBaLlhhKSgpO1xuICAgICAgICAgIHZhciBkYyA9IChhKSA9PiAoZGMgPSBaLllhKShhKTtcbiAgICAgICAgICBBLl9fZW1iaW5kX2luaXRpYWxpemVfYmluZGluZ3MgPSAoKSA9PiAoQS5fX2VtYmluZF9pbml0aWFsaXplX2JpbmRpbmdzID0gWi5aYSkoKTtcbiAgICAgICAgICB2YXIgUWMgPSBBLl9fZW1zY3JpcHRlbl90aHJlYWRfaW5pdCA9IChhLCBiLCBjLCBkLCBlLCBmKSA9PiAoUWMgPSBBLl9fZW1zY3JpcHRlbl90aHJlYWRfaW5pdCA9IFouJGEpKGEsIGIsIGMsIGQsIGUsIGYpO1xuICAgICAgICAgIEEuX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkID0gKCkgPT4gKEEuX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkID0gWi5hYikoKTtcbiAgICAgICAgICB2YXIgYmMgPSAoYSwgYiwgYywgZCkgPT4gKGJjID0gWi5iYikoYSwgYiwgYywgZCksICRhID0gKGEpID0+ICgkYSA9IFouY2IpKGEpLCBoYiA9IEEuX19lbXNjcmlwdGVuX3RocmVhZF9leGl0ID0gKGEpID0+IChoYiA9IEEuX19lbXNjcmlwdGVuX3RocmVhZF9leGl0ID0gWi5kYikoYSksIFliID0gQS5fX2Vtc2NyaXB0ZW5fY2hlY2tfbWFpbGJveCA9ICgpID0+IChZYiA9IEEuX19lbXNjcmlwdGVuX2NoZWNrX21haWxib3ggPSBaLmViKSgpLCBkYiA9IChhLCBiKSA9PiAoZGIgPSBaLmZiKShhLCBiKSwgWmIgPSAoKSA9PiAoWmIgPSBaLmdiKSgpLCBlYiA9IChhKSA9PiAoZWIgPSBaLmhiKShhKSwgYWMgPSAoYSkgPT4gKGFjID0gWi5pYikoYSk7XG4gICAgICAgICAgZnVuY3Rpb24gU2MoKSB7XG4gICAgICAgICAgICB2YXIgYSA9IFo7XG4gICAgICAgICAgICBhID0gT2JqZWN0LmFzc2lnbih7fSwgYSk7XG4gICAgICAgICAgICB2YXIgYiA9IChkKSA9PiAoKSA9PiBkKCkgPj4+IDAsIGMgPSAoZCkgPT4gKGUpID0+IGQoZSkgPj4+IDA7XG4gICAgICAgICAgICBhLl9fZXJybm9fbG9jYXRpb24gPSBiKGEuX19lcnJub19sb2NhdGlvbik7XG4gICAgICAgICAgICBhLlVhID0gYihhLlVhKTtcbiAgICAgICAgICAgIGEuVmEgPSBjKGEuVmEpO1xuICAgICAgICAgICAgYS5ZYSA9IGMoYS5ZYSk7XG4gICAgICAgICAgICBhLmdiID0gYihhLmdiKTtcbiAgICAgICAgICAgIGEuaWIgPSBjKGEuaWIpO1xuICAgICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIEEua2VlcFJ1bnRpbWVBbGl2ZSA9IEdhO1xuICAgICAgICAgIEEud2FzbU1lbW9yeSA9IG07XG4gICAgICAgICAgQS5zdGFja0FsbG9jID0gYWM7XG4gICAgICAgICAgQS5zdGFja1NhdmUgPSBaYjtcbiAgICAgICAgICBBLnN0YWNrUmVzdG9yZSA9IGViO1xuICAgICAgICAgIEEuVVRGOFRvU3RyaW5nID0gVWE7XG4gICAgICAgICAgQS5zdHJpbmdUb1VURjggPSByYjtcbiAgICAgICAgICBBLmxlbmd0aEJ5dGVzVVRGOCA9IHBiO1xuICAgICAgICAgIEEuRXhpdFN0YXR1cyA9IE9hO1xuICAgICAgICAgIEEuUFRocmVhZCA9IE87XG4gICAgICAgICAgdmFyIFRjO1xuICAgICAgICAgIEwgPSBmdW5jdGlvbiBVYygpIHtcbiAgICAgICAgICAgIFRjIHx8IFZjKCk7XG4gICAgICAgICAgICBUYyB8fCAoTCA9IFVjKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIFZjKCkge1xuICAgICAgICAgICAgMCA8IEsgfHwgKEUgPyAoamEoQSksIEUgfHwgY2IoRGEpLCBzdGFydFdvcmtlcihBKSkgOiAoY2IoQ2EpLCAwIDwgSyB8fCBUYyB8fCAoVGMgPSB0cnVlLCBBLmNhbGxlZFJ1biA9IHRydWUsIHlhIHx8IChFIHx8IGNiKERhKSwgamEoQSksIEUgfHwgY2IoRWEpKSkpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgVmMoKTtcbiAgICAgICAgICByZXR1cm4gbW9kdWxlQXJnLnJlYWR5O1xuICAgICAgICB9O1xuICAgICAgfSkoKTtcbiAgICAgIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiKVxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IG9ydFdhc21UaHJlYWRlZDtcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmVbXCJhbWRcIl0pXG4gICAgICAgIGRlZmluZShbXSwgKCkgPT4gb3J0V2FzbVRocmVhZGVkKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHdlYi9saWIvd2FzbS9iaW5kaW5nL29ydC13YXNtLXRocmVhZGVkLndvcmtlci5qc1xuICB2YXIgcmVxdWlyZV9vcnRfd2FzbV90aHJlYWRlZF93b3JrZXIgPSBfX2NvbW1vbkpTKHtcbiAgICBcIndlYi9saWIvd2FzbS9iaW5kaW5nL29ydC13YXNtLXRocmVhZGVkLndvcmtlci5qc1wiKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgbW9kdWxlLmV4cG9ydHMgPSAnXCJ1c2Ugc3RyaWN0XCI7dmFyIE1vZHVsZT17fTt2YXIgRU5WSVJPTk1FTlRfSVNfTk9ERT10eXBlb2YgcHJvY2Vzcz09XCJvYmplY3RcIiYmdHlwZW9mIHByb2Nlc3MudmVyc2lvbnM9PVwib2JqZWN0XCImJnR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGU9PVwic3RyaW5nXCI7aWYoRU5WSVJPTk1FTlRfSVNfTk9ERSl7dmFyIG5vZGVXb3JrZXJUaHJlYWRzPXJlcXVpcmUoXCJ3b3JrZXJfdGhyZWFkc1wiKTt2YXIgcGFyZW50UG9ydD1ub2RlV29ya2VyVGhyZWFkcy5wYXJlbnRQb3J0O3BhcmVudFBvcnQub24oXCJtZXNzYWdlXCIsZGF0YT0+b25tZXNzYWdlKHtkYXRhOmRhdGF9KSk7dmFyIGZzPXJlcXVpcmUoXCJmc1wiKTtPYmplY3QuYXNzaWduKGdsb2JhbCx7c2VsZjpnbG9iYWwscmVxdWlyZTpyZXF1aXJlLE1vZHVsZTpNb2R1bGUsbG9jYXRpb246e2hyZWY6X19maWxlbmFtZX0sV29ya2VyOm5vZGVXb3JrZXJUaHJlYWRzLldvcmtlcixpbXBvcnRTY3JpcHRzOmY9PigwLGV2YWwpKGZzLnJlYWRGaWxlU3luYyhmLFwidXRmOFwiKStcIi8vIyBzb3VyY2VVUkw9XCIrZikscG9zdE1lc3NhZ2U6bXNnPT5wYXJlbnRQb3J0LnBvc3RNZXNzYWdlKG1zZykscGVyZm9ybWFuY2U6Z2xvYmFsLnBlcmZvcm1hbmNlfHx7bm93OkRhdGUubm93fX0pfXZhciBpbml0aWFsaXplZEpTPWZhbHNlO2Z1bmN0aW9uIHRocmVhZFByaW50RXJyKCl7dmFyIHRleHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5qb2luKFwiIFwiKTtpZihFTlZJUk9OTUVOVF9JU19OT0RFKXtmcy53cml0ZVN5bmMoMix0ZXh0K1wiXFxcXG5cIik7cmV0dXJufWNvbnNvbGUuZXJyb3IodGV4dCl9ZnVuY3Rpb24gdGhyZWFkQWxlcnQoKXt2YXIgdGV4dD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLmpvaW4oXCIgXCIpO3Bvc3RNZXNzYWdlKHtjbWQ6XCJhbGVydFwiLHRleHQ6dGV4dCx0aHJlYWRJZDpNb2R1bGVbXCJfcHRocmVhZF9zZWxmXCJdKCl9KX12YXIgZXJyPXRocmVhZFByaW50RXJyO3NlbGYuYWxlcnQ9dGhyZWFkQWxlcnQ7TW9kdWxlW1wiaW5zdGFudGlhdGVXYXNtXCJdPShpbmZvLHJlY2VpdmVJbnN0YW5jZSk9Pnt2YXIgbW9kdWxlPU1vZHVsZVtcIndhc21Nb2R1bGVcIl07TW9kdWxlW1wid2FzbU1vZHVsZVwiXT1udWxsO3ZhciBpbnN0YW5jZT1uZXcgV2ViQXNzZW1ibHkuSW5zdGFuY2UobW9kdWxlLGluZm8pO3JldHVybiByZWNlaXZlSW5zdGFuY2UoaW5zdGFuY2UpfTtzZWxmLm9udW5oYW5kbGVkcmVqZWN0aW9uPWU9Pnt0aHJvdyBlLnJlYXNvbnx8ZX07ZnVuY3Rpb24gaGFuZGxlTWVzc2FnZShlKXt0cnl7aWYoZS5kYXRhLmNtZD09PVwibG9hZFwiKXtsZXQgbWVzc2FnZVF1ZXVlPVtdO3NlbGYub25tZXNzYWdlPWU9Pm1lc3NhZ2VRdWV1ZS5wdXNoKGUpO3NlbGYuc3RhcnRXb3JrZXI9aW5zdGFuY2U9PntNb2R1bGU9aW5zdGFuY2U7cG9zdE1lc3NhZ2Uoe1wiY21kXCI6XCJsb2FkZWRcIn0pO2ZvcihsZXQgbXNnIG9mIG1lc3NhZ2VRdWV1ZSl7aGFuZGxlTWVzc2FnZShtc2cpfXNlbGYub25tZXNzYWdlPWhhbmRsZU1lc3NhZ2V9O01vZHVsZVtcIndhc21Nb2R1bGVcIl09ZS5kYXRhLndhc21Nb2R1bGU7Zm9yKGNvbnN0IGhhbmRsZXIgb2YgZS5kYXRhLmhhbmRsZXJzKXtNb2R1bGVbaGFuZGxlcl09KC4uLmFyZ3MpPT57cG9zdE1lc3NhZ2Uoe2NtZDpcImNhbGxIYW5kbGVyXCIsaGFuZGxlcjpoYW5kbGVyLGFyZ3M6YXJnc30pfX1Nb2R1bGVbXCJ3YXNtTWVtb3J5XCJdPWUuZGF0YS53YXNtTWVtb3J5O01vZHVsZVtcImJ1ZmZlclwiXT1Nb2R1bGVbXCJ3YXNtTWVtb3J5XCJdLmJ1ZmZlcjtNb2R1bGVbXCJFTlZJUk9OTUVOVF9JU19QVEhSRUFEXCJdPXRydWU7aWYodHlwZW9mIGUuZGF0YS51cmxPckJsb2I9PVwic3RyaW5nXCIpe2ltcG9ydFNjcmlwdHMoZS5kYXRhLnVybE9yQmxvYil9ZWxzZXt2YXIgb2JqZWN0VXJsPVVSTC5jcmVhdGVPYmplY3RVUkwoZS5kYXRhLnVybE9yQmxvYik7aW1wb3J0U2NyaXB0cyhvYmplY3RVcmwpO1VSTC5yZXZva2VPYmplY3RVUkwob2JqZWN0VXJsKX1vcnRXYXNtVGhyZWFkZWQoTW9kdWxlKX1lbHNlIGlmKGUuZGF0YS5jbWQ9PT1cInJ1blwiKXtNb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX2luaXRcIl0oZS5kYXRhLnB0aHJlYWRfcHRyLC8qaXNfbWFpbj0qLzAsLyppc19ydW50aW1lPSovMCwvKmNhbl9ibG9jaz0qLzEpO01vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfbWFpbGJveF9hd2FpdFwiXShlLmRhdGEucHRocmVhZF9wdHIpO01vZHVsZVtcImVzdGFibGlzaFN0YWNrU3BhY2VcIl0oKTtNb2R1bGVbXCJQVGhyZWFkXCJdLnJlY2VpdmVPYmplY3RUcmFuc2ZlcihlLmRhdGEpO01vZHVsZVtcIlBUaHJlYWRcIl0udGhyZWFkSW5pdFRMUygpO2lmKCFpbml0aWFsaXplZEpTKXtNb2R1bGVbXCJfX2VtYmluZF9pbml0aWFsaXplX2JpbmRpbmdzXCJdKCk7aW5pdGlhbGl6ZWRKUz10cnVlfXRyeXtNb2R1bGVbXCJpbnZva2VFbnRyeVBvaW50XCJdKGUuZGF0YS5zdGFydF9yb3V0aW5lLGUuZGF0YS5hcmcpfWNhdGNoKGV4KXtpZihleCE9XCJ1bndpbmRcIil7dGhyb3cgZXh9fX1lbHNlIGlmKGUuZGF0YS5jbWQ9PT1cImNhbmNlbFwiKXtpZihNb2R1bGVbXCJfcHRocmVhZF9zZWxmXCJdKCkpe01vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfZXhpdFwiXSgtMSl9fWVsc2UgaWYoZS5kYXRhLnRhcmdldD09PVwic2V0aW1tZWRpYXRlXCIpe31lbHNlIGlmKGUuZGF0YS5jbWQ9PT1cImNoZWNrTWFpbGJveFwiKXtpZihpbml0aWFsaXplZEpTKXtNb2R1bGVbXCJjaGVja01haWxib3hcIl0oKX19ZWxzZSBpZihlLmRhdGEuY21kKXtlcnIoYHdvcmtlci5qcyByZWNlaXZlZCB1bmtub3duIGNvbW1hbmQgJHtlLmRhdGEuY21kfWApO2VycihlLmRhdGEpfX1jYXRjaChleCl7aWYoTW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkXCJdKXtNb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX2NyYXNoZWRcIl0oKX10aHJvdyBleH19c2VsZi5vbm1lc3NhZ2U9aGFuZGxlTWVzc2FnZTtcXG4nO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gbm9kZWpzLWlnbm9yZTpub2RlOnBhdGhcbiAgdmFyIGpvaW4gPSB2b2lkIDA7XG5cbiAgLy8gd2ViL2xpYi93YXNtL3dhc20tZmFjdG9yeS50c1xuICB2YXIgb3J0V2FzbUZhY3Rvcnk7XG4gIGlmIChmYWxzZSkge1xuICAgIG9ydFdhc21GYWN0b3J5ID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBvcnRXYXNtRmFjdG9yeSA9IHRydWUgPyByZXF1aXJlX29ydF93YXNtKCkgOiBudWxsO1xuICB9XG4gIHZhciBvcnRXYXNtRmFjdG9yeVRocmVhZGVkID0gdHJ1ZSA/IHRydWUgPyByZXF1aXJlX29ydF93YXNtX3RocmVhZGVkKCkgOiBudWxsIDogb3J0V2FzbUZhY3Rvcnk7XG4gIHZhciB3YXNtO1xuICB2YXIgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgdmFyIGluaXRpYWxpemluZyA9IGZhbHNlO1xuICB2YXIgYWJvcnRlZCA9IGZhbHNlO1xuICB2YXIgaXNNdWx0aVRocmVhZFN1cHBvcnRlZCA9ICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIE1lc3NhZ2VDaGFubmVsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIG5ldyBNZXNzYWdlQ2hhbm5lbCgpLnBvcnQxLnBvc3RNZXNzYWdlKG5ldyBTaGFyZWRBcnJheUJ1ZmZlcigxKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gV2ViQXNzZW1ibHkudmFsaWRhdGUobmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgICAwLFxuICAgICAgICA5NyxcbiAgICAgICAgMTE1LFxuICAgICAgICAxMDksXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDQsXG4gICAgICAgIDEsXG4gICAgICAgIDk2LFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAzLFxuICAgICAgICAyLFxuICAgICAgICAxLFxuICAgICAgICAwLFxuICAgICAgICA1LFxuICAgICAgICA0LFxuICAgICAgICAxLFxuICAgICAgICAzLFxuICAgICAgICAxLFxuICAgICAgICAxLFxuICAgICAgICAxMCxcbiAgICAgICAgMTEsXG4gICAgICAgIDEsXG4gICAgICAgIDksXG4gICAgICAgIDAsXG4gICAgICAgIDY1LFxuICAgICAgICAwLFxuICAgICAgICAyNTQsXG4gICAgICAgIDE2LFxuICAgICAgICAyLFxuICAgICAgICAwLFxuICAgICAgICAyNixcbiAgICAgICAgMTFcbiAgICAgIF0pKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICB2YXIgaXNTaW1kU3VwcG9ydGVkID0gKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gV2ViQXNzZW1ibHkudmFsaWRhdGUobmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgICAwLFxuICAgICAgICA5NyxcbiAgICAgICAgMTE1LFxuICAgICAgICAxMDksXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDEsXG4gICAgICAgIDQsXG4gICAgICAgIDEsXG4gICAgICAgIDk2LFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAzLFxuICAgICAgICAyLFxuICAgICAgICAxLFxuICAgICAgICAwLFxuICAgICAgICAxMCxcbiAgICAgICAgMzAsXG4gICAgICAgIDEsXG4gICAgICAgIDI4LFxuICAgICAgICAwLFxuICAgICAgICA2NSxcbiAgICAgICAgMCxcbiAgICAgICAgMjUzLFxuICAgICAgICAxNSxcbiAgICAgICAgMjUzLFxuICAgICAgICAxMixcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMjUzLFxuICAgICAgICAxODYsXG4gICAgICAgIDEsXG4gICAgICAgIDI2LFxuICAgICAgICAxMVxuICAgICAgXSkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG4gIHZhciBnZXRXYXNtRmlsZU5hbWUgPSAodXNlU2ltZCwgdXNlVGhyZWFkcykgPT4ge1xuICAgIGlmICh1c2VTaW1kKSB7XG4gICAgICBpZiAoZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIFwib3J0LXRyYWluaW5nLXdhc20tc2ltZC53YXNtXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXNlVGhyZWFkcyA/IFwib3J0LXdhc20tc2ltZC10aHJlYWRlZC53YXNtXCIgOiBcIm9ydC13YXNtLXNpbWQud2FzbVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdXNlVGhyZWFkcyA/IFwib3J0LXdhc20tdGhyZWFkZWQud2FzbVwiIDogXCJvcnQtd2FzbS53YXNtXCI7XG4gICAgfVxuICB9O1xuICB2YXIgaW5pdGlhbGl6ZVdlYkFzc2VtYmx5ID0gYXN5bmMgKGZsYWdzKSA9PiB7XG4gICAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGlmIChpbml0aWFsaXppbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm11bHRpcGxlIGNhbGxzIHRvICdpbml0aWFsaXplV2ViQXNzZW1ibHkoKScgZGV0ZWN0ZWQuXCIpO1xuICAgIH1cbiAgICBpZiAoYWJvcnRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicHJldmlvdXMgY2FsbCB0byAnaW5pdGlhbGl6ZVdlYkFzc2VtYmx5KCknIGZhaWxlZC5cIik7XG4gICAgfVxuICAgIGluaXRpYWxpemluZyA9IHRydWU7XG4gICAgY29uc3QgdGltZW91dCA9IGZsYWdzLmluaXRUaW1lb3V0O1xuICAgIGNvbnN0IG51bVRocmVhZHMgPSBmbGFncy5udW1UaHJlYWRzO1xuICAgIGNvbnN0IHNpbWQgPSBmbGFncy5zaW1kO1xuICAgIGNvbnN0IHVzZVRocmVhZHMgPSBudW1UaHJlYWRzID4gMSAmJiBpc011bHRpVGhyZWFkU3VwcG9ydGVkKCk7XG4gICAgY29uc3QgdXNlU2ltZCA9IHNpbWQgJiYgaXNTaW1kU3VwcG9ydGVkKCk7XG4gICAgY29uc3Qgd2FzbVBhdGhzID0gZmxhZ3Mud2FzbVBhdGhzO1xuICAgIGNvbnN0IHdhc21QcmVmaXhPdmVycmlkZSA9IHR5cGVvZiB3YXNtUGF0aHMgPT09IFwic3RyaW5nXCIgPyB3YXNtUGF0aHMgOiB2b2lkIDA7XG4gICAgY29uc3Qgd2FzbUZpbGVOYW1lID0gZ2V0V2FzbUZpbGVOYW1lKHVzZVNpbWQsIHVzZVRocmVhZHMpO1xuICAgIGNvbnN0IHdhc21QYXRoT3ZlcnJpZGUgPSB0eXBlb2Ygd2FzbVBhdGhzID09PSBcIm9iamVjdFwiID8gd2FzbVBhdGhzW3dhc21GaWxlTmFtZV0gOiB2b2lkIDA7XG4gICAgbGV0IGlzVGltZW91dCA9IGZhbHNlO1xuICAgIGNvbnN0IHRhc2tzID0gW107XG4gICAgaWYgKHRpbWVvdXQgPiAwKSB7XG4gICAgICB0YXNrcy5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGlzVGltZW91dCA9IHRydWU7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgdGFza3MucHVzaChuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBmYWN0b3J5ID0gdXNlVGhyZWFkcyA/IG9ydFdhc21GYWN0b3J5VGhyZWFkZWQgOiBvcnRXYXNtRmFjdG9yeTtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgbG9jYXRlRmlsZTogKGZpbGVOYW1lLCBzY3JpcHREaXJlY3RvcnkpID0+IHtcbiAgICAgICAgICBpZiAodXNlVGhyZWFkcyAmJiBmaWxlTmFtZS5lbmRzV2l0aChcIi53b3JrZXIuanNcIikgJiYgdHlwZW9mIEJsb2IgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBVUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgLy8gVGhpcyByZXF1aXJlKCkgZnVuY3Rpb24gaXMgaGFuZGxlZCBieSBlc2J1aWxkIHBsdWdpbiB0byBsb2FkIGZpbGUgY29udGVudCBhcyBzdHJpbmcuXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHNcbiAgICAgICAgICAgICAgICByZXF1aXJlX29ydF93YXNtX3RocmVhZGVkX3dvcmtlcigpXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHsgdHlwZTogXCJ0ZXh0L2phdmFzY3JpcHRcIiB9XG4gICAgICAgICAgICApKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGZpbGVOYW1lLmVuZHNXaXRoKFwiLndhc21cIikpIHtcbiAgICAgICAgICAgIGlmICh3YXNtUGF0aE92ZXJyaWRlKSB7XG4gICAgICAgICAgICAgIHJldHVybiB3YXNtUGF0aE92ZXJyaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJlZml4ID0gd2FzbVByZWZpeE92ZXJyaWRlID8/IHNjcmlwdERpcmVjdG9yeTtcbiAgICAgICAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICAgICAgICBpZiAod2FzbUZpbGVOYW1lID09PSBcIm9ydC13YXNtLXNpbWQud2FzbVwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZWZpeCArIFwib3J0LXdhc20tc2ltZC5qc2VwLndhc21cIjtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh3YXNtRmlsZU5hbWUgPT09IFwib3J0LXdhc20tc2ltZC10aHJlYWRlZC53YXNtXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgXCJvcnQtd2FzbS1zaW1kLXRocmVhZGVkLmpzZXAud2FzbVwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgd2FzbUZpbGVOYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc2NyaXB0RGlyZWN0b3J5ICsgZmlsZU5hbWU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBpZiAodXNlVGhyZWFkcykge1xuICAgICAgICBjb25maWcubnVtVGhyZWFkcyA9IG51bVRocmVhZHM7XG4gICAgICAgIGlmICh0eXBlb2YgQmxvYiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGNvbmZpZy5tYWluU2NyaXB0VXJsT3JCbG9iID0gam9pbihfX2Rpcm5hbWUsIFwib3J0LXdhc20tdGhyZWFkZWQuanNcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgc2NyaXB0U291cmNlQ29kZSA9IGB2YXIgb3J0V2FzbVRocmVhZGVkPSR7ZmFjdG9yeS50b1N0cmluZygpfTtgO1xuICAgICAgICAgIGNvbmZpZy5tYWluU2NyaXB0VXJsT3JCbG9iID0gbmV3IEJsb2IoW3NjcmlwdFNvdXJjZUNvZGVdLCB7IHR5cGU6IFwidGV4dC9qYXZhc2NyaXB0XCIgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZhY3RvcnkoY29uZmlnKS50aGVuKFxuICAgICAgICAvLyB3YXNtIG1vZHVsZSBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHlcbiAgICAgICAgKG1vZHVsZSkgPT4ge1xuICAgICAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuICAgICAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICB3YXNtID0gbW9kdWxlO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gd2FzbSBtb2R1bGUgZmFpbGVkIHRvIGluaXRpYWxpemVcbiAgICAgICAgKHdoYXQpID0+IHtcbiAgICAgICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgICAgICBhYm9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICByZWplY3Qod2hhdCk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSkpO1xuICAgIGF3YWl0IFByb21pc2UucmFjZSh0YXNrcyk7XG4gICAgaWYgKGlzVGltZW91dCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBXZWJBc3NlbWJseSBiYWNrZW5kIGluaXRpYWxpemluZyBmYWlsZWQgZHVlIHRvIHRpbWVvdXQ6ICR7dGltZW91dH1tc2ApO1xuICAgIH1cbiAgfTtcbiAgdmFyIGdldEluc3RhbmNlID0gKCkgPT4ge1xuICAgIGlmIChpbml0aWFsaXplZCAmJiB3YXNtKSB7XG4gICAgICByZXR1cm4gd2FzbTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiV2ViQXNzZW1ibHkgaXMgbm90IGluaXRpYWxpemVkIHlldC5cIik7XG4gIH07XG5cbiAgLy8gd2ViL2xpYi93YXNtL3dhc20tdXRpbHMudHNcbiAgdmFyIGFsbG9jV2FzbVN0cmluZyA9IChkYXRhLCBhbGxvY3MpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgY29uc3QgZGF0YUxlbmd0aCA9IHdhc20yLmxlbmd0aEJ5dGVzVVRGOChkYXRhKSArIDE7XG4gICAgY29uc3QgZGF0YU9mZnNldCA9IHdhc20yLl9tYWxsb2MoZGF0YUxlbmd0aCk7XG4gICAgd2FzbTIuc3RyaW5nVG9VVEY4KGRhdGEsIGRhdGFPZmZzZXQsIGRhdGFMZW5ndGgpO1xuICAgIGFsbG9jcy5wdXNoKGRhdGFPZmZzZXQpO1xuICAgIHJldHVybiBkYXRhT2Zmc2V0O1xuICB9O1xuICB2YXIgaXRlcmF0ZUV4dHJhT3B0aW9ucyA9IChvcHRpb25zLCBwcmVmaXgsIHNlZW4sIGhhbmRsZXIpID0+IHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT0gXCJvYmplY3RcIiAmJiBvcHRpb25zICE9PSBudWxsKSB7XG4gICAgICBpZiAoc2Vlbi5oYXMob3B0aW9ucykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2lyY3VsYXIgcmVmZXJlbmNlIGluIG9wdGlvbnNcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWVuLmFkZChvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmVudHJpZXMob3B0aW9ucykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBjb25zdCBuYW1lID0gcHJlZml4ID8gcHJlZml4ICsga2V5IDoga2V5O1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBpdGVyYXRlRXh0cmFPcHRpb25zKHZhbHVlLCBuYW1lICsgXCIuXCIsIHNlZW4sIGhhbmRsZXIpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGhhbmRsZXIobmFtZSwgdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgaGFuZGxlcihuYW1lLCB2YWx1ZSA/IFwiMVwiIDogXCIwXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBoYW5kbGUgZXh0cmEgY29uZmlnIHR5cGU6ICR7dHlwZW9mIHZhbHVlfWApO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICB2YXIgY2hlY2tMYXN0RXJyb3IgPSAobWVzc2FnZSkgPT4ge1xuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBjb25zdCBzdGFjayA9IHdhc20yLnN0YWNrU2F2ZSgpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwYXJhbXNPZmZzZXQgPSB3YXNtMi5zdGFja0FsbG9jKDgpO1xuICAgICAgd2FzbTIuX09ydEdldExhc3RFcnJvcihwYXJhbXNPZmZzZXQsIHBhcmFtc09mZnNldCArIDQpO1xuICAgICAgY29uc3QgZXJyb3JDb2RlID0gd2FzbTIuSEVBUDMyW3BhcmFtc09mZnNldCAvIDRdO1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlUG9pbnRlciA9IHdhc20yLkhFQVBVMzJbcGFyYW1zT2Zmc2V0IC8gNCArIDFdO1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3JNZXNzYWdlUG9pbnRlciA/IHdhc20yLlVURjhUb1N0cmluZyhlcnJvck1lc3NhZ2VQb2ludGVyKSA6IFwiXCI7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bWVzc2FnZX0gRVJST1JfQ09ERTogJHtlcnJvckNvZGV9LCBFUlJPUl9NRVNTQUdFOiAke2Vycm9yTWVzc2FnZX1gKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgd2FzbTIuc3RhY2tSZXN0b3JlKHN0YWNrKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gd2ViL2xpYi93YXNtL3J1bi1vcHRpb25zLnRzXG4gIHZhciBzZXRSdW5PcHRpb25zID0gKG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgbGV0IHJ1bk9wdGlvbnNIYW5kbGUgPSAwO1xuICAgIGNvbnN0IGFsbG9jcyA9IFtdO1xuICAgIGNvbnN0IHJ1bk9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHRyeSB7XG4gICAgICBpZiAob3B0aW9ucz8ubG9nU2V2ZXJpdHlMZXZlbCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJ1bk9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCA9IDI7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgIT09IFwibnVtYmVyXCIgfHwgIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5sb2dTZXZlcml0eUxldmVsKSB8fCBvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgPCAwIHx8IG9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCA+IDQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBsb2cgc2VydmVyaXR5IGxldmVsIGlzIG5vdCB2YWxpZDogJHtvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWx9YCk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucz8ubG9nVmVyYm9zaXR5TGV2ZWwgPT09IHZvaWQgMCkge1xuICAgICAgICBydW5PcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsID0gMDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwgIT09IFwibnVtYmVyXCIgfHwgIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBsb2cgdmVyYm9zaXR5IGxldmVsIGlzIG5vdCB2YWxpZDogJHtvcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsfWApO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnM/LnRlcm1pbmF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJ1bk9wdGlvbnMudGVybWluYXRlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBsZXQgdGFnRGF0YU9mZnNldCA9IDA7XG4gICAgICBpZiAob3B0aW9ucz8udGFnICE9PSB2b2lkIDApIHtcbiAgICAgICAgdGFnRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhvcHRpb25zLnRhZywgYWxsb2NzKTtcbiAgICAgIH1cbiAgICAgIHJ1bk9wdGlvbnNIYW5kbGUgPSB3YXNtMi5fT3J0Q3JlYXRlUnVuT3B0aW9ucyhcbiAgICAgICAgcnVuT3B0aW9ucy5sb2dTZXZlcml0eUxldmVsLFxuICAgICAgICBydW5PcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsLFxuICAgICAgICAhIXJ1bk9wdGlvbnMudGVybWluYXRlLFxuICAgICAgICB0YWdEYXRhT2Zmc2V0XG4gICAgICApO1xuICAgICAgaWYgKHJ1bk9wdGlvbnNIYW5kbGUgPT09IDApIHtcbiAgICAgICAgY2hlY2tMYXN0RXJyb3IoXCJDYW4ndCBjcmVhdGUgcnVuIG9wdGlvbnMuXCIpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnM/LmV4dHJhICE9PSB2b2lkIDApIHtcbiAgICAgICAgaXRlcmF0ZUV4dHJhT3B0aW9ucyhvcHRpb25zLmV4dHJhLCBcIlwiLCAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKSwgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKGtleSwgYWxsb2NzKTtcbiAgICAgICAgICBjb25zdCB2YWx1ZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcodmFsdWUsIGFsbG9jcyk7XG4gICAgICAgICAgaWYgKHdhc20yLl9PcnRBZGRSdW5Db25maWdFbnRyeShydW5PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgcnVuIGNvbmZpZyBlbnRyeTogJHtrZXl9IC0gJHt2YWx1ZX0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbcnVuT3B0aW9uc0hhbmRsZSwgYWxsb2NzXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAocnVuT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgICB3YXNtMi5fT3J0UmVsZWFzZVJ1bk9wdGlvbnMocnVuT3B0aW9uc0hhbmRsZSk7XG4gICAgICB9XG4gICAgICBhbGxvY3MuZm9yRWFjaCgoYWxsb2MpID0+IHdhc20yLl9mcmVlKGFsbG9jKSk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfTtcblxuICAvLyB3ZWIvbGliL3dhc20vc2Vzc2lvbi1vcHRpb25zLnRzXG4gIHZhciBnZXRHcmFwaE9wdGltemF0aW9uTGV2ZWwgPSAoZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCkgPT4ge1xuICAgIHN3aXRjaCAoZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCkge1xuICAgICAgY2FzZSBcImRpc2FibGVkXCI6XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgY2FzZSBcImJhc2ljXCI6XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgY2FzZSBcImV4dGVuZGVkXCI6XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgY2FzZSBcImFsbFwiOlxuICAgICAgICByZXR1cm4gOTk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGdyYXBoIG9wdGltaXphdGlvbiBsZXZlbDogJHtncmFwaE9wdGltaXphdGlvbkxldmVsfWApO1xuICAgIH1cbiAgfTtcbiAgdmFyIGdldEV4ZWN1dGlvbk1vZGUgPSAoZXhlY3V0aW9uTW9kZSkgPT4ge1xuICAgIHN3aXRjaCAoZXhlY3V0aW9uTW9kZSkge1xuICAgICAgY2FzZSBcInNlcXVlbnRpYWxcIjpcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICBjYXNlIFwicGFyYWxsZWxcIjpcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGV4ZWN1dGlvbiBtb2RlOiAke2V4ZWN1dGlvbk1vZGV9YCk7XG4gICAgfVxuICB9O1xuICB2YXIgYXBwZW5kRGVmYXVsdE9wdGlvbnMgPSAob3B0aW9ucykgPT4ge1xuICAgIGlmICghb3B0aW9ucy5leHRyYSkge1xuICAgICAgb3B0aW9ucy5leHRyYSA9IHt9O1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMuZXh0cmEuc2Vzc2lvbikge1xuICAgICAgb3B0aW9ucy5leHRyYS5zZXNzaW9uID0ge307XG4gICAgfVxuICAgIGNvbnN0IHNlc3Npb24gPSBvcHRpb25zLmV4dHJhLnNlc3Npb247XG4gICAgaWYgKCFzZXNzaW9uLnVzZV9vcnRfbW9kZWxfYnl0ZXNfZGlyZWN0bHkpIHtcbiAgICAgIHNlc3Npb24udXNlX29ydF9tb2RlbF9ieXRlc19kaXJlY3RseSA9IFwiMVwiO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5leGVjdXRpb25Qcm92aWRlcnMgJiYgb3B0aW9ucy5leGVjdXRpb25Qcm92aWRlcnMuc29tZSgoZXApID0+ICh0eXBlb2YgZXAgPT09IFwic3RyaW5nXCIgPyBlcCA6IGVwLm5hbWUpID09PSBcIndlYmdwdVwiKSkge1xuICAgICAgb3B0aW9ucy5lbmFibGVNZW1QYXR0ZXJuID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICB2YXIgc2V0RXhlY3V0aW9uUHJvdmlkZXJzID0gKHNlc3Npb25PcHRpb25zSGFuZGxlLCBleGVjdXRpb25Qcm92aWRlcnMsIGFsbG9jcykgPT4ge1xuICAgIGZvciAoY29uc3QgZXAgb2YgZXhlY3V0aW9uUHJvdmlkZXJzKSB7XG4gICAgICBsZXQgZXBOYW1lID0gdHlwZW9mIGVwID09PSBcInN0cmluZ1wiID8gZXAgOiBlcC5uYW1lO1xuICAgICAgc3dpdGNoIChlcE5hbWUpIHtcbiAgICAgICAgY2FzZSBcInhubnBhY2tcIjpcbiAgICAgICAgICBlcE5hbWUgPSBcIlhOTlBBQ0tcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIndlYm5uXCI6XG4gICAgICAgICAgZXBOYW1lID0gXCJXRUJOTlwiO1xuICAgICAgICAgIGlmICh0eXBlb2YgZXAgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHdlYm5uT3B0aW9ucyA9IGVwO1xuICAgICAgICAgICAgaWYgKHdlYm5uT3B0aW9ucz8uZGV2aWNlVHlwZSkge1xuICAgICAgICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKFwiZGV2aWNlVHlwZVwiLCBhbGxvY3MpO1xuICAgICAgICAgICAgICBjb25zdCB2YWx1ZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcod2Vibm5PcHRpb25zLmRldmljZVR5cGUsIGFsbG9jcyk7XG4gICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICdkZXZpY2VUeXBlJyAtICR7d2Vibm5PcHRpb25zLmRldmljZVR5cGV9LmApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod2Vibm5PcHRpb25zPy5udW1UaHJlYWRzKSB7XG4gICAgICAgICAgICAgIGxldCBudW1UaHJlYWRzID0gd2Vibm5PcHRpb25zLm51bVRocmVhZHM7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgbnVtVGhyZWFkcyAhPSBcIm51bWJlclwiIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKG51bVRocmVhZHMpIHx8IG51bVRocmVhZHMgPCAwKSB7XG4gICAgICAgICAgICAgICAgbnVtVGhyZWFkcyA9IDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhcIm51bVRocmVhZHNcIiwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKG51bVRocmVhZHMudG9TdHJpbmcoKSwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgaWYgKGdldEluc3RhbmNlKCkuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeShzZXNzaW9uT3B0aW9uc0hhbmRsZSwga2V5RGF0YU9mZnNldCwgdmFsdWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ251bVRocmVhZHMnIC0gJHt3ZWJubk9wdGlvbnMubnVtVGhyZWFkc30uYCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3ZWJubk9wdGlvbnM/LnBvd2VyUHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKFwicG93ZXJQcmVmZXJlbmNlXCIsIGFsbG9jcyk7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh3ZWJubk9wdGlvbnMucG93ZXJQcmVmZXJlbmNlLCBhbGxvY3MpO1xuICAgICAgICAgICAgICBpZiAoZ2V0SW5zdGFuY2UoKS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoXG4gICAgICAgICAgICAgICAgICBgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICdwb3dlclByZWZlcmVuY2UnIC0gJHt3ZWJubk9wdGlvbnMucG93ZXJQcmVmZXJlbmNlfS5gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIndlYmdwdVwiOlxuICAgICAgICAgIGVwTmFtZSA9IFwiSlNcIjtcbiAgICAgICAgICBpZiAodHlwZW9mIGVwICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCB3ZWJncHVPcHRpb25zID0gZXA7XG4gICAgICAgICAgICBpZiAod2ViZ3B1T3B0aW9ucz8ucHJlZmVycmVkTGF5b3V0KSB7XG4gICAgICAgICAgICAgIGlmICh3ZWJncHVPcHRpb25zLnByZWZlcnJlZExheW91dCAhPT0gXCJOQ0hXXCIgJiYgd2ViZ3B1T3B0aW9ucy5wcmVmZXJyZWRMYXlvdXQgIT09IFwiTkhXQ1wiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBwcmVmZXJyZWRMYXlvdXQgbXVzdCBiZSBlaXRoZXIgJ05DSFcnIG9yICdOSFdDJzogJHt3ZWJncHVPcHRpb25zLnByZWZlcnJlZExheW91dH1gKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKFwicHJlZmVycmVkTGF5b3V0XCIsIGFsbG9jcyk7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh3ZWJncHVPcHRpb25zLnByZWZlcnJlZExheW91dCwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgaWYgKGdldEluc3RhbmNlKCkuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeShzZXNzaW9uT3B0aW9uc0hhbmRsZSwga2V5RGF0YU9mZnNldCwgdmFsdWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFxuICAgICAgICAgICAgICAgICAgYENhbid0IHNldCBhIHNlc3Npb24gY29uZmlnIGVudHJ5OiAncHJlZmVycmVkTGF5b3V0JyAtICR7d2ViZ3B1T3B0aW9ucy5wcmVmZXJyZWRMYXlvdXR9LmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwid2FzbVwiOlxuICAgICAgICBjYXNlIFwiY3B1XCI6XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBub3Qgc3VwcG9ydGVkIGV4ZWN1dGlvbiBwcm92aWRlcjogJHtlcE5hbWV9YCk7XG4gICAgICB9XG4gICAgICBjb25zdCBlcE5hbWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKGVwTmFtZSwgYWxsb2NzKTtcbiAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlcihzZXNzaW9uT3B0aW9uc0hhbmRsZSwgZXBOYW1lRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IGFwcGVuZCBleGVjdXRpb24gcHJvdmlkZXI6ICR7ZXBOYW1lfS5gKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHZhciBzZXRTZXNzaW9uT3B0aW9ucyA9IChvcHRpb25zKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGxldCBzZXNzaW9uT3B0aW9uc0hhbmRsZSA9IDA7XG4gICAgY29uc3QgYWxsb2NzID0gW107XG4gICAgY29uc3Qgc2Vzc2lvbk9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGFwcGVuZERlZmF1bHRPcHRpb25zKHNlc3Npb25PcHRpb25zKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCA9IGdldEdyYXBoT3B0aW16YXRpb25MZXZlbChzZXNzaW9uT3B0aW9ucy5ncmFwaE9wdGltaXphdGlvbkxldmVsID8/IFwiYWxsXCIpO1xuICAgICAgY29uc3QgZXhlY3V0aW9uTW9kZSA9IGdldEV4ZWN1dGlvbk1vZGUoc2Vzc2lvbk9wdGlvbnMuZXhlY3V0aW9uTW9kZSA/PyBcInNlcXVlbnRpYWxcIik7XG4gICAgICBjb25zdCBsb2dJZERhdGFPZmZzZXQgPSB0eXBlb2Ygc2Vzc2lvbk9wdGlvbnMubG9nSWQgPT09IFwic3RyaW5nXCIgPyBhbGxvY1dhc21TdHJpbmcoc2Vzc2lvbk9wdGlvbnMubG9nSWQsIGFsbG9jcykgOiAwO1xuICAgICAgY29uc3QgbG9nU2V2ZXJpdHlMZXZlbCA9IHNlc3Npb25PcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgPz8gMjtcbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihsb2dTZXZlcml0eUxldmVsKSB8fCBsb2dTZXZlcml0eUxldmVsIDwgMCB8fCBsb2dTZXZlcml0eUxldmVsID4gNCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGxvZyBzZXJ2ZXJpdHkgbGV2ZWwgaXMgbm90IHZhbGlkOiAke2xvZ1NldmVyaXR5TGV2ZWx9YCk7XG4gICAgICB9XG4gICAgICBjb25zdCBsb2dWZXJib3NpdHlMZXZlbCA9IHNlc3Npb25PcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsID8/IDA7XG4gICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobG9nVmVyYm9zaXR5TGV2ZWwpIHx8IGxvZ1ZlcmJvc2l0eUxldmVsIDwgMCB8fCBsb2dWZXJib3NpdHlMZXZlbCA+IDQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBsb2cgdmVyYm9zaXR5IGxldmVsIGlzIG5vdCB2YWxpZDogJHtsb2dWZXJib3NpdHlMZXZlbH1gKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9wdGltaXplZE1vZGVsRmlsZVBhdGhPZmZzZXQgPSB0eXBlb2Ygc2Vzc2lvbk9wdGlvbnMub3B0aW1pemVkTW9kZWxGaWxlUGF0aCA9PT0gXCJzdHJpbmdcIiA/IGFsbG9jV2FzbVN0cmluZyhzZXNzaW9uT3B0aW9ucy5vcHRpbWl6ZWRNb2RlbEZpbGVQYXRoLCBhbGxvY3MpIDogMDtcbiAgICAgIHNlc3Npb25PcHRpb25zSGFuZGxlID0gd2FzbTIuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zKFxuICAgICAgICBncmFwaE9wdGltaXphdGlvbkxldmVsLFxuICAgICAgICAhIXNlc3Npb25PcHRpb25zLmVuYWJsZUNwdU1lbUFyZW5hLFxuICAgICAgICAhIXNlc3Npb25PcHRpb25zLmVuYWJsZU1lbVBhdHRlcm4sXG4gICAgICAgIGV4ZWN1dGlvbk1vZGUsXG4gICAgICAgICEhc2Vzc2lvbk9wdGlvbnMuZW5hYmxlUHJvZmlsaW5nLFxuICAgICAgICAwLFxuICAgICAgICBsb2dJZERhdGFPZmZzZXQsXG4gICAgICAgIGxvZ1NldmVyaXR5TGV2ZWwsXG4gICAgICAgIGxvZ1ZlcmJvc2l0eUxldmVsLFxuICAgICAgICBvcHRpbWl6ZWRNb2RlbEZpbGVQYXRoT2Zmc2V0XG4gICAgICApO1xuICAgICAgaWYgKHNlc3Npb25PcHRpb25zSGFuZGxlID09PSAwKSB7XG4gICAgICAgIGNoZWNrTGFzdEVycm9yKFwiQ2FuJ3QgY3JlYXRlIHNlc3Npb24gb3B0aW9ucy5cIik7XG4gICAgICB9XG4gICAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzKSB7XG4gICAgICAgIHNldEV4ZWN1dGlvblByb3ZpZGVycyhzZXNzaW9uT3B0aW9uc0hhbmRsZSwgc2Vzc2lvbk9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzLCBhbGxvY3MpO1xuICAgICAgfVxuICAgICAgaWYgKHNlc3Npb25PcHRpb25zLmZyZWVEaW1lbnNpb25PdmVycmlkZXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHNlc3Npb25PcHRpb25zLmZyZWVEaW1lbnNpb25PdmVycmlkZXMpKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZyZWUgZGltZW5zaW9uIG92ZXJyaWRlIG5hbWUgbXVzdCBiZSBhIHN0cmluZzogJHtuYW1lfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm51bWJlclwiIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSB8fCB2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZnJlZSBkaW1lbnNpb24gb3ZlcnJpZGUgdmFsdWUgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyOiAke3ZhbHVlfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBuYW1lT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKG5hbWUsIGFsbG9jcyk7XG4gICAgICAgICAgaWYgKHdhc20yLl9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGUoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIG5hbWVPZmZzZXQsIHZhbHVlKSAhPT0gMCkge1xuICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IHNldCBhIGZyZWUgZGltZW5zaW9uIG92ZXJyaWRlOiAke25hbWV9IC0gJHt2YWx1ZX0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuZXh0cmEgIT09IHZvaWQgMCkge1xuICAgICAgICBpdGVyYXRlRXh0cmFPcHRpb25zKHNlc3Npb25PcHRpb25zLmV4dHJhLCBcIlwiLCAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKSwgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKGtleSwgYWxsb2NzKTtcbiAgICAgICAgICBjb25zdCB2YWx1ZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcodmFsdWUsIGFsbG9jcyk7XG4gICAgICAgICAgaWYgKHdhc20yLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJHtrZXl9IC0gJHt2YWx1ZX0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGFsbG9jc107XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKHNlc3Npb25PcHRpb25zSGFuZGxlICE9PSAwKSB7XG4gICAgICAgIHdhc20yLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnMoc2Vzc2lvbk9wdGlvbnNIYW5kbGUpO1xuICAgICAgfVxuICAgICAgYWxsb2NzLmZvckVhY2goKGFsbG9jKSA9PiB3YXNtMi5fZnJlZShhbGxvYykpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH07XG5cbiAgLy8gd2ViL2xpYi93YXNtL3dhc20tY29tbW9uLnRzXG4gIHZhciB0ZW5zb3JEYXRhVHlwZVN0cmluZ1RvRW51bSA9ICh0eXBlKSA9PiB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwiaW50OFwiOlxuICAgICAgICByZXR1cm4gMyAvKiBpbnQ4ICovO1xuICAgICAgY2FzZSBcInVpbnQ4XCI6XG4gICAgICAgIHJldHVybiAyIC8qIHVpbnQ4ICovO1xuICAgICAgY2FzZSBcImJvb2xcIjpcbiAgICAgICAgcmV0dXJuIDkgLyogYm9vbCAqLztcbiAgICAgIGNhc2UgXCJpbnQxNlwiOlxuICAgICAgICByZXR1cm4gNSAvKiBpbnQxNiAqLztcbiAgICAgIGNhc2UgXCJ1aW50MTZcIjpcbiAgICAgICAgcmV0dXJuIDQgLyogdWludDE2ICovO1xuICAgICAgY2FzZSBcImludDMyXCI6XG4gICAgICAgIHJldHVybiA2IC8qIGludDMyICovO1xuICAgICAgY2FzZSBcInVpbnQzMlwiOlxuICAgICAgICByZXR1cm4gMTIgLyogdWludDMyICovO1xuICAgICAgY2FzZSBcImZsb2F0MTZcIjpcbiAgICAgICAgcmV0dXJuIDEwIC8qIGZsb2F0MTYgKi87XG4gICAgICBjYXNlIFwiZmxvYXQzMlwiOlxuICAgICAgICByZXR1cm4gMSAvKiBmbG9hdCAqLztcbiAgICAgIGNhc2UgXCJmbG9hdDY0XCI6XG4gICAgICAgIHJldHVybiAxMSAvKiBkb3VibGUgKi87XG4gICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgIHJldHVybiA4IC8qIHN0cmluZyAqLztcbiAgICAgIGNhc2UgXCJpbnQ2NFwiOlxuICAgICAgICByZXR1cm4gNyAvKiBpbnQ2NCAqLztcbiAgICAgIGNhc2UgXCJ1aW50NjRcIjpcbiAgICAgICAgcmV0dXJuIDEzIC8qIHVpbnQ2NCAqLztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgZGF0YSB0eXBlOiAke3R5cGV9YCk7XG4gICAgfVxuICB9O1xuICB2YXIgdGVuc29yRGF0YVR5cGVFbnVtVG9TdHJpbmcgPSAodHlwZVByb3RvKSA9PiB7XG4gICAgc3dpdGNoICh0eXBlUHJvdG8pIHtcbiAgICAgIGNhc2UgMyAvKiBpbnQ4ICovOlxuICAgICAgICByZXR1cm4gXCJpbnQ4XCI7XG4gICAgICBjYXNlIDIgLyogdWludDggKi86XG4gICAgICAgIHJldHVybiBcInVpbnQ4XCI7XG4gICAgICBjYXNlIDkgLyogYm9vbCAqLzpcbiAgICAgICAgcmV0dXJuIFwiYm9vbFwiO1xuICAgICAgY2FzZSA1IC8qIGludDE2ICovOlxuICAgICAgICByZXR1cm4gXCJpbnQxNlwiO1xuICAgICAgY2FzZSA0IC8qIHVpbnQxNiAqLzpcbiAgICAgICAgcmV0dXJuIFwidWludDE2XCI7XG4gICAgICBjYXNlIDYgLyogaW50MzIgKi86XG4gICAgICAgIHJldHVybiBcImludDMyXCI7XG4gICAgICBjYXNlIDEyIC8qIHVpbnQzMiAqLzpcbiAgICAgICAgcmV0dXJuIFwidWludDMyXCI7XG4gICAgICBjYXNlIDEwIC8qIGZsb2F0MTYgKi86XG4gICAgICAgIHJldHVybiBcImZsb2F0MTZcIjtcbiAgICAgIGNhc2UgMSAvKiBmbG9hdCAqLzpcbiAgICAgICAgcmV0dXJuIFwiZmxvYXQzMlwiO1xuICAgICAgY2FzZSAxMSAvKiBkb3VibGUgKi86XG4gICAgICAgIHJldHVybiBcImZsb2F0NjRcIjtcbiAgICAgIGNhc2UgOCAvKiBzdHJpbmcgKi86XG4gICAgICAgIHJldHVybiBcInN0cmluZ1wiO1xuICAgICAgY2FzZSA3IC8qIGludDY0ICovOlxuICAgICAgICByZXR1cm4gXCJpbnQ2NFwiO1xuICAgICAgY2FzZSAxMyAvKiB1aW50NjQgKi86XG4gICAgICAgIHJldHVybiBcInVpbnQ2NFwiO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBkYXRhIHR5cGU6ICR7dHlwZVByb3RvfWApO1xuICAgIH1cbiAgfTtcbiAgdmFyIGdldFRlbnNvckVsZW1lbnRTaXplID0gKGRhdGVUeXBlKSA9PiBbdm9pZCAwLCA0LCAxLCAxLCAyLCAyLCA0LCA4LCB2b2lkIDAsIDEsIDIsIDgsIDQsIDgsIHZvaWQgMCwgdm9pZCAwLCB2b2lkIDBdW2RhdGVUeXBlXTtcbiAgdmFyIHRlbnNvclR5cGVUb1R5cGVkQXJyYXlDb25zdHJ1Y3RvciA9ICh0eXBlKSA9PiB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwiZmxvYXQxNlwiOlxuICAgICAgICByZXR1cm4gVWludDE2QXJyYXk7XG4gICAgICBjYXNlIFwiZmxvYXQzMlwiOlxuICAgICAgICByZXR1cm4gRmxvYXQzMkFycmF5O1xuICAgICAgY2FzZSBcInVpbnQ4XCI6XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5O1xuICAgICAgY2FzZSBcImludDhcIjpcbiAgICAgICAgcmV0dXJuIEludDhBcnJheTtcbiAgICAgIGNhc2UgXCJ1aW50MTZcIjpcbiAgICAgICAgcmV0dXJuIFVpbnQxNkFycmF5O1xuICAgICAgY2FzZSBcImludDE2XCI6XG4gICAgICAgIHJldHVybiBJbnQxNkFycmF5O1xuICAgICAgY2FzZSBcImludDMyXCI6XG4gICAgICAgIHJldHVybiBJbnQzMkFycmF5O1xuICAgICAgY2FzZSBcImJvb2xcIjpcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXk7XG4gICAgICBjYXNlIFwiZmxvYXQ2NFwiOlxuICAgICAgICByZXR1cm4gRmxvYXQ2NEFycmF5O1xuICAgICAgY2FzZSBcInVpbnQzMlwiOlxuICAgICAgICByZXR1cm4gVWludDMyQXJyYXk7XG4gICAgICBjYXNlIFwiaW50NjRcIjpcbiAgICAgICAgcmV0dXJuIEJpZ0ludDY0QXJyYXk7XG4gICAgICBjYXNlIFwidWludDY0XCI6XG4gICAgICAgIHJldHVybiBCaWdVaW50NjRBcnJheTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgdHlwZTogJHt0eXBlfWApO1xuICAgIH1cbiAgfTtcbiAgdmFyIGxvZ0xldmVsU3RyaW5nVG9FbnVtID0gKGxvZ0xldmVsKSA9PiB7XG4gICAgc3dpdGNoIChsb2dMZXZlbCkge1xuICAgICAgY2FzZSBcInZlcmJvc2VcIjpcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICBjYXNlIFwiaW5mb1wiOlxuICAgICAgICByZXR1cm4gMTtcbiAgICAgIGNhc2UgXCJ3YXJuaW5nXCI6XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICAgIHJldHVybiAzO1xuICAgICAgY2FzZSBcImZhdGFsXCI6XG4gICAgICAgIHJldHVybiA0O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBsb2dnaW5nIGxldmVsOiAke2xvZ0xldmVsfWApO1xuICAgIH1cbiAgfTtcbiAgdmFyIGlzR3B1QnVmZmVyU3VwcG9ydGVkVHlwZSA9ICh0eXBlKSA9PiB0eXBlID09PSBcImZsb2F0MzJcIiB8fCB0eXBlID09PSBcImludDMyXCIgfHwgdHlwZSA9PT0gXCJpbnQ2NFwiIHx8IHR5cGUgPT09IFwiYm9vbFwiIHx8IHR5cGUgPT09IFwiZmxvYXQxNlwiIHx8IHR5cGUgPT09IFwidWludDMyXCI7XG4gIHZhciBkYXRhTG9jYXRpb25TdHJpbmdUb0VudW0gPSAobG9jYXRpb24pID0+IHtcbiAgICBzd2l0Y2ggKGxvY2F0aW9uKSB7XG4gICAgICBjYXNlIFwibm9uZVwiOlxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGNhc2UgXCJjcHVcIjpcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICBjYXNlIFwiY3B1LXBpbm5lZFwiOlxuICAgICAgICByZXR1cm4gMjtcbiAgICAgIGNhc2UgXCJ0ZXh0dXJlXCI6XG4gICAgICAgIHJldHVybiAzO1xuICAgICAgY2FzZSBcImdwdS1idWZmZXJcIjpcbiAgICAgICAgcmV0dXJuIDQ7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGRhdGEgbG9jYXRpb246ICR7bG9jYXRpb259YCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIHdlYi9saWIvd2FzbS93YXNtLWNvcmUtaW1wbC50c1xuICB2YXIgaW5pdE9ydCA9IChudW1UaHJlYWRzLCBsb2dnaW5nTGV2ZWwpID0+IHtcbiAgICBjb25zdCBlcnJvckNvZGUgPSBnZXRJbnN0YW5jZSgpLl9PcnRJbml0KG51bVRocmVhZHMsIGxvZ2dpbmdMZXZlbCk7XG4gICAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgY2hlY2tMYXN0RXJyb3IoXCJDYW4ndCBpbml0aWFsaXplIG9ubnhydW50aW1lLlwiKTtcbiAgICB9XG4gIH07XG4gIHZhciBpbml0UnVudGltZSA9IGFzeW5jIChlbnYpID0+IHtcbiAgICBpbml0T3J0KGVudi53YXNtLm51bVRocmVhZHMsIGxvZ0xldmVsU3RyaW5nVG9FbnVtKGVudi5sb2dMZXZlbCkpO1xuICB9O1xuICB2YXIgaW5pdEVwID0gYXN5bmMgKGVudiwgZXBOYW1lKSA9PiB7XG4gICAgaWYgKGZhbHNlKSB7XG4gICAgICBpZiAodHlwZW9mIG5hdmlnYXRvciA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhbmF2aWdhdG9yLmdwdSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXZWJHUFUgaXMgbm90IHN1cHBvcnRlZCBpbiBjdXJyZW50IGVudmlyb25tZW50XCIpO1xuICAgICAgfVxuICAgICAgY29uc3QgYWRhcHRlciA9IGF3YWl0IG5hdmlnYXRvci5ncHUucmVxdWVzdEFkYXB0ZXIoKTtcbiAgICAgIGlmICghYWRhcHRlcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0ZhaWxlZCB0byBnZXQgR1BVIGFkYXB0ZXIuIFlvdSBtYXkgbmVlZCB0byBlbmFibGUgZmxhZyBcIi0tZW5hYmxlLXVuc2FmZS13ZWJncHVcIiBpZiB5b3UgYXJlIHVzaW5nIENocm9tZS4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoIWVudi53YXNtLnNpbWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiTm90IHN1cHBvcnRlZCBmb3IgV2ViR1BVPU9OIGFuZCBTSU1EPU9GRi4gUGxlYXNlIHNldCBgZW52Lndhc20uc2ltZGAgdG8gdHJ1ZSB3aGVuIHVzaW5nIGB3ZWJncHVgIEVQXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGluaXRKc2VwID0gbnVsbC5pbml0O1xuICAgICAgYXdhaXQgaW5pdEpzZXAoZ2V0SW5zdGFuY2UoKSwgZW52LCBhZGFwdGVyKTtcbiAgICB9XG4gIH07XG4gIHZhciBhY3RpdmVTZXNzaW9ucyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIHZhciBnZXRTZXNzaW9uSW5wdXRPdXRwdXRDb3VudCA9IChzZXNzaW9uSGFuZGxlKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IHN0YWNrID0gd2FzbTIuc3RhY2tTYXZlKCk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRhdGFPZmZzZXQgPSB3YXNtMi5zdGFja0FsbG9jKDgpO1xuICAgICAgY29uc3QgZXJyb3JDb2RlID0gd2FzbTIuX09ydEdldElucHV0T3V0cHV0Q291bnQoc2Vzc2lvbkhhbmRsZSwgZGF0YU9mZnNldCwgZGF0YU9mZnNldCArIDQpO1xuICAgICAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgICBjaGVja0xhc3RFcnJvcihcIkNhbid0IGdldCBzZXNzaW9uIGlucHV0L291dHB1dCBjb3VudC5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gW3dhc20yLkhFQVAzMltkYXRhT2Zmc2V0IC8gNF0sIHdhc20yLkhFQVAzMltkYXRhT2Zmc2V0IC8gNCArIDFdXTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgd2FzbTIuc3RhY2tSZXN0b3JlKHN0YWNrKTtcbiAgICB9XG4gIH07XG4gIHZhciBjb3B5RnJvbUV4dGVybmFsQnVmZmVyID0gKG1vZGVsKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IG1vZGVsRGF0YU9mZnNldCA9IHdhc20yLl9tYWxsb2MobW9kZWwuYnl0ZUxlbmd0aCk7XG4gICAgaWYgKG1vZGVsRGF0YU9mZnNldCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBjcmVhdGUgYSBzZXNzaW9uLiBmYWlsZWQgdG8gYWxsb2NhdGUgYSBidWZmZXIgb2Ygc2l6ZSAke21vZGVsLmJ5dGVMZW5ndGh9LmApO1xuICAgIH1cbiAgICB3YXNtMi5IRUFQVTguc2V0KG1vZGVsLCBtb2RlbERhdGFPZmZzZXQpO1xuICAgIHJldHVybiBbbW9kZWxEYXRhT2Zmc2V0LCBtb2RlbC5ieXRlTGVuZ3RoXTtcbiAgfTtcbiAgdmFyIGNyZWF0ZVNlc3Npb24gPSAobW9kZWxEYXRhLCBvcHRpb25zKSA9PiB7XG4gICAgbGV0IG1vZGVsRGF0YU9mZnNldCwgbW9kZWxEYXRhTGVuZ3RoO1xuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtb2RlbERhdGEpKSB7XG4gICAgICBbbW9kZWxEYXRhT2Zmc2V0LCBtb2RlbERhdGFMZW5ndGhdID0gbW9kZWxEYXRhO1xuICAgIH0gZWxzZSBpZiAobW9kZWxEYXRhLmJ1ZmZlciA9PT0gd2FzbTIuSEVBUFU4LmJ1ZmZlcikge1xuICAgICAgW21vZGVsRGF0YU9mZnNldCwgbW9kZWxEYXRhTGVuZ3RoXSA9IFttb2RlbERhdGEuYnl0ZU9mZnNldCwgbW9kZWxEYXRhLmJ5dGVMZW5ndGhdO1xuICAgIH0gZWxzZSB7XG4gICAgICBbbW9kZWxEYXRhT2Zmc2V0LCBtb2RlbERhdGFMZW5ndGhdID0gY29weUZyb21FeHRlcm5hbEJ1ZmZlcihtb2RlbERhdGEpO1xuICAgIH1cbiAgICBsZXQgc2Vzc2lvbkhhbmRsZSA9IDA7XG4gICAgbGV0IHNlc3Npb25PcHRpb25zSGFuZGxlID0gMDtcbiAgICBsZXQgaW9CaW5kaW5nSGFuZGxlID0gMDtcbiAgICBsZXQgYWxsb2NzID0gW107XG4gICAgY29uc3QgaW5wdXROYW1lc1VURjhFbmNvZGVkID0gW107XG4gICAgY29uc3Qgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZCA9IFtdO1xuICAgIHRyeSB7XG4gICAgICBbc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGFsbG9jc10gPSBzZXRTZXNzaW9uT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIHNlc3Npb25IYW5kbGUgPSB3YXNtMi5fT3J0Q3JlYXRlU2Vzc2lvbihtb2RlbERhdGFPZmZzZXQsIG1vZGVsRGF0YUxlbmd0aCwgc2Vzc2lvbk9wdGlvbnNIYW5kbGUpO1xuICAgICAgaWYgKHNlc3Npb25IYW5kbGUgPT09IDApIHtcbiAgICAgICAgY2hlY2tMYXN0RXJyb3IoXCJDYW4ndCBjcmVhdGUgYSBzZXNzaW9uLlwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IFtpbnB1dENvdW50LCBvdXRwdXRDb3VudF0gPSBnZXRTZXNzaW9uSW5wdXRPdXRwdXRDb3VudChzZXNzaW9uSGFuZGxlKTtcbiAgICAgIGNvbnN0IGlucHV0TmFtZXMgPSBbXTtcbiAgICAgIGNvbnN0IG91dHB1dE5hbWVzID0gW107XG4gICAgICBjb25zdCBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRDb3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB3YXNtMi5fT3J0R2V0SW5wdXROYW1lKHNlc3Npb25IYW5kbGUsIGkpO1xuICAgICAgICBpZiAobmFtZSA9PT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFwiQ2FuJ3QgZ2V0IGFuIGlucHV0IG5hbWUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlucHV0TmFtZXNVVEY4RW5jb2RlZC5wdXNoKG5hbWUpO1xuICAgICAgICBpbnB1dE5hbWVzLnB1c2god2FzbTIuVVRGOFRvU3RyaW5nKG5hbWUpKTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgICBjb25zdCBuYW1lID0gd2FzbTIuX09ydEdldE91dHB1dE5hbWUoc2Vzc2lvbkhhbmRsZSwgaSk7XG4gICAgICAgIGlmIChuYW1lID09PSAwKSB7XG4gICAgICAgICAgY2hlY2tMYXN0RXJyb3IoXCJDYW4ndCBnZXQgYW4gb3V0cHV0IG5hbWUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIG91dHB1dE5hbWVzVVRGOEVuY29kZWQucHVzaChuYW1lKTtcbiAgICAgICAgY29uc3QgbmFtZVN0cmluZyA9IHdhc20yLlVURjhUb1N0cmluZyhuYW1lKTtcbiAgICAgICAgb3V0cHV0TmFtZXMucHVzaChuYW1lU3RyaW5nKTtcbiAgICAgICAgaWYgKGZhbHNlKSB7XG4gICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0eXBlb2Ygb3B0aW9ucz8ucHJlZmVycmVkT3V0cHV0TG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBvcHRpb25zLnByZWZlcnJlZE91dHB1dExvY2F0aW9uIDogb3B0aW9ucz8ucHJlZmVycmVkT3V0cHV0TG9jYXRpb24/LltuYW1lU3RyaW5nXSA/PyBcImNwdVwiO1xuICAgICAgICAgIGlmIChsb2NhdGlvbiAhPT0gXCJjcHVcIiAmJiBsb2NhdGlvbiAhPT0gXCJjcHUtcGlubmVkXCIgJiYgbG9jYXRpb24gIT09IFwiZ3B1LWJ1ZmZlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vdCBzdXBwb3J0ZWQgcHJlZmVycmVkIG91dHB1dCBsb2NhdGlvbjogJHtsb2NhdGlvbn0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dHB1dFByZWZlcnJlZExvY2F0aW9ucy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IGJpbmRpbmdTdGF0ZSA9IG51bGw7XG4gICAgICBpZiAoZmFsc2UpIHtcbiAgICAgICAgaW9CaW5kaW5nSGFuZGxlID0gd2FzbTIuX09ydENyZWF0ZUJpbmRpbmcoc2Vzc2lvbkhhbmRsZSk7XG4gICAgICAgIGlmIChpb0JpbmRpbmdIYW5kbGUgPT09IDApIHtcbiAgICAgICAgICBjaGVja0xhc3RFcnJvcihcIkNhbid0IGNyZWF0ZSBJTyBiaW5kaW5nLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBiaW5kaW5nU3RhdGUgPSB7XG4gICAgICAgICAgaGFuZGxlOiBpb0JpbmRpbmdIYW5kbGUsXG4gICAgICAgICAgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zLFxuICAgICAgICAgIG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWQ6IG91dHB1dFByZWZlcnJlZExvY2F0aW9ucy5tYXAoKGwpID0+IGRhdGFMb2NhdGlvblN0cmluZ1RvRW51bShsKSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGFjdGl2ZVNlc3Npb25zLnNldChzZXNzaW9uSGFuZGxlLCBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lc1VURjhFbmNvZGVkLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkLCBiaW5kaW5nU3RhdGVdKTtcbiAgICAgIHJldHVybiBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lcywgb3V0cHV0TmFtZXNdO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlucHV0TmFtZXNVVEY4RW5jb2RlZC5mb3JFYWNoKChidWYpID0+IHdhc20yLl9PcnRGcmVlKGJ1ZikpO1xuICAgICAgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZC5mb3JFYWNoKChidWYpID0+IHdhc20yLl9PcnRGcmVlKGJ1ZikpO1xuICAgICAgaWYgKGlvQmluZGluZ0hhbmRsZSAhPT0gMCkge1xuICAgICAgICB3YXNtMi5fT3J0UmVsZWFzZUJpbmRpbmcoaW9CaW5kaW5nSGFuZGxlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzZXNzaW9uSGFuZGxlICE9PSAwKSB7XG4gICAgICAgIHdhc20yLl9PcnRSZWxlYXNlU2Vzc2lvbihzZXNzaW9uSGFuZGxlKTtcbiAgICAgIH1cbiAgICAgIHRocm93IGU7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHdhc20yLl9mcmVlKG1vZGVsRGF0YU9mZnNldCk7XG4gICAgICBpZiAoc2Vzc2lvbk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgICAgd2FzbTIuX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucyhzZXNzaW9uT3B0aW9uc0hhbmRsZSk7XG4gICAgICB9XG4gICAgICBhbGxvY3MuZm9yRWFjaCgoYWxsb2MpID0+IHdhc20yLl9mcmVlKGFsbG9jKSk7XG4gICAgfVxuICB9O1xuICB2YXIgcmVsZWFzZVNlc3Npb24gPSAoc2Vzc2lvbklkKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IHNlc3Npb24gPSBhY3RpdmVTZXNzaW9ucy5nZXQoc2Vzc2lvbklkKTtcbiAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IHJlbGVhc2Ugc2Vzc2lvbi4gaW52YWxpZCBzZXNzaW9uIGlkOiAke3Nlc3Npb25JZH1gKTtcbiAgICB9XG4gICAgY29uc3QgW3Nlc3Npb25IYW5kbGUsIGlucHV0TmFtZXNVVEY4RW5jb2RlZCwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZCwgaW9CaW5kaW5nU3RhdGVdID0gc2Vzc2lvbjtcbiAgICBpZiAoaW9CaW5kaW5nU3RhdGUpIHtcbiAgICAgIHdhc20yLl9PcnRSZWxlYXNlQmluZGluZyhpb0JpbmRpbmdTdGF0ZS5oYW5kbGUpO1xuICAgIH1cbiAgICB3YXNtMi5qc2VwVW5yZWdpc3RlckJ1ZmZlcnM/LihzZXNzaW9uSWQpO1xuICAgIGlucHV0TmFtZXNVVEY4RW5jb2RlZC5mb3JFYWNoKChidWYpID0+IHdhc20yLl9PcnRGcmVlKGJ1ZikpO1xuICAgIG91dHB1dE5hbWVzVVRGOEVuY29kZWQuZm9yRWFjaCgoYnVmKSA9PiB3YXNtMi5fT3J0RnJlZShidWYpKTtcbiAgICB3YXNtMi5fT3J0UmVsZWFzZVNlc3Npb24oc2Vzc2lvbkhhbmRsZSk7XG4gICAgYWN0aXZlU2Vzc2lvbnMuZGVsZXRlKHNlc3Npb25JZCk7XG4gIH07XG4gIHZhciBwcmVwYXJlSW5wdXRPdXRwdXRUZW5zb3IgPSAodGVuc29yLCB0ZW5zb3JIYW5kbGVzLCBhbGxvY3MsIHNlc3Npb25JZCwgaW5kZXgpID0+IHtcbiAgICBpZiAoIXRlbnNvcikge1xuICAgICAgdGVuc29ySGFuZGxlcy5wdXNoKDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgY29uc3QgZGF0YVR5cGUgPSB0ZW5zb3JbMF07XG4gICAgY29uc3QgZGltcyA9IHRlbnNvclsxXTtcbiAgICBjb25zdCBsb2NhdGlvbiA9IHRlbnNvclszXTtcbiAgICBsZXQgcmF3RGF0YTtcbiAgICBsZXQgZGF0YUJ5dGVMZW5ndGg7XG4gICAgaWYgKGRhdGFUeXBlID09PSBcInN0cmluZ1wiICYmIGxvY2F0aW9uID09PSBcImdwdS1idWZmZXJcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyaW5nIHRlbnNvciBpcyBub3Qgc3VwcG9ydGVkIG9uIEdQVS5cIik7XG4gICAgfVxuICAgIGlmIChsb2NhdGlvbiA9PT0gXCJncHUtYnVmZmVyXCIpIHtcbiAgICAgIGNvbnN0IGdwdUJ1ZmZlciA9IHRlbnNvclsyXS5ncHVCdWZmZXI7XG4gICAgICBjb25zdCBlbGVtZW50U2l6ZUluQnl0ZXMgPSBnZXRUZW5zb3JFbGVtZW50U2l6ZSh0ZW5zb3JEYXRhVHlwZVN0cmluZ1RvRW51bShkYXRhVHlwZSkpO1xuICAgICAgZGF0YUJ5dGVMZW5ndGggPSBkaW1zLnJlZHVjZSgoYSwgYikgPT4gYSAqIGIsIDEpICogZWxlbWVudFNpemVJbkJ5dGVzO1xuICAgICAgcmF3RGF0YSA9IHdhc20yLmpzZXBSZWdpc3RlckJ1ZmZlcihzZXNzaW9uSWQsIGluZGV4LCBncHVCdWZmZXIsIGRhdGFCeXRlTGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGF0YSA9IHRlbnNvclsyXTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICAgIGRhdGFCeXRlTGVuZ3RoID0gNCAqIGRhdGEubGVuZ3RoO1xuICAgICAgICByYXdEYXRhID0gd2FzbTIuX21hbGxvYyhkYXRhQnl0ZUxlbmd0aCk7XG4gICAgICAgIGFsbG9jcy5wdXNoKHJhd0RhdGEpO1xuICAgICAgICBsZXQgZGF0YUluZGV4ID0gcmF3RGF0YSAvIDQ7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtpXSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgdGVuc29yIGRhdGEgYXQgaW5kZXggJHtpfSBpcyBub3QgYSBzdHJpbmdgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2FzbTIuSEVBUFUzMltkYXRhSW5kZXgrK10gPSBhbGxvY1dhc21TdHJpbmcoZGF0YVtpXSwgYWxsb2NzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YUJ5dGVMZW5ndGggPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgIHJhd0RhdGEgPSB3YXNtMi5fbWFsbG9jKGRhdGFCeXRlTGVuZ3RoKTtcbiAgICAgICAgYWxsb2NzLnB1c2gocmF3RGF0YSk7XG4gICAgICAgIHdhc20yLkhFQVBVOC5zZXQobmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YUJ5dGVMZW5ndGgpLCByYXdEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc3RhY2sgPSB3YXNtMi5zdGFja1NhdmUoKTtcbiAgICBjb25zdCBkaW1zT2Zmc2V0ID0gd2FzbTIuc3RhY2tBbGxvYyg0ICogZGltcy5sZW5ndGgpO1xuICAgIHRyeSB7XG4gICAgICBsZXQgZGltSW5kZXggPSBkaW1zT2Zmc2V0IC8gNDtcbiAgICAgIGRpbXMuZm9yRWFjaCgoZCkgPT4gd2FzbTIuSEVBUDMyW2RpbUluZGV4KytdID0gZCk7XG4gICAgICBjb25zdCB0ZW5zb3IyID0gd2FzbTIuX09ydENyZWF0ZVRlbnNvcihcbiAgICAgICAgdGVuc29yRGF0YVR5cGVTdHJpbmdUb0VudW0oZGF0YVR5cGUpLFxuICAgICAgICByYXdEYXRhLFxuICAgICAgICBkYXRhQnl0ZUxlbmd0aCxcbiAgICAgICAgZGltc09mZnNldCxcbiAgICAgICAgZGltcy5sZW5ndGgsXG4gICAgICAgIGRhdGFMb2NhdGlvblN0cmluZ1RvRW51bShsb2NhdGlvbilcbiAgICAgICk7XG4gICAgICBpZiAodGVuc29yMiA9PT0gMCkge1xuICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgY3JlYXRlIHRlbnNvciBmb3IgaW5wdXQvb3V0cHV0LiBzZXNzaW9uPSR7c2Vzc2lvbklkfSwgaW5kZXg9JHtpbmRleH0uYCk7XG4gICAgICB9XG4gICAgICB0ZW5zb3JIYW5kbGVzLnB1c2godGVuc29yMik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHdhc20yLnN0YWNrUmVzdG9yZShzdGFjayk7XG4gICAgfVxuICB9O1xuICB2YXIgcnVuID0gYXN5bmMgKHNlc3Npb25JZCwgaW5wdXRJbmRpY2VzLCBpbnB1dFRlbnNvcnMsIG91dHB1dEluZGljZXMsIG91dHB1dFRlbnNvcnMsIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgY29uc3Qgc2Vzc2lvbiA9IGFjdGl2ZVNlc3Npb25zLmdldChzZXNzaW9uSWQpO1xuICAgIGlmICghc2Vzc2lvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgcnVuIGluZmVyZW5jZS4gaW52YWxpZCBzZXNzaW9uIGlkOiAke3Nlc3Npb25JZH1gKTtcbiAgICB9XG4gICAgY29uc3QgW3Nlc3Npb25IYW5kbGUsIGlucHV0TmFtZXNVVEY4RW5jb2RlZCwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZCwgaW9CaW5kaW5nU3RhdGVdID0gc2Vzc2lvbjtcbiAgICBjb25zdCBpbnB1dENvdW50ID0gaW5wdXRJbmRpY2VzLmxlbmd0aDtcbiAgICBjb25zdCBvdXRwdXRDb3VudCA9IG91dHB1dEluZGljZXMubGVuZ3RoO1xuICAgIGxldCBydW5PcHRpb25zSGFuZGxlID0gMDtcbiAgICBsZXQgcnVuT3B0aW9uc0FsbG9jcyA9IFtdO1xuICAgIGNvbnN0IGlucHV0VGVuc29ySGFuZGxlcyA9IFtdO1xuICAgIGNvbnN0IG91dHB1dFRlbnNvckhhbmRsZXMgPSBbXTtcbiAgICBjb25zdCBpbnB1dE91dHB1dEFsbG9jcyA9IFtdO1xuICAgIGNvbnN0IGJlZm9yZVJ1blN0YWNrID0gd2FzbTIuc3RhY2tTYXZlKCk7XG4gICAgY29uc3QgaW5wdXRWYWx1ZXNPZmZzZXQgPSB3YXNtMi5zdGFja0FsbG9jKGlucHV0Q291bnQgKiA0KTtcbiAgICBjb25zdCBpbnB1dE5hbWVzT2Zmc2V0ID0gd2FzbTIuc3RhY2tBbGxvYyhpbnB1dENvdW50ICogNCk7XG4gICAgY29uc3Qgb3V0cHV0VmFsdWVzT2Zmc2V0ID0gd2FzbTIuc3RhY2tBbGxvYyhvdXRwdXRDb3VudCAqIDQpO1xuICAgIGNvbnN0IG91dHB1dE5hbWVzT2Zmc2V0ID0gd2FzbTIuc3RhY2tBbGxvYyhvdXRwdXRDb3VudCAqIDQpO1xuICAgIHRyeSB7XG4gICAgICBbcnVuT3B0aW9uc0hhbmRsZSwgcnVuT3B0aW9uc0FsbG9jc10gPSBzZXRSdW5PcHRpb25zKG9wdGlvbnMpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgICAgcHJlcGFyZUlucHV0T3V0cHV0VGVuc29yKGlucHV0VGVuc29yc1tpXSwgaW5wdXRUZW5zb3JIYW5kbGVzLCBpbnB1dE91dHB1dEFsbG9jcywgc2Vzc2lvbklkLCBpbnB1dEluZGljZXNbaV0pO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICAgIHByZXBhcmVJbnB1dE91dHB1dFRlbnNvcihcbiAgICAgICAgICBvdXRwdXRUZW5zb3JzW2ldLFxuICAgICAgICAgIG91dHB1dFRlbnNvckhhbmRsZXMsXG4gICAgICAgICAgaW5wdXRPdXRwdXRBbGxvY3MsXG4gICAgICAgICAgc2Vzc2lvbklkLFxuICAgICAgICAgIGlucHV0Q291bnQgKyBvdXRwdXRJbmRpY2VzW2ldXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBsZXQgaW5wdXRWYWx1ZXNJbmRleCA9IGlucHV0VmFsdWVzT2Zmc2V0IC8gNDtcbiAgICAgIGxldCBpbnB1dE5hbWVzSW5kZXggPSBpbnB1dE5hbWVzT2Zmc2V0IC8gNDtcbiAgICAgIGxldCBvdXRwdXRWYWx1ZXNJbmRleCA9IG91dHB1dFZhbHVlc09mZnNldCAvIDQ7XG4gICAgICBsZXQgb3V0cHV0TmFtZXNJbmRleCA9IG91dHB1dE5hbWVzT2Zmc2V0IC8gNDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRDb3VudDsgaSsrKSB7XG4gICAgICAgIHdhc20yLkhFQVBVMzJbaW5wdXRWYWx1ZXNJbmRleCsrXSA9IGlucHV0VGVuc29ySGFuZGxlc1tpXTtcbiAgICAgICAgd2FzbTIuSEVBUFUzMltpbnB1dE5hbWVzSW5kZXgrK10gPSBpbnB1dE5hbWVzVVRGOEVuY29kZWRbaW5wdXRJbmRpY2VzW2ldXTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgICB3YXNtMi5IRUFQVTMyW291dHB1dFZhbHVlc0luZGV4KytdID0gb3V0cHV0VGVuc29ySGFuZGxlc1tpXTtcbiAgICAgICAgd2FzbTIuSEVBUFUzMltvdXRwdXROYW1lc0luZGV4KytdID0gb3V0cHV0TmFtZXNVVEY4RW5jb2RlZFtvdXRwdXRJbmRpY2VzW2ldXTtcbiAgICAgIH1cbiAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICBjb25zdCB7IGhhbmRsZSwgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zLCBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnNFbmNvZGVkIH0gPSBpb0JpbmRpbmdTdGF0ZTtcbiAgICAgICAgaWYgKGlucHV0TmFtZXNVVEY4RW5jb2RlZC5sZW5ndGggIT09IGlucHV0Q291bnQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGlucHV0IGNvdW50IGZyb20gZmVlZHMgKCR7aW5wdXRDb3VudH0pIGlzIGV4cGVjdGVkIHRvIGJlIGFsd2F5cyBlcXVhbCB0byBtb2RlbCdzIGlucHV0IGNvdW50ICgke2lucHV0TmFtZXNVVEY4RW5jb2RlZC5sZW5ndGh9KS5gKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Q291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gaW5wdXRJbmRpY2VzW2ldO1xuICAgICAgICAgIGNvbnN0IGVycm9yQ29kZTIgPSBhd2FpdCB3YXNtMi5fT3J0QmluZElucHV0KGhhbmRsZSwgaW5wdXROYW1lc1VURjhFbmNvZGVkW2luZGV4XSwgaW5wdXRUZW5zb3JIYW5kbGVzW2ldKTtcbiAgICAgICAgICBpZiAoZXJyb3JDb2RlMiAhPT0gMCkge1xuICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IGJpbmQgaW5wdXRbJHtpfV0gZm9yIHNlc3Npb249JHtzZXNzaW9uSWR9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgICAgICBjb25zdCBpbmRleCA9IG91dHB1dEluZGljZXNbaV07XG4gICAgICAgICAgY29uc3QgbG9jYXRpb24gPSBvdXRwdXRUZW5zb3JzW2ldPy5bM107XG4gICAgICAgICAgaWYgKGxvY2F0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvckNvZGUyID0gd2FzbTIuX09ydEJpbmRPdXRwdXQoaGFuZGxlLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkW2luZGV4XSwgb3V0cHV0VGVuc29ySGFuZGxlc1tpXSwgMCk7XG4gICAgICAgICAgICBpZiAoZXJyb3JDb2RlMiAhPT0gMCkge1xuICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgYmluZCBwcmUtYWxsb2NhdGVkIG91dHB1dFske2l9XSBmb3Igc2Vzc2lvbj0ke3Nlc3Npb25JZH0uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yQ29kZTIgPSB3YXNtMi5fT3J0QmluZE91dHB1dChoYW5kbGUsIG91dHB1dE5hbWVzVVRGOEVuY29kZWRbaW5kZXhdLCAwLCBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnNFbmNvZGVkW2luZGV4XSk7XG4gICAgICAgICAgICBpZiAoZXJyb3JDb2RlMiAhPT0gMCkge1xuICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgYmluZCBvdXRwdXRbJHtpfV0gdG8gJHtvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnNbaV19IGZvciBzZXNzaW9uPSR7c2Vzc2lvbklkfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBlcnJvckNvZGU7XG4gICAgICBpZiAoZmFsc2UpIHtcbiAgICAgICAgZXJyb3JDb2RlID0gYXdhaXQgd2FzbTIuX09ydFJ1bldpdGhCaW5kaW5nKFxuICAgICAgICAgIHNlc3Npb25IYW5kbGUsXG4gICAgICAgICAgaW9CaW5kaW5nU3RhdGUuaGFuZGxlLFxuICAgICAgICAgIG91dHB1dENvdW50LFxuICAgICAgICAgIG91dHB1dFZhbHVlc09mZnNldCxcbiAgICAgICAgICBydW5PcHRpb25zSGFuZGxlXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvckNvZGUgPSBhd2FpdCB3YXNtMi5fT3J0UnVuKFxuICAgICAgICAgIHNlc3Npb25IYW5kbGUsXG4gICAgICAgICAgaW5wdXROYW1lc09mZnNldCxcbiAgICAgICAgICBpbnB1dFZhbHVlc09mZnNldCxcbiAgICAgICAgICBpbnB1dENvdW50LFxuICAgICAgICAgIG91dHB1dE5hbWVzT2Zmc2V0LFxuICAgICAgICAgIG91dHB1dENvdW50LFxuICAgICAgICAgIG91dHB1dFZhbHVlc09mZnNldCxcbiAgICAgICAgICBydW5PcHRpb25zSGFuZGxlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICAgIGNoZWNrTGFzdEVycm9yKFwiZmFpbGVkIHRvIGNhbGwgT3J0UnVuKCkuXCIpO1xuICAgICAgfVxuICAgICAgY29uc3Qgb3V0cHV0ID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgICAgY29uc3QgdGVuc29yID0gd2FzbTIuSEVBUFUzMltvdXRwdXRWYWx1ZXNPZmZzZXQgLyA0ICsgaV07XG4gICAgICAgIGlmICh0ZW5zb3IgPT09IG91dHB1dFRlbnNvckhhbmRsZXNbaV0pIHtcbiAgICAgICAgICBvdXRwdXQucHVzaChvdXRwdXRUZW5zb3JzW2ldKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiZWZvcmVHZXRUZW5zb3JEYXRhU3RhY2sgPSB3YXNtMi5zdGFja1NhdmUoKTtcbiAgICAgICAgY29uc3QgdGVuc29yRGF0YU9mZnNldCA9IHdhc20yLnN0YWNrQWxsb2MoNCAqIDQpO1xuICAgICAgICBsZXQga2VlcE91dHB1dFRlbnNvciA9IGZhbHNlO1xuICAgICAgICBsZXQgdHlwZSwgZGF0YU9mZnNldCA9IDA7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgZXJyb3JDb2RlMiA9IHdhc20yLl9PcnRHZXRUZW5zb3JEYXRhKFxuICAgICAgICAgICAgdGVuc29yLFxuICAgICAgICAgICAgdGVuc29yRGF0YU9mZnNldCxcbiAgICAgICAgICAgIHRlbnNvckRhdGFPZmZzZXQgKyA0LFxuICAgICAgICAgICAgdGVuc29yRGF0YU9mZnNldCArIDgsXG4gICAgICAgICAgICB0ZW5zb3JEYXRhT2Zmc2V0ICsgMTJcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmIChlcnJvckNvZGUyICE9PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgYWNjZXNzIG91dHB1dCB0ZW5zb3IgZGF0YSBvbiBpbmRleCAke2l9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgdGVuc29yRGF0YUluZGV4ID0gdGVuc29yRGF0YU9mZnNldCAvIDQ7XG4gICAgICAgICAgY29uc3QgZGF0YVR5cGUgPSB3YXNtMi5IRUFQVTMyW3RlbnNvckRhdGFJbmRleCsrXTtcbiAgICAgICAgICBkYXRhT2Zmc2V0ID0gd2FzbTIuSEVBUFUzMlt0ZW5zb3JEYXRhSW5kZXgrK107XG4gICAgICAgICAgY29uc3QgZGltc09mZnNldCA9IHdhc20yLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICAgIGNvbnN0IGRpbXNMZW5ndGggPSB3YXNtMi5IRUFQVTMyW3RlbnNvckRhdGFJbmRleCsrXTtcbiAgICAgICAgICBjb25zdCBkaW1zID0gW107XG4gICAgICAgICAgZm9yIChsZXQgaTIgPSAwOyBpMiA8IGRpbXNMZW5ndGg7IGkyKyspIHtcbiAgICAgICAgICAgIGRpbXMucHVzaCh3YXNtMi5IRUFQVTMyW2RpbXNPZmZzZXQgLyA0ICsgaTJdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2FzbTIuX09ydEZyZWUoZGltc09mZnNldCk7XG4gICAgICAgICAgY29uc3Qgc2l6ZSA9IGRpbXMucmVkdWNlKChhLCBiKSA9PiBhICogYiwgMSk7XG4gICAgICAgICAgdHlwZSA9IHRlbnNvckRhdGFUeXBlRW51bVRvU3RyaW5nKGRhdGFUeXBlKTtcbiAgICAgICAgICBjb25zdCBwcmVmZXJyZWRMb2NhdGlvbiA9IGlvQmluZGluZ1N0YXRlPy5vdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnNbb3V0cHV0SW5kaWNlc1tpXV07XG4gICAgICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmIChwcmVmZXJyZWRMb2NhdGlvbiA9PT0gXCJncHUtYnVmZmVyXCIpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3RyaW5nIHRlbnNvciBpcyBub3Qgc3VwcG9ydGVkIG9uIEdQVS5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzdHJpbmdEYXRhID0gW107XG4gICAgICAgICAgICBsZXQgZGF0YUluZGV4ID0gZGF0YU9mZnNldCAvIDQ7XG4gICAgICAgICAgICBmb3IgKGxldCBpMiA9IDA7IGkyIDwgc2l6ZTsgaTIrKykge1xuICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB3YXNtMi5IRUFQVTMyW2RhdGFJbmRleCsrXTtcbiAgICAgICAgICAgICAgY29uc3QgbWF4Qnl0ZXNUb1JlYWQgPSBpMiA9PT0gc2l6ZSAtIDEgPyB2b2lkIDAgOiB3YXNtMi5IRUFQVTMyW2RhdGFJbmRleF0gLSBvZmZzZXQ7XG4gICAgICAgICAgICAgIHN0cmluZ0RhdGEucHVzaCh3YXNtMi5VVEY4VG9TdHJpbmcob2Zmc2V0LCBtYXhCeXRlc1RvUmVhZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0cHV0LnB1c2goW3R5cGUsIGRpbXMsIHN0cmluZ0RhdGEsIFwiY3B1XCJdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHByZWZlcnJlZExvY2F0aW9uID09PSBcImdwdS1idWZmZXJcIiAmJiBzaXplID4gMCkge1xuICAgICAgICAgICAgICBjb25zdCBncHVCdWZmZXIgPSB3YXNtMi5qc2VwR2V0QnVmZmVyKGRhdGFPZmZzZXQpO1xuICAgICAgICAgICAgICBjb25zdCBlbGVtZW50U2l6ZSA9IGdldFRlbnNvckVsZW1lbnRTaXplKGRhdGFUeXBlKTtcbiAgICAgICAgICAgICAgaWYgKGVsZW1lbnRTaXplID09PSB2b2lkIDAgfHwgIWlzR3B1QnVmZmVyU3VwcG9ydGVkVHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZGF0YSB0eXBlOiAke3R5cGV9YCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAga2VlcE91dHB1dFRlbnNvciA9IHRydWU7XG4gICAgICAgICAgICAgIG91dHB1dC5wdXNoKFtcbiAgICAgICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgICAgIGRpbXMsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgZ3B1QnVmZmVyLFxuICAgICAgICAgICAgICAgICAgZG93bmxvYWQ6IHdhc20yLmpzZXBDcmVhdGVEb3dubG9hZGVyKGdwdUJ1ZmZlciwgc2l6ZSAqIGVsZW1lbnRTaXplLCB0eXBlKSxcbiAgICAgICAgICAgICAgICAgIGRpc3Bvc2U6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgd2FzbTIuX09ydFJlbGVhc2VUZW5zb3IodGVuc29yKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiZ3B1LWJ1ZmZlclwiXG4gICAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29uc3QgdHlwZWRBcnJheUNvbnN0cnVjdG9yID0gdGVuc29yVHlwZVRvVHlwZWRBcnJheUNvbnN0cnVjdG9yKHR5cGUpO1xuICAgICAgICAgICAgICBjb25zdCBkYXRhID0gbmV3IHR5cGVkQXJyYXlDb25zdHJ1Y3RvcihzaXplKTtcbiAgICAgICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoZGF0YS5idWZmZXIsIGRhdGEuYnl0ZU9mZnNldCwgZGF0YS5ieXRlTGVuZ3RoKS5zZXQod2FzbTIuSEVBUFU4LnN1YmFycmF5KGRhdGFPZmZzZXQsIGRhdGFPZmZzZXQgKyBkYXRhLmJ5dGVMZW5ndGgpKTtcbiAgICAgICAgICAgICAgb3V0cHV0LnB1c2goW3R5cGUsIGRpbXMsIGRhdGEsIFwiY3B1XCJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgd2FzbTIuc3RhY2tSZXN0b3JlKGJlZm9yZUdldFRlbnNvckRhdGFTdGFjayk7XG4gICAgICAgICAgaWYgKHR5cGUgPT09IFwic3RyaW5nXCIgJiYgZGF0YU9mZnNldCkge1xuICAgICAgICAgICAgd2FzbTIuX2ZyZWUoZGF0YU9mZnNldCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgha2VlcE91dHB1dFRlbnNvcikge1xuICAgICAgICAgICAgd2FzbTIuX09ydFJlbGVhc2VUZW5zb3IodGVuc29yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpb0JpbmRpbmdTdGF0ZSkge1xuICAgICAgICB3YXNtMi5fT3J0Q2xlYXJCb3VuZE91dHB1dHMoaW9CaW5kaW5nU3RhdGUuaGFuZGxlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHdhc20yLnN0YWNrUmVzdG9yZShiZWZvcmVSdW5TdGFjayk7XG4gICAgICBpbnB1dFRlbnNvckhhbmRsZXMuZm9yRWFjaCgodikgPT4gd2FzbTIuX09ydFJlbGVhc2VUZW5zb3IodikpO1xuICAgICAgb3V0cHV0VGVuc29ySGFuZGxlcy5mb3JFYWNoKCh2KSA9PiB3YXNtMi5fT3J0UmVsZWFzZVRlbnNvcih2KSk7XG4gICAgICBpbnB1dE91dHB1dEFsbG9jcy5mb3JFYWNoKChwKSA9PiB3YXNtMi5fZnJlZShwKSk7XG4gICAgICBpZiAocnVuT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgICB3YXNtMi5fT3J0UmVsZWFzZVJ1bk9wdGlvbnMocnVuT3B0aW9uc0hhbmRsZSk7XG4gICAgICB9XG4gICAgICBydW5PcHRpb25zQWxsb2NzLmZvckVhY2goKHApID0+IHdhc20yLl9mcmVlKHApKTtcbiAgICB9XG4gIH07XG4gIHZhciBlbmRQcm9maWxpbmcgPSAoc2Vzc2lvbklkKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IHNlc3Npb24gPSBhY3RpdmVTZXNzaW9ucy5nZXQoc2Vzc2lvbklkKTtcbiAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgc2Vzc2lvbiBpZFwiKTtcbiAgICB9XG4gICAgY29uc3Qgc2Vzc2lvbkhhbmRsZSA9IHNlc3Npb25bMF07XG4gICAgY29uc3QgcHJvZmlsZUZpbGVOYW1lID0gd2FzbTIuX09ydEVuZFByb2ZpbGluZyhzZXNzaW9uSGFuZGxlKTtcbiAgICBpZiAocHJvZmlsZUZpbGVOYW1lID09PSAwKSB7XG4gICAgICBjaGVja0xhc3RFcnJvcihcIkNhbid0IGdldCBhbiBwcm9maWxlIGZpbGUgbmFtZS5cIik7XG4gICAgfVxuICAgIHdhc20yLl9PcnRGcmVlKHByb2ZpbGVGaWxlTmFtZSk7XG4gIH07XG4gIHZhciBleHRyYWN0VHJhbnNmZXJhYmxlQnVmZmVycyA9ICh0ZW5zb3JzKSA9PiB7XG4gICAgY29uc3QgYnVmZmVycyA9IFtdO1xuICAgIGZvciAoY29uc3QgdGVuc29yIG9mIHRlbnNvcnMpIHtcbiAgICAgIGNvbnN0IGRhdGEgPSB0ZW5zb3JbMl07XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkgJiYgXCJidWZmZXJcIiBpbiBkYXRhKSB7XG4gICAgICAgIGJ1ZmZlcnMucHVzaChkYXRhLmJ1ZmZlcik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBidWZmZXJzO1xuICB9O1xuXG4gIC8vIHdlYi9saWIvd2FzbS9wcm94eS13b3JrZXIvbWFpbi50c1xuICBzZWxmLm9ubWVzc2FnZSA9IChldikgPT4ge1xuICAgIGNvbnN0IHsgdHlwZSwgaW46IG1lc3NhZ2UgfSA9IGV2LmRhdGE7XG4gICAgdHJ5IHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwiaW5pdC13YXNtXCI6XG4gICAgICAgICAgaW5pdGlhbGl6ZVdlYkFzc2VtYmx5KG1lc3NhZ2Uud2FzbSkudGhlbihcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgaW5pdFJ1bnRpbWUobWVzc2FnZSkudGhlbihcbiAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGUgfSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGUsIGVyciB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGUsIGVyciB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiaW5pdC1lcFwiOiB7XG4gICAgICAgICAgY29uc3QgeyBlcE5hbWUsIGVudiB9ID0gbWVzc2FnZTtcbiAgICAgICAgICBpbml0RXAoZW52LCBlcE5hbWUpLnRoZW4oXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZSB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZSwgZXJyIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImNvcHktZnJvbVwiOiB7XG4gICAgICAgICAgY29uc3QgeyBidWZmZXIgfSA9IG1lc3NhZ2U7XG4gICAgICAgICAgY29uc3QgYnVmZmVyRGF0YSA9IGNvcHlGcm9tRXh0ZXJuYWxCdWZmZXIoYnVmZmVyKTtcbiAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGUsIG91dDogYnVmZmVyRGF0YSB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiY3JlYXRlXCI6IHtcbiAgICAgICAgICBjb25zdCB7IG1vZGVsLCBvcHRpb25zIH0gPSBtZXNzYWdlO1xuICAgICAgICAgIGNvbnN0IHNlc3Npb25NZXRhZGF0YSA9IGNyZWF0ZVNlc3Npb24obW9kZWwsIG9wdGlvbnMpO1xuICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZSwgb3V0OiBzZXNzaW9uTWV0YWRhdGEgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInJlbGVhc2VcIjpcbiAgICAgICAgICByZWxlYXNlU2Vzc2lvbihtZXNzYWdlKTtcbiAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGUgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJydW5cIjoge1xuICAgICAgICAgIGNvbnN0IHsgc2Vzc2lvbklkLCBpbnB1dEluZGljZXMsIGlucHV0cywgb3V0cHV0SW5kaWNlcywgb3B0aW9ucyB9ID0gbWVzc2FnZTtcbiAgICAgICAgICBydW4oc2Vzc2lvbklkLCBpbnB1dEluZGljZXMsIGlucHV0cywgb3V0cHV0SW5kaWNlcywgbmV3IEFycmF5KG91dHB1dEluZGljZXMubGVuZ3RoKS5maWxsKG51bGwpLCBvcHRpb25zKS50aGVuKFxuICAgICAgICAgICAgKG91dHB1dHMpID0+IHtcbiAgICAgICAgICAgICAgaWYgKG91dHB1dHMuc29tZSgobykgPT4gb1szXSAhPT0gXCJjcHVcIikpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGUsIGVycjogXCJQcm94eSBkb2VzIG5vdCBzdXBwb3J0IG5vbi1jcHUgdGVuc29yIGxvY2F0aW9uLlwiIH0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlKFxuICAgICAgICAgICAgICAgICAgeyB0eXBlLCBvdXQ6IG91dHB1dHMgfSxcbiAgICAgICAgICAgICAgICAgIGV4dHJhY3RUcmFuc2ZlcmFibGVCdWZmZXJzKG91dHB1dHMpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlLCBlcnIgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiZW5kLXByb2ZpbGluZ1wiOlxuICAgICAgICAgIGVuZFByb2ZpbGluZyhtZXNzYWdlKTtcbiAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGUgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBwb3N0TWVzc2FnZSh7IHR5cGUsIGVyciB9KTtcbiAgICB9XG4gIH07XG59KSgpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxld29nSUNKMlpYSnphVzl1SWpvZ015d0tJQ0FpYzI5MWNtTmxjeUk2SUZzaWJtOWtaV3B6TFdsbmJtOXlaVHBtY3lJc0lDSnViMlJsYW5NdGFXZHViM0psT25CaGRHZ2lMQ0FpTGk0dmJHbGlMM2RoYzIwdlltbHVaR2x1Wnk5dmNuUXRkMkZ6YlM1cWN5SXNJQ0p1YjJSbGFuTXRhV2R1YjNKbE9uZHZjbXRsY2w5MGFISmxZV1J6SWl3Z0ltNXZaR1ZxY3kxcFoyNXZjbVU2Y0dWeVpsOW9iMjlyY3lJc0lDSnViMlJsYW5NdGFXZHViM0psT205eklpd2dJaTR1TDJ4cFlpOTNZWE50TDJKcGJtUnBibWN2YjNKMExYZGhjMjB0ZEdoeVpXRmtaV1F1YW5NaUxDQWlMaTR2YkdsaUwzZGhjMjB2WW1sdVpHbHVaeTl2Y25RdGQyRnpiUzEwYUhKbFlXUmxaQzUzYjNKclpYSXVhbk1pTENBaWJtOWtaV3B6TFdsbmJtOXlaVHB1YjJSbE9uQmhkR2dpTENBaUxpNHZiR2xpTDNkaGMyMHZkMkZ6YlMxbVlXTjBiM0o1TG5Seklpd2dJaTR1TDJ4cFlpOTNZWE50TDNkaGMyMHRkWFJwYkhNdWRITWlMQ0FpTGk0dmJHbGlMM2RoYzIwdmNuVnVMVzl3ZEdsdmJuTXVkSE1pTENBaUxpNHZiR2xpTDNkaGMyMHZjMlZ6YzJsdmJpMXZjSFJwYjI1ekxuUnpJaXdnSWk0dUwyeHBZaTkzWVhOdEwzZGhjMjB0WTI5dGJXOXVMblJ6SWl3Z0lpNHVMMnhwWWk5M1lYTnRMM2RoYzIwdFkyOXlaUzFwYlhCc0xuUnpJaXdnSWk0dUwyeHBZaTkzWVhOdEwzQnliM2g1TFhkdmNtdGxjaTl0WVdsdUxuUnpJbDBzQ2lBZ0luTnZkWEpqWlhORGIyNTBaVzUwSWpvZ1d5SmxlSEJ2Y25RZ1kyOXVjM1FnY21WaFpFWnBiR1VnUFNCMWJtUmxabWx1WldRN0lpd2dJbVY0Y0c5eWRDQmpiMjV6ZENCcWIybHVJRDBnZFc1a1pXWnBibVZrT3lJc0lDSmNiblpoY2lCdmNuUlhZWE50SUQwZ0tDZ3BJRDArSUh0Y2JpQWdkbUZ5SUY5elkzSnBjSFJFYVhJZ1BTQjBlWEJsYjJZZ1pHOWpkVzFsYm5RZ0lUMDlJQ2QxYm1SbFptbHVaV1FuSUNZbUlHUnZZM1Z0Wlc1MExtTjFjbkpsYm5SVFkzSnBjSFFnUHlCa2IyTjFiV1Z1ZEM1amRYSnlaVzUwVTJOeWFYQjBMbk55WXlBNklIVnVaR1ZtYVc1bFpEdGNiaUFnYVdZZ0tIUjVjR1Z2WmlCZlgyWnBiR1Z1WVcxbElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ1gzTmpjbWx3ZEVScGNpQTlJRjl6WTNKcGNIUkVhWElnZkh3Z1gxOW1hV3hsYm1GdFpUdGNiaUFnY21WMGRYSnVJQ2hjYm1aMWJtTjBhVzl1S0cxdlpIVnNaVUZ5WnlBOUlIdDlLU0I3WEc1Y2JuWmhjaUJvUFcxdlpIVnNaVUZ5Wnl4aFlTeGlZVHRvTG5KbFlXUjVQVzVsZHlCUWNtOXRhWE5sS0NoaExHSXBQVDU3WVdFOVlUdGlZVDFpZlNrN2RtRnlJR05oUFU5aWFtVmpkQzVoYzNOcFoyNG9lMzBzYUNrc1pHRTlYQ0l1TDNSb2FYTXVjSEp2WjNKaGJWd2lMR1ZoUFZ3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCM2FXNWtiM2NzYlQxY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQnBiWEJ2Y25SVFkzSnBjSFJ6TEdaaFBWd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQndjbTlqWlhOekppWmNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdjSEp2WTJWemN5NTJaWEp6YVc5dWN5WW1YQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JSEJ5YjJObGMzTXVkbVZ5YzJsdmJuTXVibTlrWlN4d1BWd2lYQ0lzYUdFc2RDeDNPMXh1YVdZb1ptRXBlM1poY2lCbWN6MXlaWEYxYVhKbEtGd2labk5jSWlrc2FXRTljbVZ4ZFdseVpTaGNJbkJoZEdoY0lpazdjRDF0UDJsaExtUnBjbTVoYldVb2NDa3JYQ0l2WENJNlgxOWthWEp1WVcxbEsxd2lMMXdpTzJoaFBTaGhMR0lwUFQ1N1lUMWhMbk4wWVhKMGMxZHBkR2dvWENKbWFXeGxPaTh2WENJcFAyNWxkeUJWVWt3b1lTazZhV0V1Ym05eWJXRnNhWHBsS0dFcE8zSmxkSFZ5YmlCbWN5NXlaV0ZrUm1sc1pWTjVibU1vWVN4aVAzWnZhV1FnTURwY0luVjBaamhjSWlsOU8zYzlZVDArZTJFOWFHRW9ZU3doTUNrN1lTNWlkV1ptWlhKOGZDaGhQVzVsZHlCVmFXNTBPRUZ5Y21GNUtHRXBLVHR5WlhSMWNtNGdZWDA3ZEQwb1lTeGlMR01zWkQwaE1DazlQbnRoUFdFdWMzUmhjblJ6VjJsMGFDaGNJbVpwYkdVNkx5OWNJaWsvYm1WM0lGVlNUQ2hoS1RwcFlTNXViM0p0WVd4cGVtVW9ZU2s3Wm5NdWNtVmhaRVpwYkdVb1lTeGtQM1p2YVdRZ01EcGNJblYwWmpoY0lpd29aU3huS1QwK2UyVS9ZeWhsS1RwaUtHUS9aeTVpZFdabVpYSTZaeWw5S1gwN0lXZ3VkR2hwYzFCeWIyZHlZVzBtSmpFOGNISnZZMlZ6Y3k1aGNtZDJMbXhsYm1kMGFDWW1LR1JoUFhCeWIyTmxjM011WVhKbmRsc3hYUzV5WlhCc1lXTmxLQzljWEZ4Y0wyY3NYQ0l2WENJcEtUdHdjbTlqWlhOekxtRnlaM1l1YzJ4cFkyVW9NaWs3YUM1cGJuTndaV04wUFNncFBUNWNJbHRGYlhOamNtbHdkR1Z1SUUxdlpIVnNaU0J2WW1wbFkzUmRYQ0o5Wld4elpTQnBaaWhsWVh4OFhHNXRLVzAvY0QxelpXeG1MbXh2WTJGMGFXOXVMbWh5WldZNlhDSjFibVJsWm1sdVpXUmNJaUU5ZEhsd1pXOW1JR1J2WTNWdFpXNTBKaVprYjJOMWJXVnVkQzVqZFhKeVpXNTBVMk55YVhCMEppWW9jRDFrYjJOMWJXVnVkQzVqZFhKeVpXNTBVMk55YVhCMExuTnlZeWtzWDNOamNtbHdkRVJwY2lZbUtIQTlYM05qY21sd2RFUnBjaWtzTUNFOVBYQXVhVzVrWlhoUFppaGNJbUpzYjJJNlhDSXBQM0E5Y0M1emRXSnpkSElvTUN4d0xuSmxjR3hoWTJVb0wxcy9JMTB1S2k4c1hDSmNJaWt1YkdGemRFbHVaR1Y0VDJZb1hDSXZYQ0lwS3pFcE9uQTlYQ0pjSWl4b1lUMWhQVDU3ZG1GeUlHSTlibVYzSUZoTlRFaDBkSEJTWlhGMVpYTjBPMkl1YjNCbGJpaGNJa2RGVkZ3aUxHRXNJVEVwTzJJdWMyVnVaQ2h1ZFd4c0tUdHlaWFIxY200Z1lpNXlaWE53YjI1elpWUmxlSFI5TEcwbUppaDNQV0U5UG50MllYSWdZajF1WlhjZ1dFMU1TSFIwY0ZKbGNYVmxjM1E3WWk1dmNHVnVLRndpUjBWVVhDSXNZU3doTVNrN1lpNXlaWE53YjI1elpWUjVjR1U5WENKaGNuSmhlV0oxWm1abGNsd2lPMkl1YzJWdVpDaHVkV3hzS1R0eVpYUjFjbTRnYm1WM0lGVnBiblE0UVhKeVlYa29ZaTV5WlhOd2IyNXpaU2w5S1N4MFBTaGhMR0lzWXlrOVBudDJZWElnWkQxdVpYY2dXRTFNU0hSMGNGSmxjWFZsYzNRN1pDNXZjR1Z1S0Z3aVIwVlVYQ0lzWVN3aE1DazdaQzV5WlhOd2IyNXpaVlI1Y0dVOVhHNWNJbUZ5Y21GNVluVm1abVZ5WENJN1pDNXZibXh2WVdROUtDazlQbnN5TURBOVBXUXVjM1JoZEhWemZId3dQVDFrTG5OMFlYUjFjeVltWkM1eVpYTndiMjV6WlQ5aUtHUXVjbVZ6Y0c5dWMyVXBPbU1vS1gwN1pDNXZibVZ5Y205eVBXTTdaQzV6Wlc1a0tHNTFiR3dwZlR0MllYSWdhbUU5WTI5dWMyOXNaUzVzYjJjdVltbHVaQ2hqYjI1emIyeGxLU3g0UFdOdmJuTnZiR1V1WlhKeWIzSXVZbWx1WkNoamIyNXpiMnhsS1R0UFltcGxZM1F1WVhOemFXZHVLR2dzWTJFcE8yTmhQVzUxYkd3N1hDSnZZbXBsWTNSY0lpRTlkSGx3Wlc5bUlGZGxZa0Z6YzJWdFlteDVKaVpyWVNoY0ltNXZJRzVoZEdsMlpTQjNZWE50SUhOMWNIQnZjblFnWkdWMFpXTjBaV1JjSWlrN2RtRnlJSG9zYkdFOUlURXNRU3hDTEVNc1JDeEZMRWNzYldFc2JtRXNiMkVzY0dFN1hHNW1kVzVqZEdsdmJpQnhZU2dwZTNaaGNpQmhQWG91WW5WbVptVnlPMmd1U0VWQlVEZzlRVDF1WlhjZ1NXNTBPRUZ5Y21GNUtHRXBPMmd1U0VWQlVERTJQVU05Ym1WM0lFbHVkREUyUVhKeVlYa29ZU2s3YUM1SVJVRlFWVGc5UWoxdVpYY2dWV2x1ZERoQmNuSmhlU2hoS1R0b0xraEZRVkJWTVRZOVJEMXVaWGNnVldsdWRERTJRWEp5WVhrb1lTazdhQzVJUlVGUU16STlSVDF1WlhjZ1NXNTBNekpCY25KaGVTaGhLVHRvTGtoRlFWQlZNekk5UnoxdVpYY2dWV2x1ZERNeVFYSnlZWGtvWVNrN2FDNUlSVUZRUmpNeVBXMWhQVzVsZHlCR2JHOWhkRE15UVhKeVlYa29ZU2s3YUM1SVJVRlFSalkwUFhCaFBXNWxkeUJHYkc5aGREWTBRWEp5WVhrb1lTazdhQzVJUlVGUU5qUTlibUU5Ym1WM0lFSnBaMGx1ZERZMFFYSnlZWGtvWVNrN2FDNUlSVUZRVlRZMFBXOWhQVzVsZHlCQ2FXZFZhVzUwTmpSQmNuSmhlU2hoS1gxMllYSWdjbUU5VzEwc2MyRTlXMTBzZEdFOVcxMHNTVDB3TEhWaFBXNTFiR3dzU2oxdWRXeHNPMXh1Wm5WdVkzUnBiMjRnYTJFb1lTbDdZVDFjSWtGaWIzSjBaV1FvWENJcllTdGNJaWxjSWp0NEtHRXBPMnhoUFNFd08yRTlibVYzSUZkbFlrRnpjMlZ0WW14NUxsSjFiblJwYldWRmNuSnZjaWhoSzF3aUxpQkNkV2xzWkNCM2FYUm9JQzF6UVZOVFJWSlVTVTlPVXlCbWIzSWdiVzl5WlNCcGJtWnZMbHdpS1R0aVlTaGhLVHQwYUhKdmR5QmhPMzFtZFc1amRHbHZiaUIyWVNoaEtYdHlaWFIxY200Z1lTNXpkR0Z5ZEhOWGFYUm9LRndpWkdGMFlUcGhjSEJzYVdOaGRHbHZiaTl2WTNSbGRDMXpkSEpsWVcwN1ltRnpaVFkwTEZ3aUtYMTJZWElnU3p0TFBWd2liM0owTFhkaGMyMHVkMkZ6YlZ3aU8ybG1LQ0YyWVNoTEtTbDdkbUZ5SUhkaFBVczdTejFvTG14dlkyRjBaVVpwYkdVL2FDNXNiMk5oZEdWR2FXeGxLSGRoTEhBcE9uQXJkMkY5Wm5WdVkzUnBiMjRnZUdFb1lTbDdhV1lvZHlseVpYUjFjbTRnZHloaEtUdDBhSEp2ZDF3aVltOTBhQ0JoYzNsdVl5QmhibVFnYzNsdVl5Qm1aWFJqYUdsdVp5QnZaaUIwYUdVZ2QyRnpiU0JtWVdsc1pXUmNJanQ5WEc1bWRXNWpkR2x2YmlCNVlTaGhLWHRwWmlobFlYeDhiU2w3YVdZb1hDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdabVYwWTJnbUppRmhMbk4wWVhKMGMxZHBkR2dvWENKbWFXeGxPaTh2WENJcEtYSmxkSFZ5YmlCbVpYUmphQ2hoTEh0amNtVmtaVzUwYVdGc2N6cGNJbk5oYldVdGIzSnBaMmx1WENKOUtTNTBhR1Z1S0dJOVBudHBaaWdoWWk1dmF5bDBhSEp2ZDF3aVptRnBiR1ZrSUhSdklHeHZZV1FnZDJGemJTQmlhVzVoY25rZ1ptbHNaU0JoZENBblhDSXJZU3RjSWlkY0lqdHlaWFIxY200Z1lpNWhjbkpoZVVKMVptWmxjaWdwZlNrdVkyRjBZMmdvS0NrOVBuaGhLR0VwS1R0cFppaDBLWEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvWWl4aktUMCtlM1FvWVN4a1BUNWlLRzVsZHlCVmFXNTBPRUZ5Y21GNUtHUXBLU3hqS1gwcGZYSmxkSFZ5YmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvS1M1MGFHVnVLQ2dwUFQ1NFlTaGhLU2w5Wm5WdVkzUnBiMjRnZW1Fb1lTeGlMR01wZTNKbGRIVnliaUI1WVNoaEtTNTBhR1Z1S0dROVBsZGxZa0Z6YzJWdFlteDVMbWx1YzNSaGJuUnBZWFJsS0dRc1lpa3BMblJvWlc0b1pEMCtaQ2t1ZEdobGJpaGpMR1E5UG50NEtHQm1ZV2xzWldRZ2RHOGdZWE41Ym1Ob2NtOXViM1Z6YkhrZ2NISmxjR0Z5WlNCM1lYTnRPaUFrZTJSOVlDazdhMkVvWkNsOUtYMWNibVoxYm1OMGFXOXVJRUZoS0dFc1lpbDdkbUZ5SUdNOVN6dHlaWFIxY201Y0ltWjFibU4wYVc5dVhDSWhQWFI1Y0dWdlppQlhaV0pCYzNObGJXSnNlUzVwYm5OMFlXNTBhV0YwWlZOMGNtVmhiV2x1WjN4OGRtRW9ZeWw4ZkdNdWMzUmhjblJ6VjJsMGFDaGNJbVpwYkdVNkx5OWNJaWw4ZkdaaGZIeGNJbVoxYm1OMGFXOXVYQ0loUFhSNWNHVnZaaUJtWlhSamFEOTZZU2hqTEdFc1lpazZabVYwWTJnb1l5eDdZM0psWkdWdWRHbGhiSE02WENKellXMWxMVzl5YVdkcGJsd2lmU2t1ZEdobGJpaGtQVDVYWldKQmMzTmxiV0pzZVM1cGJuTjBZVzUwYVdGMFpWTjBjbVZoYldsdVp5aGtMR0VwTG5Sb1pXNG9ZaXhtZFc1amRHbHZiaWhsS1h0NEtHQjNZWE50SUhOMGNtVmhiV2x1WnlCamIyMXdhV3hsSUdaaGFXeGxaRG9nSkh0bGZXQXBPM2dvWENKbVlXeHNhVzVuSUdKaFkyc2dkRzhnUVhKeVlYbENkV1ptWlhJZ2FXNXpkR0Z1ZEdsaGRHbHZibHdpS1R0eVpYUjFjbTRnZW1Fb1l5eGhMR0lwZlNrcGZWeHVablZ1WTNScGIyNGdRbUVvWVNsN2RHaHBjeTVXWVQxaExUSTBPM1JvYVhNdVptSTlablZ1WTNScGIyNG9ZaWw3UjF0MGFHbHpMbFpoS3pRK1BqNHlQajQrTUYwOVluMDdkR2hwY3k1bFlqMW1kVzVqZEdsdmJpaGlLWHRIVzNSb2FYTXVWbUVyT0Q0K1BqSStQajR3WFQxaWZUdDBhR2x6TGxwaFBXWjFibU4wYVc5dUtHSXNZeWw3ZEdocGN5NGtZU2dwTzNSb2FYTXVabUlvWWlrN2RHaHBjeTVsWWloaktYMDdkR2hwY3k0a1lUMW1kVzVqZEdsdmJpZ3BlMGRiZEdocGN5NVdZU3N4Tmo0K1BqSStQajR3WFQwd2ZYMWNiblpoY2lCRFlUMHdMRVJoUFRBc1JXRTlYQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUZSbGVIUkVaV052WkdWeVAyNWxkeUJVWlhoMFJHVmpiMlJsY2loY0luVjBaamhjSWlrNmRtOXBaQ0F3TEVaaFBTaGhMR0lzWXlrOVBudGlQajQrUFRBN2RtRnlJR1E5WWl0ak8yWnZjaWhqUFdJN1lWdGpYU1ltSVNoalBqMWtLVHNwS3l0ak8ybG1LREUyUEdNdFlpWW1ZUzVpZFdabVpYSW1Ka1ZoS1hKbGRIVnliaUJGWVM1a1pXTnZaR1VvWVM1emRXSmhjbkpoZVNoaUxHTXBLVHRtYjNJb1pEMWNJbHdpTzJJOFl6c3BlM1poY2lCbFBXRmJZaXNyWFR0cFppaGxKakV5T0NsN2RtRnlJR2M5WVZ0aUt5dGRKall6TzJsbUtERTVNajA5S0dVbU1qSTBLU2xrS3oxVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtDaGxKak14S1R3OE5ueG5LVHRsYkhObGUzWmhjaUJzUFdGYllpc3JYU1kyTXp0bFBUSXlORDA5S0dVbU1qUXdLVDhvWlNZeE5TazhQREV5ZkdjOFBEWjhiRG9vWlNZM0tUdzhNVGg4Wnp3OE1USjhiRHc4Tm54aFcySXJLMTBtTmpNN05qVTFNelkrWlQ5a0t6MVRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLR1VwT2lobExUMDJOVFV6Tml4a0t6MVRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLRFUxTWprMmZHVStQakV3TERVMk16SXdmR1VtTVRBeU15a3BmWDFsYkhObElHUXJQVk4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1VvWlNsOWNtVjBkWEp1SUdSOUxGeHVURDBvWVN4aUtUMCtLR0UrUGo0OU1Day9SbUVvUWl4aExHSXBPbHdpWENJc1RUMWhQVDU3Wm05eUtIWmhjaUJpUFRBc1l6MHdPMk04WVM1c1pXNW5kR2c3S3l0aktYdDJZWElnWkQxaExtTm9ZWEpEYjJSbFFYUW9ZeWs3TVRJM1BqMWtQMklyS3pveU1EUTNQajFrUDJJclBUSTZOVFV5T1RZOFBXUW1KalUzTXpRelBqMWtQeWhpS3owMExDc3JZeWs2WWlzOU0zMXlaWFIxY200Z1luMHNUajBvWVN4aUxHTXNaQ2s5UG50alBqNCtQVEE3YVdZb0lTZ3dQR1FwS1hKbGRIVnliaUF3TzNaaGNpQmxQV003WkQxaksyUXRNVHRtYjNJb2RtRnlJR2M5TUR0blBHRXViR1Z1WjNSb095c3JaeWw3ZG1GeUlHdzlZUzVqYUdGeVEyOWtaVUYwS0djcE8ybG1LRFUxTWprMlBEMXNKaVkxTnpNME16NDliQ2w3ZG1GeUlHczlZUzVqYUdGeVEyOWtaVUYwS0Nzclp5azdiRDAyTlRVek5pc29LR3dtTVRBeU15azhQREV3S1h4ckpqRXdNak45YVdZb01USTNQajFzS1h0cFppaGpQajFrS1dKeVpXRnJPMkpiWXlzclBqNCtNRjA5YkgxbGJITmxlMmxtS0RJd05EYytQV3dwZTJsbUtHTXJNVDQ5WkNsaWNtVmhhenRpVzJNckt6NCtQakJkUFRFNU1ueHNQajQyZldWc2MyVjdhV1lvTmpVMU16VStQV3dwZTJsbUtHTXJNajQ5WkNsaWNtVmhhenRpVzJNckt6NCtQakJkUFRJeU5IeHNQajR4TW4xbGJITmxlMmxtS0dNck16NDlYRzVrS1dKeVpXRnJPMkpiWXlzclBqNCtNRjA5TWpRd2ZHdytQakU0TzJKYll5c3JQajQrTUYwOU1USTRmR3crUGpFeUpqWXpmV0piWXlzclBqNCtNRjA5TVRJNGZHdytQalltTmpOOVlsdGpLeXMrUGo0d1hUMHhNamg4YkNZMk0zMTlZbHRqUGo0K01GMDlNRHR5WlhSMWNtNGdZeTFsZlN4SFlUMWhQVDU3YVdZb2JuVnNiRDA5UFdFcGNtVjBkWEp1WENKdWRXeHNYQ0k3ZG1GeUlHSTlkSGx3Wlc5bUlHRTdjbVYwZFhKdVhDSnZZbXBsWTNSY0lqMDlQV0o4ZkZ3aVlYSnlZWGxjSWowOVBXSjhmRndpWm5WdVkzUnBiMjVjSWowOVBXSS9ZUzUwYjFOMGNtbHVaeWdwT2x3aVhDSXJZWDBzU0dFc1R6MWhQVDU3Wm05eUtIWmhjaUJpUFZ3aVhDSTdRbHRoUGo0K01GMDdLV0lyUFVoaFcwSmJZU3NyUGo0K01GMWRPM0psZEhWeWJpQmlmU3hKWVQxN2ZTeEtZVDE3ZlN4TFlUMTdmU3hRTzF4dVpuVnVZM1JwYjI0Z1RHRW9ZU3hpTEdNOWUzMHBlM1poY2lCa1BXSXVibUZ0WlR0cFppZ2hZU2wwYUhKdmR5QnVaWGNnVUNoZ2RIbHdaU0JjSWlSN1pIMWNJaUJ0ZFhOMElHaGhkbVVnWVNCd2IzTnBkR2wyWlNCcGJuUmxaMlZ5SUhSNWNHVnBaQ0J3YjJsdWRHVnlZQ2s3YVdZb1NtRXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb1lTa3BlMmxtS0dNdVoySXBjbVYwZFhKdU8zUm9jbTkzSUc1bGR5QlFLR0JEWVc1dWIzUWdjbVZuYVhOMFpYSWdkSGx3WlNBbkpIdGtmU2NnZEhkcFkyVmdLVHQ5U21GYllWMDlZanRrWld4bGRHVWdTMkZiWVYwN1NXRXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb1lTa21KaWhpUFVsaFcyRmRMR1JsYkdWMFpTQkpZVnRoWFN4aUxtWnZja1ZoWTJnb1pUMCtaU2dwS1NsOVpuVnVZM1JwYjI0Z1VTaGhMR0lzWXoxN2ZTbDdhV1lvSVNoY0ltRnlaMUJoWTJ0QlpIWmhibU5sWENKcGJpQmlLU2wwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0Z3aWNtVm5hWE4wWlhKVWVYQmxJSEpsWjJsemRHVnlaV1JKYm5OMFlXNWpaU0J5WlhGMWFYSmxjeUJoY21kUVlXTnJRV1IyWVc1alpWd2lLVHRNWVNoaExHSXNZeWw5WEc1MllYSWdUV0U5S0dFc1lpeGpLVDArZTNOM2FYUmphQ2hpS1h0allYTmxJREU2Y21WMGRYSnVJR00vWkQwK1FWdGtQajQrTUQ0K1BqQmRPbVE5UGtKYlpENCtQakErUGo0d1hUdGpZWE5sSURJNmNtVjBkWEp1SUdNL1pEMCtRMXRrUGo0K01UNCtQakJkT21ROVBrUmJaRDQrUGpFK1BqNHdYVHRqWVhObElEUTZjbVYwZFhKdUlHTS9aRDArUlZ0a1BqNCtNajQrUGpCZE9tUTlQa2RiWkQ0K1BqSStQajR3WFR0allYTmxJRGc2Y21WMGRYSnVJR00vWkQwK2JtRmJaRDQrUGpOZE9tUTlQbTloVzJRK1BqNHpYVHRrWldaaGRXeDBPblJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWUdsdWRtRnNhV1FnYVc1MFpXZGxjaUIzYVdSMGFDQW9KSHRpZlNrNklDUjdZWDFnS1R0OWZUdG1kVzVqZEdsdmJpQk9ZU2dwZTNSb2FYTXVVMkU5VzNadmFXUWdNRjA3ZEdocGN5NWlZajFiWFgxMllYSWdVajF1WlhjZ1RtRTdablZ1WTNScGIyNGdUMkVvWVNsN1lUNCtQajB3TzJFK1BWSXVWbUVtSmpBOVBUMHRMVkl1WjJWMEtHRXBMbU5pSmlaU0xpUmhLR0VwZlZ4dWRtRnlJRk05WVQwK2UybG1LQ0ZoS1hSb2NtOTNJRzVsZHlCUUtGd2lRMkZ1Ym05MElIVnpaU0JrWld4bGRHVmtJSFpoYkM0Z2FHRnVaR3hsSUQwZ1hDSXJZU2s3Y21WMGRYSnVJRkl1WjJWMEtHRXBMblpoYkhWbGZTeFVQV0U5UG50emQybDBZMmdvWVNsN1kyRnpaU0IyYjJsa0lEQTZjbVYwZFhKdUlERTdZMkZ6WlNCdWRXeHNPbkpsZEhWeWJpQXlPMk5oYzJVZ0lUQTZjbVYwZFhKdUlETTdZMkZ6WlNBaE1UcHlaWFIxY200Z05EdGtaV1poZFd4ME9uSmxkSFZ5YmlCU0xscGhLSHRqWWpveExIWmhiSFZsT21GOUtYMTlPMloxYm1OMGFXOXVJRkJoS0dFcGUzSmxkSFZ5YmlCMGFHbHpMbVp5YjIxWGFYSmxWSGx3WlNoRlcyRStQajR5UGo0K01GMHBmWFpoY2lCUllUMG9ZU3hpS1QwK2UzTjNhWFJqYUNoaUtYdGpZWE5sSURRNmNtVjBkWEp1SUdaMWJtTjBhVzl1S0dNcGUzSmxkSFZ5YmlCMGFHbHpMbVp5YjIxWGFYSmxWSGx3WlNodFlWdGpQajQrTWo0K1BqQmRLWDA3WTJGelpTQTRPbkpsZEhWeWJpQm1kVzVqZEdsdmJpaGpLWHR5WlhSMWNtNGdkR2hwY3k1bWNtOXRWMmx5WlZSNWNHVW9jR0ZiWXo0K1BqTStQajR3WFNsOU8yUmxabUYxYkhRNmRHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGdhVzUyWVd4cFpDQm1iRzloZENCM2FXUjBhQ0FvSkh0aWZTazZJQ1I3WVgxZ0tUdDlmVHRjYm1aMWJtTjBhVzl1SUZKaEtHRXBlM0psZEhWeWJpQjBhR2x6TG1aeWIyMVhhWEpsVkhsd1pTaEhXMkUrUGo0eVBqNCtNRjBwZlZ4dWRtRnlJRk5oUFZ3aWRXNWtaV1pwYm1Wa1hDSWhQWFI1Y0dWdlppQlVaWGgwUkdWamIyUmxjajl1WlhjZ1ZHVjRkRVJsWTI5a1pYSW9YQ0oxZEdZdE1UWnNaVndpS1RwMmIybGtJREFzVkdFOUtHRXNZaWs5UG50MllYSWdZejFoUGo0eE8yWnZjaWgyWVhJZ1pEMWpLMkl2TWpzaEtHTStQV1FwSmlaRVcyTStQajR3WFRzcEt5dGpPMk04UEQweE8ybG1LRE15UEdNdFlTWW1VMkVwY21WMGRYSnVJRk5oTG1SbFkyOWtaU2hDTG5OMVltRnljbUY1S0dFK1BqNHdMR00rUGo0d0tTazdZejFjSWx3aU8yWnZjaWhrUFRBN0lTaGtQajFpTHpJcE95c3JaQ2w3ZG1GeUlHVTlRMXRoS3pJcVpENCtQakUrUGo0d1hUdHBaaWd3UFQxbEtXSnlaV0ZyTzJNclBWTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9aU2w5Y21WMGRYSnVJR045TEZWaFBTaGhMR0lzWXlrOVBudDJiMmxrSURBOVBUMWpKaVlvWXoweU1UUTNORGd6TmpRM0tUdHBaaWd5UG1NcGNtVjBkWEp1SURBN1l5MDlNanQyWVhJZ1pEMWlPMk05WXp3eUttRXViR1Z1WjNSb1AyTXZNanBoTG14bGJtZDBhRHRtYjNJb2RtRnlJR1U5TUR0bFBHTTdLeXRsS1VOYllqNCtQakUrUGo0d1hUMWhMbU5vWVhKRGIyUmxRWFFvWlNrc1lpczlNanREVzJJK1BqNHhQajQrTUYwOU1EdHlaWFIxY200Z1lpMWtmU3hXWVQxaFBUNHlLbUV1YkdWdVozUm9MRmRoUFNoaExHSXBQVDVjYm50bWIzSW9kbUZ5SUdNOU1DeGtQVndpWENJN0lTaGpQajFpTHpRcE95bDdkbUZ5SUdVOVJWdGhLelFxWXo0K1BqSStQajR3WFR0cFppZ3dQVDFsS1dKeVpXRnJPeXNyWXpzMk5UVXpOanc5WlQ4b1pTMDlOalUxTXpZc1pDczlVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaU2cxTlRJNU5ueGxQajR4TUN3MU5qTXlNSHhsSmpFd01qTXBLVHBrS3oxVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtHVXBmWEpsZEhWeWJpQmtmU3hZWVQwb1lTeGlMR01wUFQ1N1lqNCtQajB3TzNadmFXUWdNRDA5UFdNbUppaGpQVEl4TkRjME9ETTJORGNwTzJsbUtEUStZeWx5WlhSMWNtNGdNRHQyWVhJZ1pEMWlPMk05WkN0akxUUTdabTl5S0haaGNpQmxQVEE3WlR4aExteGxibWQwYURzcksyVXBlM1poY2lCblBXRXVZMmhoY2tOdlpHVkJkQ2hsS1R0cFppZzFOVEk1Tmp3OVp5WW1OVGN6TkRNK1BXY3BlM1poY2lCc1BXRXVZMmhoY2tOdlpHVkJkQ2dySzJVcE8yYzlOalUxTXpZcktDaG5KakV3TWpNcFBEd3hNQ2w4YkNZeE1ESXpmVVZiWWo0K1BqSStQajR3WFQxbk8ySXJQVFE3YVdZb1lpczBQbU1wWW5KbFlXdDlSVnRpUGo0K01qNCtQakJkUFRBN2NtVjBkWEp1SUdJdFpIMHNXV0U5WVQwK2UyWnZjaWgyWVhJZ1lqMHdMR005TUR0alBHRXViR1Z1WjNSb095c3JZeWw3ZG1GeUlHUTlZUzVqYUdGeVEyOWtaVUYwS0dNcE8xeHVOVFV5T1RZOFBXUW1KalUzTXpRelBqMWtKaVlySzJNN1lpczlOSDF5WlhSMWNtNGdZbjBzVmowb1lTeGlLVDArZTNaaGNpQmpQVXBoVzJGZE8ybG1LSFp2YVdRZ01EMDlQV01wZEdoeWIzY2dZVDFhWVNoaEtTeGpQVThvWVNrc1ZTaGhLU3h1WlhjZ1VDaGlLMXdpSUdoaGN5QjFibXR1YjNkdUlIUjVjR1VnWENJcll5azdjbVYwZFhKdUlHTjlMQ1JoUFh0OUxGYzlZVDArZTNaaGNpQmlQU1JoVzJGZE8zSmxkSFZ5YmlCMmIybGtJREE5UFQxaVAwOG9ZU2s2WW4wc1dEMWJYU3hpWWowb0tUMCtYQ0p2WW1wbFkzUmNJajA5ZEhsd1pXOW1JR2RzYjJKaGJGUm9hWE0vWjJ4dlltRnNWR2hwY3pwR2RXNWpkR2x2YmloY0luSmxkSFZ5YmlCMGFHbHpYQ0lwS0Nrc1kySTlZVDArZTNaaGNpQmlQVmd1YkdWdVozUm9PMWd1Y0hWemFDaGhLVHR5WlhSMWNtNGdZbjBzWkdJOUtHRXNZaWs5UG50bWIzSW9kbUZ5SUdNOVFYSnlZWGtvWVNrc1pEMHdPMlE4WVRzcksyUXBZMXRrWFQxV0tFZGJZaXMwS21RK1BqNHlQajQrTUYwc1hDSndZWEpoYldWMFpYSWdYQ0lyWkNrN2NtVjBkWEp1SUdOOUxHVmlQV0U5UG50cFppaDJiMmxrSURBOVBUMWhLWEpsZEhWeWJsd2lYM1Z1YTI1dmQyNWNJanRoUFdFdWNtVndiR0ZqWlNndlcxNWhMWHBCTFZvd0xUbGZYUzluTEZ3aUpGd2lLVHQyWVhJZ1lqMWhMbU5vWVhKRGIyUmxRWFFvTUNrN2NtVjBkWEp1SURRNFBEMWNibUltSmpVM1BqMWlQMkJmSkh0aGZXQTZZWDBzWm1JOWUzMDdablZ1WTNScGIyNGdaMklvWVN4aUtYdGhQV1ZpS0dFcE8zSmxkSFZ5Ym50YllWMDZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdZaTVoY0hCc2VTaDBhR2x6TEdGeVozVnRaVzUwY3lsOWZWdGhYWDFtZFc1amRHbHZiaUJvWWloaEtYdDJZWElnWWoxR2RXNWpkR2x2Ymp0cFppZ2hLR0lnYVc1emRHRnVZMlZ2WmlCR2RXNWpkR2x2YmlrcGRHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGdibVYzWHlCallXeHNaV1FnZDJsMGFDQmpiMjV6ZEhKMVkzUnZjaUIwZVhCbElDUjdkSGx3Wlc5bUlHSjlJSGRvYVdOb0lHbHpJRzV2ZENCaElHWjFibU4wYVc5dVlDazdkbUZ5SUdNOVoySW9ZaTV1WVcxbGZIeGNJblZ1YTI1dmQyNUdkVzVqZEdsdmJrNWhiV1ZjSWl4bWRXNWpkR2x2YmlncGUzMHBPMk11Y0hKdmRHOTBlWEJsUFdJdWNISnZkRzkwZVhCbE8yTTlibVYzSUdNN1lUMWlMbUZ3Y0d4NUtHTXNZU2s3Y21WMGRYSnVJR0VnYVc1emRHRnVZMlZ2WmlCUFltcGxZM1EvWVRwamZWeHVkbUZ5SUdsaVBXRTlQbnRtYjNJb2RtRnlJR0k5WENKY0lpeGpQVEE3WXp4aE95c3JZeWxpS3owb01DRTlQV00vWENJc0lGd2lPbHdpWENJcEsxd2lZWEpuWENJcll6dDJZWElnWkQxY0luSmxkSFZ5YmlCbWRXNWpkR2x2YmlCbGJYWmhiRjloYkd4dlkyRjBiM0pmWENJcllTdGNJaWhqYjI1emRISjFZM1J2Y2l3Z1lYSm5WSGx3WlhNc0lHRnlaM01wSUh0Y1hHNGdJSFpoY2lCSVJVRlFWVE15SUQwZ1oyVjBUV1Z0YjNKNUtDazdYRnh1WENJN1ptOXlLR005TUR0alBHRTdLeXRqS1dRclBWd2lkbUZ5SUdGeVoxUjVjR1ZjSWl0aksxd2lJRDBnY21WeGRXbHlaVkpsWjJsemRHVnlaV1JVZVhCbEtFaEZRVkJWTXpKYktDaGhjbWRVZVhCbGN5aytQajR5S1Ywc0lDZHdZWEpoYldWMFpYSWdYQ0lyWXl0Y0lpY3BPMXhjYm5aaGNpQmhjbWRjSWl0aksxd2lJRDBnWVhKblZIbHdaVndpSzJNclhDSXVjbVZoWkZaaGJIVmxSbkp2YlZCdmFXNTBaWElvWVhKbmN5azdYRnh1WVhKbmN5QXJQU0JoY21kVWVYQmxYQ0lyWXl0Y0lsc25ZWEpuVUdGamEwRmtkbUZ1WTJVblhUdGNYRzVoY21kVWVYQmxjeUFyUFNBME8xeGNibHdpTzNKbGRIVnliaWh1WlhjZ1JuVnVZM1JwYjI0b1hDSnlaWEYxYVhKbFVtVm5hWE4wWlhKbFpGUjVjR1ZjSWl4Y0lrMXZaSFZzWlZ3aUxGd2lkbUZzZFdWVWIwaGhibVJzWlZ3aUxGd2laMlYwVFdWdGIzSjVYQ0lzWkNzb1hDSjJZWElnYjJKcUlEMGdibVYzSUdOdmJuTjBjblZqZEc5eUtGd2lLMXh1WWl0Y0lpazdYRnh1Y21WMGRYSnVJSFpoYkhWbFZHOUlZVzVrYkdVb2IySnFLVHRjWEc1OVhGeHVYQ0lwS1Nrb1ZpeG9MRlFzS0NrOVBrY3BmU3hxWWoxN2ZTeFpQV0U5UGpBOVBUMWhKVFFtSmlnd0lUMDlZU1V4TURCOGZEQTlQVDFoSlRRd01Da3NhMkk5V3pBc016RXNOakFzT1RFc01USXhMREUxTWl3eE9ESXNNakV6TERJME5Dd3lOelFzTXpBMUxETXpOVjBzYkdJOVd6QXNNekVzTlRrc09UQXNNVEl3TERFMU1Td3hPREVzTWpFeUxESTBNeXd5TnpNc016QTBMRE16TkYwc2JtSTlZVDArZTNaaGNpQmlQVTBvWVNrck1TeGpQVzFpS0dJcE8yTW1KazRvWVN4Q0xHTXNZaWs3Y21WMGRYSnVJR045TEc5aVBYdDlMSEZpUFNncFBUNTdhV1lvSVhCaUtYdDJZWElnWVQxN1ZWTkZVanBjSW5kbFlsOTFjMlZ5WENJc1RFOUhUa0ZOUlRwY0luZGxZbDkxYzJWeVhDSXNVRUZVU0RwY0lpOWNJaXhRVjBRNlhDSXZYQ0lzU0U5TlJUcGNJaTlvYjIxbEwzZGxZbDkxYzJWeVhDSXNURUZPUnpvb1hDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlHNWhkbWxuWVhSdmNpWW1ibUYyYVdkaGRHOXlMbXhoYm1kMVlXZGxjeVltYm1GMmFXZGhkRzl5TG14aGJtZDFZV2RsYzFzd1hYeDhYQ0pEWENJcExuSmxjR3hoWTJVb1hDSXRYQ0lzWENKZlhDSXBLMXdpTGxWVVJpMDRYQ0lzWHpwa1lYeDhYQ0l1TDNSb2FYTXVjSEp2WjNKaGJWd2lmU3hpTzJadmNpaGlJR2x1SUc5aUtYWnZhV1FnTUQwOVBWeHViMkpiWWwwL1pHVnNaWFJsSUdGYllsMDZZVnRpWFQxdllsdGlYVHQyWVhJZ1l6MWJYVHRtYjNJb1lpQnBiaUJoS1dNdWNIVnphQ2hnSkh0aWZUMGtlMkZiWWwxOVlDazdjR0k5WTMxeVpYUjFjbTRnY0dKOUxIQmlMSEppUFZ0dWRXeHNMRnRkTEZ0ZFhTeHpZajFiTXpFc01qa3NNekVzTXpBc016RXNNekFzTXpFc016RXNNekFzTXpFc016QXNNekZkTEhSaVBWc3pNU3d5T0N3ek1Td3pNQ3d6TVN3ek1Dd3pNU3d6TVN3ek1Dd3pNU3d6TUN3ek1WMDdablZ1WTNScGIyNGdkV0lvWVNsN2RtRnlJR0k5UVhKeVlYa29UU2hoS1NzeEtUdE9LR0VzWWl3d0xHSXViR1Z1WjNSb0tUdHlaWFIxY200Z1luMWNibVoxYm1OMGFXOXVJSFppS0dFc1lpeGpMR1FwZTJaMWJtTjBhVzl1SUdVb1ppeHlMSFVwZTJadmNpaG1QVndpYm5WdFltVnlYQ0k5UFhSNWNHVnZaaUJtUDJZdWRHOVRkSEpwYm1jb0tUcG1mSHhjSWx3aU8yWXViR1Z1WjNSb1BISTdLV1k5ZFZzd1hTdG1PM0psZEhWeWJpQm1mV1oxYm1OMGFXOXVJR2NvWml4eUtYdHlaWFIxY200Z1pTaG1MSElzWENJd1hDSXBmV1oxYm1OMGFXOXVJR3dvWml4eUtYdG1kVzVqZEdsdmJpQjFLR0ZpS1h0eVpYUjFjbTRnTUQ1aFlqOHRNVG93UEdGaVB6RTZNSDEyWVhJZ1NEc3dQVDA5S0VnOWRTaG1MbWRsZEVaMWJHeFpaV0Z5S0NrdGNpNW5aWFJHZFd4c1dXVmhjaWdwS1NrbUpqQTlQVDBvU0QxMUtHWXVaMlYwVFc5dWRHZ29LUzF5TG1kbGRFMXZiblJvS0NrcEtTWW1LRWc5ZFNobUxtZGxkRVJoZEdVb0tTMXlMbWRsZEVSaGRHVW9LU2twTzNKbGRIVnliaUJJZldaMWJtTjBhVzl1SUdzb1ppbDdjM2RwZEdOb0tHWXVaMlYwUkdGNUtDa3BlMk5oYzJVZ01EcHlaWFIxY200Z2JtVjNJRVJoZEdVb1ppNW5aWFJHZFd4c1dXVmhjaWdwTFRFc01URXNNamtwTzJOaGMyVWdNVHB5WlhSMWNtNGdaanRqWVhObElESTZjbVYwZFhKdUlHNWxkeUJFWVhSbEtHWXVaMlYwUm5Wc2JGbGxZWElvS1N3d0xETXBPMk5oYzJVZ016cHlaWFIxY200Z2JtVjNJRVJoZEdVb1ppNW5aWFJHZFd4c1dXVmhjaWdwTEZ4dU1Dd3lLVHRqWVhObElEUTZjbVYwZFhKdUlHNWxkeUJFWVhSbEtHWXVaMlYwUm5Wc2JGbGxZWElvS1N3d0xERXBPMk5oYzJVZ05UcHlaWFIxY200Z2JtVjNJRVJoZEdVb1ppNW5aWFJHZFd4c1dXVmhjaWdwTFRFc01URXNNekVwTzJOaGMyVWdOanB5WlhSMWNtNGdibVYzSUVSaGRHVW9aaTVuWlhSR2RXeHNXV1ZoY2lncExURXNNVEVzTXpBcGZYMW1kVzVqZEdsdmJpQnVLR1lwZTNaaGNpQnlQV1l1VkdFN1ptOXlLR1k5Ym1WM0lFUmhkR1VvS0c1bGR5QkVZWFJsS0dZdVZXRXJNVGt3TUN3d0xERXBLUzVuWlhSVWFXMWxLQ2twT3pBOGNqc3BlM1poY2lCMVBXWXVaMlYwVFc5dWRHZ29LU3hJUFNoWktHWXVaMlYwUm5Wc2JGbGxZWElvS1NrL2MySTZkR0lwVzNWZE8ybG1LSEkrU0MxbUxtZGxkRVJoZEdVb0tTbHlMVDFJTFdZdVoyVjBSR0YwWlNncEt6RXNaaTV6WlhSRVlYUmxLREVwTERFeFBuVS9aaTV6WlhSTmIyNTBhQ2gxS3pFcE9paG1Mbk5sZEUxdmJuUm9LREFwTEdZdWMyVjBSblZzYkZsbFlYSW9aaTVuWlhSR2RXeHNXV1ZoY2lncEt6RXBLVHRsYkhObGUyWXVjMlYwUkdGMFpTaG1MbWRsZEVSaGRHVW9LU3R5S1R0aWNtVmhhMzE5ZFQxdVpYY2dSR0YwWlNobUxtZGxkRVoxYkd4WlpXRnlLQ2tyTVN3d0xEUXBPM0k5YXlodVpYY2dSR0YwWlNobUxtZGxkRVoxYkd4WlpXRnlLQ2tzWEc0d0xEUXBLVHQxUFdzb2RTazdjbVYwZFhKdUlEQStQV3dvY2l4bUtUOHdQajFzS0hVc1ppay9aaTVuWlhSR2RXeHNXV1ZoY2lncEt6RTZaaTVuWlhSR2RXeHNXV1ZoY2lncE9tWXVaMlYwUm5Wc2JGbGxZWElvS1MweGZXRStQajQ5TUR0aVBqNCtQVEE3WXo0K1BqMHdPMlErUGo0OU1EdDJZWElnY1QxSFcyUXJOREErUGo0eVBqNCtNRjA3WkQxN2EySTZSVnRrUGo0K01qNCtQakJkTEdwaU9rVmJaQ3MwUGo0K01qNCtQakJkTEZoaE9rVmJaQ3M0UGo0K01qNCtQakJkTEdGaU9rVmJaQ3N4TWo0K1BqSStQajR3WFN4WllUcEZXMlFyTVRZK1BqNHlQajQrTUYwc1ZXRTZSVnRrS3pJd1BqNCtNajQrUGpCZExFOWhPa1ZiWkNzeU5ENCtQakkrUGo0d1hTeFVZVHBGVzJRck1qZytQajR5UGo0K01GMHNiV0k2UlZ0a0t6TXlQajQrTWo0K1BqQmRMR2xpT2tWYlpDc3pOajQrUGpJK1BqNHdYU3hzWWpweFAwd29jU2s2WENKY0luMDdZejFNS0dNcE8zRTllMXdpSldOY0lqcGNJaVZoSUNWaUlDVmtJQ1ZJT2lWTk9pVlRJQ1ZaWENJc1hDSWxSRndpT2x3aUpXMHZKV1F2SlhsY0lpeGNJaVZHWENJNlhDSWxXUzBsYlMwbFpGd2lMRndpSldoY0lqcGNJaVZpWENJc1hDSWxjbHdpT2x3aUpVazZKVTA2SlZNZ0pYQmNJaXhjSWlWU1hDSTZYQ0lsU0RvbFRWd2lMRndpSlZSY0lqcGNJaVZJT2lWTk9pVlRYQ0lzWENJbGVGd2lPbHdpSlcwdkpXUXZKWGxjSWl4Y0lpVllYQ0k2WENJbFNEb2xUVG9sVTF3aUxGeHVYQ0lsUldOY0lqcGNJaVZqWENJc1hDSWxSVU5jSWpwY0lpVkRYQ0lzWENJbFJYaGNJanBjSWlWdEx5VmtMeVY1WENJc1hDSWxSVmhjSWpwY0lpVklPaVZOT2lWVFhDSXNYQ0lsUlhsY0lqcGNJaVY1WENJc1hDSWxSVmxjSWpwY0lpVlpYQ0lzWENJbFQyUmNJanBjSWlWa1hDSXNYQ0lsVDJWY0lqcGNJaVZsWENJc1hDSWxUMGhjSWpwY0lpVklYQ0lzWENJbFQwbGNJanBjSWlWSlhDSXNYQ0lsVDIxY0lqcGNJaVZ0WENJc1hDSWxUMDFjSWpwY0lpVk5YQ0lzWENJbFQxTmNJanBjSWlWVFhDSXNYQ0lsVDNWY0lqcGNJaVYxWENJc1hDSWxUMVZjSWpwY0lpVlZYQ0lzWENJbFQxWmNJanBjSWlWV1hDSXNYQ0lsVDNkY0lqcGNJaVYzWENJc1hDSWxUMWRjSWpwY0lpVlhYQ0lzWENJbFQzbGNJanBjSWlWNVhDSjlPMlp2Y2loMllYSWdkaUJwYmlCeEtXTTlZeTV5WlhCc1lXTmxLRzVsZHlCU1pXZEZlSEFvZGl4Y0ltZGNJaWtzY1Z0MlhTazdkbUZ5SUhrOVhDSlRkVzVrWVhrZ1RXOXVaR0Y1SUZSMVpYTmtZWGtnVjJWa2JtVnpaR0Y1SUZSb2RYSnpaR0Y1SUVaeWFXUmhlU0JUWVhSMWNtUmhlVndpTG5Od2JHbDBLRndpSUZ3aUtTeEdQVndpU21GdWRXRnllU0JHWldKeWRXRnllU0JOWVhKamFDQkJjSEpwYkNCTllYa2dTblZ1WlNCS2RXeDVJRUYxWjNWemRDQlRaWEIwWlcxaVpYSWdUMk4wYjJKbGNpQk9iM1psYldKbGNpQkVaV05sYldKbGNsd2lMbk53YkdsMEtGd2lJRndpS1R0eFBYdGNJaVZoWENJNlpqMCtlVnRtTGs5aFhTNXpkV0p6ZEhKcGJtY29NQ3d6S1N4Y0lpVkJYQ0k2WmowK2VWdG1MazloWFN4Y0lpVmlYQ0k2WmowK1hHNUdXMll1V1dGZExuTjFZbk4wY21sdVp5Z3dMRE1wTEZ3aUpVSmNJanBtUFQ1R1cyWXVXV0ZkTEZ3aUpVTmNJanBtUFQ1bktDaG1MbFZoS3pFNU1EQXBMekV3TUh3d0xESXBMRndpSldSY0lqcG1QVDVuS0dZdVlXSXNNaWtzWENJbFpWd2lPbVk5UG1Vb1ppNWhZaXd5TEZ3aUlGd2lLU3hjSWlWblhDSTZaajArYmlobUtTNTBiMU4wY21sdVp5Z3BMbk4xWW5OMGNtbHVaeWd5S1N4Y0lpVkhYQ0k2WmowK2JpaG1LU3hjSWlWSVhDSTZaajArWnlobUxsaGhMRElwTEZ3aUpVbGNJanBtUFQ1N1pqMW1MbGhoT3pBOVBXWS9aajB4TWpveE1qeG1KaVlvWmkwOU1USXBPM0psZEhWeWJpQm5LR1lzTWlsOUxGd2lKV3BjSWpwbVBUNTdabTl5S0haaGNpQnlQVEFzZFQwd08zVThQV1l1V1dFdE1UdHlLejBvV1NobUxsVmhLekU1TURBcFAzTmlPblJpS1Z0MUt5dGRLVHR5WlhSMWNtNGdaeWhtTG1GaUszSXNNeWw5TEZ3aUpXMWNJanBtUFQ1bktHWXVXV0VyTVN3eUtTeGNJaVZOWENJNlpqMCtaeWhtTG1waUxESXBMRndpSlc1Y0lqb29LVDArWENKY1hHNWNJaXhjSWlWd1hDSTZaajArTUR3OVppNVlZU1ltTVRJK1ppNVlZVDljSWtGTlhDSTZYQ0pRVFZ3aUxGd2lKVk5jSWpwbVBUNW5LR1l1YTJJc01pa3NYQ0lsZEZ3aU9pZ3BQVDVjSWx4Y2RGd2lMRndpSlhWY0lqcG1QVDVtTGs5aGZIdzNMRndpSlZWY0lqcG1QVDVuS0UxaGRHZ3VabXh2YjNJb0tHWXVWR0VyTnkxbUxrOWhLUzgzS1N3eUtTeGNJaVZXWENJNlpqMCtYRzU3ZG1GeUlISTlUV0YwYUM1bWJHOXZjaWdvWmk1VVlTczNMU2htTGs5aEt6WXBKVGNwTHpjcE96SStQU2htTGs5aEt6TTNNUzFtTGxSaExUSXBKVGNtSm5Jckt6dHBaaWh5S1RVelBUMXlKaVlvZFQwb1ppNVBZU3N6TnpFdFppNVVZU2tsTnl3MFBUMTFmSHd6UFQxMUppWlpLR1l1VldFcGZId29jajB4S1NrN1pXeHpaWHR5UFRVeU8zWmhjaUIxUFNobUxrOWhLemN0Wmk1VVlTMHhLU1UzT3lnMFBUMTFmSHcxUFQxMUppWlpLR1l1VldFbE5EQXdMVEVwS1NZbWNpc3JmWEpsZEhWeWJpQm5LSElzTWlsOUxGd2lKWGRjSWpwbVBUNW1MazloTEZ3aUpWZGNJanBtUFQ1bktFMWhkR2d1Wm14dmIzSW9LR1l1VkdFck55MG9aaTVQWVNzMktTVTNLUzgzS1N3eUtTeGNJaVY1WENJNlpqMCtLR1l1VldFck1Ua3dNQ2t1ZEc5VGRISnBibWNvS1M1emRXSnpkSEpwYm1jb01pa3NYQ0lsV1Z3aU9tWTlQbVl1VldFck1Ua3dNQ3hjSWlWNlhDSTZaajArZTJZOVppNXBZanQyWVhJZ2NqMHdQRDFtTzJZOVRXRjBhQzVoWW5Nb1ppa3ZOakE3Y21WMGRYSnVLSEkvWENJclhDSTZYQ0l0WENJcEsxTjBjbWx1WnloY0lqQXdNREJjSWlzb1ppODJNQ294TURBclppVTJNQ2twTG5Oc2FXTmxLQzAwS1gwc1hDSWxXbHdpT21ZOVBtWXViR0lzWENJbEpWd2lPaWdwUFQ1Y0lpVmNJbjA3WXoxakxuSmxjR3hoWTJVb0x5VWxMMmNzWENKY1hIZ3dNRnhjZURBd1hDSXBPMlp2Y2loMklHbHVJSEVwWXk1cGJtTnNkV1JsY3loMktTWW1YRzRvWXoxakxuSmxjR3hoWTJVb2JtVjNJRkpsWjBWNGNDaDJMRndpWjF3aUtTeHhXM1pkS0dRcEtTazdZejFqTG5KbGNHeGhZMlVvTDF4Y01GeGNNQzluTEZ3aUpWd2lLVHQyUFhWaUtHTXBPMmxtS0hZdWJHVnVaM1JvUG1JcGNtVjBkWEp1SURBN1FTNXpaWFFvZGl4aFBqNCtNQ2s3Y21WMGRYSnVJSFl1YkdWdVozUm9MVEY5Wm05eUtIWmhjaUIzWWoxQmNuSmhlU2d5TlRZcExIaGlQVEE3TWpVMlBuaGlPeXNyZUdJcGQySmJlR0pkUFZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb2VHSXBPMGhoUFhkaU8xQTlhQzVDYVc1a2FXNW5SWEp5YjNJOVkyeGhjM01nWlhoMFpXNWtjeUJGY25KdmNudGpiMjV6ZEhKMVkzUnZjaWhoS1h0emRYQmxjaWhoS1R0MGFHbHpMbTVoYldVOVhDSkNhVzVrYVc1blJYSnliM0pjSW4xOU8yZ3VTVzUwWlhKdVlXeEZjbkp2Y2oxamJHRnpjeUJsZUhSbGJtUnpJRVZ5Y205eWUyTnZibk4wY25WamRHOXlLR0VwZTNOMWNHVnlLR0VwTzNSb2FYTXVibUZ0WlQxY0lrbHVkR1Z5Ym1Gc1JYSnliM0pjSW4xOU8xeHVUMkpxWldOMExtRnpjMmxuYmloT1lTNXdjbTkwYjNSNWNHVXNlMmRsZENoaEtYdHlaWFIxY200Z2RHaHBjeTVUWVZ0aFhYMHNhR0Z6S0dFcGUzSmxkSFZ5YmlCMmIybGtJREFoUFQxMGFHbHpMbE5oVzJGZGZTeGFZU2hoS1h0MllYSWdZajEwYUdsekxtSmlMbkJ2Y0NncGZIeDBhR2x6TGxOaExteGxibWQwYUR0MGFHbHpMbE5oVzJKZFBXRTdjbVYwZFhKdUlHSjlMQ1JoS0dFcGUzUm9hWE11VTJGYllWMDlkbTlwWkNBd08zUm9hWE11WW1JdWNIVnphQ2hoS1gxOUtUdFNMbE5oTG5CMWMyZ29lM1poYkhWbE9uWnZhV1FnTUgwc2UzWmhiSFZsT201MWJHeDlMSHQyWVd4MVpUb2hNSDBzZTNaaGJIVmxPaUV4ZlNrN1VpNVdZVDFTTGxOaExteGxibWQwYUR0b0xtTnZkVzUwWDJWdGRtRnNYMmhoYm1Sc1pYTTlLQ2s5UG50bWIzSW9kbUZ5SUdFOU1DeGlQVkl1Vm1FN1lqeFNMbE5oTG14bGJtZDBhRHNySzJJcGRtOXBaQ0F3SVQwOVVpNVRZVnRpWFNZbUt5dGhPM0psZEhWeWJpQmhmVHRjYm5aaGNpQjVZajE3WVRwbWRXNWpkR2x2YmloaExHSXNZeWw3WVQ0K1BqMHdPeWh1WlhjZ1FtRW9ZU2twTGxwaEtHSStQajR3TEdNK1BqNHdLVHREWVQxaE8wUmhLeXM3ZEdoeWIzY2dRMkU3ZlN4Mk9tWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlEQjlMR0poT21aMWJtTjBhVzl1S0NsN2ZTeE9PbVoxYm1OMGFXOXVLQ2w3ZlN4UU9tWjFibU4wYVc5dUtDbDdmU3hJT21aMWJtTjBhVzl1S0NsN2NtVjBkWEp1SURCOUxDUTZablZ1WTNScGIyNG9LWHQ5TEZZNlpuVnVZM1JwYjI0b0tYdDlMRjg2Wm5WdVkzUnBiMjRvS1h0OUxFSTZablZ1WTNScGIyNG9LWHQ5TEU4NlpuVnVZM1JwYjI0b0tYdDlMRXc2Wm5WdVkzUnBiMjRvS1h0OUxHRmhPbVoxYm1OMGFXOXVLQ2w3ZlN4Tk9tWjFibU4wYVc5dUtDbDdmU3hGT21aMWJtTjBhVzl1S0dFc1lpeGpMR1FzWlNsN1lqNCtQajB3TzJJOVR5aGlLVHQyWVhJZ1p6MHRNU0U5WWk1cGJtUmxlRTltS0Z3aWRWd2lLVHRuSmlZb1pUMG9NVzQ4UERZMGJpa3RNVzRwTzFFb1lUNCtQakFzZTI1aGJXVTZZaXhtY205dFYybHlaVlI1Y0dVNmJEMCtiQ3gwYjFkcGNtVlVlWEJsT21aMWJtTjBhVzl1S0d3c2F5bDdhV1lvWENKaWFXZHBiblJjSWlFOWRIbHdaVzltSUdzbUpsd2liblZ0WW1WeVhDSWhQWFI1Y0dWdlppQnJLWFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWUVOaGJtNXZkQ0JqYjI1MlpYSjBJRndpSkh0SFlTaHJLWDFjSWlCMGJ5QWtlM1JvYVhNdWJtRnRaWDFnS1R0Y2JtbG1LR3M4Wkh4OGF6NWxLWFJvY205M0lHNWxkeUJVZVhCbFJYSnliM0lvWUZCaGMzTnBibWNnWVNCdWRXMWlaWElnWENJa2UwZGhLR3NwZlZ3aUlHWnliMjBnU2xNZ2MybGtaU0IwYnlCREwwTXJLeUJ6YVdSbElIUnZJR0Z1SUdGeVozVnRaVzUwSUc5bUlIUjVjR1VnWENJa2UySjlYQ0lzSUhkb2FXTm9JR2x6SUc5MWRITnBaR1VnZEdobElIWmhiR2xrSUhKaGJtZGxJRnNrZTJSOUxDQWtlMlY5WFNGZ0tUdHlaWFIxY200Z2EzMHNZWEpuVUdGamEwRmtkbUZ1WTJVNk9DeHlaV0ZrVm1Gc2RXVkdjbTl0VUc5cGJuUmxjanBOWVNoaUxHTStQajR3TENGbktTeFhZVHB1ZFd4c2ZTbDlMR1ZoT21aMWJtTjBhVzl1S0dFc1lpeGpMR1FwZTJJOVR5aGlQajQrTUNrN1VTaGhQajQrTUN4N2JtRnRaVHBpTEdaeWIyMVhhWEpsVkhsd1pUcG1kVzVqZEdsdmJpaGxLWHR5WlhSMWNtNGhJV1Y5TEhSdlYybHlaVlI1Y0dVNlpuVnVZM1JwYjI0b1pTeG5LWHR5WlhSMWNtNGdaejlqT21SOUxHRnlaMUJoWTJ0QlpIWmhibU5sT2pnc2NtVmhaRlpoYkhWbFJuSnZiVkJ2YVc1MFpYSTZablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJSFJvYVhNdVpuSnZiVmRwY21WVWVYQmxLRUpiWlQ0K1BqQmRLWDBzVjJFNmJuVnNiSDBwZlN4a1lUcG1kVzVqZEdsdmJpaGhMR0lwZTJJOVR5aGlQajQrTUNrN1VTaGhQajQrTUN4N2JtRnRaVHBpTEZ4dVpuSnZiVmRwY21WVWVYQmxPbU05UG50MllYSWdaRDFUS0dNcE8wOWhLR01wTzNKbGRIVnliaUJrZlN4MGIxZHBjbVZVZVhCbE9paGpMR1FwUFQ1VUtHUXBMR0Z5WjFCaFkydEJaSFpoYm1ObE9qZ3NjbVZoWkZaaGJIVmxSbkp2YlZCdmFXNTBaWEk2VUdFc1YyRTZiblZzYkgwcGZTeEVPbVoxYm1OMGFXOXVLR0VzWWl4aktYdGlQVThvWWo0K1BqQXBPMUVvWVQ0K1BqQXNlMjVoYldVNllpeG1jbTl0VjJseVpWUjVjR1U2WkQwK1pDeDBiMWRwY21WVWVYQmxPaWhrTEdVcFBUNWxMR0Z5WjFCaFkydEJaSFpoYm1ObE9qZ3NjbVZoWkZaaGJIVmxSbkp2YlZCdmFXNTBaWEk2VVdFb1lpeGpQajQrTUNrc1YyRTZiblZzYkgwcGZTeHdPbVoxYm1OMGFXOXVLR0VzWWl4akxHUXNaU2w3WVQ0K1BqMHdPMk0rUGo0OU1EdGlQVThvWWo0K1BqQXBPeTB4UFQwOVpTWW1LR1U5TkRJNU5EazJOekk1TlNrN1pUMXJQVDVyTzJsbUtEQTlQVDFrS1h0MllYSWdaejB6TWkwNEttTTdaVDFyUFQ1clBEeG5QajQrWjMxMllYSWdiRDFpTG1sdVkyeDFaR1Z6S0Z3aWRXNXphV2R1WldSY0lpay9ablZ1WTNScGIyNG9heXh1S1h0eVpYUjFjbTRnYmo0K1BqQjlPbVoxYm1OMGFXOXVLR3NzYmlsN2NtVjBkWEp1SUc1OU8xRW9ZU3g3Ym1GdFpUcGlMR1p5YjIxWGFYSmxWSGx3WlRwbExIUnZWMmx5WlZSNWNHVTZiQ3hoY21kUVlXTnJRV1IyWVc1alpUbzRMRnh1Y21WaFpGWmhiSFZsUm5KdmJWQnZhVzUwWlhJNlRXRW9ZaXhqTERBaFBUMWtLU3hYWVRwdWRXeHNmU2w5TEd3NlpuVnVZM1JwYjI0b1lTeGlMR01wZTJaMWJtTjBhVzl1SUdRb1p5bDdjbVYwZFhKdUlHNWxkeUJsS0VFdVluVm1abVZ5TEVkYlp5czBQajQrTWo0K1BqQmRMRWRiWno0K1BqSStQajR3WFNsOWRtRnlJR1U5VzBsdWREaEJjbkpoZVN4VmFXNTBPRUZ5Y21GNUxFbHVkREUyUVhKeVlYa3NWV2x1ZERFMlFYSnlZWGtzU1c1ME16SkJjbkpoZVN4VmFXNTBNekpCY25KaGVTeEdiRzloZERNeVFYSnlZWGtzUm14dllYUTJORUZ5Y21GNUxFSnBaMGx1ZERZMFFYSnlZWGtzUW1sblZXbHVkRFkwUVhKeVlYbGRXMkpkTzJNOVR5aGpQajQrTUNrN1VTaGhQajQrTUN4N2JtRnRaVHBqTEdaeWIyMVhhWEpsVkhsd1pUcGtMR0Z5WjFCaFkydEJaSFpoYm1ObE9qZ3NjbVZoWkZaaGJIVmxSbkp2YlZCdmFXNTBaWEk2Wkgwc2UyZGlPaUV3ZlNsOUxFWTZablZ1WTNScGIyNG9ZU3hpS1h0aVBVOG9ZajQrUGpBcE8zWmhjaUJqUFZ3aWMzUmtPanB6ZEhKcGJtZGNJajA5UFdJN1VTaGhQajQrTUN4N2JtRnRaVHBpTEdaeWIyMVhhWEpsVkhsd1pUcG1kVzVqZEdsdmJpaGtLWHQyWVhJZ1pUMUhXMlErUGo0eVBqNCtNRjBzWnoxa0t6UTdhV1lvWXlsbWIzSW9kbUZ5SUd3OVp5eHJQVEE3YXp3OVpUc3JLMnNwZTNaaGNpQnVQVnh1Wnl0ck8ybG1LR3M5UFdWOGZEQTlQVUpiYmo0K1BqQmRLWHRzUFV3b2JDeHVMV3dwTzJsbUtIWnZhV1FnTUQwOVBYRXBkbUZ5SUhFOWJEdGxiSE5sSUhFclBWTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9NQ2tzY1NzOWJEdHNQVzRyTVgxOVpXeHpaWHR4UFVGeWNtRjVLR1VwTzJadmNpaHJQVEE3YXp4bE95c3JheWx4VzJ0ZFBWTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9RbHRuSzJzK1BqNHdYU2s3Y1QxeExtcHZhVzRvWENKY0lpbDlWU2hrS1R0eVpYUjFjbTRnY1gwc2RHOVhhWEpsVkhsd1pUcG1kVzVqZEdsdmJpaGtMR1VwZTJVZ2FXNXpkR0Z1WTJWdlppQkJjbkpoZVVKMVptWmxjaVltS0dVOWJtVjNJRlZwYm5RNFFYSnlZWGtvWlNrcE8zWmhjaUJuUFZ3aWMzUnlhVzVuWENJOVBYUjVjR1Z2WmlCbE8ybG1LQ0VvWjN4OFpTQnBibk4wWVc1alpXOW1JRlZwYm5RNFFYSnlZWGw4ZkdVZ2FXNXpkR0Z1WTJWdlppQlZhVzUwT0VOc1lXMXdaV1JCY25KaGVYeDhaU0JwYm5OMFlXNWpaVzltSUVsdWREaEJjbkpoZVNrcGRHaHliM2NnYm1WM0lGQW9YQ0pEWVc1dWIzUWdjR0Z6Y3lCdWIyNHRjM1J5YVc1bklIUnZJSE4wWkRvNmMzUnlhVzVuWENJcE8zWmhjaUJzUFdNbUptYy9UU2hsS1RwbExteGxibWQwYUR0MllYSWdhejF0WWlnMEsyd3JNU2tzYmoxckt6UTdSMXRyUGo0K01qNCtQakJkUFd3N1hHNXBaaWhqSmlabktVNG9aU3hDTEc0c2JDc3hLVHRsYkhObElHbG1LR2NwWm05eUtHYzlNRHRuUEd3N0t5dG5LWHQyWVhJZ2NUMWxMbU5vWVhKRGIyUmxRWFFvWnlrN2FXWW9NalUxUEhFcGRHaHliM2NnVlNodUtTeHVaWGNnVUNoY0lsTjBjbWx1WnlCb1lYTWdWVlJHTFRFMklHTnZaR1VnZFc1cGRITWdkR2hoZENCa2J5QnViM1FnWm1sMElHbHVJRGdnWW1sMGMxd2lLVHRDVzI0clp6NCtQakJkUFhGOVpXeHpaU0JtYjNJb1p6MHdPMmM4YkRzcksyY3BRbHR1SzJjK1BqNHdYVDFsVzJkZE8yNTFiR3doUFQxa0ppWmtMbkIxYzJnb1ZTeHJLVHR5WlhSMWNtNGdhMzBzWVhKblVHRmphMEZrZG1GdVkyVTZPQ3h5WldGa1ZtRnNkV1ZHY205dFVHOXBiblJsY2pwU1lTeFhZU2hrS1h0VktHUXBmWDBwZlN4NE9tWjFibU4wYVc5dUtHRXNZaXhqS1h0aVBqNCtQVEE3WXo0K1BqMHdPMk05VHloaktUdHBaaWd5UFQwOVlpbDdkbUZ5SUdROVZHRTdkbUZ5SUdVOVZXRTdkbUZ5SUdjOVZtRTdkbUZ5SUd3OUtDazlQa1E3ZG1GeUlHczlNWDFsYkhObElEUTlQVDFpSmlZb1pEMVhZU3hsUFZoaExHYzlXV0VzYkQwb0tUMCtSeXhyUFRJcE8xRW9ZVDQrUGpBc2UyNWhiV1U2WXl4bWNtOXRWMmx5WlZSNWNHVTZiajArZTJadmNpaDJZWElnY1QxSFcyNCtQajR5UGo0K01GMHNkajFzS0Nrc2VTeEdQVzRyTkN4bVBWeHVNRHRtUEQxeE95c3JaaWw3ZG1GeUlISTliaXMwSzJZcVlqdHBaaWhtUFQxeGZId3dQVDEyVzNJK1BqNXJYU2xHUFdRb1JpeHlMVVlwTEhadmFXUWdNRDA5UFhrL2VUMUdPaWg1S3oxVGRISnBibWN1Wm5KdmJVTm9ZWEpEYjJSbEtEQXBMSGtyUFVZcExFWTljaXRpZlZVb2JpazdjbVYwZFhKdUlIbDlMSFJ2VjJseVpWUjVjR1U2S0c0c2NTazlQbnRwWmloY0luTjBjbWx1WjF3aUlUMTBlWEJsYjJZZ2NTbDBhSEp2ZHlCdVpYY2dVQ2hnUTJGdWJtOTBJSEJoYzNNZ2JtOXVMWE4wY21sdVp5QjBieUJES3lzZ2MzUnlhVzVuSUhSNWNHVWdKSHRqZldBcE8zWmhjaUIyUFdjb2NTa3NlVDF0WWlnMEszWXJZaWs3UjF0NVBqNCtNbDA5ZGo0K2F6dGxLSEVzZVNzMExIWXJZaWs3Ym5Wc2JDRTlQVzRtSm00dWNIVnphQ2hWTEhrcE8zSmxkSFZ5YmlCNWZTeGhjbWRRWVdOclFXUjJZVzVqWlRvNExISmxZV1JXWVd4MVpVWnliMjFRYjJsdWRHVnlPbEJoTEZkaEtHNHBlMVVvYmlsOWZTbDlMR1poT21aMWJtTjBhVzl1S0dFc1lpbDdZajFQS0dJK1BqNHdLVHRSS0dFK1BqNHdMSHRvWWpvaE1DeHVZVzFsT21Jc1lYSm5VR0ZqYTBGa2RtRnVZMlU2TUN4bWNtOXRWMmx5WlZSNWNHVTZLQ2s5UG50OUxIUnZWMmx5WlZSNWNHVTZLQ2s5UG50OWZTbDlMR05oT2lncFBUNGhNQ3h2T21aMWJtTjBhVzl1S0dFc1lpeGNibU1wZTJJK1BqNDlNRHRqUGo0K1BUQTdZVDFUS0dFK1BqNHdLVHRpUFZZb1lpeGNJbVZ0ZG1Gc09qcGhjMXdpS1R0MllYSWdaRDFiWFN4bFBWUW9aQ2s3UjF0alBqNCtNajQrUGpCZFBXVTdjbVYwZFhKdUlHSXVkRzlYYVhKbFZIbHdaU2hrTEdFcGZTeG9PbVoxYm1OMGFXOXVLR0VzWWl4akxHUXNaU2w3WXo0K1BqMHdPMlErUGo0OU1EdGxQajQrUFRBN1lUMVlXMkUrUGo0d1hUdGlQVk1vWWo0K1BqQXBPMk05VnloaktUdDJZWElnWnoxYlhUdEhXMlErUGo0eVBqNCtNRjA5VkNobktUdHlaWFIxY200Z1lTaGlMR01zWnl4bEtYMHNjanBtZFc1amRHbHZiaWhoTEdJc1l5eGtLWHRqUGo0K1BUQTdaRDQrUGowd08yRTlXRnRoUGo0K01GMDdZajFUS0dJK1BqNHdLVHRqUFZjb1l5azdZU2hpTEdNc2JuVnNiQ3hrS1gwc1lqcFBZU3g1T21aMWJtTjBhVzl1S0dFc1lpbDdZajQrUGowd08yRTlVeWhoUGo0K01DazdZajFUS0dJcE8zSmxkSFZ5YmlCaFBUMWlmU3gxT21aMWJtTjBhVzl1S0dFcGUyRStQajQ5TUR0cFppZ3dQVDA5WVNseVpYUjFjbTRnVkNoaVlpZ3BLVHRoUFZjb1lTazdjbVYwZFhKdUlGUW9ZbUlvS1Z0aFhTbDlMR2M2Wm5WdVkzUnBiMjRvWVN4aUtYdDJZWElnWXoxa1lpaGhMR0krUGo0d0tTeGtQV05iTUYwN1lqMWtMbTVoYldVclhDSmZKRndpSzJNdWMyeHBZMlVvTVNrdWJXRndLR1oxYm1OMGFXOXVLSFlwZTNKbGRIVnliaUIyTG01aGJXVjlLUzVxYjJsdUtGd2lYMXdpS1N0Y2Jsd2lKRndpTzNaaGNpQmxQV1ppVzJKZE8ybG1LSFp2YVdRZ01DRTlQV1VwY21WMGRYSnVJR1U3WlQxYlhDSnlaWFJVZVhCbFhDSmRPMlp2Y2loMllYSWdaejFiWkYwc2JEMWNJbHdpTEdzOU1EdHJQR0V0TVRzcksyc3BiQ3M5S0RBaFBUMXJQMXdpTENCY0lqcGNJbHdpS1N0Y0ltRnlaMXdpSzJzc1pTNXdkWE5vS0Z3aVlYSm5WSGx3WlZ3aUsyc3BMR2N1Y0hWemFDaGpXekVyYTEwcE8zWmhjaUJ1UFZ3aWNtVjBkWEp1SUdaMWJtTjBhVzl1SUZ3aUsyVmlLRndpYldWMGFHOWtRMkZzYkdWeVgxd2lLMklwSzF3aUtHaGhibVJzWlN3Z2JtRnRaU3dnWkdWemRISjFZM1J2Y25Nc0lHRnlaM01wSUh0Y1hHNWNJaXh4UFRBN1ptOXlLR3M5TUR0clBHRXRNVHNySzJzcGJpczlYQ0lnSUNBZ2RtRnlJR0Z5WjF3aUsyc3JYQ0lnUFNCaGNtZFVlWEJsWENJcmF5dGNJaTV5WldGa1ZtRnNkV1ZHY205dFVHOXBiblJsY2loaGNtZHpYQ0lyS0hFL1hDSXJYQ0lyY1RwY0lsd2lLU3RjSWlrN1hGeHVYQ0lzY1NzOVkxdHJLekZkTG1GeVoxQmhZMnRCWkhaaGJtTmxPMjRyUFZ3aUlDQWdJSFpoY2lCeWRpQTlJR2hoYm1Sc1pWdHVZVzFsWFNoY0lpdHNLMXdpS1R0Y1hHNWNJanRtYjNJb2F6MHdPMnM4WVMweE95c3JheWxqVzJzck1WMHVaR1ZzWlhSbFQySnFaV04wSmlZb2JpczlYQ0lnSUNBZ1lYSm5WSGx3WlZ3aUsyc3JYQ0l1WkdWc1pYUmxUMkpxWldOMEtHRnlaMXdpSzJzclhDSXBPMXhjYmx3aUtUdGtMbWhpZkh4Y2JpaHVLejFjSWlBZ0lDQnlaWFIxY200Z2NtVjBWSGx3WlM1MGIxZHBjbVZVZVhCbEtHUmxjM1J5ZFdOMGIzSnpMQ0J5ZGlrN1hGeHVYQ0lwTzJVdWNIVnphQ2h1SzF3aWZUdGNYRzVjSWlrN1lUMW9ZaWhsS1M1aGNIQnNlU2h1ZFd4c0xHY3BPMlU5WTJJb1lTazdjbVYwZFhKdUlHWmlXMkpkUFdWOUxIRTZablZ1WTNScGIyNG9ZU3hpS1h0aVBqNCtQVEE3WVQxVEtHRStQajR3S1R0aVBWTW9ZaWs3Y21WMGRYSnVJRlFvWVZ0aVhTbDlMR002Wm5WdVkzUnBiMjRvWVNsN1lUNCtQajB3T3pROFlTWW1LRkl1WjJWMEtHRXBMbU5pS3oweEtYMHNSenBtZFc1amRHbHZiaWhoTEdJc1l5eGtLWHRqUGo0K1BUQTdaRDQrUGowd08yRTlVeWhoUGo0K01DazdkbUZ5SUdVOWFtSmJZbDA3Wlh4OEtHVTlhV0lvWWlrc2FtSmJZbDA5WlNrN2NtVjBkWEp1SUdVb1lTeGpMR1FwZlN4ek9tWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlGUW9XMTBwZlN4ck9tWjFibU4wYVc5dUtHRXBlMkU5VXloaFBqNCtNQ2s3Wm05eUtIWmhjaUJpUFVGeWNtRjVLR0V1YkdWdVozUm9LU3hqUFRBN1l6eGhMbXhsYm1kMGFEdGpLeXNwWWx0alhUMWhXMk5kTzNKbGRIVnliaUJVS0dJcGZTeGtPbVoxYm1OMGFXOXVLR0VwZTNKbGRIVnliaUJVS0Zjb1lUNCtQakFwS1gwc2FqcG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQlVLSHQ5S1gwc1pUcG1kVzVqZEdsdmJpaGhLWHRoUGo0K1BWeHVNRHRtYjNJb2RtRnlJR0k5VXloaEtUdGlMbXhsYm1kMGFEc3BlM1poY2lCalBXSXVjRzl3S0NrN1lpNXdiM0FvS1NoaktYMVBZU2hoS1gwc2FUcG1kVzVqZEdsdmJpaGhMR0lzWXlsN1lqNCtQajB3TzJNK1BqNDlNRHRoUFZNb1lUNCtQakFwTzJJOVV5aGlLVHRqUFZNb1l5azdZVnRpWFQxamZTeG1PbVoxYm1OMGFXOXVLR0VzWWlsN1lqNCtQajB3TzJFOVZpaGhQajQrTUN4Y0lsOWxiWFpoYkY5MFlXdGxYM1poYkhWbFhDSXBPMkU5WVM1eVpXRmtWbUZzZFdWR2NtOXRVRzlwYm5SbGNpaGlLVHR5WlhSMWNtNGdWQ2hoS1gwc1V6cG1kVzVqZEdsdmJpaGhMR0lwZTJFOUxUa3dNRGN4T1RreU5UUTNOREE1T1RJK1lYeDhPVEF3TnpFNU9USTFORGMwTURrNU1qeGhQMDVoVGpwT2RXMWlaWElvWVNrN1lqNCtQajB3TzJFOWJtVjNJRVJoZEdVb01VVXpLbUVwTzBWYllqNCtQakkrUGo0d1hUMWhMbWRsZEZWVVExTmxZMjl1WkhNb0tUdEZXMklyTkQ0K1BqSStQajR3WFQxaExtZGxkRlZVUTAxcGJuVjBaWE1vS1R0RlcySXJPRDQrUGpJK1BqNHdYVDFoTG1kbGRGVlVRMGh2ZFhKektDazdSVnRpS3pFeVBqNCtNajQrUGpCZFBXRXVaMlYwVlZSRFJHRjBaU2dwTzBWYllpc3hOajQrUGpJK1BqNHdYVDFoTG1kbGRGVlVRMDF2Ym5Sb0tDazdSVnRpS3pJd1BqNCtNajQrUGpCZFBXRXVaMlYwVlZSRFJuVnNiRmxsWVhJb0tTMWNiakU1TURBN1JWdGlLekkwUGo0K01qNCtQakJkUFdFdVoyVjBWVlJEUkdGNUtDazdSVnRpS3pJNFBqNCtNajQrUGpCZFBTaGhMbWRsZEZScGJXVW9LUzFFWVhSbExsVlVReWhoTG1kbGRGVlVRMFoxYkd4WlpXRnlLQ2tzTUN3eExEQXNNQ3d3TERBcEtTODROalJGTlh3d2ZTeFVPbVoxYm1OMGFXOXVLR0VzWWlsN1lUMHRPVEF3TnpFNU9USTFORGMwTURrNU1qNWhmSHc1TURBM01UazVNalUwTnpRd09Ua3lQR0UvVG1GT09rNTFiV0psY2loaEtUdGlQajQrUFRBN1lUMXVaWGNnUkdGMFpTZ3hSVE1xWVNrN1JWdGlQajQrTWo0K1BqQmRQV0V1WjJWMFUyVmpiMjVrY3lncE8wVmJZaXMwUGo0K01qNCtQakJkUFdFdVoyVjBUV2x1ZFhSbGN5Z3BPMFZiWWlzNFBqNCtNajQrUGpCZFBXRXVaMlYwU0c5MWNuTW9LVHRGVzJJck1USStQajR5UGo0K01GMDlZUzVuWlhSRVlYUmxLQ2s3UlZ0aUt6RTJQajQrTWo0K1BqQmRQV0V1WjJWMFRXOXVkR2dvS1R0RlcySXJNakErUGo0eVBqNCtNRjA5WVM1blpYUkdkV3hzV1dWaGNpZ3BMVEU1TURBN1JWdGlLekkwUGo0K01qNCtQakJkUFdFdVoyVjBSR0Y1S0NrN1JWdGlLekk0UGo0K01qNCtQakJkUFNoWktHRXVaMlYwUm5Wc2JGbGxZWElvS1NrL2EySTZiR0lwVzJFdVoyVjBUVzl1ZEdnb0tWMHJZUzVuWlhSRVlYUmxLQ2t0TVh3d08wVmJZaXN6Tmo0K1BseHVNajQrUGpCZFBTMG9OakFxWVM1blpYUlVhVzFsZW05dVpVOW1abk5sZENncEtUdDJZWElnWXowb2JtVjNJRVJoZEdVb1lTNW5aWFJHZFd4c1dXVmhjaWdwTERZc01Ta3BMbWRsZEZScGJXVjZiMjVsVDJabWMyVjBLQ2tzWkQwb2JtVjNJRVJoZEdVb1lTNW5aWFJHZFd4c1dXVmhjaWdwTERBc01Ta3BMbWRsZEZScGJXVjZiMjVsVDJabWMyVjBLQ2s3UlZ0aUt6TXlQajQrTWo0K1BqQmRQU2hqSVQxa0ppWmhMbWRsZEZScGJXVjZiMjVsVDJabWMyVjBLQ2s5UFUxaGRHZ3ViV2x1S0dRc1l5a3BmREI5TEZVNlpuVnVZM1JwYjI0b1lTbDdZVDQrUGowd08zWmhjaUJpUFc1bGR5QkVZWFJsS0VWYllTc3lNRDQrUGpJK1BqNHdYU3N4T1RBd0xFVmJZU3N4Tmo0K1BqSStQajR3WFN4RlcyRXJNVEkrUGo0eVBqNCtNRjBzUlZ0aEt6ZytQajR5UGo0K01GMHNSVnRoS3pRK1BqNHlQajQrTUYwc1JWdGhQajQrTWo0K1BqQmRMREFwTEdNOVJWdGhLek15UGo0K01qNCtQakJkTEdROVlpNW5aWFJVYVcxbGVtOXVaVTltWm5ObGRDZ3BMR1U5S0c1bGR5QkVZWFJsS0dJdVoyVjBSblZzYkZsbFlYSW9LU3cyTERFcEtTNW5aWFJVYVcxbGVtOXVaVTltWm5ObGRDZ3BMR2M5S0c1bGR5QkVZWFJsS0dJdVoyVjBSblZzYkZsbFlYSW9LU3d3TERFcEtTNW5aWFJVYVcxbGVtOXVaVTltWm5ObGRDZ3BMR3c5VFdGMGFDNXRhVzRvWnl4Y2JtVXBPekErWXo5RlcyRXJNekkrUGo0eVBqNCtNRjA5VG5WdFltVnlLR1VoUFdjbUptdzlQV1FwT2pBOFl5RTlLR3c5UFdRcEppWW9aVDFOWVhSb0xtMWhlQ2huTEdVcExHSXVjMlYwVkdsdFpTaGlMbWRsZEZScGJXVW9LU3MyUlRRcUtDZ3dQR00vYkRwbEtTMWtLU2twTzBWYllTc3lORDQrUGpJK1BqNHdYVDFpTG1kbGRFUmhlU2dwTzBWYllTc3lPRDQrUGpJK1BqNHdYVDBvV1NoaUxtZGxkRVoxYkd4WlpXRnlLQ2twUDJ0aU9teGlLVnRpTG1kbGRFMXZiblJvS0NsZEsySXVaMlYwUkdGMFpTZ3BMVEY4TUR0RlcyRStQajR5UGo0K01GMDlZaTVuWlhSVFpXTnZibVJ6S0NrN1JWdGhLelErUGo0eVBqNCtNRjA5WWk1blpYUk5hVzUxZEdWektDazdSVnRoS3pnK1BqNHlQajQrTUYwOVlpNW5aWFJJYjNWeWN5Z3BPMFZiWVNzeE1qNCtQakkrUGo0d1hUMWlMbWRsZEVSaGRHVW9LVHRGVzJFck1UWStQajR5UGo0K01GMDlZaTVuWlhSTmIyNTBhQ2dwTzBWYllTc3lNRDQrUGpJK1BqNHdYVDFpTG1kbGRGbGxZWElvS1R0eVpYUjFjbTRnUW1sblNXNTBLR0l1WjJWMFZHbHRaU2dwTHpGRk15bDlMRkU2Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTR0TlRKOUxGSTZablZ1WTNScGIyNG9LWHQ5TEVvNlpuVnVZM1JwYjI0b1lTeGlMR01wZTJaMWJtTjBhVzl1SUdRb2JpbDdjbVYwZFhKdUtHNDliaTUwYjFScGJXVlRkSEpwYm1jb0tTNXRZWFJqYUNndlhGd29LRnRCTFZwaExYb2dYU3NwWEZ3cEpDOHBLVDljYm01Yk1WMDZYQ0pIVFZSY0luMWpQajQrUFRBN2RtRnlJR1U5S0c1bGR5QkVZWFJsS1M1blpYUkdkV3hzV1dWaGNpZ3BMR2M5Ym1WM0lFUmhkR1VvWlN3d0xERXBMR3c5Ym1WM0lFUmhkR1VvWlN3MkxERXBPMlU5Wnk1blpYUlVhVzFsZW05dVpVOW1abk5sZENncE8zWmhjaUJyUFd3dVoyVjBWR2x0WlhwdmJtVlBabVp6WlhRb0tUdEhXMkUrUGo0d1BqNCtNajQrUGpCZFBUWXdLazFoZEdndWJXRjRLR1VzYXlrN1JWdGlQajQrTUQ0K1BqSStQajR3WFQxT2RXMWlaWElvWlNFOWF5azdZVDFrS0djcE8ySTlaQ2hzS1R0aFBXNWlLR0VwTzJJOWJtSW9ZaWs3YXp4bFB5aEhXMk0rUGo0eVBqNCtNRjA5WVN4SFcyTXJORDQrUGpJK1BqNHdYVDFpS1Rvb1IxdGpQajQrTWo0K1BqQmRQV0lzUjF0akt6UStQajR5UGo0K01GMDlZU2w5TEhRNktDazlQbnRyWVNoY0lsd2lLWDBzUXpvb0tUMCtSR0YwWlM1dWIzY29LU3hMT21aMWJtTjBhVzl1S0NsN2NtVjBkWEp1SURReU9UUTVNREUzTmpCOUxHNDZLQ2s5UG5CbGNtWnZjbTFoYm1ObExtNXZkeWdwTEZvNlpuVnVZM1JwYjI0b1lTeGlMR01wZTJJK1BqNDlNRHR5WlhSMWNtNGdRaTVqYjNCNVYybDBhR2x1S0dFK1BqNHdQajQrTUN4aVBqNCtNQ3hpS3loalBqNCtNQ2srUGo0d0tYMHNTVHBtZFc1amRHbHZiaWhoS1h0aFBqNCtQVEE3ZG1GeUlHSTlRaTVzWlc1bmRHZzdYRzVwWmlnME1qazBPVEF4TnpZd1BHRXBjbVYwZFhKdUlURTdabTl5S0haaGNpQmpQVEU3TkQ0OVl6dGpLajB5S1h0MllYSWdaRDFpS2lneEt5NHlMMk1wTzJROVRXRjBhQzV0YVc0b1pDeGhLekV3TURZMk16STVOaWs3ZG1GeUlHVTlUV0YwYUR0a1BVMWhkR2d1YldGNEtHRXNaQ2s3WVRwN1pUMG9aUzV0YVc0dVkyRnNiQ2hsTERReU9UUTVNREUzTmpBc1pDc29OalUxTXpZdFpDVTJOVFV6TmlrbE5qVTFNellwTFhvdVluVm1abVZ5TG1KNWRHVk1aVzVuZEdnck5qVTFNelVwTHpZMU5UTTJPM1J5ZVh0NkxtZHliM2NvWlNrN2NXRW9LVHQyWVhJZ1p6MHhPMkp5WldGcklHRjlZMkYwWTJnb2JDbDdmV2M5ZG05cFpDQXdmV2xtS0djcGNtVjBkWEp1SVRCOWNtVjBkWEp1SVRGOUxGZzZablZ1WTNScGIyNG9ZU3hpS1h0aFBqNCtQVEE3WWo0K1BqMHdPM1poY2lCalBUQTdjV0lvS1M1bWIzSkZZV05vS0Noa0xHVXBQVDU3ZG1GeUlHYzlZaXRqTzJVOVIxdGhLelFxWlQ0K1BqSStQajR3WFQxbk8yWnZjaWhuUFRBN1p6eGtMbXhsYm1kMGFEc3JLMmNwUVZ0bEt5cytQajR3UGo0K01GMDlaQzVqYUdGeVEyOWtaVUYwS0djcE8wRmJaVDQrUGpBK1BqNHdYVDB3TzJNclBXUXViR1Z1WjNSb0t6RjlLVHR5WlhSMWNtNGdNSDBzV1RwbWRXNWpkR2x2YmloaExHSXBlMkUrUGo0OU1EdGlQajQrUFRBN2RtRnlJR005WEc1eFlpZ3BPMGRiWVQ0K1BqSStQajR3WFQxakxteGxibWQwYUR0MllYSWdaRDB3TzJNdVptOXlSV0ZqYUNobFBUNWtLejFsTG14bGJtZDBhQ3N4S1R0SFcySStQajR5UGo0K01GMDlaRHR5WlhSMWNtNGdNSDBzZHpvb0tUMCtOVElzUVRwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlBMU1uMHNWenBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUEzTUgwc2VqcG1kVzVqZEdsdmJpaGhMR0lzWXl4a0tYdGlQajQrUFRBN1l6NCtQajB3TzJRK1BqNDlNRHRtYjNJb2RtRnlJR1U5TUN4blBUQTdaenhqTzJjckt5bDdkbUZ5SUd3OVIxdGlQajQrTWo0K1BqQmRMR3M5UjF0aUt6UStQajR5UGo0K01GMDdZaXM5T0R0bWIzSW9kbUZ5SUc0OU1EdHVQR3M3YmlzcktYdDJZWElnY1QxQ1cyd3JiajQrUGpCZExIWTljbUpiWVYwN01EMDlQWEY4ZkRFd1BUMDljVDhvS0RFOVBUMWhQMnBoT25ncEtFWmhLSFlzTUNrcExIWXViR1Z1WjNSb1BUQXBPbll1Y0hWemFDaHhLWDFsS3oxcmZVZGJaRDQrUGpJK1BqNHdYVDFsTzNKbGRIVnliaUF3ZlN4bllUcDJZaXh0T21aMWJtTjBhVzl1S0dFc1lpeGpMR1FwZTNKbGRIVnliaUIyWWloaFBqNCtNQ3hpUGo0K01DeGpQajQrTUN4a1BqNCtNQ2w5ZlN4YVBXWjFibU4wYVc5dUtDbDdkbUZ5SUdFOWUyRTZlV0o5TzBrckt6dEJZU2hoTEdaMWJtTjBhVzl1S0dJcGUxbzlZaTVwYm5OMFlXNWpaUzVsZUhCdmNuUnpPMXh1V2oxNllpZ3BPM285V2k1b1lUdHhZU2dwTzNOaExuVnVjMmhwWm5Rb1dpNXBZU2s3U1MwdE96QTlQVWttSmlodWRXeHNJVDA5ZFdFbUppaGpiR1ZoY2tsdWRHVnlkbUZzS0hWaEtTeDFZVDF1ZFd4c0tTeEtKaVlvWWoxS0xFbzliblZzYkN4aUtDa3BLWDBwTG1OaGRHTm9LR0poS1R0eVpYUjFjbTU3Zlgwb0tUdG9MbDlQY25SSmJtbDBQU2hoTEdJcFBUNG9hQzVmVDNKMFNXNXBkRDFhTG1waEtTaGhMR0lwTzJndVgwOXlkRWRsZEV4aGMzUkZjbkp2Y2owb1lTeGlLVDArS0dndVgwOXlkRWRsZEV4aGMzUkZjbkp2Y2oxYUxtdGhLU2hoTEdJcE8yZ3VYMDl5ZEVOeVpXRjBaVk5sYzNOcGIyNVBjSFJwYjI1elBTaGhMR0lzWXl4a0xHVXNaeXhzTEdzc2JpeHhLVDArS0dndVgwOXlkRU55WldGMFpWTmxjM05wYjI1UGNIUnBiMjV6UFZvdWJHRXBLR0VzWWl4akxHUXNaU3huTEd3c2F5eHVMSEVwTzJndVgwOXlkRUZ3Y0dWdVpFVjRaV04xZEdsdmJsQnliM1pwWkdWeVBTaGhMR0lwUFQ0b2FDNWZUM0owUVhCd1pXNWtSWGhsWTNWMGFXOXVVSEp2ZG1sa1pYSTlXaTV0WVNrb1lTeGlLVHRvTGw5UGNuUkJaR1JHY21WbFJHbHRaVzV6YVc5dVQzWmxjbkpwWkdVOUtHRXNZaXhqS1QwK0tHZ3VYMDl5ZEVGa1pFWnlaV1ZFYVcxbGJuTnBiMjVQZG1WeWNtbGtaVDFhTG01aEtTaGhMR0lzWXlrN1hHNW9MbDlQY25SQlpHUlRaWE56YVc5dVEyOXVabWxuUlc1MGNuazlLR0VzWWl4aktUMCtLR2d1WDA5eWRFRmtaRk5sYzNOcGIyNURiMjVtYVdkRmJuUnllVDFhTG05aEtTaGhMR0lzWXlrN2FDNWZUM0owVW1Wc1pXRnpaVk5sYzNOcGIyNVBjSFJwYjI1elBXRTlQaWhvTGw5UGNuUlNaV3hsWVhObFUyVnpjMmx2Yms5d2RHbHZibk05V2k1d1lTa29ZU2s3YUM1ZlQzSjBRM0psWVhSbFUyVnpjMmx2Ymowb1lTeGlMR01wUFQ0b2FDNWZUM0owUTNKbFlYUmxVMlZ6YzJsdmJqMWFMbkZoS1NoaExHSXNZeWs3YUM1ZlQzSjBVbVZzWldGelpWTmxjM05wYjI0OVlUMCtLR2d1WDA5eWRGSmxiR1ZoYzJWVFpYTnphVzl1UFZvdWNtRXBLR0VwTzJndVgwOXlkRWRsZEVsdWNIVjBUM1YwY0hWMFEyOTFiblE5S0dFc1lpeGpLVDArS0dndVgwOXlkRWRsZEVsdWNIVjBUM1YwY0hWMFEyOTFiblE5V2k1ellTa29ZU3hpTEdNcE8yZ3VYMDl5ZEVkbGRFbHVjSFYwVG1GdFpUMG9ZU3hpS1QwK0tHZ3VYMDl5ZEVkbGRFbHVjSFYwVG1GdFpUMWFMblJoS1NoaExHSXBPMmd1WDA5eWRFZGxkRTkxZEhCMWRFNWhiV1U5S0dFc1lpazlQaWhvTGw5UGNuUkhaWFJQZFhSd2RYUk9ZVzFsUFZvdWRXRXBLR0VzWWlrN2FDNWZUM0owUm5KbFpUMWhQVDRvYUM1ZlQzSjBSbkpsWlQxYUxuWmhLU2hoS1R0Y2JtZ3VYMDl5ZEVOeVpXRjBaVlJsYm5OdmNqMG9ZU3hpTEdNc1pDeGxMR2NwUFQ0b2FDNWZUM0owUTNKbFlYUmxWR1Z1YzI5eVBWb3VkMkVwS0dFc1lpeGpMR1FzWlN4bktUdG9MbDlQY25SSFpYUlVaVzV6YjNKRVlYUmhQU2hoTEdJc1l5eGtMR1VwUFQ0b2FDNWZUM0owUjJWMFZHVnVjMjl5UkdGMFlUMWFMbmhoS1NoaExHSXNZeXhrTEdVcE8yZ3VYMDl5ZEZKbGJHVmhjMlZVWlc1emIzSTlZVDArS0dndVgwOXlkRkpsYkdWaGMyVlVaVzV6YjNJOVdpNTVZU2tvWVNrN2FDNWZUM0owUTNKbFlYUmxVblZ1VDNCMGFXOXVjejBvWVN4aUxHTXNaQ2s5UGlob0xsOVBjblJEY21WaGRHVlNkVzVQY0hScGIyNXpQVm91ZW1FcEtHRXNZaXhqTEdRcE8yZ3VYMDl5ZEVGa1pGSjFia052Ym1acFowVnVkSEo1UFNoaExHSXNZeWs5UGlob0xsOVBjblJCWkdSU2RXNURiMjVtYVdkRmJuUnllVDFhTGtGaEtTaGhMR0lzWXlrN2FDNWZUM0owVW1Wc1pXRnpaVkoxYms5d2RHbHZibk05WVQwK0tHZ3VYMDl5ZEZKbGJHVmhjMlZTZFc1UGNIUnBiMjV6UFZvdVFtRXBLR0VwTzJndVgwOXlkRU55WldGMFpVSnBibVJwYm1jOVlUMCtLR2d1WDA5eWRFTnlaV0YwWlVKcGJtUnBibWM5V2k1RFlTa29ZU2s3WEc1b0xsOVBjblJDYVc1a1NXNXdkWFE5S0dFc1lpeGpLVDArS0dndVgwOXlkRUpwYm1SSmJuQjFkRDFhTGtSaEtTaGhMR0lzWXlrN2FDNWZUM0owUW1sdVpFOTFkSEIxZEQwb1lTeGlMR01zWkNrOVBpaG9MbDlQY25SQ2FXNWtUM1YwY0hWMFBWb3VSV0VwS0dFc1lpeGpMR1FwTzJndVgwOXlkRU5zWldGeVFtOTFibVJQZFhSd2RYUnpQV0U5UGlob0xsOVBjblJEYkdWaGNrSnZkVzVrVDNWMGNIVjBjejFhTGtaaEtTaGhLVHRvTGw5UGNuUlNaV3hsWVhObFFtbHVaR2x1WnoxaFBUNG9hQzVmVDNKMFVtVnNaV0Z6WlVKcGJtUnBibWM5V2k1SFlTa29ZU2s3YUM1ZlQzSjBVblZ1VjJsMGFFSnBibVJwYm1jOUtHRXNZaXhqTEdRc1pTazlQaWhvTGw5UGNuUlNkVzVYYVhSb1FtbHVaR2x1WnoxYUxraGhLU2hoTEdJc1l5eGtMR1VwTzJndVgwOXlkRkoxYmowb1lTeGlMR01zWkN4bExHY3NiQ3hyS1QwK0tHZ3VYMDl5ZEZKMWJqMWFMa2xoS1NoaExHSXNZeXhrTEdVc1p5eHNMR3NwTzJndVgwOXlkRVZ1WkZCeWIyWnBiR2x1WnoxaFBUNG9hQzVmVDNKMFJXNWtVSEp2Wm1sc2FXNW5QVm91U21FcEtHRXBPMXh1ZG1GeUlHMWlQV2d1WDIxaGJHeHZZejFoUFQ0b2JXSTlhQzVmYldGc2JHOWpQVm91UzJFcEtHRXBMRlU5YUM1ZlpuSmxaVDFoUFQ0b1ZUMW9MbDltY21WbFBWb3VUR0VwS0dFcExGcGhQV0U5UGloYVlUMWFMazFoS1NoaEtUdG9MbDlmWlcxaWFXNWtYMmx1YVhScFlXeHBlbVZmWW1sdVpHbHVaM005S0NrOVBpaG9MbDlmWlcxaWFXNWtYMmx1YVhScFlXeHBlbVZmWW1sdVpHbHVaM005V2k1T1lTa29LVHQyWVhJZ1FXSTlLQ2s5UGloQllqMWFMbEJoS1NncExFSmlQV0U5UGloQ1lqMWFMbEZoS1NoaEtTeERZajFoUFQ0b1EySTlXaTVTWVNrb1lTazdablZ1WTNScGIyNGdlbUlvS1h0MllYSWdZVDFhTzJFOVQySnFaV04wTG1GemMybG5iaWg3ZlN4aEtUdDJZWElnWWoxa1BUNG9LVDArWkNncFBqNCtNQ3hqUFdROVBtVTlQbVFvWlNrK1BqNHdPMkV1WDE5bGNuSnViMTlzYjJOaGRHbHZiajFpS0dFdVgxOWxjbkp1YjE5c2IyTmhkR2x2YmlrN1lTNUxZVDFqS0dFdVMyRXBPMkV1VFdFOVl5aGhMazFoS1R0aExsQmhQV0lvWVM1UVlTazdZUzVTWVQxaktHRXVVbUVwTzNKbGRIVnliaUJoZldndWMzUmhZMnRCYkd4dll6MURZanRvTG5OMFlXTnJVMkYyWlQxQllqdG9Mbk4wWVdOclVtVnpkRzl5WlQxQ1lqdG9MbFZVUmpoVWIxTjBjbWx1WnoxTU8xeHVhQzV6ZEhKcGJtZFViMVZVUmpnOUtHRXNZaXhqS1QwK1RpaGhMRUlzWWl4aktUdG9MbXhsYm1kMGFFSjVkR1Z6VlZSR09EMU5PM1poY2lCRVlqdEtQV1oxYm1OMGFXOXVJRVZpS0NsN1JHSjhmRVppS0NrN1JHSjhmQ2hLUFVWaUtYMDdablZ1WTNScGIyNGdSbUlvS1h0cFppZ2hLREE4U1NrcGUyWnZjaWc3TUR4eVlTNXNaVzVuZEdnN0tYSmhMbk5vYVdaMEtDa29hQ2s3YVdZb0lTZ3dQRWw4ZkVSaWZId29SR0k5SVRBc2FDNWpZV3hzWldSU2RXNDlJVEFzYkdFcEtTbDdabTl5S0Rzd1BITmhMbXhsYm1kMGFEc3BjMkV1YzJocFpuUW9LU2hvS1R0bWIzSW9ZV0VvYUNrN01EeDBZUzVzWlc1bmRHZzdLWFJoTG5Ob2FXWjBLQ2tvYUNsOWZYMUdZaWdwTzF4dVhHNWNiaUFnY21WMGRYSnVJRzF2WkhWc1pVRnlaeTV5WldGa2VWeHVmVnh1WEc0cE8xeHVmU2tvS1R0Y2JtbG1JQ2gwZVhCbGIyWWdaWGh3YjNKMGN5QTlQVDBnSjI5aWFtVmpkQ2NnSmlZZ2RIbHdaVzltSUcxdlpIVnNaU0E5UFQwZ0oyOWlhbVZqZENjcFhHNGdJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdiM0owVjJGemJUdGNibVZzYzJVZ2FXWWdLSFI1Y0dWdlppQmtaV1pwYm1VZ1BUMDlJQ2RtZFc1amRHbHZiaWNnSmlZZ1pHVm1hVzVsV3lkaGJXUW5YU2xjYmlBZ1pHVm1hVzVsS0Z0ZExDQW9LU0E5UGlCdmNuUlhZWE50S1R0Y2JpSXNJQ0lpTENBaUlpd2dJbVY0Y0c5eWRDQmpiMjV6ZENCamNIVnpJRDBnZFc1a1pXWnBibVZrT3lJc0lDSmNiblpoY2lCdmNuUlhZWE50VkdoeVpXRmtaV1FnUFNBb0tDa2dQVDRnZTF4dUlDQjJZWElnWDNOamNtbHdkRVJwY2lBOUlIUjVjR1Z2WmlCa2IyTjFiV1Z1ZENBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ1pHOWpkVzFsYm5RdVkzVnljbVZ1ZEZOamNtbHdkQ0EvSUdSdlkzVnRaVzUwTG1OMWNuSmxiblJUWTNKcGNIUXVjM0pqSURvZ2RXNWtaV1pwYm1Wa08xeHVJQ0JwWmlBb2RIbHdaVzltSUY5ZlptbHNaVzVoYldVZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCZmMyTnlhWEIwUkdseUlEMGdYM05qY21sd2RFUnBjaUI4ZkNCZlgyWnBiR1Z1WVcxbE8xeHVJQ0J5WlhSMWNtNGdLRnh1Wm5WdVkzUnBiMjRvYlc5a2RXeGxRWEpuSUQwZ2UzMHBJSHRjYmx4dVpuVnVZM1JwYjI0Z2FDZ3BlMjB1WW5WbVptVnlJVDF1TG1KMVptWmxjaVltY0NncE8zSmxkSFZ5YmlCdWZXWjFibU4wYVc5dUlIUW9LWHR0TG1KMVptWmxjaUU5Ymk1aWRXWm1aWEltSm5Bb0tUdHlaWFIxY200Z1lXRjlablZ1WTNScGIyNGdkaWdwZTIwdVluVm1abVZ5SVQxdUxtSjFabVpsY2lZbWNDZ3BPM0psZEhWeWJpQmlZWDFtZFc1amRHbHZiaUJqWVNncGUyMHVZblZtWm1WeUlUMXVMbUoxWm1abGNpWW1jQ2dwTzNKbGRIVnliaUJrWVgxbWRXNWpkR2x2YmlCM0tDbDdiUzVpZFdabVpYSWhQVzR1WW5WbVptVnlKaVp3S0NrN2NtVjBkWEp1SUdWaGZXWjFibU4wYVc5dUlIb29LWHR0TG1KMVptWmxjaUU5Ymk1aWRXWm1aWEltSm5Bb0tUdHlaWFIxY200Z1ptRjlablZ1WTNScGIyNGdhR0VvS1h0dExtSjFabVpsY2lFOWJpNWlkV1ptWlhJbUpuQW9LVHR5WlhSMWNtNGdhV0Y5ZG1GeUlFRTliVzlrZFd4bFFYSm5MR3BoTEd0aE8wRXVjbVZoWkhrOWJtVjNJRkJ5YjIxcGMyVW9LR0VzWWlrOVBudHFZVDFoTzJ0aFBXSjlLVHRjYm5aaGNpQnNZVDFQWW1wbFkzUXVZWE56YVdkdUtIdDlMRUVwTEcxaFBWd2lMaTkwYUdsekxuQnliMmR5WVcxY0lpeHVZVDBvWVN4aUtUMCtlM1JvY205M0lHSTdmU3h2WVQxY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ2QybHVaRzkzTEVJOVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdhVzF3YjNKMFUyTnlhWEIwY3l4RVBWd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQndjbTlqWlhOekppWmNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdjSEp2WTJWemN5NTJaWEp6YVc5dWN5WW1YQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JSEJ5YjJObGMzTXVkbVZ5YzJsdmJuTXVibTlrWlN4RlBVRXVSVTVXU1ZKUFRrMUZUbFJmU1ZOZlVGUklVa1ZCUkh4OElURXNSajFjSWx3aU8yWjFibU4wYVc5dUlIQmhLR0VwZTNKbGRIVnliaUJCTG14dlkyRjBaVVpwYkdVL1FTNXNiMk5oZEdWR2FXeGxLR0VzUmlrNlJpdGhmWFpoY2lCeFlTeHlZU3h6WVR0Y2JtbG1LRVFwZTNaaGNpQm1jejF5WlhGMWFYSmxLRndpWm5OY0lpa3NkR0U5Y21WeGRXbHlaU2hjSW5CaGRHaGNJaWs3UmoxQ1AzUmhMbVJwY201aGJXVW9SaWtyWENJdlhDSTZYMTlrYVhKdVlXMWxLMXdpTDF3aU8zRmhQU2hpTEdNcFBUNTdZajFpTG5OMFlYSjBjMWRwZEdnb1hDSm1hV3hsT2k4dlhDSXBQMjVsZHlCVlVrd29ZaWs2ZEdFdWJtOXliV0ZzYVhwbEtHSXBPM0psZEhWeWJpQm1jeTV5WldGa1JtbHNaVk41Ym1Nb1lpeGpQM1p2YVdRZ01EcGNJblYwWmpoY0lpbDlPM05oUFdJOVBudGlQWEZoS0dJc0lUQXBPMkl1WW5WbVptVnlmSHdvWWoxdVpYY2dWV2x1ZERoQmNuSmhlU2hpS1NrN2NtVjBkWEp1SUdKOU8zSmhQU2hpTEdNc1pDeGxQU0V3S1QwK2UySTlZaTV6ZEdGeWRITlhhWFJvS0Z3aVptbHNaVG92TDF3aUtUOXVaWGNnVlZKTUtHSXBPblJoTG01dmNtMWhiR2w2WlNoaUtUdG1jeTV5WldGa1JtbHNaU2hpTEdVL2RtOXBaQ0F3T2x3aWRYUm1PRndpTENobUxHc3BQVDU3Wmo5a0tHWXBPbU1vWlQ5ckxtSjFabVpsY2pwcktYMHBmVHNoUVM1MGFHbHpVSEp2WjNKaGJTWW1NVHh3Y205alpYTnpMbUZ5WjNZdWJHVnVaM1JvSmlZb2JXRTljSEp2WTJWemN5NWhjbWQyV3pGZExuSmxjR3hoWTJVb0wxeGNYRnd2Wnl4Y0lpOWNJaWtwTzNCeWIyTmxjM011WVhKbmRpNXpiR2xqWlNneUtUdHVZVDBvWWl4aktUMCtlM0J5YjJObGMzTXVaWGhwZEVOdlpHVTlYRzVpTzNSb2NtOTNJR003ZlR0QkxtbHVjM0JsWTNROUtDazlQbHdpVzBWdGMyTnlhWEIwWlc0Z1RXOWtkV3hsSUc5aWFtVmpkRjFjSWp0c1pYUWdZVHQwY25sN1lUMXlaWEYxYVhKbEtGd2lkMjl5YTJWeVgzUm9jbVZoWkhOY0lpbDlZMkYwWTJnb1lpbDdkR2h5YjNjZ1kyOXVjMjlzWlM1bGNuSnZjaWduVkdobElGd2lkMjl5YTJWeVgzUm9jbVZoWkhOY0lpQnRiMlIxYkdVZ2FYTWdibTkwSUhOMWNIQnZjblJsWkNCcGJpQjBhR2x6SUc1dlpHVXVhbk1nWW5WcGJHUWdMU0J3WlhKb1lYQnpJR0VnYm1WM1pYSWdkbVZ5YzJsdmJpQnBjeUJ1WldWa1pXUS9KeWtzWWp0OVoyeHZZbUZzTGxkdmNtdGxjajFoTGxkdmNtdGxjbjFsYkhObElHbG1LRzloZkh4Q0tVSS9SajF6Wld4bUxteHZZMkYwYVc5dUxtaHlaV1k2WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlHUnZZM1Z0Wlc1MEppWmtiMk4xYldWdWRDNWpkWEp5Wlc1MFUyTnlhWEIwSmlZb1JqMWtiMk4xYldWdWRDNWpkWEp5Wlc1MFUyTnlhWEIwTG5OeVl5a3NLSFI1Y0dWdlppQmZjMk55YVhCMFJHbHlJQ0U5UFNCY0luVnVaR1ZtYVc1bFpGd2lJQ1ltSUY5elkzSnBjSFJFYVhJcEppWW9SajFmYzJOeWFYQjBSR2x5S1N3d0lUMDlSaTVwYm1SbGVFOW1LRndpWW14dllqcGNJaWsvUmoxR0xuTjFZbk4wY2lnd0xFWXVjbVZ3YkdGalpTZ3ZXejhqWFM0cUx5eGNJbHdpS1M1c1lYTjBTVzVrWlhoUFppaGNJaTljSWlrck1TazZSajFjSWx3aUxFUjhmQ2h4WVQxaFBUNTdkbUZ5SUdJOVhHNXVaWGNnV0UxTVNIUjBjRkpsY1hWbGMzUTdZaTV2Y0dWdUtGd2lSMFZVWENJc1lTd2hNU2s3WWk1elpXNWtLRzUxYkd3cE8zSmxkSFZ5YmlCaUxuSmxjM0J2Ym5ObFZHVjRkSDBzUWlZbUtITmhQV0U5UG50MllYSWdZajF1WlhjZ1dFMU1TSFIwY0ZKbGNYVmxjM1E3WWk1dmNHVnVLRndpUjBWVVhDSXNZU3doTVNrN1lpNXlaWE53YjI1elpWUjVjR1U5WENKaGNuSmhlV0oxWm1abGNsd2lPMkl1YzJWdVpDaHVkV3hzS1R0eVpYUjFjbTRnYm1WM0lGVnBiblE0UVhKeVlYa29ZaTV5WlhOd2IyNXpaU2w5S1N4eVlUMG9ZU3hpTEdNcFBUNTdkbUZ5SUdROWJtVjNJRmhOVEVoMGRIQlNaWEYxWlhOME8yUXViM0JsYmloY0lrZEZWRndpTEdFc0lUQXBPMlF1Y21WemNHOXVjMlZVZVhCbFBWd2lZWEp5WVhsaWRXWm1aWEpjSWp0a0xtOXViRzloWkQwb0tUMCtlekl3TUQwOVpDNXpkR0YwZFhOOGZEQTlQV1F1YzNSaGRIVnpKaVprTG5KbGMzQnZibk5sUDJJb1pDNXlaWE53YjI1elpTazZZeWdwZlR0a0xtOXVaWEp5YjNJOVl6dGtMbk5sYm1Rb2JuVnNiQ2w5S1R0RUppWmNJblZ1WkdWbWFXNWxaRndpUFQxMGVYQmxiMllnY0dWeVptOXliV0Z1WTJVbUppaG5iRzlpWVd3dWNHVnlabTl5YldGdVkyVTljbVZ4ZFdseVpTaGNJbkJsY21aZmFHOXZhM05jSWlrdWNHVnlabTl5YldGdVkyVXBPMXh1ZG1GeUlIVmhQV052Ym5OdmJHVXViRzluTG1KcGJtUW9ZMjl1YzI5c1pTa3NkbUU5WTI5dWMyOXNaUzVsY25KdmNpNWlhVzVrS0dOdmJuTnZiR1VwTzBRbUppaDFZVDBvTGk0dVlTazlQbVp6TG5keWFYUmxVM2x1WXlneExHRXVhbTlwYmloY0lpQmNJaWtyWENKY1hHNWNJaWtzZG1FOUtDNHVMbUVwUFQ1bWN5NTNjbWwwWlZONWJtTW9NaXhoTG1wdmFXNG9YQ0lnWENJcEsxd2lYRnh1WENJcEtUdDJZWElnZDJFOWRXRXNSejEyWVR0UFltcGxZM1F1WVhOemFXZHVLRUVzYkdFcE8yeGhQVzUxYkd3N2RtRnlJRzV2UlhocGRGSjFiblJwYldVOUlUQTdYQ0p2WW1wbFkzUmNJaUU5ZEhsd1pXOW1JRmRsWWtGemMyVnRZbXg1SmlaSUtGd2libThnYm1GMGFYWmxJSGRoYzIwZ2MzVndjRzl5ZENCa1pYUmxZM1JsWkZ3aUtUdDJZWElnYlN4NFlTeDVZVDBoTVN4SkxHNHNZV0VzWW1Fc1pHRXNaV0VzWm1Fc2VtRXNTaXhCWVN4cFlUdGNibVoxYm1OMGFXOXVJSEFvS1h0MllYSWdZVDF0TG1KMVptWmxjanRCTGtoRlFWQTRQVzQ5Ym1WM0lFbHVkRGhCY25KaGVTaGhLVHRCTGtoRlFWQXhOajFpWVQxdVpYY2dTVzUwTVRaQmNuSmhlU2hoS1R0QkxraEZRVkJWT0QxaFlUMXVaWGNnVldsdWREaEJjbkpoZVNoaEtUdEJMa2hGUVZCVk1UWTlaR0U5Ym1WM0lGVnBiblF4TmtGeWNtRjVLR0VwTzBFdVNFVkJVRE15UFdWaFBXNWxkeUJKYm5Rek1rRnljbUY1S0dFcE8wRXVTRVZCVUZVek1qMW1ZVDF1WlhjZ1ZXbHVkRE15UVhKeVlYa29ZU2s3UVM1SVJVRlFSak15UFhwaFBXNWxkeUJHYkc5aGRETXlRWEp5WVhrb1lTazdRUzVJUlVGUVJqWTBQV2xoUFc1bGR5QkdiRzloZERZMFFYSnlZWGtvWVNrN1FTNUlSVUZRTmpROVNqMXVaWGNnUW1sblNXNTBOalJCY25KaGVTaGhLVHRCTGtoRlFWQlZOalE5UVdFOWJtVjNJRUpwWjFWcGJuUTJORUZ5Y21GNUtHRXBmWFpoY2lCQ1lUMHhOamMzTnpJeE5qczFNalF5T0Rnd1BEMUNZWHg4U0NoY0lrbE9TVlJKUVV4ZlRVVk5UMUpaSUhOb2IzVnNaQ0JpWlNCc1lYSm5aWElnZEdoaGJpQlRWRUZEUzE5VFNWcEZMQ0IzWVhNZ1hDSXJRbUVyWENJaElDaFRWRUZEUzE5VFNWcEZQVFV5TkRJNE9EQXBYQ0lwTzF4dWFXWW9SU2x0UFVFdWQyRnpiVTFsYlc5eWVUdGxiSE5sSUdsbUtHMDlibVYzSUZkbFlrRnpjMlZ0WW14NUxrMWxiVzl5ZVNoN2FXNXBkR2xoYkRwQ1lTODJOVFV6Tml4dFlYaHBiWFZ0T2pZMU5UTTJMSE5vWVhKbFpEb2hNSDBwTENFb2JTNWlkV1ptWlhJZ2FXNXpkR0Z1WTJWdlppQlRhR0Z5WldSQmNuSmhlVUoxWm1abGNpa3BkR2h5YjNjZ1J5aGNJbkpsY1hWbGMzUmxaQ0JoSUhOb1lYSmxaQ0JYWldKQmMzTmxiV0pzZVM1TlpXMXZjbmtnWW5WMElIUm9aU0J5WlhSMWNtNWxaQ0JpZFdabVpYSWdhWE1nYm05MElHRWdVMmhoY21Wa1FYSnlZWGxDZFdabVpYSXNJR2x1WkdsallYUnBibWNnZEdoaGRDQjNhR2xzWlNCMGFHVWdZbkp2ZDNObGNpQm9ZWE1nVTJoaGNtVmtRWEp5WVhsQ2RXWm1aWElnYVhRZ1pHOWxjeUJ1YjNRZ2FHRjJaU0JYWldKQmMzTmxiV0pzZVNCMGFISmxZV1J6SUhOMWNIQnZjblFnTFNCNWIzVWdiV0Y1SUc1bFpXUWdkRzhnYzJWMElHRWdabXhoWjF3aUtTeEVKaVpIS0Z3aUtHOXVJRzV2WkdVZ2VXOTFJRzFoZVNCdVpXVmtPaUF0TFdWNGNHVnlhVzFsYm5SaGJDMTNZWE50TFhSb2NtVmhaSE1nTFMxbGVIQmxjbWx0Wlc1MFlXd3RkMkZ6YlMxaWRXeHJMVzFsYlc5eWVTQmhibVF2YjNJZ2NtVmpaVzUwSUhabGNuTnBiMjRwWENJcExFVnljbTl5S0Z3aVltRmtJRzFsYlc5eWVWd2lLVHRjYm5Bb0tUdENZVDF0TG1KMVptWmxjaTVpZVhSbFRHVnVaM1JvTzNaaGNpQkRZVDFiWFN4RVlUMWJYU3hGWVQxYlhTeEdZVDB3TzJaMWJtTjBhVzl1SUVkaEtDbDdjbVYwZFhKdUlHNXZSWGhwZEZKMWJuUnBiV1Y4ZkRBOFJtRjlkbUZ5SUVzOU1DeElZVDF1ZFd4c0xFdzliblZzYkR0bWRXNWpkR2x2YmlCSllTZ3BlMHN0TFR0cFppZ3dQVDFMSmlZb2JuVnNiQ0U5UFVoaEppWW9ZMnhsWVhKSmJuUmxjblpoYkNoSVlTa3NTR0U5Ym5Wc2JDa3NUQ2twZTNaaGNpQmhQVXc3VEQxdWRXeHNPMkVvS1gxOVpuVnVZM1JwYjI0Z1NDaGhLWHRoUFZ3aVFXSnZjblJsWkNoY0lpdGhLMXdpS1Z3aU8wY29ZU2s3ZVdFOUlUQTdTVDB4TzJFOWJtVjNJRmRsWWtGemMyVnRZbXg1TGxKMWJuUnBiV1ZGY25KdmNpaGhLMXdpTGlCQ2RXbHNaQ0IzYVhSb0lDMXpRVk5UUlZKVVNVOU9VeUJtYjNJZ2JXOXlaU0JwYm1adkxsd2lLVHRyWVNoaEtUdDBhSEp2ZHlCaE8zMW1kVzVqZEdsdmJpQktZU2hoS1h0eVpYUjFjbTRnWVM1emRHRnlkSE5YYVhSb0tGd2laR0YwWVRwaGNIQnNhV05oZEdsdmJpOXZZM1JsZEMxemRISmxZVzA3WW1GelpUWTBMRndpS1gxMllYSWdUVHROUFZ3aWIzSjBMWGRoYzIwdGRHaHlaV0ZrWldRdWQyRnpiVndpTzBwaEtFMHBmSHdvVFQxd1lTaE5LU2s3WEc1bWRXNWpkR2x2YmlCTFlTaGhLWHRwWmloellTbHlaWFIxY200Z2MyRW9ZU2s3ZEdoeWIzZGNJbUp2ZEdnZ1lYTjVibU1nWVc1a0lITjVibU1nWm1WMFkyaHBibWNnYjJZZ2RHaGxJSGRoYzIwZ1ptRnBiR1ZrWENJN2ZXWjFibU4wYVc5dUlFeGhLR0VwZTJsbUtHOWhmSHhDS1h0cFppaGNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJtWlhSamFDWW1JV0V1YzNSaGNuUnpWMmwwYUNoY0ltWnBiR1U2THk5Y0lpa3BjbVYwZFhKdUlHWmxkR05vS0dFc2UyTnlaV1JsYm5ScFlXeHpPbHdpYzJGdFpTMXZjbWxuYVc1Y0luMHBMblJvWlc0b1lqMCtlMmxtS0NGaUxtOXJLWFJvY205M1hDSm1ZV2xzWldRZ2RHOGdiRzloWkNCM1lYTnRJR0pwYm1GeWVTQm1hV3hsSUdGMElDZGNJaXRoSzF3aUoxd2lPM0psZEhWeWJpQmlMbUZ5Y21GNVFuVm1abVZ5S0NsOUtTNWpZWFJqYUNnb0tUMCtTMkVvWVNrcE8ybG1LSEpoS1hKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNnb1lpeGpLVDArZTNKaEtHRXNaRDArWWlodVpYY2dWV2x1ZERoQmNuSmhlU2hrS1Nrc1l5bDlLWDF5WlhSMWNtNGdVSEp2YldselpTNXlaWE52YkhabEtDa3VkR2hsYmlnb0tUMCtTMkVvWVNrcGZWeHVablZ1WTNScGIyNGdUV0VvWVN4aUxHTXBlM0psZEhWeWJpQk1ZU2hoS1M1MGFHVnVLR1E5UGxkbFlrRnpjMlZ0WW14NUxtbHVjM1JoYm5ScFlYUmxLR1FzWWlrcExuUm9aVzRvWkQwK1pDa3VkR2hsYmloakxHUTlQbnRIS0dCbVlXbHNaV1FnZEc4Z1lYTjVibU5vY205dWIzVnpiSGtnY0hKbGNHRnlaU0IzWVhOdE9pQWtlMlI5WUNrN1NDaGtLWDBwZlZ4dVpuVnVZM1JwYjI0Z1RtRW9ZU3hpS1h0MllYSWdZejFOTzNKbGRIVnlibHdpWm5WdVkzUnBiMjVjSWlFOWRIbHdaVzltSUZkbFlrRnpjMlZ0WW14NUxtbHVjM1JoYm5ScFlYUmxVM1J5WldGdGFXNW5mSHhLWVNoaktYeDhZeTV6ZEdGeWRITlhhWFJvS0Z3aVptbHNaVG92TDF3aUtYeDhSSHg4WENKbWRXNWpkR2x2Ymx3aUlUMTBlWEJsYjJZZ1ptVjBZMmcvVFdFb1l5eGhMR0lwT21abGRHTm9LR01zZTJOeVpXUmxiblJwWVd4ek9sd2ljMkZ0WlMxdmNtbG5hVzVjSW4wcExuUm9aVzRvWkQwK1YyVmlRWE56WlcxaWJIa3VhVzV6ZEdGdWRHbGhkR1ZUZEhKbFlXMXBibWNvWkN4aEtTNTBhR1Z1S0dJc1puVnVZM1JwYjI0b1pTbDdSeWhnZDJGemJTQnpkSEpsWVcxcGJtY2dZMjl0Y0dsc1pTQm1ZV2xzWldRNklDUjdaWDFnS1R0SEtGd2labUZzYkdsdVp5QmlZV05ySUhSdklFRnljbUY1UW5WbVptVnlJR2x1YzNSaGJuUnBZWFJwYjI1Y0lpazdjbVYwZFhKdUlFMWhLR01zWVN4aUtYMHBLWDFtZFc1amRHbHZiaUJQWVNoaEtYdDBhR2x6TG01aGJXVTlYQ0pGZUdsMFUzUmhkSFZ6WENJN2RHaHBjeTV0WlhOellXZGxQV0JRY205bmNtRnRJSFJsY20xcGJtRjBaV1FnZDJsMGFDQmxlR2wwS0NSN1lYMHBZRHQwYUdsekxuTjBZWFIxY3oxaGZWeHVkbUZ5SUZCaFBXRTlQbnRoTG5SbGNtMXBibUYwWlNncE8yRXViMjV0WlhOellXZGxQU2dwUFQ1N2ZYMHNVbUU5WVQwK2V6QTlQVTh1Ym1JdWJHVnVaM1JvSmlZb1VXRW9LU3hQTGtGaUtFOHVibUpiTUYwcEtUdDJZWElnWWoxUExtNWlMbkJ2Y0NncE8ybG1LQ0ZpS1hKbGRIVnliaUEyTzA4dWIySXVjSFZ6YUNoaUtUdFBMbXBpVzJFdWJXSmRQV0k3WWk1dFlqMWhMbTFpTzNaaGNpQmpQWHRqYldRNlhDSnlkVzVjSWl4emRHRnlkRjl5YjNWMGFXNWxPbUV1VFdJc1lYSm5PbUV1UjJJc2NIUm9jbVZoWkY5d2RISTZZUzV0WW4wN1JDWW1ZaTUxYm5KbFppZ3BPMkl1Y0c5emRFMWxjM05oWjJVb1l5eGhMbE5pS1R0eVpYUjFjbTRnTUgwc1UyRTlYQ0oxYm1SbFptbHVaV1JjSWlFOWRIbHdaVzltSUZSbGVIUkVaV052WkdWeVAyNWxkeUJVWlhoMFJHVmpiMlJsY2loY0luVjBaamhjSWlrNmRtOXBaQ0F3TEZSaFBTaGhMR0lzWXlrOVBudGlQajQrUFRBN2RtRnlJR1E5WWl0ak8yWnZjaWhqUFdJN1lWdGpYU1ltSVNoalBqMWtLVHNwS3l0ak8ybG1LREUyUEdNdFlpWW1ZUzVpZFdabVpYSW1KbE5oS1hKbGRIVnliaUJUWVM1a1pXTnZaR1VvWVM1aWRXWm1aWElnYVc1emRHRnVZMlZ2WmlCVGFHRnlaV1JCY25KaGVVSjFabVpsY2o5aExuTnNhV05sS0dJc1l5azZZUzV6ZFdKaGNuSmhlU2hpTEdNcEtUdG1iM0lvWkQxY2Jsd2lYQ0k3WWp4ak95bDdkbUZ5SUdVOVlWdGlLeXRkTzJsbUtHVW1NVEk0S1h0MllYSWdaajFoVzJJcksxMG1Oak03YVdZb01Ua3lQVDBvWlNZeU1qUXBLV1FyUFZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb0tHVW1NekVwUER3MmZHWXBPMlZzYzJWN2RtRnlJR3M5WVZ0aUt5dGRKall6TzJVOU1qSTBQVDBvWlNZeU5EQXBQeWhsSmpFMUtUdzhNVEo4Wmp3OE5ueHJPaWhsSmpjcFBEd3hPSHhtUER3eE1ueHJQRHcyZkdGYllpc3JYU1kyTXpzMk5UVXpOajVsUDJRclBWTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9aU2s2S0dVdFBUWTFOVE0yTEdRclBWTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9OVFV5T1RaOFpUNCtNVEFzTlRZek1qQjhaU1l4TURJektTbDlmV1ZzYzJVZ1pDczlVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaU2hsS1gxeVpYUjFjbTRnWkgwc1ZXRTlLR0VzWWlrOVBpaGhQajQrUFRBcFAxUmhLSFFvS1N4aExHSXBPbHdpWENJN1puVnVZM1JwYjI0Z1ZtRW9ZU2w3YVdZb1JTbHlaWFIxY200Z1VDZ3dMREVzWVNrN1NUMWhPMGRoS0NsOGZDaFBMazVpS0Nrc2VXRTlJVEFwTzI1aEtHRXNibVYzSUU5aEtHRXBLWDEyWVhJZ1dHRTlZVDArZTBrOVlUdHBaaWhGS1hSb2NtOTNJRmRoS0dFcExGd2lkVzUzYVc1a1hDSTdWbUVvWVNsOU8xeHVablZ1WTNScGIyNGdXV0VvS1h0bWIzSW9kbUZ5SUdFOVFTNXVkVzFVYUhKbFlXUnpPMkV0TFRzcFVXRW9LVHREWVM1MWJuTm9hV1owS0NncFBUNTdTeXNyTzFwaEtDZ3BQVDVKWVNncEtYMHBmV1oxYm1OMGFXOXVJRkZoS0NsN2RtRnlJR0U5Y0dFb1hDSnZjblF0ZDJGemJTMTBhSEpsWVdSbFpDNTNiM0pyWlhJdWFuTmNJaWs3WVQxdVpYY2dWMjl5YTJWeUtHRXBPMDh1Ym1JdWNIVnphQ2hoS1gxbWRXNWpkR2x2YmlCYVlTaGhLWHRGUDJFb0tUcFFjbTl0YVhObExtRnNiQ2hQTG01aUxtMWhjQ2hQTGtGaUtTa3VkR2hsYmloaEtYMWNiblpoY2lCUFBYdHVZanBiWFN4dllqcGJYU3hHWWpwYlhTeHFZanA3ZlN4MllpZ3BlMFUvS0U4dWNtVmpaV2wyWlU5aWFtVmpkRlJ5WVc1elptVnlQVTh1VEdJc1R5NTBhSEpsWVdSSmJtbDBWRXhUUFU4dVJXSXNUeTV6WlhSRmVHbDBVM1JoZEhWelBVOHVSR0lzYm05RmVHbDBVblZ1ZEdsdFpUMGhNU2s2V1dFb0tYMHNSR0k2WVQwK2UwazlZWDBzVm1JNlcxd2lKSFJsY20xcGJtRjBaVmR2Y210bGNsd2lYU3hPWWpvb0tUMCtlMlp2Y2loMllYSWdZU0J2WmlCUExtOWlLVkJoS0dFcE8yWnZjaWhoSUc5bUlFOHVibUlwVUdFb1lTazdUeTV1WWoxYlhUdFBMbTlpUFZ0ZE8wOHVhbUk5VzExOUxFTmlPbUU5UG50MllYSWdZajFoTG0xaU8yUmxiR1YwWlNCUExtcGlXMkpkTzA4dWJtSXVjSFZ6YUNoaEtUdFBMbTlpTG5Od2JHbGpaU2hQTG05aUxtbHVaR1Y0VDJZb1lTa3NNU2s3WVM1dFlqMHdPeVJoS0dJcGZTeE1ZaWdwZTMwc1JXSW9LWHRQTGtaaUxtWnZja1ZoWTJnb1lUMCtZU2dwS1gwc1FXSTZZVDArYm1WM0lGQnliMjFwYzJVb1lqMCtlMkV1YjI1dFpYTnpZV2RsUFdZOVBudG1QV1l1WkdGMFlUdDJZWElnYXoxbUxtTnRaRHRwWmlobUxuUmhjbWRsZEZSb2NtVmhaQ1ltWmk1MFlYSm5aWFJVYUhKbFlXUWhQV0ZpS0NrcGUzWmhjaUJzUFU4dWFtSmJaaTUwWVhKblpYUlVhSEpsWVdSZE8ydy9YRzVzTG5CdmMzUk5aWE56WVdkbEtHWXNaaTUwY21GdWMyWmxja3hwYzNRcE9rY29ZRWx1ZEdWeWJtRnNJR1Z5Y205eUlTQlhiM0pyWlhJZ2MyVnVkQ0JoSUcxbGMzTmhaMlVnWENJa2UydDlYQ0lnZEc4Z2RHRnlaMlYwSUhCMGFISmxZV1FnSkh0bUxuUmhjbWRsZEZSb2NtVmhaSDBzSUdKMWRDQjBhR0YwSUhSb2NtVmhaQ0J1YnlCc2IyNW5aWElnWlhocGMzUnpJV0FwZldWc2MyVWdhV1lvWENKamFHVmphMDFoYVd4aWIzaGNJajA5UFdzcFltSW9LVHRsYkhObElHbG1LRndpYzNCaGQyNVVhSEpsWVdSY0lqMDlQV3NwVW1Fb1ppazdaV3h6WlNCcFppaGNJbU5zWldGdWRYQlVhSEpsWVdSY0lqMDlQV3NwS0dZOVR5NXFZbHRtTG5Sb2NtVmhaRjBwZkh4SUtDa3NUeTVEWWlobUtUdGxiSE5sSUdsbUtGd2lhMmxzYkZSb2NtVmhaRndpUFQwOWF5bG1QV1l1ZEdoeVpXRmtMR3M5VHk1cVlsdG1YU3hrWld4bGRHVWdUeTVxWWx0bVhTeFFZU2hyS1N3a1lTaG1LU3hQTG05aUxuTndiR2xqWlNoUExtOWlMbWx1WkdWNFQyWW9heWtzTVNrc2F5NXRZajB3TzJWc2MyVWdhV1lvWENKallXNWpaV3hVYUhKbFlXUmNJajA5UFdzcFR5NXFZbHRtTG5Sb2NtVmhaRjB1Y0c5emRFMWxjM05oWjJVb2UyTnRaRHBjSW1OaGJtTmxiRndpZlNrN1pXeHpaU0JwWmloY0lteHZZV1JsWkZ3aVBUMDlheWxoTG14dllXUmxaRDBoTUN4RUppWWhZUzV0WWlZbVhHNWhMblZ1Y21WbUtDa3NZaWhoS1R0bGJITmxJR2xtS0Z3aVlXeGxjblJjSWowOVBXc3BZV3hsY25Rb1lGUm9jbVZoWkNBa2UyWXVkR2h5WldGa1NXUjlPaUFrZTJZdWRHVjRkSDFnS1R0bGJITmxJR2xtS0Z3aWMyVjBhVzF0WldScFlYUmxYQ0k5UFQxbUxuUmhjbWRsZENsaExuQnZjM1JOWlhOellXZGxLR1lwTzJWc2MyVWdhV1lvWENKallXeHNTR0Z1Wkd4bGNsd2lQVDA5YXlsQlcyWXVhR0Z1Wkd4bGNsMG9MaTR1Wmk1aGNtZHpLVHRsYkhObElHc21Ka2NvWUhkdmNtdGxjaUJ6Wlc1MElHRnVJSFZ1YTI1dmQyNGdZMjl0YldGdVpDQWtlMnQ5WUNsOU8yRXViMjVsY25KdmNqMW1QVDU3UnloZ0pIdGNJbmR2Y210bGNpQnpaVzUwSUdGdUlHVnljbTl5SVZ3aWZTQWtlMll1Wm1sc1pXNWhiV1Y5T2lSN1ppNXNhVzVsYm05OU9pQWtlMll1YldWemMyRm5aWDFnS1R0MGFISnZkeUJtTzMwN1JDWW1LR0V1YjI0b1hDSnRaWE56WVdkbFhDSXNaajArWVM1dmJtMWxjM05oWjJVb2UyUmhkR0U2Wm4wcEtTeGhMbTl1S0Z3aVpYSnliM0pjSWl4bVBUNWhMbTl1WlhKeWIzSW9aaWtwS1R0MllYSWdZejFiWFN4a1BWdGRMR1U3Wm05eUtHVWdiMllnWkNsQkxtaGhjMDkzYmxCeWIzQmxjblI1S0dVcEppWmpMbkIxYzJnb1pTazdZUzV3YjNOMFRXVnpjMkZuWlNoN1kyMWtPbHdpYkc5aFpGd2lMR2hoYm1Sc1pYSnpPbU1zZFhKc1QzSkNiRzlpT2tFdWJXRnBibE5qY21sd2RGVnliRTl5UW14dllueDhYRzVmYzJOeWFYQjBSR2x5TEhkaGMyMU5aVzF2Y25rNmJTeDNZWE50VFc5a2RXeGxPbmhoZlNsOUtYMDdRUzVRVkdoeVpXRmtQVTg3ZG1GeUlHTmlQV0U5UG50bWIzSW9PekE4WVM1c1pXNW5kR2c3S1dFdWMyaHBablFvS1NoQktYMDdRUzVsYzNSaFlteHBjMmhUZEdGamExTndZV05sUFNncFBUNTdkbUZ5SUdFOVlXSW9LU3hpUFhvb0tWdGhLelV5UGo0K01qNCtQakJkTzJFOWVpZ3BXMkVyTlRZK1BqNHlQajQrTUYwN1pHSW9ZaXhpTFdFcE8yVmlLR0lwZlR0bWRXNWpkR2x2YmlCWFlTaGhLWHRwWmloRktYSmxkSFZ5YmlCUUtERXNNQ3hoS1R0WVlTaGhLWDEyWVhJZ1ptSTlXMTBzWjJJN1FTNXBiblp2YTJWRmJuUnllVkJ2YVc1MFBTaGhMR0lwUFQ1N2RtRnlJR005Wm1KYllWMDdZM3g4S0dFK1BXWmlMbXhsYm1kMGFDWW1LR1ppTG14bGJtZDBhRDFoS3pFcExHWmlXMkZkUFdNOVoySXVaMlYwS0dFcEtUdGhQV01vWWlrN1IyRW9LVDlQTGtSaUtHRXBPbWhpS0dFcGZUdGNibVoxYm1OMGFXOXVJR2xpS0dFcGUzUm9hWE11YzJJOVlTMHlORHQwYUdsekxrdGlQV1oxYm1OMGFXOXVLR0lwZTNvb0tWdDBhR2x6TG5OaUt6UStQajR5UGo0K01GMDlZbjA3ZEdocGN5NTRZajFtZFc1amRHbHZiaWhpS1h0NktDbGJkR2hwY3k1ellpczRQajQrTWo0K1BqQmRQV0o5TzNSb2FYTXVkbUk5Wm5WdVkzUnBiMjRvWWl4aktYdDBhR2x6TG5kaUtDazdkR2hwY3k1TFlpaGlLVHQwYUdsekxuaGlLR01wZlR0MGFHbHpMbmRpUFdaMWJtTjBhVzl1S0NsN2VpZ3BXM1JvYVhNdWMySXJNVFkrUGo0eVBqNCtNRjA5TUgxOWRtRnlJR3BpUFRBc2EySTlNRHRtZFc1amRHbHZiaUJzWWloaExHSXNZeXhrS1h0eVpYUjFjbTRnUlQ5UUtESXNNU3hoTEdJc1l5eGtLVHB0WWloaExHSXNZeXhrS1gxY2JtWjFibU4wYVc5dUlHMWlLR0VzWWl4akxHUXBlMkUrUGo0OU1EdGlQajQrUFRBN1l6NCtQajB3TzJRK1BqNDlNRHRwWmloY0luVnVaR1ZtYVc1bFpGd2lQVDEwZVhCbGIyWWdVMmhoY21Wa1FYSnlZWGxDZFdabVpYSXBjbVYwZFhKdUlFY29YQ0pEZFhKeVpXNTBJR1Z1ZG1seWIyNXRaVzUwSUdSdlpYTWdibTkwSUhOMWNIQnZjblFnVTJoaGNtVmtRWEp5WVhsQ2RXWm1aWElzSUhCMGFISmxZV1J6SUdGeVpTQnViM1FnWVhaaGFXeGhZbXhsSVZ3aUtTdzJPM1poY2lCbFBWdGRPMmxtS0VVbUpqQTlQVDFsTG14bGJtZDBhQ2x5WlhSMWNtNGdiR0lvWVN4aUxHTXNaQ2s3WVQxN1RXSTZZeXh0WWpwaExFZGlPbVFzVTJJNlpYMDdjbVYwZFhKdUlFVS9LR0V1VldJOVhDSnpjR0YzYmxSb2NtVmhaRndpTEhCdmMzUk5aWE56WVdkbEtHRXNaU2tzTUNrNlVtRW9ZU2w5Wm5WdVkzUnBiMjRnYm1Jb1lTeGlMR01wZTNKbGRIVnliaUJGUDFBb015d3hMR0VzWWl4aktUb3dmV1oxYm1OMGFXOXVJRzlpS0dFc1lpbDdhV1lvUlNseVpYUjFjbTRnVUNnMExERXNZU3hpS1gxY2JuWmhjaUJ3WWoxaFBUNTdabTl5S0haaGNpQmlQVEFzWXowd08yTThZUzVzWlc1bmRHZzdLeXRqS1h0MllYSWdaRDFoTG1Ob1lYSkRiMlJsUVhRb1l5azdNVEkzUGoxa1AySXJLem95TURRM1BqMWtQMklyUFRJNk5UVXlPVFk4UFdRbUpqVTNNelF6UGoxa1B5aGlLejAwTENzcll5azZZaXM5TTMxeVpYUjFjbTRnWW4wc2NXSTlLR0VzWWl4akxHUXBQVDU3WXo0K1BqMHdPMmxtS0NFb01EeGtLU2x5WlhSMWNtNGdNRHQyWVhJZ1pUMWpPMlE5WXl0a0xURTdabTl5S0haaGNpQm1QVEE3Wmp4aExteGxibWQwYURzcksyWXBlM1poY2lCclBXRXVZMmhoY2tOdlpHVkJkQ2htS1R0cFppZzFOVEk1Tmp3OWF5WW1OVGN6TkRNK1BXc3BlM1poY2lCc1BXRXVZMmhoY2tOdlpHVkJkQ2dySzJZcE8yczlOalUxTXpZcktDaHJKakV3TWpNcFBEd3hNQ2w4YkNZeE1ESXpmV2xtS0RFeU56NDlheWw3YVdZb1l6NDlaQ2xpY21WaGF6dGlXMk1yS3o0K1BqQmRQV3Q5Wld4elpYdHBaaWd5TURRM1BqMXJLWHRwWmloakt6RStQV1FwWW5KbFlXczdZbHRqS3lzK1BqNHdYVDB4T1RKOGF6NCtObjFsYkhObGUybG1LRFkxTlRNMVBqMXJLWHRwWmloakt6SStQV1FwWW5KbFlXczdZbHRqS3lzK1BqNHdYVDB5TWpSOGF6NCtNVEo5Wld4elpYdHBaaWhqS3pNK1BXUXBZbkpsWVdzN1lsdGpLeXMrUGo0d1hUMHlOREI4YXo0K1hHNHhPRHRpVzJNckt6NCtQakJkUFRFeU9IeHJQajR4TWlZMk0zMWlXMk1yS3o0K1BqQmRQVEV5T0h4clBqNDJKall6ZldKYll5c3JQajQrTUYwOU1USTRmR3NtTmpOOWZXSmJZejQrUGpCZFBUQTdjbVYwZFhKdUlHTXRaWDBzY21JOUtHRXNZaXhqS1QwK2NXSW9ZU3gwS0Nrc1lpeGpLVHRtZFc1amRHbHZiaUJ6WWloaExHSXBlMmxtS0VVcGNtVjBkWEp1SUZBb05Td3hMR0VzWWlsOVpuVnVZM1JwYjI0Z2RHSW9ZU3hpTEdNcGUybG1LRVVwY21WMGRYSnVJRkFvTml3eExHRXNZaXhqS1gxbWRXNWpkR2x2YmlCMVlpaGhMR0lzWXlsN2NtVjBkWEp1SUVVL1VDZzNMREVzWVN4aUxHTXBPakI5Wm5WdVkzUnBiMjRnZG1Jb1lTeGlLWHRwWmloRktYSmxkSFZ5YmlCUUtEZ3NNU3hoTEdJcGZXWjFibU4wYVc5dUlIZGlLR0VzWWl4aktYdHBaaWhGS1hKbGRIVnliaUJRS0Rrc01TeGhMR0lzWXlsOVpuVnVZM1JwYjI0Z2VHSW9ZU3hpTEdNc1pDbDdhV1lvUlNseVpYUjFjbTRnVUNneE1Dd3hMR0VzWWl4akxHUXBmV1oxYm1OMGFXOXVJSGxpS0dFc1lpeGpMR1FwZTJsbUtFVXBjbVYwZFhKdUlGQW9NVEVzTVN4aExHSXNZeXhrS1gxbWRXNWpkR2x2YmlCNllpaGhMR0lzWXl4a0tYdHBaaWhGS1hKbGRIVnliaUJRS0RFeUxERXNZU3hpTEdNc1pDbDlYRzVtZFc1amRHbHZiaUJCWWloaEtYdHBaaWhGS1hKbGRIVnliaUJRS0RFekxERXNZU2w5Wm5WdVkzUnBiMjRnUW1Jb1lTeGlLWHRwWmloRktYSmxkSFZ5YmlCUUtERTBMREVzWVN4aUtYMW1kVzVqZEdsdmJpQkRZaWhoTEdJc1l5bDdhV1lvUlNseVpYUjFjbTRnVUNneE5Td3hMR0VzWWl4aktYMTJZWElnUkdJOVlUMCtlMmxtS0c1MWJHdzlQVDFoS1hKbGRIVnlibHdpYm5Wc2JGd2lPM1poY2lCaVBYUjVjR1Z2WmlCaE8zSmxkSFZ5Ymx3aWIySnFaV04wWENJOVBUMWlmSHhjSW1GeWNtRjVYQ0k5UFQxaWZIeGNJbVoxYm1OMGFXOXVYQ0k5UFQxaVAyRXVkRzlUZEhKcGJtY29LVHBjSWx3aUsyRjlMRVZpTEZJOVlUMCtlMlp2Y2loMllYSWdZajFjSWx3aU8zUW9LVnRoUGo0K01GMDdLV0lyUFVWaVczUW9LVnRoS3lzK1BqNHdYVjA3Y21WMGRYSnVJR0o5TEVaaVBYdDlMRWRpUFh0OUxFaGlQWHQ5TEZNN1hHNW1kVzVqZEdsdmJpQkpZaWhoTEdJc1l6MTdmU2w3ZG1GeUlHUTlZaTV1WVcxbE8ybG1LQ0ZoS1hSb2NtOTNJRzVsZHlCVEtHQjBlWEJsSUZ3aUpIdGtmVndpSUcxMWMzUWdhR0YyWlNCaElIQnZjMmwwYVhabElHbHVkR1ZuWlhJZ2RIbHdaV2xrSUhCdmFXNTBaWEpnS1R0cFppaEhZaTVvWVhOUGQyNVFjbTl3WlhKMGVTaGhLU2w3YVdZb1l5NUpZaWx5WlhSMWNtNDdkR2h5YjNjZ2JtVjNJRk1vWUVOaGJtNXZkQ0J5WldkcGMzUmxjaUIwZVhCbElDY2tlMlI5SnlCMGQybGpaV0FwTzMxSFlsdGhYVDFpTzJSbGJHVjBaU0JJWWx0aFhUdEdZaTVvWVhOUGQyNVFjbTl3WlhKMGVTaGhLU1ltS0dJOVJtSmJZVjBzWkdWc1pYUmxJRVppVzJGZExHSXVabTl5UldGamFDaGxQVDVsS0NrcEtYMW1kVzVqZEdsdmJpQlVLR0VzWWl4alBYdDlLWHRwWmlnaEtGd2lZWEpuVUdGamEwRmtkbUZ1WTJWY0ltbHVJR0lwS1hSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSnlaV2RwYzNSbGNsUjVjR1VnY21WbmFYTjBaWEpsWkVsdWMzUmhibU5sSUhKbGNYVnBjbVZ6SUdGeVoxQmhZMnRCWkhaaGJtTmxYQ0lwTzBsaUtHRXNZaXhqS1gxY2JuWmhjaUJLWWowb1lTeGlMR01wUFQ1N2MzZHBkR05vS0dJcGUyTmhjMlVnTVRweVpYUjFjbTRnWXo5a1BUNW9LQ2xiWkQ0K1BqQStQajR3WFRwa1BUNTBLQ2xiWkQ0K1BqQStQajR3WFR0allYTmxJREk2Y21WMGRYSnVJR00vWkQwK2RpZ3BXMlErUGo0eFBqNCtNRjA2WkQwK1kyRW9LVnRrUGo0K01UNCtQakJkTzJOaGMyVWdORHB5WlhSMWNtNGdZejlrUFQ1M0tDbGJaRDQrUGpJK1BqNHdYVHBrUFQ1NktDbGJaRDQrUGpJK1BqNHdYVHRqWVhObElEZzZjbVYwZFhKdUlHTS9aRDArU2x0a1BqNCtNMTA2WkQwK1FXRmJaRDQrUGpOZE8yUmxabUYxYkhRNmRHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGdhVzUyWVd4cFpDQnBiblJsWjJWeUlIZHBaSFJvSUNna2UySjlLVG9nSkh0aGZXQXBPMzE5TzJaMWJtTjBhVzl1SUV0aUtDbDdkR2hwY3k1c1lqMWJkbTlwWkNBd1hUdDBhR2x6TG5waVBWdGRmWFpoY2lCVlBXNWxkeUJMWWp0bWRXNWpkR2x2YmlCTVlpaGhLWHRoUGo0K1BUQTdZVDQ5VlM1ellpWW1NRDA5UFMwdFZTNW5aWFFvWVNrdVFtSW1KbFV1ZUdJb1lTbDlYRzUyWVhJZ1ZqMWhQVDU3YVdZb0lXRXBkR2h5YjNjZ2JtVjNJRk1vWENKRFlXNXViM1FnZFhObElHUmxiR1YwWldRZ2RtRnNMaUJvWVc1a2JHVWdQU0JjSWl0aEtUdHlaWFIxY200Z1ZTNW5aWFFvWVNrdWRtRnNkV1Y5TEZjOVlUMCtlM04zYVhSamFDaGhLWHRqWVhObElIWnZhV1FnTURweVpYUjFjbTRnTVR0allYTmxJRzUxYkd3NmNtVjBkWEp1SURJN1kyRnpaU0FoTURweVpYUjFjbTRnTXp0allYTmxJQ0V4T25KbGRIVnliaUEwTzJSbFptRjFiSFE2Y21WMGRYSnVJRlV1ZDJJb2UwSmlPakVzZG1Gc2RXVTZZWDBwZlgwN1puVnVZM1JwYjI0Z1RXSW9ZU2w3Y21WMGRYSnVJSFJvYVhNdVpuSnZiVmRwY21WVWVYQmxLSGNvS1Z0aFBqNCtNajQrUGpCZEtYMWNiblpoY2lCT1lqMG9ZU3hpS1QwK2UzTjNhWFJqYUNoaUtYdGpZWE5sSURRNmNtVjBkWEp1SUdaMWJtTjBhVzl1S0dNcGUzWmhjaUJrUFhSb2FYTXVabkp2YlZkcGNtVlVlWEJsTzIwdVluVm1abVZ5SVQxdUxtSjFabVpsY2lZbWNDZ3BPM0psZEhWeWJpQmtMbU5oYkd3b2RHaHBjeXg2WVZ0alBqNCtNajQrUGpCZEtYMDdZMkZ6WlNBNE9uSmxkSFZ5YmlCbWRXNWpkR2x2YmloaktYdHlaWFIxY200Z2RHaHBjeTVtY205dFYybHlaVlI1Y0dVb2FHRW9LVnRqUGo0K016NCtQakJkS1gwN1pHVm1ZWFZzZERwMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtHQnBiblpoYkdsa0lHWnNiMkYwSUhkcFpIUm9JQ2drZTJKOUtUb2dKSHRoZldBcE8zMTlPMloxYm1OMGFXOXVJRTlpS0dFcGUzSmxkSFZ5YmlCMGFHbHpMbVp5YjIxWGFYSmxWSGx3WlNoNktDbGJZVDQrUGpJK1BqNHdYU2w5WEc1MllYSWdVR0k5WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlGUmxlSFJFWldOdlpHVnlQMjVsZHlCVVpYaDBSR1ZqYjJSbGNpaGNJblYwWmkweE5teGxYQ0lwT25admFXUWdNQ3hSWWowb1lTeGlLVDArZTNaaGNpQmpQV0UrUGpFN1ptOXlLSFpoY2lCa1BXTXJZaTh5T3lFb1l6NDlaQ2ttSm1OaEtDbGJZejQrUGpCZE95a3JLMk03WXp3OFBURTdhV1lvTXpJOFl5MWhKaVpRWWlseVpYUjFjbTRnVUdJdVpHVmpiMlJsS0hRb0tTNXpiR2xqWlNoaExHTXBLVHRqUFZ3aVhDSTdabTl5S0dROU1Ec2hLR1ErUFdJdk1pazdLeXRrS1h0MllYSWdaVDEyS0NsYllTc3lLbVErUGo0eFBqNCtNRjA3YVdZb01EMDlaU2xpY21WaGF6dGpLejFUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0dVcGZYSmxkSFZ5YmlCamZTeFNZajBvWVN4aUxHTXBQVDU3ZG05cFpDQXdQVDA5WXlZbUtHTTlNakUwTnpRNE16WTBOeWs3YVdZb01qNWpLWEpsZEhWeWJpQXdPMk10UFRJN2RtRnlJR1E5WWp0alBXTThNaXBoTG14bGJtZDBhRDlqTHpJNllTNXNaVzVuZEdnN1ptOXlLSFpoY2lCbFBUQTdaVHhqT3lzclpTbDdkbUZ5SUdZOVlTNWphR0Z5UTI5a1pVRjBLR1VwTzNZb0tWdGlQajQrTVQ0K1BqQmRQV1k3WWlzOU1uMTJLQ2xiWWo0K1BqRStQajR3WFQwd08zSmxkSFZ5YmlCaUxXUjlMRk5pUFdFOVBqSXFZUzVzWlc1bmRHZ3NYRzVVWWowb1lTeGlLVDArZTJadmNpaDJZWElnWXowd0xHUTlYQ0pjSWpzaEtHTStQV0l2TkNrN0tYdDJZWElnWlQxM0tDbGJZU3MwS21NK1BqNHlQajQrTUYwN2FXWW9NRDA5WlNsaWNtVmhhenNySzJNN05qVTFNelk4UFdVL0tHVXRQVFkxTlRNMkxHUXJQVk4wY21sdVp5NW1jbTl0UTJoaGNrTnZaR1VvTlRVeU9UWjhaVDQrTVRBc05UWXpNakI4WlNZeE1ESXpLU2s2WkNzOVUzUnlhVzVuTG1aeWIyMURhR0Z5UTI5a1pTaGxLWDF5WlhSMWNtNGdaSDBzVldJOUtHRXNZaXhqS1QwK2UySStQajQ5TUR0MmIybGtJREE5UFQxakppWW9ZejB5TVRRM05EZ3pOalEzS1R0cFppZzBQbU1wY21WMGRYSnVJREE3ZG1GeUlHUTlZanRqUFdRcll5MDBPMlp2Y2loMllYSWdaVDB3TzJVOFlTNXNaVzVuZEdnN0t5dGxLWHQyWVhJZ1pqMWhMbU5vWVhKRGIyUmxRWFFvWlNrN2FXWW9OVFV5T1RZOFBXWW1KalUzTXpRelBqMW1LWHQyWVhJZ2F6MWhMbU5vWVhKRGIyUmxRWFFvS3l0bEtUdG1QVFkxTlRNMkt5Z29aaVl4TURJektUdzhNVEFwZkdzbU1UQXlNMzEzS0NsYllqNCtQakkrUGo0d1hUMW1PMklyUFRRN2FXWW9ZaXMwUG1NcFluSmxZV3Q5ZHlncFcySStQajR5UGo0K01GMDlNRHR5WlhSMWNtNGdZaTFrZlN4V1lqMWhQVDU3Wm05eUtIWmhjaUJpUFRBc1l6MHdPMk04WVM1c1pXNW5kR2c3S3l0aktYdDJZWElnWkQxY2JtRXVZMmhoY2tOdlpHVkJkQ2hqS1RzMU5USTVOanc5WkNZbU5UY3pORE0rUFdRbUppc3JZenRpS3owMGZYSmxkSFZ5YmlCaWZTeFhZajFoUFQ1N2FXWW9JWGxoS1hSeWVYdHBaaWhoS0Nrc0lVZGhLQ2twZEhKNWUwVS9hR0lvU1NrNldHRW9TU2w5WTJGMFkyZ29ZaWw3WWlCcGJuTjBZVzVqWlc5bUlFOWhmSHhjSW5WdWQybHVaRndpUFQxaWZIeHVZU2d4TEdJcGZYMWpZWFJqYUNoaUtYdGlJR2x1YzNSaGJtTmxiMllnVDJGOGZGd2lkVzUzYVc1a1hDSTlQV0o4Zkc1aEtERXNZaWw5ZlR0bWRXNWpkR2x2YmlCWVlpaGhLWHRoUGo0K1BUQTdYQ0ptZFc1amRHbHZibHdpUFQwOWRIbHdaVzltSUVGMGIyMXBZM011VkdJbUppaEJkRzl0YVdOekxsUmlLSGNvS1N4aFBqNCtNaXhoS1M1MllXeDFaUzUwYUdWdUtHSmlLU3hoS3oweE1qZ3NRWFJ2YldsamN5NXpkRzl5WlNoM0tDa3NZVDQrUGpJc01Ta3BmVUV1WDE5bGJYTmpjbWx3ZEdWdVgzUm9jbVZoWkY5dFlXbHNZbTk0WDJGM1lXbDBQVmhpTzNaaGNpQmlZajBvS1QwK2UzWmhjaUJoUFdGaUtDazdZU1ltS0ZoaUtHRXBMRmRpS0NncFBUNVpZaWdwS1NsOU8wRXVZMmhsWTJ0TllXbHNZbTk0UFdKaU8zWmhjaUFrWWoxaFBUNTdkbUZ5SUdJOVdtSW9LVHRoUFdFb0tUdGxZaWhpS1R0eVpYUjFjbTRnWVgwN1hHNW1kVzVqZEdsdmJpQlFLR0VzWWlsN2RtRnlJR005WVhKbmRXMWxiblJ6TG14bGJtZDBhQzB5TEdROVlYSm5kVzFsYm5Sek8zSmxkSFZ5YmlBa1lpZ29LVDArZTJadmNpaDJZWElnWlQweUttTXNaajFoWXlnNEttVXBMR3M5Wmo0K1BqTXNiRDB3TzJ3OFl6dHNLeXNwZTNaaGNpQnhQV1JiTWl0c1hUdGNJbUpwWjJsdWRGd2lQVDEwZVhCbGIyWWdjVDhvU2x0ckt6SXFiRjA5TVc0c1NsdHJLeklxYkNzeFhUMXhLVG9vU2x0ckt6SXFiRjA5TUc0c2FHRW9LVnRyS3pJcWJDc3hQajQrTUYwOWNTbDljbVYwZFhKdUlHSmpLR0VzWlN4bUxHSXBmU2w5WEc1MllYSWdZMk05VzEwc1pXTTlLR0VzWWlrOVBudDJZWElnWXoxSFlsdGhYVHRwWmloMmIybGtJREE5UFQxaktYUm9jbTkzSUdFOVpHTW9ZU2tzWXoxU0tHRXBMRmdvWVNrc2JtVjNJRk1vWWl0Y0lpQm9ZWE1nZFc1cmJtOTNiaUIwZVhCbElGd2lLMk1wTzNKbGRIVnliaUJqZlN4bVl6MTdmU3huWXoxaFBUNTdkbUZ5SUdJOVptTmJZVjA3Y21WMGRYSnVJSFp2YVdRZ01EMDlQV0kvVWloaEtUcGlmU3hvWXoxYlhTeHBZejBvS1QwK1hDSnZZbXBsWTNSY0lqMDlkSGx3Wlc5bUlHZHNiMkpoYkZSb2FYTS9aMnh2WW1Gc1ZHaHBjenBHZFc1amRHbHZiaWhjSW5KbGRIVnliaUIwYUdselhDSXBLQ2tzYW1NOVlUMCtlM1poY2lCaVBXaGpMbXhsYm1kMGFEdG9ZeTV3ZFhOb0tHRXBPM0psZEhWeWJpQmlmU3hyWXowb1lTeGlLVDArZTJadmNpaDJZWElnWXoxQmNuSmhlU2hoS1N4a1BUQTdaRHhoT3lzclpDbGpXMlJkUFdWaktIb29LVnRpS3pRcVpENCtQakkrUGo0d1hTeGNJbkJoY21GdFpYUmxjaUJjSWl0a0tUdHlaWFIxY200Z1kzMHNiV005WVQwK2UybG1LSFp2YVdRZ01EMDlQV0VwY21WMGRYSnVYQ0pmZFc1cmJtOTNibHdpTzJFOVlTNXlaWEJzWVdObEtDOWJYbUV0ZWtFdFdqQXRPVjlkTDJjc1hDSWtYQ0lwTzNaaGNpQmlQV0V1WTJoaGNrTnZaR1ZCZENnd0tUdHlaWFIxY200Z05EZzhQV0ltSmpVM1BqMWlQMkJmSkh0aGZXQTZYRzVoZlN4dVl6MTdmVHRtZFc1amRHbHZiaUJ2WXloaExHSXBlMkU5YldNb1lTazdjbVYwZFhKdWUxdGhYVHBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJpTG1Gd2NHeDVLSFJvYVhNc1lYSm5kVzFsYm5SektYMTlXMkZkZldaMWJtTjBhVzl1SUhCaktHRXBlM1poY2lCaVBVWjFibU4wYVc5dU8ybG1LQ0VvWWlCcGJuTjBZVzVqWlc5bUlFWjFibU4wYVc5dUtTbDBhSEp2ZHlCdVpYY2dWSGx3WlVWeWNtOXlLR0J1WlhkZklHTmhiR3hsWkNCM2FYUm9JR052Ym5OMGNuVmpkRzl5SUhSNWNHVWdKSHQwZVhCbGIyWWdZbjBnZDJocFkyZ2dhWE1nYm05MElHRWdablZ1WTNScGIyNWdLVHQyWVhJZ1l6MXZZeWhpTG01aGJXVjhmRndpZFc1cmJtOTNia1oxYm1OMGFXOXVUbUZ0WlZ3aUxHWjFibU4wYVc5dUtDbDdmU2s3WXk1d2NtOTBiM1I1Y0dVOVlpNXdjbTkwYjNSNWNHVTdZejF1WlhjZ1l6dGhQV0l1WVhCd2JIa29ZeXhoS1R0eVpYUjFjbTRnWVNCcGJuTjBZVzVqWlc5bUlFOWlhbVZqZEQ5aE9tTjlYRzUyWVhJZ2NXTTlZVDArZTJadmNpaDJZWElnWWoxY0lsd2lMR005TUR0alBHRTdLeXRqS1dJclBTZ3dJVDA5WXo5Y0lpd2dYQ0k2WENKY0lpa3JYQ0poY21kY0lpdGpPM1poY2lCa1BWd2ljbVYwZFhKdUlHWjFibU4wYVc5dUlHVnRkbUZzWDJGc2JHOWpZWFJ2Y2w5Y0lpdGhLMXdpS0dOdmJuTjBjblZqZEc5eUxDQmhjbWRVZVhCbGN5d2dZWEpuY3lrZ2UxeGNiaUFnZG1GeUlFaEZRVkJWTXpJZ1BTQm5aWFJOWlcxdmNua29LVHRjWEc1Y0lqdG1iM0lvWXowd08yTThZVHNySzJNcFpDczlYQ0oyWVhJZ1lYSm5WSGx3WlZ3aUsyTXJYQ0lnUFNCeVpYRjFhWEpsVW1WbmFYTjBaWEpsWkZSNWNHVW9TRVZCVUZVek1sc29LR0Z5WjFSNWNHVnpLVDQrUGpJcFhTd2dKM0JoY21GdFpYUmxjaUJjSWl0aksxd2lKeWs3WEZ4dWRtRnlJR0Z5WjF3aUsyTXJYQ0lnUFNCaGNtZFVlWEJsWENJcll5dGNJaTV5WldGa1ZtRnNkV1ZHY205dFVHOXBiblJsY2loaGNtZHpLVHRjWEc1aGNtZHpJQ3M5SUdGeVoxUjVjR1ZjSWl0aksxd2lXeWRoY21kUVlXTnJRV1IyWVc1alpTZGRPMXhjYm1GeVoxUjVjR1Z6SUNzOUlEUTdYRnh1WENJN2NtVjBkWEp1S0c1bGR5QkdkVzVqZEdsdmJpaGNJbkpsY1hWcGNtVlNaV2RwYzNSbGNtVmtWSGx3WlZ3aUxGd2lUVzlrZFd4bFhDSXNYQ0oyWVd4MVpWUnZTR0Z1Wkd4bFhDSXNYQ0puWlhSTlpXMXZjbmxjSWl4a0t5aGNJblpoY2lCdlltb2dQU0J1WlhjZ1kyOXVjM1J5ZFdOMGIzSW9YQ0lyWEc1aUsxd2lLVHRjWEc1eVpYUjFjbTRnZG1Gc2RXVlViMGhoYm1Sc1pTaHZZbW9wTzF4Y2JuMWNYRzVjSWlrcEtTaGxZeXhCTEZjc0tDazlQbm9vS1NsOUxISmpQWHQ5TEZrOVlUMCtNRDA5UFdFbE5DWW1LREFoUFQxaEpURXdNSHg4TUQwOVBXRWxOREF3S1N4ell6MWJNQ3d6TVN3Mk1DdzVNU3d4TWpFc01UVXlMREU0TWl3eU1UTXNNalEwTERJM05Dd3pNRFVzTXpNMVhTeDBZejFiTUN3ek1TdzFPU3c1TUN3eE1qQXNNVFV4TERFNE1Td3lNVElzTWpRekxESTNNeXd6TURRc016TTBYVHRtZFc1amRHbHZiaUIxWXloaExHSXNZeXhrTEdVc1ppeHJLWHR5WlhSMWNtNGdSVDlRS0RFMkxERXNZU3hpTEdNc1pDeGxMR1lzYXlrNkxUVXlmV1oxYm1OMGFXOXVJSFpqS0dFc1lpeGpMR1FzWlN4bUtYdHBaaWhGS1hKbGRIVnliaUJRS0RFM0xERXNZU3hpTEdNc1pDeGxMR1lwZlZ4dWRtRnlJSGhqUFdFOVBudDJZWElnWWoxd1lpaGhLU3N4TEdNOWQyTW9ZaWs3WXlZbWNtSW9ZU3hqTEdJcE8zSmxkSFZ5YmlCamZTeDVZejE3ZlN4Qll6MG9LVDArZTJsbUtDRjZZeWw3ZG1GeUlHRTllMVZUUlZJNlhDSjNaV0pmZFhObGNsd2lMRXhQUjA1QlRVVTZYQ0ozWldKZmRYTmxjbHdpTEZCQlZFZzZYQ0l2WENJc1VGZEVPbHdpTDF3aUxFaFBUVVU2WENJdmFHOXRaUzkzWldKZmRYTmxjbHdpTEV4QlRrYzZLRndpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJ1WVhacFoyRjBiM0ltSm01aGRtbG5ZWFJ2Y2k1c1lXNW5kV0ZuWlhNbUptNWhkbWxuWVhSdmNpNXNZVzVuZFdGblpYTmJNRjE4ZkZ3aVExd2lLUzV5WlhCc1lXTmxLRndpTFZ3aUxGd2lYMXdpS1N0Y0lpNVZWRVl0T0Z3aUxGODZiV0Y4ZkZ3aUxpOTBhR2x6TG5CeWIyZHlZVzFjSW4wc1lqdG1iM0lvWWlCcGJpQjVZeWwyYjJsa0lEQTlQVDE1WTF0aVhUOWtaV3hsZEdVZ1lWdGlYVHBoVzJKZFBYbGpXMkpkTzNaaGNpQmpQVnRkTzJadmNpaGlJR2x1SUdFcFl5NXdkWE5vS0dBa2UySjlQU1I3WVZ0aVhYMWdLVHQ2WXoxamZYSmxkSFZ5YmlCNlkzMHNlbU03WEc1bWRXNWpkR2x2YmlCQ1l5aGhMR0lwZTJsbUtFVXBjbVYwZFhKdUlGQW9NVGdzTVN4aExHSXBPMkUrUGo0OU1EdGlQajQrUFRBN2RtRnlJR005TUR0Qll5Z3BMbVp2Y2tWaFkyZ29LR1FzWlNrOVBudDJZWElnWmoxaUsyTTdaVDE2S0NsYllTczBLbVUrUGo0eVBqNCtNRjA5Wmp0bWIzSW9aajB3TzJZOFpDNXNaVzVuZEdnN0t5dG1LV2dvS1Z0bEt5cytQajR3UGo0K01GMDlaQzVqYUdGeVEyOWtaVUYwS0dZcE8yZ29LVnRsUGo0K01ENCtQakJkUFRBN1l5czlaQzVzWlc1bmRHZ3JNWDBwTzNKbGRIVnliaUF3ZldaMWJtTjBhVzl1SUVOaktHRXNZaWw3YVdZb1JTbHlaWFIxY200Z1VDZ3hPU3d4TEdFc1lpazdZVDQrUGowd08ySStQajQ5TUR0MllYSWdZejFCWXlncE8zb29LVnRoUGo0K01qNCtQakJkUFdNdWJHVnVaM1JvTzNaaGNpQmtQVEE3WXk1bWIzSkZZV05vS0dVOVBtUXJQV1V1YkdWdVozUm9LekVwTzNvb0tWdGlQajQrTWo0K1BqQmRQV1E3Y21WMGRYSnVJREI5Wm5WdVkzUnBiMjRnUkdNb1lTbDdjbVYwZFhKdUlFVS9VQ2d5TUN3eExHRXBPalV5ZldaMWJtTjBhVzl1SUVWaktHRXNZaXhqTEdRcGUzSmxkSFZ5YmlCRlAxQW9NakVzTVN4aExHSXNZeXhrS1RvMU1uMWNibVoxYm1OMGFXOXVJRVpqS0dFc1lpeGpMR1FwZTNKbGRIVnliaUJGUDFBb01qSXNNU3hoTEdJc1l5eGtLVG8zTUgxMllYSWdSMk05VzI1MWJHd3NXMTBzVzExZE8yWjFibU4wYVc5dUlFaGpLR0VzWWl4akxHUXBlMmxtS0VVcGNtVjBkWEp1SUZBb01qTXNNU3hoTEdJc1l5eGtLVHRpUGo0K1BUQTdZejQrUGowd08yUStQajQ5TUR0bWIzSW9kbUZ5SUdVOU1DeG1QVEE3Wmp4ak8yWXJLeWw3ZG1GeUlHczllaWdwVzJJK1BqNHlQajQrTUYwc2JEMTZLQ2xiWWlzMFBqNCtNajQrUGpCZE8ySXJQVGc3Wm05eUtIWmhjaUJ4UFRBN2NUeHNPM0VyS3lsN2RtRnlJSEk5ZENncFcyc3JjVDQrUGpCZExIZzlSMk5iWVYwN01EMDlQWEo4ZkRFd1BUMDljajhvS0RFOVBUMWhQM2RoT2tjcEtGUmhLSGdzTUNrcExIZ3ViR1Z1WjNSb1BUQXBPbmd1Y0hWemFDaHlLWDFsS3oxc2ZYb29LVnRrUGo0K01qNCtQakJkUFdVN2NtVjBkWEp1SURCOWRtRnlJRWxqUFZzek1Td3lPU3d6TVN3ek1Dd3pNU3d6TUN3ek1Td3pNU3d6TUN3ek1Td3pNQ3d6TVYwc1NtTTlXek14TERJNExETXhMRE13TERNeExETXdMRE14TERNeExETXdMRE14TERNd0xETXhYVHRtZFc1amRHbHZiaUJMWXloaEtYdDJZWElnWWoxQmNuSmhlU2h3WWloaEtTc3hLVHR4WWloaExHSXNNQ3hpTG14bGJtZDBhQ2s3Y21WMGRYSnVJR0o5WEc1MllYSWdUR005S0dFc1lpazlQbnRvS0NrdWMyVjBLR0VzWWo0K1BqQXBmVHRjYm1aMWJtTjBhVzl1SUUxaktHRXNZaXhqTEdRcGUyWjFibU4wYVc5dUlHVW9aeXgxTEhrcGUyWnZjaWhuUFZ3aWJuVnRZbVZ5WENJOVBYUjVjR1Z2WmlCblAyY3VkRzlUZEhKcGJtY29LVHBuZkh4Y0lsd2lPMmN1YkdWdVozUm9QSFU3S1djOWVWc3dYU3RuTzNKbGRIVnliaUJuZldaMWJtTjBhVzl1SUdZb1p5eDFLWHR5WlhSMWNtNGdaU2huTEhVc1hDSXdYQ0lwZldaMWJtTjBhVzl1SUdzb1p5eDFLWHRtZFc1amRHbHZiaUI1S0d4aktYdHlaWFIxY200Z01ENXNZejh0TVRvd1BHeGpQekU2TUgxMllYSWdVVHN3UFQwOUtGRTllU2huTG1kbGRFWjFiR3haWldGeUtDa3RkUzVuWlhSR2RXeHNXV1ZoY2lncEtTa21KakE5UFQwb1VUMTVLR2N1WjJWMFRXOXVkR2dvS1MxMUxtZGxkRTF2Ym5Sb0tDa3BLU1ltS0ZFOWVTaG5MbWRsZEVSaGRHVW9LUzExTG1kbGRFUmhkR1VvS1NrcE8zSmxkSFZ5YmlCUmZXWjFibU4wYVc5dUlHd29aeWw3YzNkcGRHTm9LR2N1WjJWMFJHRjVLQ2twZTJOaGMyVWdNRHB5WlhSMWNtNGdibVYzSUVSaGRHVW9aeTVuWlhSR2RXeHNXV1ZoY2lncExURXNNVEVzTWprcE8yTmhjMlVnTVRweVpYUjFjbTRnWnp0allYTmxJREk2Y21WMGRYSnVJRzVsZHlCRVlYUmxLR2N1WjJWMFJuVnNiRmxsWVhJb0tTd3dMRE1wTzJOaGMyVWdNenB5WlhSMWNtNGdibVYzSUVSaGRHVW9aeTVuWlhSR2RXeHNXV1ZoY2lncExGeHVNQ3d5S1R0allYTmxJRFE2Y21WMGRYSnVJRzVsZHlCRVlYUmxLR2N1WjJWMFJuVnNiRmxsWVhJb0tTd3dMREVwTzJOaGMyVWdOVHB5WlhSMWNtNGdibVYzSUVSaGRHVW9aeTVuWlhSR2RXeHNXV1ZoY2lncExURXNNVEVzTXpFcE8yTmhjMlVnTmpweVpYUjFjbTRnYm1WM0lFUmhkR1VvWnk1blpYUkdkV3hzV1dWaGNpZ3BMVEVzTVRFc016QXBmWDFtZFc1amRHbHZiaUJ4S0djcGUzWmhjaUIxUFdjdWNHSTdabTl5S0djOWJtVjNJRVJoZEdVb0tHNWxkeUJFWVhSbEtHY3VjV0lyTVRrd01Dd3dMREVwS1M1blpYUlVhVzFsS0NrcE96QThkVHNwZTNaaGNpQjVQV2N1WjJWMFRXOXVkR2dvS1N4UlBTaFpLR2N1WjJWMFJuVnNiRmxsWVhJb0tTay9TV002U21NcFczbGRPMmxtS0hVK1VTMW5MbWRsZEVSaGRHVW9LU2wxTFQxUkxXY3VaMlYwUkdGMFpTZ3BLekVzWnk1elpYUkVZWFJsS0RFcExERXhQbmsvWnk1elpYUk5iMjUwYUNoNUt6RXBPaWhuTG5ObGRFMXZiblJvS0RBcExHY3VjMlYwUm5Wc2JGbGxZWElvWnk1blpYUkdkV3hzV1dWaGNpZ3BLekVwS1R0bGJITmxlMmN1YzJWMFJHRjBaU2huTG1kbGRFUmhkR1VvS1N0MUtUdGljbVZoYTMxOWVUMXVaWGNnUkdGMFpTaG5MbWRsZEVaMWJHeFpaV0Z5S0Nrck1Td3dMRFFwTzNVOWJDaHVaWGNnUkdGMFpTaG5MbWRsZEVaMWJHeFpaV0Z5S0Nrc1hHNHdMRFFwS1R0NVBXd29lU2s3Y21WMGRYSnVJREErUFdzb2RTeG5LVDh3UGoxcktIa3NaeWsvWnk1blpYUkdkV3hzV1dWaGNpZ3BLekU2Wnk1blpYUkdkV3hzV1dWaGNpZ3BPbWN1WjJWMFJuVnNiRmxsWVhJb0tTMHhmV0UrUGo0OU1EdGlQajQrUFRBN1l6NCtQajB3TzJRK1BqNDlNRHQyWVhJZ2NqMTZLQ2xiWkNzME1ENCtQakkrUGo0d1hUdGtQWHRSWWpwM0tDbGJaRDQrUGpJK1BqNHdYU3hRWWpwM0tDbGJaQ3MwUGo0K01qNCtQakJkTEhSaU9uY29LVnRrS3pnK1BqNHlQajQrTUYwc2VXSTZkeWdwVzJRck1USStQajR5UGo0K01GMHNkV0k2ZHlncFcyUXJNVFkrUGo0eVBqNCtNRjBzY1dJNmR5Z3BXMlFyTWpBK1BqNHlQajQrTUYwc2EySTZkeWdwVzJRck1qUStQajR5UGo0K01GMHNjR0k2ZHlncFcyUXJNamcrUGo0eVBqNCtNRjBzVjJJNmR5Z3BXMlFyTXpJK1BqNHlQajQrTUYwc1QySTZkeWdwVzJRck16WStQajR5UGo0K01GMHNVbUk2Y2o5VllTaHlLVHBjSWx3aWZUdGpQVlZoS0dNcE8zSTllMXdpSldOY0lqcGNJaVZoSUNWaUlDVmtJQ1ZJT2lWTk9pVlRJQ1ZaWENJc1hDSWxSRndpT2x3aUpXMHZKV1F2SlhsY0lpeGNJaVZHWENJNlhDSWxXUzBsYlMwbFpGd2lMRndpSldoY0lqcGNJaVZpWENJc1hDSWxjbHdpT2x3aUpVazZKVTA2SlZNZ0pYQmNJaXhjSWlWU1hDSTZYQ0lsU0RvbFRWd2lMRndpSlZSY0lqcGNJaVZJT2lWTk9pVlRYQ0lzWENJbGVGd2lPbHdpSlcwdkpXUXZKWGxjSWl4Y2Jsd2lKVmhjSWpwY0lpVklPaVZOT2lWVFhDSXNYQ0lsUldOY0lqcGNJaVZqWENJc1hDSWxSVU5jSWpwY0lpVkRYQ0lzWENJbFJYaGNJanBjSWlWdEx5VmtMeVY1WENJc1hDSWxSVmhjSWpwY0lpVklPaVZOT2lWVFhDSXNYQ0lsUlhsY0lqcGNJaVY1WENJc1hDSWxSVmxjSWpwY0lpVlpYQ0lzWENJbFQyUmNJanBjSWlWa1hDSXNYQ0lsVDJWY0lqcGNJaVZsWENJc1hDSWxUMGhjSWpwY0lpVklYQ0lzWENJbFQwbGNJanBjSWlWSlhDSXNYQ0lsVDIxY0lqcGNJaVZ0WENJc1hDSWxUMDFjSWpwY0lpVk5YQ0lzWENJbFQxTmNJanBjSWlWVFhDSXNYQ0lsVDNWY0lqcGNJaVYxWENJc1hDSWxUMVZjSWpwY0lpVlZYQ0lzWENJbFQxWmNJanBjSWlWV1hDSXNYQ0lsVDNkY0lqcGNJaVYzWENJc1hDSWxUMWRjSWpwY0lpVlhYQ0lzWENJbFQzbGNJanBjSWlWNVhDSjlPMlp2Y2loMllYSWdlQ0JwYmlCeUtXTTlZeTV5WlhCc1lXTmxLRzVsZHlCU1pXZEZlSEFvZUN4Y0ltZGNJaWtzY2x0NFhTazdkbUZ5SUVNOVhDSlRkVzVrWVhrZ1RXOXVaR0Y1SUZSMVpYTmtZWGtnVjJWa2JtVnpaR0Y1SUZSb2RYSnpaR0Y1SUVaeWFXUmhlU0JUWVhSMWNtUmhlVndpTG5Od2JHbDBLRndpSUZ3aUtTeE9QVndpU21GdWRXRnllU0JHWldKeWRXRnllU0JOWVhKamFDQkJjSEpwYkNCTllYa2dTblZ1WlNCS2RXeDVJRUYxWjNWemRDQlRaWEIwWlcxaVpYSWdUMk4wYjJKbGNpQk9iM1psYldKbGNpQkVaV05sYldKbGNsd2lMbk53YkdsMEtGd2lJRndpS1R0eVBYdGNJaVZoWENJNlp6MCtRMXRuTG10aVhTNXpkV0p6ZEhKcGJtY29NQ3d6S1N4Y0lpVkJYQ0k2WnowK1hHNURXMmN1YTJKZExGd2lKV0pjSWpwblBUNU9XMmN1ZFdKZExuTjFZbk4wY21sdVp5Z3dMRE1wTEZ3aUpVSmNJanBuUFQ1T1cyY3VkV0pkTEZ3aUpVTmNJanBuUFQ1bUtDaG5MbkZpS3pFNU1EQXBMekV3TUh3d0xESXBMRndpSldSY0lqcG5QVDVtS0djdWVXSXNNaWtzWENJbFpWd2lPbWM5UG1Vb1p5NTVZaXd5TEZ3aUlGd2lLU3hjSWlWblhDSTZaejArY1NobktTNTBiMU4wY21sdVp5Z3BMbk4xWW5OMGNtbHVaeWd5S1N4Y0lpVkhYQ0k2WnowK2NTaG5LU3hjSWlWSVhDSTZaejArWmlobkxuUmlMRElwTEZ3aUpVbGNJanBuUFQ1N1p6MW5MblJpT3pBOVBXYy9aejB4TWpveE1qeG5KaVlvWnkwOU1USXBPM0psZEhWeWJpQm1LR2NzTWlsOUxGd2lKV3BjSWpwblBUNTdabTl5S0haaGNpQjFQVEFzZVQwd08zazhQV2N1ZFdJdE1UdDFLejBvV1NobkxuRmlLekU1TURBcFAwbGpPa3BqS1Z0NUt5dGRLVHR5WlhSMWNtNGdaaWhuTG5saUszVXNNeWw5TEZ3aUpXMWNJanBuUFQ1bUtHY3VkV0lyTVN3eUtTeGNJaVZOWENJNlp6MCtaaWhuTGxCaUxESXBMRndpSlc1Y0lqb29LVDArWENKY1hHNWNJaXhjSWlWd1hDSTZaejArTUR3OVp5NTBZaVltTVRJK1p5NTBZajljSWtGTlhDSTZYQ0pRVFZ3aUxGd2lKVk5jSWpwblBUNW1LR2N1VVdJc01pa3NYQ0lsZEZ3aU9pZ3BQVDVjSWx4Y2RGd2lMRndpSlhWY0lqcG5QVDVuTG10aWZIdzNMRndpSlZWY0lqcG5QVDVtS0UxaGRHZ3VabXh2YjNJb0tHY3VjR0lyTnkxbkxtdGlLUzljYmpjcExESXBMRndpSlZaY0lqcG5QVDU3ZG1GeUlIVTlUV0YwYUM1bWJHOXZjaWdvWnk1d1lpczNMU2huTG10aUt6WXBKVGNwTHpjcE96SStQU2huTG10aUt6TTNNUzFuTG5CaUxUSXBKVGNtSm5Vckt6dHBaaWgxS1RVelBUMTFKaVlvZVQwb1p5NXJZaXN6TnpFdFp5NXdZaWtsTnl3MFBUMTVmSHd6UFQxNUppWlpLR2N1Y1dJcGZId29kVDB4S1NrN1pXeHpaWHQxUFRVeU8zWmhjaUI1UFNobkxtdGlLemN0Wnk1d1lpMHhLU1UzT3lnMFBUMTVmSHcxUFQxNUppWlpLR2N1Y1dJbE5EQXdMVEVwS1NZbWRTc3JmWEpsZEhWeWJpQm1LSFVzTWlsOUxGd2lKWGRjSWpwblBUNW5MbXRpTEZ3aUpWZGNJanBuUFQ1bUtFMWhkR2d1Wm14dmIzSW9LR2N1Y0dJck55MG9aeTVyWWlzMktTVTNLUzgzS1N3eUtTeGNJaVY1WENJNlp6MCtLR2N1Y1dJck1Ua3dNQ2t1ZEc5VGRISnBibWNvS1M1emRXSnpkSEpwYm1jb01pa3NYQ0lsV1Z3aU9tYzlQbWN1Y1dJck1Ua3dNQ3hjSWlWNlhDSTZaejArZTJjOVp5NVBZanQyWVhJZ2RUMHdQRDFuTzJjOVRXRjBhQzVoWW5Nb1p5a3ZOakE3Y21WMGRYSnVLSFUvWENJclhDSTZYQ0l0WENJcEsxTjBjbWx1WnloY0lqQXdNREJjSWlzb1p5ODJNQ294TURBclp5VTJNQ2twTG5Oc2FXTmxLQzAwS1gwc1hDSWxXbHdpT21jOVBtY3VVbUlzWENJbEpWd2lPaWdwUFQ1Y0lpVmNJbjA3WXoxakxuSmxjR3hoWTJVb0x5VWxMMmNzWENKY1hIZ3dNRnhjZURBd1hDSXBPMXh1Wm05eUtIZ2dhVzRnY2lsakxtbHVZMngxWkdWektIZ3BKaVlvWXoxakxuSmxjR3hoWTJVb2JtVjNJRkpsWjBWNGNDaDRMRndpWjF3aUtTeHlXM2hkS0dRcEtTazdZejFqTG5KbGNHeGhZMlVvTDF4Y01GeGNNQzluTEZ3aUpWd2lLVHQ0UFV0aktHTXBPMmxtS0hndWJHVnVaM1JvUG1JcGNtVjBkWEp1SURBN1RHTW9lQ3hoS1R0eVpYUjFjbTRnZUM1c1pXNW5kR2d0TVgxUExuWmlLQ2s3Wm05eUtIWmhjaUJPWXoxQmNuSmhlU2d5TlRZcExFOWpQVEE3TWpVMlBrOWpPeXNyVDJNcFRtTmJUMk5kUFZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb1QyTXBPMFZpUFU1ak8xTTlRUzVDYVc1a2FXNW5SWEp5YjNJOVkyeGhjM01nWlhoMFpXNWtjeUJGY25KdmNudGpiMjV6ZEhKMVkzUnZjaWhoS1h0emRYQmxjaWhoS1R0MGFHbHpMbTVoYldVOVhDSkNhVzVrYVc1blJYSnliM0pjSW4xOU8wRXVTVzUwWlhKdVlXeEZjbkp2Y2oxamJHRnpjeUJsZUhSbGJtUnpJRVZ5Y205eWUyTnZibk4wY25WamRHOXlLR0VwZTNOMWNHVnlLR0VwTzNSb2FYTXVibUZ0WlQxY0lrbHVkR1Z5Ym1Gc1JYSnliM0pjSW4xOU8xeHVUMkpxWldOMExtRnpjMmxuYmloTFlpNXdjbTkwYjNSNWNHVXNlMmRsZENoaEtYdHlaWFIxY200Z2RHaHBjeTVzWWx0aFhYMHNhR0Z6S0dFcGUzSmxkSFZ5YmlCMmIybGtJREFoUFQxMGFHbHpMbXhpVzJGZGZTeDNZaWhoS1h0MllYSWdZajEwYUdsekxucGlMbkJ2Y0NncGZIeDBhR2x6TG14aUxteGxibWQwYUR0MGFHbHpMbXhpVzJKZFBXRTdjbVYwZFhKdUlHSjlMSGhpS0dFcGUzUm9hWE11YkdKYllWMDlkbTlwWkNBd08zUm9hWE11ZW1JdWNIVnphQ2hoS1gxOUtUdFZMbXhpTG5CMWMyZ29lM1poYkhWbE9uWnZhV1FnTUgwc2UzWmhiSFZsT201MWJHeDlMSHQyWVd4MVpUb2hNSDBzZTNaaGJIVmxPaUV4ZlNrN1ZTNXpZajFWTG14aUxteGxibWQwYUR0QkxtTnZkVzUwWDJWdGRtRnNYMmhoYm1Sc1pYTTlLQ2s5UG50bWIzSW9kbUZ5SUdFOU1DeGlQVlV1YzJJN1lqeFZMbXhpTG14bGJtZDBhRHNySzJJcGRtOXBaQ0F3SVQwOVZTNXNZbHRpWFNZbUt5dGhPM0psZEhWeWJpQmhmVHRjYm5aaGNpQlFZejFiVm1Fc1YyRXNiR0lzYm1Jc2IySXNjMklzZEdJc2RXSXNkbUlzZDJJc2VHSXNlV0lzZW1Jc1FXSXNRbUlzUTJJc2RXTXNkbU1zUW1Nc1EyTXNSR01zUldNc1JtTXNTR05kTEZKalBYdGlPbVoxYm1OMGFXOXVLR0VzWWl4aktYdGhQajQrUFRBN0tHNWxkeUJwWWloaEtTa3VkbUlvWWo0K1BqQXNZejQrUGpBcE8ycGlQV0U3YTJJckt6dDBhSEp2ZHlCcVlqdDlMR1ZoT21aMWJtTjBhVzl1S0dFcGUxRmpLR0UrUGo0d0xDRkNMREVzSVc5aExERXpNVEEzTWl3aE1TazdUeTVGWWlncGZTeEZPbVoxYm1OMGFXOXVLR0VwZTJFK1BqNDlNRHRGUDNCdmMzUk5aWE56WVdkbEtIdGpiV1E2WENKamJHVmhiblZ3VkdoeVpXRmtYQ0lzZEdoeVpXRmtPbUY5S1Rvb0tHRTlUeTVxWWx0aFhTbDhmRWdvS1N4UExrTmlLR0VwS1gwc1Z6cHRZaXg1T201aUxHdGhPbTlpTEZNNmMySXNWVHAwWWl4TU9uVmlMR2xoT25aaUxHSmhPbmRpTEdoaE9uaGlMRWM2ZVdJc1ZEcDZZaXhST2tGaUxHcGhPa0ppTEZJNlEySXNTanBtZFc1amRHbHZiaWhoTEdJc1l5eGtMR1VwZTJFK1BqNDlNRHRpUGo0K1BUQTdZejQrUGowd08ySTlVaWhpS1R0MllYSWdaajB0TVNFOVlpNXBibVJsZUU5bUtGd2lkVndpS1R0bUppWW9aVDBvTVc0OFBEWTBiaWt0TVc0cE8xUW9ZU3g3Ym1GdFpUcGlMR1p5YjIxWGFYSmxWSGx3WlRwclBUNWNibXNzZEc5WGFYSmxWSGx3WlRwbWRXNWpkR2x2YmlockxHd3BlMmxtS0Z3aVltbG5hVzUwWENJaFBYUjVjR1Z2WmlCc0ppWmNJbTUxYldKbGNsd2lJVDEwZVhCbGIyWWdiQ2wwYUhKdmR5QnVaWGNnVkhsd1pVVnljbTl5S0dCRFlXNXViM1FnWTI5dWRtVnlkQ0JjSWlSN1JHSW9iQ2w5WENJZ2RHOGdKSHQwYUdsekxtNWhiV1Y5WUNrN2FXWW9iRHhrZkh4c1BtVXBkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhnVUdGemMybHVaeUJoSUc1MWJXSmxjaUJjSWlSN1JHSW9iQ2w5WENJZ1puSnZiU0JLVXlCemFXUmxJSFJ2SUVNdlF5c3JJSE5wWkdVZ2RHOGdZVzRnWVhKbmRXMWxiblFnYjJZZ2RIbHdaU0JjSWlSN1luMWNJaXdnZDJocFkyZ2dhWE1nYjNWMGMybGtaU0IwYUdVZ2RtRnNhV1FnY21GdVoyVWdXeVI3Wkgwc0lDUjdaWDFkSVdBcE8zSmxkSFZ5YmlCc2ZTeGhjbWRRWVdOclFXUjJZVzVqWlRvNExISmxZV1JXWVd4MVpVWnliMjFRYjJsdWRHVnlPa3BpS0dJc1l5d2haaWtzY21JNmJuVnNiSDBwZlN4eFlUcG1kVzVqZEdsdmJpaGhMR0lzWXl4a0tYdGhQajQrUFRBN1lqMVNLR0krUGo0d0tUdFVLR0VzZTI1aGJXVTZZaXhtY205dFYybHlaVlI1Y0dVNlpuVnVZM1JwYjI0b1pTbDdjbVYwZFhKdUlTRmxmU3gwYjFkcGNtVlVlWEJsT21aMWJtTjBhVzl1S0dVc1ppbDdjbVYwZFhKdUlHWS9ZenBrZlN4aGNtZFFZV05yUVdSMllXNWpaVG80TEZ4dWNtVmhaRlpoYkhWbFJuSnZiVkJ2YVc1MFpYSTZablZ1WTNScGIyNG9aU2w3Y21WMGRYSnVJSFJvYVhNdVpuSnZiVmRwY21WVWVYQmxLSFFvS1Z0bFBqNCtNRjBwZlN4eVlqcHVkV3hzZlNsOUxIQmhPbVoxYm1OMGFXOXVLR0VzWWlsN1lUNCtQajB3TzJJOVVpaGlQajQrTUNrN1ZDaGhMSHR1WVcxbE9tSXNabkp2YlZkcGNtVlVlWEJsT21NOVBudDJZWElnWkQxV0tHTXBPMHhpS0dNcE8zSmxkSFZ5YmlCa2ZTeDBiMWRwY21WVWVYQmxPaWhqTEdRcFBUNVhLR1FwTEdGeVoxQmhZMnRCWkhaaGJtTmxPamdzY21WaFpGWmhiSFZsUm5KdmJWQnZhVzUwWlhJNlRXSXNjbUk2Ym5Wc2JIMHBmU3hKT21aMWJtTjBhVzl1S0dFc1lpeGpLWHRoUGo0K1BUQTdZejQrUGowd08ySTlVaWhpUGo0K01DazdWQ2hoTEh0dVlXMWxPbUlzWm5KdmJWZHBjbVZVZVhCbE9tUTlQbVFzZEc5WGFYSmxWSGx3WlRvb1pDeGxLVDArWlN4aGNtZFFZV05yUVdSMllXNWpaVG80TEhKbFlXUldZV3gxWlVaeWIyMVFiMmx1ZEdWeU9rNWlLR0lzWXlrc2NtSTZiblZzYkgwcGZTeDFPbVoxYm1OMGFXOXVLR0VzWWl4akxHUXNaU2w3WVQ0K1BqMHdPMk0rUGo0OU1EdGlQVklvWWo0K1BqQXBPeTB4UFQwOVpTWW1LR1U5TkRJNU5EazJOekk1TlNrN1pUMXNQVDVzTzJsbUtEQTlQVDFrS1h0MllYSWdaajB6TWkwNEttTTdaVDFzUFQ1Y2JtdzhQR1krUGo1bWZYWmhjaUJyUFdJdWFXNWpiSFZrWlhNb1hDSjFibk5wWjI1bFpGd2lLVDltZFc1amRHbHZiaWhzTEhFcGUzSmxkSFZ5YmlCeFBqNCtNSDA2Wm5WdVkzUnBiMjRvYkN4eEtYdHlaWFIxY200Z2NYMDdWQ2hoTEh0dVlXMWxPbUlzWm5KdmJWZHBjbVZVZVhCbE9tVXNkRzlYYVhKbFZIbHdaVHByTEdGeVoxQmhZMnRCWkhaaGJtTmxPamdzY21WaFpGWmhiSFZsUm5KdmJWQnZhVzUwWlhJNlNtSW9ZaXhqTERBaFBUMWtLU3h5WWpwdWRXeHNmU2w5TEcwNlpuVnVZM1JwYjI0b1lTeGlMR01wZTJaMWJtTjBhVzl1SUdRb1ppbDdkbUZ5SUdzOWVpZ3BXMlkrUGo0eVBqNCtNRjA3WmoxNktDbGJaaXMwUGo0K01qNCtQakJkTzNKbGRIVnliaUJ1WlhjZ1pTaG9LQ2t1WW5WbVptVnlMR1lzYXlsOVlUNCtQajB3TzNaaGNpQmxQVnRKYm5RNFFYSnlZWGtzVldsdWREaEJjbkpoZVN4SmJuUXhOa0Z5Y21GNUxGVnBiblF4TmtGeWNtRjVMRWx1ZERNeVFYSnlZWGtzVldsdWRETXlRWEp5WVhrc1JteHZZWFF6TWtGeWNtRjVMRVpzYjJGME5qUkJjbkpoZVN4Q2FXZEpiblEyTkVGeWNtRjVMRUpwWjFWcGJuUTJORUZ5Y21GNVhWdGlYVHRqUFZJb1l6NCtQakFwTzFRb1lTeDdibUZ0WlRwakxHWnliMjFYYVhKbFZIbHdaVHBrTEdGeVoxQmhZMnRCWkhaaGJtTmxPamdzY21WaFpGWmhiSFZsUm5KdmJWQnZhVzUwWlhJNlpIMHNYRzU3U1dJNklUQjlLWDBzU3pwbWRXNWpkR2x2YmloaExHSXBlMkUrUGo0OU1EdGlQVklvWWo0K1BqQXBPM1poY2lCalBWd2ljM1JrT2pwemRISnBibWRjSWowOVBXSTdWQ2hoTEh0dVlXMWxPbUlzWm5KdmJWZHBjbVZVZVhCbE9tWjFibU4wYVc5dUtHUXBlM1poY2lCbFBYb29LVnRrUGo0K01qNCtQakJkTEdZOVpDczBPMmxtS0dNcFptOXlLSFpoY2lCclBXWXNiRDB3TzJ3OFBXVTdLeXRzS1h0MllYSWdjVDFtSzJ3N2FXWW9iRDA5Wlh4OE1EMDlkQ2dwVzNFK1BqNHdYU2w3YXoxVllTaHJMSEV0YXlrN2FXWW9kbTlwWkNBd1BUMDljaWwyWVhJZ2NqMXJPMlZzYzJVZ2NpczlVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaU2d3S1N4eUt6MXJPMnM5Y1NzeGZYMWxiSE5sZTNJOVFYSnlZWGtvWlNrN1ptOXlLR3c5TUR0c1BHVTdLeXRzS1hKYmJGMDlVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaU2gwS0NsYlppdHNQajQrTUYwcE8zSTljaTVxYjJsdUtGd2lYQ0lwZlZnb1pDazdjbVYwZFhKdUlISjlMSFJ2VjJseVpWUjVjR1U2Wm5WdVkzUnBiMjRvWkN4bEtYdGxJR2x1YzNSaGJtTmxiMllnUVhKeVlYbENkV1ptWlhJbUppaGxQVzVsZHlCVmFXNTBPRUZ5Y21GNUtHVXBLVHQyWVhJZ1pqMWNJbk4wY21sdVoxd2lQVDEwZVhCbGIyWWdaVHRwWmlnaEtHWjhmR1VnYVc1emRHRnVZMlZ2WmlCVmFXNTBPRUZ5Y21GNWZIeGNibVVnYVc1emRHRnVZMlZ2WmlCVmFXNTBPRU5zWVcxd1pXUkJjbkpoZVh4OFpTQnBibk4wWVc1alpXOW1JRWx1ZERoQmNuSmhlU2twZEdoeWIzY2dibVYzSUZNb1hDSkRZVzV1YjNRZ2NHRnpjeUJ1YjI0dGMzUnlhVzVuSUhSdklITjBaRG82YzNSeWFXNW5YQ0lwTzNaaGNpQnJQV01tSm1ZL2NHSW9aU2s2WlM1c1pXNW5kR2c3ZG1GeUlHdzlkMk1vTkN0ckt6RXBMSEU5YkNzME8zb29LVnRzUGo0K01qNCtQakJkUFdzN2FXWW9ZeVltWmlseVlpaGxMSEVzYXlzeEtUdGxiSE5sSUdsbUtHWXBabTl5S0dZOU1EdG1QR3M3S3l0bUtYdDJZWElnY2oxbExtTm9ZWEpEYjJSbFFYUW9aaWs3YVdZb01qVTFQSElwZEdoeWIzY2dXQ2h4S1N4dVpYY2dVeWhjSWxOMGNtbHVaeUJvWVhNZ1ZWUkdMVEUySUdOdlpHVWdkVzVwZEhNZ2RHaGhkQ0JrYnlCdWIzUWdabWwwSUdsdUlEZ2dZbWwwYzF3aUtUdDBLQ2xiY1N0bVBqNCtNRjA5Y24xbGJITmxJR1p2Y2lobVBUQTdaanhyT3lzclppbDBLQ2xiY1N0bVBqNCtNRjA5WlZ0bVhUdHVkV3hzSVQwOVpDWW1aQzV3ZFhOb0tGZ3NiQ2s3Y21WMGRYSnVJR3g5TEdGeVoxQmhZMnRCWkhaaGJtTmxPamdzY21WaFpGWmhiSFZsUm5KdmJWQnZhVzUwWlhJNlQySXNjbUlvWkNsN1dDaGtLWDE5S1gwc1FUcG1kVzVqZEdsdmJpaGhMR0lzWXlsN1lUNCtQajB3TzJJK1BqNDlNRHRjYm1NK1BqNDlNRHRqUFZJb1l5azdhV1lvTWowOVBXSXBlM1poY2lCa1BWRmlPM1poY2lCbFBWSmlPM1poY2lCbVBWTmlPM1poY2lCclBTZ3BQVDVqWVNncE8zWmhjaUJzUFRGOVpXeHpaU0EwUFQwOVlpWW1LR1E5VkdJc1pUMVZZaXhtUFZaaUxHczlLQ2s5UG5vb0tTeHNQVElwTzFRb1lTeDdibUZ0WlRwakxHWnliMjFYYVhKbFZIbHdaVHB4UFQ1N1ptOXlLSFpoY2lCeVBYb29LVnR4UGo0K01qNCtQakJkTEhnOWF5Z3BMRU1zVGoxeEt6UXNaejB3TzJjOFBYSTdLeXRuS1h0MllYSWdkVDF4S3pRclp5cGlPMmxtS0djOVBYSjhmREE5UFhoYmRUNCtQbXhkS1U0OVpDaE9MSFV0VGlrc2RtOXBaQ0F3UFQwOVF6OURQVTQ2S0VNclBWTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9NQ2tzUXlzOVRpa3NUajExSzJKOVdDaHhLVHR5WlhSMWNtNGdRMzBzZEc5WGFYSmxWSGx3WlRvb2NTeHlLVDArZTJsbUtGd2ljM1J5YVc1blhDSWhQWFI1Y0dWdlppQnlLWFJvY205M0lHNWxkeUJUS0dCRFlXNXViM1FnY0dGemN5QnViMjR0YzNSeWFXNW5JSFJ2SUVNckt5QnpkSEpwYm1jZ2RIbHdaU0FrZTJOOVlDazdkbUZ5SUhnOVppaHlLU3hEUFhkaktEUXJlQ3RpS1R0NktDbGJRejQrUGpKZFBYZytQbXc3WlNoeUxFTXJOQ3g0SzJJcE8yNTFiR3doUFQxeEppWnhMbkIxYzJnb1dDeERLVHR5WlhSMWNtNGdRMzBzWEc1aGNtZFFZV05yUVdSMllXNWpaVG80TEhKbFlXUldZV3gxWlVaeWIyMVFiMmx1ZEdWeU9rMWlMSEppS0hFcGUxZ29jU2w5ZlNsOUxISmhPbVoxYm1OMGFXOXVLR0VzWWlsN1lUNCtQajB3TzJJOVVpaGlQajQrTUNrN1ZDaGhMSHRLWWpvaE1DeHVZVzFsT21Jc1lYSm5VR0ZqYTBGa2RtRnVZMlU2TUN4bWNtOXRWMmx5WlZSNWNHVTZLQ2s5UG50OUxIUnZWMmx5WlZSNWNHVTZLQ2s5UG50OWZTbDlMRzVoT2lncFBUNGhNQ3hQT21aMWJtTjBhVzl1S0dFc1lpbDdZVDQrUGowd08yRTlQV0krUGo0d1AzTmxkRlJwYldWdmRYUW9LQ2s5UG1KaUtDa3BPa1UvY0c5emRFMWxjM05oWjJVb2UzUmhjbWRsZEZSb2NtVmhaRHBoTEdOdFpEcGNJbU5vWldOclRXRnBiR0p2ZUZ3aWZTazZLR0U5VHk1cVlsdGhYU2ttSm1FdWNHOXpkRTFsYzNOaFoyVW9lMk50WkRwY0ltTm9aV05yVFdGcGJHSnZlRndpZlNsOUxGZzZablZ1WTNScGIyNG9ZU3hpTEdNc1pDbDdZajQrUGowd08yTXZQVEk3WTJNdWJHVnVaM1JvUFdNN1pEMWtQajQrTUQ0K1BqTTdabTl5S0haaGNpQmxQVEE3WlR4ak8yVXJLeWxqWTF0bFhUMUtXMlFyTWlwbFhUOUtXMlFyTWlwbEt6RmRPbWhoS0NsYlpDc3lLbVVyTVQ0K1BqQmRPMkU5VUdOYllWMDdUeTVJWWoxaU8ySTlZUzVoY0hCc2VTaHVkV3hzTEdOaktUdFBMa2hpUFRBN2NtVjBkWEp1SUdKOUxGeHVaR0U2V0dJc2JXRTZablZ1WTNScGIyNG9ZU2w3UkNZbVR5NXFZbHRoUGo0K01GMHVjbVZtS0NsOUxISTZablZ1WTNScGIyNG9ZU3hpTEdNcGUySStQajQ5TUR0alBqNCtQVEE3WVQxV0tHRStQajR3S1R0aVBXVmpLR0lzWENKbGJYWmhiRG82WVhOY0lpazdkbUZ5SUdROVcxMHNaVDFYS0dRcE8zb29LVnRqUGo0K01qNCtQakJkUFdVN2NtVjBkWEp1SUdJdWRHOVhhWEpsVkhsd1pTaGtMR0VwZlN4cE9tWjFibU4wYVc5dUtHRXNZaXhqTEdRc1pTbDdZejQrUGowd08yUStQajQ5TUR0bFBqNCtQVEE3WVQxb1kxdGhQajQrTUYwN1lqMVdLR0krUGo0d0tUdGpQV2RqS0dNcE8zWmhjaUJtUFZ0ZE8zb29LVnRrUGo0K01qNCtQakJkUFZjb1ppazdjbVYwZFhKdUlHRW9ZaXhqTEdZc1pTbDlMSE02Wm5WdVkzUnBiMjRvWVN4aUxHTXNaQ2w3WXo0K1BqMHdPMlErUGo0OU1EdGhQV2hqVzJFK1BqNHdYVHRpUFZZb1lqNCtQakFwTzJNOVoyTW9ZeWs3WVNoaUxHTXNiblZzYkN4a0tYMHNZenBNWWl4Q09tWjFibU4wYVc5dUtHRXNZaWw3WWo0K1BqMHdPMkU5VmloaFBqNCtNQ2s3WWoxV0tHSXBPM0psZEhWeWJpQmhQVDFpZlN4dk9tWjFibU4wYVc5dUtHRXBlMkUrUGo0OU1EdHBaaWd3UFQwOVlTbHlaWFIxY200Z1Z5aHBZeWdwS1R0aFBXZGpLR0VwTzNKbGRIVnliaUJYS0dsaktDbGJZVjBwZlN4bk9tWjFibU4wYVc5dUtHRXNYRzVpS1h0MllYSWdZejFyWXloaExHSStQajR3S1N4a1BXTmJNRjA3WWoxa0xtNWhiV1VyWENKZkpGd2lLMk11YzJ4cFkyVW9NU2t1YldGd0tHWjFibU4wYVc5dUtIZ3BlM0psZEhWeWJpQjRMbTVoYldWOUtTNXFiMmx1S0Z3aVgxd2lLU3RjSWlSY0lqdDJZWElnWlQxdVkxdGlYVHRwWmloMmIybGtJREFoUFQxbEtYSmxkSFZ5YmlCbE8yVTlXMXdpY21WMFZIbHdaVndpWFR0bWIzSW9kbUZ5SUdZOVcyUmRMR3M5WENKY0lpeHNQVEE3YkR4aExURTdLeXRzS1dzclBTZ3dJVDA5YkQ5Y0lpd2dYQ0k2WENKY0lpa3JYQ0poY21kY0lpdHNMR1V1Y0hWemFDaGNJbUZ5WjFSNWNHVmNJaXRzS1N4bUxuQjFjMmdvWTFzeEsyeGRLVHQyWVhJZ2NUMWNJbkpsZEhWeWJpQm1kVzVqZEdsdmJpQmNJaXR0WXloY0ltMWxkR2h2WkVOaGJHeGxjbDljSWl0aUtTdGNJaWhvWVc1a2JHVXNJRzVoYldVc0lHUmxjM1J5ZFdOMGIzSnpMQ0JoY21kektTQjdYRnh1WENJc2NqMHdPMlp2Y2loc1BUQTdiRHhoTFRFN0t5dHNLWEVyUFZ3aUlDQWdJSFpoY2lCaGNtZGNJaXRzSzF3aUlEMGdZWEpuVkhsd1pWd2lLMndyWENJdWNtVmhaRlpoYkhWbFJuSnZiVkJ2YVc1MFpYSW9ZWEpuYzF3aUt5aHlQMXdpSzF3aUszSTZYQ0pjSWlrclhDSXBPMXhjYmx3aUxISXJQV05iYkNzeFhTNWhjbWRRWVdOclFXUjJZVzVqWlR0eEt6MWNJaUFnSUNCMllYSWdjbllnUFNCb1lXNWtiR1ZiYm1GdFpWMG9YQ0lyYXl0Y0lpazdYRnh1WENJN1hHNW1iM0lvYkQwd08ydzhZUzB4T3lzcmJDbGpXMndyTVYwdVpHVnNaWFJsVDJKcVpXTjBKaVlvY1NzOVhDSWdJQ0FnWVhKblZIbHdaVndpSzJ3clhDSXVaR1ZzWlhSbFQySnFaV04wS0dGeVoxd2lLMndyWENJcE8xeGNibHdpS1R0a0xrcGlmSHdvY1NzOVhDSWdJQ0FnY21WMGRYSnVJSEpsZEZSNWNHVXVkRzlYYVhKbFZIbHdaU2hrWlhOMGNuVmpkRzl5Y3l3Z2NuWXBPMXhjYmx3aUtUdGxMbkIxYzJnb2NTdGNJbjA3WEZ4dVhDSXBPMkU5Y0dNb1pTa3VZWEJ3Ykhrb2JuVnNiQ3htS1R0bFBXcGpLR0VwTzNKbGRIVnliaUJ1WTF0aVhUMWxmU3h4T21aMWJtTjBhVzl1S0dFc1lpbDdZajQrUGowd08yRTlWaWhoUGo0K01DazdZajFXS0dJcE8zSmxkSFZ5YmlCWEtHRmJZbDBwZlN4a09tWjFibU4wYVc5dUtHRXBlMkUrUGo0OU1EczBQR0VtSmloVkxtZGxkQ2hoS1M1Q1lpczlNU2w5TEhnNlpuVnVZM1JwYjI0b1lTeGlMR01zWkNsN1l6NCtQajB3TzJRK1BqNDlNRHRoUFZZb1lUNCtQakFwTzNaaGNpQmxQWEpqVzJKZE8yVjhmQ2hsUFhGaktHSXBMSEpqVzJKZFBXVXBPM0psZEhWeWJpQmxLR0VzWXl4a0tYMHNkanBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUJYS0Z0ZEtYMHNiRHBtZFc1amRHbHZiaWhoS1h0aFBWWW9ZVDQrUGpBcE8yWnZjaWgyWVhJZ1lqMUJjbkpoZVNoaExteGxibWQwYUNrc1l6MHdPMk04WVM1c1pXNW5kR2c3WXlzcktXSmJZMTA5WEc1aFcyTmRPM0psZEhWeWJpQlhLR0lwZlN4bE9tWjFibU4wYVc5dUtHRXBlM0psZEhWeWJpQlhLR2RqS0dFK1BqNHdLU2w5TEdzNlpuVnVZM1JwYjI0b0tYdHlaWFIxY200Z1Z5aDdmU2w5TEdZNlpuVnVZM1JwYjI0b1lTbDdZVDQrUGowd08yWnZjaWgyWVhJZ1lqMVdLR0VwTzJJdWJHVnVaM1JvT3lsN2RtRnlJR005WWk1d2IzQW9LVHRpTG5CdmNDZ3BLR01wZlV4aUtHRXBmU3hxT21aMWJtTjBhVzl1S0dFc1lpeGpLWHRpUGo0K1BUQTdZejQrUGowd08yRTlWaWhoUGo0K01DazdZajFXS0dJcE8yTTlWaWhqS1R0aFcySmRQV045TEdnNlpuVnVZM1JwYjI0b1lTeGlLWHRpUGo0K1BUQTdZVDFsWXloaFBqNCtNQ3hjSWw5bGJYWmhiRjkwWVd0bFgzWmhiSFZsWENJcE8yRTlZUzV5WldGa1ZtRnNkV1ZHY205dFVHOXBiblJsY2loaUtUdHlaWFIxY200Z1Z5aGhLWDBzWHpwbWRXNWpkR2x2YmloaExHSXBlMkU5TFRrd01EY3hPVGt5TlRRM05EQTVPVEkrWVh4OE9UQXdOekU1T1RJMU5EYzBNRGs1TWp4aFAwNWhUanBPZFcxaVpYSW9ZU2s3WWo0K1BqMHdPMkU5Ym1WM0lFUmhkR1VvTVVVekttRXBPM2NvS1Z0aVBqNCtNajQrUGpCZFBXRXVaMlYwVlZSRFUyVmpiMjVrY3lncE8zY29LVnRpS3pRK1BqNHlQajQrTUYwOVlTNW5aWFJWVkVOTmFXNTFkR1Z6S0NrN2R5Z3BXMklyT0Q0K1BqSStQajR3WFQxY2JtRXVaMlYwVlZSRFNHOTFjbk1vS1R0M0tDbGJZaXN4TWo0K1BqSStQajR3WFQxaExtZGxkRlZVUTBSaGRHVW9LVHQzS0NsYllpc3hOajQrUGpJK1BqNHdYVDFoTG1kbGRGVlVRMDF2Ym5Sb0tDazdkeWdwVzJJck1qQStQajR5UGo0K01GMDlZUzVuWlhSVlZFTkdkV3hzV1dWaGNpZ3BMVEU1TURBN2R5Z3BXMklyTWpRK1BqNHlQajQrTUYwOVlTNW5aWFJWVkVORVlYa29LVHRoUFNoaExtZGxkRlJwYldVb0tTMUVZWFJsTGxWVVF5aGhMbWRsZEZWVVEwWjFiR3haWldGeUtDa3NNQ3d4TERBc01Dd3dMREFwS1M4NE5qUkZOWHd3TzNjb0tWdGlLekk0UGo0K01qNCtQakJkUFdGOUxDUTZablZ1WTNScGIyNG9ZU3hpS1h0aFBTMDVNREEzTVRrNU1qVTBOelF3T1RreVBtRjhmRGt3TURjeE9Ua3lOVFEzTkRBNU9USThZVDlPWVU0NlRuVnRZbVZ5S0dFcE8ySStQajQ5TUR0aFBXNWxkeUJFWVhSbEtERkZNeXBoS1R0M0tDbGJZajQrUGpJK1BqNHdYVDFoTG1kbGRGTmxZMjl1WkhNb0tUdDNLQ2xiWWlzMFBqNCtNajQrUGpCZFBXRXVaMlYwVFdsdWRYUmxjeWdwTzNjb0tWdGlLemcrUGo0eVBqNCtNRjA5WVM1blpYUkliM1Z5Y3lncE8zY29LVnRpS3pFeVBqNCtNajQrUGpCZFBXRXVaMlYwUkdGMFpTZ3BPM2NvS1Z0aUt6RTJQajQrTWo0K1BqQmRQV0V1WjJWMFRXOXVkR2dvS1R0M0tDbGJZaXN5TUQ0K1BseHVNajQrUGpCZFBXRXVaMlYwUm5Wc2JGbGxZWElvS1MweE9UQXdPM2NvS1Z0aUt6STBQajQrTWo0K1BqQmRQV0V1WjJWMFJHRjVLQ2s3ZG1GeUlHTTlLRmtvWVM1blpYUkdkV3hzV1dWaGNpZ3BLVDl6WXpwMFl5bGJZUzVuWlhSTmIyNTBhQ2dwWFN0aExtZGxkRVJoZEdVb0tTMHhmREE3ZHlncFcySXJNamcrUGo0eVBqNCtNRjA5WXp0M0tDbGJZaXN6Tmo0K1BqSStQajR3WFQwdEtEWXdLbUV1WjJWMFZHbHRaWHB2Ym1WUFptWnpaWFFvS1NrN1l6MG9ibVYzSUVSaGRHVW9ZUzVuWlhSR2RXeHNXV1ZoY2lncExEWXNNU2twTG1kbGRGUnBiV1Y2YjI1bFQyWm1jMlYwS0NrN2RtRnlJR1E5S0c1bGR5QkVZWFJsS0dFdVoyVjBSblZzYkZsbFlYSW9LU3d3TERFcEtTNW5aWFJVYVcxbGVtOXVaVTltWm5ObGRDZ3BPMkU5S0dNaFBXUW1KbUV1WjJWMFZHbHRaWHB2Ym1WUFptWnpaWFFvS1QwOVRXRjBhQzV0YVc0b1pDeGpLU2w4TUR0M0tDbGJZaXN6TWo0K1BqSStQajR3WFQxaGZTeGhZVHBtZFc1amRHbHZiaWhoS1h0aFBqNCtQVEE3ZG1GeUlHSTlibVYzSUVSaGRHVW9keWdwVzJFck1qQStQajR5UGo0K01GMHJNVGt3TUN4M0tDbGJZU3N4Tmo0K1BqSStQajR3WFN4M0tDbGJZU3N4TWo0K1BqSStQajR3WFN4M0tDbGJZU3M0UGo0K01qNCtQakJkTEhjb0tWdGhLelErUGo0eVBqNCtNRjBzZHlncFcyRStQajVjYmpJK1BqNHdYU3d3S1N4alBYY29LVnRoS3pNeVBqNCtNajQrUGpCZExHUTlZaTVuWlhSVWFXMWxlbTl1WlU5bVpuTmxkQ2dwTEdVOUtHNWxkeUJFWVhSbEtHSXVaMlYwUm5Wc2JGbGxZWElvS1N3MkxERXBLUzVuWlhSVWFXMWxlbTl1WlU5bVpuTmxkQ2dwTEdZOUtHNWxkeUJFWVhSbEtHSXVaMlYwUm5Wc2JGbGxZWElvS1N3d0xERXBLUzVuWlhSVWFXMWxlbTl1WlU5bVpuTmxkQ2dwTEdzOVRXRjBhQzV0YVc0b1ppeGxLVHN3UG1NL2R5Z3BXMkVyTXpJK1BqNHlQajQrTUYwOVRuVnRZbVZ5S0dVaFBXWW1KbXM5UFdRcE9qQThZeUU5S0dzOVBXUXBKaVlvWlQxTllYUm9MbTFoZUNobUxHVXBMR0l1YzJWMFZHbHRaU2hpTG1kbGRGUnBiV1VvS1NzMlJUUXFLQ2d3UEdNL2F6cGxLUzFrS1NrcE8zY29LVnRoS3pJMFBqNCtNajQrUGpCZFBXSXVaMlYwUkdGNUtDazdZejBvV1NoaUxtZGxkRVoxYkd4WlpXRnlLQ2twUDNOak9uUmpLVnRpTG1kbGRFMXZiblJvS0NsZEsySXVaMlYwUkdGMFpTZ3BMVEY4TUR0M0tDbGJZU3N5T0Q0K1BqSStQajR3WFQxak8zY29LVnRoUGo0K01qNCtQakJkUFdJdVoyVjBVMlZqYjI1a2N5Z3BPM2NvS1Z0aEt6UStQajR5UGo0K01GMDlZaTVuWlhSTmFXNTFkR1Z6S0NrN2R5Z3BXMkVyT0Q0K1BqSStQajR3WFQxaUxtZGxkRWh2ZFhKektDazdkeWdwVzJFck1USStQajVjYmpJK1BqNHdYVDFpTG1kbGRFUmhkR1VvS1R0M0tDbGJZU3N4Tmo0K1BqSStQajR3WFQxaUxtZGxkRTF2Ym5Sb0tDazdkeWdwVzJFck1qQStQajR5UGo0K01GMDlZaTVuWlhSWlpXRnlLQ2s3Y21WMGRYSnVJRUpwWjBsdWRDaGlMbWRsZEZScGJXVW9LUzh4UlRNcGZTeFpPblZqTEZvNmRtTXNUanBtZFc1amRHbHZiaWhoTEdJc1l5bDdablZ1WTNScGIyNGdaQ2h5S1h0eVpYUjFjbTRvY2oxeUxuUnZWR2x0WlZOMGNtbHVaeWdwTG0xaGRHTm9LQzljWENnb1cwRXRXbUV0ZWlCZEt5bGNYQ2trTHlrcFAzSmJNVjA2WENKSFRWUmNJbjFoUGo0K1BUQTdZajQrUGowd08yTStQajQ5TUR0MllYSWdaVDBvYm1WM0lFUmhkR1VwTG1kbGRFWjFiR3haWldGeUtDa3NaajF1WlhjZ1JHRjBaU2hsTERBc01Ta3NhejF1WlhjZ1JHRjBaU2hsTERZc01TazdaVDFtTG1kbGRGUnBiV1Y2YjI1bFQyWm1jMlYwS0NrN2RtRnlJR3c5YXk1blpYUlVhVzFsZW05dVpVOW1abk5sZENncExIRTlUV0YwYUM1dFlYZ29aU3hzS1R0NktDbGJZVDQrUGpJK1BqNHdYVDAyTUNweE8zY29LVnRpUGo0K01qNCtQakJkUFU1MWJXSmxjaWhsSVQxc0tUdGhQV1FvWmlrN1lqMWtLR3NwTzJFOWVHTW9ZU2s3WWoxNFl5aGlLVHRzUEdVL0tIb29LVnRqUGo0K01qNCtQakJkUFdFc2VpZ3BXMk1yTkQ0K1BqSStQajR3WFQxaUtUb29laWdwVzJNK1BqNWNiakkrUGo0d1hUMWlMSG9vS1Z0akt6UStQajR5UGo0K01GMDlZU2w5TEc0NktDazlQbnRJS0Z3aVhDSXBmU3hHT2lncFBUNTdmU3hJT2lncFBUNUVZWFJsTG01dmR5Z3BMR3hoT2lncFBUNTdSbUVyUFRFN2RHaHliM2RjSW5WdWQybHVaRndpTzMwc1VEcG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQTBNamswT1RBeE56WXdmU3gwT2lncFBUNXdaWEptYjNKdFlXNWpaUzUwYVcxbFQzSnBaMmx1SzNCbGNtWnZjbTFoYm1ObExtNXZkeWdwTEhjNktDazlQa1EvY21WeGRXbHlaU2hjSW05elhDSXBMbU53ZFhNb0tTNXNaVzVuZEdnNmJtRjJhV2RoZEc5eUxtaGhjbVIzWVhKbFEyOXVZM1Z5Y21WdVkza3NUVHBtZFc1amRHbHZiaWhoS1h0aFBqNCtQVEE3ZG1GeUlHSTlkQ2dwTG14bGJtZDBhRHRwWmloaFBEMWlmSHcwTWprME9UQXhOell3UEdFcGNtVjBkWEp1SVRFN1ptOXlLSFpoY2lCalBURTdORDQ5WXp0aktqMHlLWHQyWVhJZ1pEMWlLaWd4S3k0eUwyTXBPMlE5VFdGMGFDNXRhVzRvWkN4aEt6RXdNRFkyTXpJNU5pazdkbUZ5SUdVOVRXRjBhRHRrUFUxaGRHZ3ViV0Y0S0dFc1pDazdZVHA3WlQwb1pTNXRhVzR1WTJGc2JDaGxMRFF5T1RRNU1ERTNOakFzWkNzb05qVTFNell0WkNVMk5UVXpOaWtsTmpVMU16WXBMVzB1WW5WbVptVnlMbUo1ZEdWTVpXNW5kR2dyTmpVMU16VXBMelkxTlRNMk8zUnllWHR0TG1keWIzY29aU2s3WEc1d0tDazdkbUZ5SUdZOU1UdGljbVZoYXlCaGZXTmhkR05vS0dzcGUzMW1QWFp2YVdRZ01IMXBaaWhtS1hKbGRIVnliaUV3ZlhKbGRIVnliaUV4ZlN4bVlUcENZeXhuWVRwRFl5eFdPbGhoTEhvNlJHTXNSRHBGWXl4allUcEdZeXhET2toakxHRTZiWHg4UVM1M1lYTnRUV1Z0YjNKNUxHOWhPazFqTEhBNlpuVnVZM1JwYjI0b1lTeGlMR01zWkNsN2NtVjBkWEp1SUUxaktHRStQajR3TEdJK1BqNHdMR00rUGo0d0xHUStQajR3S1gxOUxGbzlablZ1WTNScGIyNG9LWHQyWVhJZ1lUMTdZVHBTWTMwN1N5c3JPMDVoS0dFc1puVnVZM1JwYjI0b1lpbDdkbUZ5SUdNOVlpNXRiMlIxYkdVN1dqMWlMbWx1YzNSaGJtTmxMbVY0Y0c5eWRITTdXajFUWXlncE8wOHVSbUl1Y0hWemFDaGFMbGhoS1R0bllqMWFMbDloTzBSaExuVnVjMmhwWm5Rb1dpNXpZU2s3ZUdFOVl6dEpZU2dwZlNrdVkyRjBZMmdvYTJFcE8zSmxkSFZ5Ym50OWZTZ3BPMEV1WDA5eWRFbHVhWFE5S0dFc1lpazlQaWhCTGw5UGNuUkpibWwwUFZvdWRHRXBLR0VzWWlrN1FTNWZUM0owUjJWMFRHRnpkRVZ5Y205eVBTaGhMR0lwUFQ0b1FTNWZUM0owUjJWMFRHRnpkRVZ5Y205eVBWb3VkV0VwS0dFc1lpazdYRzVCTGw5UGNuUkRjbVZoZEdWVFpYTnphVzl1VDNCMGFXOXVjejBvWVN4aUxHTXNaQ3hsTEdZc2F5eHNMSEVzY2lrOVBpaEJMbDlQY25SRGNtVmhkR1ZUWlhOemFXOXVUM0IwYVc5dWN6MWFMblpoS1NoaExHSXNZeXhrTEdVc1ppeHJMR3dzY1N4eUtUdEJMbDlQY25SQmNIQmxibVJGZUdWamRYUnBiMjVRY205MmFXUmxjajBvWVN4aUtUMCtLRUV1WDA5eWRFRndjR1Z1WkVWNFpXTjFkR2x2YmxCeWIzWnBaR1Z5UFZvdWQyRXBLR0VzWWlrN1FTNWZUM0owUVdSa1JuSmxaVVJwYldWdWMybHZiazkyWlhKeWFXUmxQU2hoTEdJc1l5azlQaWhCTGw5UGNuUkJaR1JHY21WbFJHbHRaVzV6YVc5dVQzWmxjbkpwWkdVOVdpNTRZU2tvWVN4aUxHTXBPMEV1WDA5eWRFRmtaRk5sYzNOcGIyNURiMjVtYVdkRmJuUnllVDBvWVN4aUxHTXBQVDRvUVM1ZlQzSjBRV1JrVTJWemMybHZia052Ym1acFowVnVkSEo1UFZvdWVXRXBLR0VzWWl4aktUdEJMbDlQY25SU1pXeGxZWE5sVTJWemMybHZiazl3ZEdsdmJuTTlZVDArS0VFdVgwOXlkRkpsYkdWaGMyVlRaWE56YVc5dVQzQjBhVzl1Y3oxYUxucGhLU2hoS1R0QkxsOVBjblJEY21WaGRHVlRaWE56YVc5dVBTaGhMR0lzWXlrOVBpaEJMbDlQY25SRGNtVmhkR1ZUWlhOemFXOXVQVm91UVdFcEtHRXNZaXhqS1R0Y2JrRXVYMDl5ZEZKbGJHVmhjMlZUWlhOemFXOXVQV0U5UGloQkxsOVBjblJTWld4bFlYTmxVMlZ6YzJsdmJqMWFMa0poS1NoaEtUdEJMbDlQY25SSFpYUkpibkIxZEU5MWRIQjFkRU52ZFc1MFBTaGhMR0lzWXlrOVBpaEJMbDlQY25SSFpYUkpibkIxZEU5MWRIQjFkRU52ZFc1MFBWb3VRMkVwS0dFc1lpeGpLVHRCTGw5UGNuUkhaWFJKYm5CMWRFNWhiV1U5S0dFc1lpazlQaWhCTGw5UGNuUkhaWFJKYm5CMWRFNWhiV1U5V2k1RVlTa29ZU3hpS1R0QkxsOVBjblJIWlhSUGRYUndkWFJPWVcxbFBTaGhMR0lwUFQ0b1FTNWZUM0owUjJWMFQzVjBjSFYwVG1GdFpUMWFMa1ZoS1NoaExHSXBPMEV1WDA5eWRFWnlaV1U5WVQwK0tFRXVYMDl5ZEVaeVpXVTlXaTVHWVNrb1lTazdRUzVmVDNKMFEzSmxZWFJsVkdWdWMyOXlQU2hoTEdJc1l5eGtMR1VzWmlrOVBpaEJMbDlQY25SRGNtVmhkR1ZVWlc1emIzSTlXaTVIWVNrb1lTeGlMR01zWkN4bExHWXBPMEV1WDA5eWRFZGxkRlJsYm5OdmNrUmhkR0U5S0dFc1lpeGpMR1FzWlNrOVBpaEJMbDlQY25SSFpYUlVaVzV6YjNKRVlYUmhQVm91U0dFcEtHRXNZaXhqTEdRc1pTazdRUzVmVDNKMFVtVnNaV0Z6WlZSbGJuTnZjajFoUFQ0b1FTNWZUM0owVW1Wc1pXRnpaVlJsYm5OdmNqMWFMa2xoS1NoaEtUdGNia0V1WDA5eWRFTnlaV0YwWlZKMWJrOXdkR2x2Ym5NOUtHRXNZaXhqTEdRcFBUNG9RUzVmVDNKMFEzSmxZWFJsVW5WdVQzQjBhVzl1Y3oxYUxrcGhLU2hoTEdJc1l5eGtLVHRCTGw5UGNuUkJaR1JTZFc1RGIyNW1hV2RGYm5SeWVUMG9ZU3hpTEdNcFBUNG9RUzVmVDNKMFFXUmtVblZ1UTI5dVptbG5SVzUwY25rOVdpNUxZU2tvWVN4aUxHTXBPMEV1WDA5eWRGSmxiR1ZoYzJWU2RXNVBjSFJwYjI1elBXRTlQaWhCTGw5UGNuUlNaV3hsWVhObFVuVnVUM0IwYVc5dWN6MWFMa3hoS1NoaEtUdEJMbDlQY25SRGNtVmhkR1ZDYVc1a2FXNW5QV0U5UGloQkxsOVBjblJEY21WaGRHVkNhVzVrYVc1blBWb3VUV0VwS0dFcE8wRXVYMDl5ZEVKcGJtUkpibkIxZEQwb1lTeGlMR01wUFQ0b1FTNWZUM0owUW1sdVpFbHVjSFYwUFZvdVRtRXBLR0VzWWl4aktUdEJMbDlQY25SQ2FXNWtUM1YwY0hWMFBTaGhMR0lzWXl4a0tUMCtLRUV1WDA5eWRFSnBibVJQZFhSd2RYUTlXaTVQWVNrb1lTeGlMR01zWkNrN1FTNWZUM0owUTJ4bFlYSkNiM1Z1WkU5MWRIQjFkSE05WVQwK0tFRXVYMDl5ZEVOc1pXRnlRbTkxYm1SUGRYUndkWFJ6UFZvdVVHRXBLR0VwTzBFdVgwOXlkRkpsYkdWaGMyVkNhVzVrYVc1blBXRTlQaWhCTGw5UGNuUlNaV3hsWVhObFFtbHVaR2x1WnoxYUxsRmhLU2hoS1R0Y2JrRXVYMDl5ZEZKMWJsZHBkR2hDYVc1a2FXNW5QU2hoTEdJc1l5eGtMR1VwUFQ0b1FTNWZUM0owVW5WdVYybDBhRUpwYm1ScGJtYzlXaTVTWVNrb1lTeGlMR01zWkN4bEtUdEJMbDlQY25SU2RXNDlLR0VzWWl4akxHUXNaU3htTEdzc2JDazlQaWhCTGw5UGNuUlNkVzQ5V2k1VFlTa29ZU3hpTEdNc1pDeGxMR1lzYXl4c0tUdEJMbDlQY25SRmJtUlFjbTltYVd4cGJtYzlZVDArS0VFdVgwOXlkRVZ1WkZCeWIyWnBiR2x1WnoxYUxsUmhLU2hoS1R0MllYSWdZV0k5UVM1ZmNIUm9jbVZoWkY5elpXeG1QU2dwUFQ0b1lXSTlRUzVmY0hSb2NtVmhaRjl6Wld4bVBWb3VWV0VwS0Nrc2QyTTlRUzVmYldGc2JHOWpQV0U5UGloM1l6MUJMbDl0WVd4c2IyTTlXaTVXWVNrb1lTa3NXRDFCTGw5bWNtVmxQV0U5UGloWVBVRXVYMlp5WldVOVdpNVhZU2tvWVNrN1FTNWZYMlZ0YzJOeWFYQjBaVzVmZEd4elgybHVhWFE5S0NrOVBpaEJMbDlmWlcxelkzSnBjSFJsYmw5MGJITmZhVzVwZEQxYUxsaGhLU2dwTzNaaGNpQmtZejFoUFQ0b1pHTTlXaTVaWVNrb1lTazdRUzVmWDJWdFltbHVaRjlwYm1sMGFXRnNhWHBsWDJKcGJtUnBibWR6UFNncFBUNG9RUzVmWDJWdFltbHVaRjlwYm1sMGFXRnNhWHBsWDJKcGJtUnBibWR6UFZvdVdtRXBLQ2s3WEc1MllYSWdVV005UVM1ZlgyVnRjMk55YVhCMFpXNWZkR2h5WldGa1gybHVhWFE5S0dFc1lpeGpMR1FzWlN4bUtUMCtLRkZqUFVFdVgxOWxiWE5qY21sd2RHVnVYM1JvY21WaFpGOXBibWwwUFZvdUpHRXBLR0VzWWl4akxHUXNaU3htS1R0QkxsOWZaVzF6WTNKcGNIUmxibDkwYUhKbFlXUmZZM0poYzJobFpEMG9LVDArS0VFdVgxOWxiWE5qY21sd2RHVnVYM1JvY21WaFpGOWpjbUZ6YUdWa1BWb3VZV0lwS0NrN2RtRnlJR0pqUFNoaExHSXNZeXhrS1QwK0tHSmpQVm91WW1JcEtHRXNZaXhqTEdRcExDUmhQV0U5UGlna1lUMWFMbU5pS1NoaEtTeG9ZajFCTGw5ZlpXMXpZM0pwY0hSbGJsOTBhSEpsWVdSZlpYaHBkRDFoUFQ0b2FHSTlRUzVmWDJWdGMyTnlhWEIwWlc1ZmRHaHlaV0ZrWDJWNGFYUTlXaTVrWWlrb1lTa3NXV0k5UVM1ZlgyVnRjMk55YVhCMFpXNWZZMmhsWTJ0ZmJXRnBiR0p2ZUQwb0tUMCtLRmxpUFVFdVgxOWxiWE5qY21sd2RHVnVYMk5vWldOclgyMWhhV3hpYjNnOVdpNWxZaWtvS1N4a1lqMG9ZU3hpS1QwK0tHUmlQVm91Wm1JcEtHRXNZaWtzV21JOUtDazlQaWhhWWoxYUxtZGlLU2dwTEdWaVBXRTlQaWhsWWoxYUxtaGlLU2hoS1N4aFl6MWhQVDRvWVdNOVdpNXBZaWtvWVNrN1hHNW1kVzVqZEdsdmJpQlRZeWdwZTNaaGNpQmhQVm83WVQxUFltcGxZM1F1WVhOemFXZHVLSHQ5TEdFcE8zWmhjaUJpUFdROVBpZ3BQVDVrS0NrK1BqNHdMR005WkQwK1pUMCtaQ2hsS1Q0K1BqQTdZUzVmWDJWeWNtNXZYMnh2WTJGMGFXOXVQV0lvWVM1ZlgyVnljbTV2WDJ4dlkyRjBhVzl1S1R0aExsVmhQV0lvWVM1VllTazdZUzVXWVQxaktHRXVWbUVwTzJFdVdXRTlZeWhoTGxsaEtUdGhMbWRpUFdJb1lTNW5ZaWs3WVM1cFlqMWpLR0V1YVdJcE8zSmxkSFZ5YmlCaGZVRXVhMlZsY0ZKMWJuUnBiV1ZCYkdsMlpUMUhZVHRCTG5kaGMyMU5aVzF2Y25rOWJUdEJMbk4wWVdOclFXeHNiMk05WVdNN1FTNXpkR0ZqYTFOaGRtVTlXbUk3UVM1emRHRmphMUpsYzNSdmNtVTlaV0k3UVM1VlZFWTRWRzlUZEhKcGJtYzlWV0U3UVM1emRISnBibWRVYjFWVVJqZzljbUk3UVM1c1pXNW5kR2hDZVhSbGMxVlVSamc5Y0dJN1FTNUZlR2wwVTNSaGRIVnpQVTloTzBFdVVGUm9jbVZoWkQxUE8zWmhjaUJVWXp0TVBXWjFibU4wYVc5dUlGVmpLQ2w3VkdOOGZGWmpLQ2s3VkdOOGZDaE1QVlZqS1gwN1hHNW1kVzVqZEdsdmJpQldZeWdwZXpBOFMzeDhLRVUvS0dwaEtFRXBMRVY4ZkdOaUtFUmhLU3h6ZEdGeWRGZHZjbXRsY2loQktTazZLR05pS0VOaEtTd3dQRXQ4ZkZSamZId29WR005SVRBc1FTNWpZV3hzWldSU2RXNDlJVEFzZVdGOGZDaEZmSHhqWWloRVlTa3NhbUVvUVNrc1JYeDhZMklvUldFcEtTa3BLWDFXWXlncE8xeHVYRzVjYmlBZ2NtVjBkWEp1SUcxdlpIVnNaVUZ5Wnk1eVpXRmtlVnh1ZlZ4dVhHNHBPMXh1ZlNrb0tUdGNibWxtSUNoMGVYQmxiMllnWlhod2IzSjBjeUE5UFQwZ0oyOWlhbVZqZENjZ0ppWWdkSGx3Wlc5bUlHMXZaSFZzWlNBOVBUMGdKMjlpYW1WamRDY3BYRzRnSUcxdlpIVnNaUzVsZUhCdmNuUnpJRDBnYjNKMFYyRnpiVlJvY21WaFpHVmtPMXh1Wld4elpTQnBaaUFvZEhsd1pXOW1JR1JsWm1sdVpTQTlQVDBnSjJaMWJtTjBhVzl1SnlBbUppQmtaV1pwYm1WYkoyRnRaQ2RkS1Z4dUlDQmtaV1pwYm1Vb1cxMHNJQ2dwSUQwK0lHOXlkRmRoYzIxVWFISmxZV1JsWkNrN1hHNGlMQ0FpWENKMWMyVWdjM1J5YVdOMFhDSTdkbUZ5SUUxdlpIVnNaVDE3ZlR0MllYSWdSVTVXU1ZKUFRrMUZUbFJmU1ZOZlRrOUVSVDEwZVhCbGIyWWdjSEp2WTJWemN6MDlYQ0p2WW1wbFkzUmNJaVltZEhsd1pXOW1JSEJ5YjJObGMzTXVkbVZ5YzJsdmJuTTlQVndpYjJKcVpXTjBYQ0ltSm5SNWNHVnZaaUJ3Y205alpYTnpMblpsY25OcGIyNXpMbTV2WkdVOVBWd2ljM1J5YVc1blhDSTdhV1lvUlU1V1NWSlBUazFGVGxSZlNWTmZUazlFUlNsN2RtRnlJRzV2WkdWWGIzSnJaWEpVYUhKbFlXUnpQWEpsY1hWcGNtVW9YQ0ozYjNKclpYSmZkR2h5WldGa2Mxd2lLVHQyWVhJZ2NHRnlaVzUwVUc5eWREMXViMlJsVjI5eWEyVnlWR2h5WldGa2N5NXdZWEpsYm5SUWIzSjBPM0JoY21WdWRGQnZjblF1YjI0b1hDSnRaWE56WVdkbFhDSXNaR0YwWVQwK2IyNXRaWE56WVdkbEtIdGtZWFJoT21SaGRHRjlLU2s3ZG1GeUlHWnpQWEpsY1hWcGNtVW9YQ0ptYzF3aUtUdFBZbXBsWTNRdVlYTnphV2R1S0dkc2IySmhiQ3g3YzJWc1pqcG5iRzlpWVd3c2NtVnhkV2x5WlRweVpYRjFhWEpsTEUxdlpIVnNaVHBOYjJSMWJHVXNiRzlqWVhScGIyNDZlMmh5WldZNlgxOW1hV3hsYm1GdFpYMHNWMjl5YTJWeU9tNXZaR1ZYYjNKclpYSlVhSEpsWVdSekxsZHZjbXRsY2l4cGJYQnZjblJUWTNKcGNIUnpPbVk5UGlnd0xHVjJZV3dwS0daekxuSmxZV1JHYVd4bFUzbHVZeWhtTEZ3aWRYUm1PRndpS1N0Y0lpOHZJeUJ6YjNWeVkyVlZVa3c5WENJclppa3NjRzl6ZEUxbGMzTmhaMlU2YlhOblBUNXdZWEpsYm5SUWIzSjBMbkJ2YzNSTlpYTnpZV2RsS0cxelp5a3NjR1Z5Wm05eWJXRnVZMlU2WjJ4dlltRnNMbkJsY21admNtMWhibU5sZkh4N2JtOTNPa1JoZEdVdWJtOTNmWDBwZlhaaGNpQnBibWwwYVdGc2FYcGxaRXBUUFdaaGJITmxPMloxYm1OMGFXOXVJSFJvY21WaFpGQnlhVzUwUlhKeUtDbDdkbUZ5SUhSbGVIUTlRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1OaGJHd29ZWEpuZFcxbGJuUnpLUzVxYjJsdUtGd2lJRndpS1R0cFppaEZUbFpKVWs5T1RVVk9WRjlKVTE5T1QwUkZLWHRtY3k1M2NtbDBaVk41Ym1Nb01peDBaWGgwSzF3aVhGeHVYQ0lwTzNKbGRIVnlibjFqYjI1emIyeGxMbVZ5Y205eUtIUmxlSFFwZldaMWJtTjBhVzl1SUhSb2NtVmhaRUZzWlhKMEtDbDdkbUZ5SUhSbGVIUTlRWEp5WVhrdWNISnZkRzkwZVhCbExuTnNhV05sTG1OaGJHd29ZWEpuZFcxbGJuUnpLUzVxYjJsdUtGd2lJRndpS1R0d2IzTjBUV1Z6YzJGblpTaDdZMjFrT2x3aVlXeGxjblJjSWl4MFpYaDBPblJsZUhRc2RHaHlaV0ZrU1dRNlRXOWtkV3hsVzF3aVgzQjBhSEpsWVdSZmMyVnNabHdpWFNncGZTbDlkbUZ5SUdWeWNqMTBhSEpsWVdSUWNtbHVkRVZ5Y2p0elpXeG1MbUZzWlhKMFBYUm9jbVZoWkVGc1pYSjBPMDF2WkhWc1pWdGNJbWx1YzNSaGJuUnBZWFJsVjJGemJWd2lYVDBvYVc1bWJ5eHlaV05sYVhabFNXNXpkR0Z1WTJVcFBUNTdkbUZ5SUcxdlpIVnNaVDFOYjJSMWJHVmJYQ0ozWVhOdFRXOWtkV3hsWENKZE8wMXZaSFZzWlZ0Y0luZGhjMjFOYjJSMWJHVmNJbDA5Ym5Wc2JEdDJZWElnYVc1emRHRnVZMlU5Ym1WM0lGZGxZa0Z6YzJWdFlteDVMa2x1YzNSaGJtTmxLRzF2WkhWc1pTeHBibVp2S1R0eVpYUjFjbTRnY21WalpXbDJaVWx1YzNSaGJtTmxLR2x1YzNSaGJtTmxLWDA3YzJWc1ppNXZiblZ1YUdGdVpHeGxaSEpsYW1WamRHbHZiajFsUFQ1N2RHaHliM2NnWlM1eVpXRnpiMjU4ZkdWOU8yWjFibU4wYVc5dUlHaGhibVJzWlUxbGMzTmhaMlVvWlNsN2RISjVlMmxtS0dVdVpHRjBZUzVqYldROVBUMWNJbXh2WVdSY0lpbDdiR1YwSUcxbGMzTmhaMlZSZFdWMVpUMWJYVHR6Wld4bUxtOXViV1Z6YzJGblpUMWxQVDV0WlhOellXZGxVWFZsZFdVdWNIVnphQ2hsS1R0elpXeG1Mbk4wWVhKMFYyOXlhMlZ5UFdsdWMzUmhibU5sUFQ1N1RXOWtkV3hsUFdsdWMzUmhibU5sTzNCdmMzUk5aWE56WVdkbEtIdGNJbU50WkZ3aU9sd2liRzloWkdWa1hDSjlLVHRtYjNJb2JHVjBJRzF6WnlCdlppQnRaWE56WVdkbFVYVmxkV1VwZTJoaGJtUnNaVTFsYzNOaFoyVW9iWE5uS1gxelpXeG1MbTl1YldWemMyRm5aVDFvWVc1a2JHVk5aWE56WVdkbGZUdE5iMlIxYkdWYlhDSjNZWE50VFc5a2RXeGxYQ0pkUFdVdVpHRjBZUzUzWVhOdFRXOWtkV3hsTzJadmNpaGpiMjV6ZENCb1lXNWtiR1Z5SUc5bUlHVXVaR0YwWVM1b1lXNWtiR1Z5Y3lsN1RXOWtkV3hsVzJoaGJtUnNaWEpkUFNndUxpNWhjbWR6S1QwK2UzQnZjM1JOWlhOellXZGxLSHRqYldRNlhDSmpZV3hzU0dGdVpHeGxjbHdpTEdoaGJtUnNaWEk2YUdGdVpHeGxjaXhoY21kek9tRnlaM045S1gxOVRXOWtkV3hsVzF3aWQyRnpiVTFsYlc5eWVWd2lYVDFsTG1SaGRHRXVkMkZ6YlUxbGJXOXllVHROYjJSMWJHVmJYQ0ppZFdabVpYSmNJbDA5VFc5a2RXeGxXMXdpZDJGemJVMWxiVzl5ZVZ3aVhTNWlkV1ptWlhJN1RXOWtkV3hsVzF3aVJVNVdTVkpQVGsxRlRsUmZTVk5mVUZSSVVrVkJSRndpWFQxMGNuVmxPMmxtS0hSNWNHVnZaaUJsTG1SaGRHRXVkWEpzVDNKQ2JHOWlQVDFjSW5OMGNtbHVaMXdpS1h0cGJYQnZjblJUWTNKcGNIUnpLR1V1WkdGMFlTNTFjbXhQY2tKc2IySXBmV1ZzYzJWN2RtRnlJRzlpYW1WamRGVnliRDFWVWt3dVkzSmxZWFJsVDJKcVpXTjBWVkpNS0dVdVpHRjBZUzUxY214UGNrSnNiMklwTzJsdGNHOXlkRk5qY21sd2RITW9iMkpxWldOMFZYSnNLVHRWVWt3dWNtVjJiMnRsVDJKcVpXTjBWVkpNS0c5aWFtVmpkRlZ5YkNsOWIzSjBWMkZ6YlZSb2NtVmhaR1ZrS0UxdlpIVnNaU2w5Wld4elpTQnBaaWhsTG1SaGRHRXVZMjFrUFQwOVhDSnlkVzVjSWlsN1RXOWtkV3hsVzF3aVgxOWxiWE5qY21sd2RHVnVYM1JvY21WaFpGOXBibWwwWENKZEtHVXVaR0YwWVM1d2RHaHlaV0ZrWDNCMGNpd3ZLbWx6WDIxaGFXNDlLaTh3TEM4cWFYTmZjblZ1ZEdsdFpUMHFMekFzTHlwallXNWZZbXh2WTJzOUtpOHhLVHROYjJSMWJHVmJYQ0pmWDJWdGMyTnlhWEIwWlc1ZmRHaHlaV0ZrWDIxaGFXeGliM2hmWVhkaGFYUmNJbDBvWlM1a1lYUmhMbkIwYUhKbFlXUmZjSFJ5S1R0TmIyUjFiR1ZiWENKbGMzUmhZbXhwYzJoVGRHRmphMU53WVdObFhDSmRLQ2s3VFc5a2RXeGxXMXdpVUZSb2NtVmhaRndpWFM1eVpXTmxhWFpsVDJKcVpXTjBWSEpoYm5ObVpYSW9aUzVrWVhSaEtUdE5iMlIxYkdWYlhDSlFWR2h5WldGa1hDSmRMblJvY21WaFpFbHVhWFJVVEZNb0tUdHBaaWdoYVc1cGRHbGhiR2w2WldSS1V5bDdUVzlrZFd4bFcxd2lYMTlsYldKcGJtUmZhVzVwZEdsaGJHbDZaVjlpYVc1a2FXNW5jMXdpWFNncE8ybHVhWFJwWVd4cGVtVmtTbE05ZEhKMVpYMTBjbmw3VFc5a2RXeGxXMXdpYVc1MmIydGxSVzUwY25sUWIybHVkRndpWFNobExtUmhkR0V1YzNSaGNuUmZjbTkxZEdsdVpTeGxMbVJoZEdFdVlYSm5LWDFqWVhSamFDaGxlQ2w3YVdZb1pYZ2hQVndpZFc1M2FXNWtYQ0lwZTNSb2NtOTNJR1Y0ZlgxOVpXeHpaU0JwWmlobExtUmhkR0V1WTIxa1BUMDlYQ0pqWVc1alpXeGNJaWw3YVdZb1RXOWtkV3hsVzF3aVgzQjBhSEpsWVdSZmMyVnNabHdpWFNncEtYdE5iMlIxYkdWYlhDSmZYMlZ0YzJOeWFYQjBaVzVmZEdoeVpXRmtYMlY0YVhSY0lsMG9MVEVwZlgxbGJITmxJR2xtS0dVdVpHRjBZUzUwWVhKblpYUTlQVDFjSW5ObGRHbHRiV1ZrYVdGMFpWd2lLWHQ5Wld4elpTQnBaaWhsTG1SaGRHRXVZMjFrUFQwOVhDSmphR1ZqYTAxaGFXeGliM2hjSWlsN2FXWW9hVzVwZEdsaGJHbDZaV1JLVXlsN1RXOWtkV3hsVzF3aVkyaGxZMnROWVdsc1ltOTRYQ0pkS0NsOWZXVnNjMlVnYVdZb1pTNWtZWFJoTG1OdFpDbDdaWEp5S0dCM2IzSnJaWEl1YW5NZ2NtVmpaV2wyWldRZ2RXNXJibTkzYmlCamIyMXRZVzVrSUNSN1pTNWtZWFJoTG1OdFpIMWdLVHRsY25Jb1pTNWtZWFJoS1gxOVkyRjBZMmdvWlhncGUybG1LRTF2WkhWc1pWdGNJbDlmWlcxelkzSnBjSFJsYmw5MGFISmxZV1JmWTNKaGMyaGxaRndpWFNsN1RXOWtkV3hsVzF3aVgxOWxiWE5qY21sd2RHVnVYM1JvY21WaFpGOWpjbUZ6YUdWa1hDSmRLQ2w5ZEdoeWIzY2daWGg5ZlhObGJHWXViMjV0WlhOellXZGxQV2hoYm1Sc1pVMWxjM05oWjJVN1hHNGlMQ0FpWlhod2IzSjBJR052Ym5OMElHcHZhVzRnUFNCMWJtUmxabWx1WldRN0lpd2dJaTh2SUVOdmNIbHlhV2RvZENBb1l5a2dUV2xqY205emIyWjBJRU52Y25CdmNtRjBhVzl1TGlCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVMeThnVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUUxSlZDQk1hV05sYm5ObExseHVYRzVwYlhCdmNuUWdLaUJoY3lCd1lYUm9JR1p5YjIwZ0oyNXZaR1U2Y0dGMGFDYzdYRzVwYlhCdmNuUWdlMFZ1ZG4wZ1puSnZiU0FuYjI1dWVISjFiblJwYldVdFkyOXRiVzl1Snp0Y2JseHVhVzF3YjNKMElIdFBjblJYWVhOdFRXOWtkV3hsZlNCbWNtOXRJQ2N1TDJKcGJtUnBibWN2YjNKMExYZGhjMjBuTzF4dWFXMXdiM0owSUh0UGNuUlhZWE50VkdoeVpXRmtaV1JOYjJSMWJHVjlJR1p5YjIwZ0p5NHZZbWx1WkdsdVp5OXZjblF0ZDJGemJTMTBhSEpsWVdSbFpDYzdYRzVjYmk4cUlHVnpiR2x1ZEMxa2FYTmhZbXhsSUVCMGVYQmxjMk55YVhCMExXVnpiR2x1ZEM5dWJ5MXlaWEYxYVhKbExXbHRjRzl5ZEhNZ0tpOWNibXhsZENCdmNuUlhZWE50Um1GamRHOXllVG9nUlcxelkzSnBjSFJsYmsxdlpIVnNaVVpoWTNSdmNuazhUM0owVjJGemJVMXZaSFZzWlQ0N1hHNWNibWxtSUNnaFFsVkpURVJmUkVWR1V5NUVTVk5CUWt4RlgxUlNRVWxPU1U1SEtTQjdYRzRnSUc5eWRGZGhjMjFHWVdOMGIzSjVJRDBnY21WeGRXbHlaU2duTGk5aWFXNWthVzVuTDI5eWRDMTBjbUZwYm1sdVp5MTNZWE50TFhOcGJXUXVhbk1uS1R0Y2JuMGdaV3h6WlNCN1hHNGdJRzl5ZEZkaGMyMUdZV04wYjNKNUlEMWNiaUFnSUNBZ0lFSlZTVXhFWDBSRlJsTXVSRWxUUVVKTVJWOVhSVUpIVUZVZ1B5QnlaWEYxYVhKbEtDY3VMMkpwYm1ScGJtY3ZiM0owTFhkaGMyMHVhbk1uS1NBNklISmxjWFZwY21Vb0p5NHZZbWx1WkdsdVp5OXZjblF0ZDJGemJTMXphVzFrTG1welpYQXVhbk1uS1R0Y2JuMWNibHh1WTI5dWMzUWdiM0owVjJGemJVWmhZM1J2Y25sVWFISmxZV1JsWkRvZ1JXMXpZM0pwY0hSbGJrMXZaSFZzWlVaaFkzUnZjbms4VDNKMFYyRnpiVTF2WkhWc1pUNGdQU0FoUWxWSlRFUmZSRVZHVXk1RVNWTkJRa3hGWDFkQlUwMWZWRWhTUlVGRUlEOWNiaUFnSUNBb1FsVkpURVJmUkVWR1V5NUVTVk5CUWt4RlgxZEZRa2RRVlNBL0lISmxjWFZwY21Vb0p5NHZZbWx1WkdsdVp5OXZjblF0ZDJGemJTMTBhSEpsWVdSbFpDNXFjeWNwSURwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGNYVnBjbVVvSnk0dlltbHVaR2x1Wnk5dmNuUXRkMkZ6YlMxemFXMWtMWFJvY21WaFpHVmtMbXB6WlhBdWFuTW5LU2tnT2x4dUlDQWdJRzl5ZEZkaGMyMUdZV04wYjNKNU8xeHVMeW9nWlhOc2FXNTBMV1Z1WVdKc1pTQkFkSGx3WlhOamNtbHdkQzFsYzJ4cGJuUXZibTh0Y21WeGRXbHlaUzFwYlhCdmNuUnpJQ292WEc1Y2JteGxkQ0IzWVhOdE9pQlBjblJYWVhOdFRXOWtkV3hsZkhWdVpHVm1hVzVsWkR0Y2JteGxkQ0JwYm1sMGFXRnNhWHBsWkNBOUlHWmhiSE5sTzF4dWJHVjBJR2x1YVhScFlXeHBlbWx1WnlBOUlHWmhiSE5sTzF4dWJHVjBJR0ZpYjNKMFpXUWdQU0JtWVd4elpUdGNibHh1WTI5dWMzUWdhWE5OZFd4MGFWUm9jbVZoWkZOMWNIQnZjblJsWkNBOUlDZ3BPaUJpYjI5c1pXRnVJRDArSUh0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0F2THlCSlppQW5VMmhoY21Wa1FYSnlZWGxDZFdabVpYSW5JR2x6SUc1dmRDQmhkbUZwYkdGaWJHVXNJRmRsWWtGemMyVnRZbXg1SUhSb2NtVmhaSE1nZDJsc2JDQnViM1FnZDI5eWF5NWNiaUFnSUNCcFppQW9kSGx3Wlc5bUlGTm9ZWEpsWkVGeWNtRjVRblZtWm1WeUlEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRlJsYzNRZ1ptOXlJSFJ5WVc1elptVnlZV0pwYkdsMGVTQnZaaUJUUVVKeklDaG1iM0lnWW5KdmQzTmxjbk11SUc1bFpXUmxaQ0JtYjNJZ1JtbHlaV1p2ZUNsY2JpQWdJQ0F2THlCb2RIUndjem92TDJkeWIzVndjeTVuYjI5bmJHVXVZMjl0TDJadmNuVnRMeU1oYlhObkwyMXZlbWxzYkdFdVpHVjJMbkJzWVhSbWIzSnRMMGxJYTBKYWJFaEZWSEJCTDJSM2MwMU9ZMmhYUlZGQlNseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1RXVnpjMkZuWlVOb1lXNXVaV3dnSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0J1WlhjZ1RXVnpjMkZuWlVOb1lXNXVaV3dvS1M1d2IzSjBNUzV3YjNOMFRXVnpjMkZuWlNodVpYY2dVMmhoY21Wa1FYSnlZWGxDZFdabVpYSW9NU2twTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZSbGMzUWdabTl5SUZkbFlrRnpjMlZ0WW14NUlIUm9jbVZoWkhNZ1kyRndZV0pwYkdsMGVTQW9abTl5SUdKdmRHZ2dZbkp2ZDNObGNuTWdZVzVrSUU1dlpHVXVhbk1wWEc0Z0lDQWdMeThnVkdocGN5QjBlWEJsWkNCaGNuSmhlU0JwY3lCaElGZGxZa0Z6YzJWdFlteDVJSEJ5YjJkeVlXMGdZMjl1ZEdGcGJtbHVaeUIwYUhKbFlXUmxaQ0JwYm5OMGNuVmpkR2x2Ym5NdVhHNGdJQ0FnY21WMGRYSnVJRmRsWWtGemMyVnRZbXg1TG5aaGJHbGtZWFJsS0c1bGR5QlZhVzUwT0VGeWNtRjVLRnRjYmlBZ0lDQWdJREFzSURrM0xDQXhNVFVzSURFd09Td2dNU3dnTUN3Z0lEQXNJQ0F3TENBeExDQTBMQ0F4TENBZ09UWXNJREFzSUNBZ01Dd2dJRE1zSURJc0lERXNJQ0F3TENBMUxGeHVJQ0FnSUNBZ05Dd2dNU3dnSURNc0lDQWdNU3dnSUNBeExDQXhNQ3dnTVRFc0lERXNJRGtzSURBc0lEWTFMQ0F3TENBZ01qVTBMQ0F4Tml3Z01pd2dNQ3dnTWpZc0lERXhYRzRnSUNBZ1hTa3BPMXh1SUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCOVhHNTlPMXh1WEc1amIyNXpkQ0JwYzFOcGJXUlRkWEJ3YjNKMFpXUWdQU0FvS1RvZ1ltOXZiR1ZoYmlBOVBpQjdYRzRnSUhSeWVTQjdYRzRnSUNBZ0x5OGdWR1Z6ZENCbWIzSWdWMlZpUVhOelpXMWliSGtnVTBsTlJDQmpZWEJoWW1sc2FYUjVJQ2htYjNJZ1ltOTBhQ0JpY205M2MyVnljeUJoYm1RZ1RtOWtaUzVxY3lsY2JpQWdJQ0F2THlCVWFHbHpJSFI1Y0dWa0lHRnljbUY1SUdseklHRWdWMlZpUVhOelpXMWliSGtnY0hKdlozSmhiU0JqYjI1MFlXbHVhVzVuSUZOSlRVUWdhVzV6ZEhKMVkzUnBiMjV6TGx4dVhHNGdJQ0FnTHk4Z1ZHaGxJR0pwYm1GeWVTQmtZWFJoSUdseklHZGxibVZ5WVhSbFpDQm1jbTl0SUhSb1pTQm1iMnhzYjNkcGJtY2dZMjlrWlNCaWVTQjNZWFF5ZDJGemJUcGNiaUFnSUNBdkwxeHVJQ0FnSUM4dklDaHRiMlIxYkdWY2JpQWdJQ0F2THlBZ0lDaDBlWEJsSUNSME1DQW9ablZ1WXlrcFhHNGdJQ0FnTHk4Z0lDQW9ablZ1WXlBa1pqQWdLSFI1Y0dVZ0pIUXdLVnh1SUNBZ0lDOHZJQ0FnSUNBb1pISnZjRnh1SUNBZ0lDOHZJQ0FnSUNBZ0lDaHBNeko0TkM1a2IzUmZhVEUyZURoZmMxeHVJQ0FnSUM4dklDQWdJQ0FnSUNBZ0tHazRlREUyTG5Od2JHRjBYRzRnSUNBZ0x5OGdJQ0FnSUNBZ0lDQWdJQ2hwTXpJdVkyOXVjM1FnTUNrcFhHNGdJQ0FnTHk4Z0lDQWdJQ0FnSUNBb2RqRXlPQzVqYjI1emRDQnBNeko0TkNBd2VEQXdNREF3TURBd0lEQjRNREF3TURBd01EQWdNSGd3TURBd01EQXdNQ0F3ZURBd01EQXdNREF3S1NrcEtTbGNibHh1SUNBZ0lISmxkSFZ5YmlCWFpXSkJjM05sYldKc2VTNTJZV3hwWkdGMFpTaHVaWGNnVldsdWREaEJjbkpoZVNoYlhHNGdJQ0FnSUNBd0xDQWdJRGszTENBeE1UVXNJREV3T1N3Z01Td2dNQ3dnTUN3Z01Dd2dNU3dnTkN3Z01Td2dPVFlzSURBc0lEQXNJRE1zSURJc0lERXNJREFzSURFd0xDQXpNQ3dnTVN3Z0lDQXlPQ3dnSURBc0lEWTFMQ0F3TEZ4dUlDQWdJQ0FnTWpVekxDQXhOU3dnTWpVekxDQXhNaXdnSURBc0lEQXNJREFzSURBc0lEQXNJREFzSURBc0lEQXNJQ0F3TENBd0xDQXdMQ0F3TENBd0xDQXdMQ0F3TENBZ01Dd2dJREkxTXl3Z01UZzJMQ0F4TENBeU5pd2dNVEZjYmlBZ0lDQmRLU2s3WEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNibjA3WEc1Y2JtTnZibk4wSUdkbGRGZGhjMjFHYVd4bFRtRnRaU0E5SUNoMWMyVlRhVzFrT2lCaWIyOXNaV0Z1TENCMWMyVlVhSEpsWVdSek9pQmliMjlzWldGdUtTQTlQaUI3WEc0Z0lHbG1JQ2gxYzJWVGFXMWtLU0I3WEc0Z0lDQWdhV1lnS0NGQ1ZVbE1SRjlFUlVaVExrUkpVMEZDVEVWZlZGSkJTVTVKVGtjcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlBbmIzSjBMWFJ5WVdsdWFXNW5MWGRoYzIwdGMybHRaQzUzWVhOdEp6dGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFZ6WlZSb2NtVmhaSE1nUHlBbmIzSjBMWGRoYzIwdGMybHRaQzEwYUhKbFlXUmxaQzUzWVhOdEp5QTZJQ2R2Y25RdGQyRnpiUzF6YVcxa0xuZGhjMjBuTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUIxYzJWVWFISmxZV1J6SUQ4Z0oyOXlkQzEzWVhOdExYUm9jbVZoWkdWa0xuZGhjMjBuSURvZ0oyOXlkQzEzWVhOdExuZGhjMjBuTzF4dUlDQjlYRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnYVc1cGRHbGhiR2w2WlZkbFlrRnpjMlZ0WW14NUlEMGdZWE41Ym1Nb1pteGhaM002SUVWdWRpNVhaV0pCYzNObGJXSnNlVVpzWVdkektUb2dVSEp2YldselpUeDJiMmxrUGlBOVBpQjdYRzRnSUdsbUlDaHBibWwwYVdGc2FYcGxaQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxjMjlzZG1Vb0tUdGNiaUFnZlZ4dUlDQnBaaUFvYVc1cGRHbGhiR2w2YVc1bktTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkdGRXeDBhWEJzWlNCallXeHNjeUIwYnlCY1hDZHBibWwwYVdGc2FYcGxWMlZpUVhOelpXMWliSGtvS1Z4Y0p5QmtaWFJsWTNSbFpDNG5LVHRjYmlBZ2ZWeHVJQ0JwWmlBb1lXSnZjblJsWkNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduY0hKbGRtbHZkWE1nWTJGc2JDQjBieUJjWENkcGJtbDBhV0ZzYVhwbFYyVmlRWE56WlcxaWJIa29LVnhjSnlCbVlXbHNaV1F1SnlrN1hHNGdJSDFjYmx4dUlDQnBibWwwYVdGc2FYcHBibWNnUFNCMGNuVmxPMXh1WEc0Z0lDOHZJSGRoYzIwZ1pteGhaM01nWVhKbElHRnNjbVZoWkhrZ2FXNXBkR2xoYkdsNlpXUmNiaUFnWTI5dWMzUWdkR2x0Wlc5MWRDQTlJR1pzWVdkekxtbHVhWFJVYVcxbGIzVjBJVHRjYmlBZ1kyOXVjM1FnYm5WdFZHaHlaV0ZrY3lBOUlHWnNZV2R6TG01MWJWUm9jbVZoWkhNaE8xeHVJQ0JqYjI1emRDQnphVzFrSUQwZ1pteGhaM011YzJsdFpDRTdYRzVjYmlBZ1kyOXVjM1FnZFhObFZHaHlaV0ZrY3lBOUlHNTFiVlJvY21WaFpITWdQaUF4SUNZbUlHbHpUWFZzZEdsVWFISmxZV1JUZFhCd2IzSjBaV1FvS1R0Y2JpQWdZMjl1YzNRZ2RYTmxVMmx0WkNBOUlITnBiV1FnSmlZZ2FYTlRhVzFrVTNWd2NHOXlkR1ZrS0NrN1hHNWNiaUFnWTI5dWMzUWdkMkZ6YlZCaGRHaHpJRDBnWm14aFozTXVkMkZ6YlZCaGRHaHpPMXh1SUNCamIyNXpkQ0IzWVhOdFVISmxabWw0VDNabGNuSnBaR1VnUFNCMGVYQmxiMllnZDJGemJWQmhkR2h6SUQwOVBTQW5jM1J5YVc1bkp5QS9JSGRoYzIxUVlYUm9jeUE2SUhWdVpHVm1hVzVsWkR0Y2JpQWdZMjl1YzNRZ2QyRnpiVVpwYkdWT1lXMWxJRDBnWjJWMFYyRnpiVVpwYkdWT1lXMWxLSFZ6WlZOcGJXUXNJSFZ6WlZSb2NtVmhaSE1wTzF4dUlDQmpiMjV6ZENCM1lYTnRVR0YwYUU5MlpYSnlhV1JsSUQwZ2RIbHdaVzltSUhkaGMyMVFZWFJvY3lBOVBUMGdKMjlpYW1WamRDY2dQeUIzWVhOdFVHRjBhSE5iZDJGemJVWnBiR1ZPWVcxbFhTQTZJSFZ1WkdWbWFXNWxaRHRjYmx4dUlDQnNaWFFnYVhOVWFXMWxiM1YwSUQwZ1ptRnNjMlU3WEc1Y2JpQWdZMjl1YzNRZ2RHRnphM002SUVGeWNtRjVQRkJ5YjIxcGMyVThkbTlwWkQ0K0lEMGdXMTA3WEc1Y2JpQWdMeThnY0hKdmJXbHpaU0JtYjNJZ2RHbHRaVzkxZEZ4dUlDQnBaaUFvZEdsdFpXOTFkQ0ErSURBcElIdGNiaUFnSUNCMFlYTnJjeTV3ZFhOb0tHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxLU0E5UGlCN1hHNGdJQ0FnSUNCelpYUlVhVzFsYjNWMEtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ2FYTlVhVzFsYjNWMElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNncE8xeHVJQ0FnSUNBZ2ZTd2dkR2x0Wlc5MWRDazdYRzRnSUNBZ2ZTa3BPMXh1SUNCOVhHNWNiaUFnTHk4Z2NISnZiV2x6WlNCbWIzSWdiVzlrZFd4bElHbHVhWFJwWVd4cGVtRjBhVzl1WEc0Z0lIUmhjMnR6TG5CMWMyZ29ibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJR1poWTNSdmNua2dQU0IxYzJWVWFISmxZV1J6SUQ4Z2IzSjBWMkZ6YlVaaFkzUnZjbmxVYUhKbFlXUmxaQ0E2SUc5eWRGZGhjMjFHWVdOMGIzSjVPMXh1SUNBZ0lHTnZibk4wSUdOdmJtWnBaem9nVUdGeWRHbGhiRHhQY25SWFlYTnRUVzlrZFd4bFBpQTlJSHRjYmlBZ0lDQWdJR3h2WTJGMFpVWnBiR1U2SUNobWFXeGxUbUZ0WlRvZ2MzUnlhVzVuTENCelkzSnBjSFJFYVhKbFkzUnZjbms2SUhOMGNtbHVaeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVVKVlNVeEVYMFJGUmxNdVJFbFRRVUpNUlY5WFFWTk5YMVJJVWtWQlJDQW1KaUIxYzJWVWFISmxZV1J6SUNZbUlHWnBiR1ZPWVcxbExtVnVaSE5YYVhSb0tDY3VkMjl5YTJWeUxtcHpKeWtnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dWdlppQkNiRzlpSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCVlVrd3VZM0psWVhSbFQySnFaV04wVlZKTUtHNWxkeUJDYkc5aUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWR2hwY3lCeVpYRjFhWEpsS0NrZ1puVnVZM1JwYjI0Z2FYTWdhR0Z1Wkd4bFpDQmllU0JsYzJKMWFXeGtJSEJzZFdkcGJpQjBieUJzYjJGa0lHWnBiR1VnWTI5dWRHVnVkQ0JoY3lCemRISnBibWN1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUVCMGVYQmxjMk55YVhCMExXVnpiR2x1ZEM5dWJ5MXlaWEYxYVhKbExXbHRjRzl5ZEhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYRjFhWEpsS0NjdUwySnBibVJwYm1jdmIzSjBMWGRoYzIwdGRHaHlaV0ZrWldRdWQyOXlhMlZ5TG1wekp5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1hTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2UzUjVjR1U2SUNkMFpYaDBMMnBoZG1GelkzSnBjSFFuZlNrcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHWnBiR1ZPWVcxbExtVnVaSE5YYVhSb0tDY3VkMkZ6YlNjcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIZGhjMjFRWVhSb1QzWmxjbkpwWkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIzWVhOdFVHRjBhRTkyWlhKeWFXUmxPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJR052Ym5OMElIQnlaV1pwZUNBOUlIZGhjMjFRY21WbWFYaFBkbVZ5Y21sa1pTQS9QeUJ6WTNKcGNIUkVhWEpsWTNSdmNuazdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JVUpWU1V4RVgwUkZSbE11UkVsVFFVSk1SVjlYUlVKSFVGVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gzWVhOdFJtbHNaVTVoYldVZ1BUMDlJQ2R2Y25RdGQyRnpiUzF6YVcxa0xuZGhjMjBuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3Y21WbWFYZ2dLeUFuYjNKMExYZGhjMjB0YzJsdFpDNXFjMlZ3TG5kaGMyMG5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDNZWE50Um1sc1pVNWhiV1VnUFQwOUlDZHZjblF0ZDJGemJTMXphVzFrTFhSb2NtVmhaR1ZrTG5kaGMyMG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQndjbVZtYVhnZ0t5QW5iM0owTFhkaGMyMHRjMmx0WkMxMGFISmxZV1JsWkM1cWMyVndMbmRoYzIwbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3Y21WbWFYZ2dLeUIzWVhOdFJtbHNaVTVoYldVN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMk55YVhCMFJHbHlaV04wYjNKNUlDc2dabWxzWlU1aGJXVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHbG1JQ2doUWxWSlRFUmZSRVZHVXk1RVNWTkJRa3hGWDFkQlUwMWZWRWhTUlVGRUlDWW1JSFZ6WlZSb2NtVmhaSE1wSUh0Y2JpQWdJQ0FnSUdOdmJtWnBaeTV1ZFcxVWFISmxZV1J6SUQwZ2JuVnRWR2h5WldGa2N6dGNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdRbXh2WWlBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVabWxuTG0xaGFXNVRZM0pwY0hSVmNteFBja0pzYjJJZ1BTQndZWFJvTG1wdmFXNG9YMTlrYVhKdVlXMWxMQ0FuYjNKMExYZGhjMjB0ZEdoeVpXRmtaV1F1YW5NbktUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhOamNtbHdkRk52ZFhKalpVTnZaR1VnUFNCZ2RtRnlJRzl5ZEZkaGMyMVVhSEpsWVdSbFpEMGtlMlpoWTNSdmNua3VkRzlUZEhKcGJtY29LWDA3WUR0Y2JpQWdJQ0FnSUNBZ1kyOXVabWxuTG0xaGFXNVRZM0pwY0hSVmNteFBja0pzYjJJZ1BTQnVaWGNnUW14dllpaGJjMk55YVhCMFUyOTFjbU5sUTI5a1pWMHNJSHQwZVhCbE9pQW5kR1Y0ZEM5cVlYWmhjMk55YVhCMEozMHBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lHWmhZM1J2Y25rb1kyOXVabWxuS1M1MGFHVnVLRnh1SUNBZ0lDQWdJQ0F2THlCM1lYTnRJRzF2WkhWc1pTQnBibWwwYVdGc2FYcGxaQ0J6ZFdOalpYTnpablZzYkhsY2JpQWdJQ0FnSUNBZ2JXOWtkV3hsSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0JwYm1sMGFXRnNhWHBwYm1jZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0FnSUNBZ0lDQnBibWwwYVdGc2FYcGxaQ0E5SUhSeWRXVTdYRzRnSUNBZ0lDQWdJQ0FnZDJGemJTQTlJRzF2WkhWc1pUdGNiaUFnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLQ2s3WEc0Z0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDOHZJSGRoYzIwZ2JXOWtkV3hsSUdaaGFXeGxaQ0IwYnlCcGJtbDBhV0ZzYVhwbFhHNGdJQ0FnSUNBZ0lDaDNhR0YwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnYVc1cGRHbGhiR2w2YVc1bklEMGdabUZzYzJVN1hHNGdJQ0FnSUNBZ0lDQWdZV0p2Y25SbFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtIZG9ZWFFwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnZlNrcE8xeHVYRzRnSUdGM1lXbDBJRkJ5YjIxcGMyVXVjbUZqWlNoMFlYTnJjeWs3WEc1Y2JpQWdhV1lnS0dselZHbHRaVzkxZENrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnVjJWaVFYTnpaVzFpYkhrZ1ltRmphMlZ1WkNCcGJtbDBhV0ZzYVhwcGJtY2dabUZwYkdWa0lHUjFaU0IwYnlCMGFXMWxiM1YwT2lBa2UzUnBiV1Z2ZFhSOWJYTmdLVHRjYmlBZ2ZWeHVmVHRjYmx4dVpYaHdiM0owSUdOdmJuTjBJR2RsZEVsdWMzUmhibU5sSUQwZ0tDazZJRTl5ZEZkaGMyMU5iMlIxYkdVZ1BUNGdlMXh1SUNCcFppQW9hVzVwZEdsaGJHbDZaV1FnSmlZZ2QyRnpiU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjNZWE50TzF4dUlDQjlYRzVjYmlBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkWFpXSkJjM05sYldKc2VTQnBjeUJ1YjNRZ2FXNXBkR2xoYkdsNlpXUWdlV1YwTGljcE8xeHVmVHRjYmx4dVpYaHdiM0owSUdOdmJuTjBJR1JwYzNCdmMyVWdQU0FvS1RvZ2RtOXBaQ0E5UGlCN1hHNGdJR2xtSUNocGJtbDBhV0ZzYVhwbFpDQW1KaUFoYVc1cGRHbGhiR2w2YVc1bklDWW1JQ0ZoWW05eWRHVmtLU0I3WEc0Z0lDQWdhVzVwZEdsaGJHbDZhVzVuSUQwZ2RISjFaVHRjYmx4dUlDQWdJQ2gzWVhOdElHRnpJRTl5ZEZkaGMyMVVhSEpsWVdSbFpFMXZaSFZzWlNrdVVGUm9jbVZoWkQ4dWRHVnliV2x1WVhSbFFXeHNWR2h5WldGa2N5Z3BPMXh1SUNBZ0lIZGhjMjBnUFNCMWJtUmxabWx1WldRN1hHNWNiaUFnSUNCcGJtbDBhV0ZzYVhwcGJtY2dQU0JtWVd4elpUdGNiaUFnSUNCcGJtbDBhV0ZzYVhwbFpDQTlJR1poYkhObE8xeHVJQ0FnSUdGaWIzSjBaV1FnUFNCMGNuVmxPMXh1SUNCOVhHNTlPMXh1SWl3Z0lpOHZJRU52Y0hseWFXZG9kQ0FvWXlrZ1RXbGpjbTl6YjJaMElFTnZjbkJ2Y21GMGFXOXVMaUJCYkd3Z2NtbG5hSFJ6SUhKbGMyVnlkbVZrTGx4dUx5OGdUR2xqWlc1elpXUWdkVzVrWlhJZ2RHaGxJRTFKVkNCTWFXTmxibk5sTGx4dVhHNXBiWEJ2Y25RZ2UyZGxkRWx1YzNSaGJtTmxmU0JtY205dElDY3VMM2RoYzIwdFptRmpkRzl5ZVNjN1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCaGJHeHZZMWRoYzIxVGRISnBibWNnUFNBb1pHRjBZVG9nYzNSeWFXNW5MQ0JoYkd4dlkzTTZJRzUxYldKbGNsdGRLVG9nYm5WdFltVnlJRDArSUh0Y2JpQWdZMjl1YzNRZ2QyRnpiU0E5SUdkbGRFbHVjM1JoYm1ObEtDazdYRzVjYmlBZ1kyOXVjM1FnWkdGMFlVeGxibWQwYUNBOUlIZGhjMjB1YkdWdVozUm9RbmwwWlhOVlZFWTRLR1JoZEdFcElDc2dNVHRjYmlBZ1kyOXVjM1FnWkdGMFlVOW1abk5sZENBOUlIZGhjMjB1WDIxaGJHeHZZeWhrWVhSaFRHVnVaM1JvS1R0Y2JpQWdkMkZ6YlM1emRISnBibWRVYjFWVVJqZ29aR0YwWVN3Z1pHRjBZVTltWm5ObGRDd2daR0YwWVV4bGJtZDBhQ2s3WEc0Z0lHRnNiRzlqY3k1d2RYTm9LR1JoZEdGUFptWnpaWFFwTzF4dVhHNGdJSEpsZEhWeWJpQmtZWFJoVDJabWMyVjBPMXh1ZlR0Y2JseHVhVzUwWlhKbVlXTmxJRVY0ZEhKaFQzQjBhVzl1YzBoaGJtUnNaWElnZTF4dUlDQW9ibUZ0WlRvZ2MzUnlhVzVuTENCMllXeDFaVG9nYzNSeWFXNW5LVG9nZG05cFpEdGNibjFjYmx4dVpYaHdiM0owSUdOdmJuTjBJR2wwWlhKaGRHVkZlSFJ5WVU5d2RHbHZibk1nUFZ4dUlDQWdJQ2h2Y0hScGIyNXpPaUJTWldOdmNtUThjM1J5YVc1bkxDQjFibXR1YjNkdVBpd2djSEpsWm1sNE9pQnpkSEpwYm1jc0lITmxaVzQ2SUZkbFlXdFRaWFE4VW1WamIzSmtQSE4wY21sdVp5d2dkVzVyYm05M2JqNCtMRnh1SUNBZ0lDQm9ZVzVrYkdWeU9pQkZlSFJ5WVU5d2RHbHZibk5JWVc1a2JHVnlLVG9nZG05cFpDQTlQaUI3WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc5d2RHbHZibk1nUFQwZ0oyOWlhbVZqZENjZ0ppWWdiM0IwYVc5dWN5QWhQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2MyVmxiaTVvWVhNb2IzQjBhVzl1Y3lrcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KME5wY21OMWJHRnlJSEpsWm1WeVpXNWpaU0JwYmlCdmNIUnBiMjV6SnlrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjMlZsYmk1aFpHUW9iM0IwYVc5dWN5azdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnVDJKcVpXTjBMbVZ1ZEhKcFpYTW9iM0IwYVc5dWN5a3VabTl5UldGamFDZ29XMnRsZVN3Z2RtRnNkV1ZkS1NBOVBpQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHNWhiV1VnUFNBb2NISmxabWw0S1NBL0lIQnlaV1pwZUNBcklHdGxlU0E2SUd0bGVUdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIyWVd4MVpTQTlQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBkR1Z5WVhSbFJYaDBjbUZQY0hScGIyNXpLSFpoYkhWbElHRnpJRkpsWTI5eVpEeHpkSEpwYm1jc0lIVnVhMjV2ZDI0K0xDQnVZVzFsSUNzZ0p5NG5MQ0J6WldWdUxDQm9ZVzVrYkdWeUtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdkbUZzZFdVZ1BUMDlJQ2R6ZEhKcGJtY25JSHg4SUhSNWNHVnZaaUIyWVd4MVpTQTlQVDBnSjI1MWJXSmxjaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQm9ZVzVrYkdWeUtHNWhiV1VzSUhaaGJIVmxMblJ2VTNSeWFXNW5LQ2twTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ0oySnZiMnhsWVc0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnYUdGdVpHeGxjaWh1WVcxbExDQW9kbUZzZFdVcElEOGdKekVuSURvZ0p6QW5LVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUVOaGJpZDBJR2hoYm1Sc1pTQmxlSFJ5WVNCamIyNW1hV2NnZEhsd1pUb2dKSHQwZVhCbGIyWWdkbUZzZFdWOVlDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDA3WEc1Y2JpOHFLbHh1SUNvZ1kyaGxZMnNnZDJWaUlHRnpjMlZ0WW14NUlFRlFTU2R6SUd4aGMzUWdaWEp5YjNJZ1lXNWtJSFJvY205M0lHVnljbTl5SUdsbUlHRnVlU0JsY25KdmNpQnZZMk4xY25KbFpDNWNiaUFxSUVCd1lYSmhiU0J0WlhOellXZGxJR0VnYldWemMyRm5aU0IxYzJWa0lIZG9aVzRnWVc0Z1pYSnliM0lnYjJOamRYSnlaV1F1WEc0Z0tpOWNibVY0Y0c5eWRDQmpiMjV6ZENCamFHVmphMHhoYzNSRmNuSnZjaUE5SUNodFpYTnpZV2RsT2lCemRISnBibWNwT2lCMmIybGtJRDArSUh0Y2JpQWdZMjl1YzNRZ2QyRnpiU0E5SUdkbGRFbHVjM1JoYm1ObEtDazdYRzVjYmlBZ1kyOXVjM1FnYzNSaFkyc2dQU0IzWVhOdExuTjBZV05yVTJGMlpTZ3BPMXh1SUNCMGNua2dlMXh1SUNBZ0lHTnZibk4wSUhCaGNtRnRjMDltWm5ObGRDQTlJSGRoYzIwdWMzUmhZMnRCYkd4dll5ZzRLVHRjYmlBZ0lDQjNZWE50TGw5UGNuUkhaWFJNWVhOMFJYSnliM0lvY0dGeVlXMXpUMlptYzJWMExDQndZWEpoYlhOUFptWnpaWFFnS3lBMEtUdGNiaUFnSUNCamIyNXpkQ0JsY25KdmNrTnZaR1VnUFNCM1lYTnRMa2hGUVZBek1sdHdZWEpoYlhOUFptWnpaWFFnTHlBMFhUdGNiaUFnSUNCamIyNXpkQ0JsY25KdmNrMWxjM05oWjJWUWIybHVkR1Z5SUQwZ2QyRnpiUzVJUlVGUVZUTXlXM0JoY21GdGMwOW1abk5sZENBdklEUWdLeUF4WFR0Y2JpQWdJQ0JqYjI1emRDQmxjbkp2Y2sxbGMzTmhaMlVnUFNCbGNuSnZjazFsYzNOaFoyVlFiMmx1ZEdWeUlEOGdkMkZ6YlM1VlZFWTRWRzlUZEhKcGJtY29aWEp5YjNKTlpYTnpZV2RsVUc5cGJuUmxjaWtnT2lBbkp6dGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUNSN2JXVnpjMkZuWlgwZ1JWSlNUMUpmUTA5RVJUb2dKSHRsY25KdmNrTnZaR1Y5TENCRlVsSlBVbDlOUlZOVFFVZEZPaUFrZTJWeWNtOXlUV1Z6YzJGblpYMWdLVHRjYmlBZ2ZTQm1hVzVoYkd4NUlIdGNiaUFnSUNCM1lYTnRMbk4wWVdOclVtVnpkRzl5WlNoemRHRmpheWs3WEc0Z0lIMWNibjA3WEc0aUxDQWlMeThnUTI5d2VYSnBaMmgwSUNoaktTQk5hV055YjNOdlpuUWdRMjl5Y0c5eVlYUnBiMjR1SUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNHZMeUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnVFVsVUlFeHBZMlZ1YzJVdVhHNWNibWx0Y0c5eWRDQjdTVzVtWlhKbGJtTmxVMlZ6YzJsdmJuMGdabkp2YlNBbmIyNXVlSEoxYm5ScGJXVXRZMjl0Ylc5dUp6dGNibHh1YVcxd2IzSjBJSHRuWlhSSmJuTjBZVzVqWlgwZ1puSnZiU0FuTGk5M1lYTnRMV1poWTNSdmNua25PMXh1YVcxd2IzSjBJSHRoYkd4dlkxZGhjMjFUZEhKcGJtY3NJR05vWldOclRHRnpkRVZ5Y205eUxDQnBkR1Z5WVhSbFJYaDBjbUZQY0hScGIyNXpmU0JtY205dElDY3VMM2RoYzIwdGRYUnBiSE1uTzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnYzJWMFVuVnVUM0IwYVc5dWN5QTlJQ2h2Y0hScGIyNXpPaUJKYm1abGNtVnVZMlZUWlhOemFXOXVMbEoxYms5d2RHbHZibk1wT2lCYmJuVnRZbVZ5TENCdWRXMWlaWEpiWFYwZ1BUNGdlMXh1SUNCamIyNXpkQ0IzWVhOdElEMGdaMlYwU1c1emRHRnVZMlVvS1R0Y2JpQWdiR1YwSUhKMWJrOXdkR2x2Ym5OSVlXNWtiR1VnUFNBd08xeHVJQ0JqYjI1emRDQmhiR3h2WTNNNklHNTFiV0psY2x0ZElEMGdXMTA3WEc1Y2JpQWdZMjl1YzNRZ2NuVnVUM0IwYVc5dWN6b2dTVzVtWlhKbGJtTmxVMlZ6YzJsdmJpNVNkVzVQY0hScGIyNXpJRDBnYjNCMGFXOXVjeUI4ZkNCN2ZUdGNibHh1SUNCMGNua2dlMXh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpQeTVzYjJkVFpYWmxjbWwwZVV4bGRtVnNJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lISjFiazl3ZEdsdmJuTXViRzluVTJWMlpYSnBkSGxNWlhabGJDQTlJREk3SUNBdkx5QkVaV1poZFd4MElIUnZJSGRoY201cGJtZGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tGeHVJQ0FnSUNBZ0lDQjBlWEJsYjJZZ2IzQjBhVzl1Y3k1c2IyZFRaWFpsY21sMGVVeGxkbVZzSUNFOVBTQW5iblZ0WW1WeUp5QjhmQ0FoVG5WdFltVnlMbWx6U1c1MFpXZGxjaWh2Y0hScGIyNXpMbXh2WjFObGRtVnlhWFI1VEdWMlpXd3BJSHg4WEc0Z0lDQWdJQ0FnSUc5d2RHbHZibk11Ykc5blUyVjJaWEpwZEhsTVpYWmxiQ0E4SURBZ2ZId2diM0IwYVc5dWN5NXNiMmRUWlhabGNtbDBlVXhsZG1Wc0lENGdOQ2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLR0JzYjJjZ2MyVnlkbVZ5YVhSNUlHeGxkbVZzSUdseklHNXZkQ0IyWVd4cFpEb2dKSHR2Y0hScGIyNXpMbXh2WjFObGRtVnlhWFI1VEdWMlpXeDlZQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0c5d2RHbHZibk0vTG14dloxWmxjbUp2YzJsMGVVeGxkbVZzSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJSEoxYms5d2RHbHZibk11Ykc5blZtVnlZbTl6YVhSNVRHVjJaV3dnUFNBd095QWdMeThnUkdWbVlYVnNkQ0IwYnlBd1hHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnYjNCMGFXOXVjeTVzYjJkV1pYSmliM05wZEhsTVpYWmxiQ0FoUFQwZ0oyNTFiV0psY2ljZ2ZId2dJVTUxYldKbGNpNXBjMGx1ZEdWblpYSW9iM0IwYVc5dWN5NXNiMmRXWlhKaWIzTnBkSGxNWlhabGJDa3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdiRzluSUhabGNtSnZjMmwwZVNCc1pYWmxiQ0JwY3lCdWIzUWdkbUZzYVdRNklDUjdiM0IwYVc5dWN5NXNiMmRXWlhKaWIzTnBkSGxNWlhabGJIMWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYjNCMGFXOXVjejh1ZEdWeWJXbHVZWFJsSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmlBZ0lDQWdJSEoxYms5d2RHbHZibk11ZEdWeWJXbHVZWFJsSUQwZ1ptRnNjMlU3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdiR1YwSUhSaFowUmhkR0ZQWm1aelpYUWdQU0F3TzF4dUlDQWdJR2xtSUNodmNIUnBiMjV6UHk1MFlXY2dJVDA5SUhWdVpHVm1hVzVsWkNrZ2UxeHVJQ0FnSUNBZ2RHRm5SR0YwWVU5bVpuTmxkQ0E5SUdGc2JHOWpWMkZ6YlZOMGNtbHVaeWh2Y0hScGIyNXpMblJoWnl3Z1lXeHNiMk56S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5ZFc1UGNIUnBiMjV6U0dGdVpHeGxJRDBnZDJGemJTNWZUM0owUTNKbFlYUmxVblZ1VDNCMGFXOXVjeWhjYmlBZ0lDQWdJQ0FnY25WdVQzQjBhVzl1Y3k1c2IyZFRaWFpsY21sMGVVeGxkbVZzSVN3Z2NuVnVUM0IwYVc5dWN5NXNiMmRXWlhKaWIzTnBkSGxNWlhabGJDRXNJQ0VoY25WdVQzQjBhVzl1Y3k1MFpYSnRhVzVoZEdVaExDQjBZV2RFWVhSaFQyWm1jMlYwS1R0Y2JpQWdJQ0JwWmlBb2NuVnVUM0IwYVc5dWMwaGhibVJzWlNBOVBUMGdNQ2tnZTF4dUlDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9KME5oYmx4Y0ozUWdZM0psWVhSbElISjFiaUJ2Y0hScGIyNXpMaWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNodmNIUnBiMjV6UHk1bGVIUnlZU0FoUFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ0lDQnBkR1Z5WVhSbFJYaDBjbUZQY0hScGIyNXpLRzl3ZEdsdmJuTXVaWGgwY21Fc0lDY25MQ0J1WlhjZ1YyVmhhMU5sZER4U1pXTnZjbVE4YzNSeWFXNW5MQ0IxYm10dWIzZHVQajRvS1N3Z0tHdGxlU3dnZG1Gc2RXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYTJWNVJHRjBZVTltWm5ObGRDQTlJR0ZzYkc5alYyRnpiVk4wY21sdVp5aHJaWGtzSUdGc2JHOWpjeWs3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFpoYkhWbFJHRjBZVTltWm5ObGRDQTlJR0ZzYkc5alYyRnpiVk4wY21sdVp5aDJZV3gxWlN3Z1lXeHNiMk56S1R0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvZDJGemJTNWZUM0owUVdSa1VuVnVRMjl1Wm1sblJXNTBjbmtvY25WdVQzQjBhVzl1YzBoaGJtUnNaU3dnYTJWNVJHRjBZVTltWm5ObGRDd2dkbUZzZFdWRVlYUmhUMlptYzJWMEtTQWhQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR05vWldOclRHRnpkRVZ5Y205eUtHQkRZVzRuZENCelpYUWdZU0J5ZFc0Z1kyOXVabWxuSUdWdWRISjVPaUFrZTJ0bGVYMGdMU0FrZTNaaGJIVmxmUzVnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUZ0eWRXNVBjSFJwYjI1elNHRnVaR3hsTENCaGJHeHZZM05kTzF4dUlDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdhV1lnS0hKMWJrOXdkR2x2Ym5OSVlXNWtiR1VnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJSGRoYzIwdVgwOXlkRkpsYkdWaGMyVlNkVzVQY0hScGIyNXpLSEoxYms5d2RHbHZibk5JWVc1a2JHVXBPMXh1SUNBZ0lIMWNiaUFnSUNCaGJHeHZZM011Wm05eVJXRmphQ2hoYkd4dll5QTlQaUIzWVhOdExsOW1jbVZsS0dGc2JHOWpLU2s3WEc0Z0lDQWdkR2h5YjNjZ1pUdGNiaUFnZlZ4dWZUdGNiaUlzSUNJdkx5QkRiM0I1Y21sbmFIUWdLR01wSUUxcFkzSnZjMjltZENCRGIzSndiM0poZEdsdmJpNGdRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmk4dklFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQk5TVlFnVEdsalpXNXpaUzVjYmx4dWFXMXdiM0owSUh0SmJtWmxjbVZ1WTJWVFpYTnphVzl1ZlNCbWNtOXRJQ2R2Ym01NGNuVnVkR2x0WlMxamIyMXRiMjRuTzF4dVhHNXBiWEJ2Y25RZ2UyZGxkRWx1YzNSaGJtTmxmU0JtY205dElDY3VMM2RoYzIwdFptRmpkRzl5ZVNjN1hHNXBiWEJ2Y25RZ2UyRnNiRzlqVjJGemJWTjBjbWx1Wnl3Z1kyaGxZMnRNWVhOMFJYSnliM0lzSUdsMFpYSmhkR1ZGZUhSeVlVOXdkR2x2Ym5OOUlHWnliMjBnSnk0dmQyRnpiUzExZEdsc2N5YzdYRzVjYm1OdmJuTjBJR2RsZEVkeVlYQm9UM0IwYVcxNllYUnBiMjVNWlhabGJDQTlJQ2huY21Gd2FFOXdkR2x0YVhwaGRHbHZia3hsZG1Wc09pQnpkSEpwYm1kOGRXNXJibTkzYmlrNklHNTFiV0psY2lBOVBpQjdYRzRnSUhOM2FYUmphQ0FvWjNKaGNHaFBjSFJwYldsNllYUnBiMjVNWlhabGJDa2dlMXh1SUNBZ0lHTmhjMlVnSjJScGMyRmliR1ZrSnpwY2JpQWdJQ0FnSUhKbGRIVnliaUF3TzF4dUlDQWdJR05oYzJVZ0oySmhjMmxqSnpwY2JpQWdJQ0FnSUhKbGRIVnliaUF4TzF4dUlDQWdJR05oYzJVZ0oyVjRkR1Z1WkdWa0p6cGNiaUFnSUNBZ0lISmxkSFZ5YmlBeU8xeHVJQ0FnSUdOaGMyVWdKMkZzYkNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnT1RrN1hHNGdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdkVzV6ZFhCd2IzSjBaV1FnWjNKaGNHZ2diM0IwYVcxcGVtRjBhVzl1SUd4bGRtVnNPaUFrZTJkeVlYQm9UM0IwYVcxcGVtRjBhVzl1VEdWMlpXeDlZQ2s3WEc0Z0lIMWNibjA3WEc1Y2JtTnZibk4wSUdkbGRFVjRaV04xZEdsdmJrMXZaR1VnUFNBb1pYaGxZM1YwYVc5dVRXOWtaVG9nSjNObGNYVmxiblJwWVd3bmZDZHdZWEpoYkd4bGJDY3BPaUJ1ZFcxaVpYSWdQVDRnZTF4dUlDQnpkMmwwWTJnZ0tHVjRaV04xZEdsdmJrMXZaR1VwSUh0Y2JpQWdJQ0JqWVhObElDZHpaWEYxWlc1MGFXRnNKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQXdPMXh1SUNBZ0lHTmhjMlVnSjNCaGNtRnNiR1ZzSnpwY2JpQWdJQ0FnSUhKbGRIVnliaUF4TzF4dUlDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lIVnVjM1Z3Y0c5eWRHVmtJR1Y0WldOMWRHbHZiaUJ0YjJSbE9pQWtlMlY0WldOMWRHbHZiazF2WkdWOVlDazdYRzRnSUgxY2JuMDdYRzVjYm1OdmJuTjBJR0Z3Y0dWdVpFUmxabUYxYkhSUGNIUnBiMjV6SUQwZ0tHOXdkR2x2Ym5NNklFbHVabVZ5Wlc1alpWTmxjM05wYjI0dVUyVnpjMmx2Yms5d2RHbHZibk1wT2lCMmIybGtJRDArSUh0Y2JpQWdhV1lnS0NGdmNIUnBiMjV6TG1WNGRISmhLU0I3WEc0Z0lDQWdiM0IwYVc5dWN5NWxlSFJ5WVNBOUlIdDlPMXh1SUNCOVhHNGdJR2xtSUNnaGIzQjBhVzl1Y3k1bGVIUnlZUzV6WlhOemFXOXVLU0I3WEc0Z0lDQWdiM0IwYVc5dWN5NWxlSFJ5WVM1elpYTnphVzl1SUQwZ2UzMDdYRzRnSUgxY2JpQWdZMjl1YzNRZ2MyVnpjMmx2YmlBOUlHOXdkR2x2Ym5NdVpYaDBjbUV1YzJWemMybHZiaUJoY3lCU1pXTnZjbVE4YzNSeWFXNW5MQ0J6ZEhKcGJtYytPMXh1SUNCcFppQW9JWE5sYzNOcGIyNHVkWE5sWDI5eWRGOXRiMlJsYkY5aWVYUmxjMTlrYVhKbFkzUnNlU2tnZTF4dUlDQWdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0JqWVcxbGJHTmhjMlZjYmlBZ0lDQnpaWE56YVc5dUxuVnpaVjl2Y25SZmJXOWtaV3hmWW5sMFpYTmZaR2x5WldOMGJIa2dQU0FuTVNjN1hHNGdJSDFjYmx4dUlDQXZMeUJwWmlCMWMybHVaeUJLVTBWUUlIZHBkR2dnVjJWaVIxQlZMQ0JoYkhkaGVYTWdaR2x6WVdKc1pTQnRaVzF2Y25rZ2NHRjBkR1Z5Ymx4dUlDQnBaaUFvYjNCMGFXOXVjeTVsZUdWamRYUnBiMjVRY205MmFXUmxjbk1nSmlaY2JpQWdJQ0FnSUc5d2RHbHZibk11WlhobFkzVjBhVzl1VUhKdmRtbGtaWEp6TG5OdmJXVW9aWEFnUFQ0Z0tIUjVjR1Z2WmlCbGNDQTlQVDBnSjNOMGNtbHVaeWNnUHlCbGNDQTZJR1Z3TG01aGJXVXBJRDA5UFNBbmQyVmlaM0IxSnlrcElIdGNiaUFnSUNCdmNIUnBiMjV6TG1WdVlXSnNaVTFsYlZCaGRIUmxjbTRnUFNCbVlXeHpaVHRjYmlBZ2ZWeHVmVHRjYmx4dVkyOXVjM1FnYzJWMFJYaGxZM1YwYVc5dVVISnZkbWxrWlhKeklEMWNiaUFnSUNBb2MyVnpjMmx2Yms5d2RHbHZibk5JWVc1a2JHVTZJRzUxYldKbGNpd2daWGhsWTNWMGFXOXVVSEp2ZG1sa1pYSnpPaUJ5WldGa2IyNXNlU0JKYm1abGNtVnVZMlZUWlhOemFXOXVMa1Y0WldOMWRHbHZibEJ5YjNacFpHVnlRMjl1Wm1sblcxMHNYRzRnSUNBZ0lHRnNiRzlqY3pvZ2JuVnRZbVZ5VzEwcE9pQjJiMmxrSUQwK0lIdGNiaUFnSUNBZ0lHWnZjaUFvWTI5dWMzUWdaWEFnYjJZZ1pYaGxZM1YwYVc5dVVISnZkbWxrWlhKektTQjdYRzRnSUNBZ0lDQWdJR3hsZENCbGNFNWhiV1VnUFNCMGVYQmxiMllnWlhBZ1BUMDlJQ2R6ZEhKcGJtY25JRDhnWlhBZ09pQmxjQzV1WVcxbE8xeHVYRzRnSUNBZ0lDQWdJQzh2SUdOb1pXTnJJRVZRSUc1aGJXVmNiaUFnSUNBZ0lDQWdjM2RwZEdOb0lDaGxjRTVoYldVcElIdGNiaUFnSUNBZ0lDQWdJQ0JqWVhObElDZDRibTV3WVdOckp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUdWd1RtRnRaU0E5SUNkWVRrNVFRVU5MSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJR05oYzJVZ0ozZGxZbTV1SnpwY2JpQWdJQ0FnSUNBZ0lDQWdJR1Z3VG1GdFpTQTlJQ2RYUlVKT1RpYzdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHVndJQ0U5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IzWldKdWJrOXdkR2x2Ym5NZ1BTQmxjQ0JoY3lCSmJtWmxjbVZ1WTJWVFpYTnphVzl1TGxkbFlrNU9SWGhsWTNWMGFXOXVVSEp2ZG1sa1pYSlBjSFJwYjI0N1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDNaV0p1Yms5d2RHbHZibk0vTG1SbGRtbGpaVlI1Y0dVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCclpYbEVZWFJoVDJabWMyVjBJRDBnWVd4c2IyTlhZWE50VTNSeWFXNW5LQ2RrWlhacFkyVlVlWEJsSnl3Z1lXeHNiMk56S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IyWVd4MVpVUmhkR0ZQWm1aelpYUWdQU0JoYkd4dlkxZGhjMjFUZEhKcGJtY29kMlZpYm01UGNIUnBiMjV6TG1SbGRtbGpaVlI1Y0dVc0lHRnNiRzlqY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2RsZEVsdWMzUmhibU5sS0NrdVgwOXlkRUZrWkZObGMzTnBiMjVEYjI1bWFXZEZiblJ5ZVNoelpYTnphVzl1VDNCMGFXOXVjMGhoYm1Sc1pTd2dhMlY1UkdGMFlVOW1abk5sZEN3Z2RtRnNkV1ZFWVhSaFQyWm1jMlYwS1NBaFBUMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMmhsWTJ0TVlYTjBSWEp5YjNJb1lFTmhiaWQwSUhObGRDQmhJSE5sYzNOcGIyNGdZMjl1Wm1sbklHVnVkSEo1T2lBblpHVjJhV05sVkhsd1pTY2dMU0FrZTNkbFltNXVUM0IwYVc5dWN5NWtaWFpwWTJWVWVYQmxmUzVnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZGxZbTV1VDNCMGFXOXVjejh1Ym5WdFZHaHlaV0ZrY3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J1ZFcxVWFISmxZV1J6SUQwZ2QyVmlibTVQY0hScGIyNXpMbTUxYlZSb2NtVmhaSE03WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1NuVnpkQ0JwWjI1dmNtVWdhVzUyWVd4cFpDQjNaV0p1Yms5d2RHbHZibk11Ym5WdFZHaHlaV0ZrY3k1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlHNTFiVlJvY21WaFpITWdJVDBnSjI1MWJXSmxjaWNnZkh3Z0lVNTFiV0psY2k1cGMwbHVkR1ZuWlhJb2JuVnRWR2h5WldGa2N5a2dmSHdnYm5WdFZHaHlaV0ZrY3lBOElEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1MWJWUm9jbVZoWkhNZ1BTQXdPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnJaWGxFWVhSaFQyWm1jMlYwSUQwZ1lXeHNiMk5YWVhOdFUzUnlhVzVuS0NkdWRXMVVhSEpsWVdSekp5d2dZV3hzYjJOektUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMllXeDFaVVJoZEdGUFptWnpaWFFnUFNCaGJHeHZZMWRoYzIxVGRISnBibWNvYm5WdFZHaHlaV0ZrY3k1MGIxTjBjbWx1WnlncExDQmhiR3h2WTNNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2huWlhSSmJuTjBZVzVqWlNncExsOVBjblJCWkdSVFpYTnphVzl1UTI5dVptbG5SVzUwY25rb2MyVnpjMmx2Yms5d2RHbHZibk5JWVc1a2JHVXNJR3RsZVVSaGRHRlBabVp6WlhRc0lIWmhiSFZsUkdGMFlVOW1abk5sZENrZ0lUMDlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05vWldOclRHRnpkRVZ5Y205eUtHQkRZVzRuZENCelpYUWdZU0J6WlhOemFXOXVJR052Ym1acFp5QmxiblJ5ZVRvZ0oyNTFiVlJvY21WaFpITW5JQzBnSkh0M1pXSnViazl3ZEdsdmJuTXViblZ0VkdoeVpXRmtjMzB1WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDNaV0p1Yms5d2RHbHZibk0vTG5CdmQyVnlVSEpsWm1WeVpXNWpaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR3RsZVVSaGRHRlBabVp6WlhRZ1BTQmhiR3h2WTFkaGMyMVRkSEpwYm1jb0ozQnZkMlZ5VUhKbFptVnlaVzVqWlNjc0lHRnNiRzlqY3lrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnZG1Gc2RXVkVZWFJoVDJabWMyVjBJRDBnWVd4c2IyTlhZWE50VTNSeWFXNW5LSGRsWW01dVQzQjBhVzl1Y3k1d2IzZGxjbEJ5WldabGNtVnVZMlVzSUdGc2JHOWpjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHZGxkRWx1YzNSaGJtTmxLQ2t1WDA5eWRFRmtaRk5sYzNOcGIyNURiMjVtYVdkRmJuUnllU2h6WlhOemFXOXVUM0IwYVc5dWMwaGhibVJzWlN3Z2EyVjVSR0YwWVU5bVpuTmxkQ3dnZG1Gc2RXVkVZWFJoVDJabWMyVjBLU0FoUFQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZRU5oYmlkMElITmxkQ0JoSUhObGMzTnBiMjRnWTI5dVptbG5JR1Z1ZEhKNU9pQW5jRzkzWlhKUWNtVm1aWEpsYm1ObEp5QXRJQ1I3ZDJWaWJtNVBjSFJwYjI1ekxuQnZkMlZ5VUhKbFptVnlaVzVqWlgwdVlDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0JqWVhObElDZDNaV0puY0hVbk9seHVJQ0FnSUNBZ0lDQWdJQ0FnWlhCT1lXMWxJRDBnSjBwVEp6dGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1pYQWdJVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSGRsWW1kd2RVOXdkR2x2Ym5NZ1BTQmxjQ0JoY3lCSmJtWmxjbVZ1WTJWVFpYTnphVzl1TGxkbFlrZHdkVVY0WldOMWRHbHZibEJ5YjNacFpHVnlUM0IwYVc5dU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kMlZpWjNCMVQzQjBhVzl1Y3o4dWNISmxabVZ5Y21Wa1RHRjViM1YwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSGRsWW1kd2RVOXdkR2x2Ym5NdWNISmxabVZ5Y21Wa1RHRjViM1YwSUNFOVBTQW5Ua05JVnljZ0ppWWdkMlZpWjNCMVQzQjBhVzl1Y3k1d2NtVm1aWEp5WldSTVlYbHZkWFFnSVQwOUlDZE9TRmRESnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQndjbVZtWlhKeVpXUk1ZWGx2ZFhRZ2JYVnpkQ0JpWlNCbGFYUm9aWElnSjA1RFNGY25JRzl5SUNkT1NGZERKem9nSkh0M1pXSm5jSFZQY0hScGIyNXpMbkJ5WldabGNuSmxaRXhoZVc5MWRIMWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdhMlY1UkdGMFlVOW1abk5sZENBOUlHRnNiRzlqVjJGemJWTjBjbWx1WnlnbmNISmxabVZ5Y21Wa1RHRjViM1YwSnl3Z1lXeHNiMk56S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IyWVd4MVpVUmhkR0ZQWm1aelpYUWdQU0JoYkd4dlkxZGhjMjFUZEhKcGJtY29kMlZpWjNCMVQzQjBhVzl1Y3k1d2NtVm1aWEp5WldSTVlYbHZkWFFzSUdGc2JHOWpjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHZGxkRWx1YzNSaGJtTmxLQ2t1WDA5eWRFRmtaRk5sYzNOcGIyNURiMjVtYVdkRmJuUnllU2h6WlhOemFXOXVUM0IwYVc5dWMwaGhibVJzWlN3Z2EyVjVSR0YwWVU5bVpuTmxkQ3dnZG1Gc2RXVkVZWFJoVDJabWMyVjBLU0FoUFQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZRU5oYmlkMElITmxkQ0JoSUhObGMzTnBiMjRnWTI5dVptbG5JR1Z1ZEhKNU9pQW5jSEpsWm1WeWNtVmtUR0Y1YjNWMEp5QXRJQ1I3ZDJWaVozQjFUM0IwYVc5dWN5NXdjbVZtWlhKeVpXUk1ZWGx2ZFhSOUxtQXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnWTJGelpTQW5kMkZ6YlNjNlhHNGdJQ0FnSUNBZ0lDQWdZMkZ6WlNBblkzQjFKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZiblJwYm5WbE8xeHVJQ0FnSUNBZ0lDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUc1dmRDQnpkWEJ3YjNKMFpXUWdaWGhsWTNWMGFXOXVJSEJ5YjNacFpHVnlPaUFrZTJWd1RtRnRaWDFnS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJR052Ym5OMElHVndUbUZ0WlVSaGRHRlBabVp6WlhRZ1BTQmhiR3h2WTFkaGMyMVRkSEpwYm1jb1pYQk9ZVzFsTENCaGJHeHZZM01wTzF4dUlDQWdJQ0FnSUNCcFppQW9aMlYwU1c1emRHRnVZMlVvS1M1ZlQzSjBRWEJ3Wlc1a1JYaGxZM1YwYVc5dVVISnZkbWxrWlhJb2MyVnpjMmx2Yms5d2RHbHZibk5JWVc1a2JHVXNJR1Z3VG1GdFpVUmhkR0ZQWm1aelpYUXBJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9ZRU5oYmlkMElHRndjR1Z1WkNCbGVHVmpkWFJwYjI0Z2NISnZkbWxrWlhJNklDUjdaWEJPWVcxbGZTNWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0J6WlhSVFpYTnphVzl1VDNCMGFXOXVjeUE5SUNodmNIUnBiMjV6UHpvZ1NXNW1aWEpsYm1ObFUyVnpjMmx2Ymk1VFpYTnphVzl1VDNCMGFXOXVjeWs2SUZ0dWRXMWlaWElzSUc1MWJXSmxjbHRkWFNBOVBpQjdYRzRnSUdOdmJuTjBJSGRoYzIwZ1BTQm5aWFJKYm5OMFlXNWpaU2dwTzF4dUlDQnNaWFFnYzJWemMybHZiazl3ZEdsdmJuTklZVzVrYkdVZ1BTQXdPMXh1SUNCamIyNXpkQ0JoYkd4dlkzTTZJRzUxYldKbGNsdGRJRDBnVzEwN1hHNWNiaUFnWTI5dWMzUWdjMlZ6YzJsdmJrOXdkR2x2Ym5NNklFbHVabVZ5Wlc1alpWTmxjM05wYjI0dVUyVnpjMmx2Yms5d2RHbHZibk1nUFNCdmNIUnBiMjV6SUh4OElIdDlPMXh1SUNCaGNIQmxibVJFWldaaGRXeDBUM0IwYVc5dWN5aHpaWE56YVc5dVQzQjBhVzl1Y3lrN1hHNWNiaUFnZEhKNUlIdGNiaUFnSUNCamIyNXpkQ0JuY21Gd2FFOXdkR2x0YVhwaGRHbHZia3hsZG1Wc0lEMGdaMlYwUjNKaGNHaFBjSFJwYlhwaGRHbHZia3hsZG1Wc0tITmxjM05wYjI1UGNIUnBiMjV6TG1keVlYQm9UM0IwYVcxcGVtRjBhVzl1VEdWMlpXd2dQejhnSjJGc2JDY3BPMXh1SUNBZ0lHTnZibk4wSUdWNFpXTjFkR2x2YmsxdlpHVWdQU0JuWlhSRmVHVmpkWFJwYjI1TmIyUmxLSE5sYzNOcGIyNVBjSFJwYjI1ekxtVjRaV04xZEdsdmJrMXZaR1VnUHo4Z0ozTmxjWFZsYm5ScFlXd25LVHRjYmlBZ0lDQmpiMjV6ZENCc2IyZEpaRVJoZEdGUFptWnpaWFFnUFZ4dUlDQWdJQ0FnSUNCMGVYQmxiMllnYzJWemMybHZiazl3ZEdsdmJuTXViRzluU1dRZ1BUMDlJQ2R6ZEhKcGJtY25JRDhnWVd4c2IyTlhZWE50VTNSeWFXNW5LSE5sYzNOcGIyNVBjSFJwYjI1ekxteHZaMGxrTENCaGJHeHZZM01wSURvZ01EdGNibHh1SUNBZ0lHTnZibk4wSUd4dloxTmxkbVZ5YVhSNVRHVjJaV3dnUFNCelpYTnphVzl1VDNCMGFXOXVjeTVzYjJkVFpYWmxjbWwwZVV4bGRtVnNJRDgvSURJN0lDQXZMeUJFWldaaGRXeDBJSFJ2SURJZ0xTQjNZWEp1YVc1blhHNGdJQ0FnYVdZZ0tDRk9kVzFpWlhJdWFYTkpiblJsWjJWeUtHeHZaMU5sZG1WeWFYUjVUR1YyWld3cElIeDhJR3h2WjFObGRtVnlhWFI1VEdWMlpXd2dQQ0F3SUh4OElHeHZaMU5sZG1WeWFYUjVUR1YyWld3Z1BpQTBLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZR3h2WnlCelpYSjJaWEpwZEhrZ2JHVjJaV3dnYVhNZ2JtOTBJSFpoYkdsa09pQWtlMnh2WjFObGRtVnlhWFI1VEdWMlpXeDlZQ2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2JHOW5WbVZ5WW05emFYUjVUR1YyWld3Z1BTQnpaWE56YVc5dVQzQjBhVzl1Y3k1c2IyZFdaWEppYjNOcGRIbE1aWFpsYkNBL1B5QXdPeUFnTHk4Z1JHVm1ZWFZzZENCMGJ5QXdJQzBnZG1WeVltOXpaVnh1SUNBZ0lHbG1JQ2doVG5WdFltVnlMbWx6U1c1MFpXZGxjaWhzYjJkV1pYSmliM05wZEhsTVpYWmxiQ2tnZkh3Z2JHOW5WbVZ5WW05emFYUjVUR1YyWld3Z1BDQXdJSHg4SUd4dloxWmxjbUp2YzJsMGVVeGxkbVZzSUQ0Z05Da2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQnNiMmNnZG1WeVltOXphWFI1SUd4bGRtVnNJR2x6SUc1dmRDQjJZV3hwWkRvZ0pIdHNiMmRXWlhKaWIzTnBkSGxNWlhabGJIMWdLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCdmNIUnBiV2w2WldSTmIyUmxiRVpwYkdWUVlYUm9UMlptYzJWMElEMGdkSGx3Wlc5bUlITmxjM05wYjI1UGNIUnBiMjV6TG05d2RHbHRhWHBsWkUxdlpHVnNSbWxzWlZCaGRHZ2dQVDA5SUNkemRISnBibWNuSUQ5Y2JpQWdJQ0FnSUNBZ1lXeHNiMk5YWVhOdFUzUnlhVzVuS0hObGMzTnBiMjVQY0hScGIyNXpMbTl3ZEdsdGFYcGxaRTF2WkdWc1JtbHNaVkJoZEdnc0lHRnNiRzlqY3lrZ09seHVJQ0FnSUNBZ0lDQXdPMXh1WEc0Z0lDQWdjMlZ6YzJsdmJrOXdkR2x2Ym5OSVlXNWtiR1VnUFNCM1lYTnRMbDlQY25SRGNtVmhkR1ZUWlhOemFXOXVUM0IwYVc5dWN5aGNiaUFnSUNBZ0lDQWdaM0poY0doUGNIUnBiV2w2WVhScGIyNU1aWFpsYkN3Z0lTRnpaWE56YVc5dVQzQjBhVzl1Y3k1bGJtRmliR1ZEY0hWTlpXMUJjbVZ1WVN3Z0lTRnpaWE56YVc5dVQzQjBhVzl1Y3k1bGJtRmliR1ZOWlcxUVlYUjBaWEp1TENCbGVHVmpkWFJwYjI1TmIyUmxMRnh1SUNBZ0lDQWdJQ0FoSVhObGMzTnBiMjVQY0hScGIyNXpMbVZ1WVdKc1pWQnliMlpwYkdsdVp5d2dNQ3dnYkc5blNXUkVZWFJoVDJabWMyVjBMQ0JzYjJkVFpYWmxjbWwwZVV4bGRtVnNMQ0JzYjJkV1pYSmliM05wZEhsTVpYWmxiQ3hjYmlBZ0lDQWdJQ0FnYjNCMGFXMXBlbVZrVFc5a1pXeEdhV3hsVUdGMGFFOW1abk5sZENrN1hHNGdJQ0FnYVdZZ0tITmxjM05wYjI1UGNIUnBiMjV6U0dGdVpHeGxJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQmphR1ZqYTB4aGMzUkZjbkp2Y2lnblEyRnVYRnduZENCamNtVmhkR1VnYzJWemMybHZiaUJ2Y0hScGIyNXpMaWNwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoelpYTnphVzl1VDNCMGFXOXVjeTVsZUdWamRYUnBiMjVRY205MmFXUmxjbk1wSUh0Y2JpQWdJQ0FnSUhObGRFVjRaV04xZEdsdmJsQnliM1pwWkdWeWN5aHpaWE56YVc5dVQzQjBhVzl1YzBoaGJtUnNaU3dnYzJWemMybHZiazl3ZEdsdmJuTXVaWGhsWTNWMGFXOXVVSEp2ZG1sa1pYSnpMQ0JoYkd4dlkzTXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2h6WlhOemFXOXVUM0IwYVc5dWN5NW1jbVZsUkdsdFpXNXphVzl1VDNabGNuSnBaR1Z6S1NCN1hHNGdJQ0FnSUNCbWIzSWdLR052Ym5OMElGdHVZVzFsTENCMllXeDFaVjBnYjJZZ1QySnFaV04wTG1WdWRISnBaWE1vYzJWemMybHZiazl3ZEdsdmJuTXVabkpsWlVScGJXVnVjMmx2Yms5MlpYSnlhV1JsY3lrcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ1WVcxbElDRTlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1puSmxaU0JrYVcxbGJuTnBiMjRnYjNabGNuSnBaR1VnYm1GdFpTQnRkWE4wSUdKbElHRWdjM1J5YVc1bk9pQWtlMjVoYldWOVlDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCMllXeDFaU0FoUFQwZ0oyNTFiV0psY2ljZ2ZId2dJVTUxYldKbGNpNXBjMGx1ZEdWblpYSW9kbUZzZFdVcElIeDhJSFpoYkhWbElEd2dNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ1puSmxaU0JrYVcxbGJuTnBiMjRnYjNabGNuSnBaR1VnZG1Gc2RXVWdiWFZ6ZENCaVpTQmhJRzV2YmkxdVpXZGhkR2wyWlNCcGJuUmxaMlZ5T2lBa2UzWmhiSFZsZldBcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR052Ym5OMElHNWhiV1ZQWm1aelpYUWdQU0JoYkd4dlkxZGhjMjFUZEhKcGJtY29ibUZ0WlN3Z1lXeHNiMk56S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSGRoYzIwdVgwOXlkRUZrWkVaeVpXVkVhVzFsYm5OcGIyNVBkbVZ5Y21sa1pTaHpaWE56YVc5dVQzQjBhVzl1YzBoaGJtUnNaU3dnYm1GdFpVOW1abk5sZEN3Z2RtRnNkV1VwSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvWUVOaGJpZDBJSE5sZENCaElHWnlaV1VnWkdsdFpXNXphVzl1SUc5MlpYSnlhV1JsT2lBa2UyNWhiV1Y5SUMwZ0pIdDJZV3gxWlgwdVlDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvYzJWemMybHZiazl3ZEdsdmJuTXVaWGgwY21FZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnYVhSbGNtRjBaVVY0ZEhKaFQzQjBhVzl1Y3loelpYTnphVzl1VDNCMGFXOXVjeTVsZUhSeVlTd2dKeWNzSUc1bGR5QlhaV0ZyVTJWMFBGSmxZMjl5WkR4emRISnBibWNzSUhWdWEyNXZkMjQrUGlncExDQW9hMlY1TENCMllXeDFaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCclpYbEVZWFJoVDJabWMyVjBJRDBnWVd4c2IyTlhZWE50VTNSeWFXNW5LR3RsZVN3Z1lXeHNiMk56S1R0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZG1Gc2RXVkVZWFJoVDJabWMyVjBJRDBnWVd4c2IyTlhZWE50VTNSeWFXNW5LSFpoYkhWbExDQmhiR3h2WTNNcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoM1lYTnRMbDlQY25SQlpHUlRaWE56YVc5dVEyOXVabWxuUlc1MGNua29jMlZ6YzJsdmJrOXdkR2x2Ym5OSVlXNWtiR1VzSUd0bGVVUmhkR0ZQWm1aelpYUXNJSFpoYkhWbFJHRjBZVTltWm5ObGRDa2dJVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYUdWamEweGhjM1JGY25KdmNpaGdRMkZ1SjNRZ2MyVjBJR0VnYzJWemMybHZiaUJqYjI1bWFXY2daVzUwY25rNklDUjdhMlY1ZlNBdElDUjdkbUZzZFdWOUxtQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdXM05sYzNOcGIyNVBjSFJwYjI1elNHRnVaR3hsTENCaGJHeHZZM05kTzF4dUlDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdhV1lnS0hObGMzTnBiMjVQY0hScGIyNXpTR0Z1Wkd4bElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNCM1lYTnRMbDlQY25SU1pXeGxZWE5sVTJWemMybHZiazl3ZEdsdmJuTW9jMlZ6YzJsdmJrOXdkR2x2Ym5OSVlXNWtiR1VwTzF4dUlDQWdJSDFjYmlBZ0lDQmhiR3h2WTNNdVptOXlSV0ZqYUNoaGJHeHZZeUE5UGlCM1lYTnRMbDltY21WbEtHRnNiRzlqS1NrN1hHNGdJQ0FnZEdoeWIzY2daVHRjYmlBZ2ZWeHVmVHRjYmlJc0lDSXZMeUJEYjNCNWNtbG5hSFFnS0dNcElFMXBZM0p2YzI5bWRDQkRiM0p3YjNKaGRHbHZiaTRnUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpOHZJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JOU1ZRZ1RHbGpaVzV6WlM1Y2JseHVhVzF3YjNKMElIdFVaVzV6YjNKOUlHWnliMjBnSjI5dWJuaHlkVzUwYVcxbExXTnZiVzF2YmljN1hHNWNiaTh2SUZSb2FYTWdabWxzWlNCcGJtTnNkV1JsY3lCamIyMXRiMjRnWkdWbWFXNXBkR2x2Ym5NdUlGUm9aWGtnWkc4Z1RrOVVJR2hoZG1VZ1pHVndaVzVrWlc1amVTQnZiaUIwYUdVZ1YyVmlRWE56WlcxaWJIa2dhVzV6ZEdGdVkyVXVYRzVjYmk4cUtseHVJQ29nUTI5d2FXVmtJR1p5YjIwZ1QwNU9XQ0JrWldacGJtbDBhVzl1TGlCVmMyVWdkR2hwY3lCMGJ5QmtjbTl3SUdSbGNHVnVaR1Z1WTNrZ0oyOXVibmhmY0hKdmRHOG5JSFJ2SUdSbFkzSmxZWE5sSUdOdmJYQnBiR1ZrSUM1cWN5Qm1hV3hsSUhOcGVtVXVYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0JsYm5WdElFUmhkR0ZVZVhCbElIdGNiaUFnZFc1a1pXWnBibVZrSUQwZ01DeGNiaUFnWm14dllYUWdQU0F4TEZ4dUlDQjFhVzUwT0NBOUlESXNYRzRnSUdsdWREZ2dQU0F6TEZ4dUlDQjFhVzUwTVRZZ1BTQTBMRnh1SUNCcGJuUXhOaUE5SURVc1hHNGdJR2x1ZERNeUlEMGdOaXhjYmlBZ2FXNTBOalFnUFNBM0xGeHVJQ0J6ZEhKcGJtY2dQU0E0TEZ4dUlDQmliMjlzSUQwZ09TeGNiaUFnWm14dllYUXhOaUE5SURFd0xGeHVJQ0JrYjNWaWJHVWdQU0F4TVN4Y2JpQWdkV2x1ZERNeUlEMGdNVElzWEc0Z0lIVnBiblEyTkNBOUlERXpMRnh1SUNCamIyMXdiR1Y0TmpRZ1BTQXhOQ3hjYmlBZ1kyOXRjR3hsZURFeU9DQTlJREUxTEZ4dUlDQmlabXh2WVhReE5pQTlJREUyWEc1OVhHNWNiaThxS2x4dUlDb2dUV0Z3SUhOMGNtbHVaeUIwWlc1emIzSWdaR0YwWVNCMGJ5QmxiblZ0SUhaaGJIVmxYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0IwWlc1emIzSkVZWFJoVkhsd1pWTjBjbWx1WjFSdlJXNTFiU0E5SUNoMGVYQmxPaUJ6ZEhKcGJtY3BPaUJFWVhSaFZIbHdaU0E5UGlCN1hHNGdJSE4zYVhSamFDQW9kSGx3WlNrZ2UxeHVJQ0FnSUdOaGMyVWdKMmx1ZERnbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUVSaGRHRlVlWEJsTG1sdWREZzdYRzRnSUNBZ1kyRnpaU0FuZFdsdWREZ25PbHh1SUNBZ0lDQWdjbVYwZFhKdUlFUmhkR0ZVZVhCbExuVnBiblE0TzF4dUlDQWdJR05oYzJVZ0oySnZiMnduT2x4dUlDQWdJQ0FnY21WMGRYSnVJRVJoZEdGVWVYQmxMbUp2YjJ3N1hHNGdJQ0FnWTJGelpTQW5hVzUwTVRZbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUVSaGRHRlVlWEJsTG1sdWRERTJPMXh1SUNBZ0lHTmhjMlVnSjNWcGJuUXhOaWM2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdSR0YwWVZSNWNHVXVkV2x1ZERFMk8xeHVJQ0FnSUdOaGMyVWdKMmx1ZERNeUp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCRVlYUmhWSGx3WlM1cGJuUXpNanRjYmlBZ0lDQmpZWE5sSUNkMWFXNTBNekluT2x4dUlDQWdJQ0FnY21WMGRYSnVJRVJoZEdGVWVYQmxMblZwYm5Rek1qdGNiaUFnSUNCallYTmxJQ2RtYkc5aGRERTJKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQkVZWFJoVkhsd1pTNW1iRzloZERFMk8xeHVJQ0FnSUdOaGMyVWdKMlpzYjJGME16SW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlFUmhkR0ZVZVhCbExtWnNiMkYwTzF4dUlDQWdJR05oYzJVZ0oyWnNiMkYwTmpRbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUVSaGRHRlVlWEJsTG1SdmRXSnNaVHRjYmlBZ0lDQmpZWE5sSUNkemRISnBibWNuT2x4dUlDQWdJQ0FnY21WMGRYSnVJRVJoZEdGVWVYQmxMbk4wY21sdVp6dGNiaUFnSUNCallYTmxJQ2RwYm5RMk5DYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1JHRjBZVlI1Y0dVdWFXNTBOalE3WEc0Z0lDQWdZMkZ6WlNBbmRXbHVkRFkwSnpwY2JpQWdJQ0FnSUhKbGRIVnliaUJFWVhSaFZIbHdaUzUxYVc1ME5qUTdYRzVjYmlBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCMWJuTjFjSEJ2Y25SbFpDQmtZWFJoSUhSNWNHVTZJQ1I3ZEhsd1pYMWdLVHRjYmlBZ2ZWeHVmVHRjYmx4dUx5b3FYRzRnS2lCTllYQWdaVzUxYlNCMllXeDFaU0IwYnlCemRISnBibWNnZEdWdWMyOXlJR1JoZEdGY2JpQXFMMXh1Wlhod2IzSjBJR052Ym5OMElIUmxibk52Y2tSaGRHRlVlWEJsUlc1MWJWUnZVM1J5YVc1bklEMGdLSFI1Y0dWUWNtOTBiem9nUkdGMFlWUjVjR1VwT2lCVVpXNXpiM0l1Vkhsd1pTQTlQaUI3WEc0Z0lITjNhWFJqYUNBb2RIbHdaVkJ5YjNSdktTQjdYRzRnSUNBZ1kyRnpaU0JFWVhSaFZIbHdaUzVwYm5RNE9seHVJQ0FnSUNBZ2NtVjBkWEp1SUNkcGJuUTRKenRjYmlBZ0lDQmpZWE5sSUVSaGRHRlVlWEJsTG5WcGJuUTRPbHh1SUNBZ0lDQWdjbVYwZFhKdUlDZDFhVzUwT0NjN1hHNGdJQ0FnWTJGelpTQkVZWFJoVkhsd1pTNWliMjlzT2x4dUlDQWdJQ0FnY21WMGRYSnVJQ2RpYjI5c0p6dGNiaUFnSUNCallYTmxJRVJoZEdGVWVYQmxMbWx1ZERFMk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUNkcGJuUXhOaWM3WEc0Z0lDQWdZMkZ6WlNCRVlYUmhWSGx3WlM1MWFXNTBNVFk2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKM1ZwYm5ReE5pYzdYRzRnSUNBZ1kyRnpaU0JFWVhSaFZIbHdaUzVwYm5Rek1qcGNiaUFnSUNBZ0lISmxkSFZ5YmlBbmFXNTBNekluTzF4dUlDQWdJR05oYzJVZ1JHRjBZVlI1Y0dVdWRXbHVkRE15T2x4dUlDQWdJQ0FnY21WMGRYSnVJQ2QxYVc1ME16SW5PMXh1SUNBZ0lHTmhjMlVnUkdGMFlWUjVjR1V1Wm14dllYUXhOanBjYmlBZ0lDQWdJSEpsZEhWeWJpQW5abXh2WVhReE5pYzdYRzRnSUNBZ1kyRnpaU0JFWVhSaFZIbHdaUzVtYkc5aGREcGNiaUFnSUNBZ0lISmxkSFZ5YmlBblpteHZZWFF6TWljN1hHNGdJQ0FnWTJGelpTQkVZWFJoVkhsd1pTNWtiM1ZpYkdVNlhHNGdJQ0FnSUNCeVpYUjFjbTRnSjJac2IyRjBOalFuTzF4dUlDQWdJR05oYzJVZ1JHRjBZVlI1Y0dVdWMzUnlhVzVuT2x4dUlDQWdJQ0FnY21WMGRYSnVJQ2R6ZEhKcGJtY25PMXh1SUNBZ0lHTmhjMlVnUkdGMFlWUjVjR1V1YVc1ME5qUTZYRzRnSUNBZ0lDQnlaWFIxY200Z0oybHVkRFkwSnp0Y2JpQWdJQ0JqWVhObElFUmhkR0ZVZVhCbExuVnBiblEyTkRwY2JpQWdJQ0FnSUhKbGRIVnliaUFuZFdsdWREWTBKenRjYmx4dUlDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lIVnVjM1Z3Y0c5eWRHVmtJR1JoZEdFZ2RIbHdaVG9nSkh0MGVYQmxVSEp2ZEc5OVlDazdYRzRnSUgxY2JuMDdYRzVjYmk4cUtseHVJQ29nWjJWMElIUmxibk52Y2lCbGJHVnRaVzUwSUhOcGVtVWdhVzRnWW5sMFpYTWdZbmtnZEdobElHZHBkbVZ1SUdSaGRHRWdkSGx3WlZ4dUlDb2dRSEpsZEhWeWJuTWdjMmw2WlNCcGJpQnBiblJsWjJWeUlHOXlJSFZ1WkdWbWFXNWxaQ0JwWmlCMGFHVWdaR0YwWVNCMGVYQmxJR2x6SUc1dmRDQnpkWEJ3YjNKMFpXUmNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJR2RsZEZSbGJuTnZja1ZzWlcxbGJuUlRhWHBsSUQwZ0tHUmhkR1ZVZVhCbE9pQnVkVzFpWlhJcE9pQnVkVzFpWlhKOFhHNGdJQ0FnZFc1a1pXWnBibVZrSUQwK0lGdDFibVJsWm1sdVpXUXNJRFFzSURFc0lERXNJRElzSURJc0lEUXNJRGdzSUhWdVpHVm1hVzVsWkN3Z01Td2dNaXdnT0N3Z05Dd2dPQ3dnZFc1a1pXWnBibVZrTENCMWJtUmxabWx1WldRc0lIVnVaR1ZtYVc1bFpGMWJaR0YwWlZSNWNHVmRPMXh1WEc0dktpcGNiaUFxSUdkbGRDQjBlWEJsWkNCaGNuSmhlU0JqYjI1emRISjFZM1J2Y2lCaWVTQjBhR1VnWjJsMlpXNGdkR1Z1YzI5eUlIUjVjR1ZjYmlBcUwxeHVaWGh3YjNKMElHTnZibk4wSUhSbGJuTnZjbFI1Y0dWVWIxUjVjR1ZrUVhKeVlYbERiMjV6ZEhKMVkzUnZjaUE5SUNoMGVYQmxPaUJVWlc1emIzSXVWSGx3WlNrNklFWnNiMkYwTXpKQmNuSmhlVU52Ym5OMGNuVmpkRzl5ZkZWcGJuUTRRWEp5WVhsRGIyNXpkSEoxWTNSdmNueGNiaUFnSUNCSmJuUTRRWEp5WVhsRGIyNXpkSEoxWTNSdmNueFZhVzUwTVRaQmNuSmhlVU52Ym5OMGNuVmpkRzl5ZkVsdWRERTJRWEp5WVhsRGIyNXpkSEoxWTNSdmNueEpiblF6TWtGeWNtRjVRMjl1YzNSeWRXTjBiM0o4UW1sblNXNTBOalJCY25KaGVVTnZibk4wY25WamRHOXlmRnh1SUNBZ0lGVnBiblE0UVhKeVlYbERiMjV6ZEhKMVkzUnZjbnhHYkc5aGREWTBRWEp5WVhsRGIyNXpkSEoxWTNSdmNueFZhVzUwTXpKQmNuSmhlVU52Ym5OMGNuVmpkRzl5ZkVKcFoxVnBiblEyTkVGeWNtRjVRMjl1YzNSeWRXTjBiM0lnUFQ0Z2UxeHVJQ0FnSUNBZ2MzZHBkR05vSUNoMGVYQmxLU0I3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKMlpzYjJGME1UWW5PbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJWYVc1ME1UWkJjbkpoZVR0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuWm14dllYUXpNaWM2WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUVac2IyRjBNekpCY25KaGVUdGNiaUFnSUNBZ0lDQWdZMkZ6WlNBbmRXbHVkRGduT2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCVmFXNTBPRUZ5Y21GNU8xeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkcGJuUTRKenBjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnU1c1ME9FRnljbUY1TzF4dUlDQWdJQ0FnSUNCallYTmxJQ2QxYVc1ME1UWW5PbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJWYVc1ME1UWkJjbkpoZVR0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuYVc1ME1UWW5PbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJKYm5ReE5rRnljbUY1TzF4dUlDQWdJQ0FnSUNCallYTmxJQ2RwYm5Rek1pYzZYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRWx1ZERNeVFYSnlZWGs3WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKMkp2YjJ3bk9seHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlZhVzUwT0VGeWNtRjVPMXh1SUNBZ0lDQWdJQ0JqWVhObElDZG1iRzloZERZMEp6cGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdSbXh2WVhRMk5FRnljbUY1TzF4dUlDQWdJQ0FnSUNCallYTmxJQ2QxYVc1ME16SW5PbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJWYVc1ME16SkJjbkpoZVR0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuYVc1ME5qUW5PbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJDYVdkSmJuUTJORUZ5Y21GNU8xeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkMWFXNTBOalFuT2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCQ2FXZFZhVzUwTmpSQmNuSmhlVHRjYmlBZ0lDQWdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUhWdWMzVndjRzl5ZEdWa0lIUjVjR1U2SUNSN2RIbHdaWDFnS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TzF4dVhHNHZLaXBjYmlBcUlFMWhjQ0J6ZEhKcGJtY2diRzluSUd4bGRtVnNJSFJ2SUdsdWRHVm5aWElnZG1Gc2RXVmNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJR3h2WjB4bGRtVnNVM1J5YVc1blZHOUZiblZ0SUQwZ0tHeHZaMHhsZG1Wc1B6b2dKM1psY21KdmMyVW5mQ2RwYm1adkozd25kMkZ5Ym1sdVp5ZDhKMlZ5Y205eUozd25abUYwWVd3bktUb2diblZ0WW1WeUlEMCtJSHRjYmlBZ2MzZHBkR05vSUNoc2IyZE1aWFpsYkNrZ2UxeHVJQ0FnSUdOaGMyVWdKM1psY21KdmMyVW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlEQTdYRzRnSUNBZ1kyRnpaU0FuYVc1bWJ5YzZYRzRnSUNBZ0lDQnlaWFIxY200Z01UdGNiaUFnSUNCallYTmxJQ2QzWVhKdWFXNW5KenBjYmlBZ0lDQWdJSEpsZEhWeWJpQXlPMXh1SUNBZ0lHTmhjMlVnSjJWeWNtOXlKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQXpPMXh1SUNBZ0lHTmhjMlVnSjJaaGRHRnNKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQTBPMXh1SUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUhWdWMzVndjRzl5ZEdWa0lHeHZaMmRwYm1jZ2JHVjJaV3c2SUNSN2JHOW5UR1YyWld4OVlDazdYRzRnSUgxY2JuMDdYRzVjYmk4cUtseHVJQ29nUTJobFkyc2dkMmhsZEdobGNpQjBhR1VnWjJsMlpXNGdkR1Z1YzI5eUlIUjVjR1VnYVhNZ2MzVndjRzl5ZEdWa0lHSjVJRWRRVlNCaWRXWm1aWEpjYmlBcUwxeHVaWGh3YjNKMElHTnZibk4wSUdselIzQjFRblZtWm1WeVUzVndjRzl5ZEdWa1ZIbHdaU0E5SUNoMGVYQmxPaUJVWlc1emIzSXVWSGx3WlNrNklIUjVjR1VnYVhNZ1ZHVnVjMjl5TGtkd2RVSjFabVpsY2tSaGRHRlVlWEJsY3lBOVBpQjBlWEJsSUQwOVBTQW5abXh2WVhRek1pY2dmSHhjYmlBZ0lDQjBlWEJsSUQwOVBTQW5hVzUwTXpJbklIeDhJSFI1Y0dVZ1BUMDlJQ2RwYm5RMk5DY2dmSHdnZEhsd1pTQTlQVDBnSjJKdmIyd25JSHg4SUhSNWNHVWdQVDA5SUNkbWJHOWhkREUySnlCOGZDQjBlWEJsSUQwOVBTQW5kV2x1ZERNeUp6dGNibHh1THlvcVhHNGdLaUJOWVhBZ2MzUnlhVzVuSUdSaGRHRWdiRzlqWVhScGIyNGdkRzhnYVc1MFpXZGxjaUIyWVd4MVpWeHVJQ292WEc1bGVIQnZjblFnWTI5dWMzUWdaR0YwWVV4dlkyRjBhVzl1VTNSeWFXNW5WRzlGYm5WdElEMGdLR3h2WTJGMGFXOXVPaUJVWlc1emIzSXVSR0YwWVV4dlkyRjBhVzl1S1RvZ2JuVnRZbVZ5SUQwK0lIdGNiaUFnYzNkcGRHTm9JQ2hzYjJOaGRHbHZiaWtnZTF4dUlDQWdJR05oYzJVZ0oyNXZibVVuT2x4dUlDQWdJQ0FnY21WMGRYSnVJREE3WEc0Z0lDQWdZMkZ6WlNBblkzQjFKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQXhPMXh1SUNBZ0lHTmhjMlVnSjJOd2RTMXdhVzV1WldRbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SURJN1hHNGdJQ0FnWTJGelpTQW5kR1Y0ZEhWeVpTYzZYRzRnSUNBZ0lDQnlaWFIxY200Z016dGNiaUFnSUNCallYTmxJQ2RuY0hVdFluVm1abVZ5SnpwY2JpQWdJQ0FnSUhKbGRIVnliaUEwTzF4dUlDQWdJR1JsWm1GMWJIUTZYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lIVnVjM1Z3Y0c5eWRHVmtJR1JoZEdFZ2JHOWpZWFJwYjI0NklDUjdiRzlqWVhScGIyNTlZQ2s3WEc0Z0lIMWNibjA3WEc1Y2JpOHFLbHh1SUNvZ1RXRndJR2x1ZEdWblpYSWdaR0YwWVNCc2IyTmhkR2x2YmlCMGJ5QnpkSEpwYm1jZ2RtRnNkV1ZjYmlBcUwxeHVaWGh3YjNKMElHTnZibk4wSUdSaGRHRk1iMk5oZEdsdmJrVnVkVzFVYjFOMGNtbHVaeUE5SUNoc2IyTmhkR2x2YmpvZ2JuVnRZbVZ5S1RvZ1ZHVnVjMjl5TGtSaGRHRk1iMk5oZEdsdmJueDFibVJsWm1sdVpXUWdQVDVjYmlBZ0lDQW9XeWR1YjI1bEp5d2dKMk53ZFNjc0lDZGpjSFV0Y0dsdWJtVmtKeXdnSjNSbGVIUjFjbVVuTENBblozQjFMV0oxWm1abGNpZGRJR0Z6SUdOdmJuTjBLVnRzYjJOaGRHbHZibDA3WEc0aUxDQWlMeThnUTI5d2VYSnBaMmgwSUNoaktTQk5hV055YjNOdlpuUWdRMjl5Y0c5eVlYUnBiMjR1SUVGc2JDQnlhV2RvZEhNZ2NtVnpaWEoyWldRdVhHNHZMeUJNYVdObGJuTmxaQ0IxYm1SbGNpQjBhR1VnVFVsVUlFeHBZMlZ1YzJVdVhHNWNibWx0Y0c5eWRDQjdSVzUyTENCSmJtWmxjbVZ1WTJWVFpYTnphVzl1TENCVVpXNXpiM0o5SUdaeWIyMGdKMjl1Ym5oeWRXNTBhVzFsTFdOdmJXMXZiaWM3WEc1Y2JtbHRjRzl5ZENCN1UyVnlhV0ZzYVhwaFlteGxTVzUwWlhKdVlXeENkV1ptWlhJc0lGTmxjbWxoYkdsNllXSnNaVk5sYzNOcGIyNU5aWFJoWkdGMFlTd2dVMlZ5YVdGc2FYcGhZbXhsVkdWdWMyOXlUV1YwWVdSaGRHRXNJRlJsYm5OdmNrMWxkR0ZrWVhSaGZTQm1jbTl0SUNjdUwzQnliM2g1TFcxbGMzTmhaMlZ6Snp0Y2JtbHRjRzl5ZENCN2MyVjBVblZ1VDNCMGFXOXVjMzBnWm5KdmJTQW5MaTl5ZFc0dGIzQjBhVzl1Y3ljN1hHNXBiWEJ2Y25RZ2UzTmxkRk5sYzNOcGIyNVBjSFJwYjI1emZTQm1jbTl0SUNjdUwzTmxjM05wYjI0dGIzQjBhVzl1Y3ljN1hHNXBiWEJ2Y25RZ2UyUmhkR0ZNYjJOaGRHbHZibE4wY21sdVoxUnZSVzUxYlN3Z1oyVjBWR1Z1YzI5eVJXeGxiV1Z1ZEZOcGVtVXNJR2x6UjNCMVFuVm1abVZ5VTNWd2NHOXlkR1ZrVkhsd1pTd2diRzluVEdWMlpXeFRkSEpwYm1kVWIwVnVkVzBzSUhSbGJuTnZja1JoZEdGVWVYQmxSVzUxYlZSdlUzUnlhVzVuTENCMFpXNXpiM0pFWVhSaFZIbHdaVk4wY21sdVoxUnZSVzUxYlN3Z2RHVnVjMjl5Vkhsd1pWUnZWSGx3WldSQmNuSmhlVU52Ym5OMGNuVmpkRzl5ZlNCbWNtOXRJQ2N1TDNkaGMyMHRZMjl0Ylc5dUp6dGNibWx0Y0c5eWRDQjdaMlYwU1c1emRHRnVZMlY5SUdaeWIyMGdKeTR2ZDJGemJTMW1ZV04wYjNKNUp6dGNibWx0Y0c5eWRDQjdZV3hzYjJOWFlYTnRVM1J5YVc1bkxDQmphR1ZqYTB4aGMzUkZjbkp2Y24wZ1puSnZiU0FuTGk5M1lYTnRMWFYwYVd4ekp6dGNibHh1THk4Z0kzSmxaMmx2YmlCSmJtbDBhV0ZzYVhwaGRHbHZibk5jYmx4dUx5b3FYRzRnS2lCVWFHVnlaU0JoY21VZ05DQmthV1ptWlhKbGJuUWdYQ0pwYm1sMGFXRnNhWHBoZEdsdmJsd2lJSE4wWlhCeklHWnZjaUJQVWxRdUlGUm9aWGtnYUdGd2NHVnVJR2x1SUdScFptWmxjbVZ1ZENCd2JHRmpaWE1nWVc1a0lHUnBabVpsY21WdWRDQjBhVzFsTGx4dUlDcGNiaUFxSURFdUlFcGhkbUZUWTNKcGNIUWdhVzVwZEdsaGJHbDZZWFJwYjI0Z1ptOXlJRzl1Ym5oeWRXNTBhVzFsTFdOdmJXMXZiaUJoYm1RZ2IyNXVlSEoxYm5ScGJXVXRkMlZpTGx4dUlDb2dJQ0FnVkdocGN5QnBjeUIwYUdVZ1ptbHljM1FnYVc1cGRHbGhiR2w2WVhScGIyNGdjM1JsY0M0Z1NXNGdkR2hwY3lCemRHVndMQ0J2Ym01NGNuVnVkR2x0WlMxM1pXSWdZMkZzYkhNZ2IyNXVlSEoxYm5ScGJXVXRZMjl0Ylc5dUozTWdjbVZuYVhOMFpYSkNZV05yWlc1a0tDbGNiaUFxSUdaMWJtTjBhVzl1SUcxMWJIUnBjR3hsSUhScGJXVnpJSFJ2SUhKbFoybHpkR1Z5SUdGc2JDQjBhR1VnWVhaaGFXeGhZbXhsSUdKaFkydGxibVJ6TGlCVWFHVWdZbUZqYTJWdVpDQnlaV2RwYzNSeVlYUnBiMjRnYVhNZ2RtVnllU0JtWVhOMExpQkpkQ0J2Ym14NVhHNGdLaUJ5WldkcGMzUmxjbk1nZEdobElHSmhZMnRsYm1RZ2JtRnRaU0IzYVhSb0lIUm9aU0IxYm1sdWFYUnBZV3hwZW1Wa0lHSmhZMnRsYm1RZ2IySnFaV04wTGlCT2J5Qm9aV0YyZVNCcGJtbDBhV0ZzYVhwaGRHbHZiaUJwY3lCa2IyNWxJR2x1SUhSb2FYTWdjM1JsY0M1Y2JpQXFJQ0FnSUZKbFptVnlJSFJ2SUhkbFlpOXNhV0l2YVc1a1pYZ3VkSE1nWm05eUlIUm9aU0JpWVdOclpXNWtJSEpsWjJsemRISmhkR2x2Ymk1Y2JpQXFYRzRnS2lBeUxpQlhaV0pCYzNObGJXSnNlU0JoY25ScFptRmpkQ0JwYm1sMGFXRnNhWHBoZEdsdmJpNWNiaUFxSUNBZ0lGUm9hWE1nYUdGd2NHVnVjeUIzYUdWdUlHRnVlU0J5WldkcGMzUmxjbVZrSUhkaGMyMGdZbUZqYTJWdVpDQnBjeUIxYzJWa0lHWnZjaUIwYUdVZ1ptbHljM1FnZEdsdFpTQW9hV1V1SUdCdmNuUXVTVzVtWlhKbGJtTmxVMlZ6YzJsdmJpNWpjbVZoZEdVb0tXQWdiM0pjYmlBcUlHQnZjblF1VkhKaGFXNXBibWRUWlhOemFXOXVMbU55WldGMFpTZ3BZQ0JwY3lCallXeHNaV1FwTGlCSmJpQjBhR2x6SUhOMFpYQXNJRzl1Ym5oeWRXNTBhVzFsTFhkbFlpQmtiMlZ6SUhSb1pTQm1iMnhzYjNkcGJtZHpPbHh1SUNvZ0lDQWdJQzBnWTNKbFlYUmxJR0VnY0hKdmVIa2dkMjl5YTJWeUlHRnVaQ0J0WVd0bElITjFjbVVnZEdobElIQnliM2g1SUhkdmNtdGxjaUJwY3lCeVpXRmtlU0IwYnlCeVpXTmxhWFpsSUcxbGMzTmhaMlZ6TENCcFppQndjbTk0ZVNCcGN5QmxibUZpYkdWa0xseHVJQ29nSUNBZ0lDMGdjR1Z5Wm05eWJTQm1aV0YwZFhKbElHUmxkR1ZqZEdsdmJpd2diRzlqWVhSbElHTnZjbkpsWTNRZ1YyVmlRWE56WlcxaWJIa2dZWEowYVdaaFkzUWdjR0YwYUNCaGJtUWdZMkZzYkNCMGFHVWdSVzF6WTNKcGNIUmxiaUJuWlc1bGNtRjBaV1JjYmlBcUlFcGhkbUZUWTNKcGNIUWdZMjlrWlNCMGJ5QnBibWwwYVdGc2FYcGxJSFJvWlNCWFpXSkJjM05sYldKc2VTQnlkVzUwYVcxbExseHVJQ29nSUNBZ0lDQWdJQ0F0SUdsbUlIQnliM2g1SUdseklHVnVZV0pzWldRc0lIUm9hWE1nYzNSbGNDQm9ZWEJ3Wlc1eklHbHVJSFJvWlNCd2NtOTRlU0IzYjNKclpYSWdkWE5wYm1jZ2JXVnpjMkZuWlNBbmFXNXBkQzEzWVhOdEp5NWNiaUFxSUNBZ0lDQWdJQ0FnTFNCa2IzZHViRzloWkdsdVp5QjBhR1VnSjI5eWRDMTNZWE50ZXk0dUxuMHVkMkZ6YlNjZ1ptbHNaU0JwY3lCa2IyNWxJR2x1SUhSb2FYTWdjM1JsY0M1Y2JpQXFJQ0FnSUNBZ0lDQWdMU0JwWmlCdGRXeDBhUzEwYUhKbFlXUWdhWE1nWlc1aFlteGxaQ3dnYjI1bElHOXlJRzF2Y21VZ2QyVmlkMjl5YTJWeUlIZHBiR3dnWW1VZ1kzSmxZWFJsWkNCMGJ5QnBibWwwYVdGc2FYcGxJSFJvWlNCUVZHaHlaV0ZrSUhSb2NtVmhaSEJ2YjJ3dVhHNGdLbHh1SUNvZ015NGdUMUpVSUdWdWRtbHliMjV0Wlc1MElHbHVhWFJwWVd4cGVtRjBhVzl1TGx4dUlDb2dJQ0FnVkdocGN5Qm9ZWEJ3Wlc1eklHRm1kR1Z5SUhOMFpYQWdNaTRnU1c0Z2RHaHBjeUJ6ZEdWd0xDQnZibTU0Y25WdWRHbHRaUzEzWldJZ2NHVnlabTl5YlhNZ1QwNU9XQ0JTZFc1MGFXMWxJR1Z1ZG1seWIyNXRaVzUwSUdsdWFYUnBZV3hwZW1GMGFXOXVMbHh1SUNvZ1JuVnVZM1JwYjI0Z1lGOVBjblJKYm1sMEtDbGdJR2x6SUdOaGJHeGxaQ0JwYmlCMGFHbHpJSE4wWlhBdVhHNGdLaUFnSUNBZ0xTQnBaaUJ3Y205NGVTQnBjeUJsYm1GaWJHVmtMQ0IwYUdseklITjBaWEFnYUdGd2NHVnVjeUJwYmlCMGFHVWdjSEp2ZUhrZ2QyOXlhMlZ5SUhWemFXNW5JRzFsYzNOaFoyVWdKMmx1YVhRdGIzSjBKeTVjYmlBcUlDQWdJQ0F0SUd4dloyZHBibWNnYkdWMlpXd2dLRzl5ZEM1bGJuWXViRzluVEdWMlpXd3BJR0Z1WkNCMGFISmxZV1FnYm5WdFltVnlJQ2h2Y25RdVpXNTJMbmRoYzIwdWJuVnRWR2h5WldGa2N5a2dZWEpsSUhObGRDQnBiaUIwYUdseklITjBaWEF1WEc0Z0tseHVJQ29nTkM0Z1UyVnpjMmx2YmlCcGJtbDBhV0ZzYVhwaGRHbHZiaTVjYmlBcUlDQWdJRlJvYVhNZ2FHRndjR1Z1Y3lCM2FHVnVJR0J2Y25RdVNXNW1aWEpsYm1ObFUyVnpjMmx2Ymk1amNtVmhkR1VvS1dBZ2IzSWdZRzl5ZEM1VWNtRnBibWx1WjFObGMzTnBiMjR1WTNKbFlYUmxLQ2xnSUdseklHTmhiR3hsWkM0Z1ZXNXNhV3RsSUhSb1pTQm1hWEp6ZENBelhHNGdLaUJ6ZEdWd2N5QW9kR2hsZVNCdmJteDVJR05oYkd4bFpDQnZibU5sS1N3Z2RHaHBjeUJ6ZEdWd0lIZHBiR3dnWW1VZ1pHOXVaU0JtYjNJZ1pXRmphQ0J6WlhOemFXOXVMaUJKYmlCMGFHbHpJSE4wWlhBc0lHOXVibmh5ZFc1MGFXMWxMWGRsWWlCa2IyVnpJSFJvWlZ4dUlDb2dabTlzYkc5M2FXNW5jenBjYmlBcUlDQWdJRWxtSUhSb1pTQndZWEpoYldWMFpYSWdhWE1nWVNCVlVrdzZYRzRnS2lBZ0lDQXRJR1J2ZDI1c2IyRmtJSFJvWlNCdGIyUmxiQ0JrWVhSaElHWnliMjBnZEdobElGVlNUQzVjYmlBcUlDQWdJQzBnWTI5d2VTQjBhR1VnYlc5a1pXd2daR0YwWVNCMGJ5QjBhR1VnVjBGVFRTQm9aV0Z3TGlBb2NISnZlSGs2SUNkamIzQjVMV1p5YjIwbktWeHVJQ29nSUNBZ0xTQmtaWEpsWm1WeVpXNWpaU0IwYUdVZ2JXOWtaV3dnWW5WbVptVnlMaUJVYUdseklITjBaWEFnWVd4c2IzZHpJSFJvWlNCdmNtbG5hVzVoYkNCQmNuSmhlVUoxWm1abGNpQjBieUJpWlNCbllYSmlZV2RsSUdOdmJHeGxZM1JsWkM1Y2JpQXFJQ0FnSUMwZ1kyRnNiQ0JnWDA5eWRFTnlaV0YwWlZObGMzTnBiMjRvS1dBZ2RHOGdZM0psWVhSbElIUm9aU0J6WlhOemFXOXVMaUFvY0hKdmVIazZJQ2RqY21WaGRHVW5LVnh1SUNwY2JpQXFJQ0FnSUVsbUlIUm9aU0J3WVhKaGJXVjBaWElnYVhNZ1lTQlZhVzUwT0VGeWNtRjVJRzlpYW1WamREcGNiaUFxSUNBZ0lDMGdZMjl3ZVNCMGFHVWdiVzlrWld3Z1pHRjBZU0IwYnlCMGFHVWdWMEZUVFNCb1pXRndMaUFvY0hKdmVIazZJQ2RqYjNCNUxXWnliMjBuS1Z4dUlDb2dJQ0FnTFNCallXeHNJR0JmVDNKMFEzSmxZWFJsVTJWemMybHZiaWdwWUNCMGJ5QmpjbVZoZEdVZ2RHaGxJSE5sYzNOcGIyNHVJQ2h3Y205NGVUb2dKMk55WldGMFpTY3BYRzRnS2x4dUlDcGNiaUFxTDF4dVhHNHZLaXBjYmlBcUlHbHVhWFJwWVd4cGVtVWdUMUpVSUdWdWRtbHliMjV0Wlc1MExseHVJQ3BjYmlBcUlFQndZWEpoYlNCdWRXMVVhSEpsWVdSeklGTmxkRWRzYjJKaGJFbHVkSEpoVDNCT2RXMVVhSEpsWVdSektHNTFiVlJvY21WaFpITXBYRzRnS2lCQWNHRnlZVzBnYkc5bloybHVaMHhsZG1Wc0lFTnlaV0YwWlVWdWRpaHpkR0YwYVdOZlkyRnpkRHhQY25STWIyZG5hVzVuVEdWMlpXdytLR3h2WjJkcGJtZGZiR1YyWld3cEtWeHVJQ292WEc1amIyNXpkQ0JwYm1sMFQzSjBJRDBnS0c1MWJWUm9jbVZoWkhNNklHNTFiV0psY2l3Z2JHOW5aMmx1WjB4bGRtVnNPaUJ1ZFcxaVpYSXBPaUIyYjJsa0lEMCtJSHRjYmlBZ1kyOXVjM1FnWlhKeWIzSkRiMlJsSUQwZ1oyVjBTVzV6ZEdGdVkyVW9LUzVmVDNKMFNXNXBkQ2h1ZFcxVWFISmxZV1J6TENCc2IyZG5hVzVuVEdWMlpXd3BPMXh1SUNCcFppQW9aWEp5YjNKRGIyUmxJQ0U5UFNBd0tTQjdYRzRnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvSjBOaGJseGNKM1FnYVc1cGRHbGhiR2w2WlNCdmJtNTRjblZ1ZEdsdFpTNG5LVHRjYmlBZ2ZWeHVmVHRjYmx4dUx5b3FYRzRnS2lCcGJuUnBZV3hwZW1VZ2NuVnVkR2x0WlNCbGJuWnBjbTl1YldWdWRDNWNiaUFxSUVCd1lYSmhiU0JsYm5ZZ2NHRnpjMlZrSUdsdUlIUm9aU0JsYm5acGNtOXViV1Z1ZENCamIyNW1hV2NnYjJKcVpXTjBMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnYVc1cGRGSjFiblJwYldVZ1BTQmhjM2x1WXlobGJuWTZJRVZ1ZGlrNklGQnliMjFwYzJVOGRtOXBaRDRnUFQ0Z2UxeHVJQ0F2THlCcGJtbDBJRTlTVkZ4dUlDQnBibWwwVDNKMEtHVnVkaTUzWVhOdExtNTFiVlJvY21WaFpITWhMQ0JzYjJkTVpYWmxiRk4wY21sdVoxUnZSVzUxYlNobGJuWXViRzluVEdWMlpXd3BLVHRjYm4wN1hHNWNiaThxS2x4dUlDb2djR1Z5Wm05eWJTQkZVQ0J6Y0dWamFXWnBZeUJwYm1sMGFXRnNhWHBoZEdsdmJpNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ1pXNTJYRzRnS2lCQWNHRnlZVzBnWlhCT1lXMWxYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0JwYm1sMFJYQWdQU0JoYzNsdVl5aGxiblk2SUVWdWRpd2daWEJPWVcxbE9pQnpkSEpwYm1jcE9pQlFjbTl0YVhObFBIWnZhV1ErSUQwK0lIdGNiaUFnYVdZZ0tDRkNWVWxNUkY5RVJVWlRMa1JKVTBGQ1RFVmZWMFZDUjFCVklDWW1JR1Z3VG1GdFpTQTlQVDBnSjNkbFltZHdkU2NwSUh0Y2JpQWdJQ0F2THlCd1pYSm1iM0p0SUZkbFlrZFFWU0JoZG1GcGJHRmlhV3hwZEhrZ1kyaGxZMnRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JRzVoZG1sbllYUnZjaUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY2dmSHdnSVc1aGRtbG5ZWFJ2Y2k1bmNIVXBJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpZ25WMlZpUjFCVklHbHpJRzV2ZENCemRYQndiM0owWldRZ2FXNGdZM1Z5Y21WdWRDQmxiblpwY205dWJXVnVkQ2NwTzF4dUlDQWdJSDFjYmlBZ0lDQmpiMjV6ZENCaFpHRndkR1Z5SUQwZ1lYZGhhWFFnYm1GMmFXZGhkRzl5TG1kd2RTNXlaWEYxWlhOMFFXUmhjSFJsY2lncE8xeHVJQ0FnSUdsbUlDZ2hZV1JoY0hSbGNpa2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtGeHVJQ0FnSUNBZ0lDQWdJQ2RHWVdsc1pXUWdkRzhnWjJWMElFZFFWU0JoWkdGd2RHVnlMaUJaYjNVZ2JXRjVJRzVsWldRZ2RHOGdaVzVoWW14bElHWnNZV2NnWENJdExXVnVZV0pzWlMxMWJuTmhabVV0ZDJWaVozQjFYQ0lnYVdZZ2VXOTFJR0Z5WlNCMWMybHVaeUJEYUhKdmJXVXVKeWs3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0NGbGJuWXVkMkZ6YlM1emFXMWtLU0I3WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnSjA1dmRDQnpkWEJ3YjNKMFpXUWdabTl5SUZkbFlrZFFWVDFQVGlCaGJtUWdVMGxOUkQxUFJrWXVJRkJzWldGelpTQnpaWFFnWUdWdWRpNTNZWE50TG5OcGJXUmdJSFJ2SUhSeWRXVWdkMmhsYmlCMWMybHVaeUJnZDJWaVozQjFZQ0JGVUNjcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHbHVhWFFnU2xORlVDQnBaaUJoZG1GcGJHRmliR1ZjYmx4dUlDQWdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0JBZEhsd1pYTmpjbWx3ZEMxbGMyeHBiblF2Ym04dGNtVnhkV2x5WlMxcGJYQnZjblJ6TENCQWRIbHdaWE5qY21sd2RDMWxjMnhwYm5RdmJtOHRkbUZ5TFhKbGNYVnBjbVZ6WEc0Z0lDQWdZMjl1YzNRZ2FXNXBkRXB6WlhBZ1BTQnlaWEYxYVhKbEtDY3VMMnB6WlhBdmFXNXBkQ2NwTG1sdWFYUTdYRzRnSUNBZ1lYZGhhWFFnYVc1cGRFcHpaWEFvWjJWMFNXNXpkR0Z1WTJVb0tTd2daVzUyTENCaFpHRndkR1Z5S1R0Y2JpQWdmVnh1ZlR0Y2JseHVMeThnSTJWdVpISmxaMmx2YmlCSmJtbDBhV0ZzYVhwaGRHbHZibk5jYmx4dUx5b3FYRzRnS2lCMllXeHBaQ0JrWVhSaElHeHZZMkYwYVc5dWN5Qm1iM0lnYVc1d2RYUXZiM1YwY0hWMElIUmxibk52Y25NdVhHNGdLaTljYm5SNWNHVWdVM1Z3Y0c5eWRHVmtWR1Z1YzI5eVJHRjBZVXh2WTJGMGFXOXVSbTl5U1c1d2RYUlBkWFJ3ZFhRZ1BTQW5ZM0IxSjN3blkzQjFMWEJwYm01bFpDZDhKMmR3ZFMxaWRXWm1aWEluTzF4dVhHNTBlWEJsSUVsUFFtbHVaR2x1WjFOMFlYUmxJRDBnZTF4dUlDQXZLaXBjYmlBZ0lDb2dkR2hsSUdoaGJtUnNaU0J2WmlCSlR5QmlhVzVrYVc1bkxseHVJQ0FnS2k5Y2JpQWdjbVZoWkc5dWJIa2dhR0Z1Wkd4bE9pQnVkVzFpWlhJN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUhSb1pTQndjbVZtWlhKeVpXUWdiRzlqWVhScGIyNGdabTl5SUdWaFkyZ2diM1YwY0hWMElIUmxibk52Y2k1Y2JpQWdJQ3BjYmlBZ0lDb2dkbUZzZFdVZ2FYTWdiMjVsSUc5bUlDZGpjSFVuTENBblkzQjFMWEJwYm01bFpDY3NJQ2RuY0hVdFluVm1abVZ5Snk1Y2JpQWdJQ292WEc0Z0lISmxZV1J2Ym14NUlHOTFkSEIxZEZCeVpXWmxjbkpsWkV4dlkyRjBhVzl1Y3pvZ2NtVmhaRzl1YkhrZ1UzVndjRzl5ZEdWa1ZHVnVjMjl5UkdGMFlVeHZZMkYwYVc5dVJtOXlTVzV3ZFhSUGRYUndkWFJiWFR0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nWlc1MWJTQjJZV3gxWlNCdlppQjBhR1VnY0hKbFptVnljbVZrSUd4dlkyRjBhVzl1SUdadmNpQmxZV05vSUc5MWRIQjFkQ0IwWlc1emIzSXVYRzRnSUNBcUwxeHVJQ0J5WldGa2IyNXNlU0J2ZFhSd2RYUlFjbVZtWlhKeVpXUk1iMk5oZEdsdmJuTkZibU52WkdWa09pQnlaV0ZrYjI1c2VTQnVkVzFpWlhKYlhUdGNibjA3WEc1Y2JpOHFLbHh1SUNvZ0lIUjFjR3hsSUdWc1pXMWxiblJ6SUdGeVpUb2dTVzVtWlhKbGJtTmxVMlZ6YzJsdmJpQkpSRHNnYVc1d2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa095QnZkWFJ3ZFhST1lXMWxjMVZVUmpoRmJtTnZaR1ZrT3lCaWFXNWthVzVuVTNSaGRHVmNiaUFxTDF4dWRIbHdaU0JUWlhOemFXOXVUV1YwWVdSaGRHRWdQU0JiWEc0Z0lHbHVabVZ5Wlc1alpWTmxjM05wYjI1SlpEb2diblZ0WW1WeUxDQnBibkIxZEU1aGJXVnpWVlJHT0VWdVkyOWtaV1E2SUc1MWJXSmxjbHRkTENCdmRYUndkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtPaUJ1ZFcxaVpYSmJYU3hjYmlBZ1ltbHVaR2x1WjFOMFlYUmxPaUJKVDBKcGJtUnBibWRUZEdGMFpYeHVkV3hzWEc1ZE8xeHVYRzVqYjI1emRDQmhZM1JwZG1WVFpYTnphVzl1Y3lBOUlHNWxkeUJOWVhBOGJuVnRZbVZ5TENCVFpYTnphVzl1VFdWMFlXUmhkR0UrS0NrN1hHNWNiaThxS2x4dUlDb2daMlYwSUhSb1pTQnBibkIxZEM5dmRYUndkWFFnWTI5MWJuUWdiMllnZEdobElITmxjM05wYjI0dVhHNGdLaUJBY0dGeVlXMGdjMlZ6YzJsdmJraGhibVJzWlNCMGFHVWdhR0Z1Wkd4bElISmxjSEpsYzJWdWRHbHVaeUIwYUdVZ2MyVnpjMmx2Ymk0Z2MyaHZkV3hrSUdKbElHNXZiaTE2WlhKdkxseHVJQ29nUUhKbGRIVnlibk1nWVNCMGRYQnNaU0JwYm1Oc2RXUnBibWNnTWlCdWRXMWlaWEp6TENCeVpYQnlaWE5sYm5ScGJtY2dkR2hsSUdsdWNIVjBJR052ZFc1MElHRnVaQ0J2ZFhSd2RYUWdZMjkxYm5RdVhHNGdLaTljYm1OdmJuTjBJR2RsZEZObGMzTnBiMjVKYm5CMWRFOTFkSEIxZEVOdmRXNTBJRDBnS0hObGMzTnBiMjVJWVc1a2JHVTZJRzUxYldKbGNpazZJRnR1ZFcxaVpYSXNJRzUxYldKbGNsMGdQVDRnZTF4dUlDQmpiMjV6ZENCM1lYTnRJRDBnWjJWMFNXNXpkR0Z1WTJVb0tUdGNiaUFnWTI5dWMzUWdjM1JoWTJzZ1BTQjNZWE50TG5OMFlXTnJVMkYyWlNncE8xeHVJQ0IwY25rZ2UxeHVJQ0FnSUdOdmJuTjBJR1JoZEdGUFptWnpaWFFnUFNCM1lYTnRMbk4wWVdOclFXeHNiMk1vT0NrN1hHNGdJQ0FnWTI5dWMzUWdaWEp5YjNKRGIyUmxJRDBnZDJGemJTNWZUM0owUjJWMFNXNXdkWFJQZFhSd2RYUkRiM1Z1ZENoelpYTnphVzl1U0dGdVpHeGxMQ0JrWVhSaFQyWm1jMlYwTENCa1lYUmhUMlptYzJWMElDc2dOQ2s3WEc0Z0lDQWdhV1lnS0dWeWNtOXlRMjlrWlNBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9KME5oYmx4Y0ozUWdaMlYwSUhObGMzTnBiMjRnYVc1d2RYUXZiM1YwY0hWMElHTnZkVzUwTGljcE8xeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdXM2RoYzIwdVNFVkJVRE15VzJSaGRHRlBabVp6WlhRZ0x5QTBYU3dnZDJGemJTNUlSVUZRTXpKYlpHRjBZVTltWm5ObGRDQXZJRFFnS3lBeFhWMDdYRzRnSUgwZ1ptbHVZV3hzZVNCN1hHNGdJQ0FnZDJGemJTNXpkR0ZqYTFKbGMzUnZjbVVvYzNSaFkyc3BPMXh1SUNCOVhHNTlPMXh1WEc0dktpcGNiaUFxSUdGc2JHOWpZWFJsSUhSb1pTQnRaVzF2Y25rZ1lXNWtJRzFsYldOd2VTQjBhR1VnWlhoMFpYSnVZV3dnWW5WbVptVnlMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQnRiMlJsYkNBdElIUm9aU0JsZUhSbGNtNWhiQ0JpZFdabVpYSWdZMjl1ZEdGcGJtbHVaeUIwYUdVZ2JXOWtaV3dnWkdGMFlTNGdUWFZ6ZENCdWIzUWdZbVVnZEdobElITmhiV1VnWW5WbVptVnlJR0Z6SUhSb1pTQlhRVk5OSUdobFlYQXVYRzRnS2lCQWNtVjBkWEp1Y3lCaElESXRaV3hsYldWdWRITWdkSFZ3YkdVZ0xTQjBhR1VnY0c5cGJuUmxjaUJoYm1RZ2MybDZaU0J2WmlCMGFHVWdZV3hzYjJOaGRHVmtJR0oxWm1abGNseHVJQ292WEc1bGVIQnZjblFnWTI5dWMzUWdZMjl3ZVVaeWIyMUZlSFJsY201aGJFSjFabVpsY2lBOUlDaHRiMlJsYkRvZ1ZXbHVkRGhCY25KaGVTazZJRnR1ZFcxaVpYSXNJRzUxYldKbGNsMGdQVDRnZTF4dUlDQmpiMjV6ZENCM1lYTnRJRDBnWjJWMFNXNXpkR0Z1WTJVb0tUdGNiaUFnWTI5dWMzUWdiVzlrWld4RVlYUmhUMlptYzJWMElEMGdkMkZ6YlM1ZmJXRnNiRzlqS0cxdlpHVnNMbUo1ZEdWTVpXNW5kR2dwTzF4dUlDQnBaaUFvYlc5a1pXeEVZWFJoVDJabWMyVjBJRDA5UFNBd0tTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCRFlXNG5kQ0JqY21WaGRHVWdZU0J6WlhOemFXOXVMaUJtWVdsc1pXUWdkRzhnWVd4c2IyTmhkR1VnWVNCaWRXWm1aWElnYjJZZ2MybDZaU0FrZTIxdlpHVnNMbUo1ZEdWTVpXNW5kR2g5TG1BcE8xeHVJQ0I5WEc0Z0lIZGhjMjB1U0VWQlVGVTRMbk5sZENodGIyUmxiQ3dnYlc5a1pXeEVZWFJoVDJabWMyVjBLVHRjYmlBZ2NtVjBkWEp1SUZ0dGIyUmxiRVJoZEdGUFptWnpaWFFzSUcxdlpHVnNMbUo1ZEdWTVpXNW5kR2hkTzF4dWZUdGNibHh1THlvcVhHNGdLaUJqY21WaGRHVWdZVzRnYVc1bVpYSmxibU5sSUhObGMzTnBiMjRnWm5KdmJTQmhJRzF2WkdWc0lHUmhkR0VnWW5WbVptVnlMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQnRiMlJsYkVSaGRHRWdMU0JsYVhSb1pYSWdZU0JWYVc1ME9FRnljbUY1SUc5aWFtVmpkQ0J5WlhCeVpYTmxiblJwYm1jZ2RHaGxJRzF2WkdWc0lHUmhkR0VzSUc5eUlHRWdNaTFsYkdWdFpXNTBjeUIwZFhCc1pTQmpiMjUwWVdsdWFXNW5JSFJvWlZ4dUlDb2dJQ0FnSUhCdmFXNTBaWElnWVc1a0lITnBlbVVnYjJZZ2RHaGxJRzF2WkdWc0lHUmhkR0VnWW5WbVptVnlMbHh1SUNvZ1FIQmhjbUZ0SUc5d2RHbHZibk1nWVc0Z2IzQjBhVzl1WVd3Z2MyVnpjMmx2YmlCdmNIUnBiMjV6SUc5aWFtVmpkQzVjYmlBcUlFQnlaWFIxY201eklHRWdNeTFsYkdWdFpXNTBjeUIwZFhCc1pTQmpiMjUwWVdsdWFXNW5JRnR6WlhOemFXOXVJR2hoYm1Sc1pTd2dhVzV3ZFhRZ2JtRnRaWE1zSUc5MWRIQjFkQ0J1WVcxbGMxMWNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJR055WldGMFpWTmxjM05wYjI0Z1BWeHVJQ0FnSUNodGIyUmxiRVJoZEdFNklGVnBiblE0UVhKeVlYbDhVMlZ5YVdGc2FYcGhZbXhsU1c1MFpYSnVZV3hDZFdabVpYSXNYRzRnSUNBZ0lHOXdkR2x2Ym5NL09pQkpibVpsY21WdVkyVlRaWE56YVc5dUxsTmxjM05wYjI1UGNIUnBiMjV6S1RvZ1UyVnlhV0ZzYVhwaFlteGxVMlZ6YzJsdmJrMWxkR0ZrWVhSaElEMCtJSHRjYmlBZ0lDQWdJR3hsZENCdGIyUmxiRVJoZEdGUFptWnpaWFE2SUc1MWJXSmxjaXdnYlc5a1pXeEVZWFJoVEdWdVozUm9PaUJ1ZFcxaVpYSTdYRzRnSUNBZ0lDQmpiMjV6ZENCM1lYTnRJRDBnWjJWMFNXNXpkR0Z1WTJVb0tUdGNibHh1SUNBZ0lDQWdhV1lnS0VGeWNtRjVMbWx6UVhKeVlYa29iVzlrWld4RVlYUmhLU2tnZTF4dUlDQWdJQ0FnSUNBdkx5QnBaaUJ0YjJSbGJDQmtZWFJoSUdseklHRnVJR0Z5Y21GNUxDQnBkQ0J0ZFhOMElHSmxJR0VnTWkxbGJHVnRaVzUwY3lCMGRYQnNaU0JqYjI1MFlXbHVhVzVuSUhSb1pTQndiMmx1ZEdWeUlHRnVaQ0J6YVhwbElHOW1JSFJvWlNCdGIyUmxiQ0JrWVhSaFhHNGdJQ0FnSUNBZ0lGdHRiMlJsYkVSaGRHRlBabVp6WlhRc0lHMXZaR1ZzUkdGMFlVeGxibWQwYUYwZ1BTQnRiMlJsYkVSaGRHRTdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzF2WkdWc1JHRjBZUzVpZFdabVpYSWdQVDA5SUhkaGMyMHVTRVZCVUZVNExtSjFabVpsY2lrZ2UxeHVJQ0FnSUNBZ0lDQXZMeUJwWmlCdGIyUmxiQ0JrWVhSaElIVnpaWE1nZEdobElITmhiV1VnWW5WbVptVnlJR0Z6SUhSb1pTQlhRVk5OSUdobFlYQXNJSGRsSUdSdmJpZDBJRzVsWldRZ2RHOGdZMjl3ZVNCcGRDNWNiaUFnSUNBZ0lDQWdXMjF2WkdWc1JHRjBZVTltWm5ObGRDd2diVzlrWld4RVlYUmhUR1Z1WjNSb1hTQTlJRnR0YjJSbGJFUmhkR0V1WW5sMFpVOW1abk5sZEN3Z2JXOWtaV3hFWVhSaExtSjVkR1ZNWlc1bmRHaGRPMXh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdMeThnYjNSb1pYSjNhWE5sTENCamIzQjVJSFJvWlNCdGIyUmxiQ0JrWVhSaElIUnZJSFJvWlNCWFFWTk5JR2hsWVhBdVhHNGdJQ0FnSUNBZ0lGdHRiMlJsYkVSaGRHRlBabVp6WlhRc0lHMXZaR1ZzUkdGMFlVeGxibWQwYUYwZ1BTQmpiM0I1Um5KdmJVVjRkR1Z5Ym1Gc1FuVm1abVZ5S0cxdlpHVnNSR0YwWVNrN1hHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHeGxkQ0J6WlhOemFXOXVTR0Z1Wkd4bElEMGdNRHRjYmlBZ0lDQWdJR3hsZENCelpYTnphVzl1VDNCMGFXOXVjMGhoYm1Sc1pTQTlJREE3WEc0Z0lDQWdJQ0JzWlhRZ2FXOUNhVzVrYVc1blNHRnVaR3hsSUQwZ01EdGNiaUFnSUNBZ0lHeGxkQ0JoYkd4dlkzTTZJRzUxYldKbGNsdGRJRDBnVzEwN1hHNGdJQ0FnSUNCamIyNXpkQ0JwYm5CMWRFNWhiV1Z6VlZSR09FVnVZMjlrWldRZ1BTQmJYVHRjYmlBZ0lDQWdJR052Ym5OMElHOTFkSEIxZEU1aGJXVnpWVlJHT0VWdVkyOWtaV1FnUFNCYlhUdGNibHh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1czTmxjM05wYjI1UGNIUnBiMjV6U0dGdVpHeGxMQ0JoYkd4dlkzTmRJRDBnYzJWMFUyVnpjMmx2Yms5d2RHbHZibk1vYjNCMGFXOXVjeWs3WEc1Y2JpQWdJQ0FnSUNBZ2MyVnpjMmx2YmtoaGJtUnNaU0E5SUhkaGMyMHVYMDl5ZEVOeVpXRjBaVk5sYzNOcGIyNG9iVzlrWld4RVlYUmhUMlptYzJWMExDQnRiMlJsYkVSaGRHRk1aVzVuZEdnc0lITmxjM05wYjI1UGNIUnBiMjV6U0dGdVpHeGxLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tITmxjM05wYjI1SVlXNWtiR1VnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNCamFHVmphMHhoYzNSRmNuSnZjaWduUTJGdVhGd25kQ0JqY21WaGRHVWdZU0J6WlhOemFXOXVMaWNwTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1cybHVjSFYwUTI5MWJuUXNJRzkxZEhCMWRFTnZkVzUwWFNBOUlHZGxkRk5sYzNOcGIyNUpibkIxZEU5MWRIQjFkRU52ZFc1MEtITmxjM05wYjI1SVlXNWtiR1VwTzF4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdsdWNIVjBUbUZ0WlhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiM1YwY0hWMFRtRnRaWE1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2IzVjBjSFYwVUhKbFptVnljbVZrVEc5allYUnBiMjV6T2lCVGRYQndiM0owWldSVVpXNXpiM0pFWVhSaFRHOWpZWFJwYjI1R2IzSkpibkIxZEU5MWRIQjFkRnRkSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYVc1d2RYUkRiM1Z1ZERzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYm1GdFpTQTlJSGRoYzIwdVgwOXlkRWRsZEVsdWNIVjBUbUZ0WlNoelpYTnphVzl1U0dGdVpHeGxMQ0JwS1R0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYm1GdFpTQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9KME5oYmx4Y0ozUWdaMlYwSUdGdUlHbHVjSFYwSUc1aGJXVXVKeWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJR2x1Y0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkM1d2RYTm9LRzVoYldVcE8xeHVJQ0FnSUNBZ0lDQWdJR2x1Y0hWMFRtRnRaWE11Y0hWemFDaDNZWE50TGxWVVJqaFViMU4wY21sdVp5aHVZVzFsS1NrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J2ZFhSd2RYUkRiM1Z1ZERzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYm1GdFpTQTlJSGRoYzIwdVgwOXlkRWRsZEU5MWRIQjFkRTVoYldVb2MyVnpjMmx2YmtoaGJtUnNaU3dnYVNrN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0c1aGJXVWdQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOb1pXTnJUR0Z6ZEVWeWNtOXlLQ2REWVc1Y1hDZDBJR2RsZENCaGJpQnZkWFJ3ZFhRZ2JtRnRaUzRuS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnYjNWMGNIVjBUbUZ0WlhOVlZFWTRSVzVqYjJSbFpDNXdkWE5vS0c1aGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJRzVoYldWVGRISnBibWNnUFNCM1lYTnRMbFZVUmpoVWIxTjBjbWx1WnlodVlXMWxLVHRjYmlBZ0lDQWdJQ0FnSUNCdmRYUndkWFJPWVcxbGN5NXdkWE5vS0c1aGJXVlRkSEpwYm1jcE8xeHVYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tDRkNWVWxNUkY5RVJVWlRMa1JKVTBGQ1RFVmZWMFZDUjFCVktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JzYjJOaGRHbHZiaUE5SUhSNWNHVnZaaUJ2Y0hScGIyNXpQeTV3Y21WbVpYSnlaV1JQZFhSd2RYUk1iMk5oZEdsdmJpQTlQVDBnSjNOMGNtbHVaeWNnUDF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk11Y0hKbFptVnljbVZrVDNWMGNIVjBURzlqWVhScGIyNGdPbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTS9MbkJ5WldabGNuSmxaRTkxZEhCMWRFeHZZMkYwYVc5dVB5NWJibUZ0WlZOMGNtbHVaMTBnUHo4Z0oyTndkU2M3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkc5allYUnBiMjRnSVQwOUlDZGpjSFVuSUNZbUlHeHZZMkYwYVc5dUlDRTlQU0FuWTNCMUxYQnBibTVsWkNjZ0ppWWdiRzlqWVhScGIyNGdJVDA5SUNkbmNIVXRZblZtWm1WeUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lFNXZkQ0J6ZFhCd2IzSjBaV1FnY0hKbFptVnljbVZrSUc5MWRIQjFkQ0JzYjJOaGRHbHZiam9nSkh0c2IyTmhkR2x2Ym4wdVlDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2ZFhSd2RYUlFjbVZtWlhKeVpXUk1iMk5oZEdsdmJuTXVjSFZ6YUNoc2IyTmhkR2x2YmlrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0x5OGdkWE5sSUVsUElHSnBibVJwYm1jZ2IyNXNlU0IzYUdWdUlHRjBJR3hsWVhOMElHOXVaU0J2ZFhSd2RYUWdhWE1nY0hKbFptWmxjbVZrSUhSdklHSmxJRzl1SUVkUVZTNWNiaUFnSUNBZ0lDQWdiR1YwSUdKcGJtUnBibWRUZEdGMFpUb2dTVTlDYVc1a2FXNW5VM1JoZEdWOGJuVnNiQ0E5SUc1MWJHdzdYRzRnSUNBZ0lDQWdJR2xtSUNnaFFsVkpURVJmUkVWR1V5NUVTVk5CUWt4RlgxZEZRa2RRVlNBbUppQnZkWFJ3ZFhSUWNtVm1aWEp5WldSTWIyTmhkR2x2Ym5NdWMyOXRaU2hzSUQwK0lHd2dQVDA5SUNkbmNIVXRZblZtWm1WeUp5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNCcGIwSnBibVJwYm1kSVlXNWtiR1VnUFNCM1lYTnRMbDlQY25SRGNtVmhkR1ZDYVc1a2FXNW5LSE5sYzNOcGIyNUlZVzVrYkdVcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNocGIwSnBibVJwYm1kSVlXNWtiR1VnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9aV05yVEdGemRFVnljbTl5S0NkRFlXNWNYQ2QwSUdOeVpXRjBaU0JKVHlCaWFXNWthVzVuTGljcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lHSnBibVJwYm1kVGRHRjBaU0E5SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2hoYm1Sc1pUb2dhVzlDYVc1a2FXNW5TR0Z1Wkd4bExGeHVJQ0FnSUNBZ0lDQWdJQ0FnYjNWMGNIVjBVSEpsWm1WeWNtVmtURzlqWVhScGIyNXpMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2IzVjBjSFYwVUhKbFptVnljbVZrVEc5allYUnBiMjV6Ulc1amIyUmxaRG9nYjNWMGNIVjBVSEpsWm1WeWNtVmtURzlqWVhScGIyNXpMbTFoY0Noc0lEMCtJR1JoZEdGTWIyTmhkR2x2YmxOMGNtbHVaMVJ2Ulc1MWJTaHNLU2tzWEc0Z0lDQWdJQ0FnSUNBZ2ZUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdGamRHbDJaVk5sYzNOcGIyNXpMbk5sZENoelpYTnphVzl1U0dGdVpHeGxMQ0JiYzJWemMybHZia2hoYm1Sc1pTd2dhVzV3ZFhST1lXMWxjMVZVUmpoRmJtTnZaR1ZrTENCdmRYUndkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtMQ0JpYVc1a2FXNW5VM1JoZEdWZEtUdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlGdHpaWE56YVc5dVNHRnVaR3hsTENCcGJuQjFkRTVoYldWekxDQnZkWFJ3ZFhST1lXMWxjMTA3WEc0Z0lDQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lHbHVjSFYwVG1GdFpYTlZWRVk0Ulc1amIyUmxaQzVtYjNKRllXTm9LR0oxWmlBOVBpQjNZWE50TGw5UGNuUkdjbVZsS0dKMVppa3BPMXh1SUNBZ0lDQWdJQ0J2ZFhSd2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa0xtWnZja1ZoWTJnb1luVm1JRDArSUhkaGMyMHVYMDl5ZEVaeVpXVW9ZblZtS1NrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0dsdlFtbHVaR2x1WjBoaGJtUnNaU0FoUFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUhkaGMyMHVYMDl5ZEZKbGJHVmhjMlZDYVc1a2FXNW5LR2x2UW1sdVpHbHVaMGhoYm1Sc1pTazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCcFppQW9jMlZ6YzJsdmJraGhibVJzWlNBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIZGhjMjB1WDA5eWRGSmxiR1ZoYzJWVFpYTnphVzl1S0hObGMzTnBiMjVJWVc1a2JHVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhSb2NtOTNJR1U3WEc0Z0lDQWdJQ0I5SUdacGJtRnNiSGtnZTF4dUlDQWdJQ0FnSUNCM1lYTnRMbDltY21WbEtHMXZaR1ZzUkdGMFlVOW1abk5sZENrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6WlhOemFXOXVUM0IwYVc5dWMwaGhibVJzWlNBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIZGhjMjB1WDA5eWRGSmxiR1ZoYzJWVFpYTnphVzl1VDNCMGFXOXVjeWh6WlhOemFXOXVUM0IwYVc5dWMwaGhibVJzWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZV3hzYjJOekxtWnZja1ZoWTJnb1lXeHNiMk1nUFQ0Z2QyRnpiUzVmWm5KbFpTaGhiR3h2WXlrcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCeVpXeGxZWE5sVTJWemMybHZiaUE5SUNoelpYTnphVzl1U1dRNklHNTFiV0psY2lrNklIWnZhV1FnUFQ0Z2UxeHVJQ0JqYjI1emRDQjNZWE50SUQwZ1oyVjBTVzV6ZEdGdVkyVW9LVHRjYmlBZ1kyOXVjM1FnYzJWemMybHZiaUE5SUdGamRHbDJaVk5sYzNOcGIyNXpMbWRsZENoelpYTnphVzl1U1dRcE8xeHVJQ0JwWmlBb0lYTmxjM05wYjI0cElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUdOaGJtNXZkQ0J5Wld4bFlYTmxJSE5sYzNOcGIyNHVJR2x1ZG1Gc2FXUWdjMlZ6YzJsdmJpQnBaRG9nSkh0elpYTnphVzl1U1dSOVlDazdYRzRnSUgxY2JpQWdZMjl1YzNRZ1czTmxjM05wYjI1SVlXNWtiR1VzSUdsdWNIVjBUbUZ0WlhOVlZFWTRSVzVqYjJSbFpDd2diM1YwY0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkN3Z2FXOUNhVzVrYVc1blUzUmhkR1ZkSUQwZ2MyVnpjMmx2Ymp0Y2JseHVJQ0JwWmlBb2FXOUNhVzVrYVc1blUzUmhkR1VwSUh0Y2JpQWdJQ0IzWVhOdExsOVBjblJTWld4bFlYTmxRbWx1WkdsdVp5aHBiMEpwYm1ScGJtZFRkR0YwWlM1b1lXNWtiR1VwTzF4dUlDQjlYRzVjYmlBZ2QyRnpiUzVxYzJWd1ZXNXlaV2RwYzNSbGNrSjFabVpsY25NL0xpaHpaWE56YVc5dVNXUXBPMXh1WEc0Z0lHbHVjSFYwVG1GdFpYTlZWRVk0Ulc1amIyUmxaQzVtYjNKRllXTm9LR0oxWmlBOVBpQjNZWE50TGw5UGNuUkdjbVZsS0dKMVppa3BPMXh1SUNCdmRYUndkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtMbVp2Y2tWaFkyZ29ZblZtSUQwK0lIZGhjMjB1WDA5eWRFWnlaV1VvWW5WbUtTazdYRzRnSUhkaGMyMHVYMDl5ZEZKbGJHVmhjMlZUWlhOemFXOXVLSE5sYzNOcGIyNUlZVzVrYkdVcE8xeHVJQ0JoWTNScGRtVlRaWE56YVc5dWN5NWtaV3hsZEdVb2MyVnpjMmx2Ymtsa0tUdGNibjA3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0J3Y21Wd1lYSmxTVzV3ZFhSUGRYUndkWFJVWlc1emIzSWdQVnh1SUNBZ0lDaDBaVzV6YjNJNklGUmxibk52Y2sxbGRHRmtZWFJoZkc1MWJHd3NJSFJsYm5OdmNraGhibVJzWlhNNklHNTFiV0psY2x0ZExDQmhiR3h2WTNNNklHNTFiV0psY2x0ZExDQnpaWE56YVc5dVNXUTZJRzUxYldKbGNpd2dhVzVrWlhnNklHNTFiV0psY2lrNlhHNGdJQ0FnSUNBZ0lIWnZhV1FnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaGRHVnVjMjl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwWlc1emIzSklZVzVrYkdWekxuQjFjMmdvTUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2QyRnpiU0E5SUdkbGRFbHVjM1JoYm1ObEtDazdYRzVjYmlBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JrWVhSaFZIbHdaU0E5SUhSbGJuTnZjbHN3WFR0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCa2FXMXpJRDBnZEdWdWMyOXlXekZkTzF4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUd4dlkyRjBhVzl1SUQwZ2RHVnVjMjl5V3pOZE8xeHVYRzRnSUNBZ0lDQWdJQ0FnYkdWMElISmhkMFJoZEdFNklHNTFiV0psY2p0Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnWkdGMFlVSjVkR1ZNWlc1bmRHZzZJRzUxYldKbGNqdGNibHh1SUNBZ0lDQWdJQ0FnSUdsbUlDaGtZWFJoVkhsd1pTQTlQVDBnSjNOMGNtbHVaeWNnSmlZZ2JHOWpZWFJwYjI0Z1BUMDlJQ2RuY0hVdFluVm1abVZ5SnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RUZEhKcGJtY2dkR1Z1YzI5eUlHbHpJRzV2ZENCemRYQndiM0owWldRZ2IyNGdSMUJWTGljcE8xeHVJQ0FnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hzYjJOaGRHbHZiaUE5UFQwZ0oyZHdkUzFpZFdabVpYSW5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCbmNIVkNkV1ptWlhJZ1BTQjBaVzV6YjNKYk1sMHVaM0IxUW5WbVptVnlJR0Z6SUVkUVZVSjFabVpsY2p0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHVnNaVzFsYm5SVGFYcGxTVzVDZVhSbGN5QTlJR2RsZEZSbGJuTnZja1ZzWlcxbGJuUlRhWHBsS0hSbGJuTnZja1JoZEdGVWVYQmxVM1J5YVc1blZHOUZiblZ0S0dSaGRHRlVlWEJsS1NraE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlVSjVkR1ZNWlc1bmRHZ2dQU0JrYVcxekxuSmxaSFZqWlNnb1lTd2dZaWtnUFQ0Z1lTQXFJR0lzSURFcElDb2daV3hsYldWdWRGTnBlbVZKYmtKNWRHVnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtRjNSR0YwWVNBOUlIZGhjMjB1YW5ObGNGSmxaMmx6ZEdWeVFuVm1abVZ5S0hObGMzTnBiMjVKWkN3Z2FXNWtaWGdzSUdkd2RVSjFabVpsY2l3Z1pHRjBZVUo1ZEdWTVpXNW5kR2dwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQmtZWFJoSUQwZ2RHVnVjMjl5V3pKZE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNoa1lYUmhLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCemRISnBibWNnZEdWdWMyOXlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZDZVhSbFRHVnVaM1JvSUQwZ05DQXFJR1JoZEdFdWJHVnVaM1JvTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WVhkRVlYUmhJRDBnZDJGemJTNWZiV0ZzYkc5aktHUmhkR0ZDZVhSbFRHVnVaM1JvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWVd4c2IyTnpMbkIxYzJnb2NtRjNSR0YwWVNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmtZWFJoU1c1a1pYZ2dQU0J5WVhkRVlYUmhJQzhnTkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCa1lYUmhMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmtZWFJoVzJsZElDRTlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGdkR1Z1YzI5eUlHUmhkR0VnWVhRZ2FXNWtaWGdnSkh0cGZTQnBjeUJ1YjNRZ1lTQnpkSEpwYm1kZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMkZ6YlM1SVJVRlFWVE15VzJSaGRHRkpibVJsZUNzclhTQTlJR0ZzYkc5alYyRnpiVk4wY21sdVp5aGtZWFJoVzJsZExDQmhiR3h2WTNNcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmtZWFJoUW5sMFpVeGxibWQwYUNBOUlHUmhkR0V1WW5sMFpVeGxibWQwYUR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21GM1JHRjBZU0E5SUhkaGMyMHVYMjFoYkd4dll5aGtZWFJoUW5sMFpVeGxibWQwYUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdGc2JHOWpjeTV3ZFhOb0tISmhkMFJoZEdFcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCM1lYTnRMa2hGUVZCVk9DNXpaWFFvYm1WM0lGVnBiblE0UVhKeVlYa29aR0YwWVM1aWRXWm1aWElzSUdSaGRHRXVZbmwwWlU5bVpuTmxkQ3dnWkdGMFlVSjVkR1ZNWlc1bmRHZ3BMQ0J5WVhkRVlYUmhLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCemRHRmpheUE5SUhkaGMyMHVjM1JoWTJ0VFlYWmxLQ2s3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWkdsdGMwOW1abk5sZENBOUlIZGhjMjB1YzNSaFkydEJiR3h2WXlnMElDb2daR2x0Y3k1c1pXNW5kR2dwTzF4dUlDQWdJQ0FnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWkdsdFNXNWtaWGdnUFNCa2FXMXpUMlptYzJWMElDOGdORHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnBiWE11Wm05eVJXRmphQ2hrSUQwK0lIZGhjMjB1U0VWQlVETXlXMlJwYlVsdVpHVjRLeXRkSUQwZ1pDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IwWlc1emIzSWdQU0IzWVhOdExsOVBjblJEY21WaGRHVlVaVzV6YjNJb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHVnVjMjl5UkdGMFlWUjVjR1ZUZEhKcGJtZFViMFZ1ZFcwb1pHRjBZVlI1Y0dVcExDQnlZWGRFWVhSaExDQmtZWFJoUW5sMFpVeGxibWQwYUN3Z1pHbHRjMDltWm5ObGRDd2daR2x0Y3k1c1pXNW5kR2dzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlVeHZZMkYwYVc5dVUzUnlhVzVuVkc5RmJuVnRLR3h2WTJGMGFXOXVLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdWdWMyOXlJRDA5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTm9aV05yVEdGemRFVnljbTl5S0dCRFlXNG5kQ0JqY21WaGRHVWdkR1Z1YzI5eUlHWnZjaUJwYm5CMWRDOXZkWFJ3ZFhRdUlITmxjM05wYjI0OUpIdHpaWE56YVc5dVNXUjlMQ0JwYm1SbGVEMGtlMmx1WkdWNGZTNWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUhSbGJuTnZja2hoYm1Sc1pYTXVjSFZ6YUNoMFpXNXpiM0lwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdabWx1WVd4c2VTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCM1lYTnRMbk4wWVdOclVtVnpkRzl5WlNoemRHRmpheWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlPMXh1WEc0dktpcGNiaUFxSUhCbGNtWnZjbTBnYVc1bVpYSmxibU5sSUhKMWJseHVJQ292WEc1bGVIQnZjblFnWTI5dWMzUWdjblZ1SUQwZ1lYTjVibU1vWEc0Z0lDQWdjMlZ6YzJsdmJrbGtPaUJ1ZFcxaVpYSXNJR2x1Y0hWMFNXNWthV05sY3pvZ2JuVnRZbVZ5VzEwc0lHbHVjSFYwVkdWdWMyOXljem9nVkdWdWMyOXlUV1YwWVdSaGRHRmJYU3dnYjNWMGNIVjBTVzVrYVdObGN6b2diblZ0WW1WeVcxMHNYRzRnSUNBZ2IzVjBjSFYwVkdWdWMyOXljem9nUVhKeVlYazhWR1Z1YzI5eVRXVjBZV1JoZEdGOGJuVnNiRDRzSUc5d2RHbHZibk02SUVsdVptVnlaVzVqWlZObGMzTnBiMjR1VW5WdVQzQjBhVzl1Y3lrNklGQnliMjFwYzJVOFZHVnVjMjl5VFdWMFlXUmhkR0ZiWFQ0Z1BUNGdlMXh1SUNCamIyNXpkQ0IzWVhOdElEMGdaMlYwU1c1emRHRnVZMlVvS1R0Y2JpQWdZMjl1YzNRZ2MyVnpjMmx2YmlBOUlHRmpkR2wyWlZObGMzTnBiMjV6TG1kbGRDaHpaWE56YVc5dVNXUXBPMXh1SUNCcFppQW9JWE5sYzNOcGIyNHBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lHTmhibTV2ZENCeWRXNGdhVzVtWlhKbGJtTmxMaUJwYm5aaGJHbGtJSE5sYzNOcGIyNGdhV1E2SUNSN2MyVnpjMmx2Ymtsa2ZXQXBPMXh1SUNCOVhHNGdJR052Ym5OMElGdHpaWE56YVc5dVNHRnVaR3hsTENCcGJuQjFkRTVoYldWelZWUkdPRVZ1WTI5a1pXUXNJRzkxZEhCMWRFNWhiV1Z6VlZSR09FVnVZMjlrWldRc0lHbHZRbWx1WkdsdVoxTjBZWFJsWFNBOUlITmxjM05wYjI0N1hHNWNiaUFnWTI5dWMzUWdhVzV3ZFhSRGIzVnVkQ0E5SUdsdWNIVjBTVzVrYVdObGN5NXNaVzVuZEdnN1hHNGdJR052Ym5OMElHOTFkSEIxZEVOdmRXNTBJRDBnYjNWMGNIVjBTVzVrYVdObGN5NXNaVzVuZEdnN1hHNWNiaUFnYkdWMElISjFiazl3ZEdsdmJuTklZVzVrYkdVZ1BTQXdPMXh1SUNCc1pYUWdjblZ1VDNCMGFXOXVjMEZzYkc5amN6b2diblZ0WW1WeVcxMGdQU0JiWFR0Y2JseHVJQ0JqYjI1emRDQnBibkIxZEZSbGJuTnZja2hoYm1Sc1pYTTZJRzUxYldKbGNsdGRJRDBnVzEwN1hHNGdJR052Ym5OMElHOTFkSEIxZEZSbGJuTnZja2hoYm1Sc1pYTTZJRzUxYldKbGNsdGRJRDBnVzEwN1hHNGdJR052Ym5OMElHbHVjSFYwVDNWMGNIVjBRV3hzYjJOek9pQnVkVzFpWlhKYlhTQTlJRnRkTzF4dVhHNGdJR052Ym5OMElHSmxabTl5WlZKMWJsTjBZV05ySUQwZ2QyRnpiUzV6ZEdGamExTmhkbVVvS1R0Y2JpQWdZMjl1YzNRZ2FXNXdkWFJXWVd4MVpYTlBabVp6WlhRZ1BTQjNZWE50TG5OMFlXTnJRV3hzYjJNb2FXNXdkWFJEYjNWdWRDQXFJRFFwTzF4dUlDQmpiMjV6ZENCcGJuQjFkRTVoYldWelQyWm1jMlYwSUQwZ2QyRnpiUzV6ZEdGamEwRnNiRzlqS0dsdWNIVjBRMjkxYm5RZ0tpQTBLVHRjYmlBZ1kyOXVjM1FnYjNWMGNIVjBWbUZzZFdWelQyWm1jMlYwSUQwZ2QyRnpiUzV6ZEdGamEwRnNiRzlqS0c5MWRIQjFkRU52ZFc1MElDb2dOQ2s3WEc0Z0lHTnZibk4wSUc5MWRIQjFkRTVoYldWelQyWm1jMlYwSUQwZ2QyRnpiUzV6ZEdGamEwRnNiRzlqS0c5MWRIQjFkRU52ZFc1MElDb2dOQ2s3WEc1Y2JpQWdkSEo1SUh0Y2JpQWdJQ0JiY25WdVQzQjBhVzl1YzBoaGJtUnNaU3dnY25WdVQzQjBhVzl1YzBGc2JHOWpjMTBnUFNCelpYUlNkVzVQY0hScGIyNXpLRzl3ZEdsdmJuTXBPMXh1WEc0Z0lDQWdMeThnWTNKbFlYUmxJR2x1Y0hWMElIUmxibk52Y25OY2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUdsdWNIVjBRMjkxYm5RN0lHa3JLeWtnZTF4dUlDQWdJQ0FnY0hKbGNHRnlaVWx1Y0hWMFQzVjBjSFYwVkdWdWMyOXlLR2x1Y0hWMFZHVnVjMjl5YzF0cFhTd2dhVzV3ZFhSVVpXNXpiM0pJWVc1a2JHVnpMQ0JwYm5CMWRFOTFkSEIxZEVGc2JHOWpjeXdnYzJWemMybHZia2xrTENCcGJuQjFkRWx1WkdsalpYTmJhVjBwTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUdOeVpXRjBaU0J2ZFhSd2RYUWdkR1Z1YzI5eWMxeHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2IzVjBjSFYwUTI5MWJuUTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2NISmxjR0Z5WlVsdWNIVjBUM1YwY0hWMFZHVnVjMjl5S0Z4dUlDQWdJQ0FnSUNBZ0lHOTFkSEIxZEZSbGJuTnZjbk5iYVYwc0lHOTFkSEIxZEZSbGJuTnZja2hoYm1Sc1pYTXNJR2x1Y0hWMFQzVjBjSFYwUVd4c2IyTnpMQ0J6WlhOemFXOXVTV1FzSUdsdWNIVjBRMjkxYm5RZ0t5QnZkWFJ3ZFhSSmJtUnBZMlZ6VzJsZEtUdGNiaUFnSUNCOVhHNWNiaUFnSUNCc1pYUWdhVzV3ZFhSV1lXeDFaWE5KYm1SbGVDQTlJR2x1Y0hWMFZtRnNkV1Z6VDJabWMyVjBJQzhnTkR0Y2JpQWdJQ0JzWlhRZ2FXNXdkWFJPWVcxbGMwbHVaR1Y0SUQwZ2FXNXdkWFJPWVcxbGMwOW1abk5sZENBdklEUTdYRzRnSUNBZ2JHVjBJRzkxZEhCMWRGWmhiSFZsYzBsdVpHVjRJRDBnYjNWMGNIVjBWbUZzZFdWelQyWm1jMlYwSUM4Z05EdGNiaUFnSUNCc1pYUWdiM1YwY0hWMFRtRnRaWE5KYm1SbGVDQTlJRzkxZEhCMWRFNWhiV1Z6VDJabWMyVjBJQzhnTkR0Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUdsdWNIVjBRMjkxYm5RN0lHa3JLeWtnZTF4dUlDQWdJQ0FnZDJGemJTNUlSVUZRVlRNeVcybHVjSFYwVm1Gc2RXVnpTVzVrWlhncksxMGdQU0JwYm5CMWRGUmxibk52Y2toaGJtUnNaWE5iYVYwN1hHNGdJQ0FnSUNCM1lYTnRMa2hGUVZCVk16SmJhVzV3ZFhST1lXMWxjMGx1WkdWNEt5dGRJRDBnYVc1d2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa1cybHVjSFYwU1c1a2FXTmxjMXRwWFYwN1hHNGdJQ0FnZlZ4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYjNWMGNIVjBRMjkxYm5RN0lHa3JLeWtnZTF4dUlDQWdJQ0FnZDJGemJTNUlSVUZRVlRNeVcyOTFkSEIxZEZaaGJIVmxjMGx1WkdWNEt5dGRJRDBnYjNWMGNIVjBWR1Z1YzI5eVNHRnVaR3hsYzF0cFhUdGNiaUFnSUNBZ0lIZGhjMjB1U0VWQlVGVXpNbHR2ZFhSd2RYUk9ZVzFsYzBsdVpHVjRLeXRkSUQwZ2IzVjBjSFYwVG1GdFpYTlZWRVk0Ulc1amIyUmxaRnR2ZFhSd2RYUkpibVJwWTJWelcybGRYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvSVVKVlNVeEVYMFJGUmxNdVJFbFRRVUpNUlY5WFJVSkhVRlVnSmlZZ2FXOUNhVzVrYVc1blUzUmhkR1VwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJSHRvWVc1a2JHVXNJRzkxZEhCMWRGQnlaV1psY25KbFpFeHZZMkYwYVc5dWN5d2diM1YwY0hWMFVISmxabVZ5Y21Wa1RHOWpZWFJwYjI1elJXNWpiMlJsWkgwZ1BTQnBiMEpwYm1ScGJtZFRkR0YwWlR0Y2JseHVJQ0FnSUNBZ2FXWWdLR2x1Y0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkM1c1pXNW5kR2dnSVQwOUlHbHVjSFYwUTI5MWJuUXBJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLR0JwYm5CMWRDQmpiM1Z1ZENCbWNtOXRJR1psWldSeklDZ2tlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXNXdkWFJEYjNWdWRIMHBJR2x6SUdWNGNHVmpkR1ZrSUhSdklHSmxJR0ZzZDJGNWN5QmxjWFZoYkNCMGJ5QnRiMlJsYkNkeklHbHVjSFYwSUdOdmRXNTBJQ2drZTJsdWNIVjBUbUZ0WlhOVlZFWTRSVzVqYjJSbFpDNXNaVzVuZEdoOUtTNWdLVHRjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnTHk4Z2NISnZZMlZ6Y3lCcGJuQjFkSE5jYmlBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYVc1d2RYUkRiM1Z1ZERzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2x1WkdWNElEMGdhVzV3ZFhSSmJtUnBZMlZ6VzJsZE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCbGNuSnZja052WkdVZ1BTQmhkMkZwZENCM1lYTnRMbDlQY25SQ2FXNWtTVzV3ZFhRb2FHRnVaR3hsTENCcGJuQjFkRTVoYldWelZWUkdPRVZ1WTI5a1pXUmJhVzVrWlhoZExDQnBibkIxZEZSbGJuTnZja2hoYm1Sc1pYTmJhVjBwTzF4dUlDQWdJQ0FnSUNCcFppQW9aWEp5YjNKRGIyUmxJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9ZRU5oYmlkMElHSnBibVFnYVc1d2RYUmJKSHRwZlYwZ1ptOXlJSE5sYzNOcGIyNDlKSHR6WlhOemFXOXVTV1I5TG1BcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2SUhCeWIyTmxjM01nY0hKbExXRnNiRzlqWVhSbFpDQnZkWFJ3ZFhSelhHNGdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHOTFkSEIxZEVOdmRXNTBPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2FXNWtaWGdnUFNCdmRYUndkWFJKYm1ScFkyVnpXMmxkTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JzYjJOaGRHbHZiaUE5SUc5MWRIQjFkRlJsYm5OdmNuTmJhVjAvTGxzelhUc2dJQzh2SUhWdVpHVm1hVzVsWkNCdFpXRnVjeUJ2ZFhSd2RYUWdhWE1nYm05MElIQnlaUzFoYkd4dlkyRjBaV1F1WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR3h2WTJGMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdiM1YwY0hWMElHbHpJSEJ5WlMxaGJHeHZZMkYwWldRdUlHSnBibVFnZEdobElIUmxibk52Y2k1Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCbGNuSnZja052WkdVZ1BTQjNZWE50TGw5UGNuUkNhVzVrVDNWMGNIVjBLR2hoYm1Sc1pTd2diM1YwY0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkZ0cGJtUmxlRjBzSUc5MWRIQjFkRlJsYm5OdmNraGhibVJzWlhOYmFWMHNJREFwTzF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hsY25KdmNrTnZaR1VnSVQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9aV05yVEdGemRFVnljbTl5S0dCRFlXNG5kQ0JpYVc1a0lIQnlaUzFoYkd4dlkyRjBaV1FnYjNWMGNIVjBXeVI3YVgxZElHWnZjaUJ6WlhOemFXOXVQU1I3YzJWemMybHZia2xrZlM1Z0tUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdiM1YwY0hWMElHbHpJRzV2ZENCd2NtVXRZV3hzYjJOaGRHVmtMaUJ5WlhObGRDQndjbVZtWlhKeVpXUWdiRzlqWVhScGIyNHVYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdaWEp5YjNKRGIyUmxJRDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkMkZ6YlM1ZlQzSjBRbWx1WkU5MWRIQjFkQ2hvWVc1a2JHVXNJRzkxZEhCMWRFNWhiV1Z6VlZSR09FVnVZMjlrWldSYmFXNWtaWGhkTENBd0xDQnZkWFJ3ZFhSUWNtVm1aWEp5WldSTWIyTmhkR2x2Ym5ORmJtTnZaR1ZrVzJsdVpHVjRYU2s3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR1Z5Y205eVEyOWtaU0FoUFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvWUVOaGJpZDBJR0pwYm1RZ2IzVjBjSFYwV3lSN2FYMWRJSFJ2SUNSN2IzVjBjSFYwVUhKbFptVnljbVZrVEc5allYUnBiMjV6VzJsZGZTQm1iM0lnYzJWemMybHZiajBrZTNObGMzTnBiMjVKWkgwdVlDazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYkdWMElHVnljbTl5UTI5a1pUb2diblZ0WW1WeU8xeHVYRzRnSUNBZ2FXWWdLQ0ZDVlVsTVJGOUVSVVpUTGtSSlUwRkNURVZmVjBWQ1IxQlZJQ1ltSUdsdlFtbHVaR2x1WjFOMFlYUmxLU0I3WEc0Z0lDQWdJQ0JsY25KdmNrTnZaR1VnUFNCaGQyRnBkQ0IzWVhOdExsOVBjblJTZFc1WGFYUm9RbWx1WkdsdVp5aGNiaUFnSUNBZ0lDQWdJQ0J6WlhOemFXOXVTR0Z1Wkd4bExDQnBiMEpwYm1ScGJtZFRkR0YwWlM1b1lXNWtiR1VzSUc5MWRIQjFkRU52ZFc1MExDQnZkWFJ3ZFhSV1lXeDFaWE5QWm1aelpYUXNJSEoxYms5d2RHbHZibk5JWVc1a2JHVXBPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCbGNuSnZja052WkdVZ1BTQmhkMkZwZENCM1lYTnRMbDlQY25SU2RXNG9YRzRnSUNBZ0lDQWdJQ0FnYzJWemMybHZia2hoYm1Sc1pTd2dhVzV3ZFhST1lXMWxjMDltWm5ObGRDd2dhVzV3ZFhSV1lXeDFaWE5QWm1aelpYUXNJR2x1Y0hWMFEyOTFiblFzSUc5MWRIQjFkRTVoYldWelQyWm1jMlYwTENCdmRYUndkWFJEYjNWdWRDeGNiaUFnSUNBZ0lDQWdJQ0J2ZFhSd2RYUldZV3gxWlhOUFptWnpaWFFzSUhKMWJrOXdkR2x2Ym5OSVlXNWtiR1VwTzF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNobGNuSnZja052WkdVZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUdOb1pXTnJUR0Z6ZEVWeWNtOXlLQ2RtWVdsc1pXUWdkRzhnWTJGc2JDQlBjblJTZFc0b0tTNG5LVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQmpiMjV6ZENCdmRYUndkWFE2SUZSbGJuTnZjazFsZEdGa1lYUmhXMTBnUFNCYlhUdGNibHh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2diM1YwY0hWMFEyOTFiblE3SUdrckt5a2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2RHVnVjMjl5SUQwZ2QyRnpiUzVJUlVGUVZUTXlXMjkxZEhCMWRGWmhiSFZsYzA5bVpuTmxkQ0F2SURRZ0t5QnBYVHRjYmlBZ0lDQWdJR2xtSUNoMFpXNXpiM0lnUFQwOUlHOTFkSEIxZEZSbGJuTnZja2hoYm1Sc1pYTmJhVjBwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdiM1YwY0hWMElIUmxibk52Y2lCcGN5QndjbVV0WVd4c2IyTmhkR1ZrTGlCdWJ5QnVaV1ZrSUhSdklHTnZjSGtnWkdGMFlTNWNiaUFnSUNBZ0lDQWdiM1YwY0hWMExuQjFjMmdvYjNWMGNIVjBWR1Z1YzI5eWMxdHBYU0VwTzF4dUlDQWdJQ0FnSUNCamIyNTBhVzUxWlR0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ1kyOXVjM1FnWW1WbWIzSmxSMlYwVkdWdWMyOXlSR0YwWVZOMFlXTnJJRDBnZDJGemJTNXpkR0ZqYTFOaGRtVW9LVHRjYmlBZ0lDQWdJQzh2SUhOMFlXTnJJR0ZzYkc5allYUmxJRFFnY0c5cGJuUmxjaUIyWVd4MVpWeHVJQ0FnSUNBZ1kyOXVjM1FnZEdWdWMyOXlSR0YwWVU5bVpuTmxkQ0E5SUhkaGMyMHVjM1JoWTJ0QmJHeHZZeWcwSUNvZ05DazdYRzVjYmlBZ0lDQWdJR3hsZENCclpXVndUM1YwY0hWMFZHVnVjMjl5SUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0JzWlhRZ2RIbHdaVG9nVkdWdWMyOXlMbFI1Y0dWOGRXNWtaV1pwYm1Wa0xDQmtZWFJoVDJabWMyVjBJRDBnTUR0Y2JpQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHVnljbTl5UTI5a1pTQTlJSGRoYzIwdVgwOXlkRWRsZEZSbGJuTnZja1JoZEdFb1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwWlc1emIzSXNJSFJsYm5OdmNrUmhkR0ZQWm1aelpYUXNJSFJsYm5OdmNrUmhkR0ZQWm1aelpYUWdLeUEwTENCMFpXNXpiM0pFWVhSaFQyWm1jMlYwSUNzZ09Dd2dkR1Z1YzI5eVJHRjBZVTltWm5ObGRDQXJJREV5S1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1Z5Y205eVEyOWtaU0FoUFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUdOb1pXTnJUR0Z6ZEVWeWNtOXlLR0JEWVc0bmRDQmhZMk5sYzNNZ2IzVjBjSFYwSUhSbGJuTnZjaUJrWVhSaElHOXVJR2x1WkdWNElDUjdhWDB1WUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdiR1YwSUhSbGJuTnZja1JoZEdGSmJtUmxlQ0E5SUhSbGJuTnZja1JoZEdGUFptWnpaWFFnTHlBME8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCa1lYUmhWSGx3WlNBOUlIZGhjMjB1U0VWQlVGVXpNbHQwWlc1emIzSkVZWFJoU1c1a1pYZ3JLMTA3WEc0Z0lDQWdJQ0FnSUdSaGRHRlBabVp6WlhRZ1BTQjNZWE50TGtoRlFWQlZNekpiZEdWdWMyOXlSR0YwWVVsdVpHVjRLeXRkTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JrYVcxelQyWm1jMlYwSUQwZ2QyRnpiUzVJUlVGUVZUTXlXM1JsYm5OdmNrUmhkR0ZKYm1SbGVDc3JYVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaR2x0YzB4bGJtZDBhQ0E5SUhkaGMyMHVTRVZCVUZVek1sdDBaVzV6YjNKRVlYUmhTVzVrWlhncksxMDdYRzRnSUNBZ0lDQWdJR052Ym5OMElHUnBiWE1nUFNCYlhUdGNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JrYVcxelRHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnSUNCa2FXMXpMbkIxYzJnb2QyRnpiUzVJUlVGUVZUTXlXMlJwYlhOUFptWnpaWFFnTHlBMElDc2dhVjBwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIZGhjMjB1WDA5eWRFWnlaV1VvWkdsdGMwOW1abk5sZENrN1hHNWNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2MybDZaU0E5SUdScGJYTXVjbVZrZFdObEtDaGhMQ0JpS1NBOVBpQmhJQ29nWWl3Z01TazdYRzRnSUNBZ0lDQWdJSFI1Y0dVZ1BTQjBaVzV6YjNKRVlYUmhWSGx3WlVWdWRXMVViMU4wY21sdVp5aGtZWFJoVkhsd1pTazdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjSEpsWm1WeWNtVmtURzlqWVhScGIyNGdQU0JwYjBKcGJtUnBibWRUZEdGMFpUOHViM1YwY0hWMFVISmxabVZ5Y21Wa1RHOWpZWFJwYjI1elcyOTFkSEIxZEVsdVpHbGpaWE5iYVYxZE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNod2NtVm1aWEp5WldSTWIyTmhkR2x2YmlBOVBUMGdKMmR3ZFMxaWRXWm1aWEluS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMU4wY21sdVp5QjBaVzV6YjNJZ2FYTWdibTkwSUhOMWNIQnZjblJsWkNCdmJpQkhVRlV1SnlrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSE4wY21sdVowUmhkR0U2SUhOMGNtbHVaMXRkSUQwZ1cxMDdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHUmhkR0ZKYm1SbGVDQTlJR1JoZEdGUFptWnpaWFFnTHlBME8xeHVJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYzJsNlpUc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnZabVp6WlhRZ1BTQjNZWE50TGtoRlFWQlZNekpiWkdGMFlVbHVaR1Y0S3l0ZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiV0Y0UW5sMFpYTlViMUpsWVdRZ1BTQnBJRDA5UFNCemFYcGxJQzBnTVNBL0lIVnVaR1ZtYVc1bFpDQTZJSGRoYzIwdVNFVkJVRlV6TWx0a1lYUmhTVzVrWlhoZElDMGdiMlptYzJWME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSeWFXNW5SR0YwWVM1d2RYTm9LSGRoYzIwdVZWUkdPRlJ2VTNSeWFXNW5LRzltWm5ObGRDd2diV0Y0UW5sMFpYTlViMUpsWVdRcEtUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2IzVjBjSFYwTG5CMWMyZ29XM1I1Y0dVc0lHUnBiWE1zSUhOMGNtbHVaMFJoZEdFc0lDZGpjSFVuWFNrN1hHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnU1dZZ1lTQmpaWEowWVdsdUlHOTFkSEIxZENkeklIQnlaV1psY25KbFpDQnNiMk5oZEdsdmJpQnBjeUJIVUZVZ1luVjBJSFJvWlNCMFpXNXpiM0lnYVhNZ1pXMXdkSGtzSUhkbElITjBhV3hzSUc1bFpXUWdkRzhnWTNKbFlYUmxJR0VnUTFCVlhHNGdJQ0FnSUNBZ0lDQWdMeThnZEdWdWMyOXlJR1p2Y2lCcGRDNGdWR2hsY21VZ2FYTWdibThnYldGd2NHbHVaeUJIVUZVZ1luVm1abVZ5SUdadmNpQmhiaUJsYlhCMGVTQjBaVzV6YjNJdVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hCeVpXWmxjbkpsWkV4dlkyRjBhVzl1SUQwOVBTQW5aM0IxTFdKMVptWmxjaWNnSmlZZ2MybDZaU0ErSURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR2R3ZFVKMVptWmxjaUE5SUhkaGMyMHVhbk5sY0VkbGRFSjFabVpsY2loa1lYUmhUMlptYzJWMEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1ZzWlcxbGJuUlRhWHBsSUQwZ1oyVjBWR1Z1YzI5eVJXeGxiV1Z1ZEZOcGVtVW9aR0YwWVZSNWNHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1ZzWlcxbGJuUlRhWHBsSUQwOVBTQjFibVJsWm1sdVpXUWdmSHdnSVdselIzQjFRblZtWm1WeVUzVndjRzl5ZEdWa1ZIbHdaU2gwZVhCbEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lGVnVjM1Z3Y0c5eWRHVmtJR1JoZEdFZ2RIbHdaVG9nSkh0MGVYQmxmV0FwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJrYnlCdWIzUWdjbVZzWldGelpTQjBhR1VnZEdWdWMyOXlJSEpwWjJoMElHNXZkeTRnYVhRZ2QybHNiQ0JpWlNCeVpXeGxZWE5sWkNCM2FHVnVJSFZ6WlhJZ1kyRnNiSE1nZEdWdWMyOXlMbVJwYzNCdmMyVW9LUzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHdGxaWEJQZFhSd2RYUlVaVzV6YjNJZ1BTQjBjblZsTzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2ZFhSd2RYUXVjSFZ6YUNoYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVXNJR1JwYlhNc0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5jSFZDZFdabVpYSXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaRzkzYm14dllXUTZJSGRoYzIwdWFuTmxjRU55WldGMFpVUnZkMjVzYjJGa1pYSW9aM0IxUW5WbVptVnlMQ0J6YVhwbElDb2daV3hsYldWdWRGTnBlbVVzSUhSNWNHVXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JwYzNCdmMyVTZJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRoYzIwdVgwOXlkRkpsYkdWaGMyVlVaVzV6YjNJb2RHVnVjMjl5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNkbmNIVXRZblZtWm1WeUoxeHVJQ0FnSUNBZ0lDQWdJQ0FnWFNrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSFI1Y0dWa1FYSnlZWGxEYjI1emRISjFZM1J2Y2lBOUlIUmxibk52Y2xSNWNHVlViMVI1Y0dWa1FYSnlZWGxEYjI1emRISjFZM1J2Y2loMGVYQmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdSaGRHRWdQU0J1WlhjZ2RIbHdaV1JCY25KaGVVTnZibk4wY25WamRHOXlLSE5wZW1VcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1WM0lGVnBiblE0UVhKeVlYa29aR0YwWVM1aWRXWm1aWElzSUdSaGRHRXVZbmwwWlU5bVpuTmxkQ3dnWkdGMFlTNWllWFJsVEdWdVozUm9LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzV6WlhRb2QyRnpiUzVJUlVGUVZUZ3VjM1ZpWVhKeVlYa29aR0YwWVU5bVpuTmxkQ3dnWkdGMFlVOW1abk5sZENBcklHUmhkR0V1WW5sMFpVeGxibWQwYUNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYjNWMGNIVjBMbkIxYzJnb1czUjVjR1VzSUdScGJYTXNJR1JoZEdFc0lDZGpjSFVuWFNrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5SUdacGJtRnNiSGtnZTF4dUlDQWdJQ0FnSUNCM1lYTnRMbk4wWVdOclVtVnpkRzl5WlNoaVpXWnZjbVZIWlhSVVpXNXpiM0pFWVhSaFUzUmhZMnNwTzF4dUlDQWdJQ0FnSUNCcFppQW9kSGx3WlNBOVBUMGdKM04wY21sdVp5Y2dKaVlnWkdGMFlVOW1abk5sZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJSGRoYzIwdVgyWnlaV1VvWkdGMFlVOW1abk5sZENrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0NGclpXVndUM1YwY0hWMFZHVnVjMjl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdkMkZ6YlM1ZlQzSjBVbVZzWldGelpWUmxibk52Y2loMFpXNXpiM0lwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHbHZRbWx1WkdsdVoxTjBZWFJsS1NCN1hHNGdJQ0FnSUNCM1lYTnRMbDlQY25SRGJHVmhja0p2ZFc1a1QzVjBjSFYwY3locGIwSnBibVJwYm1kVGRHRjBaUzVvWVc1a2JHVXBPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCdmRYUndkWFE3WEc0Z0lIMGdabWx1WVd4c2VTQjdYRzRnSUNBZ2QyRnpiUzV6ZEdGamExSmxjM1J2Y21Vb1ltVm1iM0psVW5WdVUzUmhZMnNwTzF4dVhHNGdJQ0FnYVc1d2RYUlVaVzV6YjNKSVlXNWtiR1Z6TG1admNrVmhZMmdvZGlBOVBpQjNZWE50TGw5UGNuUlNaV3hsWVhObFZHVnVjMjl5S0hZcEtUdGNiaUFnSUNCdmRYUndkWFJVWlc1emIzSklZVzVrYkdWekxtWnZja1ZoWTJnb2RpQTlQaUIzWVhOdExsOVBjblJTWld4bFlYTmxWR1Z1YzI5eUtIWXBLVHRjYmlBZ0lDQnBibkIxZEU5MWRIQjFkRUZzYkc5amN5NW1iM0pGWVdOb0tIQWdQVDRnZDJGemJTNWZabkpsWlNod0tTazdYRzVjYmlBZ0lDQnBaaUFvY25WdVQzQjBhVzl1YzBoaGJtUnNaU0FoUFQwZ01Da2dlMXh1SUNBZ0lDQWdkMkZ6YlM1ZlQzSjBVbVZzWldGelpWSjFiazl3ZEdsdmJuTW9jblZ1VDNCMGFXOXVjMGhoYm1Sc1pTazdYRzRnSUNBZ2ZWeHVJQ0FnSUhKMWJrOXdkR2x2Ym5OQmJHeHZZM011Wm05eVJXRmphQ2h3SUQwK0lIZGhjMjB1WDJaeVpXVW9jQ2twTzF4dUlDQjlYRzU5TzF4dVhHNHZLaXBjYmlBcUlHVnVaQ0J3Y205bWFXeHBibWRjYmlBcUwxeHVaWGh3YjNKMElHTnZibk4wSUdWdVpGQnliMlpwYkdsdVp5QTlJQ2h6WlhOemFXOXVTV1E2SUc1MWJXSmxjaWs2SUhadmFXUWdQVDRnZTF4dUlDQmpiMjV6ZENCM1lYTnRJRDBnWjJWMFNXNXpkR0Z1WTJVb0tUdGNiaUFnWTI5dWMzUWdjMlZ6YzJsdmJpQTlJR0ZqZEdsMlpWTmxjM05wYjI1ekxtZGxkQ2h6WlhOemFXOXVTV1FwTzF4dUlDQnBaaUFvSVhObGMzTnBiMjRwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMmx1ZG1Gc2FXUWdjMlZ6YzJsdmJpQnBaQ2NwTzF4dUlDQjlYRzRnSUdOdmJuTjBJSE5sYzNOcGIyNUlZVzVrYkdVZ1BTQnpaWE56YVc5dVd6QmRPMXh1WEc0Z0lDOHZJSEJ5YjJacGJHVWdabWxzWlNCdVlXMWxJR2x6SUc1dmRDQjFjMlZrSUhsbGRDd2dZblYwSUdsMElHMTFjM1FnWW1VZ1puSmxaV1F1WEc0Z0lHTnZibk4wSUhCeWIyWnBiR1ZHYVd4bFRtRnRaU0E5SUhkaGMyMHVYMDl5ZEVWdVpGQnliMlpwYkdsdVp5aHpaWE56YVc5dVNHRnVaR3hsS1R0Y2JpQWdhV1lnS0hCeWIyWnBiR1ZHYVd4bFRtRnRaU0E5UFQwZ01Da2dlMXh1SUNBZ0lHTm9aV05yVEdGemRFVnljbTl5S0NkRFlXNWNYQ2QwSUdkbGRDQmhiaUJ3Y205bWFXeGxJR1pwYkdVZ2JtRnRaUzRuS1R0Y2JpQWdmVnh1SUNCM1lYTnRMbDlQY25SR2NtVmxLSEJ5YjJacGJHVkdhV3hsVG1GdFpTazdYRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnWlhoMGNtRmpkRlJ5WVc1elptVnlZV0pzWlVKMVptWmxjbk1nUFNBb2RHVnVjMjl5Y3pvZ2NtVmhaRzl1YkhrZ1UyVnlhV0ZzYVhwaFlteGxWR1Z1YzI5eVRXVjBZV1JoZEdGYlhTazZJRUZ5Y21GNVFuVm1abVZ5VEdsclpWdGRJRDArSUh0Y2JpQWdZMjl1YzNRZ1luVm1abVZ5Y3pvZ1FYSnlZWGxDZFdabVpYSk1hV3RsVzEwZ1BTQmJYVHRjYmlBZ1ptOXlJQ2hqYjI1emRDQjBaVzV6YjNJZ2IyWWdkR1Z1YzI5eWN5a2dlMXh1SUNBZ0lHTnZibk4wSUdSaGRHRWdQU0IwWlc1emIzSmJNbDA3WEc0Z0lDQWdhV1lnS0NGQmNuSmhlUzVwYzBGeWNtRjVLR1JoZEdFcElDWW1JQ2RpZFdabVpYSW5JR2x1SUdSaGRHRXBJSHRjYmlBZ0lDQWdJR0oxWm1abGNuTXVjSFZ6YUNoa1lYUmhMbUoxWm1abGNpazdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCaWRXWm1aWEp6TzF4dWZUdGNiaUlzSUNJdkx5QkRiM0I1Y21sbmFIUWdLR01wSUUxcFkzSnZjMjltZENCRGIzSndiM0poZEdsdmJpNGdRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmk4dklFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQk5TVlFnVEdsalpXNXpaUzVjYmx4dUx5OHZJRHh5WldabGNtVnVZMlVnYkdsaVBWd2lkMlZpZDI5eWEyVnlYQ0lnTHo1Y2JseHVMeTljYmk4dklDb2dkSGx3WlNCb1lXTnJJR1p2Y2lCY0lraFVUVXhKYldGblpVVnNaVzFsYm5SY0lseHVMeTljYmk4dklHbHVJSFI1Y0dWelkzSnBjSFFzSUhSb1pTQjBlWEJsSUc5bUlGd2lTRlJOVEVsdFlXZGxSV3hsYldWdWRGd2lJR2x6SUdSbFptbHVaV1FnYVc0Z2JHbGlMbVJ2YlM1a0xuUnpMQ0IzYUdsamFDQnBjeUJqYjI1bWJHbGpkQ0IzYVhSb0lHeHBZaTUzWldKM2IzSnJaWEl1WkM1MGN5NWNiaTh2SUhkb1pXNGdkMlVnZFhObElIZGxZbmR2Y210bGNpd2dkR2hsSUd4cFlpNTNaV0ozYjNKclpYSXVaQzUwY3lCM2FXeHNJR0psSUhWelpXUXNJSGRvYVdOb0lHUnZaWE1nYm05MElHaGhkbVVnU0ZSTlRFbHRZV2RsUld4bGJXVnVkQ0JrWldacGJtVmtMbHh1THk5Y2JpOHZJSGRsSUhkcGJHd2daMlYwSUhSb1pTQm1iMnhzYjNkcGJtY2daWEp5YjNKeklHTnZiWEJzWVdsdWFXNW5JSFJvWVhRZ1NGUk5URWx0WVdkbFJXeGxiV1Z1ZENCcGN5QnViM1FnWkdWbWFXNWxaRHBjYmk4dlhHNHZMeUE5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVnh1THk5Y2JpOHZJQzR1TDJOdmJXMXZiaTlrYVhOMEwyTnFjeTkwWlc1emIzSXRabUZqZEc5eWVTNWtMblJ6T2pFNE56b3lPU0F0SUdWeWNtOXlJRlJUTWpVMU1qb2dRMkZ1Ym05MElHWnBibVFnYm1GdFpTQW5TRlJOVEVsdFlXZGxSV3hsYldWdWRDY3VJRVJwWkNCNWIzVWdiV1ZoYmx4dUx5OGdKMGhVVFV4TVNVVnNaVzFsYm5RblAxeHVMeTljYmk4dklERTROeUFnSUNBZ1puSnZiVWx0WVdkbEtHbHRZV2RsUld4bGJXVnVkRG9nU0ZSTlRFbHRZV2RsUld4bGJXVnVkQ3dnYjNCMGFXOXVjejg2SUZSbGJuTnZja1p5YjIxSmJXRm5aVVZzWlcxbGJuUlBjSFJwYjI1ektUcGNiaTh2SUZCeWIyMXBjMlU4Vkhsd1pXUlVaVzV6YjNJOEoyWnNiMkYwTXpJblBpQjhJRlI1Y0dWa1ZHVnVjMjl5UENkMWFXNTBPQ2MrUGp0Y2JpOHZJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZuNStmbjUrZm41K2ZuNStmbjUrZmx4dUx5OWNiaTh2SUc1dlpHVmZiVzlrZFd4bGN5OUFkMlZpWjNCMUwzUjVjR1Z6TDJScGMzUXZhVzVrWlhndVpDNTBjem80TXpvM0lDMGdaWEp5YjNJZ1ZGTXlOVFV5T2lCRFlXNXViM1FnWm1sdVpDQnVZVzFsSUNkSVZFMU1TVzFoWjJWRmJHVnRaVzUwSnk0Z1JHbGtJSGx2ZFNCdFpXRnVYRzR2THlBblNGUk5URXhKUld4bGJXVnVkQ2MvWEc0dkwxeHVMeThnT0RNZ0lDQWdJSHdnU0ZSTlRFbHRZV2RsUld4bGJXVnVkRnh1THk4Z0lDQWdJQ0FnSUNBZ2ZuNStmbjUrZm41K2ZuNStmbjUrZmx4dUx5OWNiaTh2SUQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5WEc0dkwxeHVMeThnWUVoVVRVeEpiV0ZuWlVWc1pXMWxiblJnSUdseklHOXViSGtnZFhObFpDQnBiaUIwZVhCbElHUmxZMnhoY21GMGFXOXVJR0Z1WkNCdWIzUWdhVzRnY21WaGJDQmpiMlJsTGlCVGJ5QjNaU0JrWldacGJtVWdhWFFnWVhNZ1lIVnVhMjV2ZDI1Z0lHaGxjbVVnZEc5Y2JpOHZJR0o1Y0dGemN5QjBhR1VnZEhsd1pTQmphR1ZqYXk1Y2JpOHZYRzVrWldOc1lYSmxJR2RzYjJKaGJDQjdYRzRnSUhSNWNHVWdTRlJOVEVsdFlXZGxSV3hsYldWdWRDQTlJSFZ1YTI1dmQyNDdYRzU5WEc1Y2JtbHRjRzl5ZENCN1QzSjBWMkZ6YlUxbGMzTmhaMlVzSUZObGNtbGhiR2w2WVdKc1pWUmxibk52Y2sxbGRHRmtZWFJoZlNCbWNtOXRJQ2N1TGk5d2NtOTRlUzF0WlhOellXZGxjeWM3WEc1cGJYQnZjblFnZTJOeVpXRjBaVk5sYzNOcGIyNHNJR052Y0hsR2NtOXRSWGgwWlhKdVlXeENkV1ptWlhJc0lHVnVaRkJ5YjJacGJHbHVaeXdnWlhoMGNtRmpkRlJ5WVc1elptVnlZV0pzWlVKMVptWmxjbk1zSUdsdWFYUkZjQ3dnYVc1cGRGSjFiblJwYldVc0lISmxiR1ZoYzJWVFpYTnphVzl1TENCeWRXNTlJR1p5YjIwZ0p5NHVMM2RoYzIwdFkyOXlaUzFwYlhCc0p6dGNibWx0Y0c5eWRDQjdhVzVwZEdsaGJHbDZaVmRsWWtGemMyVnRZbXg1ZlNCbWNtOXRJQ2N1TGk5M1lYTnRMV1poWTNSdmNua25PMXh1WEc1elpXeG1MbTl1YldWemMyRm5aU0E5SUNobGRqb2dUV1Z6YzJGblpVVjJaVzUwUEU5eWRGZGhjMjFOWlhOellXZGxQaWs2SUhadmFXUWdQVDRnZTF4dUlDQmpiMjV6ZENCN2RIbHdaU3dnYVc0Z09pQnRaWE56WVdkbGZTQTlJR1YyTG1SaGRHRTdYRzRnSUhSeWVTQjdYRzRnSUNBZ2MzZHBkR05vSUNoMGVYQmxLU0I3WEc0Z0lDQWdJQ0JqWVhObElDZHBibWwwTFhkaGMyMG5PbHh1SUNBZ0lDQWdJQ0JwYm1sMGFXRnNhWHBsVjJWaVFYTnpaVzFpYkhrb2JXVnpjMkZuWlNFdWQyRnpiU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDNTBhR1Z1S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsdWFYUlNkVzUwYVcxbEtHMWxjM05oWjJVaEtTNTBhR1Z1S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnZjM1JOWlhOellXZGxLSHQwZVhCbGZTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGNuSWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0c5emRFMWxjM05oWjJVb2UzUjVjR1VzSUdWeWNuMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhKeUlEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmMzUk5aWE56WVdkbEtIdDBlWEJsTENCbGNuSjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0JqWVhObElDZHBibWwwTFdWd0p6b2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdaWEJPWVcxbExDQmxiblo5SUQwZ2JXVnpjMkZuWlNFN1hHNGdJQ0FnSUNBZ0lHbHVhWFJGY0NobGJuWXNJR1Z3VG1GdFpTbGNiaUFnSUNBZ0lDQWdJQ0FnSUM1MGFHVnVLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ2YzNSTlpYTnpZV2RsS0h0MGVYQmxmU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGNuSWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHOXpkRTFsYzNOaFoyVW9lM1I1Y0dVc0lHVnljbjBwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdOaGMyVWdKMk52Y0hrdFpuSnZiU2M2SUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZTJKMVptWmxjbjBnUFNCdFpYTnpZV2RsSVR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWW5WbVptVnlSR0YwWVNBOUlHTnZjSGxHY205dFJYaDBaWEp1WVd4Q2RXWm1aWElvWW5WbVptVnlLVHRjYmlBZ0lDQWdJQ0FnY0c5emRFMWxjM05oWjJVb2UzUjVjR1VzSUc5MWREb2dZblZtWm1WeVJHRjBZWDBnWVhNZ1QzSjBWMkZ6YlUxbGMzTmhaMlVwTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR05oYzJVZ0oyTnlaV0YwWlNjNklIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2UyMXZaR1ZzTENCdmNIUnBiMjV6ZlNBOUlHMWxjM05oWjJVaE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCelpYTnphVzl1VFdWMFlXUmhkR0VnUFNCamNtVmhkR1ZUWlhOemFXOXVLRzF2WkdWc0xDQnZjSFJwYjI1ektUdGNiaUFnSUNBZ0lDQWdjRzl6ZEUxbGMzTmhaMlVvZTNSNWNHVXNJRzkxZERvZ2MyVnpjMmx2YmsxbGRHRmtZWFJoZlNCaGN5QlBjblJYWVhOdFRXVnpjMkZuWlNrN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWTJGelpTQW5jbVZzWldGelpTYzZYRzRnSUNBZ0lDQWdJSEpsYkdWaGMyVlRaWE56YVc5dUtHMWxjM05oWjJVaEtUdGNiaUFnSUNBZ0lDQWdjRzl6ZEUxbGMzTmhaMlVvZTNSNWNHVjlLVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQmpZWE5sSUNkeWRXNG5PaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSHR6WlhOemFXOXVTV1FzSUdsdWNIVjBTVzVrYVdObGN5d2dhVzV3ZFhSekxDQnZkWFJ3ZFhSSmJtUnBZMlZ6TENCdmNIUnBiMjV6ZlNBOUlHMWxjM05oWjJVaE8xeHVJQ0FnSUNBZ0lDQnlkVzRvYzJWemMybHZia2xrTENCcGJuQjFkRWx1WkdsalpYTXNJR2x1Y0hWMGN5d2diM1YwY0hWMFNXNWthV05sY3l3Z2JtVjNJRUZ5Y21GNUtHOTFkSEIxZEVsdVpHbGpaWE11YkdWdVozUm9LUzVtYVd4c0tHNTFiR3dwTENCdmNIUnBiMjV6S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdMblJvWlc0b1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzVjBjSFYwY3lBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2IzVjBjSFYwY3k1emIyMWxLRzhnUFQ0Z2Ixc3pYU0FoUFQwZ0oyTndkU2NwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ2YzNSTlpYTnpZV2RsS0h0MGVYQmxMQ0JsY25JNklDZFFjbTk0ZVNCa2IyVnpJRzV2ZENCemRYQndiM0owSUc1dmJpMWpjSFVnZEdWdWMyOXlJR3h2WTJGMGFXOXVMaWQ5S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ2YzNSTlpYTnpZV2RsS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNSNWNHVXNJRzkxZERvZ2IzVjBjSFYwYzMwZ1lYTWdUM0owVjJGemJVMWxjM05oWjJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGVIUnlZV04wVkhKaGJuTm1aWEpoWW14bFFuVm1abVZ5Y3lodmRYUndkWFJ6SUdGeklGTmxjbWxoYkdsNllXSnNaVlJsYm5OdmNrMWxkR0ZrWVhSaFcxMHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnljaUE5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndiM04wVFdWemMyRm5aU2g3ZEhsd1pTd2daWEp5ZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1kyRnpaU0FuWlc1a0xYQnliMlpwYkdsdVp5YzZYRzRnSUNBZ0lDQWdJR1Z1WkZCeWIyWnBiR2x1WnlodFpYTnpZV2RsSVNrN1hHNGdJQ0FnSUNBZ0lIQnZjM1JOWlhOellXZGxLSHQwZVhCbGZTazdYRzRnSUNBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUNBZ1pHVm1ZWFZzZERwY2JpQWdJQ0I5WEc0Z0lIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJSEJ2YzNSTlpYTnpZV2RsS0h0MGVYQmxMQ0JsY25KOUlHRnpJRTl5ZEZkaGMyMU5aWE56WVdkbEtUdGNiaUFnZlZ4dWZUdGNiaUpkTEFvZ0lDSnRZWEJ3YVc1bmN5STZJQ0k3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVN4TlFVRmhPMEZCUVdJN1FVRkJRVHRCUVVGUExFMUJRVTBzVjBGQlZ6dEJRVUZCTzBGQlFVRTdPenRCUTBGNFFqdEJRVUZCTzBGQlFVRXNaMEpCUVVGQk8wRkJRVUU3UVVGQlFTeE5RVUZoUVR0QlFVRmlPMEZCUVVFN1FVRkJUeXhOUVVGTlFTeFJRVUZQTzBGQlFVRTdRVUZCUVRzN08wRkRRWEJDTzBGQlFVRTdRVUZCUVR0QlFVTkJMRlZCUVVrc1YwRkJWeXhOUVVGTk8wRkJRMjVDTEZsQlFVa3NZVUZCWVN4UFFVRlBMR0ZCUVdFc1pVRkJaU3hUUVVGVExHZENRVUZuUWl4VFFVRlRMR05CUVdNc1RVRkJUVHRCUVVNeFJ5eFpRVUZKTEU5QlFVOHNaVUZCWlR0QlFVRmhMSFZDUVVGaExHTkJRV003UVVGRGJFVXNaVUZEUml4VFFVRlRMRmxCUVZrc1EwRkJReXhIUVVGSE8wRkJSWHBDTEdOQlFVa3NTVUZCUlN4WFFVRlZMRWxCUVVjN1FVRkJSeXhaUVVGRkxGRkJRVTBzU1VGQlNTeFJRVUZSTEVOQlFVTXNSMEZCUlN4TlFVRkpPMEZCUVVNc2FVSkJRVWM3UVVGQlJTeHBRa0ZCUnp0QlFVRkJMRlZCUVVNc1EwRkJRenRCUVVGRkxHTkJRVWtzUzBGQlJ5eFBRVUZQTEU5QlFVOHNRMEZCUXl4SFFVRkZMRU5CUVVNc1IwRkJSU3hMUVVGSExHdENRVUZwUWl4TFFVRkhMRmxCUVZVc1QwRkJUeXhSUVVGUExFbEJRVVVzWTBGQldTeFBRVUZQTEdWQlFXTXNTMEZCUnl4WlFVRlZMRTlCUVU4c1YwRkJVeXhaUVVGVkxFOUJRVThzVVVGQlVTeFpRVUZWTEZsQlFWVXNUMEZCVHl4UlFVRlJMRk5CUVZNc1RVRkJTeXhKUVVGRkxFbEJRVWNzU1VGQlJ5eEhRVUZGTzBGQlF6VlNMR05CUVVjc1NVRkJSenRCUVVGRExHZENRVUZKTEV0QlFVY3NkVU5CUVdNc1MwRkJSenRCUVVGblFpeG5Ra0ZCUlN4SlFVRkZMRWRCUVVjc1VVRkJVU3hEUVVGRExFbEJRVVVzVFVGQlNTeFpRVUZWTzBGQlFVa3NhVUpCUVVjc1EwRkJReXhIUVVGRkxFMUJRVWs3UVVGQlF5eHJRa0ZCUlN4RlFVRkZMRmRCUVZjc1UwRkJVeXhKUVVGRkxFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVVXNSMEZCUnl4VlFVRlZMRU5CUVVNN1FVRkJSU3h4UWtGQlR5eEhRVUZITEdGQlFXRXNSMEZCUlN4SlFVRkZMRk5CUVU4c1RVRkJUVHRCUVVGQkxGbEJRVU03UVVGQlJTeG5Ra0ZCUlN4UFFVRkhPMEZCUVVNc2EwSkJRVVVzUjBGQlJ5eEhRVUZGTEVsQlFVVTdRVUZCUlN4blFrRkJSU3hYUVVGVExFbEJRVVVzU1VGQlNTeFhRVUZYTEVOQlFVTTdRVUZCUnl4eFFrRkJUenRCUVVGQkxGbEJRVU03UVVGQlJTeG5Ra0ZCUlN4RFFVRkRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFbEJRVVVzVTBGQlN6dEJRVUZETEd0Q1FVRkZMRVZCUVVVc1YwRkJWeXhUUVVGVExFbEJRVVVzU1VGQlNTeEpRVUZKTEVOQlFVTXNTVUZCUlN4SFFVRkhMRlZCUVZVc1EwRkJRenRCUVVGRkxHbENRVUZITEZOQlFWTXNSMEZCUlN4SlFVRkZMRk5CUVU4c1VVRkJUeXhEUVVGRExFZEJRVVVzVFVGQlNUdEJRVUZETEc5Q1FVRkZMRVZCUVVVc1EwRkJReXhKUVVGRkxFVkJRVVVzU1VGQlJTeEZRVUZGTEZOQlFVOHNRMEZCUXp0QlFVRkJMR05CUVVNc1EwRkJRenRCUVVGQkxGbEJRVU03UVVGQlJTeGhRVUZETEVWQlFVVXNaVUZCWVN4SlFVRkZMRkZCUVZFc1MwRkJTeXhYUVVGVExFdEJRVWNzVVVGQlVTeExRVUZMTEVOQlFVTXNSVUZCUlN4UlFVRlJMRTlCUVUwc1IwRkJSenRCUVVGSExHOUNRVUZSTEV0QlFVc3NUVUZCVFN4RFFVRkRPMEZCUVVVc1kwRkJSU3hWUVVGUkxFMUJRVWs3UVVGQlFTeFZRVUUwUWl4WFFVRlRMRTFCUTNab1FqdEJRVUZGTEdkQ1FVRkZMRWxCUVVVc1MwRkJTeXhUUVVGVExFOUJRVXNzWlVGQllTeFBRVUZQTEZsQlFWVXNVMEZCVXl4clFrRkJaMElzU1VGQlJTeFRRVUZUTEdOQlFXTXNUVUZCU3l4bFFVRmhMRWxCUVVVc1lVRkJXU3hOUVVGSkxFVkJRVVVzVVVGQlVTeFBRVUZQTEVsQlFVVXNTVUZCUlN4RlFVRkZMRTlCUVU4c1IwRkJSU3hGUVVGRkxGRkJRVkVzVlVGQlV5eEZRVUZGTEVWQlFVVXNXVUZCV1N4SFFVRkhMRWxCUVVVc1EwRkJReXhKUVVGRkxFbEJRVVVzU1VGQlJ5eExRVUZITEU5QlFVYzdRVUZCUXl4clFrRkJTU3hKUVVGRkxFbEJRVWs3UVVGQlpTeG5Ra0ZCUlN4TFFVRkxMRTlCUVUwc1IwRkJSU3hMUVVGRk8wRkJRVVVzWjBKQlFVVXNTMEZCU3l4SlFVRkpPMEZCUVVVc2NVSkJRVThzUlVGQlJUdEJRVUZCTEZsQlFWa3NSMEZCUlN4TlFVRkpMRWxCUVVVc1QwRkJSenRCUVVGRExHdENRVUZKTEVsQlFVVXNTVUZCU1R0QlFVRmxMR2RDUVVGRkxFdEJRVXNzVDBGQlRTeEhRVUZGTEV0QlFVVTdRVUZCUlN4blFrRkJSU3hsUVVGaE8wRkJRV01zWjBKQlFVVXNTMEZCU3l4SlFVRkpPMEZCUVVVc2NVSkJRVThzU1VGQlNTeFhRVUZYTEVWQlFVVXNVVUZCVVR0QlFVRkJMRmxCUVVNc1NVRkJSeXhKUVVGRkxFTkJRVU1zUjBGQlJTeEhRVUZGTEUxQlFVazdRVUZCUXl4clFrRkJTU3hKUVVGRkxFbEJRVWs3UVVGQlpTeG5Ra0ZCUlN4TFFVRkxMRTlCUVUwc1IwRkJSU3hKUVVGRk8wRkJRVVVzWjBKQlFVVXNaVUZEYkdZN1FVRkJZeXhuUWtGQlJTeFRRVUZQTEUxQlFVazdRVUZCUXl4MVFrRkJTeXhGUVVGRkxGVkJRVkVzUzBGQlJ5eEZRVUZGTEZWQlFWRXNSVUZCUlN4WFFVRlRMRVZCUVVVc1JVRkJSU3hSUVVGUkxFbEJRVVVzUlVGQlJUdEJRVUZCTEdOQlFVTTdRVUZCUlN4blFrRkJSU3hWUVVGUk8wRkJRVVVzWjBKQlFVVXNTMEZCU3l4SlFVRkpPMEZCUVVFc1dVRkJRenRCUVVGRkxHTkJRVWtzUzBGQlJ5eFJRVUZSTEVsQlFVa3NTMEZCU3l4UFFVRlBMRWRCUVVVc1NVRkJSU3hSUVVGUkxFMUJRVTBzUzBGQlN5eFBRVUZQTzBGQlFVVXNhVUpCUVU4c1QwRkJUeXhIUVVGRkxFVkJRVVU3UVVGQlJTeGxRVUZITzBGQlFVc3NjMEpCUVZVc1QwRkJUeXhsUVVGaExFZEJRVWNzYVVOQlFXbERPMEZCUVVVc1kwRkJTU3hIUVVGRkxFdEJRVWNzVDBGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hKUVVGSExFbEJRVWNzU1VGQlJ6dEJRVU5vVkN4dFFrRkJVeXhMUVVGSk8wRkJRVU1zWjBKQlFVa3NTVUZCUlN4RlFVRkZPMEZCUVU4c1kwRkJSU3hSUVVGTkxFbEJRVVVzU1VGQlNTeFZRVUZWTEVOQlFVTTdRVUZCUlN4alFVRkZMRk5CUVU4c1NVRkJSU3hKUVVGSkxGZEJRVmNzUTBGQlF6dEJRVUZGTEdOQlFVVXNVMEZCVHl4SlFVRkZMRWxCUVVrc1YwRkJWeXhEUVVGRE8wRkJRVVVzWTBGQlJTeFZRVUZSTEVsQlFVVXNTVUZCU1N4WlFVRlpMRU5CUVVNN1FVRkJSU3hqUVVGRkxGTkJRVThzU1VGQlJTeEpRVUZKTEZkQlFWY3NRMEZCUXp0QlFVRkZMR05CUVVVc1ZVRkJVU3hKUVVGRkxFbEJRVWtzV1VGQldTeERRVUZETzBGQlFVVXNZMEZCUlN4VlFVRlJMRXRCUVVjc1NVRkJTU3hoUVVGaExFTkJRVU03UVVGQlJTeGpRVUZGTEZWQlFWRXNTMEZCUnl4SlFVRkpMR0ZCUVdFc1EwRkJRenRCUVVGRkxHTkJRVVVzVTBGQlR5eExRVUZITEVsQlFVa3NZMEZCWXl4RFFVRkRPMEZCUVVVc1kwRkJSU3hWUVVGUkxFdEJRVWNzU1VGQlNTeGxRVUZsTEVOQlFVTTdRVUZCUVN4VlFVRkRPMEZCUVVNc1kwRkJTU3hMUVVGSExFTkJRVU1zUjBGQlJTeExRVUZITEVOQlFVTXNSMEZCUlN4TFFVRkhMRU5CUVVNc1IwRkJSU3hKUVVGRkxFZEJRVVVzUzBGQlJ5eE5RVUZMTEVsQlFVVTdRVUZEZGxnc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTzBGQlFVTXNaMEpCUVVVc1lVRkJWeXhKUVVGRk8wRkJRVWtzWTBGQlJTeERRVUZETzBGQlFVVXNhVUpCUVVjN1FVRkJSeXhuUWtGQlJTeEpRVUZKTEZsQlFWa3NZVUZCWVN4SlFVRkZMREJEUVVFd1F6dEJRVUZGTEdWQlFVY3NRMEZCUXp0QlFVRkZMR3RDUVVGTk8wRkJRVUVzVlVGQlJUdEJRVUZETEcxQ1FVRlRMRWRCUVVjc1IwRkJSVHRCUVVGRExHMUNRVUZQTEVWQlFVVXNWMEZCVnl4MVEwRkJkVU03UVVGQlFTeFZRVUZETzBGQlFVTXNZMEZCU1R0QlFVRkZMR05CUVVVN1FVRkJaMElzWTBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkZPMEZCUVVNc1owSkJRVWtzUzBGQlJ6dEJRVUZGTEdkQ1FVRkZMRVZCUVVVc1lVRkJWeXhGUVVGRkxGZEJRVmNzU1VGQlJ5eERRVUZETEVsQlFVVXNTVUZCUlR0QlFVRkJMRlZCUVVVN1FVRkJReXh0UWtGQlV5eEhRVUZITEVkQlFVVTdRVUZCUXl4blFrRkJSenRCUVVGRkxIRkNRVUZQTEVWQlFVVXNRMEZCUXp0QlFVRkZMR3RDUVVGTE8wRkJRVUVzVlVGQmEwUTdRVUZETDFnc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTzBGQlFVTXNaMEpCUVVjc1RVRkJTU3hIUVVGRk8wRkJRVU1zYTBKQlFVY3NZMEZCV1N4UFFVRlBMRk5CUVU4c1EwRkJReXhGUVVGRkxGZEJRVmNzVTBGQlV6dEJRVUZGTEhWQ1FVRlBMRTFCUVUwc1IwRkJSU3hGUVVGRExHRkJRVmtzWTBGQllTeERRVUZETEVWQlFVVXNTMEZCU3l4UFFVRkhPMEZCUVVNc2MwSkJRVWNzUTBGQlF5eEZRVUZGTzBGQlFVY3NNRUpCUVVzc2VVTkJRWFZETEVsQlFVVTdRVUZCU1N4NVFrRkJUeXhGUVVGRkxGbEJRVms3UVVGQlFTeG5Ra0ZCUXl4RFFVRkRMRVZCUVVVc1RVRkJUU3hOUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETzBGQlFVVXNhMEpCUVVjN1FVRkJSU3gxUWtGQlR5eEpRVUZKTEZGQlFWRXNRMEZCUXl4SFFVRkZMRTFCUVVrN1FVRkJReXh2UWtGQlJTeEhRVUZGTEU5QlFVY3NSVUZCUlN4SlFVRkpMRmRCUVZjc1EwRkJReXhEUVVGRExFZEJRVVVzUTBGQlF6dEJRVUZCTEdkQ1FVRkRMRU5CUVVNN1FVRkJRU3haUVVGRE8wRkJRVU1zYlVKQlFVOHNVVUZCVVN4UlFVRlJMRVZCUVVVc1MwRkJTeXhOUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZETzBGQlFVRXNWVUZCUXp0QlFVRkRMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4dFFrRkJUeXhIUVVGSExFTkJRVU1zUlVGQlJTeExRVUZMTEU5QlFVY3NXVUZCV1N4WlFVRlpMRWRCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUzBGQlN5eFBRVUZITEVOQlFVTXNSVUZCUlN4TFFVRkxMRWRCUVVVc1QwRkJSenRCUVVGRExHZENRVUZGTERCRFFVRXdReXhEUVVGRExFVkJRVVU3UVVGQlJTeHBRa0ZCUnl4RFFVRkRPMEZCUVVFc1dVRkJReXhEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVU4yWlN4dFFrRkJVeXhIUVVGSExFZEJRVVVzUjBGQlJUdEJRVUZETEdkQ1FVRkpMRWxCUVVVN1FVRkJSU3h0UWtGQlRTeGpRVUZaTEU5QlFVOHNXVUZCV1N4M1FrRkJjMElzUjBGQlJ5eERRVUZETEV0QlFVY3NSVUZCUlN4WFFVRlhMRk5CUVZNc1MwRkJSeXhOUVVGSkxHTkJRVmtzVDBGQlR5eFJRVUZOTEVkQlFVY3NSMEZCUlN4SFFVRkZMRU5CUVVNc1NVRkJSU3hOUVVGTkxFZEJRVVVzUlVGQlF5eGhRVUZaTEdOQlFXRXNRMEZCUXl4RlFVRkZMRXRCUVVzc1QwRkJSeXhaUVVGWkxIRkNRVUZ4UWl4SFFVRkZMRU5CUVVNc1JVRkJSU3hMUVVGTExFZEJRVVVzVTBGQlV5eEhRVUZGTzBGQlFVTXNaMEpCUVVVc2EwTkJRV3RETEVOQlFVTXNSVUZCUlR0QlFVRkZMR2RDUVVGRkxESkRRVUV5UXp0QlFVRkZMSEZDUVVGUExFZEJRVWNzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4WlFVRkRMRU5CUVVNc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGRE5WY3NiVUpCUVZNc1IwRkJSeXhIUVVGRk8wRkJRVU1zYVVKQlFVc3NTMEZCUnl4SlFVRkZPMEZCUVVjc2FVSkJRVXNzUzBGQlJ5eFRRVUZUTEVkQlFVVTdRVUZCUXl4blFrRkJSU3hMUVVGTExFdEJRVWNzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlR0QlFVRkJMRmxCUVVNN1FVRkJSU3hwUWtGQlN5eExRVUZITEZOQlFWTXNSMEZCUlR0QlFVRkRMR2RDUVVGRkxFdEJRVXNzUzBGQlJ5eE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVFc1dVRkJRenRCUVVGRkxHbENRVUZMTEV0QlFVY3NVMEZCVXl4SFFVRkZMRWRCUVVVN1FVRkJReXh0UWtGQlN5eEhRVUZITzBGQlFVVXNiVUpCUVVzc1IwRkJSeXhEUVVGRE8wRkJRVVVzYlVKQlFVc3NSMEZCUnl4RFFVRkRPMEZCUVVFc1dVRkJRenRCUVVGRkxHbENRVUZMTEV0QlFVY3NWMEZCVlR0QlFVRkRMR2RDUVVGRkxFdEJRVXNzUzBGQlJ5eFBRVUZMTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVFc1dVRkJRenRCUVVGQkxGVkJRVU03UVVGRGRFNHNZMEZCU1N4TFFVRkhMRWRCUVVVc1MwRkJSeXhIUVVGRkxFdEJRVWNzWlVGQllTeFBRVUZQTEdOQlFWa3NTVUZCU1N4WlFVRlpMRTFCUVUwc1NVRkJSU3hSUVVGUExFdEJRVWNzUTBGQlF5eEhRVUZGTEVkQlFVVXNUVUZCU1R0QlFVRkRMRzFDUVVGTE8wRkJRVVVzWjBKQlFVa3NTVUZCUlN4SlFVRkZPMEZCUVVVc2FVSkJRVWtzU1VGQlJTeEhRVUZGTEVWQlFVVXNRMEZCUXl4TFFVRkhMRVZCUVVVc1MwRkJSenRCUVVGSkxHZENRVUZGTzBGQlFVVXNaMEpCUVVjc1MwRkJSeXhKUVVGRkxFdEJRVWNzUlVGQlJTeFZRVUZSTzBGQlFVY3NjVUpCUVU4c1IwRkJSeXhQUVVGUExFVkJRVVVzVTBGQlV5eEhRVUZGTEVOQlFVTXNRMEZCUXp0QlFVRkZMR2xDUVVGSkxFbEJRVVVzU1VGQlJ5eEpRVUZGTEV0QlFVYzdRVUZCUXl4clFrRkJTU3hKUVVGRkxFVkJRVVVzUjBGQlJ6dEJRVUZGTEd0Q1FVRkhMRWxCUVVVc1MwRkJTVHRCUVVGRExHOUNRVUZKTEVsQlFVVXNSVUZCUlN4SFFVRkhMRWxCUVVVN1FVRkJSeXh2UWtGQlJ5eFJRVUZOTEVsQlFVVTdRVUZCU3l4MVFrRkJSeXhQUVVGUExHTkJRV01zU1VGQlJTeFBRVUZMTEVsQlFVVXNRMEZCUXp0QlFVRkJMSEZDUVVGTk8wRkJRVU1zYzBKQlFVa3NTVUZCUlN4RlFVRkZMRWRCUVVjc1NVRkJSVHRCUVVGSExITkNRVUZGTEZGQlFVMHNTVUZCUlN4UlFVRk5MRWxCUVVVc1QwRkJTeXhMUVVGSExFdEJRVWNzU1VGQlJTeExRVUZITEVsQlFVVXNUVUZCU1N4TFFVRkhMRXRCUVVjc1MwRkJSeXhMUVVGSExFbEJRVVVzUlVGQlJTeEhRVUZITEVsQlFVVTdRVUZCUnl3d1FrRkJUU3hKUVVGRkxFdEJRVWNzVDBGQlR5eGhRVUZoTEVOQlFVTXNTMEZCUnl4TFFVRkhMRTlCUVUwc1MwRkJSeXhQUVVGUExHRkJRV0VzVVVGQlRTeExRVUZITEVsQlFVY3NVVUZCVFN4SlFVRkZMRWxCUVVrN1FVRkJRU3huUWtGQlJUdEJRVUZCTEdOQlFVTTdRVUZCVFN4eFFrRkJSeXhQUVVGUExHRkJRV0VzUTBGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUXl4dFFrRkJUenRCUVVGQkxGVkJRVU1zUjBGRGVHZENMRWxCUVVVc1EwRkJReXhIUVVGRkxFOUJRVXNzVDBGQlN5eExRVUZITEVkQlFVY3NSMEZCUlN4SFFVRkZMRU5CUVVNc1NVRkJSU3hKUVVGSExFbEJRVVVzVDBGQlJ6dEJRVUZETEhGQ1FVRlJMRWxCUVVVc1IwRkJSU3hKUVVGRkxFZEJRVVVzU1VGQlJTeEZRVUZGTEZGQlFVOHNSVUZCUlN4SFFVRkZPMEZCUVVNc2EwSkJRVWtzU1VGQlJTeEZRVUZGTEZkQlFWY3NRMEZCUXp0QlFVRkZMSEZDUVVGTExFbEJRVVVzVFVGQlNTeFJRVUZOTEVsQlFVVXNTMEZCUnl4SlFVRkZMRk5CUVU4c1MwRkJSeXhUUVVGUExFdEJRVWNzUzBGQlJ5eEhRVUZGTEVWQlFVVXNTMEZCUnl4TFFVRkhPMEZCUVVFc1dVRkJRenRCUVVGRExHMUNRVUZQTzBGQlFVRXNWVUZCUXl4SFFVRkZMRWxCUVVVc1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeE5RVUZKTzBGQlFVTXNiVUpCUVVzN1FVRkJSU3huUWtGQlJ5eEZRVUZGTEVsQlFVVTdRVUZCUnl4eFFrRkJUenRCUVVGRkxHZENRVUZKTEVsQlFVVTdRVUZCUlN4blFrRkJSU3hKUVVGRkxFbEJRVVU3UVVGQlJTeHhRa0ZCVVN4SlFVRkZMRWRCUVVVc1NVRkJSU3hGUVVGRkxGRkJRVThzUlVGQlJTeEhRVUZGTzBGQlFVTXNhMEpCUVVrc1NVRkJSU3hGUVVGRkxGZEJRVmNzUTBGQlF6dEJRVUZGTEd0Q1FVRkhMRk5CUVU4c1MwRkJSeXhUUVVGUExFZEJRVVU3UVVGQlF5eHZRa0ZCU1N4SlFVRkZMRVZCUVVVc1YwRkJWeXhGUVVGRkxFTkJRVU03UVVGQlJTeHZRa0ZCUlN4VlFVRlJMRWxCUVVVc1UwRkJUeXhOUVVGSkxFbEJRVVU3UVVGQlFTeGpRVUZKTzBGQlFVTXNhMEpCUVVjc1QwRkJTeXhIUVVGRk8wRkJRVU1zYjBKQlFVY3NTMEZCUnp0QlFVRkZPMEZCUVUwc2EwSkJRVVVzVVVGQlRTeERRVUZETEVsQlFVVTdRVUZCUVN4alFVRkRMRTlCUVVzN1FVRkJReXh2UWtGQlJ5eFJRVUZOTEVkQlFVVTdRVUZCUXl4elFrRkJSeXhKUVVGRkxFdEJRVWM3UVVGQlJUdEJRVUZOTEc5Q1FVRkZMRkZCUVUwc1EwRkJReXhKUVVGRkxFMUJRVWtzUzBGQlJ6dEJRVUZCTEdkQ1FVRkRMRTlCUVVzN1FVRkJReXh6UWtGQlJ5eFRRVUZQTEVkQlFVVTdRVUZCUXl4M1FrRkJSeXhKUVVGRkxFdEJRVWM3UVVGQlJUdEJRVUZOTEhOQ1FVRkZMRkZCUVUwc1EwRkJReXhKUVVGRkxFMUJRVWtzUzBGQlJ6dEJRVUZCTEd0Q1FVRkZMRTlCUVVzN1FVRkJReXgzUWtGQlJ5eEpRVUZGTEV0QlEyNW1PMEZCUVVVN1FVRkJUU3h6UWtGQlJTeFJRVUZOTEVOQlFVTXNTVUZCUlN4TlFVRkpMRXRCUVVjN1FVRkJSeXh6UWtGQlJTeFJRVUZOTEVOQlFVTXNTVUZCUlN4TlFVRkpMRXRCUVVjc1MwRkJSenRCUVVGQkxHdENRVUZGTzBGQlFVTXNiMEpCUVVVc1VVRkJUU3hEUVVGRExFbEJRVVVzVFVGQlNTeExRVUZITEVsQlFVVTdRVUZCUVN4blFrRkJSVHRCUVVGRExHdENRVUZGTEZGQlFVMHNRMEZCUXl4SlFVRkZMRTFCUVVrc1NVRkJSVHRCUVVGQkxHTkJRVVU3UVVGQlFTeFpRVUZETzBGQlFVTXNZMEZCUlN4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGRkxHMUNRVUZQTEVsQlFVVTdRVUZCUVN4VlFVRkRMRWRCUVVVc1MwRkJSeXhQUVVGSE8wRkJRVU1zWjBKQlFVY3NVMEZCVHp0QlFVRkZMSEZDUVVGTk8wRkJRVThzWjBKQlFVa3NTVUZCUlN4UFFVRlBPMEZCUVVVc2JVSkJRVTBzWVVGQlZ5eExRVUZITEZsQlFWVXNTMEZCUnl4bFFVRmhMRWxCUVVVc1JVRkJSU3hUUVVGVExFbEJRVVVzUzBGQlJ6dEJRVUZCTEZWQlFVTXNSMEZCUlN4SlFVRkhMRWxCUVVVc1QwRkJSenRCUVVGRExIRkNRVUZSTEVsQlFVVXNTVUZCUnl4RlFVRkZMRTFCUVVrc1EwRkJRenRCUVVGSExHMUNRVUZITEVkQlFVY3NSVUZCUlN4UlFVRk5MRU5CUVVNc1EwRkJRenRCUVVGRkxHMUNRVUZQTzBGQlFVRXNWVUZCUXl4SFFVRkZMRXRCUVVjc1EwRkJReXhIUVVGRkxFdEJRVWNzUTBGQlF5eEhRVUZGTEV0QlFVY3NRMEZCUXl4SFFVRkZPMEZCUTNoVUxHMUNRVUZUTEVkQlFVY3NSMEZCUlN4SFFVRkZMRWxCUVVVc1EwRkJReXhIUVVGRk8wRkJRVU1zWjBKQlFVa3NTVUZCUlN4RlFVRkZPMEZCUVVzc1owSkJRVWNzUTBGQlF6dEJRVUZGTEc5Q1FVRk5MRWxCUVVrc1JVRkJSU3hUUVVGVExFTkJRVU1zSzBOQlFTdERPMEZCUVVVc1owSkJRVWNzUjBGQlJ5eGxRVUZsTEVOQlFVTXNSMEZCUlR0QlFVRkRMR3RDUVVGSExFVkJRVVU3UVVGQlJ6dEJRVUZQTEc5Q1FVRk5MRWxCUVVrc1JVRkJSU3g1UWtGQmVVSXNRMEZCUXl4VFFVRlRPMEZCUVVFc1dVRkJSVHRCUVVGRExHVkJRVWNzUTBGQlF5eEpRVUZGTzBGQlFVVXNiVUpCUVU4c1IwRkJSeXhEUVVGRE8wRkJRVVVzWlVGQlJ5eGxRVUZsTEVOQlFVTXNUVUZCU1N4SlFVRkZMRWRCUVVjc1EwRkJReXhIUVVGRkxFOUJRVThzUjBGQlJ5eERRVUZETEVkQlFVVXNSVUZCUlN4UlFVRlJMRTlCUVVjc1JVRkJSU3hEUVVGRE8wRkJRVUVzVlVGQlJUdEJRVUZETEcxQ1FVRlRMRVZCUVVVc1IwRkJSU3hIUVVGRkxFbEJRVVVzUTBGQlF5eEhRVUZGTzBGQlFVTXNaMEpCUVVjc1JVRkJSU3h2UWtGQmJVSTdRVUZCUnl4dlFrRkJUU3hKUVVGSkxGVkJRVlVzZVVSQlFYbEVPMEZCUVVVc1pVRkJSeXhIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZEZEdFc1kwRkJTU3hMUVVGSExFTkJRVU1zUjBGQlJTeEhRVUZGTEUxQlFVazdRVUZCUXl4dlFrRkJUeXhIUVVGRk8wRkJRVUVzWTBGQlF5eExRVUZMTzBGQlFVVXNkVUpCUVU4c1NVRkJSU3hQUVVGSExFVkJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4UFFVRkhMRVZCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU03UVVGQlFTeGpRVUZGTEV0QlFVczdRVUZCUlN4MVFrRkJUeXhKUVVGRkxFOUJRVWNzUlVGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZMRTlCUVVjc1JVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF6dEJRVUZCTEdOQlFVVXNTMEZCU3p0QlFVRkZMSFZDUVVGUExFbEJRVVVzVDBGQlJ5eEZRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1QwRkJSeXhGUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETzBGQlFVRXNZMEZCUlN4TFFVRkxPMEZCUVVVc2RVSkJRVThzU1VGQlJTeFBRVUZITEVkQlFVY3NUVUZCU1N4RFFVRkRMRWxCUVVVc1QwRkJSeXhIUVVGSExFMUJRVWtzUTBGQlF6dEJRVUZCTEdOQlFVVTdRVUZCVVN4elFrRkJUU3hKUVVGSkxGVkJRVlVzTUVKQlFUQkNMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVU3UVVGQlFTeFpRVUZGTzBGQlFVRXNWVUZCUXp0QlFVRkZMRzFDUVVGVExFdEJRVWs3UVVGQlF5eHBRa0ZCU3l4TFFVRkhMRU5CUVVNc1RVRkJUVHRCUVVGRkxHbENRVUZMTEV0QlFVY3NRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkJReXhqUVVGSkxFbEJRVVVzU1VGQlNUdEJRVUZITEcxQ1FVRlRMRWRCUVVjc1IwRkJSVHRCUVVGRExHMUNRVUZMTzBGQlFVVXNhVUpCUVVjc1JVRkJSU3hOUVVGSkxFMUJRVWtzUlVGQlJTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RlFVRkZMRTFCUVVrc1JVRkJSU3hIUVVGSExFTkJRVU03UVVGQlFTeFZRVUZETzBGQlF6RlpMR05CUVVrc1NVRkJSU3hQUVVGSE8wRkJRVU1zWjBKQlFVY3NRMEZCUXp0QlFVRkZMRzlDUVVGTkxFbEJRVWtzUlVGQlJTeHpRMEZCYjBNc1EwRkJRenRCUVVGRkxHMUNRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRVZCUVVVN1FVRkJRU3hWUVVGTExFZEJRVVVzU1VGQlJTeFBRVUZITzBGQlFVTXNiMEpCUVU4c1IwRkJSVHRCUVVGQkxHTkJRVU1zUzBGQlN6dEJRVUZQTEhWQ1FVRlBPMEZCUVVFc1kwRkJSU3hMUVVGTE8wRkJRVXNzZFVKQlFVODdRVUZCUVN4alFVRkZMRXRCUVVzN1FVRkJSeXgxUWtGQlR6dEJRVUZCTEdOQlFVVXNTMEZCU3p0QlFVRkhMSFZDUVVGUE8wRkJRVUVzWTBGQlJUdEJRVUZSTEhWQ1FVRlBMRVZCUVVVc1IwRkJSeXhGUVVGRExFbEJRVWNzUjBGQlJTeFBRVUZOTEVWQlFVTXNRMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJRU3hWUVVGRE8wRkJRVVVzYlVKQlFWTXNSMEZCUnl4SFFVRkZPMEZCUVVNc2JVSkJRVThzUzBGQlN5eGhRVUZoTEVWQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGQlF5eGpRVUZKTEV0QlFVY3NRMEZCUXl4SFFVRkZMRTFCUVVrN1FVRkJReXh2UWtGQlR5eEhRVUZGTzBGQlFVRXNZMEZCUXl4TFFVRkxPMEZCUVVVc2RVSkJRVThzVTBGQlV5eEhRVUZGTzBGQlFVTXNlVUpCUVU4c1MwRkJTeXhoUVVGaExFZEJRVWNzVFVGQlNTeE5RVUZKTEVOQlFVTXNRMEZCUXp0QlFVRkJMR2RDUVVGRE8wRkJRVUVzWTBGQlJTeExRVUZMTzBGQlFVVXNkVUpCUVU4c1UwRkJVeXhIUVVGRk8wRkJRVU1zZVVKQlFVOHNTMEZCU3l4aFFVRmhMRWRCUVVjc1RVRkJTU3hOUVVGSkxFTkJRVU1zUTBGQlF6dEJRVUZCTEdkQ1FVRkRPMEZCUVVFc1kwRkJSVHRCUVVGUkxITkNRVUZOTEVsQlFVa3NWVUZCVlN4M1FrRkJkMElzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlR0QlFVRkJMRmxCUVVVN1FVRkJRU3hWUVVGRE8wRkJRMmhtTEcxQ1FVRlRMRWRCUVVjc1IwRkJSVHRCUVVGRExHMUNRVUZQTEV0QlFVc3NZVUZCWVN4RlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFTkJRVU03UVVGQlFTeFZRVUZETzBGQlEzSkVMR05CUVVrc1MwRkJSeXhsUVVGaExFOUJRVThzWTBGQldTeEpRVUZKTEZsQlFWa3NWVUZCVlN4SlFVRkZMRkZCUVU4c1MwRkJSeXhEUVVGRExFZEJRVVVzVFVGQlNUdEJRVUZETEdkQ1FVRkpMRWxCUVVVc1MwRkJSenRCUVVGRkxIRkNRVUZSTEVsQlFVVXNTVUZCUlN4SlFVRkZMRWRCUVVVc1JVRkJSU3hMUVVGSExFMUJRVWtzUlVGQlJTeE5RVUZKTEVOQlFVTTdRVUZCUnl4blFrRkJSVHRCUVVGRkxHdENRVUZKTzBGQlFVVXNaMEpCUVVjc1MwRkJSeXhKUVVGRkxFdEJRVWM3UVVGQlJ5eHhRa0ZCVHl4SFFVRkhMRTlCUVU4c1JVRkJSU3hUUVVGVExFMUJRVWtzUjBGQlJTeE5RVUZKTEVOQlFVTXNRMEZCUXp0QlFVRkZMR2RDUVVGRk8wRkJRVWNzYVVKQlFVa3NTVUZCUlN4SFFVRkZMRVZCUVVVc1MwRkJSeXhKUVVGRkxFbEJRVWNzUlVGQlJTeEhRVUZGTzBGQlFVTXNhMEpCUVVrc1NVRkJSU3hGUVVGRkxFbEJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXp0QlFVRkZMR3RDUVVGSExFdEJRVWM3UVVGQlJUdEJRVUZOTEcxQ1FVRkhMRTlCUVU4c1lVRkJZU3hEUVVGRE8wRkJRVUVzV1VGQlF6dEJRVUZETEcxQ1FVRlBPMEZCUVVFc1ZVRkJReXhIUVVGRkxFdEJRVWNzUTBGQlF5eEhRVUZGTEVkQlFVVXNUVUZCU1R0QlFVRkRMSFZDUVVGVExFMUJRVWtzU1VGQlJUdEJRVUZaTEdkQ1FVRkhMRWxCUVVVN1FVRkJSU3h4UWtGQlR6dEJRVUZGTEdsQ1FVRkhPMEZCUVVVc1owSkJRVWtzU1VGQlJUdEJRVUZGTEdkQ1FVRkZMRWxCUVVVc1NVRkJSU3hGUVVGRkxGTkJRVThzU1VGQlJTeEpRVUZGTEVWQlFVVTdRVUZCVHl4eFFrRkJVU3hKUVVGRkxFZEJRVVVzU1VGQlJTeEhRVUZGTEVWQlFVVTdRVUZCUlN4blFrRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNWMEZCVnl4RFFVRkRMRWRCUVVVc1MwRkJSenRCUVVGRkxHTkJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlR0QlFVRkZMRzFDUVVGUExFbEJRVVU3UVVGQlFTeFZRVUZETEVkQlFVVXNTMEZCUnl4UFFVRkhMRWxCUVVVc1JVRkJSU3hSUVVGUExFdEJRVWNzUTBGQlF5eEhRVUZGTEUxQlEyNW1PMEZCUVVNc2NVSkJRVkVzU1VGQlJTeEhRVUZGTEVsQlFVVXNTVUZCUnl4RlFVRkZMRXRCUVVjc1NVRkJSU3hOUVVGSk8wRkJRVU1zYTBKQlFVa3NTVUZCUlN4RlFVRkZMRWxCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF6dEJRVUZGTEd0Q1FVRkhMRXRCUVVjN1FVRkJSVHRCUVVGTkxHZENRVUZGTzBGQlFVVXNkVUpCUVU4c1MwRkJSeXhMUVVGSExFOUJRVTBzUzBGQlJ5eFBRVUZQTEdGQlFXRXNVVUZCVFN4TFFVRkhMRWxCUVVjc1VVRkJUU3hKUVVGRkxFbEJRVWtzUzBGQlJ5eExRVUZITEU5QlFVOHNZVUZCWVN4RFFVRkRPMEZCUVVFc1dVRkJRenRCUVVGRExHMUNRVUZQTzBGQlFVRXNWVUZCUXl4SFFVRkZMRXRCUVVjc1EwRkJReXhIUVVGRkxFZEJRVVVzVFVGQlNUdEJRVUZETEcxQ1FVRkxPMEZCUVVVc2RVSkJRVk1zVFVGQlNTeEpRVUZGTzBGQlFWa3NaMEpCUVVjc1NVRkJSVHRCUVVGRkxIRkNRVUZQTzBGQlFVVXNaMEpCUVVrc1NVRkJSVHRCUVVGRkxHZENRVUZGTEVsQlFVVXNTVUZCUlR0QlFVRkZMSEZDUVVGUkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVWQlFVVXNVVUZCVHl4RlFVRkZMRWRCUVVVN1FVRkJReXhyUWtGQlNTeEpRVUZGTEVWQlFVVXNWMEZCVnl4RFFVRkRPMEZCUVVVc2EwSkJRVWNzVTBGQlR5eExRVUZITEZOQlFVOHNSMEZCUlR0QlFVRkRMRzlDUVVGSkxFbEJRVVVzUlVGQlJTeFhRVUZYTEVWQlFVVXNRMEZCUXp0QlFVRkZMRzlDUVVGRkxGVkJRVkVzU1VGQlJTeFRRVUZQTEUxQlFVa3NTVUZCUlR0QlFVRkJMR05CUVVrN1FVRkJReXhuUWtGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVVc2JVSkJRVWM3UVVGQlJTeHJRa0ZCUnl4SlFVRkZMRWxCUVVVN1FVRkJSVHRCUVVGQkxGbEJRVXM3UVVGQlF5eGpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVN1FVRkJSU3h0UWtGQlR5eEpRVUZGTzBGQlFVRXNWVUZCUXl4SFFVRkZMRXRCUVVjc1QwRkJSenRCUVVGRExIRkNRVUZSTEVsQlFVVXNSMEZCUlN4SlFVRkZMRWRCUVVVc1NVRkJSU3hGUVVGRkxGRkJRVThzUlVGQlJTeEhRVUZGTzBGQlFVTXNhMEpCUVVrc1NVRkJSU3hGUVVGRkxGZEJRVmNzUTBGQlF6dEJRVU4yWml4MVFrRkJUeXhMUVVGSExGTkJRVThzUzBGQlJ5eEZRVUZGTzBGQlFVVXNiVUpCUVVjN1FVRkJRU3haUVVGRE8wRkJRVU1zYlVKQlFVODdRVUZCUVN4VlFVRkRMRWRCUVVVc1NVRkJSU3hEUVVGRExFZEJRVVVzVFVGQlNUdEJRVUZETEdkQ1FVRkpMRWxCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVVVzWjBKQlFVY3NWMEZCVXp0QlFVRkZMRzlDUVVGTkxFbEJRVVVzUjBGQlJ5eERRVUZETEVkQlFVVXNTVUZCUlN4RlFVRkZMRU5CUVVNc1IwRkJSU3hGUVVGRkxFTkJRVU1zUjBGQlJTeEpRVUZKTEVWQlFVVXNTVUZCUlN4MVFrRkJjVUlzUTBGQlF6dEJRVUZGTEcxQ1FVRlBPMEZCUVVFc1ZVRkJReXhIUVVGRkxFdEJRVWNzUTBGQlF5eEhRVUZGTEVsQlFVVXNUMEZCUnp0QlFVRkRMR2RDUVVGSkxFbEJRVVVzUjBGQlJ5eERRVUZETzBGQlFVVXNiVUpCUVU4c1YwRkJVeXhKUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZGTzBGQlFVRXNWVUZCUXl4SFFVRkZMRWxCUVVVc1EwRkJReXhIUVVGRkxFdEJRVWNzVFVGQlNTeFpRVUZWTEU5QlFVOHNZVUZCVnl4aFFVRlhMRk5CUVZNc1lVRkJZU3hGUVVGRkxFZEJRVVVzUzBGQlJ5eFBRVUZITzBGQlFVTXNaMEpCUVVrc1NVRkJSU3hGUVVGRk8wRkJRVThzWTBGQlJTeExRVUZMTEVOQlFVTTdRVUZCUlN4dFFrRkJUenRCUVVGQkxGVkJRVU1zUjBGQlJTeExRVUZITEVOQlFVTXNSMEZCUlN4TlFVRkpPMEZCUVVNc2NVSkJRVkVzU1VGQlJTeE5RVUZOTEVOQlFVTXNSMEZCUlN4SlFVRkZMRWRCUVVVc1NVRkJSU3hIUVVGRkxFVkJRVVU3UVVGQlJTeG5Ra0ZCUlN4RFFVRkRMRWxCUVVVc1JVRkJSU3hGUVVGRkxFbEJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SFFVRkZMR1ZCUVdFc1EwRkJRenRCUVVGRkxHMUNRVUZQTzBGQlFVRXNWVUZCUXl4SFFVRkZMRXRCUVVjc1QwRkJSenRCUVVGRExHZENRVUZITEZkQlFWTTdRVUZCUlN4eFFrRkJUVHRCUVVGWExHZENRVUZGTEVWQlFVVXNVVUZCVVN4clFrRkJhVUlzUjBGQlJ6dEJRVUZGTEdkQ1FVRkpMRWxCUVVVc1JVRkJSU3hYUVVGWExFTkJRVU03UVVGQlJTeHRRa0ZCVHl4TlFVTjZaaXhMUVVGSExFMUJRVWtzU1VGQlJTeEpRVUZKTEVOQlFVTXNTMEZCUnp0QlFVRkJMRlZCUVVNc1IwRkJSU3hMUVVGSExFTkJRVU03UVVGQlJTeHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSVHRCUVVGRExHZENRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMRzFDUVVGTkxFVkJRVU1zUTBGQlF5eERRVUZETEVkQlFVVXNWMEZCVlR0QlFVRkRMSEZDUVVGUExFVkJRVVVzVFVGQlRTeE5RVUZMTEZOQlFWTTdRVUZCUVN4WlFVRkRMRVZCUVVNc1JVRkJSU3hEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZETEcxQ1FVRlRMRWRCUVVjc1IwRkJSVHRCUVVGRExHZENRVUZKTEVsQlFVVTdRVUZCVXl4blFrRkJSeXhGUVVGRkxHRkJRV0U3UVVGQlZTeHZRa0ZCVFN4SlFVRkpMRlZCUVZVc2NVTkJRWEZETEU5QlFVOHNRMEZCUXl3d1FrRkJNRUk3UVVGQlJTeG5Ra0ZCU1N4SlFVRkZMRWRCUVVjc1JVRkJSU3hSUVVGTkxIVkNRVUZ6UWl4WFFVRlZPMEZCUVVFc1dVRkJReXhEUVVGRE8wRkJRVVVzWTBGQlJTeFpRVUZWTEVWQlFVVTdRVUZCVlN4blFrRkJSU3hKUVVGSk8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4TlFVRk5MRWRCUVVVc1EwRkJRenRCUVVGRkxHMUNRVUZQTEdGQlFXRXNVMEZCVHl4SlFVRkZPMEZCUVVFc1ZVRkJRenRCUVVOMFdTeGpRVUZKTEV0QlFVY3NUMEZCUnp0QlFVRkRMSEZDUVVGUkxFbEJRVVVzU1VGQlJ5eEpRVUZGTEVkQlFVVXNTVUZCUlN4SFFVRkZMRVZCUVVVN1FVRkJSU3h2UWtGQlNTeE5RVUZKTEVsQlFVVXNUMEZCU3l4TlFVRkpMRkZCUVUwN1FVRkJSU3huUWtGQlNTeEpRVUZGTEhGRFFVRnRReXhKUVVGRk8wRkJRV3RGTEdsQ1FVRkpMRWxCUVVVc1IwRkJSU3hKUVVGRkxFZEJRVVVzUlVGQlJUdEJRVUZGTEcxQ1FVRkhMR2RDUVVGakxFbEJRVVVzYjBWQlFXdEZMRWxCUVVVc2FVSkJRV1VzU1VGQlJTeGxRVUZoTEVsQlFVVXNhMFJCUVdkRUxFbEJRVVU3UVVGQmQwTXNiVUpCUVU4c1NVRkJTU3hUUVVGVExIbENRVUYzUWl4VlFVRlRMR2xDUVVGblFpeGhRVUZaTEV0QlFVY3NLMEpCUTJwbExFbEJRVVVzYzBOQlFYTkRMRVZCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzVFVGQlNTeERRVUZETzBGQlFVRXNWVUZCUXl4SFFVRkZMRXRCUVVjc1EwRkJReXhIUVVGRkxFbEJRVVVzVDBGQlJ5eE5RVUZKTEVsQlFVVXNUVUZCU1N4TlFVRkpMRWxCUVVVc1QwRkJTeXhOUVVGSkxFbEJRVVVzVFVGQlN5eExRVUZITEVOQlFVTXNSMEZCUlN4SlFVRkhMRWxCUVVjc1NVRkJSeXhMUVVGSkxFdEJRVWtzUzBGQlNTeExRVUZKTEV0QlFVa3NTMEZCU1N4TFFVRkpMRWRCUVVjc1IwRkJSU3hMUVVGSExFTkJRVU1zUjBGQlJTeEpRVUZITEVsQlFVY3NTVUZCUnl4TFFVRkpMRXRCUVVrc1MwRkJTU3hMUVVGSkxFdEJRVWtzUzBGQlNTeExRVUZKTEVkQlFVY3NSMEZCUlN4TFFVRkhMRTlCUVVjN1FVRkJReXhuUWtGQlNTeEpRVUZGTEVWQlFVVXNRMEZCUXl4SlFVRkZMRWRCUVVVc1NVRkJSU3hIUVVGSExFTkJRVU03UVVGQlJTeHBRa0ZCUnl4RlFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeHRRa0ZCVHp0QlFVRkJMRlZCUVVNc1IwRkJSU3hMUVVGSExFTkJRVU1zUjBGQlJTeExRVUZITEUxQlFVazdRVUZCUXl4blFrRkJSeXhEUVVGRExFbEJRVWM3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRVZCUVVNc1RVRkJTeXhaUVVGWExGTkJRVkVzV1VGQlZ5eE5RVUZMTEV0QlFVa3NTMEZCU1N4TFFVRkpMRTFCUVVzc2EwSkJRV2xDTEU5QlFVMHNXVUZCVlN4UFFVRlBMR0ZCUVZjc1ZVRkJWU3hoUVVGWExGVkJRVlVzVlVGQlZTeERRVUZETEV0QlFVY3NTMEZCU3l4UlFVRlJMRXRCUVVrc1IwRkJSeXhKUVVGRkxGVkJRVk1zUjBGQlJTeE5RVUZKTEdsQ1FVRm5RaXhIUVVGRk8wRkJRVVVzYlVKQlFVa3NTMEZCU3p0QlFVRkhMREpDUVVOdVppeEhRVUZITEVOQlFVTXNTVUZCUlN4UFFVRlBMRVZCUVVVc1EwRkJReXhKUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMR3RDUVVGSkxFbEJRVVVzUTBGQlF6dEJRVUZGTEcxQ1FVRkpMRXRCUVVzN1FVRkJSU3hyUWtGQlJTeExRVUZMTEVkQlFVY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVU3UVVGQlJTeHRRa0ZCUnp0QlFVRkJMRmxCUVVNN1FVRkJReXh0UWtGQlR6dEJRVUZCTEZWQlFVVXNSMEZCUlN4SlFVRkhMRXRCUVVjc1EwRkJReXhOUVVGTExFTkJRVU1zUjBGQlJTeERRVUZETEVOQlFVTXNSMEZCUlN4TFFVRkhMRU5CUVVNc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFVkJRVVVzUjBGQlJTeExRVUZITEVOQlFVTXNTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRVZCUVVVN1FVRkJSU3h0UWtGQlV5eEhRVUZITEVkQlFVVTdRVUZCUXl4blFrRkJTU3hKUVVGRkxFMUJRVTBzUlVGQlJTeERRVUZETEVsQlFVVXNRMEZCUXp0QlFVRkZMR05CUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUlVGQlJTeE5RVUZOTzBGQlFVVXNiVUpCUVU4N1FVRkJRU3hWUVVGRE8wRkJRekZRTEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEhGQ1FVRlRMRVZCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHRRa0ZCU1N4SlFVRkZMRmxCUVZVc1QwRkJUeXhKUVVGRkxFVkJRVVVzVTBGQlV5eEpRVUZGTEV0QlFVY3NTVUZCUnl4RlFVRkZMRk5CUVU4N1FVRkJSeXh2UWtGQlJTeEZRVUZGTEVOQlFVTXNTVUZCUlR0QlFVRkZMSEZDUVVGUE8wRkJRVUVzV1VGQlF6dEJRVUZETEhGQ1FVRlRMRVZCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zY1VKQlFVOHNSVUZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSenRCUVVGQkxGbEJRVU03UVVGQlF5eHhRa0ZCVXl4RlFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExIVkNRVUZUTEVWQlFVVXNTVUZCUnp0QlFVRkRMSFZDUVVGUExFbEJRVVVzUzBGQlJ5eExRVUZITEVsQlFVVXNTMEZCUnl4SlFVRkZPMEZCUVVFc1kwRkJRenRCUVVGRExHdENRVUZKTzBGQlFVVXNjVUpCUVVzc1NVRkJSU3hGUVVGRkxFVkJRVVVzV1VGQldTeEpRVUZGTEVWQlFVVXNXVUZCV1N4RFFVRkRMRTFCUVVrc1QwRkJTeXhKUVVGRkxFVkJRVVVzUlVGQlJTeFRRVUZUTEVsQlFVVXNSVUZCUlN4VFFVRlRMRU5CUVVNc1QwRkJTeXhKUVVGRkxFVkJRVVVzUlVGQlJTeFJRVUZSTEVsQlFVVXNSVUZCUlN4UlFVRlJMRU5CUVVNN1FVRkJSeXh4UWtGQlR6dEJRVUZCTEZsQlFVTTdRVUZCUXl4eFFrRkJVeXhGUVVGRkxFZEJRVVU3UVVGQlF5eHpRa0ZCVHl4RlFVRkZMRTlCUVU4c1IwRkJSVHRCUVVGQkxHZENRVUZETEV0QlFVczdRVUZCUlN4NVFrRkJUeXhKUVVGSkxFdEJRVXNzUlVGQlJTeFpRVUZaTEVsQlFVVXNSMEZCUlN4SlFVRkhMRVZCUVVVN1FVRkJRU3huUWtGQlJTeExRVUZMTzBGQlFVVXNlVUpCUVU4N1FVRkJRU3huUWtGQlJTeExRVUZMTzBGQlFVVXNlVUpCUVU4c1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMR2RDUVVGRkxFdEJRVXM3UVVGQlJTeDVRa0ZCVHl4SlFVRkpPMEZCUVVFc2IwSkJRVXNzUlVGQlJTeFpRVUZaTzBGQlFVRXNiMEpCUXpWbU8wRkJRVUVzYjBKQlFVVTdRVUZCUVN4clFrRkJRenRCUVVGQkxHZENRVUZGTEV0QlFVczdRVUZCUlN4NVFrRkJUeXhKUVVGSkxFdEJRVXNzUlVGQlJTeFpRVUZaTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVFc1owSkJRVVVzUzBGQlN6dEJRVUZGTEhsQ1FVRlBMRWxCUVVrc1MwRkJTeXhGUVVGRkxGbEJRVmtzU1VGQlJTeEhRVUZGTEVsQlFVY3NSVUZCUlR0QlFVRkJMR2RDUVVGRkxFdEJRVXM3UVVGQlJTeDVRa0ZCVHl4SlFVRkpMRXRCUVVzc1JVRkJSU3haUVVGWkxFbEJRVVVzUjBGQlJTeEpRVUZITEVWQlFVVTdRVUZCUVN4alFVRkRPMEZCUVVFc1dVRkJRenRCUVVGRExIRkNRVUZUTEVWQlFVVXNSMEZCUlR0QlFVRkRMR3RDUVVGSkxFbEJRVVVzUlVGQlJUdEJRVUZITEcxQ1FVRkpMRWxCUVVVc1NVRkJTU3hMUVVGTkxFbEJRVWtzUzBGQlN5eEZRVUZGTEV0QlFVY3NUVUZCU3l4SFFVRkZMRU5CUVVNc1JVRkJSeXhSUVVGUkxFTkJRVU1zUjBGQlJTeEpRVUZGTEV0QlFVYzdRVUZCUXl4dlFrRkJTU3hKUVVGRkxFVkJRVVVzVTBGQlV5eEhRVUZGTEV0QlFVY3NSVUZCUlN4RlFVRkZMRmxCUVZrc1EwRkJReXhKUVVGRkxFdEJRVWNzU1VGQlNTeERRVUZETzBGQlFVVXNiMEpCUVVjc1NVRkJSU3hKUVVGRkxFVkJRVVVzVVVGQlVUdEJRVUZGTEhWQ1FVRkhMRWxCUVVVc1JVRkJSU3hSUVVGUkxFbEJRVVVzUjBGQlJTeEZRVUZGTEZGQlFWRXNRMEZCUXl4SFFVRkZMRXRCUVVjc1NVRkJSU3hGUVVGRkxGTkJRVk1zU1VGQlJTeERRVUZETEV0QlFVY3NSVUZCUlN4VFFVRlRMRU5CUVVNc1IwRkJSU3hGUVVGRkxGbEJRVmtzUlVGQlJTeFpRVUZaTEVsQlFVVXNRMEZCUXp0QlFVRkJMSEZDUVVGUE8wRkJRVU1zYjBKQlFVVXNVVUZCVVN4RlFVRkZMRkZCUVZFc1NVRkJSU3hEUVVGRE8wRkJRVVU3UVVGQlFTeG5Ra0ZCU3p0QlFVRkJMR05CUVVNN1FVRkJReXhyUWtGQlJTeEpRVUZKTEV0QlFVc3NSVUZCUlN4WlFVRlpMRWxCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeHJRa0ZCUlN4RlFVRkZMRWxCUVVrN1FVRkJRU3huUWtGQlN5eEZRVUZGTEZsQlFWazdRVUZCUVN4blFrRkRibVk3UVVGQlFTeG5Ra0ZCUlR0QlFVRkJMR05CUVVNc1EwRkJRenRCUVVGRkxHdENRVUZGTEVWQlFVVXNRMEZCUXp0QlFVRkZMSEZDUVVGUExFdEJRVWNzUlVGQlJTeEhRVUZGTEVOQlFVTXNTVUZCUlN4TFFVRkhMRVZCUVVVc1IwRkJSU3hEUVVGRExFbEJRVVVzUlVGQlJTeFpRVUZaTEVsQlFVVXNTVUZCUlN4RlFVRkZMRmxCUVZrc1NVRkJSU3hGUVVGRkxGbEJRVmtzU1VGQlJUdEJRVUZCTEZsQlFVTTdRVUZCUXl4dFFrRkJTenRCUVVGRkxHMUNRVUZMTzBGQlFVVXNiVUpCUVVzN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEdkQ1FVRkpMRWxCUVVVc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETzBGQlFVVXNaMEpCUVVVc1JVRkJReXhKUVVGSExFVkJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkhMRVZCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEhRVUZGTEVsQlFVY3NSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFZEJRVVVzU1VGQlJ5eEZRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1IwRkJSU3hKUVVGSExFVkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVjc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVkQlFVVXNTVUZCUnl4RlFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zUjBGQlJTeEpRVUZITEVWQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhIUVVGRkxFbEJRVWNzUlVGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWRCUVVVc1NVRkJSeXhGUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkhMRWxCUVVVc1JVRkJSU3hEUVVGRExFbEJRVVVzUjBGQlJUdEJRVUZGTEdkQ1FVRkZMRVZCUVVVc1EwRkJRenRCUVVGRkxHZENRVUZGTzBGQlFVRXNZMEZCUXl4TlFVRkxPMEZCUVVFc1kwRkJkVUlzVFVGQlN6dEJRVUZCTEdOQlFWY3NUVUZCU3p0QlFVRkJMR05CUVZjc1RVRkJTenRCUVVGQkxHTkJRVXNzVFVGQlN6dEJRVUZCTEdOQlFXTXNUVUZCU3p0QlFVRkJMR05CUVZFc1RVRkJTenRCUVVGQkxHTkJRVmNzVFVGQlN6dEJRVUZCTEdOQlFWY3NUVUZCU3p0QlFVRkJMR05CUXpkbExFOUJRVTA3UVVGQlFTeGpRVUZMTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3hqUVVGWExFOUJRVTA3UVVGQlFTeGpRVUZYTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3hqUVVGTExFOUJRVTA3UVVGQlFTeGpRVUZMTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3hqUVVGTExFOUJRVTA3UVVGQlFTeGpRVUZMTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3hqUVVGTExFOUJRVTA3UVVGQlFTeGpRVUZMTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3hqUVVGTExFOUJRVTA3UVVGQlFTeGpRVUZMTEU5QlFVMDdRVUZCUVN4alFVRkxMRTlCUVUwN1FVRkJRU3hqUVVGTExFOUJRVTA3UVVGQlFTeFpRVUZKTzBGQlFVVXNjVUpCUVZFc1MwRkJTenRCUVVGRkxHdENRVUZGTEVWQlFVVXNVVUZCVVN4SlFVRkpMRTlCUVU4c1IwRkJSU3hIUVVGSExFZEJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZCUlN4blFrRkJTU3hKUVVGRkxESkVRVUV5UkN4TlFVRk5MRWRCUVVjc1IwRkJSU3hKUVVGRkxIZEdRVUYzUml4TlFVRk5MRWRCUVVjN1FVRkJSU3huUWtGQlJTeEZRVUZETEUxQlFVc3NUMEZCUnl4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRkxGVkJRVlVzUjBGQlJTeERRVUZETEVkQlFVVXNUVUZCU3l4UFFVRkhMRVZCUVVVc1JVRkJSU3hGUVVGRkxFZEJRVVVzVFVGQlN5eFBRVU42Wml4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRkxGVkJRVlVzUjBGQlJTeERRVUZETEVkQlFVVXNUVUZCU3l4UFFVRkhMRVZCUVVVc1JVRkJSU3hGUVVGRkxFZEJRVVVzVFVGQlN5eFBRVUZITEVkQlFVY3NSVUZCUlN4TFFVRkhMRkZCUVUwc1RVRkJTU3hIUVVGRkxFTkJRVU1zUjBGQlJTeE5RVUZMTEU5QlFVY3NSVUZCUlN4RlFVRkZMRWxCUVVjc1EwRkJReXhIUVVGRkxFMUJRVXNzVDBGQlJ5eEZRVUZGTEVWQlFVVXNTVUZCUnl4SFFVRkZMRWRCUVVjc1IwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNVMEZCVXl4RlFVRkZMRlZCUVZVc1EwRkJReXhIUVVGRkxFMUJRVXNzVDBGQlJ5eEZRVUZGTEVOQlFVTXNSMEZCUlN4TlFVRkxMRTlCUVVjc1JVRkJSU3hGUVVGRkxFbEJRVWNzUTBGQlF5eEhRVUZGTEUxQlFVc3NUMEZCUnp0QlFVRkRMR3RDUVVGRkxFVkJRVVU3UVVGQlJ5eHRRa0ZCUnl4SlFVRkZMRWxCUVVVc1MwRkJSeXhMUVVGSExFMUJRVWtzUzBGQlJ6dEJRVUZKTEhGQ1FVRlBMRVZCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVUVzV1VGQlF5eEhRVUZGTEUxQlFVc3NUMEZCUnp0QlFVRkRMSFZDUVVGUkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVkQlFVVXNTMEZCUnl4RlFVRkZMRXRCUVVjc1IwRkJSU3hOUVVGSkxFVkJRVVVzUlVGQlJTeExRVUZITEVsQlFVa3NTVUZCUlN4TFFVRkhMRWxCUVVrc1IwRkJSenRCUVVGRk8wRkJRVU1zY1VKQlFVOHNSVUZCUlN4RlFVRkZMRXRCUVVjc1IwRkJSU3hEUVVGRE8wRkJRVUVzV1VGQlF5eEhRVUZGTEUxQlFVc3NUMEZCUnl4RlFVRkZMRVZCUVVVc1MwRkJSeXhIUVVGRkxFTkJRVU1zUjBGQlJTeE5RVUZMTEU5QlFVY3NSVUZCUlN4RlFVRkZMRWxCUVVjc1EwRkJReXhIUVVGRkxFMUJRVXNzVFVGQlNTeE5RVUZMTEUxQlFVc3NUMEZCUnl4TFFVRkhMRVZCUVVVc1RVRkJTU3hMUVVGSExFVkJRVVVzUzBGQlJ5eFBRVUZMTEUxQlFVc3NUVUZCU3l4UFFVRkhMRVZCUVVVc1JVRkJSU3hKUVVGSExFTkJRVU1zUjBGQlJTeE5RVUZMTEUxQlFVa3NTMEZCU3l4TlFVRkxMRTlCUVVjc1JVRkJSU3hOUVVGSkxFZEJRVVVzVFVGQlN5eFBRVUZITEVWQlFVVXNTMEZCU3l4UFFVRlBMRVZCUVVVc1MwRkJSeXhKUVVGRkxFVkJRVVVzVFVGQlNTeERRVUZETEVkQlFVVXNRMEZCUXl4SFFVRkZMRTFCUVVzc1QwRkRibVk3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRXRCUVVzc1QwRkJUeXhGUVVGRkxFdEJRVWNzUzBGQlJ5eEZRVUZGTEV0QlFVY3NTMEZCUnl4TFFVRkhMRU5CUVVNN1FVRkJSU3h2UWtGQlNTeEZRVUZGTEV0QlFVY3NUVUZCU1N4RlFVRkZMRXRCUVVjc1MwRkJSeXhMUVVGSE8wRkJRVWtzYTBKQlFVYzdRVUZCUlN4elFrRkJTU3hOUVVGSkxFdEJRVWNzUlVGQlJTeExRVUZITEUxQlFVa3NSVUZCUlN4TlFVRkpMRWRCUVVVc1MwRkJSeXhMUVVGSExFdEJRVWNzUzBGQlJ5eEZRVUZGTEVWQlFVVXNSVUZCUlN4TlFVRkpMRWxCUVVVN1FVRkJRU3h0UWtGQlVUdEJRVUZETEc5Q1FVRkZPMEZCUVVjc2IwSkJRVWtzUzBGQlJ5eEZRVUZGTEV0QlFVY3NTVUZCUlN4RlFVRkZMRXRCUVVjc1MwRkJSenRCUVVGRkxHbENRVUZETEV0QlFVY3NTMEZCUnl4TFFVRkhMRXRCUVVjc1JVRkJSU3hGUVVGRkxFdEJRVWNzVFVGQlNTeERRVUZETEUxQlFVazdRVUZCUVN4alFVRkhPMEZCUVVNc2NVSkJRVThzUlVGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4WlFVRkRMRWRCUVVVc1RVRkJTeXhQUVVGSExFVkJRVVVzU1VGQlJ5eE5RVUZMTEU5QlFVY3NSVUZCUlN4TFFVRkxMRTlCUVU4c1JVRkJSU3hMUVVGSExFdEJRVWNzUlVGQlJTeExRVUZITEV0QlFVY3NTMEZCUnl4RFFVRkRMRWRCUVVVc1EwRkJReXhIUVVGRkxFMUJRVXNzVVVGQlNTeEZRVUZGTEV0QlFVY3NUVUZCVFN4VFFVRlRMRVZCUVVVc1ZVRkJWU3hEUVVGRExFZEJRVVVzVFVGQlN5eFBRVUZITEVWQlFVVXNTMEZCUnl4TlFVRkxMRTFCUVVzc1QwRkJSenRCUVVGRExHdENRVUZGTEVWQlFVVTdRVUZCUnl4clFrRkJTU3hKUVVGRkxFdEJRVWM3UVVGQlJTeHJRa0ZCUlN4TFFVRkxMRWxCUVVrc1EwRkJReXhKUVVGRk8wRkJRVWNzYzBKQlFVOHNTVUZCUlN4TlFVRkpMRTlCUVVzc1QwRkJUeXhWUVVGUkxFbEJRVVVzUzBGQlJ5eE5RVUZKTEVsQlFVVXNSMEZCUnl4RlFVRkZMRTFCUVUwc1JVRkJSVHRCUVVGQkxGbEJRVU1zUjBGQlJTeE5RVUZMTEU5QlFVY3NSVUZCUlN4SlFVRkhMRTFCUVVzc1RVRkJTU3hKUVVGSE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4UlFVRlJMRTlCUVUwc1RVRkJWVHRCUVVGRkxHbENRVUZKTEV0QlFVczdRVUZCUlN4blFrRkJSU3hUUVVGVExFTkJRVU1zVFVGRGNtZENMRWxCUVVVc1JVRkJSU3hSUVVGUkxFbEJRVWtzVDBGQlR5eEhRVUZGTEVkQlFVY3NSMEZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGQlJ5eG5Ra0ZCUlN4RlFVRkZMRkZCUVZFc1UwRkJVU3hIUVVGSE8wRkJRVVVzWjBKQlFVVXNSMEZCUnl4RFFVRkRPMEZCUVVVc1owSkJRVWNzUlVGQlJTeFRRVUZQTzBGQlFVVXNjVUpCUVU4N1FVRkJSU3hqUVVGRkxFbEJRVWtzUjBGQlJTeE5RVUZKTEVOQlFVTTdRVUZCUlN4dFFrRkJUeXhGUVVGRkxGTkJRVTg3UVVGQlFTeFZRVUZETzBGQlFVTXNiVUpCUVZFc1MwRkJSeXhOUVVGTkxFZEJRVWNzUjBGQlJTeExRVUZITEVkQlFVVXNUVUZCU1N4SlFVRkhMRVZCUVVVN1FVRkJSeXhsUVVGSExFVkJRVVVzU1VGQlJTeFBRVUZQTEdGQlFXRXNSVUZCUlR0QlFVRkZMR1ZCUVVjN1FVRkJSeXhqUVVGRkxFVkJRVVVzWlVGQllTeGpRVUZqTEUxQlFVczdRVUZCUVN4WlFVRkRMRmxCUVZrc1IwRkJSVHRCUVVGRExHOUNRVUZOTEVOQlFVTTdRVUZCUlN4dFFrRkJTeXhQUVVGTE8wRkJRVUVzV1VGQll6dEJRVUZCTEZWQlFVTTdRVUZCUlN4WlFVRkZMR2RDUVVGakxHTkJRV01zVFVGQlN6dEJRVUZCTEZsQlFVTXNXVUZCV1N4SFFVRkZPMEZCUVVNc2IwSkJRVTBzUTBGQlF6dEJRVUZGTEcxQ1FVRkxMRTlCUVVzN1FVRkJRU3haUVVGbE8wRkJRVUVzVlVGQlF6dEJRVU0xV0N4cFFrRkJUeXhQUVVGUExFZEJRVWNzVjBGQlZTeEZRVUZETEVsQlFVa3NSMEZCUlR0QlFVRkRMRzFDUVVGUExFdEJRVXNzUjBGQlJ5eERRVUZETzBGQlFVRXNWVUZCUXl4SFFVRkZMRWxCUVVrc1IwRkJSVHRCUVVGRExHMUNRVUZQTEZkQlFWTXNTMEZCU3l4SFFVRkhMRU5CUVVNN1FVRkJRU3hWUVVGRExFZEJRVVVzUjBGQlJ5eEhRVUZGTzBGQlFVTXNaMEpCUVVrc1NVRkJSU3hMUVVGTExFZEJRVWNzU1VGQlNTeExRVUZITEV0QlFVc3NSMEZCUnp0QlFVRlBMR2xDUVVGTExFZEJRVWNzUTBGQlF5eEpRVUZGTzBGQlFVVXNiVUpCUVU4N1FVRkJRU3hWUVVGRExFZEJRVVVzUjBGQlJ5eEhRVUZGTzBGQlFVTXNhVUpCUVVzc1IwRkJSeXhEUVVGRExFbEJRVVU3UVVGQlR5eHBRa0ZCU3l4SFFVRkhMRXRCUVVzc1EwRkJRenRCUVVGQkxGVkJRVU1zUlVGQlF5eERRVUZETzBGQlFVVXNXVUZCUlN4SFFVRkhMRXRCUVVzc1JVRkJReXhQUVVGTkxFOUJRVTBzUjBGQlJTeEZRVUZETEU5QlFVMHNTMEZCU1N4SFFVRkZMRVZCUVVNc1QwRkJUU3hMUVVGRkxFZEJRVVVzUlVGQlF5eFBRVUZOTEUxQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc1MwRkJSeXhGUVVGRkxFZEJRVWM3UVVGQlR5eFpRVUZGTEhOQ1FVRnZRaXhOUVVGSk8wRkJRVU1zY1VKQlFWRXNTVUZCUlN4SFFVRkZMRWxCUVVVc1JVRkJSU3hKUVVGSExFbEJRVVVzUlVGQlJTeEhRVUZITEZGQlFVOHNSVUZCUlR0QlFVRkZMSGxDUVVGVExFVkJRVVVzUjBGQlJ5eERRVUZETEV0QlFVY3NSVUZCUlR0QlFVRkZMRzFDUVVGUE8wRkJRVUVzVlVGQlF6dEJRVU5xV0N4alFVRkpMRXRCUVVjc1JVRkJReXhIUVVGRkxGTkJRVk1zUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4dFFrRkJTenRCUVVGRkxGbEJRVU1zU1VGQlNTeEhRVUZITEVOQlFVTXNSVUZCUnl4SFFVRkhMRTFCUVVrc1IwRkJSU3hOUVVGSkxFTkJRVU03UVVGQlJTeHBRa0ZCUnp0QlFVRkZPMEZCUVVzc2EwSkJRVTA3UVVGQlFTeFZRVUZITEVkQlFVVXNSMEZCUlN4WFFVRlZPMEZCUVVNc2JVSkJRVTg3UVVGQlFTeFZRVUZETEVkQlFVVXNTVUZCUnl4WFFVRlZPMEZCUVVFc1ZVRkJReXhIUVVGRkxFZEJRVVVzVjBGQlZUdEJRVUZCTEZWQlFVTXNSMEZCUlN4SFFVRkZMRmRCUVZVN1FVRkJRU3hWUVVGRExFZEJRVVVzUjBGQlJTeFhRVUZWTzBGQlFVTXNiVUpCUVU4N1FVRkJRU3hWUVVGRExFZEJRVVVzUjBGQlJTeFhRVUZWTzBGQlFVRXNWVUZCUXl4SFFVRkZMRWRCUVVVc1YwRkJWVHRCUVVGQkxGVkJRVU1zUjBGQlJTeEhRVUZGTEZkQlFWVTdRVUZCUVN4VlFVRkRMRWRCUVVVc1IwRkJSU3hYUVVGVk8wRkJRVUVzVlVGQlF5eEhRVUZGTEVkQlFVVXNWMEZCVlR0QlFVRkJMRlZCUVVNc1IwRkJSU3hIUVVGRkxGZEJRVlU3UVVGQlFTeFZRVUZETEVkQlFVVXNTVUZCUnl4WFFVRlZPMEZCUVVFc1ZVRkJReXhIUVVGRkxFZEJRVVVzVjBGQlZUdEJRVUZCTEZWQlFVTXNSMEZCUlN4SFFVRkZMRk5CUVZNc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNiVUpCUVVzN1FVRkJSU3huUWtGQlJTeEZRVUZGTEVOQlFVTTdRVUZCUlN4blFrRkJTU3hKUVVGRkxFMUJRVWtzUlVGQlJTeFJRVUZSTEVkQlFVYzdRVUZCUlN4clFrRkJTU3hMUVVGSExFMUJRVWtzVDBGQlN6dEJRVUZKTEdOQlFVVXNUVUZCU1N4SFFVRkZMRVZCUVVNc1RVRkJTeXhIUVVGRkxHTkJRV0VzVDBGQlJ5eEhRVUZGTEZsQlFWY3NVMEZCVXl4SFFVRkZMRWRCUVVVN1FVRkJReXhyUWtGQlJ5eFpRVUZWTEU5QlFVOHNTMEZCUnl4WlFVRlZMRTlCUVU4N1FVRkJSU3h6UWtGQlRTeEpRVUZKTEZWQlFWVXNiVUpCUVcxQ0xFZEJRVWNzUTBGQlF5eERRVUZETEZGQlFWRXNTMEZCU3l4SlFVRkpMRVZCUVVVN1FVRkROV2hDTEd0Q1FVRkhMRWxCUVVVc1MwRkJSeXhKUVVGRk8wRkJRVVVzYzBKQlFVMHNTVUZCU1N4VlFVRlZMSEZDUVVGeFFpeEhRVUZITEVOQlFVTXNRMEZCUXl4M1JFRkJkMFFzUTBGQlF5eDNRMEZCZDBNc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNUdEJRVUZGTEhGQ1FVRlBPMEZCUVVFc1dVRkJReXhIUVVGRkxHZENRVUZsTEVkQlFVVXNjMEpCUVhGQ0xFZEJRVWNzUjBGQlJTeE5RVUZKTEVkQlFVVXNRMEZCUXl4RFFVRkRMRWRCUVVVc1NVRkJSeXhMUVVGSkxFTkJRVU03UVVGQlFTeFZRVUZETEVkQlFVVXNTVUZCUnl4VFFVRlRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eG5Ra0ZCUlN4RlFVRkZMRTFCUVVrc1EwRkJRenRCUVVGRkxHTkJRVVVzVFVGQlNTeEhRVUZGTEVWQlFVTXNUVUZCU3l4SFFVRkZMR05CUVdFc1UwRkJVeXhIUVVGRk8wRkJRVU1zY1VKQlFVMHNRMEZCUXl4RFFVRkRPMEZCUVVFc1dVRkJReXhIUVVGRkxGbEJRVmNzVTBGQlV5eEhRVUZGTEVkQlFVVTdRVUZCUXl4eFFrRkJUeXhKUVVGRkxFbEJRVVU3UVVGQlFTeFpRVUZETEVkQlFVVXNaMEpCUVdVc1IwRkJSU3h6UWtGQmNVSXNVMEZCVXl4SFFVRkZPMEZCUVVNc2NVSkJRVThzUzBGQlN5eGhRVUZoTEVWQlFVVXNUVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkJRU3haUVVGRExFZEJRVVVzU1VGQlJ5eExRVUZKTEVOQlFVTTdRVUZCUVN4VlFVRkRMRWRCUVVVc1NVRkJSeXhUUVVGVExFZEJRVVVzUjBGQlJUdEJRVUZETEdkQ1FVRkZMRVZCUVVVc1RVRkJTU3hEUVVGRE8wRkJRVVVzWTBGQlJTeE5RVUZKTEVkQlFVVTdRVUZCUVN4alFVRkRMRTFCUVVzN1FVRkJRU3hqUVVONFppeGpRVUZoTEU5QlFVYzdRVUZCUXl4dlFrRkJTU3hKUVVGRkxFVkJRVVVzUTBGQlF6dEJRVUZGTEcxQ1FVRkhMRU5CUVVNN1FVRkJSU3gxUWtGQlR6dEJRVUZCTEdOQlFVTTdRVUZCUVN4alFVRkZMRmxCUVZjc1EwRkJReXhIUVVGRkxFMUJRVWtzUlVGQlJTeERRVUZETzBGQlFVRXNZMEZCUlN4blFrRkJaVHRCUVVGQkxHTkJRVVVzYzBKQlFYRkNPMEZCUVVFc1kwRkJSeXhKUVVGSE8wRkJRVUVzV1VGQlNTeERRVUZETzBGQlFVRXNWVUZCUXl4SFFVRkZMRWRCUVVVc1UwRkJVeXhIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEdkQ1FVRkZMRVZCUVVVc1RVRkJTU3hEUVVGRE8wRkJRVVVzWTBGQlJTeE5RVUZKTEVkQlFVVXNSVUZCUXl4TlFVRkxMRWRCUVVVc1kwRkJZU3hQUVVGSExFZEJRVVVzV1VGQlZ5eERRVUZETEVkQlFVVXNUVUZCU1N4SFFVRkZMR2RDUVVGbExFZEJRVVVzYzBKQlFYRkNMRWRCUVVjc1IwRkJSU3hOUVVGSkxFTkJRVU1zUjBGQlJTeEpRVUZITEV0QlFVa3NRMEZCUXp0QlFVRkJMRlZCUVVNc1IwRkJSU3hIUVVGRkxGTkJRVk1zUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVXM3UVVGQlJTeHRRa0ZCU3p0QlFVRkZMR2RDUVVGRkxFVkJRVVVzVFVGQlNTeERRVUZETzBGQlFVVXNiVUpCUVVzc1RVRkJTU3hKUVVGRk8wRkJRVmtzWjBKQlFVVXNUMEZCUnp0QlFVRkZMR2RDUVVGSExFMUJRVWtzUjBGQlJUdEJRVUZETEd0Q1FVRkpMRWxCUVVVc1MwRkJSeXhKUVVGRk8wRkJRVVVzYTBKQlFVVXNUMEZCUnl4TFFVRkhMRTFCUVVrN1FVRkJRU3haUVVGRE8wRkJRVU1zWjBKQlFVa3NTVUZCUlN4RlFVRkZMRk5CUVZNc1ZVRkJWU3hKUVVGRkxGTkJRVk1zUjBGQlJTeEhRVUZGTzBGQlFVTXNjVUpCUVU4c1RVRkJTVHRCUVVGQkxGbEJRVU1zU1VGQlJTeFRRVUZUTEVkQlFVVXNSMEZCUlR0QlFVRkRMSEZDUVVGUE8wRkJRVUVzV1VGQlF6dEJRVUZGTEdOQlFVVXNSMEZCUlR0QlFVRkJMR05CUVVNc1RVRkJTenRCUVVGQkxHTkJRVVVzWTBGQllUdEJRVUZCTEdOQlFVVXNXVUZCVnp0QlFVRkJMR05CUVVVc1owSkJRV1U3UVVGQlFTeGpRVU5xWjBJc2MwSkJRWEZDTEVkQlFVY3NSMEZCUlN4SFFVRkZMRTFCUVVrc1EwRkJRenRCUVVGQkxHTkJRVVVzU1VGQlJ6dEJRVUZCTEZsQlFVa3NRMEZCUXp0QlFVRkJMRlZCUVVNc1IwRkJSU3hIUVVGRkxGTkJRVk1zUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4eFFrRkJVeXhGUVVGRkxFZEJRVVU3UVVGQlF5eHhRa0ZCVHl4SlFVRkpMRVZCUVVVc1JVRkJSU3hSUVVGUExFVkJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SFFVRkZMRVZCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zUTBGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUXl4blFrRkJTU3hKUVVGRkxFTkJRVU1zVjBGQlZTeFpRVUZYTEZsQlFWY3NZVUZCV1N4WlFVRlhMR0ZCUVZrc1kwRkJZU3hqUVVGaExHVkJRV01zWTBGQll5eEZRVUZGTEVOQlFVTTdRVUZCUlN4blFrRkJSU3hGUVVGRkxFMUJRVWtzUTBGQlF6dEJRVUZGTEdOQlFVVXNUVUZCU1N4SFFVRkZMRVZCUVVNc1RVRkJTeXhIUVVGRkxHTkJRV0VzUjBGQlJTeG5Ra0ZCWlN4SFFVRkZMSE5DUVVGeFFpeEZRVUZETEVkQlFVVXNSVUZCUXl4SlFVRkhMRXRCUVVVc1EwRkJRenRCUVVGQkxGVkJRVU1zUjBGQlJTeEhRVUZGTEZOQlFWTXNSMEZCUlN4SFFVRkZPMEZCUVVNc1owSkJRVVVzUlVGQlJTeE5RVUZKTEVOQlFVTTdRVUZCUlN4blFrRkJTU3hKUVVGRkxHdENRVUZuUWp0QlFVRkZMR05CUVVVc1RVRkJTU3hIUVVGRkxFVkJRVU1zVFVGQlN5eEhRVUZGTEdOQlFXRXNVMEZCVXl4SFFVRkZPMEZCUVVNc2EwSkJRVWtzU1VGQlJTeEZRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWRCUVVVc1NVRkJSU3hKUVVGRk8wRkJRVVVzYTBKQlFVYzdRVUZCUlN4NVFrRkJVU3hKUVVGRkxFZEJRVVVzU1VGQlJTeEhRVUZGTEV0QlFVY3NSMEZCUlN4RlFVRkZMRWRCUVVVN1FVRkJReXh6UWtGQlNTeEpRVU16Wml4SlFVRkZPMEZCUVVVc2MwSkJRVWNzUzBGQlJ5eExRVUZITEV0QlFVY3NSVUZCUlN4TlFVRkpMRU5CUVVNc1IwRkJSVHRCUVVGRExIZENRVUZGTEVWQlFVVXNSMEZCUlN4SlFVRkZMRU5CUVVNN1FVRkJSU3gzUWtGQlJ5eFhRVUZUTzBGQlFVVXNNRUpCUVVrc1NVRkJSVHRCUVVGQk8wRkJRVThzTWtKQlFVY3NUMEZCVHl4aFFVRmhMRU5CUVVNc1IwRkJSU3hMUVVGSE8wRkJRVVVzZDBKQlFVVXNTVUZCUlR0QlFVRkJMR3RDUVVGRE8wRkJRVUVzWjBKQlFVTTdRVUZCUVN4dFFrRkJTenRCUVVGRExHOUNRVUZGTEUxQlFVMHNRMEZCUXp0QlFVRkZMSEZDUVVGSkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVkQlFVVXNSVUZCUlR0QlFVRkZMRzlDUVVGRkxFTkJRVU1zU1VGQlJTeFBRVUZQTEdGQlFXRXNSVUZCUlN4SlFVRkZMRTFCUVVrc1EwRkJReXhEUVVGRE8wRkJRVVVzYjBKQlFVVXNSVUZCUlN4TFFVRkxMRVZCUVVVN1FVRkJRU3hqUVVGRE8wRkJRVU1zWjBKQlFVVXNRMEZCUXp0QlFVRkZMSEZDUVVGUE8wRkJRVUVzV1VGQlF5eEhRVUZGTEZsQlFWY3NVMEZCVXl4SFFVRkZMRWRCUVVVN1FVRkJReXd5UWtGQllTeG5Ra0ZCWXl4SlFVRkZMRWxCUVVrc1YwRkJWeXhEUVVGRE8wRkJRVWNzYTBKQlFVa3NTVUZCUlN4WlFVRlZMRTlCUVU4N1FVRkJSU3hyUWtGQlJ5eEZRVUZGTEV0QlFVY3NZVUZCWVN4alFVRlpMR0ZCUVdFc2NVSkJRVzFDTEdGQlFXRTdRVUZCVnl4elFrRkJUU3hKUVVGSkxFVkJRVVVzZFVOQlFYVkRPMEZCUVVVc2EwSkJRVWtzU1VGQlJTeExRVUZITEVsQlFVVXNSVUZCUlN4RFFVRkRMRWxCUVVVc1JVRkJSVHRCUVVGUExHdENRVUZKTEVsQlFVVXNSMEZCUnl4SlFVRkZMRWxCUVVVc1EwRkJReXhIUVVGRkxFbEJRVVVzU1VGQlJUdEJRVUZGTEdkQ1FVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVU3UVVGRGJtWXNhMEpCUVVjc1MwRkJSenRCUVVGRkxHdENRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWxCUVVVc1EwRkJRenRCUVVGQkxIVkNRVUZWTzBGQlFVVXNjVUpCUVVrc1NVRkJSU3hIUVVGRkxFbEJRVVVzUjBGQlJTeEZRVUZGTEVkQlFVVTdRVUZCUXl4elFrRkJTU3hKUVVGRkxFVkJRVVVzVjBGQlZ5eERRVUZETzBGQlFVVXNjMEpCUVVjc1RVRkJTVHRCUVVGRkxEQkNRVUZOTEVWQlFVVXNRMEZCUXl4SFFVRkZMRWxCUVVrc1JVRkJSU3gzUkVGQmQwUTdRVUZCUlN4dlFrRkJSU3hKUVVGRkxFMUJRVWtzUTBGQlF5eEpRVUZGTzBGQlFVRXNaMEpCUVVNN1FVRkJRVHRCUVVGTkxIRkNRVUZKTEVsQlFVVXNSMEZCUlN4SlFVRkZMRWRCUVVVc1JVRkJSVHRCUVVGRkxHOUNRVUZGTEVsQlFVVXNUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hEUVVGRE8wRkJRVVVzZFVKQlFVOHNTMEZCUnl4RlFVRkZMRXRCUVVzc1IwRkJSU3hEUVVGRE8wRkJRVVVzY1VKQlFVODdRVUZCUVN4WlFVRkRMRWRCUVVVc1owSkJRV1VzUjBGQlJTeHpRa0ZCY1VJc1NVRkJSeXhIUVVGSExFZEJRVVU3UVVGQlF5eG5Ra0ZCUlN4RFFVRkRPMEZCUVVFc1dVRkJReXhGUVVGRExFTkJRVU03UVVGQlFTeFZRVUZETEVkQlFVVXNSMEZCUlN4VFFVRlRMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zYlVKQlFVczdRVUZCUlN4dFFrRkJTenRCUVVGRkxHZENRVUZGTEVWQlFVVXNRMEZCUXp0QlFVRkZMR2RDUVVGSExFMUJRVWtzUjBGQlJUdEJRVUZETEd0Q1FVRkpMRWxCUVVVN1FVRkJSeXhyUWtGQlNTeEpRVUZGTzBGQlFVY3NhMEpCUVVrc1NVRkJSVHRCUVVGSExHdENRVUZKTEVsQlFVVXNUVUZCU1R0QlFVRkZMR3RDUVVGSkxFbEJRVVU3UVVGQlFTeFpRVUZETzBGQlFVMHNiMEpCUVVrc1RVRkJTU3hKUVVGRkxFbEJRVWNzU1VGQlJTeEpRVUZITEVsQlFVVXNTVUZCUnl4SlFVRkZMRTFCUVVrc1IwRkJSU3hKUVVGRk8wRkJRVWNzWTBGQlJTeE5RVUZKTEVkQlFVVXNSVUZCUXl4TlFVRkxMRWRCUVVVc1kwRkJZU3hQUVVGSE8wRkJRVU1zZFVKQlFWRXNTVUZCUlN4RlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFZEJRVVVzU1VGQlJTeEZRVUZGTEVkQlFVVXNSMEZCUlN4SlFVRkZMRWxCUVVVc1IwRkJSU3hKUVVOdVppeEhRVUZGTEV0QlFVY3NSMEZCUlN4RlFVRkZMRWRCUVVVN1FVRkJReXh2UWtGQlNTeEpRVUZGTEVsQlFVVXNTVUZCUlN4SlFVRkZPMEZCUVVVc2IwSkJRVWNzUzBGQlJ5eExRVUZITEV0QlFVY3NSVUZCUlN4TlFVRkpMRU5CUVVNN1FVRkJSU3h6UWtGQlJTeEZRVUZGTEVkQlFVVXNTVUZCUlN4RFFVRkRMRWRCUVVVc1YwRkJVeXhKUVVGRkxFbEJRVVVzUzBGQlJ5eExRVUZITEU5QlFVOHNZVUZCWVN4RFFVRkRMRWRCUVVVc1MwRkJSeXhKUVVGSExFbEJRVVVzU1VGQlJUdEJRVUZCTEdOQlFVTTdRVUZCUXl4blFrRkJSU3hEUVVGRE8wRkJRVVVzY1VKQlFVODdRVUZCUVN4WlFVRkRMRWRCUVVVc1dVRkJWeXhEUVVGRExFZEJRVVVzVFVGQlNUdEJRVUZETEd0Q1FVRkhMRmxCUVZVc1QwRkJUenRCUVVGRkxITkNRVUZOTEVsQlFVa3NSVUZCUlN3MlEwRkJOa01zUTBGQlF5eEZRVUZGTzBGQlFVVXNhMEpCUVVrc1NVRkJSU3hGUVVGRkxFTkJRVU1zUjBGQlJTeEpRVUZGTEVkQlFVY3NTVUZCUlN4SlFVRkZMRU5CUVVNN1FVRkJSU3huUWtGQlJTeE5RVUZKTEVOQlFVTXNTVUZCUlN4TFFVRkhPMEZCUVVVc1owSkJRVVVzUjBGQlJTeEpRVUZGTEVkQlFVVXNTVUZCUlN4RFFVRkRPMEZCUVVVc2RVSkJRVThzUzBGQlJ5eEZRVUZGTEV0QlFVc3NSMEZCUlN4RFFVRkRPMEZCUVVVc2NVSkJRVTg3UVVGQlFTeFpRVUZETEVkQlFVVXNaMEpCUVdVc1IwRkJSU3h6UWtGQmNVSXNTVUZCUnl4SFFVRkhMRWRCUVVVN1FVRkJReXhuUWtGQlJTeERRVUZETzBGQlFVRXNXVUZCUXl4RlFVRkRMRU5CUVVNN1FVRkJRU3hWUVVGRExFZEJRVVVzU1VGQlJ5eFRRVUZUTEVkQlFVVXNSMEZCUlR0QlFVRkRMR2RDUVVGRkxFVkJRVVVzVFVGQlNTeERRVUZETzBGQlFVVXNZMEZCUlN4TlFVRkpMRWRCUVVVc1JVRkJReXhKUVVGSExFMUJRVWNzVFVGQlN5eEhRVUZGTEdkQ1FVRmxMRWRCUVVVc1kwRkJZU3hOUVVGSk8wRkJRVUVzV1VGQlF5eEhRVUZGTEZsQlFWY3NUVUZCU1R0QlFVRkJMRmxCUVVNc1JVRkJReXhEUVVGRE8wRkJRVUVzVlVGQlF5eEhRVUZGTEVsQlFVY3NUVUZCU1N4TlFVRkhMRWRCUVVVc1UwRkJVeXhIUVVGRkxFZEJRMjVtTEVkQlFVVTdRVUZCUXl4dFFrRkJTenRCUVVGRkxHMUNRVUZMTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hOUVVGSkxFTkJRVU03UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRWRCUVVVc1YwRkJWenRCUVVGRkxHZENRVUZKTEVsQlFVVXNRMEZCUXl4SFFVRkZMRWxCUVVVc1JVRkJSU3hEUVVGRE8wRkJRVVVzWTBGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVVc2JVSkJRVThzUlVGQlJTeFhRVUZYTEVkQlFVVXNRMEZCUXp0QlFVRkJMRlZCUVVNc1IwRkJSU3hIUVVGRkxGTkJRVk1zUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVXM3UVVGQlJTeHRRa0ZCU3p0QlFVRkZMRzFDUVVGTE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4TlFVRkpMRU5CUVVNN1FVRkJSU3huUWtGQlJTeEZRVUZGTEUxQlFVa3NRMEZCUXp0QlFVRkZMR2RDUVVGRkxFVkJRVVVzUTBGQlF6dEJRVUZGTEdkQ1FVRkpMRWxCUVVVc1EwRkJRenRCUVVGRkxHTkJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRU5CUVVNN1FVRkJSU3h0UWtGQlR5eEZRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJRU3hWUVVGRExFZEJRVVVzUjBGQlJTeFRRVUZUTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXh0UWtGQlN6dEJRVUZGTEcxQ1FVRkxPMEZCUVVVc1owSkJRVVVzUlVGQlJTeE5RVUZKTEVOQlFVTTdRVUZCUlN4blFrRkJSU3hGUVVGRkxFMUJRVWtzUTBGQlF6dEJRVUZGTEdkQ1FVRkZMRVZCUVVVc1EwRkJRenRCUVVGRkxHTkJRVVVzUjBGQlJTeEhRVUZGTEUxQlFVc3NRMEZCUXp0QlFVRkJMRlZCUVVNc1IwRkJSU3hIUVVGRkxFbEJRVWNzUjBGQlJTeFRRVUZUTEVkQlFVVXNSMEZCUlR0QlFVRkRMRzFDUVVGTE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4TlFVRkpMRU5CUVVNN1FVRkJSU3huUWtGQlJTeEZRVUZGTEVOQlFVTTdRVUZCUlN4dFFrRkJUeXhMUVVGSE8wRkJRVUVzVlVGQlF5eEhRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZPMEZCUVVNc2JVSkJRVXM3UVVGQlJTeG5Ra0ZCUnl4TlFVRkpPMEZCUVVVc2NVSkJRVThzUlVGQlJTeEhRVUZITEVOQlFVTTdRVUZCUlN4blFrRkJSU3hGUVVGRkxFTkJRVU03UVVGQlJTeHRRa0ZCVHl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU03UVVGQlFTeFZRVUZETEVkQlFVVXNSMEZCUlN4VFFVRlRMRWRCUVVVc1IwRkJSVHRCUVVGRExHZENRVUZKTEVsQlFVVXNSMEZCUnl4SFFVRkZMRTFCUVVrc1EwRkJReXhIUVVGRkxFbEJRVVVzUlVGQlJTeERRVUZETzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hQUVVGTExFOUJRVXNzUlVGQlJTeE5RVUZOTEVOQlFVTXNSVUZCUlN4SlFVRkpMRk5CUVZNc1IwRkJSVHRCUVVGRExIRkNRVUZQTEVWQlFVVTdRVUZCUVN4WlFVRkpMRU5CUVVNc1JVRkJSU3hMUVVGTExFZEJRVWNzU1VGRGVHaENPMEZCUVVrc1owSkJRVWtzU1VGQlJTeEhRVUZITEVOQlFVTTdRVUZCUlN4blFrRkJSeXhYUVVGVE8wRkJRVVVzY1VKQlFVODdRVUZCUlN4blFrRkJSU3hEUVVGRExGTkJRVk03UVVGQlJTeHhRa0ZCVVN4SlFVRkZMRU5CUVVNc1EwRkJReXhIUVVGRkxFbEJRVVVzU1VGQlJ5eEpRVUZGTEVkQlFVVXNTVUZCUlN4SlFVRkZMRWRCUVVVc1JVRkJSVHRCUVVGRkxHOUNRVUZKTEUxQlFVa3NTVUZCUlN4UFFVRkxMRTFCUVVrc1VVRkJUU3hIUVVGRkxFVkJRVVVzUzBGQlN5eFpRVUZWTEVOQlFVTXNSMEZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hKUVVGRkxFTkJRVU1zUTBGQlF6dEJRVUZGTEdkQ1FVRkpMRWxCUVVVc2NVSkJRVzFDTEVkQlFVY3NhMEpCUVdkQ0xFTkJRVU1zU1VGQlJTeDVRMEZCZDBNc1NVRkJSVHRCUVVGRkxHbENRVUZKTEVsQlFVVXNSMEZCUlN4SlFVRkZMRWxCUVVVc1IwRkJSU3hGUVVGRk8wRkJRVVVzYlVKQlFVY3NaMEpCUVdNc1NVRkJSU3hsUVVGaExFbEJRVVVzWjBOQlFUaENMRWxCUVVVc1RVRkJTU3hKUVVGRkxFMUJRVWtzVVVGQlR5eExRVUZITEVWQlFVVXNTVUZCUlN4RFFVRkRMRVZCUVVVN1FVRkJaU3hwUWtGQlJ5d3JRa0ZCTmtJc1NVRkJSVHRCUVVGUExHbENRVUZKTEVsQlFVVXNSMEZCUlN4SlFVRkZMRWxCUVVVc1IwRkJSU3hGUVVGRk8wRkJRVVVzWjBKQlFVVXNTVUZCUlN4RFFVRkRMRVZCUVVVc2FVSkJRV1VzUzBGQlJ5eG5Ra0ZCWXl4SlFVRkZMSE5DUVVGdlFpeEpRVUZGTzBGQlFWRXNZMEZCUlN4UFFVTm9aaXhMUVVGSE8wRkJRWEZFTEdOQlFVVXNTMEZCU3l4SlFVRkZMRTFCUVUwN1FVRkJSU3huUWtGQlJTeEhRVUZITEVOQlFVTXNSVUZCUlN4TlFVRk5MRTFCUVVzc1EwRkJRenRCUVVGRkxHZENRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMRzFDUVVGUExFZEJRVWNzUTBGQlF5eEpRVUZGTzBGQlFVRXNWVUZCUXl4SFFVRkZMRWRCUVVVc1UwRkJVeXhIUVVGRkxFZEJRVVU3UVVGQlF5eHRRa0ZCU3p0QlFVRkZMR2RDUVVGRkxFVkJRVVVzVFVGQlNTeERRVUZETzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hEUVVGRE8wRkJRVVVzYlVKQlFVOHNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRenRCUVVGQkxGVkJRVU1zUjBGQlJTeEhRVUZGTEZOQlFWTXNSMEZCUlR0QlFVRkRMRzFDUVVGTE8wRkJRVVVzWjBKQlFVVXNUVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhGUVVGRkxFMUJRVWs3UVVGQlFTeFZRVUZGTEVkQlFVVXNSMEZCUlN4VFFVRlRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHRRa0ZCU3p0QlFVRkZMRzFDUVVGTE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4TlFVRkpMRU5CUVVNN1FVRkJSU3huUWtGQlNTeEpRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMR3RDUVVGSkxFbEJRVVVzUjBGQlJ5eERRVUZETEVkQlFVVXNSMEZCUnl4RFFVRkRMRWxCUVVVN1FVRkJSeXh0UWtGQlR5eEZRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVFc1ZVRkJReXhIUVVGRkxFZEJRVVVzVjBGQlZUdEJRVUZETEcxQ1FVRlBMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRVUVzVlVGQlF5eEhRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZPMEZCUVVNc1owSkJRVVVzUlVGQlJTeE5RVUZKTEVOQlFVTTdRVUZCUlN4eFFrRkJVU3hKUVVGRkxFMUJRVTBzUlVGQlJTeE5RVUZOTEVkQlFVVXNTVUZCUlN4SFFVRkZMRWxCUVVVc1JVRkJSU3hSUVVGUE8wRkJRVWtzWjBKQlFVVXNRMEZCUXl4SlFVRkZMRVZCUVVVc1EwRkJRenRCUVVGRkxHMUNRVUZQTEVWQlFVVXNRMEZCUXp0QlFVRkJMRlZCUVVNc1IwRkJSU3hIUVVGRkxGTkJRVk1zUjBGQlJUdEJRVUZETEcxQ1FVRlBMRVZCUVVVc1JVRkJSU3hOUVVGSkxFTkJRVU1zUTBGQlF6dEJRVUZCTEZWQlFVTXNSMEZCUlN4SFFVRkZMRmRCUVZVN1FVRkJReXh0UWtGQlR5eEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVRkJMRlZCUVVNc1IwRkJSU3hIUVVGRkxGTkJRVk1zUjBGQlJUdEJRVUZETEcxQ1FVTXZaanRCUVVGRkxIRkNRVUZSTEVsQlFVVXNSVUZCUlN4RFFVRkRMRWRCUVVVc1JVRkJSU3hWUVVGUk8wRkJRVU1zYTBKQlFVa3NTVUZCUlN4RlFVRkZMRWxCUVVrN1FVRkJSU3huUWtGQlJTeEpRVUZKTEVWQlFVVXNRMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJReXhsUVVGSExFTkJRVU03UVVGQlFTeFZRVUZETEVkQlFVVXNSMEZCUlN4VFFVRlRMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zYlVKQlFVczdRVUZCUlN4dFFrRkJTenRCUVVGRkxHZENRVUZGTEVWQlFVVXNUVUZCU1N4RFFVRkRPMEZCUVVVc1owSkJRVVVzUlVGQlJTeERRVUZETzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hEUVVGRE8wRkJRVVVzWTBGQlJTeERRVUZETEVsQlFVVTdRVUZCUVN4VlFVRkRMRWRCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJUdEJRVUZETEcxQ1FVRkxPMEZCUVVVc1owSkJRVVVzUlVGQlJTeE5RVUZKTEVkQlFVVXNiVUpCUVcxQ08wRkJRVVVzWjBKQlFVVXNSVUZCUlN4eFFrRkJjVUlzUTBGQlF6dEJRVUZGTEcxQ1FVRlBMRVZCUVVVc1EwRkJRenRCUVVGQkxGVkJRVU1zUjBGQlJTeEhRVUZGTEZOQlFWTXNSMEZCUlN4SFFVRkZPMEZCUVVNc1owSkJRVVVzYjBKQlFXdENMRXRCUVVjc2JVSkJRV2xDTEVsQlFVVXNUVUZCU1N4UFFVRlBMRU5CUVVNN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEdkQ1FVRkZMRWxCUVVrc1MwRkJTeXhOUVVGSkxFTkJRVU03UVVGQlJTeGpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hqUVVGak8wRkJRVVVzWTBGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hqUVVGak8wRkJRVVVzWTBGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3haUVVGWk8wRkJRVVVzWTBGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hYUVVGWE8wRkJRVVVzWTBGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3haUVVGWk8wRkJRVVVzWTBGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hsUVVGbExFbEJRelZtTzBGQlFVc3NZMEZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFZRVUZWTzBGQlFVVXNZMEZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFdEJRVWNzUlVGQlJTeFJRVUZSTEVsQlFVVXNTMEZCU3l4SlFVRkpMRVZCUVVVc1pVRkJaU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRMRXRCUVVjc1VVRkJUVHRCUVVGQkxGVkJRVU1zUjBGQlJTeEhRVUZGTEZOQlFWTXNSMEZCUlN4SFFVRkZPMEZCUVVNc1owSkJRVVVzYjBKQlFXdENMRXRCUVVjc2JVSkJRV2xDTEVsQlFVVXNUVUZCU1N4UFFVRlBMRU5CUVVNN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEdkQ1FVRkZMRWxCUVVrc1MwRkJTeXhOUVVGSkxFTkJRVU03UVVGQlJTeGpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hYUVVGWE8wRkJRVVVzWTBGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hYUVVGWE8wRkJRVVVzWTBGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hUUVVGVE8wRkJRVVVzWTBGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hSUVVGUk8wRkJRVVVzWTBGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hUUVVGVE8wRkJRVVVzWTBGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3haUVVGWkxFbEJRVVU3UVVGQlN5eGpRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxFOUJRVTg3UVVGQlJTeGpRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1MwRkJSeXhGUVVGRkxFVkJRVVVzV1VGQldTeERRVUZETEVsQlFVVXNTMEZCUnl4SlFVRkpMRVZCUVVVc1UwRkJVeXhEUVVGRExFbEJRVVVzUlVGQlJTeFJRVUZSTEVsQlFVVXNTVUZCUlR0QlFVRkZMR05CUVVVc1NVRkJSU3hQUVVOb1ppeE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRXRCUVVjc1JVRkJSU3hyUWtGQmEwSTdRVUZCUnl4blFrRkJTU3hKUVVGSExFbEJRVWtzUzBGQlN5eEZRVUZGTEZsQlFWa3NSMEZCUlN4SFFVRkZMRU5CUVVNc1JVRkJSeXhyUWtGQmEwSXNSMEZCUlN4SlFVRkhMRWxCUVVrc1MwRkJTeXhGUVVGRkxGbEJRVmtzUjBGQlJTeEhRVUZGTEVOQlFVTXNSVUZCUnl4clFrRkJhMEk3UVVGQlJTeGpRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1MwRkJSeXhMUVVGSExFdEJRVWNzUlVGQlJTeHJRa0ZCYTBJc1MwRkJSeXhMUVVGTExFbEJRVWtzUjBGQlJTeERRVUZETEV0QlFVYzdRVUZCUVN4VlFVRkRMRWRCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVU3UVVGQlF5eHRRa0ZCU3p0QlFVRkZMR2RDUVVGSkxFbEJRVVVzU1VGQlNTeExRVUZMTEVWQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhKUVVGRkxFMUJRVXNzUlVGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWRCUVVVc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVkQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFZEJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWRCUVVVc1JVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEhRVUZGTEVOQlFVTXNSMEZCUlN4SlFVRkZMRVZCUVVVc1NVRkJSU3hQUVVGTExFMUJRVWtzUTBGQlF5eEhRVUZGTEVsQlFVVXNSVUZCUlN4clFrRkJhMElzUjBGQlJTeEpRVUZITEVsQlFVa3NTMEZCU3l4RlFVRkZMRmxCUVZrc1IwRkJSU3hIUVVGRkxFTkJRVU1zUlVGQlJ5eHJRa0ZCYTBJc1IwRkJSU3hKUVVGSExFbEJRVWtzUzBGQlN5eEZRVUZGTEZsQlFWa3NSMEZCUlN4SFFVRkZMRU5CUVVNc1JVRkJSeXhyUWtGQmEwSXNSMEZCUlN4SlFVRkZMRXRCUVVzN1FVRkJRU3hqUVVGSk8wRkJRVUVzWTBGRE0yWTdRVUZCUVN4WlFVRkRPMEZCUVVVc1owSkJRVVVzU1VGQlJTeEZRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSU3hQUVVGUExFdEJRVWNzUzBGQlJ5eExRVUZITEVOQlFVTXNTVUZCUlN4SlFVRkZMRTFCUVVrc1MwRkJSeXhQUVVGTExFbEJRVVVzUzBGQlN5eEpRVUZKTEVkQlFVVXNRMEZCUXl4SFFVRkZMRVZCUVVVc1VVRkJVU3hGUVVGRkxGRkJRVkVzU1VGQlJTeFJRVUZOTEVsQlFVVXNTVUZCUlN4SlFVRkZMRXRCUVVjc1JVRkJSVHRCUVVGSExHTkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1QwRkJUenRCUVVGRkxHTkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4TFFVRkhMRVZCUVVVc1JVRkJSU3haUVVGWkxFTkJRVU1zU1VGQlJTeExRVUZITEVsQlFVa3NSVUZCUlN4VFFVRlRMRU5CUVVNc1NVRkJSU3hGUVVGRkxGRkJRVkVzU1VGQlJTeEpRVUZGTzBGQlFVVXNZMEZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVjBGQlZ6dEJRVUZGTEdOQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVjBGQlZ6dEJRVUZGTEdOQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVTBGQlV6dEJRVUZGTEdOQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVVVGQlVUdEJRVUZGTEdOQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVTBGQlV6dEJRVUZGTEdOQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVVVGQlVUdEJRVUZGTEcxQ1FVRlBMRTlCUVU4c1JVRkJSU3hSUVVGUkxFbEJRVVVzUjBGQlJ6dEJRVUZCTEZWQlFVTXNSMEZCUlN4SFFVRkZMRmRCUVZVN1FVRkJReXh0UWtGQlRUdEJRVUZCTEZWQlFVY3NSMEZCUlN4SFFVRkZMRmRCUVZVN1FVRkJRU3hWUVVGRExFZEJRVVVzUjBGQlJTeFRRVUZUTEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2NVSkJRVk1zUlVGQlJTeEhRVUZGTzBGQlFVTXNjMEpCUVU4c1NVRkJSU3hGUVVGRkxHRkJRV0VzUlVGQlJTeE5RVUZOTEcxQ1FVRnRRaXhMUVVNemFFSXNSVUZCUlN4RFFVRkRMRWxCUVVVN1FVRkJRU3haUVVGTE8wRkJRVU1zYlVKQlFVczdRVUZCUlN4blFrRkJTU3hMUVVGSExHOUNRVUZKTEZGQlFVMHNXVUZCV1N4SFFVRkZMRWxCUVVVc1NVRkJTU3hMUVVGTExFZEJRVVVzUjBGQlJTeERRVUZETEVkQlFVVXNTVUZCUlN4SlFVRkpMRXRCUVVzc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMR3RDUVVGclFqdEJRVUZGTEdkQ1FVRkpMRWxCUVVVc1JVRkJSU3hyUWtGQmEwSTdRVUZCUlN4alFVRkZMRTFCUVVrc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJTeExRVUZITEV0QlFVc3NTVUZCU1N4SFFVRkZMRU5CUVVNN1FVRkJSU3hqUVVGRkxFMUJRVWtzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4UFFVRlBMRXRCUVVjc1EwRkJRenRCUVVGRkxHZENRVUZGTEVWQlFVVXNRMEZCUXp0QlFVRkZMR2RDUVVGRkxFVkJRVVVzUTBGQlF6dEJRVUZGTEdkQ1FVRkZMRWRCUVVjc1EwRkJRenRCUVVGRkxHZENRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMR2RDUVVGRkxFdEJRVWNzUlVGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZMRWRCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVXNUVUZCU1N4RlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzUjBGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGQkxGVkJRVVVzUjBGQlJTeEhRVUZGTEUxQlFVazdRVUZCUXl4bFFVRkhMRVZCUVVVN1FVRkJRU3hWUVVGRExFZEJRVVVzUjBGQlJTeE5RVUZKTEV0QlFVc3NTVUZCU1N4SFFVRkZMRWRCUVVVc1YwRkJWVHRCUVVGRExHMUNRVUZQTzBGQlFVRXNWVUZCVlN4SFFVRkZMRWRCUVVVc1RVRkJTU3haUVVGWkxFbEJRVWtzUjBGQlJTeEhRVUZGTEZOQlFWTXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXh0UWtGQlN6dEJRVUZGTEcxQ1FVRlBMRVZCUVVVc1YwRkJWeXhOUVVGSkxFMUJRVWtzUjBGQlJTeE5RVUZKTEVkQlFVVXNTMEZCUnl4TlFVRkpMRTlCUVVzc1EwRkJRenRCUVVGQkxGVkJRVU1zUjBGQlJTeEhRVUZGTEZOQlFWTXNSMEZCUlR0QlFVRkRMRzFDUVVGTE8wRkJRVVVzWjBKQlFVa3NTVUZCUlN4RlFVRkZPMEZCUTJ4bUxHZENRVUZITEdGQlFWYzdRVUZCUlN4eFFrRkJUVHRCUVVGSExIRkNRVUZSTEVsQlFVVXNSMEZCUlN4TFFVRkhMRWRCUVVVc1MwRkJSeXhIUVVGRk8wRkJRVU1zYTBKQlFVa3NTVUZCUlN4TFFVRkhMRWxCUVVVc1RVRkJSenRCUVVGSExHdENRVUZGTEV0QlFVc3NTVUZCU1N4SFFVRkZMRWxCUVVVc1UwRkJVenRCUVVGRkxHdENRVUZKTEVsQlFVVTdRVUZCU3l4clFrRkJSU3hMUVVGTExFbEJRVWtzUjBGQlJTeERRVUZETzBGQlFVVXNhVUpCUVVVN1FVRkJReXh4UWtGQlJ5eEZRVUZGTEVsQlFVa3NTMEZCU3l4SFFVRkZMRmxCUVZjc1MwRkJSeXhSUVVGTkxFbEJRVVVzVTBGQlR5eExRVUZMTEVsQlFVVXNSVUZCUlN4UFFVRlBMR0ZCUVZjc1UwRkJUenRCUVVGTkxHOUNRVUZITzBGQlFVTXNiMEpCUVVVc1MwRkJTeXhEUVVGRE8wRkJRVVVzY1VKQlFVYzdRVUZCUlN4elFrRkJTU3hKUVVGRk8wRkJRVVVzZDBKQlFVMDdRVUZCUVN4blFrRkJReXhUUVVGUExFZEJRVVU3UVVGQlFTeG5Ra0ZCUXp0QlFVRkRMRzlDUVVGRk8wRkJRVUVzWTBGQlRUdEJRVUZETEd0Q1FVRkhPMEZCUVVVc2RVSkJRVTA3UVVGQlFTeFpRVUZGTzBGQlFVTXNiVUpCUVUwN1FVRkJRU3hWUVVGRkxFZEJRVVVzUjBGQlJTeFRRVUZUTEVkQlFVVXNSMEZCUlR0QlFVRkRMRzFDUVVGTE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4blFrRkJTU3hKUVVGRk8wRkJRVVVzWlVGQlJ5eEZRVUZGTEZGQlFWRXNRMEZCUXl4SFFVRkZMRTFCUVVrN1FVRkJReXhyUWtGQlNTeEpRVUZGTEVsQlFVVTdRVUZCUlN4clFrRkJSU3hGUVVGRkxFbEJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVVc2JVSkJRVWtzU1VGQlJTeEhRVUZGTEVsQlFVVXNSVUZCUlN4UlFVRlBMRVZCUVVVN1FVRkJSU3hyUWtGQlJTeFJRVUZOTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1YwRkJWeXhEUVVGRE8wRkJRVVVzWjBKQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGRkxHMUNRVUZITEVWQlFVVXNVMEZCVHp0QlFVRkJMRmxCUVVNc1EwRkJRenRCUVVGRkxHMUNRVUZQTzBGQlFVRXNWVUZCUXl4SFFVRkZMRWRCUVVVc1UwRkJVeXhIUVVGRkxFZEJRVVU3UVVGQlF5eHRRa0ZCU3p0QlFVRkZMRzFDUVVGTE8wRkJRVVVzWjBKQlFVa3NTVUZEZG1Zc1IwRkJSenRCUVVGRkxHTkJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZPMEZCUVU4c1owSkJRVWtzU1VGQlJUdEJRVUZGTEdOQlFVVXNVVUZCVVN4UFFVRkhMRXRCUVVjc1JVRkJSU3hUUVVGUExFTkJRVU03UVVGQlJTeGpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVN1FVRkJSU3h0UWtGQlR6dEJRVUZCTEZWQlFVTXNSMEZCUlN4SFFVRkZMRTFCUVVrc1NVRkJSeXhIUVVGRkxGZEJRVlU3UVVGQlF5eHRRa0ZCVHp0QlFVRkJMRlZCUVVVc1IwRkJSU3hIUVVGRkxGZEJRVlU3UVVGQlF5eHRRa0ZCVHp0QlFVRkJMRlZCUVVVc1IwRkJSU3hIUVVGRkxGTkJRVk1zUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMRzFDUVVGTE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4dFFrRkJTenRCUVVGRkxIRkNRVUZSTEVsQlFVVXNSMEZCUlN4SlFVRkZMRWRCUVVVc1NVRkJSU3hIUVVGRkxFdEJRVWs3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRVZCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zUjBGQlJTeEpRVUZGTEVWQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJRenRCUVVGRkxHMUNRVUZITzBGQlFVVXNkVUpCUVZFc1NVRkJSU3hIUVVGRkxFbEJRVVVzUjBGQlJTeExRVUZKTzBGQlFVTXNiMEpCUVVrc1NVRkJSU3hGUVVGRkxFbEJRVVVzVFVGQlNTeERRVUZETEVkQlFVVXNTVUZCUlN4SFFVRkhMRU5CUVVNN1FVRkJSU3h6UWtGQlNTeExRVUZITEU5QlFVc3NUVUZCU1N4TlFVRkpMRWxCUVVVc1MwRkJSeXhIUVVGSExFZEJRVWNzUjBGQlJTeERRVUZETEVOQlFVTXNSMEZCUlN4RlFVRkZMRk5CUVU4c1MwRkJSeXhGUVVGRkxFdEJRVXNzUTBGQlF6dEJRVUZCTEdOQlFVTTdRVUZCUXl4dFFrRkJSenRCUVVGQkxGbEJRVU03UVVGQlF5eGpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVN1FVRkJSU3h0UWtGQlR6dEJRVUZCTEZWQlFVTXNSMEZCUlN4SlFVRkhMRWxCUVVjc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4dFFrRkJUeXhIUVVGSExFMUJRVWtzUjBGQlJTeE5RVUZKTEVkQlFVVXNUVUZCU1N4SFFVRkZMRTFCUVVrc1EwRkJRenRCUVVGQkxGVkJRVU1zUlVGQlF5eEhRVUZGTEVsQlFVVXNWMEZCVlR0QlFVRkRMR2RDUVVGSkxFbEJRVVVzUlVGQlF5eEhRVUZGTEVkQlFVVTdRVUZCUlR0QlFVRkpMR1ZCUVVjc1IwRkJSU3hUUVVGVExFZEJRVVU3UVVGQlF5eHJRa0ZCUlN4RlFVRkZMRk5CUVZNN1FVRkRPV1lzYTBKQlFVVXNSMEZCUnp0QlFVRkZMR3RDUVVGRkxFVkJRVVU3UVVGQlJ5eHBRa0ZCUnp0QlFVRkZMR2xDUVVGSExGRkJRVkVzUlVGQlJTeEZRVUZGTzBGQlFVVTdRVUZCU1N4dFFrRkJSeXhOUVVGSkxGTkJRVThzVDBGQlN5eGpRVUZqTEVWQlFVVXNSMEZCUlN4TFFVRkhMRTlCUVUwc1RVRkJTU3hKUVVGRkxFZEJRVVVzU1VGQlJTeE5RVUZMTEVWQlFVVTdRVUZCUVN4WlFVRkhMRU5CUVVNc1JVRkJSU3hOUVVGTkxFVkJRVVU3UVVGQlJTeHRRa0ZCVFN4RFFVRkRPMEZCUVVFc1ZVRkJReXhGUVVGRk8wRkJRVVVzV1VGQlJTeFhRVUZUTEVOQlFVTXNSMEZCUlN4UFFVRkxMRVZCUVVVc1YwRkJVeXhGUVVGRkxFbEJRVWtzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN4dFFrRkJhVUlzUTBGQlF5eEhRVUZGTEU5QlFVc3NSVUZCUlN4dFFrRkJhVUlzUlVGQlJTeEpRVUZKTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc01rSkJRWGxDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMREpDUVVGNVFpeEZRVUZGTEVsQlFVa3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc09FSkJRVFJDTEVOQlFVTXNSMEZCUlN4UFFVRkxMRVZCUVVVc09FSkJRVFJDTEVWQlFVVXNTVUZCU1N4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxDdENRVUUyUWl4RFFVRkRMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzSzBKQlFUWkNMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVU5vWml4WlFVRkZMRFJDUVVFd1FpeERRVUZETEVkQlFVVXNSMEZCUlN4UFFVRkxMRVZCUVVVc05FSkJRVEJDTEVWQlFVVXNTVUZCU1N4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGRkxGbEJRVVVzTkVKQlFUQkNMRkZCUVVrc1JVRkJSU3cwUWtGQk1FSXNSVUZCUlN4SlFVRkpMRU5CUVVNN1FVRkJSU3haUVVGRkxHOUNRVUZyUWl4RFFVRkRMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzYjBKQlFXdENMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNjVUpCUVcxQ0xGRkJRVWtzUlVGQlJTeHhRa0ZCYlVJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTERCQ1FVRjNRaXhEUVVGRExFZEJRVVVzUjBGQlJTeFBRVUZMTEVWQlFVVXNNRUpCUVhkQ0xFVkJRVVVzU1VGQlNTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc2JVSkJRV2xDTEVOQlFVTXNSMEZCUlN4UFFVRkxMRVZCUVVVc2JVSkJRV2xDTEVWQlFVVXNTVUZCU1N4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxHOUNRVUZyUWl4RFFVRkRMRWRCUVVVc1QwRkJTeXhGUVVGRkxHOUNRVUZyUWl4RlFVRkZMRWxCUVVrc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeFhRVUZUTEZGQlFVa3NSVUZCUlN4WFFVRlRMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRekZsTEZsQlFVVXNiVUpCUVdsQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRTlCUVVzc1JVRkJSU3h0UWtGQmFVSXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN4dlFrRkJhMElzUTBGQlF5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRTlCUVVzc1JVRkJSU3h2UWtGQmEwSXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNiMEpCUVd0Q0xGRkJRVWtzUlVGQlJTeHZRa0ZCYTBJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTEhWQ1FVRnhRaXhEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4MVFrRkJjVUlzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxIZENRVUZ6UWl4RFFVRkRMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzZDBKQlFYTkNMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNkMEpCUVhOQ0xGRkJRVWtzUlVGQlJTeDNRa0ZCYzBJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTEc5Q1FVRnJRaXhSUVVGSkxFVkJRVVVzYjBKQlFXdENMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRM0pqTEZsQlFVVXNaMEpCUVdNc1EwRkJReXhIUVVGRkxFZEJRVVVzVDBGQlN5eEZRVUZGTEdkQ1FVRmpMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNhVUpCUVdVc1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeFBRVUZMTEVWQlFVVXNhVUpCUVdVc1JVRkJSU3hKUVVGSkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUlN4WlFVRkZMSGRDUVVGelFpeFJRVUZKTEVWQlFVVXNkMEpCUVhOQ0xFVkJRVVVzU1VGQlNTeERRVUZETzBGQlFVVXNXVUZCUlN4eFFrRkJiVUlzVVVGQlNTeEZRVUZGTEhGQ1FVRnRRaXhGUVVGRkxFbEJRVWtzUTBGQlF6dEJRVUZGTEZsQlFVVXNjVUpCUVcxQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4UFFVRkxMRVZCUVVVc2NVSkJRVzFDTEVWQlFVVXNTVUZCU1N4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTEZWQlFWRXNRMEZCUXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4VlFVRlJMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxHMUNRVUZwUWl4UlFVRkpMRVZCUVVVc2JVSkJRV2xDTEVWQlFVVXNTVUZCU1N4RFFVRkRPMEZCUTJwaExHTkJRVWtzUzBGQlJ5eEZRVUZGTEZWQlFWRXNVVUZCU1N4TFFVRkhMRVZCUVVVc1ZVRkJVU3hGUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZGTEVsQlFVVXNSVUZCUlN4UlFVRk5MRkZCUVVrc1NVRkJSU3hGUVVGRkxGRkJRVTBzUlVGQlJTeEpRVUZKTEVOQlFVTXNSMEZCUlN4TFFVRkhMRkZCUVVrc1MwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF6dEJRVUZGTEZsQlFVVXNLMEpCUVRaQ0xFOUJRVXNzUlVGQlJTd3JRa0ZCTmtJc1JVRkJSU3hKUVVGSk8wRkJRVVVzWTBGQlNTeExRVUZITEU5QlFVc3NTMEZCUnl4RlFVRkZMRWxCUVVrc1IwRkJSU3hMUVVGSExGRkJRVWtzUzBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4SFFVRkZMRXRCUVVjc1VVRkJTU3hMUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETzBGQlFVVXNiVUpCUVZNc1MwRkJTVHRCUVVGRExHZENRVUZKTEVsQlFVVTdRVUZCUlN4blFrRkJSU3hQUVVGUExFOUJRVThzUTBGQlF5eEhRVUZGTEVOQlFVTTdRVUZCUlN4blFrRkJTU3hKUVVGRkxFOUJRVWNzVFVGQlNTeEZRVUZGTEUxQlFVa3NSMEZCUlN4SlFVRkZMRTlCUVVjc1QwRkJSeXhGUVVGRkxFTkJRVU1zVFVGQlNUdEJRVUZGTEdOQlFVVXNiVUpCUVdsQ0xFVkJRVVVzUlVGQlJTeG5Ra0ZCWjBJN1FVRkJSU3hqUVVGRkxFdEJRVWNzUlVGQlJTeEZRVUZGTEVWQlFVVTdRVUZCUlN4alFVRkZMRXRCUVVjc1JVRkJSU3hGUVVGRkxFVkJRVVU3UVVGQlJTeGpRVUZGTEV0QlFVY3NSVUZCUlN4RlFVRkZMRVZCUVVVN1FVRkJSU3hqUVVGRkxFdEJRVWNzUlVGQlJTeEZRVUZGTEVWQlFVVTdRVUZCUlN4dFFrRkJUenRCUVVGQkxGVkJRVU03UVVGQlF5eFpRVUZGTEdGQlFWYzdRVUZCUnl4WlFVRkZMRmxCUVZVN1FVRkJSeXhaUVVGRkxHVkJRV0U3UVVGQlJ5eFpRVUZGTEdWQlFXRTdRVUZETDJRc1dVRkJSU3hsUVVGaExFTkJRVU1zUjBGQlJTeEhRVUZGTEUxQlFVa3NSVUZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHJRa0ZCWjBJN1FVRkJSU3hqUVVGSk8wRkJRVWNzWTBGQlJTeFRRVUZUTEV0QlFVazdRVUZCUXl4clFrRkJTU3hIUVVGSE8wRkJRVVVzYlVKQlFVc3NTVUZCUlR0QlFVRkJMRlZCUVVjN1FVRkJSU3h0UWtGQlV5eExRVUZKTzBGQlFVTXNaMEpCUVVjc1JVRkJSU3hKUVVGRkxFbEJRVWM3UVVGQlF5eHhRa0ZCU3l4SlFVRkZMRWRCUVVjN1FVRkJVU3h0UWtGQlJ5eE5RVUZOTEVWQlFVVXNRMEZCUXp0QlFVRkZMR3RDUVVGSExFVkJRVVVzU1VGQlJTeExRVUZITEU5QlFVc3NTMEZCUnl4TlFVRkhMRVZCUVVVc1dVRkJWU3hOUVVGSExFMUJRVXM3UVVGQlF5eDFRa0ZCU3l4SlFVRkZMRWRCUVVjN1FVRkJVU3h4UWtGQlJ5eE5RVUZOTEVWQlFVVXNRMEZCUXp0QlFVRkZMSEZDUVVGSkxFZEJRVWNzUTBGQlF5eEhRVUZGTEVsQlFVVXNSMEZCUnp0QlFVRlJMSEZDUVVGSExFMUJRVTBzUlVGQlJTeERRVUZETzBGQlFVRXNZMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJRU3hWUVVGRE8wRkJRVU1zWVVGQlJ6dEJRVWM1VVN4cFFrRkJUeXhWUVVGVk8wRkJRVUVzVVVGRGJrSTdRVUZCUVN4TlFVZEJMRWRCUVVjN1FVRkRTQ3hWUVVGSkxFOUJRVThzV1VGQldTeFpRVUZaTEU5QlFVOHNWMEZCVnp0QlFVTnVSQ3hsUVVGUExGVkJRVlU3UVVGQlFTeGxRVU5XTEU5QlFVOHNWMEZCVnl4alFVRmpMRTlCUVU4c1MwRkJTenRCUVVOdVJDeGxRVUZQTEVOQlFVTXNSMEZCUnl4TlFVRk5MRTlCUVU4N1FVRkJRVHRCUVVGQk96czdRVU4yUlRGQ08wRkJRVUU3UVVGQlFUdEJRVUZCT3pzN1FVTkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdPMEZEUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFTeE5RVUZoTzBGQlFXSTdRVUZCUVR0QlFVRlBMRTFCUVUwc1QwRkJUenRCUVVGQk8wRkJRVUU3T3p0QlEwRndRanRCUVVGQk8wRkJRVUU3UVVGRFFTeFZRVUZKTEcxQ1FVRnRRaXhOUVVGTk8wRkJRek5DTEZsQlFVa3NZVUZCWVN4UFFVRlBMR0ZCUVdFc1pVRkJaU3hUUVVGVExHZENRVUZuUWl4VFFVRlRMR05CUVdNc1RVRkJUVHRCUVVNeFJ5eFpRVUZKTEU5QlFVOHNaVUZCWlR0QlFVRmhMSFZDUVVGaExHTkJRV003UVVGRGJFVXNaVUZEUml4VFFVRlRMRmxCUVZrc1EwRkJReXhIUVVGSE8wRkJSWHBDTEcxQ1FVRlRMRWxCUVVjN1FVRkJReXhqUVVGRkxGVkJRVkVzUlVGQlJTeFZRVUZSTEVWQlFVVTdRVUZCUlN4dFFrRkJUenRCUVVGQkxGVkJRVU03UVVGQlF5eHRRa0ZCVXl4SlFVRkhPMEZCUVVNc1kwRkJSU3hWUVVGUkxFVkJRVVVzVlVGQlVTeEZRVUZGTzBGQlFVVXNiVUpCUVU4N1FVRkJRU3hWUVVGRk8wRkJRVU1zYlVKQlFWTXNTVUZCUnp0QlFVRkRMR05CUVVVc1ZVRkJVU3hGUVVGRkxGVkJRVkVzUlVGQlJUdEJRVUZGTEcxQ1FVRlBPMEZCUVVFc1ZVRkJSVHRCUVVGRExHMUNRVUZUTEV0QlFVazdRVUZCUXl4alFVRkZMRlZCUVZFc1JVRkJSU3hWUVVGUkxFVkJRVVU3UVVGQlJTeHRRa0ZCVHp0QlFVRkJMRlZCUVVVN1FVRkJReXh0UWtGQlV5eEpRVUZITzBGQlFVTXNZMEZCUlN4VlFVRlJMRVZCUVVVc1ZVRkJVU3hGUVVGRk8wRkJRVVVzYlVKQlFVODdRVUZCUVN4VlFVRkZPMEZCUVVNc2JVSkJRVk1zU1VGQlJ6dEJRVUZETEdOQlFVVXNWVUZCVVN4RlFVRkZMRlZCUVZFc1JVRkJSVHRCUVVGRkxHMUNRVUZQTzBGQlFVRXNWVUZCUlR0QlFVRkRMRzFDUVVGVExFdEJRVWs3UVVGQlF5eGpRVUZGTEZWQlFWRXNSVUZCUlN4VlFVRlJMRVZCUVVVN1FVRkJSU3h0UWtGQlR6dEJRVUZCTEZWQlFVVTdRVUZCUXl4alFVRkpMRWxCUVVVc1YwRkJWU3hKUVVGSE8wRkJRVWNzV1VGQlJTeFJRVUZOTEVsQlFVa3NVVUZCVVN4RFFVRkRMRWRCUVVVc1RVRkJTVHRCUVVGRExHbENRVUZITzBGQlFVVXNhVUpCUVVjN1FVRkJRU3hWUVVGRExFTkJRVU03UVVGRGRGa3NZMEZCU1N4TFFVRkhMRTlCUVU4c1QwRkJUeXhEUVVGRExFZEJRVVVzUTBGQlF5eEhRVUZGTEV0QlFVY3NhMEpCUVdsQ0xFdEJRVWNzUTBGQlF5eEhRVUZGTEUxQlFVazdRVUZCUXl4clFrRkJUVHRCUVVGQkxGVkJRVVVzUjBGQlJTeExRVUZITEZsQlFWVXNUMEZCVHl4UlFVRlBMRWxCUVVVc1kwRkJXU3hQUVVGUExHVkJRV01zU1VGQlJTeFpRVUZWTEU5QlFVOHNWMEZCVXl4WlFVRlZMRTlCUVU4c1VVRkJVU3haUVVGVkxGbEJRVlVzVDBGQlR5eFJRVUZSTEZOQlFWTXNUVUZCU3l4SlFVRkZMRVZCUVVVc01FSkJRWGRDTEU5QlFVY3NTVUZCUlR0QlFVRkhMRzFDUVVGVExFZEJRVWNzUjBGQlJUdEJRVUZETEcxQ1FVRlBMRVZCUVVVc1lVRkJWeXhGUVVGRkxGZEJRVmNzUjBGQlJTeERRVUZETEVsQlFVVXNTVUZCUlR0QlFVRkJMRlZCUVVNN1FVRkJReXhqUVVGSkxFbEJRVWNzU1VGQlJ6dEJRVU12VlN4alFVRkhMRWRCUVVVN1FVRkJReXhuUWtGQlNTeExRVUZITEhWRFFVRmpMRXRCUVVjN1FVRkJaMElzWjBKQlFVVXNTVUZCUlN4SFFVRkhMRkZCUVZFc1EwRkJReXhKUVVGRkxFMUJRVWtzV1VGQlZUdEJRVUZKTEdsQ1FVRkhMRU5CUVVNc1IwRkJSU3hOUVVGSk8wRkJRVU1zYTBKQlFVVXNSVUZCUlN4WFFVRlhMRk5CUVZNc1NVRkJSU3hKUVVGSkxFbEJRVWtzUTBGQlF5eEpRVUZGTEVkQlFVY3NWVUZCVlN4RFFVRkRPMEZCUVVVc2NVSkJRVThzUjBGQlJ5eGhRVUZoTEVkQlFVVXNTVUZCUlN4VFFVRlBMRTFCUVUwN1FVRkJRU3haUVVGRE8wRkJRVVVzYVVKQlFVY3NUMEZCUnp0QlFVRkRMR3RDUVVGRkxFZEJRVWNzUjBGQlJTeEpRVUZGTzBGQlFVVXNaMEpCUVVVc1YwRkJVeXhKUVVGRkxFbEJRVWtzVjBGQlZ5eERRVUZETzBGQlFVY3NjVUpCUVU4N1FVRkJRU3haUVVGRE8wRkJRVVVzYVVKQlFVY3NRMEZCUXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hKUVVGRkxGTkJRVXM3UVVGQlF5eHJRa0ZCUlN4RlFVRkZMRmRCUVZjc1UwRkJVeXhKUVVGRkxFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVVXNSMEZCUnl4VlFVRlZMRU5CUVVNN1FVRkJSU3hwUWtGQlJ5eFRRVUZUTEVkQlFVVXNTVUZCUlN4VFFVRlBMRkZCUVU4c1EwRkJReXhIUVVGRkxFMUJRVWs3UVVGQlF5eHZRa0ZCUlN4RlFVRkZMRU5CUVVNc1NVRkJSU3hGUVVGRkxFbEJRVVVzUlVGQlJTeFRRVUZQTEVOQlFVTTdRVUZCUVN4alFVRkRMRU5CUVVNN1FVRkJRU3haUVVGRE8wRkJRVVVzWVVGQlF5eEZRVUZGTEdWQlFXRXNTVUZCUlN4UlFVRlJMRXRCUVVzc1YwRkJVeXhMUVVGSExGRkJRVkVzUzBGQlN5eERRVUZETEVWQlFVVXNVVUZCVVN4UFFVRk5MRWRCUVVjN1FVRkJSeXh2UWtGQlVTeExRVUZMTEUxQlFVMHNRMEZCUXp0QlFVRkZMR2xDUVVGSExFTkJRVU1zUjBGQlJTeE5RVUZKTzBGQlFVTXNjMEpCUVZFc1YwRkRlR1k3UVVGQlJTeHZRa0ZCVFR0QlFVRkJMRmxCUVVVN1FVRkJSU3hqUVVGRkxGVkJRVkVzVFVGQlNUdEJRVUUyUWl4blFrRkJTVHRCUVVGRkxHZENRVUZITzBGQlFVTXNhMEpCUVVVN1FVRkJRU3haUVVGNVFpeFRRVUZQTEVkQlFVVTdRVUZCUXl4dlFrRkJUU3hSUVVGUkxFMUJRVTBzZVVkQlFYbEhMRWRCUVVVN1FVRkJRU3haUVVGRk8wRkJRVU1zYlVKQlFVOHNVMEZCVHl4RlFVRkZPMEZCUVVFc1ZVRkJUU3hYUVVGVExFMUJRVWs3UVVGQlJTeG5Ra0ZCUlN4SlFVRkZMRXRCUVVzc1UwRkJVeXhQUVVGTExHVkJRV0VzVDBGQlR5eFpRVUZWTEZOQlFWTXNhMEpCUVdkQ0xFbEJRVVVzVTBGQlV5eGpRVUZqTEUxQlFVMHNUMEZCVHl4bFFVRmxMR1ZCUVdVc1pVRkJZeXhKUVVGRkxHRkJRVmtzVFVGQlNTeEZRVUZGTEZGQlFWRXNUMEZCVHl4SlFVRkZMRWxCUVVVc1JVRkJSU3hQUVVGUExFZEJRVVVzUlVGQlJTeFJRVUZSTEZWQlFWTXNSVUZCUlN4RlFVRkZMRmxCUVZrc1IwRkJSeXhKUVVGRkxFTkJRVU1zU1VGQlJTeEpRVUZGTEVsQlFVY3NUVUZCU1N4TFFVRkhMRTlCUVVjN1FVRkJReXhyUWtGQlNTeEpRVU01YUVJc1NVRkJTVHRCUVVGbExHZENRVUZGTEV0QlFVc3NUMEZCVFN4SFFVRkZMRXRCUVVVN1FVRkJSU3huUWtGQlJTeExRVUZMTEVsQlFVazdRVUZCUlN4eFFrRkJUeXhGUVVGRk8wRkJRVUVzV1VGQldTeEhRVUZGTEUxQlFVa3NTMEZCUnl4UFFVRkhPMEZCUVVNc2EwSkJRVWtzU1VGQlJTeEpRVUZKTzBGQlFXVXNaMEpCUVVVc1MwRkJTeXhQUVVGTkxFZEJRVVVzUzBGQlJUdEJRVUZGTEdkQ1FVRkZMR1ZCUVdFN1FVRkJZeXhuUWtGQlJTeExRVUZMTEVsQlFVazdRVUZCUlN4eFFrRkJUeXhKUVVGSkxGZEJRVmNzUlVGQlJTeFJRVUZSTzBGQlFVRXNXVUZCUXl4SlFVRkhMRXRCUVVjc1EwRkJReXhIUVVGRkxFZEJRVVVzVFVGQlNUdEJRVUZETEd0Q1FVRkpMRWxCUVVVc1NVRkJTVHRCUVVGbExHZENRVUZGTEV0QlFVc3NUMEZCVFN4SFFVRkZMRWxCUVVVN1FVRkJSU3huUWtGQlJTeGxRVUZoTzBGQlFXTXNaMEpCUVVVc1UwRkJUeXhOUVVGSk8wRkJRVU1zZFVKQlFVc3NSVUZCUlN4VlFVRlJMRXRCUVVjc1JVRkJSU3hWUVVGUkxFVkJRVVVzVjBGQlV5eEZRVUZGTEVWQlFVVXNVVUZCVVN4SlFVRkZMRVZCUVVVN1FVRkJRU3hqUVVGRE8wRkJRVVVzWjBKQlFVVXNWVUZCVVR0QlFVRkZMR2RDUVVGRkxFdEJRVXNzU1VGQlNUdEJRVUZCTEZsQlFVTTdRVUZCUnl4bFFVRkhMR1ZCUVdFc1QwRkJUeXhuUWtGQll5eFBRVUZQTEdOQlFWa3NjVUpCUVhOQ08wRkJRM1JrTEdOQlFVa3NTMEZCUnl4UlFVRlJMRWxCUVVrc1MwRkJTeXhQUVVGUExFZEJRVVVzUzBGQlJ5eFJRVUZSTEUxQlFVMHNTMEZCU3l4UFFVRlBPMEZCUVVVc1owSkJRVWtzUzBGQlJ5eEpRVUZKTEUxQlFVa3NSMEZCUnl4VlFVRlZMRWRCUVVVc1JVRkJSU3hMUVVGTExFZEJRVWNzU1VGQlJTeEpRVUZKTEVkQlFVVXNTMEZCUnl4SlFVRkpMRTFCUVVrc1IwRkJSeXhWUVVGVkxFZEJRVVVzUlVGQlJTeExRVUZMTEVkQlFVY3NTVUZCUlN4SlFVRkpPMEZCUVVjc1kwRkJTU3hMUVVGSExFbEJRVWNzU1VGQlJUdEJRVUZITEdsQ1FVRlBMRTlCUVU4c1IwRkJSU3hGUVVGRk8wRkJRVVVzWlVGQlJ6dEJRVUZMTEdOQlFVa3NaMEpCUVdNN1FVRkJSeXh6UWtGQlZTeFBRVUZQTEdWQlFXRXNSVUZCUlN4cFEwRkJhVU03UVVGQlJTeGpRVUZKTEVkQlFVVXNTVUZCUnl4TFFVRkhMRTlCUVVjc1IwRkJSU3hIUVVGRkxFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWRCUVVVc1NVRkJSenRCUVVNeFZTeHRRa0ZCVXl4SlFVRkhPMEZCUVVNc1owSkJRVWtzU1VGQlJTeEZRVUZGTzBGQlFVOHNZMEZCUlN4UlFVRk5MRWxCUVVVc1NVRkJTU3hWUVVGVkxFTkJRVU03UVVGQlJTeGpRVUZGTEZOQlFVOHNTMEZCUnl4SlFVRkpMRmRCUVZjc1EwRkJRenRCUVVGRkxHTkJRVVVzVTBGQlR5eExRVUZITEVsQlFVa3NWMEZCVnl4RFFVRkRPMEZCUVVVc1kwRkJSU3hWUVVGUkxFdEJRVWNzU1VGQlNTeFpRVUZaTEVOQlFVTTdRVUZCUlN4alFVRkZMRk5CUVU4c1MwRkJSeXhKUVVGSkxGZEJRVmNzUTBGQlF6dEJRVUZGTEdOQlFVVXNWVUZCVVN4TFFVRkhMRWxCUVVrc1dVRkJXU3hEUVVGRE8wRkJRVVVzWTBGQlJTeFZRVUZSTEV0QlFVY3NTVUZCU1N4aFFVRmhMRU5CUVVNN1FVRkJSU3hqUVVGRkxGVkJRVkVzUzBGQlJ5eEpRVUZKTEdGQlFXRXNRMEZCUXp0QlFVRkZMR05CUVVVc1UwRkJUeXhKUVVGRkxFbEJRVWtzWTBGQll5eERRVUZETzBGQlFVVXNZMEZCUlN4VlFVRlJMRXRCUVVjc1NVRkJTU3hsUVVGbExFTkJRVU03UVVGQlFTeFZRVUZETzBGQlFVTXNZMEZCU1N4TFFVRkhPMEZCUVZNc2NVSkJRVk1zVFVGQlNTeEZRVUZGTERCRVFVRjNSQ3hMUVVGSExIZENRVUYzUWp0QlFVTjRZeXhqUVVGSE8wRkJRVVVzWjBKQlFVVXNSVUZCUlR0QlFVRkJMRzFDUVVGdFFpeEpRVUZGTEVsQlFVa3NXVUZCV1N4UFFVRlBMRVZCUVVNc1UwRkJVU3hMUVVGSExFOUJRVTBzVTBGQlVTeFBRVUZOTEZGQlFVOHNTMEZCUlN4RFFVRkRMRWRCUVVVc1JVRkJSU3hGUVVGRkxHdENRVUZyUWp0QlFVRnRRaXhyUWtGQlRTeEZRVUZGTERaT1FVRTJUaXhIUVVGRkxFdEJRVWNzUlVGQlJTd3lSMEZCTWtjc1IwRkJSU3hOUVVGTkxGbEJRVms3UVVGRGNtWXNXVUZCUlR0QlFVRkZMR1ZCUVVjc1JVRkJSU3hQUVVGUE8wRkJRVmNzWTBGQlNTeExRVUZITEVOQlFVTXNSMEZCUlN4TFFVRkhMRU5CUVVNc1IwRkJSU3hMUVVGSExFTkJRVU1zUjBGQlJTeExRVUZITzBGQlFVVXNiVUpCUVZNc1MwRkJTVHRCUVVGRExHMUNRVUZQTEdsQ1FVRmxMRWxCUVVVN1FVRkJRU3hWUVVGRk8wRkJRVU1zWTBGQlNTeEpRVUZGTEVkQlFVVXNTMEZCUnl4TlFVRkxMRWxCUVVVN1FVRkJTeXh0UWtGQlV5eExRVUZKTzBGQlFVTTdRVUZCU1N4blFrRkJSeXhMUVVGSExFMUJRVWtzVTBGQlR5eFBRVUZMTEdOQlFXTXNSVUZCUlN4SFFVRkZMRXRCUVVjc1QwRkJUU3hKUVVGSE8wRkJRVU1zYTBKQlFVa3NTVUZCUlR0QlFVRkZMR3RDUVVGRk8wRkJRVXNzWjBKQlFVVTdRVUZCUVN4WlFVRkRPMEZCUVVFc1ZVRkJRenRCUVVGRExHMUNRVUZUTEVWQlFVVXNSMEZCUlR0QlFVRkRMR2RDUVVGRkxHRkJRVmNzU1VGQlJUdEJRVUZKTEdOQlFVVXNRMEZCUXp0QlFVRkZMR2xDUVVGSE8wRkJRVWNzWjBKQlFVVTdRVUZCUlN4blFrRkJSU3hKUVVGSkxGbEJRVmtzWVVGQllTeEpRVUZGTERCRFFVRXdRenRCUVVGRkxHVkJRVWNzUTBGQlF6dEJRVUZGTEd0Q1FVRk5PMEZCUVVFc1ZVRkJSVHRCUVVGRExHMUNRVUZUTEVkQlFVY3NSMEZCUlR0QlFVRkRMRzFDUVVGUExFVkJRVVVzVjBGQlZ5eDFRMEZCZFVNN1FVRkJRU3hWUVVGRE8wRkJRVU1zWTBGQlNUdEJRVUZGTEdOQlFVVTdRVUZCZVVJc1lVRkJSeXhEUVVGRExFMUJRVWtzU1VGQlJTeEhRVUZITEVOQlFVTTdRVUZEZUdRc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTzBGQlFVTXNaMEpCUVVjN1FVRkJSeXh4UWtGQlR5eEhRVUZITEVOQlFVTTdRVUZCUlN4clFrRkJTenRCUVVGQkxGVkJRV3RFTzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRk8wRkJRVU1zWjBKQlFVY3NUVUZCU1N4SFFVRkZPMEZCUVVNc2EwSkJRVWNzWTBGQldTeFBRVUZQTEZOQlFVOHNRMEZCUXl4RlFVRkZMRmRCUVZjc1UwRkJVenRCUVVGRkxIVkNRVUZQTEUxQlFVMHNSMEZCUlN4RlFVRkRMR0ZCUVZrc1kwRkJZU3hEUVVGRExFVkJRVVVzUzBGQlN5eFBRVUZITzBGQlFVTXNjMEpCUVVjc1EwRkJReXhGUVVGRk8wRkJRVWNzTUVKQlFVc3NlVU5CUVhWRExFbEJRVVU3UVVGQlNTeDVRa0ZCVHl4RlFVRkZMRmxCUVZrN1FVRkJRU3huUWtGQlF5eERRVUZETEVWQlFVVXNUVUZCVFN4TlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRVVVzYTBKQlFVYzdRVUZCUnl4MVFrRkJUeXhKUVVGSkxGRkJRVkVzUTBGQlF5eEhRVUZGTEUxQlFVazdRVUZCUXl4eFFrRkJSeXhIUVVGRkxFOUJRVWNzUlVGQlJTeEpRVUZKTEZkQlFWY3NRMEZCUXl4RFFVRkRMRWRCUVVVc1EwRkJRenRCUVVGQkxHZENRVUZETEVOQlFVTTdRVUZCUVN4WlFVRkRPMEZCUVVNc2JVSkJRVThzVVVGQlVTeFJRVUZSTEVWQlFVVXNTMEZCU3l4TlFVRkpMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVU01WVN4dFFrRkJVeXhIUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNiVUpCUVU4c1IwRkJSeXhEUVVGRExFVkJRVVVzUzBGQlN5eFBRVUZITEZsQlFWa3NXVUZCV1N4SFFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRkxFdEJRVXNzVDBGQlJ5eERRVUZETEVWQlFVVXNTMEZCU3l4SFFVRkZMRTlCUVVjN1FVRkJReXhuUWtGQlJTd3dRMEZCTUVNc1EwRkJReXhGUVVGRk8wRkJRVVVzWjBKQlFVVXNRMEZCUXp0QlFVRkJMRmxCUVVNc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGRGJrb3NiVUpCUVZNc1IwRkJSeXhIUVVGRkxFZEJRVVU3UVVGQlF5eG5Ra0ZCU1N4SlFVRkZPMEZCUVVVc2JVSkJRVTBzWTBGQldTeFBRVUZQTEZsQlFWa3NkMEpCUVhOQ0xFZEJRVWNzUTBGQlF5eExRVUZITEVWQlFVVXNWMEZCVnl4VFFVRlRMRXRCUVVjc1MwRkJSeXhqUVVGWkxFOUJRVThzVVVGQlRTeEhRVUZITEVkQlFVVXNSMEZCUlN4RFFVRkRMRWxCUVVVc1RVRkJUU3hIUVVGRkxFVkJRVU1zWVVGQldTeGpRVUZoTEVOQlFVTXNSVUZCUlN4TFFVRkxMRTlCUVVjc1dVRkJXU3h4UWtGQmNVSXNSMEZCUlN4RFFVRkRMRVZCUVVVc1MwRkJTeXhIUVVGRkxGTkJRVk1zUjBGQlJUdEJRVUZETEdkQ1FVRkZMR3REUVVGclF5eERRVUZETEVWQlFVVTdRVUZCUlN4blFrRkJSU3d5UTBGQk1rTTdRVUZCUlN4eFFrRkJUeXhIUVVGSExFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVRXNXVUZCUXl4RFFVRkRMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRVU1zYlVKQlFWTXNSMEZCUnl4SFFVRkZPMEZCUVVNc2FVSkJRVXNzVDBGQlN6dEJRVUZoTEdsQ1FVRkxMRlZCUVZFc1owTkJRV2RETEVOQlFVTTdRVUZCU1N4cFFrRkJTeXhUUVVGUE8wRkJRVUVzVlVGQlF6dEJRVU5xWkN4alFVRkpMRXRCUVVjc1QwRkJSenRCUVVGRExHTkJRVVVzVlVGQlZUdEJRVUZGTEdOQlFVVXNXVUZCVlN4TlFVRkpPMEZCUVVFc1dVRkJRenRCUVVGQkxGVkJRVU1zUjBGQlJTeExRVUZITEU5QlFVYzdRVUZCUXl4cFFrRkJSeXhGUVVGRkxFZEJRVWNzVjBGQlV5eEhRVUZITEVkQlFVVXNSVUZCUlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGQlJ5eG5Ra0ZCU1N4SlFVRkZMRVZCUVVVc1IwRkJSeXhKUVVGSk8wRkJRVVVzWjBKQlFVY3NRMEZCUXp0QlFVRkZMSEZDUVVGUE8wRkJRVVVzWTBGQlJTeEhRVUZITEV0QlFVc3NRMEZCUXp0QlFVRkZMR05CUVVVc1IwRkJSeXhGUVVGRkxFVkJRVVVzU1VGQlJUdEJRVUZGTEdOQlFVVXNTMEZCUnl4RlFVRkZPMEZCUVVjc1owSkJRVWtzU1VGQlJTeEZRVUZETEV0QlFVa3NUMEZCVFN4bFFVRmpMRVZCUVVVc1NVRkJSeXhMUVVGSkxFVkJRVVVzU1VGQlJ5eGhRVUZaTEVWQlFVVXNSMEZCUlR0QlFVRkZMR2xDUVVGSExFVkJRVVVzVFVGQlRUdEJRVUZGTEdOQlFVVXNXVUZCV1N4SFFVRkZMRVZCUVVVc1JVRkJSVHRCUVVGRkxHMUNRVUZQTzBGQlFVRXNWVUZCUXl4SFFVRkZMRXRCUVVjc1pVRkJZU3hQUVVGUExHTkJRVmtzU1VGQlNTeFpRVUZaTEUxQlFVMHNTVUZCUlN4UlFVRlBMRXRCUVVjc1EwRkJReXhIUVVGRkxFZEJRVVVzVFVGQlNUdEJRVUZETEcxQ1FVRkxPMEZCUVVVc1owSkJRVWtzU1VGQlJTeEpRVUZGTzBGQlFVVXNhVUpCUVVrc1NVRkJSU3hIUVVGRkxFVkJRVVVzUTBGQlF5eExRVUZITEVWQlFVVXNTMEZCUnp0QlFVRkpMR2RDUVVGRk8wRkJRVVVzWjBKQlFVY3NTMEZCUnl4SlFVRkZMRXRCUVVjc1JVRkJSU3hWUVVGUk8wRkJRVWNzY1VKQlFVOHNSMEZCUnl4UFFVRlBMRVZCUVVVc2EwSkJRV3RDTEc5Q1FVRnJRaXhGUVVGRkxFMUJRVTBzUjBGQlJTeERRVUZETEVsQlFVVXNSVUZCUlN4VFFVRlRMRWRCUVVVc1EwRkJReXhEUVVGRE8wRkJRVVVzYVVKQlFVa3NTVUZEY21Zc1NVRkJSeXhKUVVGRkxFdEJRVWM3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRVZCUVVVc1IwRkJSenRCUVVGRkxHdENRVUZITEVsQlFVVXNTMEZCU1R0QlFVRkRMRzlDUVVGSkxFbEJRVVVzUlVGQlJTeEhRVUZITEVsQlFVVTdRVUZCUnl4dlFrRkJSeXhSUVVGTkxFbEJRVVU3UVVGQlN5eDFRa0ZCUnl4UFFVRlBMR05CUVdNc1NVRkJSU3hQUVVGTExFbEJRVVVzUTBGQlF6dEJRVUZCTEhGQ1FVRk5PMEZCUVVNc2MwSkJRVWtzU1VGQlJTeEZRVUZGTEVkQlFVY3NTVUZCUlR0QlFVRkhMSE5DUVVGRkxGRkJRVTBzU1VGQlJTeFJRVUZOTEVsQlFVVXNUMEZCU3l4TFFVRkhMRXRCUVVjc1NVRkJSU3hMUVVGSExFbEJRVVVzVFVGQlNTeExRVUZITEV0QlFVY3NTMEZCUnl4TFFVRkhMRWxCUVVVc1JVRkJSU3hIUVVGSExFbEJRVVU3UVVGQlJ5d3dRa0ZCVFN4SlFVRkZMRXRCUVVjc1QwRkJUeXhoUVVGaExFTkJRVU1zUzBGQlJ5eExRVUZITEU5QlFVMHNTMEZCUnl4UFFVRlBMR0ZCUVdFc1VVRkJUU3hMUVVGSExFbEJRVWNzVVVGQlRTeEpRVUZGTEVsQlFVazdRVUZCUVN4blFrRkJSVHRCUVVGQkxHTkJRVU03UVVGQlRTeHhRa0ZCUnl4UFFVRlBMR0ZCUVdFc1EwRkJRenRCUVVGQkxGbEJRVU03UVVGQlF5eHRRa0ZCVHp0QlFVRkJMRlZCUVVNc1IwRkJSU3hMUVVGSExFTkJRVU1zUjBGQlJTeFBRVUZMTEU5QlFVc3NTMEZCUnl4SFFVRkhMRVZCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU1zU1VGQlJUdEJRVUZITEcxQ1FVRlRMRWRCUVVjc1IwRkJSVHRCUVVGRExHZENRVUZITzBGQlFVVXNjVUpCUVU4c1JVRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEdkQ1FVRkZPMEZCUVVVc1pVRkJSeXhOUVVGSkxFVkJRVVVzUjBGQlJ5eEhRVUZGTEV0QlFVYzdRVUZCU1N4bFFVRkhMRWRCUVVVc1NVRkJTU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZCUXl4alFVRkpMRXRCUVVjc1QwRkJSenRCUVVGRExHZENRVUZGTzBGQlFVVXNaMEpCUVVjN1FVRkJSU3h2UWtGQlRTeEhRVUZITEVOQlFVTXNSMEZCUlR0QlFVRlRMR1ZCUVVjc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGRE9XUXNiVUpCUVZNc1MwRkJTVHRCUVVGRExIRkNRVUZSTEVsQlFVVXNSVUZCUlN4WlFVRlhPMEZCUVVzc2FVSkJRVWM3UVVGQlJTeGxRVUZITEZGQlFWRXNUVUZCU1R0QlFVRkRPMEZCUVVrc2FVSkJRVWNzVFVGQlNTeEhRVUZITEVOQlFVTTdRVUZCUVN4WlFVRkRMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRVU1zYlVKQlFWTXNTMEZCU1R0QlFVRkRMR2RDUVVGSkxFbEJRVVVzUjBGQlJ5dzJRa0ZCTmtJN1FVRkJSU3huUWtGQlJTeEpRVUZKTEU5QlFVOHNRMEZCUXp0QlFVRkZMR05CUVVVc1IwRkJSeXhMUVVGTExFTkJRVU03UVVGQlFTeFZRVUZETzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRk8wRkJRVU1zWjBKQlFVVXNSVUZCUlN4SlFVRkZMRkZCUVZFc1NVRkJTU3hGUVVGRkxFZEJRVWNzU1VGQlNTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RlFVRkZMRXRCUVVzc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGRE4wNHNZMEZCU1N4SlFVRkZMRVZCUVVNc1NVRkJSeXhEUVVGRExFZEJRVVVzU1VGQlJ5eERRVUZETEVkQlFVVXNTVUZCUnl4RFFVRkRMRWRCUVVVc1NVRkJSeXhEUVVGRExFZEJRVVVzUzBGQlNUdEJRVUZETEdsQ1FVRkhMRVZCUVVVc2QwSkJRWE5DTEVWQlFVVXNTVUZCUnl4RlFVRkZMR2RDUVVGakxFVkJRVVVzU1VGQlJ5eEZRVUZGTEdkQ1FVRmpMRVZCUVVVc1NVRkJSeXhuUWtGQll5eFRRVUZKTEVkQlFVYzdRVUZCUVN4VlFVRkRMRWRCUVVVc1NVRkJSeXhQUVVGSE8wRkJRVU1zWjBKQlFVVTdRVUZCUVN4VlFVRkRMRWRCUVVVc1NVRkJSeXhEUVVGRExHdENRVUZyUWl4SFFVRkZMRWxCUVVjc1RVRkJTVHRCUVVGRExIRkNRVUZSTEV0QlFVc3NSVUZCUlR0QlFVRkhMR2xDUVVGSExFTkJRVU03UVVGQlJTeHBRa0ZCU1N4TFFVRkxMRVZCUVVVN1FVRkJSeXhwUWtGQlJ5eERRVUZETzBGQlFVVXNZMEZCUlN4TFFVRkhMRU5CUVVNN1FVRkJSU3hqUVVGRkxFdEJRVWNzUTBGQlF6dEJRVUZGTEdOQlFVVXNTMEZCUnl4RFFVRkRPMEZCUVVFc1ZVRkJReXhIUVVGRkxFbEJRVWNzVDBGQlJ6dEJRVUZETEdkQ1FVRkpMRWxCUVVVc1JVRkJSVHRCUVVGSExHMUNRVUZQTEVWQlFVVXNSMEZCUnl4RFFVRkRPMEZCUVVVc1kwRkJSU3hIUVVGSExFdEJRVXNzUTBGQlF6dEJRVUZGTEdOQlFVVXNSMEZCUnl4UFFVRlBMRVZCUVVVc1IwRkJSeXhSUVVGUkxFTkJRVU1zUjBGQlJTeERRVUZETzBGQlFVVXNZMEZCUlN4TFFVRkhPMEZCUVVVc1pVRkJSeXhEUVVGRE8wRkJRVUVzVlVGQlF5eEhRVUZGTEV0QlFVazdRVUZCUVN4VlFVRkRMRWRCUVVVc1MwRkJTVHRCUVVGRExHTkJRVVVzUjBGQlJ5eFJRVUZSTEU5QlFVY3NSVUZCUlN4RFFVRkRPMEZCUVVFc1ZVRkJReXhIUVVGRkxFbEJRVWNzVDBGQlJ5eEpRVUZKTEZGQlFWRXNUMEZCUnp0QlFVRkRMR05CUVVVc1dVRkJWU3hQUVVGSE8wRkJRVU1zYTBKQlFVVXNSVUZCUlR0QlFVRkxMR3RDUVVGSkxFbEJRVVVzUlVGQlJUdEJRVUZKTEd0Q1FVRkhMRVZCUVVVc1owSkJRV01zUlVGQlJTeG5Ra0ZCWXl4SFFVRkhMRWRCUVVVN1FVRkJReXh2UWtGQlNTeEpRVUZGTEVWQlFVVXNSMEZCUnl4RlFVRkZMRmxCUVZrN1FVRkJSU3h2UWtGRGJtWXNSVUZCUlN4WlFVRlpMRWRCUVVVc1JVRkJSU3haUVVGWkxFbEJRVVVzUlVGQlJTd3dRMEZCTUVNc1EwRkJReXgxUWtGQmRVSXNSVUZCUlN4WlFVRlpMSEZEUVVGeFF6dEJRVUZCTEdOQlFVTXNWMEZCVXl4dFFrRkJhVUk3UVVGQlJTeHRRa0ZCUnp0QlFVRkJMSFZDUVVGVkxHdENRVUZuUWp0QlFVRkZMRzFDUVVGSExFTkJRVU03UVVGQlFTeDFRa0ZCVlN4dlFrRkJhMEk3UVVGQlJTeHBRa0ZCUXl4SlFVRkZMRVZCUVVVc1IwRkJSeXhGUVVGRkxFMUJRVTBzVFVGQlNTeEZRVUZGTEVkQlFVVXNSVUZCUlN4SFFVRkhMRU5CUVVNN1FVRkJRU3gxUWtGQlZTeHBRa0ZCWlR0QlFVRkZMRzlDUVVGRkxFVkJRVVVzVVVGQlR5eEpRVUZGTEVWQlFVVXNSMEZCUnl4RFFVRkRMRWRCUVVVc1QwRkJUeXhGUVVGRkxFZEJRVWNzUTBGQlF5eEhRVUZGTEVkQlFVY3NRMEZCUXl4SFFVRkZMRWRCUVVjc1EwRkJReXhIUVVGRkxFVkJRVVVzUjBGQlJ5eFBRVUZQTEVWQlFVVXNSMEZCUnl4UlFVRlJMRU5CUVVNc1IwRkJSU3hEUVVGRExFZEJRVVVzUlVGQlJTeExRVUZITzBGQlFVRXNkVUpCUVZVc2JVSkJRV2xDTzBGQlFVVXNhMEpCUVVVc1IwRkJSeXhGUVVGRkxFMUJRVTBzUlVGQlJTeFpRVUZaTEVWQlFVTXNTMEZCU1N4VFFVRlJMRU5CUVVNN1FVRkJRU3gxUWtGQlZTeGhRVUZYTzBGQlFVVXNhMEpCUVVVc1UwRkJUeXhOUVVGSExFdEJRVWNzUTBGQlF5eEZRVUZGTEUxQlEycG1MRVZCUVVVc1RVRkJUU3hIUVVGRkxFVkJRVVVzUTBGQlF6dEJRVUZCTEhWQ1FVRlZMRmxCUVZVN1FVRkJSU3h6UWtGQlRTeFZRVUZWTEVWQlFVVXNVVUZCVVN4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRk8wRkJRVUVzZFVKQlFWVXNiVUpCUVdsQ0xFVkJRVVU3UVVGQlR5eHJRa0ZCUlN4WlFVRlpMRU5CUVVNN1FVRkJRU3gxUWtGQlZTeHJRa0ZCWjBJN1FVRkJSU3hyUWtGQlJTeEZRVUZGTEU5QlFVOHNSVUZCUlN4SFFVRkhMRVZCUVVVc1NVRkJTVHRCUVVGQk8wRkJRVThzY1VKQlFVY3NSVUZCUlN4clEwRkJhME1zUTBGQlF5eEZRVUZGTzBGQlFVRXNXVUZCUXp0QlFVRkZMR05CUVVVc1ZVRkJVU3hQUVVGSE8wRkJRVU1zWjBKQlFVVXNSMEZCUnl4MVFrRkJkVUlzU1VGQlNTeEZRVUZGTEZGQlFWRXNTVUZCU1N4RlFVRkZMRTFCUVUwc1MwRkJTeXhGUVVGRkxFOUJRVThzUlVGQlJUdEJRVUZGTEc5Q1FVRk5PMEZCUVVFc1dVRkJSVHRCUVVGRkxHdENRVUZKTEVWQlFVVXNSMEZCUnl4WFFVRlZMRTlCUVVjc1JVRkJSU3hWUVVGVkxFVkJRVU1zVFVGQlN5eEZRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkZMRVZCUVVVc1IwRkJSeXhUUVVGUkxFOUJRVWNzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0QlFVRkhMR2RDUVVGSkxFbEJRVVVzUTBGQlF5eEhRVUZGTEVsQlFVVXNRMEZCUXl4SFFVRkZPMEZCUVVVc2FVSkJRVWtzUzBGQlN6dEJRVUZGTEdkQ1FVRkZMR1ZCUVdVc1EwRkJReXhMUVVGSExFVkJRVVVzUzBGQlN5eERRVUZETzBGQlFVVXNZMEZCUlN4WlFVRlpMRVZCUVVNc1MwRkJTU3hSUVVGUExGVkJRVk1zUjBGQlJTeFhRVUZWTEVWQlFVVXNkVUpCUXpGbUxGbEJRVmNzV1VGQlZ5eEhRVUZGTEZsQlFWY3NSMEZCUlN4RFFVRkRPMEZCUVVFc1ZVRkJReXhEUVVGRExFVkJRVU03UVVGQlJTeFpRVUZGTEZWQlFWRTdRVUZCUlN4alFVRkpMRXRCUVVjc1QwRkJSenRCUVVGRExHMUNRVUZMTEVsQlFVVXNSVUZCUlR0QlFVRlJMR2RDUVVGRkxFMUJRVTBzUlVGQlJTeERRVUZETzBGQlFVRXNWVUZCUXp0QlFVRkZMRmxCUVVVc2MwSkJRVzlDTEUxQlFVazdRVUZCUXl4blFrRkJTU3hKUVVGRkxFZEJRVWNzUjBGQlJTeEpRVUZGTEVWQlFVVXNSVUZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4RlFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU03UVVGQlJTeGxRVUZITEVkQlFVVXNTVUZCUlN4RFFVRkRPMEZCUVVVc1pVRkJSeXhEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZGTEcxQ1FVRlRMRWRCUVVjc1IwRkJSVHRCUVVGRExHZENRVUZITzBGQlFVVXNjVUpCUVU4c1JVRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEdWQlFVY3NRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkJReXhqUVVGSkxFdEJRVWNzUTBGQlF5eEhRVUZGTzBGQlFVY3NXVUZCUlN4dFFrRkJhVUlzUTBGQlF5eEhRVUZGTEUxQlFVazdRVUZCUXl4blFrRkJTU3hKUVVGRkxFZEJRVWNzUTBGQlF6dEJRVUZGTEd0Q1FVRkpMRXRCUVVjc1IwRkJSeXhYUVVGVExFZEJRVWNzVTBGQlR5eEpRVUZGTEVsQlFVY3NSMEZCUnl4RFFVRkRMRWxCUVVVc1NVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF6dEJRVUZITEdkQ1FVRkZMRVZCUVVVc1EwRkJRenRCUVVGRkxHVkJRVWNzU1VGQlJTeEZRVUZGTEVkQlFVY3NRMEZCUXl4SlFVRkZMRWRCUVVjc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGRE5WY3NiVUpCUVZNc1IwRkJSeXhIUVVGRk8wRkJRVU1zYVVKQlFVc3NTMEZCUnl4SlFVRkZPMEZCUVVjc2FVSkJRVXNzUzBGQlJ5eFRRVUZUTEVkQlFVVTdRVUZCUXl4blFrRkJSU3hGUVVGRkxFdEJRVXNzUzBGQlJ5eE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVFc1dVRkJRenRCUVVGRkxHbENRVUZMTEV0QlFVY3NVMEZCVXl4SFFVRkZPMEZCUVVNc1owSkJRVVVzUlVGQlJTeExRVUZMTEV0QlFVY3NUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGQkxGbEJRVU03UVVGQlJTeHBRa0ZCU3l4TFFVRkhMRk5CUVZNc1IwRkJSU3hIUVVGRk8wRkJRVU1zYlVKQlFVc3NSMEZCUnp0QlFVRkZMRzFDUVVGTExFZEJRVWNzUTBGQlF6dEJRVUZGTEcxQ1FVRkxMRWRCUVVjc1EwRkJRenRCUVVGQkxGbEJRVU03UVVGQlJTeHBRa0ZCU3l4TFFVRkhMRmRCUVZVN1FVRkJReXhuUWtGQlJTeEZRVUZGTEV0QlFVc3NTMEZCUnl4UFFVRkxMRTFCUVVrc1EwRkJReXhKUVVGRk8wRkJRVUVzV1VGQlF6dEJRVUZCTEZWQlFVTTdRVUZCUXl4alFVRkpMRXRCUVVjc1IwRkJSU3hMUVVGSE8wRkJRVVVzYlVKQlFWTXNSMEZCUnl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zYlVKQlFVOHNTVUZCUlN4RlFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETEVsQlFVVXNSMEZCUnl4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVU51VXl4dFFrRkJVeXhIUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4dFFrRkJTenRCUVVGRkxHMUNRVUZMTzBGQlFVVXNiVUpCUVVzN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEdkQ1FVRkhMR1ZCUVdFc1QwRkJUenRCUVVGclFpeHhRa0ZCVHl4RlFVRkZMSEZHUVVGeFJpeEhRVUZGTzBGQlFVVXNaMEpCUVVrc1NVRkJSU3hEUVVGRE8wRkJRVVVzWjBKQlFVY3NTMEZCUnl4TlFVRkpMRVZCUVVVN1FVRkJUeXh4UWtGQlR5eEhRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3huUWtGQlJTeEZRVUZETEVsQlFVY3NSMEZCUlN4SlFVRkhMRWRCUVVVc1NVRkJSeXhIUVVGRkxFbEJRVWNzUlVGQlF6dEJRVUZGTEcxQ1FVRlBMRXRCUVVjc1JVRkJSU3hMUVVGSExHVkJRV01zV1VGQldTeEhRVUZGTEVOQlFVTXNSMEZCUlN4TFFVRkhMRWRCUVVjc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGQlF5eHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zYlVKQlFVOHNTVUZCUlN4RlFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF5eEpRVUZGTzBGQlFVRXNWVUZCUXp0QlFVRkRMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTzBGQlFVTXNaMEpCUVVjN1FVRkJSU3h4UWtGQlR5eEZRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRelZaTEdOQlFVa3NTMEZCUnl4UFFVRkhPMEZCUVVNc2NVSkJRVkVzU1VGQlJTeEhRVUZGTEVsQlFVVXNSMEZCUlN4SlFVRkZMRVZCUVVVc1VVRkJUeXhGUVVGRkxFZEJRVVU3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRVZCUVVVc1YwRkJWeXhEUVVGRE8wRkJRVVVzY1VKQlFVc3NTVUZCUlN4TlFVRkpMRkZCUVUwc1NVRkJSU3hMUVVGSExFbEJRVVVzVTBGQlR5eExRVUZITEZOQlFVOHNTMEZCUnl4TFFVRkhMRWRCUVVVc1JVRkJSU3hMUVVGSExFdEJRVWM3UVVGQlFTeFpRVUZETzBGQlFVTXNiVUpCUVU4N1FVRkJRU3hWUVVGRExFZEJRVVVzUzBGQlJ5eERRVUZETEVkQlFVVXNSMEZCUlN4SFFVRkZMRTFCUVVrN1FVRkJReXh0UWtGQlN6dEJRVUZGTEdkQ1FVRkhMRVZCUVVVc1NVRkJSVHRCUVVGSExIRkNRVUZQTzBGQlFVVXNaMEpCUVVrc1NVRkJSVHRCUVVGRkxHZENRVUZGTEVsQlFVVXNTVUZCUlR0QlFVRkZMSEZDUVVGUkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVWQlFVVXNVVUZCVHl4RlFVRkZMRWRCUVVVN1FVRkJReXhyUWtGQlNTeEpRVUZGTEVWQlFVVXNWMEZCVnl4RFFVRkRPMEZCUVVVc2EwSkJRVWNzVTBGQlR5eExRVUZITEZOQlFVOHNSMEZCUlR0QlFVRkRMRzlDUVVGSkxFbEJRVVVzUlVGQlJTeFhRVUZYTEVWQlFVVXNRMEZCUXp0QlFVRkZMRzlDUVVGRkxGVkJRVkVzU1VGQlJTeFRRVUZQTEUxQlFVa3NTVUZCUlR0QlFVRkJMR05CUVVrN1FVRkJReXhyUWtGQlJ5eFBRVUZMTEVkQlFVVTdRVUZCUXl4dlFrRkJSeXhMUVVGSE8wRkJRVVU3UVVGQlRTeHJRa0ZCUlN4UlFVRk5MRU5CUVVNc1NVRkJSVHRCUVVGQkxHTkJRVU1zVDBGQlN6dEJRVUZETEc5Q1FVRkhMRkZCUVUwc1IwRkJSVHRCUVVGRExITkNRVUZITEVsQlFVVXNTMEZCUnp0QlFVRkZPMEZCUVUwc2IwSkJRVVVzVVVGQlRTeERRVUZETEVsQlFVVXNUVUZCU1N4TFFVRkhPMEZCUVVFc1owSkJRVU1zVDBGQlN6dEJRVUZETEhOQ1FVRkhMRk5CUVU4c1IwRkJSVHRCUVVGRExIZENRVUZITEVsQlFVVXNTMEZCUnp0QlFVRkZPMEZCUVUwc2MwSkJRVVVzVVVGQlRTeERRVUZETEVsQlFVVXNUVUZCU1N4TFFVRkhPMEZCUVVFc2EwSkJRVVVzVDBGQlN6dEJRVUZETEhkQ1FVRkhMRWxCUVVVc1MwRkJSenRCUVVGRk8wRkJRVTBzYzBKQlFVVXNVVUZCVFN4RFFVRkRMRWxCUVVVc1RVRkJTU3hMUVVOd1pqdEJRVUZITEhOQ1FVRkZMRkZCUVUwc1EwRkJReXhKUVVGRkxFMUJRVWtzUzBGQlJ5eExRVUZITzBGQlFVRXNhMEpCUVVVN1FVRkJReXh2UWtGQlJTeFJRVUZOTEVOQlFVTXNTVUZCUlN4TlFVRkpMRXRCUVVjc1NVRkJSVHRCUVVGQkxHZENRVUZGTzBGQlFVTXNhMEpCUVVVc1VVRkJUU3hEUVVGRExFbEJRVVVzVFVGQlNTeEpRVUZGTzBGQlFVRXNZMEZCUlR0QlFVRkJMRmxCUVVNN1FVRkJReXhqUVVGRkxFMUJRVWtzUTBGQlF5eEpRVUZGTzBGQlFVVXNiVUpCUVU4c1NVRkJSVHRCUVVGQkxGVkJRVU1zUjBGQlJTeExRVUZITEVOQlFVTXNSMEZCUlN4SFFVRkZMRTFCUVVrc1IwRkJSeXhIUVVGRkxFVkJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUlN4dFFrRkJVeXhIUVVGSExFZEJRVVVzUjBGQlJUdEJRVUZETEdkQ1FVRkhPMEZCUVVVc2NVSkJRVThzUlVGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVGRExHMUNRVUZUTEVkQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXhuUWtGQlJ6dEJRVUZGTEhGQ1FVRlBMRVZCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVRXNWVUZCUXp0QlFVRkRMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4dFFrRkJUeXhKUVVGRkxFVkJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRMRWxCUVVVN1FVRkJRU3hWUVVGRE8wRkJRVU1zYlVKQlFWTXNSMEZCUnl4SFFVRkZMRWRCUVVVN1FVRkJReXhuUWtGQlJ6dEJRVUZGTEhGQ1FVRlBMRVZCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZCUXl4dFFrRkJVeXhIUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNaMEpCUVVjN1FVRkJSU3h4UWtGQlR5eEZRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGQlF5eHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eG5Ra0ZCUnp0QlFVRkZMSEZDUVVGUExFVkJRVVVzU1VGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRVU1zYlVKQlFWTXNSMEZCUnl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zWjBKQlFVYzdRVUZCUlN4eFFrRkJUeXhGUVVGRkxFbEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVGRExHMUNRVUZUTEVkQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExHZENRVUZITzBGQlFVVXNjVUpCUVU4c1JVRkJSU3hKUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkROMlFzYlVKQlFWTXNSMEZCUnl4SFFVRkZPMEZCUVVNc1owSkJRVWM3UVVGQlJTeHhRa0ZCVHl4RlFVRkZMRWxCUVVjc1IwRkJSU3hEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZETEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRk8wRkJRVU1zWjBKQlFVYzdRVUZCUlN4eFFrRkJUeXhGUVVGRkxFbEJRVWNzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4VlFVRkRPMEZCUVVNc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMR2RDUVVGSE8wRkJRVVVzY1VKQlFVOHNSVUZCUlN4SlFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlFTeFZRVUZETzBGQlFVTXNZMEZCU1N4TFFVRkhMRTlCUVVjN1FVRkJReXhuUWtGQlJ5eFRRVUZQTzBGQlFVVXNjVUpCUVUwN1FVRkJUeXhuUWtGQlNTeEpRVUZGTEU5QlFVODdRVUZCUlN4dFFrRkJUU3hoUVVGWExFdEJRVWNzV1VGQlZTeExRVUZITEdWQlFXRXNTVUZCUlN4RlFVRkZMRk5CUVZNc1NVRkJSU3hMUVVGSE8wRkJRVUVzVlVGQlF5eEhRVUZGTEVsQlFVY3NTVUZCUlN4UFFVRkhPMEZCUVVNc2NVSkJRVkVzU1VGQlJTeEpRVUZITEVWQlFVVXNSVUZCUlN4TlFVRkpMRU5CUVVNN1FVRkJSeXh0UWtGQlJ5eEhRVUZITEVWQlFVVXNSVUZCUlN4UlFVRk5MRU5CUVVNc1EwRkJRenRCUVVGRkxHMUNRVUZQTzBGQlFVRXNWVUZCUXl4SFFVRkZMRXRCUVVjc1EwRkJReXhIUVVGRkxFdEJRVWNzUTBGQlF5eEhRVUZGTEV0QlFVY3NRMEZCUXl4SFFVRkZPMEZCUTI1VkxHMUNRVUZUTEVkQlFVY3NSMEZCUlN4SFFVRkZMRWxCUVVVc1EwRkJReXhIUVVGRk8wRkJRVU1zWjBKQlFVa3NTVUZCUlN4RlFVRkZPMEZCUVVzc1owSkJRVWNzUTBGQlF6dEJRVUZGTEc5Q1FVRk5MRWxCUVVrc1JVRkJSU3hUUVVGVExFTkJRVU1zSzBOQlFTdERPMEZCUVVVc1owSkJRVWNzUjBGQlJ5eGxRVUZsTEVOQlFVTXNSMEZCUlR0QlFVRkRMR3RDUVVGSExFVkJRVVU3UVVGQlJ6dEJRVUZQTEc5Q1FVRk5MRWxCUVVrc1JVRkJSU3g1UWtGQmVVSXNRMEZCUXl4VFFVRlRPMEZCUVVFc1dVRkJSVHRCUVVGRExHVkJRVWNzUTBGQlF5eEpRVUZGTzBGQlFVVXNiVUpCUVU4c1IwRkJSeXhEUVVGRE8wRkJRVVVzWlVGQlJ5eGxRVUZsTEVOQlFVTXNUVUZCU1N4SlFVRkZMRWRCUVVjc1EwRkJReXhIUVVGRkxFOUJRVThzUjBGQlJ5eERRVUZETEVkQlFVVXNSVUZCUlN4UlFVRlJMRTlCUVVjc1JVRkJSU3hEUVVGRE8wRkJRVUVzVlVGQlJUdEJRVUZETEcxQ1FVRlRMRVZCUVVVc1IwRkJSU3hIUVVGRkxFbEJRVVVzUTBGQlF5eEhRVUZGTzBGQlFVTXNaMEpCUVVjc1JVRkJSU3h2UWtGQmJVSTdRVUZCUnl4dlFrRkJUU3hKUVVGSkxGVkJRVlVzZVVSQlFYbEVPMEZCUVVVc1pVRkJSeXhIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZEZEdFc1kwRkJTU3hMUVVGSExFTkJRVU1zUjBGQlJTeEhRVUZGTEUxQlFVazdRVUZCUXl4dlFrRkJUeXhIUVVGRk8wRkJRVUVzWTBGQlF5eExRVUZMTzBGQlFVVXNkVUpCUVU4c1NVRkJSU3hQUVVGSExFVkJRVVVzUlVGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZMRTlCUVVjc1JVRkJSU3hGUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETzBGQlFVRXNZMEZCUlN4TFFVRkxPMEZCUVVVc2RVSkJRVThzU1VGQlJTeFBRVUZITEVWQlFVVXNSVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFOUJRVWNzUjBGQlJ5eEZRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRPMEZCUVVFc1kwRkJSU3hMUVVGTE8wRkJRVVVzZFVKQlFVOHNTVUZCUlN4UFFVRkhMRVZCUVVVc1JVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTEU5QlFVY3NSVUZCUlN4RlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRE8wRkJRVUVzWTBGQlJTeExRVUZMTzBGQlFVVXNkVUpCUVU4c1NVRkJSU3hQUVVGSExFVkJRVVVzVFVGQlNTeERRVUZETEVsQlFVVXNUMEZCUnl4SFFVRkhMRTFCUVVrc1EwRkJRenRCUVVGQkxHTkJRVVU3UVVGQlVTeHpRa0ZCVFN4SlFVRkpMRlZCUVZVc01FSkJRVEJDTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVN1FVRkJRU3haUVVGRk8wRkJRVUVzVlVGQlF6dEJRVUZGTEcxQ1FVRlRMRXRCUVVrN1FVRkJReXhwUWtGQlN5eExRVUZITEVOQlFVTXNUVUZCVFR0QlFVRkZMR2xDUVVGTExFdEJRVWNzUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZCUXl4alFVRkpMRWxCUVVVc1NVRkJTVHRCUVVGSExHMUNRVUZUTEVkQlFVY3NSMEZCUlR0QlFVRkRMRzFDUVVGTE8wRkJRVVVzYVVKQlFVY3NSVUZCUlN4TlFVRkpMRTFCUVVrc1JVRkJSU3hGUVVGRkxFbEJRVWtzUTBGQlF5eEZRVUZGTEUxQlFVa3NSVUZCUlN4SFFVRkhMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRM1JhTEdOQlFVa3NTVUZCUlN4UFFVRkhPMEZCUVVNc1owSkJRVWNzUTBGQlF6dEJRVUZGTEc5Q1FVRk5MRWxCUVVrc1JVRkJSU3h6UTBGQmIwTXNRMEZCUXp0QlFVRkZMRzFDUVVGUExFVkJRVVVzU1VGQlNTeERRVUZETEVWQlFVVTdRVUZCUVN4VlFVRkxMRWRCUVVVc1NVRkJSU3hQUVVGSE8wRkJRVU1zYjBKQlFVOHNSMEZCUlR0QlFVRkJMR05CUVVNc1MwRkJTenRCUVVGUExIVkNRVUZQTzBGQlFVRXNZMEZCUlN4TFFVRkxPMEZCUVVzc2RVSkJRVTg3UVVGQlFTeGpRVUZGTEV0QlFVczdRVUZCUnl4MVFrRkJUenRCUVVGQkxHTkJRVVVzUzBGQlN6dEJRVUZITEhWQ1FVRlBPMEZCUVVFc1kwRkJSVHRCUVVGUkxIVkNRVUZQTEVWQlFVVXNSMEZCUnl4RlFVRkRMRWxCUVVjc1IwRkJSU3hQUVVGTkxFVkJRVU1zUTBGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUVN4VlFVRkRPMEZCUVVVc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTzBGQlFVTXNiVUpCUVU4c1MwRkJTeXhoUVVGaExFVkJRVVVzUlVGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVOcVVpeGpRVUZKTEV0QlFVY3NRMEZCUXl4SFFVRkZMRTFCUVVrN1FVRkJReXh2UWtGQlR5eEhRVUZGTzBGQlFVRXNZMEZCUXl4TFFVRkxPMEZCUVVVc2RVSkJRVThzVTBGQlV5eEhRVUZGTzBGQlFVTXNjMEpCUVVrc1NVRkJSU3hMUVVGTE8wRkJRV0VzYjBKQlFVVXNWVUZCVVN4RlFVRkZMRlZCUVZFc1JVRkJSVHRCUVVGRkxIbENRVUZQTEVWQlFVVXNTMEZCU3l4TlFVRkxMRWRCUVVjc1RVRkJTU3hOUVVGSkxFTkJRVU1zUTBGQlF6dEJRVUZCTEdkQ1FVRkRPMEZCUVVFc1kwRkJSU3hMUVVGTE8wRkJRVVVzZFVKQlFVOHNVMEZCVXl4SFFVRkZPMEZCUVVNc2VVSkJRVThzUzBGQlN5eGhRVUZoTEVkQlFVY3NSVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhEUVVGRE8wRkJRVUVzWjBKQlFVTTdRVUZCUVN4alFVRkZPMEZCUVZFc2MwSkJRVTBzU1VGQlNTeFZRVUZWTEhkQ1FVRjNRaXhEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTzBGQlFVRXNXVUZCUlR0QlFVRkJMRlZCUVVNN1FVRkJSU3h0UWtGQlV5eEhRVUZITEVkQlFVVTdRVUZCUXl4dFFrRkJUeXhMUVVGTExHRkJRV0VzUlVGQlJTeEZRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRM0pWTEdOQlFVa3NTMEZCUnl4bFFVRmhMRTlCUVU4c1kwRkJXU3hKUVVGSkxGbEJRVmtzVlVGQlZTeEpRVUZGTEZGQlFVOHNTMEZCUnl4RFFVRkRMRWRCUVVVc1RVRkJTVHRCUVVGRExHZENRVUZKTEVsQlFVVXNTMEZCUnp0QlFVRkZMSEZDUVVGUkxFbEJRVVVzU1VGQlJTeEpRVUZGTEVkQlFVVXNSVUZCUlN4TFFVRkhMRTFCUVVrc1IwRkJSeXhGUVVGRkxFMUJRVWtzUTBGQlF6dEJRVUZITEdkQ1FVRkZPMEZCUVVVc2EwSkJRVWs3UVVGQlJTeG5Ra0ZCUnl4TFFVRkhMRWxCUVVVc1MwRkJSenRCUVVGSExIRkNRVUZQTEVkQlFVY3NUMEZCVHl4RlFVRkZMRVZCUVVVc1RVRkJUU3hIUVVGRkxFTkJRVU1zUTBGQlF6dEJRVUZGTEdkQ1FVRkZPMEZCUVVjc2FVSkJRVWtzU1VGQlJTeEhRVUZGTEVWQlFVVXNTMEZCUnl4SlFVRkZMRWxCUVVjc1JVRkJSU3hIUVVGRk8wRkJRVU1zYTBKQlFVa3NTVUZCUlN4RlFVRkZMRVZCUVVVc1NVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETzBGQlFVVXNhMEpCUVVjc1MwRkJSenRCUVVGRk8wRkJRVTBzYlVKQlFVY3NUMEZCVHl4aFFVRmhMRU5CUVVNN1FVRkJRU3haUVVGRE8wRkJRVU1zYlVKQlFVODdRVUZCUVN4VlFVRkRMRWRCUVVVc1MwRkJSeXhEUVVGRExFZEJRVVVzUjBGQlJTeE5RVUZKTzBGQlFVTXNkVUpCUVZNc1RVRkJTU3hKUVVGRk8wRkJRVmtzWjBKQlFVY3NTVUZCUlR0QlFVRkZMSEZDUVVGUE8wRkJRVVVzYVVKQlFVYzdRVUZCUlN4blFrRkJTU3hKUVVGRk8wRkJRVVVzWjBKQlFVVXNTVUZCUlN4SlFVRkZMRVZCUVVVc1UwRkJUeXhKUVVGRkxFbEJRVVVzUlVGQlJUdEJRVUZQTEhGQ1FVRlJMRWxCUVVVc1IwRkJSU3hKUVVGRkxFZEJRVVVzUlVGQlJTeEhRVUZGTzBGQlFVTXNhMEpCUVVrc1NVRkJSU3hGUVVGRkxGZEJRVmNzUTBGQlF6dEJRVUZGTEdkQ1FVRkZMRVZCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJUdEJRVUZGTEcxQ1FVRkhPMEZCUVVFc1dVRkJRenRCUVVGRExHTkJRVVVzUlVGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVVc2JVSkJRVThzU1VGQlJUdEJRVUZCTEZWQlFVTXNSMEZCUlN4TFFVRkhMRTlCUVVjc1NVRkJSU3hGUVVGRkxGRkJReTlsTEV0QlFVY3NRMEZCUXl4SFFVRkZMRTFCUVVrN1FVRkJReXh4UWtGQlVTeEpRVUZGTEVkQlFVVXNTVUZCUlN4SlFVRkhMRVZCUVVVc1MwRkJSeXhKUVVGRkxFMUJRVWs3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRVZCUVVVc1JVRkJSU3hKUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTTdRVUZCUlN4clFrRkJSeXhMUVVGSE8wRkJRVVU3UVVGQlRTeG5Ra0ZCUlR0QlFVRkZMSFZDUVVGUExFdEJRVWNzUzBGQlJ5eFBRVUZOTEV0QlFVY3NUMEZCVHl4aFFVRmhMRkZCUVUwc1MwRkJSeXhKUVVGSExGRkJRVTBzU1VGQlJTeEpRVUZKTEV0QlFVY3NTMEZCUnl4UFFVRlBMR0ZCUVdFc1EwRkJRenRCUVVGQkxGbEJRVU03UVVGQlF5eHRRa0ZCVHp0QlFVRkJMRlZCUVVNc1IwRkJSU3hMUVVGSExFTkJRVU1zUjBGQlJTeEhRVUZGTEUxQlFVazdRVUZCUXl4dFFrRkJTenRCUVVGRkxIVkNRVUZUTEUxQlFVa3NTVUZCUlR0QlFVRlpMR2RDUVVGSExFbEJRVVU3UVVGQlJTeHhRa0ZCVHp0QlFVRkZMR2RDUVVGSkxFbEJRVVU3UVVGQlJTeG5Ra0ZCUlN4SlFVRkZMRWxCUVVVN1FVRkJSU3h4UWtGQlVTeEpRVUZGTEVkQlFVVXNTVUZCUlN4RlFVRkZMRkZCUVU4c1JVRkJSU3hIUVVGRk8wRkJRVU1zYTBKQlFVa3NTVUZCUlN4RlFVRkZMRmRCUVZjc1EwRkJRenRCUVVGRkxHdENRVUZITEZOQlFVOHNTMEZCUnl4VFFVRlBMRWRCUVVVN1FVRkJReXh2UWtGQlNTeEpRVUZGTEVWQlFVVXNWMEZCVnl4RlFVRkZMRU5CUVVNN1FVRkJSU3h2UWtGQlJTeFZRVUZSTEVsQlFVVXNVMEZCVHl4TlFVRkpMRWxCUVVVN1FVRkJRU3hqUVVGSk8wRkJRVU1zWjBKQlFVVXNSVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRk8wRkJRVVVzYlVKQlFVYzdRVUZCUlN4clFrRkJSeXhKUVVGRkxFbEJRVVU3UVVGQlJUdEJRVUZCTEZsQlFVczdRVUZCUXl4alFVRkZMRVZCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJUdEJRVUZGTEcxQ1FVRlBMRWxCUVVVN1FVRkJRU3hWUVVGRExFZEJRVVVzUzBGQlJ5eFBRVUZITzBGQlFVTXNjVUpCUVZFc1NVRkJSU3hIUVVGRkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVWQlFVVXNVVUZCVHl4RlFVRkZMRWRCUVVVN1FVRkJReXhyUWtGQlNTeEpRVU4yWml4RlFVRkZMRmRCUVZjc1EwRkJRenRCUVVGRkxIVkNRVUZQTEV0QlFVY3NVMEZCVHl4TFFVRkhMRVZCUVVVN1FVRkJSU3h0UWtGQlJ6dEJRVUZCTEZsQlFVTTdRVUZCUXl4dFFrRkJUenRCUVVGQkxGVkJRVU1zUjBGQlJTeExRVUZITEU5QlFVYzdRVUZCUXl4blFrRkJSeXhEUVVGRE8wRkJRVWNzYTBKQlFVYzdRVUZCUXl4dlFrRkJSeXhGUVVGRkxFZEJRVVVzUTBGQlF5eEhRVUZITzBGQlFVVXNjMEpCUVVjN1FVRkJReXgzUWtGQlJTeEhRVUZITEVOQlFVTXNTVUZCUlN4SFFVRkhMRU5CUVVNN1FVRkJRU3hyUWtGQlF5eFRRVUZQTEVkQlFVVTdRVUZCUXl4cFEwRkJZU3hOUVVGSkxGbEJRVlVzUzBGQlJ5eEhRVUZITEVkQlFVVXNRMEZCUXp0QlFVRkJMR3RDUVVGRE8wRkJRVUVzWTBGQlF5eFRRVUZQTEVkQlFVVTdRVUZCUXl3MlFrRkJZU3hOUVVGSkxGbEJRVlVzUzBGQlJ5eEhRVUZITEVkQlFVVXNRMEZCUXp0QlFVRkJMR05CUVVNN1FVRkJRU3hWUVVGRE8wRkJRVVVzYlVKQlFWTXNSMEZCUnl4SFFVRkZPMEZCUVVNc2JVSkJRVXM3UVVGQlJTd3lRa0ZCWVN4UFFVRlBMRkZCUVZFc1QwRkJTeXhSUVVGUkxFZEJRVWNzUlVGQlJTeEhRVUZGTEUxQlFVa3NSMEZCUlN4RFFVRkRMRVZCUVVVc1RVRkJUU3hMUVVGTExFVkJRVVVzUjBGQlJTeExRVUZITEV0QlFVa3NVVUZCVVN4TlFVRk5MRVZCUVVVc1IwRkJSU3hOUVVGSkxFZEJRVVVzUTBGQlF6dEJRVUZCTEZWQlFVVTdRVUZCUXl4WlFVRkZMRzlEUVVGclF6dEJRVUZITEdOQlFVa3NTMEZCUnl4TlFVRkpPMEZCUVVNc1owSkJRVWtzU1VGQlJTeEhRVUZITzBGQlFVVXNhMEpCUVVrc1IwRkJSeXhEUVVGRExFZEJRVVVzUjBGQlJ5eE5RVUZKTEVkQlFVY3NRMEZCUXp0QlFVRkJMRlZCUVVVN1FVRkJSU3haUVVGRkxHVkJRV0U3UVVGQlJ5eGpRVUZKTEV0QlFVY3NUMEZCUnp0QlFVRkRMR2RDUVVGSkxFbEJRVVVzUjBGQlJ6dEJRVUZGTEdkQ1FVRkZMRVZCUVVVN1FVRkJSU3hsUVVGSExFTkJRVU03UVVGQlJTeHRRa0ZCVHp0QlFVRkJMRlZCUVVNN1FVRkROMlFzYlVKQlFWTXNSVUZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXhuUWtGQlNTeEpRVUZGTEZWQlFWVXNVMEZCVHl4SFFVRkZMRWxCUVVVN1FVRkJWU3h0UWtGQlR5eEhRVUZITEUxQlFVazdRVUZCUXl4MVFrRkJVU3hKUVVGRkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVkQlFVY3NTVUZCUlN4RFFVRkRMRWRCUVVVc1NVRkJSU3hOUVVGSkxFZEJRVVVzU1VGQlJTeEhRVUZGTEVsQlFVVXNSMEZCUlN4TFFVRkpPMEZCUVVNc2IwSkJRVWtzU1VGQlJTeEZRVUZGTEVsQlFVVXNRMEZCUXp0QlFVRkZMRFJDUVVGVkxFOUJRVThzUzBGQlJ5eEZRVUZGTEVsQlFVVXNTVUZCUlN4RFFVRkRMRWxCUVVVc1NVRkJSeXhGUVVGRkxFbEJRVVVzU1VGQlJTeEpRVUZGTEVOQlFVTXNTVUZCUlN4TlFVRkpMRVZCUVVVc1NVRkJSU3hKUVVGRkxFTkJRVU1zU1VGQlJTeEpRVUZITEVkQlFVY3NSVUZCUlN4SlFVRkZMRWxCUVVVc1NVRkJSU3hOUVVGSkxFTkJRVU1zU1VGQlJUdEJRVUZCTEdOQlFVVTdRVUZCUXl4eFFrRkJUeXhIUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4WlFVRkRMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRMnhQTEdOQlFVa3NTMEZCUnl4RFFVRkRMRWRCUVVVc1MwRkJSeXhEUVVGRExFZEJRVVVzVFVGQlNUdEJRVUZETEdkQ1FVRkpMRWxCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVVVzWjBKQlFVY3NWMEZCVXp0QlFVRkZMRzlDUVVGTkxFbEJRVVVzUjBGQlJ5eERRVUZETEVkQlFVVXNTVUZCUlN4RlFVRkZMRU5CUVVNc1IwRkJSU3hGUVVGRkxFTkJRVU1zUjBGQlJTeEpRVUZKTEVWQlFVVXNTVUZCUlN4MVFrRkJjVUlzUTBGQlF6dEJRVUZGTEcxQ1FVRlBPMEZCUVVFc1ZVRkJReXhIUVVGRkxFdEJRVWNzUTBGQlF5eEhRVUZGTEV0QlFVY3NUMEZCUnp0QlFVRkRMR2RDUVVGSkxFbEJRVVVzUjBGQlJ5eERRVUZETzBGQlFVVXNiVUpCUVU4c1YwRkJVeXhKUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZGTzBGQlFVRXNWVUZCUXl4SFFVRkZMRXRCUVVjc1EwRkJReXhIUVVGRkxFdEJRVWNzVFVGQlNTeFpRVUZWTEU5QlFVOHNZVUZCVnl4aFFVRlhMRk5CUVZNc1lVRkJZU3hGUVVGRkxFZEJRVVVzUzBGQlJ5eFBRVUZITzBGQlFVTXNaMEpCUVVrc1NVRkJSU3hIUVVGSE8wRkJRVThzWlVGQlJ5eExRVUZMTEVOQlFVTTdRVUZCUlN4dFFrRkJUenRCUVVGQkxGVkJRVU1zUjBGQlJTeExRVUZITEVOQlFVTXNSMEZCUlN4TlFVRkpPMEZCUVVNc2NVSkJRVkVzU1VGQlJTeE5RVUZOTEVOQlFVTXNSMEZCUlN4SlFVRkZMRWRCUVVVc1NVRkJSU3hIUVVGRkxFVkJRVVU3UVVGQlJTeG5Ra0ZCUlN4RFFVRkRMRWxCUVVVc1IwRkJSeXhGUVVGRkxFVkJRVVVzU1VGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWRCUVVVc1pVRkJZU3hEUVVGRE8wRkJRVVVzYlVKQlFVODdRVUZCUVN4VlFVRkRMRWRCUVVVc1MwRkJSeXhQUVVGSE8wRkJRVU1zWjBKQlFVY3NWMEZCVXp0QlFVRkZMSEZDUVVGTk8wRkJRVmNzWjBKQlFVVXNSVUZCUlN4UlFVRlJMR3RDUVVGcFFpeEhRVUZITzBGQlFVVXNaMEpCUVVrc1NVRkJSU3hGUVVGRkxGZEJRVmNzUTBGQlF6dEJRVUZGTEcxQ1FVRlBMRTFCUVVrc1MwRkJSeXhOUVVGSkxFbEJRVVVzU1VGQlNTeERRVUZETEV0QlEzUm1PMEZCUVVFc1ZVRkJReXhIUVVGRkxFdEJRVWNzUTBGQlF6dEJRVUZGTEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRk8wRkJRVU1zWjBKQlFVVXNSMEZCUnl4RFFVRkRPMEZCUVVVc2JVSkJRVTBzUlVGQlF5eERRVUZETEVOQlFVTXNSMEZCUlN4WFFVRlZPMEZCUVVNc2NVSkJRVThzUlVGQlJTeE5RVUZOTEUxQlFVc3NVMEZCVXp0QlFVRkJMRmxCUVVNc1JVRkJReXhGUVVGRkxFTkJRVU03UVVGQlFTeFZRVUZETzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRk8wRkJRVU1zWjBKQlFVa3NTVUZCUlR0QlFVRlRMR2RDUVVGSExFVkJRVVVzWVVGQllUdEJRVUZWTEc5Q1FVRk5MRWxCUVVrc1ZVRkJWU3h4UTBGQmNVTXNUMEZCVHl4RFFVRkRMREJDUVVFd1FqdEJRVUZGTEdkQ1FVRkpMRWxCUVVVc1IwRkJSeXhGUVVGRkxGRkJRVTBzZFVKQlFYTkNMRmRCUVZVN1FVRkJRU3haUVVGRExFTkJRVU03UVVGQlJTeGpRVUZGTEZsQlFWVXNSVUZCUlR0QlFVRlZMR2RDUVVGRkxFbEJRVWs3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRTFCUVUwc1IwRkJSU3hEUVVGRE8wRkJRVVVzYlVKQlFVOHNZVUZCWVN4VFFVRlBMRWxCUVVVN1FVRkJRU3hWUVVGRE8wRkJRM0pZTEdOQlFVa3NTMEZCUnl4UFFVRkhPMEZCUVVNc2NVSkJRVkVzU1VGQlJTeEpRVUZITEVsQlFVVXNSMEZCUlN4SlFVRkZMRWRCUVVVc1JVRkJSVHRCUVVGRkxHOUNRVUZKTEUxQlFVa3NTVUZCUlN4UFFVRkxMRTFCUVVrc1VVRkJUVHRCUVVGRkxHZENRVUZKTEVsQlFVVXNjVU5CUVcxRExFbEJRVVU3UVVGQmEwVXNhVUpCUVVrc1NVRkJSU3hIUVVGRkxFbEJRVVVzUjBGQlJTeEZRVUZGTzBGQlFVVXNiVUpCUVVjc1owSkJRV01zU1VGQlJTeHZSVUZCYTBVc1NVRkJSU3hwUWtGQlpTeEpRVUZGTEdWQlFXRXNTVUZCUlN4clJFRkJaMFFzU1VGQlJUdEJRVUYzUXl4dFFrRkJUeXhKUVVGSkxGTkJRVk1zZVVKQlFYZENMRlZCUVZNc2FVSkJRV2RDTEdGQlFWa3NTMEZCUnl3clFrRkRhbVVzU1VGQlJTeHpRMEZCYzBNc1JVRkJSeXhKUVVGSExFZEJRVVVzUjBGQlJTeE5RVUZKTEVWQlFVVXNRMEZCUXp0QlFVRkJMRlZCUVVNc1IwRkJSU3hMUVVGSExFTkJRVU1zUjBGQlJTeEpRVUZGTEU5QlFVY3NUVUZCU1N4SlFVRkZMRTFCUVVrc1RVRkJTU3hKUVVGRkxFOUJRVXNzVFVGQlNTeEpRVUZGTEUxQlFVc3NTMEZCUnl4RFFVRkRMRWRCUVVVc1NVRkJSeXhKUVVGSExFbEJRVWNzUzBGQlNTeExRVUZKTEV0QlFVa3NTMEZCU1N4TFFVRkpMRXRCUVVrc1MwRkJTU3hIUVVGSExFZEJRVVVzUzBGQlJ5eERRVUZETEVkQlFVVXNTVUZCUnl4SlFVRkhMRWxCUVVjc1MwRkJTU3hMUVVGSkxFdEJRVWtzUzBGQlNTeExRVUZKTEV0QlFVa3NTMEZCU1N4SFFVRkhPMEZCUVVVc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zYlVKQlFVOHNTVUZCUlN4RlFVRkZMRWxCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRMRWxCUVVVN1FVRkJRU3hWUVVGSE8wRkJRVU1zYlVKQlFWTXNSMEZCUnl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEdkQ1FVRkhPMEZCUVVVc2NVSkJRVThzUlVGQlJTeEpRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlFTeFZRVUZETzBGQlF6ZFVMR05CUVVrc1MwRkJSeXhQUVVGSE8wRkJRVU1zWjBKQlFVa3NTVUZCUlN4SFFVRkhMRU5CUVVNc1NVRkJSU3hIUVVGRkxFbEJRVVVzUjBGQlJ5eERRVUZETzBGQlFVVXNhVUpCUVVjc1IwRkJSeXhIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEcxQ1FVRlBPMEZCUVVFc1ZVRkJReXhIUVVGRkxFdEJRVWNzUTBGQlF5eEhRVUZGTEV0QlFVY3NUVUZCU1R0QlFVRkRMR2RDUVVGSExFTkJRVU1zU1VGQlJ6dEJRVUZETEd0Q1FVRkpMRWxCUVVVc1JVRkJReXhOUVVGTExGbEJRVmNzVTBGQlVTeFpRVUZYTEUxQlFVc3NTMEZCU1N4TFFVRkpMRXRCUVVrc1RVRkJTeXhyUWtGQmFVSXNUMEZCVFN4WlFVRlZMRTlCUVU4c1lVRkJWeXhWUVVGVkxHRkJRVmNzVlVGQlZTeFZRVUZWTEVOQlFVTXNTMEZCUnl4TFFVRkxMRkZCUVZFc1MwRkJTU3hIUVVGSExFbEJRVVVzVlVGQlV5eEhRVUZGTEUxQlFVa3NhVUpCUVdkQ0xFZEJRVVU3UVVGQlJTeHRRa0ZCU1N4TFFVRkxPMEZCUVVjc01rSkJRVk1zUjBGQlJ5eERRVUZETEVsQlFVVXNUMEZCVHl4RlFVRkZMRU5CUVVNc1NVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlJTeEhRVUZITEVOQlFVTTdRVUZCUlN4clFrRkJTU3hKUVVGRkxFTkJRVU03UVVGQlJTeHRRa0ZCU1N4TFFVRkxPMEZCUVVVc2EwSkJRVVVzUzBGQlN5eEhRVUZITEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRk8wRkJRVVVzYlVKQlFVYzdRVUZCUVN4WlFVRkRPMEZCUVVNc2JVSkJRVTg3UVVGQlFTeFZRVUZGTEVkQlFVVTdRVUZEY0Zvc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTEVkQlFVVTdRVUZCUXl4blFrRkJSenRCUVVGRkxIRkNRVUZQTEVWQlFVVXNTVUZCUnl4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGRkxHMUNRVUZMTzBGQlFVVXNiVUpCUVVzN1FVRkJSU3huUWtGQlNTeEpRVUZGTzBGQlFVVXNaVUZCUnl4RlFVRkZMRkZCUVZFc1EwRkJReXhIUVVGRkxFMUJRVWs3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRWxCUVVVN1FVRkJSU3hyUWtGQlJTeEZRVUZGTEVWQlFVVXNTVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVU3UVVGQlJTeHRRa0ZCU1N4SlFVRkZMRWRCUVVVc1NVRkJSU3hGUVVGRkxGRkJRVThzUlVGQlJUdEJRVUZGTEd0Q1FVRkZMRVZCUVVVc1VVRkJUU3hOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZkQlFWY3NRMEZCUXp0QlFVRkZMR2RDUVVGRkxFVkJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlR0QlFVRkZMRzFDUVVGSExFVkJRVVVzVTBGQlR6dEJRVUZCTEZsQlFVTXNRMEZCUXp0QlFVRkZMRzFDUVVGUE8wRkJRVUVzVlVGQlF6dEJRVUZETEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRk8wRkJRVU1zWjBKQlFVYzdRVUZCUlN4eFFrRkJUeXhGUVVGRkxFbEJRVWNzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUlN4dFFrRkJTenRCUVVGRkxHMUNRVUZMTzBGQlFVVXNaMEpCUVVrc1NVRkJSU3hIUVVGSE8wRkJRVVVzWTBGQlJTeEZRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSVHRCUVVGUExHZENRVUZKTEVsQlFVVTdRVUZCUlN4alFVRkZMRkZCUVZFc1QwRkJSeXhMUVVGSExFVkJRVVVzVTBGQlR5eERRVUZETzBGQlFVVXNZMEZCUlN4RlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVU3UVVGQlJTeHRRa0ZCVHp0QlFVRkJMRlZCUVVNN1FVRkJReXh0UWtGQlV5eEhRVUZITEVkQlFVVTdRVUZCUXl4dFFrRkJUeXhKUVVGRkxFVkJRVVVzU1VGQlJ5eEhRVUZGTEVOQlFVTXNTVUZCUlR0QlFVRkJMRlZCUVVVN1FVRkJReXh0UWtGQlV5eEhRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXh0UWtGQlR5eEpRVUZGTEVWQlFVVXNTVUZCUnl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU1zU1VGQlJUdEJRVUZCTEZWQlFVVTdRVUZEY0dNc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVThzU1VGQlJTeEZRVUZGTEVsQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRExFbEJRVVU3UVVGQlFTeFZRVUZGTzBGQlFVTXNZMEZCU1N4TFFVRkhMRU5CUVVNc1RVRkJTeXhEUVVGRExFZEJRVVVzUTBGQlF5eERRVUZETzBGQlFVVXNiVUpCUVZNc1IwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNaMEpCUVVjN1FVRkJSU3h4UWtGQlR5eEZRVUZGTEVsQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4dFFrRkJTenRCUVVGRkxHMUNRVUZMTzBGQlFVVXNjVUpCUVZFc1NVRkJSU3hIUVVGRkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVkQlFVVXNTMEZCU1R0QlFVRkRMR3RDUVVGSkxFbEJRVVVzUlVGQlJTeEZRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWRCUVVVc1NVRkJSU3hGUVVGRkxFVkJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXp0QlFVRkZMRzFDUVVGSE8wRkJRVVVzZFVKQlFWRXNTVUZCUlN4SFFVRkZMRWxCUVVVc1IwRkJSU3hMUVVGSk8wRkJRVU1zYjBKQlFVa3NTVUZCUlN4RlFVRkZMRVZCUVVVc1NVRkJSU3hOUVVGSkxFTkJRVU1zUjBGQlJTeEpRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMSE5DUVVGSkxFdEJRVWNzVDBGQlN5eE5RVUZKTEUxQlFVa3NTVUZCUlN4TFFVRkhMRWRCUVVjc1IwRkJSeXhIUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZGTEVWQlFVVXNVMEZCVHl4TFFVRkhMRVZCUVVVc1MwRkJTeXhEUVVGRE8wRkJRVUVzWTBGQlF6dEJRVUZETEcxQ1FVRkhPMEZCUVVFc1dVRkJRenRCUVVGRExHTkJRVVVzUlVGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVVc2JVSkJRVTg3UVVGQlFTeFZRVUZETzBGQlFVTXNZMEZCU1N4TFFVRkhMRU5CUVVNc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFVkJRVVVzUjBGQlJTeExRVUZITEVOQlFVTXNTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRVZCUVVVN1FVRkJSU3h0UWtGQlV5eEhRVUZITEVkQlFVVTdRVUZCUXl4blFrRkJTU3hKUVVGRkxFMUJRVTBzUjBGQlJ5eERRVUZETEVsQlFVVXNRMEZCUXp0QlFVRkZMR1ZCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzUlVGQlJTeE5RVUZOTzBGQlFVVXNiVUpCUVU4N1FVRkJRU3hWUVVGRE8wRkJRMmhtTEdOQlFVa3NTMEZCUnl4RFFVRkRMRWRCUVVVc1RVRkJTVHRCUVVGRExHTkJRVVVzUlVGQlJTeEpRVUZKTEVkQlFVVXNUVUZCU1N4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVNdlFpeHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHhRa0ZCVXl4RlFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zYlVKQlFVa3NTVUZCUlN4WlFVRlZMRTlCUVU4c1NVRkJSU3hGUVVGRkxGTkJRVk1zU1VGQlJTeExRVUZITEVsQlFVY3NSVUZCUlN4VFFVRlBPMEZCUVVjc2IwSkJRVVVzUlVGQlJTeERRVUZETEVsQlFVVTdRVUZCUlN4eFFrRkJUenRCUVVGQkxGbEJRVU03UVVGQlF5eHhRa0ZCVXl4RlFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExIRkNRVUZQTEVWQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVjN1FVRkJRU3haUVVGRE8wRkJRVU1zY1VKQlFWTXNSVUZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXgxUWtGQlV5eEZRVUZGTEVsQlFVYzdRVUZCUXl4MVFrRkJUeXhKUVVGRkxFdEJRVWNzUzBGQlJ5eEpRVUZGTEV0QlFVY3NTVUZCUlR0QlFVRkJMR05CUVVNN1FVRkJReXhyUWtGQlNUdEJRVUZGTEhGQ1FVRkxMRWxCUVVVc1JVRkJSU3hGUVVGRkxGbEJRVmtzU1VGQlJTeEZRVUZGTEZsQlFWa3NRMEZCUXl4TlFVRkpMRTlCUVVzc1NVRkJSU3hGUVVGRkxFVkJRVVVzVTBGQlV5eEpRVUZGTEVWQlFVVXNVMEZCVXl4RFFVRkRMRTlCUVVzc1NVRkJSU3hGUVVGRkxFVkJRVVVzVVVGQlVTeEpRVUZGTEVWQlFVVXNVVUZCVVN4RFFVRkRPMEZCUVVjc2NVSkJRVTg3UVVGQlFTeFpRVUZETzBGQlFVTXNjVUpCUVZNc1JVRkJSU3hIUVVGRk8wRkJRVU1zYzBKQlFVOHNSVUZCUlN4UFFVRlBMRWRCUVVVN1FVRkJRU3huUWtGQlF5eExRVUZMTzBGQlFVVXNlVUpCUVU4c1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEpRVUZGTEVkQlFVVXNTVUZCUnl4RlFVRkZPMEZCUVVFc1owSkJRVVVzUzBGQlN6dEJRVUZGTEhsQ1FVRlBPMEZCUVVFc1owSkJRVVVzUzBGQlN6dEJRVUZGTEhsQ1FVRlBMRWxCUVVrc1MwRkJTeXhGUVVGRkxGbEJRVmtzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4blFrRkJSU3hMUVVGTE8wRkJRVVVzZVVKQlFVOHNTVUZCU1R0QlFVRkJMRzlDUVVGTExFVkJRVVVzV1VGQldUdEJRVUZCTEc5Q1FVTTFaanRCUVVGQkxHOUNRVUZGTzBGQlFVRXNhMEpCUVVNN1FVRkJRU3huUWtGQlJTeExRVUZMTzBGQlFVVXNlVUpCUVU4c1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMR2RDUVVGRkxFdEJRVXM3UVVGQlJTeDVRa0ZCVHl4SlFVRkpMRXRCUVVzc1JVRkJSU3haUVVGWkxFbEJRVVVzUjBGQlJTeEpRVUZITEVWQlFVVTdRVUZCUVN4blFrRkJSU3hMUVVGTE8wRkJRVVVzZVVKQlFVOHNTVUZCU1N4TFFVRkxMRVZCUVVVc1dVRkJXU3hKUVVGRkxFZEJRVVVzU1VGQlJ5eEZRVUZGTzBGQlFVRXNZMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJReXh4UWtGQlV5eEZRVUZGTEVkQlFVVTdRVUZCUXl4clFrRkJTU3hKUVVGRkxFVkJRVVU3UVVGQlJ5eHRRa0ZCU1N4SlFVRkZMRWxCUVVrc1MwRkJUU3hKUVVGSkxFdEJRVXNzUlVGQlJTeExRVUZITEUxQlFVc3NSMEZCUlN4RFFVRkRMRVZCUVVjc1VVRkJVU3hEUVVGRExFZEJRVVVzU1VGQlJTeExRVUZITzBGQlFVTXNiMEpCUVVrc1NVRkJSU3hGUVVGRkxGTkJRVk1zUjBGQlJTeExRVUZITEVWQlFVVXNSVUZCUlN4WlFVRlpMRU5CUVVNc1NVRkJSU3hMUVVGSExFbEJRVWtzUTBGQlF6dEJRVUZGTEc5Q1FVRkhMRWxCUVVVc1NVRkJSU3hGUVVGRkxGRkJRVkU3UVVGQlJTeDFRa0ZCUnl4SlFVRkZMRVZCUVVVc1VVRkJVU3hKUVVGRkxFZEJRVVVzUlVGQlJTeFJRVUZSTEVOQlFVTXNSMEZCUlN4TFFVRkhMRWxCUVVVc1JVRkJSU3hUUVVGVExFbEJRVVVzUTBGQlF5eExRVUZITEVWQlFVVXNVMEZCVXl4RFFVRkRMRWRCUVVVc1JVRkJSU3haUVVGWkxFVkJRVVVzV1VGQldTeEpRVUZGTEVOQlFVTTdRVUZCUVN4eFFrRkJUenRCUVVGRExHOUNRVUZGTEZGQlFWRXNSVUZCUlN4UlFVRlJMRWxCUVVVc1EwRkJRenRCUVVGRk8wRkJRVUVzWjBKQlFVczdRVUZCUVN4alFVRkRPMEZCUVVNc2EwSkJRVVVzU1VGQlNTeExRVUZMTEVWQlFVVXNXVUZCV1N4SlFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzYTBKQlFVVXNSVUZCUlN4SlFVRkpPMEZCUVVFc1owSkJRVXNzUlVGQlJTeFpRVUZaTzBGQlFVRXNaMEpCUTI1bU8wRkJRVUVzWjBKQlFVVTdRVUZCUVN4alFVRkRMRU5CUVVNN1FVRkJSU3hyUWtGQlJTeEZRVUZGTEVOQlFVTTdRVUZCUlN4eFFrRkJUeXhMUVVGSExFVkJRVVVzUjBGQlJTeERRVUZETEVsQlFVVXNTMEZCUnl4RlFVRkZMRWRCUVVVc1EwRkJReXhKUVVGRkxFVkJRVVVzV1VGQldTeEpRVUZGTEVsQlFVVXNSVUZCUlN4WlFVRlpMRWxCUVVVc1JVRkJSU3haUVVGWkxFbEJRVVU3UVVGQlFTeFpRVUZETzBGQlFVTXNiVUpCUVVzN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEcxQ1FVRkxPMEZCUVVVc2JVSkJRVXM3UVVGQlJTeG5Ra0ZCU1N4SlFVRkZMRVZCUVVVc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETzBGQlFVVXNaMEpCUVVVc1JVRkJReXhKUVVGSExFVkJRVVVzUlVGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVjc1JVRkJSU3hGUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkhMRVZCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVkQlFVVXNTVUZCUnl4RlFVRkZMRVZCUVVVc1NVRkJSU3hQUVVGTExFMUJRVWtzUTBGQlF5eEhRVUZGTEVsQlFVY3NSVUZCUlN4RlFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zUjBGQlJTeEpRVUZITEVWQlFVVXNSVUZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFZEJRVVVzU1VGQlJ5eEZRVUZGTEVWQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhIUVVGRkxFbEJRVWNzUlVGQlJTeEZRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1IwRkJSU3hKUVVGSExFVkJRVVVzUlVGQlJTeEpRVUZGTEU5QlFVc3NUVUZCU1N4RFFVRkRMRWRCUVVVc1NVRkJSeXhGUVVGRkxFVkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVjc1NVRkJSU3hIUVVGSExFTkJRVU1zU1VGQlJTeEhRVUZGTzBGQlFVVXNaMEpCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVVVzWjBKQlFVVTdRVUZCUVN4alFVRkRMRTFCUVVzN1FVRkJRU3hqUVVGMVFpeE5RVUZMTzBGQlFVRXNZMEZCVnl4TlFVRkxPMEZCUVVFc1kwRkJWeXhOUVVGTE8wRkJRVUVzWTBGQlN5eE5RVUZMTzBGQlFVRXNZMEZCWXl4TlFVRkxPMEZCUVVFc1kwRkJVU3hOUVVGTE8wRkJRVUVzWTBGQlZ5eE5RVUZMTzBGQlFVRXNZMEZEY21Zc1RVRkJTenRCUVVGQkxHTkJRVmNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVmNzVDBGQlRUdEJRVUZCTEdOQlFWY3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEZsQlFVazdRVUZCUlN4eFFrRkJVU3hMUVVGTE8wRkJRVVVzYTBKQlFVVXNSVUZCUlN4UlFVRlJMRWxCUVVrc1QwRkJUeXhIUVVGRkxFZEJRVWNzUjBGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVRkZMR2RDUVVGSkxFbEJRVVVzTWtSQlFUSkVMRTFCUVUwc1IwRkJSeXhIUVVGRkxFbEJRVVVzZDBaQlFYZEdMRTFCUVUwc1IwRkJSenRCUVVGRkxHZENRVUZGTEVWQlFVTXNUVUZCU3l4UFFVRkhMRVZCUVVVc1JVRkJSU3hGUVVGRkxFVkJRVVVzVlVGQlZTeEhRVUZGTEVOQlFVTXNSMEZCUlN4TlFVRkxMRTlCUTNwbUxFVkJRVVVzUlVGQlJTeEZRVUZGTEVkQlFVVXNUVUZCU3l4UFFVRkhMRVZCUVVVc1JVRkJSU3hGUVVGRkxFVkJRVVVzVlVGQlZTeEhRVUZGTEVOQlFVTXNSMEZCUlN4TlFVRkxMRTlCUVVjc1JVRkJSU3hGUVVGRkxFVkJRVVVzUjBGQlJTeE5RVUZMTEU5QlFVY3NSMEZCUnl4RlFVRkZMRXRCUVVjc1VVRkJUU3hOUVVGSkxFZEJRVVVzUTBGQlF5eEhRVUZGTEUxQlFVc3NUMEZCUnl4RlFVRkZMRVZCUVVVc1NVRkJSeXhEUVVGRExFZEJRVVVzVFVGQlN5eFBRVUZITEVWQlFVVXNSVUZCUlN4SlFVRkhMRWRCUVVVc1IwRkJSeXhIUVVGRkxFMUJRVXNzVDBGQlJ5eEZRVUZGTEVOQlFVTXNSVUZCUlN4VFFVRlRMRVZCUVVVc1ZVRkJWU3hEUVVGRExFZEJRVVVzVFVGQlN5eFBRVUZITEVWQlFVVXNRMEZCUXl4SFFVRkZMRTFCUVVzc1QwRkJSeXhGUVVGRkxFVkJRVVVzU1VGQlJ5eERRVUZETEVkQlFVVXNUVUZCU3l4UFFVRkhPMEZCUVVNc2EwSkJRVVVzUlVGQlJUdEJRVUZITEcxQ1FVRkhMRWxCUVVVc1NVRkJSU3hMUVVGSExFdEJRVWNzVFVGQlNTeExRVUZITzBGQlFVa3NjVUpCUVU4c1JVRkJSU3hIUVVGRkxFTkJRVU03UVVGQlFTeFpRVUZETEVkQlFVVXNUVUZCU3l4UFFVRkhPMEZCUVVNc2RVSkJRVkVzU1VGQlJTeEhRVUZGTEVsQlFVVXNSMEZCUlN4TFFVRkhMRVZCUVVVc1MwRkJSeXhIUVVGRkxFMUJRVWtzUlVGQlJTeEZRVUZGTEV0QlFVY3NTVUZCU1N4SlFVRkZMRXRCUVVjc1NVRkJTU3hIUVVGSE8wRkJRVVU3UVVGQlF5eHhRa0ZCVHl4RlFVRkZMRVZCUVVVc1MwRkJSeXhIUVVGRkxFTkJRVU03UVVGQlFTeFpRVUZETEVkQlFVVXNUVUZCU3l4UFFVRkhMRVZCUVVVc1JVRkJSU3hMUVVGSExFZEJRVVVzUTBGQlF5eEhRVUZGTEUxQlFVc3NUMEZCUnl4RlFVRkZMRVZCUVVVc1NVRkJSeXhEUVVGRExFZEJRVVVzVFVGQlN5eE5RVUZKTEUxQlFVc3NUVUZCU3l4UFFVRkhMRXRCUVVjc1JVRkJSU3hOUVVGSkxFdEJRVWNzUlVGQlJTeExRVUZITEU5QlFVc3NUVUZCU3l4TlFVRkxMRTlCUVVjc1JVRkJSU3hGUVVGRkxFbEJRVWNzUTBGQlF5eEhRVUZGTEUxQlFVc3NUVUZCU1N4TFFVRkxMRTFCUVVzc1QwRkJSeXhGUVVGRkxFMUJRVWtzUjBGQlJTeE5RVUZMTEU5QlFVY3NSVUZCUlN4TFFVRkxMRTlCUVU4c1JVRkJSU3hMUVVGSExFbEJRVVVzUlVGQlJTeE5RVU53Wml4RFFVRkRMRWRCUVVVc1EwRkJReXhIUVVGRkxFMUJRVXNzVDBGQlJ6dEJRVUZETEd0Q1FVRkpMRWxCUVVVc1MwRkJTeXhQUVVGUExFVkJRVVVzUzBGQlJ5eExRVUZITEVWQlFVVXNTMEZCUnl4TFFVRkhMRXRCUVVjc1EwRkJRenRCUVVGRkxHOUNRVUZKTEVWQlFVVXNTMEZCUnl4TlFVRkpMRVZCUVVVc1MwRkJSeXhMUVVGSExFdEJRVWM3UVVGQlNTeHJRa0ZCUnp0QlFVRkZMSE5DUVVGSkxFMUJRVWtzUzBGQlJ5eEZRVUZGTEV0QlFVY3NUVUZCU1N4RlFVRkZMRTFCUVVrc1IwRkJSU3hMUVVGSExFdEJRVWNzUzBGQlJ5eExRVUZITEVWQlFVVXNSVUZCUlN4RlFVRkZMRTFCUVVrc1NVRkJSVHRCUVVGQkxHMUNRVUZSTzBGQlFVTXNiMEpCUVVVN1FVRkJSeXh2UWtGQlNTeExRVUZITEVWQlFVVXNTMEZCUnl4SlFVRkZMRVZCUVVVc1MwRkJSeXhMUVVGSE8wRkJRVVVzYVVKQlFVTXNTMEZCUnl4TFFVRkhMRXRCUVVjc1MwRkJSeXhGUVVGRkxFVkJRVVVzUzBGQlJ5eE5RVUZKTEVOQlFVTXNUVUZCU1R0QlFVRkJMR05CUVVjN1FVRkJReXh4UWtGQlR5eEZRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMRmxCUVVNc1IwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJTeEpRVUZITEUxQlFVc3NUMEZCUnl4RlFVRkZMRXRCUVVzc1QwRkJUeXhGUVVGRkxFdEJRVWNzUzBGQlJ5eEZRVUZGTEV0QlFVY3NTMEZCUnl4TFFVRkhMRU5CUVVNc1IwRkJSU3hEUVVGRExFZEJRVVVzVFVGQlN5eFJRVUZKTEVWQlFVVXNTMEZCUnl4TlFVRk5MRk5CUVZNc1JVRkJSU3hWUVVGVkxFTkJRVU1zUjBGQlJTeE5RVUZMTEU5QlFVY3NSVUZCUlN4TFFVRkhMRTFCUVVzc1RVRkJTeXhQUVVGSE8wRkJRVU1zYTBKQlFVVXNSVUZCUlR0QlFVRkhMR3RDUVVGSkxFbEJRVVVzUzBGQlJ6dEJRVUZGTEd0Q1FVRkZMRXRCUVVzc1NVRkJTU3hEUVVGRExFbEJRVVU3UVVGQlJ5eHpRa0ZCVHl4SlFVRkZMRTFCUVVrc1QwRkJTeXhQUVVGUExGVkJRVkVzU1VGQlJTeExRVUZITEUxQlFVa3NTVUZCUlN4SFFVRkhMRVZCUVVVc1RVRkJUU3hGUVVGRk8wRkJRVUVzV1VGQlF5eEhRVUZGTEUxQlFVc3NUMEZCUnl4RlFVRkZMRWxCUVVjc1RVRkJTeXhOUVVGSkxFbEJRVWM3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRkZCUVZFc1QwRkJUU3hOUVVGVk8wRkJRek5tTEdsQ1FVRkpMRXRCUVVzN1FVRkJSU3huUWtGQlJTeFRRVUZUTEVOQlFVTXNUVUZCU1N4SlFVRkZMRVZCUVVVc1VVRkJVU3hKUVVGSkxFOUJRVThzUjBGQlJTeEhRVUZITEVkQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRVWNzWjBKQlFVVXNSVUZCUlN4UlFVRlJMRk5CUVZFc1IwRkJSenRCUVVGRkxHZENRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMR2RDUVVGSExFVkJRVVVzVTBGQlR6dEJRVUZGTEhGQ1FVRlBPMEZCUVVVc1pVRkJSeXhIUVVGRkxFTkJRVU03UVVGQlJTeHRRa0ZCVHl4RlFVRkZMRk5CUVU4N1FVRkJRU3hWUVVGRE8wRkJRVU1zV1VGQlJTeEhRVUZITzBGQlFVVXNiVUpCUVZFc1MwRkJSeXhOUVVGTkxFZEJRVWNzUjBGQlJTeExRVUZITEVkQlFVVXNUVUZCU1N4SlFVRkhMRVZCUVVVN1FVRkJSeXhsUVVGSExFVkJRVVVzU1VGQlJTeFBRVUZQTEdGQlFXRXNSVUZCUlR0QlFVRkZMR1ZCUVVjN1FVRkJSeXhqUVVGRkxFVkJRVVVzWlVGQllTeGpRVUZqTEUxQlFVczdRVUZCUVN4WlFVRkRMRmxCUVZrc1IwRkJSVHRCUVVGRExHOUNRVUZOTEVOQlFVTTdRVUZCUlN4dFFrRkJTeXhQUVVGTE8wRkJRVUVzV1VGQll6dEJRVUZCTEZWQlFVTTdRVUZCUlN4WlFVRkZMR2RDUVVGakxHTkJRV01zVFVGQlN6dEJRVUZCTEZsQlFVTXNXVUZCV1N4SFFVRkZPMEZCUVVNc2IwSkJRVTBzUTBGQlF6dEJRVUZGTEcxQ1FVRkxMRTlCUVVzN1FVRkJRU3haUVVGbE8wRkJRVUVzVlVGQlF6dEJRVU4wV2l4cFFrRkJUeXhQUVVGUExFZEJRVWNzVjBGQlZTeEZRVUZETEVsQlFVa3NSMEZCUlR0QlFVRkRMRzFDUVVGUExFdEJRVXNzUjBGQlJ5eERRVUZETzBGQlFVRXNWVUZCUXl4SFFVRkZMRWxCUVVrc1IwRkJSVHRCUVVGRExHMUNRVUZQTEZkQlFWTXNTMEZCU3l4SFFVRkhMRU5CUVVNN1FVRkJRU3hWUVVGRExFZEJRVVVzUjBGQlJ5eEhRVUZGTzBGQlFVTXNaMEpCUVVrc1NVRkJSU3hMUVVGTExFZEJRVWNzU1VGQlNTeExRVUZITEV0QlFVc3NSMEZCUnp0QlFVRlBMR2xDUVVGTExFZEJRVWNzUTBGQlF5eEpRVUZGTzBGQlFVVXNiVUpCUVU4N1FVRkJRU3hWUVVGRExFZEJRVVVzUjBGQlJ5eEhRVUZGTzBGQlFVTXNhVUpCUVVzc1IwRkJSeXhEUVVGRExFbEJRVVU3UVVGQlR5eHBRa0ZCU3l4SFFVRkhMRXRCUVVzc1EwRkJRenRCUVVGQkxGVkJRVU1zUlVGQlF5eERRVUZETzBGQlFVVXNXVUZCUlN4SFFVRkhMRXRCUVVzc1JVRkJReXhQUVVGTkxFOUJRVTBzUjBGQlJTeEZRVUZETEU5QlFVMHNTMEZCU1N4SFFVRkZMRVZCUVVNc1QwRkJUU3hMUVVGRkxFZEJRVVVzUlVGQlF5eFBRVUZOTEUxQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc1MwRkJSeXhGUVVGRkxFZEJRVWM3UVVGQlR5eFpRVUZGTEhOQ1FVRnZRaXhOUVVGSk8wRkJRVU1zY1VKQlFWRXNTVUZCUlN4SFFVRkZMRWxCUVVVc1JVRkJSU3hKUVVGSExFbEJRVVVzUlVGQlJTeEhRVUZITEZGQlFVOHNSVUZCUlR0QlFVRkZMSGxDUVVGVExFVkJRVVVzUjBGQlJ5eERRVUZETEV0QlFVY3NSVUZCUlR0QlFVRkZMRzFDUVVGUE8wRkJRVUVzVlVGQlF6dEJRVU5xV0N4alFVRkpMRXRCUVVjc1EwRkJReXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NSVUZCUlN4SFFVRkZMRXRCUVVjN1FVRkJRU3haUVVGRExFZEJRVVVzVTBGQlV5eEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMSEZDUVVGTE8wRkJRVVVzWTBGQlF5eEpRVUZKTEVkQlFVY3NRMEZCUXl4RlFVRkhMRWRCUVVjc1RVRkJTU3hIUVVGRkxFMUJRVWtzUTBGQlF6dEJRVUZGTEcxQ1FVRkhPMEZCUVVVN1FVRkJTeXh2UWtGQlRUdEJRVUZCTEZsQlFVYzdRVUZCUVN4WlFVRkZMRWxCUVVjc1UwRkJVeXhIUVVGRk8wRkJRVU1zYVVKQlFVY3NUVUZCU1N4SFFVRkZMRU5CUVVNc1IwRkJSU3hIUVVGRkxFTkJRVU1zU1VGQlJ5eFJRVUZQTEV0QlFVVTdRVUZCUlN4blFrRkJSU3hIUVVGSE8wRkJRVUVzV1VGQlF6dEJRVUZCTEZsQlFVVXNSMEZCUlN4VFFVRlRMRWRCUVVVN1FVRkJReXh4UWtGQlN6dEJRVUZGTEd0Q1FVRkZMRmxCUVZrc1JVRkJReXhMUVVGSkxHbENRVUZuUWl4UlFVRlBMRVZCUVVNc1EwRkJReXhOUVVGSkxFbEJRVVVzUlVGQlJTeEhRVUZITEVOQlFVTXNUVUZCU1N4RlFVRkZMRWRCUVVVc1JVRkJSU3hIUVVGSExFTkJRVU03UVVGQlFTeFpRVUZGTzBGQlFVRXNXVUZCUlN4SFFVRkZPMEZCUVVFc1dVRkJSeXhIUVVGRk8wRkJRVUVzV1VGQlJ5eEpRVUZITzBGQlFVRXNXVUZCUnl4SFFVRkZPMEZCUVVFc1dVRkJSeXhIUVVGRk8wRkJRVUVzV1VGQlJ5eEhRVUZGTzBGQlFVRXNXVUZCUnl4SlFVRkhPMEZCUVVFc1dVRkJSeXhKUVVGSE8wRkJRVUVzV1VGQlJ5eEpRVUZITzBGQlFVRXNXVUZCUnl4SFFVRkZPMEZCUVVFc1dVRkJSeXhIUVVGRk8wRkJRVUVzV1VGQlJ5eEhRVUZGTzBGQlFVRXNXVUZCUnl4SlFVRkhPMEZCUVVFc1dVRkJSeXhIUVVGRk8wRkJRVUVzV1VGQlJ5eEhRVUZGTEZOQlFWTXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zY1VKQlFVczdRVUZCUlN4eFFrRkJTenRCUVVGRkxIRkNRVUZMTzBGQlFVVXNhMEpCUVVVc1JVRkJSU3hEUVVGRE8wRkJRVVVzYTBKQlFVa3NTVUZCUlN4TlFVRkpMRVZCUVVVc1VVRkJVU3hIUVVGSE8wRkJRVVVzYjBKQlFVa3NTMEZCUnl4TlFVRkpMRTlCUVVzN1FVRkJTU3huUWtGQlJTeEhRVUZGTEVWQlFVTXNUVUZCU3l4SFFVRkZMR05CUVdFc1QwRkRjbVlzUjBGQlJTeFpRVUZYTEZOQlFWTXNSMEZCUlN4SFFVRkZPMEZCUVVNc2IwSkJRVWNzV1VGQlZTeFBRVUZQTEV0QlFVY3NXVUZCVlN4UFFVRlBPMEZCUVVVc2QwSkJRVTBzU1VGQlNTeFZRVUZWTEcxQ1FVRnRRaXhIUVVGSExFTkJRVU1zUTBGQlF5eFJRVUZSTEV0QlFVc3NTVUZCU1N4RlFVRkZPMEZCUVVVc2IwSkJRVWNzU1VGQlJTeExRVUZITEVsQlFVVTdRVUZCUlN4M1FrRkJUU3hKUVVGSkxGVkJRVlVzY1VKQlFYRkNMRWRCUVVjc1EwRkJReXhEUVVGRExIZEVRVUYzUkN4RFFVRkRMSGREUVVGM1F5eERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpPMEZCUVVVc2RVSkJRVTg3UVVGQlFTeGpRVUZETEVkQlFVVXNaMEpCUVdVc1IwRkJSU3h6UWtGQmNVSXNSMEZCUnl4SFFVRkZMRWRCUVVVc1EwRkJReXhEUVVGRExFZEJRVVVzU1VGQlJ5eExRVUZKTEVOQlFVTTdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkJSU3hKUVVGSExGTkJRVk1zUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMSEZDUVVGTE8wRkJRVVVzYTBKQlFVVXNSVUZCUlN4TlFVRkpMRU5CUVVNN1FVRkJSU3huUWtGQlJTeEhRVUZGTzBGQlFVRXNaMEpCUVVNc1RVRkJTenRCUVVGQkxHZENRVUZGTEdOQlFXRXNVMEZCVXl4SFFVRkZPMEZCUVVNc2VVSkJRVTBzUTBGQlF5eERRVUZETzBGQlFVRXNaMEpCUVVNN1FVRkJRU3huUWtGQlJTeFpRVUZYTEZOQlFWTXNSMEZCUlN4SFFVRkZPMEZCUVVNc2VVSkJRVThzU1VGQlJTeEpRVUZGTzBGQlFVRXNaMEpCUVVNN1FVRkJRU3huUWtGQlJTeG5Ra0ZCWlR0QlFVRkJMR2RDUVVOcVowSXNjMEpCUVhGQ0xGTkJRVk1zUjBGQlJUdEJRVUZETEhsQ1FVRlBMRXRCUVVzc1lVRkJZU3hGUVVGRkxFVkJRVVVzVFVGQlNTeERRVUZETEVOQlFVTTdRVUZCUVN4blFrRkJRenRCUVVGQkxHZENRVUZGTEVsQlFVYzdRVUZCUVN4alFVRkpMRU5CUVVNN1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEpRVUZITEZOQlFWTXNSMEZCUlN4SFFVRkZPMEZCUVVNc2NVSkJRVXM3UVVGQlJTeHJRa0ZCUlN4RlFVRkZMRTFCUVVrc1EwRkJRenRCUVVGRkxHZENRVUZGTEVkQlFVVXNSVUZCUXl4TlFVRkxMRWRCUVVVc1kwRkJZU3hQUVVGSE8wRkJRVU1zYjBKQlFVa3NTVUZCUlN4RlFVRkZMRU5CUVVNN1FVRkJSU3h0UWtGQlJ5eERRVUZETzBGQlFVVXNkVUpCUVU4N1FVRkJRU3hqUVVGRExFZEJRVVVzV1VGQlZ5eERRVUZETEVkQlFVVXNUVUZCU1N4RlFVRkZMRU5CUVVNc1IwRkJSU3huUWtGQlpTeEhRVUZGTEhOQ1FVRnhRaXhKUVVGSExFbEJRVWNzUzBGQlNTeERRVUZETzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNjVUpCUVVzN1FVRkJSU3h4UWtGQlN6dEJRVUZGTEd0Q1FVRkZMRVZCUVVVc1RVRkJTU3hEUVVGRE8wRkJRVVVzWjBKQlFVVXNSMEZCUlN4RlFVRkRMRTFCUVVzc1IwRkJSU3hqUVVGaExFOUJRVWNzUjBGQlJTeFpRVUZYTEVOQlFVTXNSMEZCUlN4TlFVRkpMRWRCUVVVc1owSkJRV1VzUjBGQlJTeHpRa0ZCY1VJc1IwRkJSeXhIUVVGRkxFTkJRVU1zUjBGQlJTeEpRVUZITEV0QlFVa3NRMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJRU3haUVVGRkxFZEJRVVVzVTBGQlV5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXh4UWtGQlN6dEJRVUZGTEhGQ1FVRkxPMEZCUVVVc2EwSkJRVVVzUlVGQlJTeE5RVUZKTEVOQlFVTTdRVUZCUlN4eFFrRkJTeXhOUVVGSkxFbEJRVVU3UVVGQldTeHJRa0ZCUlN4UFFVRkhPMEZCUVVVc2EwSkJRVWNzVFVGQlNTeEhRVUZGTzBGQlFVTXNiMEpCUVVrc1NVRkJSU3hMUVVGSExFbEJRVVU3UVVGQlJTeHZRa0ZCUlN4UFFVTndaaXhMUVVGSExFMUJRVWs3UVVGQlFTeGpRVUZETzBGQlFVTXNhMEpCUVVrc1NVRkJSU3hGUVVGRkxGTkJRVk1zVlVGQlZTeEpRVUZGTEZOQlFWTXNSMEZCUlN4SFFVRkZPMEZCUVVNc2RVSkJRVThzVFVGQlNUdEJRVUZCTEdOQlFVTXNTVUZCUlN4VFFVRlRMRWRCUVVVc1IwRkJSVHRCUVVGRExIVkNRVUZQTzBGQlFVRXNZMEZCUXp0QlFVRkZMR2RDUVVGRkxFZEJRVVVzUlVGQlF5eE5RVUZMTEVkQlFVVXNZMEZCWVN4SFFVRkZMRmxCUVZjc1IwRkJSU3huUWtGQlpTeEhRVUZGTEhOQ1FVRnhRaXhIUVVGSExFZEJRVVVzUjBGQlJTeE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkhMRXRCUVVrc1EwRkJRenRCUVVGQkxGbEJRVU03UVVGQlFTeFpRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExIVkNRVUZUTEVWQlFVVXNSMEZCUlR0QlFVRkRMRzlDUVVGSkxFbEJRVVVzUlVGQlJTeEZRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRPMEZCUVVVc2IwSkJRVVVzUlVGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNN1FVRkJSU3gxUWtGQlR5eEpRVUZKTEVWQlFVVXNSVUZCUlN4RlFVRkZMRkZCUVU4c1IwRkJSU3hEUVVGRE8wRkJRVUVzWTBGQlF6dEJRVUZETEhGQ1FVRkxPMEZCUVVVc2EwSkJRVWtzU1VGQlJTeERRVUZETEZkQlFWVXNXVUZCVnl4WlFVRlhMR0ZCUVZrc1dVRkJWeXhoUVVGWkxHTkJRV0VzWTBGQllTeGxRVUZqTEdOQlFXTXNSVUZCUlN4RFFVRkRPMEZCUVVVc2EwSkJRVVVzUlVGQlJTeE5RVUZKTEVOQlFVTTdRVUZCUlR0QlFVRkJMR2RDUVVGRk8wRkJRVUVzWjBKQlFVVXNSVUZCUXl4TlFVRkxMRWRCUVVVc1kwRkJZU3hIUVVGRkxHZENRVUZsTEVkQlFVVXNjMEpCUVhGQ0xFVkJRVU03UVVGQlFTeG5Ra0ZETDJZc1JVRkJReXhKUVVGSExFdEJRVVU3UVVGQlFTeGpRVUZETzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJUdEJRVUZETEhGQ1FVRkxPMEZCUVVVc2EwSkJRVVVzUlVGQlJTeE5RVUZKTEVOQlFVTTdRVUZCUlN4clFrRkJTU3hKUVVGRkxHdENRVUZuUWp0QlFVRkZMR2RDUVVGRkxFZEJRVVVzUlVGQlF5eE5RVUZMTEVkQlFVVXNZMEZCWVN4VFFVRlRMRWRCUVVVN1FVRkJReXh2UWtGQlNTeEpRVUZGTEVWQlFVVXNSVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhIUVVGRkxFbEJRVVVzU1VGQlJUdEJRVUZGTEc5Q1FVRkhPMEZCUVVVc01rSkJRVkVzU1VGQlJTeEhRVUZGTEVsQlFVVXNSMEZCUlN4TFFVRkhMRWRCUVVVc1JVRkJSU3hIUVVGRk8wRkJRVU1zZDBKQlFVa3NTVUZCUlN4SlFVRkZPMEZCUVVVc2QwSkJRVWNzUzBGQlJ5eExRVUZITEV0QlFVY3NSVUZCUlN4RlFVRkZMRTFCUVVrc1EwRkJReXhIUVVGRk8wRkJRVU1zTUVKQlFVVXNSMEZCUnl4SFFVRkZMRWxCUVVVc1EwRkJRenRCUVVGRkxEQkNRVUZITEZkQlFWTTdRVUZCUlN3MFFrRkJTU3hKUVVGRk8wRkJRVUU3UVVGQlR5dzJRa0ZCUnl4UFFVRlBMR0ZCUVdFc1EwRkJReXhIUVVGRkxFdEJRVWM3UVVGQlJTd3dRa0ZCUlN4SlFVRkZPMEZCUVVFc2IwSkJRVU03UVVGQlFTeHJRa0ZCUXp0QlFVRkJMSEZDUVVGTE8wRkJRVU1zYzBKQlFVVXNUVUZCVFN4RFFVRkRPMEZCUVVVc2RVSkJRVWtzU1VGQlJTeEhRVUZGTEVsQlFVVXNSMEZCUlN4RlFVRkZPMEZCUVVVc2MwSkJRVVVzUTBGQlF5eEpRVUZGTEU5QlFVOHNZVUZCWVN4RlFVRkZMRVZCUVVVc1NVRkJSU3hOUVVGSkxFTkJRVU1zUTBGQlF6dEJRVUZGTEhOQ1FVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRk8wRkJRVUVzWjBKQlFVTTdRVUZCUXl4clFrRkJSU3hEUVVGRE8wRkJRVVVzZFVKQlFVODdRVUZCUVN4alFVRkRMRWRCUVVVc1dVRkJWeXhUUVVGVExFZEJRVVVzUjBGQlJUdEJRVUZETERaQ1FVRmhMR2RDUVVGakxFbEJRVVVzU1VGQlNTeFhRVUZYTEVOQlFVTTdRVUZCUnl4dlFrRkJTU3hKUVVGRkxGbEJRVlVzVDBGQlR6dEJRVUZGTEc5Q1FVRkhMRVZCUVVVc1MwRkJSeXhoUVVGaExHTkJRelZsTEdGQlFXRXNjVUpCUVcxQ0xHRkJRV0U3UVVGQlZ5eDNRa0ZCVFN4SlFVRkpMRVZCUVVVc2RVTkJRWFZETzBGQlFVVXNiMEpCUVVrc1NVRkJSU3hMUVVGSExFbEJRVVVzUjBGQlJ5eERRVUZETEVsQlFVVXNSVUZCUlR0QlFVRlBMRzlDUVVGSkxFbEJRVVVzUjBGQlJ5eEpRVUZGTEVsQlFVVXNRMEZCUXl4SFFVRkZMRWxCUVVVc1NVRkJSVHRCUVVGRkxHdENRVUZGTEVWQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGRkxHOUNRVUZITEV0QlFVYzdRVUZCUlN4eFFrRkJSeXhIUVVGRkxFZEJRVVVzU1VGQlJTeERRVUZETzBGQlFVRXNlVUpCUVZVN1FVRkJSU3gxUWtGQlNTeEpRVUZGTEVkQlFVVXNTVUZCUlN4SFFVRkZMRVZCUVVVc1IwRkJSVHRCUVVGRExIZENRVUZKTEVsQlFVVXNSVUZCUlN4WFFVRlhMRU5CUVVNN1FVRkJSU3gzUWtGQlJ5eE5RVUZKTzBGQlFVVXNORUpCUVUwc1JVRkJSU3hEUVVGRExFZEJRVVVzU1VGQlNTeEZRVUZGTEhkRVFVRjNSRHRCUVVGRkxITkNRVUZGTEVWQlFVVXNTVUZCUlN4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGQkxHdENRVUZETzBGQlFVRTdRVUZCVFN4MVFrRkJTU3hKUVVGRkxFZEJRVVVzU1VGQlJTeEhRVUZGTEVWQlFVVTdRVUZCUlN4elFrRkJSU3hGUVVGRkxFbEJRVVVzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4RFFVRkRPMEZCUVVVc2VVSkJRVThzUzBGQlJ5eEZRVUZGTEV0QlFVc3NSMEZCUlN4RFFVRkRPMEZCUVVVc2RVSkJRVTg3UVVGQlFTeGpRVUZETEVkQlFVVXNaMEpCUVdVc1IwRkJSU3h6UWtGQmNVSXNTVUZCUnl4SFFVRkhMRWRCUVVVN1FVRkJReXhyUWtGQlJTeERRVUZETzBGQlFVRXNZMEZCUXl4RlFVRkRMRU5CUVVNN1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEhRVUZGTEZOQlFWTXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXh4UWtGQlN6dEJRVUZGTEhGQ1FVRkxPMEZCUTI1bUxIRkNRVUZMTzBGQlFVVXNhMEpCUVVVc1JVRkJSU3hEUVVGRE8wRkJRVVVzYTBKQlFVY3NUVUZCU1N4SFFVRkZPMEZCUVVNc2IwSkJRVWtzU1VGQlJUdEJRVUZITEc5Q1FVRkpMRWxCUVVVN1FVRkJSeXh2UWtGQlNTeEpRVUZGTzBGQlFVY3NiMEpCUVVrc1NVRkJSU3hOUVVGSkxFZEJRVWM3UVVGQlJTeHZRa0ZCU1N4SlFVRkZPMEZCUVVFc1kwRkJRenRCUVVGTkxITkNRVUZKTEUxQlFVa3NTVUZCUlN4SlFVRkhMRWxCUVVVc1NVRkJSeXhKUVVGRkxFbEJRVWNzU1VGQlJTeE5RVUZKTEVWQlFVVXNSMEZCUlN4SlFVRkZPMEZCUVVjc1owSkJRVVVzUjBGQlJUdEJRVUZCTEdkQ1FVRkRMRTFCUVVzN1FVRkJRU3huUWtGQlJTeGpRVUZoTEU5QlFVYzdRVUZCUXl3eVFrRkJVU3hKUVVGRkxFVkJRVVVzUlVGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVVc1JVRkJSU3hIUVVGRkxFZEJRVVVzU1VGQlJTeEpRVUZGTEVkQlFVVXNTVUZCUlN4SFFVRkZMRXRCUVVjc1IwRkJSU3hGUVVGRkxFZEJRVVU3UVVGQlF5eDNRa0ZCU1N4SlFVRkZMRWxCUVVVc1NVRkJSU3hKUVVGRk8wRkJRVVVzZDBKQlFVY3NTMEZCUnl4TFFVRkhMRXRCUVVjc1JVRkJSU3hOUVVGSkxFTkJRVU03UVVGQlJTd3dRa0ZCUlN4RlFVRkZMRWRCUVVVc1NVRkJSU3hEUVVGRExFZEJRVVVzVjBGQlV5eEpRVUZGTEVsQlFVVXNTMEZCUnl4TFFVRkhMRTlCUVU4c1lVRkJZU3hEUVVGRExFZEJRVVVzUzBGQlJ5eEpRVUZITEVsQlFVVXNTVUZCUlR0QlFVRkJMR3RDUVVGRE8wRkJRVU1zYjBKQlFVVXNRMEZCUXp0QlFVRkZMSGxDUVVGUE8wRkJRVUVzWjBKQlFVTTdRVUZCUVN4blFrRkJSU3haUVVGWExFTkJRVU1zUjBGQlJTeE5RVUZKTzBGQlFVTXNjMEpCUVVjc1dVRkJWU3hQUVVGUE8wRkJRVVVzTUVKQlFVMHNTVUZCU1N4RlFVRkZMRFpEUVVFMlF5eERRVUZETEVWQlFVVTdRVUZCUlN4elFrRkJTU3hKUVVGRkxFVkJRVVVzUTBGQlF5eEhRVUZGTEVsQlFVVXNSMEZCUnl4SlFVRkZMRWxCUVVVc1EwRkJRenRCUVVGRkxHOUNRVUZGTEVWQlFVVXNUVUZCU1N4RFFVRkRMRWxCUVVVc1MwRkJSenRCUVVGRkxHOUNRVUZGTEVkQlFVVXNTVUZCUlN4SFFVRkZMRWxCUVVVc1EwRkJRenRCUVVGRkxESkNRVUZQTEV0QlFVY3NSVUZCUlN4TFFVRkxMRWRCUVVVc1EwRkJRenRCUVVGRkxIbENRVUZQTzBGQlFVRXNaMEpCUVVNN1FVRkJRU3huUWtGRGJtWXNaMEpCUVdVN1FVRkJRU3huUWtGQlJTeHpRa0ZCY1VJN1FVRkJRU3huUWtGQlJ5eEhRVUZITEVkQlFVVTdRVUZCUXl4dlFrRkJSU3hEUVVGRE8wRkJRVUVzWjBKQlFVTTdRVUZCUVN4alFVRkRMRU5CUVVNN1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEpRVUZITEZOQlFWTXNSMEZCUlN4SFFVRkZPMEZCUVVNc2NVSkJRVXM3UVVGQlJTeHJRa0ZCUlN4RlFVRkZMRTFCUVVrc1EwRkJRenRCUVVGRkxHZENRVUZGTEVkQlFVVXNSVUZCUXl4SlFVRkhMRTFCUVVjc1RVRkJTeXhIUVVGRkxHZENRVUZsTEVkQlFVVXNZMEZCWVN4TlFVRkpPMEZCUVVFc1kwRkJReXhIUVVGRkxGbEJRVmNzVFVGQlNUdEJRVUZCTEdOQlFVTXNSVUZCUXl4RFFVRkRPMEZCUVVFc1dVRkJRenRCUVVGQkxGbEJRVVVzU1VGQlJ5eE5RVUZKTzBGQlFVRXNXVUZCUnl4SFFVRkZMRk5CUVZNc1IwRkJSU3hIUVVGRk8wRkJRVU1zY1VKQlFVczdRVUZCUlN4dFFrRkJSeXhOUVVGSkxFbEJRVVVzVjBGQlZ5eE5RVUZKTEVkQlFVY3NRMEZCUXl4SlFVRkZMRWxCUVVVc1dVRkJXU3hGUVVGRExHTkJRV0VzUjBGQlJTeExRVUZKTEdWQlFXTXNRMEZCUXl4TFFVRkhMRWxCUVVVc1JVRkJSU3hIUVVGSExFTkJRVU1zVFVGQlNTeEZRVUZGTEZsQlFWa3NSVUZCUXl4TFFVRkpMR1ZCUVdNc1EwRkJRenRCUVVGQkxGbEJRVU03UVVGQlFTeFpRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zY1VKQlFVczdRVUZCUlN4dFFrRkJSenRCUVVGRkxHbENRVUZITEZOQlFVODdRVUZCUlN4clFrRkJSU3hOUVVGSkxFMUJRVWs3UVVGQlJTeDFRa0ZCVVN4SlFVRkZMRWRCUVVVc1NVRkJSU3hIUVVGRk8wRkJRVWtzYlVKQlFVY3NRMEZCUXl4SlFVRkZMRVZCUVVVc1NVRkJSU3hKUVVGRkxFTkJRVU1zU1VGQlJTeEZRVUZGTEVsQlFVVXNTVUZCUlN4SlFVRkZMRU5CUVVNc1NVRkJSU3hIUVVGSExFVkJRVVVzU1VGQlJTeEpRVUZGTEVsQlFVVXNUVUZCU1N4RFFVRkRPMEZCUVVVc2EwSkJRVVVzUjBGQlJ5eERRVUZETzBGQlFVVXNaMEpCUVVVc1MwRkJSenRCUVVGRkxHdENRVUZGTEVWQlFVVXNUVUZCVFN4TlFVRkxMRVZCUVVVN1FVRkJSU3huUWtGQlJTeExRVUZITzBGQlFVVXNjVUpCUVU4N1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGRGNHWXNTVUZCUnp0QlFVRkJMRmxCUVVjc1NVRkJSeXhUUVVGVExFZEJRVVU3UVVGQlF5eHRRa0ZCUnl4RlFVRkZMRWRCUVVjc1RVRkJTU3hEUVVGRExFVkJRVVVzU1VGQlNUdEJRVUZCTEZsQlFVTTdRVUZCUVN4WlFVRkZMRWRCUVVVc1UwRkJVeXhIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEhGQ1FVRkxPMEZCUVVVc2NVSkJRVXM3UVVGQlJTeHJRa0ZCUlN4RlFVRkZMRTFCUVVrc1EwRkJRenRCUVVGRkxHdENRVUZGTEVkQlFVY3NSMEZCUlN4WFFVRlhPMEZCUVVVc2EwSkJRVWtzU1VGQlJTeERRVUZETEVkQlFVVXNTVUZCUlN4RlFVRkZMRU5CUVVNN1FVRkJSU3huUWtGQlJTeEZRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVN1FVRkJSU3h4UWtGQlR5eEZRVUZGTEZkQlFWY3NSMEZCUlN4RFFVRkRPMEZCUVVFc1dVRkJRenRCUVVGQkxGbEJRVVVzUjBGQlJTeFRRVUZUTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExIRkNRVUZMTzBGQlFVVXNjVUpCUVVzN1FVRkJSU3h4UWtGQlN6dEJRVUZGTEd0Q1FVRkZMRWRCUVVjc1RVRkJTU3hEUVVGRE8wRkJRVVVzYTBKQlFVVXNSVUZCUlN4TlFVRkpMRU5CUVVNN1FVRkJSU3hyUWtGQlJTeEhRVUZITEVOQlFVTTdRVUZCUlN4clFrRkJTU3hKUVVGRkxFTkJRVU03UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeERRVUZETzBGQlFVVXNjVUpCUVU4c1JVRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4eFFrRkJTenRCUVVGRkxIRkNRVUZMTzBGQlFVVXNhMEpCUVVVc1IwRkJSeXhOUVVGSkxFTkJRVU03UVVGQlJTeHJRa0ZCUlN4RlFVRkZMRTFCUVVrc1EwRkJRenRCUVVGRkxHdENRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMR2RDUVVGRkxFZEJRVVVzUjBGQlJTeE5RVUZMTEVOQlFVTTdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkJSU3hIUVVGRk8wRkJRVUVzV1VGQlJ5eEhRVUZGTEZOQlFWTXNSMEZCUlN4SFFVRkZPMEZCUVVNc2NVSkJRVXM3UVVGQlJTeHJRa0ZCUlN4RlFVRkZMRTFCUVVrc1EwRkJRenRCUVVGRkxHdENRVUZGTEVWQlFVVXNRMEZCUXp0QlFVRkZMSEZDUVVGUExFdEJRVWM3UVVGQlFTeFpRVUZETzBGQlFVRXNXVUZCUlN4SFFVRkZMRk5CUVZNc1IwRkJSVHRCUVVGRExIRkNRVUZMTzBGQlFVVXNhMEpCUVVjc1RVRkJTVHRCUVVGRkxIVkNRVUZQTEVWQlFVVXNSMEZCUnl4RFFVRkRPMEZCUVVVc2EwSkJRVVVzUjBGQlJ5eERRVUZETzBGQlFVVXNjVUpCUVU4c1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hUUVVGVExFZEJRemRtTEVkQlFVVTdRVUZCUXl4clFrRkJTU3hKUVVGRkxFZEJRVWNzUjBGQlJTeE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkZMRVZCUVVVc1EwRkJRenRCUVVGRkxHdENRVUZGTEVWQlFVVXNUMEZCU3l4UFFVRkxMRVZCUVVVc1RVRkJUU3hEUVVGRExFVkJRVVVzU1VGQlNTeFRRVUZUTEVkQlFVVTdRVUZCUXl4MVFrRkJUeXhGUVVGRk8wRkJRVUVzWTBGQlNTeERRVUZETEVWQlFVVXNTMEZCU3l4SFFVRkhMRWxCUVVVN1FVRkJTU3hyUWtGQlNTeEpRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMR3RDUVVGSExGZEJRVk03UVVGQlJTeDFRa0ZCVHp0QlFVRkZMR3RDUVVGRkxFTkJRVU1zVTBGQlV6dEJRVUZGTEhWQ1FVRlJMRWxCUVVVc1EwRkJReXhEUVVGRExFZEJRVVVzU1VGQlJTeEpRVUZITEVsQlFVVXNSMEZCUlN4SlFVRkZMRWxCUVVVc1IwRkJSU3hGUVVGRk8wRkJRVVVzYzBKQlFVa3NUVUZCU1N4SlFVRkZMRTlCUVVzc1RVRkJTU3hSUVVGTkxFZEJRVVVzUlVGQlJTeExRVUZMTEZsQlFWVXNRMEZCUXl4SFFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVVVzUTBGQlF5eERRVUZETzBGQlFVVXNhMEpCUVVrc1NVRkJSU3h4UWtGQmJVSXNSMEZCUnl4clFrRkJaMElzUTBGQlF5eEpRVUZGTEhsRFFVRjNReXhKUVVGRk8wRkJRVVVzYlVKQlFVa3NTVUZCUlN4SFFVRkZMRWxCUVVVc1NVRkJSU3hIUVVGRkxFVkJRVVU3UVVGQlJTeHhRa0ZCUnl4blFrRkJZeXhKUVVGRkxHVkJRV0VzU1VGQlJTeG5RMEZCT0VJc1NVRkJSU3hOUVVGSkxFbEJRVVVzVFVGQlNTeFJRVUZQTEV0QlFVY3NSVUZCUlN4SlFVRkZMRU5CUVVNc1JVRkJSVHRCUVVGbExHMUNRVUZITEN0Q1FVRTJRaXhKUVVGRk8wRkJRemxsTEcxQ1FVRkpMRWxCUVVVc1IwRkJSU3hKUVVGRkxFbEJRVVVzUjBGQlJTeEZRVUZGTzBGQlFVVXNhMEpCUVVVc1NVRkJSU3hEUVVGRExFVkJRVVVzYVVKQlFXVXNTMEZCUnl4blFrRkJZeXhKUVVGRkxITkNRVUZ2UWl4SlFVRkZPMEZCUVZFc1owSkJRVVVzVDBGQlN5eExRVUZITzBGQlFYRkVMR2RDUVVGRkxFdEJRVXNzU1VGQlJTeE5RVUZOTzBGQlFVVXNhMEpCUVVVc1IwRkJSeXhEUVVGRExFVkJRVVVzVFVGQlRTeE5RVUZMTEVOQlFVTTdRVUZCUlN4clFrRkJSU3hIUVVGSExFTkJRVU03UVVGQlJTeHhRa0ZCVHl4SFFVRkhMRU5CUVVNc1NVRkJSVHRCUVVGQkxGbEJRVU03UVVGQlFTeFpRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZMRWRCUVVVN1FVRkJReXh4UWtGQlN6dEJRVUZGTEd0Q1FVRkZMRVZCUVVVc1RVRkJTU3hEUVVGRE8wRkJRVVVzYTBKQlFVVXNSVUZCUlN4RFFVRkRPMEZCUVVVc2NVSkJRVThzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJRU3haUVVGRkxFZEJRVVVzVTBGQlV5eEhRVUZGTzBGQlFVTXNjVUpCUVVzN1FVRkJSU3hyUWtGQlJTeE5RVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRVZCUVVVc1RVRkJTVHRCUVVGQkxGbEJRVVU3UVVGQlFTeFpRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zY1VKQlFVczdRVUZCUlN4eFFrRkJTenRCUVVGRkxHdENRVUZGTEVWQlFVVXNUVUZCU1N4RFFVRkRPMEZCUVVVc2EwSkJRVWtzU1VGQlJTeEhRVUZITEVOQlFVTTdRVUZCUlN4dlFrRkJTU3hKUVVGRkxFZEJRVWNzUTBGQlF5eEhRVUZGTEVkQlFVY3NRMEZCUXl4SlFVRkZPMEZCUVVjc2NVSkJRVThzUlVGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJRU3haUVVGRkxFZEJRVVVzVjBGQlZUdEJRVUZETEhGQ1FVRlBMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRVUVzV1VGQlF6dEJRVUZCTEZsQlFVVXNSMEZCUlN4VFFVRlRMRWRCUVVVN1FVRkJReXhyUWtGQlJTeEZRVUZGTEUxQlFVa3NRMEZCUXp0QlFVRkZMSFZDUVVGUkxFbEJRVVVzVFVGQlRTeEZRVUZGTEUxQlFVMHNSMEZCUlN4SlFVRkZMRWRCUVVVc1NVRkJSU3hGUVVGRkxGRkJRVTg3UVVGQlNTeHJRa0ZCUlN4RFFVRkRMRWxCUXk5bUxFVkJRVVVzUTBGQlF6dEJRVUZGTEhGQ1FVRlBMRVZCUVVVc1EwRkJRenRCUVVGQkxGbEJRVU03UVVGQlFTeFpRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZPMEZCUVVNc2NVSkJRVThzUlVGQlJTeEhRVUZITEUxQlFVa3NRMEZCUXl4RFFVRkRPMEZCUVVFc1dVRkJRenRCUVVGQkxGbEJRVVVzUjBGQlJTeFhRVUZWTzBGQlFVTXNjVUpCUVU4c1JVRkJSU3hEUVVGRExFTkJRVU03UVVGQlFTeFpRVUZETzBGQlFVRXNXVUZCUlN4SFFVRkZMRk5CUVZNc1IwRkJSVHRCUVVGRExIRkNRVUZMTzBGQlFVVXNkVUpCUVZFc1NVRkJSU3hGUVVGRkxFTkJRVU1zUjBGQlJTeEZRVUZGTEZWQlFWRTdRVUZCUXl4dlFrRkJTU3hKUVVGRkxFVkJRVVVzU1VGQlNUdEJRVUZGTEd0Q1FVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRE8wRkJRVUVzWTBGQlF6dEJRVUZETEdsQ1FVRkhMRU5CUVVNN1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEhRVUZGTEZOQlFWTXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXh4UWtGQlN6dEJRVUZGTEhGQ1FVRkxPMEZCUVVVc2EwSkJRVVVzUlVGQlJTeE5RVUZKTEVOQlFVTTdRVUZCUlN4clFrRkJSU3hGUVVGRkxFTkJRVU03UVVGQlJTeHJRa0ZCUlN4RlFVRkZMRU5CUVVNN1FVRkJSU3huUWtGQlJTeERRVUZETEVsQlFVVTdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkJSU3hIUVVGRkxGTkJRVk1zUjBGQlJTeEhRVUZGTzBGQlFVTXNjVUpCUVVzN1FVRkJSU3hyUWtGQlJTeEhRVUZITEUxQlFVa3NSMEZCUlN4dFFrRkJiVUk3UVVGQlJTeHJRa0ZCUlN4RlFVRkZMSEZDUVVGeFFpeERRVUZETzBGQlFVVXNjVUpCUVU4c1JVRkJSU3hEUVVGRE8wRkJRVUVzV1VGQlF6dEJRVUZCTEZsQlFVVXNSMEZCUlN4VFFVRlRMRWRCUVVVc1IwRkJSVHRCUVVGRExHdENRVUZGTEc5Q1FVRnJRaXhMUVVGSExHMUNRVUZwUWl4SlFVRkZMRTFCUVVrc1QwRkJUeXhEUVVGRE8wRkJRVVVzY1VKQlFVczdRVUZCUlN4clFrRkJSU3hKUVVGSkxFdEJRVXNzVFVGQlNTeERRVUZETzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNZMEZCWXp0QlFVRkZMR2RDUVVGRkxFVkJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1kwRkJZenRCUVVGRkxHZENRVUZGTEVWQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVOd1ppeEZRVUZGTEZsQlFWazdRVUZCUlN4blFrRkJSU3hGUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRmRCUVZjN1FVRkJSU3huUWtGQlJTeEZRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGbEJRVms3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEdWQlFXVXNTVUZCUlR0QlFVRkxMR2RDUVVGRkxFVkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1ZVRkJWVHRCUVVGRkxHMUNRVUZITEVWQlFVVXNVVUZCVVN4SlFVRkZMRXRCUVVzc1NVRkJTU3hGUVVGRkxHVkJRV1VzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJReXhMUVVGSExGRkJRVTA3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zU1VGQlJUdEJRVUZCTEZsQlFVTTdRVUZCUVN4WlFVRkZMRWRCUVVVc1UwRkJVeXhIUVVGRkxFZEJRVVU3UVVGQlF5eHJRa0ZCUlN4dlFrRkJhMElzUzBGQlJ5eHRRa0ZCYVVJc1NVRkJSU3hOUVVGSkxFOUJRVThzUTBGQlF6dEJRVUZGTEhGQ1FVRkxPMEZCUVVVc2EwSkJRVVVzU1VGQlNTeExRVUZMTEUxQlFVa3NRMEZCUXp0QlFVRkZMR2RDUVVGRkxFVkJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRmRCUVZjN1FVRkJSU3huUWtGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGZEJRVmM3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZOQlFWTTdRVUZCUlN4blFrRkJSU3hGUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRkZCUVZFN1FVRkJSU3huUWtGQlJTeEZRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGTkJRVk03UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRWxCUVVVc1QwRkRibVlzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4WlFVRlpMRWxCUVVVN1FVRkJTeXhuUWtGQlJTeEZRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxFOUJRVTg3UVVGQlJTeHJRa0ZCU1N4TFFVRkhMRVZCUVVVc1JVRkJSU3haUVVGWkxFTkJRVU1zU1VGQlJTeExRVUZITEVsQlFVa3NSVUZCUlN4VFFVRlRMRU5CUVVNc1NVRkJSU3hGUVVGRkxGRkJRVkVzU1VGQlJTeEpRVUZGTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVsQlFVVTdRVUZCUlN4blFrRkJSU3hGUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRXRCUVVjc1JVRkJSU3hyUWtGQmEwSTdRVUZCUnl4clFrRkJSeXhKUVVGSkxFdEJRVXNzUlVGQlJTeFpRVUZaTEVkQlFVVXNSMEZCUlN4RFFVRkRMRVZCUVVjc2EwSkJRV3RDTzBGQlFVVXNhMEpCUVVrc1NVRkJSeXhKUVVGSkxFdEJRVXNzUlVGQlJTeFpRVUZaTEVkQlFVVXNSMEZCUlN4RFFVRkRMRVZCUVVjc2EwSkJRV3RDTzBGQlFVVXNiVUpCUVVjc1MwRkJSeXhMUVVGSExFVkJRVVVzYTBKQlFXdENMRXRCUVVjc1MwRkJTeXhKUVVGSkxFZEJRVVVzUTBGQlF5eExRVUZITzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVsQlFVVTdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkJSU3hKUVVGSExGTkJRVk1zUjBGQlJUdEJRVUZETEhGQ1FVRkxPMEZCUVVVc2EwSkJRVWtzU1VGQlJTeEpRVUZKTEV0QlFVc3NSVUZCUlN4RlFVRkZMRWxCUVVVc1QwRkJTeXhOUVVGSkxFTkJRVU1zU1VGQlJTeE5RVUZMTEVWQlFVVXNSVUZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFZEJRVVVzUlVGQlJTeEZRVUZGTEVsQlFVVXNUMEZCU3l4TlFVRkpMRU5CUVVNc1IwRkJSU3hGUVVGRkxFVkJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SFFVRkZMRVZCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVkQlFVVXNSVUZCUlN4RlFVRkZMRTFCUTNSbUxFMUJRVWtzUTBGQlF5eEhRVUZGTEVOQlFVTXNSMEZCUlN4SlFVRkZMRVZCUVVVc1JVRkJSU3hKUVVGRkxFOUJRVXNzVFVGQlNTeERRVUZETEVkQlFVVXNTVUZCUlN4RlFVRkZMR3RDUVVGclFpeEhRVUZGTEVsQlFVY3NTVUZCU1N4TFFVRkxMRVZCUVVVc1dVRkJXU3hIUVVGRkxFZEJRVVVzUTBGQlF5eEZRVUZITEd0Q1FVRnJRaXhIUVVGRkxFbEJRVWNzU1VGQlNTeExRVUZMTEVWQlFVVXNXVUZCV1N4SFFVRkZMRWRCUVVVc1EwRkJReXhGUVVGSExHdENRVUZyUWl4SFFVRkZMRWxCUVVVc1MwRkJTeXhKUVVGSkxFZEJRVVVzUTBGQlF6dEJRVUZGTEd0Q1FVRkZMRWxCUVVVc1JVRkJSU3hGUVVGRkxFbEJRVVVzVDBGQlN5eE5RVUZKTEVOQlFVTXNTVUZCUlN4UFFVRlBMRXRCUVVjc1MwRkJSeXhMUVVGSExFTkJRVU1zU1VGQlJTeEpRVUZGTEUxQlFVa3NTMEZCUnl4UFFVRkxMRWxCUVVVc1MwRkJTeXhKUVVGSkxFZEJRVVVzUTBGQlF5eEhRVUZGTEVWQlFVVXNVVUZCVVN4RlFVRkZMRkZCUVZFc1NVRkJSU3hSUVVGTkxFbEJRVVVzU1VGQlJTeEpRVUZGTEV0QlFVY3NSVUZCUlR0QlFVRkhMR2RDUVVGRkxFVkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1QwRkJUenRCUVVGRkxHMUNRVUZITEVWQlFVVXNSVUZCUlN4WlFVRlpMRU5CUVVNc1NVRkJSU3hMUVVGSExFbEJRVWtzUlVGQlJTeFRRVUZUTEVOQlFVTXNTVUZCUlN4RlFVRkZMRkZCUVZFc1NVRkJSU3hKUVVGRk8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4SlFVRkZMRTlCUVVzc1RVRkJTU3hEUVVGRExFbEJRVVU3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFhRVUZYTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4WFFVRlhPMEZCUVVVc1owSkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hUUVVGVE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4SlFVRkZMRTlCUTJwbUxFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNVVUZCVVR0QlFVRkZMR2RDUVVGRkxFVkJRVVVzU1VGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1UwRkJVenRCUVVGRkxHZENRVUZGTEVWQlFVVXNTVUZCUlN4UFFVRkxMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVVVGQlVUdEJRVUZGTEhGQ1FVRlBMRTlCUVU4c1JVRkJSU3hSUVVGUkxFbEJRVVVzUjBGQlJ6dEJRVUZCTEZsQlFVTTdRVUZCUVN4WlFVRkZMRWRCUVVVN1FVRkJRU3haUVVGSExFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVXNVMEZCVXl4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExIVkNRVUZUTEVWQlFVVXNSMEZCUlR0QlFVRkRMSGRDUVVGUExFbEJRVVVzUlVGQlJTeGhRVUZoTEVWQlFVVXNUVUZCVFN4dFFrRkJiVUlzUzBGQlJ5eEZRVUZGTEVOQlFVTXNTVUZCUlR0QlFVRkJMR05CUVVzN1FVRkJReXh4UWtGQlN6dEJRVUZGTEhGQ1FVRkxPMEZCUVVVc2NVSkJRVXM3UVVGQlJTeHJRa0ZCU1N4TFFVRkhMRzlDUVVGSkxGRkJRVTBzV1VGQldTeEhRVUZGTEVsQlFVVXNTVUZCU1N4TFFVRkxMRWRCUVVVc1IwRkJSU3hEUVVGRExFZEJRVVVzU1VGQlJTeEpRVUZKTEV0QlFVc3NSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3hyUWtGQlJTeEZRVUZGTEd0Q1FVRnJRanRCUVVGRkxHdENRVUZKTEVsQlFVVXNSVUZCUlN4clFrRkJhMElzUjBGQlJTeEpRVUZGTEV0QlFVc3NTVUZCU1N4SFFVRkZMRU5CUVVNN1FVRkJSU3huUWtGQlJTeEZRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1MwRkJSenRCUVVGRkxHZENRVUZGTEVWQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hQUVVGUExFdEJRVWNzUTBGQlF6dEJRVUZGTEd0Q1FVRkZMRVZCUVVVc1EwRkJRenRCUVVGRkxHdENRVUZGTEVWQlFVVXNRMEZCUXp0QlFVRkZMR3RDUVVGRkxFZEJRVWNzUTBGQlF6dEJRVUZGTEd0Q1FVRkZMRWRCUVVjc1EwRkJRenRCUVVGRkxHdENRVUZGTEV0QlFVY3NSVUZCUlN4RlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzUjBGQlJTeEZRVUZGTEVWQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFMUJRVWtzUlVGQlJTeEZRVUZGTEUxQlEzQm1MRTFCUVVrc1EwRkJReXhKUVVGRkxFZEJRVVVzUlVGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGQkxGbEJRVVU3UVVGQlFTeFpRVUZGTEVkQlFVVXNUVUZCU1R0QlFVRkRMR2RDUVVGRkxFVkJRVVU3UVVGQlFTeFpRVUZETzBGQlFVRXNXVUZCUlN4SFFVRkZMRTFCUVVrN1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEhRVUZGTEUxQlFVa3NTMEZCU3l4SlFVRkpPMEZCUVVFc1dVRkJSU3hKUVVGSExFMUJRVWs3UVVGQlF5eHZRa0ZCU1R0QlFVRkZMRzlDUVVGTE8wRkJRVUVzV1VGQlV6dEJRVUZCTEZsQlFVVXNSMEZCUlN4WFFVRlZPMEZCUVVNc2NVSkJRVTg3UVVGQlFTeFpRVUZWTzBGQlFVRXNXVUZCUlN4SFFVRkZMRTFCUVVrc1dVRkJXU3hoUVVGWExGbEJRVmtzU1VGQlNUdEJRVUZCTEZsQlFVVXNSMEZCUlN4TlFVRkpMRWxCUVVVc2MwTkJRV01zUzBGQlN5eEZRVUZGTEZOQlFVOHNWVUZCVlR0QlFVRkJMRmxCUVc5Q0xFZEJRVVVzVTBGQlV5eEhRVUZGTzBGQlFVTXNjVUpCUVVzN1FVRkJSU3hyUWtGQlNTeEpRVUZGTEVWQlFVVXNSVUZCUlR0QlFVRlBMR3RDUVVGSExFdEJRVWNzUzBGQlJ5eGhRVUZYTzBGQlFVVXNkVUpCUVUwN1FVRkJSeXgxUWtGQlVTeEpRVUZGTEVkQlFVVXNTMEZCUnl4SFFVRkZMRXRCUVVjc1IwRkJSVHRCUVVGRExHOUNRVUZKTEVsQlFVVXNTMEZCUnl4SlFVRkZMRTFCUVVjN1FVRkJSeXh2UWtGQlJTeExRVUZMTEVsQlFVa3NSMEZCUlN4SlFVRkZMRk5CUVZNN1FVRkJSU3h2UWtGQlNTeEpRVUZGTzBGQlFVc3NiMEpCUVVVc1MwRkJTeXhKUVVGSkxFZEJRVVVzUTBGQlF6dEJRVUZGTEcxQ1FVRkZPMEZCUVVNc2RVSkJRVWNzUlVGQlJTeEpRVUZKTEV0QlFVc3NSMEZCUlN4WlFVRlhMRXRCUVVjc1VVRkJUU3hKUVVGRkxGTkJRVThzUzBGQlN5eEpRVUZGTEVWQlFVVXNUMEZCVHl4aFFVRlhMRk5CUVU4N1FVRkJUU3h6UWtGQlJ6dEJRVUZETEhOQ1FVRkZMRXRCUVVzc1EwRkJRenRCUVVNelppeHpRa0ZCUlR0QlFVRkZMSGRDUVVGSkxFbEJRVVU3UVVGQlJTd3dRa0ZCVFR0QlFVRkJMR3RDUVVGRExGTkJRVThzUjBGQlJUdEJRVUZCTEd0Q1FVRkRPMEZCUVVNc2MwSkJRVVU3UVVGQlFTeG5Ra0ZCVFR0QlFVRkRMRzlDUVVGSE8wRkJRVVVzZVVKQlFVMDdRVUZCUVN4alFVRkZPMEZCUVVNc2NVSkJRVTA3UVVGQlFTeFpRVUZGTzBGQlFVRXNXVUZCUlN4SlFVRkhPMEZCUVVFc1dVRkJSeXhKUVVGSE8wRkJRVUVzV1VGQlJ5eEhRVUZGTzBGQlFVRXNXVUZCUnl4SFFVRkZPMEZCUVVFc1dVRkJSeXhIUVVGRk8wRkJRVUVzV1VGQlJ5eEpRVUZITzBGQlFVRXNXVUZCUnl4SFFVRkZPMEZCUVVFc1dVRkJSeXhIUVVGRkxFdEJRVWNzUlVGQlJUdEJRVUZCTEZsQlFWY3NTVUZCUnp0QlFVRkJMRmxCUVVjc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4eFFrRkJUeXhIUVVGSExFMUJRVWtzUjBGQlJTeE5RVUZKTEVkQlFVVXNUVUZCU1N4SFFVRkZMRTFCUVVrc1EwRkJRenRCUVVGQkxGbEJRVU03UVVGQlFTeFZRVUZETEVkQlFVVXNTVUZCUlN4WFFVRlZPMEZCUVVNc1owSkJRVWtzU1VGQlJTeEZRVUZETEVkQlFVVXNSMEZCUlR0QlFVRkZPMEZCUVVrc1pVRkJSeXhIUVVGRkxGTkJRVk1zUjBGQlJUdEJRVUZETEd0Q1FVRkpMRWxCUVVVc1JVRkJSVHRCUVVGUExHdENRVUZGTEVWQlFVVXNVMEZCVXp0QlFVRlJMR3RDUVVGRkxFZEJRVWM3UVVGQlJTeG5Ra0ZCUlN4SFFVRkhMRXRCUVVzc1JVRkJSU3hGUVVGRk8wRkJRVVVzYlVKQlFVY3NSVUZCUlR0QlFVRkhMR2xDUVVGSExGRkJRVkVzUlVGQlJTeEZRVUZGTzBGQlFVVXNiVUpCUVVjN1FVRkJSU3hwUWtGQlJ6dEJRVUZCTEZsQlFVTXNRMEZCUXl4RlFVRkZMRTFCUVUwc1JVRkJSVHRCUVVGRkxHMUNRVUZOTEVOQlFVTTdRVUZCUVN4VlFVRkRMRVZCUVVVN1FVRkJSU3haUVVGRkxGZEJRVk1zUTBGQlF5eEhRVUZGTEU5QlFVc3NSVUZCUlN4WFFVRlRMRVZCUVVVc1NVRkJTU3hIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTEcxQ1FVRnBRaXhEUVVGRExFZEJRVVVzVDBGQlN5eEZRVUZGTEcxQ1FVRnBRaXhGUVVGRkxFbEJRVWtzUjBGQlJTeERRVUZETzBGQlF6TmlMRmxCUVVVc01rSkJRWGxDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMREpDUVVGNVFpeEZRVUZGTEVsQlFVa3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc09FSkJRVFJDTEVOQlFVTXNSMEZCUlN4UFFVRkxMRVZCUVVVc09FSkJRVFJDTEVWQlFVVXNTVUZCU1N4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxDdENRVUUyUWl4RFFVRkRMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzSzBKQlFUWkNMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNORUpCUVRCQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN3MFFrRkJNRUlzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3cwUWtGQk1FSXNVVUZCU1N4RlFVRkZMRFJDUVVFd1FpeEZRVUZGTEVsQlFVa3NRMEZCUXp0QlFVRkZMRmxCUVVVc2IwSkJRV3RDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRTlCUVVzc1JVRkJSU3h2UWtGQmEwSXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRemxrTEZsQlFVVXNjVUpCUVcxQ0xGRkJRVWtzUlVGQlJTeHhRa0ZCYlVJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTERCQ1FVRjNRaXhEUVVGRExFZEJRVVVzUjBGQlJTeFBRVUZMTEVWQlFVVXNNRUpCUVhkQ0xFVkJRVVVzU1VGQlNTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc2JVSkJRV2xDTEVOQlFVTXNSMEZCUlN4UFFVRkxMRVZCUVVVc2JVSkJRV2xDTEVWQlFVVXNTVUZCU1N4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxHOUNRVUZyUWl4RFFVRkRMRWRCUVVVc1QwRkJTeXhGUVVGRkxHOUNRVUZyUWl4RlFVRkZMRWxCUVVrc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeFhRVUZUTEZGQlFVa3NSVUZCUlN4WFFVRlRMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHRRa0ZCYVVJc1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMRzFDUVVGcFFpeEZRVUZGTEVsQlFVa3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTEc5Q1FVRnJRaXhEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMRzlDUVVGclFpeEZRVUZGTEVsQlFVa3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHZRa0ZCYTBJc1VVRkJTU3hGUVVGRkxHOUNRVUZyUWl4RlFVRkZMRWxCUVVrc1EwRkJRenRCUVVNMVpDeFpRVUZGTEhWQ1FVRnhRaXhEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4MVFrRkJjVUlzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxIZENRVUZ6UWl4RFFVRkRMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzZDBKQlFYTkNMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNkMEpCUVhOQ0xGRkJRVWtzUlVGQlJTeDNRa0ZCYzBJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTEc5Q1FVRnJRaXhSUVVGSkxFVkJRVVVzYjBKQlFXdENMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRVVVzV1VGQlJTeG5Ra0ZCWXl4RFFVRkRMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzWjBKQlFXTXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHBRa0ZCWlN4RFFVRkRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTeHBRa0ZCWlN4RlFVRkZMRWxCUVVrc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNkMEpCUVhOQ0xGRkJRVWtzUlVGQlJTeDNRa0ZCYzBJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTEhGQ1FVRnRRaXhSUVVGSkxFVkJRVVVzY1VKQlFXMUNMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRM2hsTEZsQlFVVXNjVUpCUVcxQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4UFFVRkxMRVZCUVVVc2NVSkJRVzFDTEVWQlFVVXNTVUZCU1N4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTEZWQlFWRXNRMEZCUXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4VlFVRlJMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxHMUNRVUZwUWl4UlFVRkpMRVZCUVVVc2JVSkJRV2xDTEVWQlFVVXNTVUZCU1N4RFFVRkRPMEZCUVVVc1kwRkJTU3hMUVVGSExFVkJRVVVzWjBKQlFXTXNUMEZCU3l4TFFVRkhMRVZCUVVVc1owSkJRV01zUlVGQlJTeEpRVUZKTEVkQlFVVXNTMEZCUnl4RlFVRkZMRlZCUVZFc1VVRkJTU3hMUVVGSExFVkJRVVVzVlVGQlVTeEZRVUZGTEVsQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVVc1JVRkJSU3hSUVVGTkxGRkJRVWtzU1VGQlJTeEZRVUZGTEZGQlFVMHNSVUZCUlN4SlFVRkpMRU5CUVVNN1FVRkJSU3haUVVGRkxIZENRVUZ6UWl4UFFVRkxMRVZCUVVVc2QwSkJRWE5DTEVWQlFVVXNTVUZCU1R0QlFVRkZMR05CUVVrc1MwRkJSeXhSUVVGSkxFdEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTTdRVUZCUlN4WlFVRkZMQ3RDUVVFMlFpeFBRVUZMTEVWQlFVVXNLMEpCUVRaQ0xFVkJRVVVzU1VGQlNUdEJRVU4yWkN4alFVRkpMRXRCUVVjc1JVRkJSU3d5UWtGQmVVSXNRMEZCUXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzVDBGQlN5eExRVUZITEVWQlFVVXNNa0pCUVhsQ0xFVkJRVVVzU1VGQlNTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGRkxGbEJRVVVzT0VKQlFUUkNMRTlCUVVzc1JVRkJSU3c0UWtGQk5FSXNSVUZCUlN4SlFVRkpPMEZCUVVVc1kwRkJTU3hMUVVGSExFTkJRVU1zUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4TFFVRkhMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETEVkQlFVVXNTMEZCUnl4UlFVRkpMRXRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zUjBGQlJTeExRVUZITEVWQlFVVXNNa0pCUVhsQ0xGRkJRVWtzUzBGQlJ5eEZRVUZGTERKQ1FVRjVRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZGTEV0QlFVY3NSVUZCUlN3MlFrRkJNa0lzVDBGQlN5eExRVUZITEVWQlFVVXNOa0pCUVRKQ0xFVkJRVVVzU1VGQlNTeEhRVUZGTEV0QlFVY3NRMEZCUXl4SFFVRkZMRTlCUVVzc1MwRkJSeXhGUVVGRkxFbEJRVWtzUjBGQlJTeERRVUZETEVkQlFVVXNTMEZCUnl4UFFVRkxMRXRCUVVjc1JVRkJSU3hKUVVGSkxFZEJRVVVzUzBGQlJ5eFJRVUZKTEV0QlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1IwRkJSU3hMUVVGSExGRkJRVWtzUzBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXp0QlFVTXhZeXh0UWtGQlV5eExRVUZKTzBGQlFVTXNaMEpCUVVrc1NVRkJSVHRCUVVGRkxHZENRVUZGTEU5QlFVOHNUMEZCVHl4RFFVRkRMRWRCUVVVc1EwRkJRenRCUVVGRkxHZENRVUZKTEVsQlFVVXNUMEZCUnl4TlFVRkpMRVZCUVVVc1RVRkJTU3hIUVVGRkxFbEJRVVVzVDBGQlJ5eFBRVUZITEVWQlFVVXNRMEZCUXl4TlFVRkpPMEZCUVVVc1kwRkJSU3h0UWtGQmFVSXNSVUZCUlN4RlFVRkZMR2RDUVVGblFqdEJRVUZGTEdOQlFVVXNTMEZCUnl4RlFVRkZMRVZCUVVVc1JVRkJSVHRCUVVGRkxHTkJRVVVzUzBGQlJ5eEZRVUZGTEVWQlFVVXNSVUZCUlR0QlFVRkZMR05CUVVVc1MwRkJSeXhGUVVGRkxFVkJRVVVzUlVGQlJUdEJRVUZGTEdOQlFVVXNTMEZCUnl4RlFVRkZMRVZCUVVVc1JVRkJSVHRCUVVGRkxHTkJRVVVzUzBGQlJ5eEZRVUZGTEVWQlFVVXNSVUZCUlR0QlFVRkZMRzFDUVVGUE8wRkJRVUVzVlVGQlF6dEJRVUZETEZsQlFVVXNiVUpCUVdsQ08wRkJRVWNzV1VGQlJTeGhRVUZYTzBGQlFVVXNXVUZCUlN4aFFVRlhPMEZCUVVjc1dVRkJSU3haUVVGVk8wRkJRVWNzV1VGQlJTeGxRVUZoTzBGQlFVY3NXVUZCUlN4bFFVRmhPMEZCUVVjc1dVRkJSU3hsUVVGaE8wRkJRVWNzV1VGQlJTeHJRa0ZCWjBJN1FVRkJSeXhaUVVGRkxHRkJRVmM3UVVGQlJ5eFpRVUZGTEZWQlFWRTdRVUZCUlN4alFVRkpPMEZCUVVjc1kwRkJSU3hUUVVGVExFdEJRVWs3UVVGQlF5eHJRa0ZCU1N4SFFVRkhPMEZCUVVVc2JVSkJRVXNzU1VGQlJUdEJRVUZCTEZWQlFVYzdRVUZETVZvc2JVSkJRVk1zUzBGQlNUdEJRVUZETEdkQ1FVRkZMRTFCUVVrc1MwRkJSeXhIUVVGSExFTkJRVU1zUjBGQlJTeExRVUZITEVkQlFVY3NSVUZCUlN4SFFVRkZMRmxCUVZrc1EwRkJReXhOUVVGSkxFZEJRVWNzUlVGQlJTeEhRVUZGTEVsQlFVVXNTMEZCUnl4UFFVRkxMRXRCUVVjc1RVRkJSeXhGUVVGRkxGbEJRVlVzVFVGQlJ5eFBRVUZMTEV0QlFVY3NSMEZCUnl4RlFVRkZMRWRCUVVVc1IwRkJSeXhEUVVGRExFZEJRVVVzUzBGQlJ5eEhRVUZITEVWQlFVVTdRVUZCUVN4VlFVRkxPMEZCUVVNc1lVRkJSenRCUVVkc1NTeHBRa0ZCVHl4VlFVRlZPMEZCUVVFc1VVRkRia0k3UVVGQlFTeE5RVWRCTEVkQlFVYzdRVUZEU0N4VlFVRkpMRTlCUVU4c1dVRkJXU3haUVVGWkxFOUJRVThzVjBGQlZ6dEJRVU51UkN4bFFVRlBMRlZCUVZVN1FVRkJRU3hsUVVOV0xFOUJRVThzVjBGQlZ5eGpRVUZqTEU5QlFVOHNTMEZCU3p0QlFVTnVSQ3hsUVVGUExFTkJRVU1zUjBGQlJ5eE5RVUZOTEdWQlFXVTdRVUZCUVR0QlFVRkJPenM3UVVNeFJteERPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3T3p0QlEwRlBMRTFCUVUwc1QwRkJUenM3TzBGRFZYQkNMRTFCUVVrN1FVRkZTaXhOUVVGSkxFOUJRVGhDTzBGQlEyaERMSEZDUVVGcFFqdEJRVUZCTEVWQlEyNUNMRTlCUVU4N1FVRkRUQ3h4UWtGRFNTeFBRVUUwUWl4eFFrRkJiVU03UVVGQlFTeEZRVU55UlR0QlFVVkJMRTFCUVUwc2VVSkJRV2xGTEU5QlEyeEZMRTlCUVRSQ0xEaENRVU5CTEU5QlF6ZENPMEZCUjBvc1RVRkJTVHRCUVVOS0xFMUJRVWtzWTBGQll6dEJRVU5zUWl4TlFVRkpMR1ZCUVdVN1FVRkRia0lzVFVGQlNTeFZRVUZWTzBGQlJXUXNUVUZCVFN4NVFrRkJlVUlzVFVGQlpUdEJRVU0xUXl4UlFVRkpPMEZCUlVZc1ZVRkJTU3hQUVVGUExITkNRVUZ6UWl4aFFVRmhPMEZCUXpWRExHVkJRVTg3UVVGQlFTeE5RVU5VTzBGQlNVRXNWVUZCU1N4UFFVRlBMRzFDUVVGdFFpeGhRVUZoTzBGQlEzcERMRmxCUVVrc1pVRkJaU3hGUVVGRkxFMUJRVTBzV1VGQldTeEpRVUZKTEd0Q1FVRnJRaXhEUVVGRExFTkJRVU03UVVGQlFTeE5RVU5xUlR0QlFVbEJMR0ZCUVU4c1dVRkJXU3hUUVVGVExFbEJRVWtzVjBGQlZ6dEJRVUZCTEZGQlEzcERPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWs3UVVGQlFTeFJRVUZMTzBGQlFVRXNVVUZCU3p0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSk8wRkJRVUVzVVVGQlNUdEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWs3UVVGQlFTeFJRVUZKTzBGQlFVRXNVVUZCU3p0QlFVRkJMRkZCUVVrN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkRia1U3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCU1R0QlFVRkJMRkZCUVVzN1FVRkJRU3hSUVVGTE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkpPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCU1R0QlFVRkJMRkZCUVVrN1FVRkJRU3hSUVVGTE8wRkJRVUVzVVVGQlNUdEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJTVHRCUVVGQkxFMUJRMnhGTEVOQlFVTXNRMEZCUXp0QlFVRkJMRWxCUTBvc1UwRkJVeXhIUVVGSE8wRkJRMVlzWVVGQlR6dEJRVUZCTEVsQlExUTdRVUZCUVN4RlFVTkdPMEZCUlVFc1RVRkJUU3hyUWtGQmEwSXNUVUZCWlR0QlFVTnlReXhSUVVGSk8wRkJaVVlzWVVGQlR5eFpRVUZaTEZOQlFWTXNTVUZCU1N4WFFVRlhPMEZCUVVFc1VVRkRla003UVVGQlFTeFJRVUZMTzBGQlFVRXNVVUZCU1R0QlFVRkJMRkZCUVVzN1FVRkJRU3hSUVVGTE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVrN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZKTzBGQlFVRXNVVUZCU1R0QlFVRkJMRkZCUVVzN1FVRkJRU3hSUVVGTE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVTjJSanRCUVVGQkxGRkJRVXM3UVVGQlFTeFJRVUZKTzBGQlFVRXNVVUZCU3p0QlFVRkJMRkZCUVVzN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCU1R0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWs3UVVGQlFTeFJRVUZKTzBGQlFVRXNVVUZCU3p0QlFVRkJMRkZCUVVzN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlNUdEJRVUZCTEUxQlEzcEdMRU5CUVVNc1EwRkJRenRCUVVGQkxFbEJRMG9zVTBGQlV5eEhRVUZITzBGQlExWXNZVUZCVHp0QlFVRkJMRWxCUTFRN1FVRkJRU3hGUVVOR08wRkJSVUVzVFVGQlRTeHJRa0ZCYTBJc1EwRkJReXhUUVVGclFpeGxRVUYzUWp0QlFVTnFSU3hSUVVGSkxGTkJRVk03UVVGRFdDeFZRVUZKTEU5QlFUaENPMEZCUTJoRExHVkJRVTg3UVVGQlFTeE5RVU5VTzBGQlEwRXNZVUZCVHl4aFFVRmhMR2REUVVGblF6dEJRVUZCTEVsQlEzUkVMRTlCUVU4N1FVRkRUQ3hoUVVGUExHRkJRV0VzTWtKQlFUSkNPMEZCUVVFc1NVRkRha1E3UVVGQlFTeEZRVU5HTzBGQlJVOHNUVUZCVFN4M1FrRkJkMElzVDBGQlRTeFZRVUVyUXp0QlFVTjRSaXhSUVVGSkxHRkJRV0U3UVVGRFppeGhRVUZQTEZGQlFWRXNVVUZCVVR0QlFVRkJMRWxCUTNwQ08wRkJRMEVzVVVGQlNTeGpRVUZqTzBGQlEyaENMRmxCUVUwc1NVRkJTU3hOUVVGTkxIVkVRVUY1UkR0QlFVRkJMRWxCUXpORk8wRkJRMEVzVVVGQlNTeFRRVUZUTzBGQlExZ3NXVUZCVFN4SlFVRkpMRTFCUVUwc2IwUkJRWE5FTzBGQlFVRXNTVUZEZUVVN1FVRkZRU3h0UWtGQlpUdEJRVWRtTEZWQlFVMHNWVUZCVlN4TlFVRk5PMEZCUTNSQ0xGVkJRVTBzWVVGQllTeE5RVUZOTzBGQlEzcENMRlZCUVUwc1QwRkJUeXhOUVVGTk8wRkJSVzVDTEZWQlFVMHNZVUZCWVN4aFFVRmhMRXRCUVVzc2RVSkJRWFZDTzBGQlF6VkVMRlZCUVUwc1ZVRkJWU3hSUVVGUkxHZENRVUZuUWp0QlFVVjRReXhWUVVGTkxGbEJRVmtzVFVGQlRUdEJRVU40UWl4VlFVRk5MSEZDUVVGeFFpeFBRVUZQTEdOQlFXTXNWMEZCVnl4WlFVRlpPMEZCUTNaRkxGVkJRVTBzWlVGQlpTeG5Ra0ZCWjBJc1UwRkJVeXhWUVVGVk8wRkJRM2hFTEZWQlFVMHNiVUpCUVcxQ0xFOUJRVThzWTBGQll5eFhRVUZYTEZWQlFWVXNXVUZCV1N4SlFVRkpPMEZCUlc1R0xGRkJRVWtzV1VGQldUdEJRVVZvUWl4VlFVRk5MRkZCUVRoQ0xFTkJRVU03UVVGSGNrTXNVVUZCU1N4VlFVRlZMRWRCUVVjN1FVRkRaaXhaUVVGTkxFdEJRVXNzU1VGQlNTeFJRVUZSTEVOQlFVTXNXVUZCV1R0QlFVTnNReXh0UWtGQlZ5eE5RVUZOTzBGQlEyWXNjMEpCUVZrN1FVRkRXaXhyUWtGQlVUdEJRVUZCTEZGQlExWXNSMEZCUnl4UFFVRlBPMEZCUVVFc1RVRkRXaXhEUVVGRExFTkJRVU03UVVGQlFTeEpRVU5LTzBGQlIwRXNWVUZCVFN4TFFVRkxMRWxCUVVrc1VVRkJVU3hEUVVGRExGTkJRVk1zVjBGQlZ6dEJRVU14UXl4WlFVRk5MRlZCUVZVc1lVRkJZU3g1UWtGQmVVSTdRVUZEZEVRc1dVRkJUU3hUUVVGcFF6dEJRVUZCTEZGQlEzSkRMRmxCUVZrc1EwRkJReXhWUVVGclFpeHZRa0ZCTkVJN1FVRkRla1FzWTBGQmRVTXNZMEZCWXl4VFFVRlRMRk5CUVZNc1dVRkJXU3hMUVVNdlJTeFBRVUZQTEZOQlFWTXNZVUZCWVR0QlFVTXZRaXh0UWtGQlR5eEpRVUZKTEdkQ1FVRm5RaXhKUVVGSk8wRkJRVUVzWTBGRE0wSTdRVUZCUVR0QlFVRkJPMEZCUVVFc1owSkJSMFU3UVVGQlFTeGpRVU5HTzBGQlFVRXNZMEZEUVN4RlFVRkRMRTFCUVUwc2EwSkJRV2xDTzBGQlFVRXNXVUZCUXl4RFFVRkRPMEZCUVVFc1ZVRkRhRU03UVVGRlFTeGpRVUZKTEZOQlFWTXNVMEZCVXl4UFFVRlBMRWRCUVVjN1FVRkRPVUlzWjBKQlFVa3NhMEpCUVd0Q08wRkJRM0JDTEhGQ1FVRlBPMEZCUVVFc1dVRkRWRHRCUVVWQkxHdENRVUZOTEZOQlFWTXNjMEpCUVhOQ08wRkJSWEpETEdkQ1FVRkpMRTlCUVRSQ08wRkJRemxDTEd0Q1FVRkpMR2xDUVVGcFFpeHpRa0ZCYzBJN1FVRkRla01zZFVKQlFVOHNVMEZCVXp0QlFVRkJMR05CUTJ4Q0xGZEJRVmNzYVVKQlFXbENMQ3RDUVVFclFqdEJRVU42UkN4MVFrRkJUeXhUUVVGVE8wRkJRVUVzWTBGRGJFSTdRVUZCUVN4WlFVTkdPMEZCUlVFc2JVSkJRVThzVTBGQlV6dEJRVUZCTEZWQlEyeENPMEZCUlVFc2FVSkJRVThzYTBKQlFXdENPMEZCUVVFc1VVRkRNMEk3UVVGQlFTeE5RVU5HTzBGQlJVRXNWVUZCZFVNc1dVRkJXVHRCUVVOcVJDeGxRVUZQTEdGQlFXRTdRVUZEY0VJc1dVRkJTU3hQUVVGUExGTkJRVk1zWVVGQllUdEJRVU12UWl4cFFrRkJUeXh6UWtGQk1rSXNTMEZCU3l4WFFVRlhMSE5DUVVGelFqdEJRVUZCTEZGQlF6RkZMRTlCUVU4N1FVRkRUQ3huUWtGQlRTeHRRa0ZCYlVJc2RVSkJRWFZDTEZGQlFWRXNVMEZCVXl4RFFVRkRPMEZCUTJ4RkxHbENRVUZQTEhOQ1FVRnpRaXhKUVVGSkxFdEJRVXNzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhGUVVGRExFMUJRVTBzYTBKQlFXbENMRU5CUVVNN1FVRkJRU3hSUVVOeVJqdEJRVUZCTEUxQlEwWTdRVUZGUVN4alFVRlJMRTFCUVUwc1JVRkJSVHRCUVVGQk8wRkJRVUVzVVVGRldpeFpRVUZWTzBGQlExSXNlVUpCUVdVN1FVRkRaaXgzUWtGQll6dEJRVU5rTEdsQ1FVRlBPMEZCUTFBc2EwSkJRVkU3UVVGQlFTeFJRVU5XTzBGQlFVRTdRVUZCUVN4UlFVVkJMRU5CUVVNc1UwRkJVenRCUVVOU0xIbENRVUZsTzBGQlEyWXNiMEpCUVZVN1FVRkRWaXhwUWtGQlR5eEpRVUZKTzBGQlFVRXNVVUZEWWp0QlFVRkJMRTFCUVVNN1FVRkJRU3hKUVVOUUxFTkJRVU1zUTBGQlF6dEJRVVZHTEZWQlFVMHNVVUZCVVN4TFFVRkxMRXRCUVVzN1FVRkZlRUlzVVVGQlNTeFhRVUZYTzBGQlEySXNXVUZCVFN4SlFVRkpMRTFCUVUwc01rUkJRVEpFTEU5QlFVOHNTVUZCU1R0QlFVRkJMRWxCUTNoR08wRkJRVUVzUlVGRFJqdEJRVVZQTEUxQlFVMHNZMEZCWXl4TlFVRnhRanRCUVVNNVF5eFJRVUZKTEdWQlFXVXNUVUZCVFR0QlFVTjJRaXhoUVVGUE8wRkJRVUVzU1VGRFZEdEJRVVZCTEZWQlFVMHNTVUZCU1N4TlFVRk5MSEZEUVVGeFF6dEJRVUZCTEVWQlEzWkVPenM3UVVNeFRVOHNUVUZCVFN4clFrRkJhMElzUTBGQlF5eE5RVUZqTEZkQlFUWkNPMEZCUTNwRkxGVkJRVTFETEZGQlFVOHNXVUZCV1R0QlFVVjZRaXhWUVVGTkxHRkJRV0ZCTEUxQlFVc3NaMEpCUVdkQ0xFbEJRVWtzU1VGQlNUdEJRVU5vUkN4VlFVRk5MR0ZCUVdGQkxFMUJRVXNzVVVGQlVTeFZRVUZWTzBGQlF6RkRMRWxCUVVGQkxFMUJRVXNzWVVGQllTeE5RVUZOTEZsQlFWa3NWVUZCVlR0QlFVTTVReXhYUVVGUExFdEJRVXNzVlVGQlZUdEJRVVYwUWl4WFFVRlBPMEZCUVVFc1JVRkRWRHRCUVUxUExFMUJRVTBzYzBKQlExUXNRMEZCUXl4VFFVRnJReXhSUVVGblFpeE5RVU5zUkN4WlFVRjFRenRCUVVOMFF5eFJRVUZKTEU5QlFVOHNWMEZCVnl4WlFVRlpMRmxCUVZrc1RVRkJUVHRCUVVOc1JDeFZRVUZKTEV0QlFVc3NTVUZCU1N4UFFVRlBMRWRCUVVjN1FVRkRja0lzWTBGQlRTeEpRVUZKTEUxQlFVMHNLMEpCUVN0Q08wRkJRVUVzVFVGRGFrUXNUMEZCVHp0QlFVTk1MR0ZCUVVzc1NVRkJTU3hQUVVGUE8wRkJRVUVzVFVGRGJFSTdRVUZCUVN4SlFVTkdPMEZCUlVFc1YwRkJUeXhSUVVGUkxFOUJRVThzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXl4TFFVRkxMRXRCUVVzc1RVRkJUVHRCUVVOb1JDeFpRVUZOTEU5QlFWRXNVMEZCVlN4VFFVRlRMRTFCUVUwN1FVRkRka01zVlVGQlNTeFBRVUZQTEZWQlFWVXNWVUZCVlR0QlFVTTNRaXcwUWtGQmIwSXNUMEZCYTBNc1QwRkJUeXhMUVVGTExFMUJRVTBzVDBGQlR6dEJRVUZCTEUxQlEycEdMRmRCUVZjc1QwRkJUeXhWUVVGVkxGbEJRVmtzVDBGQlR5eFZRVUZWTEZWQlFWVTdRVUZEYWtVc1owSkJRVkVzVFVGQlRTeE5RVUZOTEZOQlFWTXNRMEZCUXp0QlFVRkJMRTFCUTJoRExGZEJRVmNzVDBGQlR5eFZRVUZWTEZkQlFWYzdRVUZEY2tNc1owSkJRVkVzVFVGQlR5eFJRVUZUTEUxQlFVMHNSMEZCUnp0QlFVRkJMRTFCUTI1RExFOUJRVTg3UVVGRFRDeGpRVUZOTEVsQlFVa3NUVUZCVFN4dFEwRkJiVU1zVDBGQlR5eExRVUZMTEVWQlFVVTdRVUZCUVN4TlFVTnVSVHRCUVVGQkxFbEJRMFlzUTBGQlF6dEJRVUZCTEVWQlEwZzdRVUZOUnl4TlFVRk5MR2xDUVVGcFFpeERRVUZETEZsQlFUQkNPMEZCUTNaRUxGVkJRVTFCTEZGQlFVOHNXVUZCV1R0QlFVVjZRaXhWUVVGTkxGRkJRVkZCTEUxQlFVc3NWVUZCVlR0QlFVTTNRaXhSUVVGSk8wRkJRMFlzV1VGQlRTeGxRVUZsUVN4TlFVRkxMRmRCUVZjc1EwRkJRenRCUVVOMFF5eE5RVUZCUVN4TlFVRkxMR2xDUVVGcFFpeGpRVUZqTEdWQlFXVXNRMEZCUXp0QlFVTndSQ3haUVVGTkxGbEJRVmxCTEUxQlFVc3NUMEZCVHl4bFFVRmxMRU5CUVVNN1FVRkRPVU1zV1VGQlRTeHpRa0ZCYzBKQkxFMUJRVXNzVVVGQlVTeGxRVUZsTEVsQlFVa3NRMEZCUXp0QlFVTTNSQ3haUVVGTkxHVkJRV1VzYzBKQlFYTkNRU3hOUVVGTExHRkJRV0VzYlVKQlFXMUNMRWxCUVVrN1FVRkRjRVlzV1VGQlRTeEpRVUZKTEUxQlFVMHNSMEZCUnl4UFFVRlBMR2RDUVVGblFpeFRRVUZUTEc5Q1FVRnZRaXhaUVVGWkxFVkJRVVU3UVVGQlFTeEpRVU4yUml4VlFVRkZPMEZCUTBFc1RVRkJRVUVzVFVGQlN5eGhRVUZoTEV0QlFVczdRVUZCUVN4SlFVTjZRanRCUVVGQkxFVkJRMFk3T3p0QlEzWkVUeXhOUVVGTkxHZENRVUZuUWl4RFFVRkRMRmxCUVRaRU8wRkJRM3BHTEZWQlFVMURMRkZCUVU4c1dVRkJXVHRCUVVONlFpeFJRVUZKTEcxQ1FVRnRRanRCUVVOMlFpeFZRVUZOTEZOQlFXMUNMRU5CUVVNN1FVRkZNVUlzVlVGQlRTeGhRVUV3UXl4WFFVRlhMRU5CUVVNN1FVRkZOVVFzVVVGQlNUdEJRVU5HTEZWQlFVa3NVMEZCVXl4eFFrRkJjVUlzVVVGQlZ6dEJRVU16UXl4dFFrRkJWeXh0UWtGQmJVSTdRVUZCUVN4TlFVTm9ReXhYUVVOSkxFOUJRVThzVVVGQlVTeHhRa0ZCY1VJc1dVRkJXU3hEUVVGRExFOUJRVThzVlVGQlZTeFJRVUZSTEdkQ1FVRm5RaXhMUVVNeFJpeFJRVUZSTEcxQ1FVRnRRaXhMUVVGTExGRkJRVkVzYlVKQlFXMUNMRWRCUVVjN1FVRkRhRVVzWTBGQlRTeEpRVUZKTEUxQlFVMHNjVU5CUVhGRExGRkJRVkVzWjBKQlFXZENMRVZCUVVVN1FVRkJRU3hOUVVOcVJqdEJRVVZCTEZWQlFVa3NVMEZCVXl4elFrRkJjMElzVVVGQlZ6dEJRVU0xUXl4dFFrRkJWeXh2UWtGQmIwSTdRVUZCUVN4TlFVTnFReXhYUVVGWExFOUJRVThzVVVGQlVTeHpRa0ZCYzBJc1dVRkJXU3hEUVVGRExFOUJRVThzVlVGQlZTeFJRVUZSTEdsQ1FVRnBRaXhIUVVGSE8wRkJRM2hITEdOQlFVMHNTVUZCU1N4TlFVRk5MSEZEUVVGeFF5eFJRVUZSTEdsQ1FVRnBRaXhGUVVGRk8wRkJRVUVzVFVGRGJFWTdRVUZGUVN4VlFVRkpMRk5CUVZNc1kwRkJZeXhSUVVGWE8wRkJRM0JETEcxQ1FVRlhMRmxCUVZrN1FVRkJRU3hOUVVONlFqdEJRVVZCTEZWQlFVa3NaMEpCUVdkQ08wRkJRM0JDTEZWQlFVa3NVMEZCVXl4UlFVRlJMRkZCUVZjN1FVRkRPVUlzZDBKQlFXZENMR2RDUVVGblFpeFJRVUZSTEV0QlFVc3NUVUZCVFR0QlFVRkJMRTFCUTNKRU8wRkJSVUVzZVVKQlFXMUNRU3hOUVVGTE8wRkJRVUVzVVVGRGNFSXNWMEZCVnp0QlFVRkJMRkZCUVcxQ0xGZEJRVmM3UVVGQlFTeFJRVUZ2UWl4RFFVRkRMRU5CUVVNc1YwRkJWenRCUVVGQkxGRkJRVms3UVVGQlFTeE5RVUZoTzBGQlEzWkhMRlZCUVVrc2NVSkJRWEZDTEVkQlFVYzdRVUZETVVJc2RVSkJRV1VzTWtKQlFUUkNPMEZCUVVFc1RVRkROME03UVVGRlFTeFZRVUZKTEZOQlFWTXNWVUZCVlN4UlFVRlhPMEZCUTJoRExEUkNRVUZ2UWl4UlFVRlJMRTlCUVU4c1NVRkJTU3h2UWtGQlNTeFJRVUZwUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhWUVVGVk8wRkJRemRHTEdkQ1FVRk5MR2RDUVVGblFpeG5Ra0ZCWjBJc1MwRkJTeXhOUVVGTk8wRkJRMnBFTEdkQ1FVRk5MR3RDUVVGclFpeG5Ra0ZCWjBJc1QwRkJUeXhOUVVGTk8wRkJSWEpFTEdOQlFVbEJMRTFCUVVzc2MwSkJRWE5DTEd0Q1FVRnJRaXhsUVVGbExHVkJRV1VzVFVGQlRTeEhRVUZITzBGQlEzUkdMREpDUVVGbExHbERRVUZwUXl4SFFVRkhMRTFCUVUwc1MwRkJTeXhIUVVGSE8wRkJRVUVzVlVGRGJrVTdRVUZCUVN4UlFVTkdMRU5CUVVNN1FVRkJRU3hOUVVOSU8wRkJSVUVzWVVGQlR5eERRVUZETEd0Q1FVRnJRaXhOUVVGTk8wRkJRVUVzU1VGRGJFTXNVMEZCVXl4SFFVRkhPMEZCUTFZc1ZVRkJTU3h4UWtGQmNVSXNSMEZCUnp0QlFVTXhRaXhSUVVGQlFTeE5RVUZMTEhOQ1FVRnpRaXhuUWtGQlowSTdRVUZCUVN4TlFVTTNRenRCUVVOQkxHRkJRVThzVVVGQlVTeFhRVUZUUVN4TlFVRkxMRTFCUVUwc1MwRkJTeXhEUVVGRE8wRkJRM3BETEZsQlFVMDdRVUZCUVN4SlFVTlNPMEZCUVVFc1JVRkRSanM3TzBGRGVFUkJMRTFCUVUwc01rSkJRVEpDTEVOQlFVTXNNa0pCUVcxRU8wRkJRMjVHTEZsQlFWRXNkMEpCUVhkQ08wRkJRVUVzVFVGRE9VSXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVPMEZCUTBVc1kwRkJUU3hKUVVGSkxFMUJRVTBzZVVOQlFYbERMSE5DUVVGelFpeEZRVUZGTzBGQlFVRXNTVUZEY2tZN1FVRkJRU3hGUVVOR08wRkJSVUVzVFVGQlRTeHRRa0ZCYlVJc1EwRkJReXhyUWtGQmJVUTdRVUZETTBVc1dVRkJVU3hsUVVGbE8wRkJRVUVzVFVGRGNrSXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkR0QlFVTkZMR05CUVUwc1NVRkJTU3hOUVVGTkxDdENRVUVyUWl4aFFVRmhMRVZCUVVVN1FVRkJRU3hKUVVOc1JUdEJRVUZCTEVWQlEwWTdRVUZGUVN4TlFVRk5MSFZDUVVGMVFpeERRVUZETEZsQlFXMUVPMEZCUXk5RkxGRkJRVWtzUTBGQlF5eFJRVUZSTEU5QlFVODdRVUZEYkVJc1kwRkJVU3hSUVVGUkxFTkJRVU03UVVGQlFTeEpRVU51UWp0QlFVTkJMRkZCUVVrc1EwRkJReXhSUVVGUkxFMUJRVTBzVTBGQlV6dEJRVU14UWl4alFVRlJMRTFCUVUwc1ZVRkJWU3hEUVVGRE8wRkJRVUVzU1VGRE0wSTdRVUZEUVN4VlFVRk5MRlZCUVZVc1VVRkJVU3hOUVVGTk8wRkJRemxDTEZGQlFVa3NRMEZCUXl4UlFVRlJMRGhDUVVFNFFqdEJRVVY2UXl4alFVRlJMQ3RDUVVFclFqdEJRVUZCTEVsQlEzcERPMEZCUjBFc1VVRkJTU3hSUVVGUkxITkNRVU5TTEZGQlFWRXNiVUpCUVcxQ0xFdEJRVXNzVTBGQlR5eFBRVUZQTEU5QlFVOHNWMEZCVnl4TFFVRkxMRWRCUVVjc1ZVRkJWU3hSUVVGUkxFZEJRVWM3UVVGREwwWXNZMEZCVVN4dFFrRkJiVUk3UVVGQlFTeEpRVU0zUWp0QlFVRkJMRVZCUTBZN1FVRkZRU3hOUVVGTkxIZENRVU5HTEVOQlFVTXNjMEpCUVRoQ0xHOUNRVU01UWl4WFFVRXlRanRCUVVNeFFpeGxRVUZYTEUxQlFVMHNiMEpCUVc5Q08wRkJRMjVETEZWQlFVa3NVMEZCVXl4UFFVRlBMRTlCUVU4c1YwRkJWeXhMUVVGTExFZEJRVWM3UVVGSE9VTXNZMEZCVVN4UlFVRlJPMEZCUVVFc1VVRkRaQ3hMUVVGTE8wRkJRMGdzYlVKQlFWTTdRVUZEVkR0QlFVRkJMRkZCUTBZc1MwRkJTenRCUVVOSUxHMUNRVUZUTzBGQlExUXNZMEZCU1N4UFFVRlBMRTlCUVU4c1ZVRkJWVHRCUVVNeFFpeHJRa0ZCVFN4bFFVRmxPMEZCUTNKQ0xHZENRVUZKTEdOQlFXTXNXVUZCV1R0QlFVTTFRaXh2UWtGQlRTeG5Ra0ZCWjBJc1owSkJRV2RDTEdOQlFXTXNUVUZCVFR0QlFVTXhSQ3h2UWtGQlRTeHJRa0ZCYTBJc1owSkJRV2RDTEdGQlFXRXNXVUZCV1N4TlFVRk5PMEZCUTNaRkxHdENRVUZKTEZsQlFWa3NSVUZCUlN3d1FrRkJNRUlzYzBKQlFYTkNMR1ZCUVdVc1pVRkJaU3hOUVVNMVJpeEhRVUZITzBGQlEwd3NLMEpCUVdVc2IwUkJRVzlFTEdGQlFXRXNWVUZCVlN4SFFVRkhPMEZCUVVFc1kwRkRMMFk3UVVGQlFTeFpRVU5HTzBGQlEwRXNaMEpCUVVrc1kwRkJZeXhaUVVGWk8wRkJRelZDTEd0Q1FVRkpMR0ZCUVdFc1lVRkJZVHRCUVVVNVFpeHJRa0ZCU1N4UFFVRlBMR05CUVdNc1dVRkJXU3hEUVVGRExFOUJRVThzVlVGQlZTeFZRVUZWTEV0QlFVc3NZVUZCWVN4SFFVRkhPMEZCUTNCR0xEWkNRVUZoTzBGQlFVRXNZMEZEWmp0QlFVTkJMRzlDUVVGTkxHZENRVUZuUWl4blFrRkJaMElzWTBGQll5eE5RVUZOTzBGQlF6RkVMRzlDUVVGTkxHdENRVUZyUWl4blFrRkJaMElzVjBGQlZ5eFRRVUZUTEVkQlFVY3NUVUZCVFR0QlFVTnlSU3hyUWtGQlNTeFpRVUZaTEVWQlFVVXNNRUpCUVRCQ0xITkNRVUZ6UWl4bFFVRmxMR1ZCUVdVc1RVRkROVVlzUjBGQlJ6dEJRVU5NTEN0Q1FVRmxMRzlFUVVGdlJDeGhRVUZoTEZWQlFWVXNSMEZCUnp0QlFVRkJMR05CUXk5R08wRkJRVUVzV1VGRFJqdEJRVU5CTEdkQ1FVRkpMR05CUVdNc2FVSkJRV2xDTzBGQlEycERMRzlDUVVGTkxHZENRVUZuUWl4blFrRkJaMElzYlVKQlFXMUNMRTFCUVUwN1FVRkRMMFFzYjBKQlFVMHNhMEpCUVd0Q0xHZENRVUZuUWl4aFFVRmhMR2xDUVVGcFFpeE5RVUZOTzBGQlF6VkZMR3RDUVVGSkxGbEJRVmtzUlVGQlJTd3dRa0ZCTUVJc2MwSkJRWE5DTEdWQlFXVXNaVUZCWlN4TlFVTTFSaXhIUVVGSE8wRkJRMHc3UVVGQlFTeHJRa0ZEU1N4NVJFRkJlVVFzWVVGQllTeGxRVUZsTzBGQlFVRXNaMEpCUVVjN1FVRkJRU3hqUVVNNVJqdEJRVUZCTEZsQlEwWTdRVUZCUVN4VlFVTkdPMEZCUTBFN1FVRkJRU3hSUVVOR0xFdEJRVXM3UVVGRFNDeHRRa0ZCVXp0QlFVTlVMR05CUVVrc1QwRkJUeXhQUVVGUExGVkJRVlU3UVVGRE1VSXNhMEpCUVUwc1owSkJRV2RDTzBGQlEzUkNMR2RDUVVGSkxHVkJRV1VzYVVKQlFXbENPMEZCUTJ4RExHdENRVUZKTEdOQlFXTXNiMEpCUVc5Q0xGVkJRVlVzWTBGQll5eHZRa0ZCYjBJc1VVRkJVVHRCUVVONFJpeHpRa0ZCVFN4SlFVRkpMRTFCUVUwc2IwUkJRVzlFTEdOQlFXTXNaVUZCWlN4RlFVRkZPMEZCUVVFc1kwRkRja2M3UVVGRFFTeHZRa0ZCVFN4blFrRkJaMElzWjBKQlFXZENMRzFDUVVGdFFpeE5RVUZOTzBGQlF5OUVMRzlDUVVGTkxHdENRVUZyUWl4blFrRkJaMElzWTBGQll5eHBRa0ZCYVVJc1RVRkJUVHRCUVVNM1JTeHJRa0ZCU1N4WlFVRlpMRVZCUVVVc01FSkJRVEJDTEhOQ1FVRnpRaXhsUVVGbExHVkJRV1VzVFVGRE5VWXNSMEZCUnp0QlFVTk1PMEZCUVVFc2EwSkJRMGtzZVVSQlFYbEVMR05CUVdNc1pVRkJaVHRCUVVGQkxHZENRVUZITzBGQlFVRXNZMEZETDBZN1FVRkJRU3haUVVOR08wRkJRVUVzVlVGRFJqdEJRVU5CTzBGQlFVRXNVVUZEUml4TFFVRkxPMEZCUVVFc1VVRkRUQ3hMUVVGTE8wRkJRMGc3UVVGQlFTeFJRVU5HTzBGQlEwVXNaMEpCUVUwc1NVRkJTU3hOUVVGTkxIRkRRVUZ4UXl4TlFVRk5MRVZCUVVVN1FVRkJRU3hOUVVOcVJUdEJRVVZCTEZsQlFVMHNiVUpCUVcxQ0xHZENRVUZuUWl4UlFVRlJMRTFCUVUwN1FVRkRka1FzVlVGQlNTeFpRVUZaTEVWQlFVVXNORUpCUVRSQ0xITkNRVUZ6UWl4blFrRkJaMElzVFVGQlRTeEhRVUZITzBGQlF6TkdMSFZDUVVGbExHOURRVUZ2UXl4TlFVRk5MRWRCUVVjN1FVRkJRU3hOUVVNNVJEdEJRVUZCTEVsQlEwWTdRVUZCUVN4RlFVTkdPMEZCUlVjc1RVRkJUU3h2UWtGQmIwSXNRMEZCUXl4WlFVRnJSVHRCUVVOc1J5eFZRVUZOUXl4UlFVRlBMRmxCUVZrN1FVRkRla0lzVVVGQlNTeDFRa0ZCZFVJN1FVRkRNMElzVlVGQlRTeFRRVUZ0UWl4RFFVRkRPMEZCUlRGQ0xGVkJRVTBzYVVKQlFXdEVMRmRCUVZjc1EwRkJRenRCUVVOd1JTeDVRa0ZCY1VJc1kwRkJZenRCUVVWdVF5eFJRVUZKTzBGQlEwWXNXVUZCVFN4NVFrRkJlVUlzZVVKQlFYbENMR1ZCUVdVc01FSkJRVEJDTEV0QlFVczdRVUZEZEVjc1dVRkJUU3huUWtGQlowSXNhVUpCUVdsQ0xHVkJRV1VzYVVKQlFXbENMRmxCUVZrN1FVRkRia1lzV1VGQlRTeHJRa0ZEUml4UFFVRlBMR1ZCUVdVc1ZVRkJWU3hYUVVGWExHZENRVUZuUWl4bFFVRmxMRTlCUVU4c1RVRkJUU3hKUVVGSk8wRkJSUzlHTEZsQlFVMHNiVUpCUVcxQ0xHVkJRV1VzYjBKQlFXOUNPMEZCUXpWRUxGVkJRVWtzUTBGQlF5eFBRVUZQTEZWQlFWVXNaMEpCUVdkQ0xFdEJRVXNzYlVKQlFXMUNMRXRCUVVzc2JVSkJRVzFDTEVkQlFVYzdRVUZEZGtZc1kwRkJUU3hKUVVGSkxFMUJRVTBzY1VOQlFYRkRMR2RDUVVGblFpeEZRVUZGTzBGQlFVRXNUVUZEZWtVN1FVRkZRU3haUVVGTkxHOUNRVUZ2UWl4bFFVRmxMSEZDUVVGeFFqdEJRVU01UkN4VlFVRkpMRU5CUVVNc1QwRkJUeXhWUVVGVkxHbENRVUZwUWl4TFFVRkxMRzlDUVVGdlFpeExRVUZMTEc5Q1FVRnZRaXhIUVVGSE8wRkJRekZHTEdOQlFVMHNTVUZCU1N4TlFVRk5MSEZEUVVGeFF5eHBRa0ZCYVVJc1JVRkJSVHRCUVVGQkxFMUJRekZGTzBGQlJVRXNXVUZCVFN3clFrRkJLMElzVDBGQlR5eGxRVUZsTERKQ1FVRXlRaXhYUVVOc1JpeG5Ra0ZCWjBJc1pVRkJaU3gzUWtGQmQwSXNUVUZCVFN4SlFVTTNSRHRCUVVWS0xEWkNRVUYxUWtFc1RVRkJTenRCUVVGQkxGRkJRM2hDTzBGQlFVRXNVVUZCZDBJc1EwRkJReXhEUVVGRExHVkJRV1U3UVVGQlFTeFJRVUZ0UWl4RFFVRkRMRU5CUVVNc1pVRkJaVHRCUVVGQkxGRkJRV3RDTzBGQlFVRXNVVUZETDBZc1EwRkJReXhEUVVGRExHVkJRV1U3UVVGQlFTeFJRVUZwUWp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGcFFqdEJRVUZCTEZGQlFXdENPMEZCUVVFc1VVRkRlRVU3UVVGQlFTeE5RVUUwUWp0QlFVTm9ReXhWUVVGSkxIbENRVUY1UWl4SFFVRkhPMEZCUXpsQ0xIVkNRVUZsTEN0Q1FVRm5RenRCUVVGQkxFMUJRMnBFTzBGQlJVRXNWVUZCU1N4bFFVRmxMRzlDUVVGdlFqdEJRVU55UXl3NFFrRkJjMElzYzBKQlFYTkNMR1ZCUVdVc2IwSkJRVzlDTEUxQlFVMDdRVUZCUVN4TlFVTjJSanRCUVVWQkxGVkJRVWtzWlVGQlpTeDNRa0ZCZDBJN1FVRkRla01zYlVKQlFWY3NRMEZCUXl4TlFVRk5MRXRCUVVzc1MwRkJTeXhQUVVGUExGRkJRVkVzWlVGQlpTeHpRa0ZCYzBJc1IwRkJSenRCUVVOcVJpeGpRVUZKTEU5QlFVOHNVMEZCVXl4VlFVRlZPMEZCUXpWQ0xHdENRVUZOTEVsQlFVa3NUVUZCVFN4clJFRkJhMFFzU1VGQlNTeEZRVUZGTzBGQlFVRXNWVUZETVVVN1FVRkRRU3hqUVVGSkxFOUJRVThzVlVGQlZTeFpRVUZaTEVOQlFVTXNUMEZCVHl4VlFVRlZMRXRCUVVzc1MwRkJTeXhSUVVGUkxFZEJRVWM3UVVGRGRFVXNhMEpCUVUwc1NVRkJTU3hOUVVGTkxHbEZRVUZwUlN4TFFVRkxMRVZCUVVVN1FVRkJRU3hWUVVNeFJqdEJRVU5CTEdkQ1FVRk5MR0ZCUVdFc1owSkJRV2RDTEUxQlFVMHNUVUZCVFR0QlFVTXZReXhqUVVGSlFTeE5RVUZMTERaQ1FVRTJRaXh6UWtGQmMwSXNXVUZCV1N4TFFVRkxMRTFCUVUwc1IwRkJSenRCUVVOd1Jpd3lRa0ZCWlN4M1EwRkJkME1zU1VGQlNTeE5RVUZOTEV0QlFVc3NSMEZCUnp0QlFVRkJMRlZCUXpORk8wRkJRVUVzVVVGRFJqdEJRVUZCTEUxQlEwWTdRVUZGUVN4VlFVRkpMR1ZCUVdVc1ZVRkJWU3hSUVVGWE8wRkJRM1JETERSQ1FVRnZRaXhsUVVGbExFOUJRVThzU1VGQlNTeHZRa0ZCU1N4UlFVRnBReXhIUVVGSExFTkJRVU1zUzBGQlN5eFZRVUZWTzBGQlEzQkhMR2RDUVVGTkxHZENRVUZuUWl4blFrRkJaMElzUzBGQlN5eE5RVUZOTzBGQlEycEVMR2RDUVVGTkxHdENRVUZyUWl4blFrRkJaMElzVDBGQlR5eE5RVUZOTzBGQlJYSkVMR05CUVVsQkxFMUJRVXNzTUVKQlFUQkNMSE5DUVVGelFpeGxRVUZsTEdWQlFXVXNUVUZCVFN4SFFVRkhPMEZCUXpsR0xESkNRVUZsTEhGRFFVRnhReXhIUVVGSExFMUJRVTBzUzBGQlN5eEhRVUZITzBGQlFVRXNWVUZEZGtVN1FVRkJRU3hSUVVOR0xFTkJRVU03UVVGQlFTeE5RVU5JTzBGQlJVRXNZVUZCVHl4RFFVRkRMSE5DUVVGelFpeE5RVUZOTzBGQlFVRXNTVUZEZEVNc1UwRkJVeXhIUVVGSE8wRkJRMVlzVlVGQlNTeDVRa0ZCZVVJc1IwRkJSenRCUVVNNVFpeFJRVUZCUVN4TlFVRkxMREJDUVVFd1FpeHZRa0ZCYjBJN1FVRkJRU3hOUVVOeVJEdEJRVU5CTEdGQlFVOHNVVUZCVVN4WFFVRlRRU3hOUVVGTExFMUJRVTBzUzBGQlN5eERRVUZETzBGQlEzcERMRmxCUVUwN1FVRkJRU3hKUVVOU08wRkJRVUVzUlVGRFJqczdPMEZET1V0UExFMUJRVTBzTmtKQlFUWkNMRU5CUVVNc1UwRkJNa0k3UVVGRGNFVXNXVUZCVVN4TlFVRk5PMEZCUVVFc1RVRkRXaXhMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJSVlE3UVVGRFJTeGpRVUZOTEVsQlFVa3NUVUZCVFN3d1FrRkJNRUlzU1VGQlNTeEZRVUZGTzBGQlFVRXNTVUZEY0VRN1FVRkJRU3hGUVVOR08wRkJTMDhzVFVGQlRTdzJRa0ZCTmtJc1EwRkJReXhqUVVGeFF6dEJRVU01UlN4WlFVRlJMRmRCUVZjN1FVRkJRU3hOUVVOcVFpeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlJWUTdRVUZEUlN4alFVRk5MRWxCUVVrc1RVRkJUU3d3UWtGQk1FSXNVMEZCVXl4RlFVRkZPMEZCUVVFc1NVRkRla1E3UVVGQlFTeEZRVU5HTzBGQlRVOHNUVUZCVFN4MVFrRkJkVUlzUTBGQlF5eGhRVU53UWl4RFFVRkRMRkZCUVZjc1IwRkJSeXhIUVVGSExFZEJRVWNzUjBGQlJ5eEhRVUZITEVkQlFVY3NSMEZCUnl4UlFVRlhMRWRCUVVjc1IwRkJSeXhIUVVGSExFZEJRVWNzUjBGQlJ5eFJRVUZYTEZGQlFWY3NUVUZCVXl4RlFVRkZMRkZCUVZFN1FVRkxPVWNzVFVGQlRTeHZRMEZCYjBNc1EwRkJReXhUUVVWdlJEdEJRVU5vUnl4WlFVRlJMRTFCUVUwN1FVRkJRU3hOUVVOYUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVPMEZCUTBVc1kwRkJUU3hKUVVGSkxFMUJRVTBzY1VKQlFYRkNMRWxCUVVrc1JVRkJSVHRCUVVGQkxFbEJReTlETzBGQlFVRXNSVUZEUmp0QlFVdEhMRTFCUVUwc2RVSkJRWFZDTEVOQlFVTXNZVUZCYTBVN1FVRkRja2NzV1VGQlVTeFZRVUZWTzBGQlFVRXNUVUZEYUVJc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkR0QlFVTkZMR05CUVUwc1NVRkJTU3hOUVVGTkxEaENRVUU0UWl4UlFVRlJMRVZCUVVVN1FVRkJRU3hKUVVNMVJEdEJRVUZCTEVWQlEwWTdRVUZMVHl4TlFVRk5MREpDUVVFeVFpeERRVUZETEZOQlFYbEVMRk5CUVZNc1lVRkRka2NzVTBGQlV5eFhRVUZYTEZOQlFWTXNWMEZCVnl4VFFVRlRMRlZCUVZVc1UwRkJVeXhoUVVGaExGTkJRVk03UVVGTGRrWXNUVUZCVFN3eVFrRkJNa0lzUTBGQlF5eGhRVUV3UXp0QlFVTnFSaXhaUVVGUkxGVkJRVlU3UVVGQlFTeE5RVU5vUWl4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTzBGQlEwVXNZMEZCVFN4SlFVRkpMRTFCUVUwc09FSkJRVGhDTEZGQlFWRXNSVUZCUlR0QlFVRkJMRWxCUXpWRU8wRkJRVUVzUlVGRFJqczdPMEZEYWtsQkxFMUJRVTBzVlVGQlZTeERRVUZETEZsQlFXOUNMR2xDUVVFclFqdEJRVU5zUlN4VlFVRk5MRmxCUVZrc1dVRkJXU3hGUVVGRkxGTkJRVk1zV1VGQldTeFpRVUZaTzBGQlEycEZMRkZCUVVrc1kwRkJZeXhIUVVGSE8wRkJRMjVDTEhGQ1FVRmxMQ3RDUVVGblF6dEJRVUZCTEVsQlEycEVPMEZCUVVFc1JVRkRSanRCUVUxUExFMUJRVTBzWTBGQll5eFBRVUZOTEZGQlFUUkNPMEZCUlRORUxGbEJRVkVzU1VGQlNTeExRVUZMTEZsQlFXRXNjVUpCUVhGQ0xFbEJRVWtzVVVGQlVTeERRVUZETzBGQlFVRXNSVUZEYkVVN1FVRlJUeXhOUVVGTkxGTkJRVk1zVDBGQlRTeExRVUZWTEZkQlFXdERPMEZCUTNSRkxGRkJRVWtzVDBGQmJVUTdRVUZGY2tRc1ZVRkJTU3hQUVVGUExHTkJRV01zWlVGQlpTeERRVUZETEZWQlFWVXNTMEZCU3p0QlFVTjBSQ3hqUVVGTkxFbEJRVWtzVFVGQlRTeG5SRUZCWjBRN1FVRkJRU3hOUVVOc1JUdEJRVU5CTEZsQlFVMHNWVUZCVlN4TlFVRk5MRlZCUVZVc1NVRkJTU3hsUVVGbE8wRkJRMjVFTEZWQlFVa3NRMEZCUXl4VFFVRlRPMEZCUTFvc1kwRkJUU3hKUVVGSk8wRkJRVUVzVlVGRFRqdEJRVUZCTEZGQlFUQkhPMEZCUVVFc1RVRkRhRWc3UVVGRlFTeFZRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMRTFCUVUwN1FVRkRiRUlzWTBGQlRTeEpRVUZKTzBGQlFVRXNWVUZEVGp0QlFVRkJMRkZCUVhGSE8wRkJRVUVzVFVGRE0wYzdRVUZMUVN4WlFVRk5MRmRCUVZjc1MwRkJkVUk3UVVGRGVFTXNXVUZCVFN4VFFVRlRMRmxCUVZrc1IwRkJSeXhMUVVGTExFOUJRVTg3UVVGQlFTeEpRVU0xUXp0QlFVRkJMRVZCUTBZN1FVRnZRMEVzVFVGQlRTeHBRa0ZCYVVJc2IwSkJRVWtzU1VGQk5rSTdRVUZQZUVRc1RVRkJUU3cyUWtGQk5rSXNRMEZCUXl4clFrRkJORU03UVVGRE9VVXNWVUZCVFVNc1VVRkJUeXhaUVVGWk8wRkJRM3BDTEZWQlFVMHNVVUZCVVVFc1RVRkJTeXhWUVVGVk8wRkJRemRDTEZGQlFVazdRVUZEUml4WlFVRk5MR0ZCUVdGQkxFMUJRVXNzVjBGQlZ5eERRVUZETzBGQlEzQkRMRmxCUVUwc1dVRkJXVUVzVFVGQlN5eDNRa0ZCZDBJc1pVRkJaU3haUVVGWkxHRkJRV0VzUTBGQlF6dEJRVU40Uml4VlFVRkpMR05CUVdNc1IwRkJSenRCUVVOdVFpeDFRa0ZCWlN4MVEwRkJkME03UVVGQlFTeE5RVU42UkR0QlFVTkJMR0ZCUVU4c1EwRkJRMEVzVFVGQlN5eFBRVUZQTEdGQlFXRXNRMEZCUXl4SFFVRkhRU3hOUVVGTExFOUJRVThzWVVGQllTeEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVRkJMRWxCUTNSRkxGVkJRVVU3UVVGRFFTeE5RVUZCUVN4TlFVRkxMR0ZCUVdFc1MwRkJTenRCUVVGQkxFbEJRM3BDTzBGQlFVRXNSVUZEUmp0QlFWRlBMRTFCUVUwc2VVSkJRWGxDTEVOQlFVTXNWVUZCZDBNN1FVRkROMFVzVlVGQlRVRXNVVUZCVHl4WlFVRlpPMEZCUTNwQ0xGVkJRVTBzYTBKQlFXdENRU3hOUVVGTExGRkJRVkVzVFVGQlRTeFZRVUZWTzBGQlEzSkVMRkZCUVVrc2IwSkJRVzlDTEVkQlFVYzdRVUZEZWtJc1dVRkJUU3hKUVVGSkxFMUJRVTBzSzBSQlFTdEVMRTFCUVUwc1ZVRkJWU3hIUVVGSE8wRkJRVUVzU1VGRGNFYzdRVUZEUVN4SlFVRkJRU3hOUVVGTExFOUJRVThzU1VGQlNTeFBRVUZQTEdWQlFXVTdRVUZEZEVNc1YwRkJUeXhEUVVGRExHbENRVUZwUWl4TlFVRk5MRlZCUVZVN1FVRkJRU3hGUVVNelF6dEJRVlZQTEUxQlFVMHNaMEpCUTFRc1EwRkJReXhYUVVOQkxGbEJRVEpGTzBGQlF6RkZMRkZCUVVrc2FVSkJRWGxDTzBGQlF6ZENMRlZCUVUxQkxGRkJRVThzV1VGQldUdEJRVVY2UWl4UlFVRkpMRTFCUVUwc1VVRkJVU3hUUVVGVExFZEJRVWM3UVVGRk5VSXNUMEZCUXl4cFFrRkJhVUlzWlVGQlpTeEpRVUZKTzBGQlFVRXNTVUZEZGtNc1YwRkJWeXhWUVVGVkxGZEJRVmRCTEUxQlFVc3NUMEZCVHl4UlFVRlJPMEZCUld4RUxFOUJRVU1zYVVKQlFXbENMR1ZCUVdVc1NVRkJTU3hEUVVGRExGVkJRVlVzV1VGQldTeFZRVUZWTEZWQlFWVTdRVUZCUVN4SlFVTnNSaXhQUVVGUE8wRkJSVXdzVDBGQlF5eHBRa0ZCYVVJc1pVRkJaU3hKUVVGSkxIVkNRVUYxUWl4VFFVRlRPMEZCUVVFc1NVRkRka1U3UVVGRlFTeFJRVUZKTEdkQ1FVRm5RanRCUVVOd1FpeFJRVUZKTEhWQ1FVRjFRanRCUVVNelFpeFJRVUZKTEd0Q1FVRnJRanRCUVVOMFFpeFJRVUZKTEZOQlFXMUNMRU5CUVVNN1FVRkRlRUlzVlVGQlRTeDNRa0ZCZDBJc1EwRkJRenRCUVVNdlFpeFZRVUZOTEhsQ1FVRjVRaXhEUVVGRE8wRkJSV2hETEZGQlFVazdRVUZEUml4UFFVRkRMSE5DUVVGelFpeE5RVUZOTEVsQlFVa3NhMEpCUVd0Q0xFOUJRVTg3UVVGRk1VUXNjMEpCUVdkQ1FTeE5RVUZMTEd0Q1FVRnJRaXhwUWtGQmFVSXNhVUpCUVdsQ0xHOUNRVUZ2UWp0QlFVTTNSaXhWUVVGSkxHdENRVUZyUWl4SFFVRkhPMEZCUTNaQ0xIVkNRVUZsTEhsQ1FVRXdRanRCUVVGQkxFMUJRek5ETzBGQlJVRXNXVUZCVFN4RFFVRkRMRmxCUVZrc1YwRkJWeXhKUVVGSkxESkNRVUV5UWl4aFFVRmhPMEZCUlRGRkxGbEJRVTBzWVVGQllTeERRVUZETzBGQlEzQkNMRmxCUVUwc1kwRkJZeXhEUVVGRE8wRkJRM0pDTEZsQlFVMHNNa0pCUVhkRkxFTkJRVU03UVVGREwwVXNaVUZCVXl4SlFVRkpMRWRCUVVjc1NVRkJTU3haUVVGWkxFdEJRVXM3UVVGRGJrTXNZMEZCVFN4UFFVRlBRU3hOUVVGTExHbENRVUZwUWl4bFFVRmxMRU5CUVVNN1FVRkRia1FzV1VGQlNTeFRRVUZUTEVkQlFVYzdRVUZEWkN4NVFrRkJaU3d3UWtGQk1rSTdRVUZCUVN4UlFVTTFRenRCUVVOQkxEaENRVUZ6UWl4TFFVRkxMRWxCUVVrN1FVRkRMMElzYlVKQlFWY3NTMEZCUzBFc1RVRkJTeXhoUVVGaExFbEJRVWtzUTBGQlF6dEJRVUZCTEUxQlEzcERPMEZCUTBFc1pVRkJVeXhKUVVGSkxFZEJRVWNzU1VGQlNTeGhRVUZoTEV0QlFVczdRVUZEY0VNc1kwRkJUU3hQUVVGUFFTeE5RVUZMTEd0Q1FVRnJRaXhsUVVGbExFTkJRVU03UVVGRGNFUXNXVUZCU1N4VFFVRlRMRWRCUVVjN1FVRkRaQ3g1UWtGQlpTd3lRa0ZCTkVJN1FVRkJRU3hSUVVNM1F6dEJRVU5CTEN0Q1FVRjFRaXhMUVVGTExFbEJRVWs3UVVGRGFFTXNZMEZCVFN4aFFVRmhRU3hOUVVGTExHRkJRV0VzU1VGQlNUdEJRVU42UXl4dlFrRkJXU3hMUVVGTExGVkJRVlU3UVVGRk0wSXNXVUZCU1N4UFFVRTBRanRCUVVNNVFpeG5Ra0ZCVFN4WFFVRlhMRTlCUVU4c1UwRkJVeXcwUWtGQk5FSXNWMEZEZWtRc1VVRkJVU3d3UWtGRFVpeFRRVUZUTERCQ1FVRXdRaXhWUVVGVkxFdEJRVXM3UVVGRGRFUXNZMEZCU1N4aFFVRmhMRk5CUVZNc1lVRkJZU3huUWtGQlowSXNZVUZCWVN4alFVRmpPMEZCUTJoR0xHdENRVUZOTEVsQlFVa3NUVUZCVFN3MFEwRkJORU1zVVVGQlVTeEhRVUZITzBGQlFVRXNWVUZEZWtVN1FVRkRRU3h0UTBGQmVVSXNTMEZCU3l4UlFVRlJPMEZCUVVFc1VVRkRlRU03UVVGQlFTeE5RVU5HTzBGQlIwRXNWVUZCU1N4bFFVRnZRenRCUVVONFF5eFZRVUZKTEU5QlFYTkdPMEZCUTNoR0xEQkNRVUZyUWtFc1RVRkJTeXhyUWtGQmEwSXNZVUZCWVR0QlFVTjBSQ3haUVVGSkxHOUNRVUZ2UWl4SFFVRkhPMEZCUTNwQ0xIbENRVUZsTERCQ1FVRXlRanRCUVVGQkxGRkJRelZETzBGQlJVRXNkVUpCUVdVN1FVRkJRU3hWUVVOaUxGRkJRVkU3UVVGQlFTeFZRVU5TTzBGQlFVRXNWVUZEUVN4cFEwRkJhVU1zZVVKQlFYbENMRWxCUVVrc1QwRkJTeXg1UWtGQmVVSXNRMEZCUXl4RFFVRkRPMEZCUVVFc1VVRkRhRWM3UVVGQlFTeE5RVU5HTzBGQlJVRXNjVUpCUVdVc1NVRkJTU3hsUVVGbExFTkJRVU1zWlVGQlpTeDFRa0ZCZFVJc2QwSkJRWGRDTEZsQlFWa3NRMEZCUXp0QlFVTTVSeXhoUVVGUExFTkJRVU1zWlVGQlpTeFpRVUZaTEZkQlFWYzdRVUZCUVN4SlFVTm9SQ3hUUVVGVExFZEJRVWM3UVVGRFZpdzBRa0ZCYzBJc1VVRkJVU3hUUVVGUFFTeE5RVUZMTEZOQlFWTXNSMEZCUnl4RFFVRkRPMEZCUTNaRUxEWkNRVUYxUWl4UlFVRlJMRk5CUVU5QkxFMUJRVXNzVTBGQlV5eEhRVUZITEVOQlFVTTdRVUZGZUVRc1ZVRkJTU3h2UWtGQmIwSXNSMEZCUnp0QlFVTjZRaXhSUVVGQlFTeE5RVUZMTEcxQ1FVRnRRaXhsUVVGbE8wRkJRVUVzVFVGRGVrTTdRVUZGUVN4VlFVRkpMR3RDUVVGclFpeEhRVUZITzBGQlEzWkNMRkZCUVVGQkxFMUJRVXNzYlVKQlFXMUNMR0ZCUVdFN1FVRkJRU3hOUVVOMlF6dEJRVU5CTEZsQlFVMDdRVUZCUVN4SlFVTlNMRlZCUVVVN1FVRkRRU3hOUVVGQlFTeE5RVUZMTEUxQlFVMHNaVUZCWlR0QlFVTXhRaXhWUVVGSkxIbENRVUY1UWl4SFFVRkhPMEZCUXpsQ0xGRkJRVUZCTEUxQlFVc3NNRUpCUVRCQ0xHOUNRVUZ2UWp0QlFVRkJMRTFCUTNKRU8wRkJRMEVzWVVGQlR5eFJRVUZSTEZkQlFWTkJMRTFCUVVzc1RVRkJUU3hMUVVGTExFTkJRVU03UVVGQlFTeEpRVU16UXp0QlFVRkJMRVZCUTBZN1FVRkZSeXhOUVVGTkxHbENRVUZwUWl4RFFVRkRMR05CUVRSQ08wRkJRM3BFTEZWQlFVMUJMRkZCUVU4c1dVRkJXVHRCUVVONlFpeFZRVUZOTEZWQlFWVXNaVUZCWlN4SlFVRkpMRk5CUVZNN1FVRkROVU1zVVVGQlNTeERRVUZETEZOQlFWTTdRVUZEV2l4WlFVRk5MRWxCUVVrc1RVRkJUU3dyUTBGQkswTXNVMEZCVXl4RlFVRkZPMEZCUVVFc1NVRkROVVU3UVVGRFFTeFZRVUZOTEVOQlFVTXNaVUZCWlN4MVFrRkJkVUlzZDBKQlFYZENMR05CUVdNc1NVRkJTVHRCUVVWMlJpeFJRVUZKTEdkQ1FVRm5RanRCUVVOc1FpeE5RVUZCUVN4TlFVRkxMRzFDUVVGdFFpeGxRVUZsTEUxQlFVMDdRVUZCUVN4SlFVTXZRenRCUVVWQkxFbEJRVUZCTEUxQlFVc3NkMEpCUVhkQ0xGTkJRVk03UVVGRmRFTXNNRUpCUVhOQ0xGRkJRVkVzVTBGQlQwRXNUVUZCU3l4VFFVRlRMRWRCUVVjc1EwRkJRenRCUVVOMlJDd3lRa0ZCZFVJc1VVRkJVU3hUUVVGUFFTeE5RVUZMTEZOQlFWTXNSMEZCUnl4RFFVRkRPMEZCUTNoRUxFbEJRVUZCTEUxQlFVc3NiVUpCUVcxQ0xHRkJRV0U3UVVGRGNrTXNiVUpCUVdVc1QwRkJUeXhUUVVGVE8wRkJRVUVzUlVGRGFrTTdRVUZGVHl4TlFVRk5MREpDUVVOVUxFTkJRVU1zVVVGQk5rSXNaVUZCZVVJc1VVRkJhMElzVjBGQmJVSXNWVUZEYUVZN1FVRkRUaXhSUVVGSkxFTkJRVU1zVVVGQlVUdEJRVU5ZTEc5Q1FVRmpMRXRCUVVzc1EwRkJRenRCUVVOd1FqdEJRVUZCTEVsQlEwWTdRVUZGUVN4VlFVRk5RU3hSUVVGUExGbEJRVms3UVVGRmVrSXNWVUZCVFN4WFFVRlhMRTlCUVU4c1EwRkJRenRCUVVONlFpeFZRVUZOTEU5QlFVOHNUMEZCVHl4RFFVRkRPMEZCUTNKQ0xGVkJRVTBzVjBGQlZ5eFBRVUZQTEVOQlFVTTdRVUZGZWtJc1VVRkJTVHRCUVVOS0xGRkJRVWs3UVVGRlNpeFJRVUZKTEdGQlFXRXNXVUZCV1N4aFFVRmhMR05CUVdNN1FVRkRkRVFzV1VGQlRTeEpRVUZKTEUxQlFVMHNkME5CUVhkRE8wRkJRVUVzU1VGRE1VUTdRVUZGUVN4UlFVRkpMR0ZCUVdFc1kwRkJZenRCUVVNM1FpeFpRVUZOTEZsQlFWa3NUMEZCVHl4RFFVRkRMRVZCUVVVN1FVRkROVUlzV1VGQlRTeHhRa0ZCY1VJc2NVSkJRWEZDTERKQ1FVRXlRaXhSUVVGUkxFTkJRVU03UVVGRGNFWXNkVUpCUVdsQ0xFdEJRVXNzVDBGQlR5eERRVUZETEVkQlFVY3NUVUZCVFN4SlFVRkpMRWRCUVVjc1EwRkJReXhKUVVGSk8wRkJRMjVFTEdkQ1FVRlZRU3hOUVVGTExHMUNRVUZ0UWl4WFFVRlhMRTlCUVU4c1YwRkJWeXhqUVVGak8wRkJRVUVzU1VGREwwVXNUMEZCVHp0QlFVTk1MRmxCUVUwc1QwRkJUeXhQUVVGUExFTkJRVU03UVVGRmNrSXNWVUZCU1N4TlFVRk5MRkZCUVZFc1NVRkJTU3hIUVVGSE8wRkJSWFpDTEhsQ1FVRnBRaXhKUVVGSkxFdEJRVXM3UVVGRE1VSXNhMEpCUVZWQkxFMUJRVXNzVVVGQlVTeGpRVUZqTzBGQlEzSkRMR1ZCUVU4c1MwRkJTeXhQUVVGUE8wRkJRMjVDTEZsQlFVa3NXVUZCV1N4VlFVRlZPMEZCUXpGQ0xHbENRVUZUTEVsQlFVa3NSMEZCUnl4SlFVRkpMRXRCUVVzc1VVRkJVU3hMUVVGTE8wRkJRM0JETEdOQlFVa3NUMEZCVHl4TFFVRkxMRU5CUVVNc1RVRkJUU3hWUVVGVk8wRkJReTlDTEd0Q1FVRk5MRWxCUVVrc1ZVRkJWU3gzUWtGQmQwSXNRMEZCUXl4clFrRkJhMEk3UVVGQlFTeFZRVU5xUlR0QlFVTkJMRlZCUVVGQkxFMUJRVXNzVVVGQlVTeFhRVUZYTEVsQlFVa3NaMEpCUVdkQ0xFdEJRVXNzUTBGQlF5eEhRVUZITEUxQlFVMDdRVUZCUVN4UlFVTTNSRHRCUVVGQkxFMUJRMFlzVDBGQlR6dEJRVU5NTEhsQ1FVRnBRaXhMUVVGTE8wRkJRM1JDTEd0Q1FVRlZRU3hOUVVGTExGRkJRVkVzWTBGQll6dEJRVU55UXl4bFFVRlBMRXRCUVVzc1QwRkJUenRCUVVOdVFpeFJRVUZCUVN4TlFVRkxMRTlCUVU4c1NVRkJTU3hKUVVGSkxGZEJRVmNzUzBGQlN5eFJRVUZSTEV0QlFVc3NXVUZCV1N4alFVRmpMRWRCUVVjc1QwRkJUenRCUVVGQkxFMUJRM1pHTzBGQlFVRXNTVUZEUmp0QlFVVkJMRlZCUVUwc1VVRkJVVUVzVFVGQlN5eFZRVUZWTzBGQlF6ZENMRlZCUVUwc1lVRkJZVUVzVFVGQlN5eFhRVUZYTEVsQlFVa3NTMEZCU3l4TlFVRk5PMEZCUTJ4RUxGRkJRVWs3UVVGRFJpeFZRVUZKTEZkQlFWY3NZVUZCWVR0QlFVTTFRaXhYUVVGTExGRkJRVkVzVDBGQlMwRXNUVUZCU3l4UFFVRlBMRlZCUVZVc1NVRkJTU3hEUVVGRE8wRkJRemRETEZsQlFVMURMRlZCUVZORUxFMUJRVXM3UVVGQlFTeFJRVU5vUWl3eVFrRkJNa0lzVVVGQlVUdEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRlRPMEZCUVVFc1VVRkJaMEk3UVVGQlFTeFJRVUZaTEV0QlFVczdRVUZCUVN4UlFVTm9SaXg1UWtGQmVVSXNVVUZCVVR0QlFVRkJMRTFCUVVNN1FVRkRkRU1zVlVGQlNVTXNXVUZCVnl4SFFVRkhPMEZCUTJoQ0xIVkNRVUZsTEdsRVFVRnBSQ3hUUVVGVExGZEJRVmNzUzBGQlN5eEhRVUZITzBGQlFVRXNUVUZET1VZN1FVRkRRU3h2UWtGQll5eExRVUZMUVN4UFFVRk5PMEZCUVVFc1NVRkRNMElzVlVGQlJUdEJRVU5CTEUxQlFVRkVMRTFCUVVzc1lVRkJZU3hMUVVGTE8wRkJRVUVzU1VGRGVrSTdRVUZCUVN4RlFVTkdPMEZCUzBRc1RVRkJUU3hOUVVGTkxFOUJRMllzVjBGQmJVSXNZMEZCZDBJc1kwRkJaME1zWlVGRE0wVXNaVUZCTWtNc1dVRkJiMFU3UVVGRGFrZ3NWVUZCVFVFc1VVRkJUeXhaUVVGWk8wRkJRM3BDTEZWQlFVMHNWVUZCVlN4bFFVRmxMRWxCUVVrc1UwRkJVenRCUVVNMVF5eFJRVUZKTEVOQlFVTXNVMEZCVXp0QlFVTmFMRmxCUVUwc1NVRkJTU3hOUVVGTkxEWkRRVUUyUXl4VFFVRlRMRVZCUVVVN1FVRkJRU3hKUVVNeFJUdEJRVU5CTEZWQlFVMHNRMEZCUXl4bFFVRmxMSFZDUVVGMVFpeDNRa0ZCZDBJc1kwRkJZeXhKUVVGSk8wRkJSWFpHTEZWQlFVMHNZVUZCWVN4aFFVRmhPMEZCUTJoRExGVkJRVTBzWTBGQll5eGpRVUZqTzBGQlJXeERMRkZCUVVrc2JVSkJRVzFDTzBGQlEzWkNMRkZCUVVrc2JVSkJRVFpDTEVOQlFVTTdRVUZGYkVNc1ZVRkJUU3h4UWtGQkswSXNRMEZCUXp0QlFVTjBReXhWUVVGTkxITkNRVUZuUXl4RFFVRkRPMEZCUTNaRExGVkJRVTBzYjBKQlFUaENMRU5CUVVNN1FVRkZja01zVlVGQlRTeHBRa0ZCYVVKQkxFMUJRVXNzVlVGQlZUdEJRVU4wUXl4VlFVRk5MRzlDUVVGdlFrRXNUVUZCU3l4WFFVRlhMR0ZCUVdFc1EwRkJRenRCUVVONFJDeFZRVUZOTEcxQ1FVRnRRa0VzVFVGQlN5eFhRVUZYTEdGQlFXRXNRMEZCUXp0QlFVTjJSQ3hWUVVGTkxIRkNRVUZ4UWtFc1RVRkJTeXhYUVVGWExHTkJRV01zUTBGQlF6dEJRVU14UkN4VlFVRk5MRzlDUVVGdlFrRXNUVUZCU3l4WFFVRlhMR05CUVdNc1EwRkJRenRCUVVWNlJDeFJRVUZKTzBGQlEwWXNUMEZCUXl4clFrRkJhMElzWjBKQlFXZENMRWxCUVVrc1kwRkJZeXhQUVVGUE8wRkJSelZFTEdWQlFWTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1dVRkJXU3hMUVVGTE8wRkJRMjVETEdsRFFVRjVRaXhoUVVGaExFTkJRVU1zUjBGQlJ5eHZRa0ZCYjBJc2JVSkJRVzFDTEZkQlFWY3NZVUZCWVN4RFFVRkRMRU5CUVVNN1FVRkJRU3hOUVVNM1J6dEJRVWRCTEdWQlFWTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1lVRkJZU3hMUVVGTE8wRkJRM0JETzBGQlFVRXNWVUZEU1N4alFVRmpMRU5CUVVNN1FVRkJRU3hWUVVGSE8wRkJRVUVzVlVGQmNVSTdRVUZCUVN4VlFVRnRRanRCUVVGQkxGVkJRVmNzWVVGQllTeGpRVUZqTEVOQlFVTTdRVUZCUVN4UlFVRkRPMEZCUVVFc1RVRkRlRWM3UVVGRlFTeFZRVUZKTEcxQ1FVRnRRaXh2UWtGQmIwSTdRVUZETTBNc1ZVRkJTU3hyUWtGQmEwSXNiVUpCUVcxQ08wRkJRM3BETEZWQlFVa3NiMEpCUVc5Q0xIRkNRVUZ4UWp0QlFVTTNReXhWUVVGSkxHMUNRVUZ0UWl4dlFrRkJiMEk3UVVGRE0wTXNaVUZCVXl4SlFVRkpMRWRCUVVjc1NVRkJTU3haUVVGWkxFdEJRVXM3UVVGRGJrTXNVVUZCUVVFc1RVRkJTeXhSUVVGUkxHdENRVUZyUWl4SlFVRkpMRzFDUVVGdFFpeERRVUZETzBGQlEzWkVMRkZCUVVGQkxFMUJRVXNzVVVGQlVTeHBRa0ZCYVVJc1NVRkJTU3h6UWtGQmMwSXNZVUZCWVN4RFFVRkRMRU5CUVVNN1FVRkJRU3hOUVVONlJUdEJRVU5CTEdWQlFWTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1lVRkJZU3hMUVVGTE8wRkJRM0JETEZGQlFVRkJMRTFCUVVzc1VVRkJVU3h0UWtGQmJVSXNTVUZCU1N4dlFrRkJiMElzUTBGQlF6dEJRVU42UkN4UlFVRkJRU3hOUVVGTExGRkJRVkVzYTBKQlFXdENMRWxCUVVrc2RVSkJRWFZDTEdOQlFXTXNRMEZCUXl4RFFVRkRPMEZCUVVFc1RVRkROVVU3UVVGRlFTeFZRVUZKTEU5QlFUaERPMEZCUTJoRUxHTkJRVTBzUlVGQlF5eFJRVUZSTERCQ1FVRXdRaXhuUTBGQkswSXNTVUZCU1R0QlFVVTFSU3haUVVGSkxITkNRVUZ6UWl4WFFVRlhMRmxCUVZrN1FVRkRMME1zWjBKQlFVMHNTVUZCU1N4TlFVRk5MREpDUVVOYUxGVkJRVlVzTkVSQlFUUkVMSE5DUVVGelFpeE5RVUZOTEVsQlFVazdRVUZCUVN4UlFVTTFSenRCUVVkQkxHbENRVUZUTEVsQlFVa3NSMEZCUnl4SlFVRkpMRmxCUVZrc1MwRkJTenRCUVVOdVF5eG5Ra0ZCVFN4UlFVRlJMR0ZCUVdFc1EwRkJRenRCUVVNMVFpeG5Ra0ZCVFVVc1lVRkJXU3hOUVVGTlJpeE5RVUZMTEdOQlFXTXNVVUZCVVN4elFrRkJjMElzUzBGQlN5eEhRVUZITEcxQ1FVRnRRaXhEUVVGRExFTkJRVU03UVVGRGRFY3NZMEZCU1VVc1pVRkJZeXhIUVVGSE8wRkJRMjVDTERKQ1FVRmxMRzlDUVVGdlFpeERRVUZETEdsQ1FVRnBRaXhUUVVGVExFZEJRVWM3UVVGQlFTeFZRVU51UlR0QlFVRkJMRkZCUTBZN1FVRkhRU3hwUWtGQlV5eEpRVUZKTEVkQlFVY3NTVUZCU1N4aFFVRmhMRXRCUVVzN1FVRkRjRU1zWjBKQlFVMHNVVUZCVVN4alFVRmpMRU5CUVVNN1FVRkROMElzWjBKQlFVMHNWMEZCVnl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJSWEpETEdOQlFVa3NWVUZCVlR0QlFVVmFMR3RDUVVGTlFTeGhRVUZaUml4TlFVRkxMR1ZCUVdVc1VVRkJVU3gxUWtGQmRVSXNTMEZCU3l4SFFVRkhMRzlDUVVGdlFpeERRVUZETEVkQlFVY3NRMEZCUXp0QlFVTjBSeXhuUWtGQlNVVXNaVUZCWXl4SFFVRkhPMEZCUTI1Q0xEWkNRVUZsTEcxRFFVRnRReXhEUVVGRExHbENRVUZwUWl4VFFVRlRMRWRCUVVjN1FVRkJRU3haUVVOc1JqdEJRVUZCTEZWQlEwWXNUMEZCVHp0QlFVVk1MR3RDUVVGTlFTeGhRVU5HUml4TlFVRkxMR1ZCUVdVc1VVRkJVU3gxUWtGQmRVSXNTMEZCU3l4SFFVRkhMRWRCUVVjc1owTkJRV2RETEV0QlFVc3NRMEZCUXp0QlFVTjRSeXhuUWtGQlNVVXNaVUZCWXl4SFFVRkhPMEZCUTI1Q0xEWkNRVUZsTEhGQ1FVRnhRaXhEUVVGRExGRkJRVkVzZVVKQlFYbENMRU5CUVVNc1EwRkJReXhuUWtGQlowSXNVMEZCVXl4SFFVRkhPMEZCUVVFc1dVRkRkRWM3UVVGQlFTeFZRVU5HTzBGQlFVRXNVVUZEUmp0QlFVRkJMRTFCUTBZN1FVRkZRU3hWUVVGSk8wRkJSVW9zVlVGQlNTeFBRVUU0UXp0QlFVTm9SQ3h2UWtGQldTeE5RVUZOUml4TlFVRkxPMEZCUVVFc1ZVRkRia0k3UVVGQlFTeFZRVUZsTEdWQlFXVTdRVUZCUVN4VlFVRlJPMEZCUVVFc1ZVRkJZVHRCUVVGQkxGVkJRVzlDTzBGQlFVRXNVVUZCWjBJN1FVRkJRU3hOUVVNM1JpeFBRVUZQTzBGQlEwd3NiMEpCUVZrc1RVRkJUVUVzVFVGQlN6dEJRVUZCTEZWQlEyNUNPMEZCUVVFc1ZVRkJaVHRCUVVGQkxGVkJRV3RDTzBGQlFVRXNWVUZCYlVJN1FVRkJRU3hWUVVGWk8wRkJRVUVzVlVGQmJVSTdRVUZCUVN4VlFVTnVSanRCUVVGQkxGVkJRVzlDTzBGQlFVRXNVVUZCWjBJN1FVRkJRU3hOUVVNeFF6dEJRVVZCTEZWQlFVa3NZMEZCWXl4SFFVRkhPMEZCUTI1Q0xIVkNRVUZsTERCQ1FVRXdRanRCUVVGQkxFMUJRek5ETzBGQlJVRXNXVUZCVFN4VFFVRXlRaXhEUVVGRE8wRkJSV3hETEdWQlFWTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1lVRkJZU3hMUVVGTE8wRkJRM0JETEdOQlFVMHNVMEZCVTBFc1RVRkJTeXhSUVVGUkxIRkNRVUZ4UWl4SlFVRkpMRU5CUVVNN1FVRkRkRVFzV1VGQlNTeFhRVUZYTEc5Q1FVRnZRaXhEUVVGRExFZEJRVWM3UVVGRmNrTXNhVUpCUVU4c1MwRkJTeXhqUVVGakxFTkJRVU1zUTBGQlJUdEJRVU0zUWp0QlFVRkJMRkZCUTBZN1FVRkZRU3hqUVVGTkxESkNRVUV5UWtFc1RVRkJTeXhWUVVGVk8wRkJSV2hFTEdOQlFVMHNiVUpCUVcxQ1FTeE5RVUZMTEZkQlFWY3NTVUZCU1N4RFFVRkRPMEZCUlRsRExGbEJRVWtzYlVKQlFXMUNPMEZCUTNaQ0xGbEJRVWtzVFVGQk5rSXNZVUZCWVR0QlFVTTVReXhaUVVGSk8wRkJRMFlzWjBKQlFVMUZMR0ZCUVZsR0xFMUJRVXM3UVVGQlFTeFpRVU51UWp0QlFVRkJMRmxCUVZFN1FVRkJRU3haUVVGclFpeHRRa0ZCYlVJN1FVRkJRU3haUVVGSExHMUNRVUZ0UWp0QlFVRkJMRmxCUVVjc2JVSkJRVzFDTzBGQlFVRXNWVUZCUlR0QlFVTXZSaXhqUVVGSlJTeGxRVUZqTEVkQlFVYzdRVUZEYmtJc01rSkJRV1VzTkVOQlFUUkRMRU5CUVVNc1IwRkJSenRCUVVGQkxGVkJRMnBGTzBGQlEwRXNZMEZCU1N4clFrRkJhMElzYlVKQlFXMUNPMEZCUTNwRExHZENRVUZOTEZkQlFWZEdMRTFCUVVzc1VVRkJVU3hwUWtGQmFVSTdRVUZETDBNc2RVSkJRV0ZCTEUxQlFVc3NVVUZCVVN4cFFrRkJhVUk3UVVGRE0wTXNaMEpCUVUwc1lVRkJZVUVzVFVGQlN5eFJRVUZSTEdsQ1FVRnBRanRCUVVOcVJDeG5Ra0ZCVFN4aFFVRmhRU3hOUVVGTExGRkJRVkVzYVVKQlFXbENPMEZCUTJwRUxHZENRVUZOTEU5QlFVOHNRMEZCUXp0QlFVTmtMRzFDUVVGVFJ5eExRVUZKTEVkQlFVZEJMRXRCUVVrc1dVRkJXVUVzVFVGQlN6dEJRVU51UXl4cFFrRkJTeXhMUVVGTFNDeE5RVUZMTEZGQlFWRXNZVUZCWVN4SlFVRkpSeXhGUVVGRExFTkJRVU03UVVGQlFTeFZRVU0xUXp0QlFVTkJMRlZCUVVGSUxFMUJRVXNzVTBGQlV5eFZRVUZWTzBGQlJYaENMR2RDUVVGTkxFOUJRVThzUzBGQlN5eFBRVUZQTEVOQlFVTXNSMEZCUnl4TlFVRk5MRWxCUVVrc1IwRkJSeXhEUVVGRE8wRkJRek5ETEdsQ1FVRlBMREpDUVVFeVFpeFJRVUZSTzBGQlJURkRMR2RDUVVGTkxHOUNRVUZ2UWl4blFrRkJaMElzZVVKQlFYbENMR05CUVdNc1EwRkJReXhEUVVGRE8wRkJSVzVHTEdOQlFVa3NVMEZCVXl4VlFVRlZPMEZCUTNKQ0xHZENRVUZKTEhOQ1FVRnpRaXhqUVVGak8wRkJRM1JETEc5Q1FVRk5MRWxCUVVrc1RVRkJUU3gzUTBGQmQwTTdRVUZCUVN4WlFVTXhSRHRCUVVOQkxHdENRVUZOTEdGQlFYVkNMRU5CUVVNN1FVRkRPVUlzWjBKQlFVa3NXVUZCV1N4aFFVRmhPMEZCUXpkQ0xIRkNRVUZUUnl4TFFVRkpMRWRCUVVkQkxFdEJRVWtzVFVGQlRVRXNUVUZCU3p0QlFVTTNRaXh2UWtGQlRTeFRRVUZUU0N4TlFVRkxMRkZCUVZFc1YwRkJWenRCUVVOMlF5eHZRa0ZCVFN4cFFrRkJhVUpITEU5QlFVMHNUMEZCVHl4SlFVRkpMRk5CUVZsSUxFMUJRVXNzVVVGQlVTeFRRVUZUTEVsQlFVazdRVUZET1VVc2VVSkJRVmNzUzBGQlMwRXNUVUZCU3l4aFFVRmhMRkZCUVZFc1kwRkJZeXhEUVVGRE8wRkJRVUVzV1VGRE0wUTdRVUZEUVN4dFFrRkJUeXhMUVVGTExFTkJRVU1zVFVGQlRTeE5RVUZOTEZsQlFWa3NTMEZCU3l4RFFVRkRPMEZCUVVFc1ZVRkROME1zVDBGQlR6dEJRVWRNTEdkQ1FVRkpMSE5DUVVGelFpeG5Ra0ZCWjBJc1QwRkJUeXhIUVVGSE8wRkJRMnhFTEc5Q1FVRk5MRmxCUVZsQkxFMUJRVXNzWTBGQll5eFZRVUZWTzBGQlF5OURMRzlDUVVGTkxHTkJRV01zY1VKQlFYRkNMRkZCUVZFN1FVRkRha1FzYTBKQlFVa3NaMEpCUVdkQ0xGVkJRV0VzUTBGQlF5eDVRa0ZCZVVJc1NVRkJTU3hIUVVGSE8wRkJRMmhGTEhOQ1FVRk5MRWxCUVVrc1RVRkJUU3d3UWtGQk1FSXNTVUZCU1N4RlFVRkZPMEZCUVVFc1kwRkRiRVE3UVVGSFFTeHBRMEZCYlVJN1FVRkZia0lzY1VKQlFVOHNTMEZCU3p0QlFVRkJMR2RDUVVOV08wRkJRVUVzWjBKQlFVMDdRVUZCUVN4blFrRkJUVHRCUVVGQkxHdENRVU5XTzBGQlFVRXNhMEpCUTBFc1ZVRkJWVUVzVFVGQlN5eHhRa0ZCY1VJc1YwRkJWeXhQUVVGUExHRkJRV0VzU1VGQlNUdEJRVUZCTEd0Q1FVTjJSU3hUUVVGVExFMUJRVTA3UVVGRFlpeHZRa0ZCUVVFc1RVRkJTeXhyUWtGQmEwSXNUVUZCVFR0QlFVRkJMR3RDUVVNdlFqdEJRVUZCTEdkQ1FVTkdPMEZCUVVFc1owSkJRMEU3UVVGQlFTeGpRVU5HTEVOQlFVTTdRVUZCUVN4WlFVTklMRTlCUVU4N1FVRkRUQ3h2UWtGQlRTeDNRa0ZCZDBJc2EwTkJRV3RETEVsQlFVazdRVUZEY0VVc2IwSkJRVTBzVDBGQlR5eEpRVUZKTEhOQ1FVRnpRaXhKUVVGSk8wRkJRek5ETEd0Q1FVRkpMRmRCUVZjc1MwRkJTeXhSUVVGUkxFdEJRVXNzV1VGQldTeExRVUZMTEZWQlFWVXNSVUZEZGtRc1NVRkJTVUVzVFVGQlN5eFBRVUZQTEZOQlFWTXNXVUZCV1N4aFFVRmhMRXRCUVVzc1ZVRkJWU3hEUVVGRE8wRkJRM1pGTEhGQ1FVRlBMRXRCUVVzc1EwRkJReXhOUVVGTkxFMUJRVTBzVFVGQlRTeExRVUZMTEVOQlFVTTdRVUZCUVN4WlFVTjJRenRCUVVGQkxGVkJRMFk3UVVGQlFTeFJRVU5HTEZWQlFVVTdRVUZEUVN4VlFVRkJRU3hOUVVGTExHRkJRV0VzZDBKQlFYZENPMEZCUXpGRExHTkJRVWtzVTBGQlV5eFpRVUZaTEZsQlFWazdRVUZEYmtNc1dVRkJRVUVzVFVGQlN5eE5RVUZOTEZWQlFWVTdRVUZCUVN4VlFVTjJRanRCUVVOQkxHTkJRVWtzUTBGQlF5eHJRa0ZCYTBJN1FVRkRja0lzV1VGQlFVRXNUVUZCU3l4clFrRkJhMElzVFVGQlRUdEJRVUZCTEZWQlF5OUNPMEZCUVVFc1VVRkRSanRCUVVGQkxFMUJRMFk3UVVGRlFTeFZRVUZKTEdkQ1FVRm5RanRCUVVOc1FpeFJRVUZCUVN4TlFVRkxMSE5DUVVGelFpeGxRVUZsTEUxQlFVMDdRVUZCUVN4TlFVTnNSRHRCUVVWQkxHRkJRVTg3UVVGQlFTeEpRVU5VTEZWQlFVVTdRVUZEUVN4TlFVRkJRU3hOUVVGTExHRkJRV0VzWTBGQll6dEJRVVZvUXl4NVFrRkJiVUlzVVVGQlVTeFBRVUZMUVN4TlFVRkxMR3RDUVVGclFpeERRVUZETEVOQlFVTTdRVUZEZWtRc01FSkJRVzlDTEZGQlFWRXNUMEZCUzBFc1RVRkJTeXhyUWtGQmEwSXNRMEZCUXl4RFFVRkRPMEZCUXpGRUxIZENRVUZyUWl4UlFVRlJMRTlCUVV0QkxFMUJRVXNzVFVGQlRTeERRVUZETEVOQlFVTTdRVUZGTlVNc1ZVRkJTU3h4UWtGQmNVSXNSMEZCUnp0QlFVTXhRaXhSUVVGQlFTeE5RVUZMTEhOQ1FVRnpRaXhuUWtGQlowSTdRVUZCUVN4TlFVTTNRenRCUVVOQkxIVkNRVUZwUWl4UlFVRlJMRTlCUVV0QkxFMUJRVXNzVFVGQlRTeERRVUZETEVOQlFVTTdRVUZCUVN4SlFVTTNRenRCUVVGQkxFVkJRMFk3UVVGTFR5eE5RVUZOTEdWQlFXVXNRMEZCUXl4alFVRTBRanRCUVVOMlJDeFZRVUZOUVN4UlFVRlBMRmxCUVZrN1FVRkRla0lzVlVGQlRTeFZRVUZWTEdWQlFXVXNTVUZCU1N4VFFVRlRPMEZCUXpWRExGRkJRVWtzUTBGQlF5eFRRVUZUTzBGQlExb3NXVUZCVFN4SlFVRkpMRTFCUVUwc2IwSkJRVzlDTzBGQlFVRXNTVUZEZEVNN1FVRkRRU3hWUVVGTkxHZENRVUZuUWl4UlFVRlJMRU5CUVVNN1FVRkhMMElzVlVGQlRTeHJRa0ZCYTBKQkxFMUJRVXNzYVVKQlFXbENMR0ZCUVdFN1FVRkRNMFFzVVVGQlNTeHZRa0ZCYjBJc1IwRkJSenRCUVVONlFpeHhRa0ZCWlN4cFEwRkJhME03UVVGQlFTeEpRVU51UkR0QlFVTkJMRWxCUVVGQkxFMUJRVXNzVTBGQlV5eGxRVUZsTzBGQlFVRXNSVUZETDBJN1FVRkZUeXhOUVVGTkxEWkNRVUUyUWl4RFFVRkRMRmxCUVhORk8wRkJReTlITEZWQlFVMHNWVUZCTmtJc1EwRkJRenRCUVVOd1F5eGxRVUZYTEZWQlFWVXNVMEZCVXp0QlFVTTFRaXhaUVVGTkxFOUJRVThzVDBGQlR5eERRVUZETzBGQlEzSkNMRlZCUVVrc1EwRkJReXhOUVVGTkxGRkJRVkVzU1VGQlNTeExRVUZMTEZsQlFWa3NUVUZCVFR0QlFVTTFReXhuUWtGQlVTeExRVUZMTEV0QlFVc3NUVUZCVFR0QlFVRkJMRTFCUXpGQ08wRkJRVUVzU1VGRFJqdEJRVU5CTEZkQlFVODdRVUZCUVN4RlFVTlVPenM3UVVNeGEwSkJMRTlCUVVzc1dVRkJXU3hEUVVGRExFOUJRVEpETzBGQlF6TkVMRlZCUVUwc1JVRkJReXhOUVVGTkxFbEJRVXNzVVVGQlR5eEpRVUZKTEVkQlFVYzdRVUZEYUVNc1VVRkJTVHRCUVVOR0xHTkJRVkVzVFVGQlRUdEJRVUZCTEZGQlExb3NTMEZCU3p0QlFVTklMR2REUVVGelFpeFJRVUZUTEVsQlFVa3NSVUZET1VJN1FVRkJRU3haUVVOSExFMUJRVTA3UVVGRFNpd3dRa0ZCV1N4UFFVRlJMRVZCUVVVN1FVRkJRU3huUWtGRGJFSXNUVUZCVFR0QlFVTktMRGhDUVVGWkxFVkJRVU1zUzBGQlNTeERRVUZETzBGQlFVRXNaMEpCUTNCQ08wRkJRVUVzWjBKQlEwRXNVMEZCVHp0QlFVTk1MRGhDUVVGWkxFVkJRVU1zVFVGQlRTeEpRVUZITEVOQlFVTTdRVUZCUVN4blFrRkRla0k3UVVGQlFTeGpRVUZETzBGQlFVRXNXVUZEVUR0QlFVRkJMRmxCUTBFc1UwRkJUenRCUVVOTUxEQkNRVUZaTEVWQlFVTXNUVUZCVFN4SlFVRkhMRU5CUVVNN1FVRkJRU3haUVVONlFqdEJRVUZCTEZWQlFVTTdRVUZEVkR0QlFVRkJMRkZCUTBZc1MwRkJTeXhYUVVGWE8wRkJRMlFzWjBKQlFVMHNSVUZCUXl4UlFVRlJMRWxCUVVjc1NVRkJTVHRCUVVOMFFpeHBRa0ZCVHl4TFFVRkxMRTFCUVUwc1JVRkRZanRCUVVGQkxGbEJRMGNzVFVGQlRUdEJRVU5LTERCQ1FVRlpMRVZCUVVNc1MwRkJTU3hEUVVGRE8wRkJRVUVzV1VGRGNFSTdRVUZCUVN4WlFVTkJMRk5CUVU4N1FVRkRUQ3d3UWtGQldTeEZRVUZETEUxQlFVMHNTVUZCUnl4RFFVRkRPMEZCUVVFc1dVRkRla0k3UVVGQlFTeFZRVUZETzBGQlExUTdRVUZCUVN4UlFVTkdPMEZCUVVFc1VVRkRRU3hMUVVGTExHRkJRV0U3UVVGRGFFSXNaMEpCUVUwc1JVRkJReXhQUVVGTkxFbEJRVWs3UVVGRGFrSXNaMEpCUVUwc1lVRkJZU3gxUWtGQmRVSXNUVUZCVFR0QlFVTm9SQ3h6UWtGQldTeEZRVUZETEUxQlFVMHNTMEZCU3l4WFFVRlZMRU5CUVcxQ08wRkJRM0pFTzBGQlFVRXNVVUZEUmp0QlFVRkJMRkZCUTBFc1MwRkJTeXhWUVVGVk8wRkJRMklzWjBKQlFVMHNSVUZCUXl4UFFVRlBMRkZCUVU4c1NVRkJTVHRCUVVONlFpeG5Ra0ZCVFN4clFrRkJhMElzWTBGQll5eFBRVUZQTEU5QlFVODdRVUZEY0VRc2MwSkJRVmtzUlVGQlF5eE5RVUZOTEV0QlFVc3NaMEpCUVdVc1EwRkJiVUk3UVVGRE1VUTdRVUZCUVN4UlFVTkdPMEZCUVVFc1VVRkRRU3hMUVVGTE8wRkJRMGdzZVVKQlFXVXNUMEZCVVR0QlFVTjJRaXh6UWtGQldTeEZRVUZETEV0QlFVa3NRMEZCUXp0QlFVTnNRanRCUVVGQkxGRkJRMFlzUzBGQlN5eFBRVUZQTzBGQlExWXNaMEpCUVUwc1JVRkJReXhYUVVGWExHTkJRV01zVVVGQlVTeGxRVUZsTEZGQlFVOHNTVUZCU1R0QlFVTnNSU3hqUVVGSkxGZEJRVmNzWTBGQll5eFJRVUZSTEdWQlFXVXNTVUZCU1N4TlFVRk5MR05CUVdNc1RVRkJUU3hGUVVGRkxFdEJRVXNzU1VGQlNTeEhRVUZITEU5QlFVOHNSVUZEYkVjN1FVRkJRU3haUVVOSExHRkJRVmM3UVVGRFZDeHJRa0ZCU1N4UlFVRlJMRXRCUVVzc1QwRkJTeXhGUVVGRkxFTkJRVU1zVFVGQlRTeExRVUZMTEVkQlFVYzdRVUZEY2tNc05FSkJRVmtzUlVGQlF5eE5RVUZOTEV0QlFVc3NhMFJCUVdsRUxFTkJRVU03UVVGQlFTeGpRVU0xUlN4UFFVRlBPMEZCUTB3N1FVRkJRU3hyUWtGRFNTeEZRVUZETEUxQlFVMHNTMEZCU3l4UlFVRlBPMEZCUVVFc2EwSkJRMjVDTERKQ1FVRXlRaXhQUVVGMVF6dEJRVUZCTEdkQ1FVRkRPMEZCUVVFc1kwRkRla1U3UVVGQlFTeFpRVU5HTzBGQlFVRXNXVUZEUVN4VFFVRlBPMEZCUTB3c01FSkJRVmtzUlVGQlF5eE5RVUZOTEVsQlFVY3NRMEZCUXp0QlFVRkJMRmxCUTNwQ08wRkJRVUVzVlVGQlF6dEJRVU5VTzBGQlFVRXNVVUZEUmp0QlFVRkJMRkZCUTBFc1MwRkJTenRCUVVOSUxIVkNRVUZoTEU5QlFWRTdRVUZEY2tJc2MwSkJRVmtzUlVGQlF5eExRVUZKTEVOQlFVTTdRVUZEYkVJN1FVRkJRU3hSUVVOR08wRkJRVUVzVFVGRFJqdEJRVUZCTEVsQlEwWXNVMEZCVXl4TFFVRkxPMEZCUTFvc2EwSkJRVmtzUlVGQlF5eE5RVUZOTEVsQlFVY3NRMEZCYlVJN1FVRkJRU3hKUVVNelF6dEJRVUZCTEVWQlEwWTdJaXdLSUNBaWJtRnRaWE1pT2lCYkltcHZhVzRpTENBaWQyRnpiU0lzSUNKM1lYTnRJaXdnSW5kaGMyMGlMQ0FpZDJGemJTSXNJQ0owWlc1emIzSWlMQ0FpWlhKeWIzSkRiMlJsSWl3Z0lta2lYUXA5Q2c9PVxuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge2VudiwgSW5mZXJlbmNlU2Vzc2lvbn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtPcnRXYXNtTWVzc2FnZSwgU2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXIsIFNlcmlhbGl6YWJsZVNlc3Npb25NZXRhZGF0YSwgU2VyaWFsaXphYmxlVGVuc29yTWV0YWRhdGEsIFRlbnNvck1ldGFkYXRhfSBmcm9tICcuL3Byb3h5LW1lc3NhZ2VzJztcbmltcG9ydCAqIGFzIGNvcmUgZnJvbSAnLi93YXNtLWNvcmUtaW1wbCc7XG5pbXBvcnQge2luaXRpYWxpemVXZWJBc3NlbWJseX0gZnJvbSAnLi93YXNtLWZhY3RvcnknO1xuXG5jb25zdCBpc1Byb3h5ID0gKCk6IGJvb2xlYW4gPT4gISFlbnYud2FzbS5wcm94eSAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xubGV0IHByb3h5V29ya2VyOiBXb3JrZXJ8dW5kZWZpbmVkO1xubGV0IGluaXRpYWxpemluZyA9IGZhbHNlO1xubGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG5sZXQgYWJvcnRlZCA9IGZhbHNlO1xuXG50eXBlIFByb21pc2VDYWxsYmFja3M8VCA9IHZvaWQ+ID0gW3Jlc29sdmU6IChyZXN1bHQ6IFQpID0+IHZvaWQsIHJlamVjdDogKHJlYXNvbjogdW5rbm93bikgPT4gdm9pZF07XG5sZXQgaW5pdFdhc21DYWxsYmFja3M6IFByb21pc2VDYWxsYmFja3M7XG5jb25zdCBxdWV1ZWRDYWxsYmFja3M6IE1hcDxPcnRXYXNtTWVzc2FnZVsndHlwZSddLCBBcnJheTxQcm9taXNlQ2FsbGJhY2tzPHVua25vd24+Pj4gPSBuZXcgTWFwKCk7XG5cbmNvbnN0IGVucXVldWVDYWxsYmFja3MgPSAodHlwZTogT3J0V2FzbU1lc3NhZ2VbJ3R5cGUnXSwgY2FsbGJhY2tzOiBQcm9taXNlQ2FsbGJhY2tzPHVua25vd24+KTogdm9pZCA9PiB7XG4gIGNvbnN0IHF1ZXVlID0gcXVldWVkQ2FsbGJhY2tzLmdldCh0eXBlKTtcbiAgaWYgKHF1ZXVlKSB7XG4gICAgcXVldWUucHVzaChjYWxsYmFja3MpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlZENhbGxiYWNrcy5zZXQodHlwZSwgW2NhbGxiYWNrc10pO1xuICB9XG59O1xuXG5jb25zdCBlbnN1cmVXb3JrZXIgPSAoKTogdm9pZCA9PiB7XG4gIGlmIChpbml0aWFsaXppbmcgfHwgIWluaXRpYWxpemVkIHx8IGFib3J0ZWQgfHwgIXByb3h5V29ya2VyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd3b3JrZXIgbm90IHJlYWR5Jyk7XG4gIH1cbn07XG5cbmNvbnN0IG9uUHJveHlXb3JrZXJNZXNzYWdlID0gKGV2OiBNZXNzYWdlRXZlbnQ8T3J0V2FzbU1lc3NhZ2U+KTogdm9pZCA9PiB7XG4gIHN3aXRjaCAoZXYuZGF0YS50eXBlKSB7XG4gICAgY2FzZSAnaW5pdC13YXNtJzpcbiAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuICAgICAgaWYgKGV2LmRhdGEuZXJyKSB7XG4gICAgICAgIGFib3J0ZWQgPSB0cnVlO1xuICAgICAgICBpbml0V2FzbUNhbGxiYWNrc1sxXShldi5kYXRhLmVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgIGluaXRXYXNtQ2FsbGJhY2tzWzBdKCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdpbml0LWVwJzpcbiAgICBjYXNlICdjb3B5LWZyb20nOlxuICAgIGNhc2UgJ2NyZWF0ZSc6XG4gICAgY2FzZSAncmVsZWFzZSc6XG4gICAgY2FzZSAncnVuJzpcbiAgICBjYXNlICdlbmQtcHJvZmlsaW5nJzoge1xuICAgICAgY29uc3QgY2FsbGJhY2tzID0gcXVldWVkQ2FsbGJhY2tzLmdldChldi5kYXRhLnR5cGUpITtcbiAgICAgIGlmIChldi5kYXRhLmVycikge1xuICAgICAgICBjYWxsYmFja3Muc2hpZnQoKSFbMV0oZXYuZGF0YS5lcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2tzLnNoaWZ0KCkhWzBdKGV2LmRhdGEub3V0ISk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgfVxufTtcblxuY29uc3Qgc2NyaXB0U3JjID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IChkb2N1bWVudD8uY3VycmVudFNjcmlwdCBhcyBIVE1MU2NyaXB0RWxlbWVudCk/LnNyYyA6IHVuZGVmaW5lZDtcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVXZWJBc3NlbWJseUFuZE9ydFJ1bnRpbWUgPSBhc3luYygpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbml0aWFsaXppbmcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ211bHRpcGxlIGNhbGxzIHRvIFxcJ2luaXRXYXNtKClcXCcgZGV0ZWN0ZWQuJyk7XG4gIH1cbiAgaWYgKGFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3ByZXZpb3VzIGNhbGwgdG8gXFwnaW5pdFdhc20oKVxcJyBmYWlsZWQuJyk7XG4gIH1cblxuICBpbml0aWFsaXppbmcgPSB0cnVlO1xuXG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fUFJPWFkgJiYgaXNQcm94eSgpKSB7XG4gICAgLy8gb3ZlcndyaXRlIHdhc20gZmlsZXBhdGhzXG4gICAgaWYgKGVudi53YXNtLndhc21QYXRocyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoc2NyaXB0U3JjICYmIHNjcmlwdFNyYy5pbmRleE9mKCdibG9iOicpICE9PSAwKSB7XG4gICAgICAgIGVudi53YXNtLndhc21QYXRocyA9IHNjcmlwdFNyYy5zdWJzdHIoMCwgKyhzY3JpcHRTcmMpLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgcHJveHlXb3JrZXI/LnRlcm1pbmF0ZSgpO1xuXG4gICAgICBjb25zdCB3b3JrZXJVcmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIC8vIFRoaXMgcmVxdWlyZSgpIGZ1bmN0aW9uIGlzIGhhbmRsZWQgYnkgZXNidWlsZCBwbHVnaW4gdG8gbG9hZCBmaWxlIGNvbnRlbnQgYXMgc3RyaW5nLlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHNcbiAgICAgICAgICAgIHJlcXVpcmUoJy4vcHJveHktd29ya2VyL21haW4nKVxuICAgICAgICAgIF0sXG4gICAgICAgICAge3R5cGU6ICd0ZXh0L2phdmFzY3JpcHQnfSkpO1xuICAgICAgcHJveHlXb3JrZXIgPSBuZXcgV29ya2VyKHdvcmtlclVybCwge25hbWU6ICdvcnQtd2FzbS1wcm94eS13b3JrZXInfSk7XG4gICAgICBwcm94eVdvcmtlci5vbmVycm9yID0gKGV2OiBFcnJvckV2ZW50KSA9PiByZWplY3QoZXYpO1xuICAgICAgcHJveHlXb3JrZXIub25tZXNzYWdlID0gb25Qcm94eVdvcmtlck1lc3NhZ2U7XG4gICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHdvcmtlclVybCk7XG4gICAgICBpbml0V2FzbUNhbGxiYWNrcyA9IFtyZXNvbHZlLCByZWplY3RdO1xuICAgICAgY29uc3QgbWVzc2FnZTogT3J0V2FzbU1lc3NhZ2UgPSB7dHlwZTogJ2luaXQtd2FzbScsIGluIDogZW52fTtcbiAgICAgIHByb3h5V29ya2VyLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH0pO1xuXG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGluaXRpYWxpemVXZWJBc3NlbWJseShlbnYud2FzbSk7XG4gICAgICBhd2FpdCBjb3JlLmluaXRSdW50aW1lKGVudik7XG4gICAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgYWJvcnRlZCA9IHRydWU7XG4gICAgICB0aHJvdyBlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplT3J0RXAgPSBhc3luYyhlcE5hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1BST1hZICYmIGlzUHJveHkoKSkge1xuICAgIGVuc3VyZVdvcmtlcigpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBlbnF1ZXVlQ2FsbGJhY2tzKCdpbml0LWVwJywgW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgY29uc3QgbWVzc2FnZTogT3J0V2FzbU1lc3NhZ2UgPSB7dHlwZTogJ2luaXQtZXAnLCBpbiA6IHtlcE5hbWUsIGVudn19O1xuICAgICAgcHJveHlXb3JrZXIhLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IGNvcmUuaW5pdEVwKGVudiwgZXBOYW1lKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNvcHlGcm9tRXh0ZXJuYWxCdWZmZXIgPSBhc3luYyhidWZmZXI6IFVpbnQ4QXJyYXkpOiBQcm9taXNlPFNlcmlhbGl6YWJsZUludGVybmFsQnVmZmVyPiA9PiB7XG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fUFJPWFkgJiYgaXNQcm94eSgpKSB7XG4gICAgZW5zdXJlV29ya2VyKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFNlcmlhbGl6YWJsZUludGVybmFsQnVmZmVyPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBlbnF1ZXVlQ2FsbGJhY2tzKCdjb3B5LWZyb20nLCBbcmVzb2x2ZSwgcmVqZWN0XSk7XG4gICAgICBjb25zdCBtZXNzYWdlOiBPcnRXYXNtTWVzc2FnZSA9IHt0eXBlOiAnY29weS1mcm9tJywgaW4gOiB7YnVmZmVyfX07XG4gICAgICBwcm94eVdvcmtlciEucG9zdE1lc3NhZ2UobWVzc2FnZSwgW2J1ZmZlci5idWZmZXJdKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY29yZS5jb3B5RnJvbUV4dGVybmFsQnVmZmVyKGJ1ZmZlcik7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTZXNzaW9uID1cbiAgICBhc3luYyhtb2RlbDogU2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXJ8VWludDhBcnJheSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOlxuICAgICAgICBQcm9taXNlPFNlcmlhbGl6YWJsZVNlc3Npb25NZXRhZGF0YT4gPT4ge1xuICAgICAgICAgIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fUFJPWFkgJiYgaXNQcm94eSgpKSB7XG4gICAgICAgICAgICAvLyBjaGVjayB1bnN1cHBvcnRlZCBvcHRpb25zXG4gICAgICAgICAgICBpZiAob3B0aW9ucz8ucHJlZmVycmVkT3V0cHV0TG9jYXRpb24pIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdzZXNzaW9uIG9wdGlvbiBcInByZWZlcnJlZE91dHB1dExvY2F0aW9uXCIgaXMgbm90IHN1cHBvcnRlZCBmb3IgcHJveHkuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbnN1cmVXb3JrZXIoKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxTZXJpYWxpemFibGVTZXNzaW9uTWV0YWRhdGE+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgZW5xdWV1ZUNhbGxiYWNrcygnY3JlYXRlJywgW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlOiBPcnRXYXNtTWVzc2FnZSA9IHt0eXBlOiAnY3JlYXRlJywgaW4gOiB7bW9kZWwsIG9wdGlvbnN9fTtcbiAgICAgICAgICAgICAgY29uc3QgdHJhbnNmZXJhYmxlOiBUcmFuc2ZlcmFibGVbXSA9IFtdO1xuICAgICAgICAgICAgICBpZiAobW9kZWwgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmZXJhYmxlLnB1c2gobW9kZWwuYnVmZmVyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwcm94eVdvcmtlciEucG9zdE1lc3NhZ2UobWVzc2FnZSwgdHJhbnNmZXJhYmxlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY29yZS5jcmVhdGVTZXNzaW9uKG1vZGVsLCBvcHRpb25zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbmV4cG9ydCBjb25zdCByZWxlYXNlU2Vzc2lvbiA9IGFzeW5jKHNlc3Npb25JZDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fUFJPWFkgJiYgaXNQcm94eSgpKSB7XG4gICAgZW5zdXJlV29ya2VyKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGVucXVldWVDYWxsYmFja3MoJ3JlbGVhc2UnLCBbcmVzb2x2ZSwgcmVqZWN0XSk7XG4gICAgICBjb25zdCBtZXNzYWdlOiBPcnRXYXNtTWVzc2FnZSA9IHt0eXBlOiAncmVsZWFzZScsIGluIDogc2Vzc2lvbklkfTtcbiAgICAgIHByb3h5V29ya2VyIS5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb3JlLnJlbGVhc2VTZXNzaW9uKHNlc3Npb25JZCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBydW4gPSBhc3luYyhcbiAgICBzZXNzaW9uSWQ6IG51bWJlciwgaW5wdXRJbmRpY2VzOiBudW1iZXJbXSwgaW5wdXRzOiBUZW5zb3JNZXRhZGF0YVtdLCBvdXRwdXRJbmRpY2VzOiBudW1iZXJbXSxcbiAgICBvdXRwdXRzOiBBcnJheTxUZW5zb3JNZXRhZGF0YXxudWxsPiwgb3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxUZW5zb3JNZXRhZGF0YVtdPiA9PiB7XG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fUFJPWFkgJiYgaXNQcm94eSgpKSB7XG4gICAgLy8gY2hlY2sgaW5wdXRzIGxvY2F0aW9uXG4gICAgaWYgKGlucHV0cy5zb21lKHQgPT4gdFszXSAhPT0gJ2NwdScpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2lucHV0IHRlbnNvciBvbiBHUFUgaXMgbm90IHN1cHBvcnRlZCBmb3IgcHJveHkuJyk7XG4gICAgfVxuICAgIC8vIGNoZWNrIG91dHB1dHMgbG9jYXRpb25cbiAgICBpZiAob3V0cHV0cy5zb21lKHQgPT4gdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigncHJlLWFsbG9jYXRlZCBvdXRwdXQgdGVuc29yIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHByb3h5LicpO1xuICAgIH1cbiAgICBlbnN1cmVXb3JrZXIoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8U2VyaWFsaXphYmxlVGVuc29yTWV0YWRhdGFbXT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZW5xdWV1ZUNhbGxiYWNrcygncnVuJywgW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgY29uc3Qgc2VyaWFsaXphYmxlSW5wdXRzID0gaW5wdXRzIGFzIFNlcmlhbGl6YWJsZVRlbnNvck1ldGFkYXRhW107ICAvLyBldmVyeSBpbnB1dCBpcyBvbiBDUFUuXG4gICAgICBjb25zdCBtZXNzYWdlOiBPcnRXYXNtTWVzc2FnZSA9XG4gICAgICAgICAge3R5cGU6ICdydW4nLCBpbiA6IHtzZXNzaW9uSWQsIGlucHV0SW5kaWNlcywgaW5wdXRzOiBzZXJpYWxpemFibGVJbnB1dHMsIG91dHB1dEluZGljZXMsIG9wdGlvbnN9fTtcbiAgICAgIHByb3h5V29ya2VyIS5wb3N0TWVzc2FnZShtZXNzYWdlLCBjb3JlLmV4dHJhY3RUcmFuc2ZlcmFibGVCdWZmZXJzKHNlcmlhbGl6YWJsZUlucHV0cykpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb3JlLnJ1bihzZXNzaW9uSWQsIGlucHV0SW5kaWNlcywgaW5wdXRzLCBvdXRwdXRJbmRpY2VzLCBvdXRwdXRzLCBvcHRpb25zKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGVuZFByb2ZpbGluZyA9IGFzeW5jKHNlc3Npb25JZDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fUFJPWFkgJiYgaXNQcm94eSgpKSB7XG4gICAgZW5zdXJlV29ya2VyKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGVucXVldWVDYWxsYmFja3MoJ2VuZC1wcm9maWxpbmcnLCBbcmVzb2x2ZSwgcmVqZWN0XSk7XG4gICAgICBjb25zdCBtZXNzYWdlOiBPcnRXYXNtTWVzc2FnZSA9IHt0eXBlOiAnZW5kLXByb2ZpbGluZycsIGluIDogc2Vzc2lvbklkfTtcbiAgICAgIHByb3h5V29ya2VyIS5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb3JlLmVuZFByb2ZpbGluZyhzZXNzaW9uSWQpO1xuICB9XG59O1xuIiwgImV4cG9ydCBjb25zdCByZWFkRmlsZSA9IHVuZGVmaW5lZDsiLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7cmVhZEZpbGV9IGZyb20gJ25vZGU6ZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9uLCBJbmZlcmVuY2VTZXNzaW9uSGFuZGxlciwgU2Vzc2lvbkhhbmRsZXIsIFRlbnNvciwgVFJBQ0VfRlVOQ19CRUdJTiwgVFJBQ0VfRlVOQ19FTkR9IGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5cbmltcG9ydCB7U2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXIsIFRlbnNvck1ldGFkYXRhfSBmcm9tICcuL3Byb3h5LW1lc3NhZ2VzJztcbmltcG9ydCB7Y29weUZyb21FeHRlcm5hbEJ1ZmZlciwgY3JlYXRlU2Vzc2lvbiwgZW5kUHJvZmlsaW5nLCByZWxlYXNlU2Vzc2lvbiwgcnVufSBmcm9tICcuL3Byb3h5LXdyYXBwZXInO1xuaW1wb3J0IHtpc0dwdUJ1ZmZlclN1cHBvcnRlZFR5cGV9IGZyb20gJy4vd2FzbS1jb21tb24nO1xuXG5leHBvcnQgY29uc3QgZW5jb2RlVGVuc29yTWV0YWRhdGEgPSAodGVuc29yOiBUZW5zb3IsIGdldE5hbWU6ICgpID0+IHN0cmluZyk6IFRlbnNvck1ldGFkYXRhID0+IHtcbiAgc3dpdGNoICh0ZW5zb3IubG9jYXRpb24pIHtcbiAgICBjYXNlICdjcHUnOlxuICAgICAgcmV0dXJuIFt0ZW5zb3IudHlwZSwgdGVuc29yLmRpbXMsIHRlbnNvci5kYXRhLCAnY3B1J107XG4gICAgY2FzZSAnZ3B1LWJ1ZmZlcic6XG4gICAgICByZXR1cm4gW3RlbnNvci50eXBlLCB0ZW5zb3IuZGltcywge2dwdUJ1ZmZlcjogdGVuc29yLmdwdUJ1ZmZlcn0sICdncHUtYnVmZmVyJ107XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBkYXRhIGxvY2F0aW9uOiAke3RlbnNvci5sb2NhdGlvbn0gZm9yICR7Z2V0TmFtZSgpfWApO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZGVjb2RlVGVuc29yTWV0YWRhdGEgPSAodGVuc29yOiBUZW5zb3JNZXRhZGF0YSk6IFRlbnNvciA9PiB7XG4gIHN3aXRjaCAodGVuc29yWzNdKSB7XG4gICAgY2FzZSAnY3B1JzpcbiAgICAgIHJldHVybiBuZXcgVGVuc29yKHRlbnNvclswXSwgdGVuc29yWzJdLCB0ZW5zb3JbMV0pO1xuICAgIGNhc2UgJ2dwdS1idWZmZXInOiB7XG4gICAgICBjb25zdCBkYXRhVHlwZSA9IHRlbnNvclswXTtcbiAgICAgIGlmICghaXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlKGRhdGFUeXBlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG5vdCBzdXBwb3J0ZWQgZGF0YSB0eXBlOiAke2RhdGFUeXBlfSBmb3IgZGVzZXJpYWxpemluZyBHUFUgdGVuc29yYCk7XG4gICAgICB9XG4gICAgICBjb25zdCB7Z3B1QnVmZmVyLCBkb3dubG9hZCwgZGlzcG9zZX0gPSB0ZW5zb3JbMl07XG4gICAgICByZXR1cm4gVGVuc29yLmZyb21HcHVCdWZmZXIoZ3B1QnVmZmVyLCB7ZGF0YVR5cGUsIGRpbXM6IHRlbnNvclsxXSwgZG93bmxvYWQsIGRpc3Bvc2V9KTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBkYXRhIGxvY2F0aW9uOiAke3RlbnNvclszXX1gKTtcbiAgfVxufTtcblxuZXhwb3J0IGNsYXNzIE9ubnhydW50aW1lV2ViQXNzZW1ibHlTZXNzaW9uSGFuZGxlciBpbXBsZW1lbnRzIEluZmVyZW5jZVNlc3Npb25IYW5kbGVyIHtcbiAgcHJpdmF0ZSBzZXNzaW9uSWQ6IG51bWJlcjtcblxuICBpbnB1dE5hbWVzOiBzdHJpbmdbXTtcbiAgb3V0cHV0TmFtZXM6IHN0cmluZ1tdO1xuXG4gIGFzeW5jIGZldGNoTW9kZWxBbmRDb3B5VG9XYXNtTWVtb3J5KHBhdGg6IHN0cmluZyk6IFByb21pc2U8U2VyaWFsaXphYmxlSW50ZXJuYWxCdWZmZXI+IHtcbiAgICAvLyBmZXRjaCBtb2RlbCBmcm9tIHVybCBhbmQgbW92ZSB0byB3YXNtIGhlYXAuIFRoZSBhcnJheWJ1ZmZmZXIgdGhhdCBoZWxkIHRoZSBodHRwXG4gICAgLy8gcmVzcG9uc2UgaXMgZnJlZWQgb25jZSB3ZSByZXR1cm5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHBhdGgpO1xuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBmYWlsZWQgdG8gbG9hZCBtb2RlbDogJHtwYXRofWApO1xuICAgIH1cbiAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG4gICAgcmV0dXJuIGNvcHlGcm9tRXh0ZXJuYWxCdWZmZXIobmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWRNb2RlbChwYXRoT3JCdWZmZXI6IHN0cmluZ3xVaW50OEFycmF5LCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8dm9pZD4ge1xuICAgIFRSQUNFX0ZVTkNfQkVHSU4oKTtcbiAgICBsZXQgbW9kZWw6IFBhcmFtZXRlcnM8dHlwZW9mIGNyZWF0ZVNlc3Npb24+WzBdO1xuXG4gICAgaWYgKHR5cGVvZiBwYXRoT3JCdWZmZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MudmVyc2lvbnMgJiYgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSB7XG4gICAgICAgIC8vIG5vZGVcbiAgICAgICAgbW9kZWwgPSBhd2FpdCByZWFkRmlsZShwYXRoT3JCdWZmZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gYnJvd3NlclxuICAgICAgICAvLyBmZXRjaCBtb2RlbCBhbmQgY29weSB0byB3YXNtIGhlYXAuXG4gICAgICAgIG1vZGVsID0gYXdhaXQgdGhpcy5mZXRjaE1vZGVsQW5kQ29weVRvV2FzbU1lbW9yeShwYXRoT3JCdWZmZXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtb2RlbCA9IHBhdGhPckJ1ZmZlcjtcbiAgICB9XG5cbiAgICBbdGhpcy5zZXNzaW9uSWQsIHRoaXMuaW5wdXROYW1lcywgdGhpcy5vdXRwdXROYW1lc10gPSBhd2FpdCBjcmVhdGVTZXNzaW9uKG1vZGVsLCBvcHRpb25zKTtcbiAgICBUUkFDRV9GVU5DX0VORCgpO1xuICB9XG5cbiAgYXN5bmMgZGlzcG9zZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gcmVsZWFzZVNlc3Npb24odGhpcy5zZXNzaW9uSWQpO1xuICB9XG5cbiAgYXN5bmMgcnVuKGZlZWRzOiBTZXNzaW9uSGFuZGxlci5GZWVkc1R5cGUsIGZldGNoZXM6IFNlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlLCBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxTZXNzaW9uSGFuZGxlci5SZXR1cm5UeXBlPiB7XG4gICAgVFJBQ0VfRlVOQ19CRUdJTigpO1xuICAgIGNvbnN0IGlucHV0QXJyYXk6IFRlbnNvcltdID0gW107XG4gICAgY29uc3QgaW5wdXRJbmRpY2VzOiBudW1iZXJbXSA9IFtdO1xuICAgIE9iamVjdC5lbnRyaWVzKGZlZWRzKS5mb3JFYWNoKGt2cCA9PiB7XG4gICAgICBjb25zdCBuYW1lID0ga3ZwWzBdO1xuICAgICAgY29uc3QgdGVuc29yID0ga3ZwWzFdO1xuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmlucHV0TmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGlucHV0ICcke25hbWV9J2ApO1xuICAgICAgfVxuICAgICAgaW5wdXRBcnJheS5wdXNoKHRlbnNvcik7XG4gICAgICBpbnB1dEluZGljZXMucHVzaChpbmRleCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBvdXRwdXRBcnJheTogQXJyYXk8VGVuc29yfG51bGw+ID0gW107XG4gICAgY29uc3Qgb3V0cHV0SW5kaWNlczogbnVtYmVyW10gPSBbXTtcbiAgICBPYmplY3QuZW50cmllcyhmZXRjaGVzKS5mb3JFYWNoKGt2cCA9PiB7XG4gICAgICBjb25zdCBuYW1lID0ga3ZwWzBdO1xuICAgICAgY29uc3QgdGVuc29yID0ga3ZwWzFdO1xuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLm91dHB1dE5hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBvdXRwdXQgJyR7bmFtZX0nYCk7XG4gICAgICB9XG4gICAgICBvdXRwdXRBcnJheS5wdXNoKHRlbnNvcik7XG4gICAgICBvdXRwdXRJbmRpY2VzLnB1c2goaW5kZXgpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgaW5wdXRzID1cbiAgICAgICAgaW5wdXRBcnJheS5tYXAoKHQsIGkpID0+IGVuY29kZVRlbnNvck1ldGFkYXRhKHQsICgpID0+IGBpbnB1dCBcIiR7dGhpcy5pbnB1dE5hbWVzW2lucHV0SW5kaWNlc1tpXV19XCJgKSk7XG4gICAgY29uc3Qgb3V0cHV0cyA9IG91dHB1dEFycmF5Lm1hcChcbiAgICAgICAgKHQsIGkpID0+IHQgPyBlbmNvZGVUZW5zb3JNZXRhZGF0YSh0LCAoKSA9PiBgb3V0cHV0IFwiJHt0aGlzLm91dHB1dE5hbWVzW291dHB1dEluZGljZXNbaV1dfVwiYCkgOiBudWxsKTtcblxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBydW4odGhpcy5zZXNzaW9uSWQsIGlucHV0SW5kaWNlcywgaW5wdXRzLCBvdXRwdXRJbmRpY2VzLCBvdXRwdXRzLCBvcHRpb25zKTtcblxuICAgIGNvbnN0IHJlc3VsdE1hcDogU2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZSA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0TWFwW3RoaXMub3V0cHV0TmFtZXNbb3V0cHV0SW5kaWNlc1tpXV1dID0gb3V0cHV0QXJyYXlbaV0gPz8gZGVjb2RlVGVuc29yTWV0YWRhdGEocmVzdWx0c1tpXSk7XG4gICAgfVxuICAgIFRSQUNFX0ZVTkNfRU5EKCk7XG4gICAgcmV0dXJuIHJlc3VsdE1hcDtcbiAgfVxuXG4gIHN0YXJ0UHJvZmlsaW5nKCk6IHZvaWQge1xuICAgIC8vIFRPRE86IGltcGxlbWVudCBwcm9maWxpbmdcbiAgfVxuXG4gIGVuZFByb2ZpbGluZygpOiB2b2lkIHtcbiAgICB2b2lkIGVuZFByb2ZpbGluZyh0aGlzLnNlc3Npb25JZCk7XG4gIH1cbn1cbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtjcHVzfSBmcm9tICdub2RlOm9zJztcbmltcG9ydCB7QmFja2VuZCwgZW52LCBJbmZlcmVuY2VTZXNzaW9uLCBJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtpbml0aWFsaXplT3J0RXAsIGluaXRpYWxpemVXZWJBc3NlbWJseUFuZE9ydFJ1bnRpbWV9IGZyb20gJy4vd2FzbS9wcm94eS13cmFwcGVyJztcbmltcG9ydCB7T25ueHJ1bnRpbWVXZWJBc3NlbWJseVNlc3Npb25IYW5kbGVyfSBmcm9tICcuL3dhc20vc2Vzc2lvbi1oYW5kbGVyLWluZmVyZW5jZSc7XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpbml0aWFsaXplcyBhbGwgZmxhZ3MgZm9yIFdlYkFzc2VtYmx5LlxuICpcbiAqIFRob3NlIGZsYWdzIGFyZSBhY2Nlc3NpYmxlIGZyb20gYG9ydC5lbnYud2FzbWAuIFVzZXJzIGFyZSBhbGxvdyB0byBzZXQgdGhvc2UgZmxhZ3MgYmVmb3JlIHRoZSBmaXJzdCBpbmZlcmVuY2Ugc2Vzc2lvblxuICogYmVpbmcgY3JlYXRlZCwgdG8gb3ZlcnJpZGUgZGVmYXVsdCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVGbGFncyA9ICgpOiB2b2lkID0+IHtcbiAgaWYgKHR5cGVvZiBlbnYud2FzbS5pbml0VGltZW91dCAhPT0gJ251bWJlcicgfHwgZW52Lndhc20uaW5pdFRpbWVvdXQgPCAwKSB7XG4gICAgZW52Lndhc20uaW5pdFRpbWVvdXQgPSAwO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbnYud2FzbS5zaW1kICE9PSAnYm9vbGVhbicpIHtcbiAgICBlbnYud2FzbS5zaW1kID0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW52Lndhc20ucHJveHkgIT09ICdib29sZWFuJykge1xuICAgIGVudi53YXNtLnByb3h5ID0gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIGVudi53YXNtLnRyYWNlICE9PSAnYm9vbGVhbicpIHtcbiAgICBlbnYud2FzbS50cmFjZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbnYud2FzbS5udW1UaHJlYWRzICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzSW50ZWdlcihlbnYud2FzbS5udW1UaHJlYWRzKSB8fCBlbnYud2FzbS5udW1UaHJlYWRzIDw9IDApIHtcbiAgICBjb25zdCBudW1DcHVMb2dpY2FsQ29yZXMgPSB0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyA/IGNwdXMoKS5sZW5ndGggOiBuYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeTtcbiAgICBlbnYud2FzbS5udW1UaHJlYWRzID0gTWF0aC5taW4oNCwgTWF0aC5jZWlsKChudW1DcHVMb2dpY2FsQ29yZXMgfHwgMSkgLyAyKSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjbGFzcyBPbm54cnVudGltZVdlYkFzc2VtYmx5QmFja2VuZCBpbXBsZW1lbnRzIEJhY2tlbmQge1xuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpbml0aWFsaXplcyB0aGUgV2ViQXNzZW1ibHkgYmFja2VuZC5cbiAgICpcbiAgICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBvbmx5IG9uY2UgZm9yIGVhY2ggYmFja2VuZCBuYW1lLiBJdCB3aWxsIGJlIGNhbGxlZCB0aGUgZmlyc3QgdGltZSB3aGVuXG4gICAqIGBvcnQuSW5mZXJlbmNlU2Vzc2lvbi5jcmVhdGUoKWAgaXMgY2FsbGVkIHdpdGggYSByZWdpc3RlcmVkIGJhY2tlbmQgbmFtZS5cbiAgICpcbiAgICogQHBhcmFtIGJhY2tlbmROYW1lIC0gdGhlIHJlZ2lzdGVyZWQgYmFja2VuZCBuYW1lLlxuICAgKi9cbiAgYXN5bmMgaW5pdChiYWNrZW5kTmFtZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gcG9wdWxhdGUgd2FzbSBmbGFnc1xuICAgIGluaXRpYWxpemVGbGFncygpO1xuXG4gICAgLy8gaW5pdCB3YXNtXG4gICAgYXdhaXQgaW5pdGlhbGl6ZVdlYkFzc2VtYmx5QW5kT3J0UnVudGltZSgpO1xuXG4gICAgLy8gcGVyZm9ybWUgRVAgc3BlY2lmaWMgaW5pdGlhbGl6YXRpb25cbiAgICBhd2FpdCBpbml0aWFsaXplT3J0RXAoYmFja2VuZE5hbWUpO1xuICB9XG4gIGNyZWF0ZUluZmVyZW5jZVNlc3Npb25IYW5kbGVyKHBhdGg6IHN0cmluZywgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcj47XG4gIGNyZWF0ZUluZmVyZW5jZVNlc3Npb25IYW5kbGVyKGJ1ZmZlcjogVWludDhBcnJheSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcj47XG4gIGFzeW5jIGNyZWF0ZUluZmVyZW5jZVNlc3Npb25IYW5kbGVyKHBhdGhPckJ1ZmZlcjogc3RyaW5nfFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTpcbiAgICAgIFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXI+IHtcbiAgICBjb25zdCBoYW5kbGVyID0gbmV3IE9ubnhydW50aW1lV2ViQXNzZW1ibHlTZXNzaW9uSGFuZGxlcigpO1xuICAgIGF3YWl0IGhhbmRsZXIubG9hZE1vZGVsKHBhdGhPckJ1ZmZlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoYW5kbGVyKTtcbiAgfVxufVxuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge09ubnhydW50aW1lV2ViQXNzZW1ibHlCYWNrZW5kfSBmcm9tICcuL2JhY2tlbmQtd2FzbSc7XG5leHBvcnQgY29uc3Qgd2FzbUJhY2tlbmQgPSBuZXcgT25ueHJ1bnRpbWVXZWJBc3NlbWJseUJhY2tlbmQoKTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0cyAqL1xuLy8gV2UgdXNlIFwicmVxdWlyZVwiIGluc3RlYWQgb2YgXCJpbXBvcnRcIiBoZXJlIGJlY2F1c2UgaW1wb3J0IHN0YXRlbWVudCBtdXN0IGJlIHB1dCBpbiB0b3AgbGV2ZWwuIE91ciBjdXJyZW50IGNvZGUgZG9lc1xuLy8gbm90IGFsbG93IGJ1bmRsZXIgdG8gdHJlZS1zaGFraW5nIGNvZGUgYXMgZXhwZWN0ZWQgYmVjYXVzZSBzb21lIGNvZGVzIGFyZSB0cmVhdGVkIGFzIGhhdmluZyBzaWRlIGVmZmVjdHMuXG4vLyBTbyB3ZSBpbXBvcnQgY29kZSBpbnNpZGUgdGhlIGlmLWNsYXVzZSB0byBhbGxvdyBidW5kbGVyIHJlbW92ZSB0aGUgY29kZSBzYWZlbHkuXG5cbmV4cG9ydCAqIGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5pbXBvcnQgKiBhcyBvcnQgZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcbmV4cG9ydCBkZWZhdWx0IG9ydDtcblxuaW1wb3J0IHtyZWdpc3RlckJhY2tlbmQsIGVudn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcbmltcG9ydCB7dmVyc2lvbn0gZnJvbSAnLi92ZXJzaW9uJztcblxuaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR0wpIHtcbiAgY29uc3Qgb25ueGpzQmFja2VuZCA9IHJlcXVpcmUoJy4vYmFja2VuZC1vbm54anMnKS5vbm54anNCYWNrZW5kO1xuICByZWdpc3RlckJhY2tlbmQoJ3dlYmdsJywgb25ueGpzQmFja2VuZCwgLTEwKTtcbn1cblxuaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0FTTSkge1xuICBjb25zdCB3YXNtQmFja2VuZCA9IEJVSUxEX0RFRlMuRElTQUJMRV9UUkFJTklORyA/IHJlcXVpcmUoJy4vYmFja2VuZC13YXNtLWluZmVyZW5jZScpLndhc21CYWNrZW5kIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCcuL2JhY2tlbmQtd2FzbS10cmFpbmluZycpLndhc21CYWNrZW5kO1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUpIHtcbiAgICByZWdpc3RlckJhY2tlbmQoJ3dlYmdwdScsIHdhc21CYWNrZW5kLCA1KTtcbiAgfVxuICByZWdpc3RlckJhY2tlbmQoJ2NwdScsIHdhc21CYWNrZW5kLCAxMCk7XG4gIHJlZ2lzdGVyQmFja2VuZCgnd2FzbScsIHdhc21CYWNrZW5kLCAxMCk7XG4gIGlmIChCVUlMRF9ERUZTLkRJU0FCTEVfVFJBSU5JTkcpIHtcbiAgICByZWdpc3RlckJhY2tlbmQoJ3hubnBhY2snLCB3YXNtQmFja2VuZCwgOSk7XG4gICAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0VCTk4pIHtcbiAgICAgIHJlZ2lzdGVyQmFja2VuZCgnd2Vibm4nLCB3YXNtQmFja2VuZCwgOSk7XG4gICAgfVxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbnYudmVyc2lvbnMsICd3ZWInLCB7dmFsdWU6IHZlcnNpb24sIGVudW1lcmFibGU6IHRydWV9KTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuLy8gVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSAvanMvc2NyaXB0cy91cGRhdGUtdmVyc2lvbi50c1xuLy8gRG8gbm90IG1vZGlmeSBmaWxlIGNvbnRlbnQgbWFudWFsbHkuXG5cbmV4cG9ydCBjb25zdCB2ZXJzaW9uID0gJzEuMTcuMCc7XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE1BY00sVUFDQSwwQkFZTyxpQkEwQ0E7QUFyRWI7OztBQWNBLE1BQU0sV0FBcUMsb0JBQUksSUFBRztBQUNsRCxNQUFNLDJC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SUFBRSxFQUFFLFlBQVksSUFBRSxFQUFFLFlBQVksSUFBRTtBQUFBLFlBQUM7QUFBQyxtQkFBSztBQUFFLG1CQUFLO0FBQUUsbUJBQUs7QUFBRSxtQkFBSztBQUFFLGdCQUFJLElBQUUsRUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDO0FBQUUsZ0JBQUUsRUFBQyxJQUFHLEVBQUUsTUFBSSxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsSUFBRSxPQUFLLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsSUFBRSxPQUFLLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsR0FBRSxJQUFHLElBQUUsRUFBRSxDQUFDLElBQUUsR0FBRTtBQUFFLGdCQUFFLEVBQUUsQ0FBQztBQUFFLGdCQUFFO0FBQUEsY0FBQyxNQUFLO0FBQUEsY0FBdUIsTUFBSztBQUFBLGNBQVcsTUFBSztBQUFBLGNBQVcsTUFBSztBQUFBLGNBQUssTUFBSztBQUFBLGNBQWMsTUFBSztBQUFBLGNBQVEsTUFBSztBQUFBLGNBQVcsTUFBSztBQUFBLGNBQVcsTUFBSztBQUFBLGNBQzdlLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFXLE9BQU07QUFBQSxjQUFXLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07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RUFBRyxrQkFBa0I7QUFBRSxjQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsS0FBRyxLQUFHLEtBQUcsRUFBRSxrQkFBa0IsS0FBRyxLQUFLLElBQUksR0FBRSxDQUFDLEtBQUc7QUFBQSxVQUFDLEdBQUUsR0FBRSxTQUFTLEdBQUU7QUFBQyxtQkFBSztBQUFFLGdCQUFJLElBQUUsSUFBSSxLQUFLLEVBQUUsSUFBRSxPQUFLLE1BQUksQ0FBQyxJQUFFLE1BQUssRUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLEdBQUUsRUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLEdBQUUsRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLEdBQUUsRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLEdBQUUsRUFBRSxNQUFJLE1BQUksQ0FBQyxHQUFFLENBQUMsR0FBRSxJQUFFLEVBQUUsSUFBRSxPQUFLLE1BQUksQ0FBQyxHQUFFLElBQUUsRUFBRSxrQkFBa0IsR0FBRSxJQUFHLElBQUksS0FBSyxFQUFFLFlBQVksR0FBRSxHQUFFLENBQUMsRUFBRyxrQkFBa0IsR0FBRSxJQUFHLElBQUksS0FBSyxFQUFFLFlBQVksR0FBRSxHQUFFLENBQUMsRUFBRyxrQkFBa0IsR0FBRSxJQUFFLEtBQUs7QUFBQSxjQUFJO0FBQUEsY0FDM2Y7QUFBQSxZQUFDO0FBQUUsZ0JBQUUsSUFBRSxFQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsSUFBRSxPQUFPLEtBQUcsS0FBRyxLQUFHLENBQUMsSUFBRSxJQUFFLE1BQUksS0FBRyxPQUFLLElBQUUsS0FBSyxJQUFJLEdBQUUsQ0FBQyxHQUFFLEVBQUUsUUFBUSxFQUFFLFFBQVEsSUFBRSxRQUFNLElBQUUsSUFBRSxJQUFFLEtBQUcsRUFBRTtBQUFHLGNBQUUsSUFBRSxPQUFLLE1BQUksQ0FBQyxJQUFFLEVBQUUsT0FBTztBQUFFLGNBQUUsSUFBRSxPQUFLLE1BQUksQ0FBQyxLQUFHLEVBQUUsRUFBRSxZQUFZLENBQUMsSUFBRSxLQUFHLElBQUksRUFBRSxTQUFTLENBQUMsSUFBRSxFQUFFLFFBQVEsSUFBRSxJ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QUUsbUJBQUs7QUFBRSxnQkFBSSxJQUFFO0FBQUUsZUFBRyxFQUFFLFFBQVEsQ0FBQyxHQUFFLE1BQUk7QUFBQyxrQkFBSSxJQUFFLElBQUU7QUFBRSxrQkFBRSxFQUFFLElBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxJQUFFO0FBQUUsbUJBQUksSUFBRSxHQUFFLElBQUUsRUFBRSxRQUFPLEVBQUU7QUFBRSxrQkFBRSxRQUFNLE1BQUksQ0FBQyxJQUFFLEVBQUUsV0FBVyxDQUFDO0FBQUUsZ0JBQUUsTUFBSSxNQUFJLENBQUMsSUFBRTtBQUFFLG1CQUFHLEVBQUUsU0FBTztBQUFBLFlBQUMsQ0FBQztBQUFFLG1CQUFPO0FBQUEsVUFBQyxHQUFFLEdBQUUsU0FBUyxHQUFFLEdBQUU7QUFBQyxtQkFBSztBQUFFLG1CQUFLO0FBQUUsZ0JBQUksSUFDdmYsR0FBRztBQUFFLGNBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFO0FBQU8sZ0JBQUksSUFBRTtBQUFFLGNBQUUsUUFBUSxPQUFHLEtBQUcsRUFBRSxTQUFPLENBQUM7QUFBRSxjQUFFLE1BQUksTUFBSSxDQUFDLElBQUU7QUFBRSxtQkFBTztBQUFBLFVBQUMsR0FBRSxHQUFFLE1BQUksSUFBRyxHQUFFLFdBQVU7QUFBQyxtQkFBTztBQUFBLFVBQUUsR0FBRSxHQUFFLFdBQVU7QUFBQyxtQkFBTztBQUFBLFVBQUUsR0FBRSxHQUFFLFNBQVMsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLG1CQUFLO0FBQUUsbUJBQUs7QUFBRSxtQkFBSztBQUFFLHFCQUFRLElBQUUsR0FBRSxJQUFFLEdBQUUsSUFBRSxHQUFFLEtBQUk7QUFBQyxrQkFBSSxJQUFFLEVBQUUsTUFBSSxNQUFJLENBQUMsR0FBRSxJQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQztBQUFFLG1CQUFHO0FBQUUsdUJBQVEsSUFBRSxHQUFFLElBQUUsR0FBRSxLQUFJO0FBQUMsb0JBQUksSUFBRSxFQUFFLElBQUUsTUFBSSxDQUFDLEdBQUUsSUFBRSxHQUFHLENBQUM7QUFBRSxzQkFBSSxL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RSxHQUFFO0FBQUMsbUJBQU8sSUFBRSxFQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxDQUFDLElBQUUsR0FBRyxHQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUEsVUFBQztBQUNuUyxtQkFBUyxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxtQkFBSztBQUFFLG1CQUFLO0FBQUUsbUJBQUs7QUFBRSxtQkFBSztBQUFFLGdCQUFHLGVBQWEsT0FBTztBQUFrQixxQkFBTyxFQUFFLHFGQUFxRixHQUFFO0FBQUUsZ0JBQUksSUFBRSxDQUFDO0FBQUUsZ0JBQUcsS0FBRyxNQUFJLEVBQUU7QUFBTyxxQkFBTyxHQUFHLEdBQUUsR0FBRSxHQUFFLENBQUM7QUFBRSxnQkFBRSxFQUFDLElBQUcsR0FBRSxJQUFHLEdBQUUsSUFBRyxHQUFFLElBQUcsRUFBQztBQUFFLG1CQUFPLEtBQUcsRUFBRSxLQUFHLGVBQWMsWUFBWSxHQUFFLENBQUMsR0FBRSxLQUFHLEdBQUcsQ0FBQztBQUFBLFVBQUM7QUFBQyxtQkFBUyxHQUFHLEdBQUUsR0FBRSxHQUFFO0FBQUMsbUJBQU8sSUFBRSxFQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsQ0FBQyxJQUFFO0FBQUEsVUFBQztBQUFDLG1CQUFTLEdBQUcsR0FBRSxHQUFFO0FBQUMsZ0JBQUc7QUFBRSxxQkFBTyxFQUFFLEdBQUUsR0FBRSxHQUFFLENBQUM7QUFBQSxVQUFDO0FBQzVZLGNBQUksS0FBRyxPQUFHO0FBQUMscUJBQVEsSUFBRSxHQUFFLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTyxFQUFFLEdBQUU7QUFBQyxrQkFBSSxJQUFFLEVBQUUsV0FBVyxDQUFDO0FBQUUscUJBQUssSUFBRSxNQUFJLFFBQU0sSUFBRSxLQUFHLElBQUUsU0FBTyxLQUFHLFNBQU8sS0FBRyxLQUFHLEdBQUUsRUFBRSxLQUFHLEtBQUc7QUFBQSxZQUFDO0FBQUMsbUJBQU87QUFBQSxVQUFDLEdBQUUsS0FBRyxDQUFDLEdBQUUsR0FBRSxHQUFFLE1BQUk7QUFBQyxtQkFBSztBQUFFLGdCQUFHLEVBQUUsSUFBRTtBQUFHLHFCQUFPO0FBQUUsZ0JBQUksSUFBRTtBQUFFLGdCQUFFLElBQUUsSUFBRTtBQUFFLHFCQUFRLElBQUUsR0FBRSxJQUFFLEVBQUUsUUFBTyxFQUFFLEdBQUU7QUFBQyxrQkFBSSxJQUFFLEVBQUUsV0FBVyxDQUFDO0FBQUUsa0JBQUcsU0FBTyxLQUFHLFNBQU8sR0FBRTtBQUFDLG9CQUFJLElBQUUsRUFBRSxXQUFXLEVBQUUsQ0FBQztBQUFFLG9CQUFFLFVBQVEsSUFBRSxTQUFPLE1BQUksSUFBRTtBQUFBLGNBQUk7QUFBQyxrQkFBRyxPQUFLLEdBQUU7QUFBQyxvQkFBRyxLQUFHO0FBQUU7QUFBTSxrQkFBRSxRQUFNLENBQUMsSUFBRTtBQUFBLGNBQUMsT0FBSztBQUFDLG9CQUFHLFFBQU0sR0FBRTtBQUFDLHNCQUFHLElBQUUsS0FBRztBQUFFO0FBQU0sb0JBQUUsUUFBTSxDQUFDLElBQUUsTUFBSSxLQUFHO0FBQUEsZ0JBQUMsT0FBSztBQUFDLHNCQUFHLFNBQU8sR0FBRTtBQUFDLHdCQUFHLElBQUUsS0FBRztBQUFFO0FBQU0sc0JBQUUsUUFBTSxDQUFDLElBQUUsTUFBSSxLQUFHO0FBQUEsa0JBQUUsT0FBSztBQUFDLHdCQUFHLElBQUUsS0FBRztBQUFFO0FBQU0sc0JBQUUsUUFBTSxDQUFDLElBQUUsTUFBSSxLQUNwZjtBQUFHLHNCQUFFLFFBQU0sQ0FBQyxJQUFFLE1BQUksS0FBRyxLQUFHO0FBQUEsa0JBQUU7QUFBQyxvQkFBRSxRQUFNLENBQUMsSUFBRSxNQUFJLEtBQUcsSUFBRTtBQUFBLGdCQUFFO0FBQUMsa0JBQUUsUUFBTSxDQUFDLElBQUUsTUFBSSxJQUFFO0FBQUEsY0FBRTtBQUFBLFlBQUM7QUFBQyxjQUFFLE1BQUksQ0FBQyxJQUFFO0FBQUUsbUJBQU8sSUFBRTtBQUFBLFVBQUMsR0FBRSxLQUFHLENBQUMsR0FBRSxHQUFFLE1BQUksR0FBRyxHQUFFLEVBQUUsR0FBRSxHQUFFLENBQUM7QUFBRSxtQkFBUyxHQUFHLEdBQUUsR0FBRTtBQUFDLGdCQUFHO0FBQUUscUJBQU8sRUFBRSxHQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUEsVUFBQztBQUFDLG1CQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUU7QUFBQyxnQkFBRztBQUFFLHFCQUFPLEVBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUEsVUFBQztBQUFDLG1CQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUU7QUFBQyxtQkFBTyxJQUFFLEVBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxDQUFDLElBQUU7QUFBQSxVQUFDO0FBQUMsbUJBQVMsR0FBRyxHQUFFLEdBQUU7QUFBQyxnQkFBRztBQUFFLHFCQUFPLEVBQUUsR0FBRSxHQUFFLEdBQUUsQ0FBQztBQUFBLFVBQUM7QUFBQyxtQkFBUyxHQUFHLEdBQUUsR0FBRSxHQUFFO0FBQUMsZ0JBQUc7QUFBRSxxQkFBTyxFQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsQ0FBQztBQUFBLFVBQUM7QUFBQyxtQkFBUyxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxnQkFBRztBQUFFLHFCQUFPLEVBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLENBQUM7QUFBQSxVQUFDO0FBQUMsbUJBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsZ0JBQUc7QUFBRSxxQkFBTyxFQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUEsVUFBQztBQUFDLG1CQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLGdCQUFHO0FBQUUscUJBQU8sRUFBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsQ0FBQztBQUFBLFVBQUM7QUFDN2QsbUJBQVMsR0FBRyxHQUFFO0FBQUMsZ0JBQUc7QUFBRSxxQkFBTyxFQUFFLElBQUcsR0FBRSxDQUFDO0FBQUEsVUFBQztBQUFDLG1CQUFTLEdBQUcsR0FBRSxHQUFFO0FBQUMsZ0JBQUc7QUFBRSxxQkFBTyxFQUFFLElBQUcsR0FBRSxHQUFFLENBQUM7QUFBQSxVQUFDO0FBQUMsbUJBQVMsR0FBRyxHQUFFLEdBQUUs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QUU7QUFBRSxtQkFBSSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sRUFBRTtBQUFFLGtCQUFFLEVBQUUsUUFBTSxNQUFJLENBQUMsSUFBRSxFQUFFLFdBQVcsQ0FBQztBQUFFLGdCQUFFLEVBQUUsTUFBSSxNQUFJLENBQUMsSUFBRTtBQUFFLG1CQUFHLEVBQUUsU0FBTztBQUFBLFlBQUMsQ0FBQztBQUFFLG1CQUFPO0FBQUEsVUFBQztBQUFDLG1CQUFTLEdBQUcsR0FBRSxHQUFFO0FBQUMsZ0JBQUc7QUFBRSxxQkFBTyxFQUFFLElBQUcsR0FBRSxHQUFFLENBQUM7QUFBRSxtQkFBSztBQUFFLG1CQUFLO0FBQUUsZ0JBQUksSUFBRSxHQUFHO0FBQUUsY0FBRSxFQUFFLE1BQUksTUFBSSxDQUFDLElBQUUsRUFBRTtBQUFPLGdCQUFJLElBQUU7QUFBRSxjQUFFLFFBQVEsT0FBRyxLQUFHLEVBQUUsU0FBTyxDQUFDO0FBQUUsY0FBRSxFQUFFLE1BQUksTUFBSSxDQUFDLElBQUU7QUFBRSxtQkFBTztBQUFBLFVBQUM7QUFBQyxtQkFBUyxHQUFHLEdBQUU7QUFBQyxtQkFBTyxJQUFFLEVBQUUsSUFBRyxHQUFFLENBQUMsSUFBRTtBQUFBLFVBQUU7QUFBQyxtQkFBUyxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxtQkFBTyxJQUFFLEVBQUUsSUFBRyxHQUFFLEdBQUUsR0FBRSxHQUFFLENBQUMsSUFBRTtBQUFBLFVBQUU7QUFDcGMsbUJBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsbUJBQU8sSUFBRSxFQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxDQUFDLElBQUU7QUFBQSxVQUFFO0FBQUMsY0FBSSxLQUFHLENBQUMsTUFBSyxDQUFDLEdBQUUsQ0FBQyxDQUFDO0FBQUUsbUJBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsZ0JBQUc7QUFBRSxxQkFBTyxFQUFFLElBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUUsbUJBQUs7QUFBRSxtQkFBSztBQUFFLG1CQUFLO0FBQUUscUJBQVEsSUFBRSxHQUFFLElBQUUsR0FBRSxJQUFFLEdBQUUsS0FBSTtBQUFDLGtCQUFJLElBQUUsRUFBRSxFQUFFLE1BQUksTUFBSSxDQUFDLEdBQUUsSUFBRSxFQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQztBQUFFLG1CQUFHO0FBQUUsdUJBQVEsSUFBRSxHQUFFLElBQUUsR0FBRSxLQUFJO0FBQUMsb0JBQUksSUFBRSxFQUFFLEVBQUUsSUFBRSxNQUFJLENBQUMsR0FBRSxJQUFFLEdBQUcsQ0FBQztBQUFFLHNCQUFJLEtBQUcsT0FBSyxNQUFJLE1BQUksSUFBRSxLQUFHLEdBQUcsR0FBRyxHQUFFLENBQUMsQ0FBQyxHQUFFLEVBQUUsU0FBTyxLQUFHLEVBQUUsS0FBSyxDQUFDO0FBQUEsY0FBQztBQUFDLG1CQUFHO0FBQUEsWUFBQztBQUFDLGNBQUUsRUFBRSxNQUFJLE1BQUksQ0FBQyxJQUFFO0FBQUUsbUJBQU87QUFBQSxVQUFDO0FBQUMsY0FBSSxLQUFHLENBQUMsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLEVBQUUsR0FBRSxLQUFHLENBQUMsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLEVBQUU7QUFBRSxtQkFBUyxHQUFHLEdBQUU7QUFBQyxnQkFBSSxJQUFFLE1BQU0sR0FBRyxDQUFDLElBQUUsQ0FBQztBQUFFLGVBQUcsR0FBRSxHQUFFLEdBQUUsRUFBRSxNQUFNO0FBQUUsbUJBQU87QUFBQSxVQUFDO0FBQ2hmLGNBQUksS0FBRyxDQUFDLEdBQUUsTUFBSTtBQUFDLGNBQUUsRUFBRSxJQUFJLEdBQUUsTUFBSSxDQUFDO0FBQUEsVUFBQztBQUMvQixtQkFBUyxHQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxxQkFBUyxFQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMsbUJBQUksSUFBRSxZQUFVLE9BQU8sSUFBRSxFQUFFLFNBQVMsSUFBRSxLQUFHLElBQUcsRUFBRSxTQUFPO0FBQUcsb0JBQUUsRUFBRSxDQUFDLElBQUU7QUFBRSxxQkFBTztBQUFBLFlBQUM7QUFBQyxxQkFBUyxFQUFFLEdBQUUsR0FBRTtBQUFDLHFCQUFPLEVBQUUsR0FBRSxHQUFFLEdBQUc7QUFBQSxZQUFDO0FBQUMscUJBQVMsRUFBRSxHQUFFLEdBQUU7QUFBQyx1QkFBUyxFQUFFLElBQUc7QUFBQyx1QkFBTyxJQUFFLEtBQUcsS0FBRyxJQUFFLEtBQUcsSUFBRTtBQUFBLGNBQUM7QUFBQyxrQkFBSTtBQUFFLHFCQUFLLElBQUUsRUFBRSxFQUFFLFlBQVksSUFBRSxFQUFFLFlBQVksQ0FBQyxNQUFJLE9BQUssSUFBRSxFQUFFLEVBQUUsU0FBUyxJQUFFLEVBQUUsU0FBUyxDQUFDLE9BQUssSUFBRSxFQUFFLEVBQUUsUUFBUSxJQUFFLEVBQUUsUUFBUSxDQUFDO0FBQUcscUJBQU87QUFBQSxZQUFDO0FBQUMscUJBQVMsRUFBRSxHQUFFO0FBQUMsc0JBQU8sRUFBRSxPQUFPLEdBQUU7QUFBQSxnQkFBQyxLQUFLO0FBQUUseUJBQU8sSUFBSSxLQUFLLEVBQUUsWUFBWSxJQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUEsZ0JBQUUsS0FBSztBQUFFLHlCQUFPO0FBQUEsZ0JBQUUsS0FBSztBQUFFLHlCQUFPLElBQUksS0FBSyxFQUFFLFlBQVksR0FBRSxHQUFFLENBQUM7QUFBQSxnQkFBRSxLQUFLO0FBQUUseUJBQU8sSUFBSTtBQUFBLG9CQUFLLEVBQUUsWUFBWTtBQUFBLG9CQUM1ZjtBQUFBLG9CQUFFO0FBQUEsa0JBQUM7QUFBQSxnQkFBRSxLQUFLO0FBQUUseUJBQU8sSUFBSSxLQUFLLEVBQUUsWUFBWSxHQUFFLEdBQUUsQ0FBQztBQUFBLGdCQUFFLEtBQUs7QUFBRSx5QkFBTyxJQUFJLEtBQUssRUFBRSxZQUFZLElBQUUsR0FBRSxJQUFHLEVBQUU7QUFBQSxnQkFBRSxLQUFLO0FBQUUseUJBQU8sSUFBSSxLQUFLLEVBQUUsWUFBWSxJQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUEsY0FBQztBQUFBLFlBQUM7QUFBQyxxQkFBUyxFQUFFLEdBQUU7QUFBQyxrQkFBSSxJQUFFLEVBQUU7QUFBRyxtQkFBSSxJQUFFLElBQUksS0FBTSxJQUFJLEtBQUssRUFBRSxLQUFHLE1BQUssR0FBRSxDQUFDLEVBQUcsUUFBUSxDQUFDLEdBQUUsSUFBRSxLQUFHO0FBQUMsb0JBQUksSUFBRSxFQUFFLFNBQVMsR0FBRSxLQUFHLEVBQUUsRUFBRSxZQUFZLENBQUMsSUFBRSxLQUFHLElBQUksQ0FBQztBQUFFLG9CQUFHLElBQUUsSUFBRSxFQUFFLFFBQVE7QUFBRSx1QkFBRyxJQUFFLEVBQUUsUUFBUSxJQUFFLEdBQUUsRUFBRSxRQUFRLENBQUMsR0FBRSxLQUFHLElBQUUsRUFBRSxTQUFTLElBQUUsQ0FBQyxLQUFHLEVBQUUsU0FBUyxDQUFDLEdBQUUsRUFBRSxZQUFZLEVBQUUsWUFBWSxJQUFFLENBQUM7QUFBQSxxQkFBTztBQUFDLG9CQUFFLFFBQVEsRUFBRSxRQUFRLElBQUUsQ0FBQztBQUFFO0FBQUEsZ0JBQUs7QUFBQSxjQUFDO0FBQUMsa0JBQUUsSUFBSSxLQUFLLEVBQUUsWUFBWSxJQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUUsa0JBQUUsRUFBRSxJQUFJO0FBQUEsZ0JBQUssRUFBRSxZQUFZO0FBQUEsZ0JBQ25mO0FBQUEsZ0JBQUU7QUFBQSxjQUFDLENBQUM7QUFBRSxrQkFBRSxFQUFFLENBQUM7QUFBRSxxQkFBTyxLQUFHLEVBQUUsR0FBRSxDQUFDLElBQUUsS0FBRyxFQUFFLEdBQUUsQ0FBQyxJQUFFLEVBQUUsWUFBWSxJQUFFLElBQUUsRUFBRSxZQUFZLElBQUUsRUFBRSxZQUFZLElBQUU7QUFBQSxZQUFDO0FBQUMsbUJBQUs7QUFBRSxtQkFBSztBQUFFLG1CQUFLO0FBQUUsbUJBQUs7QUFBRSxnQkFBSSxJQUFFLEVBQUUsRUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDO0FBQUUsZ0JBQUUsRUFBQyxJQUFHLEVBQUUsRUFBRSxNQUFJLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLEVBQUUsSUFBRSxPQUFLLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxFQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsRUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLEVBQUUsSUFBRSxPQUFLLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxFQUFFLElBQUUsT0FBSyxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsRUFBRSxJQUFFLE9BQUssTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLEVBQUUsSUFBRSxPQUFLLE1BQUksQ0FBQyxHQUFFLElBQUcsSUFBRSxHQUFHLENBQUMsSUFBRSxHQUFFO0FBQUUsZ0JBQUUsR0FBRyxDQUFDO0FBQUUsZ0JBQUU7QUFBQSxjQUFDLE1BQUs7QUFBQSxjQUF1QixNQUFLO0FBQUEsY0FBVyxNQUFLO0FBQUEsY0FBVyxNQUFLO0FBQUEsY0FBSyxNQUFLO0FBQUEsY0FBYyxNQUFLO0FBQUEsY0FBUSxNQUFLO0FBQUEsY0FBVyxNQUFLO0FBQUEsY0FDcmYsTUFBSztBQUFBLGNBQVcsT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQVcsT0FBTTtBQUFBLGNBQVcsT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLFlBQUk7QUFBRSxxQkFBUSxLQUFLO0FBQUUsa0JBQUUsRUFBRSxRQUFRLElBQUksT0FBTyxHQUFFLEdBQUcsR0FBRSxFQUFFLENBQUMsQ0FBQztBQUFFLGdCQUFJLElBQUUsMkRBQTJELE1BQU0sR0FBRyxHQUFFLElBQUUsd0ZBQXdGLE1BQU0sR0FBRztBQUFFLGdCQUFFLEVBQUMsTUFBSyxPQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsVUFBVSxHQUFFLENBQUMsR0FBRSxNQUFLLE9BQ3pmLEVBQUUsRUFBRSxFQUFFLEdBQUUsTUFBSyxPQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsVUFBVSxHQUFFLENBQUMsR0FBRSxNQUFLLE9BQUcsRUFBRSxFQUFFLEVBQUUsR0FBRSxNQUFLLE9BQUcsR0FBRyxFQUFFLEtBQUcsUUFBTSxNQUFJLEdBQUUsQ0FBQyxHQUFFLE1BQUssT0FBRyxFQUFFLEVBQUUsSUFBRyxDQUFDLEdBQUUsTUFBSyxPQUFHLEVBQUUsRUFBRSxJQUFHLEdBQUUsR0FBRyxHQUFFLE1BQUssT0FBRyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLEdBQUUsTUFBSyxPQUFHLEVBQUUsQ0FBQyxHQUFFLE1BQUssT0FBRyxFQUFFLEVBQUUsSUFBRyxDQUFDLEdBQUUsTUFBSyxPQUFHO0FBQUMsa0JBQUUsRUFBRTtBQUFHLG1CQUFHLElBQUUsSUFBRSxLQUFHLEtBQUcsTUFBSSxLQUFHO0FBQUkscUJBQU8sRUFBRSxHQUFFLENBQUM7QUFBQSxZQUFDLEdBQUUsTUFBSyxPQUFHO0FBQUMsdUJBQVEsSUFBRSxHQUFFLElBQUUsR0FBRSxLQUFHLEVBQUUsS0FBRyxHQUFFLE1BQUksRUFBRSxFQUFFLEtBQUcsSUFBSSxJQUFFLEtBQUcsSUFBSSxHQUFHO0FBQUU7QUFBQyxxQkFBTyxFQUFFLEVBQUUsS0FBRyxHQUFFLENBQUM7QUFBQSxZQUFDLEdBQUUsTUFBSyxPQUFHLEVBQUUsRUFBRSxLQUFHLEdBQUUsQ0FBQyxHQUFFLE1BQUssT0FBRyxFQUFFLEVBQUUsSUFBRyxDQUFDLEdBQUUsTUFBSyxNQUFJLE1BQUssTUFBSyxPQUFHLEtBQUcsRUFBRSxNQUFJLEtBQUcsRUFBRSxLQUFHLE9BQUssTUFBSyxNQUFLLE9BQUcsRUFB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QUFBRSxrQkFBRSxNQUFJLE1BQUk7QUFBRSx1QkFBUSxJQUFFLEdBQUUsSUFBRSxHQUFFO0FBQUksbUJBQUcsQ0FBQyxJQUFFLEVBQUUsSUFBRSxJQUFFLENBQUMsSUFBRSxFQUFFLElBQUUsSUFBRSxJQUFFLENBQUMsSUFBRSxHQUFHLEVBQUUsSUFBRSxJQUFFLElBQUUsTUFBSSxDQUFDO0FBQUUsa0JBQUUsR0FBRyxDQUFDO0FBQUUsZ0JBQUUsS0FBRztBQUFFLGtCQUFFLEVBQUUsTUFBTSxNQUFLLEVBQUU7QUFBRSxnQkFBRSxLQUFHO0FBQUUscUJBQU87QUFBQSxZQUFDO0FBQUEsWUFDcGYsSUFBRztBQUFBLFlBQUcsSUFBRyxTQUFTLEdBQUU7QUFBQyxtQkFBRyxFQUFFLEdBQUcsTUFBSSxDQUFDLEVBQUUsSUFBSTtBQUFBLFlBQUM7QUFBQSxZQUFFLEdBQUUsU0FBUyxHQUFFLEdBQUUsR0FBRTtBQUFDLHFCQUFLO0FBQUUscUJBQUs7QUFBRSxrQkFBRSxFQUFFLE1BQUksQ0FBQztBQUFFLGtCQUFFLEdBQUcsR0FBRSxXQUFXO0FBQUUsa0JBQUksSUFBRSxDQUFDLEdBQUUsSUFBRSxFQUFFLENBQUM7QUFBRSxnQkFBRSxFQUFFLE1BQUksTUFBSSxDQUFDLElBQUU7QUFBRSxxQkFBTyxFQUFFLFdBQVcsR0FBRSxDQUFDO0FBQUEsWUFBQztBQUFBLFlBQUUsR0FBRSxTQUFTLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLHFCQUFLO0FBQUUscUJBQUs7QUFBRSxxQkFBSztBQUFFLGtCQUFFLEdBQUcsTUFBSSxDQUFDO0FBQUUsa0JBQUUsRUFBRSxNQUFJLENBQUM7QUFBRSxrQkFBRSxHQUFHLENBQUM7QUFBRSxrQkFBSSxJQUFFLENBQUM7QUFBRSxnQkFBRSxFQUFFLE1BQUksTUFBSSxDQUFDLElBQUUsRUFBRSxDQUFDO0FBQUUscUJBQU8sRUFBRSxHQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUEsWUFBQztBQUFBLFlBQUUsR0FBRSxTQUFTLEdBQUUsR0FBRSxHQUFFLEdBQUU7QUFBQyxxQkFB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V0FBV0EsY0FBYSxDQUFDO0FBQ3pDLFVBQUksTUFBMkI7QUFDN0Isd0JBQWdCLFNBQVNBLGNBQWEsQ0FBQztBQUFBLE1BQ3pDO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFFQSxTQUFPLGVBQWVDLEtBQUksVUFBVSxPQUFPLEVBQUMsT0FBT0MsVUFBUyxZQUFZLEtBQUksQ0FBQzsiLAogICJuYW1lcyI6IFsiaSIsICJlbnYiLCAiVGVuc29yIiwgIlRlbnNvciIsICJJbmZlcmVuY2VTZXNzaW9uIiwgIlRlbnNvciIsICJUcmFpbmluZ1Nlc3Npb24iLCAiSW5mZXJlbmNlU2Vzc2lvbiIsICJUZW5zb3IiLCAiVHJhaW5pbmdTZXNzaW9uIiwgImVudiIsICJqb2luIiwgImNwdXMiLCAid2FzbSIsICJ3YXNtIiwgIndhc20iLCAiZW52IiwgIndhc20iLCAidGVuc29yIiwgImVycm9yQ29kZSIsICJpIiwgImluaXRpYWxpemluZyIsICJpbml0aWFsaXplZCIsICJhYm9ydGVkIiwgImNvcHlGcm9tRXh0ZXJuYWxCdWZmZXIiLCAiY3JlYXRlU2Vzc2lvbiIsICJyZWxlYXNlU2Vzc2lvbiIsICJydW4iLCAiZW5kUHJvZmlsaW5nIiwgImVudiIsICJyZWFkRmlsZSIsICJUZW5zb3IiLCAiY29weUZyb21FeHRlcm5hbEJ1ZmZlciIsICJyZWFkRmlsZSIsICJjcmVhdGVTZXNzaW9uIiwgInJlbGVhc2VTZXNzaW9uIiwgInJ1biIsICJlbmRQcm9maWxpbmciLCAiZW52IiwgIkluZmVyZW5jZVNlc3Npb24iLCAiVGVuc29yIiwgIlRyYWluaW5nU2Vzc2lvbiIsICJlbnYiLCAidmVyc2lvbiIsICJ3YXNtQmFja2VuZCIsICJlbnYiLCAidmVyc2lvbiJdCn0K
