/*!
 * ONNX Runtime Web v1.17.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";
var ort = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // web/node_modules/onnxruntime-common/dist/esm/backend-impl.js
  var backends, backendsSortedByPriority, registerBackend, resolveBackend;
  var init_backend_impl = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/backend-impl.js"() {
      backends = /* @__PURE__ */ new Map();
      backendsSortedByPriority = [];
      registerBackend = (name, backend, priority) => {
        if (backend && typeof backend.init === "function" && typeof backend.createInferenceSessionHandler === "function") {
          const currentBackend = backends.get(name);
          if (currentBackend === void 0) {
            backends.set(name, { backend, priority });
          } else if (currentBackend.priority > priority) {
            return;
          } else if (currentBackend.priority === priority) {
            if (currentBackend.backend !== backend) {
              throw new Error(`cannot register backend "${name}" using priority ${priority}`);
            }
          }
          if (priority >= 0) {
            const i = backendsSortedByPriority.indexOf(name);
            if (i !== -1) {
              backendsSortedByPriority.splice(i, 1);
            }
            for (let i2 = 0; i2 < backendsSortedByPriority.length; i2++) {
              if (backends.get(backendsSortedByPriority[i2]).priority <= priority) {
                backendsSortedByPriority.splice(i2, 0, name);
                return;
              }
            }
            backendsSortedByPriority.push(name);
          }
          return;
        }
        throw new TypeError("not a valid backend");
      };
      resolveBackend = async (backendHints) => {
        const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;
        const errors = [];
        for (const backendName of backendNames) {
          const backendInfo = backends.get(backendName);
          if (backendInfo) {
            if (backendInfo.initialized) {
              return backendInfo.backend;
            } else if (backendInfo.aborted) {
              continue;
            }
            const isInitializing = !!backendInfo.initPromise;
            try {
              if (!isInitializing) {
                backendInfo.initPromise = backendInfo.backend.init();
              }
              await backendInfo.initPromise;
              backendInfo.initialized = true;
              return backendInfo.backend;
            } catch (e) {
              if (!isInitializing) {
                errors.push({ name: backendName, err: e });
              }
              backendInfo.aborted = true;
            } finally {
              delete backendInfo.initPromise;
            }
          }
        }
        throw new Error(`no available backend found. ERR: ${errors.map((e) => `[${e.name}] ${e.err}`).join(", ")}`);
      };
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/backend.js
  var init_backend = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/backend.js"() {
      init_backend_impl();
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/version.js
  var version;
  var init_version = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/version.js"() {
      version = "1.17.0";
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/env-impl.js
  var logLevelValue, env;
  var init_env_impl = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/env-impl.js"() {
      init_version();
      logLevelValue = "warning";
      env = {
        wasm: {},
        webgl: {},
        webgpu: {},
        versions: { common: version },
        set logLevel(value) {
          if (value === void 0) {
            return;
          }
          if (typeof value !== "string" || ["verbose", "info", "warning", "error", "fatal"].indexOf(value) === -1) {
            throw new Error(`Unsupported logging level: ${value}`);
          }
          logLevelValue = value;
        },
        get logLevel() {
          return logLevelValue;
        }
      };
      Object.defineProperty(env, "logLevel", { enumerable: true });
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/env.js
  var env2;
  var init_env = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/env.js"() {
      init_env_impl();
      env2 = env;
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js
  var tensorToDataURL, tensorToImageData;
  var init_tensor_conversion_impl = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js"() {
      tensorToDataURL = (tensor, options) => {
        const canvas = document.createElement("canvas");
        canvas.width = tensor.dims[3];
        canvas.height = tensor.dims[2];
        const pixels2DContext = canvas.getContext("2d");
        if (pixels2DContext != null) {
          let width;
          let height;
          if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
            width = tensor.dims[2];
            height = tensor.dims[3];
          } else {
            width = tensor.dims[3];
            height = tensor.dims[2];
          }
          const inputformat = options?.format !== void 0 ? options.format : "RGB";
          const norm = options?.norm;
          let normMean;
          let normBias;
          if (norm === void 0 || norm.mean === void 0) {
            normMean = [255, 255, 255, 255];
          } else {
            if (typeof norm.mean === "number") {
              normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
            } else {
              normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];
              if (norm.mean[3] !== void 0) {
                normMean[3] = norm.mean[3];
              }
            }
          }
          if (norm === void 0 || norm.bias === void 0) {
            normBias = [0, 0, 0, 0];
          } else {
            if (typeof norm.bias === "number") {
              normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
            } else {
              normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
              if (norm.bias[3] !== void 0) {
                normBias[3] = norm.bias[3];
              }
            }
          }
          const stride = height * width;
          let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
          if (inputformat === "RGBA") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
            aTensorPointer = stride * 3;
          } else if (inputformat === "RGB") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
          } else if (inputformat === "RBG") {
            rTensorPointer = 0;
            bTensorPointer = stride;
            gTensorPointer = stride * 2;
          }
          for (let i = 0; i < height; i++) {
            for (let j = 0; j < width; j++) {
              const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
              const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
              const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
              const A = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
              pixels2DContext.fillStyle = "rgba(" + R + "," + G + "," + B + "," + A + ")";
              pixels2DContext.fillRect(j, i, 1, 1);
            }
          }
          return canvas.toDataURL();
        } else {
          throw new Error("Can not access image data");
        }
      };
      tensorToImageData = (tensor, options) => {
        const pixels2DContext = document.createElement("canvas").getContext("2d");
        let image;
        if (pixels2DContext != null) {
          let width;
          let height;
          let channels;
          if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
            width = tensor.dims[2];
            height = tensor.dims[1];
            channels = tensor.dims[3];
          } else {
            width = tensor.dims[3];
            height = tensor.dims[2];
            channels = tensor.dims[1];
          }
          const inputformat = options !== void 0 ? options.format !== void 0 ? options.format : "RGB" : "RGB";
          const norm = options?.norm;
          let normMean;
          let normBias;
          if (norm === void 0 || norm.mean === void 0) {
            normMean = [255, 255, 255, 255];
          } else {
            if (typeof norm.mean === "number") {
              normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
            } else {
              normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];
              if (norm.mean[3] !== void 0) {
                normMean[3] = norm.mean[3];
              }
            }
          }
          if (norm === void 0 || norm.bias === void 0) {
            normBias = [0, 0, 0, 0];
          } else {
            if (typeof norm.bias === "number") {
              normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
            } else {
              normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
              if (norm.bias[3] !== void 0) {
                normBias[3] = norm.bias[3];
              }
            }
          }
          const stride = height * width;
          if (options !== void 0) {
            if (options.format !== void 0 && (channels === 4 && options.format !== "RGBA") || channels === 3 && (options.format !== "RGB" && options.format !== "BGR")) {
              throw new Error("Tensor format doesn't match input tensor dims");
            }
          }
          const step = 4;
          let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
          let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
          if (inputformat === "RGBA") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
            aTensorPointer = stride * 3;
          } else if (inputformat === "RGB") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
          } else if (inputformat === "RBG") {
            rTensorPointer = 0;
            bTensorPointer = stride;
            gTensorPointer = stride * 2;
          }
          image = pixels2DContext.createImageData(width, height);
          for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {
            image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
            image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
            image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
            image.data[aImagePointer] = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
          }
        } else {
          throw new Error("Can not access image data");
        }
        return image;
      };
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js
  var bufferToTensor, tensorFromImage, tensorFromTexture, tensorFromGpuBuffer, tensorFromPinnedBuffer;
  var init_tensor_factory_impl = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js"() {
      init_tensor_impl();
      bufferToTensor = (buffer, options) => {
        if (buffer === void 0) {
          throw new Error("Image buffer must be defined");
        }
        if (options.height === void 0 || options.width === void 0) {
          throw new Error("Image height and width must be defined");
        }
        if (options.tensorLayout === "NHWC") {
          throw new Error("NHWC Tensor layout is not supported yet");
        }
        const { height, width } = options;
        const norm = options.norm ?? { mean: 255, bias: 0 };
        let normMean;
        let normBias;
        if (typeof norm.mean === "number") {
          normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
        } else {
          normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];
        }
        if (typeof norm.bias === "number") {
          normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
        } else {
          normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];
        }
        const inputformat = options.format !== void 0 ? options.format : "RGBA";
        const outputformat = options.tensorFormat !== void 0 ? options.tensorFormat !== void 0 ? options.tensorFormat : "RGB" : "RGB";
        const stride = height * width;
        const float32Data = outputformat === "RGBA" ? new Float32Array(stride * 4) : new Float32Array(stride * 3);
        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
        if (inputformat === "RGB") {
          step = 3;
          rImagePointer = 0;
          gImagePointer = 1;
          bImagePointer = 2;
          aImagePointer = -1;
        }
        if (outputformat === "RGBA") {
          aTensorPointer = stride * 3;
        } else if (outputformat === "RBG") {
          rTensorPointer = 0;
          bTensorPointer = stride;
          gTensorPointer = stride * 2;
        } else if (outputformat === "BGR") {
          bTensorPointer = 0;
          gTensorPointer = stride;
          rTensorPointer = stride * 2;
        }
        for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {
          float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];
          float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];
          float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];
          if (aTensorPointer !== -1 && aImagePointer !== -1) {
            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];
          }
        }
        const outputTensor = outputformat === "RGBA" ? new Tensor("float32", float32Data, [1, 4, height, width]) : new Tensor("float32", float32Data, [1, 3, height, width]);
        return outputTensor;
      };
      tensorFromImage = async (image, options) => {
        const isHTMLImageEle = typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement;
        const isImageDataEle = typeof ImageData !== "undefined" && image instanceof ImageData;
        const isImageBitmap = typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap;
        const isString = typeof image === "string";
        let data;
        let bufferToTensorOptions = options ?? {};
        if (isHTMLImageEle) {
          const canvas = document.createElement("canvas");
          canvas.width = image.width;
          canvas.height = image.height;
          const pixels2DContext = canvas.getContext("2d");
          if (pixels2DContext != null) {
            let height = image.height;
            let width = image.width;
            if (options !== void 0 && options.resizedHeight !== void 0 && options.resizedWidth !== void 0) {
              height = options.resizedHeight;
              width = options.resizedWidth;
            }
            if (options !== void 0) {
              bufferToTensorOptions = options;
              if (options.tensorFormat !== void 0) {
                throw new Error("Image input config format must be RGBA for HTMLImageElement");
              } else {
                bufferToTensorOptions.tensorFormat = "RGBA";
              }
              bufferToTensorOptions.height = height;
              bufferToTensorOptions.width = width;
            } else {
              bufferToTensorOptions.tensorFormat = "RGBA";
              bufferToTensorOptions.height = height;
              bufferToTensorOptions.width = width;
            }
            pixels2DContext.drawImage(image, 0, 0);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
          } else {
            throw new Error("Can not access image data");
          }
        } else if (isImageDataEle) {
          let height;
          let width;
          if (options !== void 0 && options.resizedWidth !== void 0 && options.resizedHeight !== void 0) {
            height = options.resizedHeight;
            width = options.resizedWidth;
          } else {
            height = image.height;
            width = image.width;
          }
          if (options !== void 0) {
            bufferToTensorOptions = options;
          }
          bufferToTensorOptions.format = "RGBA";
          bufferToTensorOptions.height = height;
          bufferToTensorOptions.width = width;
          if (options !== void 0) {
            const tempCanvas = document.createElement("canvas");
            tempCanvas.width = width;
            tempCanvas.height = height;
            const pixels2DContext = tempCanvas.getContext("2d");
            if (pixels2DContext != null) {
              pixels2DContext.putImageData(image, 0, 0);
              data = pixels2DContext.getImageData(0, 0, width, height).data;
            } else {
              throw new Error("Can not access image data");
            }
          } else {
            data = image.data;
          }
        } else if (isImageBitmap) {
          if (options === void 0) {
            throw new Error("Please provide image config with format for Imagebitmap");
          }
          const canvas = document.createElement("canvas");
          canvas.width = image.width;
          canvas.height = image.height;
          const pixels2DContext = canvas.getContext("2d");
          if (pixels2DContext != null) {
            const height = image.height;
            const width = image.width;
            pixels2DContext.drawImage(image, 0, 0, width, height);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
            return bufferToTensor(data, bufferToTensorOptions);
          } else {
            throw new Error("Can not access image data");
          }
        } else if (isString) {
          return new Promise((resolve, reject) => {
            const canvas = document.createElement("canvas");
            const context = canvas.getContext("2d");
            if (!image || !context) {
              return reject();
            }
            const newImage = new Image();
            newImage.crossOrigin = "Anonymous";
            newImage.src = image;
            newImage.onload = () => {
              canvas.width = newImage.width;
              canvas.height = newImage.height;
              context.drawImage(newImage, 0, 0, canvas.width, canvas.height);
              const img = context.getImageData(0, 0, canvas.width, canvas.height);
              bufferToTensorOptions.height = canvas.height;
              bufferToTensorOptions.width = canvas.width;
              resolve(bufferToTensor(img.data, bufferToTensorOptions));
            };
          });
        } else {
          throw new Error("Input data provided is not supported - aborted tensor creation");
        }
        if (data !== void 0) {
          return bufferToTensor(data, bufferToTensorOptions);
        } else {
          throw new Error("Input data provided is not supported - aborted tensor creation");
        }
      };
      tensorFromTexture = (texture, options) => {
        const { width, height, download, dispose } = options;
        const dims = [1, height, width, 4];
        return new Tensor({ location: "texture", type: "float32", texture, dims, download, dispose });
      };
      tensorFromGpuBuffer = (gpuBuffer, options) => {
        const { dataType, dims, download, dispose } = options;
        return new Tensor({ location: "gpu-buffer", type: dataType ?? "float32", gpuBuffer, dims, download, dispose });
      };
      tensorFromPinnedBuffer = (type, buffer, dims) => new Tensor({ location: "cpu-pinned", type, data: buffer, dims: dims ?? [buffer.length] });
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js
  var NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP, NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, isBigIntChecked, checkBigInt;
  var init_tensor_impl_type_mapping = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js"() {
      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = /* @__PURE__ */ new Map([
        ["float32", Float32Array],
        ["uint8", Uint8Array],
        ["int8", Int8Array],
        ["uint16", Uint16Array],
        ["float16", Uint16Array],
        ["int16", Int16Array],
        ["int32", Int32Array],
        ["bool", Uint8Array],
        ["float64", Float64Array],
        ["uint32", Uint32Array]
      ]);
      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = /* @__PURE__ */ new Map([
        [Float32Array, "float32"],
        [Uint8Array, "uint8"],
        [Int8Array, "int8"],
        [Uint16Array, "uint16"],
        [Int16Array, "int16"],
        [Int32Array, "int32"],
        [Float64Array, "float64"],
        [Uint32Array, "uint32"]
      ]);
      isBigIntChecked = false;
      checkBigInt = () => {
        if (!isBigIntChecked) {
          isBigIntChecked = true;
          const isBigInt64ArrayAvailable = typeof BigInt64Array !== "undefined" && typeof BigInt64Array.from === "function";
          const isBigUint64ArrayAvailable = typeof BigUint64Array !== "undefined" && typeof BigUint64Array.from === "function";
          if (isBigInt64ArrayAvailable) {
            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("int64", BigInt64Array);
            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, "int64");
          }
          if (isBigUint64ArrayAvailable) {
            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("uint64", BigUint64Array);
            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, "uint64");
          }
        }
      };
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js
  var calculateSize, tensorReshape;
  var init_tensor_utils_impl = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js"() {
      init_tensor_impl();
      calculateSize = (dims) => {
        let size = 1;
        for (let i = 0; i < dims.length; i++) {
          const dim = dims[i];
          if (typeof dim !== "number" || !Number.isSafeInteger(dim)) {
            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);
          }
          if (dim < 0) {
            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);
          }
          size *= dim;
        }
        return size;
      };
      tensorReshape = (tensor, dims) => {
        switch (tensor.location) {
          case "cpu":
            return new Tensor(tensor.type, tensor.data, dims);
          case "cpu-pinned":
            return new Tensor({
              location: "cpu-pinned",
              data: tensor.data,
              type: tensor.type,
              dims
            });
          case "texture":
            return new Tensor({
              location: "texture",
              texture: tensor.texture,
              type: tensor.type,
              dims
            });
          case "gpu-buffer":
            return new Tensor({
              location: "gpu-buffer",
              gpuBuffer: tensor.gpuBuffer,
              type: tensor.type,
              dims
            });
          default:
            throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);
        }
      };
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/tensor-impl.js
  var Tensor;
  var init_tensor_impl = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/tensor-impl.js"() {
      init_tensor_conversion_impl();
      init_tensor_factory_impl();
      init_tensor_impl_type_mapping();
      init_tensor_utils_impl();
      Tensor = class {
        /**
         * implementation.
         */
        constructor(arg0, arg1, arg2) {
          checkBigInt();
          let type;
          let dims;
          if (typeof arg0 === "object" && "location" in arg0) {
            this.dataLocation = arg0.location;
            type = arg0.type;
            dims = arg0.dims;
            switch (arg0.location) {
              case "cpu-pinned": {
                const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);
                if (!expectedTypedArrayConstructor) {
                  throw new TypeError(`unsupported type "${type}" to create tensor from pinned buffer`);
                }
                if (!(arg0.data instanceof expectedTypedArrayConstructor)) {
                  throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);
                }
                this.cpuData = arg0.data;
                break;
              }
              case "texture": {
                if (type !== "float32") {
                  throw new TypeError(`unsupported type "${type}" to create tensor from texture`);
                }
                this.gpuTextureData = arg0.texture;
                this.downloader = arg0.download;
                this.disposer = arg0.dispose;
                break;
              }
              case "gpu-buffer": {
                if (type !== "float32" && type !== "float16" && type !== "int32" && type !== "int64" && type !== "uint32" && type !== "bool") {
                  throw new TypeError(`unsupported type "${type}" to create tensor from gpu buffer`);
                }
                this.gpuBufferData = arg0.gpuBuffer;
                this.downloader = arg0.download;
                this.disposer = arg0.dispose;
                break;
              }
              default:
                throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);
            }
          } else {
            let data;
            let maybeDims;
            if (typeof arg0 === "string") {
              type = arg0;
              maybeDims = arg2;
              if (arg0 === "string") {
                if (!Array.isArray(arg1)) {
                  throw new TypeError("A string tensor's data must be a string array.");
                }
                data = arg1;
              } else {
                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);
                if (typedArrayConstructor === void 0) {
                  throw new TypeError(`Unsupported tensor type: ${arg0}.`);
                }
                if (Array.isArray(arg1)) {
                  if (arg0 === "float16") {
                    throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");
                  } else if (arg0 === "uint64" || arg0 === "int64") {
                    data = typedArrayConstructor.from(arg1, BigInt);
                  } else {
                    data = typedArrayConstructor.from(arg1);
                  }
                } else if (arg1 instanceof typedArrayConstructor) {
                  data = arg1;
                } else {
                  throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);
                }
              }
            } else {
              maybeDims = arg1;
              if (Array.isArray(arg0)) {
                if (arg0.length === 0) {
                  throw new TypeError("Tensor type cannot be inferred from an empty array.");
                }
                const firstElementType = typeof arg0[0];
                if (firstElementType === "string") {
                  type = "string";
                  data = arg0;
                } else if (firstElementType === "boolean") {
                  type = "bool";
                  data = Uint8Array.from(arg0);
                } else {
                  throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);
                }
              } else {
                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);
                if (mappedType === void 0) {
                  throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);
                }
                type = mappedType;
                data = arg0;
              }
            }
            if (maybeDims === void 0) {
              maybeDims = [data.length];
            } else if (!Array.isArray(maybeDims)) {
              throw new TypeError("A tensor's dims must be a number array");
            }
            dims = maybeDims;
            this.cpuData = data;
            this.dataLocation = "cpu";
          }
          const size = calculateSize(dims);
          if (this.cpuData && size !== this.cpuData.length) {
            throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);
          }
          this.type = type;
          this.dims = dims;
          this.size = size;
        }
        // #endregion
        // #region factory
        static async fromImage(image, options) {
          return tensorFromImage(image, options);
        }
        static fromTexture(texture, options) {
          return tensorFromTexture(texture, options);
        }
        static fromGpuBuffer(gpuBuffer, options) {
          return tensorFromGpuBuffer(gpuBuffer, options);
        }
        static fromPinnedBuffer(type, buffer, dims) {
          return tensorFromPinnedBuffer(type, buffer, dims);
        }
        // #endregion
        // #region conversions
        toDataURL(options) {
          return tensorToDataURL(this, options);
        }
        toImageData(options) {
          return tensorToImageData(this, options);
        }
        // #endregion
        // #region properties
        get data() {
          this.ensureValid();
          if (!this.cpuData) {
            throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");
          }
          return this.cpuData;
        }
        get location() {
          return this.dataLocation;
        }
        get texture() {
          this.ensureValid();
          if (!this.gpuTextureData) {
            throw new Error("The data is not stored as a WebGL texture.");
          }
          return this.gpuTextureData;
        }
        get gpuBuffer() {
          this.ensureValid();
          if (!this.gpuBufferData) {
            throw new Error("The data is not stored as a WebGPU buffer.");
          }
          return this.gpuBufferData;
        }
        // #endregion
        // #region methods
        async getData(releaseData) {
          this.ensureValid();
          switch (this.dataLocation) {
            case "cpu":
            case "cpu-pinned":
              return this.data;
            case "texture":
            case "gpu-buffer": {
              if (!this.downloader) {
                throw new Error("The current tensor is not created with a specified data downloader.");
              }
              if (this.isDownloading) {
                throw new Error("The current tensor is being downloaded.");
              }
              try {
                this.isDownloading = true;
                const data = await this.downloader();
                this.downloader = void 0;
                this.dataLocation = "cpu";
                this.cpuData = data;
                if (releaseData && this.disposer) {
                  this.disposer();
                  this.disposer = void 0;
                }
                return data;
              } finally {
                this.isDownloading = false;
              }
            }
            default:
              throw new Error(`cannot get data from location: ${this.dataLocation}`);
          }
        }
        dispose() {
          if (this.isDownloading) {
            throw new Error("The current tensor is being downloaded.");
          }
          if (this.disposer) {
            this.disposer();
            this.disposer = void 0;
          }
          this.cpuData = void 0;
          this.gpuTextureData = void 0;
          this.gpuBufferData = void 0;
          this.downloader = void 0;
          this.isDownloading = void 0;
          this.dataLocation = "none";
        }
        // #endregion
        // #region tensor utilities
        ensureValid() {
          if (this.dataLocation === "none") {
            throw new Error("The tensor is disposed.");
          }
        }
        reshape(dims) {
          this.ensureValid();
          if (this.downloader || this.disposer) {
            throw new Error("Cannot reshape a tensor that owns GPU resource.");
          }
          return tensorReshape(this, dims);
        }
      };
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/tensor.js
  var Tensor2;
  var init_tensor = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/tensor.js"() {
      init_tensor_impl();
      Tensor2 = Tensor;
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/inference-session-impl.js
  var InferenceSession;
  var init_inference_session_impl = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/inference-session-impl.js"() {
      init_backend_impl();
      init_tensor();
      InferenceSession = class _InferenceSession {
        constructor(handler) {
          this.handler = handler;
        }
        async run(feeds, arg1, arg2) {
          const fetches = {};
          let options = {};
          if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
            throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
          }
          let isFetchesEmpty = true;
          if (typeof arg1 === "object") {
            if (arg1 === null) {
              throw new TypeError("Unexpected argument[1]: cannot be null.");
            }
            if (arg1 instanceof Tensor2) {
              throw new TypeError("'fetches' cannot be a Tensor");
            }
            if (Array.isArray(arg1)) {
              if (arg1.length === 0) {
                throw new TypeError("'fetches' cannot be an empty array.");
              }
              isFetchesEmpty = false;
              for (const name of arg1) {
                if (typeof name !== "string") {
                  throw new TypeError("'fetches' must be a string array or an object.");
                }
                if (this.outputNames.indexOf(name) === -1) {
                  throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
                }
                fetches[name] = null;
              }
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              let isFetches = false;
              const arg1Keys = Object.getOwnPropertyNames(arg1);
              for (const name of this.outputNames) {
                if (arg1Keys.indexOf(name) !== -1) {
                  const v = arg1[name];
                  if (v === null || v instanceof Tensor2) {
                    isFetches = true;
                    isFetchesEmpty = false;
                    fetches[name] = v;
                  }
                }
              }
              if (isFetches) {
                if (typeof arg2 === "object" && arg2 !== null) {
                  options = arg2;
                } else if (typeof arg2 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else {
                options = arg1;
              }
            }
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
          }
          for (const name of this.inputNames) {
            if (typeof feeds[name] === "undefined") {
              throw new Error(`input '${name}' is missing in 'feeds'.`);
            }
          }
          if (isFetchesEmpty) {
            for (const name of this.outputNames) {
              fetches[name] = null;
            }
          }
          const results = await this.handler.run(feeds, fetches, options);
          const returnValue = {};
          for (const key in results) {
            if (Object.hasOwnProperty.call(results, key)) {
              const result = results[key];
              if (result instanceof Tensor2) {
                returnValue[key] = result;
              } else {
                returnValue[key] = new Tensor2(result.type, result.data, result.dims);
              }
            }
          }
          return returnValue;
        }
        async release() {
          return this.handler.dispose();
        }
        static async create(arg0, arg1, arg2, arg3) {
          let filePathOrUint8Array;
          let options = {};
          if (typeof arg0 === "string") {
            filePathOrUint8Array = arg0;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else if (arg0 instanceof Uint8Array) {
            filePathOrUint8Array = arg0;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else if (arg0 instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && arg0 instanceof SharedArrayBuffer) {
            const buffer = arg0;
            let byteOffset = 0;
            let byteLength = arg0.byteLength;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 === "number") {
              byteOffset = arg1;
              if (!Number.isSafeInteger(byteOffset)) {
                throw new RangeError("'byteOffset' must be an integer.");
              }
              if (byteOffset < 0 || byteOffset >= buffer.byteLength) {
                throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);
              }
              byteLength = arg0.byteLength - byteOffset;
              if (typeof arg2 === "number") {
                byteLength = arg2;
                if (!Number.isSafeInteger(byteLength)) {
                  throw new RangeError("'byteLength' must be an integer.");
                }
                if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {
                  throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);
                }
                if (typeof arg3 === "object" && arg3 !== null) {
                  options = arg3;
                } else if (typeof arg3 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'byteLength' must be a number.");
              }
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);
          } else {
            throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
          }
          const eps = options.executionProviders || [];
          const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
          const backend = await resolveBackend(backendHints);
          const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, options);
          return new _InferenceSession(handler);
        }
        startProfiling() {
          this.handler.startProfiling();
        }
        endProfiling() {
          this.handler.endProfiling();
        }
        get inputNames() {
          return this.handler.inputNames;
        }
        get outputNames() {
          return this.handler.outputNames;
        }
      };
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/inference-session.js
  var InferenceSession2;
  var init_inference_session = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/inference-session.js"() {
      init_inference_session_impl();
      InferenceSession2 = InferenceSession;
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/onnx-value.js
  var init_onnx_value = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/onnx-value.js"() {
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/training-session-impl.js
  var noBackendErrMsg, TrainingSession;
  var init_training_session_impl = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/training-session-impl.js"() {
      init_backend_impl();
      init_tensor();
      noBackendErrMsg = "Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.";
      TrainingSession = class _TrainingSession {
        constructor(handler) {
          this.handler = handler;
        }
        get inputNames() {
          return this.handler.inputNames;
        }
        get outputNames() {
          return this.handler.outputNames;
        }
        static async create(trainingOptions, sessionOptions) {
          const evalModel = trainingOptions.evalModel || "";
          const optimizerModel = trainingOptions.optimizerModel || "";
          const options = sessionOptions || {};
          const eps = options.executionProviders || [];
          const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
          const backend = await resolveBackend(backendHints);
          if (backend.createTrainingSessionHandler) {
            const handler = await backend.createTrainingSessionHandler(trainingOptions.checkpointState, trainingOptions.trainModel, evalModel, optimizerModel, options);
            return new _TrainingSession(handler);
          } else {
            throw new Error(noBackendErrMsg);
          }
        }
        /**
         * Helper function for runTrainStep and future runStep methods that handles the type-narrowing conversion from
         * the given parameters to SessionHandler.FetchesType and RunOptions.
         *
         * @param feeds the required input
         * @param arg1 narrowed & converted into the SessionHandler.FetchesType or RunOptions object
         * @param arg2 optional RunOptions object.
         * @returns
         */
        typeNarrowingForRunStep(feeds, arg1, arg2) {
          const fetches = {};
          let options = {};
          if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
            throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
          }
          let isFetchesEmpty = true;
          if (typeof arg1 === "object") {
            if (arg1 === null) {
              throw new TypeError("Unexpected argument[1]: cannot be null.");
            }
            if (arg1 instanceof Tensor2) {
              throw new TypeError("'fetches' cannot be a Tensor");
            }
            if (Array.isArray(arg1)) {
              if (arg1.length === 0) {
                throw new TypeError("'fetches' cannot be an empty array.");
              }
              isFetchesEmpty = false;
              for (const name of arg1) {
                if (typeof name !== "string") {
                  throw new TypeError("'fetches' must be a string array or an object.");
                }
                if (this.outputNames.indexOf(name) === -1) {
                  throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
                }
                fetches[name] = null;
              }
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              let isFetches = false;
              const arg1Keys = Object.getOwnPropertyNames(arg1);
              for (const name of this.outputNames) {
                if (arg1Keys.indexOf(name) !== -1) {
                  const v = arg1[name];
                  if (v === null || v instanceof Tensor2) {
                    isFetches = true;
                    isFetchesEmpty = false;
                    fetches[name] = v;
                  }
                }
              }
              if (isFetches) {
                if (typeof arg2 === "object" && arg2 !== null) {
                  options = arg2;
                } else if (typeof arg2 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else {
                options = arg1;
              }
            }
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
          }
          for (const name of this.inputNames) {
            if (typeof feeds[name] === "undefined") {
              throw new Error(`input '${name}' is missing in 'feeds'.`);
            }
          }
          if (isFetchesEmpty) {
            for (const name of this.outputNames) {
              fetches[name] = null;
            }
          }
          return [fetches, options];
        }
        /**
         * Helper method for runTrainStep and any other runStep methods. Takes the ReturnType result from the SessionHandler
         * and changes it into a map of Tensors.
         *
         * @param results
         * @returns
         */
        convertHandlerReturnTypeToMapOfTensors(results) {
          const returnValue = {};
          for (const key in results) {
            if (Object.hasOwnProperty.call(results, key)) {
              const result = results[key];
              if (result instanceof Tensor2) {
                returnValue[key] = result;
              } else {
                returnValue[key] = new Tensor2(result.type, result.data, result.dims);
              }
            }
          }
          return returnValue;
        }
        async runTrainStep(feeds, arg1, arg2) {
          const [fetches, options] = this.typeNarrowingForRunStep(feeds, arg1, arg2);
          const results = await this.handler.runTrainStep(feeds, fetches, options);
          return this.convertHandlerReturnTypeToMapOfTensors(results);
        }
        async loadParametersBuffer(_array, _trainableOnly) {
          throw new Error("Method not implemented.");
        }
        async getContiguousParameters(_trainableOnly) {
          throw new Error("Method not implemented.");
        }
        async release() {
          return this.handler.dispose();
        }
      };
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/training-session.js
  var TrainingSession2;
  var init_training_session = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/training-session.js"() {
      init_training_session_impl();
      TrainingSession2 = TrainingSession;
    }
  });

  // web/node_modules/onnxruntime-common/dist/esm/index.js
  var esm_exports = {};
  __export(esm_exports, {
    InferenceSession: () => InferenceSession2,
    Tensor: () => Tensor2,
    TrainingSession: () => TrainingSession2,
    env: () => env2,
    registerBackend: () => registerBackend
  });
  var init_esm = __esm({
    "web/node_modules/onnxruntime-common/dist/esm/index.js"() {
      init_backend();
      init_env();
      init_inference_session();
      init_tensor();
      init_onnx_value();
      init_training_session();
    }
  });

  // nodejs-ignore:node:os
  var cpus;
  var init_node_os = __esm({
    "nodejs-ignore:node:os"() {
      cpus = void 0;
    }
  });

  // nodejs-ignore:node:path
  var join;
  var init_node_path = __esm({
    "nodejs-ignore:node:path"() {
      join = void 0;
    }
  });

  // nodejs-ignore:fs
  var fs_exports = {};
  __export(fs_exports, {
    readFile: () => readFile
  });
  var readFile;
  var init_fs = __esm({
    "nodejs-ignore:fs"() {
      readFile = void 0;
    }
  });

  // nodejs-ignore:path
  var path_exports = {};
  __export(path_exports, {
    join: () => join2
  });
  var join2;
  var init_path = __esm({
    "nodejs-ignore:path"() {
      join2 = void 0;
    }
  });

  // web/lib/wasm/binding/ort-wasm.js
  var require_ort_wasm = __commonJS({
    "web/lib/wasm/binding/ort-wasm.js"(exports, module) {
      "use strict";
      var ortWasm = (() => {
        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
        if (typeof __filename !== "undefined")
          _scriptDir = _scriptDir || __filename;
        return function(moduleArg = {}) {
          var e = moduleArg, aa, l;
          e.ready = new Promise((a, b) => {
            aa = a;
            l = b;
          });
          var ba = Object.assign({}, e), m = "./this.program", ca = "object" == typeof window, r = "function" == typeof importScripts, da = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, w = "", x, y, z;
          if (da) {
            var fs = (init_fs(), __toCommonJS(fs_exports)), B = (init_path(), __toCommonJS(path_exports));
            w = r ? B.dirname(w) + "/" : __dirname + "/";
            x = (a, b) => {
              a = a.startsWith("file://") ? new URL(a) : B.normalize(a);
              return fs.readFileSync(a, b ? void 0 : "utf8");
            };
            z = (a) => {
              a = x(a, true);
              a.buffer || (a = new Uint8Array(a));
              return a;
            };
            y = (a, b, c, d = true) => {
              a = a.startsWith("file://") ? new URL(a) : B.normalize(a);
              fs.readFile(a, d ? void 0 : "utf8", (g, h) => {
                g ? c(g) : b(d ? h.buffer : h);
              });
            };
            !e.thisProgram && 1 < process.argv.length && (m = process.argv[1].replace(/\\/g, "/"));
            process.argv.slice(2);
            e.inspect = () => "[Emscripten Module object]";
          } else if (ca || r)
            r ? w = self.location.href : "undefined" != typeof document && document.currentScript && (w = document.currentScript.src), _scriptDir && (w = _scriptDir), 0 !== w.indexOf("blob:") ? w = w.substr(0, w.replace(/[?#].*/, "").lastIndexOf("/") + 1) : w = "", x = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.send(null);
              return b.responseText;
            }, r && (z = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.responseType = "arraybuffer";
              b.send(null);
              return new Uint8Array(b.response);
            }), y = (a, b, c) => {
              var d = new XMLHttpRequest();
              d.open("GET", a, true);
              d.responseType = "arraybuffer";
              d.onload = () => {
                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
              };
              d.onerror = c;
              d.send(null);
            };
          var ea = e.print || console.log.bind(console), C = e.printErr || console.error.bind(console);
          Object.assign(e, ba);
          ba = null;
          e.thisProgram && (m = e.thisProgram);
          var D;
          e.wasmBinary && (D = e.wasmBinary);
          var noExitRuntime = e.noExitRuntime || true;
          "object" != typeof WebAssembly && E("no native wasm support detected");
          var F, G, fa = false, H, I, J, K;
          function ha() {
            var a = F.buffer;
            e.HEAP8 = H = new Int8Array(a);
            e.HEAP16 = new Int16Array(a);
            e.HEAP32 = J = new Int32Array(a);
            e.HEAPU8 = I = new Uint8Array(a);
            e.HEAPU16 = new Uint16Array(a);
            e.HEAPU32 = K = new Uint32Array(a);
            e.HEAPF32 = new Float32Array(a);
            e.HEAPF64 = new Float64Array(a);
          }
          var L, ia = [], ja = [], ka = [];
          function la() {
            var a = e.preRun.shift();
            ia.unshift(a);
          }
          var M = 0, N = null, O = null;
          function E(a) {
            if (e.onAbort)
              e.onAbort(a);
            a = "Aborted(" + a + ")";
            C(a);
            fa = true;
            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
            l(a);
            throw a;
          }
          function ma(a) {
            return a.startsWith("data:application/octet-stream;base64,");
          }
          var P;
          P = "ort-wasm.wasm";
          if (!ma(P)) {
            var na = P;
            P = e.locateFile ? e.locateFile(na, w) : w + na;
          }
          function oa(a) {
            if (a == P && D)
              return new Uint8Array(D);
            if (z)
              return z(a);
            throw "both async and sync fetching of the wasm failed";
          }
          function pa(a) {
            if (!D && (ca || r)) {
              if ("function" == typeof fetch && !a.startsWith("file://"))
                return fetch(a, { credentials: "same-origin" }).then((b) => {
                  if (!b.ok)
                    throw "failed to load wasm binary file at '" + a + "'";
                  return b.arrayBuffer();
                }).catch(() => oa(a));
              if (y)
                return new Promise((b, c) => {
                  y(a, (d) => b(new Uint8Array(d)), c);
                });
            }
            return Promise.resolve().then(() => oa(a));
          }
          function qa(a, b, c) {
            return pa(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {
              C("failed to asynchronously prepare wasm: " + d);
              E(d);
            });
          }
          function ra(a, b) {
            var c = P;
            return D || "function" != typeof WebAssembly.instantiateStreaming || ma(c) || c.startsWith("file://") || da || "function" != typeof fetch ? qa(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(g) {
              C("wasm streaming compile failed: " + g);
              C("falling back to ArrayBuffer instantiation");
              return qa(c, a, b);
            }));
          }
          var Q, R = (a) => {
            for (; 0 < a.length; )
              a.shift()(e);
          };
          function sa(a) {
            this.xa = a - 24;
            this.Ga = function(b) {
              K[this.xa + 4 >> 2 >>> 0] = b;
            };
            this.Fa = function(b) {
              K[this.xa + 8 >> 2 >>> 0] = b;
            };
            this.za = function(b, c) {
              this.Ea();
              this.Ga(b);
              this.Fa(c);
            };
            this.Ea = function() {
              K[this.xa + 16 >> 2 >>> 0] = 0;
            };
          }
          var ta = 0, ua = 0, va = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, wa = (a, b, c) => {
            b >>>= 0;
            var d = b + c;
            for (c = b; a[c] && !(c >= d); )
              ++c;
            if (16 < c - b && a.buffer && va)
              return va.decode(a.subarray(b, c));
            for (d = ""; b < c; ) {
              var g = a[b++];
              if (g & 128) {
                var h = a[b++] & 63;
                if (192 == (g & 224))
                  d += String.fromCharCode((g & 31) << 6 | h);
                else {
                  var k = a[b++] & 63;
                  g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | k : (g & 7) << 18 | h << 12 | k << 6 | a[b++] & 63;
                  65536 > g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));
                }
              } else
                d += String.fromCharCode(g);
            }
            return d;
          }, S = (a, b) => (a >>>= 0) ? wa(I, a, b) : "", T = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
            }
            return b;
          }, U = (a, b, c, d) => {
            c >>>= 0;
            if (!(0 < d))
              return 0;
            var g = c;
            d = c + d - 1;
            for (var h = 0; h < a.length; ++h) {
              var k = a.charCodeAt(h);
              if (55296 <= k && 57343 >= k) {
                var p = a.charCodeAt(++h);
                k = 65536 + ((k & 1023) << 10) | p & 1023;
              }
              if (127 >= k) {
                if (c >= d)
                  break;
                b[c++ >>> 0] = k;
              } else {
                if (2047 >= k) {
                  if (c + 1 >= d)
                    break;
                  b[c++ >>> 0] = 192 | k >> 6;
                } else {
                  if (65535 >= k) {
                    if (c + 2 >= d)
                      break;
                    b[c++ >>> 0] = 224 | k >> 12;
                  } else {
                    if (c + 3 >= d)
                      break;
                    b[c++ >>> 0] = 240 | k >> 18;
                    b[c++ >>> 0] = 128 | k >> 12 & 63;
                  }
                  b[c++ >>> 0] = 128 | k >> 6 & 63;
                }
                b[c++ >>> 0] = 128 | k & 63;
              }
            }
            b[c >>> 0] = 0;
            return c - g;
          }, V = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), xa = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], ya = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], Da = (a) => {
            var b = T(a) + 1, c = za(b);
            c && U(a, I, c, b);
            return c;
          }, W = {}, Fa = () => {
            if (!Ea) {
              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace(
                "-",
                "_"
              ) + ".UTF-8", _: m || "./this.program" }, b;
              for (b in W)
                void 0 === W[b] ? delete a[b] : a[b] = W[b];
              var c = [];
              for (b in a)
                c.push(`${b}=${a[b]}`);
              Ea = c;
            }
            return Ea;
          }, Ea, Ga = [null, [], []], Ha = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Ia = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          function Ja(a) {
            var b = Array(T(a) + 1);
            U(a, b, 0, b.length);
            return b;
          }
          function Ka(a, b, c, d) {
            function g(f, n, q) {
              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < n; )
                f = q[0] + f;
              return f;
            }
            function h(f, n) {
              return g(f, n, "0");
            }
            function k(f, n) {
              function q(Aa) {
                return 0 > Aa ? -1 : 0 < Aa ? 1 : 0;
              }
              var A;
              0 === (A = q(f.getFullYear() - n.getFullYear())) && 0 === (A = q(f.getMonth() - n.getMonth())) && (A = q(f.getDate() - n.getDate()));
              return A;
            }
            function p(f) {
              switch (f.getDay()) {
                case 0:
                  return new Date(f.getFullYear() - 1, 11, 29);
                case 1:
                  return f;
                case 2:
                  return new Date(f.getFullYear(), 0, 3);
                case 3:
                  return new Date(
                    f.getFullYear(),
                    0,
                    2
                  );
                case 4:
                  return new Date(f.getFullYear(), 0, 1);
                case 5:
                  return new Date(f.getFullYear() - 1, 11, 31);
                case 6:
                  return new Date(f.getFullYear() - 1, 11, 30);
              }
            }
            function t(f) {
              var n = f.ta;
              for (f = new Date(new Date(f.ua + 1900, 0, 1).getTime()); 0 < n; ) {
                var q = f.getMonth(), A = (V(f.getFullYear()) ? Ha : Ia)[q];
                if (n > A - f.getDate())
                  n -= A - f.getDate() + 1, f.setDate(1), 11 > q ? f.setMonth(q + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));
                else {
                  f.setDate(f.getDate() + n);
                  break;
                }
              }
              q = new Date(f.getFullYear() + 1, 0, 4);
              n = p(new Date(
                f.getFullYear(),
                0,
                4
              ));
              q = p(q);
              return 0 >= k(n, f) ? 0 >= k(q, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;
            }
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            var u = J[d + 40 >> 2 >>> 0];
            d = { Ca: J[d >> 2 >>> 0], Ba: J[d + 4 >> 2 >>> 0], va: J[d + 8 >> 2 >>> 0], ya: J[d + 12 >> 2 >>> 0], wa: J[d + 16 >> 2 >>> 0], ua: J[d + 20 >> 2 >>> 0], sa: J[d + 24 >> 2 >>> 0], ta: J[d + 28 >> 2 >>> 0], Ha: J[d + 32 >> 2 >>> 0], Aa: J[d + 36 >> 2 >>> 0], Da: u ? S(u) : "" };
            c = S(c);
            u = {
              "%c": "%a %b %d %H:%M:%S %Y",
              "%D": "%m/%d/%y",
              "%F": "%Y-%m-%d",
              "%h": "%b",
              "%r": "%I:%M:%S %p",
              "%R": "%H:%M",
              "%T": "%H:%M:%S",
              "%x": "%m/%d/%y",
              "%X": "%H:%M:%S",
              "%Ec": "%c",
              "%EC": "%C",
              "%Ex": "%m/%d/%y",
              "%EX": "%H:%M:%S",
              "%Ey": "%y",
              "%EY": "%Y",
              "%Od": "%d",
              "%Oe": "%e",
              "%OH": "%H",
              "%OI": "%I",
              "%Om": "%m",
              "%OM": "%M",
              "%OS": "%S",
              "%Ou": "%u",
              "%OU": "%U",
              "%OV": "%V",
              "%Ow": "%w",
              "%OW": "%W",
              "%Oy": "%y"
            };
            for (var v in u)
              c = c.replace(new RegExp(v, "g"), u[v]);
            var Ba = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Ca = "January February March April May June July August September October November December".split(" ");
            u = { "%a": (f) => Ba[f.sa].substring(0, 3), "%A": (f) => Ba[f.sa], "%b": (f) => Ca[f.wa].substring(0, 3), "%B": (f) => Ca[f.wa], "%C": (f) => h((f.ua + 1900) / 100 | 0, 2), "%d": (f) => h(f.ya, 2), "%e": (f) => g(f.ya, 2, " "), "%g": (f) => t(f).toString().substring(2), "%G": (f) => t(f), "%H": (f) => h(f.va, 2), "%I": (f) => {
              f = f.va;
              0 == f ? f = 12 : 12 < f && (f -= 12);
              return h(f, 2);
            }, "%j": (f) => {
              for (var n = 0, q = 0; q <= f.wa - 1; n += (V(f.ua + 1900) ? Ha : Ia)[q++])
                ;
              return h(f.ya + n, 3);
            }, "%m": (f) => h(f.wa + 1, 2), "%M": (f) => h(f.Ba, 2), "%n": () => "\n", "%p": (f) => 0 <= f.va && 12 > f.va ? "AM" : "PM", "%S": (f) => h(f.Ca, 2), "%t": () => "	", "%u": (f) => f.sa || 7, "%U": (f) => h(Math.floor((f.ta + 7 - f.sa) / 7), 2), "%V": (f) => {
              var n = Math.floor((f.ta + 7 - (f.sa + 6) % 7) / 7);
              2 >= (f.sa + 371 - f.ta - 2) % 7 && n++;
              if (n)
                53 == n && (q = (f.sa + 371 - f.ta) % 7, 4 == q || 3 == q && V(f.ua) || (n = 1));
              else {
                n = 52;
                var q = (f.sa + 7 - f.ta - 1) % 7;
                (4 == q || 5 == q && V(f.ua % 400 - 1)) && n++;
              }
              return h(n, 2);
            }, "%w": (f) => f.sa, "%W": (f) => h(Math.floor((f.ta + 7 - (f.sa + 6) % 7) / 7), 2), "%y": (f) => (f.ua + 1900).toString().substring(2), "%Y": (f) => f.ua + 1900, "%z": (f) => {
              f = f.Aa;
              var n = 0 <= f;
              f = Math.abs(f) / 60;
              return (n ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);
            }, "%Z": (f) => f.Da, "%%": () => "%" };
            c = c.replace(/%%/g, "\0\0");
            for (v in u)
              c.includes(v) && (c = c.replace(new RegExp(v, "g"), u[v](d)));
            c = c.replace(/\0\0/g, "%");
            v = Ja(c);
            if (v.length > b)
              return 0;
            H.set(v, a >>> 0);
            return v.length - 1;
          }
          var X = [], Y = void 0, La = [];
          function Ma(a, b) {
            if (!Y) {
              Y = /* @__PURE__ */ new WeakMap();
              var c = L.length;
              if (Y)
                for (var d = 0; d < 0 + c; d++) {
                  var g = d;
                  var h = X[g];
                  h || (g >= X.length && (X.length = g + 1), X[g] = h = L.get(g));
                  (g = h) && Y.set(g, d);
                }
            }
            if (c = Y.get(a) || 0)
              return c;
            if (La.length)
              c = La.pop();
            else {
              try {
                L.grow(1);
              } catch (p) {
                if (!(p instanceof RangeError))
                  throw p;
                throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";
              }
              c = L.length - 1;
            }
            try {
              d = c, L.set(d, a), X[d] = L.get(d);
            } catch (p) {
              if (!(p instanceof TypeError))
                throw p;
              if ("function" == typeof WebAssembly.Function) {
                d = WebAssembly.Function;
                g = { i: "i32", j: "i64", f: "f32", d: "f64", p: "i32" };
                h = { parameters: [], results: "v" == b[0] ? [] : [g[b[0]]] };
                for (var k = 1; k < b.length; ++k)
                  h.parameters.push(g[b[k]]);
                b = new d(h, a);
              } else {
                d = [1];
                g = b.slice(0, 1);
                b = b.slice(1);
                h = { i: 127, p: 127, j: 126, f: 125, d: 124 };
                d.push(96);
                k = b.length;
                128 > k ? d.push(k) : d.push(k % 128 | 128, k >> 7);
                for (k = 0; k < b.length; ++k)
                  d.push(h[b[k]]);
                "v" == g ? d.push(0) : d.push(1, h[g]);
                b = [0, 97, 115, 109, 1, 0, 0, 0, 1];
                g = d.length;
                128 > g ? b.push(g) : b.push(g % 128 | 128, g >> 7);
                b.push.apply(b, d);
                b.push(
                  2,
                  7,
                  1,
                  1,
                  101,
                  1,
                  102,
                  0,
                  0,
                  7,
                  5,
                  1,
                  1,
                  102,
                  0,
                  0
                );
                b = new WebAssembly.Module(new Uint8Array(b));
                b = new WebAssembly.Instance(b, { e: { f: a } }).exports.f;
              }
              d = c;
              L.set(d, b);
              X[d] = L.get(d);
            }
            Y.set(a, c);
            return c;
          }
          var Oa = {
            a: function(a, b, c) {
              a >>>= 0;
              new sa(a).za(b >>> 0, c >>> 0);
              ta = a;
              ua++;
              throw ta;
            },
            e: function() {
              return 0;
            },
            H: function() {
            },
            x: function() {
            },
            z: function() {
            },
            J: function() {
              return 0;
            },
            F: function() {
            },
            A: function() {
            },
            E: function() {
            },
            g: function() {
            },
            y: function() {
            },
            v: function() {
            },
            G: function() {
            },
            w: function() {
            },
            l: () => true,
            o: function(a, b, c) {
              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
              c >>>= 0;
              a = new Date(1e3 * a);
              J[c >> 2 >>> 0] = a.getUTCSeconds();
              J[c + 4 >> 2 >>> 0] = a.getUTCMinutes();
              J[c + 8 >> 2 >>> 0] = a.getUTCHours();
              J[c + 12 >> 2 >>> 0] = a.getUTCDate();
              J[c + 16 >> 2 >>> 0] = a.getUTCMonth();
              J[c + 20 >> 2 >>> 0] = a.getUTCFullYear() - 1900;
              J[c + 24 >> 2 >>> 0] = a.getUTCDay();
              J[c + 28 >> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
            },
            p: function(a, b, c) {
              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
              c >>>= 0;
              a = new Date(1e3 * a);
              J[c >> 2 >>> 0] = a.getSeconds();
              J[c + 4 >> 2 >>> 0] = a.getMinutes();
              J[c + 8 >> 2 >>> 0] = a.getHours();
              J[c + 12 >> 2 >>> 0] = a.getDate();
              J[c + 16 >> 2 >>> 0] = a.getMonth();
              J[c + 20 >> 2 >>> 0] = a.getFullYear() - 1900;
              J[c + 24 >> 2 >>> 0] = a.getDay();
              J[c + 28 >> 2 >>> 0] = (V(a.getFullYear()) ? xa : ya)[a.getMonth()] + a.getDate() - 1 | 0;
              J[c + 36 >> 2 >>> 0] = -(60 * a.getTimezoneOffset());
              b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();
              var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
              J[c + 32 >> 2 >>> 0] = (b != d && a.getTimezoneOffset() == Math.min(d, b)) | 0;
            },
            q: function(a) {
              a >>>= 0;
              var b = new Date(J[a + 20 >> 2 >>> 0] + 1900, J[a + 16 >> 2 >>> 0], J[a + 12 >> 2 >>> 0], J[a + 8 >> 2 >>> 0], J[a + 4 >> 2 >>> 0], J[a >> 2 >>> 0], 0), c = J[a + 32 >> 2 >>> 0], d = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), k = Math.min(h, g);
              0 > c ? J[a + 32 >> 2 >>> 0] = Number(g != h && k == d) : 0 < c != (k == d) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : g) - d)));
              J[a + 24 >> 2 >>> 0] = b.getDay();
              J[a + 28 >> 2 >>> 0] = (V(b.getFullYear()) ? xa : ya)[b.getMonth()] + b.getDate() - 1 | 0;
              J[a >> 2 >>> 0] = b.getSeconds();
              J[a + 4 >> 2 >>> 0] = b.getMinutes();
              J[a + 8 >> 2 >>> 0] = b.getHours();
              J[a + 12 >> 2 >>> 0] = b.getDate();
              J[a + 16 >> 2 >>> 0] = b.getMonth();
              J[a + 20 >> 2 >>> 0] = b.getYear();
              a = b.getTime() / 1e3;
              return Na((Q = a, 1 <= +Math.abs(Q) ? 0 < Q ? +Math.floor(Q / 4294967296) >>> 0 : ~~+Math.ceil((Q - +(~~Q >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;
            },
            m: function() {
              return -52;
            },
            n: function() {
            },
            t: function(a, b, c) {
              function d(t) {
                return (t = t.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? t[1] : "GMT";
              }
              c >>>= 0;
              var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), k = new Date(g, 6, 1);
              g = h.getTimezoneOffset();
              var p = k.getTimezoneOffset();
              K[a >>> 0 >> 2 >>> 0] = 60 * Math.max(g, p);
              J[b >>> 0 >> 2 >>> 0] = Number(g != p);
              a = d(h);
              b = d(k);
              a = Da(a);
              b = Da(b);
              p < g ? (K[c >> 2 >>> 0] = a, K[c + 4 >> 2 >>> 0] = b) : (K[c >> 2 >>> 0] = b, K[c + 4 >> 2 >>> 0] = a);
            },
            d: () => {
              E("");
            },
            h: function() {
              return Date.now();
            },
            u: function() {
              return 4294901760;
            },
            b: () => performance.now(),
            I: function(a, b, c) {
              b >>>= 0;
              return I.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);
            },
            s: function(a) {
              a >>>= 0;
              var b = I.length;
              if (4294901760 < a)
                return false;
              for (var c = 1; 4 >= c; c *= 2) {
                var d = b * (1 + 0.2 / c);
                d = Math.min(d, a + 100663296);
                var g = Math;
                d = Math.max(a, d);
                a: {
                  g = g.min.call(g, 4294901760, d + (65536 - d % 65536) % 65536) - F.buffer.byteLength + 65535 >>> 16;
                  try {
                    F.grow(g);
                    ha();
                    var h = 1;
                    break a;
                  } catch (k) {
                  }
                  h = void 0;
                }
                if (h)
                  return true;
              }
              return false;
            },
            C: function(a, b) {
              a >>>= 0;
              b >>>= 0;
              var c = 0;
              Fa().forEach(function(d, g) {
                var h = b + c;
                g = K[a + 4 * g >> 2 >>> 0] = h;
                for (h = 0; h < d.length; ++h)
                  H[g++ >> 0 >>> 0] = d.charCodeAt(h);
                H[g >> 0 >>> 0] = 0;
                c += d.length + 1;
              });
              return 0;
            },
            D: function(a, b) {
              a >>>= 0;
              b >>>= 0;
              var c = Fa();
              K[a >> 2 >>> 0] = c.length;
              var d = 0;
              c.forEach(function(g) {
                d += g.length + 1;
              });
              K[b >> 2 >>> 0] = d;
              return 0;
            },
            f: () => 52,
            k: function() {
              return 52;
            },
            r: function() {
              return 70;
            },
            j: function(a, b, c, d) {
              b >>>= 0;
              c >>>= 0;
              d >>>= 0;
              for (var g = 0, h = 0; h < c; h++) {
                var k = K[b >> 2 >>> 0], p = K[b + 4 >> 2 >>> 0];
                b += 8;
                for (var t = 0; t < p; t++) {
                  var u = I[k + t >>> 0], v = Ga[a];
                  0 === u || 10 === u ? ((1 === a ? ea : C)(wa(v, 0)), v.length = 0) : v.push(u);
                }
                g += p;
              }
              K[d >> 2 >>> 0] = g;
              return 0;
            },
            B: Ka,
            c: function(a, b, c, d) {
              return Ka(a >>> 0, b >>> 0, c >>> 0, d >>> 0);
            },
            i: function(a, b, c, d) {
              const g = L.length;
              a = new Uint8Array(I.slice(a + b, a + c));
              try {
                var h = new WebAssembly.Module(a), k = new WebAssembly.Instance(h, { env: { memory: F } }), p;
                for (p in k.exports)
                  Ma(k.exports[p]);
                return g < L.length ? g : d;
              } catch (t) {
                return console.log(t), d;
              }
            }
          };
          (function() {
            function a(c) {
              c = c.exports;
              G = c = Pa(c);
              F = G.K;
              ha();
              L = G.na;
              ja.unshift(G.L);
              M--;
              e.monitorRunDependencies && e.monitorRunDependencies(M);
              if (0 == M && (null !== N && (clearInterval(N), N = null), O)) {
                var d = O;
                O = null;
                d();
              }
              return c;
            }
            var b = { a: Oa };
            M++;
            e.monitorRunDependencies && e.monitorRunDependencies(M);
            if (e.instantiateWasm)
              try {
                return e.instantiateWasm(b, a);
              } catch (c) {
                C("Module.instantiateWasm callback failed with error: " + c), l(c);
              }
            ra(b, function(c) {
              a(c.instance);
            }).catch(l);
            return {};
          })();
          e._OrtInit = (a, b) => (e._OrtInit = G.M)(a, b);
          e._OrtGetLastError = (a, b) => (e._OrtGetLastError = G.N)(a, b);
          e._OrtCreateSessionOptions = (a, b, c, d, g, h, k, p, t, u) => (e._OrtCreateSessionOptions = G.O)(a, b, c, d, g, h, k, p, t, u);
          e._OrtAppendExecutionProvider = (a, b) => (e._OrtAppendExecutionProvider = G.P)(a, b);
          e._OrtAddFreeDimensionOverride = (a, b, c) => (e._OrtAddFreeDimensionOverride = G.Q)(a, b, c);
          e._OrtAddSessionConfigEntry = (a, b, c) => (e._OrtAddSessionConfigEntry = G.R)(a, b, c);
          e._OrtReleaseSessionOptions = (a) => (e._OrtReleaseSessionOptions = G.S)(a);
          e._OrtCreateSession = (a, b, c) => (e._OrtCreateSession = G.T)(a, b, c);
          e._OrtReleaseSession = (a) => (e._OrtReleaseSession = G.U)(a);
          e._OrtGetInputOutputCount = (a, b, c) => (e._OrtGetInputOutputCount = G.V)(a, b, c);
          e._OrtGetInputName = (a, b) => (e._OrtGetInputName = G.W)(a, b);
          e._OrtGetOutputName = (a, b) => (e._OrtGetOutputName = G.X)(a, b);
          e._OrtFree = (a) => (e._OrtFree = G.Y)(a);
          e._OrtCreateTensor = (a, b, c, d, g, h) => (e._OrtCreateTensor = G.Z)(a, b, c, d, g, h);
          e._OrtGetTensorData = (a, b, c, d, g) => (e._OrtGetTensorData = G._)(a, b, c, d, g);
          e._OrtReleaseTensor = (a) => (e._OrtReleaseTensor = G.$)(a);
          e._OrtCreateRunOptions = (a, b, c, d) => (e._OrtCreateRunOptions = G.aa)(a, b, c, d);
          e._OrtAddRunConfigEntry = (a, b, c) => (e._OrtAddRunConfigEntry = G.ba)(a, b, c);
          e._OrtReleaseRunOptions = (a) => (e._OrtReleaseRunOptions = G.ca)(a);
          e._OrtCreateBinding = (a) => (e._OrtCreateBinding = G.da)(a);
          e._OrtBindInput = (a, b, c) => (e._OrtBindInput = G.ea)(a, b, c);
          e._OrtBindOutput = (a, b, c, d) => (e._OrtBindOutput = G.fa)(a, b, c, d);
          e._OrtClearBoundOutputs = (a) => (e._OrtClearBoundOutputs = G.ga)(a);
          e._OrtReleaseBinding = (a) => (e._OrtReleaseBinding = G.ha)(a);
          e._OrtRunWithBinding = (a, b, c, d, g) => (e._OrtRunWithBinding = G.ia)(a, b, c, d, g);
          e._OrtRun = (a, b, c, d, g, h, k, p) => (e._OrtRun = G.ja)(a, b, c, d, g, h, k, p);
          e._OrtEndProfiling = (a) => (e._OrtEndProfiling = G.ka)(a);
          var za = e._malloc = (a) => (za = e._malloc = G.la)(a);
          e._free = (a) => (e._free = G.ma)(a);
          var Na = (a) => (Na = G.oa)(a), Qa = () => (Qa = G.pa)(), Ra = (a) => (Ra = G.qa)(a), Sa = (a) => (Sa = G.ra)(a);
          e.___start_em_js = 905600;
          e.___stop_em_js = 906212;
          function Pa(a) {
            a = Object.assign({}, a);
            var b = (d) => () => d() >>> 0, c = (d) => (g) => d(g) >>> 0;
            a.__errno_location = b(a.__errno_location);
            a.malloc = c(a.malloc);
            a.stackSave = b(a.stackSave);
            a.stackAlloc = c(a.stackAlloc);
            return a;
          }
          e.stackAlloc = Sa;
          e.stackSave = Qa;
          e.stackRestore = Ra;
          e.addFunction = Ma;
          e.UTF8ToString = S;
          e.stringToUTF8 = (a, b, c) => U(a, I, b, c);
          e.lengthBytesUTF8 = T;
          var Z;
          O = function Ta() {
            Z || Ua();
            Z || (O = Ta);
          };
          function Ua() {
            function a() {
              if (!Z && (Z = true, e.calledRun = true, !fa)) {
                R(ja);
                aa(e);
                if (e.onRuntimeInitialized)
                  e.onRuntimeInitialized();
                if (e.postRun)
                  for ("function" == typeof e.postRun && (e.postRun = [e.postRun]); e.postRun.length; ) {
                    var b = e.postRun.shift();
                    ka.unshift(b);
                  }
                R(ka);
              }
            }
            if (!(0 < M)) {
              if (e.preRun)
                for ("function" == typeof e.preRun && (e.preRun = [e.preRun]); e.preRun.length; )
                  la();
              R(ia);
              0 < M || (e.setStatus ? (e.setStatus("Running..."), setTimeout(function() {
                setTimeout(function() {
                  e.setStatus("");
                }, 1);
                a();
              }, 1)) : a());
            }
          }
          if (e.preInit)
            for ("function" == typeof e.preInit && (e.preInit = [e.preInit]); 0 < e.preInit.length; )
              e.preInit.pop()();
          Ua();
          return moduleArg.ready;
        };
      })();
      if (typeof exports === "object" && typeof module === "object")
        module.exports = ortWasm;
      else if (typeof define === "function" && define["amd"])
        define([], () => ortWasm);
    }
  });

  // nodejs-ignore:worker_threads
  var require_worker_threads = __commonJS({
    "nodejs-ignore:worker_threads"() {
    }
  });

  // nodejs-ignore:perf_hooks
  var require_perf_hooks = __commonJS({
    "nodejs-ignore:perf_hooks"() {
    }
  });

  // nodejs-ignore:os
  var os_exports = {};
  __export(os_exports, {
    cpus: () => cpus2
  });
  var cpus2;
  var init_os = __esm({
    "nodejs-ignore:os"() {
      cpus2 = void 0;
    }
  });

  // web/lib/wasm/binding/ort-wasm-threaded.js
  var require_ort_wasm_threaded = __commonJS({
    "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {
      "use strict";
      var ortWasmThreaded = (() => {
        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
        if (typeof __filename !== "undefined")
          _scriptDir = _scriptDir || __filename;
        return function(moduleArg = {}) {
          function aa() {
            e.buffer != l.buffer && m();
            return l;
          }
          function n() {
            e.buffer != l.buffer && m();
            return ba;
          }
          function p() {
            e.buffer != l.buffer && m();
            return ca;
          }
          function t() {
            e.buffer != l.buffer && m();
            return da;
          }
          function ea() {
            e.buffer != l.buffer && m();
            return fa;
          }
          var w = moduleArg, ha, x;
          w.ready = new Promise((a, b) => {
            ha = a;
            x = b;
          });
          var ia = Object.assign({}, w), ja = "./this.program", z = (a, b) => {
            throw b;
          }, ka = "object" == typeof window, A = "function" == typeof importScripts, C = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, D = w.ENVIRONMENT_IS_PTHREAD || false, E = "";
          function la(a) {
            return w.locateFile ? w.locateFile(a, E) : E + a;
          }
          var ma, F, G;
          if (C) {
            var fs = (init_fs(), __toCommonJS(fs_exports)), na = (init_path(), __toCommonJS(path_exports));
            E = A ? na.dirname(E) + "/" : __dirname + "/";
            ma = (b, c) => {
              b = b.startsWith("file://") ? new URL(b) : na.normalize(b);
              return fs.readFileSync(b, c ? void 0 : "utf8");
            };
            G = (b) => {
              b = ma(b, true);
              b.buffer || (b = new Uint8Array(b));
              return b;
            };
            F = (b, c, d, g = true) => {
              b = b.startsWith("file://") ? new URL(b) : na.normalize(b);
              fs.readFile(b, g ? void 0 : "utf8", (h, k) => {
                h ? d(h) : c(g ? k.buffer : k);
              });
            };
            !w.thisProgram && 1 < process.argv.length && (ja = process.argv[1].replace(/\\/g, "/"));
            process.argv.slice(2);
            z = (b, c) => {
              process.exitCode = b;
              throw c;
            };
            w.inspect = () => "[Emscripten Module object]";
            let a;
            try {
              a = require_worker_threads();
            } catch (b) {
              throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), b;
            }
            global.Worker = a.Worker;
          } else if (ka || A)
            A ? E = self.location.href : "undefined" != typeof document && document.currentScript && (E = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (E = _scriptDir), 0 !== E.indexOf("blob:") ? E = E.substr(0, E.replace(/[?#].*/, "").lastIndexOf("/") + 1) : E = "", C || (ma = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.send(null);
              return b.responseText;
            }, A && (G = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.responseType = "arraybuffer";
              b.send(null);
              return new Uint8Array(b.response);
            }), F = (a, b, c) => {
              var d = new XMLHttpRequest();
              d.open("GET", a, true);
              d.responseType = "arraybuffer";
              d.onload = () => {
                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
              };
              d.onerror = c;
              d.send(null);
            });
          C && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);
          var oa = console.log.bind(console), pa = console.error.bind(console);
          C && (oa = (...a) => fs.writeSync(1, a.join(" ") + "\n"), pa = (...a) => fs.writeSync(2, a.join(" ") + "\n"));
          var qa = w.print || oa, I = w.printErr || pa;
          Object.assign(w, ia);
          ia = null;
          w.thisProgram && (ja = w.thisProgram);
          w.quit && (z = w.quit);
          var J;
          w.wasmBinary && (J = w.wasmBinary);
          var noExitRuntime = w.noExitRuntime || true;
          "object" != typeof WebAssembly && K("no native wasm support detected");
          var e, L, ra, M = false, N, l, ba, ca, da, fa;
          function m() {
            var a = e.buffer;
            w.HEAP8 = l = new Int8Array(a);
            w.HEAP16 = new Int16Array(a);
            w.HEAP32 = ca = new Int32Array(a);
            w.HEAPU8 = ba = new Uint8Array(a);
            w.HEAPU16 = new Uint16Array(a);
            w.HEAPU32 = da = new Uint32Array(a);
            w.HEAPF32 = new Float32Array(a);
            w.HEAPF64 = fa = new Float64Array(a);
          }
          var O = w.INITIAL_MEMORY || 16777216;
          5242880 <= O || K("INITIAL_MEMORY should be larger than STACK_SIZE, was " + O + "! (STACK_SIZE=5242880)");
          if (D)
            e = w.wasmMemory;
          else if (w.wasmMemory)
            e = w.wasmMemory;
          else if (e = new WebAssembly.Memory({ initial: O / 65536, maximum: 65536, shared: true }), !(e.buffer instanceof SharedArrayBuffer))
            throw I("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), C && I("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");
          m();
          O = e.buffer.byteLength;
          var P, sa = [], ta = [], ua = [], va = 0;
          function Q() {
            return noExitRuntime || 0 < va;
          }
          var R = 0, wa = null, S = null;
          function xa() {
            R++;
            w.monitorRunDependencies && w.monitorRunDependencies(R);
          }
          function ya() {
            R--;
            w.monitorRunDependencies && w.monitorRunDependencies(R);
            if (0 == R && (null !== wa && (clearInterval(wa), wa = null), S)) {
              var a = S;
              S = null;
              a();
            }
          }
          function K(a) {
            if (w.onAbort)
              w.onAbort(a);
            a = "Aborted(" + a + ")";
            I(a);
            M = true;
            N = 1;
            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
            x(a);
            throw a;
          }
          function za(a) {
            return a.startsWith("data:application/octet-stream;base64,");
          }
          var T;
          T = "ort-wasm-threaded.wasm";
          za(T) || (T = la(T));
          function Aa(a) {
            if (a == T && J)
              return new Uint8Array(J);
            if (G)
              return G(a);
            throw "both async and sync fetching of the wasm failed";
          }
          function Ba(a) {
            if (!J && (ka || A)) {
              if ("function" == typeof fetch && !a.startsWith("file://"))
                return fetch(a, { credentials: "same-origin" }).then((b) => {
                  if (!b.ok)
                    throw "failed to load wasm binary file at '" + a + "'";
                  return b.arrayBuffer();
                }).catch(() => Aa(a));
              if (F)
                return new Promise((b, c) => {
                  F(a, (d) => b(new Uint8Array(d)), c);
                });
            }
            return Promise.resolve().then(() => Aa(a));
          }
          function Ca(a, b, c) {
            return Ba(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {
              I("failed to asynchronously prepare wasm: " + d);
              K(d);
            });
          }
          function Da(a, b) {
            var c = T;
            return J || "function" != typeof WebAssembly.instantiateStreaming || za(c) || c.startsWith("file://") || C || "function" != typeof fetch ? Ca(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(g) {
              I("wasm streaming compile failed: " + g);
              I("falling back to ArrayBuffer instantiation");
              return Ca(c, a, b);
            }));
          }
          var U;
          function Ea(a) {
            this.name = "ExitStatus";
            this.message = `Program terminated with exit(${a})`;
            this.status = a;
          }
          function Fa(a) {
            a.terminate();
            a.onmessage = () => {
            };
          }
          function Ga(a) {
            (a = V.Ma[a]) || K();
            V.mb(a);
          }
          function Ha(a) {
            var b = V.gb();
            if (!b)
              return 6;
            V.Pa.push(b);
            V.Ma[a.Oa] = b;
            b.Oa = a.Oa;
            var c = { cmd: "run", start_routine: a.nb, arg: a.fb, pthread_ptr: a.Oa };
            C && b.unref();
            b.postMessage(c, a.tb);
            return 0;
          }
          var Ia = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Ja = (a, b, c) => {
            b >>>= 0;
            var d = b + c;
            for (c = b; a[c] && !(c >= d); )
              ++c;
            if (16 < c - b && a.buffer && Ia)
              return Ia.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));
            for (d = ""; b < c; ) {
              var g = a[b++];
              if (g & 128) {
                var h = a[b++] & 63;
                if (192 == (g & 224))
                  d += String.fromCharCode((g & 31) << 6 | h);
                else {
                  var k = a[b++] & 63;
                  g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | k : (g & 7) << 18 | h << 12 | k << 6 | a[b++] & 63;
                  65536 > g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));
                }
              } else
                d += String.fromCharCode(g);
            }
            return d;
          }, Ka = (a, b) => (a >>>= 0) ? Ja(n(), a, b) : "";
          function La(a) {
            if (D)
              return W(1, 1, a);
            N = a;
            if (!Q()) {
              V.ob();
              if (w.onExit)
                w.onExit(a);
              M = true;
            }
            z(a, new Ea(a));
          }
          var Na = (a) => {
            N = a;
            if (D)
              throw Ma(a), "unwind";
            La(a);
          }, V = {
            Sa: [],
            Pa: [],
            $a: [],
            Ma: {},
            Wa: function() {
              D ? V.ib() : V.hb();
            },
            hb: function() {
              sa.unshift(() => {
                xa();
                V.jb(() => ya());
              });
            },
            ib: function() {
              V.receiveObjectTransfer = V.lb;
              V.threadInitTLS = V.Za;
              V.setExitStatus = V.Ya;
              noExitRuntime = false;
            },
            Ya: function(a) {
              N = a;
            },
            yb: ["$terminateWorker"],
            ob: function() {
              for (var a of V.Pa)
                Fa(a);
              for (a of V.Sa)
                Fa(a);
              V.Sa = [];
              V.Pa = [];
              V.Ma = [];
            },
            mb: function(a) {
              var b = a.Oa;
              delete V.Ma[b];
              V.Sa.push(a);
              V.Pa.splice(V.Pa.indexOf(a), 1);
              a.Oa = 0;
              Oa(b);
            },
            lb: function() {
            },
            Za: function() {
              V.$a.forEach((a) => a());
            },
            kb: (a) => new Promise((b) => {
              a.onmessage = (h) => {
                h = h.data;
                var k = h.cmd;
                if (h.targetThread && h.targetThread != Pa()) {
                  var q = V.Ma[h.xb];
                  q ? q.postMessage(h, h.transferList) : I('Internal error! Worker sent a message "' + k + '" to target pthread ' + h.targetThread + ", but that thread no longer exists!");
                } else if ("checkMailbox" === k)
                  Qa();
                else if ("spawnThread" === k)
                  Ha(h);
                else if ("cleanupThread" === k)
                  Ga(h.thread);
                else if ("killThread" === k)
                  h = h.thread, k = V.Ma[h], delete V.Ma[h], Fa(k), Oa(h), V.Pa.splice(
                    V.Pa.indexOf(k),
                    1
                  ), k.Oa = 0;
                else if ("cancelThread" === k)
                  V.Ma[h.thread].postMessage({ cmd: "cancel" });
                else if ("loaded" === k)
                  a.loaded = true, b(a);
                else if ("alert" === k)
                  alert("Thread " + h.threadId + ": " + h.text);
                else if ("setimmediate" === h.target)
                  a.postMessage(h);
                else if ("callHandler" === k)
                  w[h.handler](...h.args);
                else
                  k && I("worker sent an unknown command " + k);
              };
              a.onerror = (h) => {
                I("worker sent an error! " + h.filename + ":" + h.lineno + ": " + h.message);
                throw h;
              };
              C && (a.on("message", function(h) {
                a.onmessage({ data: h });
              }), a.on("error", function(h) {
                a.onerror(h);
              }));
              var c = [], d = ["onExit", "onAbort", "print", "printErr"], g;
              for (g of d)
                w.hasOwnProperty(g) && c.push(g);
              a.postMessage({ cmd: "load", handlers: c, urlOrBlob: w.mainScriptUrlOrBlob || _scriptDir, wasmMemory: e, wasmModule: ra });
            }),
            jb: function(a) {
              a();
            },
            eb: function() {
              var a = la("ort-wasm-threaded.worker.js");
              a = new Worker(a);
              V.Sa.push(a);
            },
            gb: function() {
              0 == V.Sa.length && (V.eb(), V.kb(V.Sa[0]));
              return V.Sa.pop();
            }
          };
          w.PThread = V;
          var Ra = (a) => {
            for (; 0 < a.length; )
              a.shift()(w);
          };
          w.establishStackSpace = function() {
            var a = Pa(), b = p()[a + 52 >> 2 >>> 0];
            a = p()[a + 56 >> 2 >>> 0];
            Sa(b, b - a);
            Ta(b);
          };
          function Ma(a) {
            if (D)
              return W(2, 0, a);
            Na(a);
          }
          var X = [], Ua = (a) => {
            var b = X[a];
            b || (a >= X.length && (X.length = a + 1), X[a] = b = P.get(a));
            return b;
          };
          w.invokeEntryPoint = function(a, b) {
            a = Ua(a)(b);
            Q() ? V.Ya(a) : Va(a);
          };
          function Wa(a) {
            this.Va = a - 24;
            this.cb = function(b) {
              t()[this.Va + 4 >> 2 >>> 0] = b;
            };
            this.bb = function(b) {
              t()[this.Va + 8 >> 2 >>> 0] = b;
            };
            this.Wa = function(b, c) {
              this.ab();
              this.cb(b);
              this.bb(c);
            };
            this.ab = function() {
              t()[this.Va + 16 >> 2 >>> 0] = 0;
            };
          }
          var Xa = 0, Ya = 0;
          function Za(a, b, c, d) {
            return D ? W(3, 1, a, b, c, d) : $a(a, b, c, d);
          }
          function $a(a, b, c, d) {
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            if ("undefined" == typeof SharedArrayBuffer)
              return I("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
            var g = [];
            if (D && 0 === g.length)
              return Za(a, b, c, d);
            a = { nb: c, Oa: a, fb: d, tb: g };
            return D ? (a.vb = "spawnThread", postMessage(a, g), 0) : Ha(a);
          }
          function ab(a, b, c) {
            return D ? W(4, 1, a, b, c) : 0;
          }
          function bb(a, b) {
            if (D)
              return W(5, 1, a, b);
          }
          var cb = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
            }
            return b;
          }, db = (a, b, c, d) => {
            c >>>= 0;
            if (!(0 < d))
              return 0;
            var g = c;
            d = c + d - 1;
            for (var h = 0; h < a.length; ++h) {
              var k = a.charCodeAt(h);
              if (55296 <= k && 57343 >= k) {
                var q = a.charCodeAt(++h);
                k = 65536 + ((k & 1023) << 10) | q & 1023;
              }
              if (127 >= k) {
                if (c >= d)
                  break;
                b[c++ >>> 0] = k;
              } else {
                if (2047 >= k) {
                  if (c + 1 >= d)
                    break;
                  b[c++ >>> 0] = 192 | k >> 6;
                } else {
                  if (65535 >= k) {
                    if (c + 2 >= d)
                      break;
                    b[c++ >>> 0] = 224 | k >> 12;
                  } else {
                    if (c + 3 >= d)
                      break;
                    b[c++ >>> 0] = 240 | k >> 18;
                    b[c++ >>> 0] = 128 | k >> 12 & 63;
                  }
                  b[c++ >>> 0] = 128 | k >> 6 & 63;
                }
                b[c++ >>> 0] = 128 | k & 63;
              }
            }
            b[c >>> 0] = 0;
            return c - g;
          }, eb = (a, b, c) => db(a, n(), b, c);
          function fb(a, b) {
            if (D)
              return W(6, 1, a, b);
          }
          function gb(a, b, c) {
            if (D)
              return W(7, 1, a, b, c);
          }
          function hb(a, b, c) {
            return D ? W(8, 1, a, b, c) : 0;
          }
          function ib(a, b) {
            if (D)
              return W(9, 1, a, b);
          }
          function jb(a, b, c) {
            if (D)
              return W(10, 1, a, b, c);
          }
          function kb(a, b, c, d) {
            if (D)
              return W(11, 1, a, b, c, d);
          }
          function lb(a, b, c, d) {
            if (D)
              return W(12, 1, a, b, c, d);
          }
          function mb(a, b, c, d) {
            if (D)
              return W(13, 1, a, b, c, d);
          }
          function nb(a) {
            if (D)
              return W(14, 1, a);
          }
          function ob(a, b) {
            if (D)
              return W(15, 1, a, b);
          }
          function pb(a, b, c) {
            if (D)
              return W(16, 1, a, b, c);
          }
          var qb = (a) => {
            if (!M)
              try {
                if (a(), !Q())
                  try {
                    D ? Va(N) : Na(N);
                  } catch (b) {
                    b instanceof Ea || "unwind" == b || z(1, b);
                  }
              } catch (b) {
                b instanceof Ea || "unwind" == b || z(1, b);
              }
          };
          function rb(a) {
            a >>>= 0;
            "function" === typeof Atomics.ub && (Atomics.ub(p(), a >> 2, a).value.then(Qa), a += 128, Atomics.store(p(), a >> 2, 1));
          }
          w.__emscripten_thread_mailbox_await = rb;
          function Qa() {
            var a = Pa();
            a && (rb(a), qb(() => sb()));
          }
          w.checkMailbox = Qa;
          var Y = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), tb = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], ub = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
          function vb(a, b, c, d, g, h, k, q) {
            return D ? W(17, 1, a, b, c, d, g, h, k, q) : -52;
          }
          function wb(a, b, c, d, g, h, k) {
            if (D)
              return W(18, 1, a, b, c, d, g, h, k);
          }
          var yb = (a) => {
            var b = cb(a) + 1, c = xb(b);
            c && eb(a, c, b);
            return c;
          }, Ab = (a) => {
            var b = zb();
            a = a();
            Ta(b);
            return a;
          };
          function W(a, b) {
            var c = arguments.length - 2, d = arguments;
            return Ab(() => {
              for (var g = Bb(8 * c), h = g >> 3, k = 0; k < c; k++) {
                var q = d[2 + k];
                ea()[h + k >>> 0] = q;
              }
              return Cb(a, c, g, b);
            });
          }
          var Db = [], Eb = {}, Gb = () => {
            if (!Fb) {
              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: ja || "./this.program" }, b;
              for (b in Eb)
                void 0 === Eb[b] ? delete a[b] : a[b] = Eb[b];
              var c = [];
              for (b in a)
                c.push(`${b}=${a[b]}`);
              Fb = c;
            }
            return Fb;
          }, Fb;
          function Hb(a, b) {
            if (D)
              return W(19, 1, a, b);
            a >>>= 0;
            b >>>= 0;
            var c = 0;
            Gb().forEach(function(d, g) {
              var h = b + c;
              g = t()[a + 4 * g >> 2 >>> 0] = h;
              for (h = 0; h < d.length; ++h)
                aa()[g++ >> 0 >>> 0] = d.charCodeAt(h);
              aa()[g >> 0 >>> 0] = 0;
              c += d.length + 1;
            });
            return 0;
          }
          function Ib(a, b) {
            if (D)
              return W(20, 1, a, b);
            a >>>= 0;
            b >>>= 0;
            var c = Gb();
            t()[a >> 2 >>> 0] = c.length;
            var d = 0;
            c.forEach(function(g) {
              d += g.length + 1;
            });
            t()[b >> 2 >>> 0] = d;
            return 0;
          }
          function Jb(a) {
            return D ? W(21, 1, a) : 52;
          }
          function Nb(a, b, c, d) {
            return D ? W(22, 1, a, b, c, d) : 52;
          }
          function Ob(a, b, c, d, g) {
            return D ? W(23, 1, a, b, c, d, g) : 70;
          }
          var Pb = [null, [], []];
          function Qb(a, b, c, d) {
            if (D)
              return W(24, 1, a, b, c, d);
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            for (var g = 0, h = 0; h < c; h++) {
              var k = t()[b >> 2 >>> 0], q = t()[b + 4 >> 2 >>> 0];
              b += 8;
              for (var B = 0; B < q; B++) {
                var v = n()[k + B >>> 0], y = Pb[a];
                0 === v || 10 === v ? ((1 === a ? qa : I)(Ja(y, 0)), y.length = 0) : y.push(v);
              }
              g += q;
            }
            t()[d >> 2 >>> 0] = g;
            return 0;
          }
          var Rb = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Sb = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          function Tb(a) {
            var b = Array(cb(a) + 1);
            db(a, b, 0, b.length);
            return b;
          }
          var Ub = (a, b) => {
            aa().set(a, b >>> 0);
          };
          function Vb(a, b, c, d) {
            function g(f, r, u) {
              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < r; )
                f = u[0] + f;
              return f;
            }
            function h(f, r) {
              return g(f, r, "0");
            }
            function k(f, r) {
              function u(Kb) {
                return 0 > Kb ? -1 : 0 < Kb ? 1 : 0;
              }
              var H;
              0 === (H = u(f.getFullYear() - r.getFullYear())) && 0 === (H = u(f.getMonth() - r.getMonth())) && (H = u(f.getDate() - r.getDate()));
              return H;
            }
            function q(f) {
              switch (f.getDay()) {
                case 0:
                  return new Date(f.getFullYear() - 1, 11, 29);
                case 1:
                  return f;
                case 2:
                  return new Date(f.getFullYear(), 0, 3);
                case 3:
                  return new Date(
                    f.getFullYear(),
                    0,
                    2
                  );
                case 4:
                  return new Date(f.getFullYear(), 0, 1);
                case 5:
                  return new Date(f.getFullYear() - 1, 11, 31);
                case 6:
                  return new Date(f.getFullYear() - 1, 11, 30);
              }
            }
            function B(f) {
              var r = f.Qa;
              for (f = new Date(new Date(f.Ra + 1900, 0, 1).getTime()); 0 < r; ) {
                var u = f.getMonth(), H = (Y(f.getFullYear()) ? Rb : Sb)[u];
                if (r > H - f.getDate())
                  r -= H - f.getDate() + 1, f.setDate(1), 11 > u ? f.setMonth(u + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));
                else {
                  f.setDate(f.getDate() + r);
                  break;
                }
              }
              u = new Date(f.getFullYear() + 1, 0, 4);
              r = q(new Date(
                f.getFullYear(),
                0,
                4
              ));
              u = q(u);
              return 0 >= k(r, f) ? 0 >= k(u, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;
            }
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            var v = p()[d + 40 >> 2 >>> 0];
            d = { rb: p()[d >> 2 >>> 0], qb: p()[d + 4 >> 2 >>> 0], Ta: p()[d + 8 >> 2 >>> 0], Xa: p()[d + 12 >> 2 >>> 0], Ua: p()[d + 16 >> 2 >>> 0], Ra: p()[d + 20 >> 2 >>> 0], Na: p()[d + 24 >> 2 >>> 0], Qa: p()[d + 28 >> 2 >>> 0], zb: p()[d + 32 >> 2 >>> 0], pb: p()[d + 36 >> 2 >>> 0], sb: v ? Ka(v) : "" };
            c = Ka(c);
            v = {
              "%c": "%a %b %d %H:%M:%S %Y",
              "%D": "%m/%d/%y",
              "%F": "%Y-%m-%d",
              "%h": "%b",
              "%r": "%I:%M:%S %p",
              "%R": "%H:%M",
              "%T": "%H:%M:%S",
              "%x": "%m/%d/%y",
              "%X": "%H:%M:%S",
              "%Ec": "%c",
              "%EC": "%C",
              "%Ex": "%m/%d/%y",
              "%EX": "%H:%M:%S",
              "%Ey": "%y",
              "%EY": "%Y",
              "%Od": "%d",
              "%Oe": "%e",
              "%OH": "%H",
              "%OI": "%I",
              "%Om": "%m",
              "%OM": "%M",
              "%OS": "%S",
              "%Ou": "%u",
              "%OU": "%U",
              "%OV": "%V",
              "%Ow": "%w",
              "%OW": "%W",
              "%Oy": "%y"
            };
            for (var y in v)
              c = c.replace(new RegExp(y, "g"), v[y]);
            var Lb = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Mb = "January February March April May June July August September October November December".split(" ");
            v = {
              "%a": (f) => Lb[f.Na].substring(0, 3),
              "%A": (f) => Lb[f.Na],
              "%b": (f) => Mb[f.Ua].substring(0, 3),
              "%B": (f) => Mb[f.Ua],
              "%C": (f) => h((f.Ra + 1900) / 100 | 0, 2),
              "%d": (f) => h(f.Xa, 2),
              "%e": (f) => g(f.Xa, 2, " "),
              "%g": (f) => B(f).toString().substring(2),
              "%G": (f) => B(f),
              "%H": (f) => h(f.Ta, 2),
              "%I": (f) => {
                f = f.Ta;
                0 == f ? f = 12 : 12 < f && (f -= 12);
                return h(f, 2);
              },
              "%j": (f) => {
                for (var r = 0, u = 0; u <= f.Ua - 1; r += (Y(f.Ra + 1900) ? Rb : Sb)[u++])
                  ;
                return h(f.Xa + r, 3);
              },
              "%m": (f) => h(f.Ua + 1, 2),
              "%M": (f) => h(f.qb, 2),
              "%n": () => "\n",
              "%p": (f) => 0 <= f.Ta && 12 > f.Ta ? "AM" : "PM",
              "%S": (f) => h(f.rb, 2),
              "%t": () => "	",
              "%u": (f) => f.Na || 7,
              "%U": (f) => h(Math.floor((f.Qa + 7 - f.Na) / 7), 2),
              "%V": (f) => {
                var r = Math.floor((f.Qa + 7 - (f.Na + 6) % 7) / 7);
                2 >= (f.Na + 371 - f.Qa - 2) % 7 && r++;
                if (r)
                  53 == r && (u = (f.Na + 371 - f.Qa) % 7, 4 == u || 3 == u && Y(f.Ra) || (r = 1));
                else {
                  r = 52;
                  var u = (f.Na + 7 - f.Qa - 1) % 7;
                  (4 == u || 5 == u && Y(f.Ra % 400 - 1)) && r++;
                }
                return h(r, 2);
              },
              "%w": (f) => f.Na,
              "%W": (f) => h(Math.floor((f.Qa + 7 - (f.Na + 6) % 7) / 7), 2),
              "%y": (f) => (f.Ra + 1900).toString().substring(2),
              "%Y": (f) => f.Ra + 1900,
              "%z": (f) => {
                f = f.pb;
                var r = 0 <= f;
                f = Math.abs(f) / 60;
                return (r ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);
              },
              "%Z": (f) => f.sb,
              "%%": () => "%"
            };
            c = c.replace(
              /%%/g,
              "\0\0"
            );
            for (y in v)
              c.includes(y) && (c = c.replace(new RegExp(y, "g"), v[y](d)));
            c = c.replace(/\0\0/g, "%");
            y = Tb(c);
            if (y.length > b)
              return 0;
            Ub(y, a);
            return y.length - 1;
          }
          var Z = void 0, Wb = [];
          function Xb(a, b) {
            if (!Z) {
              Z = /* @__PURE__ */ new WeakMap();
              var c = P.length;
              if (Z)
                for (var d = 0; d < 0 + c; d++) {
                  var g = Ua(d);
                  g && Z.set(g, d);
                }
            }
            if (c = Z.get(a) || 0)
              return c;
            if (Wb.length)
              c = Wb.pop();
            else {
              try {
                P.grow(1);
              } catch (q) {
                if (!(q instanceof RangeError))
                  throw q;
                throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";
              }
              c = P.length - 1;
            }
            try {
              d = c, P.set(d, a), X[d] = P.get(d);
            } catch (q) {
              if (!(q instanceof TypeError))
                throw q;
              if ("function" == typeof WebAssembly.Function) {
                d = WebAssembly.Function;
                g = { i: "i32", j: "i64", f: "f32", d: "f64", p: "i32" };
                for (var h = {
                  parameters: [],
                  results: "v" == b[0] ? [] : [g[b[0]]]
                }, k = 1; k < b.length; ++k)
                  h.parameters.push(g[b[k]]);
                b = new d(h, a);
              } else {
                d = [1];
                g = b.slice(0, 1);
                b = b.slice(1);
                h = { i: 127, p: 127, j: 126, f: 125, d: 124 };
                d.push(96);
                k = b.length;
                128 > k ? d.push(k) : d.push(k % 128 | 128, k >> 7);
                for (k = 0; k < b.length; ++k)
                  d.push(h[b[k]]);
                "v" == g ? d.push(0) : d.push(1, h[g]);
                b = [0, 97, 115, 109, 1, 0, 0, 0, 1];
                g = d.length;
                128 > g ? b.push(g) : b.push(g % 128 | 128, g >> 7);
                b.push.apply(b, d);
                b.push(2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0);
                b = new WebAssembly.Module(new Uint8Array(b));
                b = new WebAssembly.Instance(
                  b,
                  { e: { f: a } }
                ).exports.f;
              }
              d = c;
              P.set(d, b);
              X[d] = P.get(d);
            }
            Z.set(a, c);
            return c;
          }
          V.Wa();
          var Yb = [null, La, Ma, Za, ab, bb, fb, gb, hb, ib, jb, kb, lb, mb, nb, ob, pb, vb, wb, Hb, Ib, Jb, Nb, Ob, Qb], ac = {
            b: function(a, b, c) {
              a >>>= 0;
              new Wa(a).Wa(b >>> 0, c >>> 0);
              Xa = a;
              Ya++;
              throw Xa;
            },
            N: function(a) {
              Zb(a >>> 0, !A, 1, !ka, 131072, false);
              V.Za();
            },
            k: function(a) {
              a >>>= 0;
              D ? postMessage({ cmd: "cleanupThread", thread: a }) : Ga(a);
            },
            I: $a,
            h: ab,
            T: bb,
            D: fb,
            F: gb,
            U: hb,
            R: ib,
            J: jb,
            Q: kb,
            o: lb,
            E: mb,
            B: nb,
            S: ob,
            C: pb,
            q: () => true,
            z: function(a, b) {
              a >>>= 0;
              a == b >>> 0 ? setTimeout(() => Qa()) : D ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = V.Ma[a]) && a.postMessage({ cmd: "checkMailbox" });
            },
            L: function() {
              return -1;
            },
            M: rb,
            p: function(a) {
              C && V.Ma[a >>> 0].ref();
            },
            t: function(a, b, c) {
              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
              c >>>= 0;
              a = new Date(1e3 * a);
              p()[c >> 2 >>> 0] = a.getUTCSeconds();
              p()[c + 4 >> 2 >>> 0] = a.getUTCMinutes();
              p()[c + 8 >> 2 >>> 0] = a.getUTCHours();
              p()[c + 12 >> 2 >>> 0] = a.getUTCDate();
              p()[c + 16 >> 2 >>> 0] = a.getUTCMonth();
              p()[c + 20 >> 2 >>> 0] = a.getUTCFullYear() - 1900;
              p()[c + 24 >> 2 >>> 0] = a.getUTCDay();
              a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
              p()[c + 28 >> 2 >>> 0] = a;
            },
            u: function(a, b, c) {
              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
              c >>>= 0;
              a = new Date(1e3 * a);
              p()[c >> 2 >>> 0] = a.getSeconds();
              p()[c + 4 >> 2 >>> 0] = a.getMinutes();
              p()[c + 8 >> 2 >>> 0] = a.getHours();
              p()[c + 12 >> 2 >>> 0] = a.getDate();
              p()[c + 16 >> 2 >>> 0] = a.getMonth();
              p()[c + 20 >> 2 >>> 0] = a.getFullYear() - 1900;
              p()[c + 24 >> 2 >>> 0] = a.getDay();
              b = (Y(a.getFullYear()) ? tb : ub)[a.getMonth()] + a.getDate() - 1 | 0;
              p()[c + 28 >> 2 >>> 0] = b;
              p()[c + 36 >> 2 >>> 0] = -(60 * a.getTimezoneOffset());
              b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();
              var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
              a = (b != d && a.getTimezoneOffset() == Math.min(d, b)) | 0;
              p()[c + 32 >> 2 >>> 0] = a;
            },
            v: function(a) {
              a >>>= 0;
              var b = new Date(p()[a + 20 >> 2 >>> 0] + 1900, p()[a + 16 >> 2 >>> 0], p()[a + 12 >> 2 >>> 0], p()[a + 8 >> 2 >>> 0], p()[a + 4 >> 2 >>> 0], p()[a >> 2 >>> 0], 0), c = p()[a + 32 >> 2 >>> 0], d = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), k = Math.min(h, g);
              0 > c ? p()[a + 32 >> 2 >>> 0] = Number(g != h && k == d) : 0 < c != (k == d) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : g) - d)));
              p()[a + 24 >> 2 >>> 0] = b.getDay();
              c = (Y(b.getFullYear()) ? tb : ub)[b.getMonth()] + b.getDate() - 1 | 0;
              p()[a + 28 >> 2 >>> 0] = c;
              p()[a >> 2 >>> 0] = b.getSeconds();
              p()[a + 4 >> 2 >>> 0] = b.getMinutes();
              p()[a + 8 >> 2 >>> 0] = b.getHours();
              p()[a + 12 >> 2 >>> 0] = b.getDate();
              p()[a + 16 >> 2 >>> 0] = b.getMonth();
              p()[a + 20 >> 2 >>> 0] = b.getYear();
              a = b.getTime() / 1e3;
              return $b((U = a, 1 <= +Math.abs(U) ? 0 < U ? +Math.floor(U / 4294967296) >>> 0 : ~~+Math.ceil((U - +(~~U >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;
            },
            r: vb,
            s: wb,
            y: function(a, b, c) {
              function d(v) {
                return (v = v.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? v[1] : "GMT";
              }
              a >>>= 0;
              b >>>= 0;
              c >>>= 0;
              var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), k = new Date(g, 6, 1);
              g = h.getTimezoneOffset();
              var q = k.getTimezoneOffset(), B = Math.max(g, q);
              t()[a >> 2 >>> 0] = 60 * B;
              p()[b >> 2 >>> 0] = Number(g != q);
              a = d(h);
              b = d(k);
              a = yb(a);
              b = yb(b);
              q < g ? (t()[c >> 2 >>> 0] = a, t()[c + 4 >> 2 >>> 0] = b) : (t()[c >> 2 >>> 0] = b, t()[c + 4 >> 2 >>> 0] = a);
            },
            c: () => {
              K("");
            },
            l: function() {
            },
            i: function() {
              return Date.now();
            },
            V: () => {
              va += 1;
              throw "unwind";
            },
            A: function() {
              return 4294901760;
            },
            e: () => performance.timeOrigin + performance.now(),
            f: function() {
              return C ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency;
            },
            K: function(a, b, c, d) {
              V.wb = b >>> 0;
              Db.length = c;
              b = d >>> 0 >> 3;
              for (d = 0; d < c; d++)
                Db[d] = ea()[b + d >>> 0];
              return Yb[a].apply(null, Db);
            },
            x: function(a) {
              a >>>= 0;
              var b = n().length;
              if (a <= b || 4294901760 < a)
                return false;
              for (var c = 1; 4 >= c; c *= 2) {
                var d = b * (1 + 0.2 / c);
                d = Math.min(d, a + 100663296);
                var g = Math;
                d = Math.max(a, d);
                a: {
                  g = g.min.call(g, 4294901760, d + (65536 - d % 65536) % 65536) - e.buffer.byteLength + 65535 >>> 16;
                  try {
                    e.grow(g);
                    m();
                    var h = 1;
                    break a;
                  } catch (k) {
                  }
                  h = void 0;
                }
                if (h)
                  return true;
              }
              return false;
            },
            O: Hb,
            P: Ib,
            H: Na,
            g: Jb,
            n: Nb,
            w: Ob,
            m: Qb,
            a: e || w.wasmMemory,
            G: Vb,
            d: function(a, b, c, d) {
              return Vb(a >>> 0, b >>> 0, c >>> 0, d >>> 0);
            },
            j: function(a, b, c, d) {
              const g = P.length;
              a = new Uint8Array(n().slice(a + b, a + c));
              try {
                var h = new WebAssembly.Module(a), k = new WebAssembly.Instance(h, { env: { memory: e } }), q;
                for (q in k.exports)
                  Xb(k.exports[q]);
                return g < P.length ? g : d;
              } catch (B) {
                return console.log(B), d;
              }
            }
          };
          (function() {
            function a(c, d) {
              c = c.exports;
              L = c = bc(c);
              V.$a.push(L.za);
              P = L.Aa;
              ta.unshift(L.W);
              ra = d;
              ya();
              return c;
            }
            var b = { a: ac };
            xa();
            if (w.instantiateWasm)
              try {
                return w.instantiateWasm(b, a);
              } catch (c) {
                I("Module.instantiateWasm callback failed with error: " + c), x(c);
              }
            Da(b, function(c) {
              a(c.instance, c.module);
            }).catch(x);
            return {};
          })();
          w._OrtInit = (a, b) => (w._OrtInit = L.X)(a, b);
          w._OrtGetLastError = (a, b) => (w._OrtGetLastError = L.Y)(a, b);
          w._OrtCreateSessionOptions = (a, b, c, d, g, h, k, q, B, v) => (w._OrtCreateSessionOptions = L.Z)(a, b, c, d, g, h, k, q, B, v);
          w._OrtAppendExecutionProvider = (a, b) => (w._OrtAppendExecutionProvider = L._)(a, b);
          w._OrtAddFreeDimensionOverride = (a, b, c) => (w._OrtAddFreeDimensionOverride = L.$)(a, b, c);
          w._OrtAddSessionConfigEntry = (a, b, c) => (w._OrtAddSessionConfigEntry = L.aa)(a, b, c);
          w._OrtReleaseSessionOptions = (a) => (w._OrtReleaseSessionOptions = L.ba)(a);
          w._OrtCreateSession = (a, b, c) => (w._OrtCreateSession = L.ca)(a, b, c);
          w._OrtReleaseSession = (a) => (w._OrtReleaseSession = L.da)(a);
          w._OrtGetInputOutputCount = (a, b, c) => (w._OrtGetInputOutputCount = L.ea)(a, b, c);
          w._OrtGetInputName = (a, b) => (w._OrtGetInputName = L.fa)(a, b);
          w._OrtGetOutputName = (a, b) => (w._OrtGetOutputName = L.ga)(a, b);
          w._OrtFree = (a) => (w._OrtFree = L.ha)(a);
          w._OrtCreateTensor = (a, b, c, d, g, h) => (w._OrtCreateTensor = L.ia)(a, b, c, d, g, h);
          w._OrtGetTensorData = (a, b, c, d, g) => (w._OrtGetTensorData = L.ja)(a, b, c, d, g);
          w._OrtReleaseTensor = (a) => (w._OrtReleaseTensor = L.ka)(a);
          w._OrtCreateRunOptions = (a, b, c, d) => (w._OrtCreateRunOptions = L.la)(a, b, c, d);
          w._OrtAddRunConfigEntry = (a, b, c) => (w._OrtAddRunConfigEntry = L.ma)(a, b, c);
          w._OrtReleaseRunOptions = (a) => (w._OrtReleaseRunOptions = L.na)(a);
          w._OrtCreateBinding = (a) => (w._OrtCreateBinding = L.oa)(a);
          w._OrtBindInput = (a, b, c) => (w._OrtBindInput = L.pa)(a, b, c);
          w._OrtBindOutput = (a, b, c, d) => (w._OrtBindOutput = L.qa)(a, b, c, d);
          w._OrtClearBoundOutputs = (a) => (w._OrtClearBoundOutputs = L.ra)(a);
          w._OrtReleaseBinding = (a) => (w._OrtReleaseBinding = L.sa)(a);
          w._OrtRunWithBinding = (a, b, c, d, g) => (w._OrtRunWithBinding = L.ta)(a, b, c, d, g);
          w._OrtRun = (a, b, c, d, g, h, k, q) => (w._OrtRun = L.ua)(a, b, c, d, g, h, k, q);
          w._OrtEndProfiling = (a) => (w._OrtEndProfiling = L.va)(a);
          var Pa = w._pthread_self = () => (Pa = w._pthread_self = L.wa)(), xb = w._malloc = (a) => (xb = w._malloc = L.xa)(a);
          w._free = (a) => (w._free = L.ya)(a);
          w.__emscripten_tls_init = () => (w.__emscripten_tls_init = L.za)();
          var Zb = w.__emscripten_thread_init = (a, b, c, d, g, h) => (Zb = w.__emscripten_thread_init = L.Ba)(a, b, c, d, g, h);
          w.__emscripten_thread_crashed = () => (w.__emscripten_thread_crashed = L.Ca)();
          var Cb = (a, b, c, d) => (Cb = L.Da)(a, b, c, d), Oa = (a) => (Oa = L.Ea)(a), Va = w.__emscripten_thread_exit = (a) => (Va = w.__emscripten_thread_exit = L.Fa)(a), sb = w.__emscripten_check_mailbox = () => (sb = w.__emscripten_check_mailbox = L.Ga)(), $b = (a) => ($b = L.Ha)(a), Sa = (a, b) => (Sa = L.Ia)(a, b), zb = () => (zb = L.Ja)(), Ta = (a) => (Ta = L.Ka)(a), Bb = (a) => (Bb = L.La)(a);
          w.___start_em_js = 906844;
          w.___stop_em_js = 907456;
          function bc(a) {
            a = Object.assign({}, a);
            var b = (d) => () => d() >>> 0, c = (d) => (g) => d(g) >>> 0;
            a.__errno_location = b(a.__errno_location);
            a.pthread_self = b(a.pthread_self);
            a.malloc = c(a.malloc);
            a.stackSave = b(a.stackSave);
            a.stackAlloc = c(a.stackAlloc);
            return a;
          }
          w.keepRuntimeAlive = Q;
          w.wasmMemory = e;
          w.stackAlloc = Bb;
          w.stackSave = zb;
          w.stackRestore = Ta;
          w.addFunction = Xb;
          w.UTF8ToString = Ka;
          w.stringToUTF8 = eb;
          w.lengthBytesUTF8 = cb;
          w.ExitStatus = Ea;
          w.PThread = V;
          var cc;
          S = function dc() {
            cc || ec();
            cc || (S = dc);
          };
          function ec() {
            function a() {
              if (!cc && (cc = true, w.calledRun = true, !M)) {
                D || Ra(ta);
                ha(w);
                if (w.onRuntimeInitialized)
                  w.onRuntimeInitialized();
                if (!D) {
                  if (w.postRun)
                    for ("function" == typeof w.postRun && (w.postRun = [w.postRun]); w.postRun.length; ) {
                      var b = w.postRun.shift();
                      ua.unshift(b);
                    }
                  Ra(ua);
                }
              }
            }
            if (!(0 < R))
              if (D)
                ha(w), D || Ra(ta), startWorker(w);
              else {
                if (w.preRun)
                  for ("function" == typeof w.preRun && (w.preRun = [w.preRun]); w.preRun.length; )
                    sa.unshift(w.preRun.shift());
                Ra(sa);
                0 < R || (w.setStatus ? (w.setStatus("Running..."), setTimeout(function() {
                  setTimeout(
                    function() {
                      w.setStatus("");
                    },
                    1
                  );
                  a();
                }, 1)) : a());
              }
          }
          if (w.preInit)
            for ("function" == typeof w.preInit && (w.preInit = [w.preInit]); 0 < w.preInit.length; )
              w.preInit.pop()();
          ec();
          return moduleArg.ready;
        };
      })();
      if (typeof exports === "object" && typeof module === "object")
        module.exports = ortWasmThreaded;
      else if (typeof define === "function" && define["amd"])
        define([], () => ortWasmThreaded);
    }
  });

  // web/lib/wasm/binding/ort-wasm-threaded.worker.js
  var require_ort_wasm_threaded_worker = __commonJS({
    "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {
      module.exports = '"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*isMainBrowserThread=*/0,/*isMainRuntimeThread=*/0,/*canBlock=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}}self.onmessage=handleMessage;\n';
    }
  });

  // web/lib/wasm/wasm-factory.ts
  var ortWasmFactory, ortWasmFactoryThreaded, wasm, initialized, initializing, aborted, isMultiThreadSupported, isSimdSupported, getWasmFileName, initializeWebAssembly, getInstance;
  var init_wasm_factory = __esm({
    "web/lib/wasm/wasm-factory.ts"() {
      "use strict";
      init_node_path();
      if (false) {
        ortWasmFactory = null;
      } else {
        ortWasmFactory = true ? require_ort_wasm() : null;
      }
      ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;
      initialized = false;
      initializing = false;
      aborted = false;
      isMultiThreadSupported = () => {
        try {
          if (typeof SharedArrayBuffer === "undefined") {
            return false;
          }
          if (typeof MessageChannel !== "undefined") {
            new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));
          }
          return WebAssembly.validate(new Uint8Array([
            0,
            97,
            115,
            109,
            1,
            0,
            0,
            0,
            1,
            4,
            1,
            96,
            0,
            0,
            3,
            2,
            1,
            0,
            5,
            4,
            1,
            3,
            1,
            1,
            10,
            11,
            1,
            9,
            0,
            65,
            0,
            254,
            16,
            2,
            0,
            26,
            11
          ]));
        } catch (e) {
          return false;
        }
      };
      isSimdSupported = () => {
        try {
          return WebAssembly.validate(new Uint8Array([
            0,
            97,
            115,
            109,
            1,
            0,
            0,
            0,
            1,
            4,
            1,
            96,
            0,
            0,
            3,
            2,
            1,
            0,
            10,
            30,
            1,
            28,
            0,
            65,
            0,
            253,
            15,
            253,
            12,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            253,
            186,
            1,
            26,
            11
          ]));
        } catch (e) {
          return false;
        }
      };
      getWasmFileName = (useSimd, useThreads) => {
        if (useSimd) {
          if (false) {
            return "ort-training-wasm-simd.wasm";
          }
          return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";
        } else {
          return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";
        }
      };
      initializeWebAssembly = async (flags) => {
        if (initialized) {
          return Promise.resolve();
        }
        if (initializing) {
          throw new Error("multiple calls to 'initializeWebAssembly()' detected.");
        }
        if (aborted) {
          throw new Error("previous call to 'initializeWebAssembly()' failed.");
        }
        initializing = true;
        const timeout = flags.initTimeout;
        const numThreads = flags.numThreads;
        const simd = flags.simd;
        const useThreads = numThreads > 1 && isMultiThreadSupported();
        const useSimd = simd && isSimdSupported();
        const wasmPaths = flags.wasmPaths;
        const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;
        const wasmFileName = getWasmFileName(useSimd, useThreads);
        const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;
        let isTimeout = false;
        const tasks = [];
        if (timeout > 0) {
          tasks.push(new Promise((resolve) => {
            setTimeout(() => {
              isTimeout = true;
              resolve();
            }, timeout);
          }));
        }
        tasks.push(new Promise((resolve, reject) => {
          const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;
          const config = {
            locateFile: (fileName, scriptDirectory) => {
              if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {
                return URL.createObjectURL(new Blob(
                  [
                    // This require() function is handled by esbuild plugin to load file content as string.
                    // eslint-disable-next-line @typescript-eslint/no-require-imports
                    require_ort_wasm_threaded_worker()
                  ],
                  { type: "text/javascript" }
                ));
              }
              if (fileName.endsWith(".wasm")) {
                if (wasmPathOverride) {
                  return wasmPathOverride;
                }
                const prefix = wasmPrefixOverride ?? scriptDirectory;
                if (false) {
                  if (wasmFileName === "ort-wasm-simd.wasm") {
                    return prefix + "ort-wasm-simd.jsep.wasm";
                  } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {
                    return prefix + "ort-wasm-simd-threaded.jsep.wasm";
                  }
                }
                return prefix + wasmFileName;
              }
              return scriptDirectory + fileName;
            }
          };
          if (useThreads) {
            if (typeof Blob === "undefined") {
              config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");
            } else {
              const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;
              config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });
            }
          }
          factory(config).then(
            // wasm module initialized successfully
            (module) => {
              initializing = false;
              initialized = true;
              wasm = module;
              resolve();
            },
            // wasm module failed to initialize
            (what) => {
              initializing = false;
              aborted = true;
              reject(what);
            }
          );
        }));
        await Promise.race(tasks);
        if (isTimeout) {
          throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);
        }
      };
      getInstance = () => {
        if (initialized && wasm) {
          return wasm;
        }
        throw new Error("WebAssembly is not initialized yet.");
      };
    }
  });

  // web/lib/wasm/wasm-utils.ts
  var allocWasmString, iterateExtraOptions, checkLastError;
  var init_wasm_utils = __esm({
    "web/lib/wasm/wasm-utils.ts"() {
      "use strict";
      init_wasm_factory();
      allocWasmString = (data, allocs) => {
        const wasm2 = getInstance();
        const dataLength = wasm2.lengthBytesUTF8(data) + 1;
        const dataOffset = wasm2._malloc(dataLength);
        wasm2.stringToUTF8(data, dataOffset, dataLength);
        allocs.push(dataOffset);
        return dataOffset;
      };
      iterateExtraOptions = (options, prefix, seen, handler) => {
        if (typeof options == "object" && options !== null) {
          if (seen.has(options)) {
            throw new Error("Circular reference in options");
          } else {
            seen.add(options);
          }
        }
        Object.entries(options).forEach(([key, value]) => {
          const name = prefix ? prefix + key : key;
          if (typeof value === "object") {
            iterateExtraOptions(value, name + ".", seen, handler);
          } else if (typeof value === "string" || typeof value === "number") {
            handler(name, value.toString());
          } else if (typeof value === "boolean") {
            handler(name, value ? "1" : "0");
          } else {
            throw new Error(`Can't handle extra config type: ${typeof value}`);
          }
        });
      };
      checkLastError = (message) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        try {
          const paramsOffset = wasm2.stackAlloc(8);
          wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);
          const errorCode = wasm2.HEAP32[paramsOffset / 4];
          const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];
          const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";
          throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);
        } finally {
          wasm2.stackRestore(stack);
        }
      };
    }
  });

  // web/lib/wasm/run-options.ts
  var setRunOptions;
  var init_run_options = __esm({
    "web/lib/wasm/run-options.ts"() {
      "use strict";
      init_wasm_factory();
      init_wasm_utils();
      setRunOptions = (options) => {
        const wasm2 = getInstance();
        let runOptionsHandle = 0;
        const allocs = [];
        const runOptions = options || {};
        try {
          if (options?.logSeverityLevel === void 0) {
            runOptions.logSeverityLevel = 2;
          } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {
            throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);
          }
          if (options?.logVerbosityLevel === void 0) {
            runOptions.logVerbosityLevel = 0;
          } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {
            throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);
          }
          if (options?.terminate === void 0) {
            runOptions.terminate = false;
          }
          let tagDataOffset = 0;
          if (options?.tag !== void 0) {
            tagDataOffset = allocWasmString(options.tag, allocs);
          }
          runOptionsHandle = wasm2._OrtCreateRunOptions(
            runOptions.logSeverityLevel,
            runOptions.logVerbosityLevel,
            !!runOptions.terminate,
            tagDataOffset
          );
          if (runOptionsHandle === 0) {
            checkLastError("Can't create run options.");
          }
          if (options?.extra !== void 0) {
            iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
              const keyDataOffset = allocWasmString(key, allocs);
              const valueDataOffset = allocWasmString(value, allocs);
              if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                checkLastError(`Can't set a run config entry: ${key} - ${value}.`);
              }
            });
          }
          return [runOptionsHandle, allocs];
        } catch (e) {
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
          throw e;
        }
      };
    }
  });

  // web/lib/wasm/session-options.ts
  var getGraphOptimzationLevel, getExecutionMode, appendDefaultOptions, setExecutionProviders, setSessionOptions;
  var init_session_options = __esm({
    "web/lib/wasm/session-options.ts"() {
      "use strict";
      init_wasm_factory();
      init_wasm_utils();
      getGraphOptimzationLevel = (graphOptimizationLevel) => {
        switch (graphOptimizationLevel) {
          case "disabled":
            return 0;
          case "basic":
            return 1;
          case "extended":
            return 2;
          case "all":
            return 99;
          default:
            throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);
        }
      };
      getExecutionMode = (executionMode) => {
        switch (executionMode) {
          case "sequential":
            return 0;
          case "parallel":
            return 1;
          default:
            throw new Error(`unsupported execution mode: ${executionMode}`);
        }
      };
      appendDefaultOptions = (options) => {
        if (!options.extra) {
          options.extra = {};
        }
        if (!options.extra.session) {
          options.extra.session = {};
        }
        const session = options.extra.session;
        if (!session.use_ort_model_bytes_directly) {
          session.use_ort_model_bytes_directly = "1";
        }
        if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {
          options.enableMemPattern = false;
        }
      };
      setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {
        for (const ep of executionProviders) {
          let epName = typeof ep === "string" ? ep : ep.name;
          switch (epName) {
            case "xnnpack":
              epName = "XNNPACK";
              break;
            case "webnn":
              epName = "WEBNN";
              if (typeof ep !== "string") {
                const webnnOptions = ep;
                if (webnnOptions?.deviceType) {
                  const keyDataOffset = allocWasmString("deviceType", allocs);
                  const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);
                  }
                }
                if (webnnOptions?.numThreads) {
                  let numThreads = webnnOptions.numThreads;
                  if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {
                    numThreads = 0;
                  }
                  const keyDataOffset = allocWasmString("numThreads", allocs);
                  const valueDataOffset = allocWasmString(numThreads.toString(), allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(`Can't set a session config entry: 'numThreads' - ${webnnOptions.numThreads}.`);
                  }
                }
                if (webnnOptions?.powerPreference) {
                  const keyDataOffset = allocWasmString("powerPreference", allocs);
                  const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(
                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`
                    );
                  }
                }
              }
              break;
            case "webgpu":
              epName = "JS";
              if (typeof ep !== "string") {
                const webgpuOptions = ep;
                if (webgpuOptions?.preferredLayout) {
                  if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {
                    throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);
                  }
                  const keyDataOffset = allocWasmString("preferredLayout", allocs);
                  const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(
                      `Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`
                    );
                  }
                }
              }
              break;
            case "wasm":
            case "cpu":
              continue;
            default:
              throw new Error(`not supported execution provider: ${epName}`);
          }
          const epNameDataOffset = allocWasmString(epName, allocs);
          if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {
            checkLastError(`Can't append execution provider: ${epName}.`);
          }
        }
      };
      setSessionOptions = (options) => {
        const wasm2 = getInstance();
        let sessionOptionsHandle = 0;
        const allocs = [];
        const sessionOptions = options || {};
        appendDefaultOptions(sessionOptions);
        try {
          const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");
          const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");
          const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;
          const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;
          if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {
            throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);
          }
          const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;
          if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {
            throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);
          }
          const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;
          sessionOptionsHandle = wasm2._OrtCreateSessionOptions(
            graphOptimizationLevel,
            !!sessionOptions.enableCpuMemArena,
            !!sessionOptions.enableMemPattern,
            executionMode,
            !!sessionOptions.enableProfiling,
            0,
            logIdDataOffset,
            logSeverityLevel,
            logVerbosityLevel,
            optimizedModelFilePathOffset
          );
          if (sessionOptionsHandle === 0) {
            checkLastError("Can't create session options.");
          }
          if (sessionOptions.executionProviders) {
            setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);
          }
          if (sessionOptions.freeDimensionOverrides) {
            for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {
              if (typeof name !== "string") {
                throw new Error(`free dimension override name must be a string: ${name}`);
              }
              if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {
                throw new Error(`free dimension override value must be a non-negative integer: ${value}`);
              }
              const nameOffset = allocWasmString(name, allocs);
              if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {
                checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);
              }
            }
          }
          if (sessionOptions.extra !== void 0) {
            iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
              const keyDataOffset = allocWasmString(key, allocs);
              const valueDataOffset = allocWasmString(value, allocs);
              if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                checkLastError(`Can't set a session config entry: ${key} - ${value}.`);
              }
            });
          }
          return [sessionOptionsHandle, allocs];
        } catch (e) {
          if (sessionOptionsHandle !== 0) {
            wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
          throw e;
        }
      };
    }
  });

  // web/lib/wasm/wasm-common.ts
  var tensorDataTypeStringToEnum, tensorDataTypeEnumToString, getTensorElementSize, tensorTypeToTypedArrayConstructor, logLevelStringToEnum, isGpuBufferSupportedType, dataLocationStringToEnum;
  var init_wasm_common = __esm({
    "web/lib/wasm/wasm-common.ts"() {
      "use strict";
      tensorDataTypeStringToEnum = (type) => {
        switch (type) {
          case "int8":
            return 3 /* int8 */;
          case "uint8":
            return 2 /* uint8 */;
          case "bool":
            return 9 /* bool */;
          case "int16":
            return 5 /* int16 */;
          case "uint16":
            return 4 /* uint16 */;
          case "int32":
            return 6 /* int32 */;
          case "uint32":
            return 12 /* uint32 */;
          case "float16":
            return 10 /* float16 */;
          case "float32":
            return 1 /* float */;
          case "float64":
            return 11 /* double */;
          case "string":
            return 8 /* string */;
          case "int64":
            return 7 /* int64 */;
          case "uint64":
            return 13 /* uint64 */;
          default:
            throw new Error(`unsupported data type: ${type}`);
        }
      };
      tensorDataTypeEnumToString = (typeProto) => {
        switch (typeProto) {
          case 3 /* int8 */:
            return "int8";
          case 2 /* uint8 */:
            return "uint8";
          case 9 /* bool */:
            return "bool";
          case 5 /* int16 */:
            return "int16";
          case 4 /* uint16 */:
            return "uint16";
          case 6 /* int32 */:
            return "int32";
          case 12 /* uint32 */:
            return "uint32";
          case 10 /* float16 */:
            return "float16";
          case 1 /* float */:
            return "float32";
          case 11 /* double */:
            return "float64";
          case 8 /* string */:
            return "string";
          case 7 /* int64 */:
            return "int64";
          case 13 /* uint64 */:
            return "uint64";
          default:
            throw new Error(`unsupported data type: ${typeProto}`);
        }
      };
      getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];
      tensorTypeToTypedArrayConstructor = (type) => {
        switch (type) {
          case "float16":
            return Uint16Array;
          case "float32":
            return Float32Array;
          case "uint8":
            return Uint8Array;
          case "int8":
            return Int8Array;
          case "uint16":
            return Uint16Array;
          case "int16":
            return Int16Array;
          case "int32":
            return Int32Array;
          case "bool":
            return Uint8Array;
          case "float64":
            return Float64Array;
          case "uint32":
            return Uint32Array;
          case "int64":
            return BigInt64Array;
          case "uint64":
            return BigUint64Array;
          default:
            throw new Error(`unsupported type: ${type}`);
        }
      };
      logLevelStringToEnum = (logLevel) => {
        switch (logLevel) {
          case "verbose":
            return 0;
          case "info":
            return 1;
          case "warning":
            return 2;
          case "error":
            return 3;
          case "fatal":
            return 4;
          default:
            throw new Error(`unsupported logging level: ${logLevel}`);
        }
      };
      isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";
      dataLocationStringToEnum = (location) => {
        switch (location) {
          case "none":
            return 0;
          case "cpu":
            return 1;
          case "cpu-pinned":
            return 2;
          case "texture":
            return 3;
          case "gpu-buffer":
            return 4;
          default:
            throw new Error(`unsupported data location: ${location}`);
        }
      };
    }
  });

  // web/lib/wasm/wasm-core-impl.ts
  var ortEnvInitialized, getSessionInputOutputCount, initOrt, initRuntime, activeSessions, isOrtEnvInitialized, createSessionAllocate, createSessionFinalize, createSession, releaseSession, prepareInputOutputTensor, run, endProfiling, extractTransferableBuffers;
  var init_wasm_core_impl = __esm({
    "web/lib/wasm/wasm-core-impl.ts"() {
      "use strict";
      init_run_options();
      init_session_options();
      init_wasm_common();
      init_wasm_factory();
      init_wasm_utils();
      ortEnvInitialized = false;
      getSessionInputOutputCount = (sessionHandle) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        try {
          const dataOffset = wasm2.stackAlloc(8);
          const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);
          if (errorCode !== 0) {
            checkLastError("Can't get session input/output count.");
          }
          return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];
        } finally {
          wasm2.stackRestore(stack);
        }
      };
      initOrt = (numThreads, loggingLevel) => {
        const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);
        if (errorCode !== 0) {
          checkLastError("Can't initialize onnxruntime.");
        }
      };
      initRuntime = async (env3) => {
        initOrt(env3.wasm.numThreads, logLevelStringToEnum(env3.logLevel));
        if (false) {
          const initJsep = null.init;
          await initJsep(getInstance(), env3);
        }
        ortEnvInitialized = true;
      };
      activeSessions = /* @__PURE__ */ new Map();
      isOrtEnvInitialized = () => ortEnvInitialized;
      createSessionAllocate = (model) => {
        const wasm2 = getInstance();
        const modelDataOffset = wasm2._malloc(model.byteLength);
        if (modelDataOffset === 0) {
          throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);
        }
        wasm2.HEAPU8.set(model, modelDataOffset);
        return [modelDataOffset, model.byteLength];
      };
      createSessionFinalize = (modelData, options) => {
        const wasm2 = getInstance();
        let sessionHandle = 0;
        let sessionOptionsHandle = 0;
        let ioBindingHandle = 0;
        let allocs = [];
        const inputNamesUTF8Encoded = [];
        const outputNamesUTF8Encoded = [];
        try {
          [sessionOptionsHandle, allocs] = setSessionOptions(options);
          sessionHandle = wasm2._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);
          if (sessionHandle === 0) {
            checkLastError("Can't create a session.");
          }
          const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);
          const inputNames = [];
          const outputNames = [];
          const outputPreferredLocations = [];
          for (let i = 0; i < inputCount; i++) {
            const name = wasm2._OrtGetInputName(sessionHandle, i);
            if (name === 0) {
              checkLastError("Can't get an input name.");
            }
            inputNamesUTF8Encoded.push(name);
            inputNames.push(wasm2.UTF8ToString(name));
          }
          for (let i = 0; i < outputCount; i++) {
            const name = wasm2._OrtGetOutputName(sessionHandle, i);
            if (name === 0) {
              checkLastError("Can't get an output name.");
            }
            outputNamesUTF8Encoded.push(name);
            const nameString = wasm2.UTF8ToString(name);
            outputNames.push(nameString);
            if (false) {
              const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";
              if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {
                throw new Error(`Not supported preferred output location: ${location}.`);
              }
              outputPreferredLocations.push(location);
            }
          }
          let bindingState = null;
          if (false) {
            ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);
            if (ioBindingHandle === 0) {
              checkLastError("Can't create IO binding.");
            }
            bindingState = {
              handle: ioBindingHandle,
              outputPreferredLocations,
              outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))
            };
          }
          activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);
          return [sessionHandle, inputNames, outputNames];
        } catch (e) {
          inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
          outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
          if (ioBindingHandle !== 0) {
            wasm2._OrtReleaseBinding(ioBindingHandle);
          }
          if (sessionHandle !== 0) {
            wasm2._OrtReleaseSession(sessionHandle);
          }
          throw e;
        } finally {
          wasm2._free(modelData[0]);
          if (sessionOptionsHandle !== 0) {
            wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
        }
      };
      createSession = (model, options) => {
        const modelData = createSessionAllocate(model);
        return createSessionFinalize(modelData, options);
      };
      releaseSession = (sessionId) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error(`cannot release session. invalid session id: ${sessionId}`);
        }
        const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;
        if (ioBindingState) {
          wasm2._OrtReleaseBinding(ioBindingState.handle);
        }
        wasm2.jsepUnregisterBuffers?.(sessionId);
        inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        wasm2._OrtReleaseSession(sessionHandle);
        activeSessions.delete(sessionId);
      };
      prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {
        if (!tensor) {
          tensorHandles.push(0);
          return;
        }
        const wasm2 = getInstance();
        const dataType = tensor[0];
        const dims = tensor[1];
        const location = tensor[3];
        let rawData;
        let dataByteLength;
        if (dataType === "string" && location === "gpu-buffer") {
          throw new Error("String tensor is not supported on GPU.");
        }
        if (location === "gpu-buffer") {
          const gpuBuffer = tensor[2].gpuBuffer;
          const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));
          dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;
          rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);
        } else {
          const data = tensor[2];
          if (Array.isArray(data)) {
            dataByteLength = 4 * data.length;
            rawData = wasm2._malloc(dataByteLength);
            allocs.push(rawData);
            let dataIndex = rawData / 4;
            for (let i = 0; i < data.length; i++) {
              if (typeof data[i] !== "string") {
                throw new TypeError(`tensor data at index ${i} is not a string`);
              }
              wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);
            }
          } else {
            dataByteLength = data.byteLength;
            rawData = wasm2._malloc(dataByteLength);
            allocs.push(rawData);
            wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);
          }
        }
        const stack = wasm2.stackSave();
        const dimsOffset = wasm2.stackAlloc(4 * dims.length);
        try {
          let dimIndex = dimsOffset / 4;
          dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);
          const tensor2 = wasm2._OrtCreateTensor(
            tensorDataTypeStringToEnum(dataType),
            rawData,
            dataByteLength,
            dimsOffset,
            dims.length,
            dataLocationStringToEnum(location)
          );
          if (tensor2 === 0) {
            checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);
          }
          tensorHandles.push(tensor2);
        } finally {
          wasm2.stackRestore(stack);
        }
      };
      run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error(`cannot run inference. invalid session id: ${sessionId}`);
        }
        const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;
        const inputCount = inputIndices.length;
        const outputCount = outputIndices.length;
        let runOptionsHandle = 0;
        let runOptionsAllocs = [];
        const inputTensorHandles = [];
        const outputTensorHandles = [];
        const inputOutputAllocs = [];
        const beforeRunStack = wasm2.stackSave();
        const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);
        const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);
        const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);
        const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);
        try {
          [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
          for (let i = 0; i < inputCount; i++) {
            prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);
          }
          for (let i = 0; i < outputCount; i++) {
            prepareInputOutputTensor(
              outputTensors[i],
              outputTensorHandles,
              inputOutputAllocs,
              sessionId,
              inputCount + outputIndices[i]
            );
          }
          let inputValuesIndex = inputValuesOffset / 4;
          let inputNamesIndex = inputNamesOffset / 4;
          let outputValuesIndex = outputValuesOffset / 4;
          let outputNamesIndex = outputNamesOffset / 4;
          for (let i = 0; i < inputCount; i++) {
            wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];
            wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];
          }
          for (let i = 0; i < outputCount; i++) {
            wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];
            wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];
          }
          if (false) {
            const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;
            if (inputNamesUTF8Encoded.length !== inputCount) {
              throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`);
            }
            for (let i = 0; i < inputCount; i++) {
              const index = inputIndices[i];
              const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);
              if (errorCode2 !== 0) {
                checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);
              }
            }
            for (let i = 0; i < outputCount; i++) {
              const index = outputIndices[i];
              const location = outputTensors[i]?.[3];
              if (location) {
                const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);
                if (errorCode2 !== 0) {
                  checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);
                }
              } else {
                const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);
                if (errorCode2 !== 0) {
                  checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);
                }
              }
            }
          }
          let errorCode;
          if (false) {
            errorCode = await wasm2._OrtRunWithBinding(
              sessionHandle,
              ioBindingState.handle,
              outputCount,
              outputValuesOffset,
              runOptionsHandle
            );
          } else {
            errorCode = await wasm2._OrtRun(
              sessionHandle,
              inputNamesOffset,
              inputValuesOffset,
              inputCount,
              outputNamesOffset,
              outputCount,
              outputValuesOffset,
              runOptionsHandle
            );
          }
          if (errorCode !== 0) {
            checkLastError("failed to call OrtRun().");
          }
          const output = [];
          for (let i = 0; i < outputCount; i++) {
            const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];
            if (tensor === outputTensorHandles[i]) {
              output.push(outputTensors[i]);
              continue;
            }
            const beforeGetTensorDataStack = wasm2.stackSave();
            const tensorDataOffset = wasm2.stackAlloc(4 * 4);
            let keepOutputTensor = false;
            let type, dataOffset = 0;
            try {
              const errorCode2 = wasm2._OrtGetTensorData(
                tensor,
                tensorDataOffset,
                tensorDataOffset + 4,
                tensorDataOffset + 8,
                tensorDataOffset + 12
              );
              if (errorCode2 !== 0) {
                checkLastError(`Can't access output tensor data on index ${i}.`);
              }
              let tensorDataIndex = tensorDataOffset / 4;
              const dataType = wasm2.HEAPU32[tensorDataIndex++];
              dataOffset = wasm2.HEAPU32[tensorDataIndex++];
              const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];
              const dimsLength = wasm2.HEAPU32[tensorDataIndex++];
              const dims = [];
              for (let i2 = 0; i2 < dimsLength; i2++) {
                dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);
              }
              wasm2._OrtFree(dimsOffset);
              const size = dims.reduce((a, b) => a * b, 1);
              type = tensorDataTypeEnumToString(dataType);
              const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];
              if (type === "string") {
                if (preferredLocation === "gpu-buffer") {
                  throw new Error("String tensor is not supported on GPU.");
                }
                const stringData = [];
                let dataIndex = dataOffset / 4;
                for (let i2 = 0; i2 < size; i2++) {
                  const offset = wasm2.HEAPU32[dataIndex++];
                  const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;
                  stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));
                }
                output.push([type, dims, stringData, "cpu"]);
              } else {
                if (preferredLocation === "gpu-buffer" && size > 0) {
                  const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);
                  const elementSize = getTensorElementSize(dataType);
                  if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {
                    throw new Error(`Unsupported data type: ${type}`);
                  }
                  keepOutputTensor = true;
                  output.push([
                    type,
                    dims,
                    {
                      gpuBuffer,
                      download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),
                      dispose: () => {
                        wasm2._OrtReleaseTensor(tensor);
                      }
                    },
                    "gpu-buffer"
                  ]);
                } else {
                  const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);
                  const data = new typedArrayConstructor(size);
                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));
                  output.push([type, dims, data, "cpu"]);
                }
              }
            } finally {
              wasm2.stackRestore(beforeGetTensorDataStack);
              if (type === "string" && dataOffset) {
                wasm2._free(dataOffset);
              }
              if (!keepOutputTensor) {
                wasm2._OrtReleaseTensor(tensor);
              }
            }
          }
          if (ioBindingState) {
            wasm2._OrtClearBoundOutputs(ioBindingState.handle);
          }
          return output;
        } finally {
          wasm2.stackRestore(beforeRunStack);
          inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          inputOutputAllocs.forEach((p) => wasm2._free(p));
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          runOptionsAllocs.forEach((p) => wasm2._free(p));
        }
      };
      endProfiling = (sessionId) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error("invalid session id");
        }
        const sessionHandle = session[0];
        const profileFileName = wasm2._OrtEndProfiling(sessionHandle);
        if (profileFileName === 0) {
          checkLastError("Can't get an profile file name.");
        }
        wasm2._OrtFree(profileFileName);
      };
      extractTransferableBuffers = (tensors) => {
        const buffers = [];
        for (const tensor of tensors) {
          const data = tensor[2];
          if (!Array.isArray(data) && "buffer" in data) {
            buffers.push(data.buffer);
          }
        }
        return buffers;
      };
    }
  });

  // proxy-worker:./proxy-worker/main
  var require_main = __commonJS({
    "proxy-worker:./proxy-worker/main"(exports, module) {
      module.exports = '/*!\n * ONNX Runtime Web v1.17.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";\n(() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === "object" || typeof from === "function") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n\n  // nodejs-ignore:fs\n  var fs_exports = {};\n  __export(fs_exports, {\n    readFile: () => readFile\n  });\n  var readFile;\n  var init_fs = __esm({\n    "nodejs-ignore:fs"() {\n      readFile = void 0;\n    }\n  });\n\n  // nodejs-ignore:path\n  var path_exports = {};\n  __export(path_exports, {\n    join: () => join2\n  });\n  var join2;\n  var init_path = __esm({\n    "nodejs-ignore:path"() {\n      join2 = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm.js\n  var require_ort_wasm = __commonJS({\n    "web/lib/wasm/binding/ort-wasm.js"(exports, module) {\n      "use strict";\n      var ortWasm = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          var e = moduleArg, aa, l;\n          e.ready = new Promise((a, b) => {\n            aa = a;\n            l = b;\n          });\n          var ba = Object.assign({}, e), m = "./this.program", ca = "object" == typeof window, r = "function" == typeof importScripts, da = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, w = "", x, y, z;\n          if (da) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), B = (init_path(), __toCommonJS(path_exports));\n            w = r ? B.dirname(w) + "/" : __dirname + "/";\n            x = (a, b) => {\n              a = a.startsWith("file://") ? new URL(a) : B.normalize(a);\n              return fs.readFileSync(a, b ? void 0 : "utf8");\n            };\n            z = (a) => {\n              a = x(a, true);\n              a.buffer || (a = new Uint8Array(a));\n              return a;\n            };\n            y = (a, b, c, d = true) => {\n              a = a.startsWith("file://") ? new URL(a) : B.normalize(a);\n              fs.readFile(a, d ? void 0 : "utf8", (g, h) => {\n                g ? c(g) : b(d ? h.buffer : h);\n              });\n            };\n            !e.thisProgram && 1 < process.argv.length && (m = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            e.inspect = () => "[Emscripten Module object]";\n          } else if (ca || r)\n            r ? w = self.location.href : "undefined" != typeof document && document.currentScript && (w = document.currentScript.src), _scriptDir && (w = _scriptDir), 0 !== w.indexOf("blob:") ? w = w.substr(0, w.replace(/[?#].*/, "").lastIndexOf("/") + 1) : w = "", x = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, r && (z = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), y = (a, b, c) => {\n              var d = new XMLHttpRequest();\n              d.open("GET", a, true);\n              d.responseType = "arraybuffer";\n              d.onload = () => {\n                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();\n              };\n              d.onerror = c;\n              d.send(null);\n            };\n          var ea = e.print || console.log.bind(console), C = e.printErr || console.error.bind(console);\n          Object.assign(e, ba);\n          ba = null;\n          e.thisProgram && (m = e.thisProgram);\n          var D;\n          e.wasmBinary && (D = e.wasmBinary);\n          var noExitRuntime = e.noExitRuntime || true;\n          "object" != typeof WebAssembly && E("no native wasm support detected");\n          var F, G, fa = false, H, I, J, K;\n          function ha() {\n            var a = F.buffer;\n            e.HEAP8 = H = new Int8Array(a);\n            e.HEAP16 = new Int16Array(a);\n            e.HEAP32 = J = new Int32Array(a);\n            e.HEAPU8 = I = new Uint8Array(a);\n            e.HEAPU16 = new Uint16Array(a);\n            e.HEAPU32 = K = new Uint32Array(a);\n            e.HEAPF32 = new Float32Array(a);\n            e.HEAPF64 = new Float64Array(a);\n          }\n          var L, ia = [], ja = [], ka = [];\n          function la() {\n            var a = e.preRun.shift();\n            ia.unshift(a);\n          }\n          var M = 0, N = null, O = null;\n          function E(a) {\n            if (e.onAbort)\n              e.onAbort(a);\n            a = "Aborted(" + a + ")";\n            C(a);\n            fa = true;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            l(a);\n            throw a;\n          }\n          function ma(a) {\n            return a.startsWith("data:application/octet-stream;base64,");\n          }\n          var P;\n          P = "ort-wasm.wasm";\n          if (!ma(P)) {\n            var na = P;\n            P = e.locateFile ? e.locateFile(na, w) : w + na;\n          }\n          function oa(a) {\n            if (a == P && D)\n              return new Uint8Array(D);\n            if (z)\n              return z(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function pa(a) {\n            if (!D && (ca || r)) {\n              if ("function" == typeof fetch && !a.startsWith("file://"))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => oa(a));\n              if (y)\n                return new Promise((b, c) => {\n                  y(a, (d) => b(new Uint8Array(d)), c);\n                });\n            }\n            return Promise.resolve().then(() => oa(a));\n          }\n          function qa(a, b, c) {\n            return pa(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {\n              C("failed to asynchronously prepare wasm: " + d);\n              E(d);\n            });\n          }\n          function ra(a, b) {\n            var c = P;\n            return D || "function" != typeof WebAssembly.instantiateStreaming || ma(c) || c.startsWith("file://") || da || "function" != typeof fetch ? qa(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(g) {\n              C("wasm streaming compile failed: " + g);\n              C("falling back to ArrayBuffer instantiation");\n              return qa(c, a, b);\n            }));\n          }\n          var Q, R = (a) => {\n            for (; 0 < a.length; )\n              a.shift()(e);\n          };\n          function sa(a) {\n            this.xa = a - 24;\n            this.Ga = function(b) {\n              K[this.xa + 4 >> 2 >>> 0] = b;\n            };\n            this.Fa = function(b) {\n              K[this.xa + 8 >> 2 >>> 0] = b;\n            };\n            this.za = function(b, c) {\n              this.Ea();\n              this.Ga(b);\n              this.Fa(c);\n            };\n            this.Ea = function() {\n              K[this.xa + 16 >> 2 >>> 0] = 0;\n            };\n          }\n          var ta = 0, ua = 0, va = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, wa = (a, b, c) => {\n            b >>>= 0;\n            var d = b + c;\n            for (c = b; a[c] && !(c >= d); )\n              ++c;\n            if (16 < c - b && a.buffer && va)\n              return va.decode(a.subarray(b, c));\n            for (d = ""; b < c; ) {\n              var g = a[b++];\n              if (g & 128) {\n                var h = a[b++] & 63;\n                if (192 == (g & 224))\n                  d += String.fromCharCode((g & 31) << 6 | h);\n                else {\n                  var k = a[b++] & 63;\n                  g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | k : (g & 7) << 18 | h << 12 | k << 6 | a[b++] & 63;\n                  65536 > g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));\n                }\n              } else\n                d += String.fromCharCode(g);\n            }\n            return d;\n          }, S = (a, b) => (a >>>= 0) ? wa(I, a, b) : "", T = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, U = (a, b, c, d) => {\n            c >>>= 0;\n            if (!(0 < d))\n              return 0;\n            var g = c;\n            d = c + d - 1;\n            for (var h = 0; h < a.length; ++h) {\n              var k = a.charCodeAt(h);\n              if (55296 <= k && 57343 >= k) {\n                var p = a.charCodeAt(++h);\n                k = 65536 + ((k & 1023) << 10) | p & 1023;\n              }\n              if (127 >= k) {\n                if (c >= d)\n                  break;\n                b[c++ >>> 0] = k;\n              } else {\n                if (2047 >= k) {\n                  if (c + 1 >= d)\n                    break;\n                  b[c++ >>> 0] = 192 | k >> 6;\n                } else {\n                  if (65535 >= k) {\n                    if (c + 2 >= d)\n                      break;\n                    b[c++ >>> 0] = 224 | k >> 12;\n                  } else {\n                    if (c + 3 >= d)\n                      break;\n                    b[c++ >>> 0] = 240 | k >> 18;\n                    b[c++ >>> 0] = 128 | k >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | k >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | k & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - g;\n          }, V = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), xa = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], ya = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], Da = (a) => {\n            var b = T(a) + 1, c = za(b);\n            c && U(a, I, c, b);\n            return c;\n          }, W = {}, Fa = () => {\n            if (!Ea) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace(\n                "-",\n                "_"\n              ) + ".UTF-8", _: m || "./this.program" }, b;\n              for (b in W)\n                void 0 === W[b] ? delete a[b] : a[b] = W[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              Ea = c;\n            }\n            return Ea;\n          }, Ea, Ga = [null, [], []], Ha = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Ia = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Ja(a) {\n            var b = Array(T(a) + 1);\n            U(a, b, 0, b.length);\n            return b;\n          }\n          function Ka(a, b, c, d) {\n            function g(f, n, q) {\n              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < n; )\n                f = q[0] + f;\n              return f;\n            }\n            function h(f, n) {\n              return g(f, n, "0");\n            }\n            function k(f, n) {\n              function q(Aa) {\n                return 0 > Aa ? -1 : 0 < Aa ? 1 : 0;\n              }\n              var A;\n              0 === (A = q(f.getFullYear() - n.getFullYear())) && 0 === (A = q(f.getMonth() - n.getMonth())) && (A = q(f.getDate() - n.getDate()));\n              return A;\n            }\n            function p(f) {\n              switch (f.getDay()) {\n                case 0:\n                  return new Date(f.getFullYear() - 1, 11, 29);\n                case 1:\n                  return f;\n                case 2:\n                  return new Date(f.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    f.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(f.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(f.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(f.getFullYear() - 1, 11, 30);\n              }\n            }\n            function t(f) {\n              var n = f.ta;\n              for (f = new Date(new Date(f.ua + 1900, 0, 1).getTime()); 0 < n; ) {\n                var q = f.getMonth(), A = (V(f.getFullYear()) ? Ha : Ia)[q];\n                if (n > A - f.getDate())\n                  n -= A - f.getDate() + 1, f.setDate(1), 11 > q ? f.setMonth(q + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));\n                else {\n                  f.setDate(f.getDate() + n);\n                  break;\n                }\n              }\n              q = new Date(f.getFullYear() + 1, 0, 4);\n              n = p(new Date(\n                f.getFullYear(),\n                0,\n                4\n              ));\n              q = p(q);\n              return 0 >= k(n, f) ? 0 >= k(q, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            var u = J[d + 40 >> 2 >>> 0];\n            d = { Ca: J[d >> 2 >>> 0], Ba: J[d + 4 >> 2 >>> 0], va: J[d + 8 >> 2 >>> 0], ya: J[d + 12 >> 2 >>> 0], wa: J[d + 16 >> 2 >>> 0], ua: J[d + 20 >> 2 >>> 0], sa: J[d + 24 >> 2 >>> 0], ta: J[d + 28 >> 2 >>> 0], Ha: J[d + 32 >> 2 >>> 0], Aa: J[d + 36 >> 2 >>> 0], Da: u ? S(u) : "" };\n            c = S(c);\n            u = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var v in u)\n              c = c.replace(new RegExp(v, "g"), u[v]);\n            var Ba = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Ca = "January February March April May June July August September October November December".split(" ");\n            u = { "%a": (f) => Ba[f.sa].substring(0, 3), "%A": (f) => Ba[f.sa], "%b": (f) => Ca[f.wa].substring(0, 3), "%B": (f) => Ca[f.wa], "%C": (f) => h((f.ua + 1900) / 100 | 0, 2), "%d": (f) => h(f.ya, 2), "%e": (f) => g(f.ya, 2, " "), "%g": (f) => t(f).toString().substring(2), "%G": (f) => t(f), "%H": (f) => h(f.va, 2), "%I": (f) => {\n              f = f.va;\n              0 == f ? f = 12 : 12 < f && (f -= 12);\n              return h(f, 2);\n            }, "%j": (f) => {\n              for (var n = 0, q = 0; q <= f.wa - 1; n += (V(f.ua + 1900) ? Ha : Ia)[q++])\n                ;\n              return h(f.ya + n, 3);\n            }, "%m": (f) => h(f.wa + 1, 2), "%M": (f) => h(f.Ba, 2), "%n": () => "\\n", "%p": (f) => 0 <= f.va && 12 > f.va ? "AM" : "PM", "%S": (f) => h(f.Ca, 2), "%t": () => "	", "%u": (f) => f.sa || 7, "%U": (f) => h(Math.floor((f.ta + 7 - f.sa) / 7), 2), "%V": (f) => {\n              var n = Math.floor((f.ta + 7 - (f.sa + 6) % 7) / 7);\n              2 >= (f.sa + 371 - f.ta - 2) % 7 && n++;\n              if (n)\n                53 == n && (q = (f.sa + 371 - f.ta) % 7, 4 == q || 3 == q && V(f.ua) || (n = 1));\n              else {\n                n = 52;\n                var q = (f.sa + 7 - f.ta - 1) % 7;\n                (4 == q || 5 == q && V(f.ua % 400 - 1)) && n++;\n              }\n              return h(n, 2);\n            }, "%w": (f) => f.sa, "%W": (f) => h(Math.floor((f.ta + 7 - (f.sa + 6) % 7) / 7), 2), "%y": (f) => (f.ua + 1900).toString().substring(2), "%Y": (f) => f.ua + 1900, "%z": (f) => {\n              f = f.Aa;\n              var n = 0 <= f;\n              f = Math.abs(f) / 60;\n              return (n ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);\n            }, "%Z": (f) => f.Da, "%%": () => "%" };\n            c = c.replace(/%%/g, "\\0\\0");\n            for (v in u)\n              c.includes(v) && (c = c.replace(new RegExp(v, "g"), u[v](d)));\n            c = c.replace(/\\0\\0/g, "%");\n            v = Ja(c);\n            if (v.length > b)\n              return 0;\n            H.set(v, a >>> 0);\n            return v.length - 1;\n          }\n          var X = [], Y = void 0, La = [];\n          function Ma(a, b) {\n            if (!Y) {\n              Y = /* @__PURE__ */ new WeakMap();\n              var c = L.length;\n              if (Y)\n                for (var d = 0; d < 0 + c; d++) {\n                  var g = d;\n                  var h = X[g];\n                  h || (g >= X.length && (X.length = g + 1), X[g] = h = L.get(g));\n                  (g = h) && Y.set(g, d);\n                }\n            }\n            if (c = Y.get(a) || 0)\n              return c;\n            if (La.length)\n              c = La.pop();\n            else {\n              try {\n                L.grow(1);\n              } catch (p) {\n                if (!(p instanceof RangeError))\n                  throw p;\n                throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";\n              }\n              c = L.length - 1;\n            }\n            try {\n              d = c, L.set(d, a), X[d] = L.get(d);\n            } catch (p) {\n              if (!(p instanceof TypeError))\n                throw p;\n              if ("function" == typeof WebAssembly.Function) {\n                d = WebAssembly.Function;\n                g = { i: "i32", j: "i64", f: "f32", d: "f64", p: "i32" };\n                h = { parameters: [], results: "v" == b[0] ? [] : [g[b[0]]] };\n                for (var k = 1; k < b.length; ++k)\n                  h.parameters.push(g[b[k]]);\n                b = new d(h, a);\n              } else {\n                d = [1];\n                g = b.slice(0, 1);\n                b = b.slice(1);\n                h = { i: 127, p: 127, j: 126, f: 125, d: 124 };\n                d.push(96);\n                k = b.length;\n                128 > k ? d.push(k) : d.push(k % 128 | 128, k >> 7);\n                for (k = 0; k < b.length; ++k)\n                  d.push(h[b[k]]);\n                "v" == g ? d.push(0) : d.push(1, h[g]);\n                b = [0, 97, 115, 109, 1, 0, 0, 0, 1];\n                g = d.length;\n                128 > g ? b.push(g) : b.push(g % 128 | 128, g >> 7);\n                b.push.apply(b, d);\n                b.push(\n                  2,\n                  7,\n                  1,\n                  1,\n                  101,\n                  1,\n                  102,\n                  0,\n                  0,\n                  7,\n                  5,\n                  1,\n                  1,\n                  102,\n                  0,\n                  0\n                );\n                b = new WebAssembly.Module(new Uint8Array(b));\n                b = new WebAssembly.Instance(b, { e: { f: a } }).exports.f;\n              }\n              d = c;\n              L.set(d, b);\n              X[d] = L.get(d);\n            }\n            Y.set(a, c);\n            return c;\n          }\n          var Oa = {\n            a: function(a, b, c) {\n              a >>>= 0;\n              new sa(a).za(b >>> 0, c >>> 0);\n              ta = a;\n              ua++;\n              throw ta;\n            },\n            e: function() {\n              return 0;\n            },\n            H: function() {\n            },\n            x: function() {\n            },\n            z: function() {\n            },\n            J: function() {\n              return 0;\n            },\n            F: function() {\n            },\n            A: function() {\n            },\n            E: function() {\n            },\n            g: function() {\n            },\n            y: function() {\n            },\n            v: function() {\n            },\n            G: function() {\n            },\n            w: function() {\n            },\n            l: () => true,\n            o: function(a, b, c) {\n              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n              c >>>= 0;\n              a = new Date(1e3 * a);\n              J[c >> 2 >>> 0] = a.getUTCSeconds();\n              J[c + 4 >> 2 >>> 0] = a.getUTCMinutes();\n              J[c + 8 >> 2 >>> 0] = a.getUTCHours();\n              J[c + 12 >> 2 >>> 0] = a.getUTCDate();\n              J[c + 16 >> 2 >>> 0] = a.getUTCMonth();\n              J[c + 20 >> 2 >>> 0] = a.getUTCFullYear() - 1900;\n              J[c + 24 >> 2 >>> 0] = a.getUTCDay();\n              J[c + 28 >> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n            },\n            p: function(a, b, c) {\n              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n              c >>>= 0;\n              a = new Date(1e3 * a);\n              J[c >> 2 >>> 0] = a.getSeconds();\n              J[c + 4 >> 2 >>> 0] = a.getMinutes();\n              J[c + 8 >> 2 >>> 0] = a.getHours();\n              J[c + 12 >> 2 >>> 0] = a.getDate();\n              J[c + 16 >> 2 >>> 0] = a.getMonth();\n              J[c + 20 >> 2 >>> 0] = a.getFullYear() - 1900;\n              J[c + 24 >> 2 >>> 0] = a.getDay();\n              J[c + 28 >> 2 >>> 0] = (V(a.getFullYear()) ? xa : ya)[a.getMonth()] + a.getDate() - 1 | 0;\n              J[c + 36 >> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n              b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n              var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n              J[c + 32 >> 2 >>> 0] = (b != d && a.getTimezoneOffset() == Math.min(d, b)) | 0;\n            },\n            q: function(a) {\n              a >>>= 0;\n              var b = new Date(J[a + 20 >> 2 >>> 0] + 1900, J[a + 16 >> 2 >>> 0], J[a + 12 >> 2 >>> 0], J[a + 8 >> 2 >>> 0], J[a + 4 >> 2 >>> 0], J[a >> 2 >>> 0], 0), c = J[a + 32 >> 2 >>> 0], d = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), k = Math.min(h, g);\n              0 > c ? J[a + 32 >> 2 >>> 0] = Number(g != h && k == d) : 0 < c != (k == d) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : g) - d)));\n              J[a + 24 >> 2 >>> 0] = b.getDay();\n              J[a + 28 >> 2 >>> 0] = (V(b.getFullYear()) ? xa : ya)[b.getMonth()] + b.getDate() - 1 | 0;\n              J[a >> 2 >>> 0] = b.getSeconds();\n              J[a + 4 >> 2 >>> 0] = b.getMinutes();\n              J[a + 8 >> 2 >>> 0] = b.getHours();\n              J[a + 12 >> 2 >>> 0] = b.getDate();\n              J[a + 16 >> 2 >>> 0] = b.getMonth();\n              J[a + 20 >> 2 >>> 0] = b.getYear();\n              a = b.getTime() / 1e3;\n              return Na((Q = a, 1 <= +Math.abs(Q) ? 0 < Q ? +Math.floor(Q / 4294967296) >>> 0 : ~~+Math.ceil((Q - +(~~Q >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;\n            },\n            m: function() {\n              return -52;\n            },\n            n: function() {\n            },\n            t: function(a, b, c) {\n              function d(t) {\n                return (t = t.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? t[1] : "GMT";\n              }\n              c >>>= 0;\n              var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), k = new Date(g, 6, 1);\n              g = h.getTimezoneOffset();\n              var p = k.getTimezoneOffset();\n              K[a >>> 0 >> 2 >>> 0] = 60 * Math.max(g, p);\n              J[b >>> 0 >> 2 >>> 0] = Number(g != p);\n              a = d(h);\n              b = d(k);\n              a = Da(a);\n              b = Da(b);\n              p < g ? (K[c >> 2 >>> 0] = a, K[c + 4 >> 2 >>> 0] = b) : (K[c >> 2 >>> 0] = b, K[c + 4 >> 2 >>> 0] = a);\n            },\n            d: () => {\n              E("");\n            },\n            h: function() {\n              return Date.now();\n            },\n            u: function() {\n              return 4294901760;\n            },\n            b: () => performance.now(),\n            I: function(a, b, c) {\n              b >>>= 0;\n              return I.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);\n            },\n            s: function(a) {\n              a >>>= 0;\n              var b = I.length;\n              if (4294901760 < a)\n                return false;\n              for (var c = 1; 4 >= c; c *= 2) {\n                var d = b * (1 + 0.2 / c);\n                d = Math.min(d, a + 100663296);\n                var g = Math;\n                d = Math.max(a, d);\n                a: {\n                  g = g.min.call(g, 4294901760, d + (65536 - d % 65536) % 65536) - F.buffer.byteLength + 65535 >>> 16;\n                  try {\n                    F.grow(g);\n                    ha();\n                    var h = 1;\n                    break a;\n                  } catch (k) {\n                  }\n                  h = void 0;\n                }\n                if (h)\n                  return true;\n              }\n              return false;\n            },\n            C: function(a, b) {\n              a >>>= 0;\n              b >>>= 0;\n              var c = 0;\n              Fa().forEach(function(d, g) {\n                var h = b + c;\n                g = K[a + 4 * g >> 2 >>> 0] = h;\n                for (h = 0; h < d.length; ++h)\n                  H[g++ >> 0 >>> 0] = d.charCodeAt(h);\n                H[g >> 0 >>> 0] = 0;\n                c += d.length + 1;\n              });\n              return 0;\n            },\n            D: function(a, b) {\n              a >>>= 0;\n              b >>>= 0;\n              var c = Fa();\n              K[a >> 2 >>> 0] = c.length;\n              var d = 0;\n              c.forEach(function(g) {\n                d += g.length + 1;\n              });\n              K[b >> 2 >>> 0] = d;\n              return 0;\n            },\n            f: () => 52,\n            k: function() {\n              return 52;\n            },\n            r: function() {\n              return 70;\n            },\n            j: function(a, b, c, d) {\n              b >>>= 0;\n              c >>>= 0;\n              d >>>= 0;\n              for (var g = 0, h = 0; h < c; h++) {\n                var k = K[b >> 2 >>> 0], p = K[b + 4 >> 2 >>> 0];\n                b += 8;\n                for (var t = 0; t < p; t++) {\n                  var u = I[k + t >>> 0], v = Ga[a];\n                  0 === u || 10 === u ? ((1 === a ? ea : C)(wa(v, 0)), v.length = 0) : v.push(u);\n                }\n                g += p;\n              }\n              K[d >> 2 >>> 0] = g;\n              return 0;\n            },\n            B: Ka,\n            c: function(a, b, c, d) {\n              return Ka(a >>> 0, b >>> 0, c >>> 0, d >>> 0);\n            },\n            i: function(a, b, c, d) {\n              const g = L.length;\n              a = new Uint8Array(I.slice(a + b, a + c));\n              try {\n                var h = new WebAssembly.Module(a), k = new WebAssembly.Instance(h, { env: { memory: F } }), p;\n                for (p in k.exports)\n                  Ma(k.exports[p]);\n                return g < L.length ? g : d;\n              } catch (t) {\n                return console.log(t), d;\n              }\n            }\n          };\n          (function() {\n            function a(c) {\n              c = c.exports;\n              G = c = Pa(c);\n              F = G.K;\n              ha();\n              L = G.na;\n              ja.unshift(G.L);\n              M--;\n              e.monitorRunDependencies && e.monitorRunDependencies(M);\n              if (0 == M && (null !== N && (clearInterval(N), N = null), O)) {\n                var d = O;\n                O = null;\n                d();\n              }\n              return c;\n            }\n            var b = { a: Oa };\n            M++;\n            e.monitorRunDependencies && e.monitorRunDependencies(M);\n            if (e.instantiateWasm)\n              try {\n                return e.instantiateWasm(b, a);\n              } catch (c) {\n                C("Module.instantiateWasm callback failed with error: " + c), l(c);\n              }\n            ra(b, function(c) {\n              a(c.instance);\n            }).catch(l);\n            return {};\n          })();\n          e._OrtInit = (a, b) => (e._OrtInit = G.M)(a, b);\n          e._OrtGetLastError = (a, b) => (e._OrtGetLastError = G.N)(a, b);\n          e._OrtCreateSessionOptions = (a, b, c, d, g, h, k, p, t, u) => (e._OrtCreateSessionOptions = G.O)(a, b, c, d, g, h, k, p, t, u);\n          e._OrtAppendExecutionProvider = (a, b) => (e._OrtAppendExecutionProvider = G.P)(a, b);\n          e._OrtAddFreeDimensionOverride = (a, b, c) => (e._OrtAddFreeDimensionOverride = G.Q)(a, b, c);\n          e._OrtAddSessionConfigEntry = (a, b, c) => (e._OrtAddSessionConfigEntry = G.R)(a, b, c);\n          e._OrtReleaseSessionOptions = (a) => (e._OrtReleaseSessionOptions = G.S)(a);\n          e._OrtCreateSession = (a, b, c) => (e._OrtCreateSession = G.T)(a, b, c);\n          e._OrtReleaseSession = (a) => (e._OrtReleaseSession = G.U)(a);\n          e._OrtGetInputOutputCount = (a, b, c) => (e._OrtGetInputOutputCount = G.V)(a, b, c);\n          e._OrtGetInputName = (a, b) => (e._OrtGetInputName = G.W)(a, b);\n          e._OrtGetOutputName = (a, b) => (e._OrtGetOutputName = G.X)(a, b);\n          e._OrtFree = (a) => (e._OrtFree = G.Y)(a);\n          e._OrtCreateTensor = (a, b, c, d, g, h) => (e._OrtCreateTensor = G.Z)(a, b, c, d, g, h);\n          e._OrtGetTensorData = (a, b, c, d, g) => (e._OrtGetTensorData = G._)(a, b, c, d, g);\n          e._OrtReleaseTensor = (a) => (e._OrtReleaseTensor = G.$)(a);\n          e._OrtCreateRunOptions = (a, b, c, d) => (e._OrtCreateRunOptions = G.aa)(a, b, c, d);\n          e._OrtAddRunConfigEntry = (a, b, c) => (e._OrtAddRunConfigEntry = G.ba)(a, b, c);\n          e._OrtReleaseRunOptions = (a) => (e._OrtReleaseRunOptions = G.ca)(a);\n          e._OrtCreateBinding = (a) => (e._OrtCreateBinding = G.da)(a);\n          e._OrtBindInput = (a, b, c) => (e._OrtBindInput = G.ea)(a, b, c);\n          e._OrtBindOutput = (a, b, c, d) => (e._OrtBindOutput = G.fa)(a, b, c, d);\n          e._OrtClearBoundOutputs = (a) => (e._OrtClearBoundOutputs = G.ga)(a);\n          e._OrtReleaseBinding = (a) => (e._OrtReleaseBinding = G.ha)(a);\n          e._OrtRunWithBinding = (a, b, c, d, g) => (e._OrtRunWithBinding = G.ia)(a, b, c, d, g);\n          e._OrtRun = (a, b, c, d, g, h, k, p) => (e._OrtRun = G.ja)(a, b, c, d, g, h, k, p);\n          e._OrtEndProfiling = (a) => (e._OrtEndProfiling = G.ka)(a);\n          var za = e._malloc = (a) => (za = e._malloc = G.la)(a);\n          e._free = (a) => (e._free = G.ma)(a);\n          var Na = (a) => (Na = G.oa)(a), Qa = () => (Qa = G.pa)(), Ra = (a) => (Ra = G.qa)(a), Sa = (a) => (Sa = G.ra)(a);\n          e.___start_em_js = 905600;\n          e.___stop_em_js = 906212;\n          function Pa(a) {\n            a = Object.assign({}, a);\n            var b = (d) => () => d() >>> 0, c = (d) => (g) => d(g) >>> 0;\n            a.__errno_location = b(a.__errno_location);\n            a.malloc = c(a.malloc);\n            a.stackSave = b(a.stackSave);\n            a.stackAlloc = c(a.stackAlloc);\n            return a;\n          }\n          e.stackAlloc = Sa;\n          e.stackSave = Qa;\n          e.stackRestore = Ra;\n          e.addFunction = Ma;\n          e.UTF8ToString = S;\n          e.stringToUTF8 = (a, b, c) => U(a, I, b, c);\n          e.lengthBytesUTF8 = T;\n          var Z;\n          O = function Ta() {\n            Z || Ua();\n            Z || (O = Ta);\n          };\n          function Ua() {\n            function a() {\n              if (!Z && (Z = true, e.calledRun = true, !fa)) {\n                R(ja);\n                aa(e);\n                if (e.onRuntimeInitialized)\n                  e.onRuntimeInitialized();\n                if (e.postRun)\n                  for ("function" == typeof e.postRun && (e.postRun = [e.postRun]); e.postRun.length; ) {\n                    var b = e.postRun.shift();\n                    ka.unshift(b);\n                  }\n                R(ka);\n              }\n            }\n            if (!(0 < M)) {\n              if (e.preRun)\n                for ("function" == typeof e.preRun && (e.preRun = [e.preRun]); e.preRun.length; )\n                  la();\n              R(ia);\n              0 < M || (e.setStatus ? (e.setStatus("Running..."), setTimeout(function() {\n                setTimeout(function() {\n                  e.setStatus("");\n                }, 1);\n                a();\n              }, 1)) : a());\n            }\n          }\n          if (e.preInit)\n            for ("function" == typeof e.preInit && (e.preInit = [e.preInit]); 0 < e.preInit.length; )\n              e.preInit.pop()();\n          Ua();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasm;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasm);\n    }\n  });\n\n  // nodejs-ignore:worker_threads\n  var require_worker_threads = __commonJS({\n    "nodejs-ignore:worker_threads"() {\n    }\n  });\n\n  // nodejs-ignore:perf_hooks\n  var require_perf_hooks = __commonJS({\n    "nodejs-ignore:perf_hooks"() {\n    }\n  });\n\n  // nodejs-ignore:os\n  var os_exports = {};\n  __export(os_exports, {\n    cpus: () => cpus\n  });\n  var cpus;\n  var init_os = __esm({\n    "nodejs-ignore:os"() {\n      cpus = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.js\n  var require_ort_wasm_threaded = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {\n      "use strict";\n      var ortWasmThreaded = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          function aa() {\n            e.buffer != l.buffer && m();\n            return l;\n          }\n          function n() {\n            e.buffer != l.buffer && m();\n            return ba;\n          }\n          function p() {\n            e.buffer != l.buffer && m();\n            return ca;\n          }\n          function t() {\n            e.buffer != l.buffer && m();\n            return da;\n          }\n          function ea() {\n            e.buffer != l.buffer && m();\n            return fa;\n          }\n          var w = moduleArg, ha, x;\n          w.ready = new Promise((a, b) => {\n            ha = a;\n            x = b;\n          });\n          var ia = Object.assign({}, w), ja = "./this.program", z = (a, b) => {\n            throw b;\n          }, ka = "object" == typeof window, A = "function" == typeof importScripts, C = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, D = w.ENVIRONMENT_IS_PTHREAD || false, E = "";\n          function la(a) {\n            return w.locateFile ? w.locateFile(a, E) : E + a;\n          }\n          var ma, F, G;\n          if (C) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), na = (init_path(), __toCommonJS(path_exports));\n            E = A ? na.dirname(E) + "/" : __dirname + "/";\n            ma = (b, c) => {\n              b = b.startsWith("file://") ? new URL(b) : na.normalize(b);\n              return fs.readFileSync(b, c ? void 0 : "utf8");\n            };\n            G = (b) => {\n              b = ma(b, true);\n              b.buffer || (b = new Uint8Array(b));\n              return b;\n            };\n            F = (b, c, d, g = true) => {\n              b = b.startsWith("file://") ? new URL(b) : na.normalize(b);\n              fs.readFile(b, g ? void 0 : "utf8", (h, k) => {\n                h ? d(h) : c(g ? k.buffer : k);\n              });\n            };\n            !w.thisProgram && 1 < process.argv.length && (ja = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            z = (b, c) => {\n              process.exitCode = b;\n              throw c;\n            };\n            w.inspect = () => "[Emscripten Module object]";\n            let a;\n            try {\n              a = require_worker_threads();\n            } catch (b) {\n              throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'), b;\n            }\n            global.Worker = a.Worker;\n          } else if (ka || A)\n            A ? E = self.location.href : "undefined" != typeof document && document.currentScript && (E = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (E = _scriptDir), 0 !== E.indexOf("blob:") ? E = E.substr(0, E.replace(/[?#].*/, "").lastIndexOf("/") + 1) : E = "", C || (ma = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, A && (G = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), F = (a, b, c) => {\n              var d = new XMLHttpRequest();\n              d.open("GET", a, true);\n              d.responseType = "arraybuffer";\n              d.onload = () => {\n                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();\n              };\n              d.onerror = c;\n              d.send(null);\n            });\n          C && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);\n          var oa = console.log.bind(console), pa = console.error.bind(console);\n          C && (oa = (...a) => fs.writeSync(1, a.join(" ") + "\\n"), pa = (...a) => fs.writeSync(2, a.join(" ") + "\\n"));\n          var qa = w.print || oa, I = w.printErr || pa;\n          Object.assign(w, ia);\n          ia = null;\n          w.thisProgram && (ja = w.thisProgram);\n          w.quit && (z = w.quit);\n          var J;\n          w.wasmBinary && (J = w.wasmBinary);\n          var noExitRuntime = w.noExitRuntime || true;\n          "object" != typeof WebAssembly && K("no native wasm support detected");\n          var e, L, ra, M = false, N, l, ba, ca, da, fa;\n          function m() {\n            var a = e.buffer;\n            w.HEAP8 = l = new Int8Array(a);\n            w.HEAP16 = new Int16Array(a);\n            w.HEAP32 = ca = new Int32Array(a);\n            w.HEAPU8 = ba = new Uint8Array(a);\n            w.HEAPU16 = new Uint16Array(a);\n            w.HEAPU32 = da = new Uint32Array(a);\n            w.HEAPF32 = new Float32Array(a);\n            w.HEAPF64 = fa = new Float64Array(a);\n          }\n          var O = w.INITIAL_MEMORY || 16777216;\n          5242880 <= O || K("INITIAL_MEMORY should be larger than STACK_SIZE, was " + O + "! (STACK_SIZE=5242880)");\n          if (D)\n            e = w.wasmMemory;\n          else if (w.wasmMemory)\n            e = w.wasmMemory;\n          else if (e = new WebAssembly.Memory({ initial: O / 65536, maximum: 65536, shared: true }), !(e.buffer instanceof SharedArrayBuffer))\n            throw I("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), C && I("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");\n          m();\n          O = e.buffer.byteLength;\n          var P, sa = [], ta = [], ua = [], va = 0;\n          function Q() {\n            return noExitRuntime || 0 < va;\n          }\n          var R = 0, wa = null, S = null;\n          function xa() {\n            R++;\n            w.monitorRunDependencies && w.monitorRunDependencies(R);\n          }\n          function ya() {\n            R--;\n            w.monitorRunDependencies && w.monitorRunDependencies(R);\n            if (0 == R && (null !== wa && (clearInterval(wa), wa = null), S)) {\n              var a = S;\n              S = null;\n              a();\n            }\n          }\n          function K(a) {\n            if (w.onAbort)\n              w.onAbort(a);\n            a = "Aborted(" + a + ")";\n            I(a);\n            M = true;\n            N = 1;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            x(a);\n            throw a;\n          }\n          function za(a) {\n            return a.startsWith("data:application/octet-stream;base64,");\n          }\n          var T;\n          T = "ort-wasm-threaded.wasm";\n          za(T) || (T = la(T));\n          function Aa(a) {\n            if (a == T && J)\n              return new Uint8Array(J);\n            if (G)\n              return G(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function Ba(a) {\n            if (!J && (ka || A)) {\n              if ("function" == typeof fetch && !a.startsWith("file://"))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => Aa(a));\n              if (F)\n                return new Promise((b, c) => {\n                  F(a, (d) => b(new Uint8Array(d)), c);\n                });\n            }\n            return Promise.resolve().then(() => Aa(a));\n          }\n          function Ca(a, b, c) {\n            return Ba(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {\n              I("failed to asynchronously prepare wasm: " + d);\n              K(d);\n            });\n          }\n          function Da(a, b) {\n            var c = T;\n            return J || "function" != typeof WebAssembly.instantiateStreaming || za(c) || c.startsWith("file://") || C || "function" != typeof fetch ? Ca(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(g) {\n              I("wasm streaming compile failed: " + g);\n              I("falling back to ArrayBuffer instantiation");\n              return Ca(c, a, b);\n            }));\n          }\n          var U;\n          function Ea(a) {\n            this.name = "ExitStatus";\n            this.message = `Program terminated with exit(${a})`;\n            this.status = a;\n          }\n          function Fa(a) {\n            a.terminate();\n            a.onmessage = () => {\n            };\n          }\n          function Ga(a) {\n            (a = V.Ma[a]) || K();\n            V.mb(a);\n          }\n          function Ha(a) {\n            var b = V.gb();\n            if (!b)\n              return 6;\n            V.Pa.push(b);\n            V.Ma[a.Oa] = b;\n            b.Oa = a.Oa;\n            var c = { cmd: "run", start_routine: a.nb, arg: a.fb, pthread_ptr: a.Oa };\n            C && b.unref();\n            b.postMessage(c, a.tb);\n            return 0;\n          }\n          var Ia = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Ja = (a, b, c) => {\n            b >>>= 0;\n            var d = b + c;\n            for (c = b; a[c] && !(c >= d); )\n              ++c;\n            if (16 < c - b && a.buffer && Ia)\n              return Ia.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));\n            for (d = ""; b < c; ) {\n              var g = a[b++];\n              if (g & 128) {\n                var h = a[b++] & 63;\n                if (192 == (g & 224))\n                  d += String.fromCharCode((g & 31) << 6 | h);\n                else {\n                  var k = a[b++] & 63;\n                  g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | k : (g & 7) << 18 | h << 12 | k << 6 | a[b++] & 63;\n                  65536 > g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));\n                }\n              } else\n                d += String.fromCharCode(g);\n            }\n            return d;\n          }, Ka = (a, b) => (a >>>= 0) ? Ja(n(), a, b) : "";\n          function La(a) {\n            if (D)\n              return W(1, 1, a);\n            N = a;\n            if (!Q()) {\n              V.ob();\n              if (w.onExit)\n                w.onExit(a);\n              M = true;\n            }\n            z(a, new Ea(a));\n          }\n          var Na = (a) => {\n            N = a;\n            if (D)\n              throw Ma(a), "unwind";\n            La(a);\n          }, V = {\n            Sa: [],\n            Pa: [],\n            $a: [],\n            Ma: {},\n            Wa: function() {\n              D ? V.ib() : V.hb();\n            },\n            hb: function() {\n              sa.unshift(() => {\n                xa();\n                V.jb(() => ya());\n              });\n            },\n            ib: function() {\n              V.receiveObjectTransfer = V.lb;\n              V.threadInitTLS = V.Za;\n              V.setExitStatus = V.Ya;\n              noExitRuntime = false;\n            },\n            Ya: function(a) {\n              N = a;\n            },\n            yb: ["$terminateWorker"],\n            ob: function() {\n              for (var a of V.Pa)\n                Fa(a);\n              for (a of V.Sa)\n                Fa(a);\n              V.Sa = [];\n              V.Pa = [];\n              V.Ma = [];\n            },\n            mb: function(a) {\n              var b = a.Oa;\n              delete V.Ma[b];\n              V.Sa.push(a);\n              V.Pa.splice(V.Pa.indexOf(a), 1);\n              a.Oa = 0;\n              Oa(b);\n            },\n            lb: function() {\n            },\n            Za: function() {\n              V.$a.forEach((a) => a());\n            },\n            kb: (a) => new Promise((b) => {\n              a.onmessage = (h) => {\n                h = h.data;\n                var k = h.cmd;\n                if (h.targetThread && h.targetThread != Pa()) {\n                  var q = V.Ma[h.xb];\n                  q ? q.postMessage(h, h.transferList) : I(\'Internal error! Worker sent a message "\' + k + \'" to target pthread \' + h.targetThread + ", but that thread no longer exists!");\n                } else if ("checkMailbox" === k)\n                  Qa();\n                else if ("spawnThread" === k)\n                  Ha(h);\n                else if ("cleanupThread" === k)\n                  Ga(h.thread);\n                else if ("killThread" === k)\n                  h = h.thread, k = V.Ma[h], delete V.Ma[h], Fa(k), Oa(h), V.Pa.splice(\n                    V.Pa.indexOf(k),\n                    1\n                  ), k.Oa = 0;\n                else if ("cancelThread" === k)\n                  V.Ma[h.thread].postMessage({ cmd: "cancel" });\n                else if ("loaded" === k)\n                  a.loaded = true, b(a);\n                else if ("alert" === k)\n                  alert("Thread " + h.threadId + ": " + h.text);\n                else if ("setimmediate" === h.target)\n                  a.postMessage(h);\n                else if ("callHandler" === k)\n                  w[h.handler](...h.args);\n                else\n                  k && I("worker sent an unknown command " + k);\n              };\n              a.onerror = (h) => {\n                I("worker sent an error! " + h.filename + ":" + h.lineno + ": " + h.message);\n                throw h;\n              };\n              C && (a.on("message", function(h) {\n                a.onmessage({ data: h });\n              }), a.on("error", function(h) {\n                a.onerror(h);\n              }));\n              var c = [], d = ["onExit", "onAbort", "print", "printErr"], g;\n              for (g of d)\n                w.hasOwnProperty(g) && c.push(g);\n              a.postMessage({ cmd: "load", handlers: c, urlOrBlob: w.mainScriptUrlOrBlob || _scriptDir, wasmMemory: e, wasmModule: ra });\n            }),\n            jb: function(a) {\n              a();\n            },\n            eb: function() {\n              var a = la("ort-wasm-threaded.worker.js");\n              a = new Worker(a);\n              V.Sa.push(a);\n            },\n            gb: function() {\n              0 == V.Sa.length && (V.eb(), V.kb(V.Sa[0]));\n              return V.Sa.pop();\n            }\n          };\n          w.PThread = V;\n          var Ra = (a) => {\n            for (; 0 < a.length; )\n              a.shift()(w);\n          };\n          w.establishStackSpace = function() {\n            var a = Pa(), b = p()[a + 52 >> 2 >>> 0];\n            a = p()[a + 56 >> 2 >>> 0];\n            Sa(b, b - a);\n            Ta(b);\n          };\n          function Ma(a) {\n            if (D)\n              return W(2, 0, a);\n            Na(a);\n          }\n          var X = [], Ua = (a) => {\n            var b = X[a];\n            b || (a >= X.length && (X.length = a + 1), X[a] = b = P.get(a));\n            return b;\n          };\n          w.invokeEntryPoint = function(a, b) {\n            a = Ua(a)(b);\n            Q() ? V.Ya(a) : Va(a);\n          };\n          function Wa(a) {\n            this.Va = a - 24;\n            this.cb = function(b) {\n              t()[this.Va + 4 >> 2 >>> 0] = b;\n            };\n            this.bb = function(b) {\n              t()[this.Va + 8 >> 2 >>> 0] = b;\n            };\n            this.Wa = function(b, c) {\n              this.ab();\n              this.cb(b);\n              this.bb(c);\n            };\n            this.ab = function() {\n              t()[this.Va + 16 >> 2 >>> 0] = 0;\n            };\n          }\n          var Xa = 0, Ya = 0;\n          function Za(a, b, c, d) {\n            return D ? W(3, 1, a, b, c, d) : $a(a, b, c, d);\n          }\n          function $a(a, b, c, d) {\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            if ("undefined" == typeof SharedArrayBuffer)\n              return I("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;\n            var g = [];\n            if (D && 0 === g.length)\n              return Za(a, b, c, d);\n            a = { nb: c, Oa: a, fb: d, tb: g };\n            return D ? (a.vb = "spawnThread", postMessage(a, g), 0) : Ha(a);\n          }\n          function ab(a, b, c) {\n            return D ? W(4, 1, a, b, c) : 0;\n          }\n          function bb(a, b) {\n            if (D)\n              return W(5, 1, a, b);\n          }\n          var cb = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, db = (a, b, c, d) => {\n            c >>>= 0;\n            if (!(0 < d))\n              return 0;\n            var g = c;\n            d = c + d - 1;\n            for (var h = 0; h < a.length; ++h) {\n              var k = a.charCodeAt(h);\n              if (55296 <= k && 57343 >= k) {\n                var q = a.charCodeAt(++h);\n                k = 65536 + ((k & 1023) << 10) | q & 1023;\n              }\n              if (127 >= k) {\n                if (c >= d)\n                  break;\n                b[c++ >>> 0] = k;\n              } else {\n                if (2047 >= k) {\n                  if (c + 1 >= d)\n                    break;\n                  b[c++ >>> 0] = 192 | k >> 6;\n                } else {\n                  if (65535 >= k) {\n                    if (c + 2 >= d)\n                      break;\n                    b[c++ >>> 0] = 224 | k >> 12;\n                  } else {\n                    if (c + 3 >= d)\n                      break;\n                    b[c++ >>> 0] = 240 | k >> 18;\n                    b[c++ >>> 0] = 128 | k >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | k >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | k & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - g;\n          }, eb = (a, b, c) => db(a, n(), b, c);\n          function fb(a, b) {\n            if (D)\n              return W(6, 1, a, b);\n          }\n          function gb(a, b, c) {\n            if (D)\n              return W(7, 1, a, b, c);\n          }\n          function hb(a, b, c) {\n            return D ? W(8, 1, a, b, c) : 0;\n          }\n          function ib(a, b) {\n            if (D)\n              return W(9, 1, a, b);\n          }\n          function jb(a, b, c) {\n            if (D)\n              return W(10, 1, a, b, c);\n          }\n          function kb(a, b, c, d) {\n            if (D)\n              return W(11, 1, a, b, c, d);\n          }\n          function lb(a, b, c, d) {\n            if (D)\n              return W(12, 1, a, b, c, d);\n          }\n          function mb(a, b, c, d) {\n            if (D)\n              return W(13, 1, a, b, c, d);\n          }\n          function nb(a) {\n            if (D)\n              return W(14, 1, a);\n          }\n          function ob(a, b) {\n            if (D)\n              return W(15, 1, a, b);\n          }\n          function pb(a, b, c) {\n            if (D)\n              return W(16, 1, a, b, c);\n          }\n          var qb = (a) => {\n            if (!M)\n              try {\n                if (a(), !Q())\n                  try {\n                    D ? Va(N) : Na(N);\n                  } catch (b) {\n                    b instanceof Ea || "unwind" == b || z(1, b);\n                  }\n              } catch (b) {\n                b instanceof Ea || "unwind" == b || z(1, b);\n              }\n          };\n          function rb(a) {\n            a >>>= 0;\n            "function" === typeof Atomics.ub && (Atomics.ub(p(), a >> 2, a).value.then(Qa), a += 128, Atomics.store(p(), a >> 2, 1));\n          }\n          w.__emscripten_thread_mailbox_await = rb;\n          function Qa() {\n            var a = Pa();\n            a && (rb(a), qb(() => sb()));\n          }\n          w.checkMailbox = Qa;\n          var Y = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), tb = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], ub = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n          function vb(a, b, c, d, g, h, k, q) {\n            return D ? W(17, 1, a, b, c, d, g, h, k, q) : -52;\n          }\n          function wb(a, b, c, d, g, h, k) {\n            if (D)\n              return W(18, 1, a, b, c, d, g, h, k);\n          }\n          var yb = (a) => {\n            var b = cb(a) + 1, c = xb(b);\n            c && eb(a, c, b);\n            return c;\n          }, Ab = (a) => {\n            var b = zb();\n            a = a();\n            Ta(b);\n            return a;\n          };\n          function W(a, b) {\n            var c = arguments.length - 2, d = arguments;\n            return Ab(() => {\n              for (var g = Bb(8 * c), h = g >> 3, k = 0; k < c; k++) {\n                var q = d[2 + k];\n                ea()[h + k >>> 0] = q;\n              }\n              return Cb(a, c, g, b);\n            });\n          }\n          var Db = [], Eb = {}, Gb = () => {\n            if (!Fb) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: ja || "./this.program" }, b;\n              for (b in Eb)\n                void 0 === Eb[b] ? delete a[b] : a[b] = Eb[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              Fb = c;\n            }\n            return Fb;\n          }, Fb;\n          function Hb(a, b) {\n            if (D)\n              return W(19, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = 0;\n            Gb().forEach(function(d, g) {\n              var h = b + c;\n              g = t()[a + 4 * g >> 2 >>> 0] = h;\n              for (h = 0; h < d.length; ++h)\n                aa()[g++ >> 0 >>> 0] = d.charCodeAt(h);\n              aa()[g >> 0 >>> 0] = 0;\n              c += d.length + 1;\n            });\n            return 0;\n          }\n          function Ib(a, b) {\n            if (D)\n              return W(20, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = Gb();\n            t()[a >> 2 >>> 0] = c.length;\n            var d = 0;\n            c.forEach(function(g) {\n              d += g.length + 1;\n            });\n            t()[b >> 2 >>> 0] = d;\n            return 0;\n          }\n          function Jb(a) {\n            return D ? W(21, 1, a) : 52;\n          }\n          function Nb(a, b, c, d) {\n            return D ? W(22, 1, a, b, c, d) : 52;\n          }\n          function Ob(a, b, c, d, g) {\n            return D ? W(23, 1, a, b, c, d, g) : 70;\n          }\n          var Pb = [null, [], []];\n          function Qb(a, b, c, d) {\n            if (D)\n              return W(24, 1, a, b, c, d);\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            for (var g = 0, h = 0; h < c; h++) {\n              var k = t()[b >> 2 >>> 0], q = t()[b + 4 >> 2 >>> 0];\n              b += 8;\n              for (var B = 0; B < q; B++) {\n                var v = n()[k + B >>> 0], y = Pb[a];\n                0 === v || 10 === v ? ((1 === a ? qa : I)(Ja(y, 0)), y.length = 0) : y.push(v);\n              }\n              g += q;\n            }\n            t()[d >> 2 >>> 0] = g;\n            return 0;\n          }\n          var Rb = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Sb = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Tb(a) {\n            var b = Array(cb(a) + 1);\n            db(a, b, 0, b.length);\n            return b;\n          }\n          var Ub = (a, b) => {\n            aa().set(a, b >>> 0);\n          };\n          function Vb(a, b, c, d) {\n            function g(f, r, u) {\n              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < r; )\n                f = u[0] + f;\n              return f;\n            }\n            function h(f, r) {\n              return g(f, r, "0");\n            }\n            function k(f, r) {\n              function u(Kb) {\n                return 0 > Kb ? -1 : 0 < Kb ? 1 : 0;\n              }\n              var H;\n              0 === (H = u(f.getFullYear() - r.getFullYear())) && 0 === (H = u(f.getMonth() - r.getMonth())) && (H = u(f.getDate() - r.getDate()));\n              return H;\n            }\n            function q(f) {\n              switch (f.getDay()) {\n                case 0:\n                  return new Date(f.getFullYear() - 1, 11, 29);\n                case 1:\n                  return f;\n                case 2:\n                  return new Date(f.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    f.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(f.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(f.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(f.getFullYear() - 1, 11, 30);\n              }\n            }\n            function B(f) {\n              var r = f.Qa;\n              for (f = new Date(new Date(f.Ra + 1900, 0, 1).getTime()); 0 < r; ) {\n                var u = f.getMonth(), H = (Y(f.getFullYear()) ? Rb : Sb)[u];\n                if (r > H - f.getDate())\n                  r -= H - f.getDate() + 1, f.setDate(1), 11 > u ? f.setMonth(u + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));\n                else {\n                  f.setDate(f.getDate() + r);\n                  break;\n                }\n              }\n              u = new Date(f.getFullYear() + 1, 0, 4);\n              r = q(new Date(\n                f.getFullYear(),\n                0,\n                4\n              ));\n              u = q(u);\n              return 0 >= k(r, f) ? 0 >= k(u, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            var v = p()[d + 40 >> 2 >>> 0];\n            d = { rb: p()[d >> 2 >>> 0], qb: p()[d + 4 >> 2 >>> 0], Ta: p()[d + 8 >> 2 >>> 0], Xa: p()[d + 12 >> 2 >>> 0], Ua: p()[d + 16 >> 2 >>> 0], Ra: p()[d + 20 >> 2 >>> 0], Na: p()[d + 24 >> 2 >>> 0], Qa: p()[d + 28 >> 2 >>> 0], zb: p()[d + 32 >> 2 >>> 0], pb: p()[d + 36 >> 2 >>> 0], sb: v ? Ka(v) : "" };\n            c = Ka(c);\n            v = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var y in v)\n              c = c.replace(new RegExp(y, "g"), v[y]);\n            var Lb = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Mb = "January February March April May June July August September October November December".split(" ");\n            v = {\n              "%a": (f) => Lb[f.Na].substring(0, 3),\n              "%A": (f) => Lb[f.Na],\n              "%b": (f) => Mb[f.Ua].substring(0, 3),\n              "%B": (f) => Mb[f.Ua],\n              "%C": (f) => h((f.Ra + 1900) / 100 | 0, 2),\n              "%d": (f) => h(f.Xa, 2),\n              "%e": (f) => g(f.Xa, 2, " "),\n              "%g": (f) => B(f).toString().substring(2),\n              "%G": (f) => B(f),\n              "%H": (f) => h(f.Ta, 2),\n              "%I": (f) => {\n                f = f.Ta;\n                0 == f ? f = 12 : 12 < f && (f -= 12);\n                return h(f, 2);\n              },\n              "%j": (f) => {\n                for (var r = 0, u = 0; u <= f.Ua - 1; r += (Y(f.Ra + 1900) ? Rb : Sb)[u++])\n                  ;\n                return h(f.Xa + r, 3);\n              },\n              "%m": (f) => h(f.Ua + 1, 2),\n              "%M": (f) => h(f.qb, 2),\n              "%n": () => "\\n",\n              "%p": (f) => 0 <= f.Ta && 12 > f.Ta ? "AM" : "PM",\n              "%S": (f) => h(f.rb, 2),\n              "%t": () => "	",\n              "%u": (f) => f.Na || 7,\n              "%U": (f) => h(Math.floor((f.Qa + 7 - f.Na) / 7), 2),\n              "%V": (f) => {\n                var r = Math.floor((f.Qa + 7 - (f.Na + 6) % 7) / 7);\n                2 >= (f.Na + 371 - f.Qa - 2) % 7 && r++;\n                if (r)\n                  53 == r && (u = (f.Na + 371 - f.Qa) % 7, 4 == u || 3 == u && Y(f.Ra) || (r = 1));\n                else {\n                  r = 52;\n                  var u = (f.Na + 7 - f.Qa - 1) % 7;\n                  (4 == u || 5 == u && Y(f.Ra % 400 - 1)) && r++;\n                }\n                return h(r, 2);\n              },\n              "%w": (f) => f.Na,\n              "%W": (f) => h(Math.floor((f.Qa + 7 - (f.Na + 6) % 7) / 7), 2),\n              "%y": (f) => (f.Ra + 1900).toString().substring(2),\n              "%Y": (f) => f.Ra + 1900,\n              "%z": (f) => {\n                f = f.pb;\n                var r = 0 <= f;\n                f = Math.abs(f) / 60;\n                return (r ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);\n              },\n              "%Z": (f) => f.sb,\n              "%%": () => "%"\n            };\n            c = c.replace(\n              /%%/g,\n              "\\0\\0"\n            );\n            for (y in v)\n              c.includes(y) && (c = c.replace(new RegExp(y, "g"), v[y](d)));\n            c = c.replace(/\\0\\0/g, "%");\n            y = Tb(c);\n            if (y.length > b)\n              return 0;\n            Ub(y, a);\n            return y.length - 1;\n          }\n          var Z = void 0, Wb = [];\n          function Xb(a, b) {\n            if (!Z) {\n              Z = /* @__PURE__ */ new WeakMap();\n              var c = P.length;\n              if (Z)\n                for (var d = 0; d < 0 + c; d++) {\n                  var g = Ua(d);\n                  g && Z.set(g, d);\n                }\n            }\n            if (c = Z.get(a) || 0)\n              return c;\n            if (Wb.length)\n              c = Wb.pop();\n            else {\n              try {\n                P.grow(1);\n              } catch (q) {\n                if (!(q instanceof RangeError))\n                  throw q;\n                throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";\n              }\n              c = P.length - 1;\n            }\n            try {\n              d = c, P.set(d, a), X[d] = P.get(d);\n            } catch (q) {\n              if (!(q instanceof TypeError))\n                throw q;\n              if ("function" == typeof WebAssembly.Function) {\n                d = WebAssembly.Function;\n                g = { i: "i32", j: "i64", f: "f32", d: "f64", p: "i32" };\n                for (var h = {\n                  parameters: [],\n                  results: "v" == b[0] ? [] : [g[b[0]]]\n                }, k = 1; k < b.length; ++k)\n                  h.parameters.push(g[b[k]]);\n                b = new d(h, a);\n              } else {\n                d = [1];\n                g = b.slice(0, 1);\n                b = b.slice(1);\n                h = { i: 127, p: 127, j: 126, f: 125, d: 124 };\n                d.push(96);\n                k = b.length;\n                128 > k ? d.push(k) : d.push(k % 128 | 128, k >> 7);\n                for (k = 0; k < b.length; ++k)\n                  d.push(h[b[k]]);\n                "v" == g ? d.push(0) : d.push(1, h[g]);\n                b = [0, 97, 115, 109, 1, 0, 0, 0, 1];\n                g = d.length;\n                128 > g ? b.push(g) : b.push(g % 128 | 128, g >> 7);\n                b.push.apply(b, d);\n                b.push(2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0);\n                b = new WebAssembly.Module(new Uint8Array(b));\n                b = new WebAssembly.Instance(\n                  b,\n                  { e: { f: a } }\n                ).exports.f;\n              }\n              d = c;\n              P.set(d, b);\n              X[d] = P.get(d);\n            }\n            Z.set(a, c);\n            return c;\n          }\n          V.Wa();\n          var Yb = [null, La, Ma, Za, ab, bb, fb, gb, hb, ib, jb, kb, lb, mb, nb, ob, pb, vb, wb, Hb, Ib, Jb, Nb, Ob, Qb], ac = {\n            b: function(a, b, c) {\n              a >>>= 0;\n              new Wa(a).Wa(b >>> 0, c >>> 0);\n              Xa = a;\n              Ya++;\n              throw Xa;\n            },\n            N: function(a) {\n              Zb(a >>> 0, !A, 1, !ka, 131072, false);\n              V.Za();\n            },\n            k: function(a) {\n              a >>>= 0;\n              D ? postMessage({ cmd: "cleanupThread", thread: a }) : Ga(a);\n            },\n            I: $a,\n            h: ab,\n            T: bb,\n            D: fb,\n            F: gb,\n            U: hb,\n            R: ib,\n            J: jb,\n            Q: kb,\n            o: lb,\n            E: mb,\n            B: nb,\n            S: ob,\n            C: pb,\n            q: () => true,\n            z: function(a, b) {\n              a >>>= 0;\n              a == b >>> 0 ? setTimeout(() => Qa()) : D ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = V.Ma[a]) && a.postMessage({ cmd: "checkMailbox" });\n            },\n            L: function() {\n              return -1;\n            },\n            M: rb,\n            p: function(a) {\n              C && V.Ma[a >>> 0].ref();\n            },\n            t: function(a, b, c) {\n              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n              c >>>= 0;\n              a = new Date(1e3 * a);\n              p()[c >> 2 >>> 0] = a.getUTCSeconds();\n              p()[c + 4 >> 2 >>> 0] = a.getUTCMinutes();\n              p()[c + 8 >> 2 >>> 0] = a.getUTCHours();\n              p()[c + 12 >> 2 >>> 0] = a.getUTCDate();\n              p()[c + 16 >> 2 >>> 0] = a.getUTCMonth();\n              p()[c + 20 >> 2 >>> 0] = a.getUTCFullYear() - 1900;\n              p()[c + 24 >> 2 >>> 0] = a.getUTCDay();\n              a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n              p()[c + 28 >> 2 >>> 0] = a;\n            },\n            u: function(a, b, c) {\n              a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n              c >>>= 0;\n              a = new Date(1e3 * a);\n              p()[c >> 2 >>> 0] = a.getSeconds();\n              p()[c + 4 >> 2 >>> 0] = a.getMinutes();\n              p()[c + 8 >> 2 >>> 0] = a.getHours();\n              p()[c + 12 >> 2 >>> 0] = a.getDate();\n              p()[c + 16 >> 2 >>> 0] = a.getMonth();\n              p()[c + 20 >> 2 >>> 0] = a.getFullYear() - 1900;\n              p()[c + 24 >> 2 >>> 0] = a.getDay();\n              b = (Y(a.getFullYear()) ? tb : ub)[a.getMonth()] + a.getDate() - 1 | 0;\n              p()[c + 28 >> 2 >>> 0] = b;\n              p()[c + 36 >> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n              b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n              var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n              a = (b != d && a.getTimezoneOffset() == Math.min(d, b)) | 0;\n              p()[c + 32 >> 2 >>> 0] = a;\n            },\n            v: function(a) {\n              a >>>= 0;\n              var b = new Date(p()[a + 20 >> 2 >>> 0] + 1900, p()[a + 16 >> 2 >>> 0], p()[a + 12 >> 2 >>> 0], p()[a + 8 >> 2 >>> 0], p()[a + 4 >> 2 >>> 0], p()[a >> 2 >>> 0], 0), c = p()[a + 32 >> 2 >>> 0], d = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), k = Math.min(h, g);\n              0 > c ? p()[a + 32 >> 2 >>> 0] = Number(g != h && k == d) : 0 < c != (k == d) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : g) - d)));\n              p()[a + 24 >> 2 >>> 0] = b.getDay();\n              c = (Y(b.getFullYear()) ? tb : ub)[b.getMonth()] + b.getDate() - 1 | 0;\n              p()[a + 28 >> 2 >>> 0] = c;\n              p()[a >> 2 >>> 0] = b.getSeconds();\n              p()[a + 4 >> 2 >>> 0] = b.getMinutes();\n              p()[a + 8 >> 2 >>> 0] = b.getHours();\n              p()[a + 12 >> 2 >>> 0] = b.getDate();\n              p()[a + 16 >> 2 >>> 0] = b.getMonth();\n              p()[a + 20 >> 2 >>> 0] = b.getYear();\n              a = b.getTime() / 1e3;\n              return $b((U = a, 1 <= +Math.abs(U) ? 0 < U ? +Math.floor(U / 4294967296) >>> 0 : ~~+Math.ceil((U - +(~~U >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;\n            },\n            r: vb,\n            s: wb,\n            y: function(a, b, c) {\n              function d(v) {\n                return (v = v.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? v[1] : "GMT";\n              }\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), k = new Date(g, 6, 1);\n              g = h.getTimezoneOffset();\n              var q = k.getTimezoneOffset(), B = Math.max(g, q);\n              t()[a >> 2 >>> 0] = 60 * B;\n              p()[b >> 2 >>> 0] = Number(g != q);\n              a = d(h);\n              b = d(k);\n              a = yb(a);\n              b = yb(b);\n              q < g ? (t()[c >> 2 >>> 0] = a, t()[c + 4 >> 2 >>> 0] = b) : (t()[c >> 2 >>> 0] = b, t()[c + 4 >> 2 >>> 0] = a);\n            },\n            c: () => {\n              K("");\n            },\n            l: function() {\n            },\n            i: function() {\n              return Date.now();\n            },\n            V: () => {\n              va += 1;\n              throw "unwind";\n            },\n            A: function() {\n              return 4294901760;\n            },\n            e: () => performance.timeOrigin + performance.now(),\n            f: function() {\n              return C ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency;\n            },\n            K: function(a, b, c, d) {\n              V.wb = b >>> 0;\n              Db.length = c;\n              b = d >>> 0 >> 3;\n              for (d = 0; d < c; d++)\n                Db[d] = ea()[b + d >>> 0];\n              return Yb[a].apply(null, Db);\n            },\n            x: function(a) {\n              a >>>= 0;\n              var b = n().length;\n              if (a <= b || 4294901760 < a)\n                return false;\n              for (var c = 1; 4 >= c; c *= 2) {\n                var d = b * (1 + 0.2 / c);\n                d = Math.min(d, a + 100663296);\n                var g = Math;\n                d = Math.max(a, d);\n                a: {\n                  g = g.min.call(g, 4294901760, d + (65536 - d % 65536) % 65536) - e.buffer.byteLength + 65535 >>> 16;\n                  try {\n                    e.grow(g);\n                    m();\n                    var h = 1;\n                    break a;\n                  } catch (k) {\n                  }\n                  h = void 0;\n                }\n                if (h)\n                  return true;\n              }\n              return false;\n            },\n            O: Hb,\n            P: Ib,\n            H: Na,\n            g: Jb,\n            n: Nb,\n            w: Ob,\n            m: Qb,\n            a: e || w.wasmMemory,\n            G: Vb,\n            d: function(a, b, c, d) {\n              return Vb(a >>> 0, b >>> 0, c >>> 0, d >>> 0);\n            },\n            j: function(a, b, c, d) {\n              const g = P.length;\n              a = new Uint8Array(n().slice(a + b, a + c));\n              try {\n                var h = new WebAssembly.Module(a), k = new WebAssembly.Instance(h, { env: { memory: e } }), q;\n                for (q in k.exports)\n                  Xb(k.exports[q]);\n                return g < P.length ? g : d;\n              } catch (B) {\n                return console.log(B), d;\n              }\n            }\n          };\n          (function() {\n            function a(c, d) {\n              c = c.exports;\n              L = c = bc(c);\n              V.$a.push(L.za);\n              P = L.Aa;\n              ta.unshift(L.W);\n              ra = d;\n              ya();\n              return c;\n            }\n            var b = { a: ac };\n            xa();\n            if (w.instantiateWasm)\n              try {\n                return w.instantiateWasm(b, a);\n              } catch (c) {\n                I("Module.instantiateWasm callback failed with error: " + c), x(c);\n              }\n            Da(b, function(c) {\n              a(c.instance, c.module);\n            }).catch(x);\n            return {};\n          })();\n          w._OrtInit = (a, b) => (w._OrtInit = L.X)(a, b);\n          w._OrtGetLastError = (a, b) => (w._OrtGetLastError = L.Y)(a, b);\n          w._OrtCreateSessionOptions = (a, b, c, d, g, h, k, q, B, v) => (w._OrtCreateSessionOptions = L.Z)(a, b, c, d, g, h, k, q, B, v);\n          w._OrtAppendExecutionProvider = (a, b) => (w._OrtAppendExecutionProvider = L._)(a, b);\n          w._OrtAddFreeDimensionOverride = (a, b, c) => (w._OrtAddFreeDimensionOverride = L.$)(a, b, c);\n          w._OrtAddSessionConfigEntry = (a, b, c) => (w._OrtAddSessionConfigEntry = L.aa)(a, b, c);\n          w._OrtReleaseSessionOptions = (a) => (w._OrtReleaseSessionOptions = L.ba)(a);\n          w._OrtCreateSession = (a, b, c) => (w._OrtCreateSession = L.ca)(a, b, c);\n          w._OrtReleaseSession = (a) => (w._OrtReleaseSession = L.da)(a);\n          w._OrtGetInputOutputCount = (a, b, c) => (w._OrtGetInputOutputCount = L.ea)(a, b, c);\n          w._OrtGetInputName = (a, b) => (w._OrtGetInputName = L.fa)(a, b);\n          w._OrtGetOutputName = (a, b) => (w._OrtGetOutputName = L.ga)(a, b);\n          w._OrtFree = (a) => (w._OrtFree = L.ha)(a);\n          w._OrtCreateTensor = (a, b, c, d, g, h) => (w._OrtCreateTensor = L.ia)(a, b, c, d, g, h);\n          w._OrtGetTensorData = (a, b, c, d, g) => (w._OrtGetTensorData = L.ja)(a, b, c, d, g);\n          w._OrtReleaseTensor = (a) => (w._OrtReleaseTensor = L.ka)(a);\n          w._OrtCreateRunOptions = (a, b, c, d) => (w._OrtCreateRunOptions = L.la)(a, b, c, d);\n          w._OrtAddRunConfigEntry = (a, b, c) => (w._OrtAddRunConfigEntry = L.ma)(a, b, c);\n          w._OrtReleaseRunOptions = (a) => (w._OrtReleaseRunOptions = L.na)(a);\n          w._OrtCreateBinding = (a) => (w._OrtCreateBinding = L.oa)(a);\n          w._OrtBindInput = (a, b, c) => (w._OrtBindInput = L.pa)(a, b, c);\n          w._OrtBindOutput = (a, b, c, d) => (w._OrtBindOutput = L.qa)(a, b, c, d);\n          w._OrtClearBoundOutputs = (a) => (w._OrtClearBoundOutputs = L.ra)(a);\n          w._OrtReleaseBinding = (a) => (w._OrtReleaseBinding = L.sa)(a);\n          w._OrtRunWithBinding = (a, b, c, d, g) => (w._OrtRunWithBinding = L.ta)(a, b, c, d, g);\n          w._OrtRun = (a, b, c, d, g, h, k, q) => (w._OrtRun = L.ua)(a, b, c, d, g, h, k, q);\n          w._OrtEndProfiling = (a) => (w._OrtEndProfiling = L.va)(a);\n          var Pa = w._pthread_self = () => (Pa = w._pthread_self = L.wa)(), xb = w._malloc = (a) => (xb = w._malloc = L.xa)(a);\n          w._free = (a) => (w._free = L.ya)(a);\n          w.__emscripten_tls_init = () => (w.__emscripten_tls_init = L.za)();\n          var Zb = w.__emscripten_thread_init = (a, b, c, d, g, h) => (Zb = w.__emscripten_thread_init = L.Ba)(a, b, c, d, g, h);\n          w.__emscripten_thread_crashed = () => (w.__emscripten_thread_crashed = L.Ca)();\n          var Cb = (a, b, c, d) => (Cb = L.Da)(a, b, c, d), Oa = (a) => (Oa = L.Ea)(a), Va = w.__emscripten_thread_exit = (a) => (Va = w.__emscripten_thread_exit = L.Fa)(a), sb = w.__emscripten_check_mailbox = () => (sb = w.__emscripten_check_mailbox = L.Ga)(), $b = (a) => ($b = L.Ha)(a), Sa = (a, b) => (Sa = L.Ia)(a, b), zb = () => (zb = L.Ja)(), Ta = (a) => (Ta = L.Ka)(a), Bb = (a) => (Bb = L.La)(a);\n          w.___start_em_js = 906844;\n          w.___stop_em_js = 907456;\n          function bc(a) {\n            a = Object.assign({}, a);\n            var b = (d) => () => d() >>> 0, c = (d) => (g) => d(g) >>> 0;\n            a.__errno_location = b(a.__errno_location);\n            a.pthread_self = b(a.pthread_self);\n            a.malloc = c(a.malloc);\n            a.stackSave = b(a.stackSave);\n            a.stackAlloc = c(a.stackAlloc);\n            return a;\n          }\n          w.keepRuntimeAlive = Q;\n          w.wasmMemory = e;\n          w.stackAlloc = Bb;\n          w.stackSave = zb;\n          w.stackRestore = Ta;\n          w.addFunction = Xb;\n          w.UTF8ToString = Ka;\n          w.stringToUTF8 = eb;\n          w.lengthBytesUTF8 = cb;\n          w.ExitStatus = Ea;\n          w.PThread = V;\n          var cc;\n          S = function dc() {\n            cc || ec();\n            cc || (S = dc);\n          };\n          function ec() {\n            function a() {\n              if (!cc && (cc = true, w.calledRun = true, !M)) {\n                D || Ra(ta);\n                ha(w);\n                if (w.onRuntimeInitialized)\n                  w.onRuntimeInitialized();\n                if (!D) {\n                  if (w.postRun)\n                    for ("function" == typeof w.postRun && (w.postRun = [w.postRun]); w.postRun.length; ) {\n                      var b = w.postRun.shift();\n                      ua.unshift(b);\n                    }\n                  Ra(ua);\n                }\n              }\n            }\n            if (!(0 < R))\n              if (D)\n                ha(w), D || Ra(ta), startWorker(w);\n              else {\n                if (w.preRun)\n                  for ("function" == typeof w.preRun && (w.preRun = [w.preRun]); w.preRun.length; )\n                    sa.unshift(w.preRun.shift());\n                Ra(sa);\n                0 < R || (w.setStatus ? (w.setStatus("Running..."), setTimeout(function() {\n                  setTimeout(\n                    function() {\n                      w.setStatus("");\n                    },\n                    1\n                  );\n                  a();\n                }, 1)) : a());\n              }\n          }\n          if (w.preInit)\n            for ("function" == typeof w.preInit && (w.preInit = [w.preInit]); 0 < w.preInit.length; )\n              w.preInit.pop()();\n          ec();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasmThreaded;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasmThreaded);\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.worker.js\n  var require_ort_wasm_threaded_worker = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {\n      module.exports = \'"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>(0,eval)(fs.readFileSync(f,"utf8")+"//# sourceURL="+f),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason??e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*isMainBrowserThread=*/0,/*isMainRuntimeThread=*/0,/*canBlock=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}}self.onmessage=handleMessage;\\n\';\n    }\n  });\n\n  // nodejs-ignore:node:path\n  var join = void 0;\n\n  // web/lib/wasm/wasm-factory.ts\n  var ortWasmFactory;\n  if (false) {\n    ortWasmFactory = null;\n  } else {\n    ortWasmFactory = true ? require_ort_wasm() : null;\n  }\n  var ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;\n  var wasm;\n  var initialized = false;\n  var initializing = false;\n  var aborted = false;\n  var isMultiThreadSupported = () => {\n    try {\n      if (typeof SharedArrayBuffer === "undefined") {\n        return false;\n      }\n      if (typeof MessageChannel !== "undefined") {\n        new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n      }\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        5,\n        4,\n        1,\n        3,\n        1,\n        1,\n        10,\n        11,\n        1,\n        9,\n        0,\n        65,\n        0,\n        254,\n        16,\n        2,\n        0,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var isSimdSupported = () => {\n    try {\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        10,\n        30,\n        1,\n        28,\n        0,\n        65,\n        0,\n        253,\n        15,\n        253,\n        12,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        253,\n        186,\n        1,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var getWasmFileName = (useSimd, useThreads) => {\n    if (useSimd) {\n      if (false) {\n        return "ort-training-wasm-simd.wasm";\n      }\n      return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";\n    } else {\n      return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";\n    }\n  };\n  var initializeWebAssembly = async (flags) => {\n    if (initialized) {\n      return Promise.resolve();\n    }\n    if (initializing) {\n      throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");\n    }\n    if (aborted) {\n      throw new Error("previous call to \'initializeWebAssembly()\' failed.");\n    }\n    initializing = true;\n    const timeout = flags.initTimeout;\n    const numThreads = flags.numThreads;\n    const simd = flags.simd;\n    const useThreads = numThreads > 1 && isMultiThreadSupported();\n    const useSimd = simd && isSimdSupported();\n    const wasmPaths = flags.wasmPaths;\n    const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;\n    const wasmFileName = getWasmFileName(useSimd, useThreads);\n    const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;\n    let isTimeout = false;\n    const tasks = [];\n    if (timeout > 0) {\n      tasks.push(new Promise((resolve) => {\n        setTimeout(() => {\n          isTimeout = true;\n          resolve();\n        }, timeout);\n      }));\n    }\n    tasks.push(new Promise((resolve, reject) => {\n      const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n      const config = {\n        locateFile: (fileName, scriptDirectory) => {\n          if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {\n            return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by esbuild plugin to load file content as string.\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require_ort_wasm_threaded_worker()\n              ],\n              { type: "text/javascript" }\n            ));\n          }\n          if (fileName.endsWith(".wasm")) {\n            if (wasmPathOverride) {\n              return wasmPathOverride;\n            }\n            const prefix = wasmPrefixOverride ?? scriptDirectory;\n            if (false) {\n              if (wasmFileName === "ort-wasm-simd.wasm") {\n                return prefix + "ort-wasm-simd.jsep.wasm";\n              } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {\n                return prefix + "ort-wasm-simd-threaded.jsep.wasm";\n              }\n            }\n            return prefix + wasmFileName;\n          }\n          return scriptDirectory + fileName;\n        }\n      };\n      if (useThreads) {\n        if (typeof Blob === "undefined") {\n          config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");\n        } else {\n          const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;\n          config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });\n        }\n      }\n      factory(config).then(\n        // wasm module initialized successfully\n        (module) => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        }\n      );\n    }));\n    await Promise.race(tasks);\n    if (isTimeout) {\n      throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n    }\n  };\n  var getInstance = () => {\n    if (initialized && wasm) {\n      return wasm;\n    }\n    throw new Error("WebAssembly is not initialized yet.");\n  };\n\n  // web/lib/wasm/wasm-utils.ts\n  var allocWasmString = (data, allocs) => {\n    const wasm2 = getInstance();\n    const dataLength = wasm2.lengthBytesUTF8(data) + 1;\n    const dataOffset = wasm2._malloc(dataLength);\n    wasm2.stringToUTF8(data, dataOffset, dataLength);\n    allocs.push(dataOffset);\n    return dataOffset;\n  };\n  var iterateExtraOptions = (options, prefix, seen, handler) => {\n    if (typeof options == "object" && options !== null) {\n      if (seen.has(options)) {\n        throw new Error("Circular reference in options");\n      } else {\n        seen.add(options);\n      }\n    }\n    Object.entries(options).forEach(([key, value]) => {\n      const name = prefix ? prefix + key : key;\n      if (typeof value === "object") {\n        iterateExtraOptions(value, name + ".", seen, handler);\n      } else if (typeof value === "string" || typeof value === "number") {\n        handler(name, value.toString());\n      } else if (typeof value === "boolean") {\n        handler(name, value ? "1" : "0");\n      } else {\n        throw new Error(`Can\'t handle extra config type: ${typeof value}`);\n      }\n    });\n  };\n  var checkLastError = (message) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const paramsOffset = wasm2.stackAlloc(8);\n      wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);\n      const errorCode = wasm2.HEAP32[paramsOffset / 4];\n      const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];\n      const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";\n      throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n\n  // web/lib/wasm/run-options.ts\n  var setRunOptions = (options) => {\n    const wasm2 = getInstance();\n    let runOptionsHandle = 0;\n    const allocs = [];\n    const runOptions = options || {};\n    try {\n      if (options?.logSeverityLevel === void 0) {\n        runOptions.logSeverityLevel = 2;\n      } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n      }\n      if (options?.logVerbosityLevel === void 0) {\n        runOptions.logVerbosityLevel = 0;\n      } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {\n        throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n      }\n      if (options?.terminate === void 0) {\n        runOptions.terminate = false;\n      }\n      let tagDataOffset = 0;\n      if (options?.tag !== void 0) {\n        tagDataOffset = allocWasmString(options.tag, allocs);\n      }\n      runOptionsHandle = wasm2._OrtCreateRunOptions(\n        runOptions.logSeverityLevel,\n        runOptions.logVerbosityLevel,\n        !!runOptions.terminate,\n        tagDataOffset\n      );\n      if (runOptionsHandle === 0) {\n        checkLastError("Can\'t create run options.");\n      }\n      if (options?.extra !== void 0) {\n        iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a run config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [runOptionsHandle, allocs];\n    } catch (e) {\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/session-options.ts\n  var getGraphOptimzationLevel = (graphOptimizationLevel) => {\n    switch (graphOptimizationLevel) {\n      case "disabled":\n        return 0;\n      case "basic":\n        return 1;\n      case "extended":\n        return 2;\n      case "all":\n        return 99;\n      default:\n        throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n    }\n  };\n  var getExecutionMode = (executionMode) => {\n    switch (executionMode) {\n      case "sequential":\n        return 0;\n      case "parallel":\n        return 1;\n      default:\n        throw new Error(`unsupported execution mode: ${executionMode}`);\n    }\n  };\n  var appendDefaultOptions = (options) => {\n    if (!options.extra) {\n      options.extra = {};\n    }\n    if (!options.extra.session) {\n      options.extra.session = {};\n    }\n    const session = options.extra.session;\n    if (!session.use_ort_model_bytes_directly) {\n      session.use_ort_model_bytes_directly = "1";\n    }\n    if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {\n      options.enableMemPattern = false;\n    }\n  };\n  var setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {\n    for (const ep of executionProviders) {\n      let epName = typeof ep === "string" ? ep : ep.name;\n      switch (epName) {\n        case "xnnpack":\n          epName = "XNNPACK";\n          break;\n        case "webnn":\n          epName = "WEBNN";\n          if (typeof ep !== "string") {\n            const webnnOptions = ep;\n            if (webnnOptions?.deviceType) {\n              const keyDataOffset = allocWasmString("deviceType", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'deviceType\' - ${webnnOptions.deviceType}.`);\n              }\n            }\n            if (webnnOptions?.numThreads) {\n              let numThreads = webnnOptions.numThreads;\n              if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {\n                numThreads = 0;\n              }\n              const keyDataOffset = allocWasmString("numThreads", allocs);\n              const valueDataOffset = allocWasmString(numThreads.toString(), allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'numThreads\' - ${webnnOptions.numThreads}.`);\n              }\n            }\n            if (webnnOptions?.powerPreference) {\n              const keyDataOffset = allocWasmString("powerPreference", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'powerPreference\' - ${webnnOptions.powerPreference}.`\n                );\n              }\n            }\n          }\n          break;\n        case "webgpu":\n          epName = "JS";\n          if (typeof ep !== "string") {\n            const webgpuOptions = ep;\n            if (webgpuOptions?.preferredLayout) {\n              if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {\n                throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${webgpuOptions.preferredLayout}`);\n              }\n              const keyDataOffset = allocWasmString("preferredLayout", allocs);\n              const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'preferredLayout\' - ${webgpuOptions.preferredLayout}.`\n                );\n              }\n            }\n          }\n          break;\n        case "wasm":\n        case "cpu":\n          continue;\n        default:\n          throw new Error(`not supported execution provider: ${epName}`);\n      }\n      const epNameDataOffset = allocWasmString(epName, allocs);\n      if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n        checkLastError(`Can\'t append execution provider: ${epName}.`);\n      }\n    }\n  };\n  var setSessionOptions = (options) => {\n    const wasm2 = getInstance();\n    let sessionOptionsHandle = 0;\n    const allocs = [];\n    const sessionOptions = options || {};\n    appendDefaultOptions(sessionOptions);\n    try {\n      const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");\n      const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");\n      const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;\n      const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;\n      if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n      }\n      const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;\n      if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n        throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n      }\n      const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;\n      sessionOptionsHandle = wasm2._OrtCreateSessionOptions(\n        graphOptimizationLevel,\n        !!sessionOptions.enableCpuMemArena,\n        !!sessionOptions.enableMemPattern,\n        executionMode,\n        !!sessionOptions.enableProfiling,\n        0,\n        logIdDataOffset,\n        logSeverityLevel,\n        logVerbosityLevel,\n        optimizedModelFilePathOffset\n      );\n      if (sessionOptionsHandle === 0) {\n        checkLastError("Can\'t create session options.");\n      }\n      if (sessionOptions.executionProviders) {\n        setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n      }\n      if (sessionOptions.freeDimensionOverrides) {\n        for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n          if (typeof name !== "string") {\n            throw new Error(`free dimension override name must be a string: ${name}`);\n          }\n          if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {\n            throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n          }\n          const nameOffset = allocWasmString(name, allocs);\n          if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n            checkLastError(`Can\'t set a free dimension override: ${name} - ${value}.`);\n          }\n        }\n      }\n      if (sessionOptions.extra !== void 0) {\n        iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a session config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [sessionOptionsHandle, allocs];\n    } catch (e) {\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/wasm-common.ts\n  var tensorDataTypeStringToEnum = (type) => {\n    switch (type) {\n      case "int8":\n        return 3 /* int8 */;\n      case "uint8":\n        return 2 /* uint8 */;\n      case "bool":\n        return 9 /* bool */;\n      case "int16":\n        return 5 /* int16 */;\n      case "uint16":\n        return 4 /* uint16 */;\n      case "int32":\n        return 6 /* int32 */;\n      case "uint32":\n        return 12 /* uint32 */;\n      case "float16":\n        return 10 /* float16 */;\n      case "float32":\n        return 1 /* float */;\n      case "float64":\n        return 11 /* double */;\n      case "string":\n        return 8 /* string */;\n      case "int64":\n        return 7 /* int64 */;\n      case "uint64":\n        return 13 /* uint64 */;\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  };\n  var tensorDataTypeEnumToString = (typeProto) => {\n    switch (typeProto) {\n      case 3 /* int8 */:\n        return "int8";\n      case 2 /* uint8 */:\n        return "uint8";\n      case 9 /* bool */:\n        return "bool";\n      case 5 /* int16 */:\n        return "int16";\n      case 4 /* uint16 */:\n        return "uint16";\n      case 6 /* int32 */:\n        return "int32";\n      case 12 /* uint32 */:\n        return "uint32";\n      case 10 /* float16 */:\n        return "float16";\n      case 1 /* float */:\n        return "float32";\n      case 11 /* double */:\n        return "float64";\n      case 8 /* string */:\n        return "string";\n      case 7 /* int64 */:\n        return "int64";\n      case 13 /* uint64 */:\n        return "uint64";\n      default:\n        throw new Error(`unsupported data type: ${typeProto}`);\n    }\n  };\n  var getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];\n  var tensorTypeToTypedArrayConstructor = (type) => {\n    switch (type) {\n      case "float16":\n        return Uint16Array;\n      case "float32":\n        return Float32Array;\n      case "uint8":\n        return Uint8Array;\n      case "int8":\n        return Int8Array;\n      case "uint16":\n        return Uint16Array;\n      case "int16":\n        return Int16Array;\n      case "int32":\n        return Int32Array;\n      case "bool":\n        return Uint8Array;\n      case "float64":\n        return Float64Array;\n      case "uint32":\n        return Uint32Array;\n      case "int64":\n        return BigInt64Array;\n      case "uint64":\n        return BigUint64Array;\n      default:\n        throw new Error(`unsupported type: ${type}`);\n    }\n  };\n  var logLevelStringToEnum = (logLevel) => {\n    switch (logLevel) {\n      case "verbose":\n        return 0;\n      case "info":\n        return 1;\n      case "warning":\n        return 2;\n      case "error":\n        return 3;\n      case "fatal":\n        return 4;\n      default:\n        throw new Error(`unsupported logging level: ${logLevel}`);\n    }\n  };\n  var isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";\n  var dataLocationStringToEnum = (location) => {\n    switch (location) {\n      case "none":\n        return 0;\n      case "cpu":\n        return 1;\n      case "cpu-pinned":\n        return 2;\n      case "texture":\n        return 3;\n      case "gpu-buffer":\n        return 4;\n      default:\n        throw new Error(`unsupported data location: ${location}`);\n    }\n  };\n\n  // web/lib/wasm/wasm-core-impl.ts\n  var ortEnvInitialized = false;\n  var getSessionInputOutputCount = (sessionHandle) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const dataOffset = wasm2.stackAlloc(8);\n      const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n      if (errorCode !== 0) {\n        checkLastError("Can\'t get session input/output count.");\n      }\n      return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var initOrt = (numThreads, loggingLevel) => {\n    const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n    if (errorCode !== 0) {\n      checkLastError("Can\'t initialize onnxruntime.");\n    }\n  };\n  var initRuntime = async (env) => {\n    initOrt(env.wasm.numThreads, logLevelStringToEnum(env.logLevel));\n    if (false) {\n      const initJsep = null.init;\n      await initJsep(getInstance(), env);\n    }\n    ortEnvInitialized = true;\n  };\n  var activeSessions = /* @__PURE__ */ new Map();\n  var isOrtEnvInitialized = () => ortEnvInitialized;\n  var createSessionAllocate = (model) => {\n    const wasm2 = getInstance();\n    const modelDataOffset = wasm2._malloc(model.byteLength);\n    if (modelDataOffset === 0) {\n      throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n    }\n    wasm2.HEAPU8.set(model, modelDataOffset);\n    return [modelDataOffset, model.byteLength];\n  };\n  var createSessionFinalize = (modelData, options) => {\n    const wasm2 = getInstance();\n    let sessionHandle = 0;\n    let sessionOptionsHandle = 0;\n    let ioBindingHandle = 0;\n    let allocs = [];\n    const inputNamesUTF8Encoded = [];\n    const outputNamesUTF8Encoded = [];\n    try {\n      [sessionOptionsHandle, allocs] = setSessionOptions(options);\n      sessionHandle = wasm2._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n      if (sessionHandle === 0) {\n        checkLastError("Can\'t create a session.");\n      }\n      const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n      const inputNames = [];\n      const outputNames = [];\n      const outputPreferredLocations = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm2._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an input name.");\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm2.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm2._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an output name.");\n        }\n        outputNamesUTF8Encoded.push(name);\n        const nameString = wasm2.UTF8ToString(name);\n        outputNames.push(nameString);\n        if (false) {\n          const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";\n          if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {\n            throw new Error(`Not supported preferred output location: ${location}.`);\n          }\n          outputPreferredLocations.push(location);\n        }\n      }\n      let bindingState = null;\n      if (false) {\n        ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);\n        if (ioBindingHandle === 0) {\n          checkLastError("Can\'t create IO binding.");\n        }\n        bindingState = {\n          handle: ioBindingHandle,\n          outputPreferredLocations,\n          outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))\n        };\n      }\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);\n      return [sessionHandle, inputNames, outputNames];\n    } catch (e) {\n      inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      if (ioBindingHandle !== 0) {\n        wasm2._OrtReleaseBinding(ioBindingHandle);\n      }\n      if (sessionHandle !== 0) {\n        wasm2._OrtReleaseSession(sessionHandle);\n      }\n      throw e;\n    } finally {\n      wasm2._free(modelData[0]);\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n    }\n  };\n  var createSession = (model, options) => {\n    const modelData = createSessionAllocate(model);\n    return createSessionFinalize(modelData, options);\n  };\n  var releaseSession = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    if (ioBindingState) {\n      wasm2._OrtReleaseBinding(ioBindingState.handle);\n    }\n    wasm2.jsepUnregisterBuffers?.(sessionId);\n    inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    wasm2._OrtReleaseSession(sessionHandle);\n    activeSessions.delete(sessionId);\n  };\n  var prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {\n    if (!tensor) {\n      tensorHandles.push(0);\n      return;\n    }\n    const wasm2 = getInstance();\n    const dataType = tensor[0];\n    const dims = tensor[1];\n    const location = tensor[3];\n    let rawData;\n    let dataByteLength;\n    if (dataType === "string" && location === "gpu-buffer") {\n      throw new Error("String tensor is not supported on GPU.");\n    }\n    if (location === "gpu-buffer") {\n      const gpuBuffer = tensor[2].gpuBuffer;\n      const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));\n      dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;\n      rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);\n    } else {\n      const data = tensor[2];\n      if (Array.isArray(data)) {\n        dataByteLength = 4 * data.length;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        let dataIndex = rawData / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== "string") {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n      }\n    }\n    const stack = wasm2.stackSave();\n    const dimsOffset = wasm2.stackAlloc(4 * dims.length);\n    try {\n      let dimIndex = dimsOffset / 4;\n      dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);\n      const tensor2 = wasm2._OrtCreateTensor(\n        tensorDataTypeStringToEnum(dataType),\n        rawData,\n        dataByteLength,\n        dimsOffset,\n        dims.length,\n        dataLocationStringToEnum(location)\n      );\n      if (tensor2 === 0) {\n        checkLastError(`Can\'t create tensor for input/output. session=${sessionId}, index=${index}.`);\n      }\n      tensorHandles.push(tensor2);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    const inputCount = inputIndices.length;\n    const outputCount = outputIndices.length;\n    let runOptionsHandle = 0;\n    let runOptionsAllocs = [];\n    const inputTensorHandles = [];\n    const outputTensorHandles = [];\n    const inputOutputAllocs = [];\n    const beforeRunStack = wasm2.stackSave();\n    const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);\n    try {\n      [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n      for (let i = 0; i < inputCount; i++) {\n        prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);\n      }\n      for (let i = 0; i < outputCount; i++) {\n        prepareInputOutputTensor(\n          outputTensors[i],\n          outputTensorHandles,\n          inputOutputAllocs,\n          sessionId,\n          inputCount + outputIndices[i]\n        );\n      }\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];\n        wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];\n        wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n      if (false) {\n        const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;\n        if (inputNamesUTF8Encoded.length !== inputCount) {\n          throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model\'s input count (${inputNamesUTF8Encoded.length}).`);\n        }\n        for (let i = 0; i < inputCount; i++) {\n          const index = inputIndices[i];\n          const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t bind input[${i}] for session=${sessionId}.`);\n          }\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const index = outputIndices[i];\n          const location = outputTensors[i]?.[3];\n          if (location) {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind pre-allocated output[${i}] for session=${sessionId}.`);\n            }\n          } else {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n            }\n          }\n        }\n      }\n      let errorCode;\n      if (false) {\n        errorCode = await wasm2._OrtRunWithBinding(\n          sessionHandle,\n          ioBindingState.handle,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      } else {\n        errorCode = await wasm2._OrtRun(\n          sessionHandle,\n          inputNamesOffset,\n          inputValuesOffset,\n          inputCount,\n          outputNamesOffset,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      }\n      if (errorCode !== 0) {\n        checkLastError("failed to call OrtRun().");\n      }\n      const output = [];\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];\n        if (tensor === outputTensorHandles[i]) {\n          output.push(outputTensors[i]);\n          continue;\n        }\n        const beforeGetTensorDataStack = wasm2.stackSave();\n        const tensorDataOffset = wasm2.stackAlloc(4 * 4);\n        let keepOutputTensor = false;\n        let type, dataOffset = 0;\n        try {\n          const errorCode2 = wasm2._OrtGetTensorData(\n            tensor,\n            tensorDataOffset,\n            tensorDataOffset + 4,\n            tensorDataOffset + 8,\n            tensorDataOffset + 12\n          );\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm2.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm2.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i2 = 0; i2 < dimsLength; i2++) {\n            dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);\n          }\n          wasm2._OrtFree(dimsOffset);\n          const size = dims.reduce((a, b) => a * b, 1);\n          type = tensorDataTypeEnumToString(dataType);\n          const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n          if (type === "string") {\n            if (preferredLocation === "gpu-buffer") {\n              throw new Error("String tensor is not supported on GPU.");\n            }\n            const stringData = [];\n            let dataIndex = dataOffset / 4;\n            for (let i2 = 0; i2 < size; i2++) {\n              const offset = wasm2.HEAPU32[dataIndex++];\n              const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData, "cpu"]);\n          } else {\n            if (preferredLocation === "gpu-buffer" && size > 0) {\n              const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);\n              const elementSize = getTensorElementSize(dataType);\n              if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {\n                throw new Error(`Unsupported data type: ${type}`);\n              }\n              keepOutputTensor = true;\n              output.push([\n                type,\n                dims,\n                {\n                  gpuBuffer,\n                  download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),\n                  dispose: () => {\n                    wasm2._OrtReleaseTensor(tensor);\n                  }\n                },\n                "gpu-buffer"\n              ]);\n            } else {\n              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n              const data = new typedArrayConstructor(size);\n              new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n              output.push([type, dims, data, "cpu"]);\n            }\n          }\n        } finally {\n          wasm2.stackRestore(beforeGetTensorDataStack);\n          if (type === "string" && dataOffset) {\n            wasm2._free(dataOffset);\n          }\n          if (!keepOutputTensor) {\n            wasm2._OrtReleaseTensor(tensor);\n          }\n        }\n      }\n      if (ioBindingState) {\n        wasm2._OrtClearBoundOutputs(ioBindingState.handle);\n      }\n      return output;\n    } finally {\n      wasm2.stackRestore(beforeRunStack);\n      inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      inputOutputAllocs.forEach((p) => wasm2._free(p));\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      runOptionsAllocs.forEach((p) => wasm2._free(p));\n    }\n  };\n  var endProfiling = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error("invalid session id");\n    }\n    const sessionHandle = session[0];\n    const profileFileName = wasm2._OrtEndProfiling(sessionHandle);\n    if (profileFileName === 0) {\n      checkLastError("Can\'t get an profile file name.");\n    }\n    wasm2._OrtFree(profileFileName);\n  };\n  var extractTransferableBuffers = (tensors) => {\n    const buffers = [];\n    for (const tensor of tensors) {\n      const data = tensor[2];\n      if (!Array.isArray(data) && "buffer" in data) {\n        buffers.push(data.buffer);\n      }\n    }\n    return buffers;\n  };\n\n  // web/lib/wasm/proxy-worker/main.ts\n  self.onmessage = (ev) => {\n    switch (ev.data.type) {\n      case "init-wasm":\n        try {\n          initializeWebAssembly(ev.data.in).then(\n            () => postMessage({ type: "init-wasm" }),\n            (err) => postMessage({ type: "init-wasm", err })\n          );\n        } catch (err) {\n          postMessage({ type: "init-wasm", err });\n        }\n        break;\n      case "init-ort":\n        try {\n          initRuntime(ev.data.in).then(() => postMessage({ type: "init-ort" }), (err) => postMessage({\n            type: "init-ort",\n            err\n          }));\n        } catch (err) {\n          postMessage({ type: "init-ort", err });\n        }\n        break;\n      case "create_allocate":\n        try {\n          const { model } = ev.data.in;\n          const modeldata = createSessionAllocate(model);\n          postMessage({ type: "create_allocate", out: modeldata });\n        } catch (err) {\n          postMessage({ type: "create_allocate", err });\n        }\n        break;\n      case "create_finalize":\n        try {\n          const { modeldata, options } = ev.data.in;\n          const sessionMetadata = createSessionFinalize(modeldata, options);\n          postMessage({ type: "create_finalize", out: sessionMetadata });\n        } catch (err) {\n          postMessage({ type: "create_finalize", err });\n        }\n        break;\n      case "create":\n        try {\n          const { model, options } = ev.data.in;\n          const sessionMetadata = createSession(model, options);\n          postMessage({ type: "create", out: sessionMetadata });\n        } catch (err) {\n          postMessage({ type: "create", err });\n        }\n        break;\n      case "release":\n        try {\n          const handler = ev.data.in;\n          releaseSession(handler);\n          postMessage({ type: "release" });\n        } catch (err) {\n          postMessage({ type: "release", err });\n        }\n        break;\n      case "run":\n        try {\n          const { sessionId, inputIndices, inputs, outputIndices, options } = ev.data.in;\n          run(sessionId, inputIndices, inputs, outputIndices, options).then(\n            (outputs) => {\n              postMessage({ type: "run", out: outputs }, extractTransferableBuffers(outputs));\n            },\n            (err) => {\n              postMessage({ type: "run", err });\n            }\n          );\n        } catch (err) {\n          postMessage({ type: "run", err });\n        }\n        break;\n      case "end-profiling":\n        try {\n          const handler = ev.data.in;\n          endProfiling(handler);\n          postMessage({ type: "end-profiling" });\n        } catch (err) {\n          postMessage({ type: "end-profiling", err });\n        }\n        break;\n      case "is-ort-env-initialized":\n        try {\n          const ortEnvInitialized2 = isOrtEnvInitialized();\n          postMessage({ type: "is-ort-env-initialized", out: ortEnvInitialized2 });\n        } catch (err) {\n          postMessage({ type: "is-ort-env-initialized", err });\n        }\n        break;\n      default:\n    }\n  };\n})();\n//# sourceMappingURL=data:application/json;base64,\n';
    }
  });

  // web/lib/wasm/proxy-wrapper.ts
  var isProxy, proxyWorker, initializing2, initialized2, aborted2, initWasmCallbacks, initOrtCallbacks, createSessionAllocateCallbacks, createSessionFinalizeCallbacks, createSessionCallbacks, releaseSessionCallbacks, runCallbacks, endProfilingCallbacks, isOrtEnvInitializedCallbacks, ensureWorker, onProxyWorkerMessage, scriptSrc, initializeWebAssemblyInstance, initializeRuntime, createSessionAllocate2, createSessionFinalize2, createSession2, releaseSession2, run2, endProfiling2, isOrtEnvInitialized2;
  var init_proxy_wrapper = __esm({
    "web/lib/wasm/proxy-wrapper.ts"() {
      "use strict";
      init_esm();
      init_wasm_core_impl();
      init_wasm_factory();
      isProxy = () => !!env2.wasm.proxy && typeof document !== "undefined";
      initializing2 = false;
      initialized2 = false;
      aborted2 = false;
      createSessionAllocateCallbacks = [];
      createSessionFinalizeCallbacks = [];
      createSessionCallbacks = [];
      releaseSessionCallbacks = [];
      runCallbacks = [];
      endProfilingCallbacks = [];
      isOrtEnvInitializedCallbacks = [];
      ensureWorker = () => {
        if (initializing2 || !initialized2 || aborted2 || !proxyWorker) {
          throw new Error("worker not ready");
        }
      };
      onProxyWorkerMessage = (ev) => {
        switch (ev.data.type) {
          case "init-wasm":
            initializing2 = false;
            if (ev.data.err) {
              aborted2 = true;
              initWasmCallbacks[1](ev.data.err);
            } else {
              initialized2 = true;
              initWasmCallbacks[0]();
            }
            break;
          case "init-ort":
            if (ev.data.err) {
              initOrtCallbacks[1](ev.data.err);
            } else {
              initOrtCallbacks[0]();
            }
            break;
          case "create_allocate":
            if (ev.data.err) {
              createSessionAllocateCallbacks.shift()[1](ev.data.err);
            } else {
              createSessionAllocateCallbacks.shift()[0](ev.data.out);
            }
            break;
          case "create_finalize":
            if (ev.data.err) {
              createSessionFinalizeCallbacks.shift()[1](ev.data.err);
            } else {
              createSessionFinalizeCallbacks.shift()[0](ev.data.out);
            }
            break;
          case "create":
            if (ev.data.err) {
              createSessionCallbacks.shift()[1](ev.data.err);
            } else {
              createSessionCallbacks.shift()[0](ev.data.out);
            }
            break;
          case "release":
            if (ev.data.err) {
              releaseSessionCallbacks.shift()[1](ev.data.err);
            } else {
              releaseSessionCallbacks.shift()[0]();
            }
            break;
          case "run":
            if (ev.data.err) {
              runCallbacks.shift()[1](ev.data.err);
            } else {
              runCallbacks.shift()[0](ev.data.out);
            }
            break;
          case "end-profiling":
            if (ev.data.err) {
              endProfilingCallbacks.shift()[1](ev.data.err);
            } else {
              endProfilingCallbacks.shift()[0]();
            }
            break;
          case "is-ort-env-initialized":
            if (ev.data.err) {
              isOrtEnvInitializedCallbacks.shift()[1](ev.data.err);
            } else {
              isOrtEnvInitializedCallbacks.shift()[0](ev.data.out);
            }
            break;
          default:
        }
      };
      scriptSrc = typeof document !== "undefined" ? document?.currentScript?.src : void 0;
      initializeWebAssemblyInstance = async () => {
        if (isProxy()) {
          if (initialized2) {
            return;
          }
          if (initializing2) {
            throw new Error("multiple calls to 'initWasm()' detected.");
          }
          if (aborted2) {
            throw new Error("previous call to 'initWasm()' failed.");
          }
          initializing2 = true;
          if (env2.wasm.wasmPaths === void 0) {
            if (scriptSrc && scriptSrc.indexOf("blob:") !== 0) {
              env2.wasm.wasmPaths = scriptSrc.substr(0, +scriptSrc.lastIndexOf("/") + 1);
            }
          }
          return new Promise((resolve, reject) => {
            proxyWorker?.terminate();
            const workerUrl = URL.createObjectURL(new Blob(
              [
                // This require() function is handled by esbuild plugin to load file content as string.
                // eslint-disable-next-line @typescript-eslint/no-require-imports
                require_main()
              ],
              { type: "text/javascript" }
            ));
            proxyWorker = new Worker(workerUrl, { name: "ort-wasm-proxy-worker" });
            proxyWorker.onerror = (ev) => reject(ev);
            proxyWorker.onmessage = onProxyWorkerMessage;
            URL.revokeObjectURL(workerUrl);
            initWasmCallbacks = [resolve, reject];
            const message = { type: "init-wasm", in: env2.wasm };
            proxyWorker.postMessage(message);
          });
        } else {
          return initializeWebAssembly(env2.wasm);
        }
      };
      initializeRuntime = async (env3) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            initOrtCallbacks = [resolve, reject];
            const message = { type: "init-ort", in: env3 };
            proxyWorker.postMessage(message);
          });
        } else {
          await initRuntime(env3);
        }
      };
      createSessionAllocate2 = async (model) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            createSessionAllocateCallbacks.push([resolve, reject]);
            const message = { type: "create_allocate", in: { model } };
            proxyWorker.postMessage(message, [model.buffer]);
          });
        } else {
          return createSessionAllocate(model);
        }
      };
      createSessionFinalize2 = async (modeldata, options) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            createSessionFinalizeCallbacks.push([resolve, reject]);
            const message = { type: "create_finalize", in: { modeldata, options } };
            proxyWorker.postMessage(message);
          });
        } else {
          return createSessionFinalize(modeldata, options);
        }
      };
      createSession2 = async (model, options) => {
        if (isProxy()) {
          if (options?.preferredOutputLocation) {
            throw new Error('session option "preferredOutputLocation" is not supported for proxy.');
          }
          ensureWorker();
          return new Promise((resolve, reject) => {
            createSessionCallbacks.push([resolve, reject]);
            const message = { type: "create", in: { model, options } };
            proxyWorker.postMessage(message, [model.buffer]);
          });
        } else {
          return createSession(model, options);
        }
      };
      releaseSession2 = async (sessionId) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            releaseSessionCallbacks.push([resolve, reject]);
            const message = { type: "release", in: sessionId };
            proxyWorker.postMessage(message);
          });
        } else {
          releaseSession(sessionId);
        }
      };
      run2 = async (sessionId, inputIndices, inputs, outputIndices, outputs, options) => {
        if (isProxy()) {
          if (inputs.some((t) => t[3] !== "cpu")) {
            throw new Error("input tensor on GPU is not supported for proxy.");
          }
          if (outputs.some((t) => t)) {
            throw new Error("pre-allocated output tensor is not supported for proxy.");
          }
          ensureWorker();
          return new Promise((resolve, reject) => {
            runCallbacks.push([resolve, reject]);
            const serializableInputs = inputs;
            const message = { type: "run", in: { sessionId, inputIndices, inputs: serializableInputs, outputIndices, options } };
            proxyWorker.postMessage(message, extractTransferableBuffers(serializableInputs));
          });
        } else {
          return run(sessionId, inputIndices, inputs, outputIndices, outputs, options);
        }
      };
      endProfiling2 = async (sessionId) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            endProfilingCallbacks.push([resolve, reject]);
            const message = { type: "end-profiling", in: sessionId };
            proxyWorker.postMessage(message);
          });
        } else {
          endProfiling(sessionId);
        }
      };
      isOrtEnvInitialized2 = async () => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            isOrtEnvInitializedCallbacks.push([resolve, reject]);
            const message = { type: "is-ort-env-initialized" };
            proxyWorker.postMessage(message);
          });
        } else {
          return isOrtEnvInitialized();
        }
      };
    }
  });

  // nodejs-ignore:node:fs/promises
  var readFile2;
  var init_promises = __esm({
    "nodejs-ignore:node:fs/promises"() {
      readFile2 = void 0;
    }
  });

  // web/lib/wasm/session-handler-inference.ts
  var runtimeInitializationPromise, encodeTensorMetadata, decodeTensorMetadata, OnnxruntimeWebAssemblySessionHandler;
  var init_session_handler_inference = __esm({
    "web/lib/wasm/session-handler-inference.ts"() {
      "use strict";
      init_promises();
      init_esm();
      init_proxy_wrapper();
      init_wasm_common();
      encodeTensorMetadata = (tensor, getName) => {
        switch (tensor.location) {
          case "cpu":
            return [tensor.type, tensor.dims, tensor.data, "cpu"];
          case "gpu-buffer":
            return [tensor.type, tensor.dims, { gpuBuffer: tensor.gpuBuffer }, "gpu-buffer"];
          default:
            throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);
        }
      };
      decodeTensorMetadata = (tensor) => {
        switch (tensor[3]) {
          case "cpu":
            return new Tensor2(tensor[0], tensor[2], tensor[1]);
          case "gpu-buffer": {
            const dataType = tensor[0];
            if (!isGpuBufferSupportedType(dataType)) {
              throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);
            }
            const { gpuBuffer, download, dispose } = tensor[2];
            return Tensor2.fromGpuBuffer(gpuBuffer, { dataType, dims: tensor[1], download, dispose });
          }
          default:
            throw new Error(`invalid data location: ${tensor[3]}`);
        }
      };
      OnnxruntimeWebAssemblySessionHandler = class {
        async createSessionAllocate(path) {
          const response = await fetch(path);
          if (response.status !== 200) {
            throw new Error(`failed to load model: ${path}`);
          }
          const arrayBuffer = await response.arrayBuffer();
          return createSessionAllocate2(new Uint8Array(arrayBuffer));
        }
        async loadModel(pathOrBuffer, options) {
          if (!await isOrtEnvInitialized2()) {
            if (!runtimeInitializationPromise) {
              runtimeInitializationPromise = initializeRuntime(env2);
            }
            await runtimeInitializationPromise;
            runtimeInitializationPromise = void 0;
          }
          if (typeof pathOrBuffer === "string") {
            if (typeof process !== "undefined" && process.versions && process.versions.node) {
              const model = await readFile2(pathOrBuffer);
              [this.sessionId, this.inputNames, this.outputNames] = await createSession2(model, options);
            } else {
              const modelData = await this.createSessionAllocate(pathOrBuffer);
              [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize2(modelData, options);
            }
          } else {
            [this.sessionId, this.inputNames, this.outputNames] = await createSession2(pathOrBuffer, options);
          }
        }
        async dispose() {
          return releaseSession2(this.sessionId);
        }
        async run(feeds, fetches, options) {
          const inputArray = [];
          const inputIndices = [];
          Object.entries(feeds).forEach((kvp) => {
            const name = kvp[0];
            const tensor = kvp[1];
            const index = this.inputNames.indexOf(name);
            if (index === -1) {
              throw new Error(`invalid input '${name}'`);
            }
            inputArray.push(tensor);
            inputIndices.push(index);
          });
          const outputArray = [];
          const outputIndices = [];
          Object.entries(fetches).forEach((kvp) => {
            const name = kvp[0];
            const tensor = kvp[1];
            const index = this.outputNames.indexOf(name);
            if (index === -1) {
              throw new Error(`invalid output '${name}'`);
            }
            outputArray.push(tensor);
            outputIndices.push(index);
          });
          const inputs = inputArray.map((t, i) => encodeTensorMetadata(t, () => `input "${this.inputNames[inputIndices[i]]}"`));
          const outputs = outputArray.map(
            (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.outputNames[outputIndices[i]]}"`) : null
          );
          const results = await run2(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
          const resultMap = {};
          for (let i = 0; i < results.length; i++) {
            resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);
          }
          return resultMap;
        }
        startProfiling() {
        }
        endProfiling() {
          void endProfiling2(this.sessionId);
        }
      };
    }
  });

  // web/lib/backend-wasm.ts
  var initializeFlags, OnnxruntimeWebAssemblyBackend;
  var init_backend_wasm = __esm({
    "web/lib/backend-wasm.ts"() {
      "use strict";
      init_node_os();
      init_esm();
      init_proxy_wrapper();
      init_session_handler_inference();
      initializeFlags = () => {
        if (typeof env2.wasm.initTimeout !== "number" || env2.wasm.initTimeout < 0) {
          env2.wasm.initTimeout = 0;
        }
        if (typeof env2.wasm.simd !== "boolean") {
          env2.wasm.simd = true;
        }
        if (typeof env2.wasm.proxy !== "boolean") {
          env2.wasm.proxy = false;
        }
        if (typeof env2.wasm.numThreads !== "number" || !Number.isInteger(env2.wasm.numThreads) || env2.wasm.numThreads <= 0) {
          const numCpuLogicalCores = typeof navigator === "undefined" ? cpus().length : navigator.hardwareConcurrency;
          env2.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));
        }
      };
      OnnxruntimeWebAssemblyBackend = class {
        async init() {
          initializeFlags();
          await initializeWebAssemblyInstance();
        }
        async createInferenceSessionHandler(pathOrBuffer, options) {
          const handler = new OnnxruntimeWebAssemblySessionHandler();
          await handler.loadModel(pathOrBuffer, options);
          return Promise.resolve(handler);
        }
      };
    }
  });

  // web/lib/backend-wasm-inference.ts
  var backend_wasm_inference_exports = {};
  __export(backend_wasm_inference_exports, {
    wasmBackend: () => wasmBackend
  });
  var wasmBackend;
  var init_backend_wasm_inference = __esm({
    "web/lib/backend-wasm-inference.ts"() {
      "use strict";
      init_backend_wasm();
      wasmBackend = new OnnxruntimeWebAssemblyBackend();
    }
  });

  // web/lib/index.ts
  var lib_exports = {};
  __export(lib_exports, {
    InferenceSession: () => InferenceSession2,
    Tensor: () => Tensor2,
    TrainingSession: () => TrainingSession2,
    default: () => lib_default,
    env: () => env2,
    registerBackend: () => registerBackend
  });
  init_esm();
  init_esm();
  init_esm();

  // web/lib/version.ts
  var version2 = "1.17.0";

  // web/lib/index.ts
  var lib_default = esm_exports;
  if (false) {
    const onnxjsBackend = null.onnxjsBackend;
    registerBackend("webgl", onnxjsBackend, -10);
  }
  if (true) {
    const wasmBackend2 = true ? (init_backend_wasm_inference(), __toCommonJS(backend_wasm_inference_exports)).wasmBackend : null.wasmBackend;
    if (false) {
      registerBackend("webgpu", wasmBackend2, 5);
    }
    registerBackend("cpu", wasmBackend2, 10);
    registerBackend("wasm", wasmBackend2, 10);
    if (true) {
      registerBackend("xnnpack", wasmBackend2, 9);
      registerBackend("webnn", wasmBackend2, 9);
    }
  }
  Object.defineProperty(env2.versions, "web", { value: version2, enumerable: true });
  return __toCommonJS(lib_exports);
})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvYmFja2VuZC1pbXBsLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9vbm54cnVudGltZS1jb21tb24vbGliL2JhY2tlbmQudHMiLCAiLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvdmVyc2lvbi50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi9lbnYtaW1wbC50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi9lbnYudHMiLCAiLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvdGVuc29yLWNvbnZlcnNpb24taW1wbC50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90ZW5zb3ItZmFjdG9yeS1pbXBsLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9vbm54cnVudGltZS1jb21tb24vbGliL3RlbnNvci1pbXBsLXR5cGUtbWFwcGluZy50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90ZW5zb3ItdXRpbHMtaW1wbC50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90ZW5zb3ItaW1wbC50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90ZW5zb3IudHMiLCAiLi4vbm9kZV9tb2R1bGVzL29ubnhydW50aW1lLWNvbW1vbi9saWIvaW5mZXJlbmNlLXNlc3Npb24taW1wbC50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi9pbmZlcmVuY2Utc2Vzc2lvbi50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi9vbm54LXZhbHVlLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9vbm54cnVudGltZS1jb21tb24vbGliL3RyYWluaW5nLXNlc3Npb24taW1wbC50cyIsICIuLi9ub2RlX21vZHVsZXMvb25ueHJ1bnRpbWUtY29tbW9uL2xpYi90cmFpbmluZy1zZXNzaW9uLnRzIiwgIi4uL25vZGVfbW9kdWxlcy9vbm54cnVudGltZS1jb21tb24vbGliL2luZGV4LnRzIiwgIm5vZGVqcy1pZ25vcmU6bm9kZTpvcyIsICJub2RlanMtaWdub3JlOm5vZGU6cGF0aCIsICJub2RlanMtaWdub3JlOmZzIiwgIm5vZGVqcy1pZ25vcmU6cGF0aCIsICIuLi9saWIvd2FzbS9iaW5kaW5nL29ydC13YXNtLmpzIiwgIm5vZGVqcy1pZ25vcmU6d29ya2VyX3RocmVhZHMiLCAibm9kZWpzLWlnbm9yZTpwZXJmX2hvb2tzIiwgIm5vZGVqcy1pZ25vcmU6b3MiLCAiLi4vbGliL3dhc20vYmluZGluZy9vcnQtd2FzbS10aHJlYWRlZC5qcyIsICIuLi9saWIvd2FzbS9iaW5kaW5nL29ydC13YXNtLXRocmVhZGVkLndvcmtlci5qcyIsICIuLi9saWIvd2FzbS93YXNtLWZhY3RvcnkudHMiLCAiLi4vbGliL3dhc20vd2FzbS11dGlscy50cyIsICIuLi9saWIvd2FzbS9ydW4tb3B0aW9ucy50cyIsICIuLi9saWIvd2FzbS9zZXNzaW9uLW9wdGlvbnMudHMiLCAiLi4vbGliL3dhc20vd2FzbS1jb21tb24udHMiLCAiLi4vbGliL3dhc20vd2FzbS1jb3JlLWltcGwudHMiLCAicHJveHktd29ya2VyOi4vcHJveHktd29ya2VyL21haW4iLCAiLi4vbGliL3dhc20vcHJveHktd3JhcHBlci50cyIsICJub2RlanMtaWdub3JlOm5vZGU6ZnMvcHJvbWlzZXMiLCAiLi4vbGliL3dhc20vc2Vzc2lvbi1oYW5kbGVyLWluZmVyZW5jZS50cyIsICIuLi9saWIvYmFja2VuZC13YXNtLnRzIiwgIi4uL2xpYi9iYWNrZW5kLXdhc20taW5mZXJlbmNlLnRzIiwgIi4uL2xpYi9pbmRleC50cyIsICIuLi9saWIvdmVyc2lvbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7QmFja2VuZH0gZnJvbSAnLi9iYWNrZW5kLmpzJztcblxuaW50ZXJmYWNlIEJhY2tlbmRJbmZvIHtcbiAgYmFja2VuZDogQmFja2VuZDtcbiAgcHJpb3JpdHk6IG51bWJlcjtcblxuICBpbml0UHJvbWlzZT86IFByb21pc2U8dm9pZD47XG4gIGluaXRpYWxpemVkPzogYm9vbGVhbjtcbiAgYWJvcnRlZD86IGJvb2xlYW47XG59XG5cbmNvbnN0IGJhY2tlbmRzOiBNYXA8c3RyaW5nLCBCYWNrZW5kSW5mbz4gPSBuZXcgTWFwKCk7XG5jb25zdCBiYWNrZW5kc1NvcnRlZEJ5UHJpb3JpdHk6IHN0cmluZ1tdID0gW107XG5cbi8qKlxuICogUmVnaXN0ZXIgYSBiYWNrZW5kLlxuICpcbiAqIEBwYXJhbSBuYW1lIC0gdGhlIG5hbWUgYXMgYSBrZXkgdG8gbG9va3VwIGFzIGFuIGV4ZWN1dGlvbiBwcm92aWRlci5cbiAqIEBwYXJhbSBiYWNrZW5kIC0gdGhlIGJhY2tlbmQgb2JqZWN0LlxuICogQHBhcmFtIHByaW9yaXR5IC0gYW4gaW50ZWdlciBpbmRpY2F0aW5nIHRoZSBwcmlvcml0eSBvZiB0aGUgYmFja2VuZC4gSGlnaGVyIG51bWJlciBtZWFucyBoaWdoZXIgcHJpb3JpdHkuIGlmIHByaW9yaXR5XG4gKiA8IDAsIGl0IHdpbGwgYmUgY29uc2lkZXJlZCBhcyBhICdiZXRhJyB2ZXJzaW9uIGFuZCB3aWxsIG5vdCBiZSB1c2VkIGFzIGEgZmFsbGJhY2sgYmFja2VuZCBieSBkZWZhdWx0LlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyQmFja2VuZCA9IChuYW1lOiBzdHJpbmcsIGJhY2tlbmQ6IEJhY2tlbmQsIHByaW9yaXR5OiBudW1iZXIpOiB2b2lkID0+IHtcbiAgaWYgKGJhY2tlbmQgJiYgdHlwZW9mIGJhY2tlbmQuaW5pdCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYmFja2VuZC5jcmVhdGVJbmZlcmVuY2VTZXNzaW9uSGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnN0IGN1cnJlbnRCYWNrZW5kID0gYmFja2VuZHMuZ2V0KG5hbWUpO1xuICAgIGlmIChjdXJyZW50QmFja2VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBiYWNrZW5kcy5zZXQobmFtZSwge2JhY2tlbmQsIHByaW9yaXR5fSk7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50QmFja2VuZC5wcmlvcml0eSA+IHByaW9yaXR5KSB7XG4gICAgICAvLyBzYW1lIG5hbWUgaXMgYWxyZWFkeSByZWdpc3RlcmVkIHdpdGggYSBoaWdoZXIgcHJpb3JpdHkuIHNraXAgcmVnaXN0ZXJhdGlvbi5cbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRCYWNrZW5kLnByaW9yaXR5ID09PSBwcmlvcml0eSkge1xuICAgICAgaWYgKGN1cnJlbnRCYWNrZW5kLmJhY2tlbmQgIT09IGJhY2tlbmQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgcmVnaXN0ZXIgYmFja2VuZCBcIiR7bmFtZX1cIiB1c2luZyBwcmlvcml0eSAke3ByaW9yaXR5fWApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmlvcml0eSA+PSAwKSB7XG4gICAgICBjb25zdCBpID0gYmFja2VuZHNTb3J0ZWRCeVByaW9yaXR5LmluZGV4T2YobmFtZSk7XG4gICAgICBpZiAoaSAhPT0gLTEpIHtcbiAgICAgICAgYmFja2VuZHNTb3J0ZWRCeVByaW9yaXR5LnNwbGljZShpLCAxKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYWNrZW5kc1NvcnRlZEJ5UHJpb3JpdHkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGJhY2tlbmRzLmdldChiYWNrZW5kc1NvcnRlZEJ5UHJpb3JpdHlbaV0pIS5wcmlvcml0eSA8PSBwcmlvcml0eSkge1xuICAgICAgICAgIGJhY2tlbmRzU29ydGVkQnlQcmlvcml0eS5zcGxpY2UoaSwgMCwgbmFtZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiYWNrZW5kc1NvcnRlZEJ5UHJpb3JpdHkucHVzaChuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignbm90IGEgdmFsaWQgYmFja2VuZCcpO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlIGJhY2tlbmQgYnkgc3BlY2lmaWVkIGhpbnRzLlxuICpcbiAqIEBwYXJhbSBiYWNrZW5kSGludHMgLSBhIGxpc3Qgb2YgZXhlY3V0aW9uIHByb3ZpZGVyIG5hbWVzIHRvIGxvb2t1cC4gSWYgb21pdHRlZCB1c2UgcmVnaXN0ZXJlZCBiYWNrZW5kcyBhcyBsaXN0LlxuICogQHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGJhY2tlbmQuXG4gKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgY29uc3QgcmVzb2x2ZUJhY2tlbmQgPSBhc3luYyhiYWNrZW5kSGludHM6IHJlYWRvbmx5IHN0cmluZ1tdKTogUHJvbWlzZTxCYWNrZW5kPiA9PiB7XG4gIGNvbnN0IGJhY2tlbmROYW1lcyA9IGJhY2tlbmRIaW50cy5sZW5ndGggPT09IDAgPyBiYWNrZW5kc1NvcnRlZEJ5UHJpb3JpdHkgOiBiYWNrZW5kSGludHM7XG4gIGNvbnN0IGVycm9ycyA9IFtdO1xuICBmb3IgKGNvbnN0IGJhY2tlbmROYW1lIG9mIGJhY2tlbmROYW1lcykge1xuICAgIGNvbnN0IGJhY2tlbmRJbmZvID0gYmFja2VuZHMuZ2V0KGJhY2tlbmROYW1lKTtcbiAgICBpZiAoYmFja2VuZEluZm8pIHtcbiAgICAgIGlmIChiYWNrZW5kSW5mby5pbml0aWFsaXplZCkge1xuICAgICAgICByZXR1cm4gYmFja2VuZEluZm8uYmFja2VuZDtcbiAgICAgIH0gZWxzZSBpZiAoYmFja2VuZEluZm8uYWJvcnRlZCkge1xuICAgICAgICBjb250aW51ZTsgIC8vIGN1cnJlbnQgYmFja2VuZCBpcyB1bmF2YWlsYWJsZTsgdHJ5IG5leHRcbiAgICAgIH1cblxuICAgICAgY29uc3QgaXNJbml0aWFsaXppbmcgPSAhIWJhY2tlbmRJbmZvLmluaXRQcm9taXNlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFpc0luaXRpYWxpemluZykge1xuICAgICAgICAgIGJhY2tlbmRJbmZvLmluaXRQcm9taXNlID0gYmFja2VuZEluZm8uYmFja2VuZC5pbml0KCk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgYmFja2VuZEluZm8uaW5pdFByb21pc2U7XG4gICAgICAgIGJhY2tlbmRJbmZvLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGJhY2tlbmRJbmZvLmJhY2tlbmQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmICghaXNJbml0aWFsaXppbmcpIHtcbiAgICAgICAgICBlcnJvcnMucHVzaCh7bmFtZTogYmFja2VuZE5hbWUsIGVycjogZX0pO1xuICAgICAgICB9XG4gICAgICAgIGJhY2tlbmRJbmZvLmFib3J0ZWQgPSB0cnVlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZGVsZXRlIGJhY2tlbmRJbmZvLmluaXRQcm9taXNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihgbm8gYXZhaWxhYmxlIGJhY2tlbmQgZm91bmQuIEVSUjogJHtlcnJvcnMubWFwKGUgPT4gYFske2UubmFtZX1dICR7ZS5lcnJ9YCkuam9pbignLCAnKX1gKTtcbn07XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7SW5mZXJlbmNlU2Vzc2lvbn0gZnJvbSAnLi9pbmZlcmVuY2Utc2Vzc2lvbi5qcyc7XG5pbXBvcnQge09ubnhWYWx1ZX0gZnJvbSAnLi9vbm54LXZhbHVlLmpzJztcbmltcG9ydCB7VHJhaW5pbmdTZXNzaW9ufSBmcm9tICcuL3RyYWluaW5nLXNlc3Npb24uanMnO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIFNlc3Npb25IYW5kbGVyIHtcbiAgdHlwZSBGZWVkc1R5cGUgPSB7W25hbWU6IHN0cmluZ106IE9ubnhWYWx1ZX07XG4gIHR5cGUgRmV0Y2hlc1R5cGUgPSB7W25hbWU6IHN0cmluZ106IE9ubnhWYWx1ZSB8IG51bGx9O1xuICB0eXBlIFJldHVyblR5cGUgPSB7W25hbWU6IHN0cmluZ106IE9ubnhWYWx1ZX07XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBzaGFyZWQgU2Vzc2lvbkhhbmRsZXIgZnVuY3Rpb25hbGl0eVxuICpcbiAqIEBpZ25vcmVcbiAqL1xuaW50ZXJmYWNlIFNlc3Npb25IYW5kbGVyIHtcbiAgZGlzcG9zZSgpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIHJlYWRvbmx5IGlucHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xuICByZWFkb25seSBvdXRwdXROYW1lczogcmVhZG9ubHkgc3RyaW5nW107XG59XG5cbi8qKlxuICogUmVwcmVzZW50IGEgaGFuZGxlciBpbnN0YW5jZSBvZiBhbiBpbmZlcmVuY2Ugc2Vzc2lvbi5cbiAqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXIgZXh0ZW5kcyBTZXNzaW9uSGFuZGxlciB7XG4gIHN0YXJ0UHJvZmlsaW5nKCk6IHZvaWQ7XG4gIGVuZFByb2ZpbGluZygpOiB2b2lkO1xuXG4gIHJ1bihmZWVkczogU2Vzc2lvbkhhbmRsZXIuRmVlZHNUeXBlLCBmZXRjaGVzOiBTZXNzaW9uSGFuZGxlci5GZXRjaGVzVHlwZSxcbiAgICAgIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8U2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZT47XG59XG5cbi8qKlxuICogUmVwcmVzZW50IGEgaGFuZGxlciBpbnN0YW5jZSBvZiBhIHRyYWluaW5nIGluZmVyZW5jZSBzZXNzaW9uLlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFpbmluZ1Nlc3Npb25IYW5kbGVyIGV4dGVuZHMgU2Vzc2lvbkhhbmRsZXIge1xuICBydW5UcmFpblN0ZXAoXG4gICAgICBmZWVkczogU2Vzc2lvbkhhbmRsZXIuRmVlZHNUeXBlLCBmZXRjaGVzOiBTZXNzaW9uSGFuZGxlci5GZXRjaGVzVHlwZSxcbiAgICAgIG9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8U2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZT47XG5cbiAgbG9hZFBhcmFtZXRlcnNCdWZmZXIoYXJyYXk6IFVpbnQ4QXJyYXksIHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+O1xuICBnZXRDb250aWd1b3VzUGFyYW1ldGVycyh0cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTxVaW50OEFycmF5Pjtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYSBiYWNrZW5kIHRoYXQgcHJvdmlkZXMgaW1wbGVtZW50YXRpb24gb2YgbW9kZWwgaW5mZXJlbmNpbmcuXG4gKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJhY2tlbmQge1xuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0aGUgYmFja2VuZCBhc3luY2hyb25vdXNseS4gU2hvdWxkIHRocm93IHdoZW4gZmFpbGVkLlxuICAgKi9cbiAgaW5pdCgpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIGNyZWF0ZUluZmVyZW5jZVNlc3Npb25IYW5kbGVyKHVyaU9yQnVmZmVyOiBzdHJpbmd8VWludDhBcnJheSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcj47XG5cbiAgY3JlYXRlVHJhaW5pbmdTZXNzaW9uSGFuZGxlcj9cbiAgICAgIChjaGVja3BvaW50U3RhdGVVcmlPckJ1ZmZlcjogVHJhaW5pbmdTZXNzaW9uLlVSSW9yQnVmZmVyLCB0cmFpbk1vZGVsVXJpT3JCdWZmZXI6IFRyYWluaW5nU2Vzc2lvbi5VUklvckJ1ZmZlcixcbiAgICAgICBldmFsTW9kZWxVcmlPckJ1ZmZlcjogVHJhaW5pbmdTZXNzaW9uLlVSSW9yQnVmZmVyLCBvcHRpbWl6ZXJNb2RlbFVyaU9yQnVmZmVyOiBUcmFpbmluZ1Nlc3Npb24uVVJJb3JCdWZmZXIsXG4gICAgICAgb3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8VHJhaW5pbmdTZXNzaW9uSGFuZGxlcj47XG59XG5cbmV4cG9ydCB7cmVnaXN0ZXJCYWNrZW5kfSBmcm9tICcuL2JhY2tlbmQtaW1wbC5qcyc7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbi8vIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgYnkgL2pzL3NjcmlwdHMvdXBkYXRlLXZlcnNpb24udHNcbi8vIERvIG5vdCBtb2RpZnkgZmlsZSBjb250ZW50IG1hbnVhbGx5LlxuXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9ICcxLjE3LjAnO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0Vudn0gZnJvbSAnLi9lbnYuanMnO1xuaW1wb3J0IHt2ZXJzaW9ufSBmcm9tICcuL3ZlcnNpb24uanMnO1xuXG50eXBlIExvZ0xldmVsVHlwZSA9IEVudlsnbG9nTGV2ZWwnXTtcblxubGV0IGxvZ0xldmVsVmFsdWU6IFJlcXVpcmVkPExvZ0xldmVsVHlwZT4gPSAnd2FybmluZyc7XG5cbmV4cG9ydCBjb25zdCBlbnY6IEVudiA9IHtcbiAgd2FzbToge30gYXMgRW52LldlYkFzc2VtYmx5RmxhZ3MsXG4gIHdlYmdsOiB7fSBhcyBFbnYuV2ViR0xGbGFncyxcbiAgd2ViZ3B1OiB7fSBhcyBFbnYuV2ViR3B1RmxhZ3MsXG4gIHZlcnNpb25zOiB7Y29tbW9uOiB2ZXJzaW9ufSxcblxuICBzZXQgbG9nTGV2ZWwodmFsdWU6IExvZ0xldmVsVHlwZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnIHx8IFsndmVyYm9zZScsICdpbmZvJywgJ3dhcm5pbmcnLCAnZXJyb3InLCAnZmF0YWwnXS5pbmRleE9mKHZhbHVlKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgbG9nZ2luZyBsZXZlbDogJHt2YWx1ZX1gKTtcbiAgICB9XG4gICAgbG9nTGV2ZWxWYWx1ZSA9IHZhbHVlO1xuICB9LFxuICBnZXQgbG9nTGV2ZWwoKTogUmVxdWlyZWQ8TG9nTGV2ZWxUeXBlPiB7XG4gICAgcmV0dXJuIGxvZ0xldmVsVmFsdWU7XG4gIH0sXG59O1xuXG4vLyBzZXQgcHJvcGVydHkgJ2xvZ0xldmVsJyBzbyB0aGF0IHRoZXkgY2FuIGJlIGNvcnJlY3RseSB0cmFuc2ZlcnJlZCB0byB3b3JrZXIgYnkgYHBvc3RNZXNzYWdlKClgLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGVudiwgJ2xvZ0xldmVsJywge2VudW1lcmFibGU6IHRydWV9KTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtlbnYgYXMgZW52SW1wbH0gZnJvbSAnLi9lbnYtaW1wbC5qcyc7XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBFbnYge1xuICBleHBvcnQgdHlwZSBXYXNtUHJlZml4T3JGaWxlUGF0aHMgPSBzdHJpbmd8e1xuICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuICAgICdvcnQtd2FzbS53YXNtJz86IHN0cmluZztcbiAgICAnb3J0LXdhc20tdGhyZWFkZWQud2FzbSc/OiBzdHJpbmc7XG4gICAgJ29ydC13YXNtLXNpbWQud2FzbSc/OiBzdHJpbmc7XG4gICAgJ29ydC10cmFpbmluZy13YXNtLXNpbWQud2FzbSc/OiBzdHJpbmc7XG4gICAgJ29ydC13YXNtLXNpbWQtdGhyZWFkZWQud2FzbSc/OiBzdHJpbmc7XG4gICAgLyogZXNsaW50LWVuYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbiAgfTtcbiAgZXhwb3J0IGludGVyZmFjZSBXZWJBc3NlbWJseUZsYWdzIHtcbiAgICAvKipcbiAgICAgKiBzZXQgb3IgZ2V0IG51bWJlciBvZiB0aHJlYWQocykuIElmIG9taXR0ZWQgb3Igc2V0IHRvIDAsIG51bWJlciBvZiB0aHJlYWQocykgd2lsbCBiZSBkZXRlcm1pbmVkIGJ5IHN5c3RlbS4gSWYgc2V0XG4gICAgICogdG8gMSwgbm8gd29ya2VyIHRocmVhZCB3aWxsIGJlIHNwYXduZWQuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgd2hlbiBXZWJBc3NlbWJseSBtdWx0aXRocmVhZCBmZWF0dXJlIGlzIGF2YWlsYWJsZSBpbiBjdXJyZW50IGNvbnRleHQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGAwYFxuICAgICAqL1xuICAgIG51bVRocmVhZHM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBzZXQgb3IgZ2V0IGEgYm9vbGVhbiB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gZW5hYmxlIFNJTUQuIElmIHNldCB0byBmYWxzZSwgU0lNRCB3aWxsIGJlIGZvcmNlbHkgZGlzYWJsZWQuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgd2hlbiBXZWJBc3NlbWJseSBTSU1EIGZlYXR1cmUgaXMgYXZhaWxhYmxlIGluIGN1cnJlbnQgY29udGV4dC5cbiAgICAgKlxuICAgICAqIEBkZWZhdWx0VmFsdWUgYHRydWVgXG4gICAgICovXG4gICAgc2ltZD86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBTZXQgb3IgZ2V0IGEgbnVtYmVyIHNwZWNpZnlpbmcgdGhlIHRpbWVvdXQgZm9yIGluaXRpYWxpemF0aW9uIG9mIFdlYkFzc2VtYmx5IGJhY2tlbmQsIGluIG1pbGxpc2Vjb25kcy4gQSB6ZXJvXG4gICAgICogdmFsdWUgaW5kaWNhdGVzIG5vIHRpbWVvdXQgaXMgc2V0LlxuICAgICAqXG4gICAgICogQGRlZmF1bHRWYWx1ZSBgMGBcbiAgICAgKi9cbiAgICBpbml0VGltZW91dD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFNldCBhIGN1c3RvbSBVUkwgcHJlZml4IHRvIHRoZSAud2FzbSBmaWxlcyBvciBhIHNldCBvZiBvdmVycmlkZXMgZm9yIGVhY2ggLndhc20gZmlsZS4gVGhlIG92ZXJyaWRlIHBhdGggc2hvdWxkIGJlXG4gICAgICogYW4gYWJzb2x1dGUgcGF0aC5cbiAgICAgKi9cbiAgICB3YXNtUGF0aHM/OiBXYXNtUHJlZml4T3JGaWxlUGF0aHM7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgb3IgZ2V0IGEgYm9vbGVhbiB2YWx1ZSBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gcHJveHkgdGhlIGV4ZWN1dGlvbiBvZiBtYWluIHRocmVhZCB0byBhIHdvcmtlciB0aHJlYWQuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBwcm94eT86IGJvb2xlYW47XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIFdlYkdMRmxhZ3Mge1xuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgdGhlIFdlYkdMIENvbnRleHQgSUQgKHdlYmdsIG9yIHdlYmdsMikuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGAnd2ViZ2wyJ2BcbiAgICAgKi9cbiAgICBjb250ZXh0SWQ/OiAnd2ViZ2wnfCd3ZWJnbDInO1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgV2ViR0wgcmVuZGVyaW5nIGNvbnRleHQuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY29udGV4dDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgdGhlIG1heGltdW0gYmF0Y2ggc2l6ZSBmb3IgbWF0bXVsLiAwIG1lYW5zIHRvIGRpc2FibGUgYmF0Y2hpbmcuXG4gICAgICpcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqL1xuICAgIG1hdG11bE1heEJhdGNoU2l6ZT86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBTZXQgb3IgZ2V0IHRoZSB0ZXh0dXJlIGNhY2hlIG1vZGUuXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGAnZnVsbCdgXG4gICAgICovXG4gICAgdGV4dHVyZUNhY2hlTW9kZT86ICdpbml0aWFsaXplck9ubHknfCdmdWxsJztcbiAgICAvKipcbiAgICAgKiBTZXQgb3IgZ2V0IHRoZSBwYWNrZWQgdGV4dHVyZSBtb2RlXG4gICAgICpcbiAgICAgKiBAZGVmYXVsdFZhbHVlIGBmYWxzZWBcbiAgICAgKi9cbiAgICBwYWNrPzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBTZXQgb3IgZ2V0IHdoZXRoZXIgZW5hYmxlIGFzeW5jIGRvd25sb2FkLlxuICAgICAqXG4gICAgICogQGRlZmF1bHRWYWx1ZSBgZmFsc2VgXG4gICAgICovXG4gICAgYXN5bmM/OiBib29sZWFuO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBXZWJHcHVGbGFncyB7XG4gICAgLyoqXG4gICAgICogU2V0IG9yIGdldCB0aGUgcHJvZmlsaW5nIG1vZGUuXG4gICAgICovXG4gICAgcHJvZmlsaW5nTW9kZT86ICdvZmYnfCdkZWZhdWx0JztcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRldmljZSBmb3IgV2ViR1BVLlxuICAgICAqXG4gICAgICogV2hlbiB1c2Ugd2l0aCBUeXBlU2NyaXB0LCB0aGUgdHlwZSBvZiB0aGlzIHByb3BlcnR5IGlzIGBHUFVEZXZpY2VgIGRlZmluZWQgaW4gXCJAd2ViZ3B1L3R5cGVzXCIuXG4gICAgICogVXNlIGBjb25zdCBkZXZpY2UgPSBlbnYud2ViZ3B1LmRldmljZSBhcyBHUFVEZXZpY2U7YCBpbiBUeXBlU2NyaXB0IHRvIGFjY2VzcyB0aGlzIHByb3BlcnR5IHdpdGggY29ycmVjdCB0eXBlLlxuICAgICAqXG4gICAgICogc2VlIGNvbW1lbnRzIG9uIHtAbGluayBHcHVCdWZmZXJUeXBlfSBmb3IgbW9yZSBkZXRhaWxzIGFib3V0IHdoeSBub3QgdXNlIHR5cGVzIGRlZmluZWQgaW4gXCJAd2ViZ3B1L3R5cGVzXCIuXG4gICAgICovXG4gICAgcmVhZG9ubHkgZGV2aWNlOiB1bmtub3duO1xuICAgIC8qKlxuICAgICAqIFNldCBvciBnZXQgd2hldGhlciB2YWxpZGF0ZSBpbnB1dCBjb250ZW50LlxuICAgICAqXG4gICAgICogQGRlZmF1bHRWYWx1ZSBgZmFsc2VgXG4gICAgICovXG4gICAgdmFsaWRhdGVJbnB1dENvbnRlbnQ/OiBib29sZWFuO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW52IHtcbiAgLyoqXG4gICAqIHNldCB0aGUgc2V2ZXJpdHkgbGV2ZWwgZm9yIGxvZ2dpbmcuXG4gICAqXG4gICAqIEBkZWZhdWx0VmFsdWUgYCd3YXJuaW5nJ2BcbiAgICovXG4gIGxvZ0xldmVsPzogJ3ZlcmJvc2UnfCdpbmZvJ3wnd2FybmluZyd8J2Vycm9yJ3wnZmF0YWwnO1xuICAvKipcbiAgICogSW5kaWNhdGUgd2hldGhlciBydW4gaW4gZGVidWcgbW9kZS5cbiAgICpcbiAgICogQGRlZmF1bHRWYWx1ZSBgZmFsc2VgXG4gICAqL1xuICBkZWJ1Zz86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEdldCB2ZXJzaW9uIG9mIHRoZSBjdXJyZW50IHBhY2thZ2UuXG4gICAqL1xuICByZWFkb25seSB2ZXJzaW9uczoge1xuICAgIHJlYWRvbmx5IGNvbW1vbjogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHdlYj86IHN0cmluZztcbiAgICByZWFkb25seSBub2RlPzogc3RyaW5nO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbiAgICByZWFkb25seSAncmVhY3QtbmF0aXZlJz86IHN0cmluZztcbiAgfTtcblxuICAvKipcbiAgICogUmVwcmVzZW50IGEgc2V0IG9mIGZsYWdzIGZvciBXZWJBc3NlbWJseVxuICAgKi9cbiAgcmVhZG9ubHkgd2FzbTogRW52LldlYkFzc2VtYmx5RmxhZ3M7XG5cbiAgLyoqXG4gICAqIFJlcHJlc2VudCBhIHNldCBvZiBmbGFncyBmb3IgV2ViR0xcbiAgICovXG4gIHJlYWRvbmx5IHdlYmdsOiBFbnYuV2ViR0xGbGFncztcblxuICAvKipcbiAgICogUmVwcmVzZW50IGEgc2V0IG9mIGZsYWdzIGZvciBXZWJHUFVcbiAgICovXG4gIHJlYWRvbmx5IHdlYmdwdTogRW52LldlYkdwdUZsYWdzO1xuXG4gIFtuYW1lOiBzdHJpbmddOiB1bmtub3duO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudCBhIHNldCBvZiBmbGFncyBhcyBhIGdsb2JhbCBzaW5nbGV0b24uXG4gKi9cbmV4cG9ydCBjb25zdCBlbnY6IEVudiA9IGVudkltcGw7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7VGVuc29yVG9EYXRhVXJsT3B0aW9ucywgVGVuc29yVG9JbWFnZURhdGFPcHRpb25zfSBmcm9tICcuL3RlbnNvci1jb252ZXJzaW9uLmpzJztcbmltcG9ydCB7VGVuc29yfSBmcm9tICcuL3RlbnNvci5qcyc7XG5cbi8qKlxuICogaW1wbGVtZW50YXRpb24gb2YgVGVuc29yLnRvRGF0YVVSTCgpXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JUb0RhdGFVUkwgPSAodGVuc29yOiBUZW5zb3IsIG9wdGlvbnM/OiBUZW5zb3JUb0RhdGFVcmxPcHRpb25zKTogc3RyaW5nID0+IHtcbiAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIGNhbnZhcy53aWR0aCA9IHRlbnNvci5kaW1zWzNdO1xuICBjYW52YXMuaGVpZ2h0ID0gdGVuc29yLmRpbXNbMl07XG4gIGNvbnN0IHBpeGVsczJEQ29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuXG4gIGlmIChwaXhlbHMyRENvbnRleHQgIT0gbnVsbCkge1xuICAgIC8vIERlZmF1bHQgdmFsdWVzIGZvciBoZWlnaHQgYW5kIHdpZHRoICYgZm9ybWF0XG4gICAgbGV0IHdpZHRoOiBudW1iZXI7XG4gICAgbGV0IGhlaWdodDogbnVtYmVyO1xuICAgIGlmIChvcHRpb25zPy50ZW5zb3JMYXlvdXQgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnRlbnNvckxheW91dCA9PT0gJ05IV0MnKSB7XG4gICAgICB3aWR0aCA9IHRlbnNvci5kaW1zWzJdO1xuICAgICAgaGVpZ2h0ID0gdGVuc29yLmRpbXNbM107XG4gICAgfSBlbHNlIHsgIC8vIERlZmF1bHQgbGF5b3V0IGlzIE5DV0hcbiAgICAgIHdpZHRoID0gdGVuc29yLmRpbXNbM107XG4gICAgICBoZWlnaHQgPSB0ZW5zb3IuZGltc1syXTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnB1dGZvcm1hdCA9IG9wdGlvbnM/LmZvcm1hdCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5mb3JtYXQgOiAnUkdCJztcblxuICAgIGNvbnN0IG5vcm0gPSBvcHRpb25zPy5ub3JtO1xuICAgIGxldCBub3JtTWVhbjogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl07XG4gICAgbGV0IG5vcm1CaWFzOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgICBpZiAobm9ybSA9PT0gdW5kZWZpbmVkIHx8IG5vcm0ubWVhbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBub3JtTWVhbiA9IFsyNTUsIDI1NSwgMjU1LCAyNTVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIChub3JtLm1lYW4pID09PSAnbnVtYmVyJykge1xuICAgICAgICBub3JtTWVhbiA9IFtub3JtLm1lYW4sIG5vcm0ubWVhbiwgbm9ybS5tZWFuLCBub3JtLm1lYW5dO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9ybU1lYW4gPSBbbm9ybS5tZWFuWzBdLCBub3JtLm1lYW5bMV0sIG5vcm0ubWVhblsyXSwgMF07XG4gICAgICAgIGlmIChub3JtLm1lYW5bM10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5vcm1NZWFuWzNdID0gbm9ybS5tZWFuWzNdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChub3JtID09PSB1bmRlZmluZWQgfHwgbm9ybS5iaWFzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5vcm1CaWFzID0gWzAsIDAsIDAsIDBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIChub3JtLmJpYXMpID09PSAnbnVtYmVyJykge1xuICAgICAgICBub3JtQmlhcyA9IFtub3JtLmJpYXMsIG5vcm0uYmlhcywgbm9ybS5iaWFzLCBub3JtLmJpYXNdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9ybUJpYXMgPSBbbm9ybS5iaWFzWzBdLCBub3JtLmJpYXNbMV0sIG5vcm0uYmlhc1syXSwgMF07XG4gICAgICAgIGlmIChub3JtLmJpYXNbM10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIG5vcm1CaWFzWzNdID0gbm9ybS5iaWFzWzNdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc3RyaWRlID0gaGVpZ2h0ICogd2lkdGg7XG4gICAgLy8gRGVmYXVsdCBwb2ludGVyIGFzc2lnbm1lbnRzXG4gICAgbGV0IHJUZW5zb3JQb2ludGVyID0gMCwgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGUsIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMiwgYVRlbnNvclBvaW50ZXIgPSAtMTtcblxuICAgIC8vIFVwZGF0aW5nIHRoZSBwb2ludGVyIGFzc2lnbm1lbnRzIGJhc2VkIG9uIHRoZSBpbnB1dCBpbWFnZSBmb3JtYXRcbiAgICBpZiAoaW5wdXRmb3JtYXQgPT09ICdSR0JBJykge1xuICAgICAgclRlbnNvclBvaW50ZXIgPSAwO1xuICAgICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGU7XG4gICAgICBiVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDI7XG4gICAgICBhVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDM7XG4gICAgfSBlbHNlIGlmIChpbnB1dGZvcm1hdCA9PT0gJ1JHQicpIHtcbiAgICAgIHJUZW5zb3JQb2ludGVyID0gMDtcbiAgICAgIGdUZW5zb3JQb2ludGVyID0gc3RyaWRlO1xuICAgICAgYlRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyO1xuICAgIH0gZWxzZSBpZiAoaW5wdXRmb3JtYXQgPT09ICdSQkcnKSB7XG4gICAgICByVGVuc29yUG9pbnRlciA9IDA7XG4gICAgICBiVGVuc29yUG9pbnRlciA9IHN0cmlkZTtcbiAgICAgIGdUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMjtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhlaWdodDsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHdpZHRoOyBqKyspIHtcbiAgICAgICAgY29uc3QgUiA9ICgodGVuc29yLmRhdGFbclRlbnNvclBvaW50ZXIrK10gYXMgbnVtYmVyKSAtIG5vcm1CaWFzWzBdKSAqIG5vcm1NZWFuWzBdOyAgLy8gUiB2YWx1ZVxuICAgICAgICBjb25zdCBHID0gKCh0ZW5zb3IuZGF0YVtnVGVuc29yUG9pbnRlcisrXSBhcyBudW1iZXIpIC0gbm9ybUJpYXNbMV0pICogbm9ybU1lYW5bMV07ICAvLyBHIHZhbHVlXG4gICAgICAgIGNvbnN0IEIgPSAoKHRlbnNvci5kYXRhW2JUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1syXSkgKiBub3JtTWVhblsyXTsgIC8vIEIgdmFsdWVcbiAgICAgICAgY29uc3QgQSA9IGFUZW5zb3JQb2ludGVyID09PSAtMSA/XG4gICAgICAgICAgICAyNTUgOlxuICAgICAgICAgICAgKCh0ZW5zb3IuZGF0YVthVGVuc29yUG9pbnRlcisrXSBhcyBudW1iZXIpIC0gbm9ybUJpYXNbM10pICogbm9ybU1lYW5bM107ICAvLyBBIHZhbHVlXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcmVzdHJpY3QtcGx1cy1vcGVyYW5kc1xuICAgICAgICBwaXhlbHMyRENvbnRleHQuZmlsbFN0eWxlID0gJ3JnYmEoJyArIFIgKyAnLCcgKyBHICsgJywnICsgQiArICcsJyArIEEgKyAnKSc7XG4gICAgICAgIHBpeGVsczJEQ29udGV4dC5maWxsUmVjdChqLCBpLCAxLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBub3QgYWNjZXNzIGltYWdlIGRhdGEnKTtcbiAgfVxufTtcblxuLyoqXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IudG9JbWFnZURhdGEoKVxuICovXG5leHBvcnQgY29uc3QgdGVuc29yVG9JbWFnZURhdGEgPSAodGVuc29yOiBUZW5zb3IsIG9wdGlvbnM/OiBUZW5zb3JUb0ltYWdlRGF0YU9wdGlvbnMpOiBJbWFnZURhdGEgPT4ge1xuICBjb25zdCBwaXhlbHMyRENvbnRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKS5nZXRDb250ZXh0KCcyZCcpO1xuICBsZXQgaW1hZ2U6IEltYWdlRGF0YTtcbiAgaWYgKHBpeGVsczJEQ29udGV4dCAhPSBudWxsKSB7XG4gICAgLy8gRGVmYXVsdCB2YWx1ZXMgZm9yIGhlaWdodCBhbmQgd2lkdGggJiBmb3JtYXRcbiAgICBsZXQgd2lkdGg6IG51bWJlcjtcbiAgICBsZXQgaGVpZ2h0OiBudW1iZXI7XG4gICAgbGV0IGNoYW5uZWxzOiBudW1iZXI7XG4gICAgaWYgKG9wdGlvbnM/LnRlbnNvckxheW91dCAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMudGVuc29yTGF5b3V0ID09PSAnTkhXQycpIHtcbiAgICAgIHdpZHRoID0gdGVuc29yLmRpbXNbMl07XG4gICAgICBoZWlnaHQgPSB0ZW5zb3IuZGltc1sxXTtcbiAgICAgIGNoYW5uZWxzID0gdGVuc29yLmRpbXNbM107XG4gICAgfSBlbHNlIHsgIC8vIERlZmF1bHQgbGF5b3V0IGlzIE5DV0hcbiAgICAgIHdpZHRoID0gdGVuc29yLmRpbXNbM107XG4gICAgICBoZWlnaHQgPSB0ZW5zb3IuZGltc1syXTtcbiAgICAgIGNoYW5uZWxzID0gdGVuc29yLmRpbXNbMV07XG4gICAgfVxuICAgIGNvbnN0IGlucHV0Zm9ybWF0ID0gb3B0aW9ucyAhPT0gdW5kZWZpbmVkID8gKG9wdGlvbnMuZm9ybWF0ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmZvcm1hdCA6ICdSR0InKSA6ICdSR0InO1xuXG4gICAgY29uc3Qgbm9ybSA9IG9wdGlvbnM/Lm5vcm07XG4gICAgbGV0IG5vcm1NZWFuOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgICBsZXQgbm9ybUJpYXM6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuICAgIGlmIChub3JtID09PSB1bmRlZmluZWQgfHwgbm9ybS5tZWFuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5vcm1NZWFuID0gWzI1NSwgMjU1LCAyNTUsIDI1NV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgKG5vcm0ubWVhbikgPT09ICdudW1iZXInKSB7XG4gICAgICAgIG5vcm1NZWFuID0gW25vcm0ubWVhbiwgbm9ybS5tZWFuLCBub3JtLm1lYW4sIG5vcm0ubWVhbl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3JtTWVhbiA9IFtub3JtLm1lYW5bMF0sIG5vcm0ubWVhblsxXSwgbm9ybS5tZWFuWzJdLCAyNTVdO1xuICAgICAgICBpZiAobm9ybS5tZWFuWzNdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBub3JtTWVhblszXSA9IG5vcm0ubWVhblszXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9ybSA9PT0gdW5kZWZpbmVkIHx8IG5vcm0uYmlhcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBub3JtQmlhcyA9IFswLCAwLCAwLCAwXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiAobm9ybS5iaWFzKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgbm9ybUJpYXMgPSBbbm9ybS5iaWFzLCBub3JtLmJpYXMsIG5vcm0uYmlhcywgbm9ybS5iaWFzXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vcm1CaWFzID0gW25vcm0uYmlhc1swXSwgbm9ybS5iaWFzWzFdLCBub3JtLmJpYXNbMl0sIDBdO1xuICAgICAgICBpZiAobm9ybS5iaWFzWzNdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBub3JtQmlhc1szXSA9IG5vcm0uYmlhc1szXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHN0cmlkZSA9IGhlaWdodCAqIHdpZHRoO1xuICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChvcHRpb25zLmZvcm1hdCAhPT0gdW5kZWZpbmVkICYmIChjaGFubmVscyA9PT0gNCAmJiBvcHRpb25zLmZvcm1hdCAhPT0gJ1JHQkEnKSB8fFxuICAgICAgICAgIChjaGFubmVscyA9PT0gMyAmJiAob3B0aW9ucy5mb3JtYXQgIT09ICdSR0InICYmIG9wdGlvbnMuZm9ybWF0ICE9PSAnQkdSJykpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGVuc29yIGZvcm1hdCBkb2VzblxcJ3QgbWF0Y2ggaW5wdXQgdGVuc29yIGRpbXMnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IHBvaW50ZXIgYXNzaWdubWVudHNcbiAgICBjb25zdCBzdGVwID0gNDtcbiAgICBsZXQgckltYWdlUG9pbnRlciA9IDAsIGdJbWFnZVBvaW50ZXIgPSAxLCBiSW1hZ2VQb2ludGVyID0gMiwgYUltYWdlUG9pbnRlciA9IDM7XG4gICAgbGV0IHJUZW5zb3JQb2ludGVyID0gMCwgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGUsIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMiwgYVRlbnNvclBvaW50ZXIgPSAtMTtcblxuICAgIC8vIFVwZGF0aW5nIHRoZSBwb2ludGVyIGFzc2lnbm1lbnRzIGJhc2VkIG9uIHRoZSBpbnB1dCBpbWFnZSBmb3JtYXRcbiAgICBpZiAoaW5wdXRmb3JtYXQgPT09ICdSR0JBJykge1xuICAgICAgclRlbnNvclBvaW50ZXIgPSAwO1xuICAgICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGU7XG4gICAgICBiVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDI7XG4gICAgICBhVGVuc29yUG9pbnRlciA9IHN0cmlkZSAqIDM7XG4gICAgfSBlbHNlIGlmIChpbnB1dGZvcm1hdCA9PT0gJ1JHQicpIHtcbiAgICAgIHJUZW5zb3JQb2ludGVyID0gMDtcbiAgICAgIGdUZW5zb3JQb2ludGVyID0gc3RyaWRlO1xuICAgICAgYlRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyO1xuICAgIH0gZWxzZSBpZiAoaW5wdXRmb3JtYXQgPT09ICdSQkcnKSB7XG4gICAgICByVGVuc29yUG9pbnRlciA9IDA7XG4gICAgICBiVGVuc29yUG9pbnRlciA9IHN0cmlkZTtcbiAgICAgIGdUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMjtcbiAgICB9XG5cbiAgICBpbWFnZSA9IHBpeGVsczJEQ29udGV4dC5jcmVhdGVJbWFnZURhdGEod2lkdGgsIGhlaWdodCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhlaWdodCAqIHdpZHRoO1xuICAgICAgICAgckltYWdlUG9pbnRlciArPSBzdGVwLCBnSW1hZ2VQb2ludGVyICs9IHN0ZXAsIGJJbWFnZVBvaW50ZXIgKz0gc3RlcCwgYUltYWdlUG9pbnRlciArPSBzdGVwLCBpKyspIHtcbiAgICAgIGltYWdlLmRhdGFbckltYWdlUG9pbnRlcl0gPSAoKHRlbnNvci5kYXRhW3JUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1swXSkgKiBub3JtTWVhblswXTsgIC8vIFIgdmFsdWVcbiAgICAgIGltYWdlLmRhdGFbZ0ltYWdlUG9pbnRlcl0gPSAoKHRlbnNvci5kYXRhW2dUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1sxXSkgKiBub3JtTWVhblsxXTsgIC8vIEcgdmFsdWVcbiAgICAgIGltYWdlLmRhdGFbYkltYWdlUG9pbnRlcl0gPSAoKHRlbnNvci5kYXRhW2JUZW5zb3JQb2ludGVyKytdIGFzIG51bWJlcikgLSBub3JtQmlhc1syXSkgKiBub3JtTWVhblsyXTsgIC8vIEIgdmFsdWVcbiAgICAgIGltYWdlLmRhdGFbYUltYWdlUG9pbnRlcl0gPSBhVGVuc29yUG9pbnRlciA9PT0gLTEgP1xuICAgICAgICAgIDI1NSA6XG4gICAgICAgICAgKCh0ZW5zb3IuZGF0YVthVGVuc29yUG9pbnRlcisrXSBhcyBudW1iZXIpIC0gbm9ybUJpYXNbM10pICogbm9ybU1lYW5bM107ICAvLyBBIHZhbHVlXG4gICAgfVxuXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IGFjY2VzcyBpbWFnZSBkYXRhJyk7XG4gIH1cbiAgcmV0dXJuIGltYWdlO1xufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtPcHRpb25zRGltZW5zaW9ucywgT3B0aW9uc0Zvcm1hdCwgT3B0aW9uc05vcm1hbGl6YXRpb25QYXJhbWV0ZXJzLCBPcHRpb25zVGVuc29yRm9ybWF0LCBPcHRpb25zVGVuc29yTGF5b3V0LCBUZW5zb3JGcm9tR3B1QnVmZmVyT3B0aW9ucywgVGVuc29yRnJvbUltYWdlQml0bWFwT3B0aW9ucywgVGVuc29yRnJvbUltYWdlRGF0YU9wdGlvbnMsIFRlbnNvckZyb21JbWFnZUVsZW1lbnRPcHRpb25zLCBUZW5zb3JGcm9tVGV4dHVyZU9wdGlvbnMsIFRlbnNvckZyb21VcmxPcHRpb25zfSBmcm9tICcuL3RlbnNvci1mYWN0b3J5LmpzJztcbmltcG9ydCB7VGVuc29yfSBmcm9tICcuL3RlbnNvci1pbXBsLmpzJztcbmltcG9ydCB7VGVuc29yIGFzIFRlbnNvckludGVyZmFjZX0gZnJvbSAnLi90ZW5zb3IuanMnO1xuXG5pbnRlcmZhY2UgQnVmZmVyVG9UZW5zb3JPcHRpb25zIGV4dGVuZHMgT3B0aW9uc0RpbWVuc2lvbnMsIE9wdGlvbnNUZW5zb3JMYXlvdXQsIE9wdGlvbnNOb3JtYWxpemF0aW9uUGFyYW1ldGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPcHRpb25zRm9ybWF0LCBPcHRpb25zVGVuc29yRm9ybWF0IHt9XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IHRlbnNvciBvYmplY3QgZnJvbSBpbWFnZSBvYmplY3RcbiAqXG4gKiBAcGFyYW0gYnVmZmVyIC0gRXh0cmFjdGVkIGltYWdlIGJ1ZmZlciBkYXRhIC0gYXNzdW1pbmcgUkdCQSBmb3JtYXRcbiAqIEBwYXJhbSBpbWFnZUZvcm1hdCAtIGlucHV0IGltYWdlIGNvbmZpZ3VyYXRpb24gLSByZXF1aXJlZCBjb25maWd1cmF0aW9ucyBoZWlnaHQsIHdpZHRoLCBmb3JtYXRcbiAqIEBwYXJhbSB0ZW5zb3JGb3JtYXQgLSBvdXRwdXQgdGVuc29yIGNvbmZpZ3VyYXRpb24gLSBEZWZhdWx0IGlzIFJHQiBmb3JtYXRcbiAqL1xuZXhwb3J0IGNvbnN0IGJ1ZmZlclRvVGVuc29yID0gKGJ1ZmZlcjogVWludDhDbGFtcGVkQXJyYXl8dW5kZWZpbmVkLCBvcHRpb25zOiBCdWZmZXJUb1RlbnNvck9wdGlvbnMpOiBUZW5zb3IgPT4ge1xuICBpZiAoYnVmZmVyID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ltYWdlIGJ1ZmZlciBtdXN0IGJlIGRlZmluZWQnKTtcbiAgfVxuICBpZiAob3B0aW9ucy5oZWlnaHQgPT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLndpZHRoID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ltYWdlIGhlaWdodCBhbmQgd2lkdGggbXVzdCBiZSBkZWZpbmVkJyk7XG4gIH1cbiAgaWYgKG9wdGlvbnMudGVuc29yTGF5b3V0ID09PSAnTkhXQycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05IV0MgVGVuc29yIGxheW91dCBpcyBub3Qgc3VwcG9ydGVkIHlldCcpO1xuICB9XG5cbiAgY29uc3Qge2hlaWdodCwgd2lkdGh9ID0gb3B0aW9ucztcblxuICBjb25zdCBub3JtID0gb3B0aW9ucy5ub3JtID8/IHttZWFuOiAyNTUsIGJpYXM6IDB9O1xuICBsZXQgbm9ybU1lYW46IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuICBsZXQgbm9ybUJpYXM6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuXG4gIGlmICh0eXBlb2YgKG5vcm0ubWVhbikgPT09ICdudW1iZXInKSB7XG4gICAgbm9ybU1lYW4gPSBbbm9ybS5tZWFuLCBub3JtLm1lYW4sIG5vcm0ubWVhbiwgbm9ybS5tZWFuXTtcbiAgfSBlbHNlIHtcbiAgICBub3JtTWVhbiA9IFtub3JtLm1lYW4hWzBdLCBub3JtLm1lYW4hWzFdLCBub3JtLm1lYW4hWzJdLCBub3JtLm1lYW4hWzNdID8/IDI1NV07XG4gIH1cblxuICBpZiAodHlwZW9mIChub3JtLmJpYXMpID09PSAnbnVtYmVyJykge1xuICAgIG5vcm1CaWFzID0gW25vcm0uYmlhcywgbm9ybS5iaWFzLCBub3JtLmJpYXMsIG5vcm0uYmlhc107XG4gIH0gZWxzZSB7XG4gICAgbm9ybUJpYXMgPSBbbm9ybS5iaWFzIVswXSwgbm9ybS5iaWFzIVsxXSwgbm9ybS5iaWFzIVsyXSwgbm9ybS5iaWFzIVszXSA/PyAwXTtcbiAgfVxuXG4gIGNvbnN0IGlucHV0Zm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZm9ybWF0IDogJ1JHQkEnO1xuICAvLyBkZWZhdWx0IHZhbHVlIGlzIFJHQkEgc2luY2UgaW1hZ2VkYXRhIGFuZCBIVE1MSW1hZ2VFbGVtZW50IHVzZXMgaXRcblxuICBjb25zdCBvdXRwdXRmb3JtYXQgPVxuICAgICAgb3B0aW9ucy50ZW5zb3JGb3JtYXQgIT09IHVuZGVmaW5lZCA/IChvcHRpb25zLnRlbnNvckZvcm1hdCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy50ZW5zb3JGb3JtYXQgOiAnUkdCJykgOiAnUkdCJztcbiAgY29uc3Qgc3RyaWRlID0gaGVpZ2h0ICogd2lkdGg7XG4gIGNvbnN0IGZsb2F0MzJEYXRhID0gb3V0cHV0Zm9ybWF0ID09PSAnUkdCQScgPyBuZXcgRmxvYXQzMkFycmF5KHN0cmlkZSAqIDQpIDogbmV3IEZsb2F0MzJBcnJheShzdHJpZGUgKiAzKTtcblxuICAvLyBEZWZhdWx0IHBvaW50ZXIgYXNzaWdubWVudHNcbiAgbGV0IHN0ZXAgPSA0LCBySW1hZ2VQb2ludGVyID0gMCwgZ0ltYWdlUG9pbnRlciA9IDEsIGJJbWFnZVBvaW50ZXIgPSAyLCBhSW1hZ2VQb2ludGVyID0gMztcbiAgbGV0IHJUZW5zb3JQb2ludGVyID0gMCwgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGUsIGJUZW5zb3JQb2ludGVyID0gc3RyaWRlICogMiwgYVRlbnNvclBvaW50ZXIgPSAtMTtcblxuICAvLyBVcGRhdGluZyB0aGUgcG9pbnRlciBhc3NpZ25tZW50cyBiYXNlZCBvbiB0aGUgaW5wdXQgaW1hZ2UgZm9ybWF0XG4gIGlmIChpbnB1dGZvcm1hdCA9PT0gJ1JHQicpIHtcbiAgICBzdGVwID0gMztcbiAgICBySW1hZ2VQb2ludGVyID0gMDtcbiAgICBnSW1hZ2VQb2ludGVyID0gMTtcbiAgICBiSW1hZ2VQb2ludGVyID0gMjtcbiAgICBhSW1hZ2VQb2ludGVyID0gLTE7XG4gIH1cblxuICAvLyBVcGRhdGluZyB0aGUgcG9pbnRlciBhc3NpZ25tZW50cyBiYXNlZCBvbiB0aGUgb3V0cHV0IHRlbnNvciBmb3JtYXRcbiAgaWYgKG91dHB1dGZvcm1hdCA9PT0gJ1JHQkEnKSB7XG4gICAgYVRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAzO1xuICB9IGVsc2UgaWYgKG91dHB1dGZvcm1hdCA9PT0gJ1JCRycpIHtcbiAgICByVGVuc29yUG9pbnRlciA9IDA7XG4gICAgYlRlbnNvclBvaW50ZXIgPSBzdHJpZGU7XG4gICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyO1xuICB9IGVsc2UgaWYgKG91dHB1dGZvcm1hdCA9PT0gJ0JHUicpIHtcbiAgICBiVGVuc29yUG9pbnRlciA9IDA7XG4gICAgZ1RlbnNvclBvaW50ZXIgPSBzdHJpZGU7XG4gICAgclRlbnNvclBvaW50ZXIgPSBzdHJpZGUgKiAyO1xuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpZGU7XG4gICAgICAgaSsrLCBySW1hZ2VQb2ludGVyICs9IHN0ZXAsIGJJbWFnZVBvaW50ZXIgKz0gc3RlcCwgZ0ltYWdlUG9pbnRlciArPSBzdGVwLCBhSW1hZ2VQb2ludGVyICs9IHN0ZXApIHtcbiAgICBmbG9hdDMyRGF0YVtyVGVuc29yUG9pbnRlcisrXSA9IChidWZmZXJbckltYWdlUG9pbnRlcl0gKyBub3JtQmlhc1swXSkgLyBub3JtTWVhblswXTtcbiAgICBmbG9hdDMyRGF0YVtnVGVuc29yUG9pbnRlcisrXSA9IChidWZmZXJbZ0ltYWdlUG9pbnRlcl0gKyBub3JtQmlhc1sxXSkgLyBub3JtTWVhblsxXTtcbiAgICBmbG9hdDMyRGF0YVtiVGVuc29yUG9pbnRlcisrXSA9IChidWZmZXJbYkltYWdlUG9pbnRlcl0gKyBub3JtQmlhc1syXSkgLyBub3JtTWVhblsyXTtcbiAgICBpZiAoYVRlbnNvclBvaW50ZXIgIT09IC0xICYmIGFJbWFnZVBvaW50ZXIgIT09IC0xKSB7XG4gICAgICBmbG9hdDMyRGF0YVthVGVuc29yUG9pbnRlcisrXSA9IChidWZmZXJbYUltYWdlUG9pbnRlcl0gKyBub3JtQmlhc1szXSkgLyBub3JtTWVhblszXTtcbiAgICB9XG4gIH1cblxuICAvLyBGbG9hdDMyQXJyYXkgLT4gb3J0LlRlbnNvclxuICBjb25zdCBvdXRwdXRUZW5zb3IgPSBvdXRwdXRmb3JtYXQgPT09ICdSR0JBJyA/IG5ldyBUZW5zb3IoJ2Zsb2F0MzInLCBmbG9hdDMyRGF0YSwgWzEsIDQsIGhlaWdodCwgd2lkdGhdKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRlbnNvcignZmxvYXQzMicsIGZsb2F0MzJEYXRhLCBbMSwgMywgaGVpZ2h0LCB3aWR0aF0pO1xuICByZXR1cm4gb3V0cHV0VGVuc29yO1xufTtcblxuLyoqXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IuZnJvbUltYWdlKCkuXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JGcm9tSW1hZ2UgPSBhc3luYyhcbiAgICBpbWFnZTogSW1hZ2VEYXRhfEhUTUxJbWFnZUVsZW1lbnR8SW1hZ2VCaXRtYXB8c3RyaW5nLFxuICAgIG9wdGlvbnM/OiBUZW5zb3JGcm9tSW1hZ2VEYXRhT3B0aW9uc3xUZW5zb3JGcm9tSW1hZ2VFbGVtZW50T3B0aW9uc3xUZW5zb3JGcm9tSW1hZ2VCaXRtYXBPcHRpb25zfFxuICAgIFRlbnNvckZyb21VcmxPcHRpb25zKTogUHJvbWlzZTxUZW5zb3I+ID0+IHtcbiAgLy8gY2hlY2tpbmcgdGhlIHR5cGUgb2YgaW1hZ2Ugb2JqZWN0XG4gIGNvbnN0IGlzSFRNTEltYWdlRWxlID0gdHlwZW9mIChIVE1MSW1hZ2VFbGVtZW50KSAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50O1xuICBjb25zdCBpc0ltYWdlRGF0YUVsZSA9IHR5cGVvZiAoSW1hZ2VEYXRhKSAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZURhdGE7XG4gIGNvbnN0IGlzSW1hZ2VCaXRtYXAgPSB0eXBlb2YgKEltYWdlQml0bWFwKSAhPT0gJ3VuZGVmaW5lZCcgJiYgaW1hZ2UgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcDtcbiAgY29uc3QgaXNTdHJpbmcgPSB0eXBlb2YgaW1hZ2UgPT09ICdzdHJpbmcnO1xuXG4gIGxldCBkYXRhOiBVaW50OENsYW1wZWRBcnJheXx1bmRlZmluZWQ7XG4gIGxldCBidWZmZXJUb1RlbnNvck9wdGlvbnM6IEJ1ZmZlclRvVGVuc29yT3B0aW9ucyA9IG9wdGlvbnMgPz8ge307XG5cbiAgLy8gZmlsbGluZyBhbmQgY2hlY2tpbmcgaW1hZ2UgY29uZmlndXJhdGlvbiBvcHRpb25zXG4gIGlmIChpc0hUTUxJbWFnZUVsZSkge1xuICAgIC8vIEhUTUxJbWFnZUVsZW1lbnQgLSBpbWFnZSBvYmplY3QgLSBmb3JtYXQgaXMgUkdCQSBieSBkZWZhdWx0XG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgY2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgICBjb25zdCBwaXhlbHMyRENvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgIGlmIChwaXhlbHMyRENvbnRleHQgIT0gbnVsbCkge1xuICAgICAgbGV0IGhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgICAgIGxldCB3aWR0aCA9IGltYWdlLndpZHRoO1xuICAgICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnJlc2l6ZWRIZWlnaHQgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnJlc2l6ZWRXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGhlaWdodCA9IG9wdGlvbnMucmVzaXplZEhlaWdodDtcbiAgICAgICAgd2lkdGggPSBvcHRpb25zLnJlc2l6ZWRXaWR0aDtcbiAgICAgIH1cblxuICAgICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBpZiAob3B0aW9ucy50ZW5zb3JGb3JtYXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW1hZ2UgaW5wdXQgY29uZmlnIGZvcm1hdCBtdXN0IGJlIFJHQkEgZm9yIEhUTUxJbWFnZUVsZW1lbnQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMudGVuc29yRm9ybWF0ID0gJ1JHQkEnO1xuICAgICAgICB9XG4gICAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy53aWR0aCA9IHdpZHRoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLnRlbnNvckZvcm1hdCA9ICdSR0JBJztcbiAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLndpZHRoID0gd2lkdGg7XG4gICAgICB9XG5cbiAgICAgIHBpeGVsczJEQ29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xuICAgICAgZGF0YSA9IHBpeGVsczJEQ29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCkuZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IGFjY2VzcyBpbWFnZSBkYXRhJyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSW1hZ2VEYXRhRWxlKSB7XG4gICAgbGV0IGhlaWdodDogbnVtYmVyO1xuICAgIGxldCB3aWR0aDogbnVtYmVyO1xuXG4gICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnJlc2l6ZWRXaWR0aCAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMucmVzaXplZEhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBoZWlnaHQgPSBvcHRpb25zLnJlc2l6ZWRIZWlnaHQ7XG4gICAgICB3aWR0aCA9IG9wdGlvbnMucmVzaXplZFdpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG4gICAgICB3aWR0aCA9IGltYWdlLndpZHRoO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy5mb3JtYXQgPSAnUkdCQSc7XG4gICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLmhlaWdodCA9IGhlaWdodDtcbiAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMud2lkdGggPSB3aWR0aDtcblxuICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHRlbXBDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblxuICAgICAgdGVtcENhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgICAgdGVtcENhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgIGNvbnN0IHBpeGVsczJEQ29udGV4dCA9IHRlbXBDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgICAgaWYgKHBpeGVsczJEQ29udGV4dCAhPSBudWxsKSB7XG4gICAgICAgIHBpeGVsczJEQ29udGV4dC5wdXRJbWFnZURhdGEoaW1hZ2UsIDAsIDApO1xuICAgICAgICBkYXRhID0gcGl4ZWxzMkRDb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB3aWR0aCwgaGVpZ2h0KS5kYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW4gbm90IGFjY2VzcyBpbWFnZSBkYXRhJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBpbWFnZS5kYXRhO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0ltYWdlQml0bWFwKSB7XG4gICAgLy8gSW1hZ2VCaXRtYXAgLSBpbWFnZSBvYmplY3QgLSBmb3JtYXQgbXVzdCBiZSBwcm92aWRlZCBieSB1c2VyXG4gICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgcHJvdmlkZSBpbWFnZSBjb25maWcgd2l0aCBmb3JtYXQgZm9yIEltYWdlYml0bWFwJyk7XG4gICAgfVxuXG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgY2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgICBjb25zdCBwaXhlbHMyRENvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgIGlmIChwaXhlbHMyRENvbnRleHQgIT0gbnVsbCkge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xuICAgICAgY29uc3Qgd2lkdGggPSBpbWFnZS53aWR0aDtcbiAgICAgIHBpeGVsczJEQ29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgZGF0YSA9IHBpeGVsczJEQ29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgd2lkdGgsIGhlaWdodCkuZGF0YTtcbiAgICAgIGJ1ZmZlclRvVGVuc29yT3B0aW9ucy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMud2lkdGggPSB3aWR0aDtcbiAgICAgIHJldHVybiBidWZmZXJUb1RlbnNvcihkYXRhLCBidWZmZXJUb1RlbnNvck9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBub3QgYWNjZXNzIGltYWdlIGRhdGEnKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNTdHJpbmcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBpZiAoIWltYWdlIHx8ICFjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiByZWplY3QoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5ld0ltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICBuZXdJbWFnZS5jcm9zc09yaWdpbiA9ICdBbm9ueW1vdXMnO1xuICAgICAgbmV3SW1hZ2Uuc3JjID0gaW1hZ2U7XG4gICAgICBuZXdJbWFnZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IG5ld0ltYWdlLndpZHRoO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gbmV3SW1hZ2UuaGVpZ2h0O1xuICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShuZXdJbWFnZSwgMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgY29uc3QgaW1nID0gY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcblxuICAgICAgICBidWZmZXJUb1RlbnNvck9wdGlvbnMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcbiAgICAgICAgYnVmZmVyVG9UZW5zb3JPcHRpb25zLndpZHRoID0gY2FudmFzLndpZHRoO1xuICAgICAgICByZXNvbHZlKGJ1ZmZlclRvVGVuc29yKGltZy5kYXRhLCBidWZmZXJUb1RlbnNvck9wdGlvbnMpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnB1dCBkYXRhIHByb3ZpZGVkIGlzIG5vdCBzdXBwb3J0ZWQgLSBhYm9ydGVkIHRlbnNvciBjcmVhdGlvbicpO1xuICB9XG5cbiAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBidWZmZXJUb1RlbnNvcihkYXRhLCBidWZmZXJUb1RlbnNvck9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignSW5wdXQgZGF0YSBwcm92aWRlZCBpcyBub3Qgc3VwcG9ydGVkIC0gYWJvcnRlZCB0ZW5zb3IgY3JlYXRpb24nKTtcbiAgfVxufTtcblxuLyoqXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IuZnJvbVRleHR1cmUoKS5cbiAqL1xuZXhwb3J0IGNvbnN0IHRlbnNvckZyb21UZXh0dXJlID0gPFQgZXh0ZW5kcyBUZW5zb3JJbnRlcmZhY2UuVGV4dHVyZURhdGFUeXBlcz4oXG4gICAgdGV4dHVyZTogVGVuc29ySW50ZXJmYWNlLlRleHR1cmVUeXBlLCBvcHRpb25zOiBUZW5zb3JGcm9tVGV4dHVyZU9wdGlvbnM8VD4pOiBUZW5zb3IgPT4ge1xuICBjb25zdCB7d2lkdGgsIGhlaWdodCwgZG93bmxvYWQsIGRpc3Bvc2V9ID0gb3B0aW9ucztcbiAgLy8gQWx3YXlzIGFzc3VtZSBSR0JBRjMyLiBUT0RPOiBzdXBwb3J0IGRpZmZlcmVudCB0ZXh0dXJlIGZvcm1hdFxuICBjb25zdCBkaW1zID0gWzEsIGhlaWdodCwgd2lkdGgsIDRdO1xuICByZXR1cm4gbmV3IFRlbnNvcih7bG9jYXRpb246ICd0ZXh0dXJlJywgdHlwZTogJ2Zsb2F0MzInLCB0ZXh0dXJlLCBkaW1zLCBkb3dubG9hZCwgZGlzcG9zZX0pO1xufTtcblxuLyoqXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IuZnJvbUdwdUJ1ZmZlcigpLlxuICovXG5leHBvcnQgY29uc3QgdGVuc29yRnJvbUdwdUJ1ZmZlciA9IDxUIGV4dGVuZHMgVGVuc29ySW50ZXJmYWNlLkdwdUJ1ZmZlckRhdGFUeXBlcz4oXG4gICAgZ3B1QnVmZmVyOiBUZW5zb3JJbnRlcmZhY2UuR3B1QnVmZmVyVHlwZSwgb3B0aW9uczogVGVuc29yRnJvbUdwdUJ1ZmZlck9wdGlvbnM8VD4pOiBUZW5zb3IgPT4ge1xuICBjb25zdCB7ZGF0YVR5cGUsIGRpbXMsIGRvd25sb2FkLCBkaXNwb3NlfSA9IG9wdGlvbnM7XG4gIHJldHVybiBuZXcgVGVuc29yKHtsb2NhdGlvbjogJ2dwdS1idWZmZXInLCB0eXBlOiBkYXRhVHlwZSA/PyAnZmxvYXQzMicsIGdwdUJ1ZmZlciwgZGltcywgZG93bmxvYWQsIGRpc3Bvc2V9KTtcbn07XG5cbi8qKlxuICogaW1wbGVtZW50YXRpb24gb2YgVGVuc29yLmZyb21QaW5uZWRCdWZmZXIoKS5cbiAqL1xuZXhwb3J0IGNvbnN0IHRlbnNvckZyb21QaW5uZWRCdWZmZXIgPSA8VCBleHRlbmRzIFRlbnNvckludGVyZmFjZS5DcHVQaW5uZWREYXRhVHlwZXM+KFxuICAgIHR5cGU6IFQsIGJ1ZmZlcjogVGVuc29ySW50ZXJmYWNlLkRhdGFUeXBlTWFwW1RdLCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUZW5zb3IgPT5cbiAgICBuZXcgVGVuc29yKHtsb2NhdGlvbjogJ2NwdS1waW5uZWQnLCB0eXBlLCBkYXRhOiBidWZmZXIsIGRpbXM6IGRpbXMgPz8gW2J1ZmZlci5sZW5ndGhdfSk7XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICcuL3RlbnNvci5qcyc7XG5cbmV4cG9ydCB0eXBlIFN1cHBvcnRlZFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSBGbG9hdDMyQXJyYXlDb25zdHJ1Y3RvcnxVaW50OEFycmF5Q29uc3RydWN0b3J8SW50OEFycmF5Q29uc3RydWN0b3J8XG4gICAgVWludDE2QXJyYXlDb25zdHJ1Y3RvcnxJbnQxNkFycmF5Q29uc3RydWN0b3J8SW50MzJBcnJheUNvbnN0cnVjdG9yfEJpZ0ludDY0QXJyYXlDb25zdHJ1Y3RvcnxVaW50OEFycmF5Q29uc3RydWN0b3J8XG4gICAgRmxvYXQ2NEFycmF5Q29uc3RydWN0b3J8VWludDMyQXJyYXlDb25zdHJ1Y3RvcnxCaWdVaW50NjRBcnJheUNvbnN0cnVjdG9yO1xuZXhwb3J0IHR5cGUgU3VwcG9ydGVkVHlwZWRBcnJheSA9IEluc3RhbmNlVHlwZTxTdXBwb3J0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3JzPjtcblxuLy8gYSBydW50aW1lIG1hcCB0aGF0IG1hcHMgdHlwZSBzdHJpbmcgdG8gVHlwZWRBcnJheSBjb25zdHJ1Y3Rvci4gU2hvdWxkIG1hdGNoIFRlbnNvci5EYXRhVHlwZU1hcC5cbmV4cG9ydCBjb25zdCBOVU1FUklDX1RFTlNPUl9UWVBFX1RPX1RZUEVEQVJSQVlfTUFQID0gbmV3IE1hcDxzdHJpbmcsIFN1cHBvcnRlZFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnM+KFtcbiAgWydmbG9hdDMyJywgRmxvYXQzMkFycmF5XSxcbiAgWyd1aW50OCcsIFVpbnQ4QXJyYXldLFxuICBbJ2ludDgnLCBJbnQ4QXJyYXldLFxuICBbJ3VpbnQxNicsIFVpbnQxNkFycmF5XSxcbiAgWydmbG9hdDE2JywgVWludDE2QXJyYXldLFxuICBbJ2ludDE2JywgSW50MTZBcnJheV0sXG4gIFsnaW50MzInLCBJbnQzMkFycmF5XSxcbiAgWydib29sJywgVWludDhBcnJheV0sXG4gIFsnZmxvYXQ2NCcsIEZsb2F0NjRBcnJheV0sXG4gIFsndWludDMyJywgVWludDMyQXJyYXldLFxuXSk7XG5cbi8vIGEgcnVudGltZSBtYXAgdGhhdCBtYXBzIHR5cGUgc3RyaW5nIHRvIFR5cGVkQXJyYXkgY29uc3RydWN0b3IuIFNob3VsZCBtYXRjaCBUZW5zb3IuRGF0YVR5cGVNYXAuXG5leHBvcnQgY29uc3QgTlVNRVJJQ19URU5TT1JfVFlQRURBUlJBWV9UT19UWVBFX01BUCA9IG5ldyBNYXA8U3VwcG9ydGVkVHlwZWRBcnJheUNvbnN0cnVjdG9ycywgVGVuc29yLlR5cGU+KFtcbiAgW0Zsb2F0MzJBcnJheSwgJ2Zsb2F0MzInXSxcbiAgW1VpbnQ4QXJyYXksICd1aW50OCddLFxuICBbSW50OEFycmF5LCAnaW50OCddLFxuICBbVWludDE2QXJyYXksICd1aW50MTYnXSxcbiAgW0ludDE2QXJyYXksICdpbnQxNiddLFxuICBbSW50MzJBcnJheSwgJ2ludDMyJ10sXG4gIFtGbG9hdDY0QXJyYXksICdmbG9hdDY0J10sXG4gIFtVaW50MzJBcnJheSwgJ3VpbnQzMiddLFxuXSk7XG5cbi8vIHRoZSBmb2xsb3dpbmcgY29kZSBhbGxvd3MgZGVsYXlpbmcgZXhlY3V0aW9uIG9mIEJpZ0ludCBjaGVja2luZy4gVGhpcyBhbGxvd3MgbGF6eSBpbml0aWFsaXphdGlvbiBmb3Jcbi8vIE5VTUVSSUNfVEVOU09SX1RZUEVfVE9fVFlQRURBUlJBWV9NQVAgYW5kIE5VTUVSSUNfVEVOU09SX1RZUEVEQVJSQVlfVE9fVFlQRV9NQVAsIHdoaWNoIGFsbG93cyBCaWdJbnQgcG9seWZpbGxcbi8vIGlmIGF2YWlsYWJsZS5cbmxldCBpc0JpZ0ludENoZWNrZWQgPSBmYWxzZTtcbmV4cG9ydCBjb25zdCBjaGVja0JpZ0ludCA9ICgpID0+IHtcbiAgaWYgKCFpc0JpZ0ludENoZWNrZWQpIHtcbiAgICBpc0JpZ0ludENoZWNrZWQgPSB0cnVlO1xuICAgIGNvbnN0IGlzQmlnSW50NjRBcnJheUF2YWlsYWJsZSA9IHR5cGVvZiBCaWdJbnQ2NEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQmlnSW50NjRBcnJheS5mcm9tID09PSAnZnVuY3Rpb24nO1xuICAgIGNvbnN0IGlzQmlnVWludDY0QXJyYXlBdmFpbGFibGUgPVxuICAgICAgICB0eXBlb2YgQmlnVWludDY0QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBCaWdVaW50NjRBcnJheS5mcm9tID09PSAnZnVuY3Rpb24nO1xuXG4gICAgaWYgKGlzQmlnSW50NjRBcnJheUF2YWlsYWJsZSkge1xuICAgICAgTlVNRVJJQ19URU5TT1JfVFlQRV9UT19UWVBFREFSUkFZX01BUC5zZXQoJ2ludDY0JywgQmlnSW50NjRBcnJheSk7XG4gICAgICBOVU1FUklDX1RFTlNPUl9UWVBFREFSUkFZX1RPX1RZUEVfTUFQLnNldChCaWdJbnQ2NEFycmF5LCAnaW50NjQnKTtcbiAgICB9XG4gICAgaWYgKGlzQmlnVWludDY0QXJyYXlBdmFpbGFibGUpIHtcbiAgICAgIE5VTUVSSUNfVEVOU09SX1RZUEVfVE9fVFlQRURBUlJBWV9NQVAuc2V0KCd1aW50NjQnLCBCaWdVaW50NjRBcnJheSk7XG4gICAgICBOVU1FUklDX1RFTlNPUl9UWVBFREFSUkFZX1RPX1RZUEVfTUFQLnNldChCaWdVaW50NjRBcnJheSwgJ3VpbnQ2NCcpO1xuICAgIH1cbiAgfVxufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtDcHVQaW5uZWRDb25zdHJ1Y3RvclBhcmFtZXRlcnMsIEdwdUJ1ZmZlckNvbnN0cnVjdG9yUGFyYW1ldGVycywgVGV4dHVyZUNvbnN0cnVjdG9yUGFyYW1ldGVyc30gZnJvbSAnLi90ZW5zb3ItZmFjdG9yeS5qcyc7XG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi90ZW5zb3ItaW1wbC5qcyc7XG5cbi8qKlxuICogY2FsY3VsYXRlIHNpemUgZnJvbSBkaW1zLlxuICpcbiAqIEBwYXJhbSBkaW1zIHRoZSBkaW1zIGFycmF5LiBNYXkgYmUgYW4gaWxsZWdhbCBpbnB1dC5cbiAqL1xuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZVNpemUgPSAoZGltczogcmVhZG9ubHkgdW5rbm93bltdKTogbnVtYmVyID0+IHtcbiAgbGV0IHNpemUgPSAxO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRpbXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkaW0gPSBkaW1zW2ldO1xuICAgIGlmICh0eXBlb2YgZGltICE9PSAnbnVtYmVyJyB8fCAhTnVtYmVyLmlzU2FmZUludGVnZXIoZGltKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgZGltc1ske2l9XSBtdXN0IGJlIGFuIGludGVnZXIsIGdvdDogJHtkaW19YCk7XG4gICAgfVxuICAgIGlmIChkaW0gPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgZGltc1ske2l9XSBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXIsIGdvdDogJHtkaW19YCk7XG4gICAgfVxuICAgIHNpemUgKj0gZGltO1xuICB9XG4gIHJldHVybiBzaXplO1xufTtcblxuLyoqXG4gKiBpbXBsZW1lbnRhdGlvbiBvZiBUZW5zb3IucmVzaGFwZSgpXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JSZXNoYXBlID0gKHRlbnNvcjogVGVuc29yLCBkaW1zOiByZWFkb25seSBudW1iZXJbXSk6IFRlbnNvciA9PiB7XG4gIHN3aXRjaCAodGVuc29yLmxvY2F0aW9uKSB7XG4gICAgY2FzZSAnY3B1JzpcbiAgICAgIHJldHVybiBuZXcgVGVuc29yKHRlbnNvci50eXBlLCB0ZW5zb3IuZGF0YSwgZGltcyk7XG4gICAgY2FzZSAnY3B1LXBpbm5lZCc6XG4gICAgICByZXR1cm4gbmV3IFRlbnNvcih7XG4gICAgICAgIGxvY2F0aW9uOiAnY3B1LXBpbm5lZCcsXG4gICAgICAgIGRhdGE6IHRlbnNvci5kYXRhIGFzIENwdVBpbm5lZENvbnN0cnVjdG9yUGFyYW1ldGVyc1snZGF0YSddLFxuICAgICAgICB0eXBlOiB0ZW5zb3IudHlwZSBhcyBDcHVQaW5uZWRDb25zdHJ1Y3RvclBhcmFtZXRlcnNbJ3R5cGUnXSxcbiAgICAgICAgZGltcyxcbiAgICAgIH0pO1xuICAgIGNhc2UgJ3RleHR1cmUnOlxuICAgICAgcmV0dXJuIG5ldyBUZW5zb3Ioe1xuICAgICAgICBsb2NhdGlvbjogJ3RleHR1cmUnLFxuICAgICAgICB0ZXh0dXJlOiB0ZW5zb3IudGV4dHVyZSxcbiAgICAgICAgdHlwZTogdGVuc29yLnR5cGUgYXMgVGV4dHVyZUNvbnN0cnVjdG9yUGFyYW1ldGVyc1sndHlwZSddLFxuICAgICAgICBkaW1zLFxuICAgICAgfSk7XG4gICAgY2FzZSAnZ3B1LWJ1ZmZlcic6XG4gICAgICByZXR1cm4gbmV3IFRlbnNvcih7XG4gICAgICAgIGxvY2F0aW9uOiAnZ3B1LWJ1ZmZlcicsXG4gICAgICAgIGdwdUJ1ZmZlcjogdGVuc29yLmdwdUJ1ZmZlcixcbiAgICAgICAgdHlwZTogdGVuc29yLnR5cGUgYXMgR3B1QnVmZmVyQ29uc3RydWN0b3JQYXJhbWV0ZXJzWyd0eXBlJ10sXG4gICAgICAgIGRpbXMsXG4gICAgICB9KTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB0ZW5zb3JSZXNoYXBlOiB0ZW5zb3IgbG9jYXRpb24gJHt0ZW5zb3IubG9jYXRpb259IGlzIG5vdCBzdXBwb3J0ZWRgKTtcbiAgfVxufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHt0ZW5zb3JUb0RhdGFVUkwsIHRlbnNvclRvSW1hZ2VEYXRhfSBmcm9tICcuL3RlbnNvci1jb252ZXJzaW9uLWltcGwuanMnO1xuaW1wb3J0IHtUZW5zb3JUb0RhdGFVcmxPcHRpb25zLCBUZW5zb3JUb0ltYWdlRGF0YU9wdGlvbnN9IGZyb20gJy4vdGVuc29yLWNvbnZlcnNpb24uanMnO1xuaW1wb3J0IHt0ZW5zb3JGcm9tR3B1QnVmZmVyLCB0ZW5zb3JGcm9tSW1hZ2UsIHRlbnNvckZyb21QaW5uZWRCdWZmZXIsIHRlbnNvckZyb21UZXh0dXJlfSBmcm9tICcuL3RlbnNvci1mYWN0b3J5LWltcGwuanMnO1xuaW1wb3J0IHtDcHVQaW5uZWRDb25zdHJ1Y3RvclBhcmFtZXRlcnMsIEdwdUJ1ZmZlckNvbnN0cnVjdG9yUGFyYW1ldGVycywgVGVuc29yRnJvbUdwdUJ1ZmZlck9wdGlvbnMsIFRlbnNvckZyb21JbWFnZUJpdG1hcE9wdGlvbnMsIFRlbnNvckZyb21JbWFnZURhdGFPcHRpb25zLCBUZW5zb3JGcm9tSW1hZ2VFbGVtZW50T3B0aW9ucywgVGVuc29yRnJvbVRleHR1cmVPcHRpb25zLCBUZW5zb3JGcm9tVXJsT3B0aW9ucywgVGV4dHVyZUNvbnN0cnVjdG9yUGFyYW1ldGVyc30gZnJvbSAnLi90ZW5zb3ItZmFjdG9yeS5qcyc7XG5pbXBvcnQge2NoZWNrQmlnSW50LCBOVU1FUklDX1RFTlNPUl9UWVBFX1RPX1RZUEVEQVJSQVlfTUFQLCBOVU1FUklDX1RFTlNPUl9UWVBFREFSUkFZX1RPX1RZUEVfTUFQLCBTdXBwb3J0ZWRUeXBlZEFycmF5LCBTdXBwb3J0ZWRUeXBlZEFycmF5Q29uc3RydWN0b3JzfSBmcm9tICcuL3RlbnNvci1pbXBsLXR5cGUtbWFwcGluZy5qcyc7XG5pbXBvcnQge2NhbGN1bGF0ZVNpemUsIHRlbnNvclJlc2hhcGV9IGZyb20gJy4vdGVuc29yLXV0aWxzLWltcGwuanMnO1xuaW1wb3J0IHtUZW5zb3IgYXMgVGVuc29ySW50ZXJmYWNlfSBmcm9tICcuL3RlbnNvci5qcyc7XG5cbi8vIHR5cGUgYWxpYXNlcyBmb3IgdGhvc2UgZXhwb3J0ZWQgZnJvbSBUZW5zb3IgaW50ZXJmYWNlXG5cbnR5cGUgVGVuc29yVHlwZSA9IFRlbnNvckludGVyZmFjZS5UeXBlO1xudHlwZSBUZW5zb3JEYXRhVHlwZSA9IFRlbnNvckludGVyZmFjZS5EYXRhVHlwZTtcbnR5cGUgVGVuc29yRGF0YUxvY2F0aW9uID0gVGVuc29ySW50ZXJmYWNlLkRhdGFMb2NhdGlvbjtcbnR5cGUgVGVuc29yVGV4dHVyZVR5cGUgPSBUZW5zb3JJbnRlcmZhY2UuVGV4dHVyZVR5cGU7XG50eXBlIFRlbnNvckdwdUJ1ZmZlclR5cGUgPSBUZW5zb3JJbnRlcmZhY2UuR3B1QnVmZmVyVHlwZTtcblxuLyoqXG4gKiB0aGUgaW1wbGVtZW50YXRpb24gb2YgVGVuc29yIGludGVyZmFjZS5cbiAqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW5zb3IgaW1wbGVtZW50cyBUZW5zb3JJbnRlcmZhY2Uge1xuICAvLyAjcmVnaW9uIGNvbnN0cnVjdG9yc1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgQ1BVIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gdHlwZSwgZGF0YSBhbmQgZGltcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgdHlwZTogVGVuc29yVHlwZSwgZGF0YTogVGVuc29yRGF0YVR5cGV8cmVhZG9ubHkgc3RyaW5nW118cmVhZG9ubHkgbnVtYmVyW118cmVhZG9ubHkgYm9vbGVhbltdLFxuICAgICAgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBDUFUgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLiBUeXBlIGlzIGluZmVycmVkIGZyb20gZGF0YS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGRhdGE6IFRlbnNvckRhdGFUeXBlfHJlYWRvbmx5IHN0cmluZ1tdfHJlYWRvbmx5IGJvb2xlYW5bXSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIHBpbm5lZCBDUFUgZGF0YSB3aXRoIHRoZSBnaXZlbiB0eXBlIGFuZCBkaW1zLlxuICAgKlxuICAgKiBUZW5zb3IncyBsb2NhdGlvbiB3aWxsIGJlIHNldCB0byAnY3B1LXBpbm5lZCcuXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgLSBTcGVjaWZ5IHRoZSBwYXJhbWV0ZXJzIHRvIGNvbnN0cnVjdCB0aGUgdGVuc29yLlxuICAgKi9cbiAgY29uc3RydWN0b3IocGFyYW1zOiBDcHVQaW5uZWRDb25zdHJ1Y3RvclBhcmFtZXRlcnMpO1xuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgV2ViR0wgdGV4dHVyZSB3aXRoIHRoZSBnaXZlbiB0eXBlIGFuZCBkaW1zLlxuICAgKlxuICAgKiBUZW5zb3IncyBsb2NhdGlvbiB3aWxsIGJlIHNldCB0byAndGV4dHVyZScuXG4gICAqXG4gICAqIEBwYXJhbSBwYXJhbXMgLSBTcGVjaWZ5IHRoZSBwYXJhbWV0ZXJzIHRvIGNvbnN0cnVjdCB0aGUgdGVuc29yLlxuICAgKi9cbiAgY29uc3RydWN0b3IocGFyYW1zOiBUZXh0dXJlQ29uc3RydWN0b3JQYXJhbWV0ZXJzKTtcbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIFdlYkdQVSBidWZmZXIgd2l0aCB0aGUgZ2l2ZW4gdHlwZSBhbmQgZGltcy5cbiAgICpcbiAgICogVGVuc29yJ3MgbG9jYXRpb24gd2lsbCBiZSBzZXQgdG8gJ2dwdS1idWZmZXInLlxuICAgKlxuICAgKiBAcGFyYW0gcGFyYW1zIC0gU3BlY2lmeSB0aGUgcGFyYW1ldGVycyB0byBjb25zdHJ1Y3QgdGhlIHRlbnNvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmFtczogR3B1QnVmZmVyQ29uc3RydWN0b3JQYXJhbWV0ZXJzKTtcblxuICAvKipcbiAgICogaW1wbGVtZW50YXRpb24uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIGFyZzA6IFRlbnNvclR5cGV8VGVuc29yRGF0YVR5cGV8cmVhZG9ubHkgc3RyaW5nW118cmVhZG9ubHkgYm9vbGVhbltdfENwdVBpbm5lZENvbnN0cnVjdG9yUGFyYW1ldGVyc3xcbiAgICAgIFRleHR1cmVDb25zdHJ1Y3RvclBhcmFtZXRlcnN8R3B1QnVmZmVyQ29uc3RydWN0b3JQYXJhbWV0ZXJzLFxuICAgICAgYXJnMT86IFRlbnNvckRhdGFUeXBlfHJlYWRvbmx5IG51bWJlcltdfHJlYWRvbmx5IHN0cmluZ1tdfHJlYWRvbmx5IGJvb2xlYW5bXSwgYXJnMj86IHJlYWRvbmx5IG51bWJlcltdKSB7XG4gICAgLy8gcGVyZm9ybSBvbmUtdGltZSBjaGVjayBmb3IgQmlnSW50IHN1cHBvcnRcbiAgICBjaGVja0JpZ0ludCgpO1xuXG4gICAgbGV0IHR5cGU6IFRlbnNvclR5cGU7XG4gICAgbGV0IGRpbXM6IHJlYWRvbmx5IG51bWJlcltdO1xuXG4gICAgaWYgKHR5cGVvZiBhcmcwID09PSAnb2JqZWN0JyAmJiAnbG9jYXRpb24nIGluIGFyZzApIHtcbiAgICAgIC8vXG4gICAgICAvLyBjb25zdHJ1Y3RpbmcgdGVuc29yIGZyb20gc3BlY2lmaWMgbG9jYXRpb25cbiAgICAgIC8vXG4gICAgICB0aGlzLmRhdGFMb2NhdGlvbiA9IGFyZzAubG9jYXRpb247XG4gICAgICB0eXBlID0gYXJnMC50eXBlO1xuICAgICAgZGltcyA9IGFyZzAuZGltcztcbiAgICAgIHN3aXRjaCAoYXJnMC5sb2NhdGlvbikge1xuICAgICAgICBjYXNlICdjcHUtcGlubmVkJzoge1xuICAgICAgICAgIGNvbnN0IGV4cGVjdGVkVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gTlVNRVJJQ19URU5TT1JfVFlQRV9UT19UWVBFREFSUkFZX01BUC5nZXQodHlwZSk7XG4gICAgICAgICAgaWYgKCFleHBlY3RlZFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgdW5zdXBwb3J0ZWQgdHlwZSBcIiR7dHlwZX1cIiB0byBjcmVhdGUgdGVuc29yIGZyb20gcGlubmVkIGJ1ZmZlcmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShhcmcwLmRhdGEgaW5zdGFuY2VvZiBleHBlY3RlZFR5cGVkQXJyYXlDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGJ1ZmZlciBzaG91bGQgYmUgb2YgdHlwZSAke2V4cGVjdGVkVHlwZWRBcnJheUNvbnN0cnVjdG9yLm5hbWV9YCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuY3B1RGF0YSA9IGFyZzAuZGF0YTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICd0ZXh0dXJlJzoge1xuICAgICAgICAgIGlmICh0eXBlICE9PSAnZmxvYXQzMicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYHVuc3VwcG9ydGVkIHR5cGUgXCIke3R5cGV9XCIgdG8gY3JlYXRlIHRlbnNvciBmcm9tIHRleHR1cmVgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5ncHVUZXh0dXJlRGF0YSA9IGFyZzAudGV4dHVyZTtcbiAgICAgICAgICB0aGlzLmRvd25sb2FkZXIgPSBhcmcwLmRvd25sb2FkO1xuICAgICAgICAgIHRoaXMuZGlzcG9zZXIgPSBhcmcwLmRpc3Bvc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnZ3B1LWJ1ZmZlcic6IHtcbiAgICAgICAgICBpZiAoKHR5cGUgIT09ICdmbG9hdDMyJyAmJiB0eXBlICE9PSAnZmxvYXQxNicgJiYgdHlwZSAhPT0gJ2ludDMyJyAmJiB0eXBlICE9PSAnaW50NjQnICYmIHR5cGUgIT09ICd1aW50MzInICYmXG4gICAgICAgICAgICAgICB0eXBlICE9PSAnYm9vbCcpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGB1bnN1cHBvcnRlZCB0eXBlIFwiJHt0eXBlfVwiIHRvIGNyZWF0ZSB0ZW5zb3IgZnJvbSBncHUgYnVmZmVyYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZ3B1QnVmZmVyRGF0YSA9IGFyZzAuZ3B1QnVmZmVyO1xuICAgICAgICAgIHRoaXMuZG93bmxvYWRlciA9IGFyZzAuZG93bmxvYWQ7XG4gICAgICAgICAgdGhpcy5kaXNwb3NlciA9IGFyZzAuZGlzcG9zZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGVuc29yIGNvbnN0cnVjdG9yOiB1bnN1cHBvcnRlZCBsb2NhdGlvbiAnJHt0aGlzLmRhdGFMb2NhdGlvbn0nYCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vXG4gICAgICAvLyBjb25zdHJ1Y3RpbmcgdGVuc29yIG9mIGxvY2F0aW9uICdjcHUnXG4gICAgICAvL1xuICAgICAgbGV0IGRhdGE6IFRlbnNvckRhdGFUeXBlO1xuICAgICAgbGV0IG1heWJlRGltczogdHlwZW9mIGFyZzF8dHlwZW9mIGFyZzI7XG4gICAgICAvLyBjaGVjayB3aGV0aGVyIGFyZzAgaXMgdHlwZSBvciBkYXRhXG4gICAgICBpZiAodHlwZW9mIGFyZzAgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIE92ZXJyaWRlOiBjb25zdHJ1Y3Rvcih0eXBlLCBkYXRhLCAuLi4pXG4gICAgICAgIC8vXG4gICAgICAgIHR5cGUgPSBhcmcwO1xuICAgICAgICBtYXliZURpbXMgPSBhcmcyO1xuICAgICAgICBpZiAoYXJnMCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAvLyBzdHJpbmcgdGVuc29yXG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGFyZzEpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBIHN0cmluZyB0ZW5zb3JcXCdzIGRhdGEgbXVzdCBiZSBhIHN0cmluZyBhcnJheS4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gd2UgZG9uJ3QgY2hlY2sgd2hldGhlciBldmVyeSBlbGVtZW50IGluIHRoZSBhcnJheSBpcyBzdHJpbmc7IHRoaXMgaXMgdG9vIHNsb3cuIHdlIGFzc3VtZSBpdCdzIGNvcnJlY3QgYW5kXG4gICAgICAgICAgLy8gZXJyb3Igd2lsbCBiZSBwb3B1bGF0ZWQgYXQgaW5mZXJlbmNlXG4gICAgICAgICAgZGF0YSA9IGFyZzE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbnVtZXJpYyB0ZW5zb3JcbiAgICAgICAgICBjb25zdCB0eXBlZEFycmF5Q29uc3RydWN0b3IgPSBOVU1FUklDX1RFTlNPUl9UWVBFX1RPX1RZUEVEQVJSQVlfTUFQLmdldChhcmcwKTtcbiAgICAgICAgICBpZiAodHlwZWRBcnJheUNvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFVuc3VwcG9ydGVkIHRlbnNvciB0eXBlOiAke2FyZzB9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcxKSkge1xuICAgICAgICAgICAgaWYgKGFyZzAgPT09ICdmbG9hdDE2Jykge1xuICAgICAgICAgICAgICAvLyBUaHJvdyBlcnJvciBoZXJlIGJlY2F1c2Ugd2hlbiB1c2VyIHRyeSB0byB1c2UgbnVtYmVyIGFycmF5IGFzIGRhdGEsXG4gICAgICAgICAgICAgIC8vIGUuZy4gbmV3IFRlbnNvcignZmxvYXQxNicsIFsxLCAyLCAzLCA0XSwgZGltcykpLCBpdCB3aWxsIGFjdHVhbGx5IGNhbGxcbiAgICAgICAgICAgICAgLy8gVWludDE2QXJyYXkuZnJvbShhcmcxKSB3aGljaCBnZW5lcmF0ZXMgd3JvbmcgZGF0YS5cbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICAgICAgICdDcmVhdGluZyBhIGZsb2F0MTYgdGVuc29yIGZyb20gbnVtYmVyIGFycmF5IGlzIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSB1c2UgVWludDE2QXJyYXkgYXMgZGF0YS4nKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJnMCA9PT0gJ3VpbnQ2NCcgfHwgYXJnMCA9PT0gJ2ludDY0Jykge1xuICAgICAgICAgICAgICAvLyB1c2UgJ2FzIGFueScgaGVyZSBiZWNhdXNlOlxuICAgICAgICAgICAgICAvLyAxLiBUeXBlU2NyaXB0J3MgY2hlY2sgb24gdHlwZSBvZiAnQXJyYXkuaXNBcnJheSgpJyBkb2VzIG5vdCB3b3JrIHdpdGggcmVhZG9ubHkgYXJyYXlzLlxuICAgICAgICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8xNzAwMlxuICAgICAgICAgICAgICAvLyAyLiBUeXBlU2NyaXB0J3MgY2hlY2sgb24gdW5pb24gdHlwZSBvZiAnKEJpZ0ludDY0QXJyYXlDb25zdHJ1Y3RvcnxCaWdVaW50NjRBcnJheUNvbnN0cnVjdG9yKS5mcm9tKCknXG4gICAgICAgICAgICAgIC8vIGRvZXMgbm90IGFjY2VwdCBwYXJhbWV0ZXIgbWFwRm4uXG4gICAgICAgICAgICAgIC8vIDMuIHBhcmFtZXRlcnMgb2YgJ1N1cHBvcnRlZFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMuZnJvbSgpJyBkb2VzIG5vdCBtYXRjaCB0aGUgcmVxdWlyZW1lbnQgb2YgdGhlIHVuaW9uXG4gICAgICAgICAgICAgIC8vIHR5cGUuXG5cbiAgICAgICAgICAgICAgLy8gYXNzdW1lICdhcmcxJyBpcyBvZiB0eXBlIFwicmVhZG9ubHkgbnVtYmVyW118cmVhZG9ubHkgYmlnaW50W11cIiBoZXJlLlxuXG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICAgIGRhdGEgPSAodHlwZWRBcnJheUNvbnN0cnVjdG9yIGFzIGFueSkuZnJvbShhcmcxLCBCaWdJbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gYXNzdW1lICdhcmcxJyBpcyBvZiB0eXBlIFwicmVhZG9ubHkgbnVtYmVyW11cIiBoZXJlLlxuICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgICBkYXRhID0gKHR5cGVkQXJyYXlDb25zdHJ1Y3RvciBhcyBhbnkpLmZyb20oYXJnMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChhcmcxIGluc3RhbmNlb2YgdHlwZWRBcnJheUNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBkYXRhID0gYXJnMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgQSAke3R5cGV9IHRlbnNvcidzIGRhdGEgbXVzdCBiZSB0eXBlIG9mICR7dHlwZWRBcnJheUNvbnN0cnVjdG9yfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gT3ZlcnJpZGU6IGNvbnN0cnVjdG9yKGRhdGEsIC4uLilcbiAgICAgICAgLy9cbiAgICAgICAgbWF5YmVEaW1zID0gYXJnMTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnMCkpIHtcbiAgICAgICAgICAvLyBvbmx5IGJvb2xlYW5bXSBhbmQgc3RyaW5nW10gaXMgc3VwcG9ydGVkXG4gICAgICAgICAgaWYgKGFyZzAubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUZW5zb3IgdHlwZSBjYW5ub3QgYmUgaW5mZXJyZWQgZnJvbSBhbiBlbXB0eSBhcnJheS4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZmlyc3RFbGVtZW50VHlwZSA9IHR5cGVvZiBhcmcwWzBdO1xuICAgICAgICAgIGlmIChmaXJzdEVsZW1lbnRUeXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdHlwZSA9ICdzdHJpbmcnO1xuICAgICAgICAgICAgZGF0YSA9IGFyZzA7XG4gICAgICAgICAgfSBlbHNlIGlmIChmaXJzdEVsZW1lbnRUeXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIHR5cGUgPSAnYm9vbCc7XG4gICAgICAgICAgICAvLyAnYXJnMCcgaXMgb2YgdHlwZSAnYm9vbGVhbltdJy4gVWludDhBcnJheS5mcm9tKGJvb2xlYW5bXSkgYWN0dWFsbHkgd29ya3MsIGJ1dCB0eXBlc2NyaXB0IHRoaW5rcyB0aGlzIGlzXG4gICAgICAgICAgICAvLyB3cm9uZyB0eXBlLiBXZSB1c2UgJ2FzIGFueScgdG8gbWFrZSBpdCBoYXBweS5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICAgICBkYXRhID0gVWludDhBcnJheS5mcm9tKGFyZzAgYXMgYW55W10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGVsZW1lbnQgdHlwZSBvZiBkYXRhIGFycmF5OiAke2ZpcnN0RWxlbWVudFR5cGV9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBnZXQgdGVuc29yIHR5cGUgZnJvbSBUeXBlZEFycmF5XG4gICAgICAgICAgY29uc3QgbWFwcGVkVHlwZSA9XG4gICAgICAgICAgICAgIE5VTUVSSUNfVEVOU09SX1RZUEVEQVJSQVlfVE9fVFlQRV9NQVAuZ2V0KGFyZzAuY29uc3RydWN0b3IgYXMgU3VwcG9ydGVkVHlwZWRBcnJheUNvbnN0cnVjdG9ycyk7XG4gICAgICAgICAgaWYgKG1hcHBlZFR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVW5zdXBwb3J0ZWQgdHlwZSBmb3IgdGVuc29yIGRhdGE6ICR7YXJnMC5jb25zdHJ1Y3Rvcn0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHR5cGUgPSBtYXBwZWRUeXBlO1xuICAgICAgICAgIGRhdGEgPSBhcmcwIGFzIFN1cHBvcnRlZFR5cGVkQXJyYXk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gdHlwZSBhbmQgZGF0YSBpcyBwcm9jZXNzZWQsIG5vdyBwcm9jZXNzaW5nIGRpbXNcbiAgICAgIGlmIChtYXliZURpbXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBhc3N1bWUgMS1EIHRlbnNvciBpZiBkaW1zIG9taXR0ZWRcbiAgICAgICAgbWF5YmVEaW1zID0gW2RhdGEubGVuZ3RoXTtcbiAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkobWF5YmVEaW1zKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBIHRlbnNvclxcJ3MgZGltcyBtdXN0IGJlIGEgbnVtYmVyIGFycmF5Jyk7XG4gICAgICB9XG4gICAgICBkaW1zID0gbWF5YmVEaW1zIGFzIHJlYWRvbmx5IG51bWJlcltdO1xuXG4gICAgICB0aGlzLmNwdURhdGEgPSBkYXRhO1xuICAgICAgdGhpcy5kYXRhTG9jYXRpb24gPSAnY3B1JztcbiAgICB9XG5cbiAgICAvLyBwZXJmb3JtIGNoZWNrIG9uIGRpbXNcbiAgICBjb25zdCBzaXplID0gY2FsY3VsYXRlU2l6ZShkaW1zKTtcbiAgICAvLyBpZiBkYXRhIGlzIG9uIENQVSwgY2hlY2sgd2hldGhlciBkYXRhIGxlbmd0aCBtYXRjaGVzIHRlbnNvciBzaXplXG4gICAgaWYgKHRoaXMuY3B1RGF0YSAmJiBzaXplICE9PSB0aGlzLmNwdURhdGEubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRlbnNvcidzIHNpemUoJHtzaXplfSkgZG9lcyBub3QgbWF0Y2ggZGF0YSBsZW5ndGgoJHt0aGlzLmNwdURhdGEubGVuZ3RofSkuYCk7XG4gICAgfVxuXG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmRpbXMgPSBkaW1zO1xuICAgIHRoaXMuc2l6ZSA9IHNpemU7XG4gIH1cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gZmFjdG9yeVxuICBzdGF0aWMgYXN5bmMgZnJvbUltYWdlKFxuICAgICAgaW1hZ2U6IEltYWdlRGF0YXxIVE1MSW1hZ2VFbGVtZW50fEltYWdlQml0bWFwfHN0cmluZyxcbiAgICAgIG9wdGlvbnM/OiBUZW5zb3JGcm9tSW1hZ2VEYXRhT3B0aW9uc3xUZW5zb3JGcm9tSW1hZ2VFbGVtZW50T3B0aW9uc3xUZW5zb3JGcm9tSW1hZ2VCaXRtYXBPcHRpb25zfFxuICAgICAgVGVuc29yRnJvbVVybE9wdGlvbnMpOiBQcm9taXNlPFRlbnNvckludGVyZmFjZT4ge1xuICAgIHJldHVybiB0ZW5zb3JGcm9tSW1hZ2UoaW1hZ2UsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21UZXh0dXJlPFQgZXh0ZW5kcyBUZW5zb3JJbnRlcmZhY2UuVGV4dHVyZURhdGFUeXBlcz4oXG4gICAgICB0ZXh0dXJlOiBUZW5zb3JUZXh0dXJlVHlwZSwgb3B0aW9uczogVGVuc29yRnJvbVRleHR1cmVPcHRpb25zPFQ+KTogVGVuc29ySW50ZXJmYWNlIHtcbiAgICByZXR1cm4gdGVuc29yRnJvbVRleHR1cmUodGV4dHVyZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUdwdUJ1ZmZlcjxUIGV4dGVuZHMgVGVuc29ySW50ZXJmYWNlLkdwdUJ1ZmZlckRhdGFUeXBlcz4oXG4gICAgICBncHVCdWZmZXI6IFRlbnNvckdwdUJ1ZmZlclR5cGUsIG9wdGlvbnM6IFRlbnNvckZyb21HcHVCdWZmZXJPcHRpb25zPFQ+KTogVGVuc29ySW50ZXJmYWNlIHtcbiAgICByZXR1cm4gdGVuc29yRnJvbUdwdUJ1ZmZlcihncHVCdWZmZXIsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21QaW5uZWRCdWZmZXI8VCBleHRlbmRzIFRlbnNvckludGVyZmFjZS5DcHVQaW5uZWREYXRhVHlwZXM+KFxuICAgICAgdHlwZTogVCwgYnVmZmVyOiBUZW5zb3JJbnRlcmZhY2UuRGF0YVR5cGVNYXBbVF0sIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFRlbnNvciB7XG4gICAgcmV0dXJuIHRlbnNvckZyb21QaW5uZWRCdWZmZXIodHlwZSwgYnVmZmVyLCBkaW1zKTtcbiAgfVxuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIGNvbnZlcnNpb25zXG4gIHRvRGF0YVVSTChvcHRpb25zPzogVGVuc29yVG9EYXRhVXJsT3B0aW9ucyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRlbnNvclRvRGF0YVVSTCh0aGlzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHRvSW1hZ2VEYXRhKG9wdGlvbnM/OiBUZW5zb3JUb0ltYWdlRGF0YU9wdGlvbnMpOiBJbWFnZURhdGEge1xuICAgIHJldHVybiB0ZW5zb3JUb0ltYWdlRGF0YSh0aGlzLCBvcHRpb25zKTtcbiAgfVxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBwdWJsaWMgZmllbGRzXG4gIHJlYWRvbmx5IGRpbXM6IHJlYWRvbmx5IG51bWJlcltdO1xuICByZWFkb25seSB0eXBlOiBUZW5zb3JUeXBlO1xuICByZWFkb25seSBzaXplOiBudW1iZXI7XG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHByaXZhdGUgZmllbGRzXG5cbiAgLyoqXG4gICAqIHN0b3JlcyB0aGUgbG9jYXRpb24gb2YgdGhlIGRhdGEuXG4gICAqL1xuICBwcml2YXRlIGRhdGFMb2NhdGlvbjogVGVuc29yRGF0YUxvY2F0aW9uO1xuXG4gIC8qKlxuICAgKiBzdG9yZXMgdGhlIGRhdGEgb24gQ1BVLCBpZiBsb2NhdGlvbiBpcyAnY3B1JyBvciAnY3B1LXBpbm5lZCcuIG90aGVyd2lzZSBlbXB0eS5cbiAgICovXG4gIHByaXZhdGUgY3B1RGF0YT86IFRlbnNvckRhdGFUeXBlO1xuXG4gIC8qKlxuICAgKiBzdG9yZXMgdGhlIHVuZGVybHlpbmcgdGV4dHVyZSB3aGVuIGxvY2F0aW9uIGlzICd0ZXh0dXJlJy4gb3RoZXJ3aXNlIGVtcHR5LlxuICAgKi9cbiAgcHJpdmF0ZSBncHVUZXh0dXJlRGF0YT86IFRlbnNvclRleHR1cmVUeXBlO1xuXG4gIC8qKlxuICAgKiBzdG9yZXMgdGhlIHVuZGVybHlpbmcgR1BVIGJ1ZmZlciB3aGVuIGxvY2F0aW9uIGlzICdncHUtYnVmZmVyJy4gb3RoZXJ3aXNlIGVtcHR5LlxuICAgKi9cbiAgcHJpdmF0ZSBncHVCdWZmZXJEYXRhPzogVGVuc29yR3B1QnVmZmVyVHlwZTtcblxuICAvKipcbiAgICogc3RvcmVzIGFuIG9wdGlvbmFsIGRvd25sb2FkZXIgZnVuY3Rpb24gdG8gZG93bmxvYWQgZGF0YSBmcm9tIEdQVSB0byBDUFUuXG4gICAqL1xuICBwcml2YXRlIGRvd25sb2FkZXI/KCk6IFByb21pc2U8VGVuc29yRGF0YVR5cGU+O1xuXG4gIC8qKlxuICAgKiBhIGZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBkYXRhIGlzIGJlaW5nIGRvd25sb2FkZWQgZnJvbSBHUFUgdG8gQ1BVLlxuICAgKi9cbiAgcHJpdmF0ZSBpc0Rvd25sb2FkaW5nPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogc3RvcmVzIGFuIG9wdGlvbmFsIGRpc3Bvc2VyIGZ1bmN0aW9uIHRvIGRpc3Bvc2UgdGhlIHVuZGVybHlpbmcgZGF0YS5cbiAgICovXG4gIHByaXZhdGUgZGlzcG9zZXI/KCk6IHZvaWQ7XG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIHByb3BlcnRpZXNcbiAgZ2V0IGRhdGEoKTogVGVuc29yRGF0YVR5cGUge1xuICAgIHRoaXMuZW5zdXJlVmFsaWQoKTtcbiAgICBpZiAoIXRoaXMuY3B1RGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdUaGUgZGF0YSBpcyBub3Qgb24gQ1BVLiBVc2UgYGdldERhdGEoKWAgdG8gZG93bmxvYWQgR1BVIGRhdGEgdG8gQ1BVLCAnICtcbiAgICAgICAgICAnb3IgdXNlIGB0ZXh0dXJlYCBvciBgZ3B1QnVmZmVyYCBwcm9wZXJ0eSB0byBhY2Nlc3MgdGhlIEdQVSBkYXRhIGRpcmVjdGx5LicpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jcHVEYXRhO1xuICB9XG5cbiAgZ2V0IGxvY2F0aW9uKCk6IFRlbnNvckRhdGFMb2NhdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YUxvY2F0aW9uO1xuICB9XG5cbiAgZ2V0IHRleHR1cmUoKTogVGVuc29yVGV4dHVyZVR5cGUge1xuICAgIHRoaXMuZW5zdXJlVmFsaWQoKTtcbiAgICBpZiAoIXRoaXMuZ3B1VGV4dHVyZURhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGRhdGEgaXMgbm90IHN0b3JlZCBhcyBhIFdlYkdMIHRleHR1cmUuJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdwdVRleHR1cmVEYXRhO1xuICB9XG5cbiAgZ2V0IGdwdUJ1ZmZlcigpOiBUZW5zb3JHcHVCdWZmZXJUeXBlIHtcbiAgICB0aGlzLmVuc3VyZVZhbGlkKCk7XG4gICAgaWYgKCF0aGlzLmdwdUJ1ZmZlckRhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGRhdGEgaXMgbm90IHN0b3JlZCBhcyBhIFdlYkdQVSBidWZmZXIuJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdwdUJ1ZmZlckRhdGE7XG4gIH1cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gbWV0aG9kc1xuXG4gIGFzeW5jIGdldERhdGEocmVsZWFzZURhdGE/OiBib29sZWFuKTogUHJvbWlzZTxUZW5zb3JEYXRhVHlwZT4ge1xuICAgIHRoaXMuZW5zdXJlVmFsaWQoKTtcbiAgICBzd2l0Y2ggKHRoaXMuZGF0YUxvY2F0aW9uKSB7XG4gICAgICBjYXNlICdjcHUnOlxuICAgICAgY2FzZSAnY3B1LXBpbm5lZCc6XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGE7XG4gICAgICBjYXNlICd0ZXh0dXJlJzpcbiAgICAgIGNhc2UgJ2dwdS1idWZmZXInOiB7XG4gICAgICAgIGlmICghdGhpcy5kb3dubG9hZGVyKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgY3VycmVudCB0ZW5zb3IgaXMgbm90IGNyZWF0ZWQgd2l0aCBhIHNwZWNpZmllZCBkYXRhIGRvd25sb2FkZXIuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNEb3dubG9hZGluZykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGN1cnJlbnQgdGVuc29yIGlzIGJlaW5nIGRvd25sb2FkZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmlzRG93bmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmRvd25sb2FkZXIoKTtcbiAgICAgICAgICB0aGlzLmRvd25sb2FkZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgdGhpcy5kYXRhTG9jYXRpb24gPSAnY3B1JztcbiAgICAgICAgICB0aGlzLmNwdURhdGEgPSBkYXRhO1xuXG4gICAgICAgICAgaWYgKHJlbGVhc2VEYXRhICYmIHRoaXMuZGlzcG9zZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZXIoKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGRhdGE7XG5cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aGlzLmlzRG93bmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZ2V0IGRhdGEgZnJvbSBsb2NhdGlvbjogJHt0aGlzLmRhdGFMb2NhdGlvbn1gKTtcbiAgICB9XG4gIH1cblxuICBkaXNwb3NlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmlzRG93bmxvYWRpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGN1cnJlbnQgdGVuc29yIGlzIGJlaW5nIGRvd25sb2FkZWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGlzcG9zZXIpIHtcbiAgICAgIHRoaXMuZGlzcG9zZXIoKTtcbiAgICAgIHRoaXMuZGlzcG9zZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRoaXMuY3B1RGF0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmdwdVRleHR1cmVEYXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuZ3B1QnVmZmVyRGF0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmRvd25sb2FkZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5pc0Rvd25sb2FkaW5nID0gdW5kZWZpbmVkO1xuXG4gICAgdGhpcy5kYXRhTG9jYXRpb24gPSAnbm9uZSc7XG4gIH1cblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiB0ZW5zb3IgdXRpbGl0aWVzXG4gIHByaXZhdGUgZW5zdXJlVmFsaWQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZGF0YUxvY2F0aW9uID09PSAnbm9uZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHRlbnNvciBpcyBkaXNwb3NlZC4nKTtcbiAgICB9XG4gIH1cblxuICByZXNoYXBlKGRpbXM6IHJlYWRvbmx5IG51bWJlcltdKTogVGVuc29ySW50ZXJmYWNlIHtcbiAgICB0aGlzLmVuc3VyZVZhbGlkKCk7XG4gICAgaWYgKHRoaXMuZG93bmxvYWRlciB8fCB0aGlzLmRpc3Bvc2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZXNoYXBlIGEgdGVuc29yIHRoYXQgb3ducyBHUFUgcmVzb3VyY2UuJyk7XG4gICAgfVxuICAgIHJldHVybiB0ZW5zb3JSZXNoYXBlKHRoaXMsIGRpbXMpO1xuICB9XG4gIC8vICNlbmRyZWdpb25cbn1cbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtUZW5zb3JGYWN0b3J5fSBmcm9tICcuL3RlbnNvci1mYWN0b3J5LmpzJztcbmltcG9ydCB7VGVuc29yIGFzIFRlbnNvckltcGx9IGZyb20gJy4vdGVuc29yLWltcGwuanMnO1xuaW1wb3J0IHtUeXBlZFRlbnNvclV0aWxzfSBmcm9tICcuL3RlbnNvci11dGlscy5qcyc7XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmUgKi9cblxuLyoqXG4gKiByZXByZXNlbnQgYSBiYXNpYyB0ZW5zb3Igd2l0aCBzcGVjaWZpZWQgZGltZW5zaW9ucyBhbmQgZGF0YSB0eXBlLlxuICovXG5pbnRlcmZhY2UgVHlwZWRUZW5zb3JCYXNlPFQgZXh0ZW5kcyBUZW5zb3IuVHlwZT4ge1xuICAvKipcbiAgICogR2V0IHRoZSBkaW1lbnNpb25zIG9mIHRoZSB0ZW5zb3IuXG4gICAqL1xuICByZWFkb25seSBkaW1zOiByZWFkb25seSBudW1iZXJbXTtcbiAgLyoqXG4gICAqIEdldCB0aGUgZGF0YSB0eXBlIG9mIHRoZSB0ZW5zb3IuXG4gICAqL1xuICByZWFkb25seSB0eXBlOiBUO1xuICAvKipcbiAgICogR2V0IHRoZSBidWZmZXIgZGF0YSBvZiB0aGUgdGVuc29yLlxuICAgKlxuICAgKiBJZiB0aGUgZGF0YSBpcyBub3Qgb24gQ1BVIChlZy4gaXQncyBpbiB0aGUgZm9ybSBvZiBXZWJHTCB0ZXh0dXJlIG9yIFdlYkdQVSBidWZmZXIpLCB0aHJvdyBlcnJvci5cbiAgICovXG4gIHJlYWRvbmx5IGRhdGE6IFRlbnNvci5EYXRhVHlwZU1hcFtUXTtcbiAgLyoqXG4gICAqIEdldCB0aGUgbG9jYXRpb24gb2YgdGhlIGRhdGEuXG4gICAqL1xuICByZWFkb25seSBsb2NhdGlvbjogVGVuc29yLkRhdGFMb2NhdGlvbjtcbiAgLyoqXG4gICAqIEdldCB0aGUgV2ViR0wgdGV4dHVyZSB0aGF0IGhvbGRzIHRoZSB0ZW5zb3IgZGF0YS5cbiAgICpcbiAgICogSWYgdGhlIGRhdGEgaXMgbm90IG9uIEdQVSBhcyBXZWJHTCB0ZXh0dXJlLCB0aHJvdyBlcnJvci5cbiAgICovXG4gIHJlYWRvbmx5IHRleHR1cmU6IFRlbnNvci5UZXh0dXJlVHlwZTtcbiAgLyoqXG4gICAqIEdldCB0aGUgV2ViR1BVIGJ1ZmZlciB0aGF0IGhvbGRzIHRoZSB0ZW5zb3IgZGF0YS5cbiAgICpcbiAgICogSWYgdGhlIGRhdGEgaXMgbm90IG9uIEdQVSBhcyBXZWJHUFUgYnVmZmVyLCB0aHJvdyBlcnJvci5cbiAgICovXG4gIHJlYWRvbmx5IGdwdUJ1ZmZlcjogVGVuc29yLkdwdUJ1ZmZlclR5cGU7XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgYnVmZmVyIGRhdGEgb2YgdGhlIHRlbnNvci5cbiAgICpcbiAgICogSWYgdGhlIGRhdGEgaXMgb24gQ1BVLCByZXR1cm5zIHRoZSBkYXRhIGltbWVkaWF0ZWx5LlxuICAgKiBJZiB0aGUgZGF0YSBpcyBvbiBHUFUsIGRvd25sb2FkcyB0aGUgZGF0YSBhbmQgcmV0dXJucyB0aGUgcHJvbWlzZS5cbiAgICpcbiAgICogQHBhcmFtIHJlbGVhc2VEYXRhIC0gd2hldGhlciByZWxlYXNlIHRoZSBkYXRhIG9uIEdQVS4gSWdub3JlIGlmIGRhdGEgaXMgYWxyZWFkeSBvbiBDUFUuXG4gICAqL1xuICBnZXREYXRhKHJlbGVhc2VEYXRhPzogYm9vbGVhbik6IFByb21pc2U8VGVuc29yLkRhdGFUeXBlTWFwW1RdPjtcblxuICAvKipcbiAgICogRGlzcG9zZSB0aGUgdGVuc29yIGRhdGEuXG4gICAqXG4gICAqIElmIHRoZSBkYXRhIGlzIG9uIENQVSwgcmVtb3ZlIGl0cyBpbnRlcm5hbCByZWZlcmVuY2UgdG8gdGhlIHVuZGVybHlpbmcgZGF0YS5cbiAgICogSWYgdGhlIGRhdGEgaXMgb24gR1BVLCByZWxlYXNlIHRoZSBkYXRhIG9uIEdQVS5cbiAgICpcbiAgICogQWZ0ZXIgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLCB0aGUgdGVuc29yIGlzIGNvbnNpZGVyZWQgbm8gbG9uZ2VyIHZhbGlkLiBJdHMgbG9jYXRpb24gd2lsbCBiZSBzZXQgdG8gJ25vbmUnLlxuICAgKi9cbiAgZGlzcG9zZSgpOiB2b2lkO1xufVxuXG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgVGVuc29yIHtcbiAgaW50ZXJmYWNlIERhdGFUeXBlTWFwIHtcbiAgICBmbG9hdDMyOiBGbG9hdDMyQXJyYXk7XG4gICAgdWludDg6IFVpbnQ4QXJyYXk7XG4gICAgaW50ODogSW50OEFycmF5O1xuICAgIHVpbnQxNjogVWludDE2QXJyYXk7XG4gICAgaW50MTY6IEludDE2QXJyYXk7XG4gICAgaW50MzI6IEludDMyQXJyYXk7XG4gICAgaW50NjQ6IEJpZ0ludDY0QXJyYXk7XG4gICAgc3RyaW5nOiBzdHJpbmdbXTtcbiAgICBib29sOiBVaW50OEFycmF5O1xuICAgIGZsb2F0MTY6IFVpbnQxNkFycmF5OyAgLy8gS2VlcCB1c2luZyBVaW50MTZBcnJheSB1bnRpbCB3ZSBoYXZlIGEgY29uY3JldGUgc29sdXRpb24gZm9yIGZsb2F0IDE2LlxuICAgIGZsb2F0NjQ6IEZsb2F0NjRBcnJheTtcbiAgICB1aW50MzI6IFVpbnQzMkFycmF5O1xuICAgIHVpbnQ2NDogQmlnVWludDY0QXJyYXk7XG4gICAgLy8gY29tcGxleDY0OiBuZXZlcjtcbiAgICAvLyBjb21wbGV4MTI4OiBuZXZlcjtcbiAgICAvLyBiZmxvYXQxNjogbmV2ZXI7XG4gIH1cblxuICBpbnRlcmZhY2UgRWxlbWVudFR5cGVNYXAge1xuICAgIGZsb2F0MzI6IG51bWJlcjtcbiAgICB1aW50ODogbnVtYmVyO1xuICAgIGludDg6IG51bWJlcjtcbiAgICB1aW50MTY6IG51bWJlcjtcbiAgICBpbnQxNjogbnVtYmVyO1xuICAgIGludDMyOiBudW1iZXI7XG4gICAgaW50NjQ6IGJpZ2ludDtcbiAgICBzdHJpbmc6IHN0cmluZztcbiAgICBib29sOiBib29sZWFuO1xuICAgIGZsb2F0MTY6IG51bWJlcjsgIC8vIEtlZXAgdXNpbmcgVWludDE2QXJyYXkgdW50aWwgd2UgaGF2ZSBhIGNvbmNyZXRlIHNvbHV0aW9uIGZvciBmbG9hdCAxNi5cbiAgICBmbG9hdDY0OiBudW1iZXI7XG4gICAgdWludDMyOiBudW1iZXI7XG4gICAgdWludDY0OiBiaWdpbnQ7XG4gICAgLy8gY29tcGxleDY0OiBuZXZlcjtcbiAgICAvLyBjb21wbGV4MTI4OiBuZXZlcjtcbiAgICAvLyBiZmxvYXQxNjogbmV2ZXI7XG4gIH1cblxuICB0eXBlIERhdGFUeXBlID0gRGF0YVR5cGVNYXBbVHlwZV07XG4gIHR5cGUgRWxlbWVudFR5cGUgPSBFbGVtZW50VHlwZU1hcFtUeXBlXTtcblxuICAvKipcbiAgICogc3VwcG9ydGVkIGRhdGEgdHlwZXMgZm9yIGNvbnN0cnVjdGluZyBhIHRlbnNvciBmcm9tIGEgcGlubmVkIENQVSBidWZmZXJcbiAgICovXG4gIGV4cG9ydCB0eXBlIENwdVBpbm5lZERhdGFUeXBlcyA9IEV4Y2x1ZGU8VGVuc29yLlR5cGUsICdzdHJpbmcnPjtcblxuICAvKipcbiAgICogdHlwZSBhbGlhcyBmb3IgV2ViR0wgdGV4dHVyZVxuICAgKi9cbiAgZXhwb3J0IHR5cGUgVGV4dHVyZVR5cGUgPSBXZWJHTFRleHR1cmU7XG5cbiAgLyoqXG4gICAqIHN1cHBvcnRlZCBkYXRhIHR5cGVzIGZvciBjb25zdHJ1Y3RpbmcgYSB0ZW5zb3IgZnJvbSBhIFdlYkdMIHRleHR1cmVcbiAgICovXG4gIGV4cG9ydCB0eXBlIFRleHR1cmVEYXRhVHlwZXMgPSAnZmxvYXQzMic7XG5cbiAgLyoqXG4gICAqIHR5cGUgYWxpYXMgZm9yIFdlYkdQVSBidWZmZXJcbiAgICpcbiAgICogVGhlIHJlYXNvbiB3aHkgd2UgZG9uJ3QgdXNlIHR5cGUgXCJHUFVCdWZmZXJcIiBkZWZpbmVkIGluIHdlYmdwdS5kLnRzIGZyb20gQHdlYmdwdS90eXBlcyBpcyBiZWNhdXNlIFwiQHdlYmdwdS90eXBlc1wiXG4gICAqIHJlcXVpcmVzIFwiQHR5cGVzL2RvbS13ZWJjb2RlY3NcIiBhcyBwZWVyIGRlcGVuZGVuY3kgd2hlbiB1c2luZyBUeXBlU2NyaXB0IDwgdjUuMSBhbmQgaXRzIHZlcnNpb24gbmVlZCB0byBiZSBjaG9zZW5cbiAgICogY2FyZWZ1bGx5IGFjY29yZGluZyB0byB0aGUgVHlwZVNjcmlwdCB2ZXJzaW9uIGJlaW5nIHVzZWQuIFRoaXMgbWVhbnMgc28gZmFyIHRoZXJlIGlzIG5vdCBhIHdheSB0byBrZWVwIGV2ZXJ5XG4gICAqIFR5cGVTY3JpcHQgdmVyc2lvbiBoYXBweS4gSXQgdHVybnMgb3V0IHRoYXQgd2Ugd2lsbCBlYXNpbHkgYnJva2UgdXNlcnMgb24gc29tZSBUeXBlU2NyaXB0IHZlcnNpb24uXG4gICAqXG4gICAqIGZvciBtb3JlIGluZm8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncHV3ZWIvdHlwZXMvaXNzdWVzLzEyN1xuICAgKi9cbiAgZXhwb3J0IHR5cGUgR3B1QnVmZmVyVHlwZSA9IHtzaXplOiBudW1iZXI7IG1hcFN0YXRlOiAndW5tYXBwZWQnIHwgJ3BlbmRpbmcnIHwgJ21hcHBlZCd9O1xuXG4gIC8qKlxuICAgKiBzdXBwb3J0ZWQgZGF0YSB0eXBlcyBmb3IgY29uc3RydWN0aW5nIGEgdGVuc29yIGZyb20gYSBXZWJHUFUgYnVmZmVyXG4gICAqL1xuICBleHBvcnQgdHlwZSBHcHVCdWZmZXJEYXRhVHlwZXMgPSAnZmxvYXQzMid8J2Zsb2F0MTYnfCdpbnQzMid8J2ludDY0J3wndWludDMyJ3wnYm9vbCc7XG5cbiAgLyoqXG4gICAqIHJlcHJlc2VudCB3aGVyZSB0aGUgdGVuc29yIGRhdGEgaXMgc3RvcmVkXG4gICAqL1xuICBleHBvcnQgdHlwZSBEYXRhTG9jYXRpb24gPSAnbm9uZSd8J2NwdSd8J2NwdS1waW5uZWQnfCd0ZXh0dXJlJ3wnZ3B1LWJ1ZmZlcic7XG5cbiAgLyoqXG4gICAqIHJlcHJlc2VudCB0aGUgZGF0YSB0eXBlIG9mIGEgdGVuc29yXG4gICAqL1xuICBleHBvcnQgdHlwZSBUeXBlID0ga2V5b2YgRGF0YVR5cGVNYXA7XG59XG5cbi8qKlxuICogUmVwcmVzZW50IG11bHRpLWRpbWVuc2lvbmFsIGFycmF5cyB0byBmZWVkIHRvIG9yIGZldGNoIGZyb20gbW9kZWwgaW5mZXJlbmNpbmcuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHlwZWRUZW5zb3I8VCBleHRlbmRzIFRlbnNvci5UeXBlPiBleHRlbmRzIFR5cGVkVGVuc29yQmFzZTxUPiwgVHlwZWRUZW5zb3JVdGlsczxUPiB7fVxuLyoqXG4gKiBSZXByZXNlbnQgbXVsdGktZGltZW5zaW9uYWwgYXJyYXlzIHRvIGZlZWQgdG8gb3IgZmV0Y2ggZnJvbSBtb2RlbCBpbmZlcmVuY2luZy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUZW5zb3IgZXh0ZW5kcyBUeXBlZFRlbnNvckJhc2U8VGVuc29yLlR5cGU+LCBUeXBlZFRlbnNvclV0aWxzPFRlbnNvci5UeXBlPiB7fVxuXG4vKipcbiAqIHR5cGUgVGVuc29yQ29uc3RydWN0b3IgZGVmaW5lcyB0aGUgY29uc3RydWN0b3JzIG9mICdUZW5zb3InIHRvIGNyZWF0ZSBDUFUgdGVuc29yIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUZW5zb3JDb25zdHJ1Y3RvciB7XG4gIC8vICNyZWdpb24gQ1BVIHRlbnNvciAtIHNwZWNpZnkgZWxlbWVudCB0eXBlXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgc3RyaW5nIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gdHlwZSwgZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIHR5cGUgLSBTcGVjaWZ5IHRoZSBlbGVtZW50IHR5cGUuXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyh0eXBlOiAnc3RyaW5nJywgZGF0YTogVGVuc29yLkRhdGFUeXBlTWFwWydzdHJpbmcnXXxyZWFkb25seSBzdHJpbmdbXSxcbiAgICAgIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdzdHJpbmcnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IGJvb2wgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiB0eXBlLCBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gdHlwZSAtIFNwZWNpZnkgdGhlIGVsZW1lbnQgdHlwZS5cbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KHR5cGU6ICdib29sJywgZGF0YTogVGVuc29yLkRhdGFUeXBlTWFwWydib29sJ118cmVhZG9ubHkgYm9vbGVhbltdLCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnYm9vbCc+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgNjQtYml0IGludGVnZXIgdHlwZWQgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiB0eXBlLCBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gdHlwZSAtIFNwZWNpZnkgdGhlIGVsZW1lbnQgdHlwZS5cbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3PFQgZXh0ZW5kcyAndWludDY0J3wnaW50NjQnPihcbiAgICAgIHR5cGU6IFQsIGRhdGE6IFRlbnNvci5EYXRhVHlwZU1hcFtUXXxyZWFkb25seSBiaWdpbnRbXXxyZWFkb25seSBudW1iZXJbXSxcbiAgICAgIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPFQ+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgbnVtZXJpYyB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIHR5cGUsIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSB0eXBlIC0gU3BlY2lmeSB0aGUgZWxlbWVudCB0eXBlLlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXc8VCBleHRlbmRzIEV4Y2x1ZGU8VGVuc29yLlR5cGUsICdzdHJpbmcnfCdib29sJ3wndWludDY0J3wnaW50NjQnPj4oXG4gICAgICB0eXBlOiBULCBkYXRhOiBUZW5zb3IuRGF0YVR5cGVNYXBbVF18cmVhZG9ubHkgbnVtYmVyW10sIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPFQ+O1xuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBDUFUgdGVuc29yIC0gaW5mZXIgZWxlbWVudCB0eXBlc1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgZmxvYXQzMiB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBGbG9hdDMyQXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdmbG9hdDMyJz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBpbnQ4IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IEludDhBcnJheSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J2ludDgnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHVpbnQ4IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IFVpbnQ4QXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCd1aW50OCc+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgdWludDE2IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IFVpbnQxNkFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwndWludDE2Jz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBpbnQxNiB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBJbnQxNkFycmF5LCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnaW50MTYnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IGludDMyIHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IEludDMyQXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdpbnQzMic+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgaW50NjQgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogQmlnSW50NjRBcnJheSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J2ludDY0Jz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyBzdHJpbmcgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogcmVhZG9ubHkgc3RyaW5nW10sIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdzdHJpbmcnPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IGJvb2wgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogcmVhZG9ubHkgYm9vbGVhbltdLCBkaW1zPzogcmVhZG9ubHkgbnVtYmVyW10pOiBUeXBlZFRlbnNvcjwnYm9vbCc+O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcgZmxvYXQ2NCB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBGbG9hdDY0QXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCdmbG9hdDY0Jz47XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdCBhIG5ldyB1aW50MzIgdGVuc29yIG9iamVjdCBmcm9tIHRoZSBnaXZlbiBkYXRhIGFuZCBkaW1zLlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSAtIFNwZWNpZnkgdGhlIENQVSB0ZW5zb3IgZGF0YS5cbiAgICogQHBhcmFtIGRpbXMgLSBTcGVjaWZ5IHRoZSBkaW1lbnNpb24gb2YgdGhlIHRlbnNvci4gSWYgb21pdHRlZCwgYSAxLUQgdGVuc29yIGlzIGFzc3VtZWQuXG4gICAqL1xuICBuZXcoZGF0YTogVWludDMyQXJyYXksIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFR5cGVkVGVuc29yPCd1aW50MzInPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHVpbnQ2NCB0ZW5zb3Igb2JqZWN0IGZyb20gdGhlIGdpdmVuIGRhdGEgYW5kIGRpbXMuXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyhkYXRhOiBCaWdVaW50NjRBcnJheSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVHlwZWRUZW5zb3I8J3VpbnQ2NCc+O1xuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIENQVSB0ZW5zb3IgLSBmYWxsIGJhY2sgdG8gbm9uLWdlbmVyaWMgdGVuc29yIHR5cGUgZGVjbGFyYXRpb25cblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gdHlwZSwgZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIHR5cGUgLSBTcGVjaWZ5IHRoZSBlbGVtZW50IHR5cGUuXG4gICAqIEBwYXJhbSBkYXRhIC0gU3BlY2lmeSB0aGUgQ1BVIHRlbnNvciBkYXRhLlxuICAgKiBAcGFyYW0gZGltcyAtIFNwZWNpZnkgdGhlIGRpbWVuc2lvbiBvZiB0aGUgdGVuc29yLiBJZiBvbWl0dGVkLCBhIDEtRCB0ZW5zb3IgaXMgYXNzdW1lZC5cbiAgICovXG4gIG5ldyh0eXBlOiBUZW5zb3IuVHlwZSwgZGF0YTogVGVuc29yLkRhdGFUeXBlfHJlYWRvbmx5IG51bWJlcltdfHJlYWRvbmx5IHN0cmluZ1tdfHJlYWRvbmx5IGJpZ2ludFtdfHJlYWRvbmx5IGJvb2xlYW5bXSxcbiAgICAgIGRpbXM/OiByZWFkb25seSBudW1iZXJbXSk6IFRlbnNvcjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgbmV3IHRlbnNvciBvYmplY3QgZnJvbSB0aGUgZ2l2ZW4gZGF0YSBhbmQgZGltcy5cbiAgICpcbiAgICogQHBhcmFtIGRhdGEgLSBTcGVjaWZ5IHRoZSBDUFUgdGVuc29yIGRhdGEuXG4gICAqIEBwYXJhbSBkaW1zIC0gU3BlY2lmeSB0aGUgZGltZW5zaW9uIG9mIHRoZSB0ZW5zb3IuIElmIG9taXR0ZWQsIGEgMS1EIHRlbnNvciBpcyBhc3N1bWVkLlxuICAgKi9cbiAgbmV3KGRhdGE6IFRlbnNvci5EYXRhVHlwZSwgZGltcz86IHJlYWRvbmx5IG51bWJlcltdKTogVGVuc29yO1xuICAvLyAjZW5kcmVnaW9uXG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBjb25zdCBUZW5zb3IgPSBUZW5zb3JJbXBsIGFzIChUZW5zb3JDb25zdHJ1Y3RvciAmIFRlbnNvckZhY3RvcnkpO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge3Jlc29sdmVCYWNrZW5kfSBmcm9tICcuL2JhY2tlbmQtaW1wbC5qcyc7XG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb25IYW5kbGVyfSBmcm9tICcuL2JhY2tlbmQuanMnO1xuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9uIGFzIEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2V9IGZyb20gJy4vaW5mZXJlbmNlLXNlc3Npb24uanMnO1xuaW1wb3J0IHtPbm54VmFsdWV9IGZyb20gJy4vb25ueC12YWx1ZS5qcyc7XG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi90ZW5zb3IuanMnO1xuXG50eXBlIFNlc3Npb25PcHRpb25zID0gSW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZS5TZXNzaW9uT3B0aW9ucztcbnR5cGUgUnVuT3B0aW9ucyA9IEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2UuUnVuT3B0aW9ucztcbnR5cGUgRmVlZHNUeXBlID0gSW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZS5GZWVkc1R5cGU7XG50eXBlIEZldGNoZXNUeXBlID0gSW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZS5GZXRjaGVzVHlwZTtcbnR5cGUgUmV0dXJuVHlwZSA9IEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2UuUmV0dXJuVHlwZTtcblxuZXhwb3J0IGNsYXNzIEluZmVyZW5jZVNlc3Npb24gaW1wbGVtZW50cyBJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlIHtcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcihoYW5kbGVyOiBJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcikge1xuICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG4gIH1cbiAgcnVuKGZlZWRzOiBGZWVkc1R5cGUsIG9wdGlvbnM/OiBSdW5PcHRpb25zKTogUHJvbWlzZTxSZXR1cm5UeXBlPjtcbiAgcnVuKGZlZWRzOiBGZWVkc1R5cGUsIGZldGNoZXM6IEZldGNoZXNUeXBlLCBvcHRpb25zPzogUnVuT3B0aW9ucyk6IFByb21pc2U8UmV0dXJuVHlwZT47XG4gIGFzeW5jIHJ1bihmZWVkczogRmVlZHNUeXBlLCBhcmcxPzogRmV0Y2hlc1R5cGV8UnVuT3B0aW9ucywgYXJnMj86IFJ1bk9wdGlvbnMpOiBQcm9taXNlPFJldHVyblR5cGU+IHtcbiAgICBjb25zdCBmZXRjaGVzOiB7W25hbWU6IHN0cmluZ106IE9ubnhWYWx1ZXxudWxsfSA9IHt9O1xuICAgIGxldCBvcHRpb25zOiBSdW5PcHRpb25zID0ge307XG4gICAgLy8gY2hlY2sgaW5wdXRzXG4gICAgaWYgKHR5cGVvZiBmZWVkcyAhPT0gJ29iamVjdCcgfHwgZmVlZHMgPT09IG51bGwgfHwgZmVlZHMgaW5zdGFuY2VvZiBUZW5zb3IgfHwgQXJyYXkuaXNBcnJheShmZWVkcykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgJ1xcJ2ZlZWRzXFwnIG11c3QgYmUgYW4gb2JqZWN0IHRoYXQgdXNlIGlucHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy4nKTtcbiAgICB9XG5cbiAgICBsZXQgaXNGZXRjaGVzRW1wdHkgPSB0cnVlO1xuICAgIC8vIGRldGVybWluZSB3aGljaCBvdmVycmlkZSBpcyBiZWluZyB1c2VkXG4gICAgaWYgKHR5cGVvZiBhcmcxID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKGFyZzEgPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5leHBlY3RlZCBhcmd1bWVudFsxXTogY2Fubm90IGJlIG51bGwuJyk7XG4gICAgICB9XG4gICAgICBpZiAoYXJnMSBpbnN0YW5jZW9mIFRlbnNvcikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdmZXRjaGVzXFwnIGNhbm5vdCBiZSBhIFRlbnNvcicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcxKSkge1xuICAgICAgICBpZiAoYXJnMS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdmZXRjaGVzXFwnIGNhbm5vdCBiZSBhbiBlbXB0eSBhcnJheS4nKTtcbiAgICAgICAgfVxuICAgICAgICBpc0ZldGNoZXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICAvLyBvdXRwdXQgbmFtZXNcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIGFyZzEpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdmZXRjaGVzXFwnIG11c3QgYmUgYSBzdHJpbmcgYXJyYXkgb3IgYW4gb2JqZWN0LicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5vdXRwdXROYW1lcy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYCdmZXRjaGVzJyBjb250YWlucyBpbnZhbGlkIG91dHB1dCBuYW1lOiAke25hbWV9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmZXRjaGVzW25hbWVdID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgYXJnMiA9PT0gJ29iamVjdCcgJiYgYXJnMiAhPT0gbnVsbCkge1xuICAgICAgICAgIG9wdGlvbnMgPSBhcmcyO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ29wdGlvbnNcXCcgbXVzdCBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlY2lkZSB3aGV0aGVyIGFyZzEgaXMgZmV0Y2hlcyBvciBvcHRpb25zXG4gICAgICAgIC8vIGlmIGFueSBvdXRwdXQgbmFtZSBpcyBwcmVzZW50IGFuZCBpdHMgdmFsdWUgaXMgdmFsaWQgT25ueFZhbHVlLCB3ZSBjb25zaWRlciBpdCBmZXRjaGVzXG4gICAgICAgIGxldCBpc0ZldGNoZXMgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgYXJnMUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcmcxKTtcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIHRoaXMub3V0cHV0TmFtZXMpIHtcbiAgICAgICAgICBpZiAoYXJnMUtleXMuaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnN0IHYgPSAoYXJnMSBhcyBJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlLk51bGxhYmxlT25ueFZhbHVlTWFwVHlwZSlbbmFtZV07XG4gICAgICAgICAgICBpZiAodiA9PT0gbnVsbCB8fCB2IGluc3RhbmNlb2YgVGVuc29yKSB7XG4gICAgICAgICAgICAgIGlzRmV0Y2hlcyA9IHRydWU7XG4gICAgICAgICAgICAgIGlzRmV0Y2hlc0VtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgIGZldGNoZXNbbmFtZV0gPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0ZldGNoZXMpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGFyZzIgPT09ICdvYmplY3QnICYmIGFyZzIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBhcmcyO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdvcHRpb25zXFwnIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvcHRpb25zID0gYXJnMSBhcyBSdW5PcHRpb25zO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuZXhwZWN0ZWQgYXJndW1lbnRbMV06IG11c3QgYmUgXFwnZmV0Y2hlc1xcJyBvciBcXCdvcHRpb25zXFwnLicpO1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIGFsbCBpbnB1dHMgYXJlIGluIGZlZWRcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgdGhpcy5pbnB1dE5hbWVzKSB7XG4gICAgICBpZiAodHlwZW9mIGZlZWRzW25hbWVdID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGlucHV0ICcke25hbWV9JyBpcyBtaXNzaW5nIGluICdmZWVkcycuYCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaWYgbm8gZmV0Y2hlcyBpcyBzcGVjaWZpZWQsIHdlIHVzZSB0aGUgZnVsbCBvdXRwdXQgbmFtZXMgbGlzdFxuICAgIGlmIChpc0ZldGNoZXNFbXB0eSkge1xuICAgICAgZm9yIChjb25zdCBuYW1lIG9mIHRoaXMub3V0cHV0TmFtZXMpIHtcbiAgICAgICAgZmV0Y2hlc1tuYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZmVlZHMsIGZldGNoZXMgYW5kIG9wdGlvbnMgYXJlIHByZXBhcmVkXG5cbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgdGhpcy5oYW5kbGVyLnJ1bihmZWVkcywgZmV0Y2hlcywgb3B0aW9ucyk7XG4gICAgY29uc3QgcmV0dXJuVmFsdWU6IHtbbmFtZTogc3RyaW5nXTogT25ueFZhbHVlfSA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHJlc3VsdHMpIHtcbiAgICAgIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHRzLCBrZXkpKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlc3VsdHNba2V5XTtcbiAgICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIFRlbnNvcikge1xuICAgICAgICAgIHJldHVyblZhbHVlW2tleV0gPSByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuVmFsdWVba2V5XSA9IG5ldyBUZW5zb3IocmVzdWx0LnR5cGUsIHJlc3VsdC5kYXRhLCByZXN1bHQuZGltcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9XG5cbiAgYXN5bmMgcmVsZWFzZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGUocGF0aDogc3RyaW5nLCBvcHRpb25zPzogU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2U+O1xuICBzdGF0aWMgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXJMaWtlLCBvcHRpb25zPzogU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2U+O1xuICBzdGF0aWMgY3JlYXRlKGJ1ZmZlcjogQXJyYXlCdWZmZXJMaWtlLCBieXRlT2Zmc2V0OiBudW1iZXIsIGJ5dGVMZW5ndGg/OiBudW1iZXIsIG9wdGlvbnM/OiBTZXNzaW9uT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPEluZmVyZW5jZVNlc3Npb25JbnRlcmZhY2U+O1xuICBzdGF0aWMgY3JlYXRlKGJ1ZmZlcjogVWludDhBcnJheSwgb3B0aW9ucz86IFNlc3Npb25PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uSW50ZXJmYWNlPjtcbiAgc3RhdGljIGFzeW5jIGNyZWF0ZShcbiAgICAgIGFyZzA6IHN0cmluZ3xBcnJheUJ1ZmZlckxpa2V8VWludDhBcnJheSwgYXJnMT86IFNlc3Npb25PcHRpb25zfG51bWJlciwgYXJnMj86IG51bWJlcixcbiAgICAgIGFyZzM/OiBTZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbkludGVyZmFjZT4ge1xuICAgIC8vIGVpdGhlciBsb2FkIGZyb20gYSBmaWxlIG9yIGJ1ZmZlclxuICAgIGxldCBmaWxlUGF0aE9yVWludDhBcnJheTogc3RyaW5nfFVpbnQ4QXJyYXk7XG4gICAgbGV0IG9wdGlvbnM6IFNlc3Npb25PcHRpb25zID0ge307XG5cbiAgICBpZiAodHlwZW9mIGFyZzAgPT09ICdzdHJpbmcnKSB7XG4gICAgICBmaWxlUGF0aE9yVWludDhBcnJheSA9IGFyZzA7XG4gICAgICBpZiAodHlwZW9mIGFyZzEgPT09ICdvYmplY3QnICYmIGFyZzEgIT09IG51bGwpIHtcbiAgICAgICAgb3B0aW9ucyA9IGFyZzE7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcxICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdvcHRpb25zXFwnIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXJnMCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgIGZpbGVQYXRoT3JVaW50OEFycmF5ID0gYXJnMDtcbiAgICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gJ29iamVjdCcgJiYgYXJnMSAhPT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zID0gYXJnMTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1xcJ29wdGlvbnNcXCcgbXVzdCBiZSBhbiBvYmplY3QuJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgYXJnMCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8XG4gICAgICAgICh0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIGFyZzAgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcikpIHtcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IGFyZzA7XG4gICAgICBsZXQgYnl0ZU9mZnNldCA9IDA7XG4gICAgICBsZXQgYnl0ZUxlbmd0aCA9IGFyZzAuYnl0ZUxlbmd0aDtcbiAgICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gJ29iamVjdCcgJiYgYXJnMSAhPT0gbnVsbCkge1xuICAgICAgICBvcHRpb25zID0gYXJnMTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzEgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGJ5dGVPZmZzZXQgPSBhcmcxO1xuICAgICAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKGJ5dGVPZmZzZXQpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2J5dGVPZmZzZXRcXCcgbXVzdCBiZSBhbiBpbnRlZ2VyLicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBieXRlT2Zmc2V0ID49IGJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYCdieXRlT2Zmc2V0JyBpcyBvdXQgb2YgcmFuZ2UgWzAsICR7YnVmZmVyLmJ5dGVMZW5ndGh9KS5gKTtcbiAgICAgICAgfVxuICAgICAgICBieXRlTGVuZ3RoID0gYXJnMC5ieXRlTGVuZ3RoIC0gYnl0ZU9mZnNldDtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmcyID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBhcmcyO1xuICAgICAgICAgIGlmICghTnVtYmVyLmlzU2FmZUludGVnZXIoYnl0ZUxlbmd0aCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdieXRlTGVuZ3RoXFwnIG11c3QgYmUgYW4gaW50ZWdlci4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPD0gMCB8fCBieXRlT2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgJ2J5dGVMZW5ndGgnIGlzIG91dCBvZiByYW5nZSAoMCwgJHtidWZmZXIuYnl0ZUxlbmd0aCAtIGJ5dGVPZmZzZXR9XS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmczID09PSAnb2JqZWN0JyAmJiBhcmczICE9PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gYXJnMztcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmczICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnb3B0aW9uc1xcJyBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnYnl0ZUxlbmd0aFxcJyBtdXN0IGJlIGEgbnVtYmVyLicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcxICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdvcHRpb25zXFwnIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgfVxuICAgICAgZmlsZVBhdGhPclVpbnQ4QXJyYXkgPSBuZXcgVWludDhBcnJheShidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmV4cGVjdGVkIGFyZ3VtZW50WzBdOiBtdXN0IGJlIFxcJ3BhdGhcXCcgb3IgXFwnYnVmZmVyXFwnLicpO1xuICAgIH1cblxuICAgIC8vIGdldCBiYWNrZW5kIGhpbnRzXG4gICAgY29uc3QgZXBzID0gb3B0aW9ucy5leGVjdXRpb25Qcm92aWRlcnMgfHwgW107XG4gICAgY29uc3QgYmFja2VuZEhpbnRzID0gZXBzLm1hcChpID0+IHR5cGVvZiBpID09PSAnc3RyaW5nJyA/IGkgOiBpLm5hbWUpO1xuICAgIGNvbnN0IGJhY2tlbmQgPSBhd2FpdCByZXNvbHZlQmFja2VuZChiYWNrZW5kSGludHMpO1xuICAgIGNvbnN0IGhhbmRsZXIgPSBhd2FpdCBiYWNrZW5kLmNyZWF0ZUluZmVyZW5jZVNlc3Npb25IYW5kbGVyKGZpbGVQYXRoT3JVaW50OEFycmF5LCBvcHRpb25zKTtcbiAgICByZXR1cm4gbmV3IEluZmVyZW5jZVNlc3Npb24oaGFuZGxlcik7XG4gIH1cblxuICBzdGFydFByb2ZpbGluZygpOiB2b2lkIHtcbiAgICB0aGlzLmhhbmRsZXIuc3RhcnRQcm9maWxpbmcoKTtcbiAgfVxuICBlbmRQcm9maWxpbmcoKTogdm9pZCB7XG4gICAgdGhpcy5oYW5kbGVyLmVuZFByb2ZpbGluZygpO1xuICB9XG5cbiAgZ2V0IGlucHV0TmFtZXMoKTogcmVhZG9ubHkgc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXIuaW5wdXROYW1lcztcbiAgfVxuICBnZXQgb3V0cHV0TmFtZXMoKTogcmVhZG9ubHkgc3RyaW5nW10ge1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXIub3V0cHV0TmFtZXM7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZXI6IEluZmVyZW5jZVNlc3Npb25IYW5kbGVyO1xufVxuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb24gYXMgSW5mZXJlbmNlU2Vzc2lvbkltcGx9IGZyb20gJy4vaW5mZXJlbmNlLXNlc3Npb24taW1wbC5qcyc7XG5pbXBvcnQge09ubnhWYWx1ZSwgT25ueFZhbHVlRGF0YUxvY2F0aW9ufSBmcm9tICcuL29ubngtdmFsdWUuanMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlICovXG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBJbmZlcmVuY2VTZXNzaW9uIHtcbiAgLy8gI3JlZ2lvbiBpbnB1dC9vdXRwdXQgdHlwZXNcblxuICB0eXBlIE9ubnhWYWx1ZU1hcFR5cGUgPSB7cmVhZG9ubHkgW25hbWU6IHN0cmluZ106IE9ubnhWYWx1ZX07XG4gIHR5cGUgTnVsbGFibGVPbm54VmFsdWVNYXBUeXBlID0ge3JlYWRvbmx5IFtuYW1lOiBzdHJpbmddOiBPbm54VmFsdWUgfCBudWxsfTtcblxuICAvKipcbiAgICogQSBmZWVkcyAobW9kZWwgaW5wdXRzKSBpcyBhbiBvYmplY3QgdGhhdCB1c2VzIGlucHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICovXG4gIHR5cGUgRmVlZHNUeXBlID0gT25ueFZhbHVlTWFwVHlwZTtcblxuICAvKipcbiAgICogQSBmZXRjaGVzIChtb2RlbCBvdXRwdXRzKSBjb3VsZCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAgICpcbiAgICogLSBPbWl0dGVkLiBVc2UgbW9kZWwncyBvdXRwdXQgbmFtZXMgZGVmaW5pdGlvbi5cbiAgICogLSBBbiBhcnJheSBvZiBzdHJpbmcgaW5kaWNhdGluZyB0aGUgb3V0cHV0IG5hbWVzLlxuICAgKiAtIEFuIG9iamVjdCB0aGF0IHVzZSBvdXRwdXQgbmFtZXMgYXMga2V5cyBhbmQgT25ueFZhbHVlIG9yIG51bGwgYXMgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAqXG4gICAqIEByZW1hcmtcbiAgICogZGlmZmVyZW50IGZyb20gaW5wdXQgYXJndW1lbnQsIGluIG91dHB1dCwgT25ueFZhbHVlIGlzIG9wdGlvbmFsLiBJZiBhbiBPbm54VmFsdWUgaXMgcHJlc2VudCBpdCB3aWxsIGJlXG4gICAqIHVzZWQgYXMgYSBwcmUtYWxsb2NhdGVkIHZhbHVlIGJ5IHRoZSBpbmZlcmVuY2UgZW5naW5lOyBpZiBvbWl0dGVkLCBpbmZlcmVuY2UgZW5naW5lIHdpbGwgYWxsb2NhdGUgYnVmZmVyXG4gICAqIGludGVybmFsbHkuXG4gICAqL1xuICB0eXBlIEZldGNoZXNUeXBlID0gcmVhZG9ubHkgc3RyaW5nW118TnVsbGFibGVPbm54VmFsdWVNYXBUeXBlO1xuXG4gIC8qKlxuICAgKiBBIGluZmVyZW5jaW5nIHJldHVybiB0eXBlIGlzIGFuIG9iamVjdCB0aGF0IHVzZXMgb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICovXG4gIHR5cGUgUmV0dXJuVHlwZSA9IE9ubnhWYWx1ZU1hcFR5cGU7XG5cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gc2Vzc2lvbiBvcHRpb25zXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGNvbmZpZ3VyYXRpb25zIGZvciBzZXNzaW9uIGJlaGF2aW9yLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBTZXNzaW9uT3B0aW9ucyB7XG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgZXhlY3V0aW9uIHByb3ZpZGVyIG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBBbiBleGVjdXRpb24gcHJvdmlkZXIgb3B0aW9uIGNhbiBiZSBhIHN0cmluZyBpbmRpY2F0aW5nIHRoZSBuYW1lIG9mIHRoZSBleGVjdXRpb24gcHJvdmlkZXIsXG4gICAgICogb3IgYW4gb2JqZWN0IG9mIGNvcnJlc3BvbmRpbmcgdHlwZS5cbiAgICAgKi9cbiAgICBleGVjdXRpb25Qcm92aWRlcnM/OiByZWFkb25seSBFeGVjdXRpb25Qcm92aWRlckNvbmZpZ1tdO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGludHJhIE9QIHRocmVhZHMgbnVtYmVyLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkuXG4gICAgICovXG4gICAgaW50cmFPcE51bVRocmVhZHM/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW50ZXIgT1AgdGhyZWFkcyBudW1iZXIuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gT05OWFJ1bnRpbWUgKE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlKS5cbiAgICAgKi9cbiAgICBpbnRlck9wTnVtVGhyZWFkcz86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmcmVlIGRpbWVuc2lvbiBvdmVycmlkZS5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBmcmVlRGltZW5zaW9uT3ZlcnJpZGVzPzoge3JlYWRvbmx5IFtkaW1lbnNpb25OYW1lOiBzdHJpbmddOiBudW1iZXJ9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wdGltaXphdGlvbiBsZXZlbC5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBncmFwaE9wdGltaXphdGlvbkxldmVsPzogJ2Rpc2FibGVkJ3wnYmFzaWMnfCdleHRlbmRlZCd8J2FsbCc7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIGVuYWJsZSBDUFUgbWVtb3J5IGFyZW5hLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkgb3IgV2ViQXNzZW1ibHkgYmFja2VuZFxuICAgICAqL1xuICAgIGVuYWJsZUNwdU1lbUFyZW5hPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgZW5hYmxlIG1lbW9yeSBwYXR0ZXJuLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIE9OTlhSdW50aW1lIChOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSkgb3IgV2ViQXNzZW1ibHkgYmFja2VuZFxuICAgICAqL1xuICAgIGVuYWJsZU1lbVBhdHRlcm4/OiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogRXhlY3V0aW9uIG1vZGUuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gT05OWFJ1bnRpbWUgKE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlKSBvciBXZWJBc3NlbWJseSBiYWNrZW5kXG4gICAgICovXG4gICAgZXhlY3V0aW9uTW9kZT86ICdzZXF1ZW50aWFsJ3wncGFyYWxsZWwnO1xuXG4gICAgLyoqXG4gICAgICogT3B0aW1pemVkIG1vZGVsIGZpbGUgcGF0aC5cbiAgICAgKlxuICAgICAqIElmIHRoaXMgc2V0dGluZyBpcyBzcGVjaWZpZWQsIHRoZSBvcHRpbWl6ZWQgbW9kZWwgd2lsbCBiZSBkdW1wZWQuIEluIGJyb3dzZXIsIGEgYmxvYiB3aWxsIGJlIGNyZWF0ZWRcbiAgICAgKiB3aXRoIGEgcG9wLXVwIHdpbmRvdy5cbiAgICAgKi9cbiAgICBvcHRpbWl6ZWRNb2RlbEZpbGVQYXRoPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogV2V0aGVyIGVuYWJsZSBwcm9maWxpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYSBwbGFjZWhvbGRlciBmb3IgYSBmdXR1cmUgdXNlLlxuICAgICAqL1xuICAgIGVuYWJsZVByb2ZpbGluZz86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBGaWxlIHByZWZpeCBmb3IgcHJvZmlsaW5nLlxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGEgcGxhY2Vob2xkZXIgZm9yIGEgZnV0dXJlIHVzZS5cbiAgICAgKi9cbiAgICBwcm9maWxlRmlsZVByZWZpeD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIExvZyBJRC5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBsb2dJZD86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIExvZyBzZXZlcml0eSBsZXZlbC4gU2VlXG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9vbm54cnVudGltZS9ibG9iL21haW4vaW5jbHVkZS9vbm54cnVudGltZS9jb3JlL2NvbW1vbi9sb2dnaW5nL3NldmVyaXR5LmhcbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICBsb2dTZXZlcml0eUxldmVsPzogMHwxfDJ8M3w0O1xuXG4gICAgLyoqXG4gICAgICogTG9nIHZlcmJvc2l0eSBsZXZlbC5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBXZWJBc3NlbWJseSBiYWNrZW5kLiBXaWxsIHN1cHBvcnQgTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUgbGF0ZXJcbiAgICAgKi9cbiAgICBsb2dWZXJib3NpdHlMZXZlbD86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIFNwZWNpZnkgc3RyaW5nIGFzIGEgcHJlZmVycmVkIGRhdGEgbG9jYXRpb24gZm9yIGFsbCBvdXRwdXRzLCBvciBhbiBvYmplY3QgdGhhdCB1c2Ugb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIGFcbiAgICAgKiBwcmVmZXJyZWQgZGF0YSBsb2NhdGlvbiBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSBXZWIgZm9yIFdlYkdMIGFuZCBXZWJHUFUgRVAuXG4gICAgICovXG4gICAgcHJlZmVycmVkT3V0cHV0TG9jYXRpb24/OiBPbm54VmFsdWVEYXRhTG9jYXRpb258e3JlYWRvbmx5IFtvdXRwdXROYW1lOiBzdHJpbmddOiBPbm54VmFsdWVEYXRhTG9jYXRpb259O1xuXG4gICAgLyoqXG4gICAgICogU3RvcmUgY29uZmlndXJhdGlvbnMgZm9yIGEgc2Vzc2lvbi4gU2VlXG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9vbm54cnVudGltZS9ibG9iL21haW4vaW5jbHVkZS9vbm54cnVudGltZS9jb3JlL3Nlc3Npb24vXG4gICAgICogb25ueHJ1bnRpbWVfc2Vzc2lvbl9vcHRpb25zX2NvbmZpZ19rZXlzLmhcbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBXZWJBc3NlbWJseSBiYWNrZW5kLiBXaWxsIHN1cHBvcnQgTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUgbGF0ZXJcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBganNcbiAgICAgKiBleHRyYToge1xuICAgICAqICAgc2Vzc2lvbjoge1xuICAgICAqICAgICBzZXRfZGVub3JtYWxfYXNfemVybzogXCIxXCIsXG4gICAgICogICAgIGRpc2FibGVfcHJlcGFja2luZzogXCIxXCJcbiAgICAgKiAgIH0sXG4gICAgICogICBvcHRpbWl6YXRpb246IHtcbiAgICAgKiAgICAgZW5hYmxlX2dlbHVfYXBwcm94aW1hdGlvbjogXCIxXCJcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICovXG4gICAgZXh0cmE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgfVxuXG4gIC8vICNyZWdpb24gZXhlY3V0aW9uIHByb3ZpZGVyc1xuXG4gIC8vIEN1cnJlbnRseSwgd2UgaGF2ZSB0aGUgZm9sbG93aW5nIGJhY2tlbmRzIHRvIHN1cHBvcnQgZXhlY3V0aW9uIHByb3ZpZGVyczpcbiAgLy8gQmFja2VuZCBOb2RlLmpzIGJpbmRpbmc6IHN1cHBvcnRzICdjcHUnIGFuZCAnY3VkYScuXG4gIC8vIEJhY2tlbmQgV2ViQXNzZW1ibHk6IHN1cHBvcnRzICdjcHUnLCAnd2FzbScsICd4bm5wYWNrJyBhbmQgJ3dlYm5uJy5cbiAgLy8gQmFja2VuZCBPTk5YLmpzOiBzdXBwb3J0cyAnd2ViZ2wnLlxuICAvLyBCYWNrZW5kIFJlYWN0IE5hdGl2ZTogc3VwcG9ydHMgJ2NwdScsICd4bm5wYWNrJywgJ2NvcmVtbCcgKGlPUyksICdubmFwaScgKEFuZHJvaWQpLlxuICBpbnRlcmZhY2UgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb25NYXAge1xuICAgIGNwdTogQ3B1RXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgY29yZW1sOiBDb3JlTWxFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICBjdWRhOiBDdWRhRXhlY3V0aW9uUHJvdmlkZXJPcHRpb247XG4gICAgZG1sOiBEbWxFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICB0ZW5zb3JydDogVGVuc29yUnRFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICB3YXNtOiBXZWJBc3NlbWJseUV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIHdlYmdsOiBXZWJHTEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIHhubnBhY2s6IFhubnBhY2tFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICB3ZWJncHU6IFdlYkdwdUV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIHdlYm5uOiBXZWJOTkV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgIG5uYXBpOiBObmFwaUV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICB9XG5cbiAgdHlwZSBFeGVjdXRpb25Qcm92aWRlck5hbWUgPSBrZXlvZiBFeGVjdXRpb25Qcm92aWRlck9wdGlvbk1hcDtcbiAgdHlwZSBFeGVjdXRpb25Qcm92aWRlckNvbmZpZyA9XG4gICAgICBFeGVjdXRpb25Qcm92aWRlck9wdGlvbk1hcFtFeGVjdXRpb25Qcm92aWRlck5hbWVdfEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9ufEV4ZWN1dGlvblByb3ZpZGVyTmFtZXxzdHJpbmc7XG5cbiAgZXhwb3J0IGludGVyZmFjZSBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgQ3B1RXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ2NwdSc7XG4gICAgdXNlQXJlbmE/OiBib29sZWFuO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgQ3VkYUV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICdjdWRhJztcbiAgICBkZXZpY2VJZD86IG51bWJlcjtcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIENvcmVNbEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICdjb3JlbWwnO1xuICAgIGNvcmVNbEZsYWdzPzogbnVtYmVyO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgRG1sRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ2RtbCc7XG4gICAgZGV2aWNlSWQ/OiBudW1iZXI7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBUZW5zb3JSdEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICd0ZW5zb3JydCc7XG4gICAgZGV2aWNlSWQ/OiBudW1iZXI7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBXZWJBc3NlbWJseUV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICd3YXNtJztcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIFdlYkdMRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24gZXh0ZW5kcyBFeGVjdXRpb25Qcm92aWRlck9wdGlvbiB7XG4gICAgcmVhZG9ubHkgbmFtZTogJ3dlYmdsJztcbiAgICAvLyBUT0RPOiBhZGQgZmxhZ3NcbiAgfVxuICBleHBvcnQgaW50ZXJmYWNlIFhubnBhY2tFeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAneG5ucGFjayc7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBXZWJHcHVFeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAnd2ViZ3B1JztcbiAgICBwcmVmZXJyZWRMYXlvdXQ/OiAnTkNIVyd8J05IV0MnO1xuICB9XG4gIGV4cG9ydCBpbnRlcmZhY2UgV2ViTk5FeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAnd2Vibm4nO1xuICAgIGRldmljZVR5cGU/OiAnY3B1J3wnZ3B1JztcbiAgICBudW1UaHJlYWRzPzogbnVtYmVyO1xuICAgIHBvd2VyUHJlZmVyZW5jZT86ICdkZWZhdWx0J3wnbG93LXBvd2VyJ3wnaGlnaC1wZXJmb3JtYW5jZSc7XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBDb3JlTUxFeGVjdXRpb25Qcm92aWRlck9wdGlvbiBleHRlbmRzIEV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIHtcbiAgICByZWFkb25seSBuYW1lOiAnY29yZW1sJztcbiAgICB1c2VDUFVPbmx5PzogYm9vbGVhbjtcbiAgICBlbmFibGVPblN1YmdyYXBoPzogYm9vbGVhbjtcbiAgICBvbmx5RW5hYmxlRGV2aWNlV2l0aEFORT86IGJvb2xlYW47XG4gIH1cbiAgZXhwb3J0IGludGVyZmFjZSBObmFwaUV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uIGV4dGVuZHMgRXhlY3V0aW9uUHJvdmlkZXJPcHRpb24ge1xuICAgIHJlYWRvbmx5IG5hbWU6ICdubmFwaSc7XG4gICAgdXNlRlAxNj86IGJvb2xlYW47XG4gICAgdXNlTkNIVz86IGJvb2xlYW47XG4gICAgY3B1RGlzYWJsZWQ/OiBib29sZWFuO1xuICAgIGNwdU9ubHk/OiBib29sZWFuO1xuICB9XG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBydW4gb3B0aW9uc1xuXG4gIC8qKlxuICAgKiBBIHNldCBvZiBjb25maWd1cmF0aW9ucyBmb3IgaW5mZXJlbmNlIHJ1biBiZWhhdmlvclxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBSdW5PcHRpb25zIHtcbiAgICAvKipcbiAgICAgKiBMb2cgc2V2ZXJpdHkgbGV2ZWwuIFNlZVxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvb25ueHJ1bnRpbWUvYmxvYi9tYWluL2luY2x1ZGUvb25ueHJ1bnRpbWUvY29yZS9jb21tb24vbG9nZ2luZy9zZXZlcml0eS5oXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gT05OWFJ1bnRpbWUgKE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlKSBvciBXZWJBc3NlbWJseSBiYWNrZW5kXG4gICAgICovXG4gICAgbG9nU2V2ZXJpdHlMZXZlbD86IDB8MXwyfDN8NDtcblxuICAgIC8qKlxuICAgICAqIExvZyB2ZXJib3NpdHkgbGV2ZWwuXG4gICAgICpcbiAgICAgKiBUaGlzIHNldHRpbmcgaXMgYXZhaWxhYmxlIG9ubHkgaW4gV2ViQXNzZW1ibHkgYmFja2VuZC4gV2lsbCBzdXBwb3J0IE5vZGUuanMgYmluZGluZyBhbmQgcmVhY3QtbmF0aXZlIGxhdGVyXG4gICAgICovXG4gICAgbG9nVmVyYm9zaXR5TGV2ZWw/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBUZXJtaW5hdGUgYWxsIGluY29tcGxldGUgT3J0UnVuIGNhbGxzIGFzIHNvb24gYXMgcG9zc2libGUgaWYgdHJ1ZVxuICAgICAqXG4gICAgICogVGhpcyBzZXR0aW5nIGlzIGF2YWlsYWJsZSBvbmx5IGluIFdlYkFzc2VtYmx5IGJhY2tlbmQuIFdpbGwgc3VwcG9ydCBOb2RlLmpzIGJpbmRpbmcgYW5kIHJlYWN0LW5hdGl2ZSBsYXRlclxuICAgICAqL1xuICAgIHRlcm1pbmF0ZT86IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBBIHRhZyBmb3IgdGhlIFJ1bigpIGNhbGxzIHVzaW5nIHRoaXNcbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBPTk5YUnVudGltZSAoTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUpIG9yIFdlYkFzc2VtYmx5IGJhY2tlbmRcbiAgICAgKi9cbiAgICB0YWc/OiBzdHJpbmc7XG5cbiAgICAvKipcbiAgICAgKiBTZXQgYSBzaW5nbGUgcnVuIGNvbmZpZ3VyYXRpb24gZW50cnkuIFNlZVxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvb25ueHJ1bnRpbWUvYmxvYi9tYWluL2luY2x1ZGUvb25ueHJ1bnRpbWUvY29yZS9zZXNzaW9uL1xuICAgICAqIG9ubnhydW50aW1lX3J1bl9vcHRpb25zX2NvbmZpZ19rZXlzLmhcbiAgICAgKlxuICAgICAqIFRoaXMgc2V0dGluZyBpcyBhdmFpbGFibGUgb25seSBpbiBXZWJBc3NlbWJseSBiYWNrZW5kLiBXaWxsIHN1cHBvcnQgTm9kZS5qcyBiaW5kaW5nIGFuZCByZWFjdC1uYXRpdmUgbGF0ZXJcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqIGV4dHJhOiB7XG4gICAgICogICBtZW1vcnk6IHtcbiAgICAgKiAgICAgZW5hYmxlX21lbW9yeV9hcmVuYV9zaHJpbmthZ2U6IFwiMVwiLFxuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBleHRyYT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICB9XG5cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gdmFsdWUgbWV0YWRhdGFcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LWludGVyZmFjZVxuICBpbnRlcmZhY2UgVmFsdWVNZXRhZGF0YSB7XG4gICAgLy8gVEJEXG4gIH1cblxuICAvLyAjZW5kcmVnaW9uXG59XG5cbi8qKlxuICogUmVwcmVzZW50IGEgcnVudGltZSBpbnN0YW5jZSBvZiBhbiBPTk5YIG1vZGVsLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEluZmVyZW5jZVNlc3Npb24ge1xuICAvLyAjcmVnaW9uIHJ1bigpXG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgdGhlIG1vZGVsIGFzeW5jaHJvbm91c2x5IHdpdGggdGhlIGdpdmVuIGZlZWRzIGFuZCBvcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gZmVlZHMgLSBSZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgaW5wdXQuIFNlZSB0eXBlIGRlc2NyaXB0aW9uIG9mIGBJbmZlcmVuY2VTZXNzaW9uLklucHV0VHlwZWAgZm9yIGRldGFpbC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbC4gQSBzZXQgb2Ygb3B0aW9ucyB0aGF0IGNvbnRyb2xzIHRoZSBiZWhhdmlvciBvZiBtb2RlbCBpbmZlcmVuY2UuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgbWFwLCB3aGljaCB1c2VzIG91dHB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgYXMgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAqL1xuICBydW4oZmVlZHM6IEluZmVyZW5jZVNlc3Npb24uRmVlZHNUeXBlLCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uLlJldHVyblR5cGU+O1xuXG4gIC8qKlxuICAgKiBFeGVjdXRlIHRoZSBtb2RlbCBhc3luY2hyb25vdXNseSB3aXRoIHRoZSBnaXZlbiBmZWVkcywgZmV0Y2hlcyBhbmQgb3B0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIGZlZWRzIC0gUmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIGlucHV0LiBTZWUgdHlwZSBkZXNjcmlwdGlvbiBvZiBgSW5mZXJlbmNlU2Vzc2lvbi5JbnB1dFR5cGVgIGZvciBkZXRhaWwuXG4gICAqIEBwYXJhbSBmZXRjaGVzIC0gUmVwcmVzZW50YXRpb24gb2YgdGhlIG1vZGVsIG91dHB1dC4gU2VlIHR5cGUgZGVzY3JpcHRpb24gb2YgYEluZmVyZW5jZVNlc3Npb24uT3V0cHV0VHlwZWAgZm9yXG4gICAqIGRldGFpbC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbC4gQSBzZXQgb2Ygb3B0aW9ucyB0aGF0IGNvbnRyb2xzIHRoZSBiZWhhdmlvciBvZiBtb2RlbCBpbmZlcmVuY2UuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgbWFwLCB3aGljaCB1c2VzIG91dHB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgYXMgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAqL1xuICBydW4oZmVlZHM6IEluZmVyZW5jZVNlc3Npb24uRmVlZHNUeXBlLCBmZXRjaGVzOiBJbmZlcmVuY2VTZXNzaW9uLkZldGNoZXNUeXBlLFxuICAgICAgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbi5SZXR1cm5UeXBlPjtcblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiByZWxlYXNlKClcblxuICAvKipcbiAgICogUmVsZWFzZSB0aGUgaW5mZXJlbmNlIHNlc3Npb24gYW5kIHRoZSB1bmRlcmx5aW5nIHJlc291cmNlcy5cbiAgICovXG4gIHJlbGVhc2UoKTogUHJvbWlzZTx2b2lkPjtcblxuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiBwcm9maWxpbmdcblxuICAvKipcbiAgICogU3RhcnQgcHJvZmlsaW5nLlxuICAgKi9cbiAgc3RhcnRQcm9maWxpbmcoKTogdm9pZDtcblxuICAvKipcbiAgICogRW5kIHByb2ZpbGluZy5cbiAgICovXG4gIGVuZFByb2ZpbGluZygpOiB2b2lkO1xuXG4gIC8vICNlbmRyZWdpb25cblxuICAvLyAjcmVnaW9uIG1ldGFkYXRhXG5cbiAgLyoqXG4gICAqIEdldCBpbnB1dCBuYW1lcyBvZiB0aGUgbG9hZGVkIG1vZGVsLlxuICAgKi9cbiAgcmVhZG9ubHkgaW5wdXROYW1lczogcmVhZG9ubHkgc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIEdldCBvdXRwdXQgbmFtZXMgb2YgdGhlIGxvYWRlZCBtb2RlbC5cbiAgICovXG4gIHJlYWRvbmx5IG91dHB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcblxuICAvLyAvKipcbiAgLy8gICogR2V0IGlucHV0IG1ldGFkYXRhIG9mIHRoZSBsb2FkZWQgbW9kZWwuXG4gIC8vICAqL1xuICAvLyByZWFkb25seSBpbnB1dE1ldGFkYXRhOiBSZWFkb25seUFycmF5PFJlYWRvbmx5PEluZmVyZW5jZVNlc3Npb24uVmFsdWVNZXRhZGF0YT4+O1xuXG4gIC8vIC8qKlxuICAvLyAgKiBHZXQgb3V0cHV0IG1ldGFkYXRhIG9mIHRoZSBsb2FkZWQgbW9kZWwuXG4gIC8vICAqL1xuICAvLyByZWFkb25seSBvdXRwdXRNZXRhZGF0YTogUmVhZG9ubHlBcnJheTxSZWFkb25seTxJbmZlcmVuY2VTZXNzaW9uLlZhbHVlTWV0YWRhdGE+PjtcblxuICAvLyAjZW5kcmVnaW9uXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5mZXJlbmNlU2Vzc2lvbkZhY3Rvcnkge1xuICAvLyAjcmVnaW9uIGNyZWF0ZSgpXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbmZlcmVuY2Ugc2Vzc2lvbiBhbmQgbG9hZCBtb2RlbCBhc3luY2hyb25vdXNseSBmcm9tIGFuIE9OTlggbW9kZWwgZmlsZS5cbiAgICpcbiAgICogQHBhcmFtIHVyaSAtIFRoZSBVUkkgb3IgZmlsZSBwYXRoIG9mIHRoZSBtb2RlbCB0byBsb2FkLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIHNwZWNpZnkgY29uZmlndXJhdGlvbiBmb3IgY3JlYXRpbmcgYSBuZXcgaW5mZXJlbmNlIHNlc3Npb24uXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIEluZmVyZW5jZVNlc3Npb24gb2JqZWN0LlxuICAgKi9cbiAgY3JlYXRlKHVyaTogc3RyaW5nLCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6IFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbj47XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbmZlcmVuY2Ugc2Vzc2lvbiBhbmQgbG9hZCBtb2RlbCBhc3luY2hyb25vdXNseSBmcm9tIGFuIGFycmF5IGJ1ZmVyLlxuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyIC0gQW4gQXJyYXlCdWZmZXIgcmVwcmVzZW50YXRpb24gb2YgYW4gT05OWCBtb2RlbC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBzcGVjaWZ5IGNvbmZpZ3VyYXRpb24gZm9yIGNyZWF0aW5nIGEgbmV3IGluZmVyZW5jZSBzZXNzaW9uLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBJbmZlcmVuY2VTZXNzaW9uIG9iamVjdC5cbiAgICovXG4gIGNyZWF0ZShidWZmZXI6IEFycmF5QnVmZmVyTGlrZSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb24+O1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaW5mZXJlbmNlIHNlc3Npb24gYW5kIGxvYWQgbW9kZWwgYXN5bmNocm9ub3VzbHkgZnJvbSBzZWdtZW50IG9mIGFuIGFycmF5IGJ1ZmVyLlxuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyIC0gQW4gQXJyYXlCdWZmZXIgcmVwcmVzZW50YXRpb24gb2YgYW4gT05OWCBtb2RlbC5cbiAgICogQHBhcmFtIGJ5dGVPZmZzZXQgLSBUaGUgYmVnaW5uaW5nIG9mIHRoZSBzcGVjaWZpZWQgcG9ydGlvbiBvZiB0aGUgYXJyYXkgYnVmZmVyLlxuICAgKiBAcGFyYW0gYnl0ZUxlbmd0aCAtIFRoZSBsZW5ndGggaW4gYnl0ZXMgb2YgdGhlIGFycmF5IGJ1ZmZlci5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBzcGVjaWZ5IGNvbmZpZ3VyYXRpb24gZm9yIGNyZWF0aW5nIGEgbmV3IGluZmVyZW5jZSBzZXNzaW9uLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBJbmZlcmVuY2VTZXNzaW9uIG9iamVjdC5cbiAgICovXG4gIGNyZWF0ZShidWZmZXI6IEFycmF5QnVmZmVyTGlrZSwgYnl0ZU9mZnNldDogbnVtYmVyLCBieXRlTGVuZ3RoPzogbnVtYmVyLCBvcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPEluZmVyZW5jZVNlc3Npb24+O1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgaW5mZXJlbmNlIHNlc3Npb24gYW5kIGxvYWQgbW9kZWwgYXN5bmNocm9ub3VzbHkgZnJvbSBhIFVpbnQ4QXJyYXkuXG4gICAqXG4gICAqIEBwYXJhbSBidWZmZXIgLSBBIFVpbnQ4QXJyYXkgcmVwcmVzZW50YXRpb24gb2YgYW4gT05OWCBtb2RlbC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBzcGVjaWZ5IGNvbmZpZ3VyYXRpb24gZm9yIGNyZWF0aW5nIGEgbmV3IGluZmVyZW5jZSBzZXNzaW9uLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhbiBJbmZlcmVuY2VTZXNzaW9uIG9iamVjdC5cbiAgICovXG4gIGNyZWF0ZShidWZmZXI6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTogUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uPjtcblxuICAvLyAjZW5kcmVnaW9uXG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbmV4cG9ydCBjb25zdCBJbmZlcmVuY2VTZXNzaW9uOiBJbmZlcmVuY2VTZXNzaW9uRmFjdG9yeSA9IEluZmVyZW5jZVNlc3Npb25JbXBsO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi90ZW5zb3IuanMnO1xuXG50eXBlIE5vblRlbnNvclR5cGUgPSBuZXZlcjtcblxuLyoqXG4gKiBUeXBlIE9ubnhWYWx1ZSBSZXByZXNlbnRzIGJvdGggdGVuc29ycyBhbmQgbm9uLXRlbnNvcnMgdmFsdWUgZm9yIG1vZGVsJ3MgaW5wdXRzL291dHB1dHMuXG4gKlxuICogTk9URTogY3VycmVudGx5IG5vdCBzdXBwb3J0IG5vbi10ZW5zb3JcbiAqL1xuZXhwb3J0IHR5cGUgT25ueFZhbHVlID0gVGVuc29yfE5vblRlbnNvclR5cGU7XG5cbi8qKlxuICogVHlwZSBPbm54VmFsdWVEYXRhTG9jYXRpb24gcmVwcmVzZW50cyB0aGUgbG9jYXRpb24gb2YgdGhlIGRhdGEgb2YgYW4gT25ueFZhbHVlLlxuICovXG5leHBvcnQgdHlwZSBPbm54VmFsdWVEYXRhTG9jYXRpb24gPSBUZW5zb3IuRGF0YUxvY2F0aW9uO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge3Jlc29sdmVCYWNrZW5kfSBmcm9tICcuL2JhY2tlbmQtaW1wbC5qcyc7XG5pbXBvcnQge1Nlc3Npb25IYW5kbGVyLCBUcmFpbmluZ1Nlc3Npb25IYW5kbGVyfSBmcm9tICcuL2JhY2tlbmQuanMnO1xuaW1wb3J0IHtJbmZlcmVuY2VTZXNzaW9uIGFzIEluZmVyZW5jZVNlc3Npb259IGZyb20gJy4vaW5mZXJlbmNlLXNlc3Npb24uanMnO1xuaW1wb3J0IHtPbm54VmFsdWV9IGZyb20gJy4vb25ueC12YWx1ZS5qcyc7XG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnLi90ZW5zb3IuanMnO1xuaW1wb3J0IHtUcmFpbmluZ1Nlc3Npb24gYXMgVHJhaW5pbmdTZXNzaW9uSW50ZXJmYWNlLCBUcmFpbmluZ1Nlc3Npb25DcmVhdGVPcHRpb25zfSBmcm9tICcuL3RyYWluaW5nLXNlc3Npb24uanMnO1xuXG50eXBlIFNlc3Npb25PcHRpb25zID0gSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucztcbnR5cGUgRmVlZHNUeXBlID0gSW5mZXJlbmNlU2Vzc2lvbi5GZWVkc1R5cGU7XG50eXBlIEZldGNoZXNUeXBlID0gSW5mZXJlbmNlU2Vzc2lvbi5GZXRjaGVzVHlwZTtcbnR5cGUgUmV0dXJuVHlwZSA9IEluZmVyZW5jZVNlc3Npb24uUmV0dXJuVHlwZTtcbnR5cGUgUnVuT3B0aW9ucyA9IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucztcblxuY29uc3Qgbm9CYWNrZW5kRXJyTXNnOiBzdHJpbmcgPSAnVHJhaW5pbmcgYmFja2VuZCBjb3VsZCBub3QgYmUgcmVzb2x2ZWQuICcgK1xuICAgICdNYWtlIHN1cmUgeW91XFwncmUgdXNpbmcgdGhlIGNvcnJlY3QgY29uZmlndXJhdGlvbiAmIFdlYkFzc2VtYmx5IGZpbGVzLic7XG5cbmV4cG9ydCBjbGFzcyBUcmFpbmluZ1Nlc3Npb24gaW1wbGVtZW50cyBUcmFpbmluZ1Nlc3Npb25JbnRlcmZhY2Uge1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKGhhbmRsZXI6IFRyYWluaW5nU2Vzc2lvbkhhbmRsZXIpIHtcbiAgICB0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xuICB9XG4gIHByaXZhdGUgaGFuZGxlcjogVHJhaW5pbmdTZXNzaW9uSGFuZGxlcjtcblxuICBnZXQgaW5wdXROYW1lcygpOiByZWFkb25seSBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5pbnB1dE5hbWVzO1xuICB9XG4gIGdldCBvdXRwdXROYW1lcygpOiByZWFkb25seSBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlci5vdXRwdXROYW1lcztcbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBjcmVhdGUodHJhaW5pbmdPcHRpb25zOiBUcmFpbmluZ1Nlc3Npb25DcmVhdGVPcHRpb25zLCBzZXNzaW9uT3B0aW9ucz86IFNlc3Npb25PcHRpb25zKTpcbiAgICAgIFByb21pc2U8VHJhaW5pbmdTZXNzaW9uPiB7XG4gICAgY29uc3QgZXZhbE1vZGVsOiBzdHJpbmd8VWludDhBcnJheSA9IHRyYWluaW5nT3B0aW9ucy5ldmFsTW9kZWwgfHwgJyc7XG4gICAgY29uc3Qgb3B0aW1pemVyTW9kZWw6IHN0cmluZ3xVaW50OEFycmF5ID0gdHJhaW5pbmdPcHRpb25zLm9wdGltaXplck1vZGVsIHx8ICcnO1xuICAgIGNvbnN0IG9wdGlvbnM6IFNlc3Npb25PcHRpb25zID0gc2Vzc2lvbk9wdGlvbnMgfHwge307XG5cbiAgICAvLyBnZXQgYmFja2VuZCBoaW50c1xuICAgIGNvbnN0IGVwcyA9IG9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzIHx8IFtdO1xuICAgIGNvbnN0IGJhY2tlbmRIaW50cyA9IGVwcy5tYXAoaSA9PiB0eXBlb2YgaSA9PT0gJ3N0cmluZycgPyBpIDogaS5uYW1lKTtcbiAgICBjb25zdCBiYWNrZW5kID0gYXdhaXQgcmVzb2x2ZUJhY2tlbmQoYmFja2VuZEhpbnRzKTtcbiAgICBpZiAoYmFja2VuZC5jcmVhdGVUcmFpbmluZ1Nlc3Npb25IYW5kbGVyKSB7XG4gICAgICBjb25zdCBoYW5kbGVyID0gYXdhaXQgYmFja2VuZC5jcmVhdGVUcmFpbmluZ1Nlc3Npb25IYW5kbGVyKFxuICAgICAgICAgIHRyYWluaW5nT3B0aW9ucy5jaGVja3BvaW50U3RhdGUsIHRyYWluaW5nT3B0aW9ucy50cmFpbk1vZGVsLCBldmFsTW9kZWwsIG9wdGltaXplck1vZGVsLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBuZXcgVHJhaW5pbmdTZXNzaW9uKGhhbmRsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3Iobm9CYWNrZW5kRXJyTXNnKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIGZ1bmN0aW9uIGZvciBydW5UcmFpblN0ZXAgYW5kIGZ1dHVyZSBydW5TdGVwIG1ldGhvZHMgdGhhdCBoYW5kbGVzIHRoZSB0eXBlLW5hcnJvd2luZyBjb252ZXJzaW9uIGZyb21cbiAgICogdGhlIGdpdmVuIHBhcmFtZXRlcnMgdG8gU2Vzc2lvbkhhbmRsZXIuRmV0Y2hlc1R5cGUgYW5kIFJ1bk9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSBmZWVkcyB0aGUgcmVxdWlyZWQgaW5wdXRcbiAgICogQHBhcmFtIGFyZzEgbmFycm93ZWQgJiBjb252ZXJ0ZWQgaW50byB0aGUgU2Vzc2lvbkhhbmRsZXIuRmV0Y2hlc1R5cGUgb3IgUnVuT3B0aW9ucyBvYmplY3RcbiAgICogQHBhcmFtIGFyZzIgb3B0aW9uYWwgUnVuT3B0aW9ucyBvYmplY3QuXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICB0eXBlTmFycm93aW5nRm9yUnVuU3RlcChmZWVkczogRmVlZHNUeXBlLCBhcmcxPzogRmV0Y2hlc1R5cGV8UnVuT3B0aW9ucywgYXJnMj86IFJ1bk9wdGlvbnMpOlxuICAgICAgW1Nlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlLCBSdW5PcHRpb25zXSB7XG4gICAgY29uc3QgZmV0Y2hlczoge1tuYW1lOiBzdHJpbmddOiBPbm54VmFsdWV8bnVsbH0gPSB7fTtcbiAgICBsZXQgb3B0aW9uczogUnVuT3B0aW9ucyA9IHt9O1xuICAgIC8vIGNoZWNrIGlucHV0c1xuICAgIGlmICh0eXBlb2YgZmVlZHMgIT09ICdvYmplY3QnIHx8IGZlZWRzID09PSBudWxsIHx8IGZlZWRzIGluc3RhbmNlb2YgVGVuc29yIHx8IEFycmF5LmlzQXJyYXkoZmVlZHMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdcXCdmZWVkc1xcJyBtdXN0IGJlIGFuIG9iamVjdCB0aGF0IHVzZSBpbnB1dCBuYW1lcyBhcyBrZXlzIGFuZCBPbm54VmFsdWUgYXMgY29ycmVzcG9uZGluZyB2YWx1ZXMuJyk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmV0Y2hlc0VtcHR5ID0gdHJ1ZTtcbiAgICAvLyBkZXRlcm1pbmUgd2hpY2ggb3ZlcnJpZGUgaXMgYmVpbmcgdXNlZFxuICAgIGlmICh0eXBlb2YgYXJnMSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChhcmcxID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuZXhwZWN0ZWQgYXJndW1lbnRbMV06IGNhbm5vdCBiZSBudWxsLicpO1xuICAgICAgfVxuICAgICAgaWYgKGFyZzEgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBjYW5ub3QgYmUgYSBUZW5zb3InKTtcbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnMSkpIHtcbiAgICAgICAgaWYgKGFyZzEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBjYW5ub3QgYmUgYW4gZW1wdHkgYXJyYXkuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaXNGZXRjaGVzRW1wdHkgPSBmYWxzZTtcbiAgICAgICAgLy8gb3V0cHV0IG5hbWVzXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBhcmcxKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnZmV0Y2hlc1xcJyBtdXN0IGJlIGEgc3RyaW5nIGFycmF5IG9yIGFuIG9iamVjdC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMub3V0cHV0TmFtZXMuaW5kZXhPZihuYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGAnZmV0Y2hlcycgY29udGFpbnMgaW52YWxpZCBvdXRwdXQgbmFtZTogJHtuYW1lfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmV0Y2hlc1tuYW1lXSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGFyZzIgPT09ICdvYmplY3QnICYmIGFyZzIgIT09IG51bGwpIHtcbiAgICAgICAgICBvcHRpb25zID0gYXJnMjtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnMiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcXCdvcHRpb25zXFwnIG11c3QgYmUgYW4gb2JqZWN0LicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWNpZGUgd2hldGhlciBhcmcxIGlzIGZldGNoZXMgb3Igb3B0aW9uc1xuICAgICAgICAvLyBpZiBhbnkgb3V0cHV0IG5hbWUgaXMgcHJlc2VudCBhbmQgaXRzIHZhbHVlIGlzIHZhbGlkIE9ubnhWYWx1ZSwgd2UgY29uc2lkZXIgaXQgZmV0Y2hlc1xuICAgICAgICBsZXQgaXNGZXRjaGVzID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGFyZzFLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoYXJnMSk7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBvZiB0aGlzLm91dHB1dE5hbWVzKSB7XG4gICAgICAgICAgaWYgKGFyZzFLZXlzLmluZGV4T2YobmFtZSkgIT09IC0xKSB7XG4gICAgICAgICAgICBjb25zdCB2ID0gKGFyZzEgYXMgSW5mZXJlbmNlU2Vzc2lvbi5OdWxsYWJsZU9ubnhWYWx1ZU1hcFR5cGUpW25hbWVdO1xuICAgICAgICAgICAgaWYgKHYgPT09IG51bGwgfHwgdiBpbnN0YW5jZW9mIFRlbnNvcikge1xuICAgICAgICAgICAgICBpc0ZldGNoZXMgPSB0cnVlO1xuICAgICAgICAgICAgICBpc0ZldGNoZXNFbXB0eSA9IGZhbHNlO1xuICAgICAgICAgICAgICBmZXRjaGVzW25hbWVdID0gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNGZXRjaGVzKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBhcmcyID09PSAnb2JqZWN0JyAmJiBhcmcyICE9PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gYXJnMjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmcyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXFwnb3B0aW9uc1xcJyBtdXN0IGJlIGFuIG9iamVjdC4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9ucyA9IGFyZzEgYXMgUnVuT3B0aW9ucztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGFyZzEgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmV4cGVjdGVkIGFyZ3VtZW50WzFdOiBtdXN0IGJlIFxcJ2ZldGNoZXNcXCcgb3IgXFwnb3B0aW9uc1xcJy4nKTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayBpZiBhbGwgaW5wdXRzIGFyZSBpbiBmZWVkXG4gICAgZm9yIChjb25zdCBuYW1lIG9mIHRoaXMuaW5wdXROYW1lcykge1xuICAgICAgaWYgKHR5cGVvZiBmZWVkc1tuYW1lXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnB1dCAnJHtuYW1lfScgaXMgbWlzc2luZyBpbiAnZmVlZHMnLmApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlmIG5vIGZldGNoZXMgaXMgc3BlY2lmaWVkLCB3ZSB1c2UgdGhlIGZ1bGwgb3V0cHV0IG5hbWVzIGxpc3RcbiAgICBpZiAoaXNGZXRjaGVzRW1wdHkpIHtcbiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiB0aGlzLm91dHB1dE5hbWVzKSB7XG4gICAgICAgIGZldGNoZXNbbmFtZV0gPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbZmV0Y2hlcywgb3B0aW9uc107XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIG1ldGhvZCBmb3IgcnVuVHJhaW5TdGVwIGFuZCBhbnkgb3RoZXIgcnVuU3RlcCBtZXRob2RzLiBUYWtlcyB0aGUgUmV0dXJuVHlwZSByZXN1bHQgZnJvbSB0aGUgU2Vzc2lvbkhhbmRsZXJcbiAgICogYW5kIGNoYW5nZXMgaXQgaW50byBhIG1hcCBvZiBUZW5zb3JzLlxuICAgKlxuICAgKiBAcGFyYW0gcmVzdWx0c1xuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgY29udmVydEhhbmRsZXJSZXR1cm5UeXBlVG9NYXBPZlRlbnNvcnMocmVzdWx0czogU2Vzc2lvbkhhbmRsZXIuUmV0dXJuVHlwZSk6IFJldHVyblR5cGUge1xuICAgIGNvbnN0IHJldHVyblZhbHVlOiB7W25hbWU6IHN0cmluZ106IE9ubnhWYWx1ZX0gPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiByZXN1bHRzKSB7XG4gICAgICBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocmVzdWx0cywga2V5KSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSByZXN1bHRzW2tleV07XG4gICAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICAgICAgICByZXR1cm5WYWx1ZVtrZXldID0gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVyblZhbHVlW2tleV0gPSBuZXcgVGVuc29yKHJlc3VsdC50eXBlLCByZXN1bHQuZGF0YSwgcmVzdWx0LmRpbXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxuXG4gIHJ1blRyYWluU3RlcChmZWVkczogRmVlZHNUeXBlLCBvcHRpb25zPzogUnVuT3B0aW9ucyk6IFByb21pc2U8UmV0dXJuVHlwZT47XG4gIHJ1blRyYWluU3RlcChmZWVkczogRmVlZHNUeXBlLCBmZXRjaGVzOiBGZXRjaGVzVHlwZSwgb3B0aW9ucz86IFJ1bk9wdGlvbnMpOiBQcm9taXNlPFJldHVyblR5cGU+O1xuICBhc3luYyBydW5UcmFpblN0ZXAoZmVlZHM6IEZlZWRzVHlwZSwgYXJnMT86IEZldGNoZXNUeXBlfFJ1bk9wdGlvbnMsIGFyZzI/OiBSdW5PcHRpb25zKTogUHJvbWlzZTxSZXR1cm5UeXBlPiB7XG4gICAgY29uc3QgW2ZldGNoZXMsIG9wdGlvbnNdID0gdGhpcy50eXBlTmFycm93aW5nRm9yUnVuU3RlcChmZWVkcywgYXJnMSwgYXJnMik7XG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHRoaXMuaGFuZGxlci5ydW5UcmFpblN0ZXAoZmVlZHMsIGZldGNoZXMsIG9wdGlvbnMpO1xuICAgIHJldHVybiB0aGlzLmNvbnZlcnRIYW5kbGVyUmV0dXJuVHlwZVRvTWFwT2ZUZW5zb3JzKHJlc3VsdHMpO1xuICB9XG5cbiAgYXN5bmMgbG9hZFBhcmFtZXRlcnNCdWZmZXIoX2FycmF5OiBVaW50OEFycmF5LCBfdHJhaW5hYmxlT25seTogYm9vbGVhbik6IFByb21pc2U8dm9pZD4ge1xuICAgIHRocm93IG5ldyBFcnJvcignTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC4nKTtcbiAgfVxuXG4gIGFzeW5jIGdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzKF90cmFpbmFibGVPbmx5OiBib29sZWFuKTogUHJvbWlzZTxVaW50OEFycmF5PiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNZXRob2Qgbm90IGltcGxlbWVudGVkLicpO1xuICB9XG5cbiAgYXN5bmMgcmVsZWFzZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyLmRpc3Bvc2UoKTtcbiAgfVxufVxuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb259IGZyb20gJy4vaW5mZXJlbmNlLXNlc3Npb24uanMnO1xuaW1wb3J0IHtUcmFpbmluZ1Nlc3Npb24gYXMgVHJhaW5pbmdTZXNzaW9uSW1wbH0gZnJvbSAnLi90cmFpbmluZy1zZXNzaW9uLWltcGwuanMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlICovXG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBUcmFpbmluZ1Nlc3Npb24ge1xuICAvKipcbiAgICogRWl0aGVyIFVSSSBmaWxlIHBhdGggKHN0cmluZykgb3IgVWludDhBcnJheSBjb250YWluaW5nIG1vZGVsIG9yIGNoZWNrcG9pbnQgaW5mb3JtYXRpb24uXG4gICAqL1xuICB0eXBlIFVSSW9yQnVmZmVyID0gc3RyaW5nfFVpbnQ4QXJyYXk7XG59XG5cbi8qKlxuICogUmVwcmVzZW50IGEgcnVudGltZSBpbnN0YW5jZSBvZiBhbiBPTk5YIHRyYWluaW5nIHNlc3Npb24sXG4gKiB3aGljaCBjb250YWlucyBhIG1vZGVsIHRoYXQgY2FuIGJlIHRyYWluZWQsIGFuZCwgb3B0aW9uYWxseSxcbiAqIGFuIGV2YWwgYW5kIG9wdGltaXplciBtb2RlbC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFpbmluZ1Nlc3Npb24ge1xuICAvLyAjcmVnaW9uIHJ1bigpXG5cbiAgLyoqXG4gICAqIFJ1biBUcmFpblN0ZXAgYXN5bmNocm9ub3VzbHkgd2l0aCB0aGUgZ2l2ZW4gZmVlZHMgYW5kIG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSBmZWVkcyAtIFJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBpbnB1dC4gU2VlIHR5cGUgZGVzY3JpcHRpb24gb2YgYEluZmVyZW5jZVNlc3Npb24uSW5wdXRUeXBlYCBmb3JcbiAgIGRldGFpbC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25hbC4gQSBzZXQgb2Ygb3B0aW9ucyB0aGF0IGNvbnRyb2xzIHRoZSBiZWhhdmlvciBvZiBtb2RlbCB0cmFpbmluZy5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYSBtYXAsIHdoaWNoIHVzZXMgb3V0cHV0IG5hbWVzIGFzIGtleXMgYW5kIE9ubnhWYWx1ZSBhcyBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICovXG4gIHJ1blRyYWluU3RlcChmZWVkczogSW5mZXJlbmNlU2Vzc2lvbi5GZWVkc1R5cGUsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uLlJldHVyblR5cGU+O1xuXG4gIC8qKlxuICAgKiBSdW4gYSBzaW5nbGUgdHJhaW4gc3RlcCB3aXRoIHRoZSBnaXZlbiBpbnB1dHMgYW5kIG9wdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSBmZWVkcyAtIFJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCBpbnB1dC5cbiAgICogQHBhcmFtIGZldGNoZXMgLSBSZXByZXNlbnRhdGlvbiBvZiB0aGUgbW9kZWwgb3V0cHV0LlxuICAgKiBkZXRhaWwuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9uYWwuIEEgc2V0IG9mIG9wdGlvbnMgdGhhdCBjb250cm9scyB0aGUgYmVoYXZpb3Igb2YgbW9kZWwgaW5mZXJlbmNlLlxuICAgKiBAcmV0dXJucyBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIG1hcCwgd2hpY2ggdXNlcyBvdXRwdXQgbmFtZXMgYXMga2V5cyBhbmQgT25ueFZhbHVlIGFzIGNvcnJlc3BvbmRpbmdcbiAgIHZhbHVlcy5cbiAgICovXG4gIHJ1blRyYWluU3RlcChcbiAgICAgIGZlZWRzOiBJbmZlcmVuY2VTZXNzaW9uLkZlZWRzVHlwZSwgZmV0Y2hlczogSW5mZXJlbmNlU2Vzc2lvbi5GZXRjaGVzVHlwZSxcbiAgICAgIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPEluZmVyZW5jZVNlc3Npb24uUmV0dXJuVHlwZT47XG5cbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gY29weSBwYXJhbWV0ZXJzXG4gIC8qKlxuICAgKiBDb3BpZXMgZnJvbSBhIGJ1ZmZlciBjb250YWluaW5nIHBhcmFtZXRlcnMgdG8gdGhlIFRyYWluaW5nU2Vzc2lvbiBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBAcGFyYW0gYnVmZmVyIC0gYnVmZmVyIGNvbnRhaW5pbmcgcGFyYW1ldGVyc1xuICAgKiBAcGFyYW0gdHJhaW5hYmxlT25seSAtIFRydWUgaWYgdHJhaW5hYmxlIHBhcmFtZXRlcnMgb25seSB0byBiZSBtb2RpZmllZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKi9cbiAgbG9hZFBhcmFtZXRlcnNCdWZmZXIoYXJyYXk6IFVpbnQ4QXJyYXksIHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBDb3BpZXMgZnJvbSB0aGUgVHJhaW5pbmdTZXNzaW9uIHBhcmFtZXRlcnMgdG8gYSBidWZmZXIuXG4gICAqXG4gICAqIEBwYXJhbSB0cmFpbmFibGVPbmx5IC0gVHJ1ZSBpZiB0cmFpbmFibGUgcGFyYW1ldGVycyBvbmx5IHRvIGJlIGNvcGllZCwgZmFsc2Ugb3Rocndpc2UuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgYnVmZmVyIG9mIHRoZSByZXF1ZXN0ZWQgcGFyYW1ldGVycy5cbiAgICovXG4gIGdldENvbnRpZ3VvdXNQYXJhbWV0ZXJzKHRyYWluYWJsZU9ubHk6IGJvb2xlYW4pOiBQcm9taXNlPFVpbnQ4QXJyYXk+O1xuICAvLyAjZW5kcmVnaW9uXG5cbiAgLy8gI3JlZ2lvbiByZWxlYXNlKClcblxuICAvKipcbiAgICogUmVsZWFzZSB0aGUgaW5mZXJlbmNlIHNlc3Npb24gYW5kIHRoZSB1bmRlcmx5aW5nIHJlc291cmNlcy5cbiAgICovXG4gIHJlbGVhc2UoKTogUHJvbWlzZTx2b2lkPjtcbiAgLy8gI2VuZHJlZ2lvblxuXG4gIC8vICNyZWdpb24gbWV0YWRhdGFcblxuICAvKipcbiAgICogR2V0IGlucHV0IG5hbWVzIG9mIHRoZSBsb2FkZWQgbW9kZWwuXG4gICAqL1xuICByZWFkb25seSBpbnB1dE5hbWVzOiByZWFkb25seSBzdHJpbmdbXTtcblxuICAvKipcbiAgICogR2V0IG91dHB1dCBuYW1lcyBvZiB0aGUgbG9hZGVkIG1vZGVsLlxuICAgKi9cbiAgcmVhZG9ubHkgb3V0cHV0TmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdO1xuICAvLyAjZW5kcmVnaW9uXG59XG5cbi8qKlxuICogUmVwcmVzZW50cyB0aGUgb3B0aW9uYWwgcGFyYW1ldGVycyB0aGF0IGNhbiBiZSBwYXNzZWQgaW50byB0aGUgVHJhaW5pbmdTZXNzaW9uRmFjdG9yeS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUcmFpbmluZ1Nlc3Npb25DcmVhdGVPcHRpb25zIHtcbiAgLyoqXG4gICAqIFVSSSBvciBidWZmZXIgZm9yIGEgLmNrcHQgZmlsZSB0aGF0IGNvbnRhaW5zIHRoZSBjaGVja3BvaW50IGZvciB0aGUgdHJhaW5pbmcgbW9kZWwuXG4gICAqL1xuICBjaGVja3BvaW50U3RhdGU6IFRyYWluaW5nU2Vzc2lvbi5VUklvckJ1ZmZlcjtcbiAgLyoqXG4gICAqIFVSSSBvciBidWZmZXIgZm9yIHRoZSAub25ueCB0cmFpbmluZyBmaWxlLlxuICAgKi9cbiAgdHJhaW5Nb2RlbDogVHJhaW5pbmdTZXNzaW9uLlVSSW9yQnVmZmVyO1xuICAvKipcbiAgICogT3B0aW9uYWwuIFVSSSBvciBidWZmZXIgZm9yIHRoZSAub25ueCBvcHRpbWl6ZXIgbW9kZWwgZmlsZS5cbiAgICovXG4gIG9wdGltaXplck1vZGVsPzogVHJhaW5pbmdTZXNzaW9uLlVSSW9yQnVmZmVyO1xuICAvKipcbiAgICogT3B0aW9uYWwuIFVSSSBvciBidWZmZXIgZm9yIHRoZSAub25ueCBldmFsIG1vZGVsIGZpbGUuXG4gICAqL1xuICBldmFsTW9kZWw/OiBUcmFpbmluZ1Nlc3Npb24uVVJJb3JCdWZmZXI7XG59XG5cbi8qKlxuICogRGVmaW5lcyBtZXRob2Qgb3ZlcmxvYWQgcG9zc2liaWxpdGllcyBmb3IgY3JlYXRpbmcgYSBUcmFpbmluZ1Nlc3Npb24uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVHJhaW5pbmdTZXNzaW9uRmFjdG9yeSB7XG4gIC8vICNyZWdpb24gY3JlYXRlKClcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBUcmFpbmluZ1Nlc3Npb24gYW5kIGFzeW5jaHJvbm91c2x5IGxvYWRzIGFueSBtb2RlbHMgcGFzc2VkIGluIHRocm91Z2ggdHJhaW5pbmdPcHRpb25zXG4gICAqXG4gICAqIEBwYXJhbSB0cmFpbmluZ09wdGlvbnMgc3BlY2lmeSBtb2RlbHMgYW5kIGNoZWNrcG9pbnRzIHRvIGxvYWQgaW50byB0aGUgVHJhaW5pbmcgU2Vzc2lvblxuICAgKiBAcGFyYW0gc2Vzc2lvbk9wdGlvbnMgc3BlY2lmeSBjb25maWd1cmF0aW9uIGZvciB0cmFpbmluZyBzZXNzaW9uIGJlaGF2aW9yXG4gICAqXG4gICAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyB0byBhIFRyYWluaW5nU2Vzc2lvbiBvYmplY3RcbiAgICovXG4gIGNyZWF0ZSh0cmFpbmluZ09wdGlvbnM6IFRyYWluaW5nU2Vzc2lvbkNyZWF0ZU9wdGlvbnMsIHNlc3Npb25PcHRpb25zPzogSW5mZXJlbmNlU2Vzc2lvbi5TZXNzaW9uT3B0aW9ucyk6XG4gICAgICBQcm9taXNlPFRyYWluaW5nU2Vzc2lvbj47XG5cbiAgLy8gI2VuZHJlZ2lvblxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25hbWluZy1jb252ZW50aW9uXG5leHBvcnQgY29uc3QgVHJhaW5pbmdTZXNzaW9uOiBUcmFpbmluZ1Nlc3Npb25GYWN0b3J5ID0gVHJhaW5pbmdTZXNzaW9uSW1wbDtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuLyoqXG4gKiAjIE9OTlggUnVudGltZSBKYXZhU2NyaXB0IEFQSVxuICpcbiAqIE9OTlggUnVudGltZSBKYXZhU2NyaXB0IEFQSSBpcyBhIHVuaWZpZWQgQVBJIGZvciBhbGwgSmF2YVNjcmlwdCB1c2FnZXMsIGluY2x1ZGluZyB0aGUgZm9sbG93aW5nIE5QTSBwYWNrYWdlczpcbiAqXG4gKiAtIFtvbm54cnVudGltZS1ub2RlXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9vbm54cnVudGltZS1ub2RlKVxuICogLSBbb25ueHJ1bnRpbWUtd2ViXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9vbm54cnVudGltZS13ZWIpXG4gKiAtIFtvbm54cnVudGltZS1yZWFjdC1uYXRpdmVdKGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL29ubnhydW50aW1lLXJlYWN0LW5hdGl2ZSlcbiAqXG4gKiBTZWUgYWxzbzpcbiAqIC0gW0dldCBTdGFydGVkXShodHRwczovL29ubnhydW50aW1lLmFpL2RvY3MvZ2V0LXN0YXJ0ZWQvd2l0aC1qYXZhc2NyaXB0Lmh0bWwpXG4gKiAtIFtJbmZlcmVuY2UgZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvb25ueHJ1bnRpbWUtaW5mZXJlbmNlLWV4YW1wbGVzL3RyZWUvbWFpbi9qcylcbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqL1xuXG5leHBvcnQgKiBmcm9tICcuL2JhY2tlbmQuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9lbnYuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9pbmZlcmVuY2Utc2Vzc2lvbi5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3RlbnNvci5qcyc7XG5leHBvcnQgKiBmcm9tICcuL29ubngtdmFsdWUuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFpbmluZy1zZXNzaW9uLmpzJztcbiIsICJleHBvcnQgY29uc3QgY3B1cyA9IHVuZGVmaW5lZDsiLCAiZXhwb3J0IGNvbnN0IGpvaW4gPSB1bmRlZmluZWQ7IiwgImV4cG9ydCBjb25zdCByZWFkRmlsZSA9IHVuZGVmaW5lZDsiLCAiZXhwb3J0IGNvbnN0IGpvaW4gPSB1bmRlZmluZWQ7IiwgIlxudmFyIG9ydFdhc20gPSAoKCkgPT4ge1xuICB2YXIgX3NjcmlwdERpciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdCA/IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjIDogdW5kZWZpbmVkO1xuICBpZiAodHlwZW9mIF9fZmlsZW5hbWUgIT09ICd1bmRlZmluZWQnKSBfc2NyaXB0RGlyID0gX3NjcmlwdERpciB8fCBfX2ZpbGVuYW1lO1xuICByZXR1cm4gKFxuZnVuY3Rpb24obW9kdWxlQXJnID0ge30pIHtcblxudmFyIGU9bW9kdWxlQXJnLGFhLGw7ZS5yZWFkeT1uZXcgUHJvbWlzZSgoYSxiKT0+e2FhPWE7bD1ifSk7dmFyIGJhPU9iamVjdC5hc3NpZ24oe30sZSksbT1cIi4vdGhpcy5wcm9ncmFtXCIsY2E9XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyxyPVwiZnVuY3Rpb25cIj09dHlwZW9mIGltcG9ydFNjcmlwdHMsZGE9XCJvYmplY3RcIj09dHlwZW9mIHByb2Nlc3MmJlwib2JqZWN0XCI9PXR5cGVvZiBwcm9jZXNzLnZlcnNpb25zJiZcInN0cmluZ1wiPT10eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLHc9XCJcIix4LHksejtcbmlmKGRhKXt2YXIgZnM9cmVxdWlyZShcImZzXCIpLEI9cmVxdWlyZShcInBhdGhcIik7dz1yP0IuZGlybmFtZSh3KStcIi9cIjpfX2Rpcm5hbWUrXCIvXCI7eD0oYSxiKT0+e2E9YS5zdGFydHNXaXRoKFwiZmlsZTovL1wiKT9uZXcgVVJMKGEpOkIubm9ybWFsaXplKGEpO3JldHVybiBmcy5yZWFkRmlsZVN5bmMoYSxiP3ZvaWQgMDpcInV0ZjhcIil9O3o9YT0+e2E9eChhLCEwKTthLmJ1ZmZlcnx8KGE9bmV3IFVpbnQ4QXJyYXkoYSkpO3JldHVybiBhfTt5PShhLGIsYyxkPSEwKT0+e2E9YS5zdGFydHNXaXRoKFwiZmlsZTovL1wiKT9uZXcgVVJMKGEpOkIubm9ybWFsaXplKGEpO2ZzLnJlYWRGaWxlKGEsZD92b2lkIDA6XCJ1dGY4XCIsKGcsaCk9PntnP2MoZyk6YihkP2guYnVmZmVyOmgpfSl9OyFlLnRoaXNQcm9ncmFtJiYxPHByb2Nlc3MuYXJndi5sZW5ndGgmJihtPXByb2Nlc3MuYXJndlsxXS5yZXBsYWNlKC9cXFxcL2csXCIvXCIpKTtwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7ZS5pbnNwZWN0PSgpPT5cIltFbXNjcmlwdGVuIE1vZHVsZSBvYmplY3RdXCJ9ZWxzZSBpZihjYXx8XG5yKXI/dz1zZWxmLmxvY2F0aW9uLmhyZWY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50JiZkb2N1bWVudC5jdXJyZW50U2NyaXB0JiYodz1kb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyksX3NjcmlwdERpciYmKHc9X3NjcmlwdERpciksMCE9PXcuaW5kZXhPZihcImJsb2I6XCIpP3c9dy5zdWJzdHIoMCx3LnJlcGxhY2UoL1s/I10uKi8sXCJcIikubGFzdEluZGV4T2YoXCIvXCIpKzEpOnc9XCJcIix4PWE9Pnt2YXIgYj1uZXcgWE1MSHR0cFJlcXVlc3Q7Yi5vcGVuKFwiR0VUXCIsYSwhMSk7Yi5zZW5kKG51bGwpO3JldHVybiBiLnJlc3BvbnNlVGV4dH0sciYmKHo9YT0+e3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJHRVRcIixhLCExKTtiLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7Yi5zZW5kKG51bGwpO3JldHVybiBuZXcgVWludDhBcnJheShiLnJlc3BvbnNlKX0pLHk9KGEsYixjKT0+e3ZhciBkPW5ldyBYTUxIdHRwUmVxdWVzdDtkLm9wZW4oXCJHRVRcIixhLCEwKTtkLnJlc3BvbnNlVHlwZT1cblwiYXJyYXlidWZmZXJcIjtkLm9ubG9hZD0oKT0+ezIwMD09ZC5zdGF0dXN8fDA9PWQuc3RhdHVzJiZkLnJlc3BvbnNlP2IoZC5yZXNwb25zZSk6YygpfTtkLm9uZXJyb3I9YztkLnNlbmQobnVsbCl9O3ZhciBlYT1lLnByaW50fHxjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpLEM9ZS5wcmludEVycnx8Y29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpO09iamVjdC5hc3NpZ24oZSxiYSk7YmE9bnVsbDtlLnRoaXNQcm9ncmFtJiYobT1lLnRoaXNQcm9ncmFtKTt2YXIgRDtlLndhc21CaW5hcnkmJihEPWUud2FzbUJpbmFyeSk7dmFyIG5vRXhpdFJ1bnRpbWU9ZS5ub0V4aXRSdW50aW1lfHwhMDtcIm9iamVjdFwiIT10eXBlb2YgV2ViQXNzZW1ibHkmJkUoXCJubyBuYXRpdmUgd2FzbSBzdXBwb3J0IGRldGVjdGVkXCIpO3ZhciBGLEcsZmE9ITEsSCxJLEosSztcbmZ1bmN0aW9uIGhhKCl7dmFyIGE9Ri5idWZmZXI7ZS5IRUFQOD1IPW5ldyBJbnQ4QXJyYXkoYSk7ZS5IRUFQMTY9bmV3IEludDE2QXJyYXkoYSk7ZS5IRUFQMzI9Sj1uZXcgSW50MzJBcnJheShhKTtlLkhFQVBVOD1JPW5ldyBVaW50OEFycmF5KGEpO2UuSEVBUFUxNj1uZXcgVWludDE2QXJyYXkoYSk7ZS5IRUFQVTMyPUs9bmV3IFVpbnQzMkFycmF5KGEpO2UuSEVBUEYzMj1uZXcgRmxvYXQzMkFycmF5KGEpO2UuSEVBUEY2ND1uZXcgRmxvYXQ2NEFycmF5KGEpfXZhciBMLGlhPVtdLGphPVtdLGthPVtdO2Z1bmN0aW9uIGxhKCl7dmFyIGE9ZS5wcmVSdW4uc2hpZnQoKTtpYS51bnNoaWZ0KGEpfXZhciBNPTAsTj1udWxsLE89bnVsbDtcbmZ1bmN0aW9uIEUoYSl7aWYoZS5vbkFib3J0KWUub25BYm9ydChhKTthPVwiQWJvcnRlZChcIithK1wiKVwiO0MoYSk7ZmE9ITA7YT1uZXcgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yKGErXCIuIEJ1aWxkIHdpdGggLXNBU1NFUlRJT05TIGZvciBtb3JlIGluZm8uXCIpO2woYSk7dGhyb3cgYTt9ZnVuY3Rpb24gbWEoYSl7cmV0dXJuIGEuc3RhcnRzV2l0aChcImRhdGE6YXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtO2Jhc2U2NCxcIil9dmFyIFA7UD1cIm9ydC13YXNtLndhc21cIjtpZighbWEoUCkpe3ZhciBuYT1QO1A9ZS5sb2NhdGVGaWxlP2UubG9jYXRlRmlsZShuYSx3KTp3K25hfWZ1bmN0aW9uIG9hKGEpe2lmKGE9PVAmJkQpcmV0dXJuIG5ldyBVaW50OEFycmF5KEQpO2lmKHopcmV0dXJuIHooYSk7dGhyb3dcImJvdGggYXN5bmMgYW5kIHN5bmMgZmV0Y2hpbmcgb2YgdGhlIHdhc20gZmFpbGVkXCI7fVxuZnVuY3Rpb24gcGEoYSl7aWYoIUQmJihjYXx8cikpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGZldGNoJiYhYS5zdGFydHNXaXRoKFwiZmlsZTovL1wiKSlyZXR1cm4gZmV0Y2goYSx7Y3JlZGVudGlhbHM6XCJzYW1lLW9yaWdpblwifSkudGhlbihiPT57aWYoIWIub2spdGhyb3dcImZhaWxlZCB0byBsb2FkIHdhc20gYmluYXJ5IGZpbGUgYXQgJ1wiK2ErXCInXCI7cmV0dXJuIGIuYXJyYXlCdWZmZXIoKX0pLmNhdGNoKCgpPT5vYShhKSk7aWYoeSlyZXR1cm4gbmV3IFByb21pc2UoKGIsYyk9Pnt5KGEsZD0+YihuZXcgVWludDhBcnJheShkKSksYyl9KX1yZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+b2EoYSkpfWZ1bmN0aW9uIHFhKGEsYixjKXtyZXR1cm4gcGEoYSkudGhlbihkPT5XZWJBc3NlbWJseS5pbnN0YW50aWF0ZShkLGIpKS50aGVuKGQ9PmQpLnRoZW4oYyxkPT57QyhcImZhaWxlZCB0byBhc3luY2hyb25vdXNseSBwcmVwYXJlIHdhc206IFwiK2QpO0UoZCl9KX1cbmZ1bmN0aW9uIHJhKGEsYil7dmFyIGM9UDtyZXR1cm4gRHx8XCJmdW5jdGlvblwiIT10eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmd8fG1hKGMpfHxjLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpfHxkYXx8XCJmdW5jdGlvblwiIT10eXBlb2YgZmV0Y2g/cWEoYyxhLGIpOmZldGNoKGMse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4oZD0+V2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcoZCxhKS50aGVuKGIsZnVuY3Rpb24oZyl7QyhcIndhc20gc3RyZWFtaW5nIGNvbXBpbGUgZmFpbGVkOiBcIitnKTtDKFwiZmFsbGluZyBiYWNrIHRvIEFycmF5QnVmZmVyIGluc3RhbnRpYXRpb25cIik7cmV0dXJuIHFhKGMsYSxiKX0pKX12YXIgUSxSPWE9Pntmb3IoOzA8YS5sZW5ndGg7KWEuc2hpZnQoKShlKX07XG5mdW5jdGlvbiBzYShhKXt0aGlzLnhhPWEtMjQ7dGhpcy5HYT1mdW5jdGlvbihiKXtLW3RoaXMueGErND4+Mj4+PjBdPWJ9O3RoaXMuRmE9ZnVuY3Rpb24oYil7S1t0aGlzLnhhKzg+PjI+Pj4wXT1ifTt0aGlzLnphPWZ1bmN0aW9uKGIsYyl7dGhpcy5FYSgpO3RoaXMuR2EoYik7dGhpcy5GYShjKX07dGhpcy5FYT1mdW5jdGlvbigpe0tbdGhpcy54YSsxNj4+Mj4+PjBdPTB9fVxudmFyIHRhPTAsdWE9MCx2YT1cInVuZGVmaW5lZFwiIT10eXBlb2YgVGV4dERlY29kZXI/bmV3IFRleHREZWNvZGVyKFwidXRmOFwiKTp2b2lkIDAsd2E9KGEsYixjKT0+e2I+Pj49MDt2YXIgZD1iK2M7Zm9yKGM9YjthW2NdJiYhKGM+PWQpOykrK2M7aWYoMTY8Yy1iJiZhLmJ1ZmZlciYmdmEpcmV0dXJuIHZhLmRlY29kZShhLnN1YmFycmF5KGIsYykpO2ZvcihkPVwiXCI7YjxjOyl7dmFyIGc9YVtiKytdO2lmKGcmMTI4KXt2YXIgaD1hW2IrK10mNjM7aWYoMTkyPT0oZyYyMjQpKWQrPVN0cmluZy5mcm9tQ2hhckNvZGUoKGcmMzEpPDw2fGgpO2Vsc2V7dmFyIGs9YVtiKytdJjYzO2c9MjI0PT0oZyYyNDApPyhnJjE1KTw8MTJ8aDw8NnxrOihnJjcpPDwxOHxoPDwxMnxrPDw2fGFbYisrXSY2Mzs2NTUzNj5nP2QrPVN0cmluZy5mcm9tQ2hhckNvZGUoZyk6KGctPTY1NTM2LGQrPVN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTZ8Zz4+MTAsNTYzMjB8ZyYxMDIzKSl9fWVsc2UgZCs9U3RyaW5nLmZyb21DaGFyQ29kZShnKX1yZXR1cm4gZH0sXG5TPShhLGIpPT4oYT4+Pj0wKT93YShJLGEsYik6XCJcIixUPWE9Pntmb3IodmFyIGI9MCxjPTA7YzxhLmxlbmd0aDsrK2Mpe3ZhciBkPWEuY2hhckNvZGVBdChjKTsxMjc+PWQ/YisrOjIwNDc+PWQ/Yis9Mjo1NTI5Njw9ZCYmNTczNDM+PWQ/KGIrPTQsKytjKTpiKz0zfXJldHVybiBifSxVPShhLGIsYyxkKT0+e2M+Pj49MDtpZighKDA8ZCkpcmV0dXJuIDA7dmFyIGc9YztkPWMrZC0xO2Zvcih2YXIgaD0wO2g8YS5sZW5ndGg7KytoKXt2YXIgaz1hLmNoYXJDb2RlQXQoaCk7aWYoNTUyOTY8PWsmJjU3MzQzPj1rKXt2YXIgcD1hLmNoYXJDb2RlQXQoKytoKTtrPTY1NTM2KygoayYxMDIzKTw8MTApfHAmMTAyM31pZigxMjc+PWspe2lmKGM+PWQpYnJlYWs7YltjKys+Pj4wXT1rfWVsc2V7aWYoMjA0Nz49ayl7aWYoYysxPj1kKWJyZWFrO2JbYysrPj4+MF09MTkyfGs+PjZ9ZWxzZXtpZig2NTUzNT49ayl7aWYoYysyPj1kKWJyZWFrO2JbYysrPj4+MF09MjI0fGs+PjEyfWVsc2V7aWYoYyszPj1cbmQpYnJlYWs7YltjKys+Pj4wXT0yNDB8az4+MTg7YltjKys+Pj4wXT0xMjh8az4+MTImNjN9YltjKys+Pj4wXT0xMjh8az4+NiY2M31iW2MrKz4+PjBdPTEyOHxrJjYzfX1iW2M+Pj4wXT0wO3JldHVybiBjLWd9LFY9YT0+MD09PWElNCYmKDAhPT1hJTEwMHx8MD09PWElNDAwKSx4YT1bMCwzMSw2MCw5MSwxMjEsMTUyLDE4MiwyMTMsMjQ0LDI3NCwzMDUsMzM1XSx5YT1bMCwzMSw1OSw5MCwxMjAsMTUxLDE4MSwyMTIsMjQzLDI3MywzMDQsMzM0XSxEYT1hPT57dmFyIGI9VChhKSsxLGM9emEoYik7YyYmVShhLEksYyxiKTtyZXR1cm4gY30sVz17fSxGYT0oKT0+e2lmKCFFYSl7dmFyIGE9e1VTRVI6XCJ3ZWJfdXNlclwiLExPR05BTUU6XCJ3ZWJfdXNlclwiLFBBVEg6XCIvXCIsUFdEOlwiL1wiLEhPTUU6XCIvaG9tZS93ZWJfdXNlclwiLExBTkc6KFwib2JqZWN0XCI9PXR5cGVvZiBuYXZpZ2F0b3ImJm5hdmlnYXRvci5sYW5ndWFnZXMmJm5hdmlnYXRvci5sYW5ndWFnZXNbMF18fFwiQ1wiKS5yZXBsYWNlKFwiLVwiLFxuXCJfXCIpK1wiLlVURi04XCIsXzptfHxcIi4vdGhpcy5wcm9ncmFtXCJ9LGI7Zm9yKGIgaW4gVyl2b2lkIDA9PT1XW2JdP2RlbGV0ZSBhW2JdOmFbYl09V1tiXTt2YXIgYz1bXTtmb3IoYiBpbiBhKWMucHVzaChgJHtifT0ke2FbYl19YCk7RWE9Y31yZXR1cm4gRWF9LEVhLEdhPVtudWxsLFtdLFtdXSxIYT1bMzEsMjksMzEsMzAsMzEsMzAsMzEsMzEsMzAsMzEsMzAsMzFdLElhPVszMSwyOCwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV07ZnVuY3Rpb24gSmEoYSl7dmFyIGI9QXJyYXkoVChhKSsxKTtVKGEsYiwwLGIubGVuZ3RoKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEthKGEsYixjLGQpe2Z1bmN0aW9uIGcoZixuLHEpe2ZvcihmPVwibnVtYmVyXCI9PXR5cGVvZiBmP2YudG9TdHJpbmcoKTpmfHxcIlwiO2YubGVuZ3RoPG47KWY9cVswXStmO3JldHVybiBmfWZ1bmN0aW9uIGgoZixuKXtyZXR1cm4gZyhmLG4sXCIwXCIpfWZ1bmN0aW9uIGsoZixuKXtmdW5jdGlvbiBxKEFhKXtyZXR1cm4gMD5BYT8tMTowPEFhPzE6MH12YXIgQTswPT09KEE9cShmLmdldEZ1bGxZZWFyKCktbi5nZXRGdWxsWWVhcigpKSkmJjA9PT0oQT1xKGYuZ2V0TW9udGgoKS1uLmdldE1vbnRoKCkpKSYmKEE9cShmLmdldERhdGUoKS1uLmdldERhdGUoKSkpO3JldHVybiBBfWZ1bmN0aW9uIHAoZil7c3dpdGNoKGYuZ2V0RGF5KCkpe2Nhc2UgMDpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLTEsMTEsMjkpO2Nhc2UgMTpyZXR1cm4gZjtjYXNlIDI6cmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSwwLDMpO2Nhc2UgMzpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLFxuMCwyKTtjYXNlIDQ6cmV0dXJuIG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSwwLDEpO2Nhc2UgNTpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLTEsMTEsMzEpO2Nhc2UgNjpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLTEsMTEsMzApfX1mdW5jdGlvbiB0KGYpe3ZhciBuPWYudGE7Zm9yKGY9bmV3IERhdGUoKG5ldyBEYXRlKGYudWErMTkwMCwwLDEpKS5nZXRUaW1lKCkpOzA8bjspe3ZhciBxPWYuZ2V0TW9udGgoKSxBPShWKGYuZ2V0RnVsbFllYXIoKSk/SGE6SWEpW3FdO2lmKG4+QS1mLmdldERhdGUoKSluLT1BLWYuZ2V0RGF0ZSgpKzEsZi5zZXREYXRlKDEpLDExPnE/Zi5zZXRNb250aChxKzEpOihmLnNldE1vbnRoKDApLGYuc2V0RnVsbFllYXIoZi5nZXRGdWxsWWVhcigpKzEpKTtlbHNle2Yuc2V0RGF0ZShmLmdldERhdGUoKStuKTticmVha319cT1uZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkrMSwwLDQpO249cChuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksXG4wLDQpKTtxPXAocSk7cmV0dXJuIDA+PWsobixmKT8wPj1rKHEsZik/Zi5nZXRGdWxsWWVhcigpKzE6Zi5nZXRGdWxsWWVhcigpOmYuZ2V0RnVsbFllYXIoKS0xfWE+Pj49MDtiPj4+PTA7Yz4+Pj0wO2Q+Pj49MDt2YXIgdT1KW2QrNDA+PjI+Pj4wXTtkPXtDYTpKW2Q+PjI+Pj4wXSxCYTpKW2QrND4+Mj4+PjBdLHZhOkpbZCs4Pj4yPj4+MF0seWE6SltkKzEyPj4yPj4+MF0sd2E6SltkKzE2Pj4yPj4+MF0sdWE6SltkKzIwPj4yPj4+MF0sc2E6SltkKzI0Pj4yPj4+MF0sdGE6SltkKzI4Pj4yPj4+MF0sSGE6SltkKzMyPj4yPj4+MF0sQWE6SltkKzM2Pj4yPj4+MF0sRGE6dT9TKHUpOlwiXCJ9O2M9UyhjKTt1PXtcIiVjXCI6XCIlYSAlYiAlZCAlSDolTTolUyAlWVwiLFwiJURcIjpcIiVtLyVkLyV5XCIsXCIlRlwiOlwiJVktJW0tJWRcIixcIiVoXCI6XCIlYlwiLFwiJXJcIjpcIiVJOiVNOiVTICVwXCIsXCIlUlwiOlwiJUg6JU1cIixcIiVUXCI6XCIlSDolTTolU1wiLFwiJXhcIjpcIiVtLyVkLyV5XCIsXCIlWFwiOlwiJUg6JU06JVNcIixcIiVFY1wiOlwiJWNcIixcblwiJUVDXCI6XCIlQ1wiLFwiJUV4XCI6XCIlbS8lZC8leVwiLFwiJUVYXCI6XCIlSDolTTolU1wiLFwiJUV5XCI6XCIleVwiLFwiJUVZXCI6XCIlWVwiLFwiJU9kXCI6XCIlZFwiLFwiJU9lXCI6XCIlZVwiLFwiJU9IXCI6XCIlSFwiLFwiJU9JXCI6XCIlSVwiLFwiJU9tXCI6XCIlbVwiLFwiJU9NXCI6XCIlTVwiLFwiJU9TXCI6XCIlU1wiLFwiJU91XCI6XCIldVwiLFwiJU9VXCI6XCIlVVwiLFwiJU9WXCI6XCIlVlwiLFwiJU93XCI6XCIld1wiLFwiJU9XXCI6XCIlV1wiLFwiJU95XCI6XCIleVwifTtmb3IodmFyIHYgaW4gdSljPWMucmVwbGFjZShuZXcgUmVnRXhwKHYsXCJnXCIpLHVbdl0pO3ZhciBCYT1cIlN1bmRheSBNb25kYXkgVHVlc2RheSBXZWRuZXNkYXkgVGh1cnNkYXkgRnJpZGF5IFNhdHVyZGF5XCIuc3BsaXQoXCIgXCIpLENhPVwiSmFudWFyeSBGZWJydWFyeSBNYXJjaCBBcHJpbCBNYXkgSnVuZSBKdWx5IEF1Z3VzdCBTZXB0ZW1iZXIgT2N0b2JlciBOb3ZlbWJlciBEZWNlbWJlclwiLnNwbGl0KFwiIFwiKTt1PXtcIiVhXCI6Zj0+QmFbZi5zYV0uc3Vic3RyaW5nKDAsMyksXCIlQVwiOmY9PkJhW2Yuc2FdLFwiJWJcIjpmPT5cbkNhW2Yud2FdLnN1YnN0cmluZygwLDMpLFwiJUJcIjpmPT5DYVtmLndhXSxcIiVDXCI6Zj0+aCgoZi51YSsxOTAwKS8xMDB8MCwyKSxcIiVkXCI6Zj0+aChmLnlhLDIpLFwiJWVcIjpmPT5nKGYueWEsMixcIiBcIiksXCIlZ1wiOmY9PnQoZikudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXCIlR1wiOmY9PnQoZiksXCIlSFwiOmY9PmgoZi52YSwyKSxcIiVJXCI6Zj0+e2Y9Zi52YTswPT1mP2Y9MTI6MTI8ZiYmKGYtPTEyKTtyZXR1cm4gaChmLDIpfSxcIiVqXCI6Zj0+e2Zvcih2YXIgbj0wLHE9MDtxPD1mLndhLTE7bis9KFYoZi51YSsxOTAwKT9IYTpJYSlbcSsrXSk7cmV0dXJuIGgoZi55YStuLDMpfSxcIiVtXCI6Zj0+aChmLndhKzEsMiksXCIlTVwiOmY9PmgoZi5CYSwyKSxcIiVuXCI6KCk9PlwiXFxuXCIsXCIlcFwiOmY9PjA8PWYudmEmJjEyPmYudmE/XCJBTVwiOlwiUE1cIixcIiVTXCI6Zj0+aChmLkNhLDIpLFwiJXRcIjooKT0+XCJcXHRcIixcIiV1XCI6Zj0+Zi5zYXx8NyxcIiVVXCI6Zj0+aChNYXRoLmZsb29yKChmLnRhKzctZi5zYSkvNyksMiksXCIlVlwiOmY9Plxue3ZhciBuPU1hdGguZmxvb3IoKGYudGErNy0oZi5zYSs2KSU3KS83KTsyPj0oZi5zYSszNzEtZi50YS0yKSU3JiZuKys7aWYobik1Mz09biYmKHE9KGYuc2ErMzcxLWYudGEpJTcsND09cXx8Mz09cSYmVihmLnVhKXx8KG49MSkpO2Vsc2V7bj01Mjt2YXIgcT0oZi5zYSs3LWYudGEtMSklNzsoND09cXx8NT09cSYmVihmLnVhJTQwMC0xKSkmJm4rK31yZXR1cm4gaChuLDIpfSxcIiV3XCI6Zj0+Zi5zYSxcIiVXXCI6Zj0+aChNYXRoLmZsb29yKChmLnRhKzctKGYuc2ErNiklNykvNyksMiksXCIleVwiOmY9PihmLnVhKzE5MDApLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpLFwiJVlcIjpmPT5mLnVhKzE5MDAsXCIlelwiOmY9PntmPWYuQWE7dmFyIG49MDw9ZjtmPU1hdGguYWJzKGYpLzYwO3JldHVybihuP1wiK1wiOlwiLVwiKStTdHJpbmcoXCIwMDAwXCIrKGYvNjAqMTAwK2YlNjApKS5zbGljZSgtNCl9LFwiJVpcIjpmPT5mLkRhLFwiJSVcIjooKT0+XCIlXCJ9O2M9Yy5yZXBsYWNlKC8lJS9nLFwiXFx4MDBcXHgwMFwiKTtmb3IodiBpbiB1KWMuaW5jbHVkZXModikmJlxuKGM9Yy5yZXBsYWNlKG5ldyBSZWdFeHAodixcImdcIiksdVt2XShkKSkpO2M9Yy5yZXBsYWNlKC9cXDBcXDAvZyxcIiVcIik7dj1KYShjKTtpZih2Lmxlbmd0aD5iKXJldHVybiAwO0guc2V0KHYsYT4+PjApO3JldHVybiB2Lmxlbmd0aC0xfXZhciBYPVtdLFk9dm9pZCAwLExhPVtdO1xuZnVuY3Rpb24gTWEoYSxiKXtpZighWSl7WT1uZXcgV2Vha01hcDt2YXIgYz1MLmxlbmd0aDtpZihZKWZvcih2YXIgZD0wO2Q8MCtjO2QrKyl7dmFyIGc9ZDt2YXIgaD1YW2ddO2h8fChnPj1YLmxlbmd0aCYmKFgubGVuZ3RoPWcrMSksWFtnXT1oPUwuZ2V0KGcpKTsoZz1oKSYmWS5zZXQoZyxkKX19aWYoYz1ZLmdldChhKXx8MClyZXR1cm4gYztpZihMYS5sZW5ndGgpYz1MYS5wb3AoKTtlbHNle3RyeXtMLmdyb3coMSl9Y2F0Y2gocCl7aWYoIShwIGluc3RhbmNlb2YgUmFuZ2VFcnJvcikpdGhyb3cgcDt0aHJvd1wiVW5hYmxlIHRvIGdyb3cgd2FzbSB0YWJsZS4gU2V0IEFMTE9XX1RBQkxFX0dST1dUSC5cIjt9Yz1MLmxlbmd0aC0xfXRyeXtkPWMsTC5zZXQoZCxhKSxYW2RdPUwuZ2V0KGQpfWNhdGNoKHApe2lmKCEocCBpbnN0YW5jZW9mIFR5cGVFcnJvcikpdGhyb3cgcDtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBXZWJBc3NlbWJseS5GdW5jdGlvbil7ZD1XZWJBc3NlbWJseS5GdW5jdGlvbjtcbmc9e2k6XCJpMzJcIixqOlwiaTY0XCIsZjpcImYzMlwiLGQ6XCJmNjRcIixwOlwiaTMyXCJ9O2g9e3BhcmFtZXRlcnM6W10scmVzdWx0czpcInZcIj09YlswXT9bXTpbZ1tiWzBdXV19O2Zvcih2YXIgaz0xO2s8Yi5sZW5ndGg7KytrKWgucGFyYW1ldGVycy5wdXNoKGdbYltrXV0pO2I9bmV3IGQoaCxhKX1lbHNle2Q9WzFdO2c9Yi5zbGljZSgwLDEpO2I9Yi5zbGljZSgxKTtoPXtpOjEyNyxwOjEyNyxqOjEyNixmOjEyNSxkOjEyNH07ZC5wdXNoKDk2KTtrPWIubGVuZ3RoOzEyOD5rP2QucHVzaChrKTpkLnB1c2goayUxMjh8MTI4LGs+PjcpO2ZvcihrPTA7azxiLmxlbmd0aDsrK2spZC5wdXNoKGhbYltrXV0pO1widlwiPT1nP2QucHVzaCgwKTpkLnB1c2goMSxoW2ddKTtiPVswLDk3LDExNSwxMDksMSwwLDAsMCwxXTtnPWQubGVuZ3RoOzEyOD5nP2IucHVzaChnKTpiLnB1c2goZyUxMjh8MTI4LGc+PjcpO2IucHVzaC5hcHBseShiLGQpO2IucHVzaCgyLDcsMSwxLDEwMSwxLDEwMiwwLDAsNyw1LDEsMSwxMDIsXG4wLDApO2I9bmV3IFdlYkFzc2VtYmx5Lk1vZHVsZShuZXcgVWludDhBcnJheShiKSk7Yj0obmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKGIse2U6e2Y6YX19KSkuZXhwb3J0cy5mfWQ9YztMLnNldChkLGIpO1hbZF09TC5nZXQoZCl9WS5zZXQoYSxjKTtyZXR1cm4gY31cbnZhciBPYT17YTpmdW5jdGlvbihhLGIsYyl7YT4+Pj0wOyhuZXcgc2EoYSkpLnphKGI+Pj4wLGM+Pj4wKTt0YT1hO3VhKys7dGhyb3cgdGE7fSxlOmZ1bmN0aW9uKCl7cmV0dXJuIDB9LEg6ZnVuY3Rpb24oKXt9LHg6ZnVuY3Rpb24oKXt9LHo6ZnVuY3Rpb24oKXt9LEo6ZnVuY3Rpb24oKXtyZXR1cm4gMH0sRjpmdW5jdGlvbigpe30sQTpmdW5jdGlvbigpe30sRTpmdW5jdGlvbigpe30sZzpmdW5jdGlvbigpe30seTpmdW5jdGlvbigpe30sdjpmdW5jdGlvbigpe30sRzpmdW5jdGlvbigpe30sdzpmdW5jdGlvbigpe30sbDooKT0+ITAsbzpmdW5jdGlvbihhLGIsYyl7YT1iKzIwOTcxNTI+Pj4wPDQxOTQzMDUtISFhPyhhPj4+MCkrNDI5NDk2NzI5NipiOk5hTjtjPj4+PTA7YT1uZXcgRGF0ZSgxRTMqYSk7SltjPj4yPj4+MF09YS5nZXRVVENTZWNvbmRzKCk7SltjKzQ+PjI+Pj4wXT1hLmdldFVUQ01pbnV0ZXMoKTtKW2MrOD4+Mj4+PjBdPWEuZ2V0VVRDSG91cnMoKTtKW2MrMTI+PjI+Pj5cbjBdPWEuZ2V0VVRDRGF0ZSgpO0pbYysxNj4+Mj4+PjBdPWEuZ2V0VVRDTW9udGgoKTtKW2MrMjA+PjI+Pj4wXT1hLmdldFVUQ0Z1bGxZZWFyKCktMTkwMDtKW2MrMjQ+PjI+Pj4wXT1hLmdldFVUQ0RheSgpO0pbYysyOD4+Mj4+PjBdPShhLmdldFRpbWUoKS1EYXRlLlVUQyhhLmdldFVUQ0Z1bGxZZWFyKCksMCwxLDAsMCwwLDApKS84NjRFNXwwfSxwOmZ1bmN0aW9uKGEsYixjKXthPWIrMjA5NzE1Mj4+PjA8NDE5NDMwNS0hIWE/KGE+Pj4wKSs0Mjk0OTY3Mjk2KmI6TmFOO2M+Pj49MDthPW5ldyBEYXRlKDFFMyphKTtKW2M+PjI+Pj4wXT1hLmdldFNlY29uZHMoKTtKW2MrND4+Mj4+PjBdPWEuZ2V0TWludXRlcygpO0pbYys4Pj4yPj4+MF09YS5nZXRIb3VycygpO0pbYysxMj4+Mj4+PjBdPWEuZ2V0RGF0ZSgpO0pbYysxNj4+Mj4+PjBdPWEuZ2V0TW9udGgoKTtKW2MrMjA+PjI+Pj4wXT1hLmdldEZ1bGxZZWFyKCktMTkwMDtKW2MrMjQ+PjI+Pj4wXT1hLmdldERheSgpO0pbYysyOD4+Mj4+PlxuMF09KFYoYS5nZXRGdWxsWWVhcigpKT94YTp5YSlbYS5nZXRNb250aCgpXSthLmdldERhdGUoKS0xfDA7SltjKzM2Pj4yPj4+MF09LSg2MCphLmdldFRpbWV6b25lT2Zmc2V0KCkpO2I9KG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSw2LDEpKS5nZXRUaW1lem9uZU9mZnNldCgpO3ZhciBkPShuZXcgRGF0ZShhLmdldEZ1bGxZZWFyKCksMCwxKSkuZ2V0VGltZXpvbmVPZmZzZXQoKTtKW2MrMzI+PjI+Pj4wXT0oYiE9ZCYmYS5nZXRUaW1lem9uZU9mZnNldCgpPT1NYXRoLm1pbihkLGIpKXwwfSxxOmZ1bmN0aW9uKGEpe2E+Pj49MDt2YXIgYj1uZXcgRGF0ZShKW2ErMjA+PjI+Pj4wXSsxOTAwLEpbYSsxNj4+Mj4+PjBdLEpbYSsxMj4+Mj4+PjBdLEpbYSs4Pj4yPj4+MF0sSlthKzQ+PjI+Pj4wXSxKW2E+PjI+Pj4wXSwwKSxjPUpbYSszMj4+Mj4+PjBdLGQ9Yi5nZXRUaW1lem9uZU9mZnNldCgpLGc9KG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSw2LDEpKS5nZXRUaW1lem9uZU9mZnNldCgpLFxuaD0obmV3IERhdGUoYi5nZXRGdWxsWWVhcigpLDAsMSkpLmdldFRpbWV6b25lT2Zmc2V0KCksaz1NYXRoLm1pbihoLGcpOzA+Yz9KW2ErMzI+PjI+Pj4wXT1OdW1iZXIoZyE9aCYmaz09ZCk6MDxjIT0oaz09ZCkmJihnPU1hdGgubWF4KGgsZyksYi5zZXRUaW1lKGIuZ2V0VGltZSgpKzZFNCooKDA8Yz9rOmcpLWQpKSk7SlthKzI0Pj4yPj4+MF09Yi5nZXREYXkoKTtKW2ErMjg+PjI+Pj4wXT0oVihiLmdldEZ1bGxZZWFyKCkpP3hhOnlhKVtiLmdldE1vbnRoKCldK2IuZ2V0RGF0ZSgpLTF8MDtKW2E+PjI+Pj4wXT1iLmdldFNlY29uZHMoKTtKW2ErND4+Mj4+PjBdPWIuZ2V0TWludXRlcygpO0pbYSs4Pj4yPj4+MF09Yi5nZXRIb3VycygpO0pbYSsxMj4+Mj4+PjBdPWIuZ2V0RGF0ZSgpO0pbYSsxNj4+Mj4+PjBdPWIuZ2V0TW9udGgoKTtKW2ErMjA+PjI+Pj4wXT1iLmdldFllYXIoKTthPWIuZ2V0VGltZSgpLzFFMztyZXR1cm4gTmEoKFE9YSwxPD0rTWF0aC5hYnMoUSk/MDxRPytNYXRoLmZsb29yKFEvXG40Mjk0OTY3Mjk2KT4+PjA6fn4rTWF0aC5jZWlsKChRLSsofn5RPj4+MCkpLzQyOTQ5NjcyOTYpPj4+MDowKSksYT4+PjB9LG06ZnVuY3Rpb24oKXtyZXR1cm4tNTJ9LG46ZnVuY3Rpb24oKXt9LHQ6ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQodCl7cmV0dXJuKHQ9dC50b1RpbWVTdHJpbmcoKS5tYXRjaCgvXFwoKFtBLVphLXogXSspXFwpJC8pKT90WzFdOlwiR01UXCJ9Yz4+Pj0wO3ZhciBnPShuZXcgRGF0ZSkuZ2V0RnVsbFllYXIoKSxoPW5ldyBEYXRlKGcsMCwxKSxrPW5ldyBEYXRlKGcsNiwxKTtnPWguZ2V0VGltZXpvbmVPZmZzZXQoKTt2YXIgcD1rLmdldFRpbWV6b25lT2Zmc2V0KCk7S1thPj4+MD4+Mj4+PjBdPTYwKk1hdGgubWF4KGcscCk7SltiPj4+MD4+Mj4+PjBdPU51bWJlcihnIT1wKTthPWQoaCk7Yj1kKGspO2E9RGEoYSk7Yj1EYShiKTtwPGc/KEtbYz4+Mj4+PjBdPWEsS1tjKzQ+PjI+Pj4wXT1iKTooS1tjPj4yPj4+MF09YixLW2MrND4+Mj4+PjBdPWEpfSxkOigpPT57RShcIlwiKX0sXG5oOmZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCl9LHU6ZnVuY3Rpb24oKXtyZXR1cm4gNDI5NDkwMTc2MH0sYjooKT0+cGVyZm9ybWFuY2Uubm93KCksSTpmdW5jdGlvbihhLGIsYyl7Yj4+Pj0wO3JldHVybiBJLmNvcHlXaXRoaW4oYT4+PjA+Pj4wLGI+Pj4wLGIrKGM+Pj4wKT4+PjApfSxzOmZ1bmN0aW9uKGEpe2E+Pj49MDt2YXIgYj1JLmxlbmd0aDtpZig0Mjk0OTAxNzYwPGEpcmV0dXJuITE7Zm9yKHZhciBjPTE7ND49YztjKj0yKXt2YXIgZD1iKigxKy4yL2MpO2Q9TWF0aC5taW4oZCxhKzEwMDY2MzI5Nik7dmFyIGc9TWF0aDtkPU1hdGgubWF4KGEsZCk7YTp7Zz1nLm1pbi5jYWxsKGcsNDI5NDkwMTc2MCxkKyg2NTUzNi1kJTY1NTM2KSU2NTUzNiktRi5idWZmZXIuYnl0ZUxlbmd0aCs2NTUzNT4+PjE2O3RyeXtGLmdyb3coZyk7aGEoKTt2YXIgaD0xO2JyZWFrIGF9Y2F0Y2goayl7fWg9dm9pZCAwfWlmKGgpcmV0dXJuITB9cmV0dXJuITF9LEM6ZnVuY3Rpb24oYSxiKXthPj4+PVxuMDtiPj4+PTA7dmFyIGM9MDtGYSgpLmZvckVhY2goZnVuY3Rpb24oZCxnKXt2YXIgaD1iK2M7Zz1LW2ErNCpnPj4yPj4+MF09aDtmb3IoaD0wO2g8ZC5sZW5ndGg7KytoKUhbZysrPj4wPj4+MF09ZC5jaGFyQ29kZUF0KGgpO0hbZz4+MD4+PjBdPTA7Yys9ZC5sZW5ndGgrMX0pO3JldHVybiAwfSxEOmZ1bmN0aW9uKGEsYil7YT4+Pj0wO2I+Pj49MDt2YXIgYz1GYSgpO0tbYT4+Mj4+PjBdPWMubGVuZ3RoO3ZhciBkPTA7Yy5mb3JFYWNoKGZ1bmN0aW9uKGcpe2QrPWcubGVuZ3RoKzF9KTtLW2I+PjI+Pj4wXT1kO3JldHVybiAwfSxmOigpPT41MixrOmZ1bmN0aW9uKCl7cmV0dXJuIDUyfSxyOmZ1bmN0aW9uKCl7cmV0dXJuIDcwfSxqOmZ1bmN0aW9uKGEsYixjLGQpe2I+Pj49MDtjPj4+PTA7ZD4+Pj0wO2Zvcih2YXIgZz0wLGg9MDtoPGM7aCsrKXt2YXIgaz1LW2I+PjI+Pj4wXSxwPUtbYis0Pj4yPj4+MF07Yis9ODtmb3IodmFyIHQ9MDt0PHA7dCsrKXt2YXIgdT1JW2srdD4+PjBdLHY9XG5HYVthXTswPT09dXx8MTA9PT11PygoMT09PWE/ZWE6Qykod2EodiwwKSksdi5sZW5ndGg9MCk6di5wdXNoKHUpfWcrPXB9S1tkPj4yPj4+MF09ZztyZXR1cm4gMH0sQjpLYSxjOmZ1bmN0aW9uKGEsYixjLGQpe3JldHVybiBLYShhPj4+MCxiPj4+MCxjPj4+MCxkPj4+MCl9LGk6ZnVuY3Rpb24oYSxiLGMsZCl7Y29uc3QgZz1MLmxlbmd0aDthPW5ldyBVaW50OEFycmF5KEkuc2xpY2UoYStiLGErYykpO3RyeXt2YXIgaD1uZXcgV2ViQXNzZW1ibHkuTW9kdWxlKGEpLGs9bmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKGgse2Vudjp7bWVtb3J5OkZ9fSkscDtmb3IocCBpbiBrLmV4cG9ydHMpTWEoay5leHBvcnRzW3BdKTtyZXR1cm4gZzxMLmxlbmd0aD9nOmR9Y2F0Y2godCl7cmV0dXJuIGNvbnNvbGUubG9nKHQpLGR9fX07XG4oZnVuY3Rpb24oKXtmdW5jdGlvbiBhKGMpe2M9Yy5leHBvcnRzO0c9Yz1QYShjKTtGPUcuSztoYSgpO0w9Ry5uYTtqYS51bnNoaWZ0KEcuTCk7TS0tO2UubW9uaXRvclJ1bkRlcGVuZGVuY2llcyYmZS5tb25pdG9yUnVuRGVwZW5kZW5jaWVzKE0pO2lmKDA9PU0mJihudWxsIT09TiYmKGNsZWFySW50ZXJ2YWwoTiksTj1udWxsKSxPKSl7dmFyIGQ9TztPPW51bGw7ZCgpfXJldHVybiBjfXZhciBiPXthOk9hfTtNKys7ZS5tb25pdG9yUnVuRGVwZW5kZW5jaWVzJiZlLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMoTSk7aWYoZS5pbnN0YW50aWF0ZVdhc20pdHJ5e3JldHVybiBlLmluc3RhbnRpYXRlV2FzbShiLGEpfWNhdGNoKGMpe0MoXCJNb2R1bGUuaW5zdGFudGlhdGVXYXNtIGNhbGxiYWNrIGZhaWxlZCB3aXRoIGVycm9yOiBcIitjKSxsKGMpfXJhKGIsZnVuY3Rpb24oYyl7YShjLmluc3RhbmNlKX0pLmNhdGNoKGwpO3JldHVybnt9fSkoKTtcbmUuX09ydEluaXQ9KGEsYik9PihlLl9PcnRJbml0PUcuTSkoYSxiKTtlLl9PcnRHZXRMYXN0RXJyb3I9KGEsYik9PihlLl9PcnRHZXRMYXN0RXJyb3I9Ry5OKShhLGIpO2UuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zPShhLGIsYyxkLGcsaCxrLHAsdCx1KT0+KGUuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zPUcuTykoYSxiLGMsZCxnLGgsayxwLHQsdSk7ZS5fT3J0QXBwZW5kRXhlY3V0aW9uUHJvdmlkZXI9KGEsYik9PihlLl9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlcj1HLlApKGEsYik7ZS5fT3J0QWRkRnJlZURpbWVuc2lvbk92ZXJyaWRlPShhLGIsYyk9PihlLl9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGU9Ry5RKShhLGIsYyk7ZS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5PShhLGIsYyk9PihlLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnk9Ry5SKShhLGIsYyk7ZS5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zPWE9PihlLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnM9Ry5TKShhKTtcbmUuX09ydENyZWF0ZVNlc3Npb249KGEsYixjKT0+KGUuX09ydENyZWF0ZVNlc3Npb249Ry5UKShhLGIsYyk7ZS5fT3J0UmVsZWFzZVNlc3Npb249YT0+KGUuX09ydFJlbGVhc2VTZXNzaW9uPUcuVSkoYSk7ZS5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudD0oYSxiLGMpPT4oZS5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudD1HLlYpKGEsYixjKTtlLl9PcnRHZXRJbnB1dE5hbWU9KGEsYik9PihlLl9PcnRHZXRJbnB1dE5hbWU9Ry5XKShhLGIpO2UuX09ydEdldE91dHB1dE5hbWU9KGEsYik9PihlLl9PcnRHZXRPdXRwdXROYW1lPUcuWCkoYSxiKTtlLl9PcnRGcmVlPWE9PihlLl9PcnRGcmVlPUcuWSkoYSk7ZS5fT3J0Q3JlYXRlVGVuc29yPShhLGIsYyxkLGcsaCk9PihlLl9PcnRDcmVhdGVUZW5zb3I9Ry5aKShhLGIsYyxkLGcsaCk7ZS5fT3J0R2V0VGVuc29yRGF0YT0oYSxiLGMsZCxnKT0+KGUuX09ydEdldFRlbnNvckRhdGE9Ry5fKShhLGIsYyxkLGcpO1xuZS5fT3J0UmVsZWFzZVRlbnNvcj1hPT4oZS5fT3J0UmVsZWFzZVRlbnNvcj1HLiQpKGEpO2UuX09ydENyZWF0ZVJ1bk9wdGlvbnM9KGEsYixjLGQpPT4oZS5fT3J0Q3JlYXRlUnVuT3B0aW9ucz1HLmFhKShhLGIsYyxkKTtlLl9PcnRBZGRSdW5Db25maWdFbnRyeT0oYSxiLGMpPT4oZS5fT3J0QWRkUnVuQ29uZmlnRW50cnk9Ry5iYSkoYSxiLGMpO2UuX09ydFJlbGVhc2VSdW5PcHRpb25zPWE9PihlLl9PcnRSZWxlYXNlUnVuT3B0aW9ucz1HLmNhKShhKTtlLl9PcnRDcmVhdGVCaW5kaW5nPWE9PihlLl9PcnRDcmVhdGVCaW5kaW5nPUcuZGEpKGEpO2UuX09ydEJpbmRJbnB1dD0oYSxiLGMpPT4oZS5fT3J0QmluZElucHV0PUcuZWEpKGEsYixjKTtlLl9PcnRCaW5kT3V0cHV0PShhLGIsYyxkKT0+KGUuX09ydEJpbmRPdXRwdXQ9Ry5mYSkoYSxiLGMsZCk7ZS5fT3J0Q2xlYXJCb3VuZE91dHB1dHM9YT0+KGUuX09ydENsZWFyQm91bmRPdXRwdXRzPUcuZ2EpKGEpO1xuZS5fT3J0UmVsZWFzZUJpbmRpbmc9YT0+KGUuX09ydFJlbGVhc2VCaW5kaW5nPUcuaGEpKGEpO2UuX09ydFJ1bldpdGhCaW5kaW5nPShhLGIsYyxkLGcpPT4oZS5fT3J0UnVuV2l0aEJpbmRpbmc9Ry5pYSkoYSxiLGMsZCxnKTtlLl9PcnRSdW49KGEsYixjLGQsZyxoLGsscCk9PihlLl9PcnRSdW49Ry5qYSkoYSxiLGMsZCxnLGgsayxwKTtlLl9PcnRFbmRQcm9maWxpbmc9YT0+KGUuX09ydEVuZFByb2ZpbGluZz1HLmthKShhKTt2YXIgemE9ZS5fbWFsbG9jPWE9Pih6YT1lLl9tYWxsb2M9Ry5sYSkoYSk7ZS5fZnJlZT1hPT4oZS5fZnJlZT1HLm1hKShhKTt2YXIgTmE9YT0+KE5hPUcub2EpKGEpLFFhPSgpPT4oUWE9Ry5wYSkoKSxSYT1hPT4oUmE9Ry5xYSkoYSksU2E9YT0+KFNhPUcucmEpKGEpO2UuX19fc3RhcnRfZW1fanM9OTA1NjAwO2UuX19fc3RvcF9lbV9qcz05MDYyMTI7XG5mdW5jdGlvbiBQYShhKXthPU9iamVjdC5hc3NpZ24oe30sYSk7dmFyIGI9ZD0+KCk9PmQoKT4+PjAsYz1kPT5nPT5kKGcpPj4+MDthLl9fZXJybm9fbG9jYXRpb249YihhLl9fZXJybm9fbG9jYXRpb24pO2EubWFsbG9jPWMoYS5tYWxsb2MpO2Euc3RhY2tTYXZlPWIoYS5zdGFja1NhdmUpO2Euc3RhY2tBbGxvYz1jKGEuc3RhY2tBbGxvYyk7cmV0dXJuIGF9ZS5zdGFja0FsbG9jPVNhO2Uuc3RhY2tTYXZlPVFhO2Uuc3RhY2tSZXN0b3JlPVJhO2UuYWRkRnVuY3Rpb249TWE7ZS5VVEY4VG9TdHJpbmc9UztlLnN0cmluZ1RvVVRGOD0oYSxiLGMpPT5VKGEsSSxiLGMpO2UubGVuZ3RoQnl0ZXNVVEY4PVQ7dmFyIFo7Tz1mdW5jdGlvbiBUYSgpe1p8fFVhKCk7Wnx8KE89VGEpfTtcbmZ1bmN0aW9uIFVhKCl7ZnVuY3Rpb24gYSgpe2lmKCFaJiYoWj0hMCxlLmNhbGxlZFJ1bj0hMCwhZmEpKXtSKGphKTthYShlKTtpZihlLm9uUnVudGltZUluaXRpYWxpemVkKWUub25SdW50aW1lSW5pdGlhbGl6ZWQoKTtpZihlLnBvc3RSdW4pZm9yKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUucG9zdFJ1biYmKGUucG9zdFJ1bj1bZS5wb3N0UnVuXSk7ZS5wb3N0UnVuLmxlbmd0aDspe3ZhciBiPWUucG9zdFJ1bi5zaGlmdCgpO2thLnVuc2hpZnQoYil9UihrYSl9fWlmKCEoMDxNKSl7aWYoZS5wcmVSdW4pZm9yKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUucHJlUnVuJiYoZS5wcmVSdW49W2UucHJlUnVuXSk7ZS5wcmVSdW4ubGVuZ3RoOylsYSgpO1IoaWEpOzA8TXx8KGUuc2V0U3RhdHVzPyhlLnNldFN0YXR1cyhcIlJ1bm5pbmcuLi5cIiksc2V0VGltZW91dChmdW5jdGlvbigpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtlLnNldFN0YXR1cyhcIlwiKX0sMSk7YSgpfSwxKSk6YSgpKX19XG5pZihlLnByZUluaXQpZm9yKFwiZnVuY3Rpb25cIj09dHlwZW9mIGUucHJlSW5pdCYmKGUucHJlSW5pdD1bZS5wcmVJbml0XSk7MDxlLnByZUluaXQubGVuZ3RoOyllLnByZUluaXQucG9wKCkoKTtVYSgpO1xuXG5cbiAgcmV0dXJuIG1vZHVsZUFyZy5yZWFkeVxufVxuXG4pO1xufSkoKTtcbmlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG4gIG1vZHVsZS5leHBvcnRzID0gb3J0V2FzbTtcbmVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSlcbiAgZGVmaW5lKFtdLCAoKSA9PiBvcnRXYXNtKTtcbiIsICIiLCAiIiwgImV4cG9ydCBjb25zdCBjcHVzID0gdW5kZWZpbmVkOyIsICJcbnZhciBvcnRXYXNtVGhyZWFkZWQgPSAoKCkgPT4ge1xuICB2YXIgX3NjcmlwdERpciA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdCA/IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjIDogdW5kZWZpbmVkO1xuICBpZiAodHlwZW9mIF9fZmlsZW5hbWUgIT09ICd1bmRlZmluZWQnKSBfc2NyaXB0RGlyID0gX3NjcmlwdERpciB8fCBfX2ZpbGVuYW1lO1xuICByZXR1cm4gKFxuZnVuY3Rpb24obW9kdWxlQXJnID0ge30pIHtcblxuZnVuY3Rpb24gYWEoKXtlLmJ1ZmZlciE9bC5idWZmZXImJm0oKTtyZXR1cm4gbH1mdW5jdGlvbiBuKCl7ZS5idWZmZXIhPWwuYnVmZmVyJiZtKCk7cmV0dXJuIGJhfWZ1bmN0aW9uIHAoKXtlLmJ1ZmZlciE9bC5idWZmZXImJm0oKTtyZXR1cm4gY2F9ZnVuY3Rpb24gdCgpe2UuYnVmZmVyIT1sLmJ1ZmZlciYmbSgpO3JldHVybiBkYX1mdW5jdGlvbiBlYSgpe2UuYnVmZmVyIT1sLmJ1ZmZlciYmbSgpO3JldHVybiBmYX12YXIgdz1tb2R1bGVBcmcsaGEseDt3LnJlYWR5PW5ldyBQcm9taXNlKChhLGIpPT57aGE9YTt4PWJ9KTtcbnZhciBpYT1PYmplY3QuYXNzaWduKHt9LHcpLGphPVwiLi90aGlzLnByb2dyYW1cIix6PShhLGIpPT57dGhyb3cgYjt9LGthPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3csQT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpbXBvcnRTY3JpcHRzLEM9XCJvYmplY3RcIj09dHlwZW9mIHByb2Nlc3MmJlwib2JqZWN0XCI9PXR5cGVvZiBwcm9jZXNzLnZlcnNpb25zJiZcInN0cmluZ1wiPT10eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLEQ9dy5FTlZJUk9OTUVOVF9JU19QVEhSRUFEfHwhMSxFPVwiXCI7ZnVuY3Rpb24gbGEoYSl7cmV0dXJuIHcubG9jYXRlRmlsZT93LmxvY2F0ZUZpbGUoYSxFKTpFK2F9dmFyIG1hLEYsRztcbmlmKEMpe3ZhciBmcz1yZXF1aXJlKFwiZnNcIiksbmE9cmVxdWlyZShcInBhdGhcIik7RT1BP25hLmRpcm5hbWUoRSkrXCIvXCI6X19kaXJuYW1lK1wiL1wiO21hPShiLGMpPT57Yj1iLnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpP25ldyBVUkwoYik6bmEubm9ybWFsaXplKGIpO3JldHVybiBmcy5yZWFkRmlsZVN5bmMoYixjP3ZvaWQgMDpcInV0ZjhcIil9O0c9Yj0+e2I9bWEoYiwhMCk7Yi5idWZmZXJ8fChiPW5ldyBVaW50OEFycmF5KGIpKTtyZXR1cm4gYn07Rj0oYixjLGQsZz0hMCk9PntiPWIuc3RhcnRzV2l0aChcImZpbGU6Ly9cIik/bmV3IFVSTChiKTpuYS5ub3JtYWxpemUoYik7ZnMucmVhZEZpbGUoYixnP3ZvaWQgMDpcInV0ZjhcIiwoaCxrKT0+e2g/ZChoKTpjKGc/ay5idWZmZXI6ayl9KX07IXcudGhpc1Byb2dyYW0mJjE8cHJvY2Vzcy5hcmd2Lmxlbmd0aCYmKGphPXByb2Nlc3MuYXJndlsxXS5yZXBsYWNlKC9cXFxcL2csXCIvXCIpKTtwcm9jZXNzLmFyZ3Yuc2xpY2UoMik7ej0oYixjKT0+e3Byb2Nlc3MuZXhpdENvZGU9XG5iO3Rocm93IGM7fTt3Lmluc3BlY3Q9KCk9PlwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cIjtsZXQgYTt0cnl7YT1yZXF1aXJlKFwid29ya2VyX3RocmVhZHNcIil9Y2F0Y2goYil7dGhyb3cgY29uc29sZS5lcnJvcignVGhlIFwid29ya2VyX3RocmVhZHNcIiBtb2R1bGUgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIG5vZGUuanMgYnVpbGQgLSBwZXJoYXBzIGEgbmV3ZXIgdmVyc2lvbiBpcyBuZWVkZWQ/JyksYjt9Z2xvYmFsLldvcmtlcj1hLldvcmtlcn1lbHNlIGlmKGthfHxBKUE/RT1zZWxmLmxvY2F0aW9uLmhyZWY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50JiZkb2N1bWVudC5jdXJyZW50U2NyaXB0JiYoRT1kb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyksKHR5cGVvZiBfc2NyaXB0RGlyICE9PSBcInVuZGVmaW5lZFwiICYmIF9zY3JpcHREaXIpJiYoRT1fc2NyaXB0RGlyKSwwIT09RS5pbmRleE9mKFwiYmxvYjpcIik/RT1FLnN1YnN0cigwLEUucmVwbGFjZSgvWz8jXS4qLyxcIlwiKS5sYXN0SW5kZXhPZihcIi9cIikrMSk6RT1cIlwiLEN8fChtYT1hPT57dmFyIGI9XG5uZXcgWE1MSHR0cFJlcXVlc3Q7Yi5vcGVuKFwiR0VUXCIsYSwhMSk7Yi5zZW5kKG51bGwpO3JldHVybiBiLnJlc3BvbnNlVGV4dH0sQSYmKEc9YT0+e3ZhciBiPW5ldyBYTUxIdHRwUmVxdWVzdDtiLm9wZW4oXCJHRVRcIixhLCExKTtiLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7Yi5zZW5kKG51bGwpO3JldHVybiBuZXcgVWludDhBcnJheShiLnJlc3BvbnNlKX0pLEY9KGEsYixjKT0+e3ZhciBkPW5ldyBYTUxIdHRwUmVxdWVzdDtkLm9wZW4oXCJHRVRcIixhLCEwKTtkLnJlc3BvbnNlVHlwZT1cImFycmF5YnVmZmVyXCI7ZC5vbmxvYWQ9KCk9PnsyMDA9PWQuc3RhdHVzfHwwPT1kLnN0YXR1cyYmZC5yZXNwb25zZT9iKGQucmVzcG9uc2UpOmMoKX07ZC5vbmVycm9yPWM7ZC5zZW5kKG51bGwpfSk7QyYmXCJ1bmRlZmluZWRcIj09dHlwZW9mIHBlcmZvcm1hbmNlJiYoZ2xvYmFsLnBlcmZvcm1hbmNlPXJlcXVpcmUoXCJwZXJmX2hvb2tzXCIpLnBlcmZvcm1hbmNlKTtcbnZhciBvYT1jb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpLHBhPWNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlKTtDJiYob2E9KC4uLmEpPT5mcy53cml0ZVN5bmMoMSxhLmpvaW4oXCIgXCIpK1wiXFxuXCIpLHBhPSguLi5hKT0+ZnMud3JpdGVTeW5jKDIsYS5qb2luKFwiIFwiKStcIlxcblwiKSk7dmFyIHFhPXcucHJpbnR8fG9hLEk9dy5wcmludEVycnx8cGE7T2JqZWN0LmFzc2lnbih3LGlhKTtpYT1udWxsO3cudGhpc1Byb2dyYW0mJihqYT13LnRoaXNQcm9ncmFtKTt3LnF1aXQmJih6PXcucXVpdCk7dmFyIEo7dy53YXNtQmluYXJ5JiYoSj13Lndhc21CaW5hcnkpO3ZhciBub0V4aXRSdW50aW1lPXcubm9FeGl0UnVudGltZXx8ITA7XCJvYmplY3RcIiE9dHlwZW9mIFdlYkFzc2VtYmx5JiZLKFwibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZFwiKTt2YXIgZSxMLHJhLE09ITEsTixsLGJhLGNhLGRhLGZhO1xuZnVuY3Rpb24gbSgpe3ZhciBhPWUuYnVmZmVyO3cuSEVBUDg9bD1uZXcgSW50OEFycmF5KGEpO3cuSEVBUDE2PW5ldyBJbnQxNkFycmF5KGEpO3cuSEVBUDMyPWNhPW5ldyBJbnQzMkFycmF5KGEpO3cuSEVBUFU4PWJhPW5ldyBVaW50OEFycmF5KGEpO3cuSEVBUFUxNj1uZXcgVWludDE2QXJyYXkoYSk7dy5IRUFQVTMyPWRhPW5ldyBVaW50MzJBcnJheShhKTt3LkhFQVBGMzI9bmV3IEZsb2F0MzJBcnJheShhKTt3LkhFQVBGNjQ9ZmE9bmV3IEZsb2F0NjRBcnJheShhKX12YXIgTz13LklOSVRJQUxfTUVNT1JZfHwxNjc3NzIxNjs1MjQyODgwPD1PfHxLKFwiSU5JVElBTF9NRU1PUlkgc2hvdWxkIGJlIGxhcmdlciB0aGFuIFNUQUNLX1NJWkUsIHdhcyBcIitPK1wiISAoU1RBQ0tfU0laRT01MjQyODgwKVwiKTtcbmlmKEQpZT13Lndhc21NZW1vcnk7ZWxzZSBpZih3Lndhc21NZW1vcnkpZT13Lndhc21NZW1vcnk7ZWxzZSBpZihlPW5ldyBXZWJBc3NlbWJseS5NZW1vcnkoe2luaXRpYWw6Ty82NTUzNixtYXhpbXVtOjY1NTM2LHNoYXJlZDohMH0pLCEoZS5idWZmZXIgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcikpdGhyb3cgSShcInJlcXVlc3RlZCBhIHNoYXJlZCBXZWJBc3NlbWJseS5NZW1vcnkgYnV0IHRoZSByZXR1cm5lZCBidWZmZXIgaXMgbm90IGEgU2hhcmVkQXJyYXlCdWZmZXIsIGluZGljYXRpbmcgdGhhdCB3aGlsZSB0aGUgYnJvd3NlciBoYXMgU2hhcmVkQXJyYXlCdWZmZXIgaXQgZG9lcyBub3QgaGF2ZSBXZWJBc3NlbWJseSB0aHJlYWRzIHN1cHBvcnQgLSB5b3UgbWF5IG5lZWQgdG8gc2V0IGEgZmxhZ1wiKSxDJiZJKFwiKG9uIG5vZGUgeW91IG1heSBuZWVkOiAtLWV4cGVyaW1lbnRhbC13YXNtLXRocmVhZHMgLS1leHBlcmltZW50YWwtd2FzbS1idWxrLW1lbW9yeSBhbmQvb3IgcmVjZW50IHZlcnNpb24pXCIpLFxuRXJyb3IoXCJiYWQgbWVtb3J5XCIpO20oKTtPPWUuYnVmZmVyLmJ5dGVMZW5ndGg7dmFyIFAsc2E9W10sdGE9W10sdWE9W10sdmE9MDtmdW5jdGlvbiBRKCl7cmV0dXJuIG5vRXhpdFJ1bnRpbWV8fDA8dmF9dmFyIFI9MCx3YT1udWxsLFM9bnVsbDtmdW5jdGlvbiB4YSgpe1IrKzt3Lm1vbml0b3JSdW5EZXBlbmRlbmNpZXMmJncubW9uaXRvclJ1bkRlcGVuZGVuY2llcyhSKX1mdW5jdGlvbiB5YSgpe1ItLTt3Lm1vbml0b3JSdW5EZXBlbmRlbmNpZXMmJncubW9uaXRvclJ1bkRlcGVuZGVuY2llcyhSKTtpZigwPT1SJiYobnVsbCE9PXdhJiYoY2xlYXJJbnRlcnZhbCh3YSksd2E9bnVsbCksUykpe3ZhciBhPVM7Uz1udWxsO2EoKX19XG5mdW5jdGlvbiBLKGEpe2lmKHcub25BYm9ydCl3Lm9uQWJvcnQoYSk7YT1cIkFib3J0ZWQoXCIrYStcIilcIjtJKGEpO009ITA7Tj0xO2E9bmV3IFdlYkFzc2VtYmx5LlJ1bnRpbWVFcnJvcihhK1wiLiBCdWlsZCB3aXRoIC1zQVNTRVJUSU9OUyBmb3IgbW9yZSBpbmZvLlwiKTt4KGEpO3Rocm93IGE7fWZ1bmN0aW9uIHphKGEpe3JldHVybiBhLnN0YXJ0c1dpdGgoXCJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsXCIpfXZhciBUO1Q9XCJvcnQtd2FzbS10aHJlYWRlZC53YXNtXCI7emEoVCl8fChUPWxhKFQpKTtmdW5jdGlvbiBBYShhKXtpZihhPT1UJiZKKXJldHVybiBuZXcgVWludDhBcnJheShKKTtpZihHKXJldHVybiBHKGEpO3Rocm93XCJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZFwiO31cbmZ1bmN0aW9uIEJhKGEpe2lmKCFKJiYoa2F8fEEpKXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBmZXRjaCYmIWEuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikpcmV0dXJuIGZldGNoKGEse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4oYj0+e2lmKCFiLm9rKXRocm93XCJmYWlsZWQgdG8gbG9hZCB3YXNtIGJpbmFyeSBmaWxlIGF0ICdcIithK1wiJ1wiO3JldHVybiBiLmFycmF5QnVmZmVyKCl9KS5jYXRjaCgoKT0+QWEoYSkpO2lmKEYpcmV0dXJuIG5ldyBQcm9taXNlKChiLGMpPT57RihhLGQ9PmIobmV3IFVpbnQ4QXJyYXkoZCkpLGMpfSl9cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCk9PkFhKGEpKX1mdW5jdGlvbiBDYShhLGIsYyl7cmV0dXJuIEJhKGEpLnRoZW4oZD0+V2ViQXNzZW1ibHkuaW5zdGFudGlhdGUoZCxiKSkudGhlbihkPT5kKS50aGVuKGMsZD0+e0koXCJmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiBcIitkKTtLKGQpfSl9XG5mdW5jdGlvbiBEYShhLGIpe3ZhciBjPVQ7cmV0dXJuIEp8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nfHx6YShjKXx8Yy5zdGFydHNXaXRoKFwiZmlsZTovL1wiKXx8Q3x8XCJmdW5jdGlvblwiIT10eXBlb2YgZmV0Y2g/Q2EoYyxhLGIpOmZldGNoKGMse2NyZWRlbnRpYWxzOlwic2FtZS1vcmlnaW5cIn0pLnRoZW4oZD0+V2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcoZCxhKS50aGVuKGIsZnVuY3Rpb24oZyl7SShcIndhc20gc3RyZWFtaW5nIGNvbXBpbGUgZmFpbGVkOiBcIitnKTtJKFwiZmFsbGluZyBiYWNrIHRvIEFycmF5QnVmZmVyIGluc3RhbnRpYXRpb25cIik7cmV0dXJuIENhKGMsYSxiKX0pKX12YXIgVTtmdW5jdGlvbiBFYShhKXt0aGlzLm5hbWU9XCJFeGl0U3RhdHVzXCI7dGhpcy5tZXNzYWdlPWBQcm9ncmFtIHRlcm1pbmF0ZWQgd2l0aCBleGl0KCR7YX0pYDt0aGlzLnN0YXR1cz1hfVxuZnVuY3Rpb24gRmEoYSl7YS50ZXJtaW5hdGUoKTthLm9ubWVzc2FnZT0oKT0+e319ZnVuY3Rpb24gR2EoYSl7KGE9Vi5NYVthXSl8fEsoKTtWLm1iKGEpfWZ1bmN0aW9uIEhhKGEpe3ZhciBiPVYuZ2IoKTtpZighYilyZXR1cm4gNjtWLlBhLnB1c2goYik7Vi5NYVthLk9hXT1iO2IuT2E9YS5PYTt2YXIgYz17Y21kOlwicnVuXCIsc3RhcnRfcm91dGluZTphLm5iLGFyZzphLmZiLHB0aHJlYWRfcHRyOmEuT2F9O0MmJmIudW5yZWYoKTtiLnBvc3RNZXNzYWdlKGMsYS50Yik7cmV0dXJuIDB9XG52YXIgSWE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFRleHREZWNvZGVyP25ldyBUZXh0RGVjb2RlcihcInV0ZjhcIik6dm9pZCAwLEphPShhLGIsYyk9PntiPj4+PTA7dmFyIGQ9YitjO2ZvcihjPWI7YVtjXSYmIShjPj1kKTspKytjO2lmKDE2PGMtYiYmYS5idWZmZXImJklhKXJldHVybiBJYS5kZWNvZGUoYS5idWZmZXIgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcj9hLnNsaWNlKGIsYyk6YS5zdWJhcnJheShiLGMpKTtmb3IoZD1cIlwiO2I8Yzspe3ZhciBnPWFbYisrXTtpZihnJjEyOCl7dmFyIGg9YVtiKytdJjYzO2lmKDE5Mj09KGcmMjI0KSlkKz1TdHJpbmcuZnJvbUNoYXJDb2RlKChnJjMxKTw8NnxoKTtlbHNle3ZhciBrPWFbYisrXSY2MztnPTIyND09KGcmMjQwKT8oZyYxNSk8PDEyfGg8PDZ8azooZyY3KTw8MTh8aDw8MTJ8azw8NnxhW2IrK10mNjM7NjU1MzY+Zz9kKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGcpOihnLT02NTUzNixkKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fGc+PlxuMTAsNTYzMjB8ZyYxMDIzKSl9fWVsc2UgZCs9U3RyaW5nLmZyb21DaGFyQ29kZShnKX1yZXR1cm4gZH0sS2E9KGEsYik9PihhPj4+PTApP0phKG4oKSxhLGIpOlwiXCI7ZnVuY3Rpb24gTGEoYSl7aWYoRClyZXR1cm4gVygxLDEsYSk7Tj1hO2lmKCFRKCkpe1Yub2IoKTtpZih3Lm9uRXhpdCl3Lm9uRXhpdChhKTtNPSEwfXooYSxuZXcgRWEoYSkpfVxudmFyIE5hPWE9PntOPWE7aWYoRCl0aHJvdyBNYShhKSxcInVud2luZFwiO0xhKGEpfSxWPXtTYTpbXSxQYTpbXSwkYTpbXSxNYTp7fSxXYTpmdW5jdGlvbigpe0Q/Vi5pYigpOlYuaGIoKX0saGI6ZnVuY3Rpb24oKXtzYS51bnNoaWZ0KCgpPT57eGEoKTtWLmpiKCgpPT55YSgpKX0pfSxpYjpmdW5jdGlvbigpe1YucmVjZWl2ZU9iamVjdFRyYW5zZmVyPVYubGI7Vi50aHJlYWRJbml0VExTPVYuWmE7Vi5zZXRFeGl0U3RhdHVzPVYuWWE7bm9FeGl0UnVudGltZT0hMX0sWWE6ZnVuY3Rpb24oYSl7Tj1hfSx5YjpbXCIkdGVybWluYXRlV29ya2VyXCJdLG9iOmZ1bmN0aW9uKCl7Zm9yKHZhciBhIG9mIFYuUGEpRmEoYSk7Zm9yKGEgb2YgVi5TYSlGYShhKTtWLlNhPVtdO1YuUGE9W107Vi5NYT1bXX0sbWI6ZnVuY3Rpb24oYSl7dmFyIGI9YS5PYTtkZWxldGUgVi5NYVtiXTtWLlNhLnB1c2goYSk7Vi5QYS5zcGxpY2UoVi5QYS5pbmRleE9mKGEpLDEpO2EuT2E9MDtPYShiKX0sbGI6ZnVuY3Rpb24oKXt9LFxuWmE6ZnVuY3Rpb24oKXtWLiRhLmZvckVhY2goYT0+YSgpKX0sa2I6YT0+bmV3IFByb21pc2UoYj0+e2Eub25tZXNzYWdlPWg9PntoPWguZGF0YTt2YXIgaz1oLmNtZDtpZihoLnRhcmdldFRocmVhZCYmaC50YXJnZXRUaHJlYWQhPVBhKCkpe3ZhciBxPVYuTWFbaC54Yl07cT9xLnBvc3RNZXNzYWdlKGgsaC50cmFuc2Zlckxpc3QpOkkoJ0ludGVybmFsIGVycm9yISBXb3JrZXIgc2VudCBhIG1lc3NhZ2UgXCInK2srJ1wiIHRvIHRhcmdldCBwdGhyZWFkICcraC50YXJnZXRUaHJlYWQrXCIsIGJ1dCB0aGF0IHRocmVhZCBubyBsb25nZXIgZXhpc3RzIVwiKX1lbHNlIGlmKFwiY2hlY2tNYWlsYm94XCI9PT1rKVFhKCk7ZWxzZSBpZihcInNwYXduVGhyZWFkXCI9PT1rKUhhKGgpO2Vsc2UgaWYoXCJjbGVhbnVwVGhyZWFkXCI9PT1rKUdhKGgudGhyZWFkKTtlbHNlIGlmKFwia2lsbFRocmVhZFwiPT09ayloPWgudGhyZWFkLGs9Vi5NYVtoXSxkZWxldGUgVi5NYVtoXSxGYShrKSxPYShoKSxWLlBhLnNwbGljZShWLlBhLmluZGV4T2YoayksXG4xKSxrLk9hPTA7ZWxzZSBpZihcImNhbmNlbFRocmVhZFwiPT09aylWLk1hW2gudGhyZWFkXS5wb3N0TWVzc2FnZSh7Y21kOlwiY2FuY2VsXCJ9KTtlbHNlIGlmKFwibG9hZGVkXCI9PT1rKWEubG9hZGVkPSEwLGIoYSk7ZWxzZSBpZihcImFsZXJ0XCI9PT1rKWFsZXJ0KFwiVGhyZWFkIFwiK2gudGhyZWFkSWQrXCI6IFwiK2gudGV4dCk7ZWxzZSBpZihcInNldGltbWVkaWF0ZVwiPT09aC50YXJnZXQpYS5wb3N0TWVzc2FnZShoKTtlbHNlIGlmKFwiY2FsbEhhbmRsZXJcIj09PWspd1toLmhhbmRsZXJdKC4uLmguYXJncyk7ZWxzZSBrJiZJKFwid29ya2VyIHNlbnQgYW4gdW5rbm93biBjb21tYW5kIFwiK2spfTthLm9uZXJyb3I9aD0+e0koXCJ3b3JrZXIgc2VudCBhbiBlcnJvciEgXCIraC5maWxlbmFtZStcIjpcIitoLmxpbmVubytcIjogXCIraC5tZXNzYWdlKTt0aHJvdyBoO307QyYmKGEub24oXCJtZXNzYWdlXCIsZnVuY3Rpb24oaCl7YS5vbm1lc3NhZ2Uoe2RhdGE6aH0pfSksYS5vbihcImVycm9yXCIsZnVuY3Rpb24oaCl7YS5vbmVycm9yKGgpfSkpO1xudmFyIGM9W10sZD1bXCJvbkV4aXRcIixcIm9uQWJvcnRcIixcInByaW50XCIsXCJwcmludEVyclwiXSxnO2ZvcihnIG9mIGQpdy5oYXNPd25Qcm9wZXJ0eShnKSYmYy5wdXNoKGcpO2EucG9zdE1lc3NhZ2Uoe2NtZDpcImxvYWRcIixoYW5kbGVyczpjLHVybE9yQmxvYjp3Lm1haW5TY3JpcHRVcmxPckJsb2J8fF9zY3JpcHREaXIsd2FzbU1lbW9yeTplLHdhc21Nb2R1bGU6cmF9KX0pLGpiOmZ1bmN0aW9uKGEpe2EoKX0sZWI6ZnVuY3Rpb24oKXt2YXIgYT1sYShcIm9ydC13YXNtLXRocmVhZGVkLndvcmtlci5qc1wiKTthPW5ldyBXb3JrZXIoYSk7Vi5TYS5wdXNoKGEpfSxnYjpmdW5jdGlvbigpezA9PVYuU2EubGVuZ3RoJiYoVi5lYigpLFYua2IoVi5TYVswXSkpO3JldHVybiBWLlNhLnBvcCgpfX07dy5QVGhyZWFkPVY7dmFyIFJhPWE9Pntmb3IoOzA8YS5sZW5ndGg7KWEuc2hpZnQoKSh3KX07XG53LmVzdGFibGlzaFN0YWNrU3BhY2U9ZnVuY3Rpb24oKXt2YXIgYT1QYSgpLGI9cCgpW2ErNTI+PjI+Pj4wXTthPXAoKVthKzU2Pj4yPj4+MF07U2EoYixiLWEpO1RhKGIpfTtmdW5jdGlvbiBNYShhKXtpZihEKXJldHVybiBXKDIsMCxhKTtOYShhKX12YXIgWD1bXSxVYT1hPT57dmFyIGI9WFthXTtifHwoYT49WC5sZW5ndGgmJihYLmxlbmd0aD1hKzEpLFhbYV09Yj1QLmdldChhKSk7cmV0dXJuIGJ9O3cuaW52b2tlRW50cnlQb2ludD1mdW5jdGlvbihhLGIpe2E9VWEoYSkoYik7USgpP1YuWWEoYSk6VmEoYSl9O1xuZnVuY3Rpb24gV2EoYSl7dGhpcy5WYT1hLTI0O3RoaXMuY2I9ZnVuY3Rpb24oYil7dCgpW3RoaXMuVmErND4+Mj4+PjBdPWJ9O3RoaXMuYmI9ZnVuY3Rpb24oYil7dCgpW3RoaXMuVmErOD4+Mj4+PjBdPWJ9O3RoaXMuV2E9ZnVuY3Rpb24oYixjKXt0aGlzLmFiKCk7dGhpcy5jYihiKTt0aGlzLmJiKGMpfTt0aGlzLmFiPWZ1bmN0aW9uKCl7dCgpW3RoaXMuVmErMTY+PjI+Pj4wXT0wfX12YXIgWGE9MCxZYT0wO2Z1bmN0aW9uIFphKGEsYixjLGQpe3JldHVybiBEP1coMywxLGEsYixjLGQpOiRhKGEsYixjLGQpfVxuZnVuY3Rpb24gJGEoYSxiLGMsZCl7YT4+Pj0wO2I+Pj49MDtjPj4+PTA7ZD4+Pj0wO2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlcilyZXR1cm4gSShcIkN1cnJlbnQgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBTaGFyZWRBcnJheUJ1ZmZlciwgcHRocmVhZHMgYXJlIG5vdCBhdmFpbGFibGUhXCIpLDY7dmFyIGc9W107aWYoRCYmMD09PWcubGVuZ3RoKXJldHVybiBaYShhLGIsYyxkKTthPXtuYjpjLE9hOmEsZmI6ZCx0YjpnfTtyZXR1cm4gRD8oYS52Yj1cInNwYXduVGhyZWFkXCIscG9zdE1lc3NhZ2UoYSxnKSwwKTpIYShhKX1mdW5jdGlvbiBhYihhLGIsYyl7cmV0dXJuIEQ/Vyg0LDEsYSxiLGMpOjB9ZnVuY3Rpb24gYmIoYSxiKXtpZihEKXJldHVybiBXKDUsMSxhLGIpfVxudmFyIGNiPWE9Pntmb3IodmFyIGI9MCxjPTA7YzxhLmxlbmd0aDsrK2Mpe3ZhciBkPWEuY2hhckNvZGVBdChjKTsxMjc+PWQ/YisrOjIwNDc+PWQ/Yis9Mjo1NTI5Njw9ZCYmNTczNDM+PWQ/KGIrPTQsKytjKTpiKz0zfXJldHVybiBifSxkYj0oYSxiLGMsZCk9PntjPj4+PTA7aWYoISgwPGQpKXJldHVybiAwO3ZhciBnPWM7ZD1jK2QtMTtmb3IodmFyIGg9MDtoPGEubGVuZ3RoOysraCl7dmFyIGs9YS5jaGFyQ29kZUF0KGgpO2lmKDU1Mjk2PD1rJiY1NzM0Mz49ayl7dmFyIHE9YS5jaGFyQ29kZUF0KCsraCk7az02NTUzNisoKGsmMTAyMyk8PDEwKXxxJjEwMjN9aWYoMTI3Pj1rKXtpZihjPj1kKWJyZWFrO2JbYysrPj4+MF09a31lbHNle2lmKDIwNDc+PWspe2lmKGMrMT49ZClicmVhaztiW2MrKz4+PjBdPTE5MnxrPj42fWVsc2V7aWYoNjU1MzU+PWspe2lmKGMrMj49ZClicmVhaztiW2MrKz4+PjBdPTIyNHxrPj4xMn1lbHNle2lmKGMrMz49ZClicmVhaztiW2MrKz4+PjBdPTI0MHxrPj5cbjE4O2JbYysrPj4+MF09MTI4fGs+PjEyJjYzfWJbYysrPj4+MF09MTI4fGs+PjYmNjN9YltjKys+Pj4wXT0xMjh8ayY2M319YltjPj4+MF09MDtyZXR1cm4gYy1nfSxlYj0oYSxiLGMpPT5kYihhLG4oKSxiLGMpO2Z1bmN0aW9uIGZiKGEsYil7aWYoRClyZXR1cm4gVyg2LDEsYSxiKX1mdW5jdGlvbiBnYihhLGIsYyl7aWYoRClyZXR1cm4gVyg3LDEsYSxiLGMpfWZ1bmN0aW9uIGhiKGEsYixjKXtyZXR1cm4gRD9XKDgsMSxhLGIsYyk6MH1mdW5jdGlvbiBpYihhLGIpe2lmKEQpcmV0dXJuIFcoOSwxLGEsYil9ZnVuY3Rpb24gamIoYSxiLGMpe2lmKEQpcmV0dXJuIFcoMTAsMSxhLGIsYyl9ZnVuY3Rpb24ga2IoYSxiLGMsZCl7aWYoRClyZXR1cm4gVygxMSwxLGEsYixjLGQpfWZ1bmN0aW9uIGxiKGEsYixjLGQpe2lmKEQpcmV0dXJuIFcoMTIsMSxhLGIsYyxkKX1mdW5jdGlvbiBtYihhLGIsYyxkKXtpZihEKXJldHVybiBXKDEzLDEsYSxiLGMsZCl9XG5mdW5jdGlvbiBuYihhKXtpZihEKXJldHVybiBXKDE0LDEsYSl9ZnVuY3Rpb24gb2IoYSxiKXtpZihEKXJldHVybiBXKDE1LDEsYSxiKX1mdW5jdGlvbiBwYihhLGIsYyl7aWYoRClyZXR1cm4gVygxNiwxLGEsYixjKX12YXIgcWI9YT0+e2lmKCFNKXRyeXtpZihhKCksIVEoKSl0cnl7RD9WYShOKTpOYShOKX1jYXRjaChiKXtiIGluc3RhbmNlb2YgRWF8fFwidW53aW5kXCI9PWJ8fHooMSxiKX19Y2F0Y2goYil7YiBpbnN0YW5jZW9mIEVhfHxcInVud2luZFwiPT1ifHx6KDEsYil9fTtmdW5jdGlvbiByYihhKXthPj4+PTA7XCJmdW5jdGlvblwiPT09dHlwZW9mIEF0b21pY3MudWImJihBdG9taWNzLnViKHAoKSxhPj4yLGEpLnZhbHVlLnRoZW4oUWEpLGErPTEyOCxBdG9taWNzLnN0b3JlKHAoKSxhPj4yLDEpKX13Ll9fZW1zY3JpcHRlbl90aHJlYWRfbWFpbGJveF9hd2FpdD1yYjtmdW5jdGlvbiBRYSgpe3ZhciBhPVBhKCk7YSYmKHJiKGEpLHFiKCgpPT5zYigpKSl9dy5jaGVja01haWxib3g9UWE7XG52YXIgWT1hPT4wPT09YSU0JiYoMCE9PWElMTAwfHwwPT09YSU0MDApLHRiPVswLDMxLDYwLDkxLDEyMSwxNTIsMTgyLDIxMywyNDQsMjc0LDMwNSwzMzVdLHViPVswLDMxLDU5LDkwLDEyMCwxNTEsMTgxLDIxMiwyNDMsMjczLDMwNCwzMzRdO2Z1bmN0aW9uIHZiKGEsYixjLGQsZyxoLGsscSl7cmV0dXJuIEQ/VygxNywxLGEsYixjLGQsZyxoLGsscSk6LTUyfWZ1bmN0aW9uIHdiKGEsYixjLGQsZyxoLGspe2lmKEQpcmV0dXJuIFcoMTgsMSxhLGIsYyxkLGcsaCxrKX12YXIgeWI9YT0+e3ZhciBiPWNiKGEpKzEsYz14YihiKTtjJiZlYihhLGMsYik7cmV0dXJuIGN9LEFiPWE9Pnt2YXIgYj16YigpO2E9YSgpO1RhKGIpO3JldHVybiBhfTtcbmZ1bmN0aW9uIFcoYSxiKXt2YXIgYz1hcmd1bWVudHMubGVuZ3RoLTIsZD1hcmd1bWVudHM7cmV0dXJuIEFiKCgpPT57Zm9yKHZhciBnPUJiKDgqYyksaD1nPj4zLGs9MDtrPGM7aysrKXt2YXIgcT1kWzIra107ZWEoKVtoK2s+Pj4wXT1xfXJldHVybiBDYihhLGMsZyxiKX0pfVxudmFyIERiPVtdLEViPXt9LEdiPSgpPT57aWYoIUZiKXt2YXIgYT17VVNFUjpcIndlYl91c2VyXCIsTE9HTkFNRTpcIndlYl91c2VyXCIsUEFUSDpcIi9cIixQV0Q6XCIvXCIsSE9NRTpcIi9ob21lL3dlYl91c2VyXCIsTEFORzooXCJvYmplY3RcIj09dHlwZW9mIG5hdmlnYXRvciYmbmF2aWdhdG9yLmxhbmd1YWdlcyYmbmF2aWdhdG9yLmxhbmd1YWdlc1swXXx8XCJDXCIpLnJlcGxhY2UoXCItXCIsXCJfXCIpK1wiLlVURi04XCIsXzpqYXx8XCIuL3RoaXMucHJvZ3JhbVwifSxiO2ZvcihiIGluIEViKXZvaWQgMD09PUViW2JdP2RlbGV0ZSBhW2JdOmFbYl09RWJbYl07dmFyIGM9W107Zm9yKGIgaW4gYSljLnB1c2goYCR7Yn09JHthW2JdfWApO0ZiPWN9cmV0dXJuIEZifSxGYjtcbmZ1bmN0aW9uIEhiKGEsYil7aWYoRClyZXR1cm4gVygxOSwxLGEsYik7YT4+Pj0wO2I+Pj49MDt2YXIgYz0wO0diKCkuZm9yRWFjaChmdW5jdGlvbihkLGcpe3ZhciBoPWIrYztnPXQoKVthKzQqZz4+Mj4+PjBdPWg7Zm9yKGg9MDtoPGQubGVuZ3RoOysraClhYSgpW2crKz4+MD4+PjBdPWQuY2hhckNvZGVBdChoKTthYSgpW2c+PjA+Pj4wXT0wO2MrPWQubGVuZ3RoKzF9KTtyZXR1cm4gMH1mdW5jdGlvbiBJYihhLGIpe2lmKEQpcmV0dXJuIFcoMjAsMSxhLGIpO2E+Pj49MDtiPj4+PTA7dmFyIGM9R2IoKTt0KClbYT4+Mj4+PjBdPWMubGVuZ3RoO3ZhciBkPTA7Yy5mb3JFYWNoKGZ1bmN0aW9uKGcpe2QrPWcubGVuZ3RoKzF9KTt0KClbYj4+Mj4+PjBdPWQ7cmV0dXJuIDB9ZnVuY3Rpb24gSmIoYSl7cmV0dXJuIEQ/VygyMSwxLGEpOjUyfWZ1bmN0aW9uIE5iKGEsYixjLGQpe3JldHVybiBEP1coMjIsMSxhLGIsYyxkKTo1Mn1cbmZ1bmN0aW9uIE9iKGEsYixjLGQsZyl7cmV0dXJuIEQ/VygyMywxLGEsYixjLGQsZyk6NzB9dmFyIFBiPVtudWxsLFtdLFtdXTtmdW5jdGlvbiBRYihhLGIsYyxkKXtpZihEKXJldHVybiBXKDI0LDEsYSxiLGMsZCk7Yj4+Pj0wO2M+Pj49MDtkPj4+PTA7Zm9yKHZhciBnPTAsaD0wO2g8YztoKyspe3ZhciBrPXQoKVtiPj4yPj4+MF0scT10KClbYis0Pj4yPj4+MF07Yis9ODtmb3IodmFyIEI9MDtCPHE7QisrKXt2YXIgdj1uKClbaytCPj4+MF0seT1QYlthXTswPT09dnx8MTA9PT12PygoMT09PWE/cWE6SSkoSmEoeSwwKSkseS5sZW5ndGg9MCk6eS5wdXNoKHYpfWcrPXF9dCgpW2Q+PjI+Pj4wXT1nO3JldHVybiAwfXZhciBSYj1bMzEsMjksMzEsMzAsMzEsMzAsMzEsMzEsMzAsMzEsMzAsMzFdLFNiPVszMSwyOCwzMSwzMCwzMSwzMCwzMSwzMSwzMCwzMSwzMCwzMV07ZnVuY3Rpb24gVGIoYSl7dmFyIGI9QXJyYXkoY2IoYSkrMSk7ZGIoYSxiLDAsYi5sZW5ndGgpO3JldHVybiBifVxudmFyIFViPShhLGIpPT57YWEoKS5zZXQoYSxiPj4+MCl9O1xuZnVuY3Rpb24gVmIoYSxiLGMsZCl7ZnVuY3Rpb24gZyhmLHIsdSl7Zm9yKGY9XCJudW1iZXJcIj09dHlwZW9mIGY/Zi50b1N0cmluZygpOmZ8fFwiXCI7Zi5sZW5ndGg8cjspZj11WzBdK2Y7cmV0dXJuIGZ9ZnVuY3Rpb24gaChmLHIpe3JldHVybiBnKGYscixcIjBcIil9ZnVuY3Rpb24gayhmLHIpe2Z1bmN0aW9uIHUoS2Ipe3JldHVybiAwPktiPy0xOjA8S2I/MTowfXZhciBIOzA9PT0oSD11KGYuZ2V0RnVsbFllYXIoKS1yLmdldEZ1bGxZZWFyKCkpKSYmMD09PShIPXUoZi5nZXRNb250aCgpLXIuZ2V0TW9udGgoKSkpJiYoSD11KGYuZ2V0RGF0ZSgpLXIuZ2V0RGF0ZSgpKSk7cmV0dXJuIEh9ZnVuY3Rpb24gcShmKXtzd2l0Y2goZi5nZXREYXkoKSl7Y2FzZSAwOnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwyOSk7Y2FzZSAxOnJldHVybiBmO2Nhc2UgMjpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLDAsMyk7Y2FzZSAzOnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCksXG4wLDIpO2Nhc2UgNDpyZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLDAsMSk7Y2FzZSA1OnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwzMSk7Y2FzZSA2OnJldHVybiBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCktMSwxMSwzMCl9fWZ1bmN0aW9uIEIoZil7dmFyIHI9Zi5RYTtmb3IoZj1uZXcgRGF0ZSgobmV3IERhdGUoZi5SYSsxOTAwLDAsMSkpLmdldFRpbWUoKSk7MDxyOyl7dmFyIHU9Zi5nZXRNb250aCgpLEg9KFkoZi5nZXRGdWxsWWVhcigpKT9SYjpTYilbdV07aWYocj5ILWYuZ2V0RGF0ZSgpKXItPUgtZi5nZXREYXRlKCkrMSxmLnNldERhdGUoMSksMTE+dT9mLnNldE1vbnRoKHUrMSk6KGYuc2V0TW9udGgoMCksZi5zZXRGdWxsWWVhcihmLmdldEZ1bGxZZWFyKCkrMSkpO2Vsc2V7Zi5zZXREYXRlKGYuZ2V0RGF0ZSgpK3IpO2JyZWFrfX11PW5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSsxLDAsNCk7cj1xKG5ldyBEYXRlKGYuZ2V0RnVsbFllYXIoKSxcbjAsNCkpO3U9cSh1KTtyZXR1cm4gMD49ayhyLGYpPzA+PWsodSxmKT9mLmdldEZ1bGxZZWFyKCkrMTpmLmdldEZ1bGxZZWFyKCk6Zi5nZXRGdWxsWWVhcigpLTF9YT4+Pj0wO2I+Pj49MDtjPj4+PTA7ZD4+Pj0wO3ZhciB2PXAoKVtkKzQwPj4yPj4+MF07ZD17cmI6cCgpW2Q+PjI+Pj4wXSxxYjpwKClbZCs0Pj4yPj4+MF0sVGE6cCgpW2QrOD4+Mj4+PjBdLFhhOnAoKVtkKzEyPj4yPj4+MF0sVWE6cCgpW2QrMTY+PjI+Pj4wXSxSYTpwKClbZCsyMD4+Mj4+PjBdLE5hOnAoKVtkKzI0Pj4yPj4+MF0sUWE6cCgpW2QrMjg+PjI+Pj4wXSx6YjpwKClbZCszMj4+Mj4+PjBdLHBiOnAoKVtkKzM2Pj4yPj4+MF0sc2I6dj9LYSh2KTpcIlwifTtjPUthKGMpO3Y9e1wiJWNcIjpcIiVhICViICVkICVIOiVNOiVTICVZXCIsXCIlRFwiOlwiJW0vJWQvJXlcIixcIiVGXCI6XCIlWS0lbS0lZFwiLFwiJWhcIjpcIiViXCIsXCIlclwiOlwiJUk6JU06JVMgJXBcIixcIiVSXCI6XCIlSDolTVwiLFwiJVRcIjpcIiVIOiVNOiVTXCIsXCIleFwiOlwiJW0vJWQvJXlcIixcblwiJVhcIjpcIiVIOiVNOiVTXCIsXCIlRWNcIjpcIiVjXCIsXCIlRUNcIjpcIiVDXCIsXCIlRXhcIjpcIiVtLyVkLyV5XCIsXCIlRVhcIjpcIiVIOiVNOiVTXCIsXCIlRXlcIjpcIiV5XCIsXCIlRVlcIjpcIiVZXCIsXCIlT2RcIjpcIiVkXCIsXCIlT2VcIjpcIiVlXCIsXCIlT0hcIjpcIiVIXCIsXCIlT0lcIjpcIiVJXCIsXCIlT21cIjpcIiVtXCIsXCIlT01cIjpcIiVNXCIsXCIlT1NcIjpcIiVTXCIsXCIlT3VcIjpcIiV1XCIsXCIlT1VcIjpcIiVVXCIsXCIlT1ZcIjpcIiVWXCIsXCIlT3dcIjpcIiV3XCIsXCIlT1dcIjpcIiVXXCIsXCIlT3lcIjpcIiV5XCJ9O2Zvcih2YXIgeSBpbiB2KWM9Yy5yZXBsYWNlKG5ldyBSZWdFeHAoeSxcImdcIiksdlt5XSk7dmFyIExiPVwiU3VuZGF5IE1vbmRheSBUdWVzZGF5IFdlZG5lc2RheSBUaHVyc2RheSBGcmlkYXkgU2F0dXJkYXlcIi5zcGxpdChcIiBcIiksTWI9XCJKYW51YXJ5IEZlYnJ1YXJ5IE1hcmNoIEFwcmlsIE1heSBKdW5lIEp1bHkgQXVndXN0IFNlcHRlbWJlciBPY3RvYmVyIE5vdmVtYmVyIERlY2VtYmVyXCIuc3BsaXQoXCIgXCIpO3Y9e1wiJWFcIjpmPT5MYltmLk5hXS5zdWJzdHJpbmcoMCwzKSxcblwiJUFcIjpmPT5MYltmLk5hXSxcIiViXCI6Zj0+TWJbZi5VYV0uc3Vic3RyaW5nKDAsMyksXCIlQlwiOmY9Pk1iW2YuVWFdLFwiJUNcIjpmPT5oKChmLlJhKzE5MDApLzEwMHwwLDIpLFwiJWRcIjpmPT5oKGYuWGEsMiksXCIlZVwiOmY9PmcoZi5YYSwyLFwiIFwiKSxcIiVnXCI6Zj0+QihmKS50b1N0cmluZygpLnN1YnN0cmluZygyKSxcIiVHXCI6Zj0+QihmKSxcIiVIXCI6Zj0+aChmLlRhLDIpLFwiJUlcIjpmPT57Zj1mLlRhOzA9PWY/Zj0xMjoxMjxmJiYoZi09MTIpO3JldHVybiBoKGYsMil9LFwiJWpcIjpmPT57Zm9yKHZhciByPTAsdT0wO3U8PWYuVWEtMTtyKz0oWShmLlJhKzE5MDApP1JiOlNiKVt1KytdKTtyZXR1cm4gaChmLlhhK3IsMyl9LFwiJW1cIjpmPT5oKGYuVWErMSwyKSxcIiVNXCI6Zj0+aChmLnFiLDIpLFwiJW5cIjooKT0+XCJcXG5cIixcIiVwXCI6Zj0+MDw9Zi5UYSYmMTI+Zi5UYT9cIkFNXCI6XCJQTVwiLFwiJVNcIjpmPT5oKGYucmIsMiksXCIldFwiOigpPT5cIlxcdFwiLFwiJXVcIjpmPT5mLk5hfHw3LFwiJVVcIjpmPT5oKE1hdGguZmxvb3IoKGYuUWErXG43LWYuTmEpLzcpLDIpLFwiJVZcIjpmPT57dmFyIHI9TWF0aC5mbG9vcigoZi5RYSs3LShmLk5hKzYpJTcpLzcpOzI+PShmLk5hKzM3MS1mLlFhLTIpJTcmJnIrKztpZihyKTUzPT1yJiYodT0oZi5OYSszNzEtZi5RYSklNyw0PT11fHwzPT11JiZZKGYuUmEpfHwocj0xKSk7ZWxzZXtyPTUyO3ZhciB1PShmLk5hKzctZi5RYS0xKSU3Oyg0PT11fHw1PT11JiZZKGYuUmElNDAwLTEpKSYmcisrfXJldHVybiBoKHIsMil9LFwiJXdcIjpmPT5mLk5hLFwiJVdcIjpmPT5oKE1hdGguZmxvb3IoKGYuUWErNy0oZi5OYSs2KSU3KS83KSwyKSxcIiV5XCI6Zj0+KGYuUmErMTkwMCkudG9TdHJpbmcoKS5zdWJzdHJpbmcoMiksXCIlWVwiOmY9PmYuUmErMTkwMCxcIiV6XCI6Zj0+e2Y9Zi5wYjt2YXIgcj0wPD1mO2Y9TWF0aC5hYnMoZikvNjA7cmV0dXJuKHI/XCIrXCI6XCItXCIpK1N0cmluZyhcIjAwMDBcIisoZi82MCoxMDArZiU2MCkpLnNsaWNlKC00KX0sXCIlWlwiOmY9PmYuc2IsXCIlJVwiOigpPT5cIiVcIn07Yz1jLnJlcGxhY2UoLyUlL2csXG5cIlxceDAwXFx4MDBcIik7Zm9yKHkgaW4gdiljLmluY2x1ZGVzKHkpJiYoYz1jLnJlcGxhY2UobmV3IFJlZ0V4cCh5LFwiZ1wiKSx2W3ldKGQpKSk7Yz1jLnJlcGxhY2UoL1xcMFxcMC9nLFwiJVwiKTt5PVRiKGMpO2lmKHkubGVuZ3RoPmIpcmV0dXJuIDA7VWIoeSxhKTtyZXR1cm4geS5sZW5ndGgtMX12YXIgWj12b2lkIDAsV2I9W107XG5mdW5jdGlvbiBYYihhLGIpe2lmKCFaKXtaPW5ldyBXZWFrTWFwO3ZhciBjPVAubGVuZ3RoO2lmKFopZm9yKHZhciBkPTA7ZDwwK2M7ZCsrKXt2YXIgZz1VYShkKTtnJiZaLnNldChnLGQpfX1pZihjPVouZ2V0KGEpfHwwKXJldHVybiBjO2lmKFdiLmxlbmd0aCljPVdiLnBvcCgpO2Vsc2V7dHJ5e1AuZ3JvdygxKX1jYXRjaChxKXtpZighKHEgaW5zdGFuY2VvZiBSYW5nZUVycm9yKSl0aHJvdyBxO3Rocm93XCJVbmFibGUgdG8gZ3JvdyB3YXNtIHRhYmxlLiBTZXQgQUxMT1dfVEFCTEVfR1JPV1RILlwiO31jPVAubGVuZ3RoLTF9dHJ5e2Q9YyxQLnNldChkLGEpLFhbZF09UC5nZXQoZCl9Y2F0Y2gocSl7aWYoIShxIGluc3RhbmNlb2YgVHlwZUVycm9yKSl0aHJvdyBxO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIFdlYkFzc2VtYmx5LkZ1bmN0aW9uKXtkPVdlYkFzc2VtYmx5LkZ1bmN0aW9uO2c9e2k6XCJpMzJcIixqOlwiaTY0XCIsZjpcImYzMlwiLGQ6XCJmNjRcIixwOlwiaTMyXCJ9O2Zvcih2YXIgaD17cGFyYW1ldGVyczpbXSxcbnJlc3VsdHM6XCJ2XCI9PWJbMF0/W106W2dbYlswXV1dfSxrPTE7azxiLmxlbmd0aDsrK2spaC5wYXJhbWV0ZXJzLnB1c2goZ1tiW2tdXSk7Yj1uZXcgZChoLGEpfWVsc2V7ZD1bMV07Zz1iLnNsaWNlKDAsMSk7Yj1iLnNsaWNlKDEpO2g9e2k6MTI3LHA6MTI3LGo6MTI2LGY6MTI1LGQ6MTI0fTtkLnB1c2goOTYpO2s9Yi5sZW5ndGg7MTI4Pms/ZC5wdXNoKGspOmQucHVzaChrJTEyOHwxMjgsaz4+Nyk7Zm9yKGs9MDtrPGIubGVuZ3RoOysraylkLnB1c2goaFtiW2tdXSk7XCJ2XCI9PWc/ZC5wdXNoKDApOmQucHVzaCgxLGhbZ10pO2I9WzAsOTcsMTE1LDEwOSwxLDAsMCwwLDFdO2c9ZC5sZW5ndGg7MTI4Pmc/Yi5wdXNoKGcpOmIucHVzaChnJTEyOHwxMjgsZz4+Nyk7Yi5wdXNoLmFwcGx5KGIsZCk7Yi5wdXNoKDIsNywxLDEsMTAxLDEsMTAyLDAsMCw3LDUsMSwxLDEwMiwwLDApO2I9bmV3IFdlYkFzc2VtYmx5Lk1vZHVsZShuZXcgVWludDhBcnJheShiKSk7Yj0obmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKGIsXG57ZTp7ZjphfX0pKS5leHBvcnRzLmZ9ZD1jO1Auc2V0KGQsYik7WFtkXT1QLmdldChkKX1aLnNldChhLGMpO3JldHVybiBjfVYuV2EoKTtcbnZhciBZYj1bbnVsbCxMYSxNYSxaYSxhYixiYixmYixnYixoYixpYixqYixrYixsYixtYixuYixvYixwYix2Yix3YixIYixJYixKYixOYixPYixRYl0sYWM9e2I6ZnVuY3Rpb24oYSxiLGMpe2E+Pj49MDsobmV3IFdhKGEpKS5XYShiPj4+MCxjPj4+MCk7WGE9YTtZYSsrO3Rocm93IFhhO30sTjpmdW5jdGlvbihhKXtaYihhPj4+MCwhQSwxLCFrYSwxMzEwNzIsITEpO1YuWmEoKX0sazpmdW5jdGlvbihhKXthPj4+PTA7RD9wb3N0TWVzc2FnZSh7Y21kOlwiY2xlYW51cFRocmVhZFwiLHRocmVhZDphfSk6R2EoYSl9LEk6JGEsaDphYixUOmJiLEQ6ZmIsRjpnYixVOmhiLFI6aWIsSjpqYixROmtiLG86bGIsRTptYixCOm5iLFM6b2IsQzpwYixxOigpPT4hMCx6OmZ1bmN0aW9uKGEsYil7YT4+Pj0wO2E9PWI+Pj4wP3NldFRpbWVvdXQoKCk9PlFhKCkpOkQ/cG9zdE1lc3NhZ2Uoe3RhcmdldFRocmVhZDphLGNtZDpcImNoZWNrTWFpbGJveFwifSk6KGE9Vi5NYVthXSkmJmEucG9zdE1lc3NhZ2Uoe2NtZDpcImNoZWNrTWFpbGJveFwifSl9LFxuTDpmdW5jdGlvbigpe3JldHVybi0xfSxNOnJiLHA6ZnVuY3Rpb24oYSl7QyYmVi5NYVthPj4+MF0ucmVmKCl9LHQ6ZnVuY3Rpb24oYSxiLGMpe2E9YisyMDk3MTUyPj4+MDw0MTk0MzA1LSEhYT8oYT4+PjApKzQyOTQ5NjcyOTYqYjpOYU47Yz4+Pj0wO2E9bmV3IERhdGUoMUUzKmEpO3AoKVtjPj4yPj4+MF09YS5nZXRVVENTZWNvbmRzKCk7cCgpW2MrND4+Mj4+PjBdPWEuZ2V0VVRDTWludXRlcygpO3AoKVtjKzg+PjI+Pj4wXT1hLmdldFVUQ0hvdXJzKCk7cCgpW2MrMTI+PjI+Pj4wXT1hLmdldFVUQ0RhdGUoKTtwKClbYysxNj4+Mj4+PjBdPWEuZ2V0VVRDTW9udGgoKTtwKClbYysyMD4+Mj4+PjBdPWEuZ2V0VVRDRnVsbFllYXIoKS0xOTAwO3AoKVtjKzI0Pj4yPj4+MF09YS5nZXRVVENEYXkoKTthPShhLmdldFRpbWUoKS1EYXRlLlVUQyhhLmdldFVUQ0Z1bGxZZWFyKCksMCwxLDAsMCwwLDApKS84NjRFNXwwO3AoKVtjKzI4Pj4yPj4+MF09YX0sdTpmdW5jdGlvbihhLGIsYyl7YT1iK1xuMjA5NzE1Mj4+PjA8NDE5NDMwNS0hIWE/KGE+Pj4wKSs0Mjk0OTY3Mjk2KmI6TmFOO2M+Pj49MDthPW5ldyBEYXRlKDFFMyphKTtwKClbYz4+Mj4+PjBdPWEuZ2V0U2Vjb25kcygpO3AoKVtjKzQ+PjI+Pj4wXT1hLmdldE1pbnV0ZXMoKTtwKClbYys4Pj4yPj4+MF09YS5nZXRIb3VycygpO3AoKVtjKzEyPj4yPj4+MF09YS5nZXREYXRlKCk7cCgpW2MrMTY+PjI+Pj4wXT1hLmdldE1vbnRoKCk7cCgpW2MrMjA+PjI+Pj4wXT1hLmdldEZ1bGxZZWFyKCktMTkwMDtwKClbYysyND4+Mj4+PjBdPWEuZ2V0RGF5KCk7Yj0oWShhLmdldEZ1bGxZZWFyKCkpP3RiOnViKVthLmdldE1vbnRoKCldK2EuZ2V0RGF0ZSgpLTF8MDtwKClbYysyOD4+Mj4+PjBdPWI7cCgpW2MrMzY+PjI+Pj4wXT0tKDYwKmEuZ2V0VGltZXpvbmVPZmZzZXQoKSk7Yj0obmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLDYsMSkpLmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIGQ9KG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwwLDEpKS5nZXRUaW1lem9uZU9mZnNldCgpO1xuYT0oYiE9ZCYmYS5nZXRUaW1lem9uZU9mZnNldCgpPT1NYXRoLm1pbihkLGIpKXwwO3AoKVtjKzMyPj4yPj4+MF09YX0sdjpmdW5jdGlvbihhKXthPj4+PTA7dmFyIGI9bmV3IERhdGUocCgpW2ErMjA+PjI+Pj4wXSsxOTAwLHAoKVthKzE2Pj4yPj4+MF0scCgpW2ErMTI+PjI+Pj4wXSxwKClbYSs4Pj4yPj4+MF0scCgpW2ErND4+Mj4+PjBdLHAoKVthPj4yPj4+MF0sMCksYz1wKClbYSszMj4+Mj4+PjBdLGQ9Yi5nZXRUaW1lem9uZU9mZnNldCgpLGc9KG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSw2LDEpKS5nZXRUaW1lem9uZU9mZnNldCgpLGg9KG5ldyBEYXRlKGIuZ2V0RnVsbFllYXIoKSwwLDEpKS5nZXRUaW1lem9uZU9mZnNldCgpLGs9TWF0aC5taW4oaCxnKTswPmM/cCgpW2ErMzI+PjI+Pj4wXT1OdW1iZXIoZyE9aCYmaz09ZCk6MDxjIT0oaz09ZCkmJihnPU1hdGgubWF4KGgsZyksYi5zZXRUaW1lKGIuZ2V0VGltZSgpKzZFNCooKDA8Yz9rOmcpLWQpKSk7cCgpW2ErMjQ+PjI+Pj5cbjBdPWIuZ2V0RGF5KCk7Yz0oWShiLmdldEZ1bGxZZWFyKCkpP3RiOnViKVtiLmdldE1vbnRoKCldK2IuZ2V0RGF0ZSgpLTF8MDtwKClbYSsyOD4+Mj4+PjBdPWM7cCgpW2E+PjI+Pj4wXT1iLmdldFNlY29uZHMoKTtwKClbYSs0Pj4yPj4+MF09Yi5nZXRNaW51dGVzKCk7cCgpW2ErOD4+Mj4+PjBdPWIuZ2V0SG91cnMoKTtwKClbYSsxMj4+Mj4+PjBdPWIuZ2V0RGF0ZSgpO3AoKVthKzE2Pj4yPj4+MF09Yi5nZXRNb250aCgpO3AoKVthKzIwPj4yPj4+MF09Yi5nZXRZZWFyKCk7YT1iLmdldFRpbWUoKS8xRTM7cmV0dXJuICRiKChVPWEsMTw9K01hdGguYWJzKFUpPzA8VT8rTWF0aC5mbG9vcihVLzQyOTQ5NjcyOTYpPj4+MDp+fitNYXRoLmNlaWwoKFUtKyh+flU+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApKSxhPj4+MH0scjp2YixzOndiLHk6ZnVuY3Rpb24oYSxiLGMpe2Z1bmN0aW9uIGQodil7cmV0dXJuKHY9di50b1RpbWVTdHJpbmcoKS5tYXRjaCgvXFwoKFtBLVphLXogXSspXFwpJC8pKT9cbnZbMV06XCJHTVRcIn1hPj4+PTA7Yj4+Pj0wO2M+Pj49MDt2YXIgZz0obmV3IERhdGUpLmdldEZ1bGxZZWFyKCksaD1uZXcgRGF0ZShnLDAsMSksaz1uZXcgRGF0ZShnLDYsMSk7Zz1oLmdldFRpbWV6b25lT2Zmc2V0KCk7dmFyIHE9ay5nZXRUaW1lem9uZU9mZnNldCgpLEI9TWF0aC5tYXgoZyxxKTt0KClbYT4+Mj4+PjBdPTYwKkI7cCgpW2I+PjI+Pj4wXT1OdW1iZXIoZyE9cSk7YT1kKGgpO2I9ZChrKTthPXliKGEpO2I9eWIoYik7cTxnPyh0KClbYz4+Mj4+PjBdPWEsdCgpW2MrND4+Mj4+PjBdPWIpOih0KClbYz4+Mj4+PjBdPWIsdCgpW2MrND4+Mj4+PjBdPWEpfSxjOigpPT57SyhcIlwiKX0sbDpmdW5jdGlvbigpe30saTpmdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpfSxWOigpPT57dmErPTE7dGhyb3dcInVud2luZFwiO30sQTpmdW5jdGlvbigpe3JldHVybiA0Mjk0OTAxNzYwfSxlOigpPT5wZXJmb3JtYW5jZS50aW1lT3JpZ2luK3BlcmZvcm1hbmNlLm5vdygpLGY6ZnVuY3Rpb24oKXtyZXR1cm4gQz9cbnJlcXVpcmUoXCJvc1wiKS5jcHVzKCkubGVuZ3RoOm5hdmlnYXRvci5oYXJkd2FyZUNvbmN1cnJlbmN5fSxLOmZ1bmN0aW9uKGEsYixjLGQpe1Yud2I9Yj4+PjA7RGIubGVuZ3RoPWM7Yj1kPj4+MD4+Mztmb3IoZD0wO2Q8YztkKyspRGJbZF09ZWEoKVtiK2Q+Pj4wXTtyZXR1cm4gWWJbYV0uYXBwbHkobnVsbCxEYil9LHg6ZnVuY3Rpb24oYSl7YT4+Pj0wO3ZhciBiPW4oKS5sZW5ndGg7aWYoYTw9Ynx8NDI5NDkwMTc2MDxhKXJldHVybiExO2Zvcih2YXIgYz0xOzQ+PWM7Yyo9Mil7dmFyIGQ9YiooMSsuMi9jKTtkPU1hdGgubWluKGQsYSsxMDA2NjMyOTYpO3ZhciBnPU1hdGg7ZD1NYXRoLm1heChhLGQpO2E6e2c9Zy5taW4uY2FsbChnLDQyOTQ5MDE3NjAsZCsoNjU1MzYtZCU2NTUzNiklNjU1MzYpLWUuYnVmZmVyLmJ5dGVMZW5ndGgrNjU1MzU+Pj4xNjt0cnl7ZS5ncm93KGcpO20oKTt2YXIgaD0xO2JyZWFrIGF9Y2F0Y2goayl7fWg9dm9pZCAwfWlmKGgpcmV0dXJuITB9cmV0dXJuITF9LFxuTzpIYixQOkliLEg6TmEsZzpKYixuOk5iLHc6T2IsbTpRYixhOmV8fHcud2FzbU1lbW9yeSxHOlZiLGQ6ZnVuY3Rpb24oYSxiLGMsZCl7cmV0dXJuIFZiKGE+Pj4wLGI+Pj4wLGM+Pj4wLGQ+Pj4wKX0sajpmdW5jdGlvbihhLGIsYyxkKXtjb25zdCBnPVAubGVuZ3RoO2E9bmV3IFVpbnQ4QXJyYXkobigpLnNsaWNlKGErYixhK2MpKTt0cnl7dmFyIGg9bmV3IFdlYkFzc2VtYmx5Lk1vZHVsZShhKSxrPW5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZShoLHtlbnY6e21lbW9yeTplfX0pLHE7Zm9yKHEgaW4gay5leHBvcnRzKVhiKGsuZXhwb3J0c1txXSk7cmV0dXJuIGc8UC5sZW5ndGg/ZzpkfWNhdGNoKEIpe3JldHVybiBjb25zb2xlLmxvZyhCKSxkfX19O1xuKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShjLGQpe2M9Yy5leHBvcnRzO0w9Yz1iYyhjKTtWLiRhLnB1c2goTC56YSk7UD1MLkFhO3RhLnVuc2hpZnQoTC5XKTtyYT1kO3lhKCk7cmV0dXJuIGN9dmFyIGI9e2E6YWN9O3hhKCk7aWYody5pbnN0YW50aWF0ZVdhc20pdHJ5e3JldHVybiB3Lmluc3RhbnRpYXRlV2FzbShiLGEpfWNhdGNoKGMpe0koXCJNb2R1bGUuaW5zdGFudGlhdGVXYXNtIGNhbGxiYWNrIGZhaWxlZCB3aXRoIGVycm9yOiBcIitjKSx4KGMpfURhKGIsZnVuY3Rpb24oYyl7YShjLmluc3RhbmNlLGMubW9kdWxlKX0pLmNhdGNoKHgpO3JldHVybnt9fSkoKTt3Ll9PcnRJbml0PShhLGIpPT4ody5fT3J0SW5pdD1MLlgpKGEsYik7dy5fT3J0R2V0TGFzdEVycm9yPShhLGIpPT4ody5fT3J0R2V0TGFzdEVycm9yPUwuWSkoYSxiKTtcbncuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zPShhLGIsYyxkLGcsaCxrLHEsQix2KT0+KHcuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zPUwuWikoYSxiLGMsZCxnLGgsayxxLEIsdik7dy5fT3J0QXBwZW5kRXhlY3V0aW9uUHJvdmlkZXI9KGEsYik9Pih3Ll9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlcj1MLl8pKGEsYik7dy5fT3J0QWRkRnJlZURpbWVuc2lvbk92ZXJyaWRlPShhLGIsYyk9Pih3Ll9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGU9TC4kKShhLGIsYyk7dy5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5PShhLGIsYyk9Pih3Ll9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnk9TC5hYSkoYSxiLGMpO3cuX09ydFJlbGVhc2VTZXNzaW9uT3B0aW9ucz1hPT4ody5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zPUwuYmEpKGEpO3cuX09ydENyZWF0ZVNlc3Npb249KGEsYixjKT0+KHcuX09ydENyZWF0ZVNlc3Npb249TC5jYSkoYSxiLGMpO1xudy5fT3J0UmVsZWFzZVNlc3Npb249YT0+KHcuX09ydFJlbGVhc2VTZXNzaW9uPUwuZGEpKGEpO3cuX09ydEdldElucHV0T3V0cHV0Q291bnQ9KGEsYixjKT0+KHcuX09ydEdldElucHV0T3V0cHV0Q291bnQ9TC5lYSkoYSxiLGMpO3cuX09ydEdldElucHV0TmFtZT0oYSxiKT0+KHcuX09ydEdldElucHV0TmFtZT1MLmZhKShhLGIpO3cuX09ydEdldE91dHB1dE5hbWU9KGEsYik9Pih3Ll9PcnRHZXRPdXRwdXROYW1lPUwuZ2EpKGEsYik7dy5fT3J0RnJlZT1hPT4ody5fT3J0RnJlZT1MLmhhKShhKTt3Ll9PcnRDcmVhdGVUZW5zb3I9KGEsYixjLGQsZyxoKT0+KHcuX09ydENyZWF0ZVRlbnNvcj1MLmlhKShhLGIsYyxkLGcsaCk7dy5fT3J0R2V0VGVuc29yRGF0YT0oYSxiLGMsZCxnKT0+KHcuX09ydEdldFRlbnNvckRhdGE9TC5qYSkoYSxiLGMsZCxnKTt3Ll9PcnRSZWxlYXNlVGVuc29yPWE9Pih3Ll9PcnRSZWxlYXNlVGVuc29yPUwua2EpKGEpO1xudy5fT3J0Q3JlYXRlUnVuT3B0aW9ucz0oYSxiLGMsZCk9Pih3Ll9PcnRDcmVhdGVSdW5PcHRpb25zPUwubGEpKGEsYixjLGQpO3cuX09ydEFkZFJ1bkNvbmZpZ0VudHJ5PShhLGIsYyk9Pih3Ll9PcnRBZGRSdW5Db25maWdFbnRyeT1MLm1hKShhLGIsYyk7dy5fT3J0UmVsZWFzZVJ1bk9wdGlvbnM9YT0+KHcuX09ydFJlbGVhc2VSdW5PcHRpb25zPUwubmEpKGEpO3cuX09ydENyZWF0ZUJpbmRpbmc9YT0+KHcuX09ydENyZWF0ZUJpbmRpbmc9TC5vYSkoYSk7dy5fT3J0QmluZElucHV0PShhLGIsYyk9Pih3Ll9PcnRCaW5kSW5wdXQ9TC5wYSkoYSxiLGMpO3cuX09ydEJpbmRPdXRwdXQ9KGEsYixjLGQpPT4ody5fT3J0QmluZE91dHB1dD1MLnFhKShhLGIsYyxkKTt3Ll9PcnRDbGVhckJvdW5kT3V0cHV0cz1hPT4ody5fT3J0Q2xlYXJCb3VuZE91dHB1dHM9TC5yYSkoYSk7dy5fT3J0UmVsZWFzZUJpbmRpbmc9YT0+KHcuX09ydFJlbGVhc2VCaW5kaW5nPUwuc2EpKGEpO1xudy5fT3J0UnVuV2l0aEJpbmRpbmc9KGEsYixjLGQsZyk9Pih3Ll9PcnRSdW5XaXRoQmluZGluZz1MLnRhKShhLGIsYyxkLGcpO3cuX09ydFJ1bj0oYSxiLGMsZCxnLGgsayxxKT0+KHcuX09ydFJ1bj1MLnVhKShhLGIsYyxkLGcsaCxrLHEpO3cuX09ydEVuZFByb2ZpbGluZz1hPT4ody5fT3J0RW5kUHJvZmlsaW5nPUwudmEpKGEpO3ZhciBQYT13Ll9wdGhyZWFkX3NlbGY9KCk9PihQYT13Ll9wdGhyZWFkX3NlbGY9TC53YSkoKSx4Yj13Ll9tYWxsb2M9YT0+KHhiPXcuX21hbGxvYz1MLnhhKShhKTt3Ll9mcmVlPWE9Pih3Ll9mcmVlPUwueWEpKGEpO3cuX19lbXNjcmlwdGVuX3Rsc19pbml0PSgpPT4ody5fX2Vtc2NyaXB0ZW5fdGxzX2luaXQ9TC56YSkoKTt2YXIgWmI9dy5fX2Vtc2NyaXB0ZW5fdGhyZWFkX2luaXQ9KGEsYixjLGQsZyxoKT0+KFpiPXcuX19lbXNjcmlwdGVuX3RocmVhZF9pbml0PUwuQmEpKGEsYixjLGQsZyxoKTtcbncuX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkPSgpPT4ody5fX2Vtc2NyaXB0ZW5fdGhyZWFkX2NyYXNoZWQ9TC5DYSkoKTt2YXIgQ2I9KGEsYixjLGQpPT4oQ2I9TC5EYSkoYSxiLGMsZCksT2E9YT0+KE9hPUwuRWEpKGEpLFZhPXcuX19lbXNjcmlwdGVuX3RocmVhZF9leGl0PWE9PihWYT13Ll9fZW1zY3JpcHRlbl90aHJlYWRfZXhpdD1MLkZhKShhKSxzYj13Ll9fZW1zY3JpcHRlbl9jaGVja19tYWlsYm94PSgpPT4oc2I9dy5fX2Vtc2NyaXB0ZW5fY2hlY2tfbWFpbGJveD1MLkdhKSgpLCRiPWE9PigkYj1MLkhhKShhKSxTYT0oYSxiKT0+KFNhPUwuSWEpKGEsYiksemI9KCk9Pih6Yj1MLkphKSgpLFRhPWE9PihUYT1MLkthKShhKSxCYj1hPT4oQmI9TC5MYSkoYSk7dy5fX19zdGFydF9lbV9qcz05MDY4NDQ7dy5fX19zdG9wX2VtX2pzPTkwNzQ1NjtcbmZ1bmN0aW9uIGJjKGEpe2E9T2JqZWN0LmFzc2lnbih7fSxhKTt2YXIgYj1kPT4oKT0+ZCgpPj4+MCxjPWQ9Pmc9PmQoZyk+Pj4wO2EuX19lcnJub19sb2NhdGlvbj1iKGEuX19lcnJub19sb2NhdGlvbik7YS5wdGhyZWFkX3NlbGY9YihhLnB0aHJlYWRfc2VsZik7YS5tYWxsb2M9YyhhLm1hbGxvYyk7YS5zdGFja1NhdmU9YihhLnN0YWNrU2F2ZSk7YS5zdGFja0FsbG9jPWMoYS5zdGFja0FsbG9jKTtyZXR1cm4gYX13LmtlZXBSdW50aW1lQWxpdmU9UTt3Lndhc21NZW1vcnk9ZTt3LnN0YWNrQWxsb2M9QmI7dy5zdGFja1NhdmU9emI7dy5zdGFja1Jlc3RvcmU9VGE7dy5hZGRGdW5jdGlvbj1YYjt3LlVURjhUb1N0cmluZz1LYTt3LnN0cmluZ1RvVVRGOD1lYjt3Lmxlbmd0aEJ5dGVzVVRGOD1jYjt3LkV4aXRTdGF0dXM9RWE7dy5QVGhyZWFkPVY7dmFyIGNjO1M9ZnVuY3Rpb24gZGMoKXtjY3x8ZWMoKTtjY3x8KFM9ZGMpfTtcbmZ1bmN0aW9uIGVjKCl7ZnVuY3Rpb24gYSgpe2lmKCFjYyYmKGNjPSEwLHcuY2FsbGVkUnVuPSEwLCFNKSl7RHx8UmEodGEpO2hhKHcpO2lmKHcub25SdW50aW1lSW5pdGlhbGl6ZWQpdy5vblJ1bnRpbWVJbml0aWFsaXplZCgpO2lmKCFEKXtpZih3LnBvc3RSdW4pZm9yKFwiZnVuY3Rpb25cIj09dHlwZW9mIHcucG9zdFJ1biYmKHcucG9zdFJ1bj1bdy5wb3N0UnVuXSk7dy5wb3N0UnVuLmxlbmd0aDspe3ZhciBiPXcucG9zdFJ1bi5zaGlmdCgpO3VhLnVuc2hpZnQoYil9UmEodWEpfX19aWYoISgwPFIpKWlmKEQpaGEodyksRHx8UmEodGEpLHN0YXJ0V29ya2VyKHcpO2Vsc2V7aWYody5wcmVSdW4pZm9yKFwiZnVuY3Rpb25cIj09dHlwZW9mIHcucHJlUnVuJiYody5wcmVSdW49W3cucHJlUnVuXSk7dy5wcmVSdW4ubGVuZ3RoOylzYS51bnNoaWZ0KHcucHJlUnVuLnNoaWZ0KCkpO1JhKHNhKTswPFJ8fCh3LnNldFN0YXR1cz8ody5zZXRTdGF0dXMoXCJSdW5uaW5nLi4uXCIpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dy5zZXRTdGF0dXMoXCJcIil9LFxuMSk7YSgpfSwxKSk6YSgpKX19aWYody5wcmVJbml0KWZvcihcImZ1bmN0aW9uXCI9PXR5cGVvZiB3LnByZUluaXQmJih3LnByZUluaXQ9W3cucHJlSW5pdF0pOzA8dy5wcmVJbml0Lmxlbmd0aDspdy5wcmVJbml0LnBvcCgpKCk7ZWMoKTtcblxuXG4gIHJldHVybiBtb2R1bGVBcmcucmVhZHlcbn1cblxuKTtcbn0pKCk7XG5pZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuICBtb2R1bGUuZXhwb3J0cyA9IG9ydFdhc21UaHJlYWRlZDtcbmVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSlcbiAgZGVmaW5lKFtdLCAoKSA9PiBvcnRXYXNtVGhyZWFkZWQpO1xuIiwgIlwidXNlIHN0cmljdFwiO3ZhciBNb2R1bGU9e307dmFyIEVOVklST05NRU5UX0lTX05PREU9dHlwZW9mIHByb2Nlc3M9PVwib2JqZWN0XCImJnR5cGVvZiBwcm9jZXNzLnZlcnNpb25zPT1cIm9iamVjdFwiJiZ0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlPT1cInN0cmluZ1wiO2lmKEVOVklST05NRU5UX0lTX05PREUpe3ZhciBub2RlV29ya2VyVGhyZWFkcz1yZXF1aXJlKFwid29ya2VyX3RocmVhZHNcIik7dmFyIHBhcmVudFBvcnQ9bm9kZVdvcmtlclRocmVhZHMucGFyZW50UG9ydDtwYXJlbnRQb3J0Lm9uKFwibWVzc2FnZVwiLGRhdGE9Pm9ubWVzc2FnZSh7ZGF0YTpkYXRhfSkpO3ZhciBmcz1yZXF1aXJlKFwiZnNcIik7T2JqZWN0LmFzc2lnbihnbG9iYWwse3NlbGY6Z2xvYmFsLHJlcXVpcmU6cmVxdWlyZSxNb2R1bGU6TW9kdWxlLGxvY2F0aW9uOntocmVmOl9fZmlsZW5hbWV9LFdvcmtlcjpub2RlV29ya2VyVGhyZWFkcy5Xb3JrZXIsaW1wb3J0U2NyaXB0czpmPT4oMCxldmFsKShmcy5yZWFkRmlsZVN5bmMoZixcInV0ZjhcIikrXCIvLyMgc291cmNlVVJMPVwiK2YpLHBvc3RNZXNzYWdlOm1zZz0+cGFyZW50UG9ydC5wb3N0TWVzc2FnZShtc2cpLHBlcmZvcm1hbmNlOmdsb2JhbC5wZXJmb3JtYW5jZXx8e25vdzpEYXRlLm5vd319KX12YXIgaW5pdGlhbGl6ZWRKUz1mYWxzZTtmdW5jdGlvbiB0aHJlYWRQcmludEVycigpe3ZhciB0ZXh0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykuam9pbihcIiBcIik7aWYoRU5WSVJPTk1FTlRfSVNfTk9ERSl7ZnMud3JpdGVTeW5jKDIsdGV4dCtcIlxcblwiKTtyZXR1cm59Y29uc29sZS5lcnJvcih0ZXh0KX1mdW5jdGlvbiB0aHJlYWRBbGVydCgpe3ZhciB0ZXh0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykuam9pbihcIiBcIik7cG9zdE1lc3NhZ2Uoe2NtZDpcImFsZXJ0XCIsdGV4dDp0ZXh0LHRocmVhZElkOk1vZHVsZVtcIl9wdGhyZWFkX3NlbGZcIl0oKX0pfXZhciBlcnI9dGhyZWFkUHJpbnRFcnI7c2VsZi5hbGVydD10aHJlYWRBbGVydDtNb2R1bGVbXCJpbnN0YW50aWF0ZVdhc21cIl09KGluZm8scmVjZWl2ZUluc3RhbmNlKT0+e3ZhciBtb2R1bGU9TW9kdWxlW1wid2FzbU1vZHVsZVwiXTtNb2R1bGVbXCJ3YXNtTW9kdWxlXCJdPW51bGw7dmFyIGluc3RhbmNlPW5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZShtb2R1bGUsaW5mbyk7cmV0dXJuIHJlY2VpdmVJbnN0YW5jZShpbnN0YW5jZSl9O3NlbGYub251bmhhbmRsZWRyZWplY3Rpb249ZT0+e3Rocm93IGUucmVhc29uPz9lfTtmdW5jdGlvbiBoYW5kbGVNZXNzYWdlKGUpe3RyeXtpZihlLmRhdGEuY21kPT09XCJsb2FkXCIpe2xldCBtZXNzYWdlUXVldWU9W107c2VsZi5vbm1lc3NhZ2U9ZT0+bWVzc2FnZVF1ZXVlLnB1c2goZSk7c2VsZi5zdGFydFdvcmtlcj1pbnN0YW5jZT0+e01vZHVsZT1pbnN0YW5jZTtwb3N0TWVzc2FnZSh7XCJjbWRcIjpcImxvYWRlZFwifSk7Zm9yKGxldCBtc2cgb2YgbWVzc2FnZVF1ZXVlKXtoYW5kbGVNZXNzYWdlKG1zZyl9c2VsZi5vbm1lc3NhZ2U9aGFuZGxlTWVzc2FnZX07TW9kdWxlW1wid2FzbU1vZHVsZVwiXT1lLmRhdGEud2FzbU1vZHVsZTtmb3IoY29uc3QgaGFuZGxlciBvZiBlLmRhdGEuaGFuZGxlcnMpe01vZHVsZVtoYW5kbGVyXT0oLi4uYXJncyk9Pntwb3N0TWVzc2FnZSh7Y21kOlwiY2FsbEhhbmRsZXJcIixoYW5kbGVyOmhhbmRsZXIsYXJnczphcmdzfSl9fU1vZHVsZVtcIndhc21NZW1vcnlcIl09ZS5kYXRhLndhc21NZW1vcnk7TW9kdWxlW1wiYnVmZmVyXCJdPU1vZHVsZVtcIndhc21NZW1vcnlcIl0uYnVmZmVyO01vZHVsZVtcIkVOVklST05NRU5UX0lTX1BUSFJFQURcIl09dHJ1ZTtpZih0eXBlb2YgZS5kYXRhLnVybE9yQmxvYj09XCJzdHJpbmdcIil7aW1wb3J0U2NyaXB0cyhlLmRhdGEudXJsT3JCbG9iKX1lbHNle3ZhciBvYmplY3RVcmw9VVJMLmNyZWF0ZU9iamVjdFVSTChlLmRhdGEudXJsT3JCbG9iKTtpbXBvcnRTY3JpcHRzKG9iamVjdFVybCk7VVJMLnJldm9rZU9iamVjdFVSTChvYmplY3RVcmwpfW9ydFdhc21UaHJlYWRlZChNb2R1bGUpfWVsc2UgaWYoZS5kYXRhLmNtZD09PVwicnVuXCIpe01vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfaW5pdFwiXShlLmRhdGEucHRocmVhZF9wdHIsLyppc01haW5Ccm93c2VyVGhyZWFkPSovMCwvKmlzTWFpblJ1bnRpbWVUaHJlYWQ9Ki8wLC8qY2FuQmxvY2s9Ki8xKTtNb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX21haWxib3hfYXdhaXRcIl0oZS5kYXRhLnB0aHJlYWRfcHRyKTtNb2R1bGVbXCJlc3RhYmxpc2hTdGFja1NwYWNlXCJdKCk7TW9kdWxlW1wiUFRocmVhZFwiXS5yZWNlaXZlT2JqZWN0VHJhbnNmZXIoZS5kYXRhKTtNb2R1bGVbXCJQVGhyZWFkXCJdLnRocmVhZEluaXRUTFMoKTtpZighaW5pdGlhbGl6ZWRKUyl7aW5pdGlhbGl6ZWRKUz10cnVlfXRyeXtNb2R1bGVbXCJpbnZva2VFbnRyeVBvaW50XCJdKGUuZGF0YS5zdGFydF9yb3V0aW5lLGUuZGF0YS5hcmcpfWNhdGNoKGV4KXtpZihleCE9XCJ1bndpbmRcIil7dGhyb3cgZXh9fX1lbHNlIGlmKGUuZGF0YS5jbWQ9PT1cImNhbmNlbFwiKXtpZihNb2R1bGVbXCJfcHRocmVhZF9zZWxmXCJdKCkpe01vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfZXhpdFwiXSgtMSl9fWVsc2UgaWYoZS5kYXRhLnRhcmdldD09PVwic2V0aW1tZWRpYXRlXCIpe31lbHNlIGlmKGUuZGF0YS5jbWQ9PT1cImNoZWNrTWFpbGJveFwiKXtpZihpbml0aWFsaXplZEpTKXtNb2R1bGVbXCJjaGVja01haWxib3hcIl0oKX19ZWxzZSBpZihlLmRhdGEuY21kKXtlcnIoXCJ3b3JrZXIuanMgcmVjZWl2ZWQgdW5rbm93biBjb21tYW5kIFwiK2UuZGF0YS5jbWQpO2VycihlLmRhdGEpfX1jYXRjaChleCl7aWYoTW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkXCJdKXtNb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX2NyYXNoZWRcIl0oKX10aHJvdyBleH19c2VsZi5vbm1lc3NhZ2U9aGFuZGxlTWVzc2FnZTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdub2RlOnBhdGgnO1xuaW1wb3J0IHtFbnZ9IGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5cbmltcG9ydCB7T3J0V2FzbU1vZHVsZX0gZnJvbSAnLi9iaW5kaW5nL29ydC13YXNtJztcbmltcG9ydCB7T3J0V2FzbVRocmVhZGVkTW9kdWxlfSBmcm9tICcuL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzICovXG5sZXQgb3J0V2FzbUZhY3Rvcnk6IEVtc2NyaXB0ZW5Nb2R1bGVGYWN0b3J5PE9ydFdhc21Nb2R1bGU+O1xuXG5pZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9UUkFJTklORykge1xuICBvcnRXYXNtRmFjdG9yeSA9IHJlcXVpcmUoJy4vYmluZGluZy9vcnQtdHJhaW5pbmctd2FzbS1zaW1kLmpzJyk7XG59IGVsc2Uge1xuICBvcnRXYXNtRmFjdG9yeSA9XG4gICAgICBCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR1BVID8gcmVxdWlyZSgnLi9iaW5kaW5nL29ydC13YXNtLmpzJykgOiByZXF1aXJlKCcuL2JpbmRpbmcvb3J0LXdhc20tc2ltZC5qc2VwLmpzJyk7XG59XG5cbmNvbnN0IG9ydFdhc21GYWN0b3J5VGhyZWFkZWQ6IEVtc2NyaXB0ZW5Nb2R1bGVGYWN0b3J5PE9ydFdhc21Nb2R1bGU+ID0gIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1RIUkVBRCA/XG4gICAgKEJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUgPyByZXF1aXJlKCcuL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQuanMnKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCcuL2JpbmRpbmcvb3J0LXdhc20tc2ltZC10aHJlYWRlZC5qc2VwLmpzJykpIDpcbiAgICBvcnRXYXNtRmFjdG9yeTtcbi8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0cyAqL1xuXG5sZXQgd2FzbTogT3J0V2FzbU1vZHVsZXx1bmRlZmluZWQ7XG5sZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbmxldCBpbml0aWFsaXppbmcgPSBmYWxzZTtcbmxldCBhYm9ydGVkID0gZmFsc2U7XG5cbmNvbnN0IGlzTXVsdGlUaHJlYWRTdXBwb3J0ZWQgPSAoKTogYm9vbGVhbiA9PiB7XG4gIHRyeSB7XG4gICAgLy8gSWYgJ1NoYXJlZEFycmF5QnVmZmVyJyBpcyBub3QgYXZhaWxhYmxlLCBXZWJBc3NlbWJseSB0aHJlYWRzIHdpbGwgbm90IHdvcmsuXG4gICAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBUZXN0IGZvciB0cmFuc2ZlcmFiaWxpdHkgb2YgU0FCcyAoZm9yIGJyb3dzZXJzLiBuZWVkZWQgZm9yIEZpcmVmb3gpXG4gICAgLy8gaHR0cHM6Ly9ncm91cHMuZ29vZ2xlLmNvbS9mb3J1bS8jIW1zZy9tb3ppbGxhLmRldi5wbGF0Zm9ybS9JSGtCWmxIRVRwQS9kd3NNTmNoV0VRQUpcbiAgICBpZiAodHlwZW9mIE1lc3NhZ2VDaGFubmVsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgbmV3IE1lc3NhZ2VDaGFubmVsKCkucG9ydDEucG9zdE1lc3NhZ2UobmV3IFNoYXJlZEFycmF5QnVmZmVyKDEpKTtcbiAgICB9XG5cbiAgICAvLyBUZXN0IGZvciBXZWJBc3NlbWJseSB0aHJlYWRzIGNhcGFiaWxpdHkgKGZvciBib3RoIGJyb3dzZXJzIGFuZCBOb2RlLmpzKVxuICAgIC8vIFRoaXMgdHlwZWQgYXJyYXkgaXMgYSBXZWJBc3NlbWJseSBwcm9ncmFtIGNvbnRhaW5pbmcgdGhyZWFkZWQgaW5zdHJ1Y3Rpb25zLlxuICAgIHJldHVybiBXZWJBc3NlbWJseS52YWxpZGF0ZShuZXcgVWludDhBcnJheShbXG4gICAgICAwLCA5NywgMTE1LCAxMDksIDEsIDAsICAwLCAgMCwgMSwgNCwgMSwgIDk2LCAwLCAgIDAsICAzLCAyLCAxLCAgMCwgNSxcbiAgICAgIDQsIDEsICAzLCAgIDEsICAgMSwgMTAsIDExLCAxLCA5LCAwLCA2NSwgMCwgIDI1NCwgMTYsIDIsIDAsIDI2LCAxMVxuICAgIF0pKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuY29uc3QgaXNTaW1kU3VwcG9ydGVkID0gKCk6IGJvb2xlYW4gPT4ge1xuICB0cnkge1xuICAgIC8vIFRlc3QgZm9yIFdlYkFzc2VtYmx5IFNJTUQgY2FwYWJpbGl0eSAoZm9yIGJvdGggYnJvd3NlcnMgYW5kIE5vZGUuanMpXG4gICAgLy8gVGhpcyB0eXBlZCBhcnJheSBpcyBhIFdlYkFzc2VtYmx5IHByb2dyYW0gY29udGFpbmluZyBTSU1EIGluc3RydWN0aW9ucy5cblxuICAgIC8vIFRoZSBiaW5hcnkgZGF0YSBpcyBnZW5lcmF0ZWQgZnJvbSB0aGUgZm9sbG93aW5nIGNvZGUgYnkgd2F0Mndhc206XG4gICAgLy9cbiAgICAvLyAobW9kdWxlXG4gICAgLy8gICAodHlwZSAkdDAgKGZ1bmMpKVxuICAgIC8vICAgKGZ1bmMgJGYwICh0eXBlICR0MClcbiAgICAvLyAgICAgKGRyb3BcbiAgICAvLyAgICAgICAoaTMyeDQuZG90X2kxNng4X3NcbiAgICAvLyAgICAgICAgIChpOHgxNi5zcGxhdFxuICAgIC8vICAgICAgICAgICAoaTMyLmNvbnN0IDApKVxuICAgIC8vICAgICAgICAgKHYxMjguY29uc3QgaTMyeDQgMHgwMDAwMDAwMCAweDAwMDAwMDAwIDB4MDAwMDAwMDAgMHgwMDAwMDAwMCkpKSkpXG5cbiAgICByZXR1cm4gV2ViQXNzZW1ibHkudmFsaWRhdGUobmV3IFVpbnQ4QXJyYXkoW1xuICAgICAgMCwgICA5NywgMTE1LCAxMDksIDEsIDAsIDAsIDAsIDEsIDQsIDEsIDk2LCAwLCAwLCAzLCAyLCAxLCAwLCAxMCwgMzAsIDEsICAgMjgsICAwLCA2NSwgMCxcbiAgICAgIDI1MywgMTUsIDI1MywgMTIsICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgIDAsICAyNTMsIDE4NiwgMSwgMjYsIDExXG4gICAgXSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5jb25zdCBnZXRXYXNtRmlsZU5hbWUgPSAodXNlU2ltZDogYm9vbGVhbiwgdXNlVGhyZWFkczogYm9vbGVhbikgPT4ge1xuICBpZiAodXNlU2ltZCkge1xuICAgIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1RSQUlOSU5HKSB7XG4gICAgICByZXR1cm4gJ29ydC10cmFpbmluZy13YXNtLXNpbWQud2FzbSc7XG4gICAgfVxuICAgIHJldHVybiB1c2VUaHJlYWRzID8gJ29ydC13YXNtLXNpbWQtdGhyZWFkZWQud2FzbScgOiAnb3J0LXdhc20tc2ltZC53YXNtJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdXNlVGhyZWFkcyA/ICdvcnQtd2FzbS10aHJlYWRlZC53YXNtJyA6ICdvcnQtd2FzbS53YXNtJztcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGluaXRpYWxpemVXZWJBc3NlbWJseSA9IGFzeW5jKGZsYWdzOiBFbnYuV2ViQXNzZW1ibHlGbGFncyk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBpZiAoaW5pdGlhbGl6ZWQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbiAgaWYgKGluaXRpYWxpemluZykge1xuICAgIHRocm93IG5ldyBFcnJvcignbXVsdGlwbGUgY2FsbHMgdG8gXFwnaW5pdGlhbGl6ZVdlYkFzc2VtYmx5KClcXCcgZGV0ZWN0ZWQuJyk7XG4gIH1cbiAgaWYgKGFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3ByZXZpb3VzIGNhbGwgdG8gXFwnaW5pdGlhbGl6ZVdlYkFzc2VtYmx5KClcXCcgZmFpbGVkLicpO1xuICB9XG5cbiAgaW5pdGlhbGl6aW5nID0gdHJ1ZTtcblxuICAvLyB3YXNtIGZsYWdzIGFyZSBhbHJlYWR5IGluaXRpYWxpemVkXG4gIGNvbnN0IHRpbWVvdXQgPSBmbGFncy5pbml0VGltZW91dCE7XG4gIGNvbnN0IG51bVRocmVhZHMgPSBmbGFncy5udW1UaHJlYWRzITtcbiAgY29uc3Qgc2ltZCA9IGZsYWdzLnNpbWQhO1xuXG4gIGNvbnN0IHVzZVRocmVhZHMgPSBudW1UaHJlYWRzID4gMSAmJiBpc011bHRpVGhyZWFkU3VwcG9ydGVkKCk7XG4gIGNvbnN0IHVzZVNpbWQgPSBzaW1kICYmIGlzU2ltZFN1cHBvcnRlZCgpO1xuXG4gIGNvbnN0IHdhc21QYXRocyA9IGZsYWdzLndhc21QYXRocztcbiAgY29uc3Qgd2FzbVByZWZpeE92ZXJyaWRlID0gdHlwZW9mIHdhc21QYXRocyA9PT0gJ3N0cmluZycgPyB3YXNtUGF0aHMgOiB1bmRlZmluZWQ7XG4gIGNvbnN0IHdhc21GaWxlTmFtZSA9IGdldFdhc21GaWxlTmFtZSh1c2VTaW1kLCB1c2VUaHJlYWRzKTtcbiAgY29uc3Qgd2FzbVBhdGhPdmVycmlkZSA9IHR5cGVvZiB3YXNtUGF0aHMgPT09ICdvYmplY3QnID8gd2FzbVBhdGhzW3dhc21GaWxlTmFtZV0gOiB1bmRlZmluZWQ7XG5cbiAgbGV0IGlzVGltZW91dCA9IGZhbHNlO1xuXG4gIGNvbnN0IHRhc2tzOiBBcnJheTxQcm9taXNlPHZvaWQ+PiA9IFtdO1xuXG4gIC8vIHByb21pc2UgZm9yIHRpbWVvdXRcbiAgaWYgKHRpbWVvdXQgPiAwKSB7XG4gICAgdGFza3MucHVzaChuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlzVGltZW91dCA9IHRydWU7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH0sIHRpbWVvdXQpO1xuICAgIH0pKTtcbiAgfVxuXG4gIC8vIHByb21pc2UgZm9yIG1vZHVsZSBpbml0aWFsaXphdGlvblxuICB0YXNrcy5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBmYWN0b3J5ID0gdXNlVGhyZWFkcyA/IG9ydFdhc21GYWN0b3J5VGhyZWFkZWQgOiBvcnRXYXNtRmFjdG9yeTtcbiAgICBjb25zdCBjb25maWc6IFBhcnRpYWw8T3J0V2FzbU1vZHVsZT4gPSB7XG4gICAgICBsb2NhdGVGaWxlOiAoZmlsZU5hbWU6IHN0cmluZywgc2NyaXB0RGlyZWN0b3J5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0FTTV9USFJFQUQgJiYgdXNlVGhyZWFkcyAmJiBmaWxlTmFtZS5lbmRzV2l0aCgnLndvcmtlci5qcycpICYmXG4gICAgICAgICAgICB0eXBlb2YgQmxvYiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICByZXR1cm4gVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgcmVxdWlyZSgpIGZ1bmN0aW9uIGlzIGhhbmRsZWQgYnkgZXNidWlsZCBwbHVnaW4gdG8gbG9hZCBmaWxlIGNvbnRlbnQgYXMgc3RyaW5nLlxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG4gICAgICAgICAgICAgICAgcmVxdWlyZSgnLi9iaW5kaW5nL29ydC13YXNtLXRocmVhZGVkLndvcmtlci5qcycpXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHt0eXBlOiAndGV4dC9qYXZhc2NyaXB0J30pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWxlTmFtZS5lbmRzV2l0aCgnLndhc20nKSkge1xuICAgICAgICAgIGlmICh3YXNtUGF0aE92ZXJyaWRlKSB7XG4gICAgICAgICAgICByZXR1cm4gd2FzbVBhdGhPdmVycmlkZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBwcmVmaXggPSB3YXNtUHJlZml4T3ZlcnJpZGUgPz8gc2NyaXB0RGlyZWN0b3J5O1xuXG4gICAgICAgICAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR1BVKSB7XG4gICAgICAgICAgICBpZiAod2FzbUZpbGVOYW1lID09PSAnb3J0LXdhc20tc2ltZC53YXNtJykge1xuICAgICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgJ29ydC13YXNtLXNpbWQuanNlcC53YXNtJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAod2FzbUZpbGVOYW1lID09PSAnb3J0LXdhc20tc2ltZC10aHJlYWRlZC53YXNtJykge1xuICAgICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgJ29ydC13YXNtLXNpbWQtdGhyZWFkZWQuanNlcC53YXNtJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcHJlZml4ICsgd2FzbUZpbGVOYW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNjcmlwdERpcmVjdG9yeSArIGZpbGVOYW1lO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1RIUkVBRCAmJiB1c2VUaHJlYWRzKSB7XG4gICAgICBpZiAodHlwZW9mIEJsb2IgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbmZpZy5tYWluU2NyaXB0VXJsT3JCbG9iID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ29ydC13YXNtLXRocmVhZGVkLmpzJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzY3JpcHRTb3VyY2VDb2RlID0gYHZhciBvcnRXYXNtVGhyZWFkZWQ9JHtmYWN0b3J5LnRvU3RyaW5nKCl9O2A7XG4gICAgICAgIGNvbmZpZy5tYWluU2NyaXB0VXJsT3JCbG9iID0gbmV3IEJsb2IoW3NjcmlwdFNvdXJjZUNvZGVdLCB7dHlwZTogJ3RleHQvamF2YXNjcmlwdCd9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmYWN0b3J5KGNvbmZpZykudGhlbihcbiAgICAgICAgLy8gd2FzbSBtb2R1bGUgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5XG4gICAgICAgIG1vZHVsZSA9PiB7XG4gICAgICAgICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gICAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgIHdhc20gPSBtb2R1bGU7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9LFxuICAgICAgICAvLyB3YXNtIG1vZHVsZSBmYWlsZWQgdG8gaW5pdGlhbGl6ZVxuICAgICAgICAod2hhdCkgPT4ge1xuICAgICAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuICAgICAgICAgIGFib3J0ZWQgPSB0cnVlO1xuICAgICAgICAgIHJlamVjdCh3aGF0KTtcbiAgICAgICAgfSk7XG4gIH0pKTtcblxuICBhd2FpdCBQcm9taXNlLnJhY2UodGFza3MpO1xuXG4gIGlmIChpc1RpbWVvdXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFdlYkFzc2VtYmx5IGJhY2tlbmQgaW5pdGlhbGl6aW5nIGZhaWxlZCBkdWUgdG8gdGltZW91dDogJHt0aW1lb3V0fW1zYCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBnZXRJbnN0YW5jZSA9ICgpOiBPcnRXYXNtTW9kdWxlID0+IHtcbiAgaWYgKGluaXRpYWxpemVkICYmIHdhc20pIHtcbiAgICByZXR1cm4gd2FzbTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcignV2ViQXNzZW1ibHkgaXMgbm90IGluaXRpYWxpemVkIHlldC4nKTtcbn07XG5cbmV4cG9ydCBjb25zdCBkaXNwb3NlID0gKCk6IHZvaWQgPT4ge1xuICBpZiAoaW5pdGlhbGl6ZWQgJiYgIWluaXRpYWxpemluZyAmJiAhYWJvcnRlZCkge1xuICAgIGluaXRpYWxpemluZyA9IHRydWU7XG5cbiAgICAod2FzbSBhcyBPcnRXYXNtVGhyZWFkZWRNb2R1bGUpLlBUaHJlYWQ/LnRlcm1pbmF0ZUFsbFRocmVhZHMoKTtcbiAgICB3YXNtID0gdW5kZWZpbmVkO1xuXG4gICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gICAgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICBhYm9ydGVkID0gdHJ1ZTtcbiAgfVxufTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtnZXRJbnN0YW5jZX0gZnJvbSAnLi93YXNtLWZhY3RvcnknO1xuXG5leHBvcnQgY29uc3QgYWxsb2NXYXNtU3RyaW5nID0gKGRhdGE6IHN0cmluZywgYWxsb2NzOiBudW1iZXJbXSk6IG51bWJlciA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gIGNvbnN0IGRhdGFMZW5ndGggPSB3YXNtLmxlbmd0aEJ5dGVzVVRGOChkYXRhKSArIDE7XG4gIGNvbnN0IGRhdGFPZmZzZXQgPSB3YXNtLl9tYWxsb2MoZGF0YUxlbmd0aCk7XG4gIHdhc20uc3RyaW5nVG9VVEY4KGRhdGEsIGRhdGFPZmZzZXQsIGRhdGFMZW5ndGgpO1xuICBhbGxvY3MucHVzaChkYXRhT2Zmc2V0KTtcblxuICByZXR1cm4gZGF0YU9mZnNldDtcbn07XG5cbmludGVyZmFjZSBFeHRyYU9wdGlvbnNIYW5kbGVyIHtcbiAgKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCBpdGVyYXRlRXh0cmFPcHRpb25zID1cbiAgICAob3B0aW9uczogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sIHByZWZpeDogc3RyaW5nLCBzZWVuOiBXZWFrU2V0PFJlY29yZDxzdHJpbmcsIHVua25vd24+PixcbiAgICAgaGFuZGxlcjogRXh0cmFPcHRpb25zSGFuZGxlcik6IHZvaWQgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09ICdvYmplY3QnICYmIG9wdGlvbnMgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKHNlZW4uaGFzKG9wdGlvbnMpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDaXJjdWxhciByZWZlcmVuY2UgaW4gb3B0aW9ucycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlZW4uYWRkKG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5lbnRyaWVzKG9wdGlvbnMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgICAgICBjb25zdCBuYW1lID0gKHByZWZpeCkgPyBwcmVmaXggKyBrZXkgOiBrZXk7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgaXRlcmF0ZUV4dHJhT3B0aW9ucyh2YWx1ZSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiwgbmFtZSArICcuJywgc2VlbiwgaGFuZGxlcik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgaGFuZGxlcihuYW1lLCB2YWx1ZS50b1N0cmluZygpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgIGhhbmRsZXIobmFtZSwgKHZhbHVlKSA/ICcxJyA6ICcwJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBoYW5kbGUgZXh0cmEgY29uZmlnIHR5cGU6ICR7dHlwZW9mIHZhbHVlfWApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4vKipcbiAqIGNoZWNrIHdlYiBhc3NlbWJseSBBUEkncyBsYXN0IGVycm9yIGFuZCB0aHJvdyBlcnJvciBpZiBhbnkgZXJyb3Igb2NjdXJyZWQuXG4gKiBAcGFyYW0gbWVzc2FnZSBhIG1lc3NhZ2UgdXNlZCB3aGVuIGFuIGVycm9yIG9jY3VycmVkLlxuICovXG5leHBvcnQgY29uc3QgY2hlY2tMYXN0RXJyb3IgPSAobWVzc2FnZTogc3RyaW5nKTogdm9pZCA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gIGNvbnN0IHN0YWNrID0gd2FzbS5zdGFja1NhdmUoKTtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXJhbXNPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2MoOCk7XG4gICAgd2FzbS5fT3J0R2V0TGFzdEVycm9yKHBhcmFtc09mZnNldCwgcGFyYW1zT2Zmc2V0ICsgNCk7XG4gICAgY29uc3QgZXJyb3JDb2RlID0gd2FzbS5IRUFQMzJbcGFyYW1zT2Zmc2V0IC8gNF07XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlUG9pbnRlciA9IHdhc20uSEVBUFUzMltwYXJhbXNPZmZzZXQgLyA0ICsgMV07XG4gICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3JNZXNzYWdlUG9pbnRlciA/IHdhc20uVVRGOFRvU3RyaW5nKGVycm9yTWVzc2FnZVBvaW50ZXIpIDogJyc7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke21lc3NhZ2V9IEVSUk9SX0NPREU6ICR7ZXJyb3JDb2RlfSwgRVJST1JfTUVTU0FHRTogJHtlcnJvck1lc3NhZ2V9YCk7XG4gIH0gZmluYWxseSB7XG4gICAgd2FzbS5zdGFja1Jlc3RvcmUoc3RhY2spO1xuICB9XG59O1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0luZmVyZW5jZVNlc3Npb259IGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5cbmltcG9ydCB7Z2V0SW5zdGFuY2V9IGZyb20gJy4vd2FzbS1mYWN0b3J5JztcbmltcG9ydCB7YWxsb2NXYXNtU3RyaW5nLCBjaGVja0xhc3RFcnJvciwgaXRlcmF0ZUV4dHJhT3B0aW9uc30gZnJvbSAnLi93YXNtLXV0aWxzJztcblxuZXhwb3J0IGNvbnN0IHNldFJ1bk9wdGlvbnMgPSAob3B0aW9uczogSW5mZXJlbmNlU2Vzc2lvbi5SdW5PcHRpb25zKTogW251bWJlciwgbnVtYmVyW11dID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gIGxldCBydW5PcHRpb25zSGFuZGxlID0gMDtcbiAgY29uc3QgYWxsb2NzOiBudW1iZXJbXSA9IFtdO1xuXG4gIGNvbnN0IHJ1bk9wdGlvbnM6IEluZmVyZW5jZVNlc3Npb24uUnVuT3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdHJ5IHtcbiAgICBpZiAob3B0aW9ucz8ubG9nU2V2ZXJpdHlMZXZlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBydW5PcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgPSAyOyAgLy8gRGVmYXVsdCB0byB3YXJuaW5nXG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgdHlwZW9mIG9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCAhPT0gJ251bWJlcicgfHwgIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5sb2dTZXZlcml0eUxldmVsKSB8fFxuICAgICAgICBvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgPCAwIHx8IG9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCA+IDQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgbG9nIHNlcnZlcml0eSBsZXZlbCBpcyBub3QgdmFsaWQ6ICR7b3B0aW9ucy5sb2dTZXZlcml0eUxldmVsfWApO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zPy5sb2dWZXJib3NpdHlMZXZlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBydW5PcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsID0gMDsgIC8vIERlZmF1bHQgdG8gMFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwgIT09ICdudW1iZXInIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKG9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGxvZyB2ZXJib3NpdHkgbGV2ZWwgaXMgbm90IHZhbGlkOiAke29wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWx9YCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnM/LnRlcm1pbmF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBydW5PcHRpb25zLnRlcm1pbmF0ZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGxldCB0YWdEYXRhT2Zmc2V0ID0gMDtcbiAgICBpZiAob3B0aW9ucz8udGFnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhZ0RhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcob3B0aW9ucy50YWcsIGFsbG9jcyk7XG4gICAgfVxuXG4gICAgcnVuT3B0aW9uc0hhbmRsZSA9IHdhc20uX09ydENyZWF0ZVJ1bk9wdGlvbnMoXG4gICAgICAgIHJ1bk9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCEsIHJ1bk9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwhLCAhIXJ1bk9wdGlvbnMudGVybWluYXRlISwgdGFnRGF0YU9mZnNldCk7XG4gICAgaWYgKHJ1bk9wdGlvbnNIYW5kbGUgPT09IDApIHtcbiAgICAgIGNoZWNrTGFzdEVycm9yKCdDYW5cXCd0IGNyZWF0ZSBydW4gb3B0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucz8uZXh0cmEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaXRlcmF0ZUV4dHJhT3B0aW9ucyhvcHRpb25zLmV4dHJhLCAnJywgbmV3IFdlYWtTZXQ8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+KCksIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoa2V5LCBhbGxvY3MpO1xuICAgICAgICBjb25zdCB2YWx1ZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcodmFsdWUsIGFsbG9jcyk7XG5cbiAgICAgICAgaWYgKHdhc20uX09ydEFkZFJ1bkNvbmZpZ0VudHJ5KHJ1bk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgcnVuIGNvbmZpZyBlbnRyeTogJHtrZXl9IC0gJHt2YWx1ZX0uYCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBbcnVuT3B0aW9uc0hhbmRsZSwgYWxsb2NzXTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChydW5PcHRpb25zSGFuZGxlICE9PSAwKSB7XG4gICAgICB3YXNtLl9PcnRSZWxlYXNlUnVuT3B0aW9ucyhydW5PcHRpb25zSGFuZGxlKTtcbiAgICB9XG4gICAgYWxsb2NzLmZvckVhY2goYWxsb2MgPT4gd2FzbS5fZnJlZShhbGxvYykpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7SW5mZXJlbmNlU2Vzc2lvbn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtnZXRJbnN0YW5jZX0gZnJvbSAnLi93YXNtLWZhY3RvcnknO1xuaW1wb3J0IHthbGxvY1dhc21TdHJpbmcsIGNoZWNrTGFzdEVycm9yLCBpdGVyYXRlRXh0cmFPcHRpb25zfSBmcm9tICcuL3dhc20tdXRpbHMnO1xuXG5jb25zdCBnZXRHcmFwaE9wdGltemF0aW9uTGV2ZWwgPSAoZ3JhcGhPcHRpbWl6YXRpb25MZXZlbDogc3RyaW5nfHVua25vd24pOiBudW1iZXIgPT4ge1xuICBzd2l0Y2ggKGdyYXBoT3B0aW1pemF0aW9uTGV2ZWwpIHtcbiAgICBjYXNlICdkaXNhYmxlZCc6XG4gICAgICByZXR1cm4gMDtcbiAgICBjYXNlICdiYXNpYyc6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlICdleHRlbmRlZCc6XG4gICAgICByZXR1cm4gMjtcbiAgICBjYXNlICdhbGwnOlxuICAgICAgcmV0dXJuIDk5O1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGdyYXBoIG9wdGltaXphdGlvbiBsZXZlbDogJHtncmFwaE9wdGltaXphdGlvbkxldmVsfWApO1xuICB9XG59O1xuXG5jb25zdCBnZXRFeGVjdXRpb25Nb2RlID0gKGV4ZWN1dGlvbk1vZGU6ICdzZXF1ZW50aWFsJ3wncGFyYWxsZWwnKTogbnVtYmVyID0+IHtcbiAgc3dpdGNoIChleGVjdXRpb25Nb2RlKSB7XG4gICAgY2FzZSAnc2VxdWVudGlhbCc6XG4gICAgICByZXR1cm4gMDtcbiAgICBjYXNlICdwYXJhbGxlbCc6XG4gICAgICByZXR1cm4gMTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBleGVjdXRpb24gbW9kZTogJHtleGVjdXRpb25Nb2RlfWApO1xuICB9XG59O1xuXG5jb25zdCBhcHBlbmREZWZhdWx0T3B0aW9ucyA9IChvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTogdm9pZCA9PiB7XG4gIGlmICghb3B0aW9ucy5leHRyYSkge1xuICAgIG9wdGlvbnMuZXh0cmEgPSB7fTtcbiAgfVxuICBpZiAoIW9wdGlvbnMuZXh0cmEuc2Vzc2lvbikge1xuICAgIG9wdGlvbnMuZXh0cmEuc2Vzc2lvbiA9IHt9O1xuICB9XG4gIGNvbnN0IHNlc3Npb24gPSBvcHRpb25zLmV4dHJhLnNlc3Npb24gYXMgUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbiAgaWYgKCFzZXNzaW9uLnVzZV9vcnRfbW9kZWxfYnl0ZXNfZGlyZWN0bHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gICAgc2Vzc2lvbi51c2Vfb3J0X21vZGVsX2J5dGVzX2RpcmVjdGx5ID0gJzEnO1xuICB9XG5cbiAgLy8gaWYgdXNpbmcgSlNFUCB3aXRoIFdlYkdQVSwgYWx3YXlzIGRpc2FibGUgbWVtb3J5IHBhdHRlcm5cbiAgaWYgKG9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzICYmXG4gICAgICBvcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycy5zb21lKGVwID0+ICh0eXBlb2YgZXAgPT09ICdzdHJpbmcnID8gZXAgOiBlcC5uYW1lKSA9PT0gJ3dlYmdwdScpKSB7XG4gICAgb3B0aW9ucy5lbmFibGVNZW1QYXR0ZXJuID0gZmFsc2U7XG4gIH1cbn07XG5cbmNvbnN0IHNldEV4ZWN1dGlvblByb3ZpZGVycyA9XG4gICAgKHNlc3Npb25PcHRpb25zSGFuZGxlOiBudW1iZXIsIGV4ZWN1dGlvblByb3ZpZGVyczogcmVhZG9ubHkgSW5mZXJlbmNlU2Vzc2lvbi5FeGVjdXRpb25Qcm92aWRlckNvbmZpZ1tdLFxuICAgICBhbGxvY3M6IG51bWJlcltdKTogdm9pZCA9PiB7XG4gICAgICBmb3IgKGNvbnN0IGVwIG9mIGV4ZWN1dGlvblByb3ZpZGVycykge1xuICAgICAgICBsZXQgZXBOYW1lID0gdHlwZW9mIGVwID09PSAnc3RyaW5nJyA/IGVwIDogZXAubmFtZTtcblxuICAgICAgICAvLyBjaGVjayBFUCBuYW1lXG4gICAgICAgIHN3aXRjaCAoZXBOYW1lKSB7XG4gICAgICAgICAgY2FzZSAneG5ucGFjayc6XG4gICAgICAgICAgICBlcE5hbWUgPSAnWE5OUEFDSyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICd3ZWJubic6XG4gICAgICAgICAgICBlcE5hbWUgPSAnV0VCTk4nO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlcCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgY29uc3Qgd2Vibm5PcHRpb25zID0gZXAgYXMgSW5mZXJlbmNlU2Vzc2lvbi5XZWJOTkV4ZWN1dGlvblByb3ZpZGVyT3B0aW9uO1xuICAgICAgICAgICAgICBpZiAod2Vibm5PcHRpb25zPy5kZXZpY2VUeXBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZygnZGV2aWNlVHlwZScsIGFsbG9jcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHdlYm5uT3B0aW9ucy5kZXZpY2VUeXBlLCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09XG4gICAgICAgICAgICAgICAgICAgIDApIHtcbiAgICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ2RldmljZVR5cGUnIC0gJHt3ZWJubk9wdGlvbnMuZGV2aWNlVHlwZX0uYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh3ZWJubk9wdGlvbnM/Lm51bVRocmVhZHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgbnVtVGhyZWFkcyA9IHdlYm5uT3B0aW9ucy5udW1UaHJlYWRzO1xuICAgICAgICAgICAgICAgIC8vIEp1c3QgaWdub3JlIGludmFsaWQgd2Vibm5PcHRpb25zLm51bVRocmVhZHMuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBudW1UaHJlYWRzICE9ICdudW1iZXInIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKG51bVRocmVhZHMpIHx8IG51bVRocmVhZHMgPCAwKSB7XG4gICAgICAgICAgICAgICAgICBudW1UaHJlYWRzID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZygnbnVtVGhyZWFkcycsIGFsbG9jcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKG51bVRocmVhZHMudG9TdHJpbmcoKSwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2V0SW5zdGFuY2UoKS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PVxuICAgICAgICAgICAgICAgICAgICAwKSB7XG4gICAgICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICdudW1UaHJlYWRzJyAtICR7d2Vibm5PcHRpb25zLm51bVRocmVhZHN9LmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAod2Vibm5PcHRpb25zPy5wb3dlclByZWZlcmVuY2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKCdwb3dlclByZWZlcmVuY2UnLCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh3ZWJubk9wdGlvbnMucG93ZXJQcmVmZXJlbmNlLCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09XG4gICAgICAgICAgICAgICAgICAgIDApIHtcbiAgICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgIGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ3Bvd2VyUHJlZmVyZW5jZScgLSAke3dlYm5uT3B0aW9ucy5wb3dlclByZWZlcmVuY2V9LmApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnd2ViZ3B1JzpcbiAgICAgICAgICAgIGVwTmFtZSA9ICdKUyc7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVwICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb25zdCB3ZWJncHVPcHRpb25zID0gZXAgYXMgSW5mZXJlbmNlU2Vzc2lvbi5XZWJHcHVFeGVjdXRpb25Qcm92aWRlck9wdGlvbjtcbiAgICAgICAgICAgICAgaWYgKHdlYmdwdU9wdGlvbnM/LnByZWZlcnJlZExheW91dCkge1xuICAgICAgICAgICAgICAgIGlmICh3ZWJncHVPcHRpb25zLnByZWZlcnJlZExheW91dCAhPT0gJ05DSFcnICYmIHdlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0ICE9PSAnTkhXQycpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgcHJlZmVycmVkTGF5b3V0IG11c3QgYmUgZWl0aGVyICdOQ0hXJyBvciAnTkhXQyc6ICR7d2ViZ3B1T3B0aW9ucy5wcmVmZXJyZWRMYXlvdXR9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGtleURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcoJ3ByZWZlcnJlZExheW91dCcsIGFsbG9jcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKHdlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0LCBhbGxvY3MpO1xuICAgICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09XG4gICAgICAgICAgICAgICAgICAgIDApIHtcbiAgICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgIGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ3ByZWZlcnJlZExheW91dCcgLSAke3dlYmdwdU9wdGlvbnMucHJlZmVycmVkTGF5b3V0fS5gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ3dhc20nOlxuICAgICAgICAgIGNhc2UgJ2NwdSc6XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBub3Qgc3VwcG9ydGVkIGV4ZWN1dGlvbiBwcm92aWRlcjogJHtlcE5hbWV9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlcE5hbWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKGVwTmFtZSwgYWxsb2NzKTtcbiAgICAgICAgaWYgKGdldEluc3RhbmNlKCkuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyKHNlc3Npb25PcHRpb25zSGFuZGxlLCBlcE5hbWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBhcHBlbmQgZXhlY3V0aW9uIHByb3ZpZGVyOiAke2VwTmFtZX0uYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG5leHBvcnQgY29uc3Qgc2V0U2Vzc2lvbk9wdGlvbnMgPSAob3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBbbnVtYmVyLCBudW1iZXJbXV0gPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgbGV0IHNlc3Npb25PcHRpb25zSGFuZGxlID0gMDtcbiAgY29uc3QgYWxsb2NzOiBudW1iZXJbXSA9IFtdO1xuXG4gIGNvbnN0IHNlc3Npb25PcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgYXBwZW5kRGVmYXVsdE9wdGlvbnMoc2Vzc2lvbk9wdGlvbnMpO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCA9IGdldEdyYXBoT3B0aW16YXRpb25MZXZlbChzZXNzaW9uT3B0aW9ucy5ncmFwaE9wdGltaXphdGlvbkxldmVsID8/ICdhbGwnKTtcbiAgICBjb25zdCBleGVjdXRpb25Nb2RlID0gZ2V0RXhlY3V0aW9uTW9kZShzZXNzaW9uT3B0aW9ucy5leGVjdXRpb25Nb2RlID8/ICdzZXF1ZW50aWFsJyk7XG4gICAgY29uc3QgbG9nSWREYXRhT2Zmc2V0ID1cbiAgICAgICAgdHlwZW9mIHNlc3Npb25PcHRpb25zLmxvZ0lkID09PSAnc3RyaW5nJyA/IGFsbG9jV2FzbVN0cmluZyhzZXNzaW9uT3B0aW9ucy5sb2dJZCwgYWxsb2NzKSA6IDA7XG5cbiAgICBjb25zdCBsb2dTZXZlcml0eUxldmVsID0gc2Vzc2lvbk9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCA/PyAyOyAgLy8gRGVmYXVsdCB0byAyIC0gd2FybmluZ1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihsb2dTZXZlcml0eUxldmVsKSB8fCBsb2dTZXZlcml0eUxldmVsIDwgMCB8fCBsb2dTZXZlcml0eUxldmVsID4gNCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBsb2cgc2VydmVyaXR5IGxldmVsIGlzIG5vdCB2YWxpZDogJHtsb2dTZXZlcml0eUxldmVsfWApO1xuICAgIH1cblxuICAgIGNvbnN0IGxvZ1ZlcmJvc2l0eUxldmVsID0gc2Vzc2lvbk9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwgPz8gMDsgIC8vIERlZmF1bHQgdG8gMCAtIHZlcmJvc2VcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobG9nVmVyYm9zaXR5TGV2ZWwpIHx8IGxvZ1ZlcmJvc2l0eUxldmVsIDwgMCB8fCBsb2dWZXJib3NpdHlMZXZlbCA+IDQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgbG9nIHZlcmJvc2l0eSBsZXZlbCBpcyBub3QgdmFsaWQ6ICR7bG9nVmVyYm9zaXR5TGV2ZWx9YCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3B0aW1pemVkTW9kZWxGaWxlUGF0aE9mZnNldCA9IHR5cGVvZiBzZXNzaW9uT3B0aW9ucy5vcHRpbWl6ZWRNb2RlbEZpbGVQYXRoID09PSAnc3RyaW5nJyA/XG4gICAgICAgIGFsbG9jV2FzbVN0cmluZyhzZXNzaW9uT3B0aW9ucy5vcHRpbWl6ZWRNb2RlbEZpbGVQYXRoLCBhbGxvY3MpIDpcbiAgICAgICAgMDtcblxuICAgIHNlc3Npb25PcHRpb25zSGFuZGxlID0gd2FzbS5fT3J0Q3JlYXRlU2Vzc2lvbk9wdGlvbnMoXG4gICAgICAgIGdyYXBoT3B0aW1pemF0aW9uTGV2ZWwsICEhc2Vzc2lvbk9wdGlvbnMuZW5hYmxlQ3B1TWVtQXJlbmEsICEhc2Vzc2lvbk9wdGlvbnMuZW5hYmxlTWVtUGF0dGVybiwgZXhlY3V0aW9uTW9kZSxcbiAgICAgICAgISFzZXNzaW9uT3B0aW9ucy5lbmFibGVQcm9maWxpbmcsIDAsIGxvZ0lkRGF0YU9mZnNldCwgbG9nU2V2ZXJpdHlMZXZlbCwgbG9nVmVyYm9zaXR5TGV2ZWwsXG4gICAgICAgIG9wdGltaXplZE1vZGVsRmlsZVBhdGhPZmZzZXQpO1xuICAgIGlmIChzZXNzaW9uT3B0aW9uc0hhbmRsZSA9PT0gMCkge1xuICAgICAgY2hlY2tMYXN0RXJyb3IoJ0NhblxcJ3QgY3JlYXRlIHNlc3Npb24gb3B0aW9ucy4nKTtcbiAgICB9XG5cbiAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzKSB7XG4gICAgICBzZXRFeGVjdXRpb25Qcm92aWRlcnMoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIHNlc3Npb25PcHRpb25zLmV4ZWN1dGlvblByb3ZpZGVycywgYWxsb2NzKTtcbiAgICB9XG5cbiAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuZnJlZURpbWVuc2lvbk92ZXJyaWRlcykge1xuICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHNlc3Npb25PcHRpb25zLmZyZWVEaW1lbnNpb25PdmVycmlkZXMpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZyZWUgZGltZW5zaW9uIG92ZXJyaWRlIG5hbWUgbXVzdCBiZSBhIHN0cmluZzogJHtuYW1lfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSB8fCB2YWx1ZSA8IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZyZWUgZGltZW5zaW9uIG92ZXJyaWRlIHZhbHVlIG11c3QgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlcjogJHt2YWx1ZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuYW1lT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKG5hbWUsIGFsbG9jcyk7XG4gICAgICAgIGlmICh3YXNtLl9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGUoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIG5hbWVPZmZzZXQsIHZhbHVlKSAhPT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBmcmVlIGRpbWVuc2lvbiBvdmVycmlkZTogJHtuYW1lfSAtICR7dmFsdWV9LmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNlc3Npb25PcHRpb25zLmV4dHJhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGl0ZXJhdGVFeHRyYU9wdGlvbnMoc2Vzc2lvbk9wdGlvbnMuZXh0cmEsICcnLCBuZXcgV2Vha1NldDxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4oKSwgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhrZXksIGFsbG9jcyk7XG4gICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh2YWx1ZSwgYWxsb2NzKTtcblxuICAgICAgICBpZiAod2FzbS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PSAwKSB7XG4gICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IHNldCBhIHNlc3Npb24gY29uZmlnIGVudHJ5OiAke2tleX0gLSAke3ZhbHVlfS5gKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtzZXNzaW9uT3B0aW9uc0hhbmRsZSwgYWxsb2NzXTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChzZXNzaW9uT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgd2FzbS5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zKHNlc3Npb25PcHRpb25zSGFuZGxlKTtcbiAgICB9XG4gICAgYWxsb2NzLmZvckVhY2goYWxsb2MgPT4gd2FzbS5fZnJlZShhbGxvYykpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG4vLyBUaGlzIGZpbGUgaW5jbHVkZXMgY29tbW9uIGRlZmluaXRpb25zLiBUaGV5IGRvIE5PVCBoYXZlIGRlcGVuZGVuY3kgb24gdGhlIFdlYkFzc2VtYmx5IGluc3RhbmNlLlxuXG4vKipcbiAqIENvcGllZCBmcm9tIE9OTlggZGVmaW5pdGlvbi4gVXNlIHRoaXMgdG8gZHJvcCBkZXBlbmRlbmN5ICdvbm54X3Byb3RvJyB0byBkZWNyZWFzZSBjb21waWxlZCAuanMgZmlsZSBzaXplLlxuICovXG5leHBvcnQgY29uc3QgZW51bSBEYXRhVHlwZSB7XG4gIHVuZGVmaW5lZCA9IDAsXG4gIGZsb2F0ID0gMSxcbiAgdWludDggPSAyLFxuICBpbnQ4ID0gMyxcbiAgdWludDE2ID0gNCxcbiAgaW50MTYgPSA1LFxuICBpbnQzMiA9IDYsXG4gIGludDY0ID0gNyxcbiAgc3RyaW5nID0gOCxcbiAgYm9vbCA9IDksXG4gIGZsb2F0MTYgPSAxMCxcbiAgZG91YmxlID0gMTEsXG4gIHVpbnQzMiA9IDEyLFxuICB1aW50NjQgPSAxMyxcbiAgY29tcGxleDY0ID0gMTQsXG4gIGNvbXBsZXgxMjggPSAxNSxcbiAgYmZsb2F0MTYgPSAxNlxufVxuXG4vKipcbiAqIE1hcCBzdHJpbmcgdGVuc29yIGRhdGEgdG8gZW51bSB2YWx1ZVxuICovXG5leHBvcnQgY29uc3QgdGVuc29yRGF0YVR5cGVTdHJpbmdUb0VudW0gPSAodHlwZTogc3RyaW5nKTogRGF0YVR5cGUgPT4ge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdpbnQ4JzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5pbnQ4O1xuICAgIGNhc2UgJ3VpbnQ4JzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS51aW50ODtcbiAgICBjYXNlICdib29sJzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5ib29sO1xuICAgIGNhc2UgJ2ludDE2JzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5pbnQxNjtcbiAgICBjYXNlICd1aW50MTYnOlxuICAgICAgcmV0dXJuIERhdGFUeXBlLnVpbnQxNjtcbiAgICBjYXNlICdpbnQzMic6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuaW50MzI7XG4gICAgY2FzZSAndWludDMyJzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS51aW50MzI7XG4gICAgY2FzZSAnZmxvYXQxNic6XG4gICAgICByZXR1cm4gRGF0YVR5cGUuZmxvYXQxNjtcbiAgICBjYXNlICdmbG9hdDMyJzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5mbG9hdDtcbiAgICBjYXNlICdmbG9hdDY0JzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5kb3VibGU7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiBEYXRhVHlwZS5zdHJpbmc7XG4gICAgY2FzZSAnaW50NjQnOlxuICAgICAgcmV0dXJuIERhdGFUeXBlLmludDY0O1xuICAgIGNhc2UgJ3VpbnQ2NCc6XG4gICAgICByZXR1cm4gRGF0YVR5cGUudWludDY0O1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgZGF0YSB0eXBlOiAke3R5cGV9YCk7XG4gIH1cbn07XG5cbi8qKlxuICogTWFwIGVudW0gdmFsdWUgdG8gc3RyaW5nIHRlbnNvciBkYXRhXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JEYXRhVHlwZUVudW1Ub1N0cmluZyA9ICh0eXBlUHJvdG86IERhdGFUeXBlKTogVGVuc29yLlR5cGUgPT4ge1xuICBzd2l0Y2ggKHR5cGVQcm90bykge1xuICAgIGNhc2UgRGF0YVR5cGUuaW50ODpcbiAgICAgIHJldHVybiAnaW50OCc7XG4gICAgY2FzZSBEYXRhVHlwZS51aW50ODpcbiAgICAgIHJldHVybiAndWludDgnO1xuICAgIGNhc2UgRGF0YVR5cGUuYm9vbDpcbiAgICAgIHJldHVybiAnYm9vbCc7XG4gICAgY2FzZSBEYXRhVHlwZS5pbnQxNjpcbiAgICAgIHJldHVybiAnaW50MTYnO1xuICAgIGNhc2UgRGF0YVR5cGUudWludDE2OlxuICAgICAgcmV0dXJuICd1aW50MTYnO1xuICAgIGNhc2UgRGF0YVR5cGUuaW50MzI6XG4gICAgICByZXR1cm4gJ2ludDMyJztcbiAgICBjYXNlIERhdGFUeXBlLnVpbnQzMjpcbiAgICAgIHJldHVybiAndWludDMyJztcbiAgICBjYXNlIERhdGFUeXBlLmZsb2F0MTY6XG4gICAgICByZXR1cm4gJ2Zsb2F0MTYnO1xuICAgIGNhc2UgRGF0YVR5cGUuZmxvYXQ6XG4gICAgICByZXR1cm4gJ2Zsb2F0MzInO1xuICAgIGNhc2UgRGF0YVR5cGUuZG91YmxlOlxuICAgICAgcmV0dXJuICdmbG9hdDY0JztcbiAgICBjYXNlIERhdGFUeXBlLnN0cmluZzpcbiAgICAgIHJldHVybiAnc3RyaW5nJztcbiAgICBjYXNlIERhdGFUeXBlLmludDY0OlxuICAgICAgcmV0dXJuICdpbnQ2NCc7XG4gICAgY2FzZSBEYXRhVHlwZS51aW50NjQ6XG4gICAgICByZXR1cm4gJ3VpbnQ2NCc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBkYXRhIHR5cGU6ICR7dHlwZVByb3RvfWApO1xuICB9XG59O1xuXG4vKipcbiAqIGdldCB0ZW5zb3IgZWxlbWVudCBzaXplIGluIGJ5dGVzIGJ5IHRoZSBnaXZlbiBkYXRhIHR5cGVcbiAqIEByZXR1cm5zIHNpemUgaW4gaW50ZWdlciBvciB1bmRlZmluZWQgaWYgdGhlIGRhdGEgdHlwZSBpcyBub3Qgc3VwcG9ydGVkXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRUZW5zb3JFbGVtZW50U2l6ZSA9IChkYXRlVHlwZTogbnVtYmVyKTogbnVtYmVyfFxuICAgIHVuZGVmaW5lZCA9PiBbdW5kZWZpbmVkLCA0LCAxLCAxLCAyLCAyLCA0LCA4LCB1bmRlZmluZWQsIDEsIDIsIDgsIDQsIDgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWRdW2RhdGVUeXBlXTtcblxuLyoqXG4gKiBnZXQgdHlwZWQgYXJyYXkgY29uc3RydWN0b3IgYnkgdGhlIGdpdmVuIHRlbnNvciB0eXBlXG4gKi9cbmV4cG9ydCBjb25zdCB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3IgPSAodHlwZTogVGVuc29yLlR5cGUpOiBGbG9hdDMyQXJyYXlDb25zdHJ1Y3RvcnxVaW50OEFycmF5Q29uc3RydWN0b3J8XG4gICAgSW50OEFycmF5Q29uc3RydWN0b3J8VWludDE2QXJyYXlDb25zdHJ1Y3RvcnxJbnQxNkFycmF5Q29uc3RydWN0b3J8SW50MzJBcnJheUNvbnN0cnVjdG9yfEJpZ0ludDY0QXJyYXlDb25zdHJ1Y3RvcnxcbiAgICBVaW50OEFycmF5Q29uc3RydWN0b3J8RmxvYXQ2NEFycmF5Q29uc3RydWN0b3J8VWludDMyQXJyYXlDb25zdHJ1Y3RvcnxCaWdVaW50NjRBcnJheUNvbnN0cnVjdG9yID0+IHtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdmbG9hdDE2JzpcbiAgICAgICAgICByZXR1cm4gVWludDE2QXJyYXk7XG4gICAgICAgIGNhc2UgJ2Zsb2F0MzInOlxuICAgICAgICAgIHJldHVybiBGbG9hdDMyQXJyYXk7XG4gICAgICAgIGNhc2UgJ3VpbnQ4JzpcbiAgICAgICAgICByZXR1cm4gVWludDhBcnJheTtcbiAgICAgICAgY2FzZSAnaW50OCc6XG4gICAgICAgICAgcmV0dXJuIEludDhBcnJheTtcbiAgICAgICAgY2FzZSAndWludDE2JzpcbiAgICAgICAgICByZXR1cm4gVWludDE2QXJyYXk7XG4gICAgICAgIGNhc2UgJ2ludDE2JzpcbiAgICAgICAgICByZXR1cm4gSW50MTZBcnJheTtcbiAgICAgICAgY2FzZSAnaW50MzInOlxuICAgICAgICAgIHJldHVybiBJbnQzMkFycmF5O1xuICAgICAgICBjYXNlICdib29sJzpcbiAgICAgICAgICByZXR1cm4gVWludDhBcnJheTtcbiAgICAgICAgY2FzZSAnZmxvYXQ2NCc6XG4gICAgICAgICAgcmV0dXJuIEZsb2F0NjRBcnJheTtcbiAgICAgICAgY2FzZSAndWludDMyJzpcbiAgICAgICAgICByZXR1cm4gVWludDMyQXJyYXk7XG4gICAgICAgIGNhc2UgJ2ludDY0JzpcbiAgICAgICAgICByZXR1cm4gQmlnSW50NjRBcnJheTtcbiAgICAgICAgY2FzZSAndWludDY0JzpcbiAgICAgICAgICByZXR1cm4gQmlnVWludDY0QXJyYXk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCB0eXBlOiAke3R5cGV9YCk7XG4gICAgICB9XG4gICAgfTtcblxuLyoqXG4gKiBNYXAgc3RyaW5nIGxvZyBsZXZlbCB0byBpbnRlZ2VyIHZhbHVlXG4gKi9cbmV4cG9ydCBjb25zdCBsb2dMZXZlbFN0cmluZ1RvRW51bSA9IChsb2dMZXZlbD86ICd2ZXJib3NlJ3wnaW5mbyd8J3dhcm5pbmcnfCdlcnJvcid8J2ZhdGFsJyk6IG51bWJlciA9PiB7XG4gIHN3aXRjaCAobG9nTGV2ZWwpIHtcbiAgICBjYXNlICd2ZXJib3NlJzpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgJ2luZm8nOlxuICAgICAgcmV0dXJuIDE7XG4gICAgY2FzZSAnd2FybmluZyc6XG4gICAgICByZXR1cm4gMjtcbiAgICBjYXNlICdlcnJvcic6XG4gICAgICByZXR1cm4gMztcbiAgICBjYXNlICdmYXRhbCc6XG4gICAgICByZXR1cm4gNDtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBsb2dnaW5nIGxldmVsOiAke2xvZ0xldmVsfWApO1xuICB9XG59O1xuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIHRlbnNvciB0eXBlIGlzIHN1cHBvcnRlZCBieSBHUFUgYnVmZmVyXG4gKi9cbmV4cG9ydCBjb25zdCBpc0dwdUJ1ZmZlclN1cHBvcnRlZFR5cGUgPSAodHlwZTogVGVuc29yLlR5cGUpOiB0eXBlIGlzIFRlbnNvci5HcHVCdWZmZXJEYXRhVHlwZXMgPT4gdHlwZSA9PT0gJ2Zsb2F0MzInIHx8XG4gICAgdHlwZSA9PT0gJ2ludDMyJyB8fCB0eXBlID09PSAnaW50NjQnIHx8IHR5cGUgPT09ICdib29sJyB8fCB0eXBlID09PSAnZmxvYXQxNicgfHwgdHlwZSA9PT0gJ3VpbnQzMic7XG5cbi8qKlxuICogTWFwIHN0cmluZyBkYXRhIGxvY2F0aW9uIHRvIGludGVnZXIgdmFsdWVcbiAqL1xuZXhwb3J0IGNvbnN0IGRhdGFMb2NhdGlvblN0cmluZ1RvRW51bSA9IChsb2NhdGlvbjogVGVuc29yLkRhdGFMb2NhdGlvbik6IG51bWJlciA9PiB7XG4gIHN3aXRjaCAobG9jYXRpb24pIHtcbiAgICBjYXNlICdub25lJzpcbiAgICAgIHJldHVybiAwO1xuICAgIGNhc2UgJ2NwdSc6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlICdjcHUtcGlubmVkJzpcbiAgICAgIHJldHVybiAyO1xuICAgIGNhc2UgJ3RleHR1cmUnOlxuICAgICAgcmV0dXJuIDM7XG4gICAgY2FzZSAnZ3B1LWJ1ZmZlcic6XG4gICAgICByZXR1cm4gNDtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBkYXRhIGxvY2F0aW9uOiAke2xvY2F0aW9ufWApO1xuICB9XG59O1xuXG4vKipcbiAqIE1hcCBpbnRlZ2VyIGRhdGEgbG9jYXRpb24gdG8gc3RyaW5nIHZhbHVlXG4gKi9cbmV4cG9ydCBjb25zdCBkYXRhTG9jYXRpb25FbnVtVG9TdHJpbmcgPSAobG9jYXRpb246IG51bWJlcik6IFRlbnNvci5EYXRhTG9jYXRpb258dW5kZWZpbmVkID0+XG4gICAgKFsnbm9uZScsICdjcHUnLCAnY3B1LXBpbm5lZCcsICd0ZXh0dXJlJywgJ2dwdS1idWZmZXInXSBhcyBjb25zdClbbG9jYXRpb25dO1xuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0VudiwgSW5mZXJlbmNlU2Vzc2lvbiwgVGVuc29yfSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG5pbXBvcnQge1NlcmlhbGl6YWJsZU1vZGVsZGF0YSwgU2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhLCBTZXJpYWxpemFibGVUZW5zb3JNZXRhZGF0YSwgVGVuc29yTWV0YWRhdGF9IGZyb20gJy4vcHJveHktbWVzc2FnZXMnO1xuaW1wb3J0IHtzZXRSdW5PcHRpb25zfSBmcm9tICcuL3J1bi1vcHRpb25zJztcbmltcG9ydCB7c2V0U2Vzc2lvbk9wdGlvbnN9IGZyb20gJy4vc2Vzc2lvbi1vcHRpb25zJztcbmltcG9ydCB7ZGF0YUxvY2F0aW9uU3RyaW5nVG9FbnVtLCBnZXRUZW5zb3JFbGVtZW50U2l6ZSwgaXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlLCBsb2dMZXZlbFN0cmluZ1RvRW51bSwgdGVuc29yRGF0YVR5cGVFbnVtVG9TdHJpbmcsIHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtLCB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3J9IGZyb20gJy4vd2FzbS1jb21tb24nO1xuaW1wb3J0IHtnZXRJbnN0YW5jZX0gZnJvbSAnLi93YXNtLWZhY3RvcnknO1xuaW1wb3J0IHthbGxvY1dhc21TdHJpbmcsIGNoZWNrTGFzdEVycm9yfSBmcm9tICcuL3dhc20tdXRpbHMnO1xuXG5sZXQgb3J0RW52SW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuLyoqXG4gKiBnZXQgdGhlIGlucHV0L291dHB1dCBjb3VudCBvZiB0aGUgc2Vzc2lvbi5cbiAqIEBwYXJhbSBzZXNzaW9uSGFuZGxlIHRoZSBoYW5kbGUgcmVwcmVzZW50aW5nIHRoZSBzZXNzaW9uLiBzaG91bGQgYmUgbm9uLXplcm8uXG4gKiBAcmV0dXJucyBhIHR1cGxlIGluY2x1ZGluZyAyIG51bWJlcnMsIHJlcHJlc2VudGluZyB0aGUgaW5wdXQgY291bnQgYW5kIG91dHB1dCBjb3VudC5cbiAqL1xuY29uc3QgZ2V0U2Vzc2lvbklucHV0T3V0cHV0Q291bnQgPSAoc2Vzc2lvbkhhbmRsZTogbnVtYmVyKTogW251bWJlciwgbnVtYmVyXSA9PiB7XG4gIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuICBjb25zdCBzdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG4gIHRyeSB7XG4gICAgY29uc3QgZGF0YU9mZnNldCA9IHdhc20uc3RhY2tBbGxvYyg4KTtcbiAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtLl9PcnRHZXRJbnB1dE91dHB1dENvdW50KHNlc3Npb25IYW5kbGUsIGRhdGFPZmZzZXQsIGRhdGFPZmZzZXQgKyA0KTtcbiAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBnZXQgc2Vzc2lvbiBpbnB1dC9vdXRwdXQgY291bnQuJyk7XG4gICAgfVxuICAgIHJldHVybiBbd2FzbS5IRUFQMzJbZGF0YU9mZnNldCAvIDRdLCB3YXNtLkhFQVAzMltkYXRhT2Zmc2V0IC8gNCArIDFdXTtcbiAgfSBmaW5hbGx5IHtcbiAgICB3YXNtLnN0YWNrUmVzdG9yZShzdGFjayk7XG4gIH1cbn07XG5cbi8qKlxuICogaW5pdGlhbGl6ZSBPUlQgZW52aXJvbm1lbnQuXG4gKiBAcGFyYW0gbnVtVGhyZWFkcyBTZXRHbG9iYWxJbnRyYU9wTnVtVGhyZWFkcyhudW1UaHJlYWRzKVxuICogQHBhcmFtIGxvZ2dpbmdMZXZlbCBDcmVhdGVFbnYoc3RhdGljX2Nhc3Q8T3J0TG9nZ2luZ0xldmVsPihsb2dnaW5nX2xldmVsKSlcbiAqL1xuY29uc3QgaW5pdE9ydCA9IChudW1UaHJlYWRzOiBudW1iZXIsIGxvZ2dpbmdMZXZlbDogbnVtYmVyKTogdm9pZCA9PiB7XG4gIGNvbnN0IGVycm9yQ29kZSA9IGdldEluc3RhbmNlKCkuX09ydEluaXQobnVtVGhyZWFkcywgbG9nZ2luZ0xldmVsKTtcbiAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgIGNoZWNrTGFzdEVycm9yKCdDYW5cXCd0IGluaXRpYWxpemUgb25ueHJ1bnRpbWUuJyk7XG4gIH1cbn07XG5cbi8qKlxuICogaW50aWFsaXplIHJ1bnRpbWUgZW52aXJvbm1lbnQuXG4gKiBAcGFyYW0gZW52IHBhc3NlZCBpbiB0aGUgZW52aXJvbm1lbnQgY29uZmlnIG9iamVjdC5cbiAqL1xuZXhwb3J0IGNvbnN0IGluaXRSdW50aW1lID0gYXN5bmMoZW52OiBFbnYpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgLy8gaW5pdCBPUlRcbiAgaW5pdE9ydChlbnYud2FzbS5udW1UaHJlYWRzISwgbG9nTGV2ZWxTdHJpbmdUb0VudW0oZW52LmxvZ0xldmVsKSk7XG5cbiAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR1BVKSB7XG4gICAgLy8gaW5pdCBKU0VQIGlmIGF2YWlsYWJsZVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZXF1aXJlLWltcG9ydHMsIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbiAgICBjb25zdCBpbml0SnNlcCA9IHJlcXVpcmUoJy4vanNlcC9pbml0JykuaW5pdDtcbiAgICBhd2FpdCBpbml0SnNlcChnZXRJbnN0YW5jZSgpLCBlbnYpO1xuICB9XG5cbiAgb3J0RW52SW5pdGlhbGl6ZWQgPSB0cnVlO1xufTtcblxuLyoqXG4gKiB2YWxpZCBkYXRhIGxvY2F0aW9ucyBmb3IgaW5wdXQvb3V0cHV0IHRlbnNvcnMuXG4gKi9cbnR5cGUgU3VwcG9ydGVkVGVuc29yRGF0YUxvY2F0aW9uRm9ySW5wdXRPdXRwdXQgPSAnY3B1J3wnY3B1LXBpbm5lZCd8J2dwdS1idWZmZXInO1xuXG50eXBlIElPQmluZGluZ1N0YXRlID0ge1xuICAvKipcbiAgICogdGhlIGhhbmRsZSBvZiBJTyBiaW5kaW5nLlxuICAgKi9cbiAgcmVhZG9ubHkgaGFuZGxlOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIHRoZSBwcmVmZXJyZWQgbG9jYXRpb24gZm9yIGVhY2ggb3V0cHV0IHRlbnNvci5cbiAgICpcbiAgICogdmFsdWUgaXMgb25lIG9mICdjcHUnLCAnY3B1LXBpbm5lZCcsICdncHUtYnVmZmVyJy5cbiAgICovXG4gIHJlYWRvbmx5IG91dHB1dFByZWZlcnJlZExvY2F0aW9uczogcmVhZG9ubHkgU3VwcG9ydGVkVGVuc29yRGF0YUxvY2F0aW9uRm9ySW5wdXRPdXRwdXRbXTtcblxuICAvKipcbiAgICogZW51bSB2YWx1ZSBvZiB0aGUgcHJlZmVycmVkIGxvY2F0aW9uIGZvciBlYWNoIG91dHB1dCB0ZW5zb3IuXG4gICAqL1xuICByZWFkb25seSBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnNFbmNvZGVkOiByZWFkb25seSBudW1iZXJbXTtcbn07XG5cbi8qKlxuICogIHR1cGxlIGVsZW1lbnRzIGFyZTogSW5mZXJlbmNlU2Vzc2lvbiBJRDsgaW5wdXROYW1lc1VURjhFbmNvZGVkOyBvdXRwdXROYW1lc1VURjhFbmNvZGVkOyBiaW5kaW5nU3RhdGVcbiAqL1xudHlwZSBTZXNzaW9uTWV0YWRhdGEgPSBbXG4gIGluZmVyZW5jZVNlc3Npb25JZDogbnVtYmVyLCBpbnB1dE5hbWVzVVRGOEVuY29kZWQ6IG51bWJlcltdLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkOiBudW1iZXJbXSxcbiAgYmluZGluZ1N0YXRlOiBJT0JpbmRpbmdTdGF0ZXxudWxsXG5dO1xuXG5jb25zdCBhY3RpdmVTZXNzaW9ucyA9IG5ldyBNYXA8bnVtYmVyLCBTZXNzaW9uTWV0YWRhdGE+KCk7XG5cbmV4cG9ydCBjb25zdCBpc09ydEVudkluaXRpYWxpemVkID0gKCk6IGJvb2xlYW4gPT4gb3J0RW52SW5pdGlhbGl6ZWQ7XG5cbi8qKlxuICogYWxsb2NhdGUgdGhlIG1lbW9yeSBhbmQgbWVtY3B5IHRoZSBtb2RlbCBieXRlcywgcHJlcGFyaW5nIGZvciBjcmVhdGluZyBhbiBpbnN0YW5jZSBvZiBJbmZlcmVuY2VTZXNzaW9uLlxuICogQHJldHVybnMgYSAyLWVsZW1lbnRzIHR1cGxlIC0gdGhlIHBvaW50ZXIgYW5kIHNpemUgb2YgdGhlIGFsbG9jYXRlZCBidWZmZXJcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVNlc3Npb25BbGxvY2F0ZSA9IChtb2RlbDogVWludDhBcnJheSk6IFtudW1iZXIsIG51bWJlcl0gPT4ge1xuICBjb25zdCB3YXNtID0gZ2V0SW5zdGFuY2UoKTtcbiAgY29uc3QgbW9kZWxEYXRhT2Zmc2V0ID0gd2FzbS5fbWFsbG9jKG1vZGVsLmJ5dGVMZW5ndGgpO1xuICBpZiAobW9kZWxEYXRhT2Zmc2V0ID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBjcmVhdGUgYSBzZXNzaW9uLiBmYWlsZWQgdG8gYWxsb2NhdGUgYSBidWZmZXIgb2Ygc2l6ZSAke21vZGVsLmJ5dGVMZW5ndGh9LmApO1xuICB9XG4gIHdhc20uSEVBUFU4LnNldChtb2RlbCwgbW9kZWxEYXRhT2Zmc2V0KTtcbiAgcmV0dXJuIFttb2RlbERhdGFPZmZzZXQsIG1vZGVsLmJ5dGVMZW5ndGhdO1xufTtcblxuLyoqXG4gKiBjcmVhdGUgYW4gaW5mZXJlbmNlIHNlc3Npb24gdXNpbmcgdGhlIHByZXBhcmVkIGJ1ZmZlciBjb250YWluaW5nIHRoZSBtb2RlbCBkYXRhLlxuICogQHBhcmFtIG1vZGVsRGF0YSBhIDItZWxlbWVudHMgdHVwbGUgY29udGFpbmluZyB0aGUgcG9pbnRlciBhbmQgc2l6ZSBvZiB0aGUgbW9kZWwgZGF0YSBidWZmZXIuXG4gKiBAcGFyYW0gb3B0aW9ucyBhbiBvcHRpb25hbCBzZXNzaW9uIG9wdGlvbnMgb2JqZWN0LlxuICogQHJldHVybnMgYSAzLWVsZW1lbnRzIHR1cGxlIGNvbnRhaW5pbmcgW3Nlc3Npb24gaGFuZGxlLCBpbnB1dCBuYW1lcywgb3V0cHV0IG5hbWVzXVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlU2Vzc2lvbkZpbmFsaXplID1cbiAgICAobW9kZWxEYXRhOiBTZXJpYWxpemFibGVNb2RlbGRhdGEsIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTogU2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhID0+IHtcbiAgICAgIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gICAgICBsZXQgc2Vzc2lvbkhhbmRsZSA9IDA7XG4gICAgICBsZXQgc2Vzc2lvbk9wdGlvbnNIYW5kbGUgPSAwO1xuICAgICAgbGV0IGlvQmluZGluZ0hhbmRsZSA9IDA7XG4gICAgICBsZXQgYWxsb2NzOiBudW1iZXJbXSA9IFtdO1xuICAgICAgY29uc3QgaW5wdXROYW1lc1VURjhFbmNvZGVkID0gW107XG4gICAgICBjb25zdCBvdXRwdXROYW1lc1VURjhFbmNvZGVkID0gW107XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIFtzZXNzaW9uT3B0aW9uc0hhbmRsZSwgYWxsb2NzXSA9IHNldFNlc3Npb25PcHRpb25zKG9wdGlvbnMpO1xuXG4gICAgICAgIHNlc3Npb25IYW5kbGUgPSB3YXNtLl9PcnRDcmVhdGVTZXNzaW9uKG1vZGVsRGF0YVswXSwgbW9kZWxEYXRhWzFdLCBzZXNzaW9uT3B0aW9uc0hhbmRsZSk7XG4gICAgICAgIGlmIChzZXNzaW9uSGFuZGxlID09PSAwKSB7XG4gICAgICAgICAgY2hlY2tMYXN0RXJyb3IoJ0NhblxcJ3QgY3JlYXRlIGEgc2Vzc2lvbi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IFtpbnB1dENvdW50LCBvdXRwdXRDb3VudF0gPSBnZXRTZXNzaW9uSW5wdXRPdXRwdXRDb3VudChzZXNzaW9uSGFuZGxlKTtcblxuICAgICAgICBjb25zdCBpbnB1dE5hbWVzID0gW107XG4gICAgICAgIGNvbnN0IG91dHB1dE5hbWVzID0gW107XG4gICAgICAgIGNvbnN0IG91dHB1dFByZWZlcnJlZExvY2F0aW9uczogU3VwcG9ydGVkVGVuc29yRGF0YUxvY2F0aW9uRm9ySW5wdXRPdXRwdXRbXSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Q291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IG5hbWUgPSB3YXNtLl9PcnRHZXRJbnB1dE5hbWUoc2Vzc2lvbkhhbmRsZSwgaSk7XG4gICAgICAgICAgaWYgKG5hbWUgPT09IDApIHtcbiAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKCdDYW5cXCd0IGdldCBhbiBpbnB1dCBuYW1lLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbnB1dE5hbWVzVVRGOEVuY29kZWQucHVzaChuYW1lKTtcbiAgICAgICAgICBpbnB1dE5hbWVzLnB1c2god2FzbS5VVEY4VG9TdHJpbmcobmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgICAgIGNvbnN0IG5hbWUgPSB3YXNtLl9PcnRHZXRPdXRwdXROYW1lKHNlc3Npb25IYW5kbGUsIGkpO1xuICAgICAgICAgIGlmIChuYW1lID09PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBnZXQgYW4gb3V0cHV0IG5hbWUuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dHB1dE5hbWVzVVRGOEVuY29kZWQucHVzaChuYW1lKTtcbiAgICAgICAgICBjb25zdCBuYW1lU3RyaW5nID0gd2FzbS5VVEY4VG9TdHJpbmcobmFtZSk7XG4gICAgICAgICAgb3V0cHV0TmFtZXMucHVzaChuYW1lU3RyaW5nKTtcblxuICAgICAgICAgIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dFQkdQVSkge1xuICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0eXBlb2Ygb3B0aW9ucz8ucHJlZmVycmVkT3V0cHV0TG9jYXRpb24gPT09ICdzdHJpbmcnID9cbiAgICAgICAgICAgICAgICBvcHRpb25zLnByZWZlcnJlZE91dHB1dExvY2F0aW9uIDpcbiAgICAgICAgICAgICAgICBvcHRpb25zPy5wcmVmZXJyZWRPdXRwdXRMb2NhdGlvbj8uW25hbWVTdHJpbmddID8/ICdjcHUnO1xuICAgICAgICAgICAgaWYgKGxvY2F0aW9uICE9PSAnY3B1JyAmJiBsb2NhdGlvbiAhPT0gJ2NwdS1waW5uZWQnICYmIGxvY2F0aW9uICE9PSAnZ3B1LWJ1ZmZlcicpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3Qgc3VwcG9ydGVkIHByZWZlcnJlZCBvdXRwdXQgbG9jYXRpb246ICR7bG9jYXRpb259LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zLnB1c2gobG9jYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVzZSBJTyBiaW5kaW5nIG9ubHkgd2hlbiBhdCBsZWFzdCBvbmUgb3V0cHV0IGlzIHByZWZmZXJlZCB0byBiZSBvbiBHUFUuXG4gICAgICAgIGxldCBiaW5kaW5nU3RhdGU6IElPQmluZGluZ1N0YXRlfG51bGwgPSBudWxsO1xuICAgICAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUgJiYgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zLnNvbWUobCA9PiBsID09PSAnZ3B1LWJ1ZmZlcicpKSB7XG4gICAgICAgICAgaW9CaW5kaW5nSGFuZGxlID0gd2FzbS5fT3J0Q3JlYXRlQmluZGluZyhzZXNzaW9uSGFuZGxlKTtcbiAgICAgICAgICBpZiAoaW9CaW5kaW5nSGFuZGxlID09PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBjcmVhdGUgSU8gYmluZGluZy4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBiaW5kaW5nU3RhdGUgPSB7XG4gICAgICAgICAgICBoYW5kbGU6IGlvQmluZGluZ0hhbmRsZSxcbiAgICAgICAgICAgIG91dHB1dFByZWZlcnJlZExvY2F0aW9ucyxcbiAgICAgICAgICAgIG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWQ6IG91dHB1dFByZWZlcnJlZExvY2F0aW9ucy5tYXAobCA9PiBkYXRhTG9jYXRpb25TdHJpbmdUb0VudW0obCkpLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBhY3RpdmVTZXNzaW9ucy5zZXQoc2Vzc2lvbkhhbmRsZSwgW3Nlc3Npb25IYW5kbGUsIGlucHV0TmFtZXNVVEY4RW5jb2RlZCwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZCwgYmluZGluZ1N0YXRlXSk7XG4gICAgICAgIHJldHVybiBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lcywgb3V0cHV0TmFtZXNdO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpbnB1dE5hbWVzVVRGOEVuY29kZWQuZm9yRWFjaChidWYgPT4gd2FzbS5fT3J0RnJlZShidWYpKTtcbiAgICAgICAgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZC5mb3JFYWNoKGJ1ZiA9PiB3YXNtLl9PcnRGcmVlKGJ1ZikpO1xuXG4gICAgICAgIGlmIChpb0JpbmRpbmdIYW5kbGUgIT09IDApIHtcbiAgICAgICAgICB3YXNtLl9PcnRSZWxlYXNlQmluZGluZyhpb0JpbmRpbmdIYW5kbGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlc3Npb25IYW5kbGUgIT09IDApIHtcbiAgICAgICAgICB3YXNtLl9PcnRSZWxlYXNlU2Vzc2lvbihzZXNzaW9uSGFuZGxlKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgd2FzbS5fZnJlZShtb2RlbERhdGFbMF0pO1xuICAgICAgICBpZiAoc2Vzc2lvbk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgICAgICB3YXNtLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnMoc2Vzc2lvbk9wdGlvbnNIYW5kbGUpO1xuICAgICAgICB9XG4gICAgICAgIGFsbG9jcy5mb3JFYWNoKGFsbG9jID0+IHdhc20uX2ZyZWUoYWxsb2MpKTtcbiAgICAgIH1cbiAgICB9O1xuXG5cbi8qKlxuICogY3JlYXRlIGFuIGluc3RhbmNlIG9mIEluZmVyZW5jZVNlc3Npb24uXG4gKiBAcmV0dXJucyB0aGUgbWV0YWRhdGEgb2YgSW5mZXJlbmNlU2Vzc2lvbi4gMC12YWx1ZSBoYW5kbGUgZm9yIGZhaWx1cmUuXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVTZXNzaW9uID1cbiAgICAobW9kZWw6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTogU2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhID0+IHtcbiAgICAgIGNvbnN0IG1vZGVsRGF0YTogU2VyaWFsaXphYmxlTW9kZWxkYXRhID0gY3JlYXRlU2Vzc2lvbkFsbG9jYXRlKG1vZGVsKTtcbiAgICAgIHJldHVybiBjcmVhdGVTZXNzaW9uRmluYWxpemUobW9kZWxEYXRhLCBvcHRpb25zKTtcbiAgICB9O1xuXG5leHBvcnQgY29uc3QgcmVsZWFzZVNlc3Npb24gPSAoc2Vzc2lvbklkOiBudW1iZXIpOiB2b2lkID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gIGNvbnN0IHNlc3Npb24gPSBhY3RpdmVTZXNzaW9ucy5nZXQoc2Vzc2lvbklkKTtcbiAgaWYgKCFzZXNzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgcmVsZWFzZSBzZXNzaW9uLiBpbnZhbGlkIHNlc3Npb24gaWQ6ICR7c2Vzc2lvbklkfWApO1xuICB9XG4gIGNvbnN0IFtzZXNzaW9uSGFuZGxlLCBpbnB1dE5hbWVzVVRGOEVuY29kZWQsIG91dHB1dE5hbWVzVVRGOEVuY29kZWQsIGlvQmluZGluZ1N0YXRlXSA9IHNlc3Npb247XG5cbiAgaWYgKGlvQmluZGluZ1N0YXRlKSB7XG4gICAgd2FzbS5fT3J0UmVsZWFzZUJpbmRpbmcoaW9CaW5kaW5nU3RhdGUuaGFuZGxlKTtcbiAgfVxuXG4gIHdhc20uanNlcFVucmVnaXN0ZXJCdWZmZXJzPy4oc2Vzc2lvbklkKTtcblxuICBpbnB1dE5hbWVzVVRGOEVuY29kZWQuZm9yRWFjaChidWYgPT4gd2FzbS5fT3J0RnJlZShidWYpKTtcbiAgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZC5mb3JFYWNoKGJ1ZiA9PiB3YXNtLl9PcnRGcmVlKGJ1ZikpO1xuICB3YXNtLl9PcnRSZWxlYXNlU2Vzc2lvbihzZXNzaW9uSGFuZGxlKTtcbiAgYWN0aXZlU2Vzc2lvbnMuZGVsZXRlKHNlc3Npb25JZCk7XG59O1xuXG5leHBvcnQgY29uc3QgcHJlcGFyZUlucHV0T3V0cHV0VGVuc29yID1cbiAgICAodGVuc29yOiBUZW5zb3JNZXRhZGF0YXxudWxsLCB0ZW5zb3JIYW5kbGVzOiBudW1iZXJbXSwgYWxsb2NzOiBudW1iZXJbXSwgc2Vzc2lvbklkOiBudW1iZXIsIGluZGV4OiBudW1iZXIpOlxuICAgICAgICB2b2lkID0+IHtcbiAgICAgICAgICBpZiAoIXRlbnNvcikge1xuICAgICAgICAgICAgdGVuc29ySGFuZGxlcy5wdXNoKDApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHdhc20gPSBnZXRJbnN0YW5jZSgpO1xuXG4gICAgICAgICAgY29uc3QgZGF0YVR5cGUgPSB0ZW5zb3JbMF07XG4gICAgICAgICAgY29uc3QgZGltcyA9IHRlbnNvclsxXTtcbiAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHRlbnNvclszXTtcblxuICAgICAgICAgIGxldCByYXdEYXRhOiBudW1iZXI7XG4gICAgICAgICAgbGV0IGRhdGFCeXRlTGVuZ3RoOiBudW1iZXI7XG5cbiAgICAgICAgICBpZiAoZGF0YVR5cGUgPT09ICdzdHJpbmcnICYmIGxvY2F0aW9uID09PSAnZ3B1LWJ1ZmZlcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3RyaW5nIHRlbnNvciBpcyBub3Qgc3VwcG9ydGVkIG9uIEdQVS4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobG9jYXRpb24gPT09ICdncHUtYnVmZmVyJykge1xuICAgICAgICAgICAgY29uc3QgZ3B1QnVmZmVyID0gdGVuc29yWzJdLmdwdUJ1ZmZlciBhcyBHUFVCdWZmZXI7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50U2l6ZUluQnl0ZXMgPSBnZXRUZW5zb3JFbGVtZW50U2l6ZSh0ZW5zb3JEYXRhVHlwZVN0cmluZ1RvRW51bShkYXRhVHlwZSkpITtcbiAgICAgICAgICAgIGRhdGFCeXRlTGVuZ3RoID0gZGltcy5yZWR1Y2UoKGEsIGIpID0+IGEgKiBiLCAxKSAqIGVsZW1lbnRTaXplSW5CeXRlcztcbiAgICAgICAgICAgIHJhd0RhdGEgPSB3YXNtLmpzZXBSZWdpc3RlckJ1ZmZlcihzZXNzaW9uSWQsIGluZGV4LCBncHVCdWZmZXIsIGRhdGFCeXRlTGVuZ3RoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHRlbnNvclsyXTtcblxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgICAgICAgLy8gc3RyaW5nIHRlbnNvclxuICAgICAgICAgICAgICBkYXRhQnl0ZUxlbmd0aCA9IDQgKiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgICAgcmF3RGF0YSA9IHdhc20uX21hbGxvYyhkYXRhQnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgIGFsbG9jcy5wdXNoKHJhd0RhdGEpO1xuICAgICAgICAgICAgICBsZXQgZGF0YUluZGV4ID0gcmF3RGF0YSAvIDQ7XG4gICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYHRlbnNvciBkYXRhIGF0IGluZGV4ICR7aX0gaXMgbm90IGEgc3RyaW5nYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdhc20uSEVBUFUzMltkYXRhSW5kZXgrK10gPSBhbGxvY1dhc21TdHJpbmcoZGF0YVtpXSwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGF0YUJ5dGVMZW5ndGggPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgIHJhd0RhdGEgPSB3YXNtLl9tYWxsb2MoZGF0YUJ5dGVMZW5ndGgpO1xuICAgICAgICAgICAgICBhbGxvY3MucHVzaChyYXdEYXRhKTtcbiAgICAgICAgICAgICAgd2FzbS5IRUFQVTguc2V0KG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGFCeXRlTGVuZ3RoKSwgcmF3RGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3Qgc3RhY2sgPSB3YXNtLnN0YWNrU2F2ZSgpO1xuICAgICAgICAgIGNvbnN0IGRpbXNPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2MoNCAqIGRpbXMubGVuZ3RoKTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbGV0IGRpbUluZGV4ID0gZGltc09mZnNldCAvIDQ7XG4gICAgICAgICAgICBkaW1zLmZvckVhY2goZCA9PiB3YXNtLkhFQVAzMltkaW1JbmRleCsrXSA9IGQpO1xuICAgICAgICAgICAgY29uc3QgdGVuc29yID0gd2FzbS5fT3J0Q3JlYXRlVGVuc29yKFxuICAgICAgICAgICAgICAgIHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtKGRhdGFUeXBlKSwgcmF3RGF0YSwgZGF0YUJ5dGVMZW5ndGgsIGRpbXNPZmZzZXQsIGRpbXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGRhdGFMb2NhdGlvblN0cmluZ1RvRW51bShsb2NhdGlvbikpO1xuICAgICAgICAgICAgaWYgKHRlbnNvciA9PT0gMCkge1xuICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgY3JlYXRlIHRlbnNvciBmb3IgaW5wdXQvb3V0cHV0LiBzZXNzaW9uPSR7c2Vzc2lvbklkfSwgaW5kZXg9JHtpbmRleH0uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZW5zb3JIYW5kbGVzLnB1c2godGVuc29yKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgd2FzbS5zdGFja1Jlc3RvcmUoc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuLyoqXG4gKiBwZXJmb3JtIGluZmVyZW5jZSBydW5cbiAqL1xuZXhwb3J0IGNvbnN0IHJ1biA9IGFzeW5jKFxuICAgIHNlc3Npb25JZDogbnVtYmVyLCBpbnB1dEluZGljZXM6IG51bWJlcltdLCBpbnB1dFRlbnNvcnM6IFRlbnNvck1ldGFkYXRhW10sIG91dHB1dEluZGljZXM6IG51bWJlcltdLFxuICAgIG91dHB1dFRlbnNvcnM6IEFycmF5PFRlbnNvck1ldGFkYXRhfG51bGw+LCBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPFRlbnNvck1ldGFkYXRhW10+ID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gIGNvbnN0IHNlc3Npb24gPSBhY3RpdmVTZXNzaW9ucy5nZXQoc2Vzc2lvbklkKTtcbiAgaWYgKCFzZXNzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgcnVuIGluZmVyZW5jZS4gaW52YWxpZCBzZXNzaW9uIGlkOiAke3Nlc3Npb25JZH1gKTtcbiAgfVxuICBjb25zdCBbc2Vzc2lvbkhhbmRsZSwgaW5wdXROYW1lc1VURjhFbmNvZGVkLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkLCBpb0JpbmRpbmdTdGF0ZV0gPSBzZXNzaW9uO1xuXG4gIGNvbnN0IGlucHV0Q291bnQgPSBpbnB1dEluZGljZXMubGVuZ3RoO1xuICBjb25zdCBvdXRwdXRDb3VudCA9IG91dHB1dEluZGljZXMubGVuZ3RoO1xuXG4gIGxldCBydW5PcHRpb25zSGFuZGxlID0gMDtcbiAgbGV0IHJ1bk9wdGlvbnNBbGxvY3M6IG51bWJlcltdID0gW107XG5cbiAgY29uc3QgaW5wdXRUZW5zb3JIYW5kbGVzOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCBvdXRwdXRUZW5zb3JIYW5kbGVzOiBudW1iZXJbXSA9IFtdO1xuICBjb25zdCBpbnB1dE91dHB1dEFsbG9jczogbnVtYmVyW10gPSBbXTtcblxuICBjb25zdCBiZWZvcmVSdW5TdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG4gIGNvbnN0IGlucHV0VmFsdWVzT2Zmc2V0ID0gd2FzbS5zdGFja0FsbG9jKGlucHV0Q291bnQgKiA0KTtcbiAgY29uc3QgaW5wdXROYW1lc09mZnNldCA9IHdhc20uc3RhY2tBbGxvYyhpbnB1dENvdW50ICogNCk7XG4gIGNvbnN0IG91dHB1dFZhbHVlc09mZnNldCA9IHdhc20uc3RhY2tBbGxvYyhvdXRwdXRDb3VudCAqIDQpO1xuICBjb25zdCBvdXRwdXROYW1lc09mZnNldCA9IHdhc20uc3RhY2tBbGxvYyhvdXRwdXRDb3VudCAqIDQpO1xuXG4gIHRyeSB7XG4gICAgW3J1bk9wdGlvbnNIYW5kbGUsIHJ1bk9wdGlvbnNBbGxvY3NdID0gc2V0UnVuT3B0aW9ucyhvcHRpb25zKTtcblxuICAgIC8vIGNyZWF0ZSBpbnB1dCB0ZW5zb3JzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgIHByZXBhcmVJbnB1dE91dHB1dFRlbnNvcihpbnB1dFRlbnNvcnNbaV0sIGlucHV0VGVuc29ySGFuZGxlcywgaW5wdXRPdXRwdXRBbGxvY3MsIHNlc3Npb25JZCwgaW5wdXRJbmRpY2VzW2ldKTtcbiAgICB9XG5cbiAgICAvLyBjcmVhdGUgb3V0cHV0IHRlbnNvcnNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgIHByZXBhcmVJbnB1dE91dHB1dFRlbnNvcihcbiAgICAgICAgICBvdXRwdXRUZW5zb3JzW2ldLCBvdXRwdXRUZW5zb3JIYW5kbGVzLCBpbnB1dE91dHB1dEFsbG9jcywgc2Vzc2lvbklkLCBpbnB1dENvdW50ICsgb3V0cHV0SW5kaWNlc1tpXSk7XG4gICAgfVxuXG4gICAgbGV0IGlucHV0VmFsdWVzSW5kZXggPSBpbnB1dFZhbHVlc09mZnNldCAvIDQ7XG4gICAgbGV0IGlucHV0TmFtZXNJbmRleCA9IGlucHV0TmFtZXNPZmZzZXQgLyA0O1xuICAgIGxldCBvdXRwdXRWYWx1ZXNJbmRleCA9IG91dHB1dFZhbHVlc09mZnNldCAvIDQ7XG4gICAgbGV0IG91dHB1dE5hbWVzSW5kZXggPSBvdXRwdXROYW1lc09mZnNldCAvIDQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgIHdhc20uSEVBUFUzMltpbnB1dFZhbHVlc0luZGV4KytdID0gaW5wdXRUZW5zb3JIYW5kbGVzW2ldO1xuICAgICAgd2FzbS5IRUFQVTMyW2lucHV0TmFtZXNJbmRleCsrXSA9IGlucHV0TmFtZXNVVEY4RW5jb2RlZFtpbnB1dEluZGljZXNbaV1dO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgIHdhc20uSEVBUFUzMltvdXRwdXRWYWx1ZXNJbmRleCsrXSA9IG91dHB1dFRlbnNvckhhbmRsZXNbaV07XG4gICAgICB3YXNtLkhFQVBVMzJbb3V0cHV0TmFtZXNJbmRleCsrXSA9IG91dHB1dE5hbWVzVVRGOEVuY29kZWRbb3V0cHV0SW5kaWNlc1tpXV07XG4gICAgfVxuXG4gICAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR1BVICYmIGlvQmluZGluZ1N0YXRlKSB7XG4gICAgICBjb25zdCB7aGFuZGxlLCBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMsIG91dHB1dFByZWZlcnJlZExvY2F0aW9uc0VuY29kZWR9ID0gaW9CaW5kaW5nU3RhdGU7XG5cbiAgICAgIGlmIChpbnB1dE5hbWVzVVRGOEVuY29kZWQubGVuZ3RoICE9PSBpbnB1dENvdW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW5wdXQgY291bnQgZnJvbSBmZWVkcyAoJHtcbiAgICAgICAgICAgIGlucHV0Q291bnR9KSBpcyBleHBlY3RlZCB0byBiZSBhbHdheXMgZXF1YWwgdG8gbW9kZWwncyBpbnB1dCBjb3VudCAoJHtpbnB1dE5hbWVzVVRGOEVuY29kZWQubGVuZ3RofSkuYCk7XG4gICAgICB9XG5cbiAgICAgIC8vIHByb2Nlc3MgaW5wdXRzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Q291bnQ7IGkrKykge1xuICAgICAgICBjb25zdCBpbmRleCA9IGlucHV0SW5kaWNlc1tpXTtcbiAgICAgICAgY29uc3QgZXJyb3JDb2RlID0gYXdhaXQgd2FzbS5fT3J0QmluZElucHV0KGhhbmRsZSwgaW5wdXROYW1lc1VURjhFbmNvZGVkW2luZGV4XSwgaW5wdXRUZW5zb3JIYW5kbGVzW2ldKTtcbiAgICAgICAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBiaW5kIGlucHV0WyR7aX1dIGZvciBzZXNzaW9uPSR7c2Vzc2lvbklkfS5gKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBwcm9jZXNzIHByZS1hbGxvY2F0ZWQgb3V0cHV0c1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gb3V0cHV0SW5kaWNlc1tpXTtcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSBvdXRwdXRUZW5zb3JzW2ldPy5bM107ICAvLyB1bmRlZmluZWQgbWVhbnMgb3V0cHV0IGlzIG5vdCBwcmUtYWxsb2NhdGVkLlxuXG4gICAgICAgIGlmIChsb2NhdGlvbikge1xuICAgICAgICAgIC8vIG91dHB1dCBpcyBwcmUtYWxsb2NhdGVkLiBiaW5kIHRoZSB0ZW5zb3IuXG4gICAgICAgICAgY29uc3QgZXJyb3JDb2RlID0gd2FzbS5fT3J0QmluZE91dHB1dChoYW5kbGUsIG91dHB1dE5hbWVzVVRGOEVuY29kZWRbaW5kZXhdLCBvdXRwdXRUZW5zb3JIYW5kbGVzW2ldLCAwKTtcbiAgICAgICAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgYmluZCBwcmUtYWxsb2NhdGVkIG91dHB1dFske2l9XSBmb3Igc2Vzc2lvbj0ke3Nlc3Npb25JZH0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG91dHB1dCBpcyBub3QgcHJlLWFsbG9jYXRlZC4gcmVzZXQgcHJlZmVycmVkIGxvY2F0aW9uLlxuICAgICAgICAgIGNvbnN0IGVycm9yQ29kZSA9XG4gICAgICAgICAgICAgIHdhc20uX09ydEJpbmRPdXRwdXQoaGFuZGxlLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkW2luZGV4XSwgMCwgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zRW5jb2RlZFtpbmRleF0pO1xuICAgICAgICAgIGlmIChlcnJvckNvZGUgIT09IDApIHtcbiAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBiaW5kIG91dHB1dFske2l9XSB0byAke291dHB1dFByZWZlcnJlZExvY2F0aW9uc1tpXX0gZm9yIHNlc3Npb249JHtzZXNzaW9uSWR9LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBlcnJvckNvZGU6IG51bWJlcjtcblxuICAgIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dFQkdQVSAmJiBpb0JpbmRpbmdTdGF0ZSkge1xuICAgICAgZXJyb3JDb2RlID0gYXdhaXQgd2FzbS5fT3J0UnVuV2l0aEJpbmRpbmcoXG4gICAgICAgICAgc2Vzc2lvbkhhbmRsZSwgaW9CaW5kaW5nU3RhdGUuaGFuZGxlLCBvdXRwdXRDb3VudCwgb3V0cHV0VmFsdWVzT2Zmc2V0LCBydW5PcHRpb25zSGFuZGxlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3JDb2RlID0gYXdhaXQgd2FzbS5fT3J0UnVuKFxuICAgICAgICAgIHNlc3Npb25IYW5kbGUsIGlucHV0TmFtZXNPZmZzZXQsIGlucHV0VmFsdWVzT2Zmc2V0LCBpbnB1dENvdW50LCBvdXRwdXROYW1lc09mZnNldCwgb3V0cHV0Q291bnQsXG4gICAgICAgICAgb3V0cHV0VmFsdWVzT2Zmc2V0LCBydW5PcHRpb25zSGFuZGxlKTtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICBjaGVja0xhc3RFcnJvcignZmFpbGVkIHRvIGNhbGwgT3J0UnVuKCkuJyk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3V0cHV0OiBUZW5zb3JNZXRhZGF0YVtdID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgIGNvbnN0IHRlbnNvciA9IHdhc20uSEVBUFUzMltvdXRwdXRWYWx1ZXNPZmZzZXQgLyA0ICsgaV07XG4gICAgICBpZiAodGVuc29yID09PSBvdXRwdXRUZW5zb3JIYW5kbGVzW2ldKSB7XG4gICAgICAgIC8vIG91dHB1dCB0ZW5zb3IgaXMgcHJlLWFsbG9jYXRlZC4gbm8gbmVlZCB0byBjb3B5IGRhdGEuXG4gICAgICAgIG91dHB1dC5wdXNoKG91dHB1dFRlbnNvcnNbaV0hKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGJlZm9yZUdldFRlbnNvckRhdGFTdGFjayA9IHdhc20uc3RhY2tTYXZlKCk7XG4gICAgICAvLyBzdGFjayBhbGxvY2F0ZSA0IHBvaW50ZXIgdmFsdWVcbiAgICAgIGNvbnN0IHRlbnNvckRhdGFPZmZzZXQgPSB3YXNtLnN0YWNrQWxsb2MoNCAqIDQpO1xuXG4gICAgICBsZXQga2VlcE91dHB1dFRlbnNvciA9IGZhbHNlO1xuICAgICAgbGV0IHR5cGU6IFRlbnNvci5UeXBlfHVuZGVmaW5lZCwgZGF0YU9mZnNldCA9IDA7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtLl9PcnRHZXRUZW5zb3JEYXRhKFxuICAgICAgICAgICAgdGVuc29yLCB0ZW5zb3JEYXRhT2Zmc2V0LCB0ZW5zb3JEYXRhT2Zmc2V0ICsgNCwgdGVuc29yRGF0YU9mZnNldCArIDgsIHRlbnNvckRhdGFPZmZzZXQgKyAxMik7XG4gICAgICAgIGlmIChlcnJvckNvZGUgIT09IDApIHtcbiAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3QgYWNjZXNzIG91dHB1dCB0ZW5zb3IgZGF0YSBvbiBpbmRleCAke2l9LmApO1xuICAgICAgICB9XG4gICAgICAgIGxldCB0ZW5zb3JEYXRhSW5kZXggPSB0ZW5zb3JEYXRhT2Zmc2V0IC8gNDtcbiAgICAgICAgY29uc3QgZGF0YVR5cGUgPSB3YXNtLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICBkYXRhT2Zmc2V0ID0gd2FzbS5IRUFQVTMyW3RlbnNvckRhdGFJbmRleCsrXTtcbiAgICAgICAgY29uc3QgZGltc09mZnNldCA9IHdhc20uSEVBUFUzMlt0ZW5zb3JEYXRhSW5kZXgrK107XG4gICAgICAgIGNvbnN0IGRpbXNMZW5ndGggPSB3YXNtLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICBjb25zdCBkaW1zID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGltc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZGltcy5wdXNoKHdhc20uSEVBUFUzMltkaW1zT2Zmc2V0IC8gNCArIGldKTtcbiAgICAgICAgfVxuICAgICAgICB3YXNtLl9PcnRGcmVlKGRpbXNPZmZzZXQpO1xuXG4gICAgICAgIGNvbnN0IHNpemUgPSBkaW1zLnJlZHVjZSgoYSwgYikgPT4gYSAqIGIsIDEpO1xuICAgICAgICB0eXBlID0gdGVuc29yRGF0YVR5cGVFbnVtVG9TdHJpbmcoZGF0YVR5cGUpO1xuXG4gICAgICAgIGNvbnN0IHByZWZlcnJlZExvY2F0aW9uID0gaW9CaW5kaW5nU3RhdGU/Lm91dHB1dFByZWZlcnJlZExvY2F0aW9uc1tvdXRwdXRJbmRpY2VzW2ldXTtcblxuICAgICAgICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAocHJlZmVycmVkTG9jYXRpb24gPT09ICdncHUtYnVmZmVyJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdHJpbmcgdGVuc29yIGlzIG5vdCBzdXBwb3J0ZWQgb24gR1BVLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBzdHJpbmdEYXRhOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgIGxldCBkYXRhSW5kZXggPSBkYXRhT2Zmc2V0IC8gNDtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemU7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gd2FzbS5IRUFQVTMyW2RhdGFJbmRleCsrXTtcbiAgICAgICAgICAgIGNvbnN0IG1heEJ5dGVzVG9SZWFkID0gaSA9PT0gc2l6ZSAtIDEgPyB1bmRlZmluZWQgOiB3YXNtLkhFQVBVMzJbZGF0YUluZGV4XSAtIG9mZnNldDtcbiAgICAgICAgICAgIHN0cmluZ0RhdGEucHVzaCh3YXNtLlVURjhUb1N0cmluZyhvZmZzZXQsIG1heEJ5dGVzVG9SZWFkKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG91dHB1dC5wdXNoKFt0eXBlLCBkaW1zLCBzdHJpbmdEYXRhLCAnY3B1J10pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIGEgY2VydGFpbiBvdXRwdXQncyBwcmVmZXJyZWQgbG9jYXRpb24gaXMgR1BVIGJ1dCB0aGUgdGVuc29yIGlzIGVtcHR5LCB3ZSBzdGlsbCBuZWVkIHRvIGNyZWF0ZSBhIENQVVxuICAgICAgICAgIC8vIHRlbnNvciBmb3IgaXQuIFRoZXJlIGlzIG5vIG1hcHBpbmcgR1BVIGJ1ZmZlciBmb3IgYW4gZW1wdHkgdGVuc29yLlxuICAgICAgICAgIGlmIChwcmVmZXJyZWRMb2NhdGlvbiA9PT0gJ2dwdS1idWZmZXInICYmIHNpemUgPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBncHVCdWZmZXIgPSB3YXNtLmpzZXBHZXRCdWZmZXIoZGF0YU9mZnNldCk7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50U2l6ZSA9IGdldFRlbnNvckVsZW1lbnRTaXplKGRhdGFUeXBlKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50U2l6ZSA9PT0gdW5kZWZpbmVkIHx8ICFpc0dwdUJ1ZmZlclN1cHBvcnRlZFR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBkYXRhIHR5cGU6ICR7dHlwZX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZG8gbm90IHJlbGVhc2UgdGhlIHRlbnNvciByaWdodCBub3cuIGl0IHdpbGwgYmUgcmVsZWFzZWQgd2hlbiB1c2VyIGNhbGxzIHRlbnNvci5kaXNwb3NlKCkuXG4gICAgICAgICAgICBrZWVwT3V0cHV0VGVuc29yID0gdHJ1ZTtcblxuICAgICAgICAgICAgb3V0cHV0LnB1c2goW1xuICAgICAgICAgICAgICB0eXBlLCBkaW1zLCB7XG4gICAgICAgICAgICAgICAgZ3B1QnVmZmVyLFxuICAgICAgICAgICAgICAgIGRvd25sb2FkOiB3YXNtLmpzZXBDcmVhdGVEb3dubG9hZGVyKGdwdUJ1ZmZlciwgc2l6ZSAqIGVsZW1lbnRTaXplLCB0eXBlKSxcbiAgICAgICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICB3YXNtLl9PcnRSZWxlYXNlVGVuc29yKHRlbnNvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAnZ3B1LWJ1ZmZlcidcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlZEFycmF5Q29uc3RydWN0b3IgPSB0ZW5zb3JUeXBlVG9UeXBlZEFycmF5Q29uc3RydWN0b3IodHlwZSk7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gbmV3IHR5cGVkQXJyYXlDb25zdHJ1Y3RvcihzaXplKTtcbiAgICAgICAgICAgIG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aClcbiAgICAgICAgICAgICAgICAuc2V0KHdhc20uSEVBUFU4LnN1YmFycmF5KGRhdGFPZmZzZXQsIGRhdGFPZmZzZXQgKyBkYXRhLmJ5dGVMZW5ndGgpKTtcbiAgICAgICAgICAgIG91dHB1dC5wdXNoKFt0eXBlLCBkaW1zLCBkYXRhLCAnY3B1J10pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgd2FzbS5zdGFja1Jlc3RvcmUoYmVmb3JlR2V0VGVuc29yRGF0YVN0YWNrKTtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdzdHJpbmcnICYmIGRhdGFPZmZzZXQpIHtcbiAgICAgICAgICB3YXNtLl9mcmVlKGRhdGFPZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgha2VlcE91dHB1dFRlbnNvcikge1xuICAgICAgICAgIHdhc20uX09ydFJlbGVhc2VUZW5zb3IodGVuc29yKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpb0JpbmRpbmdTdGF0ZSkge1xuICAgICAgd2FzbS5fT3J0Q2xlYXJCb3VuZE91dHB1dHMoaW9CaW5kaW5nU3RhdGUuaGFuZGxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9IGZpbmFsbHkge1xuICAgIHdhc20uc3RhY2tSZXN0b3JlKGJlZm9yZVJ1blN0YWNrKTtcblxuICAgIGlucHV0VGVuc29ySGFuZGxlcy5mb3JFYWNoKHYgPT4gd2FzbS5fT3J0UmVsZWFzZVRlbnNvcih2KSk7XG4gICAgb3V0cHV0VGVuc29ySGFuZGxlcy5mb3JFYWNoKHYgPT4gd2FzbS5fT3J0UmVsZWFzZVRlbnNvcih2KSk7XG4gICAgaW5wdXRPdXRwdXRBbGxvY3MuZm9yRWFjaChwID0+IHdhc20uX2ZyZWUocCkpO1xuXG4gICAgaWYgKHJ1bk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgIHdhc20uX09ydFJlbGVhc2VSdW5PcHRpb25zKHJ1bk9wdGlvbnNIYW5kbGUpO1xuICAgIH1cbiAgICBydW5PcHRpb25zQWxsb2NzLmZvckVhY2gocCA9PiB3YXNtLl9mcmVlKHApKTtcbiAgfVxufTtcblxuLyoqXG4gKiBlbmQgcHJvZmlsaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBlbmRQcm9maWxpbmcgPSAoc2Vzc2lvbklkOiBudW1iZXIpOiB2b2lkID0+IHtcbiAgY29uc3Qgd2FzbSA9IGdldEluc3RhbmNlKCk7XG4gIGNvbnN0IHNlc3Npb24gPSBhY3RpdmVTZXNzaW9ucy5nZXQoc2Vzc2lvbklkKTtcbiAgaWYgKCFzZXNzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHNlc3Npb24gaWQnKTtcbiAgfVxuICBjb25zdCBzZXNzaW9uSGFuZGxlID0gc2Vzc2lvblswXTtcblxuICAvLyBwcm9maWxlIGZpbGUgbmFtZSBpcyBub3QgdXNlZCB5ZXQsIGJ1dCBpdCBtdXN0IGJlIGZyZWVkLlxuICBjb25zdCBwcm9maWxlRmlsZU5hbWUgPSB3YXNtLl9PcnRFbmRQcm9maWxpbmcoc2Vzc2lvbkhhbmRsZSk7XG4gIGlmIChwcm9maWxlRmlsZU5hbWUgPT09IDApIHtcbiAgICBjaGVja0xhc3RFcnJvcignQ2FuXFwndCBnZXQgYW4gcHJvZmlsZSBmaWxlIG5hbWUuJyk7XG4gIH1cbiAgd2FzbS5fT3J0RnJlZShwcm9maWxlRmlsZU5hbWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGV4dHJhY3RUcmFuc2ZlcmFibGVCdWZmZXJzID0gKHRlbnNvcnM6IHJlYWRvbmx5IFNlcmlhbGl6YWJsZVRlbnNvck1ldGFkYXRhW10pOiBBcnJheUJ1ZmZlckxpa2VbXSA9PiB7XG4gIGNvbnN0IGJ1ZmZlcnM6IEFycmF5QnVmZmVyTGlrZVtdID0gW107XG4gIGZvciAoY29uc3QgdGVuc29yIG9mIHRlbnNvcnMpIHtcbiAgICBjb25zdCBkYXRhID0gdGVuc29yWzJdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSAmJiAnYnVmZmVyJyBpbiBkYXRhKSB7XG4gICAgICBidWZmZXJzLnB1c2goZGF0YS5idWZmZXIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYnVmZmVycztcbn07XG4iLCAiLyohXG4gKiBPTk5YIFJ1bnRpbWUgV2ViIHYxLjE3LjBcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG5cInVzZSBzdHJpY3RcIjtcbigoKSA9PiB7XG4gIHZhciBfX2RlZlByb3AgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4gIHZhciBfX2dldE93blByb3BEZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgdmFyIF9fZ2V0T3duUHJvcE5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG4gIHZhciBfX2hhc093blByb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICB2YXIgX19lc20gPSAoZm4sIHJlcykgPT4gZnVuY3Rpb24gX19pbml0KCkge1xuICAgIHJldHVybiBmbiAmJiAocmVzID0gKDAsIGZuW19fZ2V0T3duUHJvcE5hbWVzKGZuKVswXV0pKGZuID0gMCkpLCByZXM7XG4gIH07XG4gIHZhciBfX2NvbW1vbkpTID0gKGNiLCBtb2QpID0+IGZ1bmN0aW9uIF9fcmVxdWlyZSgpIHtcbiAgICByZXR1cm4gbW9kIHx8ICgwLCBjYltfX2dldE93blByb3BOYW1lcyhjYilbMF1dKSgobW9kID0geyBleHBvcnRzOiB7fSB9KS5leHBvcnRzLCBtb2QpLCBtb2QuZXhwb3J0cztcbiAgfTtcbiAgdmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBhbGwpXG4gICAgICBfX2RlZlByb3AodGFyZ2V0LCBuYW1lLCB7IGdldDogYWxsW25hbWVdLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICB9O1xuICB2YXIgX19jb3B5UHJvcHMgPSAodG8sIGZyb20sIGV4Y2VwdCwgZGVzYykgPT4ge1xuICAgIGlmIChmcm9tICYmIHR5cGVvZiBmcm9tID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmcm9tID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGZvciAobGV0IGtleSBvZiBfX2dldE93blByb3BOYW1lcyhmcm9tKSlcbiAgICAgICAgaWYgKCFfX2hhc093blByb3AuY2FsbCh0bywga2V5KSAmJiBrZXkgIT09IGV4Y2VwdClcbiAgICAgICAgICBfX2RlZlByb3AodG8sIGtleSwgeyBnZXQ6ICgpID0+IGZyb21ba2V5XSwgZW51bWVyYWJsZTogIShkZXNjID0gX19nZXRPd25Qcm9wRGVzYyhmcm9tLCBrZXkpKSB8fCBkZXNjLmVudW1lcmFibGUgfSk7XG4gICAgfVxuICAgIHJldHVybiB0bztcbiAgfTtcbiAgdmFyIF9fdG9Db21tb25KUyA9IChtb2QpID0+IF9fY29weVByb3BzKF9fZGVmUHJvcCh7fSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSksIG1vZCk7XG5cbiAgLy8gbm9kZWpzLWlnbm9yZTpmc1xuICB2YXIgZnNfZXhwb3J0cyA9IHt9O1xuICBfX2V4cG9ydChmc19leHBvcnRzLCB7XG4gICAgcmVhZEZpbGU6ICgpID0+IHJlYWRGaWxlXG4gIH0pO1xuICB2YXIgcmVhZEZpbGU7XG4gIHZhciBpbml0X2ZzID0gX19lc20oe1xuICAgIFwibm9kZWpzLWlnbm9yZTpmc1wiKCkge1xuICAgICAgcmVhZEZpbGUgPSB2b2lkIDA7XG4gICAgfVxuICB9KTtcblxuICAvLyBub2RlanMtaWdub3JlOnBhdGhcbiAgdmFyIHBhdGhfZXhwb3J0cyA9IHt9O1xuICBfX2V4cG9ydChwYXRoX2V4cG9ydHMsIHtcbiAgICBqb2luOiAoKSA9PiBqb2luMlxuICB9KTtcbiAgdmFyIGpvaW4yO1xuICB2YXIgaW5pdF9wYXRoID0gX19lc20oe1xuICAgIFwibm9kZWpzLWlnbm9yZTpwYXRoXCIoKSB7XG4gICAgICBqb2luMiA9IHZvaWQgMDtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHdlYi9saWIvd2FzbS9iaW5kaW5nL29ydC13YXNtLmpzXG4gIHZhciByZXF1aXJlX29ydF93YXNtID0gX19jb21tb25KUyh7XG4gICAgXCJ3ZWIvbGliL3dhc20vYmluZGluZy9vcnQtd2FzbS5qc1wiKGV4cG9ydHMsIG1vZHVsZSkge1xuICAgICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgICB2YXIgb3J0V2FzbSA9ICgoKSA9PiB7XG4gICAgICAgIHZhciBfc2NyaXB0RGlyID0gdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyA6IHZvaWQgMDtcbiAgICAgICAgaWYgKHR5cGVvZiBfX2ZpbGVuYW1lICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgIF9zY3JpcHREaXIgPSBfc2NyaXB0RGlyIHx8IF9fZmlsZW5hbWU7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihtb2R1bGVBcmcgPSB7fSkge1xuICAgICAgICAgIHZhciBlID0gbW9kdWxlQXJnLCBhYSwgbDtcbiAgICAgICAgICBlLnJlYWR5ID0gbmV3IFByb21pc2UoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGFhID0gYTtcbiAgICAgICAgICAgIGwgPSBiO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBiYSA9IE9iamVjdC5hc3NpZ24oe30sIGUpLCBtID0gXCIuL3RoaXMucHJvZ3JhbVwiLCBjYSA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIHdpbmRvdywgciA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaW1wb3J0U2NyaXB0cywgZGEgPSBcIm9iamVjdFwiID09IHR5cGVvZiBwcm9jZXNzICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMgJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlLCB3ID0gXCJcIiwgeCwgeSwgejtcbiAgICAgICAgICBpZiAoZGEpIHtcbiAgICAgICAgICAgIHZhciBmcyA9IChpbml0X2ZzKCksIF9fdG9Db21tb25KUyhmc19leHBvcnRzKSksIEIgPSAoaW5pdF9wYXRoKCksIF9fdG9Db21tb25KUyhwYXRoX2V4cG9ydHMpKTtcbiAgICAgICAgICAgIHcgPSByID8gQi5kaXJuYW1lKHcpICsgXCIvXCIgOiBfX2Rpcm5hbWUgKyBcIi9cIjtcbiAgICAgICAgICAgIHggPSAoYSwgYikgPT4ge1xuICAgICAgICAgICAgICBhID0gYS5zdGFydHNXaXRoKFwiZmlsZTovL1wiKSA/IG5ldyBVUkwoYSkgOiBCLm5vcm1hbGl6ZShhKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGZzLnJlYWRGaWxlU3luYyhhLCBiID8gdm9pZCAwIDogXCJ1dGY4XCIpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHogPSAoYSkgPT4ge1xuICAgICAgICAgICAgICBhID0geChhLCB0cnVlKTtcbiAgICAgICAgICAgICAgYS5idWZmZXIgfHwgKGEgPSBuZXcgVWludDhBcnJheShhKSk7XG4gICAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHkgPSAoYSwgYiwgYywgZCA9IHRydWUpID0+IHtcbiAgICAgICAgICAgICAgYSA9IGEuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikgPyBuZXcgVVJMKGEpIDogQi5ub3JtYWxpemUoYSk7XG4gICAgICAgICAgICAgIGZzLnJlYWRGaWxlKGEsIGQgPyB2b2lkIDAgOiBcInV0ZjhcIiwgKGcsIGgpID0+IHtcbiAgICAgICAgICAgICAgICBnID8gYyhnKSA6IGIoZCA/IGguYnVmZmVyIDogaCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICFlLnRoaXNQcm9ncmFtICYmIDEgPCBwcm9jZXNzLmFyZ3YubGVuZ3RoICYmIChtID0gcHJvY2Vzcy5hcmd2WzFdLnJlcGxhY2UoL1xcXFwvZywgXCIvXCIpKTtcbiAgICAgICAgICAgIHByb2Nlc3MuYXJndi5zbGljZSgyKTtcbiAgICAgICAgICAgIGUuaW5zcGVjdCA9ICgpID0+IFwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNhIHx8IHIpXG4gICAgICAgICAgICByID8gdyA9IHNlbGYubG9jYXRpb24uaHJlZiA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIGRvY3VtZW50ICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgJiYgKHcgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyksIF9zY3JpcHREaXIgJiYgKHcgPSBfc2NyaXB0RGlyKSwgMCAhPT0gdy5pbmRleE9mKFwiYmxvYjpcIikgPyB3ID0gdy5zdWJzdHIoMCwgdy5yZXBsYWNlKC9bPyNdLiovLCBcIlwiKS5sYXN0SW5kZXhPZihcIi9cIikgKyAxKSA6IHcgPSBcIlwiLCB4ID0gKGEpID0+IHtcbiAgICAgICAgICAgICAgdmFyIGIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgYi5vcGVuKFwiR0VUXCIsIGEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgYi5zZW5kKG51bGwpO1xuICAgICAgICAgICAgICByZXR1cm4gYi5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICB9LCByICYmICh6ID0gKGEpID0+IHtcbiAgICAgICAgICAgICAgdmFyIGIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgICAgYi5vcGVuKFwiR0VUXCIsIGEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgYi5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgICAgICAgICAgIGIuc2VuZChudWxsKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KGIucmVzcG9uc2UpO1xuICAgICAgICAgICAgfSksIHkgPSAoYSwgYiwgYykgPT4ge1xuICAgICAgICAgICAgICB2YXIgZCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICBkLm9wZW4oXCJHRVRcIiwgYSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIGQucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgICAgICAgICBkLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAyMDAgPT0gZC5zdGF0dXMgfHwgMCA9PSBkLnN0YXR1cyAmJiBkLnJlc3BvbnNlID8gYihkLnJlc3BvbnNlKSA6IGMoKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgZC5vbmVycm9yID0gYztcbiAgICAgICAgICAgICAgZC5zZW5kKG51bGwpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgZWEgPSBlLnByaW50IHx8IGNvbnNvbGUubG9nLmJpbmQoY29uc29sZSksIEMgPSBlLnByaW50RXJyIHx8IGNvbnNvbGUuZXJyb3IuYmluZChjb25zb2xlKTtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKGUsIGJhKTtcbiAgICAgICAgICBiYSA9IG51bGw7XG4gICAgICAgICAgZS50aGlzUHJvZ3JhbSAmJiAobSA9IGUudGhpc1Byb2dyYW0pO1xuICAgICAgICAgIHZhciBEO1xuICAgICAgICAgIGUud2FzbUJpbmFyeSAmJiAoRCA9IGUud2FzbUJpbmFyeSk7XG4gICAgICAgICAgdmFyIG5vRXhpdFJ1bnRpbWUgPSBlLm5vRXhpdFJ1bnRpbWUgfHwgdHJ1ZTtcbiAgICAgICAgICBcIm9iamVjdFwiICE9IHR5cGVvZiBXZWJBc3NlbWJseSAmJiBFKFwibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZFwiKTtcbiAgICAgICAgICB2YXIgRiwgRywgZmEgPSBmYWxzZSwgSCwgSSwgSiwgSztcbiAgICAgICAgICBmdW5jdGlvbiBoYSgpIHtcbiAgICAgICAgICAgIHZhciBhID0gRi5idWZmZXI7XG4gICAgICAgICAgICBlLkhFQVA4ID0gSCA9IG5ldyBJbnQ4QXJyYXkoYSk7XG4gICAgICAgICAgICBlLkhFQVAxNiA9IG5ldyBJbnQxNkFycmF5KGEpO1xuICAgICAgICAgICAgZS5IRUFQMzIgPSBKID0gbmV3IEludDMyQXJyYXkoYSk7XG4gICAgICAgICAgICBlLkhFQVBVOCA9IEkgPSBuZXcgVWludDhBcnJheShhKTtcbiAgICAgICAgICAgIGUuSEVBUFUxNiA9IG5ldyBVaW50MTZBcnJheShhKTtcbiAgICAgICAgICAgIGUuSEVBUFUzMiA9IEsgPSBuZXcgVWludDMyQXJyYXkoYSk7XG4gICAgICAgICAgICBlLkhFQVBGMzIgPSBuZXcgRmxvYXQzMkFycmF5KGEpO1xuICAgICAgICAgICAgZS5IRUFQRjY0ID0gbmV3IEZsb2F0NjRBcnJheShhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIEwsIGlhID0gW10sIGphID0gW10sIGthID0gW107XG4gICAgICAgICAgZnVuY3Rpb24gbGEoKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGUucHJlUnVuLnNoaWZ0KCk7XG4gICAgICAgICAgICBpYS51bnNoaWZ0KGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgTSA9IDAsIE4gPSBudWxsLCBPID0gbnVsbDtcbiAgICAgICAgICBmdW5jdGlvbiBFKGEpIHtcbiAgICAgICAgICAgIGlmIChlLm9uQWJvcnQpXG4gICAgICAgICAgICAgIGUub25BYm9ydChhKTtcbiAgICAgICAgICAgIGEgPSBcIkFib3J0ZWQoXCIgKyBhICsgXCIpXCI7XG4gICAgICAgICAgICBDKGEpO1xuICAgICAgICAgICAgZmEgPSB0cnVlO1xuICAgICAgICAgICAgYSA9IG5ldyBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3IoYSArIFwiLiBCdWlsZCB3aXRoIC1zQVNTRVJUSU9OUyBmb3IgbW9yZSBpbmZvLlwiKTtcbiAgICAgICAgICAgIGwoYSk7XG4gICAgICAgICAgICB0aHJvdyBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBtYShhKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5zdGFydHNXaXRoKFwiZGF0YTphcHBsaWNhdGlvbi9vY3RldC1zdHJlYW07YmFzZTY0LFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFA7XG4gICAgICAgICAgUCA9IFwib3J0LXdhc20ud2FzbVwiO1xuICAgICAgICAgIGlmICghbWEoUCkpIHtcbiAgICAgICAgICAgIHZhciBuYSA9IFA7XG4gICAgICAgICAgICBQID0gZS5sb2NhdGVGaWxlID8gZS5sb2NhdGVGaWxlKG5hLCB3KSA6IHcgKyBuYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gb2EoYSkge1xuICAgICAgICAgICAgaWYgKGEgPT0gUCAmJiBEKVxuICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoRCk7XG4gICAgICAgICAgICBpZiAoeilcbiAgICAgICAgICAgICAgcmV0dXJuIHooYSk7XG4gICAgICAgICAgICB0aHJvdyBcImJvdGggYXN5bmMgYW5kIHN5bmMgZmV0Y2hpbmcgb2YgdGhlIHdhc20gZmFpbGVkXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHBhKGEpIHtcbiAgICAgICAgICAgIGlmICghRCAmJiAoY2EgfHwgcikpIHtcbiAgICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZmV0Y2ggJiYgIWEuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKGEsIHsgY3JlZGVudGlhbHM6IFwic2FtZS1vcmlnaW5cIiB9KS50aGVuKChiKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWIub2spXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFwiZmFpbGVkIHRvIGxvYWQgd2FzbSBiaW5hcnkgZmlsZSBhdCAnXCIgKyBhICsgXCInXCI7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYi5hcnJheUJ1ZmZlcigpO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKCgpID0+IG9hKGEpKTtcbiAgICAgICAgICAgICAgaWYgKHkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChiLCBjKSA9PiB7XG4gICAgICAgICAgICAgICAgICB5KGEsIChkKSA9PiBiKG5ldyBVaW50OEFycmF5KGQpKSwgYyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBvYShhKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHFhKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIHJldHVybiBwYShhKS50aGVuKChkKSA9PiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShkLCBiKSkudGhlbigoZCkgPT4gZCkudGhlbihjLCAoZCkgPT4ge1xuICAgICAgICAgICAgICBDKFwiZmFpbGVkIHRvIGFzeW5jaHJvbm91c2x5IHByZXBhcmUgd2FzbTogXCIgKyBkKTtcbiAgICAgICAgICAgICAgRShkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiByYShhLCBiKSB7XG4gICAgICAgICAgICB2YXIgYyA9IFA7XG4gICAgICAgICAgICByZXR1cm4gRCB8fCBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nIHx8IG1hKGMpIHx8IGMuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikgfHwgZGEgfHwgXCJmdW5jdGlvblwiICE9IHR5cGVvZiBmZXRjaCA/IHFhKGMsIGEsIGIpIDogZmV0Y2goYywgeyBjcmVkZW50aWFsczogXCJzYW1lLW9yaWdpblwiIH0pLnRoZW4oKGQpID0+IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGQsIGEpLnRoZW4oYiwgZnVuY3Rpb24oZykge1xuICAgICAgICAgICAgICBDKFwid2FzbSBzdHJlYW1pbmcgY29tcGlsZSBmYWlsZWQ6IFwiICsgZyk7XG4gICAgICAgICAgICAgIEMoXCJmYWxsaW5nIGJhY2sgdG8gQXJyYXlCdWZmZXIgaW5zdGFudGlhdGlvblwiKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHFhKGMsIGEsIGIpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgUSwgUiA9IChhKSA9PiB7XG4gICAgICAgICAgICBmb3IgKDsgMCA8IGEubGVuZ3RoOyApXG4gICAgICAgICAgICAgIGEuc2hpZnQoKShlKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIHNhKGEpIHtcbiAgICAgICAgICAgIHRoaXMueGEgPSBhIC0gMjQ7XG4gICAgICAgICAgICB0aGlzLkdhID0gZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICBLW3RoaXMueGEgKyA0ID4+IDIgPj4+IDBdID0gYjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLkZhID0gZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICBLW3RoaXMueGEgKyA4ID4+IDIgPj4+IDBdID0gYjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnphID0gZnVuY3Rpb24oYiwgYykge1xuICAgICAgICAgICAgICB0aGlzLkVhKCk7XG4gICAgICAgICAgICAgIHRoaXMuR2EoYik7XG4gICAgICAgICAgICAgIHRoaXMuRmEoYyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5FYSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBLW3RoaXMueGEgKyAxNiA+PiAyID4+PiAwXSA9IDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdGEgPSAwLCB1YSA9IDAsIHZhID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgVGV4dERlY29kZXIgPyBuZXcgVGV4dERlY29kZXIoXCJ1dGY4XCIpIDogdm9pZCAwLCB3YSA9IChhLCBiLCBjKSA9PiB7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciBkID0gYiArIGM7XG4gICAgICAgICAgICBmb3IgKGMgPSBiOyBhW2NdICYmICEoYyA+PSBkKTsgKVxuICAgICAgICAgICAgICArK2M7XG4gICAgICAgICAgICBpZiAoMTYgPCBjIC0gYiAmJiBhLmJ1ZmZlciAmJiB2YSlcbiAgICAgICAgICAgICAgcmV0dXJuIHZhLmRlY29kZShhLnN1YmFycmF5KGIsIGMpKTtcbiAgICAgICAgICAgIGZvciAoZCA9IFwiXCI7IGIgPCBjOyApIHtcbiAgICAgICAgICAgICAgdmFyIGcgPSBhW2IrK107XG4gICAgICAgICAgICAgIGlmIChnICYgMTI4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGggPSBhW2IrK10gJiA2MztcbiAgICAgICAgICAgICAgICBpZiAoMTkyID09IChnICYgMjI0KSlcbiAgICAgICAgICAgICAgICAgIGQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoZyAmIDMxKSA8PCA2IHwgaCk7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICB2YXIgayA9IGFbYisrXSAmIDYzO1xuICAgICAgICAgICAgICAgICAgZyA9IDIyNCA9PSAoZyAmIDI0MCkgPyAoZyAmIDE1KSA8PCAxMiB8IGggPDwgNiB8IGsgOiAoZyAmIDcpIDw8IDE4IHwgaCA8PCAxMiB8IGsgPDwgNiB8IGFbYisrXSAmIDYzO1xuICAgICAgICAgICAgICAgICAgNjU1MzYgPiBnID8gZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGcpIDogKGcgLT0gNjU1MzYsIGQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NiB8IGcgPj4gMTAsIDU2MzIwIHwgZyAmIDEwMjMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgIGQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkO1xuICAgICAgICAgIH0sIFMgPSAoYSwgYikgPT4gKGEgPj4+PSAwKSA/IHdhKEksIGEsIGIpIDogXCJcIiwgVCA9IChhKSA9PiB7XG4gICAgICAgICAgICBmb3IgKHZhciBiID0gMCwgYyA9IDA7IGMgPCBhLmxlbmd0aDsgKytjKSB7XG4gICAgICAgICAgICAgIHZhciBkID0gYS5jaGFyQ29kZUF0KGMpO1xuICAgICAgICAgICAgICAxMjcgPj0gZCA/IGIrKyA6IDIwNDcgPj0gZCA/IGIgKz0gMiA6IDU1Mjk2IDw9IGQgJiYgNTczNDMgPj0gZCA/IChiICs9IDQsICsrYykgOiBiICs9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICB9LCBVID0gKGEsIGIsIGMsIGQpID0+IHtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgaWYgKCEoMCA8IGQpKVxuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIHZhciBnID0gYztcbiAgICAgICAgICAgIGQgPSBjICsgZCAtIDE7XG4gICAgICAgICAgICBmb3IgKHZhciBoID0gMDsgaCA8IGEubGVuZ3RoOyArK2gpIHtcbiAgICAgICAgICAgICAgdmFyIGsgPSBhLmNoYXJDb2RlQXQoaCk7XG4gICAgICAgICAgICAgIGlmICg1NTI5NiA8PSBrICYmIDU3MzQzID49IGspIHtcbiAgICAgICAgICAgICAgICB2YXIgcCA9IGEuY2hhckNvZGVBdCgrK2gpO1xuICAgICAgICAgICAgICAgIGsgPSA2NTUzNiArICgoayAmIDEwMjMpIDw8IDEwKSB8IHAgJiAxMDIzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICgxMjcgPj0gaykge1xuICAgICAgICAgICAgICAgIGlmIChjID49IGQpXG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSBrO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgyMDQ3ID49IGspIHtcbiAgICAgICAgICAgICAgICAgIGlmIChjICsgMSA+PSBkKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDE5MiB8IGsgPj4gNjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaWYgKDY1NTM1ID49IGspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMgKyAyID49IGQpXG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDIyNCB8IGsgPj4gMTI7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYyArIDMgPj0gZClcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMjQwIHwgayA+PiAxODtcbiAgICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMTI4IHwgayA+PiAxMiAmIDYzO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gMTI4IHwgayA+PiA2ICYgNjM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDEyOCB8IGsgJiA2MztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYltjID4+PiAwXSA9IDA7XG4gICAgICAgICAgICByZXR1cm4gYyAtIGc7XG4gICAgICAgICAgfSwgViA9IChhKSA9PiAwID09PSBhICUgNCAmJiAoMCAhPT0gYSAlIDEwMCB8fCAwID09PSBhICUgNDAwKSwgeGEgPSBbMCwgMzEsIDYwLCA5MSwgMTIxLCAxNTIsIDE4MiwgMjEzLCAyNDQsIDI3NCwgMzA1LCAzMzVdLCB5YSA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNF0sIERhID0gKGEpID0+IHtcbiAgICAgICAgICAgIHZhciBiID0gVChhKSArIDEsIGMgPSB6YShiKTtcbiAgICAgICAgICAgIGMgJiYgVShhLCBJLCBjLCBiKTtcbiAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgIH0sIFcgPSB7fSwgRmEgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIUVhKSB7XG4gICAgICAgICAgICAgIHZhciBhID0geyBVU0VSOiBcIndlYl91c2VyXCIsIExPR05BTUU6IFwid2ViX3VzZXJcIiwgUEFUSDogXCIvXCIsIFBXRDogXCIvXCIsIEhPTUU6IFwiL2hvbWUvd2ViX3VzZXJcIiwgTEFORzogKFwib2JqZWN0XCIgPT0gdHlwZW9mIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IubGFuZ3VhZ2VzICYmIG5hdmlnYXRvci5sYW5ndWFnZXNbMF0gfHwgXCJDXCIpLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgXCItXCIsXG4gICAgICAgICAgICAgICAgXCJfXCJcbiAgICAgICAgICAgICAgKSArIFwiLlVURi04XCIsIF86IG0gfHwgXCIuL3RoaXMucHJvZ3JhbVwiIH0sIGI7XG4gICAgICAgICAgICAgIGZvciAoYiBpbiBXKVxuICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gV1tiXSA/IGRlbGV0ZSBhW2JdIDogYVtiXSA9IFdbYl07XG4gICAgICAgICAgICAgIHZhciBjID0gW107XG4gICAgICAgICAgICAgIGZvciAoYiBpbiBhKVxuICAgICAgICAgICAgICAgIGMucHVzaChgJHtifT0ke2FbYl19YCk7XG4gICAgICAgICAgICAgIEVhID0gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBFYTtcbiAgICAgICAgICB9LCBFYSwgR2EgPSBbbnVsbCwgW10sIFtdXSwgSGEgPSBbMzEsIDI5LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV0sIElhID0gWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdO1xuICAgICAgICAgIGZ1bmN0aW9uIEphKGEpIHtcbiAgICAgICAgICAgIHZhciBiID0gQXJyYXkoVChhKSArIDEpO1xuICAgICAgICAgICAgVShhLCBiLCAwLCBiLmxlbmd0aCk7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gS2EoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZyhmLCBuLCBxKSB7XG4gICAgICAgICAgICAgIGZvciAoZiA9IFwibnVtYmVyXCIgPT0gdHlwZW9mIGYgPyBmLnRvU3RyaW5nKCkgOiBmIHx8IFwiXCI7IGYubGVuZ3RoIDwgbjsgKVxuICAgICAgICAgICAgICAgIGYgPSBxWzBdICsgZjtcbiAgICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBoKGYsIG4pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGcoZiwgbiwgXCIwXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gayhmLCBuKSB7XG4gICAgICAgICAgICAgIGZ1bmN0aW9uIHEoQWEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMCA+IEFhID8gLTEgOiAwIDwgQWEgPyAxIDogMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgQTtcbiAgICAgICAgICAgICAgMCA9PT0gKEEgPSBxKGYuZ2V0RnVsbFllYXIoKSAtIG4uZ2V0RnVsbFllYXIoKSkpICYmIDAgPT09IChBID0gcShmLmdldE1vbnRoKCkgLSBuLmdldE1vbnRoKCkpKSAmJiAoQSA9IHEoZi5nZXREYXRlKCkgLSBuLmdldERhdGUoKSkpO1xuICAgICAgICAgICAgICByZXR1cm4gQTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHAoZikge1xuICAgICAgICAgICAgICBzd2l0Y2ggKGYuZ2V0RGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpIC0gMSwgMTEsIDI5KTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLCAwLCAzKTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoXG4gICAgICAgICAgICAgICAgICAgIGYuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLCAwLCAxKTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpIC0gMSwgMTEsIDMxKTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpIC0gMSwgMTEsIDMwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gdChmKSB7XG4gICAgICAgICAgICAgIHZhciBuID0gZi50YTtcbiAgICAgICAgICAgICAgZm9yIChmID0gbmV3IERhdGUobmV3IERhdGUoZi51YSArIDE5MDAsIDAsIDEpLmdldFRpbWUoKSk7IDAgPCBuOyApIHtcbiAgICAgICAgICAgICAgICB2YXIgcSA9IGYuZ2V0TW9udGgoKSwgQSA9IChWKGYuZ2V0RnVsbFllYXIoKSkgPyBIYSA6IElhKVtxXTtcbiAgICAgICAgICAgICAgICBpZiAobiA+IEEgLSBmLmdldERhdGUoKSlcbiAgICAgICAgICAgICAgICAgIG4gLT0gQSAtIGYuZ2V0RGF0ZSgpICsgMSwgZi5zZXREYXRlKDEpLCAxMSA+IHEgPyBmLnNldE1vbnRoKHEgKyAxKSA6IChmLnNldE1vbnRoKDApLCBmLnNldEZ1bGxZZWFyKGYuZ2V0RnVsbFllYXIoKSArIDEpKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGYuc2V0RGF0ZShmLmdldERhdGUoKSArIG4pO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHEgPSBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkgKyAxLCAwLCA0KTtcbiAgICAgICAgICAgICAgbiA9IHAobmV3IERhdGUoXG4gICAgICAgICAgICAgICAgZi5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgNFxuICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgcSA9IHAocSk7XG4gICAgICAgICAgICAgIHJldHVybiAwID49IGsobiwgZikgPyAwID49IGsocSwgZikgPyBmLmdldEZ1bGxZZWFyKCkgKyAxIDogZi5nZXRGdWxsWWVhcigpIDogZi5nZXRGdWxsWWVhcigpIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgIGQgPj4+PSAwO1xuICAgICAgICAgICAgdmFyIHUgPSBKW2QgKyA0MCA+PiAyID4+PiAwXTtcbiAgICAgICAgICAgIGQgPSB7IENhOiBKW2QgPj4gMiA+Pj4gMF0sIEJhOiBKW2QgKyA0ID4+IDIgPj4+IDBdLCB2YTogSltkICsgOCA+PiAyID4+PiAwXSwgeWE6IEpbZCArIDEyID4+IDIgPj4+IDBdLCB3YTogSltkICsgMTYgPj4gMiA+Pj4gMF0sIHVhOiBKW2QgKyAyMCA+PiAyID4+PiAwXSwgc2E6IEpbZCArIDI0ID4+IDIgPj4+IDBdLCB0YTogSltkICsgMjggPj4gMiA+Pj4gMF0sIEhhOiBKW2QgKyAzMiA+PiAyID4+PiAwXSwgQWE6IEpbZCArIDM2ID4+IDIgPj4+IDBdLCBEYTogdSA/IFModSkgOiBcIlwiIH07XG4gICAgICAgICAgICBjID0gUyhjKTtcbiAgICAgICAgICAgIHUgPSB7XG4gICAgICAgICAgICAgIFwiJWNcIjogXCIlYSAlYiAlZCAlSDolTTolUyAlWVwiLFxuICAgICAgICAgICAgICBcIiVEXCI6IFwiJW0vJWQvJXlcIixcbiAgICAgICAgICAgICAgXCIlRlwiOiBcIiVZLSVtLSVkXCIsXG4gICAgICAgICAgICAgIFwiJWhcIjogXCIlYlwiLFxuICAgICAgICAgICAgICBcIiVyXCI6IFwiJUk6JU06JVMgJXBcIixcbiAgICAgICAgICAgICAgXCIlUlwiOiBcIiVIOiVNXCIsXG4gICAgICAgICAgICAgIFwiJVRcIjogXCIlSDolTTolU1wiLFxuICAgICAgICAgICAgICBcIiV4XCI6IFwiJW0vJWQvJXlcIixcbiAgICAgICAgICAgICAgXCIlWFwiOiBcIiVIOiVNOiVTXCIsXG4gICAgICAgICAgICAgIFwiJUVjXCI6IFwiJWNcIixcbiAgICAgICAgICAgICAgXCIlRUNcIjogXCIlQ1wiLFxuICAgICAgICAgICAgICBcIiVFeFwiOiBcIiVtLyVkLyV5XCIsXG4gICAgICAgICAgICAgIFwiJUVYXCI6IFwiJUg6JU06JVNcIixcbiAgICAgICAgICAgICAgXCIlRXlcIjogXCIleVwiLFxuICAgICAgICAgICAgICBcIiVFWVwiOiBcIiVZXCIsXG4gICAgICAgICAgICAgIFwiJU9kXCI6IFwiJWRcIixcbiAgICAgICAgICAgICAgXCIlT2VcIjogXCIlZVwiLFxuICAgICAgICAgICAgICBcIiVPSFwiOiBcIiVIXCIsXG4gICAgICAgICAgICAgIFwiJU9JXCI6IFwiJUlcIixcbiAgICAgICAgICAgICAgXCIlT21cIjogXCIlbVwiLFxuICAgICAgICAgICAgICBcIiVPTVwiOiBcIiVNXCIsXG4gICAgICAgICAgICAgIFwiJU9TXCI6IFwiJVNcIixcbiAgICAgICAgICAgICAgXCIlT3VcIjogXCIldVwiLFxuICAgICAgICAgICAgICBcIiVPVVwiOiBcIiVVXCIsXG4gICAgICAgICAgICAgIFwiJU9WXCI6IFwiJVZcIixcbiAgICAgICAgICAgICAgXCIlT3dcIjogXCIld1wiLFxuICAgICAgICAgICAgICBcIiVPV1wiOiBcIiVXXCIsXG4gICAgICAgICAgICAgIFwiJU95XCI6IFwiJXlcIlxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIHYgaW4gdSlcbiAgICAgICAgICAgICAgYyA9IGMucmVwbGFjZShuZXcgUmVnRXhwKHYsIFwiZ1wiKSwgdVt2XSk7XG4gICAgICAgICAgICB2YXIgQmEgPSBcIlN1bmRheSBNb25kYXkgVHVlc2RheSBXZWRuZXNkYXkgVGh1cnNkYXkgRnJpZGF5IFNhdHVyZGF5XCIuc3BsaXQoXCIgXCIpLCBDYSA9IFwiSmFudWFyeSBGZWJydWFyeSBNYXJjaCBBcHJpbCBNYXkgSnVuZSBKdWx5IEF1Z3VzdCBTZXB0ZW1iZXIgT2N0b2JlciBOb3ZlbWJlciBEZWNlbWJlclwiLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgIHUgPSB7IFwiJWFcIjogKGYpID0+IEJhW2Yuc2FdLnN1YnN0cmluZygwLCAzKSwgXCIlQVwiOiAoZikgPT4gQmFbZi5zYV0sIFwiJWJcIjogKGYpID0+IENhW2Yud2FdLnN1YnN0cmluZygwLCAzKSwgXCIlQlwiOiAoZikgPT4gQ2FbZi53YV0sIFwiJUNcIjogKGYpID0+IGgoKGYudWEgKyAxOTAwKSAvIDEwMCB8IDAsIDIpLCBcIiVkXCI6IChmKSA9PiBoKGYueWEsIDIpLCBcIiVlXCI6IChmKSA9PiBnKGYueWEsIDIsIFwiIFwiKSwgXCIlZ1wiOiAoZikgPT4gdChmKS50b1N0cmluZygpLnN1YnN0cmluZygyKSwgXCIlR1wiOiAoZikgPT4gdChmKSwgXCIlSFwiOiAoZikgPT4gaChmLnZhLCAyKSwgXCIlSVwiOiAoZikgPT4ge1xuICAgICAgICAgICAgICBmID0gZi52YTtcbiAgICAgICAgICAgICAgMCA9PSBmID8gZiA9IDEyIDogMTIgPCBmICYmIChmIC09IDEyKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGgoZiwgMik7XG4gICAgICAgICAgICB9LCBcIiVqXCI6IChmKSA9PiB7XG4gICAgICAgICAgICAgIGZvciAodmFyIG4gPSAwLCBxID0gMDsgcSA8PSBmLndhIC0gMTsgbiArPSAoVihmLnVhICsgMTkwMCkgPyBIYSA6IElhKVtxKytdKVxuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgcmV0dXJuIGgoZi55YSArIG4sIDMpO1xuICAgICAgICAgICAgfSwgXCIlbVwiOiAoZikgPT4gaChmLndhICsgMSwgMiksIFwiJU1cIjogKGYpID0+IGgoZi5CYSwgMiksIFwiJW5cIjogKCkgPT4gXCJcXG5cIiwgXCIlcFwiOiAoZikgPT4gMCA8PSBmLnZhICYmIDEyID4gZi52YSA/IFwiQU1cIiA6IFwiUE1cIiwgXCIlU1wiOiAoZikgPT4gaChmLkNhLCAyKSwgXCIldFwiOiAoKSA9PiBcIlx0XCIsIFwiJXVcIjogKGYpID0+IGYuc2EgfHwgNywgXCIlVVwiOiAoZikgPT4gaChNYXRoLmZsb29yKChmLnRhICsgNyAtIGYuc2EpIC8gNyksIDIpLCBcIiVWXCI6IChmKSA9PiB7XG4gICAgICAgICAgICAgIHZhciBuID0gTWF0aC5mbG9vcigoZi50YSArIDcgLSAoZi5zYSArIDYpICUgNykgLyA3KTtcbiAgICAgICAgICAgICAgMiA+PSAoZi5zYSArIDM3MSAtIGYudGEgLSAyKSAlIDcgJiYgbisrO1xuICAgICAgICAgICAgICBpZiAobilcbiAgICAgICAgICAgICAgICA1MyA9PSBuICYmIChxID0gKGYuc2EgKyAzNzEgLSBmLnRhKSAlIDcsIDQgPT0gcSB8fCAzID09IHEgJiYgVihmLnVhKSB8fCAobiA9IDEpKTtcbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbiA9IDUyO1xuICAgICAgICAgICAgICAgIHZhciBxID0gKGYuc2EgKyA3IC0gZi50YSAtIDEpICUgNztcbiAgICAgICAgICAgICAgICAoNCA9PSBxIHx8IDUgPT0gcSAmJiBWKGYudWEgJSA0MDAgLSAxKSkgJiYgbisrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBoKG4sIDIpO1xuICAgICAgICAgICAgfSwgXCIld1wiOiAoZikgPT4gZi5zYSwgXCIlV1wiOiAoZikgPT4gaChNYXRoLmZsb29yKChmLnRhICsgNyAtIChmLnNhICsgNikgJSA3KSAvIDcpLCAyKSwgXCIleVwiOiAoZikgPT4gKGYudWEgKyAxOTAwKS50b1N0cmluZygpLnN1YnN0cmluZygyKSwgXCIlWVwiOiAoZikgPT4gZi51YSArIDE5MDAsIFwiJXpcIjogKGYpID0+IHtcbiAgICAgICAgICAgICAgZiA9IGYuQWE7XG4gICAgICAgICAgICAgIHZhciBuID0gMCA8PSBmO1xuICAgICAgICAgICAgICBmID0gTWF0aC5hYnMoZikgLyA2MDtcbiAgICAgICAgICAgICAgcmV0dXJuIChuID8gXCIrXCIgOiBcIi1cIikgKyBTdHJpbmcoXCIwMDAwXCIgKyAoZiAvIDYwICogMTAwICsgZiAlIDYwKSkuc2xpY2UoLTQpO1xuICAgICAgICAgICAgfSwgXCIlWlwiOiAoZikgPT4gZi5EYSwgXCIlJVwiOiAoKSA9PiBcIiVcIiB9O1xuICAgICAgICAgICAgYyA9IGMucmVwbGFjZSgvJSUvZywgXCJcXDBcXDBcIik7XG4gICAgICAgICAgICBmb3IgKHYgaW4gdSlcbiAgICAgICAgICAgICAgYy5pbmNsdWRlcyh2KSAmJiAoYyA9IGMucmVwbGFjZShuZXcgUmVnRXhwKHYsIFwiZ1wiKSwgdVt2XShkKSkpO1xuICAgICAgICAgICAgYyA9IGMucmVwbGFjZSgvXFwwXFwwL2csIFwiJVwiKTtcbiAgICAgICAgICAgIHYgPSBKYShjKTtcbiAgICAgICAgICAgIGlmICh2Lmxlbmd0aCA+IGIpXG4gICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgSC5zZXQodiwgYSA+Pj4gMCk7XG4gICAgICAgICAgICByZXR1cm4gdi5sZW5ndGggLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgWCA9IFtdLCBZID0gdm9pZCAwLCBMYSA9IFtdO1xuICAgICAgICAgIGZ1bmN0aW9uIE1hKGEsIGIpIHtcbiAgICAgICAgICAgIGlmICghWSkge1xuICAgICAgICAgICAgICBZID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG4gICAgICAgICAgICAgIHZhciBjID0gTC5sZW5ndGg7XG4gICAgICAgICAgICAgIGlmIChZKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBkIDwgMCArIGM7IGQrKykge1xuICAgICAgICAgICAgICAgICAgdmFyIGcgPSBkO1xuICAgICAgICAgICAgICAgICAgdmFyIGggPSBYW2ddO1xuICAgICAgICAgICAgICAgICAgaCB8fCAoZyA+PSBYLmxlbmd0aCAmJiAoWC5sZW5ndGggPSBnICsgMSksIFhbZ10gPSBoID0gTC5nZXQoZykpO1xuICAgICAgICAgICAgICAgICAgKGcgPSBoKSAmJiBZLnNldChnLCBkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA9IFkuZ2V0KGEpIHx8IDApXG4gICAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgICAgaWYgKExhLmxlbmd0aClcbiAgICAgICAgICAgICAgYyA9IExhLnBvcCgpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgTC5ncm93KDEpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEocCBpbnN0YW5jZW9mIFJhbmdlRXJyb3IpKVxuICAgICAgICAgICAgICAgICAgdGhyb3cgcDtcbiAgICAgICAgICAgICAgICB0aHJvdyBcIlVuYWJsZSB0byBncm93IHdhc20gdGFibGUuIFNldCBBTExPV19UQUJMRV9HUk9XVEguXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYyA9IEwubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGQgPSBjLCBMLnNldChkLCBhKSwgWFtkXSA9IEwuZ2V0KGQpO1xuICAgICAgICAgICAgfSBjYXRjaCAocCkge1xuICAgICAgICAgICAgICBpZiAoIShwIGluc3RhbmNlb2YgVHlwZUVycm9yKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBwO1xuICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBXZWJBc3NlbWJseS5GdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIGQgPSBXZWJBc3NlbWJseS5GdW5jdGlvbjtcbiAgICAgICAgICAgICAgICBnID0geyBpOiBcImkzMlwiLCBqOiBcImk2NFwiLCBmOiBcImYzMlwiLCBkOiBcImY2NFwiLCBwOiBcImkzMlwiIH07XG4gICAgICAgICAgICAgICAgaCA9IHsgcGFyYW1ldGVyczogW10sIHJlc3VsdHM6IFwidlwiID09IGJbMF0gPyBbXSA6IFtnW2JbMF1dXSB9O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAxOyBrIDwgYi5sZW5ndGg7ICsraylcbiAgICAgICAgICAgICAgICAgIGgucGFyYW1ldGVycy5wdXNoKGdbYltrXV0pO1xuICAgICAgICAgICAgICAgIGIgPSBuZXcgZChoLCBhKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkID0gWzFdO1xuICAgICAgICAgICAgICAgIGcgPSBiLnNsaWNlKDAsIDEpO1xuICAgICAgICAgICAgICAgIGIgPSBiLnNsaWNlKDEpO1xuICAgICAgICAgICAgICAgIGggPSB7IGk6IDEyNywgcDogMTI3LCBqOiAxMjYsIGY6IDEyNSwgZDogMTI0IH07XG4gICAgICAgICAgICAgICAgZC5wdXNoKDk2KTtcbiAgICAgICAgICAgICAgICBrID0gYi5sZW5ndGg7XG4gICAgICAgICAgICAgICAgMTI4ID4gayA/IGQucHVzaChrKSA6IGQucHVzaChrICUgMTI4IHwgMTI4LCBrID4+IDcpO1xuICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBiLmxlbmd0aDsgKytrKVxuICAgICAgICAgICAgICAgICAgZC5wdXNoKGhbYltrXV0pO1xuICAgICAgICAgICAgICAgIFwidlwiID09IGcgPyBkLnB1c2goMCkgOiBkLnB1c2goMSwgaFtnXSk7XG4gICAgICAgICAgICAgICAgYiA9IFswLCA5NywgMTE1LCAxMDksIDEsIDAsIDAsIDAsIDFdO1xuICAgICAgICAgICAgICAgIGcgPSBkLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAxMjggPiBnID8gYi5wdXNoKGcpIDogYi5wdXNoKGcgJSAxMjggfCAxMjgsIGcgPj4gNyk7XG4gICAgICAgICAgICAgICAgYi5wdXNoLmFwcGx5KGIsIGQpO1xuICAgICAgICAgICAgICAgIGIucHVzaChcbiAgICAgICAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAgICAgICA3LFxuICAgICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAgICAgICAxMDEsXG4gICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgMTAyLFxuICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgICA3LFxuICAgICAgICAgICAgICAgICAgNSxcbiAgICAgICAgICAgICAgICAgIDEsXG4gICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgMTAyLFxuICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGIgPSBuZXcgV2ViQXNzZW1ibHkuTW9kdWxlKG5ldyBVaW50OEFycmF5KGIpKTtcbiAgICAgICAgICAgICAgICBiID0gbmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKGIsIHsgZTogeyBmOiBhIH0gfSkuZXhwb3J0cy5mO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGQgPSBjO1xuICAgICAgICAgICAgICBMLnNldChkLCBiKTtcbiAgICAgICAgICAgICAgWFtkXSA9IEwuZ2V0KGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgWS5zZXQoYSwgYyk7XG4gICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIE9hID0ge1xuICAgICAgICAgICAgYTogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgbmV3IHNhKGEpLnphKGIgPj4+IDAsIGMgPj4+IDApO1xuICAgICAgICAgICAgICB0YSA9IGE7XG4gICAgICAgICAgICAgIHVhKys7XG4gICAgICAgICAgICAgIHRocm93IHRhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBIOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB6OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBKOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgRjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgQTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgRTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgRzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbDogKCkgPT4gdHJ1ZSxcbiAgICAgICAgICAgIG86IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgYSA9IGIgKyAyMDk3MTUyID4+PiAwIDwgNDE5NDMwNSAtICEhYSA/IChhID4+PiAwKSArIDQyOTQ5NjcyOTYgKiBiIDogTmFOO1xuICAgICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgICAgYSA9IG5ldyBEYXRlKDFlMyAqIGEpO1xuICAgICAgICAgICAgICBKW2MgPj4gMiA+Pj4gMF0gPSBhLmdldFVUQ1NlY29uZHMoKTtcbiAgICAgICAgICAgICAgSltjICsgNCA+PiAyID4+PiAwXSA9IGEuZ2V0VVRDTWludXRlcygpO1xuICAgICAgICAgICAgICBKW2MgKyA4ID4+IDIgPj4+IDBdID0gYS5nZXRVVENIb3VycygpO1xuICAgICAgICAgICAgICBKW2MgKyAxMiA+PiAyID4+PiAwXSA9IGEuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICAgICAgICBKW2MgKyAxNiA+PiAyID4+PiAwXSA9IGEuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICAgICAgSltjICsgMjAgPj4gMiA+Pj4gMF0gPSBhLmdldFVUQ0Z1bGxZZWFyKCkgLSAxOTAwO1xuICAgICAgICAgICAgICBKW2MgKyAyNCA+PiAyID4+PiAwXSA9IGEuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgICAgIEpbYyArIDI4ID4+IDIgPj4+IDBdID0gKGEuZ2V0VGltZSgpIC0gRGF0ZS5VVEMoYS5nZXRVVENGdWxsWWVhcigpLCAwLCAxLCAwLCAwLCAwLCAwKSkgLyA4NjRlNSB8IDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcDogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICBhID0gYiArIDIwOTcxNTIgPj4+IDAgPCA0MTk0MzA1IC0gISFhID8gKGEgPj4+IDApICsgNDI5NDk2NzI5NiAqIGIgOiBOYU47XG4gICAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgICBhID0gbmV3IERhdGUoMWUzICogYSk7XG4gICAgICAgICAgICAgIEpbYyA+PiAyID4+PiAwXSA9IGEuZ2V0U2Vjb25kcygpO1xuICAgICAgICAgICAgICBKW2MgKyA0ID4+IDIgPj4+IDBdID0gYS5nZXRNaW51dGVzKCk7XG4gICAgICAgICAgICAgIEpbYyArIDggPj4gMiA+Pj4gMF0gPSBhLmdldEhvdXJzKCk7XG4gICAgICAgICAgICAgIEpbYyArIDEyID4+IDIgPj4+IDBdID0gYS5nZXREYXRlKCk7XG4gICAgICAgICAgICAgIEpbYyArIDE2ID4+IDIgPj4+IDBdID0gYS5nZXRNb250aCgpO1xuICAgICAgICAgICAgICBKW2MgKyAyMCA+PiAyID4+PiAwXSA9IGEuZ2V0RnVsbFllYXIoKSAtIDE5MDA7XG4gICAgICAgICAgICAgIEpbYyArIDI0ID4+IDIgPj4+IDBdID0gYS5nZXREYXkoKTtcbiAgICAgICAgICAgICAgSltjICsgMjggPj4gMiA+Pj4gMF0gPSAoVihhLmdldEZ1bGxZZWFyKCkpID8geGEgOiB5YSlbYS5nZXRNb250aCgpXSArIGEuZ2V0RGF0ZSgpIC0gMSB8IDA7XG4gICAgICAgICAgICAgIEpbYyArIDM2ID4+IDIgPj4+IDBdID0gLSg2MCAqIGEuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgICAgICAgICAgIGIgPSBuZXcgRGF0ZShhLmdldEZ1bGxZZWFyKCksIDYsIDEpLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLCAwLCAxKS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgICBKW2MgKyAzMiA+PiAyID4+PiAwXSA9IChiICE9IGQgJiYgYS5nZXRUaW1lem9uZU9mZnNldCgpID09IE1hdGgubWluKGQsIGIpKSB8IDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcTogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgdmFyIGIgPSBuZXcgRGF0ZShKW2EgKyAyMCA+PiAyID4+PiAwXSArIDE5MDAsIEpbYSArIDE2ID4+IDIgPj4+IDBdLCBKW2EgKyAxMiA+PiAyID4+PiAwXSwgSlthICsgOCA+PiAyID4+PiAwXSwgSlthICsgNCA+PiAyID4+PiAwXSwgSlthID4+IDIgPj4+IDBdLCAwKSwgYyA9IEpbYSArIDMyID4+IDIgPj4+IDBdLCBkID0gYi5nZXRUaW1lem9uZU9mZnNldCgpLCBnID0gbmV3IERhdGUoYi5nZXRGdWxsWWVhcigpLCA2LCAxKS5nZXRUaW1lem9uZU9mZnNldCgpLCBoID0gbmV3IERhdGUoYi5nZXRGdWxsWWVhcigpLCAwLCAxKS5nZXRUaW1lem9uZU9mZnNldCgpLCBrID0gTWF0aC5taW4oaCwgZyk7XG4gICAgICAgICAgICAgIDAgPiBjID8gSlthICsgMzIgPj4gMiA+Pj4gMF0gPSBOdW1iZXIoZyAhPSBoICYmIGsgPT0gZCkgOiAwIDwgYyAhPSAoayA9PSBkKSAmJiAoZyA9IE1hdGgubWF4KGgsIGcpLCBiLnNldFRpbWUoYi5nZXRUaW1lKCkgKyA2ZTQgKiAoKDAgPCBjID8gayA6IGcpIC0gZCkpKTtcbiAgICAgICAgICAgICAgSlthICsgMjQgPj4gMiA+Pj4gMF0gPSBiLmdldERheSgpO1xuICAgICAgICAgICAgICBKW2EgKyAyOCA+PiAyID4+PiAwXSA9IChWKGIuZ2V0RnVsbFllYXIoKSkgPyB4YSA6IHlhKVtiLmdldE1vbnRoKCldICsgYi5nZXREYXRlKCkgLSAxIHwgMDtcbiAgICAgICAgICAgICAgSlthID4+IDIgPj4+IDBdID0gYi5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICAgIEpbYSArIDQgPj4gMiA+Pj4gMF0gPSBiLmdldE1pbnV0ZXMoKTtcbiAgICAgICAgICAgICAgSlthICsgOCA+PiAyID4+PiAwXSA9IGIuZ2V0SG91cnMoKTtcbiAgICAgICAgICAgICAgSlthICsgMTIgPj4gMiA+Pj4gMF0gPSBiLmdldERhdGUoKTtcbiAgICAgICAgICAgICAgSlthICsgMTYgPj4gMiA+Pj4gMF0gPSBiLmdldE1vbnRoKCk7XG4gICAgICAgICAgICAgIEpbYSArIDIwID4+IDIgPj4+IDBdID0gYi5nZXRZZWFyKCk7XG4gICAgICAgICAgICAgIGEgPSBiLmdldFRpbWUoKSAvIDFlMztcbiAgICAgICAgICAgICAgcmV0dXJuIE5hKChRID0gYSwgMSA8PSArTWF0aC5hYnMoUSkgPyAwIDwgUSA/ICtNYXRoLmZsb29yKFEgLyA0Mjk0OTY3Mjk2KSA+Pj4gMCA6IH5+K01hdGguY2VpbCgoUSAtICsofn5RID4+PiAwKSkgLyA0Mjk0OTY3Mjk2KSA+Pj4gMCA6IDApKSwgYSA+Pj4gMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIC01MjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0OiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGQodCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAodCA9IHQudG9UaW1lU3RyaW5nKCkubWF0Y2goL1xcKChbQS1aYS16IF0rKVxcKSQvKSkgPyB0WzFdIDogXCJHTVRcIjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgICAgdmFyIGcgPSAoLyogQF9fUFVSRV9fICovIG5ldyBEYXRlKCkpLmdldEZ1bGxZZWFyKCksIGggPSBuZXcgRGF0ZShnLCAwLCAxKSwgayA9IG5ldyBEYXRlKGcsIDYsIDEpO1xuICAgICAgICAgICAgICBnID0gaC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgICB2YXIgcCA9IGsuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgICAgS1thID4+PiAwID4+IDIgPj4+IDBdID0gNjAgKiBNYXRoLm1heChnLCBwKTtcbiAgICAgICAgICAgICAgSltiID4+PiAwID4+IDIgPj4+IDBdID0gTnVtYmVyKGcgIT0gcCk7XG4gICAgICAgICAgICAgIGEgPSBkKGgpO1xuICAgICAgICAgICAgICBiID0gZChrKTtcbiAgICAgICAgICAgICAgYSA9IERhKGEpO1xuICAgICAgICAgICAgICBiID0gRGEoYik7XG4gICAgICAgICAgICAgIHAgPCBnID8gKEtbYyA+PiAyID4+PiAwXSA9IGEsIEtbYyArIDQgPj4gMiA+Pj4gMF0gPSBiKSA6IChLW2MgPj4gMiA+Pj4gMF0gPSBiLCBLW2MgKyA0ID4+IDIgPj4+IDBdID0gYSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZDogKCkgPT4ge1xuICAgICAgICAgICAgICBFKFwiXCIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDQyOTQ5MDE3NjA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYjogKCkgPT4gcGVyZm9ybWFuY2Uubm93KCksXG4gICAgICAgICAgICBJOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgICByZXR1cm4gSS5jb3B5V2l0aGluKGEgPj4+IDAgPj4+IDAsIGIgPj4+IDAsIGIgKyAoYyA+Pj4gMCkgPj4+IDApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHM6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIHZhciBiID0gSS5sZW5ndGg7XG4gICAgICAgICAgICAgIGlmICg0Mjk0OTAxNzYwIDwgYSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIGZvciAodmFyIGMgPSAxOyA0ID49IGM7IGMgKj0gMikge1xuICAgICAgICAgICAgICAgIHZhciBkID0gYiAqICgxICsgMC4yIC8gYyk7XG4gICAgICAgICAgICAgICAgZCA9IE1hdGgubWluKGQsIGEgKyAxMDA2NjMyOTYpO1xuICAgICAgICAgICAgICAgIHZhciBnID0gTWF0aDtcbiAgICAgICAgICAgICAgICBkID0gTWF0aC5tYXgoYSwgZCk7XG4gICAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgICAgZyA9IGcubWluLmNhbGwoZywgNDI5NDkwMTc2MCwgZCArICg2NTUzNiAtIGQgJSA2NTUzNikgJSA2NTUzNikgLSBGLmJ1ZmZlci5ieXRlTGVuZ3RoICsgNjU1MzUgPj4+IDE2O1xuICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgRi5ncm93KGcpO1xuICAgICAgICAgICAgICAgICAgICBoYSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgICB9IGNhdGNoIChrKSB7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBoID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaClcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBDOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgICAgdmFyIGMgPSAwO1xuICAgICAgICAgICAgICBGYSgpLmZvckVhY2goZnVuY3Rpb24oZCwgZykge1xuICAgICAgICAgICAgICAgIHZhciBoID0gYiArIGM7XG4gICAgICAgICAgICAgICAgZyA9IEtbYSArIDQgKiBnID4+IDIgPj4+IDBdID0gaDtcbiAgICAgICAgICAgICAgICBmb3IgKGggPSAwOyBoIDwgZC5sZW5ndGg7ICsraClcbiAgICAgICAgICAgICAgICAgIEhbZysrID4+IDAgPj4+IDBdID0gZC5jaGFyQ29kZUF0KGgpO1xuICAgICAgICAgICAgICAgIEhbZyA+PiAwID4+PiAwXSA9IDA7XG4gICAgICAgICAgICAgICAgYyArPSBkLmxlbmd0aCArIDE7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBEOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgICAgdmFyIGMgPSBGYSgpO1xuICAgICAgICAgICAgICBLW2EgPj4gMiA+Pj4gMF0gPSBjLmxlbmd0aDtcbiAgICAgICAgICAgICAgdmFyIGQgPSAwO1xuICAgICAgICAgICAgICBjLmZvckVhY2goZnVuY3Rpb24oZykge1xuICAgICAgICAgICAgICAgIGQgKz0gZy5sZW5ndGggKyAxO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgS1tiID4+IDIgPj4+IDBdID0gZDtcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZjogKCkgPT4gNTIsXG4gICAgICAgICAgICBrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDUyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gNzA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgajogZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICAgIGQgPj4+PSAwO1xuICAgICAgICAgICAgICBmb3IgKHZhciBnID0gMCwgaCA9IDA7IGggPCBjOyBoKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgayA9IEtbYiA+PiAyID4+PiAwXSwgcCA9IEtbYiArIDQgPj4gMiA+Pj4gMF07XG4gICAgICAgICAgICAgICAgYiArPSA4O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgcDsgdCsrKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdSA9IElbayArIHQgPj4+IDBdLCB2ID0gR2FbYV07XG4gICAgICAgICAgICAgICAgICAwID09PSB1IHx8IDEwID09PSB1ID8gKCgxID09PSBhID8gZWEgOiBDKSh3YSh2LCAwKSksIHYubGVuZ3RoID0gMCkgOiB2LnB1c2godSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGcgKz0gcDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBLW2QgPj4gMiA+Pj4gMF0gPSBnO1xuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBCOiBLYSxcbiAgICAgICAgICAgIGM6IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIEthKGEgPj4+IDAsIGIgPj4+IDAsIGMgPj4+IDAsIGQgPj4+IDApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGk6IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgICAgY29uc3QgZyA9IEwubGVuZ3RoO1xuICAgICAgICAgICAgICBhID0gbmV3IFVpbnQ4QXJyYXkoSS5zbGljZShhICsgYiwgYSArIGMpKTtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgaCA9IG5ldyBXZWJBc3NlbWJseS5Nb2R1bGUoYSksIGsgPSBuZXcgV2ViQXNzZW1ibHkuSW5zdGFuY2UoaCwgeyBlbnY6IHsgbWVtb3J5OiBGIH0gfSksIHA7XG4gICAgICAgICAgICAgICAgZm9yIChwIGluIGsuZXhwb3J0cylcbiAgICAgICAgICAgICAgICAgIE1hKGsuZXhwb3J0c1twXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGcgPCBMLmxlbmd0aCA/IGcgOiBkO1xuICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKHQpLCBkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBhKGMpIHtcbiAgICAgICAgICAgICAgYyA9IGMuZXhwb3J0cztcbiAgICAgICAgICAgICAgRyA9IGMgPSBQYShjKTtcbiAgICAgICAgICAgICAgRiA9IEcuSztcbiAgICAgICAgICAgICAgaGEoKTtcbiAgICAgICAgICAgICAgTCA9IEcubmE7XG4gICAgICAgICAgICAgIGphLnVuc2hpZnQoRy5MKTtcbiAgICAgICAgICAgICAgTS0tO1xuICAgICAgICAgICAgICBlLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMgJiYgZS5tb25pdG9yUnVuRGVwZW5kZW5jaWVzKE0pO1xuICAgICAgICAgICAgICBpZiAoMCA9PSBNICYmIChudWxsICE9PSBOICYmIChjbGVhckludGVydmFsKE4pLCBOID0gbnVsbCksIE8pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGQgPSBPO1xuICAgICAgICAgICAgICAgIE8gPSBudWxsO1xuICAgICAgICAgICAgICAgIGQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBiID0geyBhOiBPYSB9O1xuICAgICAgICAgICAgTSsrO1xuICAgICAgICAgICAgZS5tb25pdG9yUnVuRGVwZW5kZW5jaWVzICYmIGUubW9uaXRvclJ1bkRlcGVuZGVuY2llcyhNKTtcbiAgICAgICAgICAgIGlmIChlLmluc3RhbnRpYXRlV2FzbSlcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5pbnN0YW50aWF0ZVdhc20oYiwgYSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGMpIHtcbiAgICAgICAgICAgICAgICBDKFwiTW9kdWxlLmluc3RhbnRpYXRlV2FzbSBjYWxsYmFjayBmYWlsZWQgd2l0aCBlcnJvcjogXCIgKyBjKSwgbChjKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmEoYiwgZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgICBhKGMuaW5zdGFuY2UpO1xuICAgICAgICAgICAgfSkuY2F0Y2gobCk7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgICAgfSkoKTtcbiAgICAgICAgICBlLl9PcnRJbml0ID0gKGEsIGIpID0+IChlLl9PcnRJbml0ID0gRy5NKShhLCBiKTtcbiAgICAgICAgICBlLl9PcnRHZXRMYXN0RXJyb3IgPSAoYSwgYikgPT4gKGUuX09ydEdldExhc3RFcnJvciA9IEcuTikoYSwgYik7XG4gICAgICAgICAgZS5fT3J0Q3JlYXRlU2Vzc2lvbk9wdGlvbnMgPSAoYSwgYiwgYywgZCwgZywgaCwgaywgcCwgdCwgdSkgPT4gKGUuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zID0gRy5PKShhLCBiLCBjLCBkLCBnLCBoLCBrLCBwLCB0LCB1KTtcbiAgICAgICAgICBlLl9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlciA9IChhLCBiKSA9PiAoZS5fT3J0QXBwZW5kRXhlY3V0aW9uUHJvdmlkZXIgPSBHLlApKGEsIGIpO1xuICAgICAgICAgIGUuX09ydEFkZEZyZWVEaW1lbnNpb25PdmVycmlkZSA9IChhLCBiLCBjKSA9PiAoZS5fT3J0QWRkRnJlZURpbWVuc2lvbk92ZXJyaWRlID0gRy5RKShhLCBiLCBjKTtcbiAgICAgICAgICBlLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkgPSAoYSwgYiwgYykgPT4gKGUuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeSA9IEcuUikoYSwgYiwgYyk7XG4gICAgICAgICAgZS5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zID0gKGEpID0+IChlLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnMgPSBHLlMpKGEpO1xuICAgICAgICAgIGUuX09ydENyZWF0ZVNlc3Npb24gPSAoYSwgYiwgYykgPT4gKGUuX09ydENyZWF0ZVNlc3Npb24gPSBHLlQpKGEsIGIsIGMpO1xuICAgICAgICAgIGUuX09ydFJlbGVhc2VTZXNzaW9uID0gKGEpID0+IChlLl9PcnRSZWxlYXNlU2Vzc2lvbiA9IEcuVSkoYSk7XG4gICAgICAgICAgZS5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudCA9IChhLCBiLCBjKSA9PiAoZS5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudCA9IEcuVikoYSwgYiwgYyk7XG4gICAgICAgICAgZS5fT3J0R2V0SW5wdXROYW1lID0gKGEsIGIpID0+IChlLl9PcnRHZXRJbnB1dE5hbWUgPSBHLlcpKGEsIGIpO1xuICAgICAgICAgIGUuX09ydEdldE91dHB1dE5hbWUgPSAoYSwgYikgPT4gKGUuX09ydEdldE91dHB1dE5hbWUgPSBHLlgpKGEsIGIpO1xuICAgICAgICAgIGUuX09ydEZyZWUgPSAoYSkgPT4gKGUuX09ydEZyZWUgPSBHLlkpKGEpO1xuICAgICAgICAgIGUuX09ydENyZWF0ZVRlbnNvciA9IChhLCBiLCBjLCBkLCBnLCBoKSA9PiAoZS5fT3J0Q3JlYXRlVGVuc29yID0gRy5aKShhLCBiLCBjLCBkLCBnLCBoKTtcbiAgICAgICAgICBlLl9PcnRHZXRUZW5zb3JEYXRhID0gKGEsIGIsIGMsIGQsIGcpID0+IChlLl9PcnRHZXRUZW5zb3JEYXRhID0gRy5fKShhLCBiLCBjLCBkLCBnKTtcbiAgICAgICAgICBlLl9PcnRSZWxlYXNlVGVuc29yID0gKGEpID0+IChlLl9PcnRSZWxlYXNlVGVuc29yID0gRy4kKShhKTtcbiAgICAgICAgICBlLl9PcnRDcmVhdGVSdW5PcHRpb25zID0gKGEsIGIsIGMsIGQpID0+IChlLl9PcnRDcmVhdGVSdW5PcHRpb25zID0gRy5hYSkoYSwgYiwgYywgZCk7XG4gICAgICAgICAgZS5fT3J0QWRkUnVuQ29uZmlnRW50cnkgPSAoYSwgYiwgYykgPT4gKGUuX09ydEFkZFJ1bkNvbmZpZ0VudHJ5ID0gRy5iYSkoYSwgYiwgYyk7XG4gICAgICAgICAgZS5fT3J0UmVsZWFzZVJ1bk9wdGlvbnMgPSAoYSkgPT4gKGUuX09ydFJlbGVhc2VSdW5PcHRpb25zID0gRy5jYSkoYSk7XG4gICAgICAgICAgZS5fT3J0Q3JlYXRlQmluZGluZyA9IChhKSA9PiAoZS5fT3J0Q3JlYXRlQmluZGluZyA9IEcuZGEpKGEpO1xuICAgICAgICAgIGUuX09ydEJpbmRJbnB1dCA9IChhLCBiLCBjKSA9PiAoZS5fT3J0QmluZElucHV0ID0gRy5lYSkoYSwgYiwgYyk7XG4gICAgICAgICAgZS5fT3J0QmluZE91dHB1dCA9IChhLCBiLCBjLCBkKSA9PiAoZS5fT3J0QmluZE91dHB1dCA9IEcuZmEpKGEsIGIsIGMsIGQpO1xuICAgICAgICAgIGUuX09ydENsZWFyQm91bmRPdXRwdXRzID0gKGEpID0+IChlLl9PcnRDbGVhckJvdW5kT3V0cHV0cyA9IEcuZ2EpKGEpO1xuICAgICAgICAgIGUuX09ydFJlbGVhc2VCaW5kaW5nID0gKGEpID0+IChlLl9PcnRSZWxlYXNlQmluZGluZyA9IEcuaGEpKGEpO1xuICAgICAgICAgIGUuX09ydFJ1bldpdGhCaW5kaW5nID0gKGEsIGIsIGMsIGQsIGcpID0+IChlLl9PcnRSdW5XaXRoQmluZGluZyA9IEcuaWEpKGEsIGIsIGMsIGQsIGcpO1xuICAgICAgICAgIGUuX09ydFJ1biA9IChhLCBiLCBjLCBkLCBnLCBoLCBrLCBwKSA9PiAoZS5fT3J0UnVuID0gRy5qYSkoYSwgYiwgYywgZCwgZywgaCwgaywgcCk7XG4gICAgICAgICAgZS5fT3J0RW5kUHJvZmlsaW5nID0gKGEpID0+IChlLl9PcnRFbmRQcm9maWxpbmcgPSBHLmthKShhKTtcbiAgICAgICAgICB2YXIgemEgPSBlLl9tYWxsb2MgPSAoYSkgPT4gKHphID0gZS5fbWFsbG9jID0gRy5sYSkoYSk7XG4gICAgICAgICAgZS5fZnJlZSA9IChhKSA9PiAoZS5fZnJlZSA9IEcubWEpKGEpO1xuICAgICAgICAgIHZhciBOYSA9IChhKSA9PiAoTmEgPSBHLm9hKShhKSwgUWEgPSAoKSA9PiAoUWEgPSBHLnBhKSgpLCBSYSA9IChhKSA9PiAoUmEgPSBHLnFhKShhKSwgU2EgPSAoYSkgPT4gKFNhID0gRy5yYSkoYSk7XG4gICAgICAgICAgZS5fX19zdGFydF9lbV9qcyA9IDkwNTYwMDtcbiAgICAgICAgICBlLl9fX3N0b3BfZW1fanMgPSA5MDYyMTI7XG4gICAgICAgICAgZnVuY3Rpb24gUGEoYSkge1xuICAgICAgICAgICAgYSA9IE9iamVjdC5hc3NpZ24oe30sIGEpO1xuICAgICAgICAgICAgdmFyIGIgPSAoZCkgPT4gKCkgPT4gZCgpID4+PiAwLCBjID0gKGQpID0+IChnKSA9PiBkKGcpID4+PiAwO1xuICAgICAgICAgICAgYS5fX2Vycm5vX2xvY2F0aW9uID0gYihhLl9fZXJybm9fbG9jYXRpb24pO1xuICAgICAgICAgICAgYS5tYWxsb2MgPSBjKGEubWFsbG9jKTtcbiAgICAgICAgICAgIGEuc3RhY2tTYXZlID0gYihhLnN0YWNrU2F2ZSk7XG4gICAgICAgICAgICBhLnN0YWNrQWxsb2MgPSBjKGEuc3RhY2tBbGxvYyk7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZS5zdGFja0FsbG9jID0gU2E7XG4gICAgICAgICAgZS5zdGFja1NhdmUgPSBRYTtcbiAgICAgICAgICBlLnN0YWNrUmVzdG9yZSA9IFJhO1xuICAgICAgICAgIGUuYWRkRnVuY3Rpb24gPSBNYTtcbiAgICAgICAgICBlLlVURjhUb1N0cmluZyA9IFM7XG4gICAgICAgICAgZS5zdHJpbmdUb1VURjggPSAoYSwgYiwgYykgPT4gVShhLCBJLCBiLCBjKTtcbiAgICAgICAgICBlLmxlbmd0aEJ5dGVzVVRGOCA9IFQ7XG4gICAgICAgICAgdmFyIFo7XG4gICAgICAgICAgTyA9IGZ1bmN0aW9uIFRhKCkge1xuICAgICAgICAgICAgWiB8fCBVYSgpO1xuICAgICAgICAgICAgWiB8fCAoTyA9IFRhKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZ1bmN0aW9uIFVhKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gYSgpIHtcbiAgICAgICAgICAgICAgaWYgKCFaICYmIChaID0gdHJ1ZSwgZS5jYWxsZWRSdW4gPSB0cnVlLCAhZmEpKSB7XG4gICAgICAgICAgICAgICAgUihqYSk7XG4gICAgICAgICAgICAgICAgYWEoZSk7XG4gICAgICAgICAgICAgICAgaWYgKGUub25SdW50aW1lSW5pdGlhbGl6ZWQpXG4gICAgICAgICAgICAgICAgICBlLm9uUnVudGltZUluaXRpYWxpemVkKCk7XG4gICAgICAgICAgICAgICAgaWYgKGUucG9zdFJ1bilcbiAgICAgICAgICAgICAgICAgIGZvciAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBlLnBvc3RSdW4gJiYgKGUucG9zdFJ1biA9IFtlLnBvc3RSdW5dKTsgZS5wb3N0UnVuLmxlbmd0aDsgKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiID0gZS5wb3N0UnVuLnNoaWZ0KCk7XG4gICAgICAgICAgICAgICAgICAgIGthLnVuc2hpZnQoYik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgUihrYSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKDAgPCBNKSkge1xuICAgICAgICAgICAgICBpZiAoZS5wcmVSdW4pXG4gICAgICAgICAgICAgICAgZm9yIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUucHJlUnVuICYmIChlLnByZVJ1biA9IFtlLnByZVJ1bl0pOyBlLnByZVJ1bi5sZW5ndGg7IClcbiAgICAgICAgICAgICAgICAgIGxhKCk7XG4gICAgICAgICAgICAgIFIoaWEpO1xuICAgICAgICAgICAgICAwIDwgTSB8fCAoZS5zZXRTdGF0dXMgPyAoZS5zZXRTdGF0dXMoXCJSdW5uaW5nLi4uXCIpLCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBlLnNldFN0YXR1cyhcIlwiKTtcbiAgICAgICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgICAgICAgICBhKCk7XG4gICAgICAgICAgICAgIH0sIDEpKSA6IGEoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlLnByZUluaXQpXG4gICAgICAgICAgICBmb3IgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZS5wcmVJbml0ICYmIChlLnByZUluaXQgPSBbZS5wcmVJbml0XSk7IDAgPCBlLnByZUluaXQubGVuZ3RoOyApXG4gICAgICAgICAgICAgIGUucHJlSW5pdC5wb3AoKSgpO1xuICAgICAgICAgIFVhKCk7XG4gICAgICAgICAgcmV0dXJuIG1vZHVsZUFyZy5yZWFkeTtcbiAgICAgICAgfTtcbiAgICAgIH0pKCk7XG4gICAgICBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBvcnRXYXNtO1xuICAgICAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZVtcImFtZFwiXSlcbiAgICAgICAgZGVmaW5lKFtdLCAoKSA9PiBvcnRXYXNtKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIG5vZGVqcy1pZ25vcmU6d29ya2VyX3RocmVhZHNcbiAgdmFyIHJlcXVpcmVfd29ya2VyX3RocmVhZHMgPSBfX2NvbW1vbkpTKHtcbiAgICBcIm5vZGVqcy1pZ25vcmU6d29ya2VyX3RocmVhZHNcIigpIHtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIG5vZGVqcy1pZ25vcmU6cGVyZl9ob29rc1xuICB2YXIgcmVxdWlyZV9wZXJmX2hvb2tzID0gX19jb21tb25KUyh7XG4gICAgXCJub2RlanMtaWdub3JlOnBlcmZfaG9va3NcIigpIHtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIG5vZGVqcy1pZ25vcmU6b3NcbiAgdmFyIG9zX2V4cG9ydHMgPSB7fTtcbiAgX19leHBvcnQob3NfZXhwb3J0cywge1xuICAgIGNwdXM6ICgpID0+IGNwdXNcbiAgfSk7XG4gIHZhciBjcHVzO1xuICB2YXIgaW5pdF9vcyA9IF9fZXNtKHtcbiAgICBcIm5vZGVqcy1pZ25vcmU6b3NcIigpIHtcbiAgICAgIGNwdXMgPSB2b2lkIDA7XG4gICAgfVxuICB9KTtcblxuICAvLyB3ZWIvbGliL3dhc20vYmluZGluZy9vcnQtd2FzbS10aHJlYWRlZC5qc1xuICB2YXIgcmVxdWlyZV9vcnRfd2FzbV90aHJlYWRlZCA9IF9fY29tbW9uSlMoe1xuICAgIFwid2ViL2xpYi93YXNtL2JpbmRpbmcvb3J0LXdhc20tdGhyZWFkZWQuanNcIihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgIFwidXNlIHN0cmljdFwiO1xuICAgICAgdmFyIG9ydFdhc21UaHJlYWRlZCA9ICgoKSA9PiB7XG4gICAgICAgIHZhciBfc2NyaXB0RGlyID0gdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgPyBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyA6IHZvaWQgMDtcbiAgICAgICAgaWYgKHR5cGVvZiBfX2ZpbGVuYW1lICE9PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgIF9zY3JpcHREaXIgPSBfc2NyaXB0RGlyIHx8IF9fZmlsZW5hbWU7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihtb2R1bGVBcmcgPSB7fSkge1xuICAgICAgICAgIGZ1bmN0aW9uIGFhKCkge1xuICAgICAgICAgICAgZS5idWZmZXIgIT0gbC5idWZmZXIgJiYgbSgpO1xuICAgICAgICAgICAgcmV0dXJuIGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIG4oKSB7XG4gICAgICAgICAgICBlLmJ1ZmZlciAhPSBsLmJ1ZmZlciAmJiBtKCk7XG4gICAgICAgICAgICByZXR1cm4gYmE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHAoKSB7XG4gICAgICAgICAgICBlLmJ1ZmZlciAhPSBsLmJ1ZmZlciAmJiBtKCk7XG4gICAgICAgICAgICByZXR1cm4gY2E7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgICAgICBlLmJ1ZmZlciAhPSBsLmJ1ZmZlciAmJiBtKCk7XG4gICAgICAgICAgICByZXR1cm4gZGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGVhKCkge1xuICAgICAgICAgICAgZS5idWZmZXIgIT0gbC5idWZmZXIgJiYgbSgpO1xuICAgICAgICAgICAgcmV0dXJuIGZhO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdyA9IG1vZHVsZUFyZywgaGEsIHg7XG4gICAgICAgICAgdy5yZWFkeSA9IG5ldyBQcm9taXNlKChhLCBiKSA9PiB7XG4gICAgICAgICAgICBoYSA9IGE7XG4gICAgICAgICAgICB4ID0gYjtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB2YXIgaWEgPSBPYmplY3QuYXNzaWduKHt9LCB3KSwgamEgPSBcIi4vdGhpcy5wcm9ncmFtXCIsIHogPSAoYSwgYikgPT4ge1xuICAgICAgICAgICAgdGhyb3cgYjtcbiAgICAgICAgICB9LCBrYSA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIHdpbmRvdywgQSA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgaW1wb3J0U2NyaXB0cywgQyA9IFwib2JqZWN0XCIgPT0gdHlwZW9mIHByb2Nlc3MgJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucyAmJiBcInN0cmluZ1wiID09IHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGUsIEQgPSB3LkVOVklST05NRU5UX0lTX1BUSFJFQUQgfHwgZmFsc2UsIEUgPSBcIlwiO1xuICAgICAgICAgIGZ1bmN0aW9uIGxhKGEpIHtcbiAgICAgICAgICAgIHJldHVybiB3LmxvY2F0ZUZpbGUgPyB3LmxvY2F0ZUZpbGUoYSwgRSkgOiBFICsgYTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG1hLCBGLCBHO1xuICAgICAgICAgIGlmIChDKSB7XG4gICAgICAgICAgICB2YXIgZnMgPSAoaW5pdF9mcygpLCBfX3RvQ29tbW9uSlMoZnNfZXhwb3J0cykpLCBuYSA9IChpbml0X3BhdGgoKSwgX190b0NvbW1vbkpTKHBhdGhfZXhwb3J0cykpO1xuICAgICAgICAgICAgRSA9IEEgPyBuYS5kaXJuYW1lKEUpICsgXCIvXCIgOiBfX2Rpcm5hbWUgKyBcIi9cIjtcbiAgICAgICAgICAgIG1hID0gKGIsIGMpID0+IHtcbiAgICAgICAgICAgICAgYiA9IGIuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikgPyBuZXcgVVJMKGIpIDogbmEubm9ybWFsaXplKGIpO1xuICAgICAgICAgICAgICByZXR1cm4gZnMucmVhZEZpbGVTeW5jKGIsIGMgPyB2b2lkIDAgOiBcInV0ZjhcIik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgRyA9IChiKSA9PiB7XG4gICAgICAgICAgICAgIGIgPSBtYShiLCB0cnVlKTtcbiAgICAgICAgICAgICAgYi5idWZmZXIgfHwgKGIgPSBuZXcgVWludDhBcnJheShiKSk7XG4gICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIEYgPSAoYiwgYywgZCwgZyA9IHRydWUpID0+IHtcbiAgICAgICAgICAgICAgYiA9IGIuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikgPyBuZXcgVVJMKGIpIDogbmEubm9ybWFsaXplKGIpO1xuICAgICAgICAgICAgICBmcy5yZWFkRmlsZShiLCBnID8gdm9pZCAwIDogXCJ1dGY4XCIsIChoLCBrKSA9PiB7XG4gICAgICAgICAgICAgICAgaCA/IGQoaCkgOiBjKGcgPyBrLmJ1ZmZlciA6IGspO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAhdy50aGlzUHJvZ3JhbSAmJiAxIDwgcHJvY2Vzcy5hcmd2Lmxlbmd0aCAmJiAoamEgPSBwcm9jZXNzLmFyZ3ZbMV0ucmVwbGFjZSgvXFxcXC9nLCBcIi9cIikpO1xuICAgICAgICAgICAgcHJvY2Vzcy5hcmd2LnNsaWNlKDIpO1xuICAgICAgICAgICAgeiA9IChiLCBjKSA9PiB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZXhpdENvZGUgPSBiO1xuICAgICAgICAgICAgICB0aHJvdyBjO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHcuaW5zcGVjdCA9ICgpID0+IFwiW0Vtc2NyaXB0ZW4gTW9kdWxlIG9iamVjdF1cIjtcbiAgICAgICAgICAgIGxldCBhO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYSA9IHJlcXVpcmVfd29ya2VyX3RocmVhZHMoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGIpIHtcbiAgICAgICAgICAgICAgdGhyb3cgY29uc29sZS5lcnJvcignVGhlIFwid29ya2VyX3RocmVhZHNcIiBtb2R1bGUgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIG5vZGUuanMgYnVpbGQgLSBwZXJoYXBzIGEgbmV3ZXIgdmVyc2lvbiBpcyBuZWVkZWQ/JyksIGI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnbG9iYWwuV29ya2VyID0gYS5Xb3JrZXI7XG4gICAgICAgICAgfSBlbHNlIGlmIChrYSB8fCBBKVxuICAgICAgICAgICAgQSA/IEUgPSBzZWxmLmxvY2F0aW9uLmhyZWYgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBkb2N1bWVudCAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ICYmIChFID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMpLCB0eXBlb2YgX3NjcmlwdERpciAhPT0gXCJ1bmRlZmluZWRcIiAmJiBfc2NyaXB0RGlyICYmIChFID0gX3NjcmlwdERpciksIDAgIT09IEUuaW5kZXhPZihcImJsb2I6XCIpID8gRSA9IEUuc3Vic3RyKDAsIEUucmVwbGFjZSgvWz8jXS4qLywgXCJcIikubGFzdEluZGV4T2YoXCIvXCIpICsgMSkgOiBFID0gXCJcIiwgQyB8fCAobWEgPSAoYSkgPT4ge1xuICAgICAgICAgICAgICB2YXIgYiA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICBiLm9wZW4oXCJHRVRcIiwgYSwgZmFsc2UpO1xuICAgICAgICAgICAgICBiLnNlbmQobnVsbCk7XG4gICAgICAgICAgICAgIHJldHVybiBiLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgIH0sIEEgJiYgKEcgPSAoYSkgPT4ge1xuICAgICAgICAgICAgICB2YXIgYiA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICBiLm9wZW4oXCJHRVRcIiwgYSwgZmFsc2UpO1xuICAgICAgICAgICAgICBiLnJlc3BvbnNlVHlwZSA9IFwiYXJyYXlidWZmZXJcIjtcbiAgICAgICAgICAgICAgYi5zZW5kKG51bGwpO1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoYi5yZXNwb25zZSk7XG4gICAgICAgICAgICB9KSwgRiA9IChhLCBiLCBjKSA9PiB7XG4gICAgICAgICAgICAgIHZhciBkID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgIGQub3BlbihcIkdFVFwiLCBhLCB0cnVlKTtcbiAgICAgICAgICAgICAgZC5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgICAgICAgICAgIGQub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIDIwMCA9PSBkLnN0YXR1cyB8fCAwID09IGQuc3RhdHVzICYmIGQucmVzcG9uc2UgPyBiKGQucmVzcG9uc2UpIDogYygpO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBkLm9uZXJyb3IgPSBjO1xuICAgICAgICAgICAgICBkLnNlbmQobnVsbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICBDICYmIFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIHBlcmZvcm1hbmNlICYmIChnbG9iYWwucGVyZm9ybWFuY2UgPSByZXF1aXJlX3BlcmZfaG9va3MoKS5wZXJmb3JtYW5jZSk7XG4gICAgICAgICAgdmFyIG9hID0gY29uc29sZS5sb2cuYmluZChjb25zb2xlKSwgcGEgPSBjb25zb2xlLmVycm9yLmJpbmQoY29uc29sZSk7XG4gICAgICAgICAgQyAmJiAob2EgPSAoLi4uYSkgPT4gZnMud3JpdGVTeW5jKDEsIGEuam9pbihcIiBcIikgKyBcIlxcblwiKSwgcGEgPSAoLi4uYSkgPT4gZnMud3JpdGVTeW5jKDIsIGEuam9pbihcIiBcIikgKyBcIlxcblwiKSk7XG4gICAgICAgICAgdmFyIHFhID0gdy5wcmludCB8fCBvYSwgSSA9IHcucHJpbnRFcnIgfHwgcGE7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbih3LCBpYSk7XG4gICAgICAgICAgaWEgPSBudWxsO1xuICAgICAgICAgIHcudGhpc1Byb2dyYW0gJiYgKGphID0gdy50aGlzUHJvZ3JhbSk7XG4gICAgICAgICAgdy5xdWl0ICYmICh6ID0gdy5xdWl0KTtcbiAgICAgICAgICB2YXIgSjtcbiAgICAgICAgICB3Lndhc21CaW5hcnkgJiYgKEogPSB3Lndhc21CaW5hcnkpO1xuICAgICAgICAgIHZhciBub0V4aXRSdW50aW1lID0gdy5ub0V4aXRSdW50aW1lIHx8IHRydWU7XG4gICAgICAgICAgXCJvYmplY3RcIiAhPSB0eXBlb2YgV2ViQXNzZW1ibHkgJiYgSyhcIm5vIG5hdGl2ZSB3YXNtIHN1cHBvcnQgZGV0ZWN0ZWRcIik7XG4gICAgICAgICAgdmFyIGUsIEwsIHJhLCBNID0gZmFsc2UsIE4sIGwsIGJhLCBjYSwgZGEsIGZhO1xuICAgICAgICAgIGZ1bmN0aW9uIG0oKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGUuYnVmZmVyO1xuICAgICAgICAgICAgdy5IRUFQOCA9IGwgPSBuZXcgSW50OEFycmF5KGEpO1xuICAgICAgICAgICAgdy5IRUFQMTYgPSBuZXcgSW50MTZBcnJheShhKTtcbiAgICAgICAgICAgIHcuSEVBUDMyID0gY2EgPSBuZXcgSW50MzJBcnJheShhKTtcbiAgICAgICAgICAgIHcuSEVBUFU4ID0gYmEgPSBuZXcgVWludDhBcnJheShhKTtcbiAgICAgICAgICAgIHcuSEVBUFUxNiA9IG5ldyBVaW50MTZBcnJheShhKTtcbiAgICAgICAgICAgIHcuSEVBUFUzMiA9IGRhID0gbmV3IFVpbnQzMkFycmF5KGEpO1xuICAgICAgICAgICAgdy5IRUFQRjMyID0gbmV3IEZsb2F0MzJBcnJheShhKTtcbiAgICAgICAgICAgIHcuSEVBUEY2NCA9IGZhID0gbmV3IEZsb2F0NjRBcnJheShhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIE8gPSB3LklOSVRJQUxfTUVNT1JZIHx8IDE2Nzc3MjE2O1xuICAgICAgICAgIDUyNDI4ODAgPD0gTyB8fCBLKFwiSU5JVElBTF9NRU1PUlkgc2hvdWxkIGJlIGxhcmdlciB0aGFuIFNUQUNLX1NJWkUsIHdhcyBcIiArIE8gKyBcIiEgKFNUQUNLX1NJWkU9NTI0Mjg4MClcIik7XG4gICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICBlID0gdy53YXNtTWVtb3J5O1xuICAgICAgICAgIGVsc2UgaWYgKHcud2FzbU1lbW9yeSlcbiAgICAgICAgICAgIGUgPSB3Lndhc21NZW1vcnk7XG4gICAgICAgICAgZWxzZSBpZiAoZSA9IG5ldyBXZWJBc3NlbWJseS5NZW1vcnkoeyBpbml0aWFsOiBPIC8gNjU1MzYsIG1heGltdW06IDY1NTM2LCBzaGFyZWQ6IHRydWUgfSksICEoZS5idWZmZXIgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcikpXG4gICAgICAgICAgICB0aHJvdyBJKFwicmVxdWVzdGVkIGEgc2hhcmVkIFdlYkFzc2VtYmx5Lk1lbW9yeSBidXQgdGhlIHJldHVybmVkIGJ1ZmZlciBpcyBub3QgYSBTaGFyZWRBcnJheUJ1ZmZlciwgaW5kaWNhdGluZyB0aGF0IHdoaWxlIHRoZSBicm93c2VyIGhhcyBTaGFyZWRBcnJheUJ1ZmZlciBpdCBkb2VzIG5vdCBoYXZlIFdlYkFzc2VtYmx5IHRocmVhZHMgc3VwcG9ydCAtIHlvdSBtYXkgbmVlZCB0byBzZXQgYSBmbGFnXCIpLCBDICYmIEkoXCIob24gbm9kZSB5b3UgbWF5IG5lZWQ6IC0tZXhwZXJpbWVudGFsLXdhc20tdGhyZWFkcyAtLWV4cGVyaW1lbnRhbC13YXNtLWJ1bGstbWVtb3J5IGFuZC9vciByZWNlbnQgdmVyc2lvbilcIiksIEVycm9yKFwiYmFkIG1lbW9yeVwiKTtcbiAgICAgICAgICBtKCk7XG4gICAgICAgICAgTyA9IGUuYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgdmFyIFAsIHNhID0gW10sIHRhID0gW10sIHVhID0gW10sIHZhID0gMDtcbiAgICAgICAgICBmdW5jdGlvbiBRKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5vRXhpdFJ1bnRpbWUgfHwgMCA8IHZhO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgUiA9IDAsIHdhID0gbnVsbCwgUyA9IG51bGw7XG4gICAgICAgICAgZnVuY3Rpb24geGEoKSB7XG4gICAgICAgICAgICBSKys7XG4gICAgICAgICAgICB3Lm1vbml0b3JSdW5EZXBlbmRlbmNpZXMgJiYgdy5tb25pdG9yUnVuRGVwZW5kZW5jaWVzKFIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiB5YSgpIHtcbiAgICAgICAgICAgIFItLTtcbiAgICAgICAgICAgIHcubW9uaXRvclJ1bkRlcGVuZGVuY2llcyAmJiB3Lm1vbml0b3JSdW5EZXBlbmRlbmNpZXMoUik7XG4gICAgICAgICAgICBpZiAoMCA9PSBSICYmIChudWxsICE9PSB3YSAmJiAoY2xlYXJJbnRlcnZhbCh3YSksIHdhID0gbnVsbCksIFMpKSB7XG4gICAgICAgICAgICAgIHZhciBhID0gUztcbiAgICAgICAgICAgICAgUyA9IG51bGw7XG4gICAgICAgICAgICAgIGEoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gSyhhKSB7XG4gICAgICAgICAgICBpZiAody5vbkFib3J0KVxuICAgICAgICAgICAgICB3Lm9uQWJvcnQoYSk7XG4gICAgICAgICAgICBhID0gXCJBYm9ydGVkKFwiICsgYSArIFwiKVwiO1xuICAgICAgICAgICAgSShhKTtcbiAgICAgICAgICAgIE0gPSB0cnVlO1xuICAgICAgICAgICAgTiA9IDE7XG4gICAgICAgICAgICBhID0gbmV3IFdlYkFzc2VtYmx5LlJ1bnRpbWVFcnJvcihhICsgXCIuIEJ1aWxkIHdpdGggLXNBU1NFUlRJT05TIGZvciBtb3JlIGluZm8uXCIpO1xuICAgICAgICAgICAgeChhKTtcbiAgICAgICAgICAgIHRocm93IGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHphKGEpIHtcbiAgICAgICAgICAgIHJldHVybiBhLnN0YXJ0c1dpdGgoXCJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgVDtcbiAgICAgICAgICBUID0gXCJvcnQtd2FzbS10aHJlYWRlZC53YXNtXCI7XG4gICAgICAgICAgemEoVCkgfHwgKFQgPSBsYShUKSk7XG4gICAgICAgICAgZnVuY3Rpb24gQWEoYSkge1xuICAgICAgICAgICAgaWYgKGEgPT0gVCAmJiBKKVxuICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoSik7XG4gICAgICAgICAgICBpZiAoRylcbiAgICAgICAgICAgICAgcmV0dXJuIEcoYSk7XG4gICAgICAgICAgICB0aHJvdyBcImJvdGggYXN5bmMgYW5kIHN5bmMgZmV0Y2hpbmcgb2YgdGhlIHdhc20gZmFpbGVkXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEJhKGEpIHtcbiAgICAgICAgICAgIGlmICghSiAmJiAoa2EgfHwgQSkpIHtcbiAgICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZmV0Y2ggJiYgIWEuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKGEsIHsgY3JlZGVudGlhbHM6IFwic2FtZS1vcmlnaW5cIiB9KS50aGVuKChiKSA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWIub2spXG4gICAgICAgICAgICAgICAgICAgIHRocm93IFwiZmFpbGVkIHRvIGxvYWQgd2FzbSBiaW5hcnkgZmlsZSBhdCAnXCIgKyBhICsgXCInXCI7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYi5hcnJheUJ1ZmZlcigpO1xuICAgICAgICAgICAgICAgIH0pLmNhdGNoKCgpID0+IEFhKGEpKTtcbiAgICAgICAgICAgICAgaWYgKEYpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChiLCBjKSA9PiB7XG4gICAgICAgICAgICAgICAgICBGKGEsIChkKSA9PiBiKG5ldyBVaW50OEFycmF5KGQpKSwgYyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBBYShhKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIENhKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIHJldHVybiBCYShhKS50aGVuKChkKSA9PiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShkLCBiKSkudGhlbigoZCkgPT4gZCkudGhlbihjLCAoZCkgPT4ge1xuICAgICAgICAgICAgICBJKFwiZmFpbGVkIHRvIGFzeW5jaHJvbm91c2x5IHByZXBhcmUgd2FzbTogXCIgKyBkKTtcbiAgICAgICAgICAgICAgSyhkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBEYShhLCBiKSB7XG4gICAgICAgICAgICB2YXIgYyA9IFQ7XG4gICAgICAgICAgICByZXR1cm4gSiB8fCBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nIHx8IHphKGMpIHx8IGMuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikgfHwgQyB8fCBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGZldGNoID8gQ2EoYywgYSwgYikgOiBmZXRjaChjLCB7IGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCIgfSkudGhlbigoZCkgPT4gV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcoZCwgYSkudGhlbihiLCBmdW5jdGlvbihnKSB7XG4gICAgICAgICAgICAgIEkoXCJ3YXNtIHN0cmVhbWluZyBjb21waWxlIGZhaWxlZDogXCIgKyBnKTtcbiAgICAgICAgICAgICAgSShcImZhbGxpbmcgYmFjayB0byBBcnJheUJ1ZmZlciBpbnN0YW50aWF0aW9uXCIpO1xuICAgICAgICAgICAgICByZXR1cm4gQ2EoYywgYSwgYik7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBVO1xuICAgICAgICAgIGZ1bmN0aW9uIEVhKGEpIHtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiRXhpdFN0YXR1c1wiO1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gYFByb2dyYW0gdGVybWluYXRlZCB3aXRoIGV4aXQoJHthfSlgO1xuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBGYShhKSB7XG4gICAgICAgICAgICBhLnRlcm1pbmF0ZSgpO1xuICAgICAgICAgICAgYS5vbm1lc3NhZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBHYShhKSB7XG4gICAgICAgICAgICAoYSA9IFYuTWFbYV0pIHx8IEsoKTtcbiAgICAgICAgICAgIFYubWIoYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEhhKGEpIHtcbiAgICAgICAgICAgIHZhciBiID0gVi5nYigpO1xuICAgICAgICAgICAgaWYgKCFiKVxuICAgICAgICAgICAgICByZXR1cm4gNjtcbiAgICAgICAgICAgIFYuUGEucHVzaChiKTtcbiAgICAgICAgICAgIFYuTWFbYS5PYV0gPSBiO1xuICAgICAgICAgICAgYi5PYSA9IGEuT2E7XG4gICAgICAgICAgICB2YXIgYyA9IHsgY21kOiBcInJ1blwiLCBzdGFydF9yb3V0aW5lOiBhLm5iLCBhcmc6IGEuZmIsIHB0aHJlYWRfcHRyOiBhLk9hIH07XG4gICAgICAgICAgICBDICYmIGIudW5yZWYoKTtcbiAgICAgICAgICAgIGIucG9zdE1lc3NhZ2UoYywgYS50Yik7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIElhID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgVGV4dERlY29kZXIgPyBuZXcgVGV4dERlY29kZXIoXCJ1dGY4XCIpIDogdm9pZCAwLCBKYSA9IChhLCBiLCBjKSA9PiB7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciBkID0gYiArIGM7XG4gICAgICAgICAgICBmb3IgKGMgPSBiOyBhW2NdICYmICEoYyA+PSBkKTsgKVxuICAgICAgICAgICAgICArK2M7XG4gICAgICAgICAgICBpZiAoMTYgPCBjIC0gYiAmJiBhLmJ1ZmZlciAmJiBJYSlcbiAgICAgICAgICAgICAgcmV0dXJuIElhLmRlY29kZShhLmJ1ZmZlciBpbnN0YW5jZW9mIFNoYXJlZEFycmF5QnVmZmVyID8gYS5zbGljZShiLCBjKSA6IGEuc3ViYXJyYXkoYiwgYykpO1xuICAgICAgICAgICAgZm9yIChkID0gXCJcIjsgYiA8IGM7ICkge1xuICAgICAgICAgICAgICB2YXIgZyA9IGFbYisrXTtcbiAgICAgICAgICAgICAgaWYgKGcgJiAxMjgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaCA9IGFbYisrXSAmIDYzO1xuICAgICAgICAgICAgICAgIGlmICgxOTIgPT0gKGcgJiAyMjQpKVxuICAgICAgICAgICAgICAgICAgZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKChnICYgMzEpIDw8IDYgfCBoKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHZhciBrID0gYVtiKytdICYgNjM7XG4gICAgICAgICAgICAgICAgICBnID0gMjI0ID09IChnICYgMjQwKSA/IChnICYgMTUpIDw8IDEyIHwgaCA8PCA2IHwgayA6IChnICYgNykgPDwgMTggfCBoIDw8IDEyIHwgayA8PCA2IHwgYVtiKytdICYgNjM7XG4gICAgICAgICAgICAgICAgICA2NTUzNiA+IGcgPyBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoZykgOiAoZyAtPSA2NTUzNiwgZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2IHwgZyA+PiAxMCwgNTYzMjAgfCBnICYgMTAyMykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgZCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgfSwgS2EgPSAoYSwgYikgPT4gKGEgPj4+PSAwKSA/IEphKG4oKSwgYSwgYikgOiBcIlwiO1xuICAgICAgICAgIGZ1bmN0aW9uIExhKGEpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVygxLCAxLCBhKTtcbiAgICAgICAgICAgIE4gPSBhO1xuICAgICAgICAgICAgaWYgKCFRKCkpIHtcbiAgICAgICAgICAgICAgVi5vYigpO1xuICAgICAgICAgICAgICBpZiAody5vbkV4aXQpXG4gICAgICAgICAgICAgICAgdy5vbkV4aXQoYSk7XG4gICAgICAgICAgICAgIE0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeihhLCBuZXcgRWEoYSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgTmEgPSAoYSkgPT4ge1xuICAgICAgICAgICAgTiA9IGE7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgdGhyb3cgTWEoYSksIFwidW53aW5kXCI7XG4gICAgICAgICAgICBMYShhKTtcbiAgICAgICAgICB9LCBWID0ge1xuICAgICAgICAgICAgU2E6IFtdLFxuICAgICAgICAgICAgUGE6IFtdLFxuICAgICAgICAgICAgJGE6IFtdLFxuICAgICAgICAgICAgTWE6IHt9LFxuICAgICAgICAgICAgV2E6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBEID8gVi5pYigpIDogVi5oYigpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgc2EudW5zaGlmdCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgeGEoKTtcbiAgICAgICAgICAgICAgICBWLmpiKCgpID0+IHlhKCkpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpYjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIFYucmVjZWl2ZU9iamVjdFRyYW5zZmVyID0gVi5sYjtcbiAgICAgICAgICAgICAgVi50aHJlYWRJbml0VExTID0gVi5aYTtcbiAgICAgICAgICAgICAgVi5zZXRFeGl0U3RhdHVzID0gVi5ZYTtcbiAgICAgICAgICAgICAgbm9FeGl0UnVudGltZSA9IGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFlhOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgIE4gPSBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHliOiBbXCIkdGVybWluYXRlV29ya2VyXCJdLFxuICAgICAgICAgICAgb2I6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBhIG9mIFYuUGEpXG4gICAgICAgICAgICAgICAgRmEoYSk7XG4gICAgICAgICAgICAgIGZvciAoYSBvZiBWLlNhKVxuICAgICAgICAgICAgICAgIEZhKGEpO1xuICAgICAgICAgICAgICBWLlNhID0gW107XG4gICAgICAgICAgICAgIFYuUGEgPSBbXTtcbiAgICAgICAgICAgICAgVi5NYSA9IFtdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1iOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgIHZhciBiID0gYS5PYTtcbiAgICAgICAgICAgICAgZGVsZXRlIFYuTWFbYl07XG4gICAgICAgICAgICAgIFYuU2EucHVzaChhKTtcbiAgICAgICAgICAgICAgVi5QYS5zcGxpY2UoVi5QYS5pbmRleE9mKGEpLCAxKTtcbiAgICAgICAgICAgICAgYS5PYSA9IDA7XG4gICAgICAgICAgICAgIE9hKGIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBaYTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIFYuJGEuZm9yRWFjaCgoYSkgPT4gYSgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBrYjogKGEpID0+IG5ldyBQcm9taXNlKChiKSA9PiB7XG4gICAgICAgICAgICAgIGEub25tZXNzYWdlID0gKGgpID0+IHtcbiAgICAgICAgICAgICAgICBoID0gaC5kYXRhO1xuICAgICAgICAgICAgICAgIHZhciBrID0gaC5jbWQ7XG4gICAgICAgICAgICAgICAgaWYgKGgudGFyZ2V0VGhyZWFkICYmIGgudGFyZ2V0VGhyZWFkICE9IFBhKCkpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBxID0gVi5NYVtoLnhiXTtcbiAgICAgICAgICAgICAgICAgIHEgPyBxLnBvc3RNZXNzYWdlKGgsIGgudHJhbnNmZXJMaXN0KSA6IEkoJ0ludGVybmFsIGVycm9yISBXb3JrZXIgc2VudCBhIG1lc3NhZ2UgXCInICsgayArICdcIiB0byB0YXJnZXQgcHRocmVhZCAnICsgaC50YXJnZXRUaHJlYWQgKyBcIiwgYnV0IHRoYXQgdGhyZWFkIG5vIGxvbmdlciBleGlzdHMhXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXCJjaGVja01haWxib3hcIiA9PT0gaylcbiAgICAgICAgICAgICAgICAgIFFhKCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoXCJzcGF3blRocmVhZFwiID09PSBrKVxuICAgICAgICAgICAgICAgICAgSGEoaCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoXCJjbGVhbnVwVGhyZWFkXCIgPT09IGspXG4gICAgICAgICAgICAgICAgICBHYShoLnRocmVhZCk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoXCJraWxsVGhyZWFkXCIgPT09IGspXG4gICAgICAgICAgICAgICAgICBoID0gaC50aHJlYWQsIGsgPSBWLk1hW2hdLCBkZWxldGUgVi5NYVtoXSwgRmEoayksIE9hKGgpLCBWLlBhLnNwbGljZShcbiAgICAgICAgICAgICAgICAgICAgVi5QYS5pbmRleE9mKGspLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICApLCBrLk9hID0gMDtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChcImNhbmNlbFRocmVhZFwiID09PSBrKVxuICAgICAgICAgICAgICAgICAgVi5NYVtoLnRocmVhZF0ucG9zdE1lc3NhZ2UoeyBjbWQ6IFwiY2FuY2VsXCIgfSk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoXCJsb2FkZWRcIiA9PT0gaylcbiAgICAgICAgICAgICAgICAgIGEubG9hZGVkID0gdHJ1ZSwgYihhKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChcImFsZXJ0XCIgPT09IGspXG4gICAgICAgICAgICAgICAgICBhbGVydChcIlRocmVhZCBcIiArIGgudGhyZWFkSWQgKyBcIjogXCIgKyBoLnRleHQpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKFwic2V0aW1tZWRpYXRlXCIgPT09IGgudGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgYS5wb3N0TWVzc2FnZShoKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChcImNhbGxIYW5kbGVyXCIgPT09IGspXG4gICAgICAgICAgICAgICAgICB3W2guaGFuZGxlcl0oLi4uaC5hcmdzKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICBrICYmIEkoXCJ3b3JrZXIgc2VudCBhbiB1bmtub3duIGNvbW1hbmQgXCIgKyBrKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgYS5vbmVycm9yID0gKGgpID0+IHtcbiAgICAgICAgICAgICAgICBJKFwid29ya2VyIHNlbnQgYW4gZXJyb3IhIFwiICsgaC5maWxlbmFtZSArIFwiOlwiICsgaC5saW5lbm8gKyBcIjogXCIgKyBoLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIHRocm93IGg7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIEMgJiYgKGEub24oXCJtZXNzYWdlXCIsIGZ1bmN0aW9uKGgpIHtcbiAgICAgICAgICAgICAgICBhLm9ubWVzc2FnZSh7IGRhdGE6IGggfSk7XG4gICAgICAgICAgICAgIH0pLCBhLm9uKFwiZXJyb3JcIiwgZnVuY3Rpb24oaCkge1xuICAgICAgICAgICAgICAgIGEub25lcnJvcihoKTtcbiAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICB2YXIgYyA9IFtdLCBkID0gW1wib25FeGl0XCIsIFwib25BYm9ydFwiLCBcInByaW50XCIsIFwicHJpbnRFcnJcIl0sIGc7XG4gICAgICAgICAgICAgIGZvciAoZyBvZiBkKVxuICAgICAgICAgICAgICAgIHcuaGFzT3duUHJvcGVydHkoZykgJiYgYy5wdXNoKGcpO1xuICAgICAgICAgICAgICBhLnBvc3RNZXNzYWdlKHsgY21kOiBcImxvYWRcIiwgaGFuZGxlcnM6IGMsIHVybE9yQmxvYjogdy5tYWluU2NyaXB0VXJsT3JCbG9iIHx8IF9zY3JpcHREaXIsIHdhc21NZW1vcnk6IGUsIHdhc21Nb2R1bGU6IHJhIH0pO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBqYjogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICBhKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZWI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB2YXIgYSA9IGxhKFwib3J0LXdhc20tdGhyZWFkZWQud29ya2VyLmpzXCIpO1xuICAgICAgICAgICAgICBhID0gbmV3IFdvcmtlcihhKTtcbiAgICAgICAgICAgICAgVi5TYS5wdXNoKGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdiOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgMCA9PSBWLlNhLmxlbmd0aCAmJiAoVi5lYigpLCBWLmtiKFYuU2FbMF0pKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFYuU2EucG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICB3LlBUaHJlYWQgPSBWO1xuICAgICAgICAgIHZhciBSYSA9IChhKSA9PiB7XG4gICAgICAgICAgICBmb3IgKDsgMCA8IGEubGVuZ3RoOyApXG4gICAgICAgICAgICAgIGEuc2hpZnQoKSh3KTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHcuZXN0YWJsaXNoU3RhY2tTcGFjZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGEgPSBQYSgpLCBiID0gcCgpW2EgKyA1MiA+PiAyID4+PiAwXTtcbiAgICAgICAgICAgIGEgPSBwKClbYSArIDU2ID4+IDIgPj4+IDBdO1xuICAgICAgICAgICAgU2EoYiwgYiAtIGEpO1xuICAgICAgICAgICAgVGEoYik7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmdW5jdGlvbiBNYShhKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFcoMiwgMCwgYSk7XG4gICAgICAgICAgICBOYShhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFggPSBbXSwgVWEgPSAoYSkgPT4ge1xuICAgICAgICAgICAgdmFyIGIgPSBYW2FdO1xuICAgICAgICAgICAgYiB8fCAoYSA+PSBYLmxlbmd0aCAmJiAoWC5sZW5ndGggPSBhICsgMSksIFhbYV0gPSBiID0gUC5nZXQoYSkpO1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB3Lmludm9rZUVudHJ5UG9pbnQgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICBhID0gVWEoYSkoYik7XG4gICAgICAgICAgICBRKCkgPyBWLllhKGEpIDogVmEoYSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmdW5jdGlvbiBXYShhKSB7XG4gICAgICAgICAgICB0aGlzLlZhID0gYSAtIDI0O1xuICAgICAgICAgICAgdGhpcy5jYiA9IGZ1bmN0aW9uKGIpIHtcbiAgICAgICAgICAgICAgdCgpW3RoaXMuVmEgKyA0ID4+IDIgPj4+IDBdID0gYjtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmJiID0gZnVuY3Rpb24oYikge1xuICAgICAgICAgICAgICB0KClbdGhpcy5WYSArIDggPj4gMiA+Pj4gMF0gPSBiO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuV2EgPSBmdW5jdGlvbihiLCBjKSB7XG4gICAgICAgICAgICAgIHRoaXMuYWIoKTtcbiAgICAgICAgICAgICAgdGhpcy5jYihiKTtcbiAgICAgICAgICAgICAgdGhpcy5iYihjKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmFiID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHQoKVt0aGlzLlZhICsgMTYgPj4gMiA+Pj4gMF0gPSAwO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFhhID0gMCwgWWEgPSAwO1xuICAgICAgICAgIGZ1bmN0aW9uIFphKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBEID8gVygzLCAxLCBhLCBiLCBjLCBkKSA6ICRhKGEsIGIsIGMsIGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiAkYShhLCBiLCBjLCBkKSB7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICBkID4+Pj0gMDtcbiAgICAgICAgICAgIGlmIChcInVuZGVmaW5lZFwiID09IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlcilcbiAgICAgICAgICAgICAgcmV0dXJuIEkoXCJDdXJyZW50IGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgU2hhcmVkQXJyYXlCdWZmZXIsIHB0aHJlYWRzIGFyZSBub3QgYXZhaWxhYmxlIVwiKSwgNjtcbiAgICAgICAgICAgIHZhciBnID0gW107XG4gICAgICAgICAgICBpZiAoRCAmJiAwID09PSBnLmxlbmd0aClcbiAgICAgICAgICAgICAgcmV0dXJuIFphKGEsIGIsIGMsIGQpO1xuICAgICAgICAgICAgYSA9IHsgbmI6IGMsIE9hOiBhLCBmYjogZCwgdGI6IGcgfTtcbiAgICAgICAgICAgIHJldHVybiBEID8gKGEudmIgPSBcInNwYXduVGhyZWFkXCIsIHBvc3RNZXNzYWdlKGEsIGcpLCAwKSA6IEhhKGEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBhYihhLCBiLCBjKSB7XG4gICAgICAgICAgICByZXR1cm4gRCA/IFcoNCwgMSwgYSwgYiwgYykgOiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBiYihhLCBiKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFcoNSwgMSwgYSwgYik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBjYiA9IChhKSA9PiB7XG4gICAgICAgICAgICBmb3IgKHZhciBiID0gMCwgYyA9IDA7IGMgPCBhLmxlbmd0aDsgKytjKSB7XG4gICAgICAgICAgICAgIHZhciBkID0gYS5jaGFyQ29kZUF0KGMpO1xuICAgICAgICAgICAgICAxMjcgPj0gZCA/IGIrKyA6IDIwNDcgPj0gZCA/IGIgKz0gMiA6IDU1Mjk2IDw9IGQgJiYgNTczNDMgPj0gZCA/IChiICs9IDQsICsrYykgOiBiICs9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICB9LCBkYiA9IChhLCBiLCBjLCBkKSA9PiB7XG4gICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgIGlmICghKDAgPCBkKSlcbiAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB2YXIgZyA9IGM7XG4gICAgICAgICAgICBkID0gYyArIGQgLSAxO1xuICAgICAgICAgICAgZm9yICh2YXIgaCA9IDA7IGggPCBhLmxlbmd0aDsgKytoKSB7XG4gICAgICAgICAgICAgIHZhciBrID0gYS5jaGFyQ29kZUF0KGgpO1xuICAgICAgICAgICAgICBpZiAoNTUyOTYgPD0gayAmJiA1NzM0MyA+PSBrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHEgPSBhLmNoYXJDb2RlQXQoKytoKTtcbiAgICAgICAgICAgICAgICBrID0gNjU1MzYgKyAoKGsgJiAxMDIzKSA8PCAxMCkgfCBxICYgMTAyMztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoMTI3ID49IGspIHtcbiAgICAgICAgICAgICAgICBpZiAoYyA+PSBkKVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgYltjKysgPj4+IDBdID0gaztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoMjA0NyA+PSBrKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoYyArIDEgPj0gZClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAxOTIgfCBrID4+IDY7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlmICg2NTUzNSA+PSBrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjICsgMiA+PSBkKVxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAyMjQgfCBrID4+IDEyO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMgKyAzID49IGQpXG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDI0MCB8IGsgPj4gMTg7XG4gICAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDEyOCB8IGsgPj4gMTIgJiA2MztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJbYysrID4+PiAwXSA9IDEyOCB8IGsgPj4gNiAmIDYzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBiW2MrKyA+Pj4gMF0gPSAxMjggfCBrICYgNjM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJbYyA+Pj4gMF0gPSAwO1xuICAgICAgICAgICAgcmV0dXJuIGMgLSBnO1xuICAgICAgICAgIH0sIGViID0gKGEsIGIsIGMpID0+IGRiKGEsIG4oKSwgYiwgYyk7XG4gICAgICAgICAgZnVuY3Rpb24gZmIoYSwgYikge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBXKDYsIDEsIGEsIGIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBnYihhLCBiLCBjKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFcoNywgMSwgYSwgYiwgYyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGhiKGEsIGIsIGMpIHtcbiAgICAgICAgICAgIHJldHVybiBEID8gVyg4LCAxLCBhLCBiLCBjKSA6IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIGliKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVyg5LCAxLCBhLCBiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gamIoYSwgYiwgYykge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBXKDEwLCAxLCBhLCBiLCBjKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24ga2IoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBXKDExLCAxLCBhLCBiLCBjLCBkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbGIoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBXKDEyLCAxLCBhLCBiLCBjLCBkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbWIoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBXKDEzLCAxLCBhLCBiLCBjLCBkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gbmIoYSkge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBXKDE0LCAxLCBhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gb2IoYSwgYikge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBXKDE1LCAxLCBhLCBiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gcGIoYSwgYiwgYykge1xuICAgICAgICAgICAgaWYgKEQpXG4gICAgICAgICAgICAgIHJldHVybiBXKDE2LCAxLCBhLCBiLCBjKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHFiID0gKGEpID0+IHtcbiAgICAgICAgICAgIGlmICghTSlcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoYSgpLCAhUSgpKVxuICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgRCA/IFZhKE4pIDogTmEoTik7XG4gICAgICAgICAgICAgICAgICB9IGNhdGNoIChiKSB7XG4gICAgICAgICAgICAgICAgICAgIGIgaW5zdGFuY2VvZiBFYSB8fCBcInVud2luZFwiID09IGIgfHwgeigxLCBiKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBjYXRjaCAoYikge1xuICAgICAgICAgICAgICAgIGIgaW5zdGFuY2VvZiBFYSB8fCBcInVud2luZFwiID09IGIgfHwgeigxLCBiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgZnVuY3Rpb24gcmIoYSkge1xuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBBdG9taWNzLnViICYmIChBdG9taWNzLnViKHAoKSwgYSA+PiAyLCBhKS52YWx1ZS50aGVuKFFhKSwgYSArPSAxMjgsIEF0b21pY3Muc3RvcmUocCgpLCBhID4+IDIsIDEpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdy5fX2Vtc2NyaXB0ZW5fdGhyZWFkX21haWxib3hfYXdhaXQgPSByYjtcbiAgICAgICAgICBmdW5jdGlvbiBRYSgpIHtcbiAgICAgICAgICAgIHZhciBhID0gUGEoKTtcbiAgICAgICAgICAgIGEgJiYgKHJiKGEpLCBxYigoKSA9PiBzYigpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHcuY2hlY2tNYWlsYm94ID0gUWE7XG4gICAgICAgICAgdmFyIFkgPSAoYSkgPT4gMCA9PT0gYSAlIDQgJiYgKDAgIT09IGEgJSAxMDAgfHwgMCA9PT0gYSAlIDQwMCksIHRiID0gWzAsIDMxLCA2MCwgOTEsIDEyMSwgMTUyLCAxODIsIDIxMywgMjQ0LCAyNzQsIDMwNSwgMzM1XSwgdWIgPSBbMCwgMzEsIDU5LCA5MCwgMTIwLCAxNTEsIDE4MSwgMjEyLCAyNDMsIDI3MywgMzA0LCAzMzRdO1xuICAgICAgICAgIGZ1bmN0aW9uIHZiKGEsIGIsIGMsIGQsIGcsIGgsIGssIHEpIHtcbiAgICAgICAgICAgIHJldHVybiBEID8gVygxNywgMSwgYSwgYiwgYywgZCwgZywgaCwgaywgcSkgOiAtNTI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIHdiKGEsIGIsIGMsIGQsIGcsIGgsIGspIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVygxOCwgMSwgYSwgYiwgYywgZCwgZywgaCwgayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB5YiA9IChhKSA9PiB7XG4gICAgICAgICAgICB2YXIgYiA9IGNiKGEpICsgMSwgYyA9IHhiKGIpO1xuICAgICAgICAgICAgYyAmJiBlYihhLCBjLCBiKTtcbiAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgIH0sIEFiID0gKGEpID0+IHtcbiAgICAgICAgICAgIHZhciBiID0gemIoKTtcbiAgICAgICAgICAgIGEgPSBhKCk7XG4gICAgICAgICAgICBUYShiKTtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZnVuY3Rpb24gVyhhLCBiKSB7XG4gICAgICAgICAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGggLSAyLCBkID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgcmV0dXJuIEFiKCgpID0+IHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgZyA9IEJiKDggKiBjKSwgaCA9IGcgPj4gMywgayA9IDA7IGsgPCBjOyBrKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcSA9IGRbMiArIGtdO1xuICAgICAgICAgICAgICAgIGVhKClbaCArIGsgPj4+IDBdID0gcTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gQ2IoYSwgYywgZywgYik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIERiID0gW10sIEViID0ge30sIEdiID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFGYikge1xuICAgICAgICAgICAgICB2YXIgYSA9IHsgVVNFUjogXCJ3ZWJfdXNlclwiLCBMT0dOQU1FOiBcIndlYl91c2VyXCIsIFBBVEg6IFwiL1wiLCBQV0Q6IFwiL1wiLCBIT01FOiBcIi9ob21lL3dlYl91c2VyXCIsIExBTkc6IChcIm9iamVjdFwiID09IHR5cGVvZiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLmxhbmd1YWdlcyAmJiBuYXZpZ2F0b3IubGFuZ3VhZ2VzWzBdIHx8IFwiQ1wiKS5yZXBsYWNlKFwiLVwiLCBcIl9cIikgKyBcIi5VVEYtOFwiLCBfOiBqYSB8fCBcIi4vdGhpcy5wcm9ncmFtXCIgfSwgYjtcbiAgICAgICAgICAgICAgZm9yIChiIGluIEViKVxuICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gRWJbYl0gPyBkZWxldGUgYVtiXSA6IGFbYl0gPSBFYltiXTtcbiAgICAgICAgICAgICAgdmFyIGMgPSBbXTtcbiAgICAgICAgICAgICAgZm9yIChiIGluIGEpXG4gICAgICAgICAgICAgICAgYy5wdXNoKGAke2J9PSR7YVtiXX1gKTtcbiAgICAgICAgICAgICAgRmIgPSBjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIEZiO1xuICAgICAgICAgIH0sIEZiO1xuICAgICAgICAgIGZ1bmN0aW9uIEhiKGEsIGIpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVygxOSwgMSwgYSwgYik7XG4gICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgIGIgPj4+PSAwO1xuICAgICAgICAgICAgdmFyIGMgPSAwO1xuICAgICAgICAgICAgR2IoKS5mb3JFYWNoKGZ1bmN0aW9uKGQsIGcpIHtcbiAgICAgICAgICAgICAgdmFyIGggPSBiICsgYztcbiAgICAgICAgICAgICAgZyA9IHQoKVthICsgNCAqIGcgPj4gMiA+Pj4gMF0gPSBoO1xuICAgICAgICAgICAgICBmb3IgKGggPSAwOyBoIDwgZC5sZW5ndGg7ICsraClcbiAgICAgICAgICAgICAgICBhYSgpW2crKyA+PiAwID4+PiAwXSA9IGQuY2hhckNvZGVBdChoKTtcbiAgICAgICAgICAgICAgYWEoKVtnID4+IDAgPj4+IDBdID0gMDtcbiAgICAgICAgICAgICAgYyArPSBkLmxlbmd0aCArIDE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBJYihhLCBiKSB7XG4gICAgICAgICAgICBpZiAoRClcbiAgICAgICAgICAgICAgcmV0dXJuIFcoMjAsIDEsIGEsIGIpO1xuICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIHZhciBjID0gR2IoKTtcbiAgICAgICAgICAgIHQoKVthID4+IDIgPj4+IDBdID0gYy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgZCA9IDA7XG4gICAgICAgICAgICBjLmZvckVhY2goZnVuY3Rpb24oZykge1xuICAgICAgICAgICAgICBkICs9IGcubGVuZ3RoICsgMTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdCgpW2IgPj4gMiA+Pj4gMF0gPSBkO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIEpiKGEpIHtcbiAgICAgICAgICAgIHJldHVybiBEID8gVygyMSwgMSwgYSkgOiA1MjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZnVuY3Rpb24gTmIoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgcmV0dXJuIEQgPyBXKDIyLCAxLCBhLCBiLCBjLCBkKSA6IDUyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmdW5jdGlvbiBPYihhLCBiLCBjLCBkLCBnKSB7XG4gICAgICAgICAgICByZXR1cm4gRCA/IFcoMjMsIDEsIGEsIGIsIGMsIGQsIGcpIDogNzA7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBQYiA9IFtudWxsLCBbXSwgW11dO1xuICAgICAgICAgIGZ1bmN0aW9uIFFiKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICByZXR1cm4gVygyNCwgMSwgYSwgYiwgYywgZCk7XG4gICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgZCA+Pj49IDA7XG4gICAgICAgICAgICBmb3IgKHZhciBnID0gMCwgaCA9IDA7IGggPCBjOyBoKyspIHtcbiAgICAgICAgICAgICAgdmFyIGsgPSB0KClbYiA+PiAyID4+PiAwXSwgcSA9IHQoKVtiICsgNCA+PiAyID4+PiAwXTtcbiAgICAgICAgICAgICAgYiArPSA4O1xuICAgICAgICAgICAgICBmb3IgKHZhciBCID0gMDsgQiA8IHE7IEIrKykge1xuICAgICAgICAgICAgICAgIHZhciB2ID0gbigpW2sgKyBCID4+PiAwXSwgeSA9IFBiW2FdO1xuICAgICAgICAgICAgICAgIDAgPT09IHYgfHwgMTAgPT09IHYgPyAoKDEgPT09IGEgPyBxYSA6IEkpKEphKHksIDApKSwgeS5sZW5ndGggPSAwKSA6IHkucHVzaCh2KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBnICs9IHE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0KClbZCA+PiAyID4+PiAwXSA9IGc7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFJiID0gWzMxLCAyOSwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdLCBTYiA9IFszMSwgMjgsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXTtcbiAgICAgICAgICBmdW5jdGlvbiBUYihhKSB7XG4gICAgICAgICAgICB2YXIgYiA9IEFycmF5KGNiKGEpICsgMSk7XG4gICAgICAgICAgICBkYihhLCBiLCAwLCBiLmxlbmd0aCk7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFViID0gKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGFhKCkuc2V0KGEsIGIgPj4+IDApO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZnVuY3Rpb24gVmIoYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gZyhmLCByLCB1KSB7XG4gICAgICAgICAgICAgIGZvciAoZiA9IFwibnVtYmVyXCIgPT0gdHlwZW9mIGYgPyBmLnRvU3RyaW5nKCkgOiBmIHx8IFwiXCI7IGYubGVuZ3RoIDwgcjsgKVxuICAgICAgICAgICAgICAgIGYgPSB1WzBdICsgZjtcbiAgICAgICAgICAgICAgcmV0dXJuIGY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBoKGYsIHIpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGcoZiwgciwgXCIwXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gayhmLCByKSB7XG4gICAgICAgICAgICAgIGZ1bmN0aW9uIHUoS2IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMCA+IEtiID8gLTEgOiAwIDwgS2IgPyAxIDogMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgSDtcbiAgICAgICAgICAgICAgMCA9PT0gKEggPSB1KGYuZ2V0RnVsbFllYXIoKSAtIHIuZ2V0RnVsbFllYXIoKSkpICYmIDAgPT09IChIID0gdShmLmdldE1vbnRoKCkgLSByLmdldE1vbnRoKCkpKSAmJiAoSCA9IHUoZi5nZXREYXRlKCkgLSByLmdldERhdGUoKSkpO1xuICAgICAgICAgICAgICByZXR1cm4gSDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHEoZikge1xuICAgICAgICAgICAgICBzd2l0Y2ggKGYuZ2V0RGF5KCkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpIC0gMSwgMTEsIDI5KTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZjtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLCAwLCAzKTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoXG4gICAgICAgICAgICAgICAgICAgIGYuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpLCAwLCAxKTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpIC0gMSwgMTEsIDMxKTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZi5nZXRGdWxsWWVhcigpIC0gMSwgMTEsIDMwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gQihmKSB7XG4gICAgICAgICAgICAgIHZhciByID0gZi5RYTtcbiAgICAgICAgICAgICAgZm9yIChmID0gbmV3IERhdGUobmV3IERhdGUoZi5SYSArIDE5MDAsIDAsIDEpLmdldFRpbWUoKSk7IDAgPCByOyApIHtcbiAgICAgICAgICAgICAgICB2YXIgdSA9IGYuZ2V0TW9udGgoKSwgSCA9IChZKGYuZ2V0RnVsbFllYXIoKSkgPyBSYiA6IFNiKVt1XTtcbiAgICAgICAgICAgICAgICBpZiAociA+IEggLSBmLmdldERhdGUoKSlcbiAgICAgICAgICAgICAgICAgIHIgLT0gSCAtIGYuZ2V0RGF0ZSgpICsgMSwgZi5zZXREYXRlKDEpLCAxMSA+IHUgPyBmLnNldE1vbnRoKHUgKyAxKSA6IChmLnNldE1vbnRoKDApLCBmLnNldEZ1bGxZZWFyKGYuZ2V0RnVsbFllYXIoKSArIDEpKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGYuc2V0RGF0ZShmLmdldERhdGUoKSArIHIpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHUgPSBuZXcgRGF0ZShmLmdldEZ1bGxZZWFyKCkgKyAxLCAwLCA0KTtcbiAgICAgICAgICAgICAgciA9IHEobmV3IERhdGUoXG4gICAgICAgICAgICAgICAgZi5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgICAgNFxuICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgdSA9IHEodSk7XG4gICAgICAgICAgICAgIHJldHVybiAwID49IGsociwgZikgPyAwID49IGsodSwgZikgPyBmLmdldEZ1bGxZZWFyKCkgKyAxIDogZi5nZXRGdWxsWWVhcigpIDogZi5nZXRGdWxsWWVhcigpIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgYiA+Pj49IDA7XG4gICAgICAgICAgICBjID4+Pj0gMDtcbiAgICAgICAgICAgIGQgPj4+PSAwO1xuICAgICAgICAgICAgdmFyIHYgPSBwKClbZCArIDQwID4+IDIgPj4+IDBdO1xuICAgICAgICAgICAgZCA9IHsgcmI6IHAoKVtkID4+IDIgPj4+IDBdLCBxYjogcCgpW2QgKyA0ID4+IDIgPj4+IDBdLCBUYTogcCgpW2QgKyA4ID4+IDIgPj4+IDBdLCBYYTogcCgpW2QgKyAxMiA+PiAyID4+PiAwXSwgVWE6IHAoKVtkICsgMTYgPj4gMiA+Pj4gMF0sIFJhOiBwKClbZCArIDIwID4+IDIgPj4+IDBdLCBOYTogcCgpW2QgKyAyNCA+PiAyID4+PiAwXSwgUWE6IHAoKVtkICsgMjggPj4gMiA+Pj4gMF0sIHpiOiBwKClbZCArIDMyID4+IDIgPj4+IDBdLCBwYjogcCgpW2QgKyAzNiA+PiAyID4+PiAwXSwgc2I6IHYgPyBLYSh2KSA6IFwiXCIgfTtcbiAgICAgICAgICAgIGMgPSBLYShjKTtcbiAgICAgICAgICAgIHYgPSB7XG4gICAgICAgICAgICAgIFwiJWNcIjogXCIlYSAlYiAlZCAlSDolTTolUyAlWVwiLFxuICAgICAgICAgICAgICBcIiVEXCI6IFwiJW0vJWQvJXlcIixcbiAgICAgICAgICAgICAgXCIlRlwiOiBcIiVZLSVtLSVkXCIsXG4gICAgICAgICAgICAgIFwiJWhcIjogXCIlYlwiLFxuICAgICAgICAgICAgICBcIiVyXCI6IFwiJUk6JU06JVMgJXBcIixcbiAgICAgICAgICAgICAgXCIlUlwiOiBcIiVIOiVNXCIsXG4gICAgICAgICAgICAgIFwiJVRcIjogXCIlSDolTTolU1wiLFxuICAgICAgICAgICAgICBcIiV4XCI6IFwiJW0vJWQvJXlcIixcbiAgICAgICAgICAgICAgXCIlWFwiOiBcIiVIOiVNOiVTXCIsXG4gICAgICAgICAgICAgIFwiJUVjXCI6IFwiJWNcIixcbiAgICAgICAgICAgICAgXCIlRUNcIjogXCIlQ1wiLFxuICAgICAgICAgICAgICBcIiVFeFwiOiBcIiVtLyVkLyV5XCIsXG4gICAgICAgICAgICAgIFwiJUVYXCI6IFwiJUg6JU06JVNcIixcbiAgICAgICAgICAgICAgXCIlRXlcIjogXCIleVwiLFxuICAgICAgICAgICAgICBcIiVFWVwiOiBcIiVZXCIsXG4gICAgICAgICAgICAgIFwiJU9kXCI6IFwiJWRcIixcbiAgICAgICAgICAgICAgXCIlT2VcIjogXCIlZVwiLFxuICAgICAgICAgICAgICBcIiVPSFwiOiBcIiVIXCIsXG4gICAgICAgICAgICAgIFwiJU9JXCI6IFwiJUlcIixcbiAgICAgICAgICAgICAgXCIlT21cIjogXCIlbVwiLFxuICAgICAgICAgICAgICBcIiVPTVwiOiBcIiVNXCIsXG4gICAgICAgICAgICAgIFwiJU9TXCI6IFwiJVNcIixcbiAgICAgICAgICAgICAgXCIlT3VcIjogXCIldVwiLFxuICAgICAgICAgICAgICBcIiVPVVwiOiBcIiVVXCIsXG4gICAgICAgICAgICAgIFwiJU9WXCI6IFwiJVZcIixcbiAgICAgICAgICAgICAgXCIlT3dcIjogXCIld1wiLFxuICAgICAgICAgICAgICBcIiVPV1wiOiBcIiVXXCIsXG4gICAgICAgICAgICAgIFwiJU95XCI6IFwiJXlcIlxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGZvciAodmFyIHkgaW4gdilcbiAgICAgICAgICAgICAgYyA9IGMucmVwbGFjZShuZXcgUmVnRXhwKHksIFwiZ1wiKSwgdlt5XSk7XG4gICAgICAgICAgICB2YXIgTGIgPSBcIlN1bmRheSBNb25kYXkgVHVlc2RheSBXZWRuZXNkYXkgVGh1cnNkYXkgRnJpZGF5IFNhdHVyZGF5XCIuc3BsaXQoXCIgXCIpLCBNYiA9IFwiSmFudWFyeSBGZWJydWFyeSBNYXJjaCBBcHJpbCBNYXkgSnVuZSBKdWx5IEF1Z3VzdCBTZXB0ZW1iZXIgT2N0b2JlciBOb3ZlbWJlciBEZWNlbWJlclwiLnNwbGl0KFwiIFwiKTtcbiAgICAgICAgICAgIHYgPSB7XG4gICAgICAgICAgICAgIFwiJWFcIjogKGYpID0+IExiW2YuTmFdLnN1YnN0cmluZygwLCAzKSxcbiAgICAgICAgICAgICAgXCIlQVwiOiAoZikgPT4gTGJbZi5OYV0sXG4gICAgICAgICAgICAgIFwiJWJcIjogKGYpID0+IE1iW2YuVWFdLnN1YnN0cmluZygwLCAzKSxcbiAgICAgICAgICAgICAgXCIlQlwiOiAoZikgPT4gTWJbZi5VYV0sXG4gICAgICAgICAgICAgIFwiJUNcIjogKGYpID0+IGgoKGYuUmEgKyAxOTAwKSAvIDEwMCB8IDAsIDIpLFxuICAgICAgICAgICAgICBcIiVkXCI6IChmKSA9PiBoKGYuWGEsIDIpLFxuICAgICAgICAgICAgICBcIiVlXCI6IChmKSA9PiBnKGYuWGEsIDIsIFwiIFwiKSxcbiAgICAgICAgICAgICAgXCIlZ1wiOiAoZikgPT4gQihmKS50b1N0cmluZygpLnN1YnN0cmluZygyKSxcbiAgICAgICAgICAgICAgXCIlR1wiOiAoZikgPT4gQihmKSxcbiAgICAgICAgICAgICAgXCIlSFwiOiAoZikgPT4gaChmLlRhLCAyKSxcbiAgICAgICAgICAgICAgXCIlSVwiOiAoZikgPT4ge1xuICAgICAgICAgICAgICAgIGYgPSBmLlRhO1xuICAgICAgICAgICAgICAgIDAgPT0gZiA/IGYgPSAxMiA6IDEyIDwgZiAmJiAoZiAtPSAxMik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGgoZiwgMik7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiJWpcIjogKGYpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMCwgdSA9IDA7IHUgPD0gZi5VYSAtIDE7IHIgKz0gKFkoZi5SYSArIDE5MDApID8gUmIgOiBTYilbdSsrXSlcbiAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICByZXR1cm4gaChmLlhhICsgciwgMyk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiJW1cIjogKGYpID0+IGgoZi5VYSArIDEsIDIpLFxuICAgICAgICAgICAgICBcIiVNXCI6IChmKSA9PiBoKGYucWIsIDIpLFxuICAgICAgICAgICAgICBcIiVuXCI6ICgpID0+IFwiXFxuXCIsXG4gICAgICAgICAgICAgIFwiJXBcIjogKGYpID0+IDAgPD0gZi5UYSAmJiAxMiA+IGYuVGEgPyBcIkFNXCIgOiBcIlBNXCIsXG4gICAgICAgICAgICAgIFwiJVNcIjogKGYpID0+IGgoZi5yYiwgMiksXG4gICAgICAgICAgICAgIFwiJXRcIjogKCkgPT4gXCJcdFwiLFxuICAgICAgICAgICAgICBcIiV1XCI6IChmKSA9PiBmLk5hIHx8IDcsXG4gICAgICAgICAgICAgIFwiJVVcIjogKGYpID0+IGgoTWF0aC5mbG9vcigoZi5RYSArIDcgLSBmLk5hKSAvIDcpLCAyKSxcbiAgICAgICAgICAgICAgXCIlVlwiOiAoZikgPT4ge1xuICAgICAgICAgICAgICAgIHZhciByID0gTWF0aC5mbG9vcigoZi5RYSArIDcgLSAoZi5OYSArIDYpICUgNykgLyA3KTtcbiAgICAgICAgICAgICAgICAyID49IChmLk5hICsgMzcxIC0gZi5RYSAtIDIpICUgNyAmJiByKys7XG4gICAgICAgICAgICAgICAgaWYgKHIpXG4gICAgICAgICAgICAgICAgICA1MyA9PSByICYmICh1ID0gKGYuTmEgKyAzNzEgLSBmLlFhKSAlIDcsIDQgPT0gdSB8fCAzID09IHUgJiYgWShmLlJhKSB8fCAociA9IDEpKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHIgPSA1MjtcbiAgICAgICAgICAgICAgICAgIHZhciB1ID0gKGYuTmEgKyA3IC0gZi5RYSAtIDEpICUgNztcbiAgICAgICAgICAgICAgICAgICg0ID09IHUgfHwgNSA9PSB1ICYmIFkoZi5SYSAlIDQwMCAtIDEpKSAmJiByKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBoKHIsIDIpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcIiV3XCI6IChmKSA9PiBmLk5hLFxuICAgICAgICAgICAgICBcIiVXXCI6IChmKSA9PiBoKE1hdGguZmxvb3IoKGYuUWEgKyA3IC0gKGYuTmEgKyA2KSAlIDcpIC8gNyksIDIpLFxuICAgICAgICAgICAgICBcIiV5XCI6IChmKSA9PiAoZi5SYSArIDE5MDApLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIpLFxuICAgICAgICAgICAgICBcIiVZXCI6IChmKSA9PiBmLlJhICsgMTkwMCxcbiAgICAgICAgICAgICAgXCIlelwiOiAoZikgPT4ge1xuICAgICAgICAgICAgICAgIGYgPSBmLnBiO1xuICAgICAgICAgICAgICAgIHZhciByID0gMCA8PSBmO1xuICAgICAgICAgICAgICAgIGYgPSBNYXRoLmFicyhmKSAvIDYwO1xuICAgICAgICAgICAgICAgIHJldHVybiAociA/IFwiK1wiIDogXCItXCIpICsgU3RyaW5nKFwiMDAwMFwiICsgKGYgLyA2MCAqIDEwMCArIGYgJSA2MCkpLnNsaWNlKC00KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCIlWlwiOiAoZikgPT4gZi5zYixcbiAgICAgICAgICAgICAgXCIlJVwiOiAoKSA9PiBcIiVcIlxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGMgPSBjLnJlcGxhY2UoXG4gICAgICAgICAgICAgIC8lJS9nLFxuICAgICAgICAgICAgICBcIlxcMFxcMFwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZm9yICh5IGluIHYpXG4gICAgICAgICAgICAgIGMuaW5jbHVkZXMoeSkgJiYgKGMgPSBjLnJlcGxhY2UobmV3IFJlZ0V4cCh5LCBcImdcIiksIHZbeV0oZCkpKTtcbiAgICAgICAgICAgIGMgPSBjLnJlcGxhY2UoL1xcMFxcMC9nLCBcIiVcIik7XG4gICAgICAgICAgICB5ID0gVGIoYyk7XG4gICAgICAgICAgICBpZiAoeS5sZW5ndGggPiBiKVxuICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIFViKHksIGEpO1xuICAgICAgICAgICAgcmV0dXJuIHkubGVuZ3RoIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFogPSB2b2lkIDAsIFdiID0gW107XG4gICAgICAgICAgZnVuY3Rpb24gWGIoYSwgYikge1xuICAgICAgICAgICAgaWYgKCFaKSB7XG4gICAgICAgICAgICAgIFogPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbiAgICAgICAgICAgICAgdmFyIGMgPSBQLmxlbmd0aDtcbiAgICAgICAgICAgICAgaWYgKFopXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCAwICsgYzsgZCsrKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgZyA9IFVhKGQpO1xuICAgICAgICAgICAgICAgICAgZyAmJiBaLnNldChnLCBkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYyA9IFouZ2V0KGEpIHx8IDApXG4gICAgICAgICAgICAgIHJldHVybiBjO1xuICAgICAgICAgICAgaWYgKFdiLmxlbmd0aClcbiAgICAgICAgICAgICAgYyA9IFdiLnBvcCgpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgUC5ncm93KDEpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChxKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEocSBpbnN0YW5jZW9mIFJhbmdlRXJyb3IpKVxuICAgICAgICAgICAgICAgICAgdGhyb3cgcTtcbiAgICAgICAgICAgICAgICB0aHJvdyBcIlVuYWJsZSB0byBncm93IHdhc20gdGFibGUuIFNldCBBTExPV19UQUJMRV9HUk9XVEguXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYyA9IFAubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGQgPSBjLCBQLnNldChkLCBhKSwgWFtkXSA9IFAuZ2V0KGQpO1xuICAgICAgICAgICAgfSBjYXRjaCAocSkge1xuICAgICAgICAgICAgICBpZiAoIShxIGluc3RhbmNlb2YgVHlwZUVycm9yKSlcbiAgICAgICAgICAgICAgICB0aHJvdyBxO1xuICAgICAgICAgICAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBXZWJBc3NlbWJseS5GdW5jdGlvbikge1xuICAgICAgICAgICAgICAgIGQgPSBXZWJBc3NlbWJseS5GdW5jdGlvbjtcbiAgICAgICAgICAgICAgICBnID0geyBpOiBcImkzMlwiLCBqOiBcImk2NFwiLCBmOiBcImYzMlwiLCBkOiBcImY2NFwiLCBwOiBcImkzMlwiIH07XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaCA9IHtcbiAgICAgICAgICAgICAgICAgIHBhcmFtZXRlcnM6IFtdLFxuICAgICAgICAgICAgICAgICAgcmVzdWx0czogXCJ2XCIgPT0gYlswXSA/IFtdIDogW2dbYlswXV1dXG4gICAgICAgICAgICAgICAgfSwgayA9IDE7IGsgPCBiLmxlbmd0aDsgKytrKVxuICAgICAgICAgICAgICAgICAgaC5wYXJhbWV0ZXJzLnB1c2goZ1tiW2tdXSk7XG4gICAgICAgICAgICAgICAgYiA9IG5ldyBkKGgsIGEpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGQgPSBbMV07XG4gICAgICAgICAgICAgICAgZyA9IGIuc2xpY2UoMCwgMSk7XG4gICAgICAgICAgICAgICAgYiA9IGIuc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgaCA9IHsgaTogMTI3LCBwOiAxMjcsIGo6IDEyNiwgZjogMTI1LCBkOiAxMjQgfTtcbiAgICAgICAgICAgICAgICBkLnB1c2goOTYpO1xuICAgICAgICAgICAgICAgIGsgPSBiLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAxMjggPiBrID8gZC5wdXNoKGspIDogZC5wdXNoKGsgJSAxMjggfCAxMjgsIGsgPj4gNyk7XG4gICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGIubGVuZ3RoOyArK2spXG4gICAgICAgICAgICAgICAgICBkLnB1c2goaFtiW2tdXSk7XG4gICAgICAgICAgICAgICAgXCJ2XCIgPT0gZyA/IGQucHVzaCgwKSA6IGQucHVzaCgxLCBoW2ddKTtcbiAgICAgICAgICAgICAgICBiID0gWzAsIDk3LCAxMTUsIDEwOSwgMSwgMCwgMCwgMCwgMV07XG4gICAgICAgICAgICAgICAgZyA9IGQubGVuZ3RoO1xuICAgICAgICAgICAgICAgIDEyOCA+IGcgPyBiLnB1c2goZykgOiBiLnB1c2goZyAlIDEyOCB8IDEyOCwgZyA+PiA3KTtcbiAgICAgICAgICAgICAgICBiLnB1c2guYXBwbHkoYiwgZCk7XG4gICAgICAgICAgICAgICAgYi5wdXNoKDIsIDcsIDEsIDEsIDEwMSwgMSwgMTAyLCAwLCAwLCA3LCA1LCAxLCAxLCAxMDIsIDAsIDApO1xuICAgICAgICAgICAgICAgIGIgPSBuZXcgV2ViQXNzZW1ibHkuTW9kdWxlKG5ldyBVaW50OEFycmF5KGIpKTtcbiAgICAgICAgICAgICAgICBiID0gbmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKFxuICAgICAgICAgICAgICAgICAgYixcbiAgICAgICAgICAgICAgICAgIHsgZTogeyBmOiBhIH0gfVxuICAgICAgICAgICAgICAgICkuZXhwb3J0cy5mO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGQgPSBjO1xuICAgICAgICAgICAgICBQLnNldChkLCBiKTtcbiAgICAgICAgICAgICAgWFtkXSA9IFAuZ2V0KGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgWi5zZXQoYSwgYyk7XG4gICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICB9XG4gICAgICAgICAgVi5XYSgpO1xuICAgICAgICAgIHZhciBZYiA9IFtudWxsLCBMYSwgTWEsIFphLCBhYiwgYmIsIGZiLCBnYiwgaGIsIGliLCBqYiwga2IsIGxiLCBtYiwgbmIsIG9iLCBwYiwgdmIsIHdiLCBIYiwgSWIsIEpiLCBOYiwgT2IsIFFiXSwgYWMgPSB7XG4gICAgICAgICAgICBiOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgICBuZXcgV2EoYSkuV2EoYiA+Pj4gMCwgYyA+Pj4gMCk7XG4gICAgICAgICAgICAgIFhhID0gYTtcbiAgICAgICAgICAgICAgWWErKztcbiAgICAgICAgICAgICAgdGhyb3cgWGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgTjogZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICBaYihhID4+PiAwLCAhQSwgMSwgIWthLCAxMzEwNzIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgVi5aYSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGs6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIEQgPyBwb3N0TWVzc2FnZSh7IGNtZDogXCJjbGVhbnVwVGhyZWFkXCIsIHRocmVhZDogYSB9KSA6IEdhKGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEk6ICRhLFxuICAgICAgICAgICAgaDogYWIsXG4gICAgICAgICAgICBUOiBiYixcbiAgICAgICAgICAgIEQ6IGZiLFxuICAgICAgICAgICAgRjogZ2IsXG4gICAgICAgICAgICBVOiBoYixcbiAgICAgICAgICAgIFI6IGliLFxuICAgICAgICAgICAgSjogamIsXG4gICAgICAgICAgICBROiBrYixcbiAgICAgICAgICAgIG86IGxiLFxuICAgICAgICAgICAgRTogbWIsXG4gICAgICAgICAgICBCOiBuYixcbiAgICAgICAgICAgIFM6IG9iLFxuICAgICAgICAgICAgQzogcGIsXG4gICAgICAgICAgICBxOiAoKSA9PiB0cnVlLFxuICAgICAgICAgICAgejogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICBhID4+Pj0gMDtcbiAgICAgICAgICAgICAgYSA9PSBiID4+PiAwID8gc2V0VGltZW91dCgoKSA9PiBRYSgpKSA6IEQgPyBwb3N0TWVzc2FnZSh7IHRhcmdldFRocmVhZDogYSwgY21kOiBcImNoZWNrTWFpbGJveFwiIH0pIDogKGEgPSBWLk1hW2FdKSAmJiBhLnBvc3RNZXNzYWdlKHsgY21kOiBcImNoZWNrTWFpbGJveFwiIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIEw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgTTogcmIsXG4gICAgICAgICAgICBwOiBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICAgIEMgJiYgVi5NYVthID4+PiAwXS5yZWYoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0OiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgIGEgPSBiICsgMjA5NzE1MiA+Pj4gMCA8IDQxOTQzMDUgLSAhIWEgPyAoYSA+Pj4gMCkgKyA0Mjk0OTY3Mjk2ICogYiA6IE5hTjtcbiAgICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICAgIGEgPSBuZXcgRGF0ZSgxZTMgKiBhKTtcbiAgICAgICAgICAgICAgcCgpW2MgPj4gMiA+Pj4gMF0gPSBhLmdldFVUQ1NlY29uZHMoKTtcbiAgICAgICAgICAgICAgcCgpW2MgKyA0ID4+IDIgPj4+IDBdID0gYS5nZXRVVENNaW51dGVzKCk7XG4gICAgICAgICAgICAgIHAoKVtjICsgOCA+PiAyID4+PiAwXSA9IGEuZ2V0VVRDSG91cnMoKTtcbiAgICAgICAgICAgICAgcCgpW2MgKyAxMiA+PiAyID4+PiAwXSA9IGEuZ2V0VVRDRGF0ZSgpO1xuICAgICAgICAgICAgICBwKClbYyArIDE2ID4+IDIgPj4+IDBdID0gYS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgICBwKClbYyArIDIwID4+IDIgPj4+IDBdID0gYS5nZXRVVENGdWxsWWVhcigpIC0gMTkwMDtcbiAgICAgICAgICAgICAgcCgpW2MgKyAyNCA+PiAyID4+PiAwXSA9IGEuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgICAgIGEgPSAoYS5nZXRUaW1lKCkgLSBEYXRlLlVUQyhhLmdldFVUQ0Z1bGxZZWFyKCksIDAsIDEsIDAsIDAsIDAsIDApKSAvIDg2NGU1IHwgMDtcbiAgICAgICAgICAgICAgcCgpW2MgKyAyOCA+PiAyID4+PiAwXSA9IGE7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdTogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICBhID0gYiArIDIwOTcxNTIgPj4+IDAgPCA0MTk0MzA1IC0gISFhID8gKGEgPj4+IDApICsgNDI5NDk2NzI5NiAqIGIgOiBOYU47XG4gICAgICAgICAgICAgIGMgPj4+PSAwO1xuICAgICAgICAgICAgICBhID0gbmV3IERhdGUoMWUzICogYSk7XG4gICAgICAgICAgICAgIHAoKVtjID4+IDIgPj4+IDBdID0gYS5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICAgIHAoKVtjICsgNCA+PiAyID4+PiAwXSA9IGEuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgICBwKClbYyArIDggPj4gMiA+Pj4gMF0gPSBhLmdldEhvdXJzKCk7XG4gICAgICAgICAgICAgIHAoKVtjICsgMTIgPj4gMiA+Pj4gMF0gPSBhLmdldERhdGUoKTtcbiAgICAgICAgICAgICAgcCgpW2MgKyAxNiA+PiAyID4+PiAwXSA9IGEuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgICAgcCgpW2MgKyAyMCA+PiAyID4+PiAwXSA9IGEuZ2V0RnVsbFllYXIoKSAtIDE5MDA7XG4gICAgICAgICAgICAgIHAoKVtjICsgMjQgPj4gMiA+Pj4gMF0gPSBhLmdldERheSgpO1xuICAgICAgICAgICAgICBiID0gKFkoYS5nZXRGdWxsWWVhcigpKSA/IHRiIDogdWIpW2EuZ2V0TW9udGgoKV0gKyBhLmdldERhdGUoKSAtIDEgfCAwO1xuICAgICAgICAgICAgICBwKClbYyArIDI4ID4+IDIgPj4+IDBdID0gYjtcbiAgICAgICAgICAgICAgcCgpW2MgKyAzNiA+PiAyID4+PiAwXSA9IC0oNjAgKiBhLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICAgICAgICBiID0gbmV3IERhdGUoYS5nZXRGdWxsWWVhcigpLCA2LCAxKS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgICB2YXIgZCA9IG5ldyBEYXRlKGEuZ2V0RnVsbFllYXIoKSwgMCwgMSkuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgICAgYSA9IChiICE9IGQgJiYgYS5nZXRUaW1lem9uZU9mZnNldCgpID09IE1hdGgubWluKGQsIGIpKSB8IDA7XG4gICAgICAgICAgICAgIHAoKVtjICsgMzIgPj4gMiA+Pj4gMF0gPSBhO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHY6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIHZhciBiID0gbmV3IERhdGUocCgpW2EgKyAyMCA+PiAyID4+PiAwXSArIDE5MDAsIHAoKVthICsgMTYgPj4gMiA+Pj4gMF0sIHAoKVthICsgMTIgPj4gMiA+Pj4gMF0sIHAoKVthICsgOCA+PiAyID4+PiAwXSwgcCgpW2EgKyA0ID4+IDIgPj4+IDBdLCBwKClbYSA+PiAyID4+PiAwXSwgMCksIGMgPSBwKClbYSArIDMyID4+IDIgPj4+IDBdLCBkID0gYi5nZXRUaW1lem9uZU9mZnNldCgpLCBnID0gbmV3IERhdGUoYi5nZXRGdWxsWWVhcigpLCA2LCAxKS5nZXRUaW1lem9uZU9mZnNldCgpLCBoID0gbmV3IERhdGUoYi5nZXRGdWxsWWVhcigpLCAwLCAxKS5nZXRUaW1lem9uZU9mZnNldCgpLCBrID0gTWF0aC5taW4oaCwgZyk7XG4gICAgICAgICAgICAgIDAgPiBjID8gcCgpW2EgKyAzMiA+PiAyID4+PiAwXSA9IE51bWJlcihnICE9IGggJiYgayA9PSBkKSA6IDAgPCBjICE9IChrID09IGQpICYmIChnID0gTWF0aC5tYXgoaCwgZyksIGIuc2V0VGltZShiLmdldFRpbWUoKSArIDZlNCAqICgoMCA8IGMgPyBrIDogZykgLSBkKSkpO1xuICAgICAgICAgICAgICBwKClbYSArIDI0ID4+IDIgPj4+IDBdID0gYi5nZXREYXkoKTtcbiAgICAgICAgICAgICAgYyA9IChZKGIuZ2V0RnVsbFllYXIoKSkgPyB0YiA6IHViKVtiLmdldE1vbnRoKCldICsgYi5nZXREYXRlKCkgLSAxIHwgMDtcbiAgICAgICAgICAgICAgcCgpW2EgKyAyOCA+PiAyID4+PiAwXSA9IGM7XG4gICAgICAgICAgICAgIHAoKVthID4+IDIgPj4+IDBdID0gYi5nZXRTZWNvbmRzKCk7XG4gICAgICAgICAgICAgIHAoKVthICsgNCA+PiAyID4+PiAwXSA9IGIuZ2V0TWludXRlcygpO1xuICAgICAgICAgICAgICBwKClbYSArIDggPj4gMiA+Pj4gMF0gPSBiLmdldEhvdXJzKCk7XG4gICAgICAgICAgICAgIHAoKVthICsgMTIgPj4gMiA+Pj4gMF0gPSBiLmdldERhdGUoKTtcbiAgICAgICAgICAgICAgcCgpW2EgKyAxNiA+PiAyID4+PiAwXSA9IGIuZ2V0TW9udGgoKTtcbiAgICAgICAgICAgICAgcCgpW2EgKyAyMCA+PiAyID4+PiAwXSA9IGIuZ2V0WWVhcigpO1xuICAgICAgICAgICAgICBhID0gYi5nZXRUaW1lKCkgLyAxZTM7XG4gICAgICAgICAgICAgIHJldHVybiAkYigoVSA9IGEsIDEgPD0gK01hdGguYWJzKFUpID8gMCA8IFUgPyArTWF0aC5mbG9vcihVIC8gNDI5NDk2NzI5NikgPj4+IDAgOiB+fitNYXRoLmNlaWwoKFUgLSArKH5+VSA+Pj4gMCkpIC8gNDI5NDk2NzI5NikgPj4+IDAgOiAwKSksIGEgPj4+IDA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcjogdmIsXG4gICAgICAgICAgICBzOiB3YixcbiAgICAgICAgICAgIHk6IGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICAgICAgZnVuY3Rpb24gZCh2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh2ID0gdi50b1RpbWVTdHJpbmcoKS5tYXRjaCgvXFwoKFtBLVphLXogXSspXFwpJC8pKSA/IHZbMV0gOiBcIkdNVFwiO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGEgPj4+PSAwO1xuICAgICAgICAgICAgICBiID4+Pj0gMDtcbiAgICAgICAgICAgICAgYyA+Pj49IDA7XG4gICAgICAgICAgICAgIHZhciBnID0gKC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpKS5nZXRGdWxsWWVhcigpLCBoID0gbmV3IERhdGUoZywgMCwgMSksIGsgPSBuZXcgRGF0ZShnLCA2LCAxKTtcbiAgICAgICAgICAgICAgZyA9IGguZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgICAgdmFyIHEgPSBrLmdldFRpbWV6b25lT2Zmc2V0KCksIEIgPSBNYXRoLm1heChnLCBxKTtcbiAgICAgICAgICAgICAgdCgpW2EgPj4gMiA+Pj4gMF0gPSA2MCAqIEI7XG4gICAgICAgICAgICAgIHAoKVtiID4+IDIgPj4+IDBdID0gTnVtYmVyKGcgIT0gcSk7XG4gICAgICAgICAgICAgIGEgPSBkKGgpO1xuICAgICAgICAgICAgICBiID0gZChrKTtcbiAgICAgICAgICAgICAgYSA9IHliKGEpO1xuICAgICAgICAgICAgICBiID0geWIoYik7XG4gICAgICAgICAgICAgIHEgPCBnID8gKHQoKVtjID4+IDIgPj4+IDBdID0gYSwgdCgpW2MgKyA0ID4+IDIgPj4+IDBdID0gYikgOiAodCgpW2MgPj4gMiA+Pj4gMF0gPSBiLCB0KClbYyArIDQgPj4gMiA+Pj4gMF0gPSBhKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjOiAoKSA9PiB7XG4gICAgICAgICAgICAgIEsoXCJcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBEYXRlLm5vdygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFY6ICgpID0+IHtcbiAgICAgICAgICAgICAgdmEgKz0gMTtcbiAgICAgICAgICAgICAgdGhyb3cgXCJ1bndpbmRcIjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBBOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIDQyOTQ5MDE3NjA7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZTogKCkgPT4gcGVyZm9ybWFuY2UudGltZU9yaWdpbiArIHBlcmZvcm1hbmNlLm5vdygpLFxuICAgICAgICAgICAgZjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHJldHVybiBDID8gKGluaXRfb3MoKSwgX190b0NvbW1vbkpTKG9zX2V4cG9ydHMpKS5jcHVzKCkubGVuZ3RoIDogbmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3k7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgSzogZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuICAgICAgICAgICAgICBWLndiID0gYiA+Pj4gMDtcbiAgICAgICAgICAgICAgRGIubGVuZ3RoID0gYztcbiAgICAgICAgICAgICAgYiA9IGQgPj4+IDAgPj4gMztcbiAgICAgICAgICAgICAgZm9yIChkID0gMDsgZCA8IGM7IGQrKylcbiAgICAgICAgICAgICAgICBEYltkXSA9IGVhKClbYiArIGQgPj4+IDBdO1xuICAgICAgICAgICAgICByZXR1cm4gWWJbYV0uYXBwbHkobnVsbCwgRGIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHg6IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgICAgYSA+Pj49IDA7XG4gICAgICAgICAgICAgIHZhciBiID0gbigpLmxlbmd0aDtcbiAgICAgICAgICAgICAgaWYgKGEgPD0gYiB8fCA0Mjk0OTAxNzYwIDwgYSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIGZvciAodmFyIGMgPSAxOyA0ID49IGM7IGMgKj0gMikge1xuICAgICAgICAgICAgICAgIHZhciBkID0gYiAqICgxICsgMC4yIC8gYyk7XG4gICAgICAgICAgICAgICAgZCA9IE1hdGgubWluKGQsIGEgKyAxMDA2NjMyOTYpO1xuICAgICAgICAgICAgICAgIHZhciBnID0gTWF0aDtcbiAgICAgICAgICAgICAgICBkID0gTWF0aC5tYXgoYSwgZCk7XG4gICAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgICAgZyA9IGcubWluLmNhbGwoZywgNDI5NDkwMTc2MCwgZCArICg2NTUzNiAtIGQgJSA2NTUzNikgJSA2NTUzNikgLSBlLmJ1ZmZlci5ieXRlTGVuZ3RoICsgNjU1MzUgPj4+IDE2O1xuICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZS5ncm93KGcpO1xuICAgICAgICAgICAgICAgICAgICBtKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoID0gMTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGspIHtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGggPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChoKVxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIE86IEhiLFxuICAgICAgICAgICAgUDogSWIsXG4gICAgICAgICAgICBIOiBOYSxcbiAgICAgICAgICAgIGc6IEpiLFxuICAgICAgICAgICAgbjogTmIsXG4gICAgICAgICAgICB3OiBPYixcbiAgICAgICAgICAgIG06IFFiLFxuICAgICAgICAgICAgYTogZSB8fCB3Lndhc21NZW1vcnksXG4gICAgICAgICAgICBHOiBWYixcbiAgICAgICAgICAgIGQ6IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIFZiKGEgPj4+IDAsIGIgPj4+IDAsIGMgPj4+IDAsIGQgPj4+IDApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGo6IGZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgICAgICAgICAgICAgY29uc3QgZyA9IFAubGVuZ3RoO1xuICAgICAgICAgICAgICBhID0gbmV3IFVpbnQ4QXJyYXkobigpLnNsaWNlKGEgKyBiLCBhICsgYykpO1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBoID0gbmV3IFdlYkFzc2VtYmx5Lk1vZHVsZShhKSwgayA9IG5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZShoLCB7IGVudjogeyBtZW1vcnk6IGUgfSB9KSwgcTtcbiAgICAgICAgICAgICAgICBmb3IgKHEgaW4gay5leHBvcnRzKVxuICAgICAgICAgICAgICAgICAgWGIoay5leHBvcnRzW3FdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZyA8IFAubGVuZ3RoID8gZyA6IGQ7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKEIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS5sb2coQiksIGQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGEoYywgZCkge1xuICAgICAgICAgICAgICBjID0gYy5leHBvcnRzO1xuICAgICAgICAgICAgICBMID0gYyA9IGJjKGMpO1xuICAgICAgICAgICAgICBWLiRhLnB1c2goTC56YSk7XG4gICAgICAgICAgICAgIFAgPSBMLkFhO1xuICAgICAgICAgICAgICB0YS51bnNoaWZ0KEwuVyk7XG4gICAgICAgICAgICAgIHJhID0gZDtcbiAgICAgICAgICAgICAgeWEoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYiA9IHsgYTogYWMgfTtcbiAgICAgICAgICAgIHhhKCk7XG4gICAgICAgICAgICBpZiAody5pbnN0YW50aWF0ZVdhc20pXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHcuaW5zdGFudGlhdGVXYXNtKGIsIGEpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChjKSB7XG4gICAgICAgICAgICAgICAgSShcIk1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6IFwiICsgYyksIHgoYyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIERhKGIsIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgYShjLmluc3RhbmNlLCBjLm1vZHVsZSk7XG4gICAgICAgICAgICB9KS5jYXRjaCh4KTtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgICB9KSgpO1xuICAgICAgICAgIHcuX09ydEluaXQgPSAoYSwgYikgPT4gKHcuX09ydEluaXQgPSBMLlgpKGEsIGIpO1xuICAgICAgICAgIHcuX09ydEdldExhc3RFcnJvciA9IChhLCBiKSA9PiAody5fT3J0R2V0TGFzdEVycm9yID0gTC5ZKShhLCBiKTtcbiAgICAgICAgICB3Ll9PcnRDcmVhdGVTZXNzaW9uT3B0aW9ucyA9IChhLCBiLCBjLCBkLCBnLCBoLCBrLCBxLCBCLCB2KSA9PiAody5fT3J0Q3JlYXRlU2Vzc2lvbk9wdGlvbnMgPSBMLlopKGEsIGIsIGMsIGQsIGcsIGgsIGssIHEsIEIsIHYpO1xuICAgICAgICAgIHcuX09ydEFwcGVuZEV4ZWN1dGlvblByb3ZpZGVyID0gKGEsIGIpID0+ICh3Ll9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlciA9IEwuXykoYSwgYik7XG4gICAgICAgICAgdy5fT3J0QWRkRnJlZURpbWVuc2lvbk92ZXJyaWRlID0gKGEsIGIsIGMpID0+ICh3Ll9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGUgPSBMLiQpKGEsIGIsIGMpO1xuICAgICAgICAgIHcuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeSA9IChhLCBiLCBjKSA9PiAody5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5ID0gTC5hYSkoYSwgYiwgYyk7XG4gICAgICAgICAgdy5fT3J0UmVsZWFzZVNlc3Npb25PcHRpb25zID0gKGEpID0+ICh3Ll9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnMgPSBMLmJhKShhKTtcbiAgICAgICAgICB3Ll9PcnRDcmVhdGVTZXNzaW9uID0gKGEsIGIsIGMpID0+ICh3Ll9PcnRDcmVhdGVTZXNzaW9uID0gTC5jYSkoYSwgYiwgYyk7XG4gICAgICAgICAgdy5fT3J0UmVsZWFzZVNlc3Npb24gPSAoYSkgPT4gKHcuX09ydFJlbGVhc2VTZXNzaW9uID0gTC5kYSkoYSk7XG4gICAgICAgICAgdy5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudCA9IChhLCBiLCBjKSA9PiAody5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudCA9IEwuZWEpKGEsIGIsIGMpO1xuICAgICAgICAgIHcuX09ydEdldElucHV0TmFtZSA9IChhLCBiKSA9PiAody5fT3J0R2V0SW5wdXROYW1lID0gTC5mYSkoYSwgYik7XG4gICAgICAgICAgdy5fT3J0R2V0T3V0cHV0TmFtZSA9IChhLCBiKSA9PiAody5fT3J0R2V0T3V0cHV0TmFtZSA9IEwuZ2EpKGEsIGIpO1xuICAgICAgICAgIHcuX09ydEZyZWUgPSAoYSkgPT4gKHcuX09ydEZyZWUgPSBMLmhhKShhKTtcbiAgICAgICAgICB3Ll9PcnRDcmVhdGVUZW5zb3IgPSAoYSwgYiwgYywgZCwgZywgaCkgPT4gKHcuX09ydENyZWF0ZVRlbnNvciA9IEwuaWEpKGEsIGIsIGMsIGQsIGcsIGgpO1xuICAgICAgICAgIHcuX09ydEdldFRlbnNvckRhdGEgPSAoYSwgYiwgYywgZCwgZykgPT4gKHcuX09ydEdldFRlbnNvckRhdGEgPSBMLmphKShhLCBiLCBjLCBkLCBnKTtcbiAgICAgICAgICB3Ll9PcnRSZWxlYXNlVGVuc29yID0gKGEpID0+ICh3Ll9PcnRSZWxlYXNlVGVuc29yID0gTC5rYSkoYSk7XG4gICAgICAgICAgdy5fT3J0Q3JlYXRlUnVuT3B0aW9ucyA9IChhLCBiLCBjLCBkKSA9PiAody5fT3J0Q3JlYXRlUnVuT3B0aW9ucyA9IEwubGEpKGEsIGIsIGMsIGQpO1xuICAgICAgICAgIHcuX09ydEFkZFJ1bkNvbmZpZ0VudHJ5ID0gKGEsIGIsIGMpID0+ICh3Ll9PcnRBZGRSdW5Db25maWdFbnRyeSA9IEwubWEpKGEsIGIsIGMpO1xuICAgICAgICAgIHcuX09ydFJlbGVhc2VSdW5PcHRpb25zID0gKGEpID0+ICh3Ll9PcnRSZWxlYXNlUnVuT3B0aW9ucyA9IEwubmEpKGEpO1xuICAgICAgICAgIHcuX09ydENyZWF0ZUJpbmRpbmcgPSAoYSkgPT4gKHcuX09ydENyZWF0ZUJpbmRpbmcgPSBMLm9hKShhKTtcbiAgICAgICAgICB3Ll9PcnRCaW5kSW5wdXQgPSAoYSwgYiwgYykgPT4gKHcuX09ydEJpbmRJbnB1dCA9IEwucGEpKGEsIGIsIGMpO1xuICAgICAgICAgIHcuX09ydEJpbmRPdXRwdXQgPSAoYSwgYiwgYywgZCkgPT4gKHcuX09ydEJpbmRPdXRwdXQgPSBMLnFhKShhLCBiLCBjLCBkKTtcbiAgICAgICAgICB3Ll9PcnRDbGVhckJvdW5kT3V0cHV0cyA9IChhKSA9PiAody5fT3J0Q2xlYXJCb3VuZE91dHB1dHMgPSBMLnJhKShhKTtcbiAgICAgICAgICB3Ll9PcnRSZWxlYXNlQmluZGluZyA9IChhKSA9PiAody5fT3J0UmVsZWFzZUJpbmRpbmcgPSBMLnNhKShhKTtcbiAgICAgICAgICB3Ll9PcnRSdW5XaXRoQmluZGluZyA9IChhLCBiLCBjLCBkLCBnKSA9PiAody5fT3J0UnVuV2l0aEJpbmRpbmcgPSBMLnRhKShhLCBiLCBjLCBkLCBnKTtcbiAgICAgICAgICB3Ll9PcnRSdW4gPSAoYSwgYiwgYywgZCwgZywgaCwgaywgcSkgPT4gKHcuX09ydFJ1biA9IEwudWEpKGEsIGIsIGMsIGQsIGcsIGgsIGssIHEpO1xuICAgICAgICAgIHcuX09ydEVuZFByb2ZpbGluZyA9IChhKSA9PiAody5fT3J0RW5kUHJvZmlsaW5nID0gTC52YSkoYSk7XG4gICAgICAgICAgdmFyIFBhID0gdy5fcHRocmVhZF9zZWxmID0gKCkgPT4gKFBhID0gdy5fcHRocmVhZF9zZWxmID0gTC53YSkoKSwgeGIgPSB3Ll9tYWxsb2MgPSAoYSkgPT4gKHhiID0gdy5fbWFsbG9jID0gTC54YSkoYSk7XG4gICAgICAgICAgdy5fZnJlZSA9IChhKSA9PiAody5fZnJlZSA9IEwueWEpKGEpO1xuICAgICAgICAgIHcuX19lbXNjcmlwdGVuX3Rsc19pbml0ID0gKCkgPT4gKHcuX19lbXNjcmlwdGVuX3Rsc19pbml0ID0gTC56YSkoKTtcbiAgICAgICAgICB2YXIgWmIgPSB3Ll9fZW1zY3JpcHRlbl90aHJlYWRfaW5pdCA9IChhLCBiLCBjLCBkLCBnLCBoKSA9PiAoWmIgPSB3Ll9fZW1zY3JpcHRlbl90aHJlYWRfaW5pdCA9IEwuQmEpKGEsIGIsIGMsIGQsIGcsIGgpO1xuICAgICAgICAgIHcuX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkID0gKCkgPT4gKHcuX19lbXNjcmlwdGVuX3RocmVhZF9jcmFzaGVkID0gTC5DYSkoKTtcbiAgICAgICAgICB2YXIgQ2IgPSAoYSwgYiwgYywgZCkgPT4gKENiID0gTC5EYSkoYSwgYiwgYywgZCksIE9hID0gKGEpID0+IChPYSA9IEwuRWEpKGEpLCBWYSA9IHcuX19lbXNjcmlwdGVuX3RocmVhZF9leGl0ID0gKGEpID0+IChWYSA9IHcuX19lbXNjcmlwdGVuX3RocmVhZF9leGl0ID0gTC5GYSkoYSksIHNiID0gdy5fX2Vtc2NyaXB0ZW5fY2hlY2tfbWFpbGJveCA9ICgpID0+IChzYiA9IHcuX19lbXNjcmlwdGVuX2NoZWNrX21haWxib3ggPSBMLkdhKSgpLCAkYiA9IChhKSA9PiAoJGIgPSBMLkhhKShhKSwgU2EgPSAoYSwgYikgPT4gKFNhID0gTC5JYSkoYSwgYiksIHpiID0gKCkgPT4gKHpiID0gTC5KYSkoKSwgVGEgPSAoYSkgPT4gKFRhID0gTC5LYSkoYSksIEJiID0gKGEpID0+IChCYiA9IEwuTGEpKGEpO1xuICAgICAgICAgIHcuX19fc3RhcnRfZW1fanMgPSA5MDY4NDQ7XG4gICAgICAgICAgdy5fX19zdG9wX2VtX2pzID0gOTA3NDU2O1xuICAgICAgICAgIGZ1bmN0aW9uIGJjKGEpIHtcbiAgICAgICAgICAgIGEgPSBPYmplY3QuYXNzaWduKHt9LCBhKTtcbiAgICAgICAgICAgIHZhciBiID0gKGQpID0+ICgpID0+IGQoKSA+Pj4gMCwgYyA9IChkKSA9PiAoZykgPT4gZChnKSA+Pj4gMDtcbiAgICAgICAgICAgIGEuX19lcnJub19sb2NhdGlvbiA9IGIoYS5fX2Vycm5vX2xvY2F0aW9uKTtcbiAgICAgICAgICAgIGEucHRocmVhZF9zZWxmID0gYihhLnB0aHJlYWRfc2VsZik7XG4gICAgICAgICAgICBhLm1hbGxvYyA9IGMoYS5tYWxsb2MpO1xuICAgICAgICAgICAgYS5zdGFja1NhdmUgPSBiKGEuc3RhY2tTYXZlKTtcbiAgICAgICAgICAgIGEuc3RhY2tBbGxvYyA9IGMoYS5zdGFja0FsbG9jKTtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICB3LmtlZXBSdW50aW1lQWxpdmUgPSBRO1xuICAgICAgICAgIHcud2FzbU1lbW9yeSA9IGU7XG4gICAgICAgICAgdy5zdGFja0FsbG9jID0gQmI7XG4gICAgICAgICAgdy5zdGFja1NhdmUgPSB6YjtcbiAgICAgICAgICB3LnN0YWNrUmVzdG9yZSA9IFRhO1xuICAgICAgICAgIHcuYWRkRnVuY3Rpb24gPSBYYjtcbiAgICAgICAgICB3LlVURjhUb1N0cmluZyA9IEthO1xuICAgICAgICAgIHcuc3RyaW5nVG9VVEY4ID0gZWI7XG4gICAgICAgICAgdy5sZW5ndGhCeXRlc1VURjggPSBjYjtcbiAgICAgICAgICB3LkV4aXRTdGF0dXMgPSBFYTtcbiAgICAgICAgICB3LlBUaHJlYWQgPSBWO1xuICAgICAgICAgIHZhciBjYztcbiAgICAgICAgICBTID0gZnVuY3Rpb24gZGMoKSB7XG4gICAgICAgICAgICBjYyB8fCBlYygpO1xuICAgICAgICAgICAgY2MgfHwgKFMgPSBkYyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmdW5jdGlvbiBlYygpIHtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGEoKSB7XG4gICAgICAgICAgICAgIGlmICghY2MgJiYgKGNjID0gdHJ1ZSwgdy5jYWxsZWRSdW4gPSB0cnVlLCAhTSkpIHtcbiAgICAgICAgICAgICAgICBEIHx8IFJhKHRhKTtcbiAgICAgICAgICAgICAgICBoYSh3KTtcbiAgICAgICAgICAgICAgICBpZiAody5vblJ1bnRpbWVJbml0aWFsaXplZClcbiAgICAgICAgICAgICAgICAgIHcub25SdW50aW1lSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgICAgICAgICBpZiAoIUQpIHtcbiAgICAgICAgICAgICAgICAgIGlmICh3LnBvc3RSdW4pXG4gICAgICAgICAgICAgICAgICAgIGZvciAoXCJmdW5jdGlvblwiID09IHR5cGVvZiB3LnBvc3RSdW4gJiYgKHcucG9zdFJ1biA9IFt3LnBvc3RSdW5dKTsgdy5wb3N0UnVuLmxlbmd0aDsgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSB3LnBvc3RSdW4uc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICB1YS51bnNoaWZ0KGIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBSYSh1YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoISgwIDwgUikpXG4gICAgICAgICAgICAgIGlmIChEKVxuICAgICAgICAgICAgICAgIGhhKHcpLCBEIHx8IFJhKHRhKSwgc3RhcnRXb3JrZXIodyk7XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh3LnByZVJ1bilcbiAgICAgICAgICAgICAgICAgIGZvciAoXCJmdW5jdGlvblwiID09IHR5cGVvZiB3LnByZVJ1biAmJiAody5wcmVSdW4gPSBbdy5wcmVSdW5dKTsgdy5wcmVSdW4ubGVuZ3RoOyApXG4gICAgICAgICAgICAgICAgICAgIHNhLnVuc2hpZnQody5wcmVSdW4uc2hpZnQoKSk7XG4gICAgICAgICAgICAgICAgUmEoc2EpO1xuICAgICAgICAgICAgICAgIDAgPCBSIHx8ICh3LnNldFN0YXR1cyA/ICh3LnNldFN0YXR1cyhcIlJ1bm5pbmcuLi5cIiksIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICB3LnNldFN0YXR1cyhcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGEoKTtcbiAgICAgICAgICAgICAgICB9LCAxKSkgOiBhKCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh3LnByZUluaXQpXG4gICAgICAgICAgICBmb3IgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2Ygdy5wcmVJbml0ICYmICh3LnByZUluaXQgPSBbdy5wcmVJbml0XSk7IDAgPCB3LnByZUluaXQubGVuZ3RoOyApXG4gICAgICAgICAgICAgIHcucHJlSW5pdC5wb3AoKSgpO1xuICAgICAgICAgIGVjKCk7XG4gICAgICAgICAgcmV0dXJuIG1vZHVsZUFyZy5yZWFkeTtcbiAgICAgICAgfTtcbiAgICAgIH0pKCk7XG4gICAgICBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBvcnRXYXNtVGhyZWFkZWQ7XG4gICAgICBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lW1wiYW1kXCJdKVxuICAgICAgICBkZWZpbmUoW10sICgpID0+IG9ydFdhc21UaHJlYWRlZCk7XG4gICAgfVxuICB9KTtcblxuICAvLyB3ZWIvbGliL3dhc20vYmluZGluZy9vcnQtd2FzbS10aHJlYWRlZC53b3JrZXIuanNcbiAgdmFyIHJlcXVpcmVfb3J0X3dhc21fdGhyZWFkZWRfd29ya2VyID0gX19jb21tb25KUyh7XG4gICAgXCJ3ZWIvbGliL3dhc20vYmluZGluZy9vcnQtd2FzbS10aHJlYWRlZC53b3JrZXIuanNcIihleHBvcnRzLCBtb2R1bGUpIHtcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gJ1widXNlIHN0cmljdFwiO3ZhciBNb2R1bGU9e307dmFyIEVOVklST05NRU5UX0lTX05PREU9dHlwZW9mIHByb2Nlc3M9PVwib2JqZWN0XCImJnR5cGVvZiBwcm9jZXNzLnZlcnNpb25zPT1cIm9iamVjdFwiJiZ0eXBlb2YgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlPT1cInN0cmluZ1wiO2lmKEVOVklST05NRU5UX0lTX05PREUpe3ZhciBub2RlV29ya2VyVGhyZWFkcz1yZXF1aXJlKFwid29ya2VyX3RocmVhZHNcIik7dmFyIHBhcmVudFBvcnQ9bm9kZVdvcmtlclRocmVhZHMucGFyZW50UG9ydDtwYXJlbnRQb3J0Lm9uKFwibWVzc2FnZVwiLGRhdGE9Pm9ubWVzc2FnZSh7ZGF0YTpkYXRhfSkpO3ZhciBmcz1yZXF1aXJlKFwiZnNcIik7T2JqZWN0LmFzc2lnbihnbG9iYWwse3NlbGY6Z2xvYmFsLHJlcXVpcmU6cmVxdWlyZSxNb2R1bGU6TW9kdWxlLGxvY2F0aW9uOntocmVmOl9fZmlsZW5hbWV9LFdvcmtlcjpub2RlV29ya2VyVGhyZWFkcy5Xb3JrZXIsaW1wb3J0U2NyaXB0czpmPT4oMCxldmFsKShmcy5yZWFkRmlsZVN5bmMoZixcInV0ZjhcIikrXCIvLyMgc291cmNlVVJMPVwiK2YpLHBvc3RNZXNzYWdlOm1zZz0+cGFyZW50UG9ydC5wb3N0TWVzc2FnZShtc2cpLHBlcmZvcm1hbmNlOmdsb2JhbC5wZXJmb3JtYW5jZXx8e25vdzpEYXRlLm5vd319KX12YXIgaW5pdGlhbGl6ZWRKUz1mYWxzZTtmdW5jdGlvbiB0aHJlYWRQcmludEVycigpe3ZhciB0ZXh0PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykuam9pbihcIiBcIik7aWYoRU5WSVJPTk1FTlRfSVNfTk9ERSl7ZnMud3JpdGVTeW5jKDIsdGV4dCtcIlxcXFxuXCIpO3JldHVybn1jb25zb2xlLmVycm9yKHRleHQpfWZ1bmN0aW9uIHRocmVhZEFsZXJ0KCl7dmFyIHRleHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5qb2luKFwiIFwiKTtwb3N0TWVzc2FnZSh7Y21kOlwiYWxlcnRcIix0ZXh0OnRleHQsdGhyZWFkSWQ6TW9kdWxlW1wiX3B0aHJlYWRfc2VsZlwiXSgpfSl9dmFyIGVycj10aHJlYWRQcmludEVycjtzZWxmLmFsZXJ0PXRocmVhZEFsZXJ0O01vZHVsZVtcImluc3RhbnRpYXRlV2FzbVwiXT0oaW5mbyxyZWNlaXZlSW5zdGFuY2UpPT57dmFyIG1vZHVsZT1Nb2R1bGVbXCJ3YXNtTW9kdWxlXCJdO01vZHVsZVtcIndhc21Nb2R1bGVcIl09bnVsbDt2YXIgaW5zdGFuY2U9bmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKG1vZHVsZSxpbmZvKTtyZXR1cm4gcmVjZWl2ZUluc3RhbmNlKGluc3RhbmNlKX07c2VsZi5vbnVuaGFuZGxlZHJlamVjdGlvbj1lPT57dGhyb3cgZS5yZWFzb24/P2V9O2Z1bmN0aW9uIGhhbmRsZU1lc3NhZ2UoZSl7dHJ5e2lmKGUuZGF0YS5jbWQ9PT1cImxvYWRcIil7bGV0IG1lc3NhZ2VRdWV1ZT1bXTtzZWxmLm9ubWVzc2FnZT1lPT5tZXNzYWdlUXVldWUucHVzaChlKTtzZWxmLnN0YXJ0V29ya2VyPWluc3RhbmNlPT57TW9kdWxlPWluc3RhbmNlO3Bvc3RNZXNzYWdlKHtcImNtZFwiOlwibG9hZGVkXCJ9KTtmb3IobGV0IG1zZyBvZiBtZXNzYWdlUXVldWUpe2hhbmRsZU1lc3NhZ2UobXNnKX1zZWxmLm9ubWVzc2FnZT1oYW5kbGVNZXNzYWdlfTtNb2R1bGVbXCJ3YXNtTW9kdWxlXCJdPWUuZGF0YS53YXNtTW9kdWxlO2Zvcihjb25zdCBoYW5kbGVyIG9mIGUuZGF0YS5oYW5kbGVycyl7TW9kdWxlW2hhbmRsZXJdPSguLi5hcmdzKT0+e3Bvc3RNZXNzYWdlKHtjbWQ6XCJjYWxsSGFuZGxlclwiLGhhbmRsZXI6aGFuZGxlcixhcmdzOmFyZ3N9KX19TW9kdWxlW1wid2FzbU1lbW9yeVwiXT1lLmRhdGEud2FzbU1lbW9yeTtNb2R1bGVbXCJidWZmZXJcIl09TW9kdWxlW1wid2FzbU1lbW9yeVwiXS5idWZmZXI7TW9kdWxlW1wiRU5WSVJPTk1FTlRfSVNfUFRIUkVBRFwiXT10cnVlO2lmKHR5cGVvZiBlLmRhdGEudXJsT3JCbG9iPT1cInN0cmluZ1wiKXtpbXBvcnRTY3JpcHRzKGUuZGF0YS51cmxPckJsb2IpfWVsc2V7dmFyIG9iamVjdFVybD1VUkwuY3JlYXRlT2JqZWN0VVJMKGUuZGF0YS51cmxPckJsb2IpO2ltcG9ydFNjcmlwdHMob2JqZWN0VXJsKTtVUkwucmV2b2tlT2JqZWN0VVJMKG9iamVjdFVybCl9b3J0V2FzbVRocmVhZGVkKE1vZHVsZSl9ZWxzZSBpZihlLmRhdGEuY21kPT09XCJydW5cIil7TW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9pbml0XCJdKGUuZGF0YS5wdGhyZWFkX3B0ciwvKmlzTWFpbkJyb3dzZXJUaHJlYWQ9Ki8wLC8qaXNNYWluUnVudGltZVRocmVhZD0qLzAsLypjYW5CbG9jaz0qLzEpO01vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfbWFpbGJveF9hd2FpdFwiXShlLmRhdGEucHRocmVhZF9wdHIpO01vZHVsZVtcImVzdGFibGlzaFN0YWNrU3BhY2VcIl0oKTtNb2R1bGVbXCJQVGhyZWFkXCJdLnJlY2VpdmVPYmplY3RUcmFuc2ZlcihlLmRhdGEpO01vZHVsZVtcIlBUaHJlYWRcIl0udGhyZWFkSW5pdFRMUygpO2lmKCFpbml0aWFsaXplZEpTKXtpbml0aWFsaXplZEpTPXRydWV9dHJ5e01vZHVsZVtcImludm9rZUVudHJ5UG9pbnRcIl0oZS5kYXRhLnN0YXJ0X3JvdXRpbmUsZS5kYXRhLmFyZyl9Y2F0Y2goZXgpe2lmKGV4IT1cInVud2luZFwiKXt0aHJvdyBleH19fWVsc2UgaWYoZS5kYXRhLmNtZD09PVwiY2FuY2VsXCIpe2lmKE1vZHVsZVtcIl9wdGhyZWFkX3NlbGZcIl0oKSl7TW9kdWxlW1wiX19lbXNjcmlwdGVuX3RocmVhZF9leGl0XCJdKC0xKX19ZWxzZSBpZihlLmRhdGEudGFyZ2V0PT09XCJzZXRpbW1lZGlhdGVcIil7fWVsc2UgaWYoZS5kYXRhLmNtZD09PVwiY2hlY2tNYWlsYm94XCIpe2lmKGluaXRpYWxpemVkSlMpe01vZHVsZVtcImNoZWNrTWFpbGJveFwiXSgpfX1lbHNlIGlmKGUuZGF0YS5jbWQpe2VycihcIndvcmtlci5qcyByZWNlaXZlZCB1bmtub3duIGNvbW1hbmQgXCIrZS5kYXRhLmNtZCk7ZXJyKGUuZGF0YSl9fWNhdGNoKGV4KXtpZihNb2R1bGVbXCJfX2Vtc2NyaXB0ZW5fdGhyZWFkX2NyYXNoZWRcIl0pe01vZHVsZVtcIl9fZW1zY3JpcHRlbl90aHJlYWRfY3Jhc2hlZFwiXSgpfXRocm93IGV4fX1zZWxmLm9ubWVzc2FnZT1oYW5kbGVNZXNzYWdlO1xcbic7XG4gICAgfVxuICB9KTtcblxuICAvLyBub2RlanMtaWdub3JlOm5vZGU6cGF0aFxuICB2YXIgam9pbiA9IHZvaWQgMDtcblxuICAvLyB3ZWIvbGliL3dhc20vd2FzbS1mYWN0b3J5LnRzXG4gIHZhciBvcnRXYXNtRmFjdG9yeTtcbiAgaWYgKGZhbHNlKSB7XG4gICAgb3J0V2FzbUZhY3RvcnkgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIG9ydFdhc21GYWN0b3J5ID0gdHJ1ZSA/IHJlcXVpcmVfb3J0X3dhc20oKSA6IG51bGw7XG4gIH1cbiAgdmFyIG9ydFdhc21GYWN0b3J5VGhyZWFkZWQgPSB0cnVlID8gdHJ1ZSA/IHJlcXVpcmVfb3J0X3dhc21fdGhyZWFkZWQoKSA6IG51bGwgOiBvcnRXYXNtRmFjdG9yeTtcbiAgdmFyIHdhc207XG4gIHZhciBpbml0aWFsaXplZCA9IGZhbHNlO1xuICB2YXIgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG4gIHZhciBhYm9ydGVkID0gZmFsc2U7XG4gIHZhciBpc011bHRpVGhyZWFkU3VwcG9ydGVkID0gKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAodHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgTWVzc2FnZUNoYW5uZWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgbmV3IE1lc3NhZ2VDaGFubmVsKCkucG9ydDEucG9zdE1lc3NhZ2UobmV3IFNoYXJlZEFycmF5QnVmZmVyKDEpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBXZWJBc3NlbWJseS52YWxpZGF0ZShuZXcgVWludDhBcnJheShbXG4gICAgICAgIDAsXG4gICAgICAgIDk3LFxuICAgICAgICAxMTUsXG4gICAgICAgIDEwOSxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgNCxcbiAgICAgICAgMSxcbiAgICAgICAgOTYsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDMsXG4gICAgICAgIDIsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDUsXG4gICAgICAgIDQsXG4gICAgICAgIDEsXG4gICAgICAgIDMsXG4gICAgICAgIDEsXG4gICAgICAgIDEsXG4gICAgICAgIDEwLFxuICAgICAgICAxMSxcbiAgICAgICAgMSxcbiAgICAgICAgOSxcbiAgICAgICAgMCxcbiAgICAgICAgNjUsXG4gICAgICAgIDAsXG4gICAgICAgIDI1NCxcbiAgICAgICAgMTYsXG4gICAgICAgIDIsXG4gICAgICAgIDAsXG4gICAgICAgIDI2LFxuICAgICAgICAxMVxuICAgICAgXSkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG4gIHZhciBpc1NpbWRTdXBwb3J0ZWQgPSAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBXZWJBc3NlbWJseS52YWxpZGF0ZShuZXcgVWludDhBcnJheShbXG4gICAgICAgIDAsXG4gICAgICAgIDk3LFxuICAgICAgICAxMTUsXG4gICAgICAgIDEwOSxcbiAgICAgICAgMSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMSxcbiAgICAgICAgNCxcbiAgICAgICAgMSxcbiAgICAgICAgOTYsXG4gICAgICAgIDAsXG4gICAgICAgIDAsXG4gICAgICAgIDMsXG4gICAgICAgIDIsXG4gICAgICAgIDEsXG4gICAgICAgIDAsXG4gICAgICAgIDEwLFxuICAgICAgICAzMCxcbiAgICAgICAgMSxcbiAgICAgICAgMjgsXG4gICAgICAgIDAsXG4gICAgICAgIDY1LFxuICAgICAgICAwLFxuICAgICAgICAyNTMsXG4gICAgICAgIDE1LFxuICAgICAgICAyNTMsXG4gICAgICAgIDEyLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAwLFxuICAgICAgICAyNTMsXG4gICAgICAgIDE4NixcbiAgICAgICAgMSxcbiAgICAgICAgMjYsXG4gICAgICAgIDExXG4gICAgICBdKSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgdmFyIGdldFdhc21GaWxlTmFtZSA9ICh1c2VTaW1kLCB1c2VUaHJlYWRzKSA9PiB7XG4gICAgaWYgKHVzZVNpbWQpIHtcbiAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICByZXR1cm4gXCJvcnQtdHJhaW5pbmctd2FzbS1zaW1kLndhc21cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1c2VUaHJlYWRzID8gXCJvcnQtd2FzbS1zaW1kLXRocmVhZGVkLndhc21cIiA6IFwib3J0LXdhc20tc2ltZC53YXNtXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1c2VUaHJlYWRzID8gXCJvcnQtd2FzbS10aHJlYWRlZC53YXNtXCIgOiBcIm9ydC13YXNtLndhc21cIjtcbiAgICB9XG4gIH07XG4gIHZhciBpbml0aWFsaXplV2ViQXNzZW1ibHkgPSBhc3luYyAoZmxhZ3MpID0+IHtcbiAgICBpZiAoaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICAgaWYgKGluaXRpYWxpemluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwibXVsdGlwbGUgY2FsbHMgdG8gJ2luaXRpYWxpemVXZWJBc3NlbWJseSgpJyBkZXRlY3RlZC5cIik7XG4gICAgfVxuICAgIGlmIChhYm9ydGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwcmV2aW91cyBjYWxsIHRvICdpbml0aWFsaXplV2ViQXNzZW1ibHkoKScgZmFpbGVkLlwiKTtcbiAgICB9XG4gICAgaW5pdGlhbGl6aW5nID0gdHJ1ZTtcbiAgICBjb25zdCB0aW1lb3V0ID0gZmxhZ3MuaW5pdFRpbWVvdXQ7XG4gICAgY29uc3QgbnVtVGhyZWFkcyA9IGZsYWdzLm51bVRocmVhZHM7XG4gICAgY29uc3Qgc2ltZCA9IGZsYWdzLnNpbWQ7XG4gICAgY29uc3QgdXNlVGhyZWFkcyA9IG51bVRocmVhZHMgPiAxICYmIGlzTXVsdGlUaHJlYWRTdXBwb3J0ZWQoKTtcbiAgICBjb25zdCB1c2VTaW1kID0gc2ltZCAmJiBpc1NpbWRTdXBwb3J0ZWQoKTtcbiAgICBjb25zdCB3YXNtUGF0aHMgPSBmbGFncy53YXNtUGF0aHM7XG4gICAgY29uc3Qgd2FzbVByZWZpeE92ZXJyaWRlID0gdHlwZW9mIHdhc21QYXRocyA9PT0gXCJzdHJpbmdcIiA/IHdhc21QYXRocyA6IHZvaWQgMDtcbiAgICBjb25zdCB3YXNtRmlsZU5hbWUgPSBnZXRXYXNtRmlsZU5hbWUodXNlU2ltZCwgdXNlVGhyZWFkcyk7XG4gICAgY29uc3Qgd2FzbVBhdGhPdmVycmlkZSA9IHR5cGVvZiB3YXNtUGF0aHMgPT09IFwib2JqZWN0XCIgPyB3YXNtUGF0aHNbd2FzbUZpbGVOYW1lXSA6IHZvaWQgMDtcbiAgICBsZXQgaXNUaW1lb3V0ID0gZmFsc2U7XG4gICAgY29uc3QgdGFza3MgPSBbXTtcbiAgICBpZiAodGltZW91dCA+IDApIHtcbiAgICAgIHRhc2tzLnB1c2gobmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgaXNUaW1lb3V0ID0gdHJ1ZTtcbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgfSkpO1xuICAgIH1cbiAgICB0YXNrcy5wdXNoKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IGZhY3RvcnkgPSB1c2VUaHJlYWRzID8gb3J0V2FzbUZhY3RvcnlUaHJlYWRlZCA6IG9ydFdhc21GYWN0b3J5O1xuICAgICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICBsb2NhdGVGaWxlOiAoZmlsZU5hbWUsIHNjcmlwdERpcmVjdG9yeSkgPT4ge1xuICAgICAgICAgIGlmICh1c2VUaHJlYWRzICYmIGZpbGVOYW1lLmVuZHNXaXRoKFwiLndvcmtlci5qc1wiKSAmJiB0eXBlb2YgQmxvYiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgcmV0dXJuIFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHJlcXVpcmUoKSBmdW5jdGlvbiBpcyBoYW5kbGVkIGJ5IGVzYnVpbGQgcGx1Z2luIHRvIGxvYWQgZmlsZSBjb250ZW50IGFzIHN0cmluZy5cbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0c1xuICAgICAgICAgICAgICAgIHJlcXVpcmVfb3J0X3dhc21fdGhyZWFkZWRfd29ya2VyKClcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgeyB0eXBlOiBcInRleHQvamF2YXNjcmlwdFwiIH1cbiAgICAgICAgICAgICkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZmlsZU5hbWUuZW5kc1dpdGgoXCIud2FzbVwiKSkge1xuICAgICAgICAgICAgaWYgKHdhc21QYXRoT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHdhc21QYXRoT3ZlcnJpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwcmVmaXggPSB3YXNtUHJlZml4T3ZlcnJpZGUgPz8gc2NyaXB0RGlyZWN0b3J5O1xuICAgICAgICAgICAgaWYgKGZhbHNlKSB7XG4gICAgICAgICAgICAgIGlmICh3YXNtRmlsZU5hbWUgPT09IFwib3J0LXdhc20tc2ltZC53YXNtXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJlZml4ICsgXCJvcnQtd2FzbS1zaW1kLmpzZXAud2FzbVwiO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdhc21GaWxlTmFtZSA9PT0gXCJvcnQtd2FzbS1zaW1kLXRocmVhZGVkLndhc21cIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyBcIm9ydC13YXNtLXNpbWQtdGhyZWFkZWQuanNlcC53YXNtXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyB3YXNtRmlsZU5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzY3JpcHREaXJlY3RvcnkgKyBmaWxlTmFtZTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGlmICh1c2VUaHJlYWRzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgQmxvYiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIGNvbmZpZy5tYWluU2NyaXB0VXJsT3JCbG9iID0gam9pbihfX2Rpcm5hbWUsIFwib3J0LXdhc20tdGhyZWFkZWQuanNcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgc2NyaXB0U291cmNlQ29kZSA9IGB2YXIgb3J0V2FzbVRocmVhZGVkPSR7ZmFjdG9yeS50b1N0cmluZygpfTtgO1xuICAgICAgICAgIGNvbmZpZy5tYWluU2NyaXB0VXJsT3JCbG9iID0gbmV3IEJsb2IoW3NjcmlwdFNvdXJjZUNvZGVdLCB7IHR5cGU6IFwidGV4dC9qYXZhc2NyaXB0XCIgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZhY3RvcnkoY29uZmlnKS50aGVuKFxuICAgICAgICAvLyB3YXNtIG1vZHVsZSBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHlcbiAgICAgICAgKG1vZHVsZSkgPT4ge1xuICAgICAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuICAgICAgICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgICAgICB3YXNtID0gbW9kdWxlO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gd2FzbSBtb2R1bGUgZmFpbGVkIHRvIGluaXRpYWxpemVcbiAgICAgICAgKHdoYXQpID0+IHtcbiAgICAgICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgICAgICBhYm9ydGVkID0gdHJ1ZTtcbiAgICAgICAgICByZWplY3Qod2hhdCk7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSkpO1xuICAgIGF3YWl0IFByb21pc2UucmFjZSh0YXNrcyk7XG4gICAgaWYgKGlzVGltZW91dCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBXZWJBc3NlbWJseSBiYWNrZW5kIGluaXRpYWxpemluZyBmYWlsZWQgZHVlIHRvIHRpbWVvdXQ6ICR7dGltZW91dH1tc2ApO1xuICAgIH1cbiAgfTtcbiAgdmFyIGdldEluc3RhbmNlID0gKCkgPT4ge1xuICAgIGlmIChpbml0aWFsaXplZCAmJiB3YXNtKSB7XG4gICAgICByZXR1cm4gd2FzbTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiV2ViQXNzZW1ibHkgaXMgbm90IGluaXRpYWxpemVkIHlldC5cIik7XG4gIH07XG5cbiAgLy8gd2ViL2xpYi93YXNtL3dhc20tdXRpbHMudHNcbiAgdmFyIGFsbG9jV2FzbVN0cmluZyA9IChkYXRhLCBhbGxvY3MpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgY29uc3QgZGF0YUxlbmd0aCA9IHdhc20yLmxlbmd0aEJ5dGVzVVRGOChkYXRhKSArIDE7XG4gICAgY29uc3QgZGF0YU9mZnNldCA9IHdhc20yLl9tYWxsb2MoZGF0YUxlbmd0aCk7XG4gICAgd2FzbTIuc3RyaW5nVG9VVEY4KGRhdGEsIGRhdGFPZmZzZXQsIGRhdGFMZW5ndGgpO1xuICAgIGFsbG9jcy5wdXNoKGRhdGFPZmZzZXQpO1xuICAgIHJldHVybiBkYXRhT2Zmc2V0O1xuICB9O1xuICB2YXIgaXRlcmF0ZUV4dHJhT3B0aW9ucyA9IChvcHRpb25zLCBwcmVmaXgsIHNlZW4sIGhhbmRsZXIpID0+IHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT0gXCJvYmplY3RcIiAmJiBvcHRpb25zICE9PSBudWxsKSB7XG4gICAgICBpZiAoc2Vlbi5oYXMob3B0aW9ucykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2lyY3VsYXIgcmVmZXJlbmNlIGluIG9wdGlvbnNcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWVuLmFkZChvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmVudHJpZXMob3B0aW9ucykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBjb25zdCBuYW1lID0gcHJlZml4ID8gcHJlZml4ICsga2V5IDoga2V5O1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBpdGVyYXRlRXh0cmFPcHRpb25zKHZhbHVlLCBuYW1lICsgXCIuXCIsIHNlZW4sIGhhbmRsZXIpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGhhbmRsZXIobmFtZSwgdmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgaGFuZGxlcihuYW1lLCB2YWx1ZSA/IFwiMVwiIDogXCIwXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBoYW5kbGUgZXh0cmEgY29uZmlnIHR5cGU6ICR7dHlwZW9mIHZhbHVlfWApO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICB2YXIgY2hlY2tMYXN0RXJyb3IgPSAobWVzc2FnZSkgPT4ge1xuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBjb25zdCBzdGFjayA9IHdhc20yLnN0YWNrU2F2ZSgpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBwYXJhbXNPZmZzZXQgPSB3YXNtMi5zdGFja0FsbG9jKDgpO1xuICAgICAgd2FzbTIuX09ydEdldExhc3RFcnJvcihwYXJhbXNPZmZzZXQsIHBhcmFtc09mZnNldCArIDQpO1xuICAgICAgY29uc3QgZXJyb3JDb2RlID0gd2FzbTIuSEVBUDMyW3BhcmFtc09mZnNldCAvIDRdO1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlUG9pbnRlciA9IHdhc20yLkhFQVBVMzJbcGFyYW1zT2Zmc2V0IC8gNCArIDFdO1xuICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3JNZXNzYWdlUG9pbnRlciA/IHdhc20yLlVURjhUb1N0cmluZyhlcnJvck1lc3NhZ2VQb2ludGVyKSA6IFwiXCI7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bWVzc2FnZX0gRVJST1JfQ09ERTogJHtlcnJvckNvZGV9LCBFUlJPUl9NRVNTQUdFOiAke2Vycm9yTWVzc2FnZX1gKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgd2FzbTIuc3RhY2tSZXN0b3JlKHN0YWNrKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gd2ViL2xpYi93YXNtL3J1bi1vcHRpb25zLnRzXG4gIHZhciBzZXRSdW5PcHRpb25zID0gKG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgbGV0IHJ1bk9wdGlvbnNIYW5kbGUgPSAwO1xuICAgIGNvbnN0IGFsbG9jcyA9IFtdO1xuICAgIGNvbnN0IHJ1bk9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHRyeSB7XG4gICAgICBpZiAob3B0aW9ucz8ubG9nU2V2ZXJpdHlMZXZlbCA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJ1bk9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCA9IDI7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgIT09IFwibnVtYmVyXCIgfHwgIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5sb2dTZXZlcml0eUxldmVsKSB8fCBvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgPCAwIHx8IG9wdGlvbnMubG9nU2V2ZXJpdHlMZXZlbCA+IDQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBsb2cgc2VydmVyaXR5IGxldmVsIGlzIG5vdCB2YWxpZDogJHtvcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWx9YCk7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucz8ubG9nVmVyYm9zaXR5TGV2ZWwgPT09IHZvaWQgMCkge1xuICAgICAgICBydW5PcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsID0gMDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMubG9nVmVyYm9zaXR5TGV2ZWwgIT09IFwibnVtYmVyXCIgfHwgIU51bWJlci5pc0ludGVnZXIob3B0aW9ucy5sb2dWZXJib3NpdHlMZXZlbCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBsb2cgdmVyYm9zaXR5IGxldmVsIGlzIG5vdCB2YWxpZDogJHtvcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsfWApO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnM/LnRlcm1pbmF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIHJ1bk9wdGlvbnMudGVybWluYXRlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBsZXQgdGFnRGF0YU9mZnNldCA9IDA7XG4gICAgICBpZiAob3B0aW9ucz8udGFnICE9PSB2b2lkIDApIHtcbiAgICAgICAgdGFnRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhvcHRpb25zLnRhZywgYWxsb2NzKTtcbiAgICAgIH1cbiAgICAgIHJ1bk9wdGlvbnNIYW5kbGUgPSB3YXNtMi5fT3J0Q3JlYXRlUnVuT3B0aW9ucyhcbiAgICAgICAgcnVuT3B0aW9ucy5sb2dTZXZlcml0eUxldmVsLFxuICAgICAgICBydW5PcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsLFxuICAgICAgICAhIXJ1bk9wdGlvbnMudGVybWluYXRlLFxuICAgICAgICB0YWdEYXRhT2Zmc2V0XG4gICAgICApO1xuICAgICAgaWYgKHJ1bk9wdGlvbnNIYW5kbGUgPT09IDApIHtcbiAgICAgICAgY2hlY2tMYXN0RXJyb3IoXCJDYW4ndCBjcmVhdGUgcnVuIG9wdGlvbnMuXCIpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnM/LmV4dHJhICE9PSB2b2lkIDApIHtcbiAgICAgICAgaXRlcmF0ZUV4dHJhT3B0aW9ucyhvcHRpb25zLmV4dHJhLCBcIlwiLCAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKSwgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKGtleSwgYWxsb2NzKTtcbiAgICAgICAgICBjb25zdCB2YWx1ZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcodmFsdWUsIGFsbG9jcyk7XG4gICAgICAgICAgaWYgKHdhc20yLl9PcnRBZGRSdW5Db25maWdFbnRyeShydW5PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PSAwKSB7XG4gICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgcnVuIGNvbmZpZyBlbnRyeTogJHtrZXl9IC0gJHt2YWx1ZX0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbcnVuT3B0aW9uc0hhbmRsZSwgYWxsb2NzXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAocnVuT3B0aW9uc0hhbmRsZSAhPT0gMCkge1xuICAgICAgICB3YXNtMi5fT3J0UmVsZWFzZVJ1bk9wdGlvbnMocnVuT3B0aW9uc0hhbmRsZSk7XG4gICAgICB9XG4gICAgICBhbGxvY3MuZm9yRWFjaCgoYWxsb2MpID0+IHdhc20yLl9mcmVlKGFsbG9jKSk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfTtcblxuICAvLyB3ZWIvbGliL3dhc20vc2Vzc2lvbi1vcHRpb25zLnRzXG4gIHZhciBnZXRHcmFwaE9wdGltemF0aW9uTGV2ZWwgPSAoZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCkgPT4ge1xuICAgIHN3aXRjaCAoZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCkge1xuICAgICAgY2FzZSBcImRpc2FibGVkXCI6XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgY2FzZSBcImJhc2ljXCI6XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgY2FzZSBcImV4dGVuZGVkXCI6XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgY2FzZSBcImFsbFwiOlxuICAgICAgICByZXR1cm4gOTk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGdyYXBoIG9wdGltaXphdGlvbiBsZXZlbDogJHtncmFwaE9wdGltaXphdGlvbkxldmVsfWApO1xuICAgIH1cbiAgfTtcbiAgdmFyIGdldEV4ZWN1dGlvbk1vZGUgPSAoZXhlY3V0aW9uTW9kZSkgPT4ge1xuICAgIHN3aXRjaCAoZXhlY3V0aW9uTW9kZSkge1xuICAgICAgY2FzZSBcInNlcXVlbnRpYWxcIjpcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICBjYXNlIFwicGFyYWxsZWxcIjpcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGV4ZWN1dGlvbiBtb2RlOiAke2V4ZWN1dGlvbk1vZGV9YCk7XG4gICAgfVxuICB9O1xuICB2YXIgYXBwZW5kRGVmYXVsdE9wdGlvbnMgPSAob3B0aW9ucykgPT4ge1xuICAgIGlmICghb3B0aW9ucy5leHRyYSkge1xuICAgICAgb3B0aW9ucy5leHRyYSA9IHt9O1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMuZXh0cmEuc2Vzc2lvbikge1xuICAgICAgb3B0aW9ucy5leHRyYS5zZXNzaW9uID0ge307XG4gICAgfVxuICAgIGNvbnN0IHNlc3Npb24gPSBvcHRpb25zLmV4dHJhLnNlc3Npb247XG4gICAgaWYgKCFzZXNzaW9uLnVzZV9vcnRfbW9kZWxfYnl0ZXNfZGlyZWN0bHkpIHtcbiAgICAgIHNlc3Npb24udXNlX29ydF9tb2RlbF9ieXRlc19kaXJlY3RseSA9IFwiMVwiO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5leGVjdXRpb25Qcm92aWRlcnMgJiYgb3B0aW9ucy5leGVjdXRpb25Qcm92aWRlcnMuc29tZSgoZXApID0+ICh0eXBlb2YgZXAgPT09IFwic3RyaW5nXCIgPyBlcCA6IGVwLm5hbWUpID09PSBcIndlYmdwdVwiKSkge1xuICAgICAgb3B0aW9ucy5lbmFibGVNZW1QYXR0ZXJuID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICB2YXIgc2V0RXhlY3V0aW9uUHJvdmlkZXJzID0gKHNlc3Npb25PcHRpb25zSGFuZGxlLCBleGVjdXRpb25Qcm92aWRlcnMsIGFsbG9jcykgPT4ge1xuICAgIGZvciAoY29uc3QgZXAgb2YgZXhlY3V0aW9uUHJvdmlkZXJzKSB7XG4gICAgICBsZXQgZXBOYW1lID0gdHlwZW9mIGVwID09PSBcInN0cmluZ1wiID8gZXAgOiBlcC5uYW1lO1xuICAgICAgc3dpdGNoIChlcE5hbWUpIHtcbiAgICAgICAgY2FzZSBcInhubnBhY2tcIjpcbiAgICAgICAgICBlcE5hbWUgPSBcIlhOTlBBQ0tcIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIndlYm5uXCI6XG4gICAgICAgICAgZXBOYW1lID0gXCJXRUJOTlwiO1xuICAgICAgICAgIGlmICh0eXBlb2YgZXAgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHdlYm5uT3B0aW9ucyA9IGVwO1xuICAgICAgICAgICAgaWYgKHdlYm5uT3B0aW9ucz8uZGV2aWNlVHlwZSkge1xuICAgICAgICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKFwiZGV2aWNlVHlwZVwiLCBhbGxvY3MpO1xuICAgICAgICAgICAgICBjb25zdCB2YWx1ZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcod2Vibm5PcHRpb25zLmRldmljZVR5cGUsIGFsbG9jcyk7XG4gICAgICAgICAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBjaGVja0xhc3RFcnJvcihgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICdkZXZpY2VUeXBlJyAtICR7d2Vibm5PcHRpb25zLmRldmljZVR5cGV9LmApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAod2Vibm5PcHRpb25zPy5udW1UaHJlYWRzKSB7XG4gICAgICAgICAgICAgIGxldCBudW1UaHJlYWRzID0gd2Vibm5PcHRpb25zLm51bVRocmVhZHM7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgbnVtVGhyZWFkcyAhPSBcIm51bWJlclwiIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKG51bVRocmVhZHMpIHx8IG51bVRocmVhZHMgPCAwKSB7XG4gICAgICAgICAgICAgICAgbnVtVGhyZWFkcyA9IDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3Qga2V5RGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyhcIm51bVRocmVhZHNcIiwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgY29uc3QgdmFsdWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKG51bVRocmVhZHMudG9TdHJpbmcoKSwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgaWYgKGdldEluc3RhbmNlKCkuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeShzZXNzaW9uT3B0aW9uc0hhbmRsZSwga2V5RGF0YU9mZnNldCwgdmFsdWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJ251bVRocmVhZHMnIC0gJHt3ZWJubk9wdGlvbnMubnVtVGhyZWFkc30uYCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3ZWJubk9wdGlvbnM/LnBvd2VyUHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKFwicG93ZXJQcmVmZXJlbmNlXCIsIGFsbG9jcyk7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh3ZWJubk9wdGlvbnMucG93ZXJQcmVmZXJlbmNlLCBhbGxvY3MpO1xuICAgICAgICAgICAgICBpZiAoZ2V0SW5zdGFuY2UoKS5fT3J0QWRkU2Vzc2lvbkNvbmZpZ0VudHJ5KHNlc3Npb25PcHRpb25zSGFuZGxlLCBrZXlEYXRhT2Zmc2V0LCB2YWx1ZURhdGFPZmZzZXQpICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoXG4gICAgICAgICAgICAgICAgICBgQ2FuJ3Qgc2V0IGEgc2Vzc2lvbiBjb25maWcgZW50cnk6ICdwb3dlclByZWZlcmVuY2UnIC0gJHt3ZWJubk9wdGlvbnMucG93ZXJQcmVmZXJlbmNlfS5gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIndlYmdwdVwiOlxuICAgICAgICAgIGVwTmFtZSA9IFwiSlNcIjtcbiAgICAgICAgICBpZiAodHlwZW9mIGVwICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb25zdCB3ZWJncHVPcHRpb25zID0gZXA7XG4gICAgICAgICAgICBpZiAod2ViZ3B1T3B0aW9ucz8ucHJlZmVycmVkTGF5b3V0KSB7XG4gICAgICAgICAgICAgIGlmICh3ZWJncHVPcHRpb25zLnByZWZlcnJlZExheW91dCAhPT0gXCJOQ0hXXCIgJiYgd2ViZ3B1T3B0aW9ucy5wcmVmZXJyZWRMYXlvdXQgIT09IFwiTkhXQ1wiKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBwcmVmZXJyZWRMYXlvdXQgbXVzdCBiZSBlaXRoZXIgJ05DSFcnIG9yICdOSFdDJzogJHt3ZWJncHVPcHRpb25zLnByZWZlcnJlZExheW91dH1gKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKFwicHJlZmVycmVkTGF5b3V0XCIsIGFsbG9jcyk7XG4gICAgICAgICAgICAgIGNvbnN0IHZhbHVlRGF0YU9mZnNldCA9IGFsbG9jV2FzbVN0cmluZyh3ZWJncHVPcHRpb25zLnByZWZlcnJlZExheW91dCwgYWxsb2NzKTtcbiAgICAgICAgICAgICAgaWYgKGdldEluc3RhbmNlKCkuX09ydEFkZFNlc3Npb25Db25maWdFbnRyeShzZXNzaW9uT3B0aW9uc0hhbmRsZSwga2V5RGF0YU9mZnNldCwgdmFsdWVEYXRhT2Zmc2V0KSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFxuICAgICAgICAgICAgICAgICAgYENhbid0IHNldCBhIHNlc3Npb24gY29uZmlnIGVudHJ5OiAncHJlZmVycmVkTGF5b3V0JyAtICR7d2ViZ3B1T3B0aW9ucy5wcmVmZXJyZWRMYXlvdXR9LmBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwid2FzbVwiOlxuICAgICAgICBjYXNlIFwiY3B1XCI6XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBub3Qgc3VwcG9ydGVkIGV4ZWN1dGlvbiBwcm92aWRlcjogJHtlcE5hbWV9YCk7XG4gICAgICB9XG4gICAgICBjb25zdCBlcE5hbWVEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKGVwTmFtZSwgYWxsb2NzKTtcbiAgICAgIGlmIChnZXRJbnN0YW5jZSgpLl9PcnRBcHBlbmRFeGVjdXRpb25Qcm92aWRlcihzZXNzaW9uT3B0aW9uc0hhbmRsZSwgZXBOYW1lRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IGFwcGVuZCBleGVjdXRpb24gcHJvdmlkZXI6ICR7ZXBOYW1lfS5gKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHZhciBzZXRTZXNzaW9uT3B0aW9ucyA9IChvcHRpb25zKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGxldCBzZXNzaW9uT3B0aW9uc0hhbmRsZSA9IDA7XG4gICAgY29uc3QgYWxsb2NzID0gW107XG4gICAgY29uc3Qgc2Vzc2lvbk9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGFwcGVuZERlZmF1bHRPcHRpb25zKHNlc3Npb25PcHRpb25zKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZ3JhcGhPcHRpbWl6YXRpb25MZXZlbCA9IGdldEdyYXBoT3B0aW16YXRpb25MZXZlbChzZXNzaW9uT3B0aW9ucy5ncmFwaE9wdGltaXphdGlvbkxldmVsID8/IFwiYWxsXCIpO1xuICAgICAgY29uc3QgZXhlY3V0aW9uTW9kZSA9IGdldEV4ZWN1dGlvbk1vZGUoc2Vzc2lvbk9wdGlvbnMuZXhlY3V0aW9uTW9kZSA/PyBcInNlcXVlbnRpYWxcIik7XG4gICAgICBjb25zdCBsb2dJZERhdGFPZmZzZXQgPSB0eXBlb2Ygc2Vzc2lvbk9wdGlvbnMubG9nSWQgPT09IFwic3RyaW5nXCIgPyBhbGxvY1dhc21TdHJpbmcoc2Vzc2lvbk9wdGlvbnMubG9nSWQsIGFsbG9jcykgOiAwO1xuICAgICAgY29uc3QgbG9nU2V2ZXJpdHlMZXZlbCA9IHNlc3Npb25PcHRpb25zLmxvZ1NldmVyaXR5TGV2ZWwgPz8gMjtcbiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihsb2dTZXZlcml0eUxldmVsKSB8fCBsb2dTZXZlcml0eUxldmVsIDwgMCB8fCBsb2dTZXZlcml0eUxldmVsID4gNCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGxvZyBzZXJ2ZXJpdHkgbGV2ZWwgaXMgbm90IHZhbGlkOiAke2xvZ1NldmVyaXR5TGV2ZWx9YCk7XG4gICAgICB9XG4gICAgICBjb25zdCBsb2dWZXJib3NpdHlMZXZlbCA9IHNlc3Npb25PcHRpb25zLmxvZ1ZlcmJvc2l0eUxldmVsID8/IDA7XG4gICAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobG9nVmVyYm9zaXR5TGV2ZWwpIHx8IGxvZ1ZlcmJvc2l0eUxldmVsIDwgMCB8fCBsb2dWZXJib3NpdHlMZXZlbCA+IDQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBsb2cgdmVyYm9zaXR5IGxldmVsIGlzIG5vdCB2YWxpZDogJHtsb2dWZXJib3NpdHlMZXZlbH1gKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9wdGltaXplZE1vZGVsRmlsZVBhdGhPZmZzZXQgPSB0eXBlb2Ygc2Vzc2lvbk9wdGlvbnMub3B0aW1pemVkTW9kZWxGaWxlUGF0aCA9PT0gXCJzdHJpbmdcIiA/IGFsbG9jV2FzbVN0cmluZyhzZXNzaW9uT3B0aW9ucy5vcHRpbWl6ZWRNb2RlbEZpbGVQYXRoLCBhbGxvY3MpIDogMDtcbiAgICAgIHNlc3Npb25PcHRpb25zSGFuZGxlID0gd2FzbTIuX09ydENyZWF0ZVNlc3Npb25PcHRpb25zKFxuICAgICAgICBncmFwaE9wdGltaXphdGlvbkxldmVsLFxuICAgICAgICAhIXNlc3Npb25PcHRpb25zLmVuYWJsZUNwdU1lbUFyZW5hLFxuICAgICAgICAhIXNlc3Npb25PcHRpb25zLmVuYWJsZU1lbVBhdHRlcm4sXG4gICAgICAgIGV4ZWN1dGlvbk1vZGUsXG4gICAgICAgICEhc2Vzc2lvbk9wdGlvbnMuZW5hYmxlUHJvZmlsaW5nLFxuICAgICAgICAwLFxuICAgICAgICBsb2dJZERhdGFPZmZzZXQsXG4gICAgICAgIGxvZ1NldmVyaXR5TGV2ZWwsXG4gICAgICAgIGxvZ1ZlcmJvc2l0eUxldmVsLFxuICAgICAgICBvcHRpbWl6ZWRNb2RlbEZpbGVQYXRoT2Zmc2V0XG4gICAgICApO1xuICAgICAgaWYgKHNlc3Npb25PcHRpb25zSGFuZGxlID09PSAwKSB7XG4gICAgICAgIGNoZWNrTGFzdEVycm9yKFwiQ2FuJ3QgY3JlYXRlIHNlc3Npb24gb3B0aW9ucy5cIik7XG4gICAgICB9XG4gICAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzKSB7XG4gICAgICAgIHNldEV4ZWN1dGlvblByb3ZpZGVycyhzZXNzaW9uT3B0aW9uc0hhbmRsZSwgc2Vzc2lvbk9wdGlvbnMuZXhlY3V0aW9uUHJvdmlkZXJzLCBhbGxvY3MpO1xuICAgICAgfVxuICAgICAgaWYgKHNlc3Npb25PcHRpb25zLmZyZWVEaW1lbnNpb25PdmVycmlkZXMpIHtcbiAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHNlc3Npb25PcHRpb25zLmZyZWVEaW1lbnNpb25PdmVycmlkZXMpKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZyZWUgZGltZW5zaW9uIG92ZXJyaWRlIG5hbWUgbXVzdCBiZSBhIHN0cmluZzogJHtuYW1lfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcIm51bWJlclwiIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSB8fCB2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZnJlZSBkaW1lbnNpb24gb3ZlcnJpZGUgdmFsdWUgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyOiAke3ZhbHVlfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBuYW1lT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKG5hbWUsIGFsbG9jcyk7XG4gICAgICAgICAgaWYgKHdhc20yLl9PcnRBZGRGcmVlRGltZW5zaW9uT3ZlcnJpZGUoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIG5hbWVPZmZzZXQsIHZhbHVlKSAhPT0gMCkge1xuICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IHNldCBhIGZyZWUgZGltZW5zaW9uIG92ZXJyaWRlOiAke25hbWV9IC0gJHt2YWx1ZX0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2Vzc2lvbk9wdGlvbnMuZXh0cmEgIT09IHZvaWQgMCkge1xuICAgICAgICBpdGVyYXRlRXh0cmFPcHRpb25zKHNlc3Npb25PcHRpb25zLmV4dHJhLCBcIlwiLCAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtTZXQoKSwgKGtleSwgdmFsdWUpID0+IHtcbiAgICAgICAgICBjb25zdCBrZXlEYXRhT2Zmc2V0ID0gYWxsb2NXYXNtU3RyaW5nKGtleSwgYWxsb2NzKTtcbiAgICAgICAgICBjb25zdCB2YWx1ZURhdGFPZmZzZXQgPSBhbGxvY1dhc21TdHJpbmcodmFsdWUsIGFsbG9jcyk7XG4gICAgICAgICAgaWYgKHdhc20yLl9PcnRBZGRTZXNzaW9uQ29uZmlnRW50cnkoc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGtleURhdGFPZmZzZXQsIHZhbHVlRGF0YU9mZnNldCkgIT09IDApIHtcbiAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBzZXQgYSBzZXNzaW9uIGNvbmZpZyBlbnRyeTogJHtrZXl9IC0gJHt2YWx1ZX0uYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbc2Vzc2lvbk9wdGlvbnNIYW5kbGUsIGFsbG9jc107XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKHNlc3Npb25PcHRpb25zSGFuZGxlICE9PSAwKSB7XG4gICAgICAgIHdhc20yLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnMoc2Vzc2lvbk9wdGlvbnNIYW5kbGUpO1xuICAgICAgfVxuICAgICAgYWxsb2NzLmZvckVhY2goKGFsbG9jKSA9PiB3YXNtMi5fZnJlZShhbGxvYykpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH07XG5cbiAgLy8gd2ViL2xpYi93YXNtL3dhc20tY29tbW9uLnRzXG4gIHZhciB0ZW5zb3JEYXRhVHlwZVN0cmluZ1RvRW51bSA9ICh0eXBlKSA9PiB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwiaW50OFwiOlxuICAgICAgICByZXR1cm4gMyAvKiBpbnQ4ICovO1xuICAgICAgY2FzZSBcInVpbnQ4XCI6XG4gICAgICAgIHJldHVybiAyIC8qIHVpbnQ4ICovO1xuICAgICAgY2FzZSBcImJvb2xcIjpcbiAgICAgICAgcmV0dXJuIDkgLyogYm9vbCAqLztcbiAgICAgIGNhc2UgXCJpbnQxNlwiOlxuICAgICAgICByZXR1cm4gNSAvKiBpbnQxNiAqLztcbiAgICAgIGNhc2UgXCJ1aW50MTZcIjpcbiAgICAgICAgcmV0dXJuIDQgLyogdWludDE2ICovO1xuICAgICAgY2FzZSBcImludDMyXCI6XG4gICAgICAgIHJldHVybiA2IC8qIGludDMyICovO1xuICAgICAgY2FzZSBcInVpbnQzMlwiOlxuICAgICAgICByZXR1cm4gMTIgLyogdWludDMyICovO1xuICAgICAgY2FzZSBcImZsb2F0MTZcIjpcbiAgICAgICAgcmV0dXJuIDEwIC8qIGZsb2F0MTYgKi87XG4gICAgICBjYXNlIFwiZmxvYXQzMlwiOlxuICAgICAgICByZXR1cm4gMSAvKiBmbG9hdCAqLztcbiAgICAgIGNhc2UgXCJmbG9hdDY0XCI6XG4gICAgICAgIHJldHVybiAxMSAvKiBkb3VibGUgKi87XG4gICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgIHJldHVybiA4IC8qIHN0cmluZyAqLztcbiAgICAgIGNhc2UgXCJpbnQ2NFwiOlxuICAgICAgICByZXR1cm4gNyAvKiBpbnQ2NCAqLztcbiAgICAgIGNhc2UgXCJ1aW50NjRcIjpcbiAgICAgICAgcmV0dXJuIDEzIC8qIHVpbnQ2NCAqLztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgZGF0YSB0eXBlOiAke3R5cGV9YCk7XG4gICAgfVxuICB9O1xuICB2YXIgdGVuc29yRGF0YVR5cGVFbnVtVG9TdHJpbmcgPSAodHlwZVByb3RvKSA9PiB7XG4gICAgc3dpdGNoICh0eXBlUHJvdG8pIHtcbiAgICAgIGNhc2UgMyAvKiBpbnQ4ICovOlxuICAgICAgICByZXR1cm4gXCJpbnQ4XCI7XG4gICAgICBjYXNlIDIgLyogdWludDggKi86XG4gICAgICAgIHJldHVybiBcInVpbnQ4XCI7XG4gICAgICBjYXNlIDkgLyogYm9vbCAqLzpcbiAgICAgICAgcmV0dXJuIFwiYm9vbFwiO1xuICAgICAgY2FzZSA1IC8qIGludDE2ICovOlxuICAgICAgICByZXR1cm4gXCJpbnQxNlwiO1xuICAgICAgY2FzZSA0IC8qIHVpbnQxNiAqLzpcbiAgICAgICAgcmV0dXJuIFwidWludDE2XCI7XG4gICAgICBjYXNlIDYgLyogaW50MzIgKi86XG4gICAgICAgIHJldHVybiBcImludDMyXCI7XG4gICAgICBjYXNlIDEyIC8qIHVpbnQzMiAqLzpcbiAgICAgICAgcmV0dXJuIFwidWludDMyXCI7XG4gICAgICBjYXNlIDEwIC8qIGZsb2F0MTYgKi86XG4gICAgICAgIHJldHVybiBcImZsb2F0MTZcIjtcbiAgICAgIGNhc2UgMSAvKiBmbG9hdCAqLzpcbiAgICAgICAgcmV0dXJuIFwiZmxvYXQzMlwiO1xuICAgICAgY2FzZSAxMSAvKiBkb3VibGUgKi86XG4gICAgICAgIHJldHVybiBcImZsb2F0NjRcIjtcbiAgICAgIGNhc2UgOCAvKiBzdHJpbmcgKi86XG4gICAgICAgIHJldHVybiBcInN0cmluZ1wiO1xuICAgICAgY2FzZSA3IC8qIGludDY0ICovOlxuICAgICAgICByZXR1cm4gXCJpbnQ2NFwiO1xuICAgICAgY2FzZSAxMyAvKiB1aW50NjQgKi86XG4gICAgICAgIHJldHVybiBcInVpbnQ2NFwiO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBkYXRhIHR5cGU6ICR7dHlwZVByb3RvfWApO1xuICAgIH1cbiAgfTtcbiAgdmFyIGdldFRlbnNvckVsZW1lbnRTaXplID0gKGRhdGVUeXBlKSA9PiBbdm9pZCAwLCA0LCAxLCAxLCAyLCAyLCA0LCA4LCB2b2lkIDAsIDEsIDIsIDgsIDQsIDgsIHZvaWQgMCwgdm9pZCAwLCB2b2lkIDBdW2RhdGVUeXBlXTtcbiAgdmFyIHRlbnNvclR5cGVUb1R5cGVkQXJyYXlDb25zdHJ1Y3RvciA9ICh0eXBlKSA9PiB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwiZmxvYXQxNlwiOlxuICAgICAgICByZXR1cm4gVWludDE2QXJyYXk7XG4gICAgICBjYXNlIFwiZmxvYXQzMlwiOlxuICAgICAgICByZXR1cm4gRmxvYXQzMkFycmF5O1xuICAgICAgY2FzZSBcInVpbnQ4XCI6XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5O1xuICAgICAgY2FzZSBcImludDhcIjpcbiAgICAgICAgcmV0dXJuIEludDhBcnJheTtcbiAgICAgIGNhc2UgXCJ1aW50MTZcIjpcbiAgICAgICAgcmV0dXJuIFVpbnQxNkFycmF5O1xuICAgICAgY2FzZSBcImludDE2XCI6XG4gICAgICAgIHJldHVybiBJbnQxNkFycmF5O1xuICAgICAgY2FzZSBcImludDMyXCI6XG4gICAgICAgIHJldHVybiBJbnQzMkFycmF5O1xuICAgICAgY2FzZSBcImJvb2xcIjpcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXk7XG4gICAgICBjYXNlIFwiZmxvYXQ2NFwiOlxuICAgICAgICByZXR1cm4gRmxvYXQ2NEFycmF5O1xuICAgICAgY2FzZSBcInVpbnQzMlwiOlxuICAgICAgICByZXR1cm4gVWludDMyQXJyYXk7XG4gICAgICBjYXNlIFwiaW50NjRcIjpcbiAgICAgICAgcmV0dXJuIEJpZ0ludDY0QXJyYXk7XG4gICAgICBjYXNlIFwidWludDY0XCI6XG4gICAgICAgIHJldHVybiBCaWdVaW50NjRBcnJheTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgdHlwZTogJHt0eXBlfWApO1xuICAgIH1cbiAgfTtcbiAgdmFyIGxvZ0xldmVsU3RyaW5nVG9FbnVtID0gKGxvZ0xldmVsKSA9PiB7XG4gICAgc3dpdGNoIChsb2dMZXZlbCkge1xuICAgICAgY2FzZSBcInZlcmJvc2VcIjpcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICBjYXNlIFwiaW5mb1wiOlxuICAgICAgICByZXR1cm4gMTtcbiAgICAgIGNhc2UgXCJ3YXJuaW5nXCI6XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICAgIHJldHVybiAzO1xuICAgICAgY2FzZSBcImZhdGFsXCI6XG4gICAgICAgIHJldHVybiA0O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bnN1cHBvcnRlZCBsb2dnaW5nIGxldmVsOiAke2xvZ0xldmVsfWApO1xuICAgIH1cbiAgfTtcbiAgdmFyIGlzR3B1QnVmZmVyU3VwcG9ydGVkVHlwZSA9ICh0eXBlKSA9PiB0eXBlID09PSBcImZsb2F0MzJcIiB8fCB0eXBlID09PSBcImludDMyXCIgfHwgdHlwZSA9PT0gXCJpbnQ2NFwiIHx8IHR5cGUgPT09IFwiYm9vbFwiIHx8IHR5cGUgPT09IFwiZmxvYXQxNlwiIHx8IHR5cGUgPT09IFwidWludDMyXCI7XG4gIHZhciBkYXRhTG9jYXRpb25TdHJpbmdUb0VudW0gPSAobG9jYXRpb24pID0+IHtcbiAgICBzd2l0Y2ggKGxvY2F0aW9uKSB7XG4gICAgICBjYXNlIFwibm9uZVwiOlxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGNhc2UgXCJjcHVcIjpcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICBjYXNlIFwiY3B1LXBpbm5lZFwiOlxuICAgICAgICByZXR1cm4gMjtcbiAgICAgIGNhc2UgXCJ0ZXh0dXJlXCI6XG4gICAgICAgIHJldHVybiAzO1xuICAgICAgY2FzZSBcImdwdS1idWZmZXJcIjpcbiAgICAgICAgcmV0dXJuIDQ7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGRhdGEgbG9jYXRpb246ICR7bG9jYXRpb259YCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIHdlYi9saWIvd2FzbS93YXNtLWNvcmUtaW1wbC50c1xuICB2YXIgb3J0RW52SW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgdmFyIGdldFNlc3Npb25JbnB1dE91dHB1dENvdW50ID0gKHNlc3Npb25IYW5kbGUpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgY29uc3Qgc3RhY2sgPSB3YXNtMi5zdGFja1NhdmUoKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGF0YU9mZnNldCA9IHdhc20yLnN0YWNrQWxsb2MoOCk7XG4gICAgICBjb25zdCBlcnJvckNvZGUgPSB3YXNtMi5fT3J0R2V0SW5wdXRPdXRwdXRDb3VudChzZXNzaW9uSGFuZGxlLCBkYXRhT2Zmc2V0LCBkYXRhT2Zmc2V0ICsgNCk7XG4gICAgICBpZiAoZXJyb3JDb2RlICE9PSAwKSB7XG4gICAgICAgIGNoZWNrTGFzdEVycm9yKFwiQ2FuJ3QgZ2V0IHNlc3Npb24gaW5wdXQvb3V0cHV0IGNvdW50LlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbd2FzbTIuSEVBUDMyW2RhdGFPZmZzZXQgLyA0XSwgd2FzbTIuSEVBUDMyW2RhdGFPZmZzZXQgLyA0ICsgMV1dO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB3YXNtMi5zdGFja1Jlc3RvcmUoc3RhY2spO1xuICAgIH1cbiAgfTtcbiAgdmFyIGluaXRPcnQgPSAobnVtVGhyZWFkcywgbG9nZ2luZ0xldmVsKSA9PiB7XG4gICAgY29uc3QgZXJyb3JDb2RlID0gZ2V0SW5zdGFuY2UoKS5fT3J0SW5pdChudW1UaHJlYWRzLCBsb2dnaW5nTGV2ZWwpO1xuICAgIGlmIChlcnJvckNvZGUgIT09IDApIHtcbiAgICAgIGNoZWNrTGFzdEVycm9yKFwiQ2FuJ3QgaW5pdGlhbGl6ZSBvbm54cnVudGltZS5cIik7XG4gICAgfVxuICB9O1xuICB2YXIgaW5pdFJ1bnRpbWUgPSBhc3luYyAoZW52KSA9PiB7XG4gICAgaW5pdE9ydChlbnYud2FzbS5udW1UaHJlYWRzLCBsb2dMZXZlbFN0cmluZ1RvRW51bShlbnYubG9nTGV2ZWwpKTtcbiAgICBpZiAoZmFsc2UpIHtcbiAgICAgIGNvbnN0IGluaXRKc2VwID0gbnVsbC5pbml0O1xuICAgICAgYXdhaXQgaW5pdEpzZXAoZ2V0SW5zdGFuY2UoKSwgZW52KTtcbiAgICB9XG4gICAgb3J0RW52SW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9O1xuICB2YXIgYWN0aXZlU2Vzc2lvbnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICB2YXIgaXNPcnRFbnZJbml0aWFsaXplZCA9ICgpID0+IG9ydEVudkluaXRpYWxpemVkO1xuICB2YXIgY3JlYXRlU2Vzc2lvbkFsbG9jYXRlID0gKG1vZGVsKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IG1vZGVsRGF0YU9mZnNldCA9IHdhc20yLl9tYWxsb2MobW9kZWwuYnl0ZUxlbmd0aCk7XG4gICAgaWYgKG1vZGVsRGF0YU9mZnNldCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW4ndCBjcmVhdGUgYSBzZXNzaW9uLiBmYWlsZWQgdG8gYWxsb2NhdGUgYSBidWZmZXIgb2Ygc2l6ZSAke21vZGVsLmJ5dGVMZW5ndGh9LmApO1xuICAgIH1cbiAgICB3YXNtMi5IRUFQVTguc2V0KG1vZGVsLCBtb2RlbERhdGFPZmZzZXQpO1xuICAgIHJldHVybiBbbW9kZWxEYXRhT2Zmc2V0LCBtb2RlbC5ieXRlTGVuZ3RoXTtcbiAgfTtcbiAgdmFyIGNyZWF0ZVNlc3Npb25GaW5hbGl6ZSA9IChtb2RlbERhdGEsIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCB3YXNtMiA9IGdldEluc3RhbmNlKCk7XG4gICAgbGV0IHNlc3Npb25IYW5kbGUgPSAwO1xuICAgIGxldCBzZXNzaW9uT3B0aW9uc0hhbmRsZSA9IDA7XG4gICAgbGV0IGlvQmluZGluZ0hhbmRsZSA9IDA7XG4gICAgbGV0IGFsbG9jcyA9IFtdO1xuICAgIGNvbnN0IGlucHV0TmFtZXNVVEY4RW5jb2RlZCA9IFtdO1xuICAgIGNvbnN0IG91dHB1dE5hbWVzVVRGOEVuY29kZWQgPSBbXTtcbiAgICB0cnkge1xuICAgICAgW3Nlc3Npb25PcHRpb25zSGFuZGxlLCBhbGxvY3NdID0gc2V0U2Vzc2lvbk9wdGlvbnMob3B0aW9ucyk7XG4gICAgICBzZXNzaW9uSGFuZGxlID0gd2FzbTIuX09ydENyZWF0ZVNlc3Npb24obW9kZWxEYXRhWzBdLCBtb2RlbERhdGFbMV0sIHNlc3Npb25PcHRpb25zSGFuZGxlKTtcbiAgICAgIGlmIChzZXNzaW9uSGFuZGxlID09PSAwKSB7XG4gICAgICAgIGNoZWNrTGFzdEVycm9yKFwiQ2FuJ3QgY3JlYXRlIGEgc2Vzc2lvbi5cIik7XG4gICAgICB9XG4gICAgICBjb25zdCBbaW5wdXRDb3VudCwgb3V0cHV0Q291bnRdID0gZ2V0U2Vzc2lvbklucHV0T3V0cHV0Q291bnQoc2Vzc2lvbkhhbmRsZSk7XG4gICAgICBjb25zdCBpbnB1dE5hbWVzID0gW107XG4gICAgICBjb25zdCBvdXRwdXROYW1lcyA9IFtdO1xuICAgICAgY29uc3Qgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Q291bnQ7IGkrKykge1xuICAgICAgICBjb25zdCBuYW1lID0gd2FzbTIuX09ydEdldElucHV0TmFtZShzZXNzaW9uSGFuZGxlLCBpKTtcbiAgICAgICAgaWYgKG5hbWUgPT09IDApIHtcbiAgICAgICAgICBjaGVja0xhc3RFcnJvcihcIkNhbid0IGdldCBhbiBpbnB1dCBuYW1lLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dE5hbWVzVVRGOEVuY29kZWQucHVzaChuYW1lKTtcbiAgICAgICAgaW5wdXROYW1lcy5wdXNoKHdhc20yLlVURjhUb1N0cmluZyhuYW1lKSk7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHdhc20yLl9PcnRHZXRPdXRwdXROYW1lKHNlc3Npb25IYW5kbGUsIGkpO1xuICAgICAgICBpZiAobmFtZSA9PT0gMCkge1xuICAgICAgICAgIGNoZWNrTGFzdEVycm9yKFwiQ2FuJ3QgZ2V0IGFuIG91dHB1dCBuYW1lLlwiKTtcbiAgICAgICAgfVxuICAgICAgICBvdXRwdXROYW1lc1VURjhFbmNvZGVkLnB1c2gobmFtZSk7XG4gICAgICAgIGNvbnN0IG5hbWVTdHJpbmcgPSB3YXNtMi5VVEY4VG9TdHJpbmcobmFtZSk7XG4gICAgICAgIG91dHB1dE5hbWVzLnB1c2gobmFtZVN0cmluZyk7XG4gICAgICAgIGlmIChmYWxzZSkge1xuICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gdHlwZW9mIG9wdGlvbnM/LnByZWZlcnJlZE91dHB1dExvY2F0aW9uID09PSBcInN0cmluZ1wiID8gb3B0aW9ucy5wcmVmZXJyZWRPdXRwdXRMb2NhdGlvbiA6IG9wdGlvbnM/LnByZWZlcnJlZE91dHB1dExvY2F0aW9uPy5bbmFtZVN0cmluZ10gPz8gXCJjcHVcIjtcbiAgICAgICAgICBpZiAobG9jYXRpb24gIT09IFwiY3B1XCIgJiYgbG9jYXRpb24gIT09IFwiY3B1LXBpbm5lZFwiICYmIGxvY2F0aW9uICE9PSBcImdwdS1idWZmZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3Qgc3VwcG9ydGVkIHByZWZlcnJlZCBvdXRwdXQgbG9jYXRpb246ICR7bG9jYXRpb259LmApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMucHVzaChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBiaW5kaW5nU3RhdGUgPSBudWxsO1xuICAgICAgaWYgKGZhbHNlKSB7XG4gICAgICAgIGlvQmluZGluZ0hhbmRsZSA9IHdhc20yLl9PcnRDcmVhdGVCaW5kaW5nKHNlc3Npb25IYW5kbGUpO1xuICAgICAgICBpZiAoaW9CaW5kaW5nSGFuZGxlID09PSAwKSB7XG4gICAgICAgICAgY2hlY2tMYXN0RXJyb3IoXCJDYW4ndCBjcmVhdGUgSU8gYmluZGluZy5cIik7XG4gICAgICAgIH1cbiAgICAgICAgYmluZGluZ1N0YXRlID0ge1xuICAgICAgICAgIGhhbmRsZTogaW9CaW5kaW5nSGFuZGxlLFxuICAgICAgICAgIG91dHB1dFByZWZlcnJlZExvY2F0aW9ucyxcbiAgICAgICAgICBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnNFbmNvZGVkOiBvdXRwdXRQcmVmZXJyZWRMb2NhdGlvbnMubWFwKChsKSA9PiBkYXRhTG9jYXRpb25TdHJpbmdUb0VudW0obCkpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBhY3RpdmVTZXNzaW9ucy5zZXQoc2Vzc2lvbkhhbmRsZSwgW3Nlc3Npb25IYW5kbGUsIGlucHV0TmFtZXNVVEY4RW5jb2RlZCwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZCwgYmluZGluZ1N0YXRlXSk7XG4gICAgICByZXR1cm4gW3Nlc3Npb25IYW5kbGUsIGlucHV0TmFtZXMsIG91dHB1dE5hbWVzXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpbnB1dE5hbWVzVVRGOEVuY29kZWQuZm9yRWFjaCgoYnVmKSA9PiB3YXNtMi5fT3J0RnJlZShidWYpKTtcbiAgICAgIG91dHB1dE5hbWVzVVRGOEVuY29kZWQuZm9yRWFjaCgoYnVmKSA9PiB3YXNtMi5fT3J0RnJlZShidWYpKTtcbiAgICAgIGlmIChpb0JpbmRpbmdIYW5kbGUgIT09IDApIHtcbiAgICAgICAgd2FzbTIuX09ydFJlbGVhc2VCaW5kaW5nKGlvQmluZGluZ0hhbmRsZSk7XG4gICAgICB9XG4gICAgICBpZiAoc2Vzc2lvbkhhbmRsZSAhPT0gMCkge1xuICAgICAgICB3YXNtMi5fT3J0UmVsZWFzZVNlc3Npb24oc2Vzc2lvbkhhbmRsZSk7XG4gICAgICB9XG4gICAgICB0aHJvdyBlO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB3YXNtMi5fZnJlZShtb2RlbERhdGFbMF0pO1xuICAgICAgaWYgKHNlc3Npb25PcHRpb25zSGFuZGxlICE9PSAwKSB7XG4gICAgICAgIHdhc20yLl9PcnRSZWxlYXNlU2Vzc2lvbk9wdGlvbnMoc2Vzc2lvbk9wdGlvbnNIYW5kbGUpO1xuICAgICAgfVxuICAgICAgYWxsb2NzLmZvckVhY2goKGFsbG9jKSA9PiB3YXNtMi5fZnJlZShhbGxvYykpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGNyZWF0ZVNlc3Npb24gPSAobW9kZWwsIG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBtb2RlbERhdGEgPSBjcmVhdGVTZXNzaW9uQWxsb2NhdGUobW9kZWwpO1xuICAgIHJldHVybiBjcmVhdGVTZXNzaW9uRmluYWxpemUobW9kZWxEYXRhLCBvcHRpb25zKTtcbiAgfTtcbiAgdmFyIHJlbGVhc2VTZXNzaW9uID0gKHNlc3Npb25JZCkgPT4ge1xuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBjb25zdCBzZXNzaW9uID0gYWN0aXZlU2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7XG4gICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCByZWxlYXNlIHNlc3Npb24uIGludmFsaWQgc2Vzc2lvbiBpZDogJHtzZXNzaW9uSWR9YCk7XG4gICAgfVxuICAgIGNvbnN0IFtzZXNzaW9uSGFuZGxlLCBpbnB1dE5hbWVzVVRGOEVuY29kZWQsIG91dHB1dE5hbWVzVVRGOEVuY29kZWQsIGlvQmluZGluZ1N0YXRlXSA9IHNlc3Npb247XG4gICAgaWYgKGlvQmluZGluZ1N0YXRlKSB7XG4gICAgICB3YXNtMi5fT3J0UmVsZWFzZUJpbmRpbmcoaW9CaW5kaW5nU3RhdGUuaGFuZGxlKTtcbiAgICB9XG4gICAgd2FzbTIuanNlcFVucmVnaXN0ZXJCdWZmZXJzPy4oc2Vzc2lvbklkKTtcbiAgICBpbnB1dE5hbWVzVVRGOEVuY29kZWQuZm9yRWFjaCgoYnVmKSA9PiB3YXNtMi5fT3J0RnJlZShidWYpKTtcbiAgICBvdXRwdXROYW1lc1VURjhFbmNvZGVkLmZvckVhY2goKGJ1ZikgPT4gd2FzbTIuX09ydEZyZWUoYnVmKSk7XG4gICAgd2FzbTIuX09ydFJlbGVhc2VTZXNzaW9uKHNlc3Npb25IYW5kbGUpO1xuICAgIGFjdGl2ZVNlc3Npb25zLmRlbGV0ZShzZXNzaW9uSWQpO1xuICB9O1xuICB2YXIgcHJlcGFyZUlucHV0T3V0cHV0VGVuc29yID0gKHRlbnNvciwgdGVuc29ySGFuZGxlcywgYWxsb2NzLCBzZXNzaW9uSWQsIGluZGV4KSA9PiB7XG4gICAgaWYgKCF0ZW5zb3IpIHtcbiAgICAgIHRlbnNvckhhbmRsZXMucHVzaCgwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IGRhdGFUeXBlID0gdGVuc29yWzBdO1xuICAgIGNvbnN0IGRpbXMgPSB0ZW5zb3JbMV07XG4gICAgY29uc3QgbG9jYXRpb24gPSB0ZW5zb3JbM107XG4gICAgbGV0IHJhd0RhdGE7XG4gICAgbGV0IGRhdGFCeXRlTGVuZ3RoO1xuICAgIGlmIChkYXRhVHlwZSA9PT0gXCJzdHJpbmdcIiAmJiBsb2NhdGlvbiA9PT0gXCJncHUtYnVmZmVyXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlN0cmluZyB0ZW5zb3IgaXMgbm90IHN1cHBvcnRlZCBvbiBHUFUuXCIpO1xuICAgIH1cbiAgICBpZiAobG9jYXRpb24gPT09IFwiZ3B1LWJ1ZmZlclwiKSB7XG4gICAgICBjb25zdCBncHVCdWZmZXIgPSB0ZW5zb3JbMl0uZ3B1QnVmZmVyO1xuICAgICAgY29uc3QgZWxlbWVudFNpemVJbkJ5dGVzID0gZ2V0VGVuc29yRWxlbWVudFNpemUodGVuc29yRGF0YVR5cGVTdHJpbmdUb0VudW0oZGF0YVR5cGUpKTtcbiAgICAgIGRhdGFCeXRlTGVuZ3RoID0gZGltcy5yZWR1Y2UoKGEsIGIpID0+IGEgKiBiLCAxKSAqIGVsZW1lbnRTaXplSW5CeXRlcztcbiAgICAgIHJhd0RhdGEgPSB3YXNtMi5qc2VwUmVnaXN0ZXJCdWZmZXIoc2Vzc2lvbklkLCBpbmRleCwgZ3B1QnVmZmVyLCBkYXRhQnl0ZUxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRhdGEgPSB0ZW5zb3JbMl07XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICBkYXRhQnl0ZUxlbmd0aCA9IDQgKiBkYXRhLmxlbmd0aDtcbiAgICAgICAgcmF3RGF0YSA9IHdhc20yLl9tYWxsb2MoZGF0YUJ5dGVMZW5ndGgpO1xuICAgICAgICBhbGxvY3MucHVzaChyYXdEYXRhKTtcbiAgICAgICAgbGV0IGRhdGFJbmRleCA9IHJhd0RhdGEgLyA0O1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbaV0gIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYHRlbnNvciBkYXRhIGF0IGluZGV4ICR7aX0gaXMgbm90IGEgc3RyaW5nYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdhc20yLkhFQVBVMzJbZGF0YUluZGV4KytdID0gYWxsb2NXYXNtU3RyaW5nKGRhdGFbaV0sIGFsbG9jcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFCeXRlTGVuZ3RoID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICByYXdEYXRhID0gd2FzbTIuX21hbGxvYyhkYXRhQnl0ZUxlbmd0aCk7XG4gICAgICAgIGFsbG9jcy5wdXNoKHJhd0RhdGEpO1xuICAgICAgICB3YXNtMi5IRUFQVTguc2V0KG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGFCeXRlTGVuZ3RoKSwgcmF3RGF0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHN0YWNrID0gd2FzbTIuc3RhY2tTYXZlKCk7XG4gICAgY29uc3QgZGltc09mZnNldCA9IHdhc20yLnN0YWNrQWxsb2MoNCAqIGRpbXMubGVuZ3RoKTtcbiAgICB0cnkge1xuICAgICAgbGV0IGRpbUluZGV4ID0gZGltc09mZnNldCAvIDQ7XG4gICAgICBkaW1zLmZvckVhY2goKGQpID0+IHdhc20yLkhFQVAzMltkaW1JbmRleCsrXSA9IGQpO1xuICAgICAgY29uc3QgdGVuc29yMiA9IHdhc20yLl9PcnRDcmVhdGVUZW5zb3IoXG4gICAgICAgIHRlbnNvckRhdGFUeXBlU3RyaW5nVG9FbnVtKGRhdGFUeXBlKSxcbiAgICAgICAgcmF3RGF0YSxcbiAgICAgICAgZGF0YUJ5dGVMZW5ndGgsXG4gICAgICAgIGRpbXNPZmZzZXQsXG4gICAgICAgIGRpbXMubGVuZ3RoLFxuICAgICAgICBkYXRhTG9jYXRpb25TdHJpbmdUb0VudW0obG9jYXRpb24pXG4gICAgICApO1xuICAgICAgaWYgKHRlbnNvcjIgPT09IDApIHtcbiAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IGNyZWF0ZSB0ZW5zb3IgZm9yIGlucHV0L291dHB1dC4gc2Vzc2lvbj0ke3Nlc3Npb25JZH0sIGluZGV4PSR7aW5kZXh9LmApO1xuICAgICAgfVxuICAgICAgdGVuc29ySGFuZGxlcy5wdXNoKHRlbnNvcjIpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB3YXNtMi5zdGFja1Jlc3RvcmUoc3RhY2spO1xuICAgIH1cbiAgfTtcbiAgdmFyIHJ1biA9IGFzeW5jIChzZXNzaW9uSWQsIGlucHV0SW5kaWNlcywgaW5wdXRUZW5zb3JzLCBvdXRwdXRJbmRpY2VzLCBvdXRwdXRUZW5zb3JzLCBvcHRpb25zKSA9PiB7XG4gICAgY29uc3Qgd2FzbTIgPSBnZXRJbnN0YW5jZSgpO1xuICAgIGNvbnN0IHNlc3Npb24gPSBhY3RpdmVTZXNzaW9ucy5nZXQoc2Vzc2lvbklkKTtcbiAgICBpZiAoIXNlc3Npb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IHJ1biBpbmZlcmVuY2UuIGludmFsaWQgc2Vzc2lvbiBpZDogJHtzZXNzaW9uSWR9YCk7XG4gICAgfVxuICAgIGNvbnN0IFtzZXNzaW9uSGFuZGxlLCBpbnB1dE5hbWVzVVRGOEVuY29kZWQsIG91dHB1dE5hbWVzVVRGOEVuY29kZWQsIGlvQmluZGluZ1N0YXRlXSA9IHNlc3Npb247XG4gICAgY29uc3QgaW5wdXRDb3VudCA9IGlucHV0SW5kaWNlcy5sZW5ndGg7XG4gICAgY29uc3Qgb3V0cHV0Q291bnQgPSBvdXRwdXRJbmRpY2VzLmxlbmd0aDtcbiAgICBsZXQgcnVuT3B0aW9uc0hhbmRsZSA9IDA7XG4gICAgbGV0IHJ1bk9wdGlvbnNBbGxvY3MgPSBbXTtcbiAgICBjb25zdCBpbnB1dFRlbnNvckhhbmRsZXMgPSBbXTtcbiAgICBjb25zdCBvdXRwdXRUZW5zb3JIYW5kbGVzID0gW107XG4gICAgY29uc3QgaW5wdXRPdXRwdXRBbGxvY3MgPSBbXTtcbiAgICBjb25zdCBiZWZvcmVSdW5TdGFjayA9IHdhc20yLnN0YWNrU2F2ZSgpO1xuICAgIGNvbnN0IGlucHV0VmFsdWVzT2Zmc2V0ID0gd2FzbTIuc3RhY2tBbGxvYyhpbnB1dENvdW50ICogNCk7XG4gICAgY29uc3QgaW5wdXROYW1lc09mZnNldCA9IHdhc20yLnN0YWNrQWxsb2MoaW5wdXRDb3VudCAqIDQpO1xuICAgIGNvbnN0IG91dHB1dFZhbHVlc09mZnNldCA9IHdhc20yLnN0YWNrQWxsb2Mob3V0cHV0Q291bnQgKiA0KTtcbiAgICBjb25zdCBvdXRwdXROYW1lc09mZnNldCA9IHdhc20yLnN0YWNrQWxsb2Mob3V0cHV0Q291bnQgKiA0KTtcbiAgICB0cnkge1xuICAgICAgW3J1bk9wdGlvbnNIYW5kbGUsIHJ1bk9wdGlvbnNBbGxvY3NdID0gc2V0UnVuT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXRDb3VudDsgaSsrKSB7XG4gICAgICAgIHByZXBhcmVJbnB1dE91dHB1dFRlbnNvcihpbnB1dFRlbnNvcnNbaV0sIGlucHV0VGVuc29ySGFuZGxlcywgaW5wdXRPdXRwdXRBbGxvY3MsIHNlc3Npb25JZCwgaW5wdXRJbmRpY2VzW2ldKTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0cHV0Q291bnQ7IGkrKykge1xuICAgICAgICBwcmVwYXJlSW5wdXRPdXRwdXRUZW5zb3IoXG4gICAgICAgICAgb3V0cHV0VGVuc29yc1tpXSxcbiAgICAgICAgICBvdXRwdXRUZW5zb3JIYW5kbGVzLFxuICAgICAgICAgIGlucHV0T3V0cHV0QWxsb2NzLFxuICAgICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgICBpbnB1dENvdW50ICsgb3V0cHV0SW5kaWNlc1tpXVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgbGV0IGlucHV0VmFsdWVzSW5kZXggPSBpbnB1dFZhbHVlc09mZnNldCAvIDQ7XG4gICAgICBsZXQgaW5wdXROYW1lc0luZGV4ID0gaW5wdXROYW1lc09mZnNldCAvIDQ7XG4gICAgICBsZXQgb3V0cHV0VmFsdWVzSW5kZXggPSBvdXRwdXRWYWx1ZXNPZmZzZXQgLyA0O1xuICAgICAgbGV0IG91dHB1dE5hbWVzSW5kZXggPSBvdXRwdXROYW1lc09mZnNldCAvIDQ7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Q291bnQ7IGkrKykge1xuICAgICAgICB3YXNtMi5IRUFQVTMyW2lucHV0VmFsdWVzSW5kZXgrK10gPSBpbnB1dFRlbnNvckhhbmRsZXNbaV07XG4gICAgICAgIHdhc20yLkhFQVBVMzJbaW5wdXROYW1lc0luZGV4KytdID0gaW5wdXROYW1lc1VURjhFbmNvZGVkW2lucHV0SW5kaWNlc1tpXV07XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dHB1dENvdW50OyBpKyspIHtcbiAgICAgICAgd2FzbTIuSEVBUFUzMltvdXRwdXRWYWx1ZXNJbmRleCsrXSA9IG91dHB1dFRlbnNvckhhbmRsZXNbaV07XG4gICAgICAgIHdhc20yLkhFQVBVMzJbb3V0cHV0TmFtZXNJbmRleCsrXSA9IG91dHB1dE5hbWVzVVRGOEVuY29kZWRbb3V0cHV0SW5kaWNlc1tpXV07XG4gICAgICB9XG4gICAgICBpZiAoZmFsc2UpIHtcbiAgICAgICAgY29uc3QgeyBoYW5kbGUsIG91dHB1dFByZWZlcnJlZExvY2F0aW9ucywgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zRW5jb2RlZCB9ID0gaW9CaW5kaW5nU3RhdGU7XG4gICAgICAgIGlmIChpbnB1dE5hbWVzVVRGOEVuY29kZWQubGVuZ3RoICE9PSBpbnB1dENvdW50KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnB1dCBjb3VudCBmcm9tIGZlZWRzICgke2lucHV0Q291bnR9KSBpcyBleHBlY3RlZCB0byBiZSBhbHdheXMgZXF1YWwgdG8gbW9kZWwncyBpbnB1dCBjb3VudCAoJHtpbnB1dE5hbWVzVVRGOEVuY29kZWQubGVuZ3RofSkuYCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dENvdW50OyBpKyspIHtcbiAgICAgICAgICBjb25zdCBpbmRleCA9IGlucHV0SW5kaWNlc1tpXTtcbiAgICAgICAgICBjb25zdCBlcnJvckNvZGUyID0gYXdhaXQgd2FzbTIuX09ydEJpbmRJbnB1dChoYW5kbGUsIGlucHV0TmFtZXNVVEY4RW5jb2RlZFtpbmRleF0sIGlucHV0VGVuc29ySGFuZGxlc1tpXSk7XG4gICAgICAgICAgaWYgKGVycm9yQ29kZTIgIT09IDApIHtcbiAgICAgICAgICAgIGNoZWNrTGFzdEVycm9yKGBDYW4ndCBiaW5kIGlucHV0WyR7aX1dIGZvciBzZXNzaW9uPSR7c2Vzc2lvbklkfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgaW5kZXggPSBvdXRwdXRJbmRpY2VzW2ldO1xuICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gb3V0cHV0VGVuc29yc1tpXT8uWzNdO1xuICAgICAgICAgIGlmIChsb2NhdGlvbikge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JDb2RlMiA9IHdhc20yLl9PcnRCaW5kT3V0cHV0KGhhbmRsZSwgb3V0cHV0TmFtZXNVVEY4RW5jb2RlZFtpbmRleF0sIG91dHB1dFRlbnNvckhhbmRsZXNbaV0sIDApO1xuICAgICAgICAgICAgaWYgKGVycm9yQ29kZTIgIT09IDApIHtcbiAgICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IGJpbmQgcHJlLWFsbG9jYXRlZCBvdXRwdXRbJHtpfV0gZm9yIHNlc3Npb249JHtzZXNzaW9uSWR9LmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvckNvZGUyID0gd2FzbTIuX09ydEJpbmRPdXRwdXQoaGFuZGxlLCBvdXRwdXROYW1lc1VURjhFbmNvZGVkW2luZGV4XSwgMCwgb3V0cHV0UHJlZmVycmVkTG9jYXRpb25zRW5jb2RlZFtpbmRleF0pO1xuICAgICAgICAgICAgaWYgKGVycm9yQ29kZTIgIT09IDApIHtcbiAgICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IGJpbmQgb3V0cHV0WyR7aX1dIHRvICR7b3V0cHV0UHJlZmVycmVkTG9jYXRpb25zW2ldfSBmb3Igc2Vzc2lvbj0ke3Nlc3Npb25JZH0uYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgZXJyb3JDb2RlO1xuICAgICAgaWYgKGZhbHNlKSB7XG4gICAgICAgIGVycm9yQ29kZSA9IGF3YWl0IHdhc20yLl9PcnRSdW5XaXRoQmluZGluZyhcbiAgICAgICAgICBzZXNzaW9uSGFuZGxlLFxuICAgICAgICAgIGlvQmluZGluZ1N0YXRlLmhhbmRsZSxcbiAgICAgICAgICBvdXRwdXRDb3VudCxcbiAgICAgICAgICBvdXRwdXRWYWx1ZXNPZmZzZXQsXG4gICAgICAgICAgcnVuT3B0aW9uc0hhbmRsZVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyb3JDb2RlID0gYXdhaXQgd2FzbTIuX09ydFJ1bihcbiAgICAgICAgICBzZXNzaW9uSGFuZGxlLFxuICAgICAgICAgIGlucHV0TmFtZXNPZmZzZXQsXG4gICAgICAgICAgaW5wdXRWYWx1ZXNPZmZzZXQsXG4gICAgICAgICAgaW5wdXRDb3VudCxcbiAgICAgICAgICBvdXRwdXROYW1lc09mZnNldCxcbiAgICAgICAgICBvdXRwdXRDb3VudCxcbiAgICAgICAgICBvdXRwdXRWYWx1ZXNPZmZzZXQsXG4gICAgICAgICAgcnVuT3B0aW9uc0hhbmRsZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKGVycm9yQ29kZSAhPT0gMCkge1xuICAgICAgICBjaGVja0xhc3RFcnJvcihcImZhaWxlZCB0byBjYWxsIE9ydFJ1bigpLlwiKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG91dHB1dCA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRwdXRDb3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRlbnNvciA9IHdhc20yLkhFQVBVMzJbb3V0cHV0VmFsdWVzT2Zmc2V0IC8gNCArIGldO1xuICAgICAgICBpZiAodGVuc29yID09PSBvdXRwdXRUZW5zb3JIYW5kbGVzW2ldKSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2gob3V0cHV0VGVuc29yc1tpXSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmVmb3JlR2V0VGVuc29yRGF0YVN0YWNrID0gd2FzbTIuc3RhY2tTYXZlKCk7XG4gICAgICAgIGNvbnN0IHRlbnNvckRhdGFPZmZzZXQgPSB3YXNtMi5zdGFja0FsbG9jKDQgKiA0KTtcbiAgICAgICAgbGV0IGtlZXBPdXRwdXRUZW5zb3IgPSBmYWxzZTtcbiAgICAgICAgbGV0IHR5cGUsIGRhdGFPZmZzZXQgPSAwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGVycm9yQ29kZTIgPSB3YXNtMi5fT3J0R2V0VGVuc29yRGF0YShcbiAgICAgICAgICAgIHRlbnNvcixcbiAgICAgICAgICAgIHRlbnNvckRhdGFPZmZzZXQsXG4gICAgICAgICAgICB0ZW5zb3JEYXRhT2Zmc2V0ICsgNCxcbiAgICAgICAgICAgIHRlbnNvckRhdGFPZmZzZXQgKyA4LFxuICAgICAgICAgICAgdGVuc29yRGF0YU9mZnNldCArIDEyXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoZXJyb3JDb2RlMiAhPT0gMCkge1xuICAgICAgICAgICAgY2hlY2tMYXN0RXJyb3IoYENhbid0IGFjY2VzcyBvdXRwdXQgdGVuc29yIGRhdGEgb24gaW5kZXggJHtpfS5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IHRlbnNvckRhdGFJbmRleCA9IHRlbnNvckRhdGFPZmZzZXQgLyA0O1xuICAgICAgICAgIGNvbnN0IGRhdGFUeXBlID0gd2FzbTIuSEVBUFUzMlt0ZW5zb3JEYXRhSW5kZXgrK107XG4gICAgICAgICAgZGF0YU9mZnNldCA9IHdhc20yLkhFQVBVMzJbdGVuc29yRGF0YUluZGV4KytdO1xuICAgICAgICAgIGNvbnN0IGRpbXNPZmZzZXQgPSB3YXNtMi5IRUFQVTMyW3RlbnNvckRhdGFJbmRleCsrXTtcbiAgICAgICAgICBjb25zdCBkaW1zTGVuZ3RoID0gd2FzbTIuSEVBUFUzMlt0ZW5zb3JEYXRhSW5kZXgrK107XG4gICAgICAgICAgY29uc3QgZGltcyA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGkyID0gMDsgaTIgPCBkaW1zTGVuZ3RoOyBpMisrKSB7XG4gICAgICAgICAgICBkaW1zLnB1c2god2FzbTIuSEVBUFUzMltkaW1zT2Zmc2V0IC8gNCArIGkyXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdhc20yLl9PcnRGcmVlKGRpbXNPZmZzZXQpO1xuICAgICAgICAgIGNvbnN0IHNpemUgPSBkaW1zLnJlZHVjZSgoYSwgYikgPT4gYSAqIGIsIDEpO1xuICAgICAgICAgIHR5cGUgPSB0ZW5zb3JEYXRhVHlwZUVudW1Ub1N0cmluZyhkYXRhVHlwZSk7XG4gICAgICAgICAgY29uc3QgcHJlZmVycmVkTG9jYXRpb24gPSBpb0JpbmRpbmdTdGF0ZT8ub3V0cHV0UHJlZmVycmVkTG9jYXRpb25zW291dHB1dEluZGljZXNbaV1dO1xuICAgICAgICAgIGlmICh0eXBlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBpZiAocHJlZmVycmVkTG9jYXRpb24gPT09IFwiZ3B1LWJ1ZmZlclwiKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN0cmluZyB0ZW5zb3IgaXMgbm90IHN1cHBvcnRlZCBvbiBHUFUuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3RyaW5nRGF0YSA9IFtdO1xuICAgICAgICAgICAgbGV0IGRhdGFJbmRleCA9IGRhdGFPZmZzZXQgLyA0O1xuICAgICAgICAgICAgZm9yIChsZXQgaTIgPSAwOyBpMiA8IHNpemU7IGkyKyspIHtcbiAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gd2FzbTIuSEVBUFUzMltkYXRhSW5kZXgrK107XG4gICAgICAgICAgICAgIGNvbnN0IG1heEJ5dGVzVG9SZWFkID0gaTIgPT09IHNpemUgLSAxID8gdm9pZCAwIDogd2FzbTIuSEVBUFUzMltkYXRhSW5kZXhdIC0gb2Zmc2V0O1xuICAgICAgICAgICAgICBzdHJpbmdEYXRhLnB1c2god2FzbTIuVVRGOFRvU3RyaW5nKG9mZnNldCwgbWF4Qnl0ZXNUb1JlYWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dHB1dC5wdXNoKFt0eXBlLCBkaW1zLCBzdHJpbmdEYXRhLCBcImNwdVwiXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcmVmZXJyZWRMb2NhdGlvbiA9PT0gXCJncHUtYnVmZmVyXCIgJiYgc2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgY29uc3QgZ3B1QnVmZmVyID0gd2FzbTIuanNlcEdldEJ1ZmZlcihkYXRhT2Zmc2V0KTtcbiAgICAgICAgICAgICAgY29uc3QgZWxlbWVudFNpemUgPSBnZXRUZW5zb3JFbGVtZW50U2l6ZShkYXRhVHlwZSk7XG4gICAgICAgICAgICAgIGlmIChlbGVtZW50U2l6ZSA9PT0gdm9pZCAwIHx8ICFpc0dwdUJ1ZmZlclN1cHBvcnRlZFR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGRhdGEgdHlwZTogJHt0eXBlfWApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGtlZXBPdXRwdXRUZW5zb3IgPSB0cnVlO1xuICAgICAgICAgICAgICBvdXRwdXQucHVzaChbXG4gICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICBkaW1zLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGdwdUJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgIGRvd25sb2FkOiB3YXNtMi5qc2VwQ3JlYXRlRG93bmxvYWRlcihncHVCdWZmZXIsIHNpemUgKiBlbGVtZW50U2l6ZSwgdHlwZSksXG4gICAgICAgICAgICAgICAgICBkaXNwb3NlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHdhc20yLl9PcnRSZWxlYXNlVGVuc29yKHRlbnNvcik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcImdwdS1idWZmZXJcIlxuICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnN0IHR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IHRlbnNvclR5cGVUb1R5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0eXBlKTtcbiAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IG5ldyB0eXBlZEFycmF5Q29uc3RydWN0b3Ioc2l6ZSk7XG4gICAgICAgICAgICAgIG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyLCBkYXRhLmJ5dGVPZmZzZXQsIGRhdGEuYnl0ZUxlbmd0aCkuc2V0KHdhc20yLkhFQVBVOC5zdWJhcnJheShkYXRhT2Zmc2V0LCBkYXRhT2Zmc2V0ICsgZGF0YS5ieXRlTGVuZ3RoKSk7XG4gICAgICAgICAgICAgIG91dHB1dC5wdXNoKFt0eXBlLCBkaW1zLCBkYXRhLCBcImNwdVwiXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHdhc20yLnN0YWNrUmVzdG9yZShiZWZvcmVHZXRUZW5zb3JEYXRhU3RhY2spO1xuICAgICAgICAgIGlmICh0eXBlID09PSBcInN0cmluZ1wiICYmIGRhdGFPZmZzZXQpIHtcbiAgICAgICAgICAgIHdhc20yLl9mcmVlKGRhdGFPZmZzZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWtlZXBPdXRwdXRUZW5zb3IpIHtcbiAgICAgICAgICAgIHdhc20yLl9PcnRSZWxlYXNlVGVuc29yKHRlbnNvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaW9CaW5kaW5nU3RhdGUpIHtcbiAgICAgICAgd2FzbTIuX09ydENsZWFyQm91bmRPdXRwdXRzKGlvQmluZGluZ1N0YXRlLmhhbmRsZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH0gZmluYWxseSB7XG4gICAgICB3YXNtMi5zdGFja1Jlc3RvcmUoYmVmb3JlUnVuU3RhY2spO1xuICAgICAgaW5wdXRUZW5zb3JIYW5kbGVzLmZvckVhY2goKHYpID0+IHdhc20yLl9PcnRSZWxlYXNlVGVuc29yKHYpKTtcbiAgICAgIG91dHB1dFRlbnNvckhhbmRsZXMuZm9yRWFjaCgodikgPT4gd2FzbTIuX09ydFJlbGVhc2VUZW5zb3IodikpO1xuICAgICAgaW5wdXRPdXRwdXRBbGxvY3MuZm9yRWFjaCgocCkgPT4gd2FzbTIuX2ZyZWUocCkpO1xuICAgICAgaWYgKHJ1bk9wdGlvbnNIYW5kbGUgIT09IDApIHtcbiAgICAgICAgd2FzbTIuX09ydFJlbGVhc2VSdW5PcHRpb25zKHJ1bk9wdGlvbnNIYW5kbGUpO1xuICAgICAgfVxuICAgICAgcnVuT3B0aW9uc0FsbG9jcy5mb3JFYWNoKChwKSA9PiB3YXNtMi5fZnJlZShwKSk7XG4gICAgfVxuICB9O1xuICB2YXIgZW5kUHJvZmlsaW5nID0gKHNlc3Npb25JZCkgPT4ge1xuICAgIGNvbnN0IHdhc20yID0gZ2V0SW5zdGFuY2UoKTtcbiAgICBjb25zdCBzZXNzaW9uID0gYWN0aXZlU2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCk7XG4gICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHNlc3Npb24gaWRcIik7XG4gICAgfVxuICAgIGNvbnN0IHNlc3Npb25IYW5kbGUgPSBzZXNzaW9uWzBdO1xuICAgIGNvbnN0IHByb2ZpbGVGaWxlTmFtZSA9IHdhc20yLl9PcnRFbmRQcm9maWxpbmcoc2Vzc2lvbkhhbmRsZSk7XG4gICAgaWYgKHByb2ZpbGVGaWxlTmFtZSA9PT0gMCkge1xuICAgICAgY2hlY2tMYXN0RXJyb3IoXCJDYW4ndCBnZXQgYW4gcHJvZmlsZSBmaWxlIG5hbWUuXCIpO1xuICAgIH1cbiAgICB3YXNtMi5fT3J0RnJlZShwcm9maWxlRmlsZU5hbWUpO1xuICB9O1xuICB2YXIgZXh0cmFjdFRyYW5zZmVyYWJsZUJ1ZmZlcnMgPSAodGVuc29ycykgPT4ge1xuICAgIGNvbnN0IGJ1ZmZlcnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHRlbnNvciBvZiB0ZW5zb3JzKSB7XG4gICAgICBjb25zdCBkYXRhID0gdGVuc29yWzJdO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpICYmIFwiYnVmZmVyXCIgaW4gZGF0YSkge1xuICAgICAgICBidWZmZXJzLnB1c2goZGF0YS5idWZmZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYnVmZmVycztcbiAgfTtcblxuICAvLyB3ZWIvbGliL3dhc20vcHJveHktd29ya2VyL21haW4udHNcbiAgc2VsZi5vbm1lc3NhZ2UgPSAoZXYpID0+IHtcbiAgICBzd2l0Y2ggKGV2LmRhdGEudHlwZSkge1xuICAgICAgY2FzZSBcImluaXQtd2FzbVwiOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIGluaXRpYWxpemVXZWJBc3NlbWJseShldi5kYXRhLmluKS50aGVuKFxuICAgICAgICAgICAgKCkgPT4gcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImluaXQtd2FzbVwiIH0pLFxuICAgICAgICAgICAgKGVycikgPT4gcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImluaXQtd2FzbVwiLCBlcnIgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGU6IFwiaW5pdC13YXNtXCIsIGVyciB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJpbml0LW9ydFwiOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIGluaXRSdW50aW1lKGV2LmRhdGEuaW4pLnRoZW4oKCkgPT4gcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImluaXQtb3J0XCIgfSksIChlcnIpID0+IHBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIHR5cGU6IFwiaW5pdC1vcnRcIixcbiAgICAgICAgICAgIGVyclxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImluaXQtb3J0XCIsIGVyciB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJjcmVhdGVfYWxsb2NhdGVcIjpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCB7IG1vZGVsIH0gPSBldi5kYXRhLmluO1xuICAgICAgICAgIGNvbnN0IG1vZGVsZGF0YSA9IGNyZWF0ZVNlc3Npb25BbGxvY2F0ZShtb2RlbCk7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImNyZWF0ZV9hbGxvY2F0ZVwiLCBvdXQ6IG1vZGVsZGF0YSB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImNyZWF0ZV9hbGxvY2F0ZVwiLCBlcnIgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiY3JlYXRlX2ZpbmFsaXplXCI6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgeyBtb2RlbGRhdGEsIG9wdGlvbnMgfSA9IGV2LmRhdGEuaW47XG4gICAgICAgICAgY29uc3Qgc2Vzc2lvbk1ldGFkYXRhID0gY3JlYXRlU2Vzc2lvbkZpbmFsaXplKG1vZGVsZGF0YSwgb3B0aW9ucyk7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImNyZWF0ZV9maW5hbGl6ZVwiLCBvdXQ6IHNlc3Npb25NZXRhZGF0YSB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImNyZWF0ZV9maW5hbGl6ZVwiLCBlcnIgfSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiY3JlYXRlXCI6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgeyBtb2RlbCwgb3B0aW9ucyB9ID0gZXYuZGF0YS5pbjtcbiAgICAgICAgICBjb25zdCBzZXNzaW9uTWV0YWRhdGEgPSBjcmVhdGVTZXNzaW9uKG1vZGVsLCBvcHRpb25zKTtcbiAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGU6IFwiY3JlYXRlXCIsIG91dDogc2Vzc2lvbk1ldGFkYXRhIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBwb3N0TWVzc2FnZSh7IHR5cGU6IFwiY3JlYXRlXCIsIGVyciB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJyZWxlYXNlXCI6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgaGFuZGxlciA9IGV2LmRhdGEuaW47XG4gICAgICAgICAgcmVsZWFzZVNlc3Npb24oaGFuZGxlcik7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcInJlbGVhc2VcIiB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcInJlbGVhc2VcIiwgZXJyIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInJ1blwiOlxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHsgc2Vzc2lvbklkLCBpbnB1dEluZGljZXMsIGlucHV0cywgb3V0cHV0SW5kaWNlcywgb3B0aW9ucyB9ID0gZXYuZGF0YS5pbjtcbiAgICAgICAgICBydW4oc2Vzc2lvbklkLCBpbnB1dEluZGljZXMsIGlucHV0cywgb3V0cHV0SW5kaWNlcywgb3B0aW9ucykudGhlbihcbiAgICAgICAgICAgIChvdXRwdXRzKSA9PiB7XG4gICAgICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogXCJydW5cIiwgb3V0OiBvdXRwdXRzIH0sIGV4dHJhY3RUcmFuc2ZlcmFibGVCdWZmZXJzKG91dHB1dHMpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogXCJydW5cIiwgZXJyIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogXCJydW5cIiwgZXJyIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImVuZC1wcm9maWxpbmdcIjpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBoYW5kbGVyID0gZXYuZGF0YS5pbjtcbiAgICAgICAgICBlbmRQcm9maWxpbmcoaGFuZGxlcik7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImVuZC1wcm9maWxpbmdcIiB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImVuZC1wcm9maWxpbmdcIiwgZXJyIH0pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImlzLW9ydC1lbnYtaW5pdGlhbGl6ZWRcIjpcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBvcnRFbnZJbml0aWFsaXplZDIgPSBpc09ydEVudkluaXRpYWxpemVkKCk7XG4gICAgICAgICAgcG9zdE1lc3NhZ2UoeyB0eXBlOiBcImlzLW9ydC1lbnYtaW5pdGlhbGl6ZWRcIiwgb3V0OiBvcnRFbnZJbml0aWFsaXplZDIgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHBvc3RNZXNzYWdlKHsgdHlwZTogXCJpcy1vcnQtZW52LWluaXRpYWxpemVkXCIsIGVyciB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9O1xufSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXdvZ0lDSjJaWEp6YVc5dUlqb2dNeXdLSUNBaWMyOTFjbU5sY3lJNklGc2libTlrWldwekxXbG5ibTl5WlRwbWN5SXNJQ0p1YjJSbGFuTXRhV2R1YjNKbE9uQmhkR2dpTENBaUxpNHZiR2xpTDNkaGMyMHZZbWx1WkdsdVp5OXZjblF0ZDJGemJTNXFjeUlzSUNKdWIyUmxhbk10YVdkdWIzSmxPbmR2Y210bGNsOTBhSEpsWVdSeklpd2dJbTV2WkdWcWN5MXBaMjV2Y21VNmNHVnlabDlvYjI5cmN5SXNJQ0p1YjJSbGFuTXRhV2R1YjNKbE9tOXpJaXdnSWk0dUwyeHBZaTkzWVhOdEwySnBibVJwYm1jdmIzSjBMWGRoYzIwdGRHaHlaV0ZrWldRdWFuTWlMQ0FpTGk0dmJHbGlMM2RoYzIwdlltbHVaR2x1Wnk5dmNuUXRkMkZ6YlMxMGFISmxZV1JsWkM1M2IzSnJaWEl1YW5NaUxDQWlibTlrWldwekxXbG5ibTl5WlRwdWIyUmxPbkJoZEdnaUxDQWlMaTR2YkdsaUwzZGhjMjB2ZDJGemJTMW1ZV04wYjNKNUxuUnpJaXdnSWk0dUwyeHBZaTkzWVhOdEwzZGhjMjB0ZFhScGJITXVkSE1pTENBaUxpNHZiR2xpTDNkaGMyMHZjblZ1TFc5d2RHbHZibk11ZEhNaUxDQWlMaTR2YkdsaUwzZGhjMjB2YzJWemMybHZiaTF2Y0hScGIyNXpMblJ6SWl3Z0lpNHVMMnhwWWk5M1lYTnRMM2RoYzIwdFkyOXRiVzl1TG5Seklpd2dJaTR1TDJ4cFlpOTNZWE50TDNkaGMyMHRZMjl5WlMxcGJYQnNMblJ6SWl3Z0lpNHVMMnhwWWk5M1lYTnRMM0J5YjNoNUxYZHZjbXRsY2k5dFlXbHVMblJ6SWwwc0NpQWdJbk52ZFhKalpYTkRiMjUwWlc1MElqb2dXeUpsZUhCdmNuUWdZMjl1YzNRZ2NtVmhaRVpwYkdVZ1BTQjFibVJsWm1sdVpXUTdJaXdnSW1WNGNHOXlkQ0JqYjI1emRDQnFiMmx1SUQwZ2RXNWtaV1pwYm1Wa095SXNJQ0pjYm5aaGNpQnZjblJYWVhOdElEMGdLQ2dwSUQwK0lIdGNiaUFnZG1GeUlGOXpZM0pwY0hSRWFYSWdQU0IwZVhCbGIyWWdaRzlqZFcxbGJuUWdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JR1J2WTNWdFpXNTBMbU4xY25KbGJuUlRZM0pwY0hRZ1B5QmtiMk4xYldWdWRDNWpkWEp5Wlc1MFUyTnlhWEIwTG5OeVl5QTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ2FXWWdLSFI1Y0dWdlppQmZYMlpwYkdWdVlXMWxJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dYM05qY21sd2RFUnBjaUE5SUY5elkzSnBjSFJFYVhJZ2ZId2dYMTltYVd4bGJtRnRaVHRjYmlBZ2NtVjBkWEp1SUNoY2JtWjFibU4wYVc5dUtHMXZaSFZzWlVGeVp5QTlJSHQ5S1NCN1hHNWNiblpoY2lCbFBXMXZaSFZzWlVGeVp5eGhZU3hzTzJVdWNtVmhaSGs5Ym1WM0lGQnliMjFwYzJVb0tHRXNZaWs5UG50aFlUMWhPMnc5WW4wcE8zWmhjaUJpWVQxUFltcGxZM1F1WVhOemFXZHVLSHQ5TEdVcExHMDlYQ0l1TDNSb2FYTXVjSEp2WjNKaGJWd2lMR05oUFZ3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCM2FXNWtiM2NzY2oxY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQnBiWEJ2Y25SVFkzSnBjSFJ6TEdSaFBWd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQndjbTlqWlhOekppWmNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdjSEp2WTJWemN5NTJaWEp6YVc5dWN5WW1YQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JSEJ5YjJObGMzTXVkbVZ5YzJsdmJuTXVibTlrWlN4M1BWd2lYQ0lzZUN4NUxIbzdYRzVwWmloa1lTbDdkbUZ5SUdaelBYSmxjWFZwY21Vb1hDSm1jMXdpS1N4Q1BYSmxjWFZwY21Vb1hDSndZWFJvWENJcE8zYzljajlDTG1ScGNtNWhiV1VvZHlrclhDSXZYQ0k2WDE5a2FYSnVZVzFsSzF3aUwxd2lPM2c5S0dFc1lpazlQbnRoUFdFdWMzUmhjblJ6VjJsMGFDaGNJbVpwYkdVNkx5OWNJaWsvYm1WM0lGVlNUQ2hoS1RwQ0xtNXZjbTFoYkdsNlpTaGhLVHR5WlhSMWNtNGdabk11Y21WaFpFWnBiR1ZUZVc1aktHRXNZajkyYjJsa0lEQTZYQ0oxZEdZNFhDSXBmVHQ2UFdFOVBudGhQWGdvWVN3aE1DazdZUzVpZFdabVpYSjhmQ2hoUFc1bGR5QlZhVzUwT0VGeWNtRjVLR0VwS1R0eVpYUjFjbTRnWVgwN2VUMG9ZU3hpTEdNc1pEMGhNQ2s5UG50aFBXRXVjM1JoY25SelYybDBhQ2hjSW1acGJHVTZMeTljSWlrL2JtVjNJRlZTVENoaEtUcENMbTV2Y20xaGJHbDZaU2hoS1R0bWN5NXlaV0ZrUm1sc1pTaGhMR1EvZG05cFpDQXdPbHdpZFhSbU9Gd2lMQ2huTEdncFBUNTdaejlqS0djcE9tSW9aRDlvTG1KMVptWmxjanBvS1gwcGZUc2haUzUwYUdselVISnZaM0poYlNZbU1UeHdjbTlqWlhOekxtRnlaM1l1YkdWdVozUm9KaVlvYlQxd2NtOWpaWE56TG1GeVozWmJNVjB1Y21Wd2JHRmpaU2d2WEZ4Y1hDOW5MRndpTDF3aUtTazdjSEp2WTJWemN5NWhjbWQyTG5Oc2FXTmxLRElwTzJVdWFXNXpjR1ZqZEQwb0tUMCtYQ0piUlcxelkzSnBjSFJsYmlCTmIyUjFiR1VnYjJKcVpXTjBYVndpZldWc2MyVWdhV1lvWTJGOGZGeHVjaWx5UDNjOWMyVnNaaTVzYjJOaGRHbHZiaTVvY21WbU9sd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUJrYjJOMWJXVnVkQ1ltWkc5amRXMWxiblF1WTNWeWNtVnVkRk5qY21sd2RDWW1LSGM5Wkc5amRXMWxiblF1WTNWeWNtVnVkRk5qY21sd2RDNXpjbU1wTEY5elkzSnBjSFJFYVhJbUppaDNQVjl6WTNKcGNIUkVhWElwTERBaFBUMTNMbWx1WkdWNFQyWW9YQ0ppYkc5aU9sd2lLVDkzUFhjdWMzVmljM1J5S0RBc2R5NXlaWEJzWVdObEtDOWJQeU5kTGlvdkxGd2lYQ0lwTG14aGMzUkpibVJsZUU5bUtGd2lMMXdpS1NzeEtUcDNQVndpWENJc2VEMWhQVDU3ZG1GeUlHSTlibVYzSUZoTlRFaDBkSEJTWlhGMVpYTjBPMkl1YjNCbGJpaGNJa2RGVkZ3aUxHRXNJVEVwTzJJdWMyVnVaQ2h1ZFd4c0tUdHlaWFIxY200Z1lpNXlaWE53YjI1elpWUmxlSFI5TEhJbUppaDZQV0U5UG50MllYSWdZajF1WlhjZ1dFMU1TSFIwY0ZKbGNYVmxjM1E3WWk1dmNHVnVLRndpUjBWVVhDSXNZU3doTVNrN1lpNXlaWE53YjI1elpWUjVjR1U5WENKaGNuSmhlV0oxWm1abGNsd2lPMkl1YzJWdVpDaHVkV3hzS1R0eVpYUjFjbTRnYm1WM0lGVnBiblE0UVhKeVlYa29ZaTV5WlhOd2IyNXpaU2w5S1N4NVBTaGhMR0lzWXlrOVBudDJZWElnWkQxdVpYY2dXRTFNU0hSMGNGSmxjWFZsYzNRN1pDNXZjR1Z1S0Z3aVIwVlVYQ0lzWVN3aE1DazdaQzV5WlhOd2IyNXpaVlI1Y0dVOVhHNWNJbUZ5Y21GNVluVm1abVZ5WENJN1pDNXZibXh2WVdROUtDazlQbnN5TURBOVBXUXVjM1JoZEhWemZId3dQVDFrTG5OMFlYUjFjeVltWkM1eVpYTndiMjV6WlQ5aUtHUXVjbVZ6Y0c5dWMyVXBPbU1vS1gwN1pDNXZibVZ5Y205eVBXTTdaQzV6Wlc1a0tHNTFiR3dwZlR0MllYSWdaV0U5WlM1d2NtbHVkSHg4WTI5dWMyOXNaUzVzYjJjdVltbHVaQ2hqYjI1emIyeGxLU3hEUFdVdWNISnBiblJGY25KOGZHTnZibk52YkdVdVpYSnliM0l1WW1sdVpDaGpiMjV6YjJ4bEtUdFBZbXBsWTNRdVlYTnphV2R1S0dVc1ltRXBPMkpoUFc1MWJHdzdaUzUwYUdselVISnZaM0poYlNZbUtHMDlaUzUwYUdselVISnZaM0poYlNrN2RtRnlJRVE3WlM1M1lYTnRRbWx1WVhKNUppWW9SRDFsTG5kaGMyMUNhVzVoY25rcE8zWmhjaUJ1YjBWNGFYUlNkVzUwYVcxbFBXVXVibTlGZUdsMFVuVnVkR2x0Wlh4OElUQTdYQ0p2WW1wbFkzUmNJaUU5ZEhsd1pXOW1JRmRsWWtGemMyVnRZbXg1SmlaRktGd2libThnYm1GMGFYWmxJSGRoYzIwZ2MzVndjRzl5ZENCa1pYUmxZM1JsWkZ3aUtUdDJZWElnUml4SExHWmhQU0V4TEVnc1NTeEtMRXM3WEc1bWRXNWpkR2x2YmlCb1lTZ3BlM1poY2lCaFBVWXVZblZtWm1WeU8yVXVTRVZCVURnOVNEMXVaWGNnU1c1ME9FRnljbUY1S0dFcE8yVXVTRVZCVURFMlBXNWxkeUJKYm5ReE5rRnljbUY1S0dFcE8yVXVTRVZCVURNeVBVbzlibVYzSUVsdWRETXlRWEp5WVhrb1lTazdaUzVJUlVGUVZUZzlTVDF1WlhjZ1ZXbHVkRGhCY25KaGVTaGhLVHRsTGtoRlFWQlZNVFk5Ym1WM0lGVnBiblF4TmtGeWNtRjVLR0VwTzJVdVNFVkJVRlV6TWoxTFBXNWxkeUJWYVc1ME16SkJjbkpoZVNoaEtUdGxMa2hGUVZCR016STlibVYzSUVac2IyRjBNekpCY25KaGVTaGhLVHRsTGtoRlFWQkdOalE5Ym1WM0lFWnNiMkYwTmpSQmNuSmhlU2hoS1gxMllYSWdUQ3hwWVQxYlhTeHFZVDFiWFN4cllUMWJYVHRtZFc1amRHbHZiaUJzWVNncGUzWmhjaUJoUFdVdWNISmxVblZ1TG5Ob2FXWjBLQ2s3YVdFdWRXNXphR2xtZENoaEtYMTJZWElnVFQwd0xFNDliblZzYkN4UFBXNTFiR3c3WEc1bWRXNWpkR2x2YmlCRktHRXBlMmxtS0dVdWIyNUJZbTl5ZENsbExtOXVRV0p2Y25Rb1lTazdZVDFjSWtGaWIzSjBaV1FvWENJcllTdGNJaWxjSWp0REtHRXBPMlpoUFNFd08yRTlibVYzSUZkbFlrRnpjMlZ0WW14NUxsSjFiblJwYldWRmNuSnZjaWhoSzF3aUxpQkNkV2xzWkNCM2FYUm9JQzF6UVZOVFJWSlVTVTlPVXlCbWIzSWdiVzl5WlNCcGJtWnZMbHdpS1R0c0tHRXBPM1JvY205M0lHRTdmV1oxYm1OMGFXOXVJRzFoS0dFcGUzSmxkSFZ5YmlCaExuTjBZWEowYzFkcGRHZ29YQ0prWVhSaE9tRndjR3hwWTJGMGFXOXVMMjlqZEdWMExYTjBjbVZoYlR0aVlYTmxOalFzWENJcGZYWmhjaUJRTzFBOVhDSnZjblF0ZDJGemJTNTNZWE50WENJN2FXWW9JVzFoS0ZBcEtYdDJZWElnYm1FOVVEdFFQV1V1Ykc5allYUmxSbWxzWlQ5bExteHZZMkYwWlVacGJHVW9ibUVzZHlrNmR5dHVZWDFtZFc1amRHbHZiaUJ2WVNoaEtYdHBaaWhoUFQxUUppWkVLWEpsZEhWeWJpQnVaWGNnVldsdWREaEJjbkpoZVNoRUtUdHBaaWg2S1hKbGRIVnliaUI2S0dFcE8zUm9jbTkzWENKaWIzUm9JR0Z6ZVc1aklHRnVaQ0J6ZVc1aklHWmxkR05vYVc1bklHOW1JSFJvWlNCM1lYTnRJR1poYVd4bFpGd2lPMzFjYm1aMWJtTjBhVzl1SUhCaEtHRXBlMmxtS0NGRUppWW9ZMkY4ZkhJcEtYdHBaaWhjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCbVpYUmphQ1ltSVdFdWMzUmhjblJ6VjJsMGFDaGNJbVpwYkdVNkx5OWNJaWtwY21WMGRYSnVJR1psZEdOb0tHRXNlMk55WldSbGJuUnBZV3h6T2x3aWMyRnRaUzF2Y21sbmFXNWNJbjBwTG5Sb1pXNG9ZajArZTJsbUtDRmlMbTlyS1hSb2NtOTNYQ0ptWVdsc1pXUWdkRzhnYkc5aFpDQjNZWE50SUdKcGJtRnllU0JtYVd4bElHRjBJQ2RjSWl0aEsxd2lKMXdpTzNKbGRIVnliaUJpTG1GeWNtRjVRblZtWm1WeUtDbDlLUzVqWVhSamFDZ29LVDArYjJFb1lTa3BPMmxtS0hrcGNtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtDaGlMR01wUFQ1N2VTaGhMR1E5UG1Jb2JtVjNJRlZwYm5RNFFYSnlZWGtvWkNrcExHTXBmU2w5Y21WMGRYSnVJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTZ3BMblJvWlc0b0tDazlQbTloS0dFcEtYMW1kVzVqZEdsdmJpQnhZU2hoTEdJc1l5bDdjbVYwZFhKdUlIQmhLR0VwTG5Sb1pXNG9aRDArVjJWaVFYTnpaVzFpYkhrdWFXNXpkR0Z1ZEdsaGRHVW9aQ3hpS1NrdWRHaGxiaWhrUFQ1a0tTNTBhR1Z1S0dNc1pEMCtlME1vWENKbVlXbHNaV1FnZEc4Z1lYTjVibU5vY205dWIzVnpiSGtnY0hKbGNHRnlaU0IzWVhOdE9pQmNJaXRrS1R0RktHUXBmU2w5WEc1bWRXNWpkR2x2YmlCeVlTaGhMR0lwZTNaaGNpQmpQVkE3Y21WMGRYSnVJRVI4ZkZ3aVpuVnVZM1JwYjI1Y0lpRTlkSGx3Wlc5bUlGZGxZa0Z6YzJWdFlteDVMbWx1YzNSaGJuUnBZWFJsVTNSeVpXRnRhVzVuZkh4dFlTaGpLWHg4WXk1emRHRnlkSE5YYVhSb0tGd2labWxzWlRvdkwxd2lLWHg4WkdGOGZGd2lablZ1WTNScGIyNWNJaUU5ZEhsd1pXOW1JR1psZEdOb1AzRmhLR01zWVN4aUtUcG1aWFJqYUNoakxIdGpjbVZrWlc1MGFXRnNjenBjSW5OaGJXVXRiM0pwWjJsdVhDSjlLUzUwYUdWdUtHUTlQbGRsWWtGemMyVnRZbXg1TG1sdWMzUmhiblJwWVhSbFUzUnlaV0Z0YVc1bktHUXNZU2t1ZEdobGJpaGlMR1oxYm1OMGFXOXVLR2NwZTBNb1hDSjNZWE50SUhOMGNtVmhiV2x1WnlCamIyMXdhV3hsSUdaaGFXeGxaRG9nWENJclp5azdReWhjSW1aaGJHeHBibWNnWW1GamF5QjBieUJCY25KaGVVSjFabVpsY2lCcGJuTjBZVzUwYVdGMGFXOXVYQ0lwTzNKbGRIVnliaUJ4WVNoakxHRXNZaWw5S1NsOWRtRnlJRkVzVWoxaFBUNTdabTl5S0Rzd1BHRXViR1Z1WjNSb095bGhMbk5vYVdaMEtDa29aU2w5TzF4dVpuVnVZM1JwYjI0Z2MyRW9ZU2w3ZEdocGN5NTRZVDFoTFRJME8zUm9hWE11UjJFOVpuVnVZM1JwYjI0b1lpbDdTMXQwYUdsekxuaGhLelErUGpJK1BqNHdYVDFpZlR0MGFHbHpMa1poUFdaMWJtTjBhVzl1S0dJcGUwdGJkR2hwY3k1NFlTczRQajR5UGo0K01GMDlZbjA3ZEdocGN5NTZZVDFtZFc1amRHbHZiaWhpTEdNcGUzUm9hWE11UldFb0tUdDBhR2x6TGtkaEtHSXBPM1JvYVhNdVJtRW9ZeWw5TzNSb2FYTXVSV0U5Wm5WdVkzUnBiMjRvS1h0TFczUm9hWE11ZUdFck1UWStQakkrUGo0d1hUMHdmWDFjYm5aaGNpQjBZVDB3TEhWaFBUQXNkbUU5WENKMWJtUmxabWx1WldSY0lpRTlkSGx3Wlc5bUlGUmxlSFJFWldOdlpHVnlQMjVsZHlCVVpYaDBSR1ZqYjJSbGNpaGNJblYwWmpoY0lpazZkbTlwWkNBd0xIZGhQU2hoTEdJc1l5azlQbnRpUGo0K1BUQTdkbUZ5SUdROVlpdGpPMlp2Y2loalBXSTdZVnRqWFNZbUlTaGpQajFrS1RzcEt5dGpPMmxtS0RFMlBHTXRZaVltWVM1aWRXWm1aWEltSm5aaEtYSmxkSFZ5YmlCMllTNWtaV052WkdVb1lTNXpkV0poY25KaGVTaGlMR01wS1R0bWIzSW9aRDFjSWx3aU8ySThZenNwZTNaaGNpQm5QV0ZiWWlzclhUdHBaaWhuSmpFeU9DbDdkbUZ5SUdnOVlWdGlLeXRkSmpZek8ybG1LREU1TWowOUtHY21NakkwS1Nsa0t6MVRkSEpwYm1jdVpuSnZiVU5vWVhKRGIyUmxLQ2huSmpNeEtUdzhObnhvS1R0bGJITmxlM1poY2lCclBXRmJZaXNyWFNZMk16dG5QVEl5TkQwOUtHY21NalF3S1Q4b1p5WXhOU2s4UERFeWZHZzhQRFo4YXpvb1p5WTNLVHc4TVRoOGFEdzhNVEo4YXp3OE5ueGhXMklySzEwbU5qTTdOalUxTXpZK1p6OWtLejFUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0djcE9paG5MVDAyTlRVek5peGtLejFUZEhKcGJtY3Vabkp2YlVOb1lYSkRiMlJsS0RVMU1qazJmR2MrUGpFd0xEVTJNekl3ZkdjbU1UQXlNeWtwZlgxbGJITmxJR1FyUFZOMGNtbHVaeTVtY205dFEyaGhja052WkdVb1p5bDljbVYwZFhKdUlHUjlMRnh1VXowb1lTeGlLVDArS0dFK1BqNDlNQ2svZDJFb1NTeGhMR0lwT2x3aVhDSXNWRDFoUFQ1N1ptOXlLSFpoY2lCaVBUQXNZejB3TzJNOFlTNXNaVzVuZEdnN0t5dGpLWHQyWVhJZ1pEMWhMbU5vWVhKRGIyUmxRWFFvWXlrN01USTNQajFrUDJJckt6b3lNRFEzUGoxa1AySXJQVEk2TlRVeU9UWThQV1FtSmpVM016UXpQajFrUHloaUt6MDBMQ3NyWXlrNllpczlNMzF5WlhSMWNtNGdZbjBzVlQwb1lTeGlMR01zWkNrOVBudGpQajQrUFRBN2FXWW9JU2d3UEdRcEtYSmxkSFZ5YmlBd08zWmhjaUJuUFdNN1pEMWpLMlF0TVR0bWIzSW9kbUZ5SUdnOU1EdG9QR0V1YkdWdVozUm9PeXNyYUNsN2RtRnlJR3M5WVM1amFHRnlRMjlrWlVGMEtHZ3BPMmxtS0RVMU1qazJQRDFySmlZMU56TTBNejQ5YXlsN2RtRnlJSEE5WVM1amFHRnlRMjlrWlVGMEtDc3JhQ2s3YXowMk5UVXpOaXNvS0dzbU1UQXlNeWs4UERFd0tYeHdKakV3TWpOOWFXWW9NVEkzUGoxcktYdHBaaWhqUGoxa0tXSnlaV0ZyTzJKYll5c3JQajQrTUYwOWEzMWxiSE5sZTJsbUtESXdORGMrUFdzcGUybG1LR01yTVQ0OVpDbGljbVZoYXp0aVcyTXJLejQrUGpCZFBURTVNbnhyUGo0MmZXVnNjMlY3YVdZb05qVTFNelUrUFdzcGUybG1LR01yTWo0OVpDbGljbVZoYXp0aVcyTXJLejQrUGpCZFBUSXlOSHhyUGo0eE1uMWxiSE5sZTJsbUtHTXJNejQ5WEc1a0tXSnlaV0ZyTzJKYll5c3JQajQrTUYwOU1qUXdmR3MrUGpFNE8ySmJZeXNyUGo0K01GMDlNVEk0ZkdzK1BqRXlKall6ZldKYll5c3JQajQrTUYwOU1USTRmR3MrUGpZbU5qTjlZbHRqS3lzK1BqNHdYVDB4TWpoOGF5WTJNMzE5WWx0alBqNCtNRjA5TUR0eVpYUjFjbTRnWXkxbmZTeFdQV0U5UGpBOVBUMWhKVFFtSmlnd0lUMDlZU1V4TURCOGZEQTlQVDFoSlRRd01Da3NlR0U5V3pBc016RXNOakFzT1RFc01USXhMREUxTWl3eE9ESXNNakV6TERJME5Dd3lOelFzTXpBMUxETXpOVjBzZVdFOVd6QXNNekVzTlRrc09UQXNNVEl3TERFMU1Td3hPREVzTWpFeUxESTBNeXd5TnpNc016QTBMRE16TkYwc1JHRTlZVDArZTNaaGNpQmlQVlFvWVNrck1TeGpQWHBoS0dJcE8yTW1KbFVvWVN4SkxHTXNZaWs3Y21WMGRYSnVJR045TEZjOWUzMHNSbUU5S0NrOVBudHBaaWdoUldFcGUzWmhjaUJoUFh0VlUwVlNPbHdpZDJWaVgzVnpaWEpjSWl4TVQwZE9RVTFGT2x3aWQyVmlYM1Z6WlhKY0lpeFFRVlJJT2x3aUwxd2lMRkJYUkRwY0lpOWNJaXhJVDAxRk9sd2lMMmh2YldVdmQyVmlYM1Z6WlhKY0lpeE1RVTVIT2loY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ2JtRjJhV2RoZEc5eUppWnVZWFpwWjJGMGIzSXViR0Z1WjNWaFoyVnpKaVp1WVhacFoyRjBiM0l1YkdGdVozVmhaMlZ6V3pCZGZIeGNJa05jSWlrdWNtVndiR0ZqWlNoY0lpMWNJaXhjYmx3aVgxd2lLU3RjSWk1VlZFWXRPRndpTEY4NmJYeDhYQ0l1TDNSb2FYTXVjSEp2WjNKaGJWd2lmU3hpTzJadmNpaGlJR2x1SUZjcGRtOXBaQ0F3UFQwOVYxdGlYVDlrWld4bGRHVWdZVnRpWFRwaFcySmRQVmRiWWwwN2RtRnlJR005VzEwN1ptOXlLR0lnYVc0Z1lTbGpMbkIxYzJnb1lDUjdZbjA5Skh0aFcySmRmV0FwTzBWaFBXTjljbVYwZFhKdUlFVmhmU3hGWVN4SFlUMWJiblZzYkN4YlhTeGJYVjBzU0dFOVd6TXhMREk1TERNeExETXdMRE14TERNd0xETXhMRE14TERNd0xETXhMRE13TERNeFhTeEpZVDFiTXpFc01qZ3NNekVzTXpBc016RXNNekFzTXpFc016RXNNekFzTXpFc016QXNNekZkTzJaMWJtTjBhVzl1SUVwaEtHRXBlM1poY2lCaVBVRnljbUY1S0ZRb1lTa3JNU2s3VlNoaExHSXNNQ3hpTG14bGJtZDBhQ2s3Y21WMGRYSnVJR0o5WEc1bWRXNWpkR2x2YmlCTFlTaGhMR0lzWXl4a0tYdG1kVzVqZEdsdmJpQm5LR1lzYml4eEtYdG1iM0lvWmoxY0ltNTFiV0psY2x3aVBUMTBlWEJsYjJZZ1pqOW1MblJ2VTNSeWFXNW5LQ2s2Wm54OFhDSmNJanRtTG14bGJtZDBhRHh1T3lsbVBYRmJNRjByWmp0eVpYUjFjbTRnWm4xbWRXNWpkR2x2YmlCb0tHWXNiaWw3Y21WMGRYSnVJR2NvWml4dUxGd2lNRndpS1gxbWRXNWpkR2x2YmlCcktHWXNiaWw3Wm5WdVkzUnBiMjRnY1NoQllTbDdjbVYwZFhKdUlEQStRV0UvTFRFNk1EeEJZVDh4T2pCOWRtRnlJRUU3TUQwOVBTaEJQWEVvWmk1blpYUkdkV3hzV1dWaGNpZ3BMVzR1WjJWMFJuVnNiRmxsWVhJb0tTa3BKaVl3UFQwOUtFRTljU2htTG1kbGRFMXZiblJvS0NrdGJpNW5aWFJOYjI1MGFDZ3BLU2ttSmloQlBYRW9aaTVuWlhSRVlYUmxLQ2t0Ymk1blpYUkVZWFJsS0NrcEtUdHlaWFIxY200Z1FYMW1kVzVqZEdsdmJpQndLR1lwZTNOM2FYUmphQ2htTG1kbGRFUmhlU2dwS1h0allYTmxJREE2Y21WMGRYSnVJRzVsZHlCRVlYUmxLR1l1WjJWMFJuVnNiRmxsWVhJb0tTMHhMREV4TERJNUtUdGpZWE5sSURFNmNtVjBkWEp1SUdZN1kyRnpaU0F5T25KbGRIVnliaUJ1WlhjZ1JHRjBaU2htTG1kbGRFWjFiR3haWldGeUtDa3NNQ3d6S1R0allYTmxJRE02Y21WMGRYSnVJRzVsZHlCRVlYUmxLR1l1WjJWMFJuVnNiRmxsWVhJb0tTeGNiakFzTWlrN1kyRnpaU0EwT25KbGRIVnliaUJ1WlhjZ1JHRjBaU2htTG1kbGRFWjFiR3haWldGeUtDa3NNQ3d4S1R0allYTmxJRFU2Y21WMGRYSnVJRzVsZHlCRVlYUmxLR1l1WjJWMFJuVnNiRmxsWVhJb0tTMHhMREV4TERNeEtUdGpZWE5sSURZNmNtVjBkWEp1SUc1bGR5QkVZWFJsS0dZdVoyVjBSblZzYkZsbFlYSW9LUzB4TERFeExETXdLWDE5Wm5WdVkzUnBiMjRnZENobUtYdDJZWElnYmoxbUxuUmhPMlp2Y2lobVBXNWxkeUJFWVhSbEtDaHVaWGNnUkdGMFpTaG1MblZoS3pFNU1EQXNNQ3d4S1NrdVoyVjBWR2x0WlNncEtUc3dQRzQ3S1h0MllYSWdjVDFtTG1kbGRFMXZiblJvS0Nrc1FUMG9WaWhtTG1kbGRFWjFiR3haWldGeUtDa3BQMGhoT2tsaEtWdHhYVHRwWmlodVBrRXRaaTVuWlhSRVlYUmxLQ2twYmkwOVFTMW1MbWRsZEVSaGRHVW9LU3N4TEdZdWMyVjBSR0YwWlNneEtTd3hNVDV4UDJZdWMyVjBUVzl1ZEdnb2NTc3hLVG9vWmk1elpYUk5iMjUwYUNnd0tTeG1Mbk5sZEVaMWJHeFpaV0Z5S0dZdVoyVjBSblZzYkZsbFlYSW9LU3N4S1NrN1pXeHpaWHRtTG5ObGRFUmhkR1VvWmk1blpYUkVZWFJsS0NrcmJpazdZbkpsWVd0OWZYRTlibVYzSUVSaGRHVW9aaTVuWlhSR2RXeHNXV1ZoY2lncEt6RXNNQ3cwS1R0dVBYQW9ibVYzSUVSaGRHVW9aaTVuWlhSR2RXeHNXV1ZoY2lncExGeHVNQ3cwS1NrN2NUMXdLSEVwTzNKbGRIVnliaUF3UGoxcktHNHNaaWsvTUQ0OWF5aHhMR1lwUDJZdVoyVjBSblZzYkZsbFlYSW9LU3N4T21ZdVoyVjBSblZzYkZsbFlYSW9LVHBtTG1kbGRFWjFiR3haWldGeUtDa3RNWDFoUGo0K1BUQTdZajQrUGowd08yTStQajQ5TUR0a1BqNCtQVEE3ZG1GeUlIVTlTbHRrS3pRd1BqNHlQajQrTUYwN1pEMTdRMkU2U2x0a1BqNHlQajQrTUYwc1FtRTZTbHRrS3pRK1BqSStQajR3WFN4MllUcEtXMlFyT0Q0K01qNCtQakJkTEhsaE9rcGJaQ3N4TWo0K01qNCtQakJkTEhkaE9rcGJaQ3N4Tmo0K01qNCtQakJkTEhWaE9rcGJaQ3N5TUQ0K01qNCtQakJkTEhOaE9rcGJaQ3N5TkQ0K01qNCtQakJkTEhSaE9rcGJaQ3N5T0Q0K01qNCtQakJkTEVoaE9rcGJaQ3N6TWo0K01qNCtQakJkTEVGaE9rcGJaQ3N6Tmo0K01qNCtQakJkTEVSaE9uVS9VeWgxS1RwY0lsd2lmVHRqUFZNb1l5azdkVDE3WENJbFkxd2lPbHdpSldFZ0pXSWdKV1FnSlVnNkpVMDZKVk1nSlZsY0lpeGNJaVZFWENJNlhDSWxiUzhsWkM4bGVWd2lMRndpSlVaY0lqcGNJaVZaTFNWdExTVmtYQ0lzWENJbGFGd2lPbHdpSldKY0lpeGNJaVZ5WENJNlhDSWxTVG9sVFRvbFV5QWxjRndpTEZ3aUpWSmNJanBjSWlWSU9pVk5YQ0lzWENJbFZGd2lPbHdpSlVnNkpVMDZKVk5jSWl4Y0lpVjRYQ0k2WENJbGJTOGxaQzhsZVZ3aUxGd2lKVmhjSWpwY0lpVklPaVZOT2lWVFhDSXNYQ0lsUldOY0lqcGNJaVZqWENJc1hHNWNJaVZGUTF3aU9sd2lKVU5jSWl4Y0lpVkZlRndpT2x3aUpXMHZKV1F2SlhsY0lpeGNJaVZGV0Z3aU9sd2lKVWc2SlUwNkpWTmNJaXhjSWlWRmVWd2lPbHdpSlhsY0lpeGNJaVZGV1Z3aU9sd2lKVmxjSWl4Y0lpVlBaRndpT2x3aUpXUmNJaXhjSWlWUFpWd2lPbHdpSldWY0lpeGNJaVZQU0Z3aU9sd2lKVWhjSWl4Y0lpVlBTVndpT2x3aUpVbGNJaXhjSWlWUGJWd2lPbHdpSlcxY0lpeGNJaVZQVFZ3aU9sd2lKVTFjSWl4Y0lpVlBVMXdpT2x3aUpWTmNJaXhjSWlWUGRWd2lPbHdpSlhWY0lpeGNJaVZQVlZ3aU9sd2lKVlZjSWl4Y0lpVlBWbHdpT2x3aUpWWmNJaXhjSWlWUGQxd2lPbHdpSlhkY0lpeGNJaVZQVjF3aU9sd2lKVmRjSWl4Y0lpVlBlVndpT2x3aUpYbGNJbjA3Wm05eUtIWmhjaUIySUdsdUlIVXBZejFqTG5KbGNHeGhZMlVvYm1WM0lGSmxaMFY0Y0NoMkxGd2laMXdpS1N4MVczWmRLVHQyWVhJZ1FtRTlYQ0pUZFc1a1lYa2dUVzl1WkdGNUlGUjFaWE5rWVhrZ1YyVmtibVZ6WkdGNUlGUm9kWEp6WkdGNUlFWnlhV1JoZVNCVFlYUjFjbVJoZVZ3aUxuTndiR2wwS0Z3aUlGd2lLU3hEWVQxY0lrcGhiblZoY25rZ1JtVmljblZoY25rZ1RXRnlZMmdnUVhCeWFXd2dUV0Y1SUVwMWJtVWdTblZzZVNCQmRXZDFjM1FnVTJWd2RHVnRZbVZ5SUU5amRHOWlaWElnVG05MlpXMWlaWElnUkdWalpXMWlaWEpjSWk1emNHeHBkQ2hjSWlCY0lpazdkVDE3WENJbFlWd2lPbVk5UGtKaFcyWXVjMkZkTG5OMVluTjBjbWx1Wnlnd0xETXBMRndpSlVGY0lqcG1QVDVDWVZ0bUxuTmhYU3hjSWlWaVhDSTZaajArWEc1RFlWdG1MbmRoWFM1emRXSnpkSEpwYm1jb01Dd3pLU3hjSWlWQ1hDSTZaajArUTJGYlppNTNZVjBzWENJbFExd2lPbVk5UG1nb0tHWXVkV0VyTVRrd01Da3ZNVEF3ZkRBc01pa3NYQ0lsWkZ3aU9tWTlQbWdvWmk1NVlTd3lLU3hjSWlWbFhDSTZaajArWnlobUxubGhMRElzWENJZ1hDSXBMRndpSldkY0lqcG1QVDUwS0dZcExuUnZVM1J5YVc1bktDa3VjM1ZpYzNSeWFXNW5LRElwTEZ3aUpVZGNJanBtUFQ1MEtHWXBMRndpSlVoY0lqcG1QVDVvS0dZdWRtRXNNaWtzWENJbFNWd2lPbVk5UG50bVBXWXVkbUU3TUQwOVpqOW1QVEV5T2pFeVBHWW1KaWhtTFQweE1pazdjbVYwZFhKdUlHZ29aaXd5S1gwc1hDSWxhbHdpT21ZOVBudG1iM0lvZG1GeUlHNDlNQ3h4UFRBN2NUdzlaaTUzWVMweE8yNHJQU2hXS0dZdWRXRXJNVGt3TUNrL1NHRTZTV0VwVzNFcksxMHBPM0psZEhWeWJpQm9LR1l1ZVdFcmJpd3pLWDBzWENJbGJWd2lPbVk5UG1nb1ppNTNZU3N4TERJcExGd2lKVTFjSWpwbVBUNW9LR1l1UW1Fc01pa3NYQ0lsYmx3aU9pZ3BQVDVjSWx4Y2Jsd2lMRndpSlhCY0lqcG1QVDR3UEQxbUxuWmhKaVl4TWo1bUxuWmhQMXdpUVUxY0lqcGNJbEJOWENJc1hDSWxVMXdpT21ZOVBtZ29aaTVEWVN3eUtTeGNJaVYwWENJNktDazlQbHdpWEZ4MFhDSXNYQ0lsZFZ3aU9tWTlQbVl1YzJGOGZEY3NYQ0lsVlZ3aU9tWTlQbWdvVFdGMGFDNW1iRzl2Y2lnb1ppNTBZU3MzTFdZdWMyRXBMemNwTERJcExGd2lKVlpjSWpwbVBUNWNibnQyWVhJZ2JqMU5ZWFJvTG1ac2IyOXlLQ2htTG5SaEt6Y3RLR1l1YzJFck5pa2xOeWt2TnlrN01qNDlLR1l1YzJFck16Y3hMV1l1ZEdFdE1pa2xOeVltYmlzck8ybG1LRzRwTlRNOVBXNG1KaWh4UFNobUxuTmhLek0zTVMxbUxuUmhLU1UzTERROVBYRjhmRE05UFhFbUpsWW9aaTUxWVNsOGZDaHVQVEVwS1R0bGJITmxlMjQ5TlRJN2RtRnlJSEU5S0dZdWMyRXJOeTFtTG5SaExURXBKVGM3S0RROVBYRjhmRFU5UFhFbUpsWW9aaTUxWVNVME1EQXRNU2twSmladUt5dDljbVYwZFhKdUlHZ29iaXd5S1gwc1hDSWxkMXdpT21ZOVBtWXVjMkVzWENJbFYxd2lPbVk5UG1nb1RXRjBhQzVtYkc5dmNpZ29aaTUwWVNzM0xTaG1Mbk5oS3pZcEpUY3BMemNwTERJcExGd2lKWGxjSWpwbVBUNG9aaTUxWVNzeE9UQXdLUzUwYjFOMGNtbHVaeWdwTG5OMVluTjBjbWx1WnlneUtTeGNJaVZaWENJNlpqMCtaaTUxWVNzeE9UQXdMRndpSlhwY0lqcG1QVDU3WmoxbUxrRmhPM1poY2lCdVBUQThQV1k3WmoxTllYUm9MbUZpY3lobUtTODJNRHR5WlhSMWNtNG9iajljSWl0Y0lqcGNJaTFjSWlrclUzUnlhVzVuS0Z3aU1EQXdNRndpS3lobUx6WXdLakV3TUN0bUpUWXdLU2t1YzJ4cFkyVW9MVFFwZlN4Y0lpVmFYQ0k2WmowK1ppNUVZU3hjSWlVbFhDSTZLQ2s5UGx3aUpWd2lmVHRqUFdNdWNtVndiR0ZqWlNndkpTVXZaeXhjSWx4Y2VEQXdYRng0TURCY0lpazdabTl5S0hZZ2FXNGdkU2xqTG1sdVkyeDFaR1Z6S0hZcEppWmNiaWhqUFdNdWNtVndiR0ZqWlNodVpYY2dVbVZuUlhod0tIWXNYQ0puWENJcExIVmJkbDBvWkNrcEtUdGpQV011Y21Wd2JHRmpaU2d2WEZ3d1hGd3dMMmNzWENJbFhDSXBPM1k5U21Fb1l5azdhV1lvZGk1c1pXNW5kR2crWWlseVpYUjFjbTRnTUR0SUxuTmxkQ2gyTEdFK1BqNHdLVHR5WlhSMWNtNGdkaTVzWlc1bmRHZ3RNWDEyWVhJZ1dEMWJYU3haUFhadmFXUWdNQ3hNWVQxYlhUdGNibVoxYm1OMGFXOXVJRTFoS0dFc1lpbDdhV1lvSVZrcGUxazlibVYzSUZkbFlXdE5ZWEE3ZG1GeUlHTTlUQzVzWlc1bmRHZzdhV1lvV1NsbWIzSW9kbUZ5SUdROU1EdGtQREFyWXp0a0t5c3BlM1poY2lCblBXUTdkbUZ5SUdnOVdGdG5YVHRvZkh3b1p6NDlXQzVzWlc1bmRHZ21KaWhZTG14bGJtZDBhRDFuS3pFcExGaGJaMTA5YUQxTUxtZGxkQ2huS1NrN0tHYzlhQ2ttSmxrdWMyVjBLR2NzWkNsOWZXbG1LR005V1M1blpYUW9ZU2w4ZkRBcGNtVjBkWEp1SUdNN2FXWW9UR0V1YkdWdVozUm9LV005VEdFdWNHOXdLQ2s3Wld4elpYdDBjbmw3VEM1bmNtOTNLREVwZldOaGRHTm9LSEFwZTJsbUtDRW9jQ0JwYm5OMFlXNWpaVzltSUZKaGJtZGxSWEp5YjNJcEtYUm9jbTkzSUhBN2RHaHliM2RjSWxWdVlXSnNaU0IwYnlCbmNtOTNJSGRoYzIwZ2RHRmliR1V1SUZObGRDQkJURXhQVjE5VVFVSk1SVjlIVWs5WFZFZ3VYQ0k3ZldNOVRDNXNaVzVuZEdndE1YMTBjbmw3WkQxakxFd3VjMlYwS0dRc1lTa3NXRnRrWFQxTUxtZGxkQ2hrS1gxallYUmphQ2h3S1h0cFppZ2hLSEFnYVc1emRHRnVZMlZ2WmlCVWVYQmxSWEp5YjNJcEtYUm9jbTkzSUhBN2FXWW9YQ0ptZFc1amRHbHZibHdpUFQxMGVYQmxiMllnVjJWaVFYTnpaVzFpYkhrdVJuVnVZM1JwYjI0cGUyUTlWMlZpUVhOelpXMWliSGt1Um5WdVkzUnBiMjQ3WEc1blBYdHBPbHdpYVRNeVhDSXNhanBjSW1rMk5Gd2lMR1k2WENKbU16SmNJaXhrT2x3aVpqWTBYQ0lzY0RwY0lta3pNbHdpZlR0b1BYdHdZWEpoYldWMFpYSnpPbHRkTEhKbGMzVnNkSE02WENKMlhDSTlQV0piTUYwL1cxMDZXMmRiWWxzd1hWMWRmVHRtYjNJb2RtRnlJR3M5TVR0clBHSXViR1Z1WjNSb095c3JheWxvTG5CaGNtRnRaWFJsY25NdWNIVnphQ2huVzJKYmExMWRLVHRpUFc1bGR5QmtLR2dzWVNsOVpXeHpaWHRrUFZzeFhUdG5QV0l1YzJ4cFkyVW9NQ3d4S1R0aVBXSXVjMnhwWTJVb01TazdhRDE3YVRveE1qY3NjRG94TWpjc2Fqb3hNallzWmpveE1qVXNaRG94TWpSOU8yUXVjSFZ6YUNnNU5pazdhejFpTG14bGJtZDBhRHN4TWpnK2F6OWtMbkIxYzJnb2F5azZaQzV3ZFhOb0tHc2xNVEk0ZkRFeU9DeHJQajQzS1R0bWIzSW9hejB3TzJzOFlpNXNaVzVuZEdnN0t5dHJLV1F1Y0hWemFDaG9XMkpiYTExZEtUdGNJblpjSWowOVp6OWtMbkIxYzJnb01DazZaQzV3ZFhOb0tERXNhRnRuWFNrN1lqMWJNQ3c1Tnl3eE1UVXNNVEE1TERFc01Dd3dMREFzTVYwN1p6MWtMbXhsYm1kMGFEc3hNamcrWno5aUxuQjFjMmdvWnlrNllpNXdkWE5vS0djbE1USTRmREV5T0N4blBqNDNLVHRpTG5CMWMyZ3VZWEJ3Ykhrb1lpeGtLVHRpTG5CMWMyZ29NaXczTERFc01Td3hNREVzTVN3eE1ESXNNQ3d3TERjc05Td3hMREVzTVRBeUxGeHVNQ3d3S1R0aVBXNWxkeUJYWldKQmMzTmxiV0pzZVM1TmIyUjFiR1VvYm1WM0lGVnBiblE0UVhKeVlYa29ZaWtwTzJJOUtHNWxkeUJYWldKQmMzTmxiV0pzZVM1SmJuTjBZVzVqWlNoaUxIdGxPbnRtT21GOWZTa3BMbVY0Y0c5eWRITXVabjFrUFdNN1RDNXpaWFFvWkN4aUtUdFlXMlJkUFV3dVoyVjBLR1FwZlZrdWMyVjBLR0VzWXlrN2NtVjBkWEp1SUdOOVhHNTJZWElnVDJFOWUyRTZablZ1WTNScGIyNG9ZU3hpTEdNcGUyRStQajQ5TURzb2JtVjNJSE5oS0dFcEtTNTZZU2hpUGo0K01DeGpQajQrTUNrN2RHRTlZVHQxWVNzck8zUm9jbTkzSUhSaE8zMHNaVHBtZFc1amRHbHZiaWdwZTNKbGRIVnliaUF3ZlN4SU9tWjFibU4wYVc5dUtDbDdmU3g0T21aMWJtTjBhVzl1S0NsN2ZTeDZPbVoxYm1OMGFXOXVLQ2w3ZlN4S09tWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlEQjlMRVk2Wm5WdVkzUnBiMjRvS1h0OUxFRTZablZ1WTNScGIyNG9LWHQ5TEVVNlpuVnVZM1JwYjI0b0tYdDlMR2M2Wm5WdVkzUnBiMjRvS1h0OUxIazZablZ1WTNScGIyNG9LWHQ5TEhZNlpuVnVZM1JwYjI0b0tYdDlMRWM2Wm5WdVkzUnBiMjRvS1h0OUxIYzZablZ1WTNScGIyNG9LWHQ5TEd3NktDazlQaUV3TEc4NlpuVnVZM1JwYjI0b1lTeGlMR01wZTJFOVlpc3lNRGszTVRVeVBqNCtNRHcwTVRrME16QTFMU0VoWVQ4b1lUNCtQakFwS3pReU9UUTVOamN5T1RZcVlqcE9ZVTQ3WXo0K1BqMHdPMkU5Ym1WM0lFUmhkR1VvTVVVekttRXBPMHBiWXo0K01qNCtQakJkUFdFdVoyVjBWVlJEVTJWamIyNWtjeWdwTzBwYll5czBQajR5UGo0K01GMDlZUzVuWlhSVlZFTk5hVzUxZEdWektDazdTbHRqS3pnK1BqSStQajR3WFQxaExtZGxkRlZVUTBodmRYSnpLQ2s3U2x0akt6RXlQajR5UGo0K1hHNHdYVDFoTG1kbGRGVlVRMFJoZEdVb0tUdEtXMk1yTVRZK1BqSStQajR3WFQxaExtZGxkRlZVUTAxdmJuUm9LQ2s3U2x0akt6SXdQajR5UGo0K01GMDlZUzVuWlhSVlZFTkdkV3hzV1dWaGNpZ3BMVEU1TURBN1NsdGpLekkwUGo0eVBqNCtNRjA5WVM1blpYUlZWRU5FWVhrb0tUdEtXMk1yTWpnK1BqSStQajR3WFQwb1lTNW5aWFJVYVcxbEtDa3RSR0YwWlM1VlZFTW9ZUzVuWlhSVlZFTkdkV3hzV1dWaGNpZ3BMREFzTVN3d0xEQXNNQ3d3S1Nrdk9EWTBSVFY4TUgwc2NEcG1kVzVqZEdsdmJpaGhMR0lzWXlsN1lUMWlLekl3T1RjeE5USStQajR3UERReE9UUXpNRFV0SVNGaFB5aGhQajQrTUNrck5ESTVORGsyTnpJNU5pcGlPazVoVGp0alBqNCtQVEE3WVQxdVpYY2dSR0YwWlNneFJUTXFZU2s3U2x0alBqNHlQajQrTUYwOVlTNW5aWFJUWldOdmJtUnpLQ2s3U2x0akt6UStQakkrUGo0d1hUMWhMbWRsZEUxcGJuVjBaWE1vS1R0S1cyTXJPRDQrTWo0K1BqQmRQV0V1WjJWMFNHOTFjbk1vS1R0S1cyTXJNVEkrUGpJK1BqNHdYVDFoTG1kbGRFUmhkR1VvS1R0S1cyTXJNVFkrUGpJK1BqNHdYVDFoTG1kbGRFMXZiblJvS0NrN1NsdGpLekl3UGo0eVBqNCtNRjA5WVM1blpYUkdkV3hzV1dWaGNpZ3BMVEU1TURBN1NsdGpLekkwUGo0eVBqNCtNRjA5WVM1blpYUkVZWGtvS1R0S1cyTXJNamcrUGpJK1BqNWNiakJkUFNoV0tHRXVaMlYwUm5Wc2JGbGxZWElvS1NrL2VHRTZlV0VwVzJFdVoyVjBUVzl1ZEdnb0tWMHJZUzVuWlhSRVlYUmxLQ2t0TVh3d08wcGJZeXN6Tmo0K01qNCtQakJkUFMwb05qQXFZUzVuWlhSVWFXMWxlbTl1WlU5bVpuTmxkQ2dwS1R0aVBTaHVaWGNnUkdGMFpTaGhMbWRsZEVaMWJHeFpaV0Z5S0Nrc05pd3hLU2t1WjJWMFZHbHRaWHB2Ym1WUFptWnpaWFFvS1R0MllYSWdaRDBvYm1WM0lFUmhkR1VvWVM1blpYUkdkV3hzV1dWaGNpZ3BMREFzTVNrcExtZGxkRlJwYldWNmIyNWxUMlptYzJWMEtDazdTbHRqS3pNeVBqNHlQajQrTUYwOUtHSWhQV1FtSm1FdVoyVjBWR2x0WlhwdmJtVlBabVp6WlhRb0tUMDlUV0YwYUM1dGFXNG9aQ3hpS1NsOE1IMHNjVHBtZFc1amRHbHZiaWhoS1h0aFBqNCtQVEE3ZG1GeUlHSTlibVYzSUVSaGRHVW9TbHRoS3pJd1BqNHlQajQrTUYwck1Ua3dNQ3hLVzJFck1UWStQakkrUGo0d1hTeEtXMkVyTVRJK1BqSStQajR3WFN4S1cyRXJPRDQrTWo0K1BqQmRMRXBiWVNzMFBqNHlQajQrTUYwc1NsdGhQajR5UGo0K01GMHNNQ2tzWXoxS1cyRXJNekkrUGpJK1BqNHdYU3hrUFdJdVoyVjBWR2x0WlhwdmJtVlBabVp6WlhRb0tTeG5QU2h1WlhjZ1JHRjBaU2hpTG1kbGRFWjFiR3haWldGeUtDa3NOaXd4S1NrdVoyVjBWR2x0WlhwdmJtVlBabVp6WlhRb0tTeGNibWc5S0c1bGR5QkVZWFJsS0dJdVoyVjBSblZzYkZsbFlYSW9LU3d3TERFcEtTNW5aWFJVYVcxbGVtOXVaVTltWm5ObGRDZ3BMR3M5VFdGMGFDNXRhVzRvYUN4bktUc3dQbU0vU2x0aEt6TXlQajR5UGo0K01GMDlUblZ0WW1WeUtHY2hQV2dtSm1zOVBXUXBPakE4WXlFOUtHczlQV1FwSmlZb1p6MU5ZWFJvTG0xaGVDaG9MR2NwTEdJdWMyVjBWR2x0WlNoaUxtZGxkRlJwYldVb0tTczJSVFFxS0Nnd1BHTS9henBuS1Mxa0tTa3BPMHBiWVNzeU5ENCtNajQrUGpCZFBXSXVaMlYwUkdGNUtDazdTbHRoS3pJNFBqNHlQajQrTUYwOUtGWW9ZaTVuWlhSR2RXeHNXV1ZoY2lncEtUOTRZVHA1WVNsYllpNW5aWFJOYjI1MGFDZ3BYU3RpTG1kbGRFUmhkR1VvS1MweGZEQTdTbHRoUGo0eVBqNCtNRjA5WWk1blpYUlRaV052Ym1SektDazdTbHRoS3pRK1BqSStQajR3WFQxaUxtZGxkRTFwYm5WMFpYTW9LVHRLVzJFck9ENCtNajQrUGpCZFBXSXVaMlYwU0c5MWNuTW9LVHRLVzJFck1USStQakkrUGo0d1hUMWlMbWRsZEVSaGRHVW9LVHRLVzJFck1UWStQakkrUGo0d1hUMWlMbWRsZEUxdmJuUm9LQ2s3U2x0aEt6SXdQajR5UGo0K01GMDlZaTVuWlhSWlpXRnlLQ2s3WVQxaUxtZGxkRlJwYldVb0tTOHhSVE03Y21WMGRYSnVJRTVoS0NoUlBXRXNNVHc5SzAxaGRHZ3VZV0p6S0ZFcFB6QThVVDhyVFdGMGFDNW1iRzl2Y2loUkwxeHVOREk1TkRrMk56STVOaWsrUGo0d09uNStLMDFoZEdndVkyVnBiQ2dvVVMwcktINStVVDQrUGpBcEtTODBNamswT1RZM01qazJLVDQrUGpBNk1Da3BMR0UrUGo0d2ZTeHRPbVoxYm1OMGFXOXVLQ2w3Y21WMGRYSnVMVFV5ZlN4dU9tWjFibU4wYVc5dUtDbDdmU3gwT21aMWJtTjBhVzl1S0dFc1lpeGpLWHRtZFc1amRHbHZiaUJrS0hRcGUzSmxkSFZ5YmloMFBYUXVkRzlVYVcxbFUzUnlhVzVuS0NrdWJXRjBZMmdvTDF4Y0tDaGJRUzFhWVMxNklGMHJLVnhjS1NRdktTay9kRnN4WFRwY0lrZE5WRndpZldNK1BqNDlNRHQyWVhJZ1p6MG9ibVYzSUVSaGRHVXBMbWRsZEVaMWJHeFpaV0Z5S0Nrc2FEMXVaWGNnUkdGMFpTaG5MREFzTVNrc2F6MXVaWGNnUkdGMFpTaG5MRFlzTVNrN1p6MW9MbWRsZEZScGJXVjZiMjVsVDJabWMyVjBLQ2s3ZG1GeUlIQTlheTVuWlhSVWFXMWxlbTl1WlU5bVpuTmxkQ2dwTzB0YllUNCtQakErUGpJK1BqNHdYVDAyTUNwTllYUm9MbTFoZUNobkxIQXBPMHBiWWo0K1BqQStQakkrUGo0d1hUMU9kVzFpWlhJb1p5RTljQ2s3WVQxa0tHZ3BPMkk5WkNocktUdGhQVVJoS0dFcE8ySTlSR0VvWWlrN2NEeG5QeWhMVzJNK1BqSStQajR3WFQxaExFdGJZeXMwUGo0eVBqNCtNRjA5WWlrNktFdGJZejQrTWo0K1BqQmRQV0lzUzF0akt6UStQakkrUGo0d1hUMWhLWDBzWkRvb0tUMCtlMFVvWENKY0lpbDlMRnh1YURwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlCRVlYUmxMbTV2ZHlncGZTeDFPbVoxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJRFF5T1RRNU1ERTNOakI5TEdJNktDazlQbkJsY21admNtMWhibU5sTG01dmR5Z3BMRWs2Wm5WdVkzUnBiMjRvWVN4aUxHTXBlMkkrUGo0OU1EdHlaWFIxY200Z1NTNWpiM0I1VjJsMGFHbHVLR0UrUGo0d1BqNCtNQ3hpUGo0K01DeGlLeWhqUGo0K01DaytQajR3S1gwc2N6cG1kVzVqZEdsdmJpaGhLWHRoUGo0K1BUQTdkbUZ5SUdJOVNTNXNaVzVuZEdnN2FXWW9OREk1TkRrd01UYzJNRHhoS1hKbGRIVnliaUV4TzJadmNpaDJZWElnWXoweE96UStQV003WXlvOU1pbDdkbUZ5SUdROVlpb29NU3N1TWk5aktUdGtQVTFoZEdndWJXbHVLR1FzWVNzeE1EQTJOak15T1RZcE8zWmhjaUJuUFUxaGRHZzdaRDFOWVhSb0xtMWhlQ2hoTEdRcE8yRTZlMmM5Wnk1dGFXNHVZMkZzYkNobkxEUXlPVFE1TURFM05qQXNaQ3NvTmpVMU16WXRaQ1UyTlRVek5pa2xOalUxTXpZcExVWXVZblZtWm1WeUxtSjVkR1ZNWlc1bmRHZ3JOalUxTXpVK1BqNHhOanQwY25sN1JpNW5jbTkzS0djcE8yaGhLQ2s3ZG1GeUlHZzlNVHRpY21WaGF5QmhmV05oZEdOb0tHc3BlMzFvUFhadmFXUWdNSDFwWmlob0tYSmxkSFZ5YmlFd2ZYSmxkSFZ5YmlFeGZTeERPbVoxYm1OMGFXOXVLR0VzWWlsN1lUNCtQajFjYmpBN1lqNCtQajB3TzNaaGNpQmpQVEE3Um1Fb0tTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtHUXNaeWw3ZG1GeUlHZzlZaXRqTzJjOVMxdGhLelFxWno0K01qNCtQakJkUFdnN1ptOXlLR2c5TUR0b1BHUXViR1Z1WjNSb095c3JhQ2xJVzJjckt6NCtNRDQrUGpCZFBXUXVZMmhoY2tOdlpHVkJkQ2hvS1R0SVcyYytQakErUGo0d1hUMHdPMk1yUFdRdWJHVnVaM1JvS3pGOUtUdHlaWFIxY200Z01IMHNSRHBtZFc1amRHbHZiaWhoTEdJcGUyRStQajQ5TUR0aVBqNCtQVEE3ZG1GeUlHTTlSbUVvS1R0TFcyRStQakkrUGo0d1hUMWpMbXhsYm1kMGFEdDJZWElnWkQwd08yTXVabTl5UldGamFDaG1kVzVqZEdsdmJpaG5LWHRrS3oxbkxteGxibWQwYUNzeGZTazdTMXRpUGo0eVBqNCtNRjA5WkR0eVpYUjFjbTRnTUgwc1pqb29LVDArTlRJc2F6cG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJpQTFNbjBzY2pwbWRXNWpkR2x2YmlncGUzSmxkSFZ5YmlBM01IMHNhanBtZFc1amRHbHZiaWhoTEdJc1l5eGtLWHRpUGo0K1BUQTdZejQrUGowd08yUStQajQ5TUR0bWIzSW9kbUZ5SUdjOU1DeG9QVEE3YUR4ak8yZ3JLeWw3ZG1GeUlHczlTMXRpUGo0eVBqNCtNRjBzY0QxTFcySXJORDQrTWo0K1BqQmRPMklyUFRnN1ptOXlLSFpoY2lCMFBUQTdkRHh3TzNRckt5bDdkbUZ5SUhVOVNWdHJLM1ErUGo0d1hTeDJQVnh1UjJGYllWMDdNRDA5UFhWOGZERXdQVDA5ZFQ4b0tERTlQVDFoUDJWaE9rTXBLSGRoS0hZc01Da3BMSFl1YkdWdVozUm9QVEFwT25ZdWNIVnphQ2gxS1gxbkt6MXdmVXRiWkQ0K01qNCtQakJkUFdjN2NtVjBkWEp1SURCOUxFSTZTMkVzWXpwbWRXNWpkR2x2YmloaExHSXNZeXhrS1h0eVpYUjFjbTRnUzJFb1lUNCtQakFzWWo0K1BqQXNZejQrUGpBc1pENCtQakFwZlN4cE9tWjFibU4wYVc5dUtHRXNZaXhqTEdRcGUyTnZibk4wSUdjOVRDNXNaVzVuZEdnN1lUMXVaWGNnVldsdWREaEJjbkpoZVNoSkxuTnNhV05sS0dFcllpeGhLMk1wS1R0MGNubDdkbUZ5SUdnOWJtVjNJRmRsWWtGemMyVnRZbXg1TGsxdlpIVnNaU2hoS1N4clBXNWxkeUJYWldKQmMzTmxiV0pzZVM1SmJuTjBZVzVqWlNob0xIdGxiblk2ZTIxbGJXOXllVHBHZlgwcExIQTdabTl5S0hBZ2FXNGdheTVsZUhCdmNuUnpLVTFoS0dzdVpYaHdiM0owYzF0d1hTazdjbVYwZFhKdUlHYzhUQzVzWlc1bmRHZy9aenBrZldOaGRHTm9LSFFwZTNKbGRIVnliaUJqYjI1emIyeGxMbXh2WnloMEtTeGtmWDE5TzF4dUtHWjFibU4wYVc5dUtDbDdablZ1WTNScGIyNGdZU2hqS1h0alBXTXVaWGh3YjNKMGN6dEhQV005VUdFb1l5azdSajFITGtzN2FHRW9LVHRNUFVjdWJtRTdhbUV1ZFc1emFHbG1kQ2hITGt3cE8wMHRMVHRsTG0xdmJtbDBiM0pTZFc1RVpYQmxibVJsYm1OcFpYTW1KbVV1Ylc5dWFYUnZjbEoxYmtSbGNHVnVaR1Z1WTJsbGN5aE5LVHRwWmlnd1BUMU5KaVlvYm5Wc2JDRTlQVTRtSmloamJHVmhja2x1ZEdWeWRtRnNLRTRwTEU0OWJuVnNiQ2tzVHlrcGUzWmhjaUJrUFU4N1R6MXVkV3hzTzJRb0tYMXlaWFIxY200Z1kzMTJZWElnWWoxN1lUcFBZWDA3VFNzck8yVXViVzl1YVhSdmNsSjFia1JsY0dWdVpHVnVZMmxsY3lZbVpTNXRiMjVwZEc5eVVuVnVSR1Z3Wlc1a1pXNWphV1Z6S0UwcE8ybG1LR1V1YVc1emRHRnVkR2xoZEdWWFlYTnRLWFJ5ZVh0eVpYUjFjbTRnWlM1cGJuTjBZVzUwYVdGMFpWZGhjMjBvWWl4aEtYMWpZWFJqYUNoaktYdERLRndpVFc5a2RXeGxMbWx1YzNSaGJuUnBZWFJsVjJGemJTQmpZV3hzWW1GamF5Qm1ZV2xzWldRZ2QybDBhQ0JsY25KdmNqb2dYQ0lyWXlrc2JDaGpLWDF5WVNoaUxHWjFibU4wYVc5dUtHTXBlMkVvWXk1cGJuTjBZVzVqWlNsOUtTNWpZWFJqYUNoc0tUdHlaWFIxY201N2ZYMHBLQ2s3WEc1bExsOVBjblJKYm1sMFBTaGhMR0lwUFQ0b1pTNWZUM0owU1c1cGREMUhMazBwS0dFc1lpazdaUzVmVDNKMFIyVjBUR0Z6ZEVWeWNtOXlQU2hoTEdJcFBUNG9aUzVmVDNKMFIyVjBUR0Z6ZEVWeWNtOXlQVWN1VGlrb1lTeGlLVHRsTGw5UGNuUkRjbVZoZEdWVFpYTnphVzl1VDNCMGFXOXVjejBvWVN4aUxHTXNaQ3huTEdnc2F5eHdMSFFzZFNrOVBpaGxMbDlQY25SRGNtVmhkR1ZUWlhOemFXOXVUM0IwYVc5dWN6MUhMazhwS0dFc1lpeGpMR1FzWnl4b0xHc3NjQ3gwTEhVcE8yVXVYMDl5ZEVGd2NHVnVaRVY0WldOMWRHbHZibEJ5YjNacFpHVnlQU2hoTEdJcFBUNG9aUzVmVDNKMFFYQndaVzVrUlhobFkzVjBhVzl1VUhKdmRtbGtaWEk5Unk1UUtTaGhMR0lwTzJVdVgwOXlkRUZrWkVaeVpXVkVhVzFsYm5OcGIyNVBkbVZ5Y21sa1pUMG9ZU3hpTEdNcFBUNG9aUzVmVDNKMFFXUmtSbkpsWlVScGJXVnVjMmx2Yms5MlpYSnlhV1JsUFVjdVVTa29ZU3hpTEdNcE8yVXVYMDl5ZEVGa1pGTmxjM05wYjI1RGIyNW1hV2RGYm5SeWVUMG9ZU3hpTEdNcFBUNG9aUzVmVDNKMFFXUmtVMlZ6YzJsdmJrTnZibVpwWjBWdWRISjVQVWN1VWlrb1lTeGlMR01wTzJVdVgwOXlkRkpsYkdWaGMyVlRaWE56YVc5dVQzQjBhVzl1Y3oxaFBUNG9aUzVmVDNKMFVtVnNaV0Z6WlZObGMzTnBiMjVQY0hScGIyNXpQVWN1VXlrb1lTazdYRzVsTGw5UGNuUkRjbVZoZEdWVFpYTnphVzl1UFNoaExHSXNZeWs5UGlobExsOVBjblJEY21WaGRHVlRaWE56YVc5dVBVY3VWQ2tvWVN4aUxHTXBPMlV1WDA5eWRGSmxiR1ZoYzJWVFpYTnphVzl1UFdFOVBpaGxMbDlQY25SU1pXeGxZWE5sVTJWemMybHZiajFITGxVcEtHRXBPMlV1WDA5eWRFZGxkRWx1Y0hWMFQzVjBjSFYwUTI5MWJuUTlLR0VzWWl4aktUMCtLR1V1WDA5eWRFZGxkRWx1Y0hWMFQzVjBjSFYwUTI5MWJuUTlSeTVXS1NoaExHSXNZeWs3WlM1ZlQzSjBSMlYwU1c1d2RYUk9ZVzFsUFNoaExHSXBQVDRvWlM1ZlQzSjBSMlYwU1c1d2RYUk9ZVzFsUFVjdVZ5a29ZU3hpS1R0bExsOVBjblJIWlhSUGRYUndkWFJPWVcxbFBTaGhMR0lwUFQ0b1pTNWZUM0owUjJWMFQzVjBjSFYwVG1GdFpUMUhMbGdwS0dFc1lpazdaUzVmVDNKMFJuSmxaVDFoUFQ0b1pTNWZUM0owUm5KbFpUMUhMbGtwS0dFcE8yVXVYMDl5ZEVOeVpXRjBaVlJsYm5OdmNqMG9ZU3hpTEdNc1pDeG5MR2dwUFQ0b1pTNWZUM0owUTNKbFlYUmxWR1Z1YzI5eVBVY3VXaWtvWVN4aUxHTXNaQ3huTEdncE8yVXVYMDl5ZEVkbGRGUmxibk52Y2tSaGRHRTlLR0VzWWl4akxHUXNaeWs5UGlobExsOVBjblJIWlhSVVpXNXpiM0pFWVhSaFBVY3VYeWtvWVN4aUxHTXNaQ3huS1R0Y2JtVXVYMDl5ZEZKbGJHVmhjMlZVWlc1emIzSTlZVDArS0dVdVgwOXlkRkpsYkdWaGMyVlVaVzV6YjNJOVJ5NGtLU2hoS1R0bExsOVBjblJEY21WaGRHVlNkVzVQY0hScGIyNXpQU2hoTEdJc1l5eGtLVDArS0dVdVgwOXlkRU55WldGMFpWSjFiazl3ZEdsdmJuTTlSeTVoWVNrb1lTeGlMR01zWkNrN1pTNWZUM0owUVdSa1VuVnVRMjl1Wm1sblJXNTBjbms5S0dFc1lpeGpLVDArS0dVdVgwOXlkRUZrWkZKMWJrTnZibVpwWjBWdWRISjVQVWN1WW1FcEtHRXNZaXhqS1R0bExsOVBjblJTWld4bFlYTmxVblZ1VDNCMGFXOXVjejFoUFQ0b1pTNWZUM0owVW1Wc1pXRnpaVkoxYms5d2RHbHZibk05Unk1allTa29ZU2s3WlM1ZlQzSjBRM0psWVhSbFFtbHVaR2x1WnoxaFBUNG9aUzVmVDNKMFEzSmxZWFJsUW1sdVpHbHVaejFITG1SaEtTaGhLVHRsTGw5UGNuUkNhVzVrU1c1d2RYUTlLR0VzWWl4aktUMCtLR1V1WDA5eWRFSnBibVJKYm5CMWREMUhMbVZoS1NoaExHSXNZeWs3WlM1ZlQzSjBRbWx1WkU5MWRIQjFkRDBvWVN4aUxHTXNaQ2s5UGlobExsOVBjblJDYVc1a1QzVjBjSFYwUFVjdVptRXBLR0VzWWl4akxHUXBPMlV1WDA5eWRFTnNaV0Z5UW05MWJtUlBkWFJ3ZFhSelBXRTlQaWhsTGw5UGNuUkRiR1ZoY2tKdmRXNWtUM1YwY0hWMGN6MUhMbWRoS1NoaEtUdGNibVV1WDA5eWRGSmxiR1ZoYzJWQ2FXNWthVzVuUFdFOVBpaGxMbDlQY25SU1pXeGxZWE5sUW1sdVpHbHVaejFITG1oaEtTaGhLVHRsTGw5UGNuUlNkVzVYYVhSb1FtbHVaR2x1Wnowb1lTeGlMR01zWkN4bktUMCtLR1V1WDA5eWRGSjFibGRwZEdoQ2FXNWthVzVuUFVjdWFXRXBLR0VzWWl4akxHUXNaeWs3WlM1ZlQzSjBVblZ1UFNoaExHSXNZeXhrTEdjc2FDeHJMSEFwUFQ0b1pTNWZUM0owVW5WdVBVY3VhbUVwS0dFc1lpeGpMR1FzWnl4b0xHc3NjQ2s3WlM1ZlQzSjBSVzVrVUhKdlptbHNhVzVuUFdFOVBpaGxMbDlQY25SRmJtUlFjbTltYVd4cGJtYzlSeTVyWVNrb1lTazdkbUZ5SUhwaFBXVXVYMjFoYkd4dll6MWhQVDRvZW1FOVpTNWZiV0ZzYkc5alBVY3ViR0VwS0dFcE8yVXVYMlp5WldVOVlUMCtLR1V1WDJaeVpXVTlSeTV0WVNrb1lTazdkbUZ5SUU1aFBXRTlQaWhPWVQxSExtOWhLU2hoS1N4UllUMG9LVDArS0ZGaFBVY3VjR0VwS0Nrc1VtRTlZVDArS0ZKaFBVY3VjV0VwS0dFcExGTmhQV0U5UGloVFlUMUhMbkpoS1NoaEtUdGxMbDlmWDNOMFlYSjBYMlZ0WDJwelBUa3dOVFl3TUR0bExsOWZYM04wYjNCZlpXMWZhbk05T1RBMk1qRXlPMXh1Wm5WdVkzUnBiMjRnVUdFb1lTbDdZVDFQWW1wbFkzUXVZWE56YVdkdUtIdDlMR0VwTzNaaGNpQmlQV1E5UGlncFBUNWtLQ2srUGo0d0xHTTlaRDArWnowK1pDaG5LVDQrUGpBN1lTNWZYMlZ5Y201dlgyeHZZMkYwYVc5dVBXSW9ZUzVmWDJWeWNtNXZYMnh2WTJGMGFXOXVLVHRoTG0xaGJHeHZZejFqS0dFdWJXRnNiRzlqS1R0aExuTjBZV05yVTJGMlpUMWlLR0V1YzNSaFkydFRZWFpsS1R0aExuTjBZV05yUVd4c2IyTTlZeWhoTG5OMFlXTnJRV3hzYjJNcE8zSmxkSFZ5YmlCaGZXVXVjM1JoWTJ0QmJHeHZZejFUWVR0bExuTjBZV05yVTJGMlpUMVJZVHRsTG5OMFlXTnJVbVZ6ZEc5eVpUMVNZVHRsTG1Ga1pFWjFibU4wYVc5dVBVMWhPMlV1VlZSR09GUnZVM1J5YVc1blBWTTdaUzV6ZEhKcGJtZFViMVZVUmpnOUtHRXNZaXhqS1QwK1ZTaGhMRWtzWWl4aktUdGxMbXhsYm1kMGFFSjVkR1Z6VlZSR09EMVVPM1poY2lCYU8wODlablZ1WTNScGIyNGdWR0VvS1h0YWZIeFZZU2dwTzFwOGZDaFBQVlJoS1gwN1hHNW1kVzVqZEdsdmJpQlZZU2dwZTJaMWJtTjBhVzl1SUdFb0tYdHBaaWdoV2lZbUtGbzlJVEFzWlM1allXeHNaV1JTZFc0OUlUQXNJV1poS1NsN1VpaHFZU2s3WVdFb1pTazdhV1lvWlM1dmJsSjFiblJwYldWSmJtbDBhV0ZzYVhwbFpDbGxMbTl1VW5WdWRHbHRaVWx1YVhScFlXeHBlbVZrS0NrN2FXWW9aUzV3YjNOMFVuVnVLV1p2Y2loY0ltWjFibU4wYVc5dVhDSTlQWFI1Y0dWdlppQmxMbkJ2YzNSU2RXNG1KaWhsTG5CdmMzUlNkVzQ5VzJVdWNHOXpkRkoxYmwwcE8yVXVjRzl6ZEZKMWJpNXNaVzVuZEdnN0tYdDJZWElnWWoxbExuQnZjM1JTZFc0dWMyaHBablFvS1R0cllTNTFibk5vYVdaMEtHSXBmVklvYTJFcGZYMXBaaWdoS0RBOFRTa3BlMmxtS0dVdWNISmxVblZ1S1dadmNpaGNJbVoxYm1OMGFXOXVYQ0k5UFhSNWNHVnZaaUJsTG5CeVpWSjFiaVltS0dVdWNISmxVblZ1UFZ0bExuQnlaVkoxYmwwcE8yVXVjSEpsVW5WdUxteGxibWQwYURzcGJHRW9LVHRTS0dsaEtUc3dQRTE4ZkNobExuTmxkRk4wWVhSMWN6OG9aUzV6WlhSVGRHRjBkWE1vWENKU2RXNXVhVzVuTGk0dVhDSXBMSE5sZEZScGJXVnZkWFFvWm5WdVkzUnBiMjRvS1h0elpYUlVhVzFsYjNWMEtHWjFibU4wYVc5dUtDbDdaUzV6WlhSVGRHRjBkWE1vWENKY0lpbDlMREVwTzJFb0tYMHNNU2twT21Fb0tTbDlmVnh1YVdZb1pTNXdjbVZKYm1sMEtXWnZjaWhjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCbExuQnlaVWx1YVhRbUppaGxMbkJ5WlVsdWFYUTlXMlV1Y0hKbFNXNXBkRjBwT3pBOFpTNXdjbVZKYm1sMExteGxibWQwYURzcFpTNXdjbVZKYm1sMExuQnZjQ2dwS0NrN1ZXRW9LVHRjYmx4dVhHNGdJSEpsZEhWeWJpQnRiMlIxYkdWQmNtY3VjbVZoWkhsY2JuMWNibHh1S1R0Y2JuMHBLQ2s3WEc1cFppQW9kSGx3Wlc5bUlHVjRjRzl5ZEhNZ1BUMDlJQ2R2WW1wbFkzUW5JQ1ltSUhSNWNHVnZaaUJ0YjJSMWJHVWdQVDA5SUNkdlltcGxZM1FuS1Z4dUlDQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHOXlkRmRoYzIwN1hHNWxiSE5sSUdsbUlDaDBlWEJsYjJZZ1pHVm1hVzVsSUQwOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUdSbFptbHVaVnNuWVcxa0oxMHBYRzRnSUdSbFptbHVaU2hiWFN3Z0tDa2dQVDRnYjNKMFYyRnpiU2s3WEc0aUxDQWlJaXdnSWlJc0lDSmxlSEJ2Y25RZ1kyOXVjM1FnWTNCMWN5QTlJSFZ1WkdWbWFXNWxaRHNpTENBaVhHNTJZWElnYjNKMFYyRnpiVlJvY21WaFpHVmtJRDBnS0NncElEMCtJSHRjYmlBZ2RtRnlJRjl6WTNKcGNIUkVhWElnUFNCMGVYQmxiMllnWkc5amRXMWxiblFnSVQwOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUdSdlkzVnRaVzUwTG1OMWNuSmxiblJUWTNKcGNIUWdQeUJrYjJOMWJXVnVkQzVqZFhKeVpXNTBVMk55YVhCMExuTnlZeUE2SUhWdVpHVm1hVzVsWkR0Y2JpQWdhV1lnS0hSNWNHVnZaaUJmWDJacGJHVnVZVzFsSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnWDNOamNtbHdkRVJwY2lBOUlGOXpZM0pwY0hSRWFYSWdmSHdnWDE5bWFXeGxibUZ0WlR0Y2JpQWdjbVYwZFhKdUlDaGNibVoxYm1OMGFXOXVLRzF2WkhWc1pVRnlaeUE5SUh0OUtTQjdYRzVjYm1aMWJtTjBhVzl1SUdGaEtDbDdaUzVpZFdabVpYSWhQV3d1WW5WbVptVnlKaVp0S0NrN2NtVjBkWEp1SUd4OVpuVnVZM1JwYjI0Z2JpZ3BlMlV1WW5WbVptVnlJVDFzTG1KMVptWmxjaVltYlNncE8zSmxkSFZ5YmlCaVlYMW1kVzVqZEdsdmJpQndLQ2w3WlM1aWRXWm1aWEloUFd3dVluVm1abVZ5SmladEtDazdjbVYwZFhKdUlHTmhmV1oxYm1OMGFXOXVJSFFvS1h0bExtSjFabVpsY2lFOWJDNWlkV1ptWlhJbUptMG9LVHR5WlhSMWNtNGdaR0Y5Wm5WdVkzUnBiMjRnWldFb0tYdGxMbUoxWm1abGNpRTliQzVpZFdabVpYSW1KbTBvS1R0eVpYUjFjbTRnWm1GOWRtRnlJSGM5Ylc5a2RXeGxRWEpuTEdoaExIZzdkeTV5WldGa2VUMXVaWGNnVUhKdmJXbHpaU2dvWVN4aUtUMCtlMmhoUFdFN2VEMWlmU2s3WEc1MllYSWdhV0U5VDJKcVpXTjBMbUZ6YzJsbmJpaDdmU3gzS1N4cVlUMWNJaTR2ZEdocGN5NXdjbTluY21GdFhDSXNlajBvWVN4aUtUMCtlM1JvY205M0lHSTdmU3hyWVQxY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ2QybHVaRzkzTEVFOVhDSm1kVzVqZEdsdmJsd2lQVDEwZVhCbGIyWWdhVzF3YjNKMFUyTnlhWEIwY3l4RFBWd2liMkpxWldOMFhDSTlQWFI1Y0dWdlppQndjbTlqWlhOekppWmNJbTlpYW1WamRGd2lQVDEwZVhCbGIyWWdjSEp2WTJWemN5NTJaWEp6YVc5dWN5WW1YQ0p6ZEhKcGJtZGNJajA5ZEhsd1pXOW1JSEJ5YjJObGMzTXVkbVZ5YzJsdmJuTXVibTlrWlN4RVBYY3VSVTVXU1ZKUFRrMUZUbFJmU1ZOZlVGUklVa1ZCUkh4OElURXNSVDFjSWx3aU8yWjFibU4wYVc5dUlHeGhLR0VwZTNKbGRIVnliaUIzTG14dlkyRjBaVVpwYkdVL2R5NXNiMk5oZEdWR2FXeGxLR0VzUlNrNlJTdGhmWFpoY2lCdFlTeEdMRWM3WEc1cFppaERLWHQyWVhJZ1puTTljbVZ4ZFdseVpTaGNJbVp6WENJcExHNWhQWEpsY1hWcGNtVW9YQ0p3WVhSb1hDSXBPMFU5UVQ5dVlTNWthWEp1WVcxbEtFVXBLMXdpTDF3aU9sOWZaR2x5Ym1GdFpTdGNJaTljSWp0dFlUMG9ZaXhqS1QwK2UySTlZaTV6ZEdGeWRITlhhWFJvS0Z3aVptbHNaVG92TDF3aUtUOXVaWGNnVlZKTUtHSXBPbTVoTG01dmNtMWhiR2w2WlNoaUtUdHlaWFIxY200Z1puTXVjbVZoWkVacGJHVlRlVzVqS0dJc1l6OTJiMmxrSURBNlhDSjFkR1k0WENJcGZUdEhQV0k5UG50aVBXMWhLR0lzSVRBcE8ySXVZblZtWm1WeWZId29ZajF1WlhjZ1ZXbHVkRGhCY25KaGVTaGlLU2s3Y21WMGRYSnVJR0o5TzBZOUtHSXNZeXhrTEdjOUlUQXBQVDU3WWoxaUxuTjBZWEowYzFkcGRHZ29YQ0ptYVd4bE9pOHZYQ0lwUDI1bGR5QlZVa3dvWWlrNmJtRXVibTl5YldGc2FYcGxLR0lwTzJaekxuSmxZV1JHYVd4bEtHSXNaejkyYjJsa0lEQTZYQ0oxZEdZNFhDSXNLR2dzYXlrOVBudG9QMlFvYUNrNll5aG5QMnN1WW5WbVptVnlPbXNwZlNsOU95RjNMblJvYVhOUWNtOW5jbUZ0SmlZeFBIQnliMk5sYzNNdVlYSm5kaTVzWlc1bmRHZ21KaWhxWVQxd2NtOWpaWE56TG1GeVozWmJNVjB1Y21Wd2JHRmpaU2d2WEZ4Y1hDOW5MRndpTDF3aUtTazdjSEp2WTJWemN5NWhjbWQyTG5Oc2FXTmxLRElwTzNvOUtHSXNZeWs5UG50d2NtOWpaWE56TG1WNGFYUkRiMlJsUFZ4dVlqdDBhSEp2ZHlCak8zMDdkeTVwYm5Od1pXTjBQU2dwUFQ1Y0lsdEZiWE5qY21sd2RHVnVJRTF2WkhWc1pTQnZZbXBsWTNSZFhDSTdiR1YwSUdFN2RISjVlMkU5Y21WeGRXbHlaU2hjSW5kdmNtdGxjbDkwYUhKbFlXUnpYQ0lwZldOaGRHTm9LR0lwZTNSb2NtOTNJR052Ym5OdmJHVXVaWEp5YjNJb0oxUm9aU0JjSW5kdmNtdGxjbDkwYUhKbFlXUnpYQ0lnYlc5a2RXeGxJR2x6SUc1dmRDQnpkWEJ3YjNKMFpXUWdhVzRnZEdocGN5QnViMlJsTG1weklHSjFhV3hrSUMwZ2NHVnlhR0Z3Y3lCaElHNWxkMlZ5SUhabGNuTnBiMjRnYVhNZ2JtVmxaR1ZrUHljcExHSTdmV2RzYjJKaGJDNVhiM0pyWlhJOVlTNVhiM0pyWlhKOVpXeHpaU0JwWmlocllYeDhRU2xCUDBVOWMyVnNaaTVzYjJOaGRHbHZiaTVvY21WbU9sd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUJrYjJOMWJXVnVkQ1ltWkc5amRXMWxiblF1WTNWeWNtVnVkRk5qY21sd2RDWW1LRVU5Wkc5amRXMWxiblF1WTNWeWNtVnVkRk5qY21sd2RDNXpjbU1wTENoMGVYQmxiMllnWDNOamNtbHdkRVJwY2lBaFBUMGdYQ0oxYm1SbFptbHVaV1JjSWlBbUppQmZjMk55YVhCMFJHbHlLU1ltS0VVOVgzTmpjbWx3ZEVScGNpa3NNQ0U5UFVVdWFXNWtaWGhQWmloY0ltSnNiMkk2WENJcFAwVTlSUzV6ZFdKemRISW9NQ3hGTG5KbGNHeGhZMlVvTDFzL0kxMHVLaThzWENKY0lpa3ViR0Z6ZEVsdVpHVjRUMllvWENJdlhDSXBLekVwT2tVOVhDSmNJaXhEZkh3b2JXRTlZVDArZTNaaGNpQmlQVnh1Ym1WM0lGaE5URWgwZEhCU1pYRjFaWE4wTzJJdWIzQmxiaWhjSWtkRlZGd2lMR0VzSVRFcE8ySXVjMlZ1WkNodWRXeHNLVHR5WlhSMWNtNGdZaTV5WlhOd2IyNXpaVlJsZUhSOUxFRW1KaWhIUFdFOVBudDJZWElnWWoxdVpYY2dXRTFNU0hSMGNGSmxjWFZsYzNRN1lpNXZjR1Z1S0Z3aVIwVlVYQ0lzWVN3aE1TazdZaTV5WlhOd2IyNXpaVlI1Y0dVOVhDSmhjbkpoZVdKMVptWmxjbHdpTzJJdWMyVnVaQ2h1ZFd4c0tUdHlaWFIxY200Z2JtVjNJRlZwYm5RNFFYSnlZWGtvWWk1eVpYTndiMjV6WlNsOUtTeEdQU2hoTEdJc1l5azlQbnQyWVhJZ1pEMXVaWGNnV0UxTVNIUjBjRkpsY1hWbGMzUTdaQzV2Y0dWdUtGd2lSMFZVWENJc1lTd2hNQ2s3WkM1eVpYTndiMjV6WlZSNWNHVTlYQ0poY25KaGVXSjFabVpsY2x3aU8yUXViMjVzYjJGa1BTZ3BQVDU3TWpBd1BUMWtMbk4wWVhSMWMzeDhNRDA5WkM1emRHRjBkWE1tSm1RdWNtVnpjRzl1YzJVL1lpaGtMbkpsYzNCdmJuTmxLVHBqS0NsOU8yUXViMjVsY25KdmNqMWpPMlF1YzJWdVpDaHVkV3hzS1gwcE8wTW1KbHdpZFc1a1pXWnBibVZrWENJOVBYUjVjR1Z2WmlCd1pYSm1iM0p0WVc1alpTWW1LR2RzYjJKaGJDNXdaWEptYjNKdFlXNWpaVDF5WlhGMWFYSmxLRndpY0dWeVpsOW9iMjlyYzF3aUtTNXdaWEptYjNKdFlXNWpaU2s3WEc1MllYSWdiMkU5WTI5dWMyOXNaUzVzYjJjdVltbHVaQ2hqYjI1emIyeGxLU3h3WVQxamIyNXpiMnhsTG1WeWNtOXlMbUpwYm1Rb1kyOXVjMjlzWlNrN1F5WW1LRzloUFNndUxpNWhLVDArWm5NdWQzSnBkR1ZUZVc1aktERXNZUzVxYjJsdUtGd2lJRndpS1N0Y0lseGNibHdpS1N4d1lUMG9MaTR1WVNrOVBtWnpMbmR5YVhSbFUzbHVZeWd5TEdFdWFtOXBiaWhjSWlCY0lpa3JYQ0pjWEc1Y0lpa3BPM1poY2lCeFlUMTNMbkJ5YVc1MGZIeHZZU3hKUFhjdWNISnBiblJGY25KOGZIQmhPMDlpYW1WamRDNWhjM05wWjI0b2R5eHBZU2s3YVdFOWJuVnNiRHQzTG5Sb2FYTlFjbTluY21GdEppWW9hbUU5ZHk1MGFHbHpVSEp2WjNKaGJTazdkeTV4ZFdsMEppWW9lajEzTG5GMWFYUXBPM1poY2lCS08zY3VkMkZ6YlVKcGJtRnllU1ltS0VvOWR5NTNZWE50UW1sdVlYSjVLVHQyWVhJZ2JtOUZlR2wwVW5WdWRHbHRaVDEzTG01dlJYaHBkRkoxYm5ScGJXVjhmQ0V3TzF3aWIySnFaV04wWENJaFBYUjVjR1Z2WmlCWFpXSkJjM05sYldKc2VTWW1TeWhjSW01dklHNWhkR2wyWlNCM1lYTnRJSE4xY0hCdmNuUWdaR1YwWldOMFpXUmNJaWs3ZG1GeUlHVXNUQ3h5WVN4TlBTRXhMRTRzYkN4aVlTeGpZU3hrWVN4bVlUdGNibVoxYm1OMGFXOXVJRzBvS1h0MllYSWdZVDFsTG1KMVptWmxjanQzTGtoRlFWQTRQV3c5Ym1WM0lFbHVkRGhCY25KaGVTaGhLVHQzTGtoRlFWQXhOajF1WlhjZ1NXNTBNVFpCY25KaGVTaGhLVHQzTGtoRlFWQXpNajFqWVQxdVpYY2dTVzUwTXpKQmNuSmhlU2hoS1R0M0xraEZRVkJWT0QxaVlUMXVaWGNnVldsdWREaEJjbkpoZVNoaEtUdDNMa2hGUVZCVk1UWTlibVYzSUZWcGJuUXhOa0Z5Y21GNUtHRXBPM2N1U0VWQlVGVXpNajFrWVQxdVpYY2dWV2x1ZERNeVFYSnlZWGtvWVNrN2R5NUlSVUZRUmpNeVBXNWxkeUJHYkc5aGRETXlRWEp5WVhrb1lTazdkeTVJUlVGUVJqWTBQV1poUFc1bGR5QkdiRzloZERZMFFYSnlZWGtvWVNsOWRtRnlJRTg5ZHk1SlRrbFVTVUZNWDAxRlRVOVNXWHg4TVRZM056Y3lNVFk3TlRJME1qZzRNRHc5VDN4OFN5aGNJa2xPU1ZSSlFVeGZUVVZOVDFKWklITm9iM1ZzWkNCaVpTQnNZWEpuWlhJZ2RHaGhiaUJUVkVGRFMxOVRTVnBGTENCM1lYTWdYQ0lyVHl0Y0lpRWdLRk5VUVVOTFgxTkpXa1U5TlRJME1qZzRNQ2xjSWlrN1hHNXBaaWhFS1dVOWR5NTNZWE50VFdWdGIzSjVPMlZzYzJVZ2FXWW9keTUzWVhOdFRXVnRiM0o1S1dVOWR5NTNZWE50VFdWdGIzSjVPMlZzYzJVZ2FXWW9aVDF1WlhjZ1YyVmlRWE56WlcxaWJIa3VUV1Z0YjNKNUtIdHBibWwwYVdGc09rOHZOalUxTXpZc2JXRjRhVzExYlRvMk5UVXpOaXh6YUdGeVpXUTZJVEI5S1N3aEtHVXVZblZtWm1WeUlHbHVjM1JoYm1ObGIyWWdVMmhoY21Wa1FYSnlZWGxDZFdabVpYSXBLWFJvY205M0lFa29YQ0p5WlhGMVpYTjBaV1FnWVNCemFHRnlaV1FnVjJWaVFYTnpaVzFpYkhrdVRXVnRiM0o1SUdKMWRDQjBhR1VnY21WMGRYSnVaV1FnWW5WbVptVnlJR2x6SUc1dmRDQmhJRk5vWVhKbFpFRnljbUY1UW5WbVptVnlMQ0JwYm1ScFkyRjBhVzVuSUhSb1lYUWdkMmhwYkdVZ2RHaGxJR0p5YjNkelpYSWdhR0Z6SUZOb1lYSmxaRUZ5Y21GNVFuVm1abVZ5SUdsMElHUnZaWE1nYm05MElHaGhkbVVnVjJWaVFYTnpaVzFpYkhrZ2RHaHlaV0ZrY3lCemRYQndiM0owSUMwZ2VXOTFJRzFoZVNCdVpXVmtJSFJ2SUhObGRDQmhJR1pzWVdkY0lpa3NReVltU1NoY0lpaHZiaUJ1YjJSbElIbHZkU0J0WVhrZ2JtVmxaRG9nTFMxbGVIQmxjbWx0Wlc1MFlXd3RkMkZ6YlMxMGFISmxZV1J6SUMwdFpYaHdaWEpwYldWdWRHRnNMWGRoYzIwdFluVnNheTF0WlcxdmNua2dZVzVrTDI5eUlISmxZMlZ1ZENCMlpYSnphVzl1S1Z3aUtTeGNia1Z5Y205eUtGd2lZbUZrSUcxbGJXOXllVndpS1R0dEtDazdUejFsTG1KMVptWmxjaTVpZVhSbFRHVnVaM1JvTzNaaGNpQlFMSE5oUFZ0ZExIUmhQVnRkTEhWaFBWdGRMSFpoUFRBN1puVnVZM1JwYjI0Z1VTZ3BlM0psZEhWeWJpQnViMFY0YVhSU2RXNTBhVzFsZkh3d1BIWmhmWFpoY2lCU1BUQXNkMkU5Ym5Wc2JDeFRQVzUxYkd3N1puVnVZM1JwYjI0Z2VHRW9LWHRTS3lzN2R5NXRiMjVwZEc5eVVuVnVSR1Z3Wlc1a1pXNWphV1Z6SmlaM0xtMXZibWwwYjNKU2RXNUVaWEJsYm1SbGJtTnBaWE1vVWlsOVpuVnVZM1JwYjI0Z2VXRW9LWHRTTFMwN2R5NXRiMjVwZEc5eVVuVnVSR1Z3Wlc1a1pXNWphV1Z6SmlaM0xtMXZibWwwYjNKU2RXNUVaWEJsYm1SbGJtTnBaWE1vVWlrN2FXWW9NRDA5VWlZbUtHNTFiR3doUFQxM1lTWW1LR05zWldGeVNXNTBaWEoyWVd3b2QyRXBMSGRoUFc1MWJHd3BMRk1wS1h0MllYSWdZVDFUTzFNOWJuVnNiRHRoS0NsOWZWeHVablZ1WTNScGIyNGdTeWhoS1h0cFppaDNMbTl1UVdKdmNuUXBkeTV2YmtGaWIzSjBLR0VwTzJFOVhDSkJZbTl5ZEdWa0tGd2lLMkVyWENJcFhDSTdTU2hoS1R0TlBTRXdPMDQ5TVR0aFBXNWxkeUJYWldKQmMzTmxiV0pzZVM1U2RXNTBhVzFsUlhKeWIzSW9ZU3RjSWk0Z1FuVnBiR1FnZDJsMGFDQXRjMEZUVTBWU1ZFbFBUbE1nWm05eUlHMXZjbVVnYVc1bWJ5NWNJaWs3ZUNoaEtUdDBhSEp2ZHlCaE8zMW1kVzVqZEdsdmJpQjZZU2hoS1h0eVpYUjFjbTRnWVM1emRHRnlkSE5YYVhSb0tGd2laR0YwWVRwaGNIQnNhV05oZEdsdmJpOXZZM1JsZEMxemRISmxZVzA3WW1GelpUWTBMRndpS1gxMllYSWdWRHRVUFZ3aWIzSjBMWGRoYzIwdGRHaHlaV0ZrWldRdWQyRnpiVndpTzNwaEtGUXBmSHdvVkQxc1lTaFVLU2s3Wm5WdVkzUnBiMjRnUVdFb1lTbDdhV1lvWVQwOVZDWW1TaWx5WlhSMWNtNGdibVYzSUZWcGJuUTRRWEp5WVhrb1NpazdhV1lvUnlseVpYUjFjbTRnUnloaEtUdDBhSEp2ZDF3aVltOTBhQ0JoYzNsdVl5QmhibVFnYzNsdVl5Qm1aWFJqYUdsdVp5QnZaaUIwYUdVZ2QyRnpiU0JtWVdsc1pXUmNJanQ5WEc1bWRXNWpkR2x2YmlCQ1lTaGhLWHRwWmlnaFNpWW1LR3RoZkh4QktTbDdhV1lvWENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ1ptVjBZMmdtSmlGaExuTjBZWEowYzFkcGRHZ29YQ0ptYVd4bE9pOHZYQ0lwS1hKbGRIVnliaUJtWlhSamFDaGhMSHRqY21Wa1pXNTBhV0ZzY3pwY0luTmhiV1V0YjNKcFoybHVYQ0o5S1M1MGFHVnVLR0k5UG50cFppZ2hZaTV2YXlsMGFISnZkMXdpWm1GcGJHVmtJSFJ2SUd4dllXUWdkMkZ6YlNCaWFXNWhjbmtnWm1sc1pTQmhkQ0FuWENJcllTdGNJaWRjSWp0eVpYUjFjbTRnWWk1aGNuSmhlVUoxWm1abGNpZ3BmU2t1WTJGMFkyZ29LQ2s5UGtGaEtHRXBLVHRwWmloR0tYSmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29ZaXhqS1QwK2UwWW9ZU3hrUFQ1aUtHNWxkeUJWYVc1ME9FRnljbUY1S0dRcEtTeGpLWDBwZlhKbGRIVnliaUJRY205dGFYTmxMbkpsYzI5c2RtVW9LUzUwYUdWdUtDZ3BQVDVCWVNoaEtTbDlablZ1WTNScGIyNGdRMkVvWVN4aUxHTXBlM0psZEhWeWJpQkNZU2hoS1M1MGFHVnVLR1E5UGxkbFlrRnpjMlZ0WW14NUxtbHVjM1JoYm5ScFlYUmxLR1FzWWlrcExuUm9aVzRvWkQwK1pDa3VkR2hsYmloakxHUTlQbnRKS0Z3aVptRnBiR1ZrSUhSdklHRnplVzVqYUhKdmJtOTFjMng1SUhCeVpYQmhjbVVnZDJGemJUb2dYQ0lyWkNrN1N5aGtLWDBwZlZ4dVpuVnVZM1JwYjI0Z1JHRW9ZU3hpS1h0MllYSWdZejFVTzNKbGRIVnliaUJLZkh4Y0ltWjFibU4wYVc5dVhDSWhQWFI1Y0dWdlppQlhaV0pCYzNObGJXSnNlUzVwYm5OMFlXNTBhV0YwWlZOMGNtVmhiV2x1WjN4OGVtRW9ZeWw4ZkdNdWMzUmhjblJ6VjJsMGFDaGNJbVpwYkdVNkx5OWNJaWw4ZkVOOGZGd2lablZ1WTNScGIyNWNJaUU5ZEhsd1pXOW1JR1psZEdOb1AwTmhLR01zWVN4aUtUcG1aWFJqYUNoakxIdGpjbVZrWlc1MGFXRnNjenBjSW5OaGJXVXRiM0pwWjJsdVhDSjlLUzUwYUdWdUtHUTlQbGRsWWtGemMyVnRZbXg1TG1sdWMzUmhiblJwWVhSbFUzUnlaV0Z0YVc1bktHUXNZU2t1ZEdobGJpaGlMR1oxYm1OMGFXOXVLR2NwZTBrb1hDSjNZWE50SUhOMGNtVmhiV2x1WnlCamIyMXdhV3hsSUdaaGFXeGxaRG9nWENJclp5azdTU2hjSW1aaGJHeHBibWNnWW1GamF5QjBieUJCY25KaGVVSjFabVpsY2lCcGJuTjBZVzUwYVdGMGFXOXVYQ0lwTzNKbGRIVnliaUJEWVNoakxHRXNZaWw5S1NsOWRtRnlJRlU3Wm5WdVkzUnBiMjRnUldFb1lTbDdkR2hwY3k1dVlXMWxQVndpUlhocGRGTjBZWFIxYzF3aU8zUm9hWE11YldWemMyRm5aVDFnVUhKdlozSmhiU0IwWlhKdGFXNWhkR1ZrSUhkcGRHZ2daWGhwZENna2UyRjlLV0E3ZEdocGN5NXpkR0YwZFhNOVlYMWNibVoxYm1OMGFXOXVJRVpoS0dFcGUyRXVkR1Z5YldsdVlYUmxLQ2s3WVM1dmJtMWxjM05oWjJVOUtDazlQbnQ5ZldaMWJtTjBhVzl1SUVkaEtHRXBleWhoUFZZdVRXRmJZVjBwZkh4TEtDazdWaTV0WWloaEtYMW1kVzVqZEdsdmJpQklZU2hoS1h0MllYSWdZajFXTG1kaUtDazdhV1lvSVdJcGNtVjBkWEp1SURZN1ZpNVFZUzV3ZFhOb0tHSXBPMVl1VFdGYllTNVBZVjA5WWp0aUxrOWhQV0V1VDJFN2RtRnlJR005ZTJOdFpEcGNJbkoxYmx3aUxITjBZWEowWDNKdmRYUnBibVU2WVM1dVlpeGhjbWM2WVM1bVlpeHdkR2h5WldGa1gzQjBjanBoTGs5aGZUdERKaVppTG5WdWNtVm1LQ2s3WWk1d2IzTjBUV1Z6YzJGblpTaGpMR0V1ZEdJcE8zSmxkSFZ5YmlBd2ZWeHVkbUZ5SUVsaFBWd2lkVzVrWldacGJtVmtYQ0loUFhSNWNHVnZaaUJVWlhoMFJHVmpiMlJsY2o5dVpYY2dWR1Y0ZEVSbFkyOWtaWElvWENKMWRHWTRYQ0lwT25admFXUWdNQ3hLWVQwb1lTeGlMR01wUFQ1N1lqNCtQajB3TzNaaGNpQmtQV0lyWXp0bWIzSW9ZejFpTzJGYlkxMG1KaUVvWXo0OVpDazdLU3NyWXp0cFppZ3hOanhqTFdJbUptRXVZblZtWm1WeUppWkpZU2x5WlhSMWNtNGdTV0V1WkdWamIyUmxLR0V1WW5WbVptVnlJR2x1YzNSaGJtTmxiMllnVTJoaGNtVmtRWEp5WVhsQ2RXWm1aWEkvWVM1emJHbGpaU2hpTEdNcE9tRXVjM1ZpWVhKeVlYa29ZaXhqS1NrN1ptOXlLR1E5WENKY0lqdGlQR003S1h0MllYSWdaejFoVzJJcksxMDdhV1lvWnlZeE1qZ3BlM1poY2lCb1BXRmJZaXNyWFNZMk16dHBaaWd4T1RJOVBTaG5Kakl5TkNrcFpDczlVM1J5YVc1bkxtWnliMjFEYUdGeVEyOWtaU2dvWnlZek1TazhQRFo4YUNrN1pXeHpaWHQyWVhJZ2F6MWhXMklySzEwbU5qTTdaejB5TWpROVBTaG5KakkwTUNrL0tHY21NVFVwUER3eE1ueG9QRHcyZkdzNktHY21OeWs4UERFNGZHZzhQREV5ZkdzOFBEWjhZVnRpS3l0ZEpqWXpPelkxTlRNMlBtYy9aQ3M5VTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlNobktUb29aeTA5TmpVMU16WXNaQ3M5VTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlNnMU5USTVObnhuUGo1Y2JqRXdMRFUyTXpJd2ZHY21NVEF5TXlrcGZYMWxiSE5sSUdRclBWTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9aeWw5Y21WMGRYSnVJR1I5TEV0aFBTaGhMR0lwUFQ0b1lUNCtQajB3S1Q5S1lTaHVLQ2tzWVN4aUtUcGNJbHdpTzJaMWJtTjBhVzl1SUV4aEtHRXBlMmxtS0VRcGNtVjBkWEp1SUZjb01Td3hMR0VwTzA0OVlUdHBaaWdoVVNncEtYdFdMbTlpS0NrN2FXWW9keTV2YmtWNGFYUXBkeTV2YmtWNGFYUW9ZU2s3VFQwaE1IMTZLR0VzYm1WM0lFVmhLR0VwS1gxY2JuWmhjaUJPWVQxaFBUNTdUajFoTzJsbUtFUXBkR2h5YjNjZ1RXRW9ZU2tzWENKMWJuZHBibVJjSWp0TVlTaGhLWDBzVmoxN1UyRTZXMTBzVUdFNlcxMHNKR0U2VzEwc1RXRTZlMzBzVjJFNlpuVnVZM1JwYjI0b0tYdEVQMVl1YVdJb0tUcFdMbWhpS0NsOUxHaGlPbVoxYm1OMGFXOXVLQ2w3YzJFdWRXNXphR2xtZENnb0tUMCtlM2hoS0NrN1ZpNXFZaWdvS1QwK2VXRW9LU2w5S1gwc2FXSTZablZ1WTNScGIyNG9LWHRXTG5KbFkyVnBkbVZQWW1wbFkzUlVjbUZ1YzJabGNqMVdMbXhpTzFZdWRHaHlaV0ZrU1c1cGRGUk1VejFXTGxwaE8xWXVjMlYwUlhocGRGTjBZWFIxY3oxV0xsbGhPMjV2UlhocGRGSjFiblJwYldVOUlURjlMRmxoT21aMWJtTjBhVzl1S0dFcGUwNDlZWDBzZVdJNlcxd2lKSFJsY20xcGJtRjBaVmR2Y210bGNsd2lYU3h2WWpwbWRXNWpkR2x2YmlncGUyWnZjaWgyWVhJZ1lTQnZaaUJXTGxCaEtVWmhLR0VwTzJadmNpaGhJRzltSUZZdVUyRXBSbUVvWVNrN1ZpNVRZVDFiWFR0V0xsQmhQVnRkTzFZdVRXRTlXMTE5TEcxaU9tWjFibU4wYVc5dUtHRXBlM1poY2lCaVBXRXVUMkU3WkdWc1pYUmxJRll1VFdGYllsMDdWaTVUWVM1d2RYTm9LR0VwTzFZdVVHRXVjM0JzYVdObEtGWXVVR0V1YVc1a1pYaFBaaWhoS1N3eEtUdGhMazloUFRBN1QyRW9ZaWw5TEd4aU9tWjFibU4wYVc5dUtDbDdmU3hjYmxwaE9tWjFibU4wYVc5dUtDbDdWaTRrWVM1bWIzSkZZV05vS0dFOVBtRW9LU2w5TEd0aU9tRTlQbTVsZHlCUWNtOXRhWE5sS0dJOVBudGhMbTl1YldWemMyRm5aVDFvUFQ1N2FEMW9MbVJoZEdFN2RtRnlJR3M5YUM1amJXUTdhV1lvYUM1MFlYSm5aWFJVYUhKbFlXUW1KbWd1ZEdGeVoyVjBWR2h5WldGa0lUMVFZU2dwS1h0MllYSWdjVDFXTGsxaFcyZ3VlR0pkTzNFL2NTNXdiM04wVFdWemMyRm5aU2hvTEdndWRISmhibk5tWlhKTWFYTjBLVHBKS0NkSmJuUmxjbTVoYkNCbGNuSnZjaUVnVjI5eWEyVnlJSE5sYm5RZ1lTQnRaWE56WVdkbElGd2lKeXRyS3lkY0lpQjBieUIwWVhKblpYUWdjSFJvY21WaFpDQW5LMmd1ZEdGeVoyVjBWR2h5WldGa0sxd2lMQ0JpZFhRZ2RHaGhkQ0IwYUhKbFlXUWdibThnYkc5dVoyVnlJR1Y0YVhOMGN5RmNJaWw5Wld4elpTQnBaaWhjSW1Ob1pXTnJUV0ZwYkdKdmVGd2lQVDA5YXlsUllTZ3BPMlZzYzJVZ2FXWW9YQ0p6Y0dGM2JsUm9jbVZoWkZ3aVBUMDlheWxJWVNob0tUdGxiSE5sSUdsbUtGd2lZMnhsWVc1MWNGUm9jbVZoWkZ3aVBUMDlheWxIWVNob0xuUm9jbVZoWkNrN1pXeHpaU0JwWmloY0ltdHBiR3hVYUhKbFlXUmNJajA5UFdzcGFEMW9MblJvY21WaFpDeHJQVll1VFdGYmFGMHNaR1ZzWlhSbElGWXVUV0ZiYUYwc1JtRW9heWtzVDJFb2FDa3NWaTVRWVM1emNHeHBZMlVvVmk1UVlTNXBibVJsZUU5bUtHc3BMRnh1TVNrc2F5NVBZVDB3TzJWc2MyVWdhV1lvWENKallXNWpaV3hVYUhKbFlXUmNJajA5UFdzcFZpNU5ZVnRvTG5Sb2NtVmhaRjB1Y0c5emRFMWxjM05oWjJVb2UyTnRaRHBjSW1OaGJtTmxiRndpZlNrN1pXeHpaU0JwWmloY0lteHZZV1JsWkZ3aVBUMDlheWxoTG14dllXUmxaRDBoTUN4aUtHRXBPMlZzYzJVZ2FXWW9YQ0poYkdWeWRGd2lQVDA5YXlsaGJHVnlkQ2hjSWxSb2NtVmhaQ0JjSWl0b0xuUm9jbVZoWkVsa0sxd2lPaUJjSWl0b0xuUmxlSFFwTzJWc2MyVWdhV1lvWENKelpYUnBiVzFsWkdsaGRHVmNJajA5UFdndWRHRnlaMlYwS1dFdWNHOXpkRTFsYzNOaFoyVW9hQ2s3Wld4elpTQnBaaWhjSW1OaGJHeElZVzVrYkdWeVhDSTlQVDFyS1hkYmFDNW9ZVzVrYkdWeVhTZ3VMaTVvTG1GeVozTXBPMlZzYzJVZ2F5WW1TU2hjSW5kdmNtdGxjaUJ6Wlc1MElHRnVJSFZ1YTI1dmQyNGdZMjl0YldGdVpDQmNJaXRyS1gwN1lTNXZibVZ5Y205eVBXZzlQbnRKS0Z3aWQyOXlhMlZ5SUhObGJuUWdZVzRnWlhKeWIzSWhJRndpSzJndVptbHNaVzVoYldVclhDSTZYQ0lyYUM1c2FXNWxibThyWENJNklGd2lLMmd1YldWemMyRm5aU2s3ZEdoeWIzY2dhRHQ5TzBNbUppaGhMbTl1S0Z3aWJXVnpjMkZuWlZ3aUxHWjFibU4wYVc5dUtHZ3BlMkV1YjI1dFpYTnpZV2RsS0h0a1lYUmhPbWg5S1gwcExHRXViMjRvWENKbGNuSnZjbHdpTEdaMWJtTjBhVzl1S0dncGUyRXViMjVsY25KdmNpaG9LWDBwS1R0Y2JuWmhjaUJqUFZ0ZExHUTlXMXdpYjI1RmVHbDBYQ0lzWENKdmJrRmliM0owWENJc1hDSndjbWx1ZEZ3aUxGd2ljSEpwYm5SRmNuSmNJbDBzWnp0bWIzSW9aeUJ2WmlCa0tYY3VhR0Z6VDNkdVVISnZjR1Z5ZEhrb1p5a21KbU11Y0hWemFDaG5LVHRoTG5CdmMzUk5aWE56WVdkbEtIdGpiV1E2WENKc2IyRmtYQ0lzYUdGdVpHeGxjbk02WXl4MWNteFBja0pzYjJJNmR5NXRZV2x1VTJOeWFYQjBWWEpzVDNKQ2JHOWlmSHhmYzJOeWFYQjBSR2x5TEhkaGMyMU5aVzF2Y25rNlpTeDNZWE50VFc5a2RXeGxPbkpoZlNsOUtTeHFZanBtZFc1amRHbHZiaWhoS1h0aEtDbDlMR1ZpT21aMWJtTjBhVzl1S0NsN2RtRnlJR0U5YkdFb1hDSnZjblF0ZDJGemJTMTBhSEpsWVdSbFpDNTNiM0pyWlhJdWFuTmNJaWs3WVQxdVpYY2dWMjl5YTJWeUtHRXBPMVl1VTJFdWNIVnphQ2hoS1gwc1oySTZablZ1WTNScGIyNG9LWHN3UFQxV0xsTmhMbXhsYm1kMGFDWW1LRll1WldJb0tTeFdMbXRpS0ZZdVUyRmJNRjBwS1R0eVpYUjFjbTRnVmk1VFlTNXdiM0FvS1gxOU8zY3VVRlJvY21WaFpEMVdPM1poY2lCU1lUMWhQVDU3Wm05eUtEc3dQR0V1YkdWdVozUm9PeWxoTG5Ob2FXWjBLQ2tvZHlsOU8xeHVkeTVsYzNSaFlteHBjMmhUZEdGamExTndZV05sUFdaMWJtTjBhVzl1S0NsN2RtRnlJR0U5VUdFb0tTeGlQWEFvS1Z0aEt6VXlQajR5UGo0K01GMDdZVDF3S0NsYllTczFOajQrTWo0K1BqQmRPMU5oS0dJc1lpMWhLVHRVWVNoaUtYMDdablZ1WTNScGIyNGdUV0VvWVNsN2FXWW9SQ2x5WlhSMWNtNGdWeWd5TERBc1lTazdUbUVvWVNsOWRtRnlJRmc5VzEwc1ZXRTlZVDArZTNaaGNpQmlQVmhiWVYwN1lueDhLR0UrUFZndWJHVnVaM1JvSmlZb1dDNXNaVzVuZEdnOVlTc3hLU3hZVzJGZFBXSTlVQzVuWlhRb1lTa3BPM0psZEhWeWJpQmlmVHQzTG1sdWRtOXJaVVZ1ZEhKNVVHOXBiblE5Wm5WdVkzUnBiMjRvWVN4aUtYdGhQVlZoS0dFcEtHSXBPMUVvS1Q5V0xsbGhLR0VwT2xaaEtHRXBmVHRjYm1aMWJtTjBhVzl1SUZkaEtHRXBlM1JvYVhNdVZtRTlZUzB5TkR0MGFHbHpMbU5pUFdaMWJtTjBhVzl1S0dJcGUzUW9LVnQwYUdsekxsWmhLelErUGpJK1BqNHdYVDFpZlR0MGFHbHpMbUppUFdaMWJtTjBhVzl1S0dJcGUzUW9LVnQwYUdsekxsWmhLemcrUGpJK1BqNHdYVDFpZlR0MGFHbHpMbGRoUFdaMWJtTjBhVzl1S0dJc1l5bDdkR2hwY3k1aFlpZ3BPM1JvYVhNdVkySW9ZaWs3ZEdocGN5NWlZaWhqS1gwN2RHaHBjeTVoWWoxbWRXNWpkR2x2YmlncGUzUW9LVnQwYUdsekxsWmhLekUyUGo0eVBqNCtNRjA5TUgxOWRtRnlJRmhoUFRBc1dXRTlNRHRtZFc1amRHbHZiaUJhWVNoaExHSXNZeXhrS1h0eVpYUjFjbTRnUkQ5WEtETXNNU3hoTEdJc1l5eGtLVG9rWVNoaExHSXNZeXhrS1gxY2JtWjFibU4wYVc5dUlDUmhLR0VzWWl4akxHUXBlMkUrUGo0OU1EdGlQajQrUFRBN1l6NCtQajB3TzJRK1BqNDlNRHRwWmloY0luVnVaR1ZtYVc1bFpGd2lQVDEwZVhCbGIyWWdVMmhoY21Wa1FYSnlZWGxDZFdabVpYSXBjbVYwZFhKdUlFa29YQ0pEZFhKeVpXNTBJR1Z1ZG1seWIyNXRaVzUwSUdSdlpYTWdibTkwSUhOMWNIQnZjblFnVTJoaGNtVmtRWEp5WVhsQ2RXWm1aWElzSUhCMGFISmxZV1J6SUdGeVpTQnViM1FnWVhaaGFXeGhZbXhsSVZ3aUtTdzJPM1poY2lCblBWdGRPMmxtS0VRbUpqQTlQVDFuTG14bGJtZDBhQ2x5WlhSMWNtNGdXbUVvWVN4aUxHTXNaQ2s3WVQxN2JtSTZZeXhQWVRwaExHWmlPbVFzZEdJNlozMDdjbVYwZFhKdUlFUS9LR0V1ZG1JOVhDSnpjR0YzYmxSb2NtVmhaRndpTEhCdmMzUk5aWE56WVdkbEtHRXNaeWtzTUNrNlNHRW9ZU2w5Wm5WdVkzUnBiMjRnWVdJb1lTeGlMR01wZTNKbGRIVnliaUJFUDFjb05Dd3hMR0VzWWl4aktUb3dmV1oxYm1OMGFXOXVJR0ppS0dFc1lpbDdhV1lvUkNseVpYUjFjbTRnVnlnMUxERXNZU3hpS1gxY2JuWmhjaUJqWWoxaFBUNTdabTl5S0haaGNpQmlQVEFzWXowd08yTThZUzVzWlc1bmRHZzdLeXRqS1h0MllYSWdaRDFoTG1Ob1lYSkRiMlJsUVhRb1l5azdNVEkzUGoxa1AySXJLem95TURRM1BqMWtQMklyUFRJNk5UVXlPVFk4UFdRbUpqVTNNelF6UGoxa1B5aGlLejAwTENzcll5azZZaXM5TTMxeVpYUjFjbTRnWW4wc1pHSTlLR0VzWWl4akxHUXBQVDU3WXo0K1BqMHdPMmxtS0NFb01EeGtLU2x5WlhSMWNtNGdNRHQyWVhJZ1p6MWpPMlE5WXl0a0xURTdabTl5S0haaGNpQm9QVEE3YUR4aExteGxibWQwYURzcksyZ3BlM1poY2lCclBXRXVZMmhoY2tOdlpHVkJkQ2hvS1R0cFppZzFOVEk1Tmp3OWF5WW1OVGN6TkRNK1BXc3BlM1poY2lCeFBXRXVZMmhoY2tOdlpHVkJkQ2dySzJncE8yczlOalUxTXpZcktDaHJKakV3TWpNcFBEd3hNQ2w4Y1NZeE1ESXpmV2xtS0RFeU56NDlheWw3YVdZb1l6NDlaQ2xpY21WaGF6dGlXMk1yS3o0K1BqQmRQV3Q5Wld4elpYdHBaaWd5TURRM1BqMXJLWHRwWmloakt6RStQV1FwWW5KbFlXczdZbHRqS3lzK1BqNHdYVDB4T1RKOGF6NCtObjFsYkhObGUybG1LRFkxTlRNMVBqMXJLWHRwWmloakt6SStQV1FwWW5KbFlXczdZbHRqS3lzK1BqNHdYVDB5TWpSOGF6NCtNVEo5Wld4elpYdHBaaWhqS3pNK1BXUXBZbkpsWVdzN1lsdGpLeXMrUGo0d1hUMHlOREI4YXo0K1hHNHhPRHRpVzJNckt6NCtQakJkUFRFeU9IeHJQajR4TWlZMk0zMWlXMk1yS3o0K1BqQmRQVEV5T0h4clBqNDJKall6ZldKYll5c3JQajQrTUYwOU1USTRmR3NtTmpOOWZXSmJZejQrUGpCZFBUQTdjbVYwZFhKdUlHTXRaMzBzWldJOUtHRXNZaXhqS1QwK1pHSW9ZU3h1S0Nrc1lpeGpLVHRtZFc1amRHbHZiaUJtWWloaExHSXBlMmxtS0VRcGNtVjBkWEp1SUZjb05pd3hMR0VzWWlsOVpuVnVZM1JwYjI0Z1oySW9ZU3hpTEdNcGUybG1LRVFwY21WMGRYSnVJRmNvTnl3eExHRXNZaXhqS1gxbWRXNWpkR2x2YmlCb1lpaGhMR0lzWXlsN2NtVjBkWEp1SUVRL1Z5ZzRMREVzWVN4aUxHTXBPakI5Wm5WdVkzUnBiMjRnYVdJb1lTeGlLWHRwWmloRUtYSmxkSFZ5YmlCWEtEa3NNU3hoTEdJcGZXWjFibU4wYVc5dUlHcGlLR0VzWWl4aktYdHBaaWhFS1hKbGRIVnliaUJYS0RFd0xERXNZU3hpTEdNcGZXWjFibU4wYVc5dUlHdGlLR0VzWWl4akxHUXBlMmxtS0VRcGNtVjBkWEp1SUZjb01URXNNU3hoTEdJc1l5eGtLWDFtZFc1amRHbHZiaUJzWWloaExHSXNZeXhrS1h0cFppaEVLWEpsZEhWeWJpQlhLREV5TERFc1lTeGlMR01zWkNsOVpuVnVZM1JwYjI0Z2JXSW9ZU3hpTEdNc1pDbDdhV1lvUkNseVpYUjFjbTRnVnlneE15d3hMR0VzWWl4akxHUXBmVnh1Wm5WdVkzUnBiMjRnYm1Jb1lTbDdhV1lvUkNseVpYUjFjbTRnVnlneE5Dd3hMR0VwZldaMWJtTjBhVzl1SUc5aUtHRXNZaWw3YVdZb1JDbHlaWFIxY200Z1Z5Z3hOU3d4TEdFc1lpbDlablZ1WTNScGIyNGdjR0lvWVN4aUxHTXBlMmxtS0VRcGNtVjBkWEp1SUZjb01UWXNNU3hoTEdJc1l5bDlkbUZ5SUhGaVBXRTlQbnRwWmlnaFRTbDBjbmw3YVdZb1lTZ3BMQ0ZSS0NrcGRISjVlMFEvVm1Fb1RpazZUbUVvVGlsOVkyRjBZMmdvWWlsN1lpQnBibk4wWVc1alpXOW1JRVZoZkh4Y0luVnVkMmx1WkZ3aVBUMWlmSHg2S0RFc1lpbDlmV05oZEdOb0tHSXBlMklnYVc1emRHRnVZMlZ2WmlCRllYeDhYQ0oxYm5kcGJtUmNJajA5WW54OGVpZ3hMR0lwZlgwN1puVnVZM1JwYjI0Z2NtSW9ZU2w3WVQ0K1BqMHdPMXdpWm5WdVkzUnBiMjVjSWowOVBYUjVjR1Z2WmlCQmRHOXRhV056TG5WaUppWW9RWFJ2YldsamN5NTFZaWh3S0Nrc1lUNCtNaXhoS1M1MllXeDFaUzUwYUdWdUtGRmhLU3hoS3oweE1qZ3NRWFJ2YldsamN5NXpkRzl5WlNod0tDa3NZVDQrTWl3eEtTbDlkeTVmWDJWdGMyTnlhWEIwWlc1ZmRHaHlaV0ZrWDIxaGFXeGliM2hmWVhkaGFYUTljbUk3Wm5WdVkzUnBiMjRnVVdFb0tYdDJZWElnWVQxUVlTZ3BPMkVtSmloeVlpaGhLU3h4WWlnb0tUMCtjMklvS1NrcGZYY3VZMmhsWTJ0TllXbHNZbTk0UFZGaE8xeHVkbUZ5SUZrOVlUMCtNRDA5UFdFbE5DWW1LREFoUFQxaEpURXdNSHg4TUQwOVBXRWxOREF3S1N4MFlqMWJNQ3d6TVN3Mk1DdzVNU3d4TWpFc01UVXlMREU0TWl3eU1UTXNNalEwTERJM05Dd3pNRFVzTXpNMVhTeDFZajFiTUN3ek1TdzFPU3c1TUN3eE1qQXNNVFV4TERFNE1Td3lNVElzTWpRekxESTNNeXd6TURRc016TTBYVHRtZFc1amRHbHZiaUIyWWloaExHSXNZeXhrTEdjc2FDeHJMSEVwZTNKbGRIVnliaUJFUDFjb01UY3NNU3hoTEdJc1l5eGtMR2NzYUN4ckxIRXBPaTAxTW4xbWRXNWpkR2x2YmlCM1lpaGhMR0lzWXl4a0xHY3NhQ3hyS1h0cFppaEVLWEpsZEhWeWJpQlhLREU0TERFc1lTeGlMR01zWkN4bkxHZ3NheWw5ZG1GeUlIbGlQV0U5UG50MllYSWdZajFqWWloaEtTc3hMR005ZUdJb1lpazdZeVltWldJb1lTeGpMR0lwTzNKbGRIVnliaUJqZlN4QllqMWhQVDU3ZG1GeUlHSTllbUlvS1R0aFBXRW9LVHRVWVNoaUtUdHlaWFIxY200Z1lYMDdYRzVtZFc1amRHbHZiaUJYS0dFc1lpbDdkbUZ5SUdNOVlYSm5kVzFsYm5SekxteGxibWQwYUMweUxHUTlZWEpuZFcxbGJuUnpPM0psZEhWeWJpQkJZaWdvS1QwK2UyWnZjaWgyWVhJZ1p6MUNZaWc0S21NcExHZzlaejQrTXl4clBUQTdhenhqTzJzckt5bDdkbUZ5SUhFOVpGc3lLMnRkTzJWaEtDbGJhQ3RyUGo0K01GMDljWDF5WlhSMWNtNGdRMklvWVN4akxHY3NZaWw5S1gxY2JuWmhjaUJFWWoxYlhTeEZZajE3ZlN4SFlqMG9LVDArZTJsbUtDRkdZaWw3ZG1GeUlHRTllMVZUUlZJNlhDSjNaV0pmZFhObGNsd2lMRXhQUjA1QlRVVTZYQ0ozWldKZmRYTmxjbHdpTEZCQlZFZzZYQ0l2WENJc1VGZEVPbHdpTDF3aUxFaFBUVVU2WENJdmFHOXRaUzkzWldKZmRYTmxjbHdpTEV4QlRrYzZLRndpYjJKcVpXTjBYQ0k5UFhSNWNHVnZaaUJ1WVhacFoyRjBiM0ltSm01aGRtbG5ZWFJ2Y2k1c1lXNW5kV0ZuWlhNbUptNWhkbWxuWVhSdmNpNXNZVzVuZFdGblpYTmJNRjE4ZkZ3aVExd2lLUzV5WlhCc1lXTmxLRndpTFZ3aUxGd2lYMXdpS1N0Y0lpNVZWRVl0T0Z3aUxGODZhbUY4ZkZ3aUxpOTBhR2x6TG5CeWIyZHlZVzFjSW4wc1lqdG1iM0lvWWlCcGJpQkZZaWwyYjJsa0lEQTlQVDFGWWx0aVhUOWtaV3hsZEdVZ1lWdGlYVHBoVzJKZFBVVmlXMkpkTzNaaGNpQmpQVnRkTzJadmNpaGlJR2x1SUdFcFl5NXdkWE5vS0dBa2UySjlQU1I3WVZ0aVhYMWdLVHRHWWoxamZYSmxkSFZ5YmlCR1luMHNSbUk3WEc1bWRXNWpkR2x2YmlCSVlpaGhMR0lwZTJsbUtFUXBjbVYwZFhKdUlGY29NVGtzTVN4aExHSXBPMkUrUGo0OU1EdGlQajQrUFRBN2RtRnlJR005TUR0SFlpZ3BMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9aQ3huS1h0MllYSWdhRDFpSzJNN1p6MTBLQ2xiWVNzMEttYytQakkrUGo0d1hUMW9PMlp2Y2lob1BUQTdhRHhrTG14bGJtZDBhRHNySzJncFlXRW9LVnRuS3lzK1BqQStQajR3WFQxa0xtTm9ZWEpEYjJSbFFYUW9hQ2s3WVdFb0tWdG5QajR3UGo0K01GMDlNRHRqS3oxa0xteGxibWQwYUNzeGZTazdjbVYwZFhKdUlEQjlablZ1WTNScGIyNGdTV0lvWVN4aUtYdHBaaWhFS1hKbGRIVnliaUJYS0RJd0xERXNZU3hpS1R0aFBqNCtQVEE3WWo0K1BqMHdPM1poY2lCalBVZGlLQ2s3ZENncFcyRStQakkrUGo0d1hUMWpMbXhsYm1kMGFEdDJZWElnWkQwd08yTXVabTl5UldGamFDaG1kVzVqZEdsdmJpaG5LWHRrS3oxbkxteGxibWQwYUNzeGZTazdkQ2dwVzJJK1BqSStQajR3WFQxa08zSmxkSFZ5YmlBd2ZXWjFibU4wYVc5dUlFcGlLR0VwZTNKbGRIVnliaUJFUDFjb01qRXNNU3hoS1RvMU1uMW1kVzVqZEdsdmJpQk9ZaWhoTEdJc1l5eGtLWHR5WlhSMWNtNGdSRDlYS0RJeUxERXNZU3hpTEdNc1pDazZOVEo5WEc1bWRXNWpkR2x2YmlCUFlpaGhMR0lzWXl4a0xHY3BlM0psZEhWeWJpQkVQMWNvTWpNc01TeGhMR0lzWXl4a0xHY3BPamN3ZlhaaGNpQlFZajFiYm5Wc2JDeGJYU3hiWFYwN1puVnVZM1JwYjI0Z1VXSW9ZU3hpTEdNc1pDbDdhV1lvUkNseVpYUjFjbTRnVnlneU5Dd3hMR0VzWWl4akxHUXBPMkkrUGo0OU1EdGpQajQrUFRBN1pENCtQajB3TzJadmNpaDJZWElnWnowd0xHZzlNRHRvUEdNN2FDc3JLWHQyWVhJZ2F6MTBLQ2xiWWo0K01qNCtQakJkTEhFOWRDZ3BXMklyTkQ0K01qNCtQakJkTzJJclBUZzdabTl5S0haaGNpQkNQVEE3UWp4eE8wSXJLeWw3ZG1GeUlIWTliaWdwVzJzclFqNCtQakJkTEhrOVVHSmJZVjA3TUQwOVBYWjhmREV3UFQwOWRqOG9LREU5UFQxaFAzRmhPa2twS0VwaEtIa3NNQ2twTEhrdWJHVnVaM1JvUFRBcE9ua3VjSFZ6YUNoMktYMW5LejF4ZlhRb0tWdGtQajR5UGo0K01GMDlaenR5WlhSMWNtNGdNSDEyWVhJZ1VtSTlXek14TERJNUxETXhMRE13TERNeExETXdMRE14TERNeExETXdMRE14TERNd0xETXhYU3hUWWoxYk16RXNNamdzTXpFc016QXNNekVzTXpBc016RXNNekVzTXpBc016RXNNekFzTXpGZE8yWjFibU4wYVc5dUlGUmlLR0VwZTNaaGNpQmlQVUZ5Y21GNUtHTmlLR0VwS3pFcE8yUmlLR0VzWWl3d0xHSXViR1Z1WjNSb0tUdHlaWFIxY200Z1luMWNiblpoY2lCVllqMG9ZU3hpS1QwK2UyRmhLQ2t1YzJWMEtHRXNZajQrUGpBcGZUdGNibVoxYm1OMGFXOXVJRlppS0dFc1lpeGpMR1FwZTJaMWJtTjBhVzl1SUdjb1ppeHlMSFVwZTJadmNpaG1QVndpYm5WdFltVnlYQ0k5UFhSNWNHVnZaaUJtUDJZdWRHOVRkSEpwYm1jb0tUcG1mSHhjSWx3aU8yWXViR1Z1WjNSb1BISTdLV1k5ZFZzd1hTdG1PM0psZEhWeWJpQm1mV1oxYm1OMGFXOXVJR2dvWml4eUtYdHlaWFIxY200Z1p5aG1MSElzWENJd1hDSXBmV1oxYm1OMGFXOXVJR3NvWml4eUtYdG1kVzVqZEdsdmJpQjFLRXRpS1h0eVpYUjFjbTRnTUQ1TFlqOHRNVG93UEV0aVB6RTZNSDEyWVhJZ1NEc3dQVDA5S0VnOWRTaG1MbWRsZEVaMWJHeFpaV0Z5S0NrdGNpNW5aWFJHZFd4c1dXVmhjaWdwS1NrbUpqQTlQVDBvU0QxMUtHWXVaMlYwVFc5dWRHZ29LUzF5TG1kbGRFMXZiblJvS0NrcEtTWW1LRWc5ZFNobUxtZGxkRVJoZEdVb0tTMXlMbWRsZEVSaGRHVW9LU2twTzNKbGRIVnliaUJJZldaMWJtTjBhVzl1SUhFb1ppbDdjM2RwZEdOb0tHWXVaMlYwUkdGNUtDa3BlMk5oYzJVZ01EcHlaWFIxY200Z2JtVjNJRVJoZEdVb1ppNW5aWFJHZFd4c1dXVmhjaWdwTFRFc01URXNNamtwTzJOaGMyVWdNVHB5WlhSMWNtNGdaanRqWVhObElESTZjbVYwZFhKdUlHNWxkeUJFWVhSbEtHWXVaMlYwUm5Wc2JGbGxZWElvS1N3d0xETXBPMk5oYzJVZ016cHlaWFIxY200Z2JtVjNJRVJoZEdVb1ppNW5aWFJHZFd4c1dXVmhjaWdwTEZ4dU1Dd3lLVHRqWVhObElEUTZjbVYwZFhKdUlHNWxkeUJFWVhSbEtHWXVaMlYwUm5Wc2JGbGxZWElvS1N3d0xERXBPMk5oYzJVZ05UcHlaWFIxY200Z2JtVjNJRVJoZEdVb1ppNW5aWFJHZFd4c1dXVmhjaWdwTFRFc01URXNNekVwTzJOaGMyVWdOanB5WlhSMWNtNGdibVYzSUVSaGRHVW9aaTVuWlhSR2RXeHNXV1ZoY2lncExURXNNVEVzTXpBcGZYMW1kVzVqZEdsdmJpQkNLR1lwZTNaaGNpQnlQV1l1VVdFN1ptOXlLR1k5Ym1WM0lFUmhkR1VvS0c1bGR5QkVZWFJsS0dZdVVtRXJNVGt3TUN3d0xERXBLUzVuWlhSVWFXMWxLQ2twT3pBOGNqc3BlM1poY2lCMVBXWXVaMlYwVFc5dWRHZ29LU3hJUFNoWktHWXVaMlYwUm5Wc2JGbGxZWElvS1NrL1VtSTZVMklwVzNWZE8ybG1LSEkrU0MxbUxtZGxkRVJoZEdVb0tTbHlMVDFJTFdZdVoyVjBSR0YwWlNncEt6RXNaaTV6WlhSRVlYUmxLREVwTERFeFBuVS9aaTV6WlhSTmIyNTBhQ2gxS3pFcE9paG1Mbk5sZEUxdmJuUm9LREFwTEdZdWMyVjBSblZzYkZsbFlYSW9aaTVuWlhSR2RXeHNXV1ZoY2lncEt6RXBLVHRsYkhObGUyWXVjMlYwUkdGMFpTaG1MbWRsZEVSaGRHVW9LU3R5S1R0aWNtVmhhMzE5ZFQxdVpYY2dSR0YwWlNobUxtZGxkRVoxYkd4WlpXRnlLQ2tyTVN3d0xEUXBPM0k5Y1NodVpYY2dSR0YwWlNobUxtZGxkRVoxYkd4WlpXRnlLQ2tzWEc0d0xEUXBLVHQxUFhFb2RTazdjbVYwZFhKdUlEQStQV3NvY2l4bUtUOHdQajFyS0hVc1ppay9aaTVuWlhSR2RXeHNXV1ZoY2lncEt6RTZaaTVuWlhSR2RXeHNXV1ZoY2lncE9tWXVaMlYwUm5Wc2JGbGxZWElvS1MweGZXRStQajQ5TUR0aVBqNCtQVEE3WXo0K1BqMHdPMlErUGo0OU1EdDJZWElnZGoxd0tDbGJaQ3MwTUQ0K01qNCtQakJkTzJROWUzSmlPbkFvS1Z0a1BqNHlQajQrTUYwc2NXSTZjQ2dwVzJRck5ENCtNajQrUGpCZExGUmhPbkFvS1Z0a0t6ZytQakkrUGo0d1hTeFlZVHB3S0NsYlpDc3hNajQrTWo0K1BqQmRMRlZoT25Bb0tWdGtLekUyUGo0eVBqNCtNRjBzVW1FNmNDZ3BXMlFyTWpBK1BqSStQajR3WFN4T1lUcHdLQ2xiWkNzeU5ENCtNajQrUGpCZExGRmhPbkFvS1Z0a0t6STRQajR5UGo0K01GMHNlbUk2Y0NncFcyUXJNekkrUGpJK1BqNHdYU3h3WWpwd0tDbGJaQ3N6Tmo0K01qNCtQakJkTEhOaU9uWS9TMkVvZGlrNlhDSmNJbjA3WXoxTFlTaGpLVHQyUFh0Y0lpVmpYQ0k2WENJbFlTQWxZaUFsWkNBbFNEb2xUVG9sVXlBbFdWd2lMRndpSlVSY0lqcGNJaVZ0THlWa0x5VjVYQ0lzWENJbFJsd2lPbHdpSlZrdEpXMHRKV1JjSWl4Y0lpVm9YQ0k2WENJbFlsd2lMRndpSlhKY0lqcGNJaVZKT2lWTk9pVlRJQ1Z3WENJc1hDSWxVbHdpT2x3aUpVZzZKVTFjSWl4Y0lpVlVYQ0k2WENJbFNEb2xUVG9sVTF3aUxGd2lKWGhjSWpwY0lpVnRMeVZrTHlWNVhDSXNYRzVjSWlWWVhDSTZYQ0lsU0RvbFRUb2xVMXdpTEZ3aUpVVmpYQ0k2WENJbFkxd2lMRndpSlVWRFhDSTZYQ0lsUTF3aUxGd2lKVVY0WENJNlhDSWxiUzhsWkM4bGVWd2lMRndpSlVWWVhDSTZYQ0lsU0RvbFRUb2xVMXdpTEZ3aUpVVjVYQ0k2WENJbGVWd2lMRndpSlVWWlhDSTZYQ0lsV1Z3aUxGd2lKVTlrWENJNlhDSWxaRndpTEZ3aUpVOWxYQ0k2WENJbFpWd2lMRndpSlU5SVhDSTZYQ0lsU0Z3aUxGd2lKVTlKWENJNlhDSWxTVndpTEZ3aUpVOXRYQ0k2WENJbGJWd2lMRndpSlU5TlhDSTZYQ0lsVFZ3aUxGd2lKVTlUWENJNlhDSWxVMXdpTEZ3aUpVOTFYQ0k2WENJbGRWd2lMRndpSlU5VlhDSTZYQ0lsVlZ3aUxGd2lKVTlXWENJNlhDSWxWbHdpTEZ3aUpVOTNYQ0k2WENJbGQxd2lMRndpSlU5WFhDSTZYQ0lsVjF3aUxGd2lKVTk1WENJNlhDSWxlVndpZlR0bWIzSW9kbUZ5SUhrZ2FXNGdkaWxqUFdNdWNtVndiR0ZqWlNodVpYY2dVbVZuUlhod0tIa3NYQ0puWENJcExIWmJlVjBwTzNaaGNpQk1ZajFjSWxOMWJtUmhlU0JOYjI1a1lYa2dWSFZsYzJSaGVTQlhaV1J1WlhOa1lYa2dWR2gxY25Oa1lYa2dSbkpwWkdGNUlGTmhkSFZ5WkdGNVhDSXVjM0JzYVhRb1hDSWdYQ0lwTEUxaVBWd2lTbUZ1ZFdGeWVTQkdaV0p5ZFdGeWVTQk5ZWEpqYUNCQmNISnBiQ0JOWVhrZ1NuVnVaU0JLZFd4NUlFRjFaM1Z6ZENCVFpYQjBaVzFpWlhJZ1QyTjBiMkpsY2lCT2IzWmxiV0psY2lCRVpXTmxiV0psY2x3aUxuTndiR2wwS0Z3aUlGd2lLVHQyUFh0Y0lpVmhYQ0k2WmowK1RHSmJaaTVPWVYwdWMzVmljM1J5YVc1bktEQXNNeWtzWEc1Y0lpVkJYQ0k2WmowK1RHSmJaaTVPWVYwc1hDSWxZbHdpT21ZOVBrMWlXMll1VldGZExuTjFZbk4wY21sdVp5Z3dMRE1wTEZ3aUpVSmNJanBtUFQ1TllsdG1MbFZoWFN4Y0lpVkRYQ0k2WmowK2FDZ29aaTVTWVNzeE9UQXdLUzh4TURCOE1Dd3lLU3hjSWlWa1hDSTZaajArYUNobUxsaGhMRElwTEZ3aUpXVmNJanBtUFQ1bktHWXVXR0VzTWl4Y0lpQmNJaWtzWENJbFoxd2lPbVk5UGtJb1ppa3VkRzlUZEhKcGJtY29LUzV6ZFdKemRISnBibWNvTWlrc1hDSWxSMXdpT21ZOVBrSW9aaWtzWENJbFNGd2lPbVk5UG1nb1ppNVVZU3d5S1N4Y0lpVkpYQ0k2WmowK2UyWTlaaTVVWVRzd1BUMW1QMlk5TVRJNk1USThaaVltS0dZdFBURXlLVHR5WlhSMWNtNGdhQ2htTERJcGZTeGNJaVZxWENJNlpqMCtlMlp2Y2loMllYSWdjajB3TEhVOU1EdDFQRDFtTGxWaExURTdjaXM5S0Zrb1ppNVNZU3N4T1RBd0tUOVNZanBUWWlsYmRTc3JYU2s3Y21WMGRYSnVJR2dvWmk1WVlTdHlMRE1wZlN4Y0lpVnRYQ0k2WmowK2FDaG1MbFZoS3pFc01pa3NYQ0lsVFZ3aU9tWTlQbWdvWmk1eFlpd3lLU3hjSWlWdVhDSTZLQ2s5UGx3aVhGeHVYQ0lzWENJbGNGd2lPbVk5UGpBOFBXWXVWR0VtSmpFeVBtWXVWR0UvWENKQlRWd2lPbHdpVUUxY0lpeGNJaVZUWENJNlpqMCthQ2htTG5KaUxESXBMRndpSlhSY0lqb29LVDArWENKY1hIUmNJaXhjSWlWMVhDSTZaajArWmk1T1lYeDhOeXhjSWlWVlhDSTZaajArYUNoTllYUm9MbVpzYjI5eUtDaG1MbEZoSzF4dU55MW1MazVoS1M4M0tTd3lLU3hjSWlWV1hDSTZaajArZTNaaGNpQnlQVTFoZEdndVpteHZiM0lvS0dZdVVXRXJOeTBvWmk1T1lTczJLU1UzS1M4M0tUc3lQajBvWmk1T1lTc3pOekV0Wmk1UllTMHlLU1UzSmlaeUt5czdhV1lvY2lrMU16MDljaVltS0hVOUtHWXVUbUVyTXpjeExXWXVVV0VwSlRjc05EMDlkWHg4TXowOWRTWW1XU2htTGxKaEtYeDhLSEk5TVNrcE8yVnNjMlY3Y2owMU1qdDJZWElnZFQwb1ppNU9ZU3MzTFdZdVVXRXRNU2tsTnpzb05EMDlkWHg4TlQwOWRTWW1XU2htTGxKaEpUUXdNQzB4S1NrbUpuSXJLMzF5WlhSMWNtNGdhQ2h5TERJcGZTeGNJaVYzWENJNlpqMCtaaTVPWVN4Y0lpVlhYQ0k2WmowK2FDaE5ZWFJvTG1ac2IyOXlLQ2htTGxGaEt6Y3RLR1l1VG1Fck5pa2xOeWt2Tnlrc01pa3NYQ0lsZVZ3aU9tWTlQaWhtTGxKaEt6RTVNREFwTG5SdlUzUnlhVzVuS0NrdWMzVmljM1J5YVc1bktESXBMRndpSlZsY0lqcG1QVDVtTGxKaEt6RTVNREFzWENJbGVsd2lPbVk5UG50bVBXWXVjR0k3ZG1GeUlISTlNRHc5Wmp0bVBVMWhkR2d1WVdKektHWXBMell3TzNKbGRIVnliaWh5UDF3aUsxd2lPbHdpTFZ3aUtTdFRkSEpwYm1jb1hDSXdNREF3WENJcktHWXZOakFxTVRBd0syWWxOakFwS1M1emJHbGpaU2d0TkNsOUxGd2lKVnBjSWpwbVBUNW1Mbk5pTEZ3aUpTVmNJam9vS1QwK1hDSWxYQ0o5TzJNOVl5NXlaWEJzWVdObEtDOGxKUzluTEZ4dVhDSmNYSGd3TUZ4Y2VEQXdYQ0lwTzJadmNpaDVJR2x1SUhZcFl5NXBibU5zZFdSbGN5aDVLU1ltS0dNOVl5NXlaWEJzWVdObEtHNWxkeUJTWldkRmVIQW9lU3hjSW1kY0lpa3NkbHQ1WFNoa0tTa3BPMk05WXk1eVpYQnNZV05sS0M5Y1hEQmNYREF2Wnl4Y0lpVmNJaWs3ZVQxVVlpaGpLVHRwWmloNUxteGxibWQwYUQ1aUtYSmxkSFZ5YmlBd08xVmlLSGtzWVNrN2NtVjBkWEp1SUhrdWJHVnVaM1JvTFRGOWRtRnlJRm85ZG05cFpDQXdMRmRpUFZ0ZE8xeHVablZ1WTNScGIyNGdXR0lvWVN4aUtYdHBaaWdoV2lsN1dqMXVaWGNnVjJWaGEwMWhjRHQyWVhJZ1l6MVFMbXhsYm1kMGFEdHBaaWhhS1dadmNpaDJZWElnWkQwd08yUThNQ3RqTzJRckt5bDdkbUZ5SUdjOVZXRW9aQ2s3WnlZbVdpNXpaWFFvWnl4a0tYMTlhV1lvWXoxYUxtZGxkQ2hoS1h4OE1DbHlaWFIxY200Z1l6dHBaaWhYWWk1c1pXNW5kR2dwWXoxWFlpNXdiM0FvS1R0bGJITmxlM1J5ZVh0UUxtZHliM2NvTVNsOVkyRjBZMmdvY1NsN2FXWW9JU2h4SUdsdWMzUmhibU5sYjJZZ1VtRnVaMlZGY25KdmNpa3BkR2h5YjNjZ2NUdDBhSEp2ZDF3aVZXNWhZbXhsSUhSdklHZHliM2NnZDJGemJTQjBZV0pzWlM0Z1UyVjBJRUZNVEU5WFgxUkJRa3hGWDBkU1QxZFVTQzVjSWp0OVl6MVFMbXhsYm1kMGFDMHhmWFJ5ZVh0a1BXTXNVQzV6WlhRb1pDeGhLU3hZVzJSZFBWQXVaMlYwS0dRcGZXTmhkR05vS0hFcGUybG1LQ0VvY1NCcGJuTjBZVzVqWlc5bUlGUjVjR1ZGY25KdmNpa3BkR2h5YjNjZ2NUdHBaaWhjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCWFpXSkJjM05sYldKc2VTNUdkVzVqZEdsdmJpbDdaRDFYWldKQmMzTmxiV0pzZVM1R2RXNWpkR2x2Ymp0blBYdHBPbHdpYVRNeVhDSXNhanBjSW1rMk5Gd2lMR1k2WENKbU16SmNJaXhrT2x3aVpqWTBYQ0lzY0RwY0lta3pNbHdpZlR0bWIzSW9kbUZ5SUdnOWUzQmhjbUZ0WlhSbGNuTTZXMTBzWEc1eVpYTjFiSFJ6T2x3aWRsd2lQVDFpV3pCZFAxdGRPbHRuVzJKYk1GMWRYWDBzYXoweE8yczhZaTVzWlc1bmRHZzdLeXRyS1dndWNHRnlZVzFsZEdWeWN5NXdkWE5vS0dkYllsdHJYVjBwTzJJOWJtVjNJR1FvYUN4aEtYMWxiSE5sZTJROVd6RmRPMmM5WWk1emJHbGpaU2d3TERFcE8ySTlZaTV6YkdsalpTZ3hLVHRvUFh0cE9qRXlOeXh3T2pFeU55eHFPakV5Tml4bU9qRXlOU3hrT2pFeU5IMDdaQzV3ZFhOb0tEazJLVHRyUFdJdWJHVnVaM1JvT3pFeU9ENXJQMlF1Y0hWemFDaHJLVHBrTG5CMWMyZ29heVV4TWpoOE1USTRMR3MrUGpjcE8yWnZjaWhyUFRBN2F6eGlMbXhsYm1kMGFEc3JLMnNwWkM1d2RYTm9LR2hiWWx0clhWMHBPMXdpZGx3aVBUMW5QMlF1Y0hWemFDZ3dLVHBrTG5CMWMyZ29NU3hvVzJkZEtUdGlQVnN3TERrM0xERXhOU3d4TURrc01Td3dMREFzTUN3eFhUdG5QV1F1YkdWdVozUm9PekV5T0Q1blAySXVjSFZ6YUNobktUcGlMbkIxYzJnb1p5VXhNamg4TVRJNExHYytQamNwTzJJdWNIVnphQzVoY0hCc2VTaGlMR1FwTzJJdWNIVnphQ2d5TERjc01Td3hMREV3TVN3eExERXdNaXd3TERBc055dzFMREVzTVN3eE1ESXNNQ3d3S1R0aVBXNWxkeUJYWldKQmMzTmxiV0pzZVM1TmIyUjFiR1VvYm1WM0lGVnBiblE0UVhKeVlYa29ZaWtwTzJJOUtHNWxkeUJYWldKQmMzTmxiV0pzZVM1SmJuTjBZVzVqWlNoaUxGeHVlMlU2ZTJZNllYMTlLU2t1Wlhod2IzSjBjeTVtZldROVl6dFFMbk5sZENoa0xHSXBPMWhiWkYwOVVDNW5aWFFvWkNsOVdpNXpaWFFvWVN4aktUdHlaWFIxY200Z1kzMVdMbGRoS0NrN1hHNTJZWElnV1dJOVcyNTFiR3dzVEdFc1RXRXNXbUVzWVdJc1ltSXNabUlzWjJJc2FHSXNhV0lzYW1Jc2EySXNiR0lzYldJc2JtSXNiMklzY0dJc2RtSXNkMklzU0dJc1NXSXNTbUlzVG1Jc1QySXNVV0pkTEdGalBYdGlPbVoxYm1OMGFXOXVLR0VzWWl4aktYdGhQajQrUFRBN0tHNWxkeUJYWVNoaEtTa3VWMkVvWWo0K1BqQXNZejQrUGpBcE8xaGhQV0U3V1dFckt6dDBhSEp2ZHlCWVlUdDlMRTQ2Wm5WdVkzUnBiMjRvWVNsN1dtSW9ZVDQrUGpBc0lVRXNNU3doYTJFc01UTXhNRGN5TENFeEtUdFdMbHBoS0NsOUxHczZablZ1WTNScGIyNG9ZU2w3WVQ0K1BqMHdPMFEvY0c5emRFMWxjM05oWjJVb2UyTnRaRHBjSW1Oc1pXRnVkWEJVYUhKbFlXUmNJaXgwYUhKbFlXUTZZWDBwT2tkaEtHRXBmU3hKT2lSaExHZzZZV0lzVkRwaVlpeEVPbVppTEVZNloySXNWVHBvWWl4U09tbGlMRW82YW1Jc1VUcHJZaXh2T214aUxFVTZiV0lzUWpwdVlpeFRPbTlpTEVNNmNHSXNjVG9vS1QwK0lUQXNlanBtZFc1amRHbHZiaWhoTEdJcGUyRStQajQ5TUR0aFBUMWlQajQrTUQ5elpYUlVhVzFsYjNWMEtDZ3BQVDVSWVNncEtUcEVQM0J2YzNSTlpYTnpZV2RsS0h0MFlYSm5aWFJVYUhKbFlXUTZZU3hqYldRNlhDSmphR1ZqYTAxaGFXeGliM2hjSW4wcE9paGhQVll1VFdGYllWMHBKaVpoTG5CdmMzUk5aWE56WVdkbEtIdGpiV1E2WENKamFHVmphMDFoYVd4aWIzaGNJbjBwZlN4Y2JrdzZablZ1WTNScGIyNG9LWHR5WlhSMWNtNHRNWDBzVFRweVlpeHdPbVoxYm1OMGFXOXVLR0VwZTBNbUpsWXVUV0ZiWVQ0K1BqQmRMbkpsWmlncGZTeDBPbVoxYm1OMGFXOXVLR0VzWWl4aktYdGhQV0lyTWpBNU56RTFNajQrUGpBOE5ERTVORE13TlMwaElXRS9LR0UrUGo0d0tTczBNamswT1RZM01qazJLbUk2VG1GT08yTStQajQ5TUR0aFBXNWxkeUJFWVhSbEtERkZNeXBoS1R0d0tDbGJZejQrTWo0K1BqQmRQV0V1WjJWMFZWUkRVMlZqYjI1a2N5Z3BPM0FvS1Z0akt6UStQakkrUGo0d1hUMWhMbWRsZEZWVVEwMXBiblYwWlhNb0tUdHdLQ2xiWXlzNFBqNHlQajQrTUYwOVlTNW5aWFJWVkVOSWIzVnljeWdwTzNBb0tWdGpLekV5UGo0eVBqNCtNRjA5WVM1blpYUlZWRU5FWVhSbEtDazdjQ2dwVzJNck1UWStQakkrUGo0d1hUMWhMbWRsZEZWVVEwMXZiblJvS0NrN2NDZ3BXMk1yTWpBK1BqSStQajR3WFQxaExtZGxkRlZVUTBaMWJHeFpaV0Z5S0NrdE1Ua3dNRHR3S0NsYll5c3lORDQrTWo0K1BqQmRQV0V1WjJWMFZWUkRSR0Y1S0NrN1lUMG9ZUzVuWlhSVWFXMWxLQ2t0UkdGMFpTNVZWRU1vWVM1blpYUlZWRU5HZFd4c1dXVmhjaWdwTERBc01Td3dMREFzTUN3d0tTa3ZPRFkwUlRWOE1EdHdLQ2xiWXlzeU9ENCtNajQrUGpCZFBXRjlMSFU2Wm5WdVkzUnBiMjRvWVN4aUxHTXBlMkU5WWl0Y2JqSXdPVGN4TlRJK1BqNHdQRFF4T1RRek1EVXRJU0ZoUHloaFBqNCtNQ2tyTkRJNU5EazJOekk1TmlwaU9rNWhUanRqUGo0K1BUQTdZVDF1WlhjZ1JHRjBaU2d4UlRNcVlTazdjQ2dwVzJNK1BqSStQajR3WFQxaExtZGxkRk5sWTI5dVpITW9LVHR3S0NsYll5czBQajR5UGo0K01GMDlZUzVuWlhSTmFXNTFkR1Z6S0NrN2NDZ3BXMk1yT0Q0K01qNCtQakJkUFdFdVoyVjBTRzkxY25Nb0tUdHdLQ2xiWXlzeE1qNCtNajQrUGpCZFBXRXVaMlYwUkdGMFpTZ3BPM0FvS1Z0akt6RTJQajR5UGo0K01GMDlZUzVuWlhSTmIyNTBhQ2dwTzNBb0tWdGpLekl3UGo0eVBqNCtNRjA5WVM1blpYUkdkV3hzV1dWaGNpZ3BMVEU1TURBN2NDZ3BXMk1yTWpRK1BqSStQajR3WFQxaExtZGxkRVJoZVNncE8ySTlLRmtvWVM1blpYUkdkV3hzV1dWaGNpZ3BLVDkwWWpwMVlpbGJZUzVuWlhSTmIyNTBhQ2dwWFN0aExtZGxkRVJoZEdVb0tTMHhmREE3Y0NncFcyTXJNamcrUGpJK1BqNHdYVDFpTzNBb0tWdGpLek0yUGo0eVBqNCtNRjA5TFNnMk1DcGhMbWRsZEZScGJXVjZiMjVsVDJabWMyVjBLQ2twTzJJOUtHNWxkeUJFWVhSbEtHRXVaMlYwUm5Wc2JGbGxZWElvS1N3MkxERXBLUzVuWlhSVWFXMWxlbTl1WlU5bVpuTmxkQ2dwTzNaaGNpQmtQU2h1WlhjZ1JHRjBaU2hoTG1kbGRFWjFiR3haWldGeUtDa3NNQ3d4S1NrdVoyVjBWR2x0WlhwdmJtVlBabVp6WlhRb0tUdGNibUU5S0dJaFBXUW1KbUV1WjJWMFZHbHRaWHB2Ym1WUFptWnpaWFFvS1QwOVRXRjBhQzV0YVc0b1pDeGlLU2w4TUR0d0tDbGJZeXN6TWo0K01qNCtQakJkUFdGOUxIWTZablZ1WTNScGIyNG9ZU2w3WVQ0K1BqMHdPM1poY2lCaVBXNWxkeUJFWVhSbEtIQW9LVnRoS3pJd1BqNHlQajQrTUYwck1Ua3dNQ3h3S0NsYllTc3hOajQrTWo0K1BqQmRMSEFvS1Z0aEt6RXlQajR5UGo0K01GMHNjQ2dwVzJFck9ENCtNajQrUGpCZExIQW9LVnRoS3pRK1BqSStQajR3WFN4d0tDbGJZVDQrTWo0K1BqQmRMREFwTEdNOWNDZ3BXMkVyTXpJK1BqSStQajR3WFN4a1BXSXVaMlYwVkdsdFpYcHZibVZQWm1aelpYUW9LU3huUFNodVpYY2dSR0YwWlNoaUxtZGxkRVoxYkd4WlpXRnlLQ2tzTml3eEtTa3VaMlYwVkdsdFpYcHZibVZQWm1aelpYUW9LU3hvUFNodVpYY2dSR0YwWlNoaUxtZGxkRVoxYkd4WlpXRnlLQ2tzTUN3eEtTa3VaMlYwVkdsdFpYcHZibVZQWm1aelpYUW9LU3hyUFUxaGRHZ3ViV2x1S0dnc1p5azdNRDVqUDNBb0tWdGhLek15UGo0eVBqNCtNRjA5VG5WdFltVnlLR2NoUFdnbUptczlQV1FwT2pBOFl5RTlLR3M5UFdRcEppWW9aejFOWVhSb0xtMWhlQ2hvTEdjcExHSXVjMlYwVkdsdFpTaGlMbWRsZEZScGJXVW9LU3MyUlRRcUtDZ3dQR00vYXpwbktTMWtLU2twTzNBb0tWdGhLekkwUGo0eVBqNCtYRzR3WFQxaUxtZGxkRVJoZVNncE8yTTlLRmtvWWk1blpYUkdkV3hzV1dWaGNpZ3BLVDkwWWpwMVlpbGJZaTVuWlhSTmIyNTBhQ2dwWFN0aUxtZGxkRVJoZEdVb0tTMHhmREE3Y0NncFcyRXJNamcrUGpJK1BqNHdYVDFqTzNBb0tWdGhQajR5UGo0K01GMDlZaTVuWlhSVFpXTnZibVJ6S0NrN2NDZ3BXMkVyTkQ0K01qNCtQakJkUFdJdVoyVjBUV2x1ZFhSbGN5Z3BPM0FvS1Z0aEt6ZytQakkrUGo0d1hUMWlMbWRsZEVodmRYSnpLQ2s3Y0NncFcyRXJNVEkrUGpJK1BqNHdYVDFpTG1kbGRFUmhkR1VvS1R0d0tDbGJZU3N4Tmo0K01qNCtQakJkUFdJdVoyVjBUVzl1ZEdnb0tUdHdLQ2xiWVNzeU1ENCtNajQrUGpCZFBXSXVaMlYwV1dWaGNpZ3BPMkU5WWk1blpYUlVhVzFsS0Nrdk1VVXpPM0psZEhWeWJpQWtZaWdvVlQxaExERThQU3ROWVhSb0xtRmljeWhWS1Q4d1BGVS9LMDFoZEdndVpteHZiM0lvVlM4ME1qazBPVFkzTWprMktUNCtQakE2Zm40clRXRjBhQzVqWldsc0tDaFZMU3NvZm41VlBqNCtNQ2twTHpReU9UUTVOamN5T1RZcFBqNCtNRG93S1Nrc1lUNCtQakI5TEhJNmRtSXNjenAzWWl4NU9tWjFibU4wYVc5dUtHRXNZaXhqS1h0bWRXNWpkR2x2YmlCa0tIWXBlM0psZEhWeWJpaDJQWFl1ZEc5VWFXMWxVM1J5YVc1bktDa3ViV0YwWTJnb0wxeGNLQ2hiUVMxYVlTMTZJRjByS1Z4Y0tTUXZLU2svWEc1Mld6RmRPbHdpUjAxVVhDSjlZVDQrUGowd08ySStQajQ5TUR0alBqNCtQVEE3ZG1GeUlHYzlLRzVsZHlCRVlYUmxLUzVuWlhSR2RXeHNXV1ZoY2lncExHZzlibVYzSUVSaGRHVW9aeXd3TERFcExHczlibVYzSUVSaGRHVW9aeXcyTERFcE8yYzlhQzVuWlhSVWFXMWxlbTl1WlU5bVpuTmxkQ2dwTzNaaGNpQnhQV3N1WjJWMFZHbHRaWHB2Ym1WUFptWnpaWFFvS1N4Q1BVMWhkR2d1YldGNEtHY3NjU2s3ZENncFcyRStQakkrUGo0d1hUMDJNQ3BDTzNBb0tWdGlQajR5UGo0K01GMDlUblZ0WW1WeUtHY2hQWEVwTzJFOVpDaG9LVHRpUFdRb2F5azdZVDE1WWloaEtUdGlQWGxpS0dJcE8zRThaejhvZENncFcyTStQakkrUGo0d1hUMWhMSFFvS1Z0akt6UStQakkrUGo0d1hUMWlLVG9vZENncFcyTStQakkrUGo0d1hUMWlMSFFvS1Z0akt6UStQakkrUGo0d1hUMWhLWDBzWXpvb0tUMCtlMHNvWENKY0lpbDlMR3c2Wm5WdVkzUnBiMjRvS1h0OUxHazZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdSR0YwWlM1dWIzY29LWDBzVmpvb0tUMCtlM1poS3oweE8zUm9jbTkzWENKMWJuZHBibVJjSWp0OUxFRTZablZ1WTNScGIyNG9LWHR5WlhSMWNtNGdOREk1TkRrd01UYzJNSDBzWlRvb0tUMCtjR1Z5Wm05eWJXRnVZMlV1ZEdsdFpVOXlhV2RwYml0d1pYSm1iM0p0WVc1alpTNXViM2NvS1N4bU9tWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlFTS9YRzV5WlhGMWFYSmxLRndpYjNOY0lpa3VZM0IxY3lncExteGxibWQwYURwdVlYWnBaMkYwYjNJdWFHRnlaSGRoY21WRGIyNWpkWEp5Wlc1amVYMHNTenBtZFc1amRHbHZiaWhoTEdJc1l5eGtLWHRXTG5kaVBXSStQajR3TzBSaUxteGxibWQwYUQxak8ySTlaRDQrUGpBK1BqTTdabTl5S0dROU1EdGtQR003WkNzcktVUmlXMlJkUFdWaEtDbGJZaXRrUGo0K01GMDdjbVYwZFhKdUlGbGlXMkZkTG1Gd2NHeDVLRzUxYkd3c1JHSXBmU3g0T21aMWJtTjBhVzl1S0dFcGUyRStQajQ5TUR0MllYSWdZajF1S0NrdWJHVnVaM1JvTzJsbUtHRThQV0o4ZkRReU9UUTVNREUzTmpBOFlTbHlaWFIxY200aE1UdG1iM0lvZG1GeUlHTTlNVHMwUGoxak8yTXFQVElwZTNaaGNpQmtQV0lxS0RFckxqSXZZeWs3WkQxTllYUm9MbTFwYmloa0xHRXJNVEF3TmpZek1qazJLVHQyWVhJZ1p6MU5ZWFJvTzJROVRXRjBhQzV0WVhnb1lTeGtLVHRoT250blBXY3ViV2x1TG1OaGJHd29aeXcwTWprME9UQXhOell3TEdRcktEWTFOVE0yTFdRbE5qVTFNellwSlRZMU5UTTJLUzFsTG1KMVptWmxjaTVpZVhSbFRHVnVaM1JvS3pZMU5UTTFQajQrTVRZN2RISjVlMlV1WjNKdmR5aG5LVHR0S0NrN2RtRnlJR2c5TVR0aWNtVmhheUJoZldOaGRHTm9LR3NwZTMxb1BYWnZhV1FnTUgxcFppaG9LWEpsZEhWeWJpRXdmWEpsZEhWeWJpRXhmU3hjYms4NlNHSXNVRHBKWWl4SU9rNWhMR2M2U21Jc2JqcE9ZaXgzT2s5aUxHMDZVV0lzWVRwbGZIeDNMbmRoYzIxTlpXMXZjbmtzUnpwV1lpeGtPbVoxYm1OMGFXOXVLR0VzWWl4akxHUXBlM0psZEhWeWJpQldZaWhoUGo0K01DeGlQajQrTUN4alBqNCtNQ3hrUGo0K01DbDlMR282Wm5WdVkzUnBiMjRvWVN4aUxHTXNaQ2w3WTI5dWMzUWdaejFRTG14bGJtZDBhRHRoUFc1bGR5QlZhVzUwT0VGeWNtRjVLRzRvS1M1emJHbGpaU2hoSzJJc1lTdGpLU2s3ZEhKNWUzWmhjaUJvUFc1bGR5QlhaV0pCYzNObGJXSnNlUzVOYjJSMWJHVW9ZU2tzYXoxdVpYY2dWMlZpUVhOelpXMWliSGt1U1c1emRHRnVZMlVvYUN4N1pXNTJPbnR0WlcxdmNuazZaWDE5S1N4eE8yWnZjaWh4SUdsdUlHc3VaWGh3YjNKMGN5bFlZaWhyTG1WNGNHOXlkSE5iY1YwcE8zSmxkSFZ5YmlCblBGQXViR1Z1WjNSb1AyYzZaSDFqWVhSamFDaENLWHR5WlhSMWNtNGdZMjl1YzI5c1pTNXNiMmNvUWlrc1pIMTlmVHRjYmlobWRXNWpkR2x2YmlncGUyWjFibU4wYVc5dUlHRW9ZeXhrS1h0alBXTXVaWGh3YjNKMGN6dE1QV005WW1Nb1l5azdWaTRrWVM1d2RYTm9LRXd1ZW1FcE8xQTlUQzVCWVR0MFlTNTFibk5vYVdaMEtFd3VWeWs3Y21FOVpEdDVZU2dwTzNKbGRIVnliaUJqZlhaaGNpQmlQWHRoT21GamZUdDRZU2dwTzJsbUtIY3VhVzV6ZEdGdWRHbGhkR1ZYWVhOdEtYUnllWHR5WlhSMWNtNGdkeTVwYm5OMFlXNTBhV0YwWlZkaGMyMG9ZaXhoS1gxallYUmphQ2hqS1h0SktGd2lUVzlrZFd4bExtbHVjM1JoYm5ScFlYUmxWMkZ6YlNCallXeHNZbUZqYXlCbVlXbHNaV1FnZDJsMGFDQmxjbkp2Y2pvZ1hDSXJZeWtzZUNoaktYMUVZU2hpTEdaMWJtTjBhVzl1S0dNcGUyRW9ZeTVwYm5OMFlXNWpaU3hqTG0xdlpIVnNaU2w5S1M1allYUmphQ2g0S1R0eVpYUjFjbTU3ZlgwcEtDazdkeTVmVDNKMFNXNXBkRDBvWVN4aUtUMCtLSGN1WDA5eWRFbHVhWFE5VEM1WUtTaGhMR0lwTzNjdVgwOXlkRWRsZEV4aGMzUkZjbkp2Y2owb1lTeGlLVDArS0hjdVgwOXlkRWRsZEV4aGMzUkZjbkp2Y2oxTUxsa3BLR0VzWWlrN1hHNTNMbDlQY25SRGNtVmhkR1ZUWlhOemFXOXVUM0IwYVc5dWN6MG9ZU3hpTEdNc1pDeG5MR2dzYXl4eExFSXNkaWs5UGloM0xsOVBjblJEY21WaGRHVlRaWE56YVc5dVQzQjBhVzl1Y3oxTUxsb3BLR0VzWWl4akxHUXNaeXhvTEdzc2NTeENMSFlwTzNjdVgwOXlkRUZ3Y0dWdVpFVjRaV04xZEdsdmJsQnliM1pwWkdWeVBTaGhMR0lwUFQ0b2R5NWZUM0owUVhCd1pXNWtSWGhsWTNWMGFXOXVVSEp2ZG1sa1pYSTlUQzVmS1NoaExHSXBPM2N1WDA5eWRFRmtaRVp5WldWRWFXMWxibk5wYjI1UGRtVnljbWxrWlQwb1lTeGlMR01wUFQ0b2R5NWZUM0owUVdSa1JuSmxaVVJwYldWdWMybHZiazkyWlhKeWFXUmxQVXd1SkNrb1lTeGlMR01wTzNjdVgwOXlkRUZrWkZObGMzTnBiMjVEYjI1bWFXZEZiblJ5ZVQwb1lTeGlMR01wUFQ0b2R5NWZUM0owUVdSa1UyVnpjMmx2YmtOdmJtWnBaMFZ1ZEhKNVBVd3VZV0VwS0dFc1lpeGpLVHQzTGw5UGNuUlNaV3hsWVhObFUyVnpjMmx2Yms5d2RHbHZibk05WVQwK0tIY3VYMDl5ZEZKbGJHVmhjMlZUWlhOemFXOXVUM0IwYVc5dWN6MU1MbUpoS1NoaEtUdDNMbDlQY25SRGNtVmhkR1ZUWlhOemFXOXVQU2hoTEdJc1l5azlQaWgzTGw5UGNuUkRjbVZoZEdWVFpYTnphVzl1UFV3dVkyRXBLR0VzWWl4aktUdGNibmN1WDA5eWRGSmxiR1ZoYzJWVFpYTnphVzl1UFdFOVBpaDNMbDlQY25SU1pXeGxZWE5sVTJWemMybHZiajFNTG1SaEtTaGhLVHQzTGw5UGNuUkhaWFJKYm5CMWRFOTFkSEIxZEVOdmRXNTBQU2hoTEdJc1l5azlQaWgzTGw5UGNuUkhaWFJKYm5CMWRFOTFkSEIxZEVOdmRXNTBQVXd1WldFcEtHRXNZaXhqS1R0M0xsOVBjblJIWlhSSmJuQjFkRTVoYldVOUtHRXNZaWs5UGloM0xsOVBjblJIWlhSSmJuQjFkRTVoYldVOVRDNW1ZU2tvWVN4aUtUdDNMbDlQY25SSFpYUlBkWFJ3ZFhST1lXMWxQU2hoTEdJcFBUNG9keTVmVDNKMFIyVjBUM1YwY0hWMFRtRnRaVDFNTG1kaEtTaGhMR0lwTzNjdVgwOXlkRVp5WldVOVlUMCtLSGN1WDA5eWRFWnlaV1U5VEM1b1lTa29ZU2s3ZHk1ZlQzSjBRM0psWVhSbFZHVnVjMjl5UFNoaExHSXNZeXhrTEdjc2FDazlQaWgzTGw5UGNuUkRjbVZoZEdWVVpXNXpiM0k5VEM1cFlTa29ZU3hpTEdNc1pDeG5MR2dwTzNjdVgwOXlkRWRsZEZSbGJuTnZja1JoZEdFOUtHRXNZaXhqTEdRc1p5azlQaWgzTGw5UGNuUkhaWFJVWlc1emIzSkVZWFJoUFV3dWFtRXBLR0VzWWl4akxHUXNaeWs3ZHk1ZlQzSjBVbVZzWldGelpWUmxibk52Y2oxaFBUNG9keTVmVDNKMFVtVnNaV0Z6WlZSbGJuTnZjajFNTG10aEtTaGhLVHRjYm5jdVgwOXlkRU55WldGMFpWSjFiazl3ZEdsdmJuTTlLR0VzWWl4akxHUXBQVDRvZHk1ZlQzSjBRM0psWVhSbFVuVnVUM0IwYVc5dWN6MU1MbXhoS1NoaExHSXNZeXhrS1R0M0xsOVBjblJCWkdSU2RXNURiMjVtYVdkRmJuUnllVDBvWVN4aUxHTXBQVDRvZHk1ZlQzSjBRV1JrVW5WdVEyOXVabWxuUlc1MGNuazlUQzV0WVNrb1lTeGlMR01wTzNjdVgwOXlkRkpsYkdWaGMyVlNkVzVQY0hScGIyNXpQV0U5UGloM0xsOVBjblJTWld4bFlYTmxVblZ1VDNCMGFXOXVjejFNTG01aEtTaGhLVHQzTGw5UGNuUkRjbVZoZEdWQ2FXNWthVzVuUFdFOVBpaDNMbDlQY25SRGNtVmhkR1ZDYVc1a2FXNW5QVXd1YjJFcEtHRXBPM2N1WDA5eWRFSnBibVJKYm5CMWREMG9ZU3hpTEdNcFBUNG9keTVmVDNKMFFtbHVaRWx1Y0hWMFBVd3VjR0VwS0dFc1lpeGpLVHQzTGw5UGNuUkNhVzVrVDNWMGNIVjBQU2hoTEdJc1l5eGtLVDArS0hjdVgwOXlkRUpwYm1SUGRYUndkWFE5VEM1eFlTa29ZU3hpTEdNc1pDazdkeTVmVDNKMFEyeGxZWEpDYjNWdVpFOTFkSEIxZEhNOVlUMCtLSGN1WDA5eWRFTnNaV0Z5UW05MWJtUlBkWFJ3ZFhSelBVd3VjbUVwS0dFcE8zY3VYMDl5ZEZKbGJHVmhjMlZDYVc1a2FXNW5QV0U5UGloM0xsOVBjblJTWld4bFlYTmxRbWx1WkdsdVp6MU1Mbk5oS1NoaEtUdGNibmN1WDA5eWRGSjFibGRwZEdoQ2FXNWthVzVuUFNoaExHSXNZeXhrTEdjcFBUNG9keTVmVDNKMFVuVnVWMmwwYUVKcGJtUnBibWM5VEM1MFlTa29ZU3hpTEdNc1pDeG5LVHQzTGw5UGNuUlNkVzQ5S0dFc1lpeGpMR1FzWnl4b0xHc3NjU2s5UGloM0xsOVBjblJTZFc0OVRDNTFZU2tvWVN4aUxHTXNaQ3huTEdnc2F5eHhLVHQzTGw5UGNuUkZibVJRY205bWFXeHBibWM5WVQwK0tIY3VYMDl5ZEVWdVpGQnliMlpwYkdsdVp6MU1MblpoS1NoaEtUdDJZWElnVUdFOWR5NWZjSFJvY21WaFpGOXpaV3htUFNncFBUNG9VR0U5ZHk1ZmNIUm9jbVZoWkY5elpXeG1QVXd1ZDJFcEtDa3NlR0k5ZHk1ZmJXRnNiRzlqUFdFOVBpaDRZajEzTGw5dFlXeHNiMk05VEM1NFlTa29ZU2s3ZHk1ZlpuSmxaVDFoUFQ0b2R5NWZabkpsWlQxTUxubGhLU2hoS1R0M0xsOWZaVzF6WTNKcGNIUmxibDkwYkhOZmFXNXBkRDBvS1QwK0tIY3VYMTlsYlhOamNtbHdkR1Z1WDNSc2MxOXBibWwwUFV3dWVtRXBLQ2s3ZG1GeUlGcGlQWGN1WDE5bGJYTmpjbWx3ZEdWdVgzUm9jbVZoWkY5cGJtbDBQU2hoTEdJc1l5eGtMR2NzYUNrOVBpaGFZajEzTGw5ZlpXMXpZM0pwY0hSbGJsOTBhSEpsWVdSZmFXNXBkRDFNTGtKaEtTaGhMR0lzWXl4a0xHY3NhQ2s3WEc1M0xsOWZaVzF6WTNKcGNIUmxibDkwYUhKbFlXUmZZM0poYzJobFpEMG9LVDArS0hjdVgxOWxiWE5qY21sd2RHVnVYM1JvY21WaFpGOWpjbUZ6YUdWa1BVd3VRMkVwS0NrN2RtRnlJRU5pUFNoaExHSXNZeXhrS1QwK0tFTmlQVXd1UkdFcEtHRXNZaXhqTEdRcExFOWhQV0U5UGloUFlUMU1Ma1ZoS1NoaEtTeFdZVDEzTGw5ZlpXMXpZM0pwY0hSbGJsOTBhSEpsWVdSZlpYaHBkRDFoUFQ0b1ZtRTlkeTVmWDJWdGMyTnlhWEIwWlc1ZmRHaHlaV0ZrWDJWNGFYUTlUQzVHWVNrb1lTa3NjMkk5ZHk1ZlgyVnRjMk55YVhCMFpXNWZZMmhsWTJ0ZmJXRnBiR0p2ZUQwb0tUMCtLSE5pUFhjdVgxOWxiWE5qY21sd2RHVnVYMk5vWldOclgyMWhhV3hpYjNnOVRDNUhZU2tvS1N3a1lqMWhQVDRvSkdJOVRDNUlZU2tvWVNrc1UyRTlLR0VzWWlrOVBpaFRZVDFNTGtsaEtTaGhMR0lwTEhwaVBTZ3BQVDRvZW1JOVRDNUtZU2tvS1N4VVlUMWhQVDRvVkdFOVRDNUxZU2tvWVNrc1FtSTlZVDArS0VKaVBVd3VUR0VwS0dFcE8zY3VYMTlmYzNSaGNuUmZaVzFmYW5NOU9UQTJPRFEwTzNjdVgxOWZjM1J2Y0Y5bGJWOXFjejA1TURjME5UWTdYRzVtZFc1amRHbHZiaUJpWXloaEtYdGhQVTlpYW1WamRDNWhjM05wWjI0b2UzMHNZU2s3ZG1GeUlHSTlaRDArS0NrOVBtUW9LVDQrUGpBc1l6MWtQVDVuUFQ1a0tHY3BQajQrTUR0aExsOWZaWEp5Ym05ZmJHOWpZWFJwYjI0OVlpaGhMbDlmWlhKeWJtOWZiRzlqWVhScGIyNHBPMkV1Y0hSb2NtVmhaRjl6Wld4bVBXSW9ZUzV3ZEdoeVpXRmtYM05sYkdZcE8yRXViV0ZzYkc5alBXTW9ZUzV0WVd4c2IyTXBPMkV1YzNSaFkydFRZWFpsUFdJb1lTNXpkR0ZqYTFOaGRtVXBPMkV1YzNSaFkydEJiR3h2WXoxaktHRXVjM1JoWTJ0QmJHeHZZeWs3Y21WMGRYSnVJR0Y5ZHk1clpXVndVblZ1ZEdsdFpVRnNhWFpsUFZFN2R5NTNZWE50VFdWdGIzSjVQV1U3ZHk1emRHRmphMEZzYkc5alBVSmlPM2N1YzNSaFkydFRZWFpsUFhwaU8zY3VjM1JoWTJ0U1pYTjBiM0psUFZSaE8zY3VZV1JrUm5WdVkzUnBiMjQ5V0dJN2R5NVZWRVk0Vkc5VGRISnBibWM5UzJFN2R5NXpkSEpwYm1kVWIxVlVSamc5WldJN2R5NXNaVzVuZEdoQ2VYUmxjMVZVUmpnOVkySTdkeTVGZUdsMFUzUmhkSFZ6UFVWaE8zY3VVRlJvY21WaFpEMVdPM1poY2lCall6dFRQV1oxYm1OMGFXOXVJR1JqS0NsN1kyTjhmR1ZqS0NrN1kyTjhmQ2hUUFdSaktYMDdYRzVtZFc1amRHbHZiaUJsWXlncGUyWjFibU4wYVc5dUlHRW9LWHRwWmlnaFkyTW1KaWhqWXowaE1DeDNMbU5oYkd4bFpGSjFiajBoTUN3aFRTa3BlMFI4ZkZKaEtIUmhLVHRvWVNoM0tUdHBaaWgzTG05dVVuVnVkR2x0WlVsdWFYUnBZV3hwZW1Wa0tYY3ViMjVTZFc1MGFXMWxTVzVwZEdsaGJHbDZaV1FvS1R0cFppZ2hSQ2w3YVdZb2R5NXdiM04wVW5WdUtXWnZjaWhjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCM0xuQnZjM1JTZFc0bUppaDNMbkJ2YzNSU2RXNDlXM2N1Y0c5emRGSjFibDBwTzNjdWNHOXpkRkoxYmk1c1pXNW5kR2c3S1h0MllYSWdZajEzTG5CdmMzUlNkVzR1YzJocFpuUW9LVHQxWVM1MWJuTm9hV1owS0dJcGZWSmhLSFZoS1gxOWZXbG1LQ0VvTUR4U0tTbHBaaWhFS1doaEtIY3BMRVI4ZkZKaEtIUmhLU3h6ZEdGeWRGZHZjbXRsY2loM0tUdGxiSE5sZTJsbUtIY3VjSEpsVW5WdUtXWnZjaWhjSW1aMWJtTjBhVzl1WENJOVBYUjVjR1Z2WmlCM0xuQnlaVkoxYmlZbUtIY3VjSEpsVW5WdVBWdDNMbkJ5WlZKMWJsMHBPM2N1Y0hKbFVuVnVMbXhsYm1kMGFEc3BjMkV1ZFc1emFHbG1kQ2gzTG5CeVpWSjFiaTV6YUdsbWRDZ3BLVHRTWVNoellTazdNRHhTZkh3b2R5NXpaWFJUZEdGMGRYTS9LSGN1YzJWMFUzUmhkSFZ6S0Z3aVVuVnVibWx1Wnk0dUxsd2lLU3h6WlhSVWFXMWxiM1YwS0daMWJtTjBhVzl1S0NsN2MyVjBWR2x0Wlc5MWRDaG1kVzVqZEdsdmJpZ3BlM2N1YzJWMFUzUmhkSFZ6S0Z3aVhDSXBmU3hjYmpFcE8yRW9LWDBzTVNrcE9tRW9LU2w5ZldsbUtIY3VjSEpsU1c1cGRDbG1iM0lvWENKbWRXNWpkR2x2Ymx3aVBUMTBlWEJsYjJZZ2R5NXdjbVZKYm1sMEppWW9keTV3Y21WSmJtbDBQVnQzTG5CeVpVbHVhWFJkS1Rzd1BIY3VjSEpsU1c1cGRDNXNaVzVuZEdnN0tYY3VjSEpsU1c1cGRDNXdiM0FvS1NncE8yVmpLQ2s3WEc1Y2JseHVJQ0J5WlhSMWNtNGdiVzlrZFd4bFFYSm5MbkpsWVdSNVhHNTlYRzVjYmlrN1hHNTlLU2dwTzF4dWFXWWdLSFI1Y0dWdlppQmxlSEJ2Y25SeklEMDlQU0FuYjJKcVpXTjBKeUFtSmlCMGVYQmxiMllnYlc5a2RXeGxJRDA5UFNBbmIySnFaV04wSnlsY2JpQWdiVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnZjblJYWVhOdFZHaHlaV0ZrWldRN1hHNWxiSE5sSUdsbUlDaDBlWEJsYjJZZ1pHVm1hVzVsSUQwOVBTQW5ablZ1WTNScGIyNG5JQ1ltSUdSbFptbHVaVnNuWVcxa0oxMHBYRzRnSUdSbFptbHVaU2hiWFN3Z0tDa2dQVDRnYjNKMFYyRnpiVlJvY21WaFpHVmtLVHRjYmlJc0lDSmNJblZ6WlNCemRISnBZM1JjSWp0MllYSWdUVzlrZFd4bFBYdDlPM1poY2lCRlRsWkpVazlPVFVWT1ZGOUpVMTlPVDBSRlBYUjVjR1Z2WmlCd2NtOWpaWE56UFQxY0ltOWlhbVZqZEZ3aUppWjBlWEJsYjJZZ2NISnZZMlZ6Y3k1MlpYSnphVzl1Y3owOVhDSnZZbXBsWTNSY0lpWW1kSGx3Wlc5bUlIQnliMk5sYzNNdWRtVnljMmx2Ym5NdWJtOWtaVDA5WENKemRISnBibWRjSWp0cFppaEZUbFpKVWs5T1RVVk9WRjlKVTE5T1QwUkZLWHQyWVhJZ2JtOWtaVmR2Y210bGNsUm9jbVZoWkhNOWNtVnhkV2x5WlNoY0luZHZjbXRsY2w5MGFISmxZV1J6WENJcE8zWmhjaUJ3WVhKbGJuUlFiM0owUFc1dlpHVlhiM0pyWlhKVWFISmxZV1J6TG5CaGNtVnVkRkJ2Y25RN2NHRnlaVzUwVUc5eWRDNXZiaWhjSW0xbGMzTmhaMlZjSWl4a1lYUmhQVDV2Ym0xbGMzTmhaMlVvZTJSaGRHRTZaR0YwWVgwcEtUdDJZWElnWm5NOWNtVnhkV2x5WlNoY0ltWnpYQ0lwTzA5aWFtVmpkQzVoYzNOcFoyNG9aMnh2WW1Gc0xIdHpaV3htT21kc2IySmhiQ3h5WlhGMWFYSmxPbkpsY1hWcGNtVXNUVzlrZFd4bE9rMXZaSFZzWlN4c2IyTmhkR2x2YmpwN2FISmxaanBmWDJacGJHVnVZVzFsZlN4WGIzSnJaWEk2Ym05a1pWZHZjbXRsY2xSb2NtVmhaSE11VjI5eWEyVnlMR2x0Y0c5eWRGTmpjbWx3ZEhNNlpqMCtLREFzWlhaaGJDa29abk11Y21WaFpFWnBiR1ZUZVc1aktHWXNYQ0oxZEdZNFhDSXBLMXdpTHk4aklITnZkWEpqWlZWU1REMWNJaXRtS1N4d2IzTjBUV1Z6YzJGblpUcHRjMmM5UG5CaGNtVnVkRkJ2Y25RdWNHOXpkRTFsYzNOaFoyVW9iWE5uS1N4d1pYSm1iM0p0WVc1alpUcG5iRzlpWVd3dWNHVnlabTl5YldGdVkyVjhmSHR1YjNjNlJHRjBaUzV1YjNkOWZTbDlkbUZ5SUdsdWFYUnBZV3hwZW1Wa1NsTTlabUZzYzJVN1puVnVZM1JwYjI0Z2RHaHlaV0ZrVUhKcGJuUkZjbklvS1h0MllYSWdkR1Y0ZEQxQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNcExtcHZhVzRvWENJZ1hDSXBPMmxtS0VWT1ZrbFNUMDVOUlU1VVgwbFRYMDVQUkVVcGUyWnpMbmR5YVhSbFUzbHVZeWd5TEhSbGVIUXJYQ0pjWEc1Y0lpazdjbVYwZFhKdWZXTnZibk52YkdVdVpYSnliM0lvZEdWNGRDbDlablZ1WTNScGIyNGdkR2h5WldGa1FXeGxjblFvS1h0MllYSWdkR1Y0ZEQxQmNuSmhlUzV3Y205MGIzUjVjR1V1YzJ4cFkyVXVZMkZzYkNoaGNtZDFiV1Z1ZEhNcExtcHZhVzRvWENJZ1hDSXBPM0J2YzNSTlpYTnpZV2RsS0h0amJXUTZYQ0poYkdWeWRGd2lMSFJsZUhRNmRHVjRkQ3gwYUhKbFlXUkpaRHBOYjJSMWJHVmJYQ0pmY0hSb2NtVmhaRjl6Wld4bVhDSmRLQ2w5S1gxMllYSWdaWEp5UFhSb2NtVmhaRkJ5YVc1MFJYSnlPM05sYkdZdVlXeGxjblE5ZEdoeVpXRmtRV3hsY25RN1RXOWtkV3hsVzF3aWFXNXpkR0Z1ZEdsaGRHVlhZWE50WENKZFBTaHBibVp2TEhKbFkyVnBkbVZKYm5OMFlXNWpaU2s5UG50MllYSWdiVzlrZFd4bFBVMXZaSFZzWlZ0Y0luZGhjMjFOYjJSMWJHVmNJbDA3VFc5a2RXeGxXMXdpZDJGemJVMXZaSFZzWlZ3aVhUMXVkV3hzTzNaaGNpQnBibk4wWVc1alpUMXVaWGNnVjJWaVFYTnpaVzFpYkhrdVNXNXpkR0Z1WTJVb2JXOWtkV3hsTEdsdVptOHBPM0psZEhWeWJpQnlaV05sYVhabFNXNXpkR0Z1WTJVb2FXNXpkR0Z1WTJVcGZUdHpaV3htTG05dWRXNW9ZVzVrYkdWa2NtVnFaV04wYVc5dVBXVTlQbnQwYUhKdmR5QmxMbkpsWVhOdmJqOC9aWDA3Wm5WdVkzUnBiMjRnYUdGdVpHeGxUV1Z6YzJGblpTaGxLWHQwY25sN2FXWW9aUzVrWVhSaExtTnRaRDA5UFZ3aWJHOWhaRndpS1h0c1pYUWdiV1Z6YzJGblpWRjFaWFZsUFZ0ZE8zTmxiR1l1YjI1dFpYTnpZV2RsUFdVOVBtMWxjM05oWjJWUmRXVjFaUzV3ZFhOb0tHVXBPM05sYkdZdWMzUmhjblJYYjNKclpYSTlhVzV6ZEdGdVkyVTlQbnROYjJSMWJHVTlhVzV6ZEdGdVkyVTdjRzl6ZEUxbGMzTmhaMlVvZTF3aVkyMWtYQ0k2WENKc2IyRmtaV1JjSW4wcE8yWnZjaWhzWlhRZ2JYTm5JRzltSUcxbGMzTmhaMlZSZFdWMVpTbDdhR0Z1Wkd4bFRXVnpjMkZuWlNodGMyY3BmWE5sYkdZdWIyNXRaWE56WVdkbFBXaGhibVJzWlUxbGMzTmhaMlY5TzAxdlpIVnNaVnRjSW5kaGMyMU5iMlIxYkdWY0lsMDlaUzVrWVhSaExuZGhjMjFOYjJSMWJHVTdabTl5S0dOdmJuTjBJR2hoYm1Sc1pYSWdiMllnWlM1a1lYUmhMbWhoYm1Sc1pYSnpLWHROYjJSMWJHVmJhR0Z1Wkd4bGNsMDlLQzR1TG1GeVozTXBQVDU3Y0c5emRFMWxjM05oWjJVb2UyTnRaRHBjSW1OaGJHeElZVzVrYkdWeVhDSXNhR0Z1Wkd4bGNqcG9ZVzVrYkdWeUxHRnlaM002WVhKbmMzMHBmWDFOYjJSMWJHVmJYQ0ozWVhOdFRXVnRiM0o1WENKZFBXVXVaR0YwWVM1M1lYTnRUV1Z0YjNKNU8wMXZaSFZzWlZ0Y0ltSjFabVpsY2x3aVhUMU5iMlIxYkdWYlhDSjNZWE50VFdWdGIzSjVYQ0pkTG1KMVptWmxjanROYjJSMWJHVmJYQ0pGVGxaSlVrOU9UVVZPVkY5SlUxOVFWRWhTUlVGRVhDSmRQWFJ5ZFdVN2FXWW9kSGx3Wlc5bUlHVXVaR0YwWVM1MWNteFBja0pzYjJJOVBWd2ljM1J5YVc1blhDSXBlMmx0Y0c5eWRGTmpjbWx3ZEhNb1pTNWtZWFJoTG5WeWJFOXlRbXh2WWlsOVpXeHpaWHQyWVhJZ2IySnFaV04wVlhKc1BWVlNUQzVqY21WaGRHVlBZbXBsWTNSVlVrd29aUzVrWVhSaExuVnliRTl5UW14dllpazdhVzF3YjNKMFUyTnlhWEIwY3lodlltcGxZM1JWY213cE8xVlNUQzV5WlhadmEyVlBZbXBsWTNSVlVrd29iMkpxWldOMFZYSnNLWDF2Y25SWFlYTnRWR2h5WldGa1pXUW9UVzlrZFd4bEtYMWxiSE5sSUdsbUtHVXVaR0YwWVM1amJXUTlQVDFjSW5KMWJsd2lLWHROYjJSMWJHVmJYQ0pmWDJWdGMyTnlhWEIwWlc1ZmRHaHlaV0ZrWDJsdWFYUmNJbDBvWlM1a1lYUmhMbkIwYUhKbFlXUmZjSFJ5TEM4cWFYTk5ZV2x1UW5KdmQzTmxjbFJvY21WaFpEMHFMekFzTHlwcGMwMWhhVzVTZFc1MGFXMWxWR2h5WldGa1BTb3ZNQ3d2S21OaGJrSnNiMk5yUFNvdk1TazdUVzlrZFd4bFcxd2lYMTlsYlhOamNtbHdkR1Z1WDNSb2NtVmhaRjl0WVdsc1ltOTRYMkYzWVdsMFhDSmRLR1V1WkdGMFlTNXdkR2h5WldGa1gzQjBjaWs3VFc5a2RXeGxXMXdpWlhOMFlXSnNhWE5vVTNSaFkydFRjR0ZqWlZ3aVhTZ3BPMDF2WkhWc1pWdGNJbEJVYUhKbFlXUmNJbDB1Y21WalpXbDJaVTlpYW1WamRGUnlZVzV6Wm1WeUtHVXVaR0YwWVNrN1RXOWtkV3hsVzF3aVVGUm9jbVZoWkZ3aVhTNTBhSEpsWVdSSmJtbDBWRXhUS0NrN2FXWW9JV2x1YVhScFlXeHBlbVZrU2xNcGUybHVhWFJwWVd4cGVtVmtTbE05ZEhKMVpYMTBjbmw3VFc5a2RXeGxXMXdpYVc1MmIydGxSVzUwY25sUWIybHVkRndpWFNobExtUmhkR0V1YzNSaGNuUmZjbTkxZEdsdVpTeGxMbVJoZEdFdVlYSm5LWDFqWVhSamFDaGxlQ2w3YVdZb1pYZ2hQVndpZFc1M2FXNWtYQ0lwZTNSb2NtOTNJR1Y0ZlgxOVpXeHpaU0JwWmlobExtUmhkR0V1WTIxa1BUMDlYQ0pqWVc1alpXeGNJaWw3YVdZb1RXOWtkV3hsVzF3aVgzQjBhSEpsWVdSZmMyVnNabHdpWFNncEtYdE5iMlIxYkdWYlhDSmZYMlZ0YzJOeWFYQjBaVzVmZEdoeVpXRmtYMlY0YVhSY0lsMG9MVEVwZlgxbGJITmxJR2xtS0dVdVpHRjBZUzUwWVhKblpYUTlQVDFjSW5ObGRHbHRiV1ZrYVdGMFpWd2lLWHQ5Wld4elpTQnBaaWhsTG1SaGRHRXVZMjFrUFQwOVhDSmphR1ZqYTAxaGFXeGliM2hjSWlsN2FXWW9hVzVwZEdsaGJHbDZaV1JLVXlsN1RXOWtkV3hsVzF3aVkyaGxZMnROWVdsc1ltOTRYQ0pkS0NsOWZXVnNjMlVnYVdZb1pTNWtZWFJoTG1OdFpDbDdaWEp5S0Z3aWQyOXlhMlZ5TG1weklISmxZMlZwZG1Wa0lIVnVhMjV2ZDI0Z1kyOXRiV0Z1WkNCY0lpdGxMbVJoZEdFdVkyMWtLVHRsY25Jb1pTNWtZWFJoS1gxOVkyRjBZMmdvWlhncGUybG1LRTF2WkhWc1pWdGNJbDlmWlcxelkzSnBjSFJsYmw5MGFISmxZV1JmWTNKaGMyaGxaRndpWFNsN1RXOWtkV3hsVzF3aVgxOWxiWE5qY21sd2RHVnVYM1JvY21WaFpGOWpjbUZ6YUdWa1hDSmRLQ2w5ZEdoeWIzY2daWGg5ZlhObGJHWXViMjV0WlhOellXZGxQV2hoYm1Sc1pVMWxjM05oWjJVN1hHNGlMQ0FpWlhod2IzSjBJR052Ym5OMElHcHZhVzRnUFNCMWJtUmxabWx1WldRN0lpd2dJaTh2SUVOdmNIbHlhV2RvZENBb1l5a2dUV2xqY205emIyWjBJRU52Y25CdmNtRjBhVzl1TGlCQmJHd2djbWxuYUhSeklISmxjMlZ5ZG1Wa0xseHVMeThnVEdsalpXNXpaV1FnZFc1a1pYSWdkR2hsSUUxSlZDQk1hV05sYm5ObExseHVYRzVwYlhCdmNuUWdLaUJoY3lCd1lYUm9JR1p5YjIwZ0oyNXZaR1U2Y0dGMGFDYzdYRzVwYlhCdmNuUWdlMFZ1ZG4wZ1puSnZiU0FuYjI1dWVISjFiblJwYldVdFkyOXRiVzl1Snp0Y2JseHVhVzF3YjNKMElIdFBjblJYWVhOdFRXOWtkV3hsZlNCbWNtOXRJQ2N1TDJKcGJtUnBibWN2YjNKMExYZGhjMjBuTzF4dWFXMXdiM0owSUh0UGNuUlhZWE50VkdoeVpXRmtaV1JOYjJSMWJHVjlJR1p5YjIwZ0p5NHZZbWx1WkdsdVp5OXZjblF0ZDJGemJTMTBhSEpsWVdSbFpDYzdYRzVjYmk4cUlHVnpiR2x1ZEMxa2FYTmhZbXhsSUVCMGVYQmxjMk55YVhCMExXVnpiR2x1ZEM5dWJ5MXlaWEYxYVhKbExXbHRjRzl5ZEhNZ0tpOWNibXhsZENCdmNuUlhZWE50Um1GamRHOXllVG9nUlcxelkzSnBjSFJsYmsxdlpIVnNaVVpoWTNSdmNuazhUM0owVjJGemJVMXZaSFZzWlQ0N1hHNWNibWxtSUNnaFFsVkpURVJmUkVWR1V5NUVTVk5CUWt4RlgxUlNRVWxPU1U1SEtTQjdYRzRnSUc5eWRGZGhjMjFHWVdOMGIzSjVJRDBnY21WeGRXbHlaU2duTGk5aWFXNWthVzVuTDI5eWRDMTBjbUZwYm1sdVp5MTNZWE50TFhOcGJXUXVhbk1uS1R0Y2JuMGdaV3h6WlNCN1hHNGdJRzl5ZEZkaGMyMUdZV04wYjNKNUlEMWNiaUFnSUNBZ0lFSlZTVXhFWDBSRlJsTXVSRWxUUVVKTVJWOVhSVUpIVUZVZ1B5QnlaWEYxYVhKbEtDY3VMMkpwYm1ScGJtY3ZiM0owTFhkaGMyMHVhbk1uS1NBNklISmxjWFZwY21Vb0p5NHZZbWx1WkdsdVp5OXZjblF0ZDJGemJTMXphVzFrTG1welpYQXVhbk1uS1R0Y2JuMWNibHh1WTI5dWMzUWdiM0owVjJGemJVWmhZM1J2Y25sVWFISmxZV1JsWkRvZ1JXMXpZM0pwY0hSbGJrMXZaSFZzWlVaaFkzUnZjbms4VDNKMFYyRnpiVTF2WkhWc1pUNGdQU0FoUWxWSlRFUmZSRVZHVXk1RVNWTkJRa3hGWDFkQlUwMWZWRWhTUlVGRUlEOWNiaUFnSUNBb1FsVkpURVJmUkVWR1V5NUVTVk5CUWt4RlgxZEZRa2RRVlNBL0lISmxjWFZwY21Vb0p5NHZZbWx1WkdsdVp5OXZjblF0ZDJGemJTMTBhSEpsWVdSbFpDNXFjeWNwSURwY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGNYVnBjbVVvSnk0dlltbHVaR2x1Wnk5dmNuUXRkMkZ6YlMxemFXMWtMWFJvY21WaFpHVmtMbXB6WlhBdWFuTW5LU2tnT2x4dUlDQWdJRzl5ZEZkaGMyMUdZV04wYjNKNU8xeHVMeW9nWlhOc2FXNTBMV1Z1WVdKc1pTQkFkSGx3WlhOamNtbHdkQzFsYzJ4cGJuUXZibTh0Y21WeGRXbHlaUzFwYlhCdmNuUnpJQ292WEc1Y2JteGxkQ0IzWVhOdE9pQlBjblJYWVhOdFRXOWtkV3hsZkhWdVpHVm1hVzVsWkR0Y2JteGxkQ0JwYm1sMGFXRnNhWHBsWkNBOUlHWmhiSE5sTzF4dWJHVjBJR2x1YVhScFlXeHBlbWx1WnlBOUlHWmhiSE5sTzF4dWJHVjBJR0ZpYjNKMFpXUWdQU0JtWVd4elpUdGNibHh1WTI5dWMzUWdhWE5OZFd4MGFWUm9jbVZoWkZOMWNIQnZjblJsWkNBOUlDZ3BPaUJpYjI5c1pXRnVJRDArSUh0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0F2THlCSlppQW5VMmhoY21Wa1FYSnlZWGxDZFdabVpYSW5JR2x6SUc1dmRDQmhkbUZwYkdGaWJHVXNJRmRsWWtGemMyVnRZbXg1SUhSb2NtVmhaSE1nZDJsc2JDQnViM1FnZDI5eWF5NWNiaUFnSUNCcFppQW9kSGx3Wlc5bUlGTm9ZWEpsWkVGeWNtRjVRblZtWm1WeUlEMDlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lDOHZJRlJsYzNRZ1ptOXlJSFJ5WVc1elptVnlZV0pwYkdsMGVTQnZaaUJUUVVKeklDaG1iM0lnWW5KdmQzTmxjbk11SUc1bFpXUmxaQ0JtYjNJZ1JtbHlaV1p2ZUNsY2JpQWdJQ0F2THlCb2RIUndjem92TDJkeWIzVndjeTVuYjI5bmJHVXVZMjl0TDJadmNuVnRMeU1oYlhObkwyMXZlbWxzYkdFdVpHVjJMbkJzWVhSbWIzSnRMMGxJYTBKYWJFaEZWSEJCTDJSM2MwMU9ZMmhYUlZGQlNseHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1RXVnpjMkZuWlVOb1lXNXVaV3dnSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0J1WlhjZ1RXVnpjMkZuWlVOb1lXNXVaV3dvS1M1d2IzSjBNUzV3YjNOMFRXVnpjMkZuWlNodVpYY2dVMmhoY21Wa1FYSnlZWGxDZFdabVpYSW9NU2twTzF4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUZSbGMzUWdabTl5SUZkbFlrRnpjMlZ0WW14NUlIUm9jbVZoWkhNZ1kyRndZV0pwYkdsMGVTQW9abTl5SUdKdmRHZ2dZbkp2ZDNObGNuTWdZVzVrSUU1dlpHVXVhbk1wWEc0Z0lDQWdMeThnVkdocGN5QjBlWEJsWkNCaGNuSmhlU0JwY3lCaElGZGxZa0Z6YzJWdFlteDVJSEJ5YjJkeVlXMGdZMjl1ZEdGcGJtbHVaeUIwYUhKbFlXUmxaQ0JwYm5OMGNuVmpkR2x2Ym5NdVhHNGdJQ0FnY21WMGRYSnVJRmRsWWtGemMyVnRZbXg1TG5aaGJHbGtZWFJsS0c1bGR5QlZhVzUwT0VGeWNtRjVLRnRjYmlBZ0lDQWdJREFzSURrM0xDQXhNVFVzSURFd09Td2dNU3dnTUN3Z0lEQXNJQ0F3TENBeExDQTBMQ0F4TENBZ09UWXNJREFzSUNBZ01Dd2dJRE1zSURJc0lERXNJQ0F3TENBMUxGeHVJQ0FnSUNBZ05Dd2dNU3dnSURNc0lDQWdNU3dnSUNBeExDQXhNQ3dnTVRFc0lERXNJRGtzSURBc0lEWTFMQ0F3TENBZ01qVTBMQ0F4Tml3Z01pd2dNQ3dnTWpZc0lERXhYRzRnSUNBZ1hTa3BPMXh1SUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh1SUNCOVhHNTlPMXh1WEc1amIyNXpkQ0JwYzFOcGJXUlRkWEJ3YjNKMFpXUWdQU0FvS1RvZ1ltOXZiR1ZoYmlBOVBpQjdYRzRnSUhSeWVTQjdYRzRnSUNBZ0x5OGdWR1Z6ZENCbWIzSWdWMlZpUVhOelpXMWliSGtnVTBsTlJDQmpZWEJoWW1sc2FYUjVJQ2htYjNJZ1ltOTBhQ0JpY205M2MyVnljeUJoYm1RZ1RtOWtaUzVxY3lsY2JpQWdJQ0F2THlCVWFHbHpJSFI1Y0dWa0lHRnljbUY1SUdseklHRWdWMlZpUVhOelpXMWliSGtnY0hKdlozSmhiU0JqYjI1MFlXbHVhVzVuSUZOSlRVUWdhVzV6ZEhKMVkzUnBiMjV6TGx4dVhHNGdJQ0FnTHk4Z1ZHaGxJR0pwYm1GeWVTQmtZWFJoSUdseklHZGxibVZ5WVhSbFpDQm1jbTl0SUhSb1pTQm1iMnhzYjNkcGJtY2dZMjlrWlNCaWVTQjNZWFF5ZDJGemJUcGNiaUFnSUNBdkwxeHVJQ0FnSUM4dklDaHRiMlIxYkdWY2JpQWdJQ0F2THlBZ0lDaDBlWEJsSUNSME1DQW9ablZ1WXlrcFhHNGdJQ0FnTHk4Z0lDQW9ablZ1WXlBa1pqQWdLSFI1Y0dVZ0pIUXdLVnh1SUNBZ0lDOHZJQ0FnSUNBb1pISnZjRnh1SUNBZ0lDOHZJQ0FnSUNBZ0lDaHBNeko0TkM1a2IzUmZhVEUyZURoZmMxeHVJQ0FnSUM4dklDQWdJQ0FnSUNBZ0tHazRlREUyTG5Od2JHRjBYRzRnSUNBZ0x5OGdJQ0FnSUNBZ0lDQWdJQ2hwTXpJdVkyOXVjM1FnTUNrcFhHNGdJQ0FnTHk4Z0lDQWdJQ0FnSUNBb2RqRXlPQzVqYjI1emRDQnBNeko0TkNBd2VEQXdNREF3TURBd0lEQjRNREF3TURBd01EQWdNSGd3TURBd01EQXdNQ0F3ZURBd01EQXdNREF3S1NrcEtTbGNibHh1SUNBZ0lISmxkSFZ5YmlCWFpXSkJjM05sYldKc2VTNTJZV3hwWkdGMFpTaHVaWGNnVldsdWREaEJjbkpoZVNoYlhHNGdJQ0FnSUNBd0xDQWdJRGszTENBeE1UVXNJREV3T1N3Z01Td2dNQ3dnTUN3Z01Dd2dNU3dnTkN3Z01Td2dPVFlzSURBc0lEQXNJRE1zSURJc0lERXNJREFzSURFd0xDQXpNQ3dnTVN3Z0lDQXlPQ3dnSURBc0lEWTFMQ0F3TEZ4dUlDQWdJQ0FnTWpVekxDQXhOU3dnTWpVekxDQXhNaXdnSURBc0lEQXNJREFzSURBc0lEQXNJREFzSURBc0lEQXNJQ0F3TENBd0xDQXdMQ0F3TENBd0xDQXdMQ0F3TENBZ01Dd2dJREkxTXl3Z01UZzJMQ0F4TENBeU5pd2dNVEZjYmlBZ0lDQmRLU2s3WEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNibjA3WEc1Y2JtTnZibk4wSUdkbGRGZGhjMjFHYVd4bFRtRnRaU0E5SUNoMWMyVlRhVzFrT2lCaWIyOXNaV0Z1TENCMWMyVlVhSEpsWVdSek9pQmliMjlzWldGdUtTQTlQaUI3WEc0Z0lHbG1JQ2gxYzJWVGFXMWtLU0I3WEc0Z0lDQWdhV1lnS0NGQ1ZVbE1SRjlFUlVaVExrUkpVMEZDVEVWZlZGSkJTVTVKVGtjcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlBbmIzSjBMWFJ5WVdsdWFXNW5MWGRoYzIwdGMybHRaQzUzWVhOdEp6dGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFZ6WlZSb2NtVmhaSE1nUHlBbmIzSjBMWGRoYzIwdGMybHRaQzEwYUhKbFlXUmxaQzUzWVhOdEp5QTZJQ2R2Y25RdGQyRnpiUzF6YVcxa0xuZGhjMjBuTzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUhKbGRIVnliaUIxYzJWVWFISmxZV1J6SUQ4Z0oyOXlkQzEzWVhOdExYUm9jbVZoWkdWa0xuZGhjMjBuSURvZ0oyOXlkQzEzWVhOdExuZGhjMjBuTzF4dUlDQjlYRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnYVc1cGRHbGhiR2w2WlZkbFlrRnpjMlZ0WW14NUlEMGdZWE41Ym1Nb1pteGhaM002SUVWdWRpNVhaV0pCYzNObGJXSnNlVVpzWVdkektUb2dVSEp2YldselpUeDJiMmxrUGlBOVBpQjdYRzRnSUdsbUlDaHBibWwwYVdGc2FYcGxaQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQlFjbTl0YVhObExuSmxjMjlzZG1Vb0tUdGNiaUFnZlZ4dUlDQnBaaUFvYVc1cGRHbGhiR2w2YVc1bktTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkdGRXeDBhWEJzWlNCallXeHNjeUIwYnlCY1hDZHBibWwwYVdGc2FYcGxWMlZpUVhOelpXMWliSGtvS1Z4Y0p5QmtaWFJsWTNSbFpDNG5LVHRjYmlBZ2ZWeHVJQ0JwWmlBb1lXSnZjblJsWkNrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWduY0hKbGRtbHZkWE1nWTJGc2JDQjBieUJjWENkcGJtbDBhV0ZzYVhwbFYyVmlRWE56WlcxaWJIa29LVnhjSnlCbVlXbHNaV1F1SnlrN1hHNGdJSDFjYmx4dUlDQnBibWwwYVdGc2FYcHBibWNnUFNCMGNuVmxPMXh1WEc0Z0lDOHZJSGRoYzIwZ1pteGhaM01nWVhKbElHRnNjbVZoWkhrZ2FXNXBkR2xoYkdsNlpXUmNiaUFnWTI5dWMzUWdkR2x0Wlc5MWRDQTlJR1pzWVdkekxtbHVhWFJVYVcxbGIzVjBJVHRjYmlBZ1kyOXVjM1FnYm5WdFZHaHlaV0ZrY3lBOUlHWnNZV2R6TG01MWJWUm9jbVZoWkhNaE8xeHVJQ0JqYjI1emRDQnphVzFrSUQwZ1pteGhaM011YzJsdFpDRTdYRzVjYmlBZ1kyOXVjM1FnZFhObFZHaHlaV0ZrY3lBOUlHNTFiVlJvY21WaFpITWdQaUF4SUNZbUlHbHpUWFZzZEdsVWFISmxZV1JUZFhCd2IzSjBaV1FvS1R0Y2JpQWdZMjl1YzNRZ2RYTmxVMmx0WkNBOUlITnBiV1FnSmlZZ2FYTlRhVzFrVTNWd2NHOXlkR1ZrS0NrN1hHNWNiaUFnWTI5dWMzUWdkMkZ6YlZCaGRHaHpJRDBnWm14aFozTXVkMkZ6YlZCaGRHaHpPMXh1SUNCamIyNXpkQ0IzWVhOdFVISmxabWw0VDNabGNuSnBaR1VnUFNCMGVYQmxiMllnZDJGemJWQmhkR2h6SUQwOVBTQW5jM1J5YVc1bkp5QS9JSGRoYzIxUVlYUm9jeUE2SUhWdVpHVm1hVzVsWkR0Y2JpQWdZMjl1YzNRZ2QyRnpiVVpwYkdWT1lXMWxJRDBnWjJWMFYyRnpiVVpwYkdWT1lXMWxLSFZ6WlZOcGJXUXNJSFZ6WlZSb2NtVmhaSE1wTzF4dUlDQmpiMjV6ZENCM1lYTnRVR0YwYUU5MlpYSnlhV1JsSUQwZ2RIbHdaVzltSUhkaGMyMVFZWFJvY3lBOVBUMGdKMjlpYW1WamRDY2dQeUIzWVhOdFVHRjBhSE5iZDJGemJVWnBiR1ZPWVcxbFhTQTZJSFZ1WkdWbWFXNWxaRHRjYmx4dUlDQnNaWFFnYVhOVWFXMWxiM1YwSUQwZ1ptRnNjMlU3WEc1Y2JpQWdZMjl1YzNRZ2RHRnphM002SUVGeWNtRjVQRkJ5YjIxcGMyVThkbTlwWkQ0K0lEMGdXMTA3WEc1Y2JpQWdMeThnY0hKdmJXbHpaU0JtYjNJZ2RHbHRaVzkxZEZ4dUlDQnBaaUFvZEdsdFpXOTFkQ0ErSURBcElIdGNiaUFnSUNCMFlYTnJjeTV3ZFhOb0tHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxLU0E5UGlCN1hHNGdJQ0FnSUNCelpYUlVhVzFsYjNWMEtDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ2FYTlVhVzFsYjNWMElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ2NtVnpiMngyWlNncE8xeHVJQ0FnSUNBZ2ZTd2dkR2x0Wlc5MWRDazdYRzRnSUNBZ2ZTa3BPMXh1SUNCOVhHNWNiaUFnTHk4Z2NISnZiV2x6WlNCbWIzSWdiVzlrZFd4bElHbHVhWFJwWVd4cGVtRjBhVzl1WEc0Z0lIUmhjMnR6TG5CMWMyZ29ibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTjBJR1poWTNSdmNua2dQU0IxYzJWVWFISmxZV1J6SUQ4Z2IzSjBWMkZ6YlVaaFkzUnZjbmxVYUhKbFlXUmxaQ0E2SUc5eWRGZGhjMjFHWVdOMGIzSjVPMXh1SUNBZ0lHTnZibk4wSUdOdmJtWnBaem9nVUdGeWRHbGhiRHhQY25SWFlYTnRUVzlrZFd4bFBpQTlJSHRjYmlBZ0lDQWdJR3h2WTJGMFpVWnBiR1U2SUNobWFXeGxUbUZ0WlRvZ2MzUnlhVzVuTENCelkzSnBjSFJFYVhKbFkzUnZjbms2SUhOMGNtbHVaeWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBaaUFvSVVKVlNVeEVYMFJGUmxNdVJFbFRRVUpNUlY5WFFWTk5YMVJJVWtWQlJDQW1KaUIxYzJWVWFISmxZV1J6SUNZbUlHWnBiR1ZPWVcxbExtVnVaSE5YYVhSb0tDY3VkMjl5YTJWeUxtcHpKeWtnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dWdlppQkNiRzlpSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCVlVrd3VZM0psWVhSbFQySnFaV04wVlZKTUtHNWxkeUJDYkc5aUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdWR2hwY3lCeVpYRjFhWEpsS0NrZ1puVnVZM1JwYjI0Z2FYTWdhR0Z1Wkd4bFpDQmllU0JsYzJKMWFXeGtJSEJzZFdkcGJpQjBieUJzYjJGa0lHWnBiR1VnWTI5dWRHVnVkQ0JoY3lCemRISnBibWN1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0Ym1WNGRDMXNhVzVsSUVCMGVYQmxjMk55YVhCMExXVnpiR2x1ZEM5dWJ5MXlaWEYxYVhKbExXbHRjRzl5ZEhOY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYRjFhWEpsS0NjdUwySnBibVJwYm1jdmIzSjBMWGRoYzIwdGRHaHlaV0ZrWldRdWQyOXlhMlZ5TG1wekp5bGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1hTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2UzUjVjR1U2SUNkMFpYaDBMMnBoZG1GelkzSnBjSFFuZlNrcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHWnBiR1ZPWVcxbExtVnVaSE5YYVhSb0tDY3VkMkZ6YlNjcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIZGhjMjFRWVhSb1QzWmxjbkpwWkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIzWVhOdFVHRjBhRTkyWlhKeWFXUmxPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJR052Ym5OMElIQnlaV1pwZUNBOUlIZGhjMjFRY21WbWFYaFBkbVZ5Y21sa1pTQS9QeUJ6WTNKcGNIUkVhWEpsWTNSdmNuazdYRzVjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JVUpWU1V4RVgwUkZSbE11UkVsVFFVSk1SVjlYUlVKSFVGVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gzWVhOdFJtbHNaVTVoYldVZ1BUMDlJQ2R2Y25RdGQyRnpiUzF6YVcxa0xuZGhjMjBuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3Y21WbWFYZ2dLeUFuYjNKMExYZGhjMjB0YzJsdFpDNXFjMlZ3TG5kaGMyMG5PMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDNZWE50Um1sc1pVNWhiV1VnUFQwOUlDZHZjblF0ZDJGemJTMXphVzFrTFhSb2NtVmhaR1ZrTG5kaGMyMG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQndjbVZtYVhnZ0t5QW5iM0owTFhkaGMyMHRjMmx0WkMxMGFISmxZV1JsWkM1cWMyVndMbmRoYzIwbk8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ3Y21WbWFYZ2dLeUIzWVhOdFJtbHNaVTVoYldVN1hHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjMk55YVhCMFJHbHlaV04wYjNKNUlDc2dabWxzWlU1aGJXVTdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHbG1JQ2doUWxWSlRFUmZSRVZHVXk1RVNWTkJRa3hGWDFkQlUwMWZWRWhTUlVGRUlDWW1JSFZ6WlZSb2NtVmhaSE1wSUh0Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1FteHZZaUE5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dVptbG5MbTFoYVc1VFkzSnBjSFJWY214UGNrSnNiMklnUFNCd1lYUm9MbXB2YVc0b1gxOWthWEp1WVcxbExDQW5iM0owTFhkaGMyMHRkR2h5WldGa1pXUXVhbk1uS1R0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSE5qY21sd2RGTnZkWEpqWlVOdlpHVWdQU0JnZG1GeUlHOXlkRmRoYzIxVWFISmxZV1JsWkQwa2UyWmhZM1J2Y25rdWRHOVRkSEpwYm1jb0tYMDdZRHRjYmlBZ0lDQWdJQ0FnWTI5dVptbG5MbTFoYVc1VFkzSnBjSFJWY214UGNrSnNiMklnUFNCdVpYY2dRbXh2WWloYmMyTnlhWEIwVTI5MWNtTmxRMjlrWlYwc0lIdDBlWEJsT2lBbmRHVjRkQzlxWVhaaGMyTnlhWEIwSjMwcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdaaFkzUnZjbmtvWTI5dVptbG5LUzUwYUdWdUtGeHVJQ0FnSUNBZ0lDQXZMeUIzWVhOdElHMXZaSFZzWlNCcGJtbDBhV0ZzYVhwbFpDQnpkV05qWlhOelpuVnNiSGxjYmlBZ0lDQWdJQ0FnYlc5a2RXeGxJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBibWwwYVdGc2FYcHBibWNnUFNCbVlXeHpaVHRjYmlBZ0lDQWdJQ0FnSUNCcGJtbDBhV0ZzYVhwbFpDQTlJSFJ5ZFdVN1hHNGdJQ0FnSUNBZ0lDQWdkMkZ6YlNBOUlHMXZaSFZzWlR0Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtDazdYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUM4dklIZGhjMjBnYlc5a2RXeGxJR1poYVd4bFpDQjBieUJwYm1sMGFXRnNhWHBsWEc0Z0lDQWdJQ0FnSUNoM2FHRjBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdhVzVwZEdsaGJHbDZhVzVuSUQwZ1ptRnNjMlU3WEc0Z0lDQWdJQ0FnSUNBZ1lXSnZjblJsWkNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0hkb1lYUXBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdmU2twTzF4dVhHNGdJR0YzWVdsMElGQnliMjFwYzJVdWNtRmpaU2gwWVhOcmN5azdYRzVjYmlBZ2FXWWdLR2x6VkdsdFpXOTFkQ2tnZTF4dUlDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGdWMlZpUVhOelpXMWliSGtnWW1GamEyVnVaQ0JwYm1sMGFXRnNhWHBwYm1jZ1ptRnBiR1ZrSUdSMVpTQjBieUIwYVcxbGIzVjBPaUFrZTNScGJXVnZkWFI5YlhOZ0tUdGNiaUFnZlZ4dWZUdGNibHh1Wlhod2IzSjBJR052Ym5OMElHZGxkRWx1YzNSaGJtTmxJRDBnS0NrNklFOXlkRmRoYzIxTmIyUjFiR1VnUFQ0Z2UxeHVJQ0JwWmlBb2FXNXBkR2xoYkdsNlpXUWdKaVlnZDJGemJTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCM1lYTnRPMXh1SUNCOVhHNWNiaUFnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RYWldKQmMzTmxiV0pzZVNCcGN5QnViM1FnYVc1cGRHbGhiR2w2WldRZ2VXVjBMaWNwTzF4dWZUdGNibHh1Wlhod2IzSjBJR052Ym5OMElHUnBjM0J2YzJVZ1BTQW9LVG9nZG05cFpDQTlQaUI3WEc0Z0lHbG1JQ2hwYm1sMGFXRnNhWHBsWkNBbUppQWhhVzVwZEdsaGJHbDZhVzVuSUNZbUlDRmhZbTl5ZEdWa0tTQjdYRzRnSUNBZ2FXNXBkR2xoYkdsNmFXNW5JRDBnZEhKMVpUdGNibHh1SUNBZ0lDaDNZWE50SUdGeklFOXlkRmRoYzIxVWFISmxZV1JsWkUxdlpIVnNaU2t1VUZSb2NtVmhaRDh1ZEdWeWJXbHVZWFJsUVd4c1ZHaHlaV0ZrY3lncE8xeHVJQ0FnSUhkaGMyMGdQU0IxYm1SbFptbHVaV1E3WEc1Y2JpQWdJQ0JwYm1sMGFXRnNhWHBwYm1jZ1BTQm1ZV3h6WlR0Y2JpQWdJQ0JwYm1sMGFXRnNhWHBsWkNBOUlHWmhiSE5sTzF4dUlDQWdJR0ZpYjNKMFpXUWdQU0IwY25WbE8xeHVJQ0I5WEc1OU8xeHVJaXdnSWk4dklFTnZjSGx5YVdkb2RDQW9ZeWtnVFdsamNtOXpiMlowSUVOdmNuQnZjbUYwYVc5dUxpQkJiR3dnY21sbmFIUnpJSEpsYzJWeWRtVmtMbHh1THk4Z1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFMUpWQ0JNYVdObGJuTmxMbHh1WEc1cGJYQnZjblFnZTJkbGRFbHVjM1JoYm1ObGZTQm1jbTl0SUNjdUwzZGhjMjB0Wm1GamRHOXllU2M3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JoYkd4dlkxZGhjMjFUZEhKcGJtY2dQU0FvWkdGMFlUb2djM1J5YVc1bkxDQmhiR3h2WTNNNklHNTFiV0psY2x0ZEtUb2diblZ0WW1WeUlEMCtJSHRjYmlBZ1kyOXVjM1FnZDJGemJTQTlJR2RsZEVsdWMzUmhibU5sS0NrN1hHNWNiaUFnWTI5dWMzUWdaR0YwWVV4bGJtZDBhQ0E5SUhkaGMyMHViR1Z1WjNSb1FubDBaWE5WVkVZNEtHUmhkR0VwSUNzZ01UdGNiaUFnWTI5dWMzUWdaR0YwWVU5bVpuTmxkQ0E5SUhkaGMyMHVYMjFoYkd4dll5aGtZWFJoVEdWdVozUm9LVHRjYmlBZ2QyRnpiUzV6ZEhKcGJtZFViMVZVUmpnb1pHRjBZU3dnWkdGMFlVOW1abk5sZEN3Z1pHRjBZVXhsYm1kMGFDazdYRzRnSUdGc2JHOWpjeTV3ZFhOb0tHUmhkR0ZQWm1aelpYUXBPMXh1WEc0Z0lISmxkSFZ5YmlCa1lYUmhUMlptYzJWME8xeHVmVHRjYmx4dWFXNTBaWEptWVdObElFVjRkSEpoVDNCMGFXOXVjMGhoYm1Sc1pYSWdlMXh1SUNBb2JtRnRaVG9nYzNSeWFXNW5MQ0IyWVd4MVpUb2djM1J5YVc1bktUb2dkbTlwWkR0Y2JuMWNibHh1Wlhod2IzSjBJR052Ym5OMElHbDBaWEpoZEdWRmVIUnlZVTl3ZEdsdmJuTWdQVnh1SUNBZ0lDaHZjSFJwYjI1ek9pQlNaV052Y21ROGMzUnlhVzVuTENCMWJtdHViM2R1UGl3Z2NISmxabWw0T2lCemRISnBibWNzSUhObFpXNDZJRmRsWVd0VFpYUThVbVZqYjNKa1BITjBjbWx1Wnl3Z2RXNXJibTkzYmo0K0xGeHVJQ0FnSUNCb1lXNWtiR1Z5T2lCRmVIUnlZVTl3ZEdsdmJuTklZVzVrYkdWeUtUb2dkbTlwWkNBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JRzl3ZEdsdmJuTWdQVDBnSjI5aWFtVmpkQ2NnSmlZZ2IzQjBhVzl1Y3lBaFBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYzJWbGJpNW9ZWE1vYjNCMGFXOXVjeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb0owTnBjbU4xYkdGeUlISmxabVZ5Wlc1alpTQnBiaUJ2Y0hScGIyNXpKeWs3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MyVmxiaTVoWkdRb2IzQjBhVzl1Y3lrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdUMkpxWldOMExtVnVkSEpwWlhNb2IzQjBhVzl1Y3lrdVptOXlSV0ZqYUNnb1cydGxlU3dnZG1Gc2RXVmRLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUc1aGJXVWdQU0FvY0hKbFptbDRLU0EvSUhCeVpXWnBlQ0FySUd0bGVTQTZJR3RsZVR0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdKMjlpYW1WamRDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNCcGRHVnlZWFJsUlhoMGNtRlBjSFJwYjI1ektIWmhiSFZsSUdGeklGSmxZMjl5WkR4emRISnBibWNzSUhWdWEyNXZkMjQrTENCdVlXMWxJQ3NnSnk0bkxDQnpaV1Z1TENCb1lXNWtiR1Z5S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ2RtRnNkV1VnUFQwOUlDZHpkSEpwYm1jbklIeDhJSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNCb1lXNWtiR1Z5S0c1aGJXVXNJSFpoYkhWbExuUnZVM1J5YVc1bktDa3BPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUIyWVd4MVpTQTlQVDBnSjJKdmIyeGxZVzRuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhR0Z1Wkd4bGNpaHVZVzFsTENBb2RtRnNkV1VwSUQ4Z0p6RW5JRG9nSnpBbktUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRU5oYmlkMElHaGhibVJzWlNCbGVIUnlZU0JqYjI1bWFXY2dkSGx3WlRvZ0pIdDBlWEJsYjJZZ2RtRnNkV1Y5WUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMDdYRzVjYmk4cUtseHVJQ29nWTJobFkyc2dkMlZpSUdGemMyVnRZbXg1SUVGUVNTZHpJR3hoYzNRZ1pYSnliM0lnWVc1a0lIUm9jbTkzSUdWeWNtOXlJR2xtSUdGdWVTQmxjbkp2Y2lCdlkyTjFjbkpsWkM1Y2JpQXFJRUJ3WVhKaGJTQnRaWE56WVdkbElHRWdiV1Z6YzJGblpTQjFjMlZrSUhkb1pXNGdZVzRnWlhKeWIzSWdiMk5qZFhKeVpXUXVYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0JqYUdWamEweGhjM1JGY25KdmNpQTlJQ2h0WlhOellXZGxPaUJ6ZEhKcGJtY3BPaUIyYjJsa0lEMCtJSHRjYmlBZ1kyOXVjM1FnZDJGemJTQTlJR2RsZEVsdWMzUmhibU5sS0NrN1hHNWNiaUFnWTI5dWMzUWdjM1JoWTJzZ1BTQjNZWE50TG5OMFlXTnJVMkYyWlNncE8xeHVJQ0IwY25rZ2UxeHVJQ0FnSUdOdmJuTjBJSEJoY21GdGMwOW1abk5sZENBOUlIZGhjMjB1YzNSaFkydEJiR3h2WXlnNEtUdGNiaUFnSUNCM1lYTnRMbDlQY25SSFpYUk1ZWE4wUlhKeWIzSW9jR0Z5WVcxelQyWm1jMlYwTENCd1lYSmhiWE5QWm1aelpYUWdLeUEwS1R0Y2JpQWdJQ0JqYjI1emRDQmxjbkp2Y2tOdlpHVWdQU0IzWVhOdExraEZRVkF6TWx0d1lYSmhiWE5QWm1aelpYUWdMeUEwWFR0Y2JpQWdJQ0JqYjI1emRDQmxjbkp2Y2sxbGMzTmhaMlZRYjJsdWRHVnlJRDBnZDJGemJTNUlSVUZRVlRNeVczQmhjbUZ0YzA5bVpuTmxkQ0F2SURRZ0t5QXhYVHRjYmlBZ0lDQmpiMjV6ZENCbGNuSnZjazFsYzNOaFoyVWdQU0JsY25KdmNrMWxjM05oWjJWUWIybHVkR1Z5SUQ4Z2QyRnpiUzVWVkVZNFZHOVRkSEpwYm1jb1pYSnliM0pOWlhOellXZGxVRzlwYm5SbGNpa2dPaUFuSnp0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZQ1I3YldWemMyRm5aWDBnUlZKU1QxSmZRMDlFUlRvZ0pIdGxjbkp2Y2tOdlpHVjlMQ0JGVWxKUFVsOU5SVk5UUVVkRk9pQWtlMlZ5Y205eVRXVnpjMkZuWlgxZ0tUdGNiaUFnZlNCbWFXNWhiR3g1SUh0Y2JpQWdJQ0IzWVhOdExuTjBZV05yVW1WemRHOXlaU2h6ZEdGamF5azdYRzRnSUgxY2JuMDdYRzRpTENBaUx5OGdRMjl3ZVhKcFoyaDBJQ2hqS1NCTmFXTnliM052Wm5RZ1EyOXljRzl5WVhScGIyNHVJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0dkx5Qk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdUVWxVSUV4cFkyVnVjMlV1WEc1Y2JtbHRjRzl5ZENCN1NXNW1aWEpsYm1ObFUyVnpjMmx2Ym4wZ1puSnZiU0FuYjI1dWVISjFiblJwYldVdFkyOXRiVzl1Snp0Y2JseHVhVzF3YjNKMElIdG5aWFJKYm5OMFlXNWpaWDBnWm5KdmJTQW5MaTkzWVhOdExXWmhZM1J2Y25rbk8xeHVhVzF3YjNKMElIdGhiR3h2WTFkaGMyMVRkSEpwYm1jc0lHTm9aV05yVEdGemRFVnljbTl5TENCcGRHVnlZWFJsUlhoMGNtRlBjSFJwYjI1emZTQm1jbTl0SUNjdUwzZGhjMjB0ZFhScGJITW5PMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdjMlYwVW5WdVQzQjBhVzl1Y3lBOUlDaHZjSFJwYjI1ek9pQkpibVpsY21WdVkyVlRaWE56YVc5dUxsSjFiazl3ZEdsdmJuTXBPaUJiYm5WdFltVnlMQ0J1ZFcxaVpYSmJYVjBnUFQ0Z2UxeHVJQ0JqYjI1emRDQjNZWE50SUQwZ1oyVjBTVzV6ZEdGdVkyVW9LVHRjYmlBZ2JHVjBJSEoxYms5d2RHbHZibk5JWVc1a2JHVWdQU0F3TzF4dUlDQmpiMjV6ZENCaGJHeHZZM002SUc1MWJXSmxjbHRkSUQwZ1cxMDdYRzVjYmlBZ1kyOXVjM1FnY25WdVQzQjBhVzl1Y3pvZ1NXNW1aWEpsYm1ObFUyVnpjMmx2Ymk1U2RXNVBjSFJwYjI1eklEMGdiM0IwYVc5dWN5QjhmQ0I3ZlR0Y2JseHVJQ0IwY25rZ2UxeHVJQ0FnSUdsbUlDaHZjSFJwYjI1elB5NXNiMmRUWlhabGNtbDBlVXhsZG1Wc0lEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2JpQWdJQ0FnSUhKMWJrOXdkR2x2Ym5NdWJHOW5VMlYyWlhKcGRIbE1aWFpsYkNBOUlESTdJQ0F2THlCRVpXWmhkV3gwSUhSdklIZGhjbTVwYm1kY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0Z4dUlDQWdJQ0FnSUNCMGVYQmxiMllnYjNCMGFXOXVjeTVzYjJkVFpYWmxjbWwwZVV4bGRtVnNJQ0U5UFNBbmJuVnRZbVZ5SnlCOGZDQWhUblZ0WW1WeUxtbHpTVzUwWldkbGNpaHZjSFJwYjI1ekxteHZaMU5sZG1WeWFYUjVUR1YyWld3cElIeDhYRzRnSUNBZ0lDQWdJRzl3ZEdsdmJuTXViRzluVTJWMlpYSnBkSGxNWlhabGJDQThJREFnZkh3Z2IzQjBhVzl1Y3k1c2IyZFRaWFpsY21sMGVVeGxkbVZzSUQ0Z05Da2dlMXh1SUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHQnNiMmNnYzJWeWRtVnlhWFI1SUd4bGRtVnNJR2x6SUc1dmRDQjJZV3hwWkRvZ0pIdHZjSFJwYjI1ekxteHZaMU5sZG1WeWFYUjVUR1YyWld4OVlDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLRzl3ZEdsdmJuTS9MbXh2WjFabGNtSnZjMmwwZVV4bGRtVnNJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lISjFiazl3ZEdsdmJuTXViRzluVm1WeVltOXphWFI1VEdWMlpXd2dQU0F3T3lBZ0x5OGdSR1ZtWVhWc2RDQjBieUF3WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdiM0IwYVc5dWN5NXNiMmRXWlhKaWIzTnBkSGxNWlhabGJDQWhQVDBnSjI1MWJXSmxjaWNnZkh3Z0lVNTFiV0psY2k1cGMwbHVkR1ZuWlhJb2IzQjBhVzl1Y3k1c2IyZFdaWEppYjNOcGRIbE1aWFpsYkNrcElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ2JHOW5JSFpsY21KdmMybDBlU0JzWlhabGJDQnBjeUJ1YjNRZ2RtRnNhV1E2SUNSN2IzQjBhVzl1Y3k1c2IyZFdaWEppYjNOcGRIbE1aWFpsYkgxZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9iM0IwYVc5dWN6OHVkR1Z5YldsdVlYUmxJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lISjFiazl3ZEdsdmJuTXVkR1Z5YldsdVlYUmxJRDBnWm1Gc2MyVTdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2JHVjBJSFJoWjBSaGRHRlBabVp6WlhRZ1BTQXdPMXh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpQeTUwWVdjZ0lUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4dUlDQWdJQ0FnZEdGblJHRjBZVTltWm5ObGRDQTlJR0ZzYkc5alYyRnpiVk4wY21sdVp5aHZjSFJwYjI1ekxuUmhaeXdnWVd4c2IyTnpLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlkVzVQY0hScGIyNXpTR0Z1Wkd4bElEMGdkMkZ6YlM1ZlQzSjBRM0psWVhSbFVuVnVUM0IwYVc5dWN5aGNiaUFnSUNBZ0lDQWdjblZ1VDNCMGFXOXVjeTVzYjJkVFpYWmxjbWwwZVV4bGRtVnNJU3dnY25WdVQzQjBhVzl1Y3k1c2IyZFdaWEppYjNOcGRIbE1aWFpsYkNFc0lDRWhjblZ1VDNCMGFXOXVjeTUwWlhKdGFXNWhkR1VoTENCMFlXZEVZWFJoVDJabWMyVjBLVHRjYmlBZ0lDQnBaaUFvY25WdVQzQjBhVzl1YzBoaGJtUnNaU0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdZMmhsWTJ0TVlYTjBSWEp5YjNJb0owTmhibHhjSjNRZ1kzSmxZWFJsSUhKMWJpQnZjSFJwYjI1ekxpY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2h2Y0hScGIyNXpQeTVsZUhSeVlTQWhQVDBnZFc1a1pXWnBibVZrS1NCN1hHNGdJQ0FnSUNCcGRHVnlZWFJsUlhoMGNtRlBjSFJwYjI1ektHOXdkR2x2Ym5NdVpYaDBjbUVzSUNjbkxDQnVaWGNnVjJWaGExTmxkRHhTWldOdmNtUThjM1J5YVc1bkxDQjFibXR1YjNkdVBqNG9LU3dnS0d0bGVTd2dkbUZzZFdVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhMlY1UkdGMFlVOW1abk5sZENBOUlHRnNiRzlqVjJGemJWTjBjbWx1WnloclpYa3NJR0ZzYkc5amN5azdYRzRnSUNBZ0lDQWdJR052Ym5OMElIWmhiSFZsUkdGMFlVOW1abk5sZENBOUlHRnNiRzlqVjJGemJWTjBjbWx1WnloMllXeDFaU3dnWVd4c2IyTnpLVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9kMkZ6YlM1ZlQzSjBRV1JrVW5WdVEyOXVabWxuUlc1MGNua29jblZ1VDNCMGFXOXVjMGhoYm1Sc1pTd2dhMlY1UkdGMFlVOW1abk5sZEN3Z2RtRnNkV1ZFWVhSaFQyWm1jMlYwS1NBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHTm9aV05yVEdGemRFVnljbTl5S0dCRFlXNG5kQ0J6WlhRZ1lTQnlkVzRnWTI5dVptbG5JR1Z1ZEhKNU9pQWtlMnRsZVgwZ0xTQWtlM1poYkhWbGZTNWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJRnR5ZFc1UGNIUnBiMjV6U0dGdVpHeGxMQ0JoYkd4dlkzTmRPMXh1SUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ2FXWWdLSEoxYms5d2RHbHZibk5JWVc1a2JHVWdJVDA5SURBcElIdGNiaUFnSUNBZ0lIZGhjMjB1WDA5eWRGSmxiR1ZoYzJWU2RXNVBjSFJwYjI1ektISjFiazl3ZEdsdmJuTklZVzVrYkdVcE8xeHVJQ0FnSUgxY2JpQWdJQ0JoYkd4dlkzTXVabTl5UldGamFDaGhiR3h2WXlBOVBpQjNZWE50TGw5bWNtVmxLR0ZzYkc5aktTazdYRzRnSUNBZ2RHaHliM2NnWlR0Y2JpQWdmVnh1ZlR0Y2JpSXNJQ0l2THlCRGIzQjVjbWxuYUhRZ0tHTXBJRTFwWTNKdmMyOW1kQ0JEYjNKd2IzSmhkR2x2Ymk0Z1FXeHNJSEpwWjJoMGN5QnlaWE5sY25abFpDNWNiaTh2SUV4cFkyVnVjMlZrSUhWdVpHVnlJSFJvWlNCTlNWUWdUR2xqWlc1elpTNWNibHh1YVcxd2IzSjBJSHRKYm1abGNtVnVZMlZUWlhOemFXOXVmU0JtY205dElDZHZibTU0Y25WdWRHbHRaUzFqYjIxdGIyNG5PMXh1WEc1cGJYQnZjblFnZTJkbGRFbHVjM1JoYm1ObGZTQm1jbTl0SUNjdUwzZGhjMjB0Wm1GamRHOXllU2M3WEc1cGJYQnZjblFnZTJGc2JHOWpWMkZ6YlZOMGNtbHVaeXdnWTJobFkydE1ZWE4wUlhKeWIzSXNJR2wwWlhKaGRHVkZlSFJ5WVU5d2RHbHZibk45SUdaeWIyMGdKeTR2ZDJGemJTMTFkR2xzY3ljN1hHNWNibU52Ym5OMElHZGxkRWR5WVhCb1QzQjBhVzE2WVhScGIyNU1aWFpsYkNBOUlDaG5jbUZ3YUU5d2RHbHRhWHBoZEdsdmJreGxkbVZzT2lCemRISnBibWQ4ZFc1cmJtOTNiaWs2SUc1MWJXSmxjaUE5UGlCN1hHNGdJSE4zYVhSamFDQW9aM0poY0doUGNIUnBiV2w2WVhScGIyNU1aWFpsYkNrZ2UxeHVJQ0FnSUdOaGMyVWdKMlJwYzJGaWJHVmtKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQXdPMXh1SUNBZ0lHTmhjMlVnSjJKaGMybGpKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQXhPMXh1SUNBZ0lHTmhjMlVnSjJWNGRHVnVaR1ZrSnpwY2JpQWdJQ0FnSUhKbGRIVnliaUF5TzF4dUlDQWdJR05oYzJVZ0oyRnNiQ2M2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdPVGs3WEc0Z0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2loZ2RXNXpkWEJ3YjNKMFpXUWdaM0poY0dnZ2IzQjBhVzFwZW1GMGFXOXVJR3hsZG1Wc09pQWtlMmR5WVhCb1QzQjBhVzFwZW1GMGFXOXVUR1YyWld4OVlDazdYRzRnSUgxY2JuMDdYRzVjYm1OdmJuTjBJR2RsZEVWNFpXTjFkR2x2YmsxdlpHVWdQU0FvWlhobFkzVjBhVzl1VFc5a1pUb2dKM05sY1hWbGJuUnBZV3duZkNkd1lYSmhiR3hsYkNjcE9pQnVkVzFpWlhJZ1BUNGdlMXh1SUNCemQybDBZMmdnS0dWNFpXTjFkR2x2YmsxdlpHVXBJSHRjYmlBZ0lDQmpZWE5sSUNkelpYRjFaVzUwYVdGc0p6cGNiaUFnSUNBZ0lISmxkSFZ5YmlBd08xeHVJQ0FnSUdOaGMyVWdKM0JoY21Gc2JHVnNKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQXhPMXh1SUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUhWdWMzVndjRzl5ZEdWa0lHVjRaV04xZEdsdmJpQnRiMlJsT2lBa2UyVjRaV04xZEdsdmJrMXZaR1Y5WUNrN1hHNGdJSDFjYm4wN1hHNWNibU52Ym5OMElHRndjR1Z1WkVSbFptRjFiSFJQY0hScGIyNXpJRDBnS0c5d2RHbHZibk02SUVsdVptVnlaVzVqWlZObGMzTnBiMjR1VTJWemMybHZiazl3ZEdsdmJuTXBPaUIyYjJsa0lEMCtJSHRjYmlBZ2FXWWdLQ0Z2Y0hScGIyNXpMbVY0ZEhKaEtTQjdYRzRnSUNBZ2IzQjBhVzl1Y3k1bGVIUnlZU0E5SUh0OU8xeHVJQ0I5WEc0Z0lHbG1JQ2doYjNCMGFXOXVjeTVsZUhSeVlTNXpaWE56YVc5dUtTQjdYRzRnSUNBZ2IzQjBhVzl1Y3k1bGVIUnlZUzV6WlhOemFXOXVJRDBnZTMwN1hHNGdJSDFjYmlBZ1kyOXVjM1FnYzJWemMybHZiaUE5SUc5d2RHbHZibk11WlhoMGNtRXVjMlZ6YzJsdmJpQmhjeUJTWldOdmNtUThjM1J5YVc1bkxDQnpkSEpwYm1jK08xeHVJQ0JwWmlBb0lYTmxjM05wYjI0dWRYTmxYMjl5ZEY5dGIyUmxiRjlpZVhSbGMxOWthWEpsWTNSc2VTa2dlMXh1SUNBZ0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXNWxlSFF0YkdsdVpTQmpZVzFsYkdOaGMyVmNiaUFnSUNCelpYTnphVzl1TG5WelpWOXZjblJmYlc5a1pXeGZZbmwwWlhOZlpHbHlaV04wYkhrZ1BTQW5NU2M3WEc0Z0lIMWNibHh1SUNBdkx5QnBaaUIxYzJsdVp5QktVMFZRSUhkcGRHZ2dWMlZpUjFCVkxDQmhiSGRoZVhNZ1pHbHpZV0pzWlNCdFpXMXZjbmtnY0dGMGRHVnlibHh1SUNCcFppQW9iM0IwYVc5dWN5NWxlR1ZqZFhScGIyNVFjbTkyYVdSbGNuTWdKaVpjYmlBZ0lDQWdJRzl3ZEdsdmJuTXVaWGhsWTNWMGFXOXVVSEp2ZG1sa1pYSnpMbk52YldVb1pYQWdQVDRnS0hSNWNHVnZaaUJsY0NBOVBUMGdKM04wY21sdVp5Y2dQeUJsY0NBNklHVndMbTVoYldVcElEMDlQU0FuZDJWaVozQjFKeWtwSUh0Y2JpQWdJQ0J2Y0hScGIyNXpMbVZ1WVdKc1pVMWxiVkJoZEhSbGNtNGdQU0JtWVd4elpUdGNiaUFnZlZ4dWZUdGNibHh1WTI5dWMzUWdjMlYwUlhobFkzVjBhVzl1VUhKdmRtbGtaWEp6SUQxY2JpQWdJQ0FvYzJWemMybHZiazl3ZEdsdmJuTklZVzVrYkdVNklHNTFiV0psY2l3Z1pYaGxZM1YwYVc5dVVISnZkbWxrWlhKek9pQnlaV0ZrYjI1c2VTQkpibVpsY21WdVkyVlRaWE56YVc5dUxrVjRaV04xZEdsdmJsQnliM1pwWkdWeVEyOXVabWxuVzEwc1hHNGdJQ0FnSUdGc2JHOWpjem9nYm5WdFltVnlXMTBwT2lCMmIybGtJRDArSUh0Y2JpQWdJQ0FnSUdadmNpQW9ZMjl1YzNRZ1pYQWdiMllnWlhobFkzVjBhVzl1VUhKdmRtbGtaWEp6S1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JsY0U1aGJXVWdQU0IwZVhCbGIyWWdaWEFnUFQwOUlDZHpkSEpwYm1jbklEOGdaWEFnT2lCbGNDNXVZVzFsTzF4dVhHNGdJQ0FnSUNBZ0lDOHZJR05vWldOcklFVlFJRzVoYldWY2JpQWdJQ0FnSUNBZ2MzZHBkR05vSUNobGNFNWhiV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkNGJtNXdZV05ySnpwY2JpQWdJQ0FnSUNBZ0lDQWdJR1Z3VG1GdFpTQTlJQ2RZVGs1UVFVTkxKenRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnSUNBZ0lHTmhjMlVnSjNkbFltNXVKenBjYmlBZ0lDQWdJQ0FnSUNBZ0lHVndUbUZ0WlNBOUlDZFhSVUpPVGljN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdWd0lDRTlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjNaV0p1Yms5d2RHbHZibk1nUFNCbGNDQmhjeUJKYm1abGNtVnVZMlZUWlhOemFXOXVMbGRsWWs1T1JYaGxZM1YwYVc5dVVISnZkbWxrWlhKUGNIUnBiMjQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoM1pXSnViazl3ZEdsdmJuTS9MbVJsZG1salpWUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JyWlhsRVlYUmhUMlptYzJWMElEMGdZV3hzYjJOWFlYTnRVM1J5YVc1bktDZGtaWFpwWTJWVWVYQmxKeXdnWVd4c2IyTnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjJZV3gxWlVSaGRHRlBabVp6WlhRZ1BTQmhiR3h2WTFkaGMyMVRkSEpwYm1jb2QyVmlibTVQY0hScGIyNXpMbVJsZG1salpWUjVjR1VzSUdGc2JHOWpjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHZGxkRWx1YzNSaGJtTmxLQ2t1WDA5eWRFRmtaRk5sYzNOcGIyNURiMjVtYVdkRmJuUnllU2h6WlhOemFXOXVUM0IwYVc5dWMwaGhibVJzWlN3Z2EyVjVSR0YwWVU5bVpuTmxkQ3dnZG1Gc2RXVkVZWFJoVDJabWMyVjBLU0FoUFQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvWUVOaGJpZDBJSE5sZENCaElITmxjM05wYjI0Z1kyOXVabWxuSUdWdWRISjVPaUFuWkdWMmFXTmxWSGx3WlNjZ0xTQWtlM2RsWW01dVQzQjBhVzl1Y3k1a1pYWnBZMlZVZVhCbGZTNWdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hkbFltNXVUM0IwYVc5dWN6OHViblZ0VkdoeVpXRmtjeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnVkVzFVYUhKbFlXUnpJRDBnZDJWaWJtNVBjSFJwYjI1ekxtNTFiVlJvY21WaFpITTdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnU25WemRDQnBaMjV2Y21VZ2FXNTJZV3hwWkNCM1pXSnViazl3ZEdsdmJuTXViblZ0VkdoeVpXRmtjeTVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUc1MWJWUm9jbVZoWkhNZ0lUMGdKMjUxYldKbGNpY2dmSHdnSVU1MWJXSmxjaTVwYzBsdWRHVm5aWElvYm5WdFZHaHlaV0ZrY3lrZ2ZId2diblZ0VkdoeVpXRmtjeUE4SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzUxYlZSb2NtVmhaSE1nUFNBd08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCclpYbEVZWFJoVDJabWMyVjBJRDBnWVd4c2IyTlhZWE50VTNSeWFXNW5LQ2R1ZFcxVWFISmxZV1J6Snl3Z1lXeHNiMk56S1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IyWVd4MVpVUmhkR0ZQWm1aelpYUWdQU0JoYkd4dlkxZGhjMjFUZEhKcGJtY29iblZ0VkdoeVpXRmtjeTUwYjFOMGNtbHVaeWdwTENCaGJHeHZZM01wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaG5aWFJKYm5OMFlXNWpaU2dwTGw5UGNuUkJaR1JUWlhOemFXOXVRMjl1Wm1sblJXNTBjbmtvYzJWemMybHZiazl3ZEdsdmJuTklZVzVrYkdVc0lHdGxlVVJoZEdGUFptWnpaWFFzSUhaaGJIVmxSR0YwWVU5bVpuTmxkQ2tnSVQwOVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTm9aV05yVEdGemRFVnljbTl5S0dCRFlXNG5kQ0J6WlhRZ1lTQnpaWE56YVc5dUlHTnZibVpwWnlCbGJuUnllVG9nSjI1MWJWUm9jbVZoWkhNbklDMGdKSHQzWldKdWJrOXdkR2x2Ym5NdWJuVnRWR2h5WldGa2MzMHVZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoM1pXSnViazl3ZEdsdmJuTS9MbkJ2ZDJWeVVISmxabVZ5Wlc1alpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHdGxlVVJoZEdGUFptWnpaWFFnUFNCaGJHeHZZMWRoYzIxVGRISnBibWNvSjNCdmQyVnlVSEpsWm1WeVpXNWpaU2NzSUdGc2JHOWpjeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkbUZzZFdWRVlYUmhUMlptYzJWMElEMGdZV3hzYjJOWFlYTnRVM1J5YVc1bktIZGxZbTV1VDNCMGFXOXVjeTV3YjNkbGNsQnlaV1psY21WdVkyVXNJR0ZzYkc5amN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dkbGRFbHVjM1JoYm1ObEtDa3VYMDl5ZEVGa1pGTmxjM05wYjI1RGIyNW1hV2RGYm5SeWVTaHpaWE56YVc5dVQzQjBhVzl1YzBoaGJtUnNaU3dnYTJWNVJHRjBZVTltWm5ObGRDd2dkbUZzZFdWRVlYUmhUMlptYzJWMEtTQWhQVDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lFTmhiaWQwSUhObGRDQmhJSE5sYzNOcGIyNGdZMjl1Wm1sbklHVnVkSEo1T2lBbmNHOTNaWEpRY21WbVpYSmxibU5sSnlBdElDUjdkMlZpYm01UGNIUnBiMjV6TG5CdmQyVnlVSEpsWm1WeVpXNWpaWDB1WUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQmpZWE5sSUNkM1pXSm5jSFVuT2x4dUlDQWdJQ0FnSUNBZ0lDQWdaWEJPWVcxbElEMGdKMHBUSnp0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnWlhBZ0lUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElIZGxZbWR3ZFU5d2RHbHZibk1nUFNCbGNDQmhjeUJKYm1abGNtVnVZMlZUWlhOemFXOXVMbGRsWWtkd2RVVjRaV04xZEdsdmJsQnliM1pwWkdWeVQzQjBhVzl1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2QyVmlaM0IxVDNCMGFXOXVjejh1Y0hKbFptVnljbVZrVEdGNWIzVjBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIZGxZbWR3ZFU5d2RHbHZibk11Y0hKbFptVnljbVZrVEdGNWIzVjBJQ0U5UFNBblRrTklWeWNnSmlZZ2QyVmlaM0IxVDNCMGFXOXVjeTV3Y21WbVpYSnlaV1JNWVhsdmRYUWdJVDA5SUNkT1NGZERKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCd2NtVm1aWEp5WldSTVlYbHZkWFFnYlhWemRDQmlaU0JsYVhSb1pYSWdKMDVEU0ZjbklHOXlJQ2RPU0ZkREp6b2dKSHQzWldKbmNIVlBjSFJwYjI1ekxuQnlaV1psY25KbFpFeGhlVzkxZEgxZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2EyVjVSR0YwWVU5bVpuTmxkQ0E5SUdGc2JHOWpWMkZ6YlZOMGNtbHVaeWduY0hKbFptVnljbVZrVEdGNWIzVjBKeXdnWVd4c2IyTnpLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQjJZV3gxWlVSaGRHRlBabVp6WlhRZ1BTQmhiR3h2WTFkaGMyMVRkSEpwYm1jb2QyVmlaM0IxVDNCMGFXOXVjeTV3Y21WbVpYSnlaV1JNWVhsdmRYUXNJR0ZzYkc5amN5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dkbGRFbHVjM1JoYm1ObEtDa3VYMDl5ZEVGa1pGTmxjM05wYjI1RGIyNW1hV2RGYm5SeWVTaHpaWE56YVc5dVQzQjBhVzl1YzBoaGJtUnNaU3dnYTJWNVJHRjBZVTltWm5ObGRDd2dkbUZzZFdWRVlYUmhUMlptYzJWMEtTQWhQVDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lFTmhiaWQwSUhObGRDQmhJSE5sYzNOcGIyNGdZMjl1Wm1sbklHVnVkSEo1T2lBbmNISmxabVZ5Y21Wa1RHRjViM1YwSnlBdElDUjdkMlZpWjNCMVQzQjBhVzl1Y3k1d2NtVm1aWEp5WldSTVlYbHZkWFI5TG1BcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNBZ0lDQWdZMkZ6WlNBbmQyRnpiU2M2WEc0Z0lDQWdJQ0FnSUNBZ1kyRnpaU0FuWTNCMUp6cGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4dUlDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRzV2ZENCemRYQndiM0owWldRZ1pYaGxZM1YwYVc5dUlIQnliM1pwWkdWeU9pQWtlMlZ3VG1GdFpYMWdLVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdWd1RtRnRaVVJoZEdGUFptWnpaWFFnUFNCaGJHeHZZMWRoYzIxVGRISnBibWNvWlhCT1lXMWxMQ0JoYkd4dlkzTXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb1oyVjBTVzV6ZEdGdVkyVW9LUzVmVDNKMFFYQndaVzVrUlhobFkzVjBhVzl1VUhKdmRtbGtaWElvYzJWemMybHZiazl3ZEdsdmJuTklZVzVrYkdVc0lHVndUbUZ0WlVSaGRHRlBabVp6WlhRcElDRTlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMmhsWTJ0TVlYTjBSWEp5YjNJb1lFTmhiaWQwSUdGd2NHVnVaQ0JsZUdWamRYUnBiMjRnY0hKdmRtbGtaWEk2SUNSN1pYQk9ZVzFsZlM1Z0tUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMDdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQnpaWFJUWlhOemFXOXVUM0IwYVc5dWN5QTlJQ2h2Y0hScGIyNXpQem9nU1c1bVpYSmxibU5sVTJWemMybHZiaTVUWlhOemFXOXVUM0IwYVc5dWN5azZJRnR1ZFcxaVpYSXNJRzUxYldKbGNsdGRYU0E5UGlCN1hHNGdJR052Ym5OMElIZGhjMjBnUFNCblpYUkpibk4wWVc1alpTZ3BPMXh1SUNCc1pYUWdjMlZ6YzJsdmJrOXdkR2x2Ym5OSVlXNWtiR1VnUFNBd08xeHVJQ0JqYjI1emRDQmhiR3h2WTNNNklHNTFiV0psY2x0ZElEMGdXMTA3WEc1Y2JpQWdZMjl1YzNRZ2MyVnpjMmx2Yms5d2RHbHZibk02SUVsdVptVnlaVzVqWlZObGMzTnBiMjR1VTJWemMybHZiazl3ZEdsdmJuTWdQU0J2Y0hScGIyNXpJSHg4SUh0OU8xeHVJQ0JoY0hCbGJtUkVaV1poZFd4MFQzQjBhVzl1Y3loelpYTnphVzl1VDNCMGFXOXVjeWs3WEc1Y2JpQWdkSEo1SUh0Y2JpQWdJQ0JqYjI1emRDQm5jbUZ3YUU5d2RHbHRhWHBoZEdsdmJreGxkbVZzSUQwZ1oyVjBSM0poY0doUGNIUnBiWHBoZEdsdmJreGxkbVZzS0hObGMzTnBiMjVQY0hScGIyNXpMbWR5WVhCb1QzQjBhVzFwZW1GMGFXOXVUR1YyWld3Z1B6OGdKMkZzYkNjcE8xeHVJQ0FnSUdOdmJuTjBJR1Y0WldOMWRHbHZiazF2WkdVZ1BTQm5aWFJGZUdWamRYUnBiMjVOYjJSbEtITmxjM05wYjI1UGNIUnBiMjV6TG1WNFpXTjFkR2x2YmsxdlpHVWdQejhnSjNObGNYVmxiblJwWVd3bktUdGNiaUFnSUNCamIyNXpkQ0JzYjJkSlpFUmhkR0ZQWm1aelpYUWdQVnh1SUNBZ0lDQWdJQ0IwZVhCbGIyWWdjMlZ6YzJsdmJrOXdkR2x2Ym5NdWJHOW5TV1FnUFQwOUlDZHpkSEpwYm1jbklEOGdZV3hzYjJOWFlYTnRVM1J5YVc1bktITmxjM05wYjI1UGNIUnBiMjV6TG14dlowbGtMQ0JoYkd4dlkzTXBJRG9nTUR0Y2JseHVJQ0FnSUdOdmJuTjBJR3h2WjFObGRtVnlhWFI1VEdWMlpXd2dQU0J6WlhOemFXOXVUM0IwYVc5dWN5NXNiMmRUWlhabGNtbDBlVXhsZG1Wc0lEOC9JREk3SUNBdkx5QkVaV1poZFd4MElIUnZJRElnTFNCM1lYSnVhVzVuWEc0Z0lDQWdhV1lnS0NGT2RXMWlaWEl1YVhOSmJuUmxaMlZ5S0d4dloxTmxkbVZ5YVhSNVRHVjJaV3dwSUh4OElHeHZaMU5sZG1WeWFYUjVUR1YyWld3Z1BDQXdJSHg4SUd4dloxTmxkbVZ5YVhSNVRHVjJaV3dnUGlBMEtTQjdYRzRnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lHeHZaeUJ6WlhKMlpYSnBkSGtnYkdWMlpXd2dhWE1nYm05MElIWmhiR2xrT2lBa2UyeHZaMU5sZG1WeWFYUjVUR1YyWld4OVlDazdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1kyOXVjM1FnYkc5blZtVnlZbTl6YVhSNVRHVjJaV3dnUFNCelpYTnphVzl1VDNCMGFXOXVjeTVzYjJkV1pYSmliM05wZEhsTVpYWmxiQ0EvUHlBd095QWdMeThnUkdWbVlYVnNkQ0IwYnlBd0lDMGdkbVZ5WW05elpWeHVJQ0FnSUdsbUlDZ2hUblZ0WW1WeUxtbHpTVzUwWldkbGNpaHNiMmRXWlhKaWIzTnBkSGxNWlhabGJDa2dmSHdnYkc5blZtVnlZbTl6YVhSNVRHVjJaV3dnUENBd0lIeDhJR3h2WjFabGNtSnZjMmwwZVV4bGRtVnNJRDRnTkNrZ2UxeHVJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCc2IyY2dkbVZ5WW05emFYUjVJR3hsZG1Wc0lHbHpJRzV2ZENCMllXeHBaRG9nSkh0c2IyZFdaWEppYjNOcGRIbE1aWFpsYkgxZ0tUdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0J2Y0hScGJXbDZaV1JOYjJSbGJFWnBiR1ZRWVhSb1QyWm1jMlYwSUQwZ2RIbHdaVzltSUhObGMzTnBiMjVQY0hScGIyNXpMbTl3ZEdsdGFYcGxaRTF2WkdWc1JtbHNaVkJoZEdnZ1BUMDlJQ2R6ZEhKcGJtY25JRDljYmlBZ0lDQWdJQ0FnWVd4c2IyTlhZWE50VTNSeWFXNW5LSE5sYzNOcGIyNVBjSFJwYjI1ekxtOXdkR2x0YVhwbFpFMXZaR1ZzUm1sc1pWQmhkR2dzSUdGc2JHOWpjeWtnT2x4dUlDQWdJQ0FnSUNBd08xeHVYRzRnSUNBZ2MyVnpjMmx2Yms5d2RHbHZibk5JWVc1a2JHVWdQU0IzWVhOdExsOVBjblJEY21WaGRHVlRaWE56YVc5dVQzQjBhVzl1Y3loY2JpQWdJQ0FnSUNBZ1ozSmhjR2hQY0hScGJXbDZZWFJwYjI1TVpYWmxiQ3dnSVNGelpYTnphVzl1VDNCMGFXOXVjeTVsYm1GaWJHVkRjSFZOWlcxQmNtVnVZU3dnSVNGelpYTnphVzl1VDNCMGFXOXVjeTVsYm1GaWJHVk5aVzFRWVhSMFpYSnVMQ0JsZUdWamRYUnBiMjVOYjJSbExGeHVJQ0FnSUNBZ0lDQWhJWE5sYzNOcGIyNVBjSFJwYjI1ekxtVnVZV0pzWlZCeWIyWnBiR2x1Wnl3Z01Dd2diRzluU1dSRVlYUmhUMlptYzJWMExDQnNiMmRUWlhabGNtbDBlVXhsZG1Wc0xDQnNiMmRXWlhKaWIzTnBkSGxNWlhabGJDeGNiaUFnSUNBZ0lDQWdiM0IwYVcxcGVtVmtUVzlrWld4R2FXeGxVR0YwYUU5bVpuTmxkQ2s3WEc0Z0lDQWdhV1lnS0hObGMzTnBiMjVQY0hScGIyNXpTR0Z1Wkd4bElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNCamFHVmphMHhoYzNSRmNuSnZjaWduUTJGdVhGd25kQ0JqY21WaGRHVWdjMlZ6YzJsdmJpQnZjSFJwYjI1ekxpY3BPMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2h6WlhOemFXOXVUM0IwYVc5dWN5NWxlR1ZqZFhScGIyNVFjbTkyYVdSbGNuTXBJSHRjYmlBZ0lDQWdJSE5sZEVWNFpXTjFkR2x2YmxCeWIzWnBaR1Z5Y3loelpYTnphVzl1VDNCMGFXOXVjMGhoYm1Sc1pTd2djMlZ6YzJsdmJrOXdkR2x2Ym5NdVpYaGxZM1YwYVc5dVVISnZkbWxrWlhKekxDQmhiR3h2WTNNcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHpaWE56YVc5dVQzQjBhVzl1Y3k1bWNtVmxSR2x0Wlc1emFXOXVUM1psY25KcFpHVnpLU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tHTnZibk4wSUZ0dVlXMWxMQ0IyWVd4MVpWMGdiMllnVDJKcVpXTjBMbVZ1ZEhKcFpYTW9jMlZ6YzJsdmJrOXdkR2x2Ym5NdVpuSmxaVVJwYldWdWMybHZiazkyWlhKeWFXUmxjeWtwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnVZVzFsSUNFOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnWm5KbFpTQmthVzFsYm5OcGIyNGdiM1psY25KcFpHVWdibUZ0WlNCdGRYTjBJR0psSUdFZ2MzUnlhVzVuT2lBa2UyNWhiV1Y5WUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUIyWVd4MVpTQWhQVDBnSjI1MWJXSmxjaWNnZkh3Z0lVNTFiV0psY2k1cGMwbHVkR1ZuWlhJb2RtRnNkV1VwSUh4OElIWmhiSFZsSUR3Z01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhnWm5KbFpTQmthVzFsYm5OcGIyNGdiM1psY25KcFpHVWdkbUZzZFdVZ2JYVnpkQ0JpWlNCaElHNXZiaTF1WldkaGRHbDJaU0JwYm5SbFoyVnlPaUFrZTNaaGJIVmxmV0FwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHTnZibk4wSUc1aGJXVlBabVp6WlhRZ1BTQmhiR3h2WTFkaGMyMVRkSEpwYm1jb2JtRnRaU3dnWVd4c2IyTnpLVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIZGhjMjB1WDA5eWRFRmtaRVp5WldWRWFXMWxibk5wYjI1UGRtVnljbWxrWlNoelpYTnphVzl1VDNCMGFXOXVjMGhoYm1Sc1pTd2dibUZ0WlU5bVpuTmxkQ3dnZG1Gc2RXVXBJQ0U5UFNBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWTJobFkydE1ZWE4wUlhKeWIzSW9ZRU5oYmlkMElITmxkQ0JoSUdaeVpXVWdaR2x0Wlc1emFXOXVJRzkyWlhKeWFXUmxPaUFrZTI1aGJXVjlJQzBnSkh0MllXeDFaWDB1WUNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9jMlZ6YzJsdmJrOXdkR2x2Ym5NdVpYaDBjbUVnSVQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1SUNBZ0lDQWdhWFJsY21GMFpVVjRkSEpoVDNCMGFXOXVjeWh6WlhOemFXOXVUM0IwYVc5dWN5NWxlSFJ5WVN3Z0p5Y3NJRzVsZHlCWFpXRnJVMlYwUEZKbFkyOXlaRHh6ZEhKcGJtY3NJSFZ1YTI1dmQyNCtQaWdwTENBb2EyVjVMQ0IyWVd4MVpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JyWlhsRVlYUmhUMlptYzJWMElEMGdZV3hzYjJOWFlYTnRVM1J5YVc1bktHdGxlU3dnWVd4c2IyTnpLVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdkbUZzZFdWRVlYUmhUMlptYzJWMElEMGdZV3hzYjJOWFlYTnRVM1J5YVc1bktIWmhiSFZsTENCaGJHeHZZM01wTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2gzWVhOdExsOVBjblJCWkdSVFpYTnphVzl1UTI5dVptbG5SVzUwY25rb2MyVnpjMmx2Yms5d2RHbHZibk5JWVc1a2JHVXNJR3RsZVVSaGRHRlBabVp6WlhRc0lIWmhiSFZsUkdGMFlVOW1abk5sZENrZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmphR1ZqYTB4aGMzUkZjbkp2Y2loZ1EyRnVKM1FnYzJWMElHRWdjMlZ6YzJsdmJpQmpiMjVtYVdjZ1pXNTBjbms2SUNSN2EyVjVmU0F0SUNSN2RtRnNkV1Y5TG1BcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z1czTmxjM05wYjI1UGNIUnBiMjV6U0dGdVpHeGxMQ0JoYkd4dlkzTmRPMXh1SUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ2FXWWdLSE5sYzNOcGIyNVBjSFJwYjI1elNHRnVaR3hsSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0IzWVhOdExsOVBjblJTWld4bFlYTmxVMlZ6YzJsdmJrOXdkR2x2Ym5Nb2MyVnpjMmx2Yms5d2RHbHZibk5JWVc1a2JHVXBPMXh1SUNBZ0lIMWNiaUFnSUNCaGJHeHZZM011Wm05eVJXRmphQ2hoYkd4dll5QTlQaUIzWVhOdExsOW1jbVZsS0dGc2JHOWpLU2s3WEc0Z0lDQWdkR2h5YjNjZ1pUdGNiaUFnZlZ4dWZUdGNiaUlzSUNJdkx5QkRiM0I1Y21sbmFIUWdLR01wSUUxcFkzSnZjMjltZENCRGIzSndiM0poZEdsdmJpNGdRV3hzSUhKcFoyaDBjeUJ5WlhObGNuWmxaQzVjYmk4dklFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQk5TVlFnVEdsalpXNXpaUzVjYmx4dWFXMXdiM0owSUh0VVpXNXpiM0o5SUdaeWIyMGdKMjl1Ym5oeWRXNTBhVzFsTFdOdmJXMXZiaWM3WEc1Y2JpOHZJRlJvYVhNZ1ptbHNaU0JwYm1Oc2RXUmxjeUJqYjIxdGIyNGdaR1ZtYVc1cGRHbHZibk11SUZSb1pYa2daRzhnVGs5VUlHaGhkbVVnWkdWd1pXNWtaVzVqZVNCdmJpQjBhR1VnVjJWaVFYTnpaVzFpYkhrZ2FXNXpkR0Z1WTJVdVhHNWNiaThxS2x4dUlDb2dRMjl3YVdWa0lHWnliMjBnVDA1T1dDQmtaV1pwYm1sMGFXOXVMaUJWYzJVZ2RHaHBjeUIwYnlCa2NtOXdJR1JsY0dWdVpHVnVZM2tnSjI5dWJuaGZjSEp2ZEc4bklIUnZJR1JsWTNKbFlYTmxJR052YlhCcGJHVmtJQzVxY3lCbWFXeGxJSE5wZW1VdVhHNGdLaTljYm1WNGNHOXlkQ0JqYjI1emRDQmxiblZ0SUVSaGRHRlVlWEJsSUh0Y2JpQWdkVzVrWldacGJtVmtJRDBnTUN4Y2JpQWdabXh2WVhRZ1BTQXhMRnh1SUNCMWFXNTBPQ0E5SURJc1hHNGdJR2x1ZERnZ1BTQXpMRnh1SUNCMWFXNTBNVFlnUFNBMExGeHVJQ0JwYm5ReE5pQTlJRFVzWEc0Z0lHbHVkRE15SUQwZ05peGNiaUFnYVc1ME5qUWdQU0EzTEZ4dUlDQnpkSEpwYm1jZ1BTQTRMRnh1SUNCaWIyOXNJRDBnT1N4Y2JpQWdabXh2WVhReE5pQTlJREV3TEZ4dUlDQmtiM1ZpYkdVZ1BTQXhNU3hjYmlBZ2RXbHVkRE15SUQwZ01USXNYRzRnSUhWcGJuUTJOQ0E5SURFekxGeHVJQ0JqYjIxd2JHVjROalFnUFNBeE5DeGNiaUFnWTI5dGNHeGxlREV5T0NBOUlERTFMRnh1SUNCaVpteHZZWFF4TmlBOUlERTJYRzU5WEc1Y2JpOHFLbHh1SUNvZ1RXRndJSE4wY21sdVp5QjBaVzV6YjNJZ1pHRjBZU0IwYnlCbGJuVnRJSFpoYkhWbFhHNGdLaTljYm1WNGNHOXlkQ0JqYjI1emRDQjBaVzV6YjNKRVlYUmhWSGx3WlZOMGNtbHVaMVJ2Ulc1MWJTQTlJQ2gwZVhCbE9pQnpkSEpwYm1jcE9pQkVZWFJoVkhsd1pTQTlQaUI3WEc0Z0lITjNhWFJqYUNBb2RIbHdaU2tnZTF4dUlDQWdJR05oYzJVZ0oybHVkRGduT2x4dUlDQWdJQ0FnY21WMGRYSnVJRVJoZEdGVWVYQmxMbWx1ZERnN1hHNGdJQ0FnWTJGelpTQW5kV2x1ZERnbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUVSaGRHRlVlWEJsTG5WcGJuUTRPMXh1SUNBZ0lHTmhjMlVnSjJKdmIyd25PbHh1SUNBZ0lDQWdjbVYwZFhKdUlFUmhkR0ZVZVhCbExtSnZiMnc3WEc0Z0lDQWdZMkZ6WlNBbmFXNTBNVFluT2x4dUlDQWdJQ0FnY21WMGRYSnVJRVJoZEdGVWVYQmxMbWx1ZERFMk8xeHVJQ0FnSUdOaGMyVWdKM1ZwYm5ReE5pYzZYRzRnSUNBZ0lDQnlaWFIxY200Z1JHRjBZVlI1Y0dVdWRXbHVkREUyTzF4dUlDQWdJR05oYzJVZ0oybHVkRE15SnpwY2JpQWdJQ0FnSUhKbGRIVnliaUJFWVhSaFZIbHdaUzVwYm5Rek1qdGNiaUFnSUNCallYTmxJQ2QxYVc1ME16SW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlFUmhkR0ZVZVhCbExuVnBiblF6TWp0Y2JpQWdJQ0JqWVhObElDZG1iRzloZERFMkp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCRVlYUmhWSGx3WlM1bWJHOWhkREUyTzF4dUlDQWdJR05oYzJVZ0oyWnNiMkYwTXpJbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SUVSaGRHRlVlWEJsTG1ac2IyRjBPMXh1SUNBZ0lHTmhjMlVnSjJac2IyRjBOalFuT2x4dUlDQWdJQ0FnY21WMGRYSnVJRVJoZEdGVWVYQmxMbVJ2ZFdKc1pUdGNiaUFnSUNCallYTmxJQ2R6ZEhKcGJtY25PbHh1SUNBZ0lDQWdjbVYwZFhKdUlFUmhkR0ZVZVhCbExuTjBjbWx1Wnp0Y2JpQWdJQ0JqWVhObElDZHBiblEyTkNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnUkdGMFlWUjVjR1V1YVc1ME5qUTdYRzRnSUNBZ1kyRnpaU0FuZFdsdWREWTBKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQkVZWFJoVkhsd1pTNTFhVzUwTmpRN1hHNWNiaUFnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLR0IxYm5OMWNIQnZjblJsWkNCa1lYUmhJSFI1Y0dVNklDUjdkSGx3WlgxZ0tUdGNiaUFnZlZ4dWZUdGNibHh1THlvcVhHNGdLaUJOWVhBZ1pXNTFiU0IyWVd4MVpTQjBieUJ6ZEhKcGJtY2dkR1Z1YzI5eUlHUmhkR0ZjYmlBcUwxeHVaWGh3YjNKMElHTnZibk4wSUhSbGJuTnZja1JoZEdGVWVYQmxSVzUxYlZSdlUzUnlhVzVuSUQwZ0tIUjVjR1ZRY205MGJ6b2dSR0YwWVZSNWNHVXBPaUJVWlc1emIzSXVWSGx3WlNBOVBpQjdYRzRnSUhOM2FYUmphQ0FvZEhsd1pWQnliM1J2S1NCN1hHNGdJQ0FnWTJGelpTQkVZWFJoVkhsd1pTNXBiblE0T2x4dUlDQWdJQ0FnY21WMGRYSnVJQ2RwYm5RNEp6dGNiaUFnSUNCallYTmxJRVJoZEdGVWVYQmxMblZwYm5RNE9seHVJQ0FnSUNBZ2NtVjBkWEp1SUNkMWFXNTBPQ2M3WEc0Z0lDQWdZMkZ6WlNCRVlYUmhWSGx3WlM1aWIyOXNPbHh1SUNBZ0lDQWdjbVYwZFhKdUlDZGliMjlzSnp0Y2JpQWdJQ0JqWVhObElFUmhkR0ZVZVhCbExtbHVkREUyT2x4dUlDQWdJQ0FnY21WMGRYSnVJQ2RwYm5ReE5pYzdYRzRnSUNBZ1kyRnpaU0JFWVhSaFZIbHdaUzUxYVc1ME1UWTZYRzRnSUNBZ0lDQnlaWFIxY200Z0ozVnBiblF4TmljN1hHNGdJQ0FnWTJGelpTQkVZWFJoVkhsd1pTNXBiblF6TWpwY2JpQWdJQ0FnSUhKbGRIVnliaUFuYVc1ME16SW5PMXh1SUNBZ0lHTmhjMlVnUkdGMFlWUjVjR1V1ZFdsdWRETXlPbHh1SUNBZ0lDQWdjbVYwZFhKdUlDZDFhVzUwTXpJbk8xeHVJQ0FnSUdOaGMyVWdSR0YwWVZSNWNHVXVabXh2WVhReE5qcGNiaUFnSUNBZ0lISmxkSFZ5YmlBblpteHZZWFF4TmljN1hHNGdJQ0FnWTJGelpTQkVZWFJoVkhsd1pTNW1iRzloZERwY2JpQWdJQ0FnSUhKbGRIVnliaUFuWm14dllYUXpNaWM3WEc0Z0lDQWdZMkZ6WlNCRVlYUmhWSGx3WlM1a2IzVmliR1U2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdKMlpzYjJGME5qUW5PMXh1SUNBZ0lHTmhjMlVnUkdGMFlWUjVjR1V1YzNSeWFXNW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlDZHpkSEpwYm1jbk8xeHVJQ0FnSUdOaGMyVWdSR0YwWVZSNWNHVXVhVzUwTmpRNlhHNGdJQ0FnSUNCeVpYUjFjbTRnSjJsdWREWTBKenRjYmlBZ0lDQmpZWE5sSUVSaGRHRlVlWEJsTG5WcGJuUTJORHBjYmlBZ0lDQWdJSEpsZEhWeWJpQW5kV2x1ZERZMEp6dGNibHh1SUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUhWdWMzVndjRzl5ZEdWa0lHUmhkR0VnZEhsd1pUb2dKSHQwZVhCbFVISnZkRzk5WUNrN1hHNGdJSDFjYm4wN1hHNWNiaThxS2x4dUlDb2daMlYwSUhSbGJuTnZjaUJsYkdWdFpXNTBJSE5wZW1VZ2FXNGdZbmwwWlhNZ1lua2dkR2hsSUdkcGRtVnVJR1JoZEdFZ2RIbHdaVnh1SUNvZ1FISmxkSFZ5Ym5NZ2MybDZaU0JwYmlCcGJuUmxaMlZ5SUc5eUlIVnVaR1ZtYVc1bFpDQnBaaUIwYUdVZ1pHRjBZU0IwZVhCbElHbHpJRzV2ZENCemRYQndiM0owWldSY2JpQXFMMXh1Wlhod2IzSjBJR052Ym5OMElHZGxkRlJsYm5OdmNrVnNaVzFsYm5SVGFYcGxJRDBnS0dSaGRHVlVlWEJsT2lCdWRXMWlaWElwT2lCdWRXMWlaWEo4WEc0Z0lDQWdkVzVrWldacGJtVmtJRDArSUZ0MWJtUmxabWx1WldRc0lEUXNJREVzSURFc0lESXNJRElzSURRc0lEZ3NJSFZ1WkdWbWFXNWxaQ3dnTVN3Z01pd2dPQ3dnTkN3Z09Dd2dkVzVrWldacGJtVmtMQ0IxYm1SbFptbHVaV1FzSUhWdVpHVm1hVzVsWkYxYlpHRjBaVlI1Y0dWZE8xeHVYRzR2S2lwY2JpQXFJR2RsZENCMGVYQmxaQ0JoY25KaGVTQmpiMjV6ZEhKMVkzUnZjaUJpZVNCMGFHVWdaMmwyWlc0Z2RHVnVjMjl5SUhSNWNHVmNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJSFJsYm5OdmNsUjVjR1ZVYjFSNWNHVmtRWEp5WVhsRGIyNXpkSEoxWTNSdmNpQTlJQ2gwZVhCbE9pQlVaVzV6YjNJdVZIbHdaU2s2SUVac2IyRjBNekpCY25KaGVVTnZibk4wY25WamRHOXlmRlZwYm5RNFFYSnlZWGxEYjI1emRISjFZM1J2Y254Y2JpQWdJQ0JKYm5RNFFYSnlZWGxEYjI1emRISjFZM1J2Y254VmFXNTBNVFpCY25KaGVVTnZibk4wY25WamRHOXlmRWx1ZERFMlFYSnlZWGxEYjI1emRISjFZM1J2Y254SmJuUXpNa0Z5Y21GNVEyOXVjM1J5ZFdOMGIzSjhRbWxuU1c1ME5qUkJjbkpoZVVOdmJuTjBjblZqZEc5eWZGeHVJQ0FnSUZWcGJuUTRRWEp5WVhsRGIyNXpkSEoxWTNSdmNueEdiRzloZERZMFFYSnlZWGxEYjI1emRISjFZM1J2Y254VmFXNTBNekpCY25KaGVVTnZibk4wY25WamRHOXlmRUpwWjFWcGJuUTJORUZ5Y21GNVEyOXVjM1J5ZFdOMGIzSWdQVDRnZTF4dUlDQWdJQ0FnYzNkcGRHTm9JQ2gwZVhCbEtTQjdYRzRnSUNBZ0lDQWdJR05oYzJVZ0oyWnNiMkYwTVRZbk9seHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlZhVzUwTVRaQmNuSmhlVHRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5abXh2WVhRek1pYzZYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRVpzYjJGME16SkJjbkpoZVR0Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuZFdsdWREZ25PbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJWYVc1ME9FRnljbUY1TzF4dUlDQWdJQ0FnSUNCallYTmxJQ2RwYm5RNEp6cGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdTVzUwT0VGeWNtRjVPMXh1SUNBZ0lDQWdJQ0JqWVhObElDZDFhVzUwTVRZbk9seHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlZhVzUwTVRaQmNuSmhlVHRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5hVzUwTVRZbk9seHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQkpiblF4TmtGeWNtRjVPMXh1SUNBZ0lDQWdJQ0JqWVhObElDZHBiblF6TWljNlhHNGdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlFbHVkRE15UVhKeVlYazdYRzRnSUNBZ0lDQWdJR05oYzJVZ0oySnZiMnduT2x4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCVmFXNTBPRUZ5Y21GNU8xeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkbWJHOWhkRFkwSnpwY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1JteHZZWFEyTkVGeWNtRjVPMXh1SUNBZ0lDQWdJQ0JqWVhObElDZDFhVzUwTXpJbk9seHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQlZhVzUwTXpKQmNuSmhlVHRjYmlBZ0lDQWdJQ0FnWTJGelpTQW5hVzUwTmpRbk9seHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQkNhV2RKYm5RMk5FRnljbUY1TzF4dUlDQWdJQ0FnSUNCallYTmxJQ2QxYVc1ME5qUW5PbHh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJDYVdkVmFXNTBOalJCY25KaGVUdGNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REcGNiaUFnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZSFZ1YzNWd2NHOXlkR1ZrSUhSNWNHVTZJQ1I3ZEhsd1pYMWdLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1WEc0dktpcGNiaUFxSUUxaGNDQnpkSEpwYm1jZ2JHOW5JR3hsZG1Wc0lIUnZJR2x1ZEdWblpYSWdkbUZzZFdWY2JpQXFMMXh1Wlhod2IzSjBJR052Ym5OMElHeHZaMHhsZG1Wc1UzUnlhVzVuVkc5RmJuVnRJRDBnS0d4dloweGxkbVZzUHpvZ0ozWmxjbUp2YzJVbmZDZHBibVp2SjN3bmQyRnlibWx1WnlkOEoyVnljbTl5SjN3blptRjBZV3duS1RvZ2JuVnRZbVZ5SUQwK0lIdGNiaUFnYzNkcGRHTm9JQ2hzYjJkTVpYWmxiQ2tnZTF4dUlDQWdJR05oYzJVZ0ozWmxjbUp2YzJVbk9seHVJQ0FnSUNBZ2NtVjBkWEp1SURBN1hHNGdJQ0FnWTJGelpTQW5hVzVtYnljNlhHNGdJQ0FnSUNCeVpYUjFjbTRnTVR0Y2JpQWdJQ0JqWVhObElDZDNZWEp1YVc1bkp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlBeU8xeHVJQ0FnSUdOaGMyVWdKMlZ5Y205eUp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlBek8xeHVJQ0FnSUdOaGMyVWdKMlpoZEdGc0p6cGNiaUFnSUNBZ0lISmxkSFZ5YmlBME8xeHVJQ0FnSUdSbFptRjFiSFE2WEc0Z0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZSFZ1YzNWd2NHOXlkR1ZrSUd4dloyZHBibWNnYkdWMlpXdzZJQ1I3Ykc5blRHVjJaV3g5WUNrN1hHNGdJSDFjYm4wN1hHNWNiaThxS2x4dUlDb2dRMmhsWTJzZ2QyaGxkR2hsY2lCMGFHVWdaMmwyWlc0Z2RHVnVjMjl5SUhSNWNHVWdhWE1nYzNWd2NHOXlkR1ZrSUdKNUlFZFFWU0JpZFdabVpYSmNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJR2x6UjNCMVFuVm1abVZ5VTNWd2NHOXlkR1ZrVkhsd1pTQTlJQ2gwZVhCbE9pQlVaVzV6YjNJdVZIbHdaU2s2SUhSNWNHVWdhWE1nVkdWdWMyOXlMa2R3ZFVKMVptWmxja1JoZEdGVWVYQmxjeUE5UGlCMGVYQmxJRDA5UFNBblpteHZZWFF6TWljZ2ZIeGNiaUFnSUNCMGVYQmxJRDA5UFNBbmFXNTBNekluSUh4OElIUjVjR1VnUFQwOUlDZHBiblEyTkNjZ2ZId2dkSGx3WlNBOVBUMGdKMkp2YjJ3bklIeDhJSFI1Y0dVZ1BUMDlJQ2RtYkc5aGRERTJKeUI4ZkNCMGVYQmxJRDA5UFNBbmRXbHVkRE15Snp0Y2JseHVMeW9xWEc0Z0tpQk5ZWEFnYzNSeWFXNW5JR1JoZEdFZ2JHOWpZWFJwYjI0Z2RHOGdhVzUwWldkbGNpQjJZV3gxWlZ4dUlDb3ZYRzVsZUhCdmNuUWdZMjl1YzNRZ1pHRjBZVXh2WTJGMGFXOXVVM1J5YVc1blZHOUZiblZ0SUQwZ0tHeHZZMkYwYVc5dU9pQlVaVzV6YjNJdVJHRjBZVXh2WTJGMGFXOXVLVG9nYm5WdFltVnlJRDArSUh0Y2JpQWdjM2RwZEdOb0lDaHNiMk5oZEdsdmJpa2dlMXh1SUNBZ0lHTmhjMlVnSjI1dmJtVW5PbHh1SUNBZ0lDQWdjbVYwZFhKdUlEQTdYRzRnSUNBZ1kyRnpaU0FuWTNCMUp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlBeE8xeHVJQ0FnSUdOaGMyVWdKMk53ZFMxd2FXNXVaV1FuT2x4dUlDQWdJQ0FnY21WMGRYSnVJREk3WEc0Z0lDQWdZMkZ6WlNBbmRHVjRkSFZ5WlNjNlhHNGdJQ0FnSUNCeVpYUjFjbTRnTXp0Y2JpQWdJQ0JqWVhObElDZG5jSFV0WW5WbVptVnlKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQTBPMXh1SUNBZ0lHUmxabUYxYkhRNlhHNGdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWUhWdWMzVndjRzl5ZEdWa0lHUmhkR0VnYkc5allYUnBiMjQ2SUNSN2JHOWpZWFJwYjI1OVlDazdYRzRnSUgxY2JuMDdYRzVjYmk4cUtseHVJQ29nVFdGd0lHbHVkR1ZuWlhJZ1pHRjBZU0JzYjJOaGRHbHZiaUIwYnlCemRISnBibWNnZG1Gc2RXVmNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJR1JoZEdGTWIyTmhkR2x2YmtWdWRXMVViMU4wY21sdVp5QTlJQ2hzYjJOaGRHbHZiam9nYm5WdFltVnlLVG9nVkdWdWMyOXlMa1JoZEdGTWIyTmhkR2x2Ym54MWJtUmxabWx1WldRZ1BUNWNiaUFnSUNBb1d5ZHViMjVsSnl3Z0oyTndkU2NzSUNkamNIVXRjR2x1Ym1Wa0p5d2dKM1JsZUhSMWNtVW5MQ0FuWjNCMUxXSjFabVpsY2lkZElHRnpJR052Ym5OMEtWdHNiMk5oZEdsdmJsMDdYRzRpTENBaUx5OGdRMjl3ZVhKcFoyaDBJQ2hqS1NCTmFXTnliM052Wm5RZ1EyOXljRzl5WVhScGIyNHVJRUZzYkNCeWFXZG9kSE1nY21WelpYSjJaV1F1WEc0dkx5Qk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdUVWxVSUV4cFkyVnVjMlV1WEc1Y2JtbHRjRzl5ZENCN1JXNTJMQ0JKYm1abGNtVnVZMlZUWlhOemFXOXVMQ0JVWlc1emIzSjlJR1p5YjIwZ0oyOXVibmh5ZFc1MGFXMWxMV052YlcxdmJpYzdYRzVjYm1sdGNHOXlkQ0I3VTJWeWFXRnNhWHBoWW14bFRXOWtaV3hrWVhSaExDQlRaWEpwWVd4cGVtRmliR1ZUWlhOemFXOXVUV1YwWVdSaGRHRXNJRk5sY21saGJHbDZZV0pzWlZSbGJuTnZjazFsZEdGa1lYUmhMQ0JVWlc1emIzSk5aWFJoWkdGMFlYMGdabkp2YlNBbkxpOXdjbTk0ZVMxdFpYTnpZV2RsY3ljN1hHNXBiWEJ2Y25RZ2UzTmxkRkoxYms5d2RHbHZibk45SUdaeWIyMGdKeTR2Y25WdUxXOXdkR2x2Ym5Nbk8xeHVhVzF3YjNKMElIdHpaWFJUWlhOemFXOXVUM0IwYVc5dWMzMGdabkp2YlNBbkxpOXpaWE56YVc5dUxXOXdkR2x2Ym5Nbk8xeHVhVzF3YjNKMElIdGtZWFJoVEc5allYUnBiMjVUZEhKcGJtZFViMFZ1ZFcwc0lHZGxkRlJsYm5OdmNrVnNaVzFsYm5SVGFYcGxMQ0JwYzBkd2RVSjFabVpsY2xOMWNIQnZjblJsWkZSNWNHVXNJR3h2WjB4bGRtVnNVM1J5YVc1blZHOUZiblZ0TENCMFpXNXpiM0pFWVhSaFZIbHdaVVZ1ZFcxVWIxTjBjbWx1Wnl3Z2RHVnVjMjl5UkdGMFlWUjVjR1ZUZEhKcGJtZFViMFZ1ZFcwc0lIUmxibk52Y2xSNWNHVlViMVI1Y0dWa1FYSnlZWGxEYjI1emRISjFZM1J2Y24wZ1puSnZiU0FuTGk5M1lYTnRMV052YlcxdmJpYzdYRzVwYlhCdmNuUWdlMmRsZEVsdWMzUmhibU5sZlNCbWNtOXRJQ2N1TDNkaGMyMHRabUZqZEc5eWVTYzdYRzVwYlhCdmNuUWdlMkZzYkc5alYyRnpiVk4wY21sdVp5d2dZMmhsWTJ0TVlYTjBSWEp5YjNKOUlHWnliMjBnSnk0dmQyRnpiUzExZEdsc2N5YzdYRzVjYm14bGRDQnZjblJGYm5aSmJtbDBhV0ZzYVhwbFpDQTlJR1poYkhObE8xeHVYRzR2S2lwY2JpQXFJR2RsZENCMGFHVWdhVzV3ZFhRdmIzVjBjSFYwSUdOdmRXNTBJRzltSUhSb1pTQnpaWE56YVc5dUxseHVJQ29nUUhCaGNtRnRJSE5sYzNOcGIyNUlZVzVrYkdVZ2RHaGxJR2hoYm1Sc1pTQnlaWEJ5WlhObGJuUnBibWNnZEdobElITmxjM05wYjI0dUlITm9iM1ZzWkNCaVpTQnViMjR0ZW1WeWJ5NWNiaUFxSUVCeVpYUjFjbTV6SUdFZ2RIVndiR1VnYVc1amJIVmthVzVuSURJZ2JuVnRZbVZ5Y3l3Z2NtVndjbVZ6Wlc1MGFXNW5JSFJvWlNCcGJuQjFkQ0JqYjNWdWRDQmhibVFnYjNWMGNIVjBJR052ZFc1MExseHVJQ292WEc1amIyNXpkQ0JuWlhSVFpYTnphVzl1U1c1d2RYUlBkWFJ3ZFhSRGIzVnVkQ0E5SUNoelpYTnphVzl1U0dGdVpHeGxPaUJ1ZFcxaVpYSXBPaUJiYm5WdFltVnlMQ0J1ZFcxaVpYSmRJRDArSUh0Y2JpQWdZMjl1YzNRZ2QyRnpiU0E5SUdkbGRFbHVjM1JoYm1ObEtDazdYRzRnSUdOdmJuTjBJSE4wWVdOcklEMGdkMkZ6YlM1emRHRmphMU5oZG1Vb0tUdGNiaUFnZEhKNUlIdGNiaUFnSUNCamIyNXpkQ0JrWVhSaFQyWm1jMlYwSUQwZ2QyRnpiUzV6ZEdGamEwRnNiRzlqS0RncE8xeHVJQ0FnSUdOdmJuTjBJR1Z5Y205eVEyOWtaU0E5SUhkaGMyMHVYMDl5ZEVkbGRFbHVjSFYwVDNWMGNIVjBRMjkxYm5Rb2MyVnpjMmx2YmtoaGJtUnNaU3dnWkdGMFlVOW1abk5sZEN3Z1pHRjBZVTltWm5ObGRDQXJJRFFwTzF4dUlDQWdJR2xtSUNobGNuSnZja052WkdVZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUdOb1pXTnJUR0Z6ZEVWeWNtOXlLQ2REWVc1Y1hDZDBJR2RsZENCelpYTnphVzl1SUdsdWNIVjBMMjkxZEhCMWRDQmpiM1Z1ZEM0bktUdGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRnQzWVhOdExraEZRVkF6TWx0a1lYUmhUMlptYzJWMElDOGdORjBzSUhkaGMyMHVTRVZCVURNeVcyUmhkR0ZQWm1aelpYUWdMeUEwSUNzZ01WMWRPMXh1SUNCOUlHWnBibUZzYkhrZ2UxeHVJQ0FnSUhkaGMyMHVjM1JoWTJ0U1pYTjBiM0psS0hOMFlXTnJLVHRjYmlBZ2ZWeHVmVHRjYmx4dUx5b3FYRzRnS2lCcGJtbDBhV0ZzYVhwbElFOVNWQ0JsYm5acGNtOXViV1Z1ZEM1Y2JpQXFJRUJ3WVhKaGJTQnVkVzFVYUhKbFlXUnpJRk5sZEVkc2IySmhiRWx1ZEhKaFQzQk9kVzFVYUhKbFlXUnpLRzUxYlZSb2NtVmhaSE1wWEc0Z0tpQkFjR0Z5WVcwZ2JHOW5aMmx1WjB4bGRtVnNJRU55WldGMFpVVnVkaWh6ZEdGMGFXTmZZMkZ6ZER4UGNuUk1iMmRuYVc1blRHVjJaV3crS0d4dloyZHBibWRmYkdWMlpXd3BLVnh1SUNvdlhHNWpiMjV6ZENCcGJtbDBUM0owSUQwZ0tHNTFiVlJvY21WaFpITTZJRzUxYldKbGNpd2diRzluWjJsdVoweGxkbVZzT2lCdWRXMWlaWElwT2lCMmIybGtJRDArSUh0Y2JpQWdZMjl1YzNRZ1pYSnliM0pEYjJSbElEMGdaMlYwU1c1emRHRnVZMlVvS1M1ZlQzSjBTVzVwZENodWRXMVVhSEpsWVdSekxDQnNiMmRuYVc1blRHVjJaV3dwTzF4dUlDQnBaaUFvWlhKeWIzSkRiMlJsSUNFOVBTQXdLU0I3WEc0Z0lDQWdZMmhsWTJ0TVlYTjBSWEp5YjNJb0owTmhibHhjSjNRZ2FXNXBkR2xoYkdsNlpTQnZibTU0Y25WdWRHbHRaUzRuS1R0Y2JpQWdmVnh1ZlR0Y2JseHVMeW9xWEc0Z0tpQnBiblJwWVd4cGVtVWdjblZ1ZEdsdFpTQmxiblpwY205dWJXVnVkQzVjYmlBcUlFQndZWEpoYlNCbGJuWWdjR0Z6YzJWa0lHbHVJSFJvWlNCbGJuWnBjbTl1YldWdWRDQmpiMjVtYVdjZ2IySnFaV04wTGx4dUlDb3ZYRzVsZUhCdmNuUWdZMjl1YzNRZ2FXNXBkRkoxYm5ScGJXVWdQU0JoYzNsdVl5aGxiblk2SUVWdWRpazZJRkJ5YjIxcGMyVThkbTlwWkQ0Z1BUNGdlMXh1SUNBdkx5QnBibWwwSUU5U1ZGeHVJQ0JwYm1sMFQzSjBLR1Z1ZGk1M1lYTnRMbTUxYlZSb2NtVmhaSE1oTENCc2IyZE1aWFpsYkZOMGNtbHVaMVJ2Ulc1MWJTaGxibll1Ykc5blRHVjJaV3dwS1R0Y2JseHVJQ0JwWmlBb0lVSlZTVXhFWDBSRlJsTXVSRWxUUVVKTVJWOVhSVUpIVUZVcElIdGNiaUFnSUNBdkx5QnBibWwwSUVwVFJWQWdhV1lnWVhaaGFXeGhZbXhsWEc1Y2JpQWdJQ0F2THlCbGMyeHBiblF0WkdsellXSnNaUzF1WlhoMExXeHBibVVnUUhSNWNHVnpZM0pwY0hRdFpYTnNhVzUwTDI1dkxYSmxjWFZwY21VdGFXMXdiM0owY3l3Z1FIUjVjR1Z6WTNKcGNIUXRaWE5zYVc1MEwyNXZMWFpoY2kxeVpYRjFhWEpsYzF4dUlDQWdJR052Ym5OMElHbHVhWFJLYzJWd0lEMGdjbVZ4ZFdseVpTZ25MaTlxYzJWd0wybHVhWFFuS1M1cGJtbDBPMXh1SUNBZ0lHRjNZV2wwSUdsdWFYUktjMlZ3S0dkbGRFbHVjM1JoYm1ObEtDa3NJR1Z1ZGlrN1hHNGdJSDFjYmx4dUlDQnZjblJGYm5aSmJtbDBhV0ZzYVhwbFpDQTlJSFJ5ZFdVN1hHNTlPMXh1WEc0dktpcGNiaUFxSUhaaGJHbGtJR1JoZEdFZ2JHOWpZWFJwYjI1eklHWnZjaUJwYm5CMWRDOXZkWFJ3ZFhRZ2RHVnVjMjl5Y3k1Y2JpQXFMMXh1ZEhsd1pTQlRkWEJ3YjNKMFpXUlVaVzV6YjNKRVlYUmhURzlqWVhScGIyNUdiM0pKYm5CMWRFOTFkSEIxZENBOUlDZGpjSFVuZkNkamNIVXRjR2x1Ym1Wa0ozd25aM0IxTFdKMVptWmxjaWM3WEc1Y2JuUjVjR1VnU1U5Q2FXNWthVzVuVTNSaGRHVWdQU0I3WEc0Z0lDOHFLbHh1SUNBZ0tpQjBhR1VnYUdGdVpHeGxJRzltSUVsUElHSnBibVJwYm1jdVhHNGdJQ0FxTDF4dUlDQnlaV0ZrYjI1c2VTQm9ZVzVrYkdVNklHNTFiV0psY2p0Y2JseHVJQ0F2S2lwY2JpQWdJQ29nZEdobElIQnlaV1psY25KbFpDQnNiMk5oZEdsdmJpQm1iM0lnWldGamFDQnZkWFJ3ZFhRZ2RHVnVjMjl5TGx4dUlDQWdLbHh1SUNBZ0tpQjJZV3gxWlNCcGN5QnZibVVnYjJZZ0oyTndkU2NzSUNkamNIVXRjR2x1Ym1Wa0p5d2dKMmR3ZFMxaWRXWm1aWEluTGx4dUlDQWdLaTljYmlBZ2NtVmhaRzl1YkhrZ2IzVjBjSFYwVUhKbFptVnljbVZrVEc5allYUnBiMjV6T2lCeVpXRmtiMjVzZVNCVGRYQndiM0owWldSVVpXNXpiM0pFWVhSaFRHOWpZWFJwYjI1R2IzSkpibkIxZEU5MWRIQjFkRnRkTzF4dVhHNGdJQzhxS2x4dUlDQWdLaUJsYm5WdElIWmhiSFZsSUc5bUlIUm9aU0J3Y21WbVpYSnlaV1FnYkc5allYUnBiMjRnWm05eUlHVmhZMmdnYjNWMGNIVjBJSFJsYm5OdmNpNWNiaUFnSUNvdlhHNGdJSEpsWVdSdmJteDVJRzkxZEhCMWRGQnlaV1psY25KbFpFeHZZMkYwYVc5dWMwVnVZMjlrWldRNklISmxZV1J2Ym14NUlHNTFiV0psY2x0ZE8xeHVmVHRjYmx4dUx5b3FYRzRnS2lBZ2RIVndiR1VnWld4bGJXVnVkSE1nWVhKbE9pQkpibVpsY21WdVkyVlRaWE56YVc5dUlFbEVPeUJwYm5CMWRFNWhiV1Z6VlZSR09FVnVZMjlrWldRN0lHOTFkSEIxZEU1aGJXVnpWVlJHT0VWdVkyOWtaV1E3SUdKcGJtUnBibWRUZEdGMFpWeHVJQ292WEc1MGVYQmxJRk5sYzNOcGIyNU5aWFJoWkdGMFlTQTlJRnRjYmlBZ2FXNW1aWEpsYm1ObFUyVnpjMmx2Ymtsa09pQnVkVzFpWlhJc0lHbHVjSFYwVG1GdFpYTlZWRVk0Ulc1amIyUmxaRG9nYm5WdFltVnlXMTBzSUc5MWRIQjFkRTVoYldWelZWUkdPRVZ1WTI5a1pXUTZJRzUxYldKbGNsdGRMRnh1SUNCaWFXNWthVzVuVTNSaGRHVTZJRWxQUW1sdVpHbHVaMU4wWVhSbGZHNTFiR3hjYmwwN1hHNWNibU52Ym5OMElHRmpkR2wyWlZObGMzTnBiMjV6SUQwZ2JtVjNJRTFoY0R4dWRXMWlaWElzSUZObGMzTnBiMjVOWlhSaFpHRjBZVDRvS1R0Y2JseHVaWGh3YjNKMElHTnZibk4wSUdselQzSjBSVzUyU1c1cGRHbGhiR2w2WldRZ1BTQW9LVG9nWW05dmJHVmhiaUE5UGlCdmNuUkZiblpKYm1sMGFXRnNhWHBsWkR0Y2JseHVMeW9xWEc0Z0tpQmhiR3h2WTJGMFpTQjBhR1VnYldWdGIzSjVJR0Z1WkNCdFpXMWpjSGtnZEdobElHMXZaR1ZzSUdKNWRHVnpMQ0J3Y21Wd1lYSnBibWNnWm05eUlHTnlaV0YwYVc1bklHRnVJR2x1YzNSaGJtTmxJRzltSUVsdVptVnlaVzVqWlZObGMzTnBiMjR1WEc0Z0tpQkFjbVYwZFhKdWN5QmhJREl0Wld4bGJXVnVkSE1nZEhWd2JHVWdMU0IwYUdVZ2NHOXBiblJsY2lCaGJtUWdjMmw2WlNCdlppQjBhR1VnWVd4c2IyTmhkR1ZrSUdKMVptWmxjbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnWTNKbFlYUmxVMlZ6YzJsdmJrRnNiRzlqWVhSbElEMGdLRzF2WkdWc09pQlZhVzUwT0VGeWNtRjVLVG9nVzI1MWJXSmxjaXdnYm5WdFltVnlYU0E5UGlCN1hHNGdJR052Ym5OMElIZGhjMjBnUFNCblpYUkpibk4wWVc1alpTZ3BPMXh1SUNCamIyNXpkQ0J0YjJSbGJFUmhkR0ZQWm1aelpYUWdQU0IzWVhOdExsOXRZV3hzYjJNb2JXOWtaV3d1WW5sMFpVeGxibWQwYUNrN1hHNGdJR2xtSUNodGIyUmxiRVJoZEdGUFptWnpaWFFnUFQwOUlEQXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lFTmhiaWQwSUdOeVpXRjBaU0JoSUhObGMzTnBiMjR1SUdaaGFXeGxaQ0IwYnlCaGJHeHZZMkYwWlNCaElHSjFabVpsY2lCdlppQnphWHBsSUNSN2JXOWtaV3d1WW5sMFpVeGxibWQwYUgwdVlDazdYRzRnSUgxY2JpQWdkMkZ6YlM1SVJVRlFWVGd1YzJWMEtHMXZaR1ZzTENCdGIyUmxiRVJoZEdGUFptWnpaWFFwTzF4dUlDQnlaWFIxY200Z1cyMXZaR1ZzUkdGMFlVOW1abk5sZEN3Z2JXOWtaV3d1WW5sMFpVeGxibWQwYUYwN1hHNTlPMXh1WEc0dktpcGNiaUFxSUdOeVpXRjBaU0JoYmlCcGJtWmxjbVZ1WTJVZ2MyVnpjMmx2YmlCMWMybHVaeUIwYUdVZ2NISmxjR0Z5WldRZ1luVm1abVZ5SUdOdmJuUmhhVzVwYm1jZ2RHaGxJRzF2WkdWc0lHUmhkR0V1WEc0Z0tpQkFjR0Z5WVcwZ2JXOWtaV3hFWVhSaElHRWdNaTFsYkdWdFpXNTBjeUIwZFhCc1pTQmpiMjUwWVdsdWFXNW5JSFJvWlNCd2IybHVkR1Z5SUdGdVpDQnphWHBsSUc5bUlIUm9aU0J0YjJSbGJDQmtZWFJoSUdKMVptWmxjaTVjYmlBcUlFQndZWEpoYlNCdmNIUnBiMjV6SUdGdUlHOXdkR2x2Ym1Gc0lITmxjM05wYjI0Z2IzQjBhVzl1Y3lCdlltcGxZM1F1WEc0Z0tpQkFjbVYwZFhKdWN5QmhJRE10Wld4bGJXVnVkSE1nZEhWd2JHVWdZMjl1ZEdGcGJtbHVaeUJiYzJWemMybHZiaUJvWVc1a2JHVXNJR2x1Y0hWMElHNWhiV1Z6TENCdmRYUndkWFFnYm1GdFpYTmRYRzRnS2k5Y2JtVjRjRzl5ZENCamIyNXpkQ0JqY21WaGRHVlRaWE56YVc5dVJtbHVZV3hwZW1VZ1BWeHVJQ0FnSUNodGIyUmxiRVJoZEdFNklGTmxjbWxoYkdsNllXSnNaVTF2WkdWc1pHRjBZU3dnYjNCMGFXOXVjejg2SUVsdVptVnlaVzVqWlZObGMzTnBiMjR1VTJWemMybHZiazl3ZEdsdmJuTXBPaUJUWlhKcFlXeHBlbUZpYkdWVFpYTnphVzl1VFdWMFlXUmhkR0VnUFQ0Z2UxeHVJQ0FnSUNBZ1kyOXVjM1FnZDJGemJTQTlJR2RsZEVsdWMzUmhibU5sS0NrN1hHNWNiaUFnSUNBZ0lHeGxkQ0J6WlhOemFXOXVTR0Z1Wkd4bElEMGdNRHRjYmlBZ0lDQWdJR3hsZENCelpYTnphVzl1VDNCMGFXOXVjMGhoYm1Sc1pTQTlJREE3WEc0Z0lDQWdJQ0JzWlhRZ2FXOUNhVzVrYVc1blNHRnVaR3hsSUQwZ01EdGNiaUFnSUNBZ0lHeGxkQ0JoYkd4dlkzTTZJRzUxYldKbGNsdGRJRDBnVzEwN1hHNGdJQ0FnSUNCamIyNXpkQ0JwYm5CMWRFNWhiV1Z6VlZSR09FVnVZMjlrWldRZ1BTQmJYVHRjYmlBZ0lDQWdJR052Ym5OMElHOTFkSEIxZEU1aGJXVnpWVlJHT0VWdVkyOWtaV1FnUFNCYlhUdGNibHh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1czTmxjM05wYjI1UGNIUnBiMjV6U0dGdVpHeGxMQ0JoYkd4dlkzTmRJRDBnYzJWMFUyVnpjMmx2Yms5d2RHbHZibk1vYjNCMGFXOXVjeWs3WEc1Y2JpQWdJQ0FnSUNBZ2MyVnpjMmx2YmtoaGJtUnNaU0E5SUhkaGMyMHVYMDl5ZEVOeVpXRjBaVk5sYzNOcGIyNG9iVzlrWld4RVlYUmhXekJkTENCdGIyUmxiRVJoZEdGYk1WMHNJSE5sYzNOcGIyNVBjSFJwYjI1elNHRnVaR3hsS1R0Y2JpQWdJQ0FnSUNBZ2FXWWdLSE5sYzNOcGIyNUlZVzVrYkdVZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmphR1ZqYTB4aGMzUkZjbkp2Y2lnblEyRnVYRnduZENCamNtVmhkR1VnWVNCelpYTnphVzl1TGljcE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdXMmx1Y0hWMFEyOTFiblFzSUc5MWRIQjFkRU52ZFc1MFhTQTlJR2RsZEZObGMzTnBiMjVKYm5CMWRFOTFkSEIxZEVOdmRXNTBLSE5sYzNOcGIyNUlZVzVrYkdVcE8xeHVYRzRnSUNBZ0lDQWdJR052Ym5OMElHbHVjSFYwVG1GdFpYTWdQU0JiWFR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYjNWMGNIVjBUbUZ0WlhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiM1YwY0hWMFVISmxabVZ5Y21Wa1RHOWpZWFJwYjI1ek9pQlRkWEJ3YjNKMFpXUlVaVzV6YjNKRVlYUmhURzlqWVhScGIyNUdiM0pKYm5CMWRFOTFkSEIxZEZ0ZElEMGdXMTA3WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2FXNXdkWFJEYjNWdWREc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JtRnRaU0E5SUhkaGMyMHVYMDl5ZEVkbGRFbHVjSFYwVG1GdFpTaHpaWE56YVc5dVNHRnVaR3hsTENCcEtUdGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2JtRnRaU0E5UFQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvSjBOaGJseGNKM1FnWjJWMElHRnVJR2x1Y0hWMElHNWhiV1V1SnlrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUdsdWNIVjBUbUZ0WlhOVlZFWTRSVzVqYjJSbFpDNXdkWE5vS0c1aGJXVXBPMXh1SUNBZ0lDQWdJQ0FnSUdsdWNIVjBUbUZ0WlhNdWNIVnphQ2gzWVhOdExsVlVSamhVYjFOMGNtbHVaeWh1WVcxbEtTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCdmRYUndkWFJEYjNWdWREc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JtRnRaU0E5SUhkaGMyMHVYMDl5ZEVkbGRFOTFkSEIxZEU1aGJXVW9jMlZ6YzJsdmJraGhibVJzWlN3Z2FTazdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHNWhiV1VnUFQwOUlEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTm9aV05yVEdGemRFVnljbTl5S0NkRFlXNWNYQ2QwSUdkbGRDQmhiaUJ2ZFhSd2RYUWdibUZ0WlM0bktUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2IzVjBjSFYwVG1GdFpYTlZWRVk0Ulc1amIyUmxaQzV3ZFhOb0tHNWhiV1VwTzF4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUc1aGJXVlRkSEpwYm1jZ1BTQjNZWE50TGxWVVJqaFViMU4wY21sdVp5aHVZVzFsS1R0Y2JpQWdJQ0FnSUNBZ0lDQnZkWFJ3ZFhST1lXMWxjeTV3ZFhOb0tHNWhiV1ZUZEhKcGJtY3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZDVlVsTVJGOUVSVVpUTGtSSlUwRkNURVZmVjBWQ1IxQlZLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCc2IyTmhkR2x2YmlBOUlIUjVjR1Z2WmlCdmNIUnBiMjV6UHk1d2NtVm1aWEp5WldSUGRYUndkWFJNYjJOaGRHbHZiaUE5UFQwZ0ozTjBjbWx1WnljZ1AxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NdWNISmxabVZ5Y21Wa1QzVjBjSFYwVEc5allYUnBiMjRnT2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5d2RHbHZibk0vTG5CeVpXWmxjbkpsWkU5MWRIQjFkRXh2WTJGMGFXOXVQeTViYm1GdFpWTjBjbWx1WjEwZ1B6OGdKMk53ZFNjN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2JHOWpZWFJwYjI0Z0lUMDlJQ2RqY0hVbklDWW1JR3h2WTJGMGFXOXVJQ0U5UFNBblkzQjFMWEJwYm01bFpDY2dKaVlnYkc5allYUnBiMjRnSVQwOUlDZG5jSFV0WW5WbVptVnlKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRTV2ZENCemRYQndiM0owWldRZ2NISmxabVZ5Y21Wa0lHOTFkSEIxZENCc2IyTmhkR2x2YmpvZ0pIdHNiMk5oZEdsdmJuMHVZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCdmRYUndkWFJRY21WbVpYSnlaV1JNYjJOaGRHbHZibk11Y0hWemFDaHNiMk5oZEdsdmJpazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdMeThnZFhObElFbFBJR0pwYm1ScGJtY2diMjVzZVNCM2FHVnVJR0YwSUd4bFlYTjBJRzl1WlNCdmRYUndkWFFnYVhNZ2NISmxabVpsY21Wa0lIUnZJR0psSUc5dUlFZFFWUzVjYmlBZ0lDQWdJQ0FnYkdWMElHSnBibVJwYm1kVGRHRjBaVG9nU1U5Q2FXNWthVzVuVTNSaGRHVjhiblZzYkNBOUlHNTFiR3c3WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hRbFZKVEVSZlJFVkdVeTVFU1ZOQlFreEZYMWRGUWtkUVZTQW1KaUJ2ZFhSd2RYUlFjbVZtWlhKeVpXUk1iMk5oZEdsdmJuTXVjMjl0WlNoc0lEMCtJR3dnUFQwOUlDZG5jSFV0WW5WbVptVnlKeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBiMEpwYm1ScGJtZElZVzVrYkdVZ1BTQjNZWE50TGw5UGNuUkRjbVZoZEdWQ2FXNWthVzVuS0hObGMzTnBiMjVJWVc1a2JHVXBPMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHBiMEpwYm1ScGJtZElZVzVrYkdVZ1BUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWldOclRHRnpkRVZ5Y205eUtDZERZVzVjWENkMElHTnlaV0YwWlNCSlR5QmlhVzVrYVc1bkxpY3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJR0pwYm1ScGJtZFRkR0YwWlNBOUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdoaGJtUnNaVG9nYVc5Q2FXNWthVzVuU0dGdVpHeGxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2IzVjBjSFYwVUhKbFptVnljbVZrVEc5allYUnBiMjV6TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiM1YwY0hWMFVISmxabVZ5Y21Wa1RHOWpZWFJwYjI1elJXNWpiMlJsWkRvZ2IzVjBjSFYwVUhKbFptVnljbVZrVEc5allYUnBiMjV6TG0xaGNDaHNJRDArSUdSaGRHRk1iMk5oZEdsdmJsTjBjbWx1WjFSdlJXNTFiU2hzS1Nrc1hHNGdJQ0FnSUNBZ0lDQWdmVHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHRmpkR2wyWlZObGMzTnBiMjV6TG5ObGRDaHpaWE56YVc5dVNHRnVaR3hsTENCYmMyVnpjMmx2YmtoaGJtUnNaU3dnYVc1d2RYUk9ZVzFsYzFWVVJqaEZibU52WkdWa0xDQnZkWFJ3ZFhST1lXMWxjMVZVUmpoRmJtTnZaR1ZrTENCaWFXNWthVzVuVTNSaGRHVmRLVHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRnR6WlhOemFXOXVTR0Z1Wkd4bExDQnBibkIxZEU1aGJXVnpMQ0J2ZFhSd2RYUk9ZVzFsYzEwN1hHNGdJQ0FnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQWdJR2x1Y0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkM1bWIzSkZZV05vS0dKMVppQTlQaUIzWVhOdExsOVBjblJHY21WbEtHSjFaaWtwTzF4dUlDQWdJQ0FnSUNCdmRYUndkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtMbVp2Y2tWaFkyZ29ZblZtSUQwK0lIZGhjMjB1WDA5eWRFWnlaV1VvWW5WbUtTazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHZRbWx1WkdsdVowaGhibVJzWlNBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIZGhjMjB1WDA5eWRGSmxiR1ZoYzJWQ2FXNWthVzVuS0dsdlFtbHVaR2x1WjBoaGJtUnNaU2s3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvYzJWemMybHZia2hoYm1Sc1pTQWhQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSGRoYzIwdVgwOXlkRkpsYkdWaGMyVlRaWE56YVc5dUtITmxjM05wYjI1SVlXNWtiR1VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9jbTkzSUdVN1hHNGdJQ0FnSUNCOUlHWnBibUZzYkhrZ2UxeHVJQ0FnSUNBZ0lDQjNZWE50TGw5bWNtVmxLRzF2WkdWc1JHRjBZVnN3WFNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6WlhOemFXOXVUM0IwYVc5dWMwaGhibVJzWlNBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIZGhjMjB1WDA5eWRGSmxiR1ZoYzJWVFpYTnphVzl1VDNCMGFXOXVjeWh6WlhOemFXOXVUM0IwYVc5dWMwaGhibVJzWlNrN1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdZV3hzYjJOekxtWnZja1ZoWTJnb1lXeHNiMk1nUFQ0Z2QyRnpiUzVmWm5KbFpTaGhiR3h2WXlrcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNWNibHh1THlvcVhHNGdLaUJqY21WaGRHVWdZVzRnYVc1emRHRnVZMlVnYjJZZ1NXNW1aWEpsYm1ObFUyVnpjMmx2Ymk1Y2JpQXFJRUJ5WlhSMWNtNXpJSFJvWlNCdFpYUmhaR0YwWVNCdlppQkpibVpsY21WdVkyVlRaWE56YVc5dUxpQXdMWFpoYkhWbElHaGhibVJzWlNCbWIzSWdabUZwYkhWeVpTNWNiaUFxTDF4dVpYaHdiM0owSUdOdmJuTjBJR055WldGMFpWTmxjM05wYjI0Z1BWeHVJQ0FnSUNodGIyUmxiRG9nVldsdWREaEJjbkpoZVN3Z2IzQjBhVzl1Y3o4NklFbHVabVZ5Wlc1alpWTmxjM05wYjI0dVUyVnpjMmx2Yms5d2RHbHZibk1wT2lCVFpYSnBZV3hwZW1GaWJHVlRaWE56YVc5dVRXVjBZV1JoZEdFZ1BUNGdlMXh1SUNBZ0lDQWdZMjl1YzNRZ2JXOWtaV3hFWVhSaE9pQlRaWEpwWVd4cGVtRmliR1ZOYjJSbGJHUmhkR0VnUFNCamNtVmhkR1ZUWlhOemFXOXVRV3hzYjJOaGRHVW9iVzlrWld3cE8xeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOeVpXRjBaVk5sYzNOcGIyNUdhVzVoYkdsNlpTaHRiMlJsYkVSaGRHRXNJRzl3ZEdsdmJuTXBPMXh1SUNBZ0lIMDdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQnlaV3hsWVhObFUyVnpjMmx2YmlBOUlDaHpaWE56YVc5dVNXUTZJRzUxYldKbGNpazZJSFp2YVdRZ1BUNGdlMXh1SUNCamIyNXpkQ0IzWVhOdElEMGdaMlYwU1c1emRHRnVZMlVvS1R0Y2JpQWdZMjl1YzNRZ2MyVnpjMmx2YmlBOUlHRmpkR2wyWlZObGMzTnBiMjV6TG1kbGRDaHpaWE56YVc5dVNXUXBPMXh1SUNCcFppQW9JWE5sYzNOcGIyNHBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1lHTmhibTV2ZENCeVpXeGxZWE5sSUhObGMzTnBiMjR1SUdsdWRtRnNhV1FnYzJWemMybHZiaUJwWkRvZ0pIdHpaWE56YVc5dVNXUjlZQ2s3WEc0Z0lIMWNiaUFnWTI5dWMzUWdXM05sYzNOcGIyNUlZVzVrYkdVc0lHbHVjSFYwVG1GdFpYTlZWRVk0Ulc1amIyUmxaQ3dnYjNWMGNIVjBUbUZ0WlhOVlZFWTRSVzVqYjJSbFpDd2dhVzlDYVc1a2FXNW5VM1JoZEdWZElEMGdjMlZ6YzJsdmJqdGNibHh1SUNCcFppQW9hVzlDYVc1a2FXNW5VM1JoZEdVcElIdGNiaUFnSUNCM1lYTnRMbDlQY25SU1pXeGxZWE5sUW1sdVpHbHVaeWhwYjBKcGJtUnBibWRUZEdGMFpTNW9ZVzVrYkdVcE8xeHVJQ0I5WEc1Y2JpQWdkMkZ6YlM1cWMyVndWVzV5WldkcGMzUmxja0oxWm1abGNuTS9MaWh6WlhOemFXOXVTV1FwTzF4dVhHNGdJR2x1Y0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkM1bWIzSkZZV05vS0dKMVppQTlQaUIzWVhOdExsOVBjblJHY21WbEtHSjFaaWtwTzF4dUlDQnZkWFJ3ZFhST1lXMWxjMVZVUmpoRmJtTnZaR1ZrTG1admNrVmhZMmdvWW5WbUlEMCtJSGRoYzIwdVgwOXlkRVp5WldVb1luVm1LU2s3WEc0Z0lIZGhjMjB1WDA5eWRGSmxiR1ZoYzJWVFpYTnphVzl1S0hObGMzTnBiMjVJWVc1a2JHVXBPMXh1SUNCaFkzUnBkbVZUWlhOemFXOXVjeTVrWld4bGRHVW9jMlZ6YzJsdmJrbGtLVHRjYm4wN1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCd2NtVndZWEpsU1c1d2RYUlBkWFJ3ZFhSVVpXNXpiM0lnUFZ4dUlDQWdJQ2gwWlc1emIzSTZJRlJsYm5OdmNrMWxkR0ZrWVhSaGZHNTFiR3dzSUhSbGJuTnZja2hoYm1Sc1pYTTZJRzUxYldKbGNsdGRMQ0JoYkd4dlkzTTZJRzUxYldKbGNsdGRMQ0J6WlhOemFXOXVTV1E2SUc1MWJXSmxjaXdnYVc1a1pYZzZJRzUxYldKbGNpazZYRzRnSUNBZ0lDQWdJSFp2YVdRZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2hkR1Z1YzI5eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMFpXNXpiM0pJWVc1a2JHVnpMbkIxYzJnb01DazdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkMkZ6YlNBOUlHZGxkRWx1YzNSaGJtTmxLQ2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCa1lYUmhWSGx3WlNBOUlIUmxibk52Y2xzd1hUdGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQmthVzF6SUQwZ2RHVnVjMjl5V3pGZE8xeHVJQ0FnSUNBZ0lDQWdJR052Ym5OMElHeHZZMkYwYVc5dUlEMGdkR1Z1YzI5eVd6TmRPMXh1WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJSEpoZDBSaGRHRTZJRzUxYldKbGNqdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ1pHRjBZVUo1ZEdWTVpXNW5kR2c2SUc1MWJXSmxjanRjYmx4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hrWVhSaFZIbHdaU0E5UFQwZ0ozTjBjbWx1WnljZ0ppWWdiRzlqWVhScGIyNGdQVDA5SUNkbmNIVXRZblZtWm1WeUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0NkVGRISnBibWNnZEdWdWMyOXlJR2x6SUc1dmRDQnpkWEJ3YjNKMFpXUWdiMjRnUjFCVkxpY3BPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQWdJR2xtSUNoc2IyTmhkR2x2YmlBOVBUMGdKMmR3ZFMxaWRXWm1aWEluS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQm5jSFZDZFdabVpYSWdQU0IwWlc1emIzSmJNbDB1WjNCMVFuVm1abVZ5SUdGeklFZFFWVUoxWm1abGNqdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR1ZzWlcxbGJuUlRhWHBsU1c1Q2VYUmxjeUE5SUdkbGRGUmxibk52Y2tWc1pXMWxiblJUYVhwbEtIUmxibk52Y2tSaGRHRlVlWEJsVTNSeWFXNW5WRzlGYm5WdEtHUmhkR0ZVZVhCbEtTa2hPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVUo1ZEdWTVpXNW5kR2dnUFNCa2FXMXpMbkpsWkhWalpTZ29ZU3dnWWlrZ1BUNGdZU0FxSUdJc0lERXBJQ29nWld4bGJXVnVkRk5wZW1WSmJrSjVkR1Z6TzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbUYzUkdGMFlTQTlJSGRoYzIwdWFuTmxjRkpsWjJsemRHVnlRblZtWm1WeUtITmxjM05wYjI1SlpDd2dhVzVrWlhnc0lHZHdkVUoxWm1abGNpd2daR0YwWVVKNWRHVk1aVzVuZEdncE8xeHVJQ0FnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JrWVhSaElEMGdkR1Z1YzI5eVd6SmRPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvUVhKeVlYa3VhWE5CY25KaGVTaGtZWFJoS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkx5QnpkSEpwYm1jZ2RHVnVjMjl5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGQ2VYUmxUR1Z1WjNSb0lEMGdOQ0FxSUdSaGRHRXViR1Z1WjNSb08xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVlYZEVZWFJoSUQwZ2QyRnpiUzVmYldGc2JHOWpLR1JoZEdGQ2VYUmxUR1Z1WjNSb0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1lXeHNiMk56TG5CMWMyZ29jbUYzUkdGMFlTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrWVhSaFNXNWtaWGdnUFNCeVlYZEVZWFJoSUM4Z05EdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQmtZWFJoTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJrWVhSaFcybGRJQ0U5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWhnZEdWdWMyOXlJR1JoZEdFZ1lYUWdhVzVrWlhnZ0pIdHBmU0JwY3lCdWIzUWdZU0J6ZEhKcGJtZGdLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJGemJTNUlSVUZRVlRNeVcyUmhkR0ZKYm1SbGVDc3JYU0E5SUdGc2JHOWpWMkZ6YlZOMGNtbHVaeWhrWVhSaFcybGRMQ0JoYkd4dlkzTXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFFubDBaVXhsYm1kMGFDQTlJR1JoZEdFdVlubDBaVXhsYm1kMGFEdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2NtRjNSR0YwWVNBOUlIZGhjMjB1WDIxaGJHeHZZeWhrWVhSaFFubDBaVXhsYm1kMGFDazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnNiRzlqY3k1d2RYTm9LSEpoZDBSaGRHRXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjNZWE50TGtoRlFWQlZPQzV6WlhRb2JtVjNJRlZwYm5RNFFYSnlZWGtvWkdGMFlTNWlkV1ptWlhJc0lHUmhkR0V1WW5sMFpVOW1abk5sZEN3Z1pHRjBZVUo1ZEdWTVpXNW5kR2dwTENCeVlYZEVZWFJoS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQnpkR0ZqYXlBOUlIZGhjMjB1YzNSaFkydFRZWFpsS0NrN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1pHbHRjMDltWm5ObGRDQTlJSGRoYzIwdWMzUmhZMnRCYkd4dll5ZzBJQ29nWkdsdGN5NXNaVzVuZEdncE8xeHVJQ0FnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pHbHRTVzVrWlhnZ1BTQmthVzF6VDJabWMyVjBJQzhnTkR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JwYlhNdVptOXlSV0ZqYUNoa0lEMCtJSGRoYzIwdVNFVkJVRE15VzJScGJVbHVaR1Y0S3l0ZElEMGdaQ2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMFpXNXpiM0lnUFNCM1lYTnRMbDlQY25SRGNtVmhkR1ZVWlc1emIzSW9YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Z1YzI5eVJHRjBZVlI1Y0dWVGRISnBibWRVYjBWdWRXMG9aR0YwWVZSNWNHVXBMQ0J5WVhkRVlYUmhMQ0JrWVhSaFFubDBaVXhsYm1kMGFDd2daR2x0YzA5bVpuTmxkQ3dnWkdsdGN5NXNaVzVuZEdnc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVXh2WTJGMGFXOXVVM1J5YVc1blZHOUZiblZ0S0d4dlkyRjBhVzl1S1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHVnVjMjl5SUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR05vWldOclRHRnpkRVZ5Y205eUtHQkRZVzRuZENCamNtVmhkR1VnZEdWdWMyOXlJR1p2Y2lCcGJuQjFkQzl2ZFhSd2RYUXVJSE5sYzNOcGIyNDlKSHR6WlhOemFXOXVTV1I5TENCcGJtUmxlRDBrZTJsdVpHVjRmUzVnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIUmxibk52Y2toaGJtUnNaWE11Y0hWemFDaDBaVzV6YjNJcE8xeHVJQ0FnSUNBZ0lDQWdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNZWE50TG5OMFlXTnJVbVZ6ZEc5eVpTaHpkR0ZqYXlrN1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5TzF4dVhHNHZLaXBjYmlBcUlIQmxjbVp2Y20wZ2FXNW1aWEpsYm1ObElISjFibHh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnY25WdUlEMGdZWE41Ym1Nb1hHNGdJQ0FnYzJWemMybHZia2xrT2lCdWRXMWlaWElzSUdsdWNIVjBTVzVrYVdObGN6b2diblZ0WW1WeVcxMHNJR2x1Y0hWMFZHVnVjMjl5Y3pvZ1ZHVnVjMjl5VFdWMFlXUmhkR0ZiWFN3Z2IzVjBjSFYwU1c1a2FXTmxjem9nYm5WdFltVnlXMTBzWEc0Z0lDQWdiM1YwY0hWMFZHVnVjMjl5Y3pvZ1FYSnlZWGs4VkdWdWMyOXlUV1YwWVdSaGRHRjhiblZzYkQ0c0lHOXdkR2x2Ym5NNklFbHVabVZ5Wlc1alpWTmxjM05wYjI0dVVuVnVUM0IwYVc5dWN5azZJRkJ5YjIxcGMyVThWR1Z1YzI5eVRXVjBZV1JoZEdGYlhUNGdQVDRnZTF4dUlDQmpiMjV6ZENCM1lYTnRJRDBnWjJWMFNXNXpkR0Z1WTJVb0tUdGNiaUFnWTI5dWMzUWdjMlZ6YzJsdmJpQTlJR0ZqZEdsMlpWTmxjM05wYjI1ekxtZGxkQ2h6WlhOemFXOXVTV1FwTzF4dUlDQnBaaUFvSVhObGMzTnBiMjRwSUh0Y2JpQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZR05oYm01dmRDQnlkVzRnYVc1bVpYSmxibU5sTGlCcGJuWmhiR2xrSUhObGMzTnBiMjRnYVdRNklDUjdjMlZ6YzJsdmJrbGtmV0FwTzF4dUlDQjlYRzRnSUdOdmJuTjBJRnR6WlhOemFXOXVTR0Z1Wkd4bExDQnBibkIxZEU1aGJXVnpWVlJHT0VWdVkyOWtaV1FzSUc5MWRIQjFkRTVoYldWelZWUkdPRVZ1WTI5a1pXUXNJR2x2UW1sdVpHbHVaMU4wWVhSbFhTQTlJSE5sYzNOcGIyNDdYRzVjYmlBZ1kyOXVjM1FnYVc1d2RYUkRiM1Z1ZENBOUlHbHVjSFYwU1c1a2FXTmxjeTVzWlc1bmRHZzdYRzRnSUdOdmJuTjBJRzkxZEhCMWRFTnZkVzUwSUQwZ2IzVjBjSFYwU1c1a2FXTmxjeTVzWlc1bmRHZzdYRzVjYmlBZ2JHVjBJSEoxYms5d2RHbHZibk5JWVc1a2JHVWdQU0F3TzF4dUlDQnNaWFFnY25WdVQzQjBhVzl1YzBGc2JHOWpjem9nYm5WdFltVnlXMTBnUFNCYlhUdGNibHh1SUNCamIyNXpkQ0JwYm5CMWRGUmxibk52Y2toaGJtUnNaWE02SUc1MWJXSmxjbHRkSUQwZ1cxMDdYRzRnSUdOdmJuTjBJRzkxZEhCMWRGUmxibk52Y2toaGJtUnNaWE02SUc1MWJXSmxjbHRkSUQwZ1cxMDdYRzRnSUdOdmJuTjBJR2x1Y0hWMFQzVjBjSFYwUVd4c2IyTnpPaUJ1ZFcxaVpYSmJYU0E5SUZ0ZE8xeHVYRzRnSUdOdmJuTjBJR0psWm05eVpWSjFibE4wWVdOcklEMGdkMkZ6YlM1emRHRmphMU5oZG1Vb0tUdGNiaUFnWTI5dWMzUWdhVzV3ZFhSV1lXeDFaWE5QWm1aelpYUWdQU0IzWVhOdExuTjBZV05yUVd4c2IyTW9hVzV3ZFhSRGIzVnVkQ0FxSURRcE8xeHVJQ0JqYjI1emRDQnBibkIxZEU1aGJXVnpUMlptYzJWMElEMGdkMkZ6YlM1emRHRmphMEZzYkc5aktHbHVjSFYwUTI5MWJuUWdLaUEwS1R0Y2JpQWdZMjl1YzNRZ2IzVjBjSFYwVm1Gc2RXVnpUMlptYzJWMElEMGdkMkZ6YlM1emRHRmphMEZzYkc5aktHOTFkSEIxZEVOdmRXNTBJQ29nTkNrN1hHNGdJR052Ym5OMElHOTFkSEIxZEU1aGJXVnpUMlptYzJWMElEMGdkMkZ6YlM1emRHRmphMEZzYkc5aktHOTFkSEIxZEVOdmRXNTBJQ29nTkNrN1hHNWNiaUFnZEhKNUlIdGNiaUFnSUNCYmNuVnVUM0IwYVc5dWMwaGhibVJzWlN3Z2NuVnVUM0IwYVc5dWMwRnNiRzlqYzEwZ1BTQnpaWFJTZFc1UGNIUnBiMjV6S0c5d2RHbHZibk1wTzF4dVhHNGdJQ0FnTHk4Z1kzSmxZWFJsSUdsdWNIVjBJSFJsYm5OdmNuTmNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHbHVjSFYwUTI5MWJuUTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2NISmxjR0Z5WlVsdWNIVjBUM1YwY0hWMFZHVnVjMjl5S0dsdWNIVjBWR1Z1YzI5eWMxdHBYU3dnYVc1d2RYUlVaVzV6YjNKSVlXNWtiR1Z6TENCcGJuQjFkRTkxZEhCMWRFRnNiRzlqY3l3Z2MyVnpjMmx2Ymtsa0xDQnBibkIxZEVsdVpHbGpaWE5iYVYwcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHTnlaV0YwWlNCdmRYUndkWFFnZEdWdWMyOXljMXh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2diM1YwY0hWMFEyOTFiblE3SUdrckt5a2dlMXh1SUNBZ0lDQWdjSEpsY0dGeVpVbHVjSFYwVDNWMGNIVjBWR1Z1YzI5eUtGeHVJQ0FnSUNBZ0lDQWdJRzkxZEhCMWRGUmxibk52Y25OYmFWMHNJRzkxZEhCMWRGUmxibk52Y2toaGJtUnNaWE1zSUdsdWNIVjBUM1YwY0hWMFFXeHNiMk56TENCelpYTnphVzl1U1dRc0lHbHVjSFYwUTI5MWJuUWdLeUJ2ZFhSd2RYUkpibVJwWTJWelcybGRLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnYVc1d2RYUldZV3gxWlhOSmJtUmxlQ0E5SUdsdWNIVjBWbUZzZFdWelQyWm1jMlYwSUM4Z05EdGNiaUFnSUNCc1pYUWdhVzV3ZFhST1lXMWxjMGx1WkdWNElEMGdhVzV3ZFhST1lXMWxjMDltWm5ObGRDQXZJRFE3WEc0Z0lDQWdiR1YwSUc5MWRIQjFkRlpoYkhWbGMwbHVaR1Y0SUQwZ2IzVjBjSFYwVm1Gc2RXVnpUMlptYzJWMElDOGdORHRjYmlBZ0lDQnNaWFFnYjNWMGNIVjBUbUZ0WlhOSmJtUmxlQ0E5SUc5MWRIQjFkRTVoYldWelQyWm1jMlYwSUM4Z05EdGNiaUFnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHbHVjSFYwUTI5MWJuUTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2QyRnpiUzVJUlVGUVZUTXlXMmx1Y0hWMFZtRnNkV1Z6U1c1a1pYZ3JLMTBnUFNCcGJuQjFkRlJsYm5OdmNraGhibVJzWlhOYmFWMDdYRzRnSUNBZ0lDQjNZWE50TGtoRlFWQlZNekpiYVc1d2RYUk9ZVzFsYzBsdVpHVjRLeXRkSUQwZ2FXNXdkWFJPWVcxbGMxVlVSamhGYm1OdlpHVmtXMmx1Y0hWMFNXNWthV05sYzF0cFhWMDdYRzRnSUNBZ2ZWeHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2IzVjBjSFYwUTI5MWJuUTdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2QyRnpiUzVJUlVGUVZUTXlXMjkxZEhCMWRGWmhiSFZsYzBsdVpHVjRLeXRkSUQwZ2IzVjBjSFYwVkdWdWMyOXlTR0Z1Wkd4bGMxdHBYVHRjYmlBZ0lDQWdJSGRoYzIwdVNFVkJVRlV6TWx0dmRYUndkWFJPWVcxbGMwbHVaR1Y0S3l0ZElEMGdiM1YwY0hWMFRtRnRaWE5WVkVZNFJXNWpiMlJsWkZ0dmRYUndkWFJKYm1ScFkyVnpXMmxkWFR0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb0lVSlZTVXhFWDBSRlJsTXVSRWxUUVVKTVJWOVhSVUpIVUZVZ0ppWWdhVzlDYVc1a2FXNW5VM1JoZEdVcElIdGNiaUFnSUNBZ0lHTnZibk4wSUh0b1lXNWtiR1VzSUc5MWRIQjFkRkJ5WldabGNuSmxaRXh2WTJGMGFXOXVjeXdnYjNWMGNIVjBVSEpsWm1WeWNtVmtURzlqWVhScGIyNXpSVzVqYjJSbFpIMGdQU0JwYjBKcGJtUnBibWRUZEdGMFpUdGNibHh1SUNBZ0lDQWdhV1lnS0dsdWNIVjBUbUZ0WlhOVlZFWTRSVzVqYjJSbFpDNXNaVzVuZEdnZ0lUMDlJR2x1Y0hWMFEyOTFiblFwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lFVnljbTl5S0dCcGJuQjFkQ0JqYjNWdWRDQm1jbTl0SUdabFpXUnpJQ2drZTF4dUlDQWdJQ0FnSUNBZ0lDQWdhVzV3ZFhSRGIzVnVkSDBwSUdseklHVjRjR1ZqZEdWa0lIUnZJR0psSUdGc2QyRjVjeUJsY1hWaGJDQjBieUJ0YjJSbGJDZHpJR2x1Y0hWMElHTnZkVzUwSUNna2UybHVjSFYwVG1GdFpYTlZWRVk0Ulc1amIyUmxaQzVzWlc1bmRHaDlLUzVnS1R0Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0x5OGdjSEp2WTJWemN5QnBibkIxZEhOY2JpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2FXNXdkWFJEYjNWdWREc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdsdVpHVjRJRDBnYVc1d2RYUkpibVJwWTJWelcybGRPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmxjbkp2Y2tOdlpHVWdQU0JoZDJGcGRDQjNZWE50TGw5UGNuUkNhVzVrU1c1d2RYUW9hR0Z1Wkd4bExDQnBibkIxZEU1aGJXVnpWVlJHT0VWdVkyOWtaV1JiYVc1a1pYaGRMQ0JwYm5CMWRGUmxibk52Y2toaGJtUnNaWE5iYVYwcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvWlhKeWIzSkRiMlJsSUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyaGxZMnRNWVhOMFJYSnliM0lvWUVOaGJpZDBJR0pwYm1RZ2FXNXdkWFJiSkh0cGZWMGdabTl5SUhObGMzTnBiMjQ5Skh0elpYTnphVzl1U1dSOUxtQXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklIQnliMk5sYzNNZ2NISmxMV0ZzYkc5allYUmxaQ0J2ZFhSd2RYUnpYRzRnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJRzkxZEhCMWRFTnZkVzUwT3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhVzVrWlhnZ1BTQnZkWFJ3ZFhSSmJtUnBZMlZ6VzJsZE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCc2IyTmhkR2x2YmlBOUlHOTFkSEIxZEZSbGJuTnZjbk5iYVYwL0xsc3pYVHNnSUM4dklIVnVaR1ZtYVc1bFpDQnRaV0Z1Y3lCdmRYUndkWFFnYVhNZ2JtOTBJSEJ5WlMxaGJHeHZZMkYwWldRdVhHNWNiaUFnSUNBZ0lDQWdhV1lnS0d4dlkyRjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnYjNWMGNIVjBJR2x6SUhCeVpTMWhiR3h2WTJGMFpXUXVJR0pwYm1RZ2RHaGxJSFJsYm5OdmNpNWNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQmxjbkp2Y2tOdlpHVWdQU0IzWVhOdExsOVBjblJDYVc1a1QzVjBjSFYwS0doaGJtUnNaU3dnYjNWMGNIVjBUbUZ0WlhOVlZFWTRSVzVqYjJSbFpGdHBibVJsZUYwc0lHOTFkSEIxZEZSbGJuTnZja2hoYm1Sc1pYTmJhVjBzSURBcE8xeHVJQ0FnSUNBZ0lDQWdJR2xtSUNobGNuSnZja052WkdVZ0lUMDlJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR05vWldOclRHRnpkRVZ5Y205eUtHQkRZVzRuZENCaWFXNWtJSEJ5WlMxaGJHeHZZMkYwWldRZ2IzVjBjSFYwV3lSN2FYMWRJR1p2Y2lCelpYTnphVzl1UFNSN2MyVnpjMmx2Ymtsa2ZTNWdLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdMeThnYjNWMGNIVjBJR2x6SUc1dmRDQndjbVV0WVd4c2IyTmhkR1ZrTGlCeVpYTmxkQ0J3Y21WbVpYSnlaV1FnYkc5allYUnBiMjR1WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjM1FnWlhKeWIzSkRiMlJsSUQxY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJGemJTNWZUM0owUW1sdVpFOTFkSEIxZENob1lXNWtiR1VzSUc5MWRIQjFkRTVoYldWelZWUkdPRVZ1WTI5a1pXUmJhVzVrWlhoZExDQXdMQ0J2ZFhSd2RYUlFjbVZtWlhKeVpXUk1iMk5oZEdsdmJuTkZibU52WkdWa1cybHVaR1Y0WFNrN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dWeWNtOXlRMjlrWlNBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMmhsWTJ0TVlYTjBSWEp5YjNJb1lFTmhiaWQwSUdKcGJtUWdiM1YwY0hWMFd5UjdhWDFkSUhSdklDUjdiM1YwY0hWMFVISmxabVZ5Y21Wa1RHOWpZWFJwYjI1elcybGRmU0JtYjNJZ2MyVnpjMmx2Ymowa2UzTmxjM05wYjI1SlpIMHVZQ2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2JHVjBJR1Z5Y205eVEyOWtaVG9nYm5WdFltVnlPMXh1WEc0Z0lDQWdhV1lnS0NGQ1ZVbE1SRjlFUlVaVExrUkpVMEZDVEVWZlYwVkNSMUJWSUNZbUlHbHZRbWx1WkdsdVoxTjBZWFJsS1NCN1hHNGdJQ0FnSUNCbGNuSnZja052WkdVZ1BTQmhkMkZwZENCM1lYTnRMbDlQY25SU2RXNVhhWFJvUW1sdVpHbHVaeWhjYmlBZ0lDQWdJQ0FnSUNCelpYTnphVzl1U0dGdVpHeGxMQ0JwYjBKcGJtUnBibWRUZEdGMFpTNW9ZVzVrYkdVc0lHOTFkSEIxZEVOdmRXNTBMQ0J2ZFhSd2RYUldZV3gxWlhOUFptWnpaWFFzSUhKMWJrOXdkR2x2Ym5OSVlXNWtiR1VwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQmxjbkp2Y2tOdlpHVWdQU0JoZDJGcGRDQjNZWE50TGw5UGNuUlNkVzRvWEc0Z0lDQWdJQ0FnSUNBZ2MyVnpjMmx2YmtoaGJtUnNaU3dnYVc1d2RYUk9ZVzFsYzA5bVpuTmxkQ3dnYVc1d2RYUldZV3gxWlhOUFptWnpaWFFzSUdsdWNIVjBRMjkxYm5Rc0lHOTFkSEIxZEU1aGJXVnpUMlptYzJWMExDQnZkWFJ3ZFhSRGIzVnVkQ3hjYmlBZ0lDQWdJQ0FnSUNCdmRYUndkWFJXWVd4MVpYTlBabVp6WlhRc0lISjFiazl3ZEdsdmJuTklZVzVrYkdVcE8xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaGxjbkp2Y2tOdlpHVWdJVDA5SURBcElIdGNiaUFnSUNBZ0lHTm9aV05yVEdGemRFVnljbTl5S0NkbVlXbHNaV1FnZEc4Z1kyRnNiQ0JQY25SU2RXNG9LUzRuS1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQnZkWFJ3ZFhRNklGUmxibk52Y2sxbGRHRmtZWFJoVzEwZ1BTQmJYVHRjYmx4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnYjNWMGNIVjBRMjkxYm5RN0lHa3JLeWtnZTF4dUlDQWdJQ0FnWTI5dWMzUWdkR1Z1YzI5eUlEMGdkMkZ6YlM1SVJVRlFWVE15VzI5MWRIQjFkRlpoYkhWbGMwOW1abk5sZENBdklEUWdLeUJwWFR0Y2JpQWdJQ0FnSUdsbUlDaDBaVzV6YjNJZ1BUMDlJRzkxZEhCMWRGUmxibk52Y2toaGJtUnNaWE5iYVYwcElIdGNiaUFnSUNBZ0lDQWdMeThnYjNWMGNIVjBJSFJsYm5OdmNpQnBjeUJ3Y21VdFlXeHNiMk5oZEdWa0xpQnVieUJ1WldWa0lIUnZJR052Y0hrZ1pHRjBZUzVjYmlBZ0lDQWdJQ0FnYjNWMGNIVjBMbkIxYzJnb2IzVjBjSFYwVkdWdWMyOXljMXRwWFNFcE8xeHVJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpUdGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdZMjl1YzNRZ1ltVm1iM0psUjJWMFZHVnVjMjl5UkdGMFlWTjBZV05ySUQwZ2QyRnpiUzV6ZEdGamExTmhkbVVvS1R0Y2JpQWdJQ0FnSUM4dklITjBZV05ySUdGc2JHOWpZWFJsSURRZ2NHOXBiblJsY2lCMllXeDFaVnh1SUNBZ0lDQWdZMjl1YzNRZ2RHVnVjMjl5UkdGMFlVOW1abk5sZENBOUlIZGhjMjB1YzNSaFkydEJiR3h2WXlnMElDb2dOQ2s3WEc1Y2JpQWdJQ0FnSUd4bGRDQnJaV1Z3VDNWMGNIVjBWR1Z1YzI5eUlEMGdabUZzYzJVN1hHNGdJQ0FnSUNCc1pYUWdkSGx3WlRvZ1ZHVnVjMjl5TGxSNWNHVjhkVzVrWldacGJtVmtMQ0JrWVhSaFQyWm1jMlYwSUQwZ01EdGNiaUFnSUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1Z5Y205eVEyOWtaU0E5SUhkaGMyMHVYMDl5ZEVkbGRGUmxibk52Y2tSaGRHRW9YRzRnSUNBZ0lDQWdJQ0FnSUNCMFpXNXpiM0lzSUhSbGJuTnZja1JoZEdGUFptWnpaWFFzSUhSbGJuTnZja1JoZEdGUFptWnpaWFFnS3lBMExDQjBaVzV6YjNKRVlYUmhUMlptYzJWMElDc2dPQ3dnZEdWdWMyOXlSR0YwWVU5bVpuTmxkQ0FySURFeUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0dWeWNtOXlRMjlrWlNBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHTm9aV05yVEdGemRFVnljbTl5S0dCRFlXNG5kQ0JoWTJObGMzTWdiM1YwY0hWMElIUmxibk52Y2lCa1lYUmhJRzl1SUdsdVpHVjRJQ1I3YVgwdVlDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYkdWMElIUmxibk52Y2tSaGRHRkpibVJsZUNBOUlIUmxibk52Y2tSaGRHRlBabVp6WlhRZ0x5QTBPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmtZWFJoVkhsd1pTQTlJSGRoYzIwdVNFVkJVRlV6TWx0MFpXNXpiM0pFWVhSaFNXNWtaWGdySzEwN1hHNGdJQ0FnSUNBZ0lHUmhkR0ZQWm1aelpYUWdQU0IzWVhOdExraEZRVkJWTXpKYmRHVnVjMjl5UkdGMFlVbHVaR1Y0S3l0ZE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCa2FXMXpUMlptYzJWMElEMGdkMkZ6YlM1SVJVRlFWVE15VzNSbGJuTnZja1JoZEdGSmJtUmxlQ3NyWFR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWkdsdGMweGxibWQwYUNBOUlIZGhjMjB1U0VWQlVGVXpNbHQwWlc1emIzSkVZWFJoU1c1a1pYZ3JLMTA3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1JwYlhNZ1BTQmJYVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCa2FXMXpUR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmthVzF6TG5CMWMyZ29kMkZ6YlM1SVJVRlFWVE15VzJScGJYTlBabVp6WlhRZ0x5QTBJQ3NnYVYwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSGRoYzIwdVgwOXlkRVp5WldVb1pHbHRjMDltWm5ObGRDazdYRzVjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjMmw2WlNBOUlHUnBiWE11Y21Wa2RXTmxLQ2hoTENCaUtTQTlQaUJoSUNvZ1lpd2dNU2s3WEc0Z0lDQWdJQ0FnSUhSNWNHVWdQU0IwWlc1emIzSkVZWFJoVkhsd1pVVnVkVzFVYjFOMGNtbHVaeWhrWVhSaFZIbHdaU2s3WEc1Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0hKbFptVnljbVZrVEc5allYUnBiMjRnUFNCcGIwSnBibVJwYm1kVGRHRjBaVDh1YjNWMGNIVjBVSEpsWm1WeWNtVmtURzlqWVhScGIyNXpXMjkxZEhCMWRFbHVaR2xqWlhOYmFWMWRPMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHdjbVZtWlhKeVpXUk1iMk5oZEdsdmJpQTlQVDBnSjJkd2RTMWlkV1ptWlhJbktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjFOMGNtbHVaeUIwWlc1emIzSWdhWE1nYm05MElITjFjSEJ2Y25SbFpDQnZiaUJIVUZVdUp5azdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUhOMGNtbHVaMFJoZEdFNklITjBjbWx1WjF0ZElEMGdXMTA3WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJR1JoZEdGSmJtUmxlQ0E5SUdSaGRHRlBabVp6WlhRZ0x5QTBPMXh1SUNBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2MybDZaVHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J2Wm1aelpYUWdQU0IzWVhOdExraEZRVkJWTXpKYlpHRjBZVWx1WkdWNEt5dGRPMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYldGNFFubDBaWE5VYjFKbFlXUWdQU0JwSUQwOVBTQnphWHBsSUMwZ01TQS9JSFZ1WkdWbWFXNWxaQ0E2SUhkaGMyMHVTRVZCVUZVek1sdGtZWFJoU1c1a1pYaGRJQzBnYjJabWMyVjBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUnlhVzVuUkdGMFlTNXdkWE5vS0hkaGMyMHVWVlJHT0ZSdlUzUnlhVzVuS0c5bVpuTmxkQ3dnYldGNFFubDBaWE5VYjFKbFlXUXBLVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdiM1YwY0hWMExuQjFjMmdvVzNSNWNHVXNJR1JwYlhNc0lITjBjbWx1WjBSaGRHRXNJQ2RqY0hVblhTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnTHk4Z1NXWWdZU0JqWlhKMFlXbHVJRzkxZEhCMWRDZHpJSEJ5WldabGNuSmxaQ0JzYjJOaGRHbHZiaUJwY3lCSFVGVWdZblYwSUhSb1pTQjBaVzV6YjNJZ2FYTWdaVzF3ZEhrc0lIZGxJSE4wYVd4c0lHNWxaV1FnZEc4Z1kzSmxZWFJsSUdFZ1ExQlZYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2RHVnVjMjl5SUdadmNpQnBkQzRnVkdobGNtVWdhWE1nYm04Z2JXRndjR2x1WnlCSFVGVWdZblZtWm1WeUlHWnZjaUJoYmlCbGJYQjBlU0IwWlc1emIzSXVYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIQnlaV1psY25KbFpFeHZZMkYwYVc5dUlEMDlQU0FuWjNCMUxXSjFabVpsY2ljZ0ppWWdjMmw2WlNBK0lEQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdkd2RVSjFabVpsY2lBOUlIZGhjMjB1YW5ObGNFZGxkRUoxWm1abGNpaGtZWFJoVDJabWMyVjBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdWc1pXMWxiblJUYVhwbElEMGdaMlYwVkdWdWMyOXlSV3hsYldWdWRGTnBlbVVvWkdGMFlWUjVjR1VwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWc1pXMWxiblJUYVhwbElEMDlQU0IxYm1SbFptbHVaV1FnZkh3Z0lXbHpSM0IxUW5WbVptVnlVM1Z3Y0c5eWRHVmtWSGx3WlNoMGVYQmxLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9ZRlZ1YzNWd2NHOXlkR1ZrSUdSaGRHRWdkSGx3WlRvZ0pIdDBlWEJsZldBcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0F2THlCa2J5QnViM1FnY21Wc1pXRnpaU0IwYUdVZ2RHVnVjMjl5SUhKcFoyaDBJRzV2ZHk0Z2FYUWdkMmxzYkNCaVpTQnlaV3hsWVhObFpDQjNhR1Z1SUhWelpYSWdZMkZzYkhNZ2RHVnVjMjl5TG1ScGMzQnZjMlVvS1M1Y2JpQWdJQ0FnSUNBZ0lDQWdJR3RsWlhCUGRYUndkWFJVWlc1emIzSWdQU0IwY25WbE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCdmRYUndkWFF1Y0hWemFDaGJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1VzSUdScGJYTXNJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JuY0hWQ2RXWm1aWElzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkc5M2JteHZZV1E2SUhkaGMyMHVhbk5sY0VOeVpXRjBaVVJ2ZDI1c2IyRmtaWElvWjNCMVFuVm1abVZ5TENCemFYcGxJQ29nWld4bGJXVnVkRk5wZW1Vc0lIUjVjR1VwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdScGMzQnZjMlU2SUNncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkaGMyMHVYMDl5ZEZKbGJHVmhjMlZVWlc1emIzSW9kR1Z1YzI5eUtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDZG5jSFV0WW5WbVptVnlKMXh1SUNBZ0lDQWdJQ0FnSUNBZ1hTazdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhSNWNHVmtRWEp5WVhsRGIyNXpkSEoxWTNSdmNpQTlJSFJsYm5OdmNsUjVjR1ZVYjFSNWNHVmtRWEp5WVhsRGIyNXpkSEoxWTNSdmNpaDBlWEJsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHUmhkR0VnUFNCdVpYY2dkSGx3WldSQmNuSmhlVU52Ym5OMGNuVmpkRzl5S0hOcGVtVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNJRlZwYm5RNFFYSnlZWGtvWkdGMFlTNWlkV1ptWlhJc0lHUmhkR0V1WW5sMFpVOW1abk5sZEN3Z1pHRjBZUzVpZVhSbFRHVnVaM1JvS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM1elpYUW9kMkZ6YlM1SVJVRlFWVGd1YzNWaVlYSnlZWGtvWkdGMFlVOW1abk5sZEN3Z1pHRjBZVTltWm5ObGRDQXJJR1JoZEdFdVlubDBaVXhsYm1kMGFDa3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IzVjBjSFYwTG5CMWMyZ29XM1I1Y0dVc0lHUnBiWE1zSUdSaGRHRXNJQ2RqY0hVblhTazdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUlHWnBibUZzYkhrZ2UxeHVJQ0FnSUNBZ0lDQjNZWE50TG5OMFlXTnJVbVZ6ZEc5eVpTaGlaV1p2Y21WSFpYUlVaVzV6YjNKRVlYUmhVM1JoWTJzcE8xeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pTQTlQVDBnSjNOMGNtbHVaeWNnSmlZZ1pHRjBZVTltWm5ObGRDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhkaGMyMHVYMlp5WldVb1pHRjBZVTltWm5ObGRDazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnJaV1Z3VDNWMGNIVjBWR1Z1YzI5eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnZDJGemJTNWZUM0owVW1Wc1pXRnpaVlJsYm5OdmNpaDBaVzV6YjNJcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR2x2UW1sdVpHbHVaMU4wWVhSbEtTQjdYRzRnSUNBZ0lDQjNZWE50TGw5UGNuUkRiR1ZoY2tKdmRXNWtUM1YwY0hWMGN5aHBiMEpwYm1ScGJtZFRkR0YwWlM1b1lXNWtiR1VwTzF4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnZkWFJ3ZFhRN1hHNGdJSDBnWm1sdVlXeHNlU0I3WEc0Z0lDQWdkMkZ6YlM1emRHRmphMUpsYzNSdmNtVW9ZbVZtYjNKbFVuVnVVM1JoWTJzcE8xeHVYRzRnSUNBZ2FXNXdkWFJVWlc1emIzSklZVzVrYkdWekxtWnZja1ZoWTJnb2RpQTlQaUIzWVhOdExsOVBjblJTWld4bFlYTmxWR1Z1YzI5eUtIWXBLVHRjYmlBZ0lDQnZkWFJ3ZFhSVVpXNXpiM0pJWVc1a2JHVnpMbVp2Y2tWaFkyZ29kaUE5UGlCM1lYTnRMbDlQY25SU1pXeGxZWE5sVkdWdWMyOXlLSFlwS1R0Y2JpQWdJQ0JwYm5CMWRFOTFkSEIxZEVGc2JHOWpjeTVtYjNKRllXTm9LSEFnUFQ0Z2QyRnpiUzVmWm5KbFpTaHdLU2s3WEc1Y2JpQWdJQ0JwWmlBb2NuVnVUM0IwYVc5dWMwaGhibVJzWlNBaFBUMGdNQ2tnZTF4dUlDQWdJQ0FnZDJGemJTNWZUM0owVW1Wc1pXRnpaVkoxYms5d2RHbHZibk1vY25WdVQzQjBhVzl1YzBoaGJtUnNaU2s3WEc0Z0lDQWdmVnh1SUNBZ0lISjFiazl3ZEdsdmJuTkJiR3h2WTNNdVptOXlSV0ZqYUNod0lEMCtJSGRoYzIwdVgyWnlaV1VvY0NrcE8xeHVJQ0I5WEc1OU8xeHVYRzR2S2lwY2JpQXFJR1Z1WkNCd2NtOW1hV3hwYm1kY2JpQXFMMXh1Wlhod2IzSjBJR052Ym5OMElHVnVaRkJ5YjJacGJHbHVaeUE5SUNoelpYTnphVzl1U1dRNklHNTFiV0psY2lrNklIWnZhV1FnUFQ0Z2UxeHVJQ0JqYjI1emRDQjNZWE50SUQwZ1oyVjBTVzV6ZEdGdVkyVW9LVHRjYmlBZ1kyOXVjM1FnYzJWemMybHZiaUE5SUdGamRHbDJaVk5sYzNOcGIyNXpMbWRsZENoelpYTnphVzl1U1dRcE8xeHVJQ0JwWmlBb0lYTmxjM05wYjI0cElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjJsdWRtRnNhV1FnYzJWemMybHZiaUJwWkNjcE8xeHVJQ0I5WEc0Z0lHTnZibk4wSUhObGMzTnBiMjVJWVc1a2JHVWdQU0J6WlhOemFXOXVXekJkTzF4dVhHNGdJQzh2SUhCeWIyWnBiR1VnWm1sc1pTQnVZVzFsSUdseklHNXZkQ0IxYzJWa0lIbGxkQ3dnWW5WMElHbDBJRzExYzNRZ1ltVWdabkpsWldRdVhHNGdJR052Ym5OMElIQnliMlpwYkdWR2FXeGxUbUZ0WlNBOUlIZGhjMjB1WDA5eWRFVnVaRkJ5YjJacGJHbHVaeWh6WlhOemFXOXVTR0Z1Wkd4bEtUdGNiaUFnYVdZZ0tIQnliMlpwYkdWR2FXeGxUbUZ0WlNBOVBUMGdNQ2tnZTF4dUlDQWdJR05vWldOclRHRnpkRVZ5Y205eUtDZERZVzVjWENkMElHZGxkQ0JoYmlCd2NtOW1hV3hsSUdacGJHVWdibUZ0WlM0bktUdGNiaUFnZlZ4dUlDQjNZWE50TGw5UGNuUkdjbVZsS0hCeWIyWnBiR1ZHYVd4bFRtRnRaU2s3WEc1OU8xeHVYRzVsZUhCdmNuUWdZMjl1YzNRZ1pYaDBjbUZqZEZSeVlXNXpabVZ5WVdKc1pVSjFabVpsY25NZ1BTQW9kR1Z1YzI5eWN6b2djbVZoWkc5dWJIa2dVMlZ5YVdGc2FYcGhZbXhsVkdWdWMyOXlUV1YwWVdSaGRHRmJYU2s2SUVGeWNtRjVRblZtWm1WeVRHbHJaVnRkSUQwK0lIdGNiaUFnWTI5dWMzUWdZblZtWm1WeWN6b2dRWEp5WVhsQ2RXWm1aWEpNYVd0bFcxMGdQU0JiWFR0Y2JpQWdabTl5SUNoamIyNXpkQ0IwWlc1emIzSWdiMllnZEdWdWMyOXljeWtnZTF4dUlDQWdJR052Ym5OMElHUmhkR0VnUFNCMFpXNXpiM0piTWwwN1hHNGdJQ0FnYVdZZ0tDRkJjbkpoZVM1cGMwRnljbUY1S0dSaGRHRXBJQ1ltSUNkaWRXWm1aWEluSUdsdUlHUmhkR0VwSUh0Y2JpQWdJQ0FnSUdKMVptWmxjbk11Y0hWemFDaGtZWFJoTG1KMVptWmxjaWs3WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQmlkV1ptWlhKek8xeHVmVHRjYmlJc0lDSXZMeUJEYjNCNWNtbG5hSFFnS0dNcElFMXBZM0p2YzI5bWRDQkRiM0p3YjNKaGRHbHZiaTRnUVd4c0lISnBaMmgwY3lCeVpYTmxjblpsWkM1Y2JpOHZJRXhwWTJWdWMyVmtJSFZ1WkdWeUlIUm9aU0JOU1ZRZ1RHbGpaVzV6WlM1Y2JseHVMeTh2SUR4eVpXWmxjbVZ1WTJVZ2JHbGlQVndpZDJWaWQyOXlhMlZ5WENJZ0x6NWNibHh1YVcxd2IzSjBJSHRQY25SWFlYTnRUV1Z6YzJGblpYMGdabkp2YlNBbkxpNHZjSEp2ZUhrdGJXVnpjMkZuWlhNbk8xeHVhVzF3YjNKMElIdGpjbVZoZEdWVFpYTnphVzl1TENCamNtVmhkR1ZUWlhOemFXOXVRV3hzYjJOaGRHVXNJR055WldGMFpWTmxjM05wYjI1R2FXNWhiR2w2WlN3Z1pXNWtVSEp2Wm1sc2FXNW5MQ0JsZUhSeVlXTjBWSEpoYm5ObVpYSmhZbXhsUW5WbVptVnljeXdnYVc1cGRGSjFiblJwYldVc0lHbHpUM0owUlc1MlNXNXBkR2xoYkdsNlpXUXNJSEpsYkdWaGMyVlRaWE56YVc5dUxDQnlkVzU5SUdaeWIyMGdKeTR1TDNkaGMyMHRZMjl5WlMxcGJYQnNKenRjYm1sdGNHOXlkQ0I3YVc1cGRHbGhiR2w2WlZkbFlrRnpjMlZ0WW14NWZTQm1jbTl0SUNjdUxpOTNZWE50TFdaaFkzUnZjbmtuTzF4dVhHNXpaV3htTG05dWJXVnpjMkZuWlNBOUlDaGxkam9nVFdWemMyRm5aVVYyWlc1MFBFOXlkRmRoYzIxTlpYTnpZV2RsUGlrNklIWnZhV1FnUFQ0Z2UxeHVJQ0J6ZDJsMFkyZ2dLR1YyTG1SaGRHRXVkSGx3WlNrZ2UxeHVJQ0FnSUdOaGMyVWdKMmx1YVhRdGQyRnpiU2M2WEc0Z0lDQWdJQ0IwY25rZ2UxeHVJQ0FnSUNBZ0lDQnBibWwwYVdGc2FYcGxWMlZpUVhOelpXMWliSGtvWlhZdVpHRjBZUzVwYmlsY2JpQWdJQ0FnSUNBZ0lDQWdJQzUwYUdWdUtGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZ3BJRDArSUhCdmMzUk5aWE56WVdkbEtIdDBlWEJsT2lBbmFXNXBkQzEzWVhOdEozMGdZWE1nVDNKMFYyRnpiVTFsYzNOaFoyVXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z5Y2lBOVBpQndiM04wVFdWemMyRm5aU2g3ZEhsd1pUb2dKMmx1YVhRdGQyRnpiU2NzSUdWeWNuMGdZWE1nVDNKMFYyRnpiVTFsYzNOaFoyVXBLVHRjYmlBZ0lDQWdJSDBnWTJGMFkyZ2dLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQndiM04wVFdWemMyRm5aU2g3ZEhsd1pUb2dKMmx1YVhRdGQyRnpiU2NzSUdWeWNuMGdZWE1nVDNKMFYyRnpiVTFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnWTJGelpTQW5hVzVwZEMxdmNuUW5PbHh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ2FXNXBkRkoxYm5ScGJXVW9aWFl1WkdGMFlTNXBiaWt1ZEdobGJpZ29LU0E5UGlCd2IzTjBUV1Z6YzJGblpTaDdkSGx3WlRvZ0oybHVhWFF0YjNKMEozMGdZWE1nVDNKMFYyRnpiVTFsYzNOaFoyVXBMQ0JsY25JZ1BUNGdjRzl6ZEUxbGMzTmhaMlVvZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKMmx1YVhRdGIzSjBKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z5Y2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBnWVhNZ1QzSjBWMkZ6YlUxbGMzTmhaMlVwS1R0Y2JpQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0J3YjNOMFRXVnpjMkZuWlNoN2RIbHdaVG9nSjJsdWFYUXRiM0owSnl3Z1pYSnlmU0JoY3lCUGNuUlhZWE50VFdWemMyRm5aU2s3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNCallYTmxJQ2RqY21WaGRHVmZZV3hzYjJOaGRHVW5PbHh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnZTIxdlpHVnNmU0E5SUdWMkxtUmhkR0V1YVc0aE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdGIyUmxiR1JoZEdFZ1BTQmpjbVZoZEdWVFpYTnphVzl1UVd4c2IyTmhkR1VvYlc5a1pXd3BPMXh1SUNBZ0lDQWdJQ0J3YjNOMFRXVnpjMkZuWlNoN2RIbHdaVG9nSjJOeVpXRjBaVjloYkd4dlkyRjBaU2NzSUc5MWREb2diVzlrWld4a1lYUmhmU0JoY3lCUGNuUlhZWE50VFdWemMyRm5aU2s3WEc0Z0lDQWdJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNBZ0lDQWdjRzl6ZEUxbGMzTmhaMlVvZTNSNWNHVTZJQ2RqY21WaGRHVmZZV3hzYjJOaGRHVW5MQ0JsY25KOUlHRnpJRTl5ZEZkaGMyMU5aWE56WVdkbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR05oYzJVZ0oyTnlaV0YwWlY5bWFXNWhiR2w2WlNjNlhHNGdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdiVzlrWld4a1lYUmhMQ0J2Y0hScGIyNXpmU0E5SUdWMkxtUmhkR0V1YVc0aE8xeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCelpYTnphVzl1VFdWMFlXUmhkR0VnUFNCamNtVmhkR1ZUWlhOemFXOXVSbWx1WVd4cGVtVW9iVzlrWld4a1lYUmhMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnY0c5emRFMWxjM05oWjJVb2UzUjVjR1U2SUNkamNtVmhkR1ZmWm1sdVlXeHBlbVVuTENCdmRYUTZJSE5sYzNOcGIyNU5aWFJoWkdGMFlYMGdZWE1nVDNKMFYyRnpiVTFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdmU0JqWVhSamFDQW9aWEp5S1NCN1hHNGdJQ0FnSUNBZ0lIQnZjM1JOWlhOellXZGxLSHQwZVhCbE9pQW5ZM0psWVhSbFgyWnBibUZzYVhwbEp5d2daWEp5ZlNCaGN5QlBjblJYWVhOdFRXVnpjMkZuWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQmpZWE5sSUNkamNtVmhkR1VuT2x4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2UyMXZaR1ZzTENCdmNIUnBiMjV6ZlNBOUlHVjJMbVJoZEdFdWFXNGhPMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnpaWE56YVc5dVRXVjBZV1JoZEdFZ1BTQmpjbVZoZEdWVFpYTnphVzl1S0cxdlpHVnNMQ0J2Y0hScGIyNXpLVHRjYmlBZ0lDQWdJQ0FnY0c5emRFMWxjM05oWjJVb2UzUjVjR1U2SUNkamNtVmhkR1VuTENCdmRYUTZJSE5sYzNOcGIyNU5aWFJoWkdGMFlYMGdZWE1nVDNKMFYyRnpiVTFsYzNOaFoyVXBPMXh1SUNBZ0lDQWdmU0JqWVhSamFDQW9aWEp5S1NCN1hHNGdJQ0FnSUNBZ0lIQnZjM1JOWlhOellXZGxLSHQwZVhCbE9pQW5ZM0psWVhSbEp5d2daWEp5ZlNCaGN5QlBjblJYWVhOdFRXVnpjMkZuWlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQmpZWE5sSUNkeVpXeGxZWE5sSnpwY2JpQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHaGhibVJzWlhJZ1BTQmxkaTVrWVhSaExtbHVJVHRjYmlBZ0lDQWdJQ0FnY21Wc1pXRnpaVk5sYzNOcGIyNG9hR0Z1Wkd4bGNpazdYRzRnSUNBZ0lDQWdJSEJ2YzNSTlpYTnpZV2RsS0h0MGVYQmxPaUFuY21Wc1pXRnpaU2Q5SUdGeklFOXlkRmRoYzIxTlpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0J3YjNOMFRXVnpjMkZuWlNoN2RIbHdaVG9nSjNKbGJHVmhjMlVuTENCbGNuSjlJR0Z6SUU5eWRGZGhjMjFOWlhOellXZGxLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR0p5WldGck8xeHVJQ0FnSUdOaGMyVWdKM0oxYmljNlhHNGdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQjdjMlZ6YzJsdmJrbGtMQ0JwYm5CMWRFbHVaR2xqWlhNc0lHbHVjSFYwY3l3Z2IzVjBjSFYwU1c1a2FXTmxjeXdnYjNCMGFXOXVjMzBnUFNCbGRpNWtZWFJoTG1sdUlUdGNiaUFnSUNBZ0lDQWdjblZ1S0hObGMzTnBiMjVKWkN3Z2FXNXdkWFJKYm1ScFkyVnpMQ0JwYm5CMWRITXNJRzkxZEhCMWRFbHVaR2xqWlhNc0lHOXdkR2x2Ym5NcFhHNGdJQ0FnSUNBZ0lDQWdJQ0F1ZEdobGJpaGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZkWFJ3ZFhSeklEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmMzUk5aWE56WVdkbEtIdDBlWEJsT2lBbmNuVnVKeXdnYjNWME9pQnZkWFJ3ZFhSemZTQmhjeUJQY25SWFlYTnRUV1Z6YzJGblpTd2daWGgwY21GamRGUnlZVzV6Wm1WeVlXSnNaVUoxWm1abGNuTW9iM1YwY0hWMGN5a3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhKeUlEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmMzUk5aWE56WVdkbEtIdDBlWEJsT2lBbmNuVnVKeXdnWlhKeWZTQmhjeUJQY25SWFlYTnRUV1Z6YzJGblpTazdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdJQ0I5SUdOaGRHTm9JQ2hsY25JcElIdGNiaUFnSUNBZ0lDQWdjRzl6ZEUxbGMzTmhaMlVvZTNSNWNHVTZJQ2R5ZFc0bkxDQmxjbko5SUdGeklFOXlkRmRoYzIxTlpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lHTmhjMlVnSjJWdVpDMXdjbTltYVd4cGJtY25PbHh1SUNBZ0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYUdGdVpHeGxjaUE5SUdWMkxtUmhkR0V1YVc0aE8xeHVJQ0FnSUNBZ0lDQmxibVJRY205bWFXeHBibWNvYUdGdVpHeGxjaWs3WEc0Z0lDQWdJQ0FnSUhCdmMzUk5aWE56WVdkbEtIdDBlWEJsT2lBblpXNWtMWEJ5YjJacGJHbHVaeWQ5SUdGeklFOXlkRmRoYzIxTlpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUgwZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUNBZ0lDQWdJQ0J3YjNOMFRXVnpjMkZuWlNoN2RIbHdaVG9nSjJWdVpDMXdjbTltYVd4cGJtY25MQ0JsY25KOUlHRnpJRTl5ZEZkaGMyMU5aWE56WVdkbEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJR05oYzJVZ0oybHpMVzl5ZEMxbGJuWXRhVzVwZEdsaGJHbDZaV1FuT2x4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2IzSjBSVzUyU1c1cGRHbGhiR2w2WldRZ1BTQnBjMDl5ZEVWdWRrbHVhWFJwWVd4cGVtVmtLQ2s3WEc0Z0lDQWdJQ0FnSUhCdmMzUk5aWE56WVdkbEtIdDBlWEJsT2lBbmFYTXRiM0owTFdWdWRpMXBibWwwYVdGc2FYcGxaQ2NzSUc5MWREb2diM0owUlc1MlNXNXBkR2xoYkdsNlpXUjlJR0Z6SUU5eWRGZGhjMjFOWlhOellXZGxLVHRjYmlBZ0lDQWdJSDBnWTJGMFkyZ2dLR1Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQndiM04wVFdWemMyRm5aU2g3ZEhsd1pUb2dKMmx6TFc5eWRDMWxibll0YVc1cGRHbGhiR2w2WldRbkxDQmxjbko5SUdGeklFOXlkRmRoYzIxTlpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lHUmxabUYxYkhRNlhHNGdJSDFjYm4wN1hHNGlYU3dLSUNBaWJXRndjR2x1WjNNaU9pQWlPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUVzVFVGQllUdEJRVUZpTzBGQlFVRTdRVUZCVHl4TlFVRk5MRmRCUVZjN1FVRkJRVHRCUVVGQk96czdRVU5CZUVJN1FVRkJRVHRCUVVGQkxHZENRVUZCUVR0QlFVRkJPMEZCUVVFc1RVRkJZVUU3UVVGQllqdEJRVUZCTzBGQlFVOHNUVUZCVFVFc1VVRkJUenRCUVVGQk8wRkJRVUU3T3p0QlEwRndRanRCUVVGQk8wRkJRVUU3UVVGRFFTeFZRVUZKTEZkQlFWY3NUVUZCVFR0QlFVTnVRaXhaUVVGSkxHRkJRV0VzVDBGQlR5eGhRVUZoTEdWQlFXVXNVMEZCVXl4blFrRkJaMElzVTBGQlV5eGpRVUZqTEUxQlFVMDdRVUZETVVjc1dVRkJTU3hQUVVGUExHVkJRV1U3UVVGQllTeDFRa0ZCWVN4alFVRmpPMEZCUTJ4RkxHVkJRMFlzVTBGQlV5eFpRVUZaTEVOQlFVTXNSMEZCUnp0QlFVVjZRaXhqUVVGSkxFbEJRVVVzVjBGQlZTeEpRVUZITzBGQlFVVXNXVUZCUlN4UlFVRk5MRWxCUVVrc1VVRkJVU3hEUVVGRExFZEJRVVVzVFVGQlNUdEJRVUZETEdsQ1FVRkhPMEZCUVVVc1owSkJRVVU3UVVGQlFTeFZRVUZETEVOQlFVTTdRVUZCUlN4alFVRkpMRXRCUVVjc1QwRkJUeXhQUVVGUExFTkJRVU1zUjBGQlJTeERRVUZETEVkQlFVVXNTVUZCUlN4clFrRkJhVUlzUzBGQlJ5eFpRVUZWTEU5QlFVOHNVVUZCVHl4SlFVRkZMR05CUVZrc1QwRkJUeXhsUVVGakxFdEJRVWNzV1VGQlZTeFBRVUZQTEZkQlFWTXNXVUZCVlN4UFFVRlBMRkZCUVZFc1dVRkJWU3haUVVGVkxFOUJRVThzVVVGQlVTeFRRVUZUTEUxQlFVc3NTVUZCUlN4SlFVRkhMRWRCUVVVc1IwRkJSVHRCUVVONFVpeGpRVUZITEVsQlFVYzdRVUZCUXl4blFrRkJTU3hMUVVGSExIVkRRVUZqTEVsQlFVVTdRVUZCWjBJc1owSkJRVVVzU1VGQlJTeEZRVUZGTEZGQlFWRXNRMEZCUXl4SlFVRkZMRTFCUVVrc1dVRkJWVHRCUVVGSkxHZENRVUZGTEVOQlFVTXNSMEZCUlN4TlFVRkpPMEZCUVVNc2EwSkJRVVVzUlVGQlJTeFhRVUZYTEZOQlFWTXNTVUZCUlN4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVlVGQlZTeERRVUZETzBGQlFVVXNjVUpCUVU4c1IwRkJSeXhoUVVGaExFZEJRVVVzU1VGQlJTeFRRVUZQTEUxQlFVMDdRVUZCUVN4WlFVRkRPMEZCUVVVc1owSkJRVVVzVDBGQlJ6dEJRVUZETEd0Q1FVRkZMRVZCUVVVc1IwRkJSU3hKUVVGRk8wRkJRVVVzWjBKQlFVVXNWMEZCVXl4SlFVRkZMRWxCUVVrc1YwRkJWeXhEUVVGRE8wRkJRVWNzY1VKQlFVODdRVUZCUVN4WlFVRkRPMEZCUVVVc1owSkJRVVVzUTBGQlF5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SlFVRkZMRk5CUVVzN1FVRkJReXhyUWtGQlJTeEZRVUZGTEZkQlFWY3NVMEZCVXl4SlFVRkZMRWxCUVVrc1NVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFZRVUZWTEVOQlFVTTdRVUZCUlN4cFFrRkJSeXhUUVVGVExFZEJRVVVzU1VGQlJTeFRRVUZQTEZGQlFVOHNRMEZCUXl4SFFVRkZMRTFCUVVrN1FVRkJReXh2UWtGQlJTeEZRVUZGTEVOQlFVTXNTVUZCUlN4RlFVRkZMRWxCUVVVc1JVRkJSU3hUUVVGUExFTkJRVU03UVVGQlFTeGpRVUZETEVOQlFVTTdRVUZCUVN4WlFVRkRPMEZCUVVVc1lVRkJReXhGUVVGRkxHVkJRV0VzU1VGQlJTeFJRVUZSTEV0QlFVc3NWMEZCVXl4SlFVRkZMRkZCUVZFc1MwRkJTeXhEUVVGRExFVkJRVVVzVVVGQlVTeFBRVUZOTEVkQlFVYzdRVUZCUnl4dlFrRkJVU3hMUVVGTExFMUJRVTBzUTBGQlF6dEJRVUZGTEdOQlFVVXNWVUZCVVN4TlFVRkpPMEZCUVVFc1ZVRkJORUlzVjBGQlV5eE5RVU5vYUVJN1FVRkJSU3huUWtGQlJTeEpRVUZGTEV0QlFVc3NVMEZCVXl4UFFVRkxMR1ZCUVdFc1QwRkJUeXhaUVVGVkxGTkJRVk1zYTBKQlFXZENMRWxCUVVVc1UwRkJVeXhqUVVGakxFMUJRVXNzWlVGQllTeEpRVUZGTEdGQlFWa3NUVUZCU1N4RlFVRkZMRkZCUVZFc1QwRkJUeXhKUVVGRkxFbEJRVVVzUlVGQlJTeFBRVUZQTEVkQlFVVXNSVUZCUlN4UlFVRlJMRlZCUVZNc1JVRkJSU3hGUVVGRkxGbEJRVmtzUjBGQlJ5eEpRVUZGTEVOQlFVTXNTVUZCUlN4SlFVRkZMRWxCUVVjc1NVRkJSU3hQUVVGSE8wRkJRVU1zYTBKQlFVa3NTVUZCUlN4SlFVRkpPMEZCUVdVc1owSkJRVVVzUzBGQlN5eFBRVUZOTEVkQlFVVXNTMEZCUlR0QlFVRkZMR2RDUVVGRkxFdEJRVXNzU1VGQlNUdEJRVUZGTEhGQ1FVRlBMRVZCUVVVN1FVRkJRU3haUVVGWkxFZEJRVVVzVFVGQlNTeEpRVUZGTEU5QlFVYzdRVUZCUXl4clFrRkJTU3hKUVVGRkxFbEJRVWs3UVVGQlpTeG5Ra0ZCUlN4TFFVRkxMRTlCUVUwc1IwRkJSU3hMUVVGRk8wRkJRVVVzWjBKQlFVVXNaVUZCWVR0QlFVRmpMR2RDUVVGRkxFdEJRVXNzU1VGQlNUdEJRVUZGTEhGQ1FVRlBMRWxCUVVrc1YwRkJWeXhGUVVGRkxGRkJRVkU3UVVGQlFTeFpRVUZETEVsQlFVY3NTVUZCUlN4RFFVRkRMRWRCUVVVc1IwRkJSU3hOUVVGSk8wRkJRVU1zYTBKQlFVa3NTVUZCUlN4SlFVRkpPMEZCUVdVc1owSkJRVVVzUzBGQlN5eFBRVUZOTEVkQlFVVXNTVUZCUlR0QlFVRkZMR2RDUVVGRkxHVkJRMnBtTzBGQlFXTXNaMEpCUVVVc1UwRkJUeXhOUVVGSk8wRkJRVU1zZFVKQlFVc3NSVUZCUlN4VlFVRlJMRXRCUVVjc1JVRkJSU3hWUVVGUkxFVkJRVVVzVjBGQlV5eEZRVUZGTEVWQlFVVXNVVUZCVVN4SlFVRkZMRVZCUVVVN1FVRkJRU3hqUVVGRE8wRkJRVVVzWjBKQlFVVXNWVUZCVVR0QlFVRkZMR2RDUVVGRkxFdEJRVXNzU1VGQlNUdEJRVUZCTEZsQlFVTTdRVUZCUlN4alFVRkpMRXRCUVVjc1JVRkJSU3hUUVVGUExGRkJRVkVzU1VGQlNTeExRVUZMTEU5QlFVOHNSMEZCUlN4SlFVRkZMRVZCUVVVc1dVRkJWU3hSUVVGUkxFMUJRVTBzUzBGQlN5eFBRVUZQTzBGQlFVVXNhVUpCUVU4c1QwRkJUeXhIUVVGRkxFVkJRVVU3UVVGQlJTeGxRVUZITzBGQlFVc3NXVUZCUlN4blFrRkJZeXhKUVVGRkxFVkJRVVU3UVVGQllTeGpRVUZKTzBGQlFVVXNXVUZCUlN4bFFVRmhMRWxCUVVVc1JVRkJSVHRCUVVGWkxHTkJRVWtzWjBKQlFXTXNSVUZCUlN4cFFrRkJaVHRCUVVGSExITkNRVUZWTEU5QlFVOHNaVUZCWVN4RlFVRkZMR2xEUVVGcFF6dEJRVUZGTEdOQlFVa3NSMEZCUlN4SFFVRkZMRXRCUVVjc1QwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVU51WVN4dFFrRkJVeXhMUVVGSk8wRkJRVU1zWjBKQlFVa3NTVUZCUlN4RlFVRkZPMEZCUVU4c1kwRkJSU3hSUVVGTkxFbEJRVVVzU1VGQlNTeFZRVUZWTEVOQlFVTTdRVUZCUlN4alFVRkZMRk5CUVU4c1NVRkJTU3hYUVVGWExFTkJRVU03UVVGQlJTeGpRVUZGTEZOQlFVOHNTVUZCUlN4SlFVRkpMRmRCUVZjc1EwRkJRenRCUVVGRkxHTkJRVVVzVTBGQlR5eEpRVUZGTEVsQlFVa3NWMEZCVnl4RFFVRkRPMEZCUVVVc1kwRkJSU3hWUVVGUkxFbEJRVWtzV1VGQldTeERRVUZETzBGQlFVVXNZMEZCUlN4VlFVRlJMRWxCUVVVc1NVRkJTU3haUVVGWkxFTkJRVU03UVVGQlJTeGpRVUZGTEZWQlFWRXNTVUZCU1N4aFFVRmhMRU5CUVVNN1FVRkJSU3hqUVVGRkxGVkJRVkVzU1VGQlNTeGhRVUZoTEVOQlFVTTdRVUZCUVN4VlFVRkRPMEZCUVVNc1kwRkJTU3hIUVVGRkxFdEJRVWNzUTBGQlF5eEhRVUZGTEV0QlFVY3NRMEZCUXl4SFFVRkZMRXRCUVVjc1EwRkJRenRCUVVGRkxHMUNRVUZUTEV0QlFVazdRVUZCUXl4blFrRkJTU3hKUVVGRkxFVkJRVVVzVDBGQlR5eE5RVUZOTzBGQlFVVXNaVUZCUnl4UlFVRlJMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRVU1zWTBGQlNTeEpRVUZGTEVkQlFVVXNTVUZCUlN4TlFVRkxMRWxCUVVVN1FVRkRhbGNzYlVKQlFWTXNSVUZCUlN4SFFVRkZPMEZCUVVNc1owSkJRVWNzUlVGQlJUdEJRVUZSTEdkQ1FVRkZMRkZCUVZFc1EwRkJRenRCUVVGRkxHZENRVUZGTEdGQlFWY3NTVUZCUlR0QlFVRkpMR05CUVVVc1EwRkJRenRCUVVGRkxHbENRVUZITzBGQlFVY3NaMEpCUVVVc1NVRkJTU3haUVVGWkxHRkJRV0VzU1VGQlJTd3dRMEZCTUVNN1FVRkJSU3hqUVVGRkxFTkJRVU03UVVGQlJTeHJRa0ZCVFR0QlFVRkJMRlZCUVVVN1FVRkJReXh0UWtGQlV5eEhRVUZITEVkQlFVVTdRVUZCUXl4dFFrRkJUeXhGUVVGRkxGZEJRVmNzZFVOQlFYVkRPMEZCUVVFc1ZVRkJRenRCUVVGRExHTkJRVWs3UVVGQlJTeGpRVUZGTzBGQlFXZENMR05CUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJUdEJRVUZETEdkQ1FVRkpMRXRCUVVjN1FVRkJSU3huUWtGQlJTeEZRVUZGTEdGQlFWY3NSVUZCUlN4WFFVRlhMRWxCUVVjc1EwRkJReXhKUVVGRkxFbEJRVVU3UVVGQlFTeFZRVUZGTzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRk8wRkJRVU1zWjBKQlFVY3NTMEZCUnl4TFFVRkhPMEZCUVVVc2NVSkJRVThzU1VGQlNTeFhRVUZYTEVOQlFVTTdRVUZCUlN4blFrRkJSenRCUVVGRkxIRkNRVUZQTEVWQlFVVXNRMEZCUXp0QlFVRkZMR3RDUVVGTE8wRkJRVUVzVlVGQmEwUTdRVUZETTJJc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTzBGQlFVTXNaMEpCUVVjc1EwRkJReXhOUVVGSkxFMUJRVWtzU1VGQlJ6dEJRVUZETEd0Q1FVRkhMR05CUVZrc1QwRkJUeXhUUVVGUExFTkJRVU1zUlVGQlJTeFhRVUZYTEZOQlFWTTdRVUZCUlN4MVFrRkJUeXhOUVVGTkxFZEJRVVVzUlVGQlF5eGhRVUZaTEdOQlFXRXNRMEZCUXl4RlFVRkZMRXRCUVVzc1QwRkJSenRCUVVGRExITkNRVUZITEVOQlFVTXNSVUZCUlR0QlFVRkhMREJDUVVGTExIbERRVUYxUXl4SlFVRkZPMEZCUVVrc2VVSkJRVThzUlVGQlJTeFpRVUZaTzBGQlFVRXNaMEpCUVVNc1EwRkJReXhGUVVGRkxFMUJRVTBzVFVGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVRkZMR3RDUVVGSE8wRkJRVVVzZFVKQlFVOHNTVUZCU1N4UlFVRlJMRU5CUVVNc1IwRkJSU3hOUVVGSk8wRkJRVU1zYjBKQlFVVXNSMEZCUlN4UFFVRkhMRVZCUVVVc1NVRkJTU3hYUVVGWExFTkJRVU1zUTBGQlF5eEhRVUZGTEVOQlFVTTdRVUZCUVN4blFrRkJReXhEUVVGRE8wRkJRVUVzV1VGQlF6dEJRVUZETEcxQ1FVRlBMRkZCUVZFc1VVRkJVU3hGUVVGRkxFdEJRVXNzVFVGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkJReXh0UWtGQlV5eEhRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVThzUjBGQlJ5eERRVUZETEVWQlFVVXNTMEZCU3l4UFFVRkhMRmxCUVZrc1dVRkJXU3hIUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEV0QlFVc3NUMEZCUnl4RFFVRkRMRVZCUVVVc1MwRkJTeXhIUVVGRkxFOUJRVWM3UVVGQlF5eG5Ra0ZCUlN3MFEwRkJNRU1zUTBGQlF6dEJRVUZGTEdkQ1FVRkZMRU5CUVVNN1FVRkJRU3haUVVGRExFTkJRVU03UVVGQlFTeFZRVUZETzBGQlF6RmxMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTzBGQlFVTXNaMEpCUVVrc1NVRkJSVHRCUVVGRkxHMUNRVUZQTEV0QlFVY3NZMEZCV1N4UFFVRlBMRmxCUVZrc2QwSkJRWE5DTEVkQlFVY3NRMEZCUXl4TFFVRkhMRVZCUVVVc1YwRkJWeXhUUVVGVExFdEJRVWNzVFVGQlNTeGpRVUZaTEU5QlFVOHNVVUZCVFN4SFFVRkhMRWRCUVVVc1IwRkJSU3hEUVVGRExFbEJRVVVzVFVGQlRTeEhRVUZGTEVWQlFVTXNZVUZCV1N4alFVRmhMRU5CUVVNc1JVRkJSU3hMUVVGTExFOUJRVWNzV1VGQldTeHhRa0ZCY1VJc1IwRkJSU3hEUVVGRExFVkJRVVVzUzBGQlN5eEhRVUZGTEZOQlFWTXNSMEZCUlR0QlFVRkRMR2RDUVVGRkxHOURRVUZyUXl4RFFVRkRPMEZCUVVVc1owSkJRVVVzTWtOQlFUSkRPMEZCUVVVc2NVSkJRVThzUjBGQlJ5eEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMRmxCUVVNc1EwRkJReXhEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZETEdOQlFVa3NSMEZCUlN4SlFVRkZMRTlCUVVjN1FVRkJReXh0UWtGQlN5eEpRVUZGTEVWQlFVVTdRVUZCVVN4blFrRkJSU3hOUVVGTkxFVkJRVVVzUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZEZUZvc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTzBGQlFVTXNhVUpCUVVzc1MwRkJSeXhKUVVGRk8wRkJRVWNzYVVKQlFVc3NTMEZCUnl4VFFVRlRMRWRCUVVVN1FVRkJReXhuUWtGQlJTeExRVUZMTEV0QlFVY3NTMEZCUnl4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGQkxGbEJRVU03UVVGQlJTeHBRa0ZCU3l4TFFVRkhMRk5CUVZNc1IwRkJSVHRCUVVGRExHZENRVUZGTEV0QlFVc3NTMEZCUnl4TFFVRkhMRTFCUVVrc1EwRkJReXhKUVVGRk8wRkJRVUVzV1VGQlF6dEJRVUZGTEdsQ1FVRkxMRXRCUVVjc1UwRkJVeXhIUVVGRkxFZEJRVVU3UVVGQlF5eHRRa0ZCU3l4SFFVRkhPMEZCUVVVc2JVSkJRVXNzUjBGQlJ5eERRVUZETzBGQlFVVXNiVUpCUVVzc1IwRkJSeXhEUVVGRE8wRkJRVUVzV1VGQlF6dEJRVUZGTEdsQ1FVRkxMRXRCUVVjc1YwRkJWVHRCUVVGRExHZENRVUZGTEV0QlFVc3NTMEZCUnl4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRk8wRkJRVUVzV1VGQlF6dEJRVUZCTEZWQlFVTTdRVUZEYms0c1kwRkJTU3hMUVVGSExFZEJRVVVzUzBGQlJ5eEhRVUZGTEV0QlFVY3NaVUZCWVN4UFFVRlBMR05CUVZrc1NVRkJTU3haUVVGWkxFMUJRVTBzU1VGQlJTeFJRVUZQTEV0QlFVY3NRMEZCUXl4SFFVRkZMRWRCUVVVc1RVRkJTVHRCUVVGRExHMUNRVUZMTzBGQlFVVXNaMEpCUVVrc1NVRkJSU3hKUVVGRk8wRkJRVVVzYVVKQlFVa3NTVUZCUlN4SFFVRkZMRVZCUVVVc1EwRkJReXhMUVVGSExFVkJRVVVzUzBGQlJ6dEJRVUZKTEdkQ1FVRkZPMEZCUVVVc1owSkJRVWNzUzBGQlJ5eEpRVUZGTEV0QlFVY3NSVUZCUlN4VlFVRlJPMEZCUVVjc2NVSkJRVThzUjBGQlJ5eFBRVUZQTEVWQlFVVXNVMEZCVXl4SFFVRkZMRU5CUVVNc1EwRkJRenRCUVVGRkxHbENRVUZKTEVsQlFVVXNTVUZCUnl4SlFVRkZMRXRCUVVjN1FVRkJReXhyUWtGQlNTeEpRVUZGTEVWQlFVVXNSMEZCUnp0QlFVRkZMR3RDUVVGSExFbEJRVVVzUzBGQlNUdEJRVUZETEc5Q1FVRkpMRWxCUVVVc1JVRkJSU3hIUVVGSExFbEJRVVU3UVVGQlJ5eHZRa0ZCUnl4UlFVRk5MRWxCUVVVN1FVRkJTeXgxUWtGQlJ5eFBRVUZQTEdOQlFXTXNTVUZCUlN4UFFVRkxMRWxCUVVVc1EwRkJRenRCUVVGQkxIRkNRVUZOTzBGQlFVTXNjMEpCUVVrc1NVRkJSU3hGUVVGRkxFZEJRVWNzU1VGQlJUdEJRVUZITEhOQ1FVRkZMRkZCUVUwc1NVRkJSU3hSUVVGTkxFbEJRVVVzVDBGQlN5eExRVUZITEV0QlFVY3NTVUZCUlN4TFFVRkhMRWxCUVVVc1RVRkJTU3hMUVVGSExFdEJRVWNzUzBGQlJ5eExRVUZITEVsQlFVVXNSVUZCUlN4SFFVRkhMRWxCUVVVN1FVRkJSeXd3UWtGQlRTeEpRVUZGTEV0QlFVY3NUMEZCVHl4aFFVRmhMRU5CUVVNc1MwRkJSeXhMUVVGSExFOUJRVTBzUzBGQlJ5eFBRVUZQTEdGQlFXRXNVVUZCVFN4TFFVRkhMRWxCUVVjc1VVRkJUU3hKUVVGRkxFbEJRVWs3UVVGQlFTeG5Ra0ZCUlR0QlFVRkJMR05CUVVNN1FVRkJUU3h4UWtGQlJ5eFBRVUZQTEdGQlFXRXNRMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJReXh0UWtGQlR6dEJRVUZCTEZWQlFVTXNSMEZEZUdkQ0xFbEJRVVVzUTBGQlF5eEhRVUZGTEU5QlFVc3NUMEZCU3l4TFFVRkhMRWRCUVVjc1IwRkJSU3hIUVVGRkxFTkJRVU1zU1VGQlJTeEpRVUZITEVsQlFVVXNUMEZCUnp0QlFVRkRMSEZDUVVGUkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVkQlFVVXNTVUZCUlN4RlFVRkZMRkZCUVU4c1JVRkJSU3hIUVVGRk8wRkJRVU1zYTBKQlFVa3NTVUZCUlN4RlFVRkZMRmRCUVZjc1EwRkJRenRCUVVGRkxIRkNRVUZMTEVsQlFVVXNUVUZCU1N4UlFVRk5MRWxCUVVVc1MwRkJSeXhKUVVGRkxGTkJRVThzUzBGQlJ5eFRRVUZQTEV0QlFVY3NTMEZCUnl4SFFVRkZMRVZCUVVVc1MwRkJSeXhMUVVGSE8wRkJRVUVzV1VGQlF6dEJRVUZETEcxQ1FVRlBPMEZCUVVFc1ZVRkJReXhIUVVGRkxFbEJRVVVzUTBGQlF5eEhRVUZGTEVkQlFVVXNSMEZCUlN4TlFVRkpPMEZCUVVNc2JVSkJRVXM3UVVGQlJTeG5Ra0ZCUnl4RlFVRkZMRWxCUVVVN1FVRkJSeXh4UWtGQlR6dEJRVUZGTEdkQ1FVRkpMRWxCUVVVN1FVRkJSU3huUWtGQlJTeEpRVUZGTEVsQlFVVTdRVUZCUlN4eFFrRkJVU3hKUVVGRkxFZEJRVVVzU1VGQlJTeEZRVUZGTEZGQlFVOHNSVUZCUlN4SFFVRkZPMEZCUVVNc2EwSkJRVWtzU1VGQlJTeEZRVUZGTEZkQlFWY3NRMEZCUXp0QlFVRkZMR3RDUVVGSExGTkJRVThzUzBGQlJ5eFRRVUZQTEVkQlFVVTdRVUZCUXl4dlFrRkJTU3hKUVVGRkxFVkJRVVVzVjBGQlZ5eEZRVUZGTEVOQlFVTTdRVUZCUlN4dlFrRkJSU3hWUVVGUkxFbEJRVVVzVTBGQlR5eE5RVUZKTEVsQlFVVTdRVUZCUVN4alFVRkpPMEZCUVVNc2EwSkJRVWNzVDBGQlN5eEhRVUZGTzBGQlFVTXNiMEpCUVVjc1MwRkJSenRCUVVGRk8wRkJRVTBzYTBKQlFVVXNVVUZCVFN4RFFVRkRMRWxCUVVVN1FVRkJRU3hqUVVGRExFOUJRVXM3UVVGQlF5eHZRa0ZCUnl4UlFVRk5MRWRCUVVVN1FVRkJReXh6UWtGQlJ5eEpRVUZGTEV0QlFVYzdRVUZCUlR0QlFVRk5MRzlDUVVGRkxGRkJRVTBzUTBGQlF5eEpRVUZGTEUxQlFVa3NTMEZCUnp0QlFVRkJMR2RDUVVGRExFOUJRVXM3UVVGQlF5eHpRa0ZCUnl4VFFVRlBMRWRCUVVVN1FVRkJReXgzUWtGQlJ5eEpRVUZGTEV0QlFVYzdRVUZCUlR0QlFVRk5MSE5DUVVGRkxGRkJRVTBzUTBGQlF5eEpRVUZGTEUxQlFVa3NTMEZCUnp0QlFVRkJMR3RDUVVGRkxFOUJRVXM3UVVGQlF5eDNRa0ZCUnl4SlFVRkZMRXRCUTI1bU8wRkJRVVU3UVVGQlRTeHpRa0ZCUlN4UlFVRk5MRU5CUVVNc1NVRkJSU3hOUVVGSkxFdEJRVWM3UVVGQlJ5eHpRa0ZCUlN4UlFVRk5MRU5CUVVNc1NVRkJSU3hOUVVGSkxFdEJRVWNzUzBGQlJ6dEJRVUZCTEd0Q1FVRkZPMEZCUVVNc2IwSkJRVVVzVVVGQlRTeERRVUZETEVsQlFVVXNUVUZCU1N4TFFVRkhMRWxCUVVVN1FVRkJRU3huUWtGQlJUdEJRVUZETEd0Q1FVRkZMRkZCUVUwc1EwRkJReXhKUVVGRkxFMUJRVWtzU1VGQlJUdEJRVUZCTEdOQlFVVTdRVUZCUVN4WlFVRkRPMEZCUVVNc1kwRkJSU3hOUVVGSkxFTkJRVU1zU1VGQlJUdEJRVUZGTEcxQ1FVRlBMRWxCUVVVN1FVRkJRU3hWUVVGRExFZEJRVVVzU1VGQlJTeFBRVUZITEUxQlFVa3NTVUZCUlN4TlFVRkpMRTFCUVVrc1NVRkJSU3hQUVVGTExFMUJRVWtzU1VGQlJTeE5RVUZMTEV0QlFVY3NRMEZCUXl4SFFVRkZMRWxCUVVjc1NVRkJSeXhKUVVGSExFdEJRVWtzUzBGQlNTeExRVUZKTEV0QlFVa3NTMEZCU1N4TFFVRkpMRXRCUVVrc1IwRkJSeXhIUVVGRkxFdEJRVWNzUTBGQlF5eEhRVUZGTEVsQlFVY3NTVUZCUnl4SlFVRkhMRXRCUVVrc1MwRkJTU3hMUVVGSkxFdEJRVWtzUzBGQlNTeExRVUZKTEV0QlFVa3NSMEZCUnl4SFFVRkZMRXRCUVVjc1QwRkJSenRCUVVGRExHZENRVUZKTEVsQlFVVXNSVUZCUlN4RFFVRkRMRWxCUVVVc1IwRkJSU3hKUVVGRkxFZEJRVWNzUTBGQlF6dEJRVUZGTEdsQ1FVRkhMRVZCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEcxQ1FVRlBPMEZCUVVFc1ZVRkJReXhIUVVGRkxFbEJRVVVzUTBGQlF5eEhRVUZGTEV0QlFVY3NUVUZCU1R0QlFVRkRMR2RDUVVGSExFTkJRVU1zU1VGQlJ6dEJRVUZETEd0Q1FVRkpMRWxCUVVVc1JVRkJReXhOUVVGTExGbEJRVmNzVTBGQlVTeFpRVUZYTEUxQlFVc3NTMEZCU1N4TFFVRkpMRXRCUVVrc1RVRkJTeXhyUWtGQmFVSXNUMEZCVFN4WlFVRlZMRTlCUVU4c1lVRkJWeXhWUVVGVkxHRkJRVmNzVlVGQlZTeFZRVUZWTEVOQlFVTXNTMEZCUnl4TFFVRkxPMEZCUVVFc1owSkJRVkU3UVVGQlFTeG5Ra0ZEYm1ZN1FVRkJRU3hqUVVGSExFbEJRVVVzVlVGQlV5eEhRVUZGTEV0QlFVY3NhVUpCUVdkQ0xFZEJRVVU3UVVGQlJTeHRRa0ZCU1N4TFFVRkxPMEZCUVVVc01rSkJRVk1zUlVGQlJTeERRVUZETEVsQlFVVXNUMEZCVHl4RlFVRkZMRU5CUVVNc1NVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlJTeEZRVUZGTEVOQlFVTTdRVUZCUlN4clFrRkJTU3hKUVVGRkxFTkJRVU03UVVGQlJTeHRRa0ZCU1N4TFFVRkxPMEZCUVVVc2EwSkJRVVVzUzBGQlN5eEhRVUZITEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJReXhGUVVGRk8wRkJRVVVzYlVKQlFVYzdRVUZCUVN4WlFVRkRPMEZCUVVNc2JVSkJRVTg3UVVGQlFTeFZRVUZGTEVkQlFVVXNTVUZCUnl4TFFVRkhMRU5CUVVNc1RVRkJTeXhEUVVGRExFZEJRVVVzUTBGQlF5eERRVUZETEVkQlFVVXNTMEZCUnl4RFFVRkRMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhGUVVGRkxFZEJRVVVzUzBGQlJ5eERRVUZETEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4RlFVRkZPMEZCUVVVc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTzBGQlFVTXNaMEpCUVVrc1NVRkJSU3hOUVVGTkxFVkJRVVVzUTBGQlF5eEpRVUZGTEVOQlFVTTdRVUZCUlN4alFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFVkJRVVVzVFVGQlRUdEJRVUZGTEcxQ1FVRlBPMEZCUVVFc1ZVRkJRenRCUVVOdVZDeHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHhRa0ZCVXl4RlFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zYlVKQlFVa3NTVUZCUlN4WlFVRlZMRTlCUVU4c1NVRkJSU3hGUVVGRkxGTkJRVk1zU1VGQlJTeExRVUZITEVsQlFVY3NSVUZCUlN4VFFVRlBPMEZCUVVjc2IwSkJRVVVzUlVGQlJTeERRVUZETEVsQlFVVTdRVUZCUlN4eFFrRkJUenRCUVVGQkxGbEJRVU03UVVGQlF5eHhRa0ZCVXl4RlFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExIRkNRVUZQTEVWQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVjN1FVRkJRU3haUVVGRE8wRkJRVU1zY1VKQlFWTXNSVUZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXgxUWtGQlV5eEZRVUZGTEVsQlFVYzdRVUZCUXl4MVFrRkJUeXhKUVVGRkxFdEJRVWNzUzBGQlJ5eEpRVUZGTEV0QlFVY3NTVUZCUlR0QlFVRkJMR05CUVVNN1FVRkJReXhyUWtGQlNUdEJRVUZGTEhGQ1FVRkxMRWxCUVVVc1JVRkJSU3hGUVVGRkxGbEJRVmtzU1VGQlJTeEZRVUZGTEZsQlFWa3NRMEZCUXl4TlFVRkpMRTlCUVVzc1NVRkJSU3hGUVVGRkxFVkJRVVVzVTBGQlV5eEpRVUZGTEVWQlFVVXNVMEZCVXl4RFFVRkRMRTlCUVVzc1NVRkJSU3hGUVVGRkxFVkJRVVVzVVVGQlVTeEpRVUZGTEVWQlFVVXNVVUZCVVN4RFFVRkRPMEZCUVVjc2NVSkJRVTg3UVVGQlFTeFpRVUZETzBGQlFVTXNjVUpCUVZNc1JVRkJSU3hIUVVGRk8wRkJRVU1zYzBKQlFVOHNSVUZCUlN4UFFVRlBMRWRCUVVVN1FVRkJRU3huUWtGQlF5eExRVUZMTzBGQlFVVXNlVUpCUVU4c1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEpRVUZGTEVkQlFVVXNTVUZCUnl4RlFVRkZPMEZCUVVFc1owSkJRVVVzUzBGQlN6dEJRVUZGTEhsQ1FVRlBPMEZCUVVFc1owSkJRVVVzUzBGQlN6dEJRVUZGTEhsQ1FVRlBMRWxCUVVrc1MwRkJTeXhGUVVGRkxGbEJRVmtzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4blFrRkJSU3hMUVVGTE8wRkJRVVVzZVVKQlFVOHNTVUZCU1R0QlFVRkJMRzlDUVVGTExFVkJRVVVzV1VGQldUdEJRVUZCTEc5Q1FVTTFaanRCUVVGQkxHOUNRVUZGTzBGQlFVRXNhMEpCUVVNN1FVRkJRU3huUWtGQlJTeExRVUZMTzBGQlFVVXNlVUpCUVU4c1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMR2RDUVVGRkxFdEJRVXM3UVVGQlJTeDVRa0ZCVHl4SlFVRkpMRXRCUVVzc1JVRkJSU3haUVVGWkxFbEJRVVVzUjBGQlJTeEpRVUZITEVWQlFVVTdRVUZCUVN4blFrRkJSU3hMUVVGTE8wRkJRVVVzZVVKQlFVOHNTVUZCU1N4TFFVRkxMRVZCUVVVc1dVRkJXU3hKUVVGRkxFZEJRVVVzU1VGQlJ5eEZRVUZGTzBGQlFVRXNZMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJReXh4UWtGQlV5eEZRVUZGTEVkQlFVVTdRVUZCUXl4clFrRkJTU3hKUVVGRkxFVkJRVVU3UVVGQlJ5eHRRa0ZCU1N4SlFVRkZMRWxCUVVrc1MwRkJUU3hKUVVGSkxFdEJRVXNzUlVGQlJTeExRVUZITEUxQlFVc3NSMEZCUlN4RFFVRkRMRVZCUVVjc1VVRkJVU3hEUVVGRExFZEJRVVVzU1VGQlJTeExRVUZITzBGQlFVTXNiMEpCUVVrc1NVRkJSU3hGUVVGRkxGTkJRVk1zUjBGQlJTeExRVUZITEVWQlFVVXNSVUZCUlN4WlFVRlpMRU5CUVVNc1NVRkJSU3hMUVVGSExFbEJRVWtzUTBGQlF6dEJRVUZGTEc5Q1FVRkhMRWxCUVVVc1NVRkJSU3hGUVVGRkxGRkJRVkU3UVVGQlJTeDFRa0ZCUnl4SlFVRkZMRVZCUVVVc1VVRkJVU3hKUVVGRkxFZEJRVVVzUlVGQlJTeFJRVUZSTEVOQlFVTXNSMEZCUlN4TFFVRkhMRWxCUVVVc1JVRkJSU3hUUVVGVExFbEJRVVVzUTBGQlF5eExRVUZITEVWQlFVVXNVMEZCVXl4RFFVRkRMRWRCUVVVc1JVRkJSU3haUVVGWkxFVkJRVVVzV1VGQldTeEpRVUZGTEVOQlFVTTdRVUZCUVN4eFFrRkJUenRCUVVGRExHOUNRVUZGTEZGQlFWRXNSVUZCUlN4UlFVRlJMRWxCUVVVc1EwRkJRenRCUVVGRk8wRkJRVUVzWjBKQlFVczdRVUZCUVN4alFVRkRPMEZCUVVNc2EwSkJRVVVzU1VGQlNTeExRVUZMTEVWQlFVVXNXVUZCV1N4SlFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzYTBKQlFVVXNSVUZCUlN4SlFVRkpPMEZCUVVFc1owSkJRVXNzUlVGQlJTeFpRVUZaTzBGQlFVRXNaMEpCUTI1bU8wRkJRVUVzWjBKQlFVVTdRVUZCUVN4alFVRkRMRU5CUVVNN1FVRkJSU3hyUWtGQlJTeEZRVUZGTEVOQlFVTTdRVUZCUlN4eFFrRkJUeXhMUVVGSExFVkJRVVVzUjBGQlJTeERRVUZETEVsQlFVVXNTMEZCUnl4RlFVRkZMRWRCUVVVc1EwRkJReXhKUVVGRkxFVkJRVVVzV1VGQldTeEpRVUZGTEVsQlFVVXNSVUZCUlN4WlFVRlpMRWxCUVVVc1JVRkJSU3haUVVGWkxFbEJRVVU3UVVGQlFTeFpRVUZETzBGQlFVTXNiVUpCUVVzN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEcxQ1FVRkxPMEZCUVVVc2JVSkJRVXM3UVVGQlJTeG5Ra0ZCU1N4SlFVRkZMRVZCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF6dEJRVUZGTEdkQ1FVRkZMRVZCUVVNc1NVRkJSeXhGUVVGRkxFdEJRVWNzVFVGQlNTeERRVUZETEVkQlFVVXNTVUZCUnl4RlFVRkZMRWxCUVVVc1MwRkJSeXhOUVVGSkxFTkJRVU1zUjBGQlJTeEpRVUZITEVWQlFVVXNTVUZCUlN4TFFVRkhMRTFCUVVrc1EwRkJReXhIUVVGRkxFbEJRVWNzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWRCUVVVc1NVRkJSeXhGUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkhMRVZCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEhRVUZGTEVsQlFVY3NSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFZEJRVVVzU1VGQlJ5eEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1IwRkJSU3hKUVVGSExFVkJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVjc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVkQlFVVXNTVUZCUnl4SlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGRkxFZEJRVVU3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRU5CUVVNN1FVRkJSU3huUWtGQlJUdEJRVUZCTEdOQlFVTXNUVUZCU3p0QlFVRkJMR05CUVhWQ0xFMUJRVXM3UVVGQlFTeGpRVUZYTEUxQlFVczdRVUZCUVN4alFVRlhMRTFCUVVzN1FVRkJRU3hqUVVGTExFMUJRVXM3UVVGQlFTeGpRVUZqTEUxQlFVczdRVUZCUVN4alFVRlJMRTFCUVVzN1FVRkJRU3hqUVVGWExFMUJRVXM3UVVGQlFTeGpRVUZYTEUxQlFVczdRVUZCUVN4alFVRlhMRTlCUVUwN1FVRkJRU3hqUVVOdVppeFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJWeXhQUVVGTk8wRkJRVUVzWTBGQlZ5eFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJTeXhQUVVGTk8wRkJRVUVzWTBGQlN5eFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJTeXhQUVVGTk8wRkJRVUVzWTBGQlN5eFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJTeXhQUVVGTk8wRkJRVUVzWTBGQlN5eFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJTeXhQUVVGTk8wRkJRVUVzWTBGQlN5eFBRVUZOTzBGQlFVRXNZMEZCU3l4UFFVRk5PMEZCUVVFc1kwRkJTeXhQUVVGTk8wRkJRVUVzV1VGQlNUdEJRVUZGTEhGQ1FVRlJMRXRCUVVzN1FVRkJSU3hyUWtGQlJTeEZRVUZGTEZGQlFWRXNTVUZCU1N4UFFVRlBMRWRCUVVVc1IwRkJSeXhIUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETzBGQlFVVXNaMEpCUVVrc1MwRkJSeXd5UkVGQk1rUXNUVUZCVFN4SFFVRkhMRWRCUVVVc1MwRkJSeXgzUmtGQmQwWXNUVUZCVFN4SFFVRkhPMEZCUVVVc1owSkJRVVVzUlVGQlF5eE5RVUZMTEU5QlFVY3NSMEZCUnl4RlFVRkZMRVZCUVVVc1JVRkJSU3hWUVVGVkxFZEJRVVVzUTBGQlF5eEhRVUZGTEUxQlFVc3NUMEZCUnl4SFFVRkhMRVZCUVVVc1JVRkJSU3hIUVVGRkxFMUJRVXNzVDBGRGJHWXNSMEZCUnl4RlFVRkZMRVZCUVVVc1JVRkJSU3hWUVVGVkxFZEJRVVVzUTBGQlF5eEhRVUZGTEUxQlFVc3NUMEZCUnl4SFFVRkhMRVZCUVVVc1JVRkJSU3hIUVVGRkxFMUJRVXNzVDBGQlJ5eEhRVUZITEVWQlFVVXNTMEZCUnl4UlFVRk5MRTFCUVVrc1IwRkJSU3hEUVVGRExFZEJRVVVzVFVGQlN5eFBRVUZITEVWQlFVVXNSVUZCUlN4SlFVRkhMRU5CUVVNc1IwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJTeEZRVUZGTEVsQlFVY3NSMEZCUlN4SFFVRkhMRWRCUVVVc1RVRkJTeXhQUVVGSExFVkJRVVVzUTBGQlF5eEZRVUZGTEZOQlFWTXNSVUZCUlN4VlFVRlZMRU5CUVVNc1IwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJTeERRVUZETEVkQlFVVXNUVUZCU3l4UFFVRkhMRVZCUVVVc1JVRkJSU3hKUVVGSExFTkJRVU1zUjBGQlJTeE5RVUZMTEU5QlFVYzdRVUZCUXl4clFrRkJSU3hGUVVGRk8wRkJRVWNzYlVKQlFVY3NTVUZCUlN4SlFVRkZMRXRCUVVjc1MwRkJSeXhOUVVGSkxFdEJRVWM3UVVGQlNTeHhRa0ZCVHl4RlFVRkZMRWRCUVVVc1EwRkJRenRCUVVGQkxGbEJRVU1zUjBGQlJTeE5RVUZMTEU5QlFVYzdRVUZCUXl4MVFrRkJVU3hKUVVGRkxFZEJRVVVzU1VGQlJTeEhRVUZGTEV0QlFVY3NSVUZCUlN4TFFVRkhMRWRCUVVVc1RVRkJTU3hGUVVGRkxFVkJRVVVzUzBGQlJ5eEpRVUZKTEVsQlFVVXNTMEZCUnl4SlFVRkpMRWRCUVVjN1FVRkJSVHRCUVVGRExIRkNRVUZQTEVWQlFVVXNSVUZCUlN4TFFVRkhMRWRCUVVVc1EwRkJRenRCUVVGQkxGbEJRVU1zUjBGQlJTeE5RVUZMTEU5QlFVY3NSVUZCUlN4RlFVRkZMRXRCUVVjc1IwRkJSU3hEUVVGRExFZEJRVVVzVFVGQlN5eFBRVUZITEVWQlFVVXNSVUZCUlN4SlFVRkhMRU5CUVVNc1IwRkJSU3hOUVVGTExFMUJRVWtzVFVGQlN5eE5RVUZMTEU5QlFVY3NTMEZCUnl4RlFVRkZMRTFCUVVrc1MwRkJSeXhGUVVGRkxFdEJRVWNzVDBGQlN5eE5RVUZMTEUxQlFVc3NUMEZCUnl4RlFVRkZMRVZCUVVVc1NVRkJSeXhEUVVGRExFZEJRVVVzVFVGQlN5eE5RVUZKTEV0QlFVc3NUVUZCU3l4UFFVRkhMRVZCUVVVc1RVRkJTU3hIUVVGRkxFMUJRVXNzVDBGQlJ5eEZRVUZGTEV0QlFVc3NUMEZCVHl4RlFVRkZMRXRCUVVjc1NVRkJSU3hGUVVGRkxFMUJRVWtzUTBGQlF5eEhRVUZGTEVOQlFVTXNSMEZCUlN4TlFVRkxMRTlCUTNKbU8wRkJRVU1zYTBKQlFVa3NTVUZCUlN4TFFVRkxMRTlCUVU4c1JVRkJSU3hMUVVGSExFdEJRVWNzUlVGQlJTeExRVUZITEV0QlFVY3NTMEZCUnl4RFFVRkRPMEZCUVVVc2IwSkJRVWtzUlVGQlJTeExRVUZITEUxQlFVa3NSVUZCUlN4TFFVRkhMRXRCUVVjc1MwRkJSenRCUVVGSkxHdENRVUZITzBGQlFVVXNjMEpCUVVrc1RVRkJTU3hMUVVGSExFVkJRVVVzUzBGQlJ5eE5RVUZKTEVWQlFVVXNUVUZCU1N4SFFVRkZMRXRCUVVjc1MwRkJSeXhMUVVGSExFdEJRVWNzUlVGQlJTeEZRVUZGTEVWQlFVVXNUVUZCU1N4SlFVRkZPMEZCUVVFc2JVSkJRVkU3UVVGQlF5eHZRa0ZCUlR0QlFVRkhMRzlDUVVGSkxFdEJRVWNzUlVGQlJTeExRVUZITEVsQlFVVXNSVUZCUlN4TFFVRkhMRXRCUVVjN1FVRkJSU3hwUWtGQlF5eExRVUZITEV0QlFVY3NTMEZCUnl4TFFVRkhMRVZCUVVVc1JVRkJSU3hMUVVGSExFMUJRVWtzUTBGQlF5eE5RVUZKTzBGQlFVRXNZMEZCUnp0QlFVRkRMSEZDUVVGUExFVkJRVVVzUjBGQlJTeERRVUZETzBGQlFVRXNXVUZCUXl4SFFVRkZMRTFCUVVzc1QwRkJSeXhGUVVGRkxFbEJRVWNzVFVGQlN5eFBRVUZITEVWQlFVVXNTMEZCU3l4UFFVRlBMRVZCUVVVc1MwRkJSeXhMUVVGSExFVkJRVVVzUzBGQlJ5eExRVUZITEV0QlFVY3NRMEZCUXl4SFFVRkZMRU5CUVVNc1IwRkJSU3hOUVVGTExGRkJRVWtzUlVGQlJTeExRVUZITEUxQlFVMHNVMEZCVXl4RlFVRkZMRlZCUVZVc1EwRkJReXhIUVVGRkxFMUJRVXNzVDBGQlJ5eEZRVUZGTEV0QlFVY3NUVUZCU3l4TlFVRkxMRTlCUVVjN1FVRkJReXhyUWtGQlJTeEZRVUZGTzBGQlFVY3NhMEpCUVVrc1NVRkJSU3hMUVVGSE8wRkJRVVVzYTBKQlFVVXNTMEZCU3l4SlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGSExITkNRVUZQTEVsQlFVVXNUVUZCU1N4UFFVRkxMRTlCUVU4c1ZVRkJVU3hKUVVGRkxFdEJRVWNzVFVGQlNTeEpRVUZGTEVkQlFVY3NSVUZCUlN4TlFVRk5MRVZCUVVVN1FVRkJRU3haUVVGRExFZEJRVVVzVFVGQlN5eFBRVUZITEVWQlFVVXNTVUZCUnl4TlFVRkxMRTFCUVVrc1NVRkJSenRCUVVGRkxHZENRVUZGTEVWQlFVVXNVVUZCVVN4UFFVRk5MRTFCUVZVN1FVRkJSU3hwUWtGQlNTeExRVUZMTzBGQlFVVXNaMEpCUVVVc1UwRkJVeXhEUVVGRExFMUJRM0puUWl4SlFVRkZMRVZCUVVVc1VVRkJVU3hKUVVGSkxFOUJRVThzUjBGQlJTeEhRVUZITEVkQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8wRkJRVWNzWjBKQlFVVXNSVUZCUlN4UlFVRlJMRk5CUVZFc1IwRkJSenRCUVVGRkxHZENRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMR2RDUVVGSExFVkJRVVVzVTBGQlR6dEJRVUZGTEhGQ1FVRlBPMEZCUVVVc1kwRkJSU3hKUVVGSkxFZEJRVVVzVFVGQlNTeERRVUZETzBGQlFVVXNiVUpCUVU4c1JVRkJSU3hUUVVGUE8wRkJRVUVzVlVGQlF6dEJRVUZETEdOQlFVa3NTVUZCUlN4RFFVRkRMRWRCUVVVc1NVRkJSU3hSUVVGUExFdEJRVWNzUTBGQlF6dEJRVU40U2l4dFFrRkJVeXhIUVVGSExFZEJRVVVzUjBGQlJUdEJRVUZETEdkQ1FVRkhMRU5CUVVNc1IwRkJSVHRCUVVGRExHdENRVUZGTEc5Q1FVRkpPMEZCUVZFc2EwSkJRVWtzU1VGQlJTeEZRVUZGTzBGQlFVOHNhMEpCUVVjN1FVRkJSU3g1UWtGQlVTeEpRVUZGTEVkQlFVVXNTVUZCUlN4SlFVRkZMRWRCUVVVc1MwRkJTVHRCUVVGRExITkNRVUZKTEVsQlFVVTdRVUZCUlN4elFrRkJTU3hKUVVGRkxFVkJRVVVzUTBGQlF6dEJRVUZGTEhkQ1FVRkpMRXRCUVVjc1JVRkJSU3hYUVVGVExFVkJRVVVzVTBGQlR5eEpRVUZGTEVsQlFVY3NSVUZCUlN4RFFVRkRMRWxCUVVVc1NVRkJSU3hGUVVGRkxFbEJRVWtzUTBGQlF6dEJRVUZITEcxQ1FVRkRMRWxCUVVVc1RVRkJTU3hGUVVGRkxFbEJRVWtzUjBGQlJTeERRVUZETzBGQlFVRXNaMEpCUVVNN1FVRkJRU3haUVVGRE8wRkJRVU1zWjBKQlFVY3NTVUZCUlN4RlFVRkZMRWxCUVVrc1EwRkJReXhMUVVGSE8wRkJRVVVzY1VKQlFVODdRVUZCUlN4blFrRkJSeXhIUVVGSE8wRkJRVThzYTBKQlFVVXNSMEZCUnl4SlFVRkpPMEZCUVVFc2FVSkJRVTA3UVVGQlF5eHJRa0ZCUnp0QlFVRkRMR3RDUVVGRkxFdEJRVXNzUTBGQlF6dEJRVUZCTEdOQlFVTXNVMEZCVHl4SFFVRkZPMEZCUVVNc2IwSkJRVWNzUlVGQlJTeGhRVUZoTzBGQlFWa3NkMEpCUVUwN1FVRkJSU3h6UWtGQlN6dEJRVUZCTEdOQlFYRkVPMEZCUVVNc2EwSkJRVVVzUlVGQlJTeFRRVUZQTzBGQlFVRXNXVUZCUXp0QlFVRkRMR2RDUVVGSE8wRkJRVU1zYTBKQlFVVXNSMEZCUlN4RlFVRkZMRWxCUVVrc1IwRkJSU3hEUVVGRExFZEJRVVVzUlVGQlJTeERRVUZETEVsQlFVVXNSVUZCUlN4SlFVRkpMRU5CUVVNN1FVRkJRU3haUVVGRExGTkJRVThzUjBGQlJUdEJRVUZETEd0Q1FVRkhMRVZCUVVVc1lVRkJZVHRCUVVGWExITkNRVUZOTzBGQlFVVXNhMEpCUVVjc1kwRkJXU3hQUVVGUExGbEJRVmtzVlVGQlV6dEJRVUZETEc5Q1FVRkZMRmxCUVZrN1FVRkROMlVzYjBKQlFVVXNSVUZCUXl4SFFVRkZMRTlCUVUwc1IwRkJSU3hQUVVGTkxFZEJRVVVzVDBGQlRTeEhRVUZGTEU5QlFVMHNSMEZCUlN4TlFVRkxPMEZCUVVVc2IwSkJRVVVzUlVGQlF5eFpRVUZYTEVOQlFVTXNSMEZCUlN4VFFVRlJMRTlCUVVzc1JVRkJSU3hEUVVGRExFbEJRVVVzUTBGQlF5eEpRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVU03UVVGQlJTeDVRa0ZCVVN4SlFVRkZMRWRCUVVVc1NVRkJSU3hGUVVGRkxGRkJRVThzUlVGQlJUdEJRVUZGTEc5Q1FVRkZMRmRCUVZjc1MwRkJTeXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTTdRVUZCUlN4dlFrRkJSU3hKUVVGSkxFVkJRVVVzUjBGQlJTeERRVUZETzBGQlFVRXNZMEZCUXl4UFFVRkxPMEZCUVVNc2IwSkJRVVVzUTBGQlF5eERRVUZETzBGQlFVVXNiMEpCUVVVc1JVRkJSU3hOUVVGTkxFZEJRVVVzUTBGQlF6dEJRVUZGTEc5Q1FVRkZMRVZCUVVVc1RVRkJUU3hEUVVGRE8wRkJRVVVzYjBKQlFVVXNSVUZCUXl4SFFVRkZMRXRCUVVrc1IwRkJSU3hMUVVGSkxFZEJRVVVzUzBGQlNTeEhRVUZGTEV0QlFVa3NSMEZCUlN4SlFVRkhPMEZCUVVVc2EwSkJRVVVzUzBGQlN5eEZRVUZGTzBGQlFVVXNiMEpCUVVVc1JVRkJSVHRCUVVGUExITkNRVUZKTEVsQlFVVXNSVUZCUlN4TFFVRkxMRU5CUVVNc1NVRkJSU3hGUVVGRkxFdEJRVXNzU1VGQlJTeE5RVUZKTEV0QlFVa3NTMEZCUnl4RFFVRkRPMEZCUVVVc2NVSkJRVWtzU1VGQlJTeEhRVUZGTEVsQlFVVXNSVUZCUlN4UlFVRlBMRVZCUVVVN1FVRkJSU3h2UWtGQlJTeExRVUZMTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRCUVVGRkxIVkNRVUZMTEVsQlFVVXNSVUZCUlN4TFFVRkxMRU5CUVVNc1NVRkJSU3hGUVVGRkxFdEJRVXNzUjBGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVRkZMRzlDUVVGRkxFTkJRVU1zUjBGQlJTeEpRVUZITEV0QlFVa3NTMEZCU1N4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeHZRa0ZCUlN4RlFVRkZPMEZCUVU4c2MwSkJRVWtzU1VGQlJTeEZRVUZGTEV0QlFVc3NRMEZCUXl4SlFVRkZMRVZCUVVVc1MwRkJTeXhKUVVGRkxFMUJRVWtzUzBGQlNTeExRVUZITEVOQlFVTTdRVUZCUlN4clFrRkJSU3hMUVVGTExFMUJRVTBzUjBGQlJTeERRVUZETzBGQlFVVXNhMEpCUVVVN1FVRkJRU3hyUWtGQlN6dEJRVUZCTEd0Q1FVRkZPMEZCUVVFc2EwSkJRVVU3UVVGQlFTeHJRa0ZCUlR0QlFVRkJMR3RDUVVGRk8wRkJRVUVzYTBKQlFVazdRVUZCUVN4clFrRkJSVHRCUVVGQkxHdENRVUZKTzBGQlFVRXNhMEpCUVVVN1FVRkJRU3hyUWtGQlJUdEJRVUZCTEd0Q1FVRkZPMEZCUVVFc2EwSkJRVVU3UVVGQlFTeHJRa0ZCUlR0QlFVRkJMR3RDUVVGRk8wRkJRVUVzYTBKQlEycG1PMEZCUVVFc2EwSkJRVVU3UVVGQlFTeG5Ra0ZCUXp0QlFVRkZMRzlDUVVGRkxFbEJRVWtzV1VGQldTeFBRVUZQTEVsQlFVa3NWMEZCVnl4RFFVRkRMRU5CUVVNN1FVRkJSU3h2UWtGQlJ5eEpRVUZKTEZsQlFWa3NVMEZCVXl4SFFVRkZMRVZCUVVNc1IwRkJSU3hGUVVGRExFZEJRVVVzUlVGQlF5eEZRVUZETEVOQlFVTXNSVUZCUnl4UlFVRlJPMEZCUVVFc1kwRkJRenRCUVVGRExHdENRVUZGTzBGQlFVVXNaMEpCUVVVc1NVRkJTU3hIUVVGRkxFTkJRVU03UVVGQlJTeG5Ra0ZCUlN4RFFVRkRMRWxCUVVVc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlFTeFpRVUZETzBGQlFVTXNZMEZCUlN4SlFVRkpMRWRCUVVVc1EwRkJRenRCUVVGRkxHMUNRVUZQTzBGQlFVRXNWVUZCUXp0QlFVTnlTaXhqUVVGSkxFdEJRVWM3UVVGQlFTeFpRVUZETEVkQlFVVXNVMEZCVXl4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExIRkNRVUZMTzBGQlFVVXNZMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhGUVVGSExFZEJRVWNzVFVGQlNTeEhRVUZGTEUxQlFVa3NRMEZCUXp0QlFVRkZMRzFDUVVGSE8wRkJRVVU3UVVGQlN5eHZRa0ZCVFR0QlFVRkJMRmxCUVVjN1FVRkJRU3haUVVGRkxFZEJRVVVzVjBGQlZUdEJRVUZETEhGQ1FVRlBPMEZCUVVFc1dVRkJRenRCUVVGQkxGbEJRVVVzUjBGQlJTeFhRVUZWTzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hYUVVGVk8wRkJRVUVzV1VGQlF6dEJRVUZCTEZsQlFVVXNSMEZCUlN4WFFVRlZPMEZCUVVFc1dVRkJRenRCUVVGQkxGbEJRVVVzUjBGQlJTeFhRVUZWTzBGQlFVTXNjVUpCUVU4N1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEhRVUZGTEZkQlFWVTdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkJSU3hIUVVGRkxGZEJRVlU3UVVGQlFTeFpRVUZETzBGQlFVRXNXVUZCUlN4SFFVRkZMRmRCUVZVN1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEhRVUZGTEZkQlFWVTdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkJSU3hIUVVGRkxGZEJRVlU3UVVGQlFTeFpRVUZETzBGQlFVRXNXVUZCUlN4SFFVRkZMRmRCUVZVN1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEhRVUZGTEZkQlFWVTdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkJSU3hIUVVGRkxGZEJRVlU3UVVGQlFTeFpRVUZETzBGQlFVRXNXVUZCUlN4SFFVRkZMRTFCUVVrN1FVRkJRU3haUVVGSExFZEJRVVVzVTBGQlV5eEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMR3RDUVVGRkxFbEJRVVVzV1VGQlZTeEpRVUZGTEZWQlFWRXNRMEZCUXl4RFFVRkRMRXRCUVVjc1RVRkJTU3hMUVVGSExHRkJRVmNzU1VGQlJUdEJRVUZKTEhGQ1FVRkxPMEZCUVVVc2EwSkJRVVVzU1VGQlNTeExRVUZMTEUxQlFVa3NRMEZCUXp0QlFVRkZMR2RDUVVGRkxFdEJRVWNzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4alFVRmpPMEZCUVVVc1owSkJRVVVzU1VGQlJTeExRVUZITEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1kwRkJZenRCUVVGRkxHZENRVUZGTEVsQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGbEJRVms3UVVGQlJTeG5Ra0ZCUlN4SlFVRkZMRTFCUVVrc1RVRkRiR1lzUTBGQlF5eEpRVUZGTEVWQlFVVXNWMEZCVnp0QlFVRkZMR2RDUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRmxCUVZrN1FVRkJSU3huUWtGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hsUVVGbExFbEJRVVU3UVVGQlN5eG5Ra0ZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFZRVUZWTzBGQlFVVXNaMEpCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eExRVUZITEVWQlFVVXNVVUZCVVN4SlFVRkZMRXRCUVVzc1NVRkJTU3hGUVVGRkxHVkJRV1VzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJReXhMUVVGSExGRkJRVTA3UVVGQlFTeFpRVUZETzBGQlFVRXNXVUZCUlN4SFFVRkZMRk5CUVZNc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHJRa0ZCUlN4SlFVRkZMRmxCUVZVc1NVRkJSU3hWUVVGUkxFTkJRVU1zUTBGQlF5eExRVUZITEUxQlFVa3NTMEZCUnl4aFFVRlhMRWxCUVVVN1FVRkJTU3h4UWtGQlN6dEJRVUZGTEd0Q1FVRkZMRWxCUVVrc1MwRkJTeXhOUVVGSkxFTkJRVU03UVVGQlJTeG5Ra0ZCUlN4TFFVRkhMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVjBGQlZ6dEJRVUZGTEdkQ1FVRkZMRWxCUVVVc1MwRkJSeXhOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZkQlFWYzdRVUZCUlN4blFrRkJSU3hKUVVGRkxFdEJRVWNzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4VFFVRlRPMEZCUVVVc1owSkJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1VVRkJVVHRCUVVGRkxHZENRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGTkJRVk03UVVGQlJTeG5Ra0ZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFpRVUZaTEVsQlFVVTdRVUZCU3l4blFrRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4UFFVRlBPMEZCUVVVc1owSkJRVVVzU1VGQlJTeE5RVUZKTEUxQlEzQm1MRU5CUVVNc1MwRkJSeXhGUVVGRkxFVkJRVVVzV1VGQldTeERRVUZETEVsQlFVVXNTMEZCUnl4SlFVRkpMRVZCUVVVc1UwRkJVeXhEUVVGRExFbEJRVVVzUlVGQlJTeFJRVUZSTEVsQlFVVXNTVUZCUlR0QlFVRkZMR2RDUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRXRCUVVjc1JVRkJSU3hyUWtGQmEwSTdRVUZCUnl4clFrRkJSeXhKUVVGSkxFdEJRVXNzUlVGQlJTeFpRVUZaTEVkQlFVVXNSMEZCUlN4RFFVRkRMRVZCUVVjc2EwSkJRV3RDTzBGQlFVVXNhMEpCUVVrc1NVRkJSeXhKUVVGSkxFdEJRVXNzUlVGQlJTeFpRVUZaTEVkQlFVVXNSMEZCUlN4RFFVRkRMRVZCUVVjc2EwSkJRV3RDTzBGQlFVVXNaMEpCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eExRVUZITEV0QlFVY3NTMEZCUnl4RlFVRkZMR3RDUVVGclFpeExRVUZITEV0QlFVc3NTVUZCU1N4SFFVRkZMRU5CUVVNc1MwRkJSenRCUVVGQkxGbEJRVU03UVVGQlFTeFpRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZPMEZCUVVNc2NVSkJRVXM3UVVGQlJTeHJRa0ZCU1N4SlFVRkZMRWxCUVVrc1MwRkJTeXhGUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4TlFVRkxMRVZCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEhRVUZGTEVWQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhIUVVGRkxFVkJRVVVzU1VGQlJTeExRVUZITEUxQlFVa3NRMEZCUXl4SFFVRkZMRVZCUVVVc1NVRkJSU3hMUVVGSExFMUJRVWtzUTBGQlF5eEhRVUZGTEVWQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1IwRkJSU3hEUVVGRExFZEJRVVVzU1VGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1IwRkJSU3hKUVVGRkxFVkJRVVVzYTBKQlFXdENMRWRCUVVVc1NVRkJSeXhKUVVGSkxFdEJRVXNzUlVGQlJTeFpRVUZaTEVkQlFVVXNSMEZCUlN4RFFVRkRMRVZCUVVjc2EwSkJRV3RDTEVkQlEzQm1MRWxCUVVjc1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEhRVUZGTEVkQlFVVXNRMEZCUXl4RlFVRkhMR3RDUVVGclFpeEhRVUZGTEVsQlFVVXNTMEZCU3l4SlFVRkpMRWRCUVVVc1EwRkJRenRCUVVGRkxHdENRVUZGTEVsQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzVDBGQlR5eExRVUZITEV0QlFVY3NTMEZCUnl4RFFVRkRMRWxCUVVVc1NVRkJSU3hOUVVGSkxFdEJRVWNzVDBGQlN5eEpRVUZGTEV0QlFVc3NTVUZCU1N4SFFVRkZMRU5CUVVNc1IwRkJSU3hGUVVGRkxGRkJRVkVzUlVGQlJTeFJRVUZSTEVsQlFVVXNVVUZCVFN4SlFVRkZMRWxCUVVVc1NVRkJSU3hMUVVGSExFVkJRVVU3UVVGQlJ5eG5Ra0ZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFBRVUZQTzBGQlFVVXNaMEpCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eExRVUZITEVWQlFVVXNSVUZCUlN4WlFVRlpMRU5CUVVNc1NVRkJSU3hMUVVGSExFbEJRVWtzUlVGQlJTeFRRVUZUTEVOQlFVTXNTVUZCUlN4RlFVRkZMRkZCUVZFc1NVRkJSU3hKUVVGRk8wRkJRVVVzWjBKQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGZEJRVmM3UVVGQlJTeG5Ra0ZCUlN4SlFVRkZMRXRCUVVjc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFhRVUZYTzBGQlFVVXNaMEpCUVVVc1NVRkJSU3hMUVVGSExFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNVMEZCVXp0QlFVRkZMR2RDUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRkZCUVZFN1FVRkJSU3huUWtGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hUUVVGVE8wRkJRVVVzWjBKQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFVkJRVVVzVVVGQlVUdEJRVUZGTEd0Q1FVRkZMRVZCUVVVc1VVRkJVU3hKUVVGRk8wRkJRVWtzY1VKQlFVOHNTVUZCU1N4SlFVRkZMRWRCUVVVc1MwRkJSeXhEUVVGRExFdEJRVXNzU1VGQlNTeERRVUZETEVsQlFVVXNTVUZCUlN4SlFVRkZMRU5CUVVNc1MwRkJTeXhOUVVGTkxFbEJRelZtTEZWQlFWVXNUVUZCU1N4SlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFdEJRVXNzVFVGQlRTeEpRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTFCUVVrc1RVRkJTU3hWUVVGVkxFMUJRVWtzU1VGQlJTeEZRVUZGTEVkQlFVVXNUVUZCU1R0QlFVRkJMRmxCUVVNN1FVRkJRU3haUVVGRkxFZEJRVVVzVjBGQlZUdEJRVUZETEhGQ1FVRk5PMEZCUVVFc1dVRkJSenRCUVVGQkxGbEJRVVVzUjBGQlJTeFhRVUZWTzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNkVUpCUVZNc1JVRkJSU3hIUVVGRk8wRkJRVU1zZDBKQlFVOHNTVUZCUlN4RlFVRkZMR0ZCUVdFc1JVRkJSU3hOUVVGTkxHMUNRVUZ0UWl4TFFVRkhMRVZCUVVVc1EwRkJReXhKUVVGRk8wRkJRVUVzWTBGQlN6dEJRVUZETEhGQ1FVRkxPMEZCUVVVc2EwSkJRVWtzUzBGQlJ5eHZRa0ZCU1N4UlFVRk5MRmxCUVZrc1IwRkJSU3hKUVVGRkxFbEJRVWtzUzBGQlN5eEhRVUZGTEVkQlFVVXNRMEZCUXl4SFFVRkZMRWxCUVVVc1NVRkJTU3hMUVVGTExFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNhMEpCUVVVc1JVRkJSU3hyUWtGQmEwSTdRVUZCUlN4clFrRkJTU3hKUVVGRkxFVkJRVVVzYTBKQlFXdENPMEZCUVVVc1owSkJRVVVzVFVGQlNTeExRVUZITEUxQlFVa3NRMEZCUXl4SlFVRkZMRXRCUVVjc1MwRkJTeXhKUVVGSkxFZEJRVVVzUTBGQlF6dEJRVUZGTEdkQ1FVRkZMRTFCUVVrc1MwRkJSeXhOUVVGSkxFTkJRVU1zU1VGQlJTeFBRVUZQTEV0QlFVY3NRMEZCUXp0QlFVRkZMR3RDUVVGRkxFVkJRVVVzUTBGQlF6dEJRVUZGTEd0Q1FVRkZMRVZCUVVVc1EwRkJRenRCUVVGRkxHdENRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMR3RDUVVGRkxFZEJRVWNzUTBGQlF6dEJRVUZGTEd0Q1FVRkZMRXRCUVVjc1JVRkJSU3hMUVVGSExFMUJRVWtzUTBGQlF5eEpRVUZGTEVkQlFVVXNSVUZCUlN4SlFVRkZMRXRCUVVjc1RVRkJTU3hEUVVGRExFbEJRVVVzVFVGQlNTeEZRVUZGTEV0QlFVY3NUVUZCU1N4RFFVRkRMRWxCUVVVc1IwRkJSU3hGUVVGRkxFbEJRVVVzUzBGQlJ5eE5RVUZKTEVOQlFVTXNTVUZCUlR0QlFVRkJMRmxCUVVVN1FVRkJRU3haUVVGRkxFZEJRVVVzVFVGQlNUdEJRVUZETEdkQ1FVRkZMRVZCUVVVN1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGRE1XWXNSMEZCUlN4WFFVRlZPMEZCUVVNc2NVSkJRVThzUzBGQlN5eEpRVUZKTzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hYUVVGVk8wRkJRVU1zY1VKQlFVODdRVUZCUVN4WlFVRlZPMEZCUVVFc1dVRkJSU3hIUVVGRkxFMUJRVWtzV1VGQldTeEpRVUZKTzBGQlFVRXNXVUZCUlN4SFFVRkZMRk5CUVZNc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHhRa0ZCU3p0QlFVRkZMSEZDUVVGUExFVkJRVVVzVjBGQlZ5eE5RVUZKTEUxQlFVa3NSMEZCUlN4TlFVRkpMRWRCUVVVc1MwRkJSeXhOUVVGSkxFOUJRVXNzUTBGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUVN4WlFVRkZMRWRCUVVVc1UwRkJVeXhIUVVGRk8wRkJRVU1zY1VKQlFVczdRVUZCUlN4clFrRkJTU3hKUVVGRkxFVkJRVVU3UVVGQlR5eHJRa0ZCUnl4aFFVRlhPMEZCUVVVc2RVSkJRVTA3UVVGQlJ5eDFRa0ZCVVN4SlFVRkZMRWRCUVVVc1MwRkJSeXhIUVVGRkxFdEJRVWNzUjBGQlJUdEJRVUZETEc5Q1FVRkpMRWxCUVVVc1MwRkJSeXhKUVVGRkxFMUJRVWM3UVVGQlJ5eHZRa0ZCUlN4TFFVRkxMRWxCUVVrc1IwRkJSU3hKUVVGRkxGTkJRVk03UVVGQlJTeHZRa0ZCU1N4SlFVRkZPMEZCUVVzc2IwSkJRVVVzUzBGQlN5eEpRVUZKTEVkQlFVVXNRMEZCUXp0QlFVRkZMRzFDUVVGRk8wRkJRVU1zYzBKQlFVVXNSVUZCUlN4SlFVRkpMRXRCUVVzc1IwRkJSU3haUVVGWExFdEJRVWNzVVVGQlRTeEpRVUZGTEZOQlFVOHNTMEZCU3l4SlFVRkZMRVZCUVVVc1QwRkJUeXhoUVVGWExGVkJRVkU3UVVGQlJ5eHpRa0ZCUnp0QlFVRkRMSE5DUVVGRkxFdEJRVXNzUTBGQlF6dEJRVUZGTEhWQ1FVRkhPMEZCUVVVc2QwSkJRVWtzU1VGQlJUdEJRVUZGTERCQ1FVRk5PMEZCUVVFc2EwSkJRVU1zVTBGQlR5eEhRVUZGTzBGQlFVRXNhMEpCUVVNN1FVRkJReXh6UWtGQlJUdEJRVUZCTEdkQ1FVRk5PMEZCUVVNc2IwSkJRVWM3UVVGQlJTeDVRa0ZCVFR0QlFVRkJMR05CUVVVN1FVRkJReXh4UWtGQlRUdEJRVUZCTEZsQlFVVTdRVUZCUVN4WlFVRkZMRWRCUVVVc1UwRkJVeXhIUVVGRkxFZEJRVVU3UVVGQlF5eHhRa0ZEYkdZN1FVRkJSU3h4UWtGQlN6dEJRVUZGTEd0Q1FVRkpMRWxCUVVVN1FVRkJSU3hwUWtGQlJ5eEZRVUZGTEZGQlFWRXNVMEZCVXl4SFFVRkZMRWRCUVVVN1FVRkJReXh2UWtGQlNTeEpRVUZGTEVsQlFVVTdRVUZCUlN4dlFrRkJSU3hGUVVGRkxFbEJRVVVzU1VGQlJTeExRVUZITEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVVc2NVSkJRVWtzU1VGQlJTeEhRVUZGTEVsQlFVVXNSVUZCUlN4UlFVRlBMRVZCUVVVN1FVRkJSU3h2UWtGQlJTeFBRVUZMTEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVc1YwRkJWeXhEUVVGRE8wRkJRVVVzYTBKQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGRkxIRkNRVUZITEVWQlFVVXNVMEZCVHp0QlFVRkJMR05CUVVNc1EwRkJRenRCUVVGRkxIRkNRVUZQTzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVVzUjBGQlJUdEJRVUZETEhGQ1FVRkxPMEZCUVVVc2NVSkJRVXM3UVVGQlJTeHJRa0ZCU1N4SlFVRkZMRWRCUVVjN1FVRkJSU3huUWtGQlJTeExRVUZITEUxQlFVa3NRMEZCUXl4SlFVRkZMRVZCUVVVN1FVRkJUeXhyUWtGQlNTeEpRVUZGTzBGQlFVVXNaMEpCUVVVc1VVRkJVU3hUUVVGVExFZEJRVVU3UVVGQlF5eHhRa0ZCUnl4RlFVRkZMRk5CUVU4N1FVRkJRU3hqUVVGRExFTkJRVU03UVVGQlJTeG5Ra0ZCUlN4TFFVRkhMRTFCUVVrc1EwRkJReXhKUVVGRk8wRkJRVVVzY1VKQlFVODdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkJSU3hIUVVGRkxFMUJRVWs3UVVGQlFTeFpRVUZITEVkQlFVVXNWMEZCVlR0QlFVRkRMSEZDUVVGUE8wRkJRVUVzV1VGQlJUdEJRVUZCTEZsQlFVVXNSMEZCUlN4WFFVRlZPMEZCUVVNc2NVSkJRVTg3UVVGQlFTeFpRVUZGTzBGQlFVRXNXVUZCUlN4SFFVRkZMRk5CUVZNc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEhGQ1FVRkxPMEZCUVVVc2NVSkJRVXM3UVVGQlJTeHhRa0ZCU3p0QlFVRkZMSFZDUVVGUkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVkQlFVVXNTVUZCUlN4SFFVRkZMRXRCUVVrN1FVRkJReXh2UWtGQlNTeEpRVUZGTEVWQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1IwRkJSU3hKUVVGRkxFVkJRVVVzU1VGQlJTeExRVUZITEUxQlFVa3NRMEZCUXp0QlFVRkZMSEZDUVVGSE8wRkJRVVVzZVVKQlFWRXNTVUZCUlN4SFFVRkZMRWxCUVVVc1IwRkJSU3hMUVVGSk8wRkJRVU1zYzBKQlFVa3NTVUZCUlN4RlFVRkZMRWxCUVVVc1RVRkJTU3hEUVVGRExFZEJRVVVzU1VGRGJtWXNSMEZCUnl4RFFVRkRPMEZCUVVVc2QwSkJRVWtzUzBGQlJ5eFBRVUZMTEUxQlFVa3NUVUZCU1N4SlFVRkZMRXRCUVVjc1IwRkJSeXhIUVVGSExFZEJRVVVzUTBGQlF5eERRVUZETEVkQlFVVXNSVUZCUlN4VFFVRlBMRXRCUVVjc1JVRkJSU3hMUVVGTExFTkJRVU03UVVGQlFTeG5Ra0ZCUXp0QlFVRkRMSEZDUVVGSE8wRkJRVUVzWTBGQlF6dEJRVUZETEdkQ1FVRkZMRXRCUVVjc1RVRkJTU3hEUVVGRExFbEJRVVU3UVVGQlJTeHhRa0ZCVHp0QlFVRkJMRmxCUVVNN1FVRkJRU3haUVVGRkxFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVXNVMEZCVXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zY1VKQlFVOHNSMEZCUnl4TlFVRkpMRWRCUVVVc1RVRkJTU3hIUVVGRkxFMUJRVWtzUjBGQlJTeE5RVUZKTEVOQlFVTTdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkJSU3hIUVVGRkxGTkJRVk1zUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMRzlDUVVGTkxFbEJRVVVzUlVGQlJUdEJRVUZQTEd0Q1FVRkZMRWxCUVVrc1YwRkJWeXhGUVVGRkxFMUJRVTBzU1VGQlJTeEhRVUZGTEVsQlFVVXNRMEZCUXl4RFFVRkRPMEZCUVVVc2EwSkJRVWM3UVVGQlF5eHZRa0ZCU1N4SlFVRkZMRWxCUVVrc1dVRkJXU3hQUVVGUExFTkJRVU1zUjBGQlJTeEpRVUZGTEVsQlFVa3NXVUZCV1N4VFFVRlRMRWRCUVVVc1JVRkJReXhMUVVGSkxFVkJRVU1zVVVGQlR5eEZRVUZETEVWQlFVTXNRMEZCUXl4SFFVRkZPMEZCUVVVc2NVSkJRVWtzUzBGQlN5eEZRVUZGTzBGQlFWRXNjVUpCUVVjc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEJRVUZGTEhWQ1FVRlBMRWxCUVVVc1JVRkJSU3hUUVVGUExFbEJRVVU3UVVGQlFTeGpRVUZETEZOQlFVOHNSMEZCUlR0QlFVRkRMSFZDUVVGUExGRkJRVkVzU1VGQlNTeERRVUZETEVkQlFVVTdRVUZCUVN4alFVRkRPMEZCUVVFc1dVRkJRenRCUVVGQkxGVkJRVU03UVVGRGNGb3NWMEZCUXl4WFFVRlZPMEZCUVVNc2NVSkJRVk1zUlVGQlJTeEhRVUZGTzBGQlFVTXNhMEpCUVVVc1JVRkJSVHRCUVVGUkxHdENRVUZGTEVsQlFVVXNSMEZCUnl4RFFVRkRPMEZCUVVVc2EwSkJRVVVzUlVGQlJUdEJRVUZGTEdsQ1FVRkhPMEZCUVVVc2EwSkJRVVVzUlVGQlJUdEJRVUZITEdsQ1FVRkhMRkZCUVZFc1JVRkJSU3hEUVVGRE8wRkJRVVU3UVVGQlNTeG5Ra0ZCUlN3d1FrRkJkMElzUlVGQlJTeDFRa0ZCZFVJc1EwRkJRenRCUVVGRkxHdENRVUZITEV0QlFVY3NUVUZCU1N4VFFVRlBMRTFCUVVrc1kwRkJZeXhEUVVGRExFZEJRVVVzU1VGQlJTeFBRVUZOTEVsQlFVYzdRVUZCUXl4dlFrRkJTU3hKUVVGRk8wRkJRVVVzYjBKQlFVVTdRVUZCU3l4clFrRkJSVHRCUVVGQkxHTkJRVU03UVVGQlF5eHhRa0ZCVHp0QlFVRkJMRmxCUVVNN1FVRkJReXhuUWtGQlNTeEpRVUZGTEVWQlFVTXNSMEZCUlN4SFFVRkZPMEZCUVVVN1FVRkJTU3hqUVVGRkxEQkNRVUYzUWl4RlFVRkZMSFZDUVVGMVFpeERRVUZETzBGQlFVVXNaMEpCUVVjc1JVRkJSVHRCUVVGblFpeHJRa0ZCUnp0QlFVRkRMSFZDUVVGUExFVkJRVVVzWjBKQlFXZENMRWRCUVVVc1EwRkJRenRCUVVGQkxHTkJRVU1zVTBGQlR5eEhRVUZGTzBGQlFVTXNhMEpCUVVVc2QwUkJRWE5FTEVOQlFVTXNSMEZCUlN4RlFVRkZMRU5CUVVNN1FVRkJRU3hqUVVGRE8wRkJRVU1zWlVGQlJ5eEhRVUZGTEZOQlFWTXNSMEZCUlR0QlFVRkRMR2RDUVVGRkxFVkJRVVVzVVVGQlVUdEJRVUZCTEZsQlFVTXNRMEZCUXl4RlFVRkZMRTFCUVUwc1EwRkJRenRCUVVGRkxHMUNRVUZOTEVOQlFVTTdRVUZCUVN4VlFVRkRMRWRCUVVjN1FVRkRkR1FzV1VGQlJTeFhRVUZUTEVOQlFVTXNSMEZCUlN4UFFVRkxMRVZCUVVVc1YwRkJVeXhGUVVGRkxFZEJRVWNzUjBGQlJTeERRVUZETzBGQlFVVXNXVUZCUlN4dFFrRkJhVUlzUTBGQlF5eEhRVUZGTEU5QlFVc3NSVUZCUlN4dFFrRkJhVUlzUlVGQlJTeEhRVUZITEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc01rSkJRWGxDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMREpDUVVGNVFpeEZRVUZGTEVkQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc09FSkJRVFJDTEVOQlFVTXNSMEZCUlN4UFFVRkxMRVZCUVVVc09FSkJRVFJDTEVWQlFVVXNSMEZCUnl4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxDdENRVUUyUWl4RFFVRkRMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzSzBKQlFUWkNMRVZCUVVVc1IwRkJSeXhIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNORUpCUVRCQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN3MFFrRkJNRUlzUlVGQlJTeEhRVUZITEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3cwUWtGQk1FSXNVVUZCU1N4RlFVRkZMRFJDUVVFd1FpeEZRVUZGTEVkQlFVY3NRMEZCUXp0QlFVTXhaaXhaUVVGRkxHOUNRVUZyUWl4RFFVRkRMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzYjBKQlFXdENMRVZCUVVVc1IwRkJSeXhIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNjVUpCUVcxQ0xGRkJRVWtzUlVGQlJTeHhRa0ZCYlVJc1JVRkJSU3hIUVVGSExFTkJRVU03UVVGQlJTeFpRVUZGTERCQ1FVRjNRaXhEUVVGRExFZEJRVVVzUjBGQlJTeFBRVUZMTEVWQlFVVXNNRUpCUVhkQ0xFVkJRVVVzUjBGQlJ5eEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc2JVSkJRV2xDTEVOQlFVTXNSMEZCUlN4UFFVRkxMRVZCUVVVc2JVSkJRV2xDTEVWQlFVVXNSMEZCUnl4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxHOUNRVUZyUWl4RFFVRkRMRWRCUVVVc1QwRkJTeXhGUVVGRkxHOUNRVUZyUWl4RlFVRkZMRWRCUVVjc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeFhRVUZUTEZGQlFVa3NSVUZCUlN4WFFVRlRMRVZCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVVVzV1VGQlJTeHRRa0ZCYVVJc1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMRzFDUVVGcFFpeEZRVUZGTEVkQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTEc5Q1FVRnJRaXhEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMRzlDUVVGclFpeEZRVUZGTEVkQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRemxrTEZsQlFVVXNiMEpCUVd0Q0xGRkJRVWtzUlVGQlJTeHZRa0ZCYTBJc1JVRkJSU3hIUVVGSExFTkJRVU03UVVGQlJTeFpRVUZGTEhWQ1FVRnhRaXhEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4MVFrRkJjVUlzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxIZENRVUZ6UWl4RFFVRkRMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzZDBKQlFYTkNMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNkMEpCUVhOQ0xGRkJRVWtzUlVGQlJTeDNRa0ZCYzBJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTEc5Q1FVRnJRaXhSUVVGSkxFVkJRVVVzYjBKQlFXdENMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRVVVzV1VGQlJTeG5Ra0ZCWXl4RFFVRkRMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzWjBKQlFXTXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHBRa0ZCWlN4RFFVRkRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTeHBRa0ZCWlN4RlFVRkZMRWxCUVVrc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNkMEpCUVhOQ0xGRkJRVWtzUlVGQlJTeDNRa0ZCYzBJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGRGNtVXNXVUZCUlN4eFFrRkJiVUlzVVVGQlNTeEZRVUZGTEhGQ1FVRnRRaXhGUVVGRkxFbEJRVWtzUTBGQlF6dEJRVUZGTEZsQlFVVXNjVUpCUVcxQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4UFFVRkxMRVZCUVVVc2NVSkJRVzFDTEVWQlFVVXNTVUZCU1N4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTEZWQlFWRXNRMEZCUXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4VlFVRlJMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3haUVVGRkxHMUNRVUZwUWl4UlFVRkpMRVZCUVVVc2JVSkJRV2xDTEVWQlFVVXNTVUZCU1N4RFFVRkRPMEZCUVVVc1kwRkJTU3hMUVVGSExFVkJRVVVzVlVGQlVTeFJRVUZKTEV0QlFVY3NSVUZCUlN4VlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRVVVzV1VGQlJTeFJRVUZOTEZGQlFVa3NSVUZCUlN4UlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRVVVzWTBGQlNTeExRVUZITEZGQlFVa3NTMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhIUVVGRkxFdEJRVWNzVDBGQlN5eExRVUZITEVWQlFVVXNTVUZCU1N4SFFVRkZMRXRCUVVjc1VVRkJTU3hMUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVVXNTMEZCUnl4UlFVRkpMRXRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeFpRVUZGTEdsQ1FVRmxPMEZCUVU4c1dVRkJSU3huUWtGQll6dEJRVU5zWWl4dFFrRkJVeXhIUVVGSExFZEJRVVU3UVVGQlF5eG5Ra0ZCUlN4UFFVRlBMRTlCUVU4c1EwRkJReXhIUVVGRkxFTkJRVU03UVVGQlJTeG5Ra0ZCU1N4SlFVRkZMRTlCUVVjc1RVRkJTU3hGUVVGRkxFMUJRVWtzUjBGQlJTeEpRVUZGTEU5QlFVY3NUMEZCUnl4RlFVRkZMRU5CUVVNc1RVRkJTVHRCUVVGRkxHTkJRVVVzYlVKQlFXbENMRVZCUVVVc1JVRkJSU3huUWtGQlowSTdRVUZCUlN4alFVRkZMRk5CUVU4c1JVRkJSU3hGUVVGRkxFMUJRVTA3UVVGQlJTeGpRVUZGTEZsQlFWVXNSVUZCUlN4RlFVRkZMRk5CUVZNN1FVRkJSU3hqUVVGRkxHRkJRVmNzUlVGQlJTeEZRVUZGTEZWQlFWVTdRVUZCUlN4dFFrRkJUenRCUVVGQkxGVkJRVU03UVVGQlF5eFpRVUZGTEdGQlFWYzdRVUZCUnl4WlFVRkZMRmxCUVZVN1FVRkJSeXhaUVVGRkxHVkJRV0U3UVVGQlJ5eFpRVUZGTEdOQlFWazdRVUZCUnl4WlFVRkZMR1ZCUVdFN1FVRkJSU3haUVVGRkxHVkJRV0VzUTBGQlF5eEhRVUZGTEVkQlFVVXNUVUZCU1N4RlFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTEd0Q1FVRm5RanRCUVVGRkxHTkJRVWs3UVVGQlJTeGpRVUZGTEZOQlFWTXNTMEZCU1R0QlFVRkRMR2xDUVVGSExFZEJRVWM3UVVGQlJTeHJRa0ZCU1N4SlFVRkZPMEZCUVVFc1ZVRkJSenRCUVVNeldDeHRRa0ZCVXl4TFFVRkpPMEZCUVVNc2NVSkJRVk1zU1VGQlJ6dEJRVUZETEd0Q1FVRkhMRU5CUVVNc1RVRkJTU3hKUVVGRkxFMUJRVWNzUlVGQlJTeFpRVUZWTEUxQlFVY3NRMEZCUXl4TFFVRkpPMEZCUVVNc2EwSkJRVVVzUlVGQlJUdEJRVUZGTEcxQ1FVRkhMRU5CUVVNN1FVRkJSU3h2UWtGQlJ5eEZRVUZGTzBGQlFYRkNMRzlDUVVGRkxIRkNRVUZ4UWp0QlFVRkZMRzlDUVVGSExFVkJRVVU3UVVGQlVTeDFRa0ZCU1N4alFVRlpMRTlCUVU4c1JVRkJSU3haUVVGVkxFVkJRVVVzVlVGQlVTeERRVUZETEVWQlFVVXNUMEZCVHl4SlFVRkhMRVZCUVVVc1VVRkJVU3hWUVVGUk8wRkJRVU1zZDBKQlFVa3NTVUZCUlN4RlFVRkZMRkZCUVZFc1RVRkJUVHRCUVVGRkxIVkNRVUZITEZGQlFWRXNRMEZCUXp0QlFVRkJMR3RDUVVGRE8wRkJRVU1zYTBKQlFVVXNSVUZCUlR0QlFVRkJMR05CUVVNN1FVRkJRU3haUVVGRE8wRkJRVU1zWjBKQlFVY3NSVUZCUlN4SlFVRkZMRWxCUVVjN1FVRkJReXhyUWtGQlJ5eEZRVUZGTzBGQlFVOHNjVUpCUVVrc1kwRkJXU3hQUVVGUExFVkJRVVVzVjBGQlV5eEZRVUZGTEZOQlFVOHNRMEZCUXl4RlFVRkZMRTFCUVUwc1NVRkJSeXhGUVVGRkxFOUJRVTg3UVVGQlVTeHhRa0ZCUnp0QlFVRkZMR2RDUVVGRkxFVkJRVVU3UVVGQlJTeHJRa0ZCUlN4TlFVRkpMRVZCUVVVc1lVRkJWeXhGUVVGRkxGVkJRVlVzV1VGQldTeEhRVUZGTEZkQlFWY3NWMEZCVlR0QlFVRkRMREpDUVVGWExGZEJRVlU3UVVGQlF5eHZRa0ZCUlN4VlFVRlZMRVZCUVVVN1FVRkJRU3huUWtGQlF5eEhRVUZGTEVOQlFVTTdRVUZCUlN4clFrRkJSVHRCUVVGQkxHTkJRVU1zUjBGQlJTeERRVUZETEV0QlFVY3NSVUZCUlR0QlFVRkJMRmxCUVVVN1FVRkJRU3hWUVVGRE8wRkJRM2hsTEdOQlFVY3NSVUZCUlR0QlFVRlJMR2xDUVVGSkxHTkJRVmtzVDBGQlR5eEZRVUZGTEZsQlFWVXNSVUZCUlN4VlFVRlJMRU5CUVVNc1JVRkJSU3hQUVVGUExFbEJRVWNzU1VGQlJTeEZRVUZGTEZGQlFWRTdRVUZCVVN4blFrRkJSU3hSUVVGUkxFbEJRVWtzUlVGQlJUdEJRVUZGTEdGQlFVYzdRVUZIT1Vjc2FVSkJRVThzVlVGQlZUdEJRVUZCTEZGQlEyNUNPMEZCUVVFc1RVRkhRU3hIUVVGSE8wRkJRMGdzVlVGQlNTeFBRVUZQTEZsQlFWa3NXVUZCV1N4UFFVRlBMRmRCUVZjN1FVRkRia1FzWlVGQlR5eFZRVUZWTzBGQlFVRXNaVUZEVml4UFFVRlBMRmRCUVZjc1kwRkJZeXhQUVVGUExFdEJRVXM3UVVGRGJrUXNaVUZCVHl4RFFVRkRMRWRCUVVjc1RVRkJUU3hQUVVGUE8wRkJRVUU3UVVGQlFUczdPMEZEZUVReFFqdEJRVUZCTzBGQlFVRTdRVUZCUVRzN08wRkRRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdPenRCUTBGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRXNUVUZCWVR0QlFVRmlPMEZCUVVFN1FVRkJUeXhOUVVGTkxFOUJRVTg3UVVGQlFUdEJRVUZCT3pzN1FVTkJjRUk3UVVGQlFUdEJRVUZCTzBGQlEwRXNWVUZCU1N4dFFrRkJiVUlzVFVGQlRUdEJRVU16UWl4WlFVRkpMR0ZCUVdFc1QwRkJUeXhoUVVGaExHVkJRV1VzVTBGQlV5eG5Ra0ZCWjBJc1UwRkJVeXhqUVVGakxFMUJRVTA3UVVGRE1VY3NXVUZCU1N4UFFVRlBMR1ZCUVdVN1FVRkJZU3gxUWtGQllTeGpRVUZqTzBGQlEyeEZMR1ZCUTBZc1UwRkJVeXhaUVVGWkxFTkJRVU1zUjBGQlJ6dEJRVVY2UWl4dFFrRkJVeXhMUVVGSk8wRkJRVU1zWTBGQlJTeFZRVUZSTEVWQlFVVXNWVUZCVVN4RlFVRkZPMEZCUVVVc2JVSkJRVTg3UVVGQlFTeFZRVUZETzBGQlFVTXNiVUpCUVZNc1NVRkJSenRCUVVGRExHTkJRVVVzVlVGQlVTeEZRVUZGTEZWQlFWRXNSVUZCUlR0QlFVRkZMRzFDUVVGUE8wRkJRVUVzVlVGQlJUdEJRVUZETEcxQ1FVRlRMRWxCUVVjN1FVRkJReXhqUVVGRkxGVkJRVkVzUlVGQlJTeFZRVUZSTEVWQlFVVTdRVUZCUlN4dFFrRkJUenRCUVVGQkxGVkJRVVU3UVVGQlF5eHRRa0ZCVXl4SlFVRkhPMEZCUVVNc1kwRkJSU3hWUVVGUkxFVkJRVVVzVlVGQlVTeEZRVUZGTzBGQlFVVXNiVUpCUVU4N1FVRkJRU3hWUVVGRk8wRkJRVU1zYlVKQlFWTXNTMEZCU1R0QlFVRkRMR05CUVVVc1ZVRkJVU3hGUVVGRkxGVkJRVkVzUlVGQlJUdEJRVUZGTEcxQ1FVRlBPMEZCUVVFc1ZVRkJSVHRCUVVGRExHTkJRVWtzU1VGQlJTeFhRVUZWTEVsQlFVYzdRVUZCUlN4WlFVRkZMRkZCUVUwc1NVRkJTU3hSUVVGUkxFTkJRVU1zUjBGQlJTeE5RVUZKTzBGQlFVTXNhVUpCUVVjN1FVRkJSU3huUWtGQlJUdEJRVUZCTEZWQlFVTXNRMEZCUXp0QlFVTjBVeXhqUVVGSkxFdEJRVWNzVDBGQlR5eFBRVUZQTEVOQlFVTXNSMEZCUlN4RFFVRkRMRWRCUVVVc1MwRkJSeXhyUWtGQmFVSXNTVUZCUlN4RFFVRkRMRWRCUVVVc1RVRkJTVHRCUVVGRExHdENRVUZOTzBGQlFVRXNWVUZCUlN4SFFVRkZMRXRCUVVjc1dVRkJWU3hQUVVGUExGRkJRVThzU1VGQlJTeGpRVUZaTEU5QlFVOHNaVUZCWXl4SlFVRkZMRmxCUVZVc1QwRkJUeXhYUVVGVExGbEJRVlVzVDBGQlR5eFJRVUZSTEZsQlFWVXNXVUZCVlN4UFFVRlBMRkZCUVZFc1UwRkJVeXhOUVVGTExFbEJRVVVzUlVGQlJTd3dRa0ZCZDBJc1QwRkJSeXhKUVVGRk8wRkJRVWNzYlVKQlFWTXNSMEZCUnl4SFFVRkZPMEZCUVVNc2JVSkJRVThzUlVGQlJTeGhRVUZYTEVWQlFVVXNWMEZCVnl4SFFVRkZMRU5CUVVNc1NVRkJSU3hKUVVGRk8wRkJRVUVzVlVGQlF6dEJRVUZETEdOQlFVa3NTVUZCUnl4SFFVRkZPMEZCUXpkVkxHTkJRVWNzUjBGQlJUdEJRVUZETEdkQ1FVRkpMRXRCUVVjc2RVTkJRV01zUzBGQlJ6dEJRVUZuUWl4blFrRkJSU3hKUVVGRkxFZEJRVWNzVVVGQlVTeERRVUZETEVsQlFVVXNUVUZCU1N4WlFVRlZPMEZCUVVrc2FVSkJRVWNzUTBGQlF5eEhRVUZGTEUxQlFVazdRVUZCUXl4clFrRkJSU3hGUVVGRkxGZEJRVmNzVTBGQlV5eEpRVUZGTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWxCUVVVc1IwRkJSeXhWUVVGVkxFTkJRVU03UVVGQlJTeHhRa0ZCVHl4SFFVRkhMR0ZCUVdFc1IwRkJSU3hKUVVGRkxGTkJRVThzVFVGQlRUdEJRVUZCTEZsQlFVTTdRVUZCUlN4blFrRkJSU3hQUVVGSE8wRkJRVU1zYTBKQlFVVXNSMEZCUnl4SFFVRkZMRWxCUVVVN1FVRkJSU3huUWtGQlJTeFhRVUZUTEVsQlFVVXNTVUZCU1N4WFFVRlhMRU5CUVVNN1FVRkJSeXh4UWtGQlR6dEJRVUZCTEZsQlFVTTdRVUZCUlN4blFrRkJSU3hEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEVsQlFVVXNVMEZCU3p0QlFVRkRMR3RDUVVGRkxFVkJRVVVzVjBGQlZ5eFRRVUZUTEVsQlFVVXNTVUZCU1N4SlFVRkpMRU5CUVVNc1NVRkJSU3hIUVVGSExGVkJRVlVzUTBGQlF6dEJRVUZGTEdsQ1FVRkhMRk5CUVZNc1IwRkJSU3hKUVVGRkxGTkJRVThzVVVGQlR5eERRVUZETEVkQlFVVXNUVUZCU1R0QlFVRkRMRzlDUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZGTEVWQlFVVXNTVUZCUlN4RlFVRkZMRk5CUVU4c1EwRkJRenRCUVVGQkxHTkJRVU1zUTBGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUlN4aFFVRkRMRVZCUVVVc1pVRkJZU3hKUVVGRkxGRkJRVkVzUzBGQlN5eFhRVUZUTEV0QlFVY3NVVUZCVVN4TFFVRkxMRU5CUVVNc1JVRkJSU3hSUVVGUkxFOUJRVTBzUjBGQlJ6dEJRVUZITEc5Q1FVRlJMRXRCUVVzc1RVRkJUU3hEUVVGRE8wRkJRVVVzWjBKQlFVVXNRMEZCUXl4SFFVRkZMRTFCUVVrN1FVRkJReXh6UWtGQlVTeFhRVU55Wmp0QlFVRkZMRzlDUVVGTk8wRkJRVUVzV1VGQlJUdEJRVUZGTEdOQlFVVXNWVUZCVVN4TlFVRkpPMEZCUVRaQ0xHZENRVUZKTzBGQlFVVXNaMEpCUVVjN1FVRkJReXhyUWtGQlJUdEJRVUZCTEZsQlFYbENMRk5CUVU4c1IwRkJSVHRCUVVGRExHOUNRVUZOTEZGQlFWRXNUVUZCVFN4NVIwRkJlVWNzUjBGQlJUdEJRVUZCTEZsQlFVVTdRVUZCUXl4dFFrRkJUeXhUUVVGUExFVkJRVVU3UVVGQlFTeFZRVUZOTEZkQlFWTXNUVUZCU1R0QlFVRkZMR2RDUVVGRkxFbEJRVVVzUzBGQlN5eFRRVUZUTEU5QlFVc3NaVUZCWVN4UFFVRlBMRmxCUVZVc1UwRkJVeXhyUWtGQlowSXNTVUZCUlN4VFFVRlRMR05CUVdNc1RVRkJUU3hQUVVGUExHVkJRV1VzWlVGQlpTeGxRVUZqTEVsQlFVVXNZVUZCV1N4TlFVRkpMRVZCUVVVc1VVRkJVU3hQUVVGUExFbEJRVVVzU1VGQlJTeEZRVUZGTEU5QlFVOHNSMEZCUlN4RlFVRkZMRkZCUVZFc1ZVRkJVeXhGUVVGRkxFVkJRVVVzV1VGQldTeEhRVUZITEVsQlFVVXNRMEZCUXl4SlFVRkZMRWxCUVVVc1NVRkJSeXhOUVVGSkxFdEJRVWNzVDBGQlJ6dEJRVUZETEd0Q1FVRkpMRWxCUXpsb1FpeEpRVUZKTzBGQlFXVXNaMEpCUVVVc1MwRkJTeXhQUVVGTkxFZEJRVVVzUzBGQlJUdEJRVUZGTEdkQ1FVRkZMRXRCUVVzc1NVRkJTVHRCUVVGRkxIRkNRVUZQTEVWQlFVVTdRVUZCUVN4WlFVRlpMRWRCUVVVc1RVRkJTU3hKUVVGRkxFOUJRVWM3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRWxCUVVrN1FVRkJaU3huUWtGQlJTeExRVUZMTEU5QlFVMHNSMEZCUlN4TFFVRkZPMEZCUVVVc1owSkJRVVVzWlVGQllUdEJRVUZqTEdkQ1FVRkZMRXRCUVVzc1NVRkJTVHRCUVVGRkxIRkNRVUZQTEVsQlFVa3NWMEZCVnl4RlFVRkZMRkZCUVZFN1FVRkJRU3haUVVGRExFbEJRVWNzU1VGQlJTeERRVUZETEVkQlFVVXNSMEZCUlN4TlFVRkpPMEZCUVVNc2EwSkJRVWtzU1VGQlJTeEpRVUZKTzBGQlFXVXNaMEpCUVVVc1MwRkJTeXhQUVVGTkxFZEJRVVVzU1VGQlJUdEJRVUZGTEdkQ1FVRkZMR1ZCUVdFN1FVRkJZeXhuUWtGQlJTeFRRVUZQTEUxQlFVazdRVUZCUXl4MVFrRkJTeXhGUVVGRkxGVkJRVkVzUzBGQlJ5eEZRVUZGTEZWQlFWRXNSVUZCUlN4WFFVRlRMRVZCUVVVc1JVRkJSU3hSUVVGUkxFbEJRVVVzUlVGQlJUdEJRVUZCTEdOQlFVTTdRVUZCUlN4blFrRkJSU3hWUVVGUk8wRkJRVVVzWjBKQlFVVXNTMEZCU3l4SlFVRkpPMEZCUVVFc1dVRkJRenRCUVVGSExHVkJRVWNzWlVGQllTeFBRVUZQTEdkQ1FVRmpMRTlCUVU4c1kwRkJXU3h4UWtGQmMwSTdRVUZEY0dRc1kwRkJTU3hMUVVGSExGRkJRVkVzU1VGQlNTeExRVUZMTEU5QlFVOHNSMEZCUlN4TFFVRkhMRkZCUVZFc1RVRkJUU3hMUVVGTExFOUJRVTg3UVVGQlJTeG5Ra0ZCU1N4TFFVRkhMRWxCUVVrc1RVRkJTU3hIUVVGSExGVkJRVlVzUjBGQlJTeEZRVUZGTEV0QlFVc3NSMEZCUnl4SlFVRkZMRWxCUVVrc1IwRkJSU3hMUVVGSExFbEJRVWtzVFVGQlNTeEhRVUZITEZWQlFWVXNSMEZCUlN4RlFVRkZMRXRCUVVzc1IwRkJSeXhKUVVGRkxFbEJRVWs3UVVGQlJ5eGpRVUZKTEV0QlFVY3NSVUZCUlN4VFFVRlBMRWxCUVVjc1NVRkJSU3hGUVVGRkxGbEJRVlU3UVVGQlJ5eHBRa0ZCVHl4UFFVRlBMRWRCUVVVc1JVRkJSVHRCUVVGRkxHVkJRVWM3UVVGQlN5eFpRVUZGTEdkQ1FVRmpMRXRCUVVjc1JVRkJSVHRCUVVGaExGbEJRVVVzVTBGQlR5eEpRVUZGTEVWQlFVVTdRVUZCVFN4alFVRkpPMEZCUVVVc1dVRkJSU3hsUVVGaExFbEJRVVVzUlVGQlJUdEJRVUZaTEdOQlFVa3NaMEpCUVdNc1JVRkJSU3hwUWtGQlpUdEJRVUZITEhOQ1FVRlZMRTlCUVU4c1pVRkJZU3hGUVVGRkxHbERRVUZwUXp0QlFVRkZMR05CUVVrc1IwRkJSU3hIUVVGRkxFbEJRVWNzU1VGQlJTeFBRVUZITEVkQlFVVXNSMEZCUlN4SlFVRkhMRWxCUVVjc1NVRkJSenRCUVVNM1lpeHRRa0ZCVXl4SlFVRkhPMEZCUVVNc1owSkJRVWtzU1VGQlJTeEZRVUZGTzBGQlFVOHNZMEZCUlN4UlFVRk5MRWxCUVVVc1NVRkJTU3hWUVVGVkxFTkJRVU03UVVGQlJTeGpRVUZGTEZOQlFVOHNTVUZCU1N4WFFVRlhMRU5CUVVNN1FVRkJSU3hqUVVGRkxGTkJRVThzUzBGQlJ5eEpRVUZKTEZkQlFWY3NRMEZCUXp0QlFVRkZMR05CUVVVc1UwRkJUeXhMUVVGSExFbEJRVWtzVjBGQlZ5eERRVUZETzBGQlFVVXNZMEZCUlN4VlFVRlJMRWxCUVVrc1dVRkJXU3hEUVVGRE8wRkJRVVVzWTBGQlJTeFZRVUZSTEV0QlFVY3NTVUZCU1N4WlFVRlpMRU5CUVVNN1FVRkJSU3hqUVVGRkxGVkJRVkVzU1VGQlNTeGhRVUZoTEVOQlFVTTdRVUZCUlN4alFVRkZMRlZCUVZFc1MwRkJSeXhKUVVGSkxHRkJRV0VzUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZCUXl4alFVRkpMRWxCUVVVc1JVRkJSU3hyUWtGQlowSTdRVUZCVXl4eFFrRkJVeXhMUVVGSExFVkJRVVVzTUVSQlFYZEVMRWxCUVVVc2QwSkJRWGRDTzBGQlF6TlpMR05CUVVjN1FVRkJSU3huUWtGQlJTeEZRVUZGTzBGQlFVRXNiVUpCUVcxQ0xFVkJRVVU3UVVGQlZ5eG5Ra0ZCUlN4RlFVRkZPMEZCUVVFc2JVSkJRVzFDTEVsQlFVVXNTVUZCU1N4WlFVRlpMRTlCUVU4c1JVRkJReXhUUVVGUkxFbEJRVVVzVDBGQlRTeFRRVUZSTEU5QlFVMHNVVUZCVHl4TFFVRkZMRU5CUVVNc1IwRkJSU3hGUVVGRkxFVkJRVVVzYTBKQlFXdENPMEZCUVcxQ0xHdENRVUZOTEVWQlFVVXNOazVCUVRaT0xFZEJRVVVzUzBGQlJ5eEZRVUZGTERKSFFVRXlSeXhIUVVOd1owSXNUVUZCVFN4WlFVRlpPMEZCUVVVc1dVRkJSVHRCUVVGRkxHTkJRVVVzUlVGQlJTeFBRVUZQTzBGQlFWY3NZMEZCU1N4SFFVRkZMRXRCUVVjc1EwRkJReXhIUVVGRkxFdEJRVWNzUTBGQlF5eEhRVUZGTEV0QlFVY3NRMEZCUXl4SFFVRkZMRXRCUVVjN1FVRkJSU3h0UWtGQlV5eEpRVUZITzBGQlFVTXNiVUpCUVU4c2FVSkJRV1VzU1VGQlJUdEJRVUZCTEZWQlFVVTdRVUZCUXl4alFVRkpMRWxCUVVVc1IwRkJSU3hMUVVGSExFMUJRVXNzU1VGQlJUdEJRVUZMTEcxQ1FVRlRMRXRCUVVrN1FVRkJRenRCUVVGSkxHTkJRVVVzTUVKQlFYZENMRVZCUVVVc2RVSkJRWFZDTEVOQlFVTTdRVUZCUVN4VlFVRkRPMEZCUVVNc2JVSkJRVk1zUzBGQlNUdEJRVUZETzBGQlFVa3NZMEZCUlN3d1FrRkJkMElzUlVGQlJTeDFRa0ZCZFVJc1EwRkJRenRCUVVGRkxHZENRVUZITEV0QlFVY3NUVUZCU1N4VFFVRlBMRTlCUVVzc1kwRkJZeXhGUVVGRkxFZEJRVVVzUzBGQlJ5eFBRVUZOTEVsQlFVYzdRVUZCUXl4clFrRkJTU3hKUVVGRk8wRkJRVVVzYTBKQlFVVTdRVUZCU3l4blFrRkJSVHRCUVVGQkxGbEJRVU03UVVGQlFTeFZRVUZETzBGQlEyeFhMRzFDUVVGVExFVkJRVVVzUjBGQlJUdEJRVUZETEdkQ1FVRkhMRVZCUVVVN1FVRkJVU3huUWtGQlJTeFJRVUZSTEVOQlFVTTdRVUZCUlN4blFrRkJSU3hoUVVGWExFbEJRVVU3UVVGQlNTeGpRVUZGTEVOQlFVTTdRVUZCUlN4blFrRkJSVHRCUVVGSExHZENRVUZGTzBGQlFVVXNaMEpCUVVVc1NVRkJTU3haUVVGWkxHRkJRV0VzU1VGQlJTd3dRMEZCTUVNN1FVRkJSU3hqUVVGRkxFTkJRVU03UVVGQlJTeHJRa0ZCVFR0QlFVRkJMRlZCUVVVN1FVRkJReXh0UWtGQlV5eEhRVUZITEVkQlFVVTdRVUZCUXl4dFFrRkJUeXhGUVVGRkxGZEJRVmNzZFVOQlFYVkRPMEZCUVVFc1ZVRkJRenRCUVVGRExHTkJRVWs3UVVGQlJTeGpRVUZGTzBGQlFYbENMR0ZCUVVjc1EwRkJReXhOUVVGSkxFbEJRVVVzUjBGQlJ5eERRVUZETzBGQlFVY3NiVUpCUVZNc1IwRkJSeXhIUVVGRk8wRkJRVU1zWjBKQlFVY3NTMEZCUnl4TFFVRkhPMEZCUVVVc2NVSkJRVThzU1VGQlNTeFhRVUZYTEVOQlFVTTdRVUZCUlN4blFrRkJSenRCUVVGRkxIRkNRVUZQTEVWQlFVVXNRMEZCUXp0QlFVRkZMR3RDUVVGTE8wRkJRVUVzVlVGQmEwUTdRVUZETjFvc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTzBGQlFVTXNaMEpCUVVjc1EwRkJReXhOUVVGSkxFMUJRVWtzU1VGQlJ6dEJRVUZETEd0Q1FVRkhMR05CUVZrc1QwRkJUeXhUUVVGUExFTkJRVU1zUlVGQlJTeFhRVUZYTEZOQlFWTTdRVUZCUlN4MVFrRkJUeXhOUVVGTkxFZEJRVVVzUlVGQlF5eGhRVUZaTEdOQlFXRXNRMEZCUXl4RlFVRkZMRXRCUVVzc1QwRkJSenRCUVVGRExITkNRVUZITEVOQlFVTXNSVUZCUlR0QlFVRkhMREJDUVVGTExIbERRVUYxUXl4SlFVRkZPMEZCUVVrc2VVSkJRVThzUlVGQlJTeFpRVUZaTzBGQlFVRXNaMEpCUVVNc1EwRkJReXhGUVVGRkxFMUJRVTBzVFVGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVRkZMR3RDUVVGSE8wRkJRVVVzZFVKQlFVOHNTVUZCU1N4UlFVRlJMRU5CUVVNc1IwRkJSU3hOUVVGSk8wRkJRVU1zYjBKQlFVVXNSMEZCUlN4UFFVRkhMRVZCUVVVc1NVRkJTU3hYUVVGWExFTkJRVU1zUTBGQlF5eEhRVUZGTEVOQlFVTTdRVUZCUVN4blFrRkJReXhEUVVGRE8wRkJRVUVzV1VGQlF6dEJRVUZETEcxQ1FVRlBMRkZCUVZFc1VVRkJVU3hGUVVGRkxFdEJRVXNzVFVGQlNTeEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkJReXh0UWtGQlV5eEhRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVThzUjBGQlJ5eERRVUZETEVWQlFVVXNTMEZCU3l4UFFVRkhMRmxCUVZrc1dVRkJXU3hIUVVGRkxFTkJRVU1zUTBGQlF5eEZRVUZGTEV0QlFVc3NUMEZCUnl4RFFVRkRMRVZCUVVVc1MwRkJTeXhIUVVGRkxFOUJRVWM3UVVGQlF5eG5Ra0ZCUlN3MFEwRkJNRU1zUTBGQlF6dEJRVUZGTEdkQ1FVRkZMRU5CUVVNN1FVRkJRU3haUVVGRExFTkJRVU03UVVGQlFTeFZRVUZETzBGQlF6RmxMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTzBGQlFVTXNaMEpCUVVrc1NVRkJSVHRCUVVGRkxHMUNRVUZQTEV0QlFVY3NZMEZCV1N4UFFVRlBMRmxCUVZrc2QwSkJRWE5DTEVkQlFVY3NRMEZCUXl4TFFVRkhMRVZCUVVVc1YwRkJWeXhUUVVGVExFdEJRVWNzUzBGQlJ5eGpRVUZaTEU5QlFVOHNVVUZCVFN4SFFVRkhMRWRCUVVVc1IwRkJSU3hEUVVGRExFbEJRVVVzVFVGQlRTeEhRVUZGTEVWQlFVTXNZVUZCV1N4alFVRmhMRU5CUVVNc1JVRkJSU3hMUVVGTExFOUJRVWNzV1VGQldTeHhRa0ZCY1VJc1IwRkJSU3hEUVVGRExFVkJRVVVzUzBGQlN5eEhRVUZGTEZOQlFWTXNSMEZCUlR0QlFVRkRMR2RDUVVGRkxHOURRVUZyUXl4RFFVRkRPMEZCUVVVc1owSkJRVVVzTWtOQlFUSkRPMEZCUVVVc2NVSkJRVThzUjBGQlJ5eEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMRmxCUVVNc1EwRkJReXhEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZETEdOQlFVazdRVUZCUlN4dFFrRkJVeXhIUVVGSExFZEJRVVU3UVVGQlF5eHBRa0ZCU3l4UFFVRkxPMEZCUVdFc2FVSkJRVXNzVlVGQlVTeG5RMEZCWjBNc1EwRkJRenRCUVVGSkxHbENRVUZMTEZOQlFVODdRVUZCUVN4VlFVRkRPMEZCUTNwa0xHMUNRVUZUTEVkQlFVY3NSMEZCUlR0QlFVRkRMR05CUVVVc1ZVRkJWVHRCUVVGRkxHTkJRVVVzV1VGQlZTeE5RVUZKTzBGQlFVRXNXVUZCUXp0QlFVRkJMRlZCUVVNN1FVRkJReXh0UWtGQlV5eEhRVUZITEVkQlFVVTdRVUZCUXl4aFFVRkRMRWxCUVVVc1JVRkJSU3hIUVVGSExFTkJRVU1zVFVGQlNTeEZRVUZGTzBGQlFVVXNZMEZCUlN4SFFVRkhMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRVU1zYlVKQlFWTXNSMEZCUnl4SFFVRkZPMEZCUVVNc1owSkJRVWtzU1VGQlJTeEZRVUZGTEVkQlFVYzdRVUZCUlN4blFrRkJSeXhEUVVGRE8wRkJRVVVzY1VKQlFVODdRVUZCUlN4alFVRkZMRWRCUVVjc1MwRkJTeXhEUVVGRE8wRkJRVVVzWTBGQlJTeEhRVUZITEVWQlFVVXNSVUZCUlN4SlFVRkZPMEZCUVVVc1kwRkJSU3hMUVVGSExFVkJRVVU3UVVGQlJ5eG5Ra0ZCU1N4SlFVRkZMRVZCUVVNc1MwRkJTU3hQUVVGTkxHVkJRV01zUlVGQlJTeEpRVUZITEV0QlFVa3NSVUZCUlN4SlFVRkhMR0ZCUVZrc1JVRkJSU3hIUVVGRk8wRkJRVVVzYVVKQlFVY3NSVUZCUlN4TlFVRk5PMEZCUVVVc1kwRkJSU3haUVVGWkxFZEJRVVVzUlVGQlJTeEZRVUZGTzBGQlFVVXNiVUpCUVU4N1FVRkJRU3hWUVVGRE8wRkJRMnBTTEdOQlFVa3NTMEZCUnl4bFFVRmhMRTlCUVU4c1kwRkJXU3hKUVVGSkxGbEJRVmtzVFVGQlRTeEpRVUZGTEZGQlFVOHNTMEZCUnl4RFFVRkRMRWRCUVVVc1IwRkJSU3hOUVVGSk8wRkJRVU1zYlVKQlFVczdRVUZCUlN4blFrRkJTU3hKUVVGRkxFbEJRVVU3UVVGQlJTeHBRa0ZCU1N4SlFVRkZMRWRCUVVVc1JVRkJSU3hEUVVGRExFdEJRVWNzUlVGQlJTeExRVUZITzBGQlFVa3NaMEpCUVVVN1FVRkJSU3huUWtGQlJ5eExRVUZITEVsQlFVVXNTMEZCUnl4RlFVRkZMRlZCUVZFN1FVRkJSeXh4UWtGQlR5eEhRVUZITEU5QlFVOHNSVUZCUlN4clFrRkJhMElzYjBKQlFXdENMRVZCUVVVc1RVRkJUU3hIUVVGRkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZOQlFWTXNSMEZCUlN4RFFVRkRMRU5CUVVNN1FVRkJSU3hwUWtGQlNTeEpRVUZGTEVsQlFVY3NTVUZCUlN4TFFVRkhPMEZCUVVNc2EwSkJRVWtzU1VGQlJTeEZRVUZGTEVkQlFVYzdRVUZCUlN4clFrRkJSeXhKUVVGRkxFdEJRVWs3UVVGQlF5eHZRa0ZCU1N4SlFVRkZMRVZCUVVVc1IwRkJSeXhKUVVGRk8wRkJRVWNzYjBKQlFVY3NVVUZCVFN4SlFVRkZPMEZCUVVzc2RVSkJRVWNzVDBGQlR5eGpRVUZqTEVsQlFVVXNUMEZCU3l4SlFVRkZMRU5CUVVNN1FVRkJRU3h4UWtGQlRUdEJRVUZETEhOQ1FVRkpMRWxCUVVVc1JVRkJSU3hIUVVGSExFbEJRVVU3UVVGQlJ5eHpRa0ZCUlN4UlFVRk5MRWxCUVVVc1VVRkJUU3hKUVVGRkxFOUJRVXNzUzBGQlJ5eExRVUZITEVsQlFVVXNTMEZCUnl4SlFVRkZMRTFCUVVrc1MwRkJSeXhMUVVGSExFdEJRVWNzUzBGQlJ5eEpRVUZGTEVWQlFVVXNSMEZCUnl4SlFVRkZPMEZCUVVjc01FSkJRVTBzU1VGQlJTeExRVUZITEU5QlFVOHNZVUZCWVN4RFFVRkRMRXRCUVVjc1MwRkJSeXhQUVVGTkxFdEJRVWNzVDBGQlR5eGhRVUZoTEZGQlFVMHNTMEZEY0dZc1NVRkJSeXhSUVVGTkxFbEJRVVVzU1VGQlNUdEJRVUZCTEdkQ1FVRkZPMEZCUVVFc1kwRkJRenRCUVVGTkxIRkNRVUZITEU5QlFVOHNZVUZCWVN4RFFVRkRPMEZCUVVFc1dVRkJRenRCUVVGRExHMUNRVUZQTzBGQlFVRXNWVUZCUXl4SFFVRkZMRXRCUVVjc1EwRkJReXhIUVVGRkxFOUJRVXNzVDBGQlN5eExRVUZITEVkQlFVY3NSVUZCUlN4SFFVRkZMRWRCUVVVc1EwRkJReXhKUVVGRk8wRkJRVWNzYlVKQlFWTXNSMEZCUnl4SFFVRkZPMEZCUVVNc1owSkJRVWM3UVVGQlJTeHhRa0ZCVHl4RlFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzWjBKQlFVVTdRVUZCUlN4blFrRkJSeXhEUVVGRExFVkJRVVVzUjBGQlJUdEJRVUZETEdkQ1FVRkZMRWRCUVVjN1FVRkJSU3hyUWtGQlJ5eEZRVUZGTzBGQlFVOHNhMEpCUVVVc1QwRkJUeXhEUVVGRE8wRkJRVVVzYTBKQlFVVTdRVUZCUVN4WlFVRkZPMEZCUVVNc1kwRkJSU3hIUVVGRkxFbEJRVWtzUjBGQlJ5eERRVUZETEVOQlFVTTdRVUZCUVN4VlFVRkRPMEZCUTJwTkxHTkJRVWtzUzBGQlJ5eFBRVUZITzBGQlFVTXNaMEpCUVVVN1FVRkJSU3huUWtGQlJ6dEJRVUZGTEc5Q1FVRk5MRWRCUVVjc1EwRkJReXhIUVVGRk8wRkJRVk1zWlVGQlJ5eERRVUZETzBGQlFVRXNWVUZCUXl4SFFVRkZMRWxCUVVVN1FVRkJRU3haUVVGRExFbEJRVWNzUTBGQlF6dEJRVUZCTEZsQlFVVXNTVUZCUnl4RFFVRkRPMEZCUVVFc1dVRkJSU3hKUVVGSExFTkJRVU03UVVGQlFTeFpRVUZGTEVsQlFVY3NRMEZCUXp0QlFVRkJMRmxCUVVVc1NVRkJSeXhYUVVGVk8wRkJRVU1zYTBKQlFVVXNSVUZCUlN4SFFVRkhMRWxCUVVVc1JVRkJSU3hIUVVGSE8wRkJRVUVzV1VGQlF6dEJRVUZCTEZsQlFVVXNTVUZCUnl4WFFVRlZPMEZCUVVNc2FVSkJRVWNzVVVGQlVTeE5RVUZKTzBGQlFVTXNiVUpCUVVjN1FVRkJSU3hyUWtGQlJTeEhRVUZITEUxQlFVa3NSMEZCUnl4RFFVRkRPMEZCUVVFc1kwRkJReXhEUVVGRE8wRkJRVUVzV1VGQlF6dEJRVUZCTEZsQlFVVXNTVUZCUnl4WFFVRlZPMEZCUVVNc1owSkJRVVVzZDBKQlFYTkNMRVZCUVVVN1FVRkJSeXhuUWtGQlJTeG5Ra0ZCWXl4RlFVRkZPMEZCUVVjc1owSkJRVVVzWjBKQlFXTXNSVUZCUlR0QlFVRkhMRGhDUVVGak8wRkJRVUVzV1VGQlJUdEJRVUZCTEZsQlFVVXNTVUZCUnl4VFFVRlRMRWRCUVVVN1FVRkJReXhyUWtGQlJUdEJRVUZCTEZsQlFVTTdRVUZCUVN4WlFVRkZMRWxCUVVjc1EwRkJReXhyUWtGQmEwSTdRVUZCUVN4WlFVRkZMRWxCUVVjc1YwRkJWVHRCUVVGRExIVkNRVUZSTEV0QlFVc3NSVUZCUlR0QlFVRkhMRzFDUVVGSExFTkJRVU03UVVGQlJTeHRRa0ZCU1N4TFFVRkxMRVZCUVVVN1FVRkJSeXh0UWtGQlJ5eERRVUZETzBGQlFVVXNaMEpCUVVVc1MwRkJSeXhEUVVGRE8wRkJRVVVzWjBKQlFVVXNTMEZCUnl4RFFVRkRPMEZCUVVVc1owSkJRVVVzUzBGQlJ5eERRVUZETzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1NVRkJSeXhUUVVGVExFZEJRVVU3UVVGQlF5eHJRa0ZCU1N4SlFVRkZMRVZCUVVVN1FVRkJSeXh4UWtGQlR5eEZRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMR2RDUVVGRkxFZEJRVWNzUzBGQlN5eERRVUZETzBGQlFVVXNaMEpCUVVVc1IwRkJSeXhQUVVGUExFVkJRVVVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNSMEZCUlN4RFFVRkRPMEZCUVVVc1owSkJRVVVzUzBGQlJ6dEJRVUZGTEdsQ1FVRkhMRU5CUVVNN1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEpRVUZITEZkQlFWVTdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkRkR1lzU1VGQlJ5eFhRVUZWTzBGQlFVTXNaMEpCUVVVc1IwRkJSeXhSUVVGUkxFOUJRVWNzUlVGQlJTeERRVUZETzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1NVRkJSeXhQUVVGSExFbEJRVWtzVVVGQlVTeFBRVUZITzBGQlFVTXNaMEpCUVVVc1dVRkJWU3hQUVVGSE8wRkJRVU1zYjBKQlFVVXNSVUZCUlR0QlFVRkxMRzlDUVVGSkxFbEJRVVVzUlVGQlJUdEJRVUZKTEc5Q1FVRkhMRVZCUVVVc1owSkJRV01zUlVGQlJTeG5Ra0ZCWXl4SFFVRkhMRWRCUVVVN1FVRkJReXh6UWtGQlNTeEpRVUZGTEVWQlFVVXNSMEZCUnl4RlFVRkZMRVZCUVVVN1FVRkJSU3h6UWtGQlJTeEZRVUZGTEZsQlFWa3NSMEZCUlN4RlFVRkZMRmxCUVZrc1NVRkJSU3hGUVVGRkxEUkRRVUV3UXl4SlFVRkZMSGxDUVVGMVFpeEZRVUZGTEdWQlFXRXNjVU5CUVhGRE8wRkJRVUVzWjBKQlFVTXNWMEZCVXl4dFFrRkJhVUk3UVVGQlJTeHhRa0ZCUnp0QlFVRkJMSGxDUVVGVkxHdENRVUZuUWp0QlFVRkZMSEZDUVVGSExFTkJRVU03UVVGQlFTeDVRa0ZCVlN4dlFrRkJhMEk3UVVGQlJTeHhRa0ZCUnl4RlFVRkZMRTFCUVUwN1FVRkJRU3g1UWtGQlZTeHBRa0ZCWlR0QlFVRkZMSE5DUVVGRkxFVkJRVVVzVVVGQlR5eEpRVUZGTEVWQlFVVXNSMEZCUnl4RFFVRkRMRWRCUVVVc1QwRkJUeXhGUVVGRkxFZEJRVWNzUTBGQlF5eEhRVUZGTEVkQlFVY3NRMEZCUXl4SFFVRkZMRWRCUVVjc1EwRkJReXhIUVVGRkxFVkJRVVVzUjBGQlJ6dEJRVUZCTEc5Q1FVRlBMRVZCUVVVc1IwRkJSeXhSUVVGUkxFTkJRVU03UVVGQlFTeHZRa0ZEYkdkQ08wRkJRVUVzYTBKQlFVTXNSMEZCUlN4RlFVRkZMRXRCUVVjN1FVRkJRU3g1UWtGQlZTeHRRa0ZCYVVJN1FVRkJSU3h2UWtGQlJTeEhRVUZITEVWQlFVVXNUVUZCVFN4RlFVRkZMRmxCUVZrc1JVRkJReXhMUVVGSkxGTkJRVkVzUTBGQlF6dEJRVUZCTEhsQ1FVRlZMR0ZCUVZjN1FVRkJSU3h2UWtGQlJTeFRRVUZQTEUxQlFVY3NSVUZCUlN4RFFVRkRPMEZCUVVFc2VVSkJRVlVzV1VGQlZUdEJRVUZGTEhkQ1FVRk5MRmxCUVZVc1JVRkJSU3hYUVVGVExFOUJRVXNzUlVGQlJTeEpRVUZKTzBGQlFVRXNlVUpCUVZVc2JVSkJRV2xDTEVWQlFVVTdRVUZCVHl4dlFrRkJSU3haUVVGWkxFTkJRVU03UVVGQlFTeDVRa0ZCVlN4clFrRkJaMEk3UVVGQlJTeHZRa0ZCUlN4RlFVRkZMRTlCUVU4c1JVRkJSU3hIUVVGSExFVkJRVVVzU1VGQlNUdEJRVUZCTzBGQlFVOHNkVUpCUVVjc1JVRkJSU3h2UTBGQmEwTXNRMEZCUXp0QlFVRkJMR05CUVVNN1FVRkJSU3huUWtGQlJTeFZRVUZSTEU5QlFVYzdRVUZCUXl4clFrRkJSU3d5UWtGQmVVSXNSVUZCUlN4WFFVRlRMRTFCUVVrc1JVRkJSU3hUUVVGUExFOUJRVXNzUlVGQlJTeFBRVUZQTzBGQlFVVXNjMEpCUVUwN1FVRkJRU3hqUVVGRk8wRkJRVVVzYjBKQlFVa3NSVUZCUlN4SFFVRkhMRmRCUVZVc1UwRkJVeXhIUVVGRk8wRkJRVU1zYTBKQlFVVXNWVUZCVlN4RlFVRkRMRTFCUVVzc1JVRkJReXhEUVVGRE8wRkJRVUVzWTBGQlF5eERRVUZETEVkQlFVVXNSVUZCUlN4SFFVRkhMRk5CUVZFc1UwRkJVeXhIUVVGRk8wRkJRVU1zYTBKQlFVVXNVVUZCVVN4RFFVRkRPMEZCUVVFc1kwRkJReXhEUVVGRE8wRkJReTltTEd0Q1FVRkpMRWxCUVVVc1EwRkJReXhIUVVGRkxFbEJRVVVzUTBGQlF5eFZRVUZUTEZkQlFWVXNVMEZCVVN4VlFVRlZMRWRCUVVVN1FVRkJSU3h0UWtGQlNTeExRVUZMTzBGQlFVVXNhMEpCUVVVc1pVRkJaU3hEUVVGRExFdEJRVWNzUlVGQlJTeExRVUZMTEVOQlFVTTdRVUZCUlN4blFrRkJSU3haUVVGWkxFVkJRVU1zUzBGQlNTeFJRVUZQTEZWQlFWTXNSMEZCUlN4WFFVRlZMRVZCUVVVc2RVSkJRWEZDTEZsQlFWY3NXVUZCVnl4SFFVRkZMRmxCUVZjc1IwRkJSU3hEUVVGRE8wRkJRVUVzV1VGQlF5eERRVUZETzBGQlFVRXNXVUZCUlN4SlFVRkhMRk5CUVZNc1IwRkJSVHRCUVVGRExHZENRVUZGTzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1NVRkJSeXhYUVVGVk8wRkJRVU1zYTBKQlFVa3NTVUZCUlN4SFFVRkhMRFpDUVVFMlFqdEJRVUZGTEd0Q1FVRkZMRWxCUVVrc1QwRkJUeXhEUVVGRE8wRkJRVVVzWjBKQlFVVXNSMEZCUnl4TFFVRkxMRU5CUVVNN1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEpRVUZITEZkQlFWVTdRVUZCUXl4dFFrRkJSeXhGUVVGRkxFZEJRVWNzVjBGQlV5eEZRVUZGTEVkQlFVY3NSMEZCUlN4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dEJRVUZITEhGQ1FVRlBMRVZCUVVVc1IwRkJSeXhKUVVGSk8wRkJRVUVzV1VGQlF6dEJRVUZCTEZWQlFVTTdRVUZCUlN4WlFVRkZMRlZCUVZFN1FVRkJSU3hqUVVGSkxFdEJRVWNzVDBGQlJ6dEJRVUZETEcxQ1FVRkxMRWxCUVVVc1JVRkJSVHRCUVVGUkxHZENRVUZGTEUxQlFVMHNSVUZCUlN4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVOd1lpeFpRVUZGTEhOQ1FVRnZRaXhYUVVGVk8wRkJRVU1zWjBKQlFVa3NTVUZCUlN4SFFVRkhMRWRCUVVVc1NVRkJSU3hGUVVGRkxFVkJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXp0QlFVRkZMR2RDUVVGRkxFVkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRPMEZCUVVVc1pVRkJSeXhIUVVGRkxFbEJRVVVzUTBGQlF6dEJRVUZGTEdWQlFVY3NRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkJSU3h0UWtGQlV5eEhRVUZITEVkQlFVVTdRVUZCUXl4blFrRkJSenRCUVVGRkxIRkNRVUZQTEVWQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJSU3hsUVVGSExFTkJRVU03UVVGQlFTeFZRVUZETzBGQlFVTXNZMEZCU1N4SlFVRkZMRU5CUVVNc1IwRkJSU3hMUVVGSExFOUJRVWM3UVVGQlF5eG5Ra0ZCU1N4SlFVRkZMRVZCUVVVc1EwRkJRenRCUVVGRkxHdENRVUZKTEV0QlFVY3NSVUZCUlN4WFFVRlRMRVZCUVVVc1UwRkJUeXhKUVVGRkxFbEJRVWNzUlVGQlJTeERRVUZETEVsQlFVVXNTVUZCUlN4RlFVRkZMRWxCUVVrc1EwRkJRenRCUVVGSExHMUNRVUZQTzBGQlFVRXNWVUZCUXp0QlFVRkZMRmxCUVVVc2JVSkJRV2xDTEZOQlFWTXNSMEZCUlN4SFFVRkZPMEZCUVVNc1owSkJRVVVzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXp0QlFVRkZMR05CUVVVc1NVRkJSU3hGUVVGRkxFZEJRVWNzUTBGQlF5eEpRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkRhRk1zYlVKQlFWTXNSMEZCUnl4SFFVRkZPMEZCUVVNc2FVSkJRVXNzUzBGQlJ5eEpRVUZGTzBGQlFVY3NhVUpCUVVzc1MwRkJSeXhUUVVGVExFZEJRVVU3UVVGQlF5eG5Ra0ZCUlN4RlFVRkZMRXRCUVVzc1MwRkJSeXhMUVVGSExFMUJRVWtzUTBGQlF5eEpRVUZGTzBGQlFVRXNXVUZCUXp0QlFVRkZMR2xDUVVGTExFdEJRVWNzVTBGQlV5eEhRVUZGTzBGQlFVTXNaMEpCUVVVc1JVRkJSU3hMUVVGTExFdEJRVWNzUzBGQlJ5eE5RVUZKTEVOQlFVTXNTVUZCUlR0QlFVRkJMRmxCUVVNN1FVRkJSU3hwUWtGQlN5eExRVUZITEZOQlFWTXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVXNzUjBGQlJ6dEJRVUZGTEcxQ1FVRkxMRWRCUVVjc1EwRkJRenRCUVVGRkxHMUNRVUZMTEVkQlFVY3NRMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJSU3hwUWtGQlN5eExRVUZITEZkQlFWVTdRVUZCUXl4blFrRkJSU3hGUVVGRkxFdEJRVXNzUzBGQlJ5eE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVFc1dVRkJRenRCUVVGQkxGVkJRVU03UVVGQlF5eGpRVUZKTEV0QlFVY3NSMEZCUlN4TFFVRkhPMEZCUVVVc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVThzU1VGQlJTeEZRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRExFbEJRVVVzUjBGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVOb1V5eHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHRRa0ZCU3p0QlFVRkZMRzFDUVVGTE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4dFFrRkJTenRCUVVGRkxHZENRVUZITEdWQlFXRXNUMEZCVHp0QlFVRnJRaXh4UWtGQlR5eEZRVUZGTEhGR1FVRnhSaXhIUVVGRk8wRkJRVVVzWjBKQlFVa3NTVUZCUlN4RFFVRkRPMEZCUVVVc1owSkJRVWNzUzBGQlJ5eE5RVUZKTEVWQlFVVTdRVUZCVHl4eFFrRkJUeXhIUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUlN4blFrRkJSU3hGUVVGRExFbEJRVWNzUjBGQlJTeEpRVUZITEVkQlFVVXNTVUZCUnl4SFFVRkZMRWxCUVVjc1JVRkJRenRCUVVGRkxHMUNRVUZQTEV0QlFVY3NSVUZCUlN4TFFVRkhMR1ZCUVdNc1dVRkJXU3hIUVVGRkxFTkJRVU1zUjBGQlJTeExRVUZITEVkQlFVY3NRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkJReXh0UWtGQlV5eEhRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc2JVSkJRVThzU1VGQlJTeEZRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJReXhKUVVGRk8wRkJRVUVzVlVGQlF6dEJRVUZETEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRk8wRkJRVU1zWjBKQlFVYzdRVUZCUlN4eFFrRkJUeXhGUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4VlFVRkRPMEZCUXpWWkxHTkJRVWtzUzBGQlJ5eFBRVUZITzBGQlFVTXNjVUpCUVZFc1NVRkJSU3hIUVVGRkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVWQlFVVXNVVUZCVHl4RlFVRkZMRWRCUVVVN1FVRkJReXhyUWtGQlNTeEpRVUZGTEVWQlFVVXNWMEZCVnl4RFFVRkRPMEZCUVVVc2NVSkJRVXNzU1VGQlJTeE5RVUZKTEZGQlFVMHNTVUZCUlN4TFFVRkhMRWxCUVVVc1UwRkJUeXhMUVVGSExGTkJRVThzUzBGQlJ5eExRVUZITEVkQlFVVXNSVUZCUlN4TFFVRkhMRXRCUVVjN1FVRkJRU3haUVVGRE8wRkJRVU1zYlVKQlFVODdRVUZCUVN4VlFVRkRMRWRCUVVVc1MwRkJSeXhEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEUxQlFVazdRVUZCUXl4dFFrRkJTenRCUVVGRkxHZENRVUZITEVWQlFVVXNTVUZCUlR0QlFVRkhMSEZDUVVGUE8wRkJRVVVzWjBKQlFVa3NTVUZCUlR0QlFVRkZMR2RDUVVGRkxFbEJRVVVzU1VGQlJUdEJRVUZGTEhGQ1FVRlJMRWxCUVVVc1IwRkJSU3hKUVVGRkxFVkJRVVVzVVVGQlR5eEZRVUZGTEVkQlFVVTdRVUZCUXl4clFrRkJTU3hKUVVGRkxFVkJRVVVzVjBGQlZ5eERRVUZETzBGQlFVVXNhMEpCUVVjc1UwRkJUeXhMUVVGSExGTkJRVThzUjBGQlJUdEJRVUZETEc5Q1FVRkpMRWxCUVVVc1JVRkJSU3hYUVVGWExFVkJRVVVzUTBGQlF6dEJRVUZGTEc5Q1FVRkZMRlZCUVZFc1NVRkJSU3hUUVVGUExFMUJRVWtzU1VGQlJUdEJRVUZCTEdOQlFVazdRVUZCUXl4clFrRkJSeXhQUVVGTExFZEJRVVU3UVVGQlF5eHZRa0ZCUnl4TFFVRkhPMEZCUVVVN1FVRkJUU3hyUWtGQlJTeFJRVUZOTEVOQlFVTXNTVUZCUlR0QlFVRkJMR05CUVVNc1QwRkJTenRCUVVGRExHOUNRVUZITEZGQlFVMHNSMEZCUlR0QlFVRkRMSE5DUVVGSExFbEJRVVVzUzBGQlJ6dEJRVUZGTzBGQlFVMHNiMEpCUVVVc1VVRkJUU3hEUVVGRExFbEJRVVVzVFVGQlNTeExRVUZITzBGQlFVRXNaMEpCUVVNc1QwRkJTenRCUVVGRExITkNRVUZITEZOQlFVOHNSMEZCUlR0QlFVRkRMSGRDUVVGSExFbEJRVVVzUzBGQlJ6dEJRVUZGTzBGQlFVMHNjMEpCUVVVc1VVRkJUU3hEUVVGRExFbEJRVVVzVFVGQlNTeExRVUZITzBGQlFVRXNhMEpCUVVVc1QwRkJTenRCUVVGRExIZENRVUZITEVsQlFVVXNTMEZCUnp0QlFVRkZPMEZCUVUwc2MwSkJRVVVzVVVGQlRTeERRVUZETEVsQlFVVXNUVUZCU1N4TFFVTndaanRCUVVGSExITkNRVUZGTEZGQlFVMHNRMEZCUXl4SlFVRkZMRTFCUVVrc1MwRkJSeXhMUVVGSE8wRkJRVUVzYTBKQlFVVTdRVUZCUXl4dlFrRkJSU3hSUVVGTkxFTkJRVU1zU1VGQlJTeE5RVUZKTEV0QlFVY3NTVUZCUlR0QlFVRkJMR2RDUVVGRk8wRkJRVU1zYTBKQlFVVXNVVUZCVFN4RFFVRkRMRWxCUVVVc1RVRkJTU3hKUVVGRk8wRkJRVUVzWTBGQlJUdEJRVUZCTEZsQlFVTTdRVUZCUXl4alFVRkZMRTFCUVVrc1EwRkJReXhKUVVGRk8wRkJRVVVzYlVKQlFVOHNTVUZCUlR0QlFVRkJMRlZCUVVNc1IwRkJSU3hMUVVGSExFTkJRVU1zUjBGQlJTeEhRVUZGTEUxQlFVa3NSMEZCUnl4SFFVRkZMRVZCUVVVc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSVHRCUVVGRExHZENRVUZITzBGQlFVVXNjVUpCUVU4c1JVRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVRXNWVUZCUXp0QlFVRkRMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4blFrRkJSenRCUVVGRkxIRkNRVUZQTEVWQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZETEcxQ1FVRlRMRWRCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHRRa0ZCVHl4SlFVRkZMRVZCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETEVsQlFVVTdRVUZCUVN4VlFVRkRPMEZCUVVNc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTEVkQlFVVTdRVUZCUXl4blFrRkJSenRCUVVGRkxIRkNRVUZQTEVWQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGQkxGVkJRVU03UVVGQlF5eHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zWjBKQlFVYzdRVUZCUlN4eFFrRkJUeXhGUVVGRkxFbEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMRlZCUVVNN1FVRkJReXh0UWtGQlV5eEhRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXhuUWtGQlJ6dEJRVUZGTEhGQ1FVRlBMRVZCUVVVc1NVRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4VlFVRkRPMEZCUVVNc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZPMEZCUVVNc1owSkJRVWM3UVVGQlJTeHhRa0ZCVHl4RlFVRkZMRWxCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVRXNWVUZCUXp0QlFVRkRMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMR2RDUVVGSE8wRkJRVVVzY1VKQlFVOHNSVUZCUlN4SlFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZCTEZWQlFVTTdRVUZET1dRc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTzBGQlFVTXNaMEpCUVVjN1FVRkJSU3h4UWtGQlR5eEZRVUZGTEVsQlFVY3NSMEZCUlN4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVGRExHMUNRVUZUTEVkQlFVY3NSMEZCUlN4SFFVRkZPMEZCUVVNc1owSkJRVWM3UVVGQlJTeHhRa0ZCVHl4RlFVRkZMRWxCUVVjc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlFTeFZRVUZETzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEdkQ1FVRkhPMEZCUVVVc2NVSkJRVThzUlVGQlJTeEpRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJRU3hWUVVGRE8wRkJRVU1zWTBGQlNTeExRVUZITEU5QlFVYzdRVUZCUXl4blFrRkJSeXhEUVVGRE8wRkJRVVVzYTBKQlFVYzdRVUZCUXl4dlFrRkJSeXhGUVVGRkxFZEJRVVVzUTBGQlF5eEZRVUZGTzBGQlFVVXNjMEpCUVVjN1FVRkJReXgzUWtGQlJTeEhRVUZITEVOQlFVTXNTVUZCUlN4SFFVRkhMRU5CUVVNN1FVRkJRU3hyUWtGQlF5eFRRVUZQTEVkQlFVVTdRVUZCUXl4cFEwRkJZU3hOUVVGSkxGbEJRVlVzUzBGQlJ5eEZRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMR3RDUVVGRE8wRkJRVUVzWTBGQlF5eFRRVUZQTEVkQlFVVTdRVUZCUXl3MlFrRkJZU3hOUVVGSkxGbEJRVlVzUzBGQlJ5eEZRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMR05CUVVNN1FVRkJRU3hWUVVGRE8wRkJRVVVzYlVKQlFWTXNSMEZCUnl4SFFVRkZPMEZCUVVNc2JVSkJRVXM3UVVGQlJTd3lRa0ZCWVN4UFFVRlBMRkZCUVZFc1QwRkJTeXhSUVVGUkxFZEJRVWNzUlVGQlJTeEhRVUZGTEV0QlFVY3NSMEZCUlN4RFFVRkRMRVZCUVVVc1RVRkJUU3hMUVVGTExFVkJRVVVzUjBGQlJTeExRVUZITEV0QlFVa3NVVUZCVVN4TlFVRk5MRVZCUVVVc1IwRkJSU3hMUVVGSExFZEJRVVVzUTBGQlF6dEJRVUZCTEZWQlFVVTdRVUZCUXl4WlFVRkZMRzlEUVVGclF6dEJRVUZITEcxQ1FVRlRMRXRCUVVrN1FVRkJReXhuUWtGQlNTeEpRVUZGTEVkQlFVYzdRVUZCUlN4clFrRkJTU3hIUVVGSExFTkJRVU1zUjBGQlJTeEhRVUZITEUxQlFVa3NSMEZCUnl4RFFVRkRPMEZCUVVFc1ZVRkJSVHRCUVVGRExGbEJRVVVzWlVGQllUdEJRVU51Wml4alFVRkpMRWxCUVVVc1QwRkJSeXhOUVVGSkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVsQlFVVXNUMEZCU3l4TlFVRkpMRWxCUVVVc1RVRkJTeXhMUVVGSExFTkJRVU1zUjBGQlJTeEpRVUZITEVsQlFVY3NTVUZCUnl4TFFVRkpMRXRCUVVrc1MwRkJTU3hMUVVGSkxFdEJRVWtzUzBGQlNTeExRVUZKTEVkQlFVY3NSMEZCUlN4TFFVRkhMRU5CUVVNc1IwRkJSU3hKUVVGSExFbEJRVWNzU1VGQlJ5eExRVUZKTEV0QlFVa3NTMEZCU1N4TFFVRkpMRXRCUVVrc1MwRkJTU3hMUVVGSkxFZEJRVWM3UVVGQlJTeHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMRzFDUVVGUExFbEJRVVVzUlVGQlJTeEpRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETEVsQlFVVTdRVUZCUVN4VlFVRkhPMEZCUVVNc2JVSkJRVk1zUjBGQlJ5eEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zWjBKQlFVYzdRVUZCUlN4eFFrRkJUeXhGUVVGRkxFbEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVUVzVlVGQlF6dEJRVUZETEdOQlFVa3NTMEZCUnl4UFFVRkhPMEZCUVVNc1owSkJRVWtzU1VGQlJTeEhRVUZITEVOQlFVTXNTVUZCUlN4SFFVRkZMRWxCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVVVzYVVKQlFVY3NSMEZCUnl4SFFVRkZMRWRCUVVVc1EwRkJRenRCUVVGRkxHMUNRVUZQTzBGQlFVRXNWVUZCUXl4SFFVRkZMRXRCUVVjc1QwRkJSenRCUVVGRExHZENRVUZKTEVsQlFVVXNSMEZCUnp0QlFVRkZMR2RDUVVGRkxFVkJRVVU3UVVGQlJTeGxRVUZITEVOQlFVTTdRVUZCUlN4dFFrRkJUenRCUVVGQkxGVkJRVU03UVVGRGRGY3NiVUpCUVZNc1JVRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eG5Ra0ZCU1N4SlFVRkZMRlZCUVZVc1UwRkJUeXhIUVVGRkxFbEJRVVU3UVVGQlZTeHRRa0ZCVHl4SFFVRkhMRTFCUVVrN1FVRkJReXgxUWtGQlVTeEpRVUZGTEVkQlFVY3NTVUZCUlN4RFFVRkRMRWRCUVVVc1NVRkJSU3hMUVVGSExFZEJRVVVzU1VGQlJTeEhRVUZGTEVsQlFVVXNSMEZCUlN4TFFVRkpPMEZCUVVNc2IwSkJRVWtzU1VGQlJTeEZRVUZGTEVsQlFVVXNRMEZCUXp0QlFVRkZMRzFDUVVGSExFVkJRVVVzU1VGQlJTeE5RVUZKTEVOQlFVTXNTVUZCUlR0QlFVRkJMR05CUVVNN1FVRkJReXh4UWtGQlR5eEhRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRU5CUVVNN1FVRkJRU3haUVVGRExFTkJRVU03UVVGQlFTeFZRVUZETzBGQlF6TktMR05CUVVrc1MwRkJSeXhEUVVGRExFZEJRVVVzUzBGQlJ5eERRVUZETEVkQlFVVXNTMEZCUnl4TlFVRkpPMEZCUVVNc1owSkJRVWNzUTBGQlF5eEpRVUZITzBGQlFVTXNhMEpCUVVrc1NVRkJSU3hGUVVGRExFMUJRVXNzV1VGQlZ5eFRRVUZSTEZsQlFWY3NUVUZCU3l4TFFVRkpMRXRCUVVrc1MwRkJTU3hOUVVGTExHdENRVUZwUWl4UFFVRk5MRmxCUVZVc1QwRkJUeXhoUVVGWExGVkJRVlVzWVVGQlZ5eFZRVUZWTEZWQlFWVXNRMEZCUXl4TFFVRkhMRXRCUVVzc1VVRkJVU3hMUVVGSkxFZEJRVWNzU1VGQlJTeFZRVUZUTEVkQlFVVXNUVUZCU1N4cFFrRkJaMElzUjBGQlJUdEJRVUZGTEcxQ1FVRkpMRXRCUVVzN1FVRkJSeXd5UWtGQlV5eEhRVUZITEVOQlFVTXNTVUZCUlN4UFFVRlBMRVZCUVVVc1EwRkJReXhKUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMR3RDUVVGSkxFbEJRVVVzUTBGQlF6dEJRVUZGTEcxQ1FVRkpMRXRCUVVzN1FVRkJSU3hyUWtGQlJTeExRVUZMTEVkQlFVY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVU3UVVGQlJTeHRRa0ZCUnp0QlFVRkJMRmxCUVVNN1FVRkJReXh0UWtGQlR6dEJRVUZCTEZWQlFVVXNSMEZCUlR0QlFVTjBWeXh0UWtGQlV5eEhRVUZITEVkQlFVVXNSMEZCUlR0QlFVRkRMR2RDUVVGSE8wRkJRVVVzY1VKQlFVOHNSVUZCUlN4SlFVRkhMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4dFFrRkJTenRCUVVGRkxHZENRVUZKTEVsQlFVVTdRVUZCUlN4bFFVRkhMRVZCUVVVc1VVRkJVU3hUUVVGVExFZEJRVVVzUjBGQlJUdEJRVUZETEd0Q1FVRkpMRWxCUVVVc1NVRkJSVHRCUVVGRkxHdENRVUZGTEVWQlFVVXNSVUZCUlN4SlFVRkZMRWxCUVVVc1MwRkJSeXhOUVVGSkxFTkJRVU1zU1VGQlJUdEJRVUZGTEcxQ1FVRkpMRWxCUVVVc1IwRkJSU3hKUVVGRkxFVkJRVVVzVVVGQlR5eEZRVUZGTzBGQlFVVXNiVUpCUVVjc1JVRkJSU3hQUVVGTExFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNWMEZCVnl4RFFVRkRPMEZCUVVVc2FVSkJRVWNzUlVGQlJTeExRVUZITEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVVc2JVSkJRVWNzUlVGQlJTeFRRVUZQTzBGQlFVRXNXVUZCUXl4RFFVRkRPMEZCUVVVc2JVSkJRVTg3UVVGQlFTeFZRVUZETzBGQlFVTXNiVUpCUVZNc1IwRkJSeXhIUVVGRkxFZEJRVVU3UVVGQlF5eG5Ra0ZCUnp0QlFVRkZMSEZDUVVGUExFVkJRVVVzU1VGQlJ5eEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRzFDUVVGTE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4blFrRkJTU3hKUVVGRkxFZEJRVWM3UVVGQlJTeGpRVUZGTEVWQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRk8wRkJRVThzWjBKQlFVa3NTVUZCUlR0QlFVRkZMR05CUVVVc1VVRkJVU3hUUVVGVExFZEJRVVU3UVVGQlF5eHRRa0ZCUnl4RlFVRkZMRk5CUVU4N1FVRkJRU3haUVVGRExFTkJRVU03UVVGQlJTeGpRVUZGTEVWQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGRkxHMUNRVUZQTzBGQlFVRXNWVUZCUXp0QlFVRkRMRzFDUVVGVExFZEJRVWNzUjBGQlJUdEJRVUZETEcxQ1FVRlBMRWxCUVVVc1JVRkJSU3hKUVVGSExFZEJRVVVzUTBGQlF5eEpRVUZGTzBGQlFVRXNWVUZCUlR0QlFVRkRMRzFDUVVGVExFZEJRVWNzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMRzFDUVVGUExFbEJRVVVzUlVGQlJTeEpRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJReXhKUVVGRk8wRkJRVUVzVlVGQlJUdEJRVU5xWkN4dFFrRkJVeXhIUVVGSExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlR0QlFVRkRMRzFDUVVGUExFbEJRVVVzUlVGQlJTeEpRVUZITEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRExFbEJRVVU3UVVGQlFTeFZRVUZGTzBGQlFVTXNZMEZCU1N4TFFVRkhMRU5CUVVNc1RVRkJTeXhEUVVGRExFZEJRVVVzUTBGQlF5eERRVUZETzBGQlFVVXNiVUpCUVZNc1IwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNaMEpCUVVjN1FVRkJSU3h4UWtGQlR5eEZRVUZGTEVsQlFVY3NSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzYlVKQlFVczdRVUZCUlN4dFFrRkJTenRCUVVGRkxHMUNRVUZMTzBGQlFVVXNjVUpCUVZFc1NVRkJSU3hIUVVGRkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVkQlFVVXNTMEZCU1R0QlFVRkRMR3RDUVVGSkxFbEJRVVVzUlVGQlJTeEZRVUZGTEV0QlFVY3NUVUZCU1N4RFFVRkRMRWRCUVVVc1NVRkJSU3hGUVVGRkxFVkJRVVVzU1VGQlJTeExRVUZITEUxQlFVa3NRMEZCUXp0QlFVRkZMRzFDUVVGSE8wRkJRVVVzZFVKQlFWRXNTVUZCUlN4SFFVRkZMRWxCUVVVc1IwRkJSU3hMUVVGSk8wRkJRVU1zYjBKQlFVa3NTVUZCUlN4RlFVRkZMRVZCUVVVc1NVRkJSU3hOUVVGSkxFTkJRVU1zUjBGQlJTeEpRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkZMSE5DUVVGSkxFdEJRVWNzVDBGQlN5eE5RVUZKTEUxQlFVa3NTVUZCUlN4TFFVRkhMRWRCUVVjc1IwRkJSeXhIUVVGRkxFTkJRVU1zUTBGQlF5eEhRVUZGTEVWQlFVVXNVMEZCVHl4TFFVRkhMRVZCUVVVc1MwRkJTeXhEUVVGRE8wRkJRVUVzWTBGQlF6dEJRVUZETEcxQ1FVRkhPMEZCUVVFc1dVRkJRenRCUVVGRExHTkJRVVVzUlVGQlJTeExRVUZITEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVVc2JVSkJRVTg3UVVGQlFTeFZRVUZETzBGQlFVTXNZMEZCU1N4TFFVRkhMRU5CUVVNc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFVkJRVVVzUjBGQlJTeExRVUZITEVOQlFVTXNTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRVZCUVVVN1FVRkJSU3h0UWtGQlV5eEhRVUZITEVkQlFVVTdRVUZCUXl4blFrRkJTU3hKUVVGRkxFMUJRVTBzUjBGQlJ5eERRVUZETEVsQlFVVXNRMEZCUXp0QlFVRkZMR1ZCUVVjc1IwRkJSU3hIUVVGRkxFZEJRVVVzUlVGQlJTeE5RVUZOTzBGQlFVVXNiVUpCUVU4N1FVRkJRU3hWUVVGRE8wRkJRMnBtTEdOQlFVa3NTMEZCUnl4RFFVRkRMRWRCUVVVc1RVRkJTVHRCUVVGRExHVkJRVWNzUlVGQlJTeEpRVUZKTEVkQlFVVXNUVUZCU1N4RFFVRkRPMEZCUVVFc1ZVRkJRenRCUVVOb1F5eHRRa0ZCVXl4SFFVRkhMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVU3UVVGQlF5eHhRa0ZCVXl4RlFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRk8wRkJRVU1zYlVKQlFVa3NTVUZCUlN4WlFVRlZMRTlCUVU4c1NVRkJSU3hGUVVGRkxGTkJRVk1zU1VGQlJTeExRVUZITEVsQlFVY3NSVUZCUlN4VFFVRlBPMEZCUVVjc2IwSkJRVVVzUlVGQlJTeERRVUZETEVsQlFVVTdRVUZCUlN4eFFrRkJUenRCUVVGQkxGbEJRVU03UVVGQlF5eHhRa0ZCVXl4RlFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExIRkNRVUZQTEVWQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVjN1FVRkJRU3haUVVGRE8wRkJRVU1zY1VKQlFWTXNSVUZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXgxUWtGQlV5eEZRVUZGTEVsQlFVYzdRVUZCUXl4MVFrRkJUeXhKUVVGRkxFdEJRVWNzUzBGQlJ5eEpRVUZGTEV0QlFVY3NTVUZCUlR0QlFVRkJMR05CUVVNN1FVRkJReXhyUWtGQlNUdEJRVUZGTEhGQ1FVRkxMRWxCUVVVc1JVRkJSU3hGUVVGRkxGbEJRVmtzU1VGQlJTeEZRVUZGTEZsQlFWa3NRMEZCUXl4TlFVRkpMRTlCUVVzc1NVRkJSU3hGUVVGRkxFVkJRVVVzVTBGQlV5eEpRVUZGTEVWQlFVVXNVMEZCVXl4RFFVRkRMRTlCUVVzc1NVRkJSU3hGUVVGRkxFVkJRVVVzVVVGQlVTeEpRVUZGTEVWQlFVVXNVVUZCVVN4RFFVRkRPMEZCUVVjc2NVSkJRVTg3UVVGQlFTeFpRVUZETzBGQlFVTXNjVUpCUVZNc1JVRkJSU3hIUVVGRk8wRkJRVU1zYzBKQlFVOHNSVUZCUlN4UFFVRlBMRWRCUVVVN1FVRkJRU3huUWtGQlF5eExRVUZMTzBGQlFVVXNlVUpCUVU4c1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEpRVUZGTEVkQlFVVXNTVUZCUnl4RlFVRkZPMEZCUVVFc1owSkJRVVVzUzBGQlN6dEJRVUZGTEhsQ1FVRlBPMEZCUVVFc1owSkJRVVVzUzBGQlN6dEJRVUZGTEhsQ1FVRlBMRWxCUVVrc1MwRkJTeXhGUVVGRkxGbEJRVmtzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUVN4blFrRkJSU3hMUVVGTE8wRkJRVVVzZVVKQlFVOHNTVUZCU1R0QlFVRkJMRzlDUVVGTExFVkJRVVVzV1VGQldUdEJRVUZCTEc5Q1FVTTFaanRCUVVGQkxHOUNRVUZGTzBGQlFVRXNhMEpCUVVNN1FVRkJRU3huUWtGQlJTeExRVUZMTzBGQlFVVXNlVUpCUVU4c1NVRkJTU3hMUVVGTExFVkJRVVVzV1VGQldTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMR2RDUVVGRkxFdEJRVXM3UVVGQlJTeDVRa0ZCVHl4SlFVRkpMRXRCUVVzc1JVRkJSU3haUVVGWkxFbEJRVVVzUjBGQlJTeEpRVUZITEVWQlFVVTdRVUZCUVN4blFrRkJSU3hMUVVGTE8wRkJRVVVzZVVKQlFVOHNTVUZCU1N4TFFVRkxMRVZCUVVVc1dVRkJXU3hKUVVGRkxFZEJRVVVzU1VGQlJ5eEZRVUZGTzBGQlFVRXNZMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJReXh4UWtGQlV5eEZRVUZGTEVkQlFVVTdRVUZCUXl4clFrRkJTU3hKUVVGRkxFVkJRVVU3UVVGQlJ5eHRRa0ZCU1N4SlFVRkZMRWxCUVVrc1MwRkJUU3hKUVVGSkxFdEJRVXNzUlVGQlJTeExRVUZITEUxQlFVc3NSMEZCUlN4RFFVRkRMRVZCUVVjc1VVRkJVU3hEUVVGRExFZEJRVVVzU1VGQlJTeExRVUZITzBGQlFVTXNiMEpCUVVrc1NVRkJSU3hGUVVGRkxGTkJRVk1zUjBGQlJTeExRVUZITEVWQlFVVXNSVUZCUlN4WlFVRlpMRU5CUVVNc1NVRkJSU3hMUVVGSExFbEJRVWtzUTBGQlF6dEJRVUZGTEc5Q1FVRkhMRWxCUVVVc1NVRkJSU3hGUVVGRkxGRkJRVkU3UVVGQlJTeDFRa0ZCUnl4SlFVRkZMRVZCUVVVc1VVRkJVU3hKUVVGRkxFZEJRVVVzUlVGQlJTeFJRVUZSTEVOQlFVTXNSMEZCUlN4TFFVRkhMRWxCUVVVc1JVRkJSU3hUUVVGVExFbEJRVVVzUTBGQlF5eExRVUZITEVWQlFVVXNVMEZCVXl4RFFVRkRMRWRCUVVVc1JVRkJSU3haUVVGWkxFVkJRVVVzV1VGQldTeEpRVUZGTEVOQlFVTTdRVUZCUVN4eFFrRkJUenRCUVVGRExHOUNRVUZGTEZGQlFWRXNSVUZCUlN4UlFVRlJMRWxCUVVVc1EwRkJRenRCUVVGRk8wRkJRVUVzWjBKQlFVczdRVUZCUVN4alFVRkRPMEZCUVVNc2EwSkJRVVVzU1VGQlNTeExRVUZMTEVWQlFVVXNXVUZCV1N4SlFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzYTBKQlFVVXNSVUZCUlN4SlFVRkpPMEZCUVVFc1owSkJRVXNzUlVGQlJTeFpRVUZaTzBGQlFVRXNaMEpCUTI1bU8wRkJRVUVzWjBKQlFVVTdRVUZCUVN4alFVRkRMRU5CUVVNN1FVRkJSU3hyUWtGQlJTeEZRVUZGTEVOQlFVTTdRVUZCUlN4eFFrRkJUeXhMUVVGSExFVkJRVVVzUjBGQlJTeERRVUZETEVsQlFVVXNTMEZCUnl4RlFVRkZMRWRCUVVVc1EwRkJReXhKUVVGRkxFVkJRVVVzV1VGQldTeEpRVUZGTEVsQlFVVXNSVUZCUlN4WlFVRlpMRWxCUVVVc1JVRkJSU3haUVVGWkxFbEJRVVU3UVVGQlFTeFpRVUZETzBGQlFVTXNiVUpCUVVzN1FVRkJSU3h0UWtGQlN6dEJRVUZGTEcxQ1FVRkxPMEZCUVVVc2JVSkJRVXM3UVVGQlJTeG5Ra0ZCU1N4SlFVRkZMRVZCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETzBGQlFVVXNaMEpCUVVVc1JVRkJReXhKUVVGSExFVkJRVVVzUlVGQlJTeExRVUZITEUxQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVjc1JVRkJSU3hGUVVGRkxFbEJRVVVzUzBGQlJ5eE5RVUZKTEVOQlFVTXNSMEZCUlN4SlFVRkhMRVZCUVVVc1JVRkJSU3hKUVVGRkxFdEJRVWNzVFVGQlNTeERRVUZETEVkQlFVVXNTVUZCUnl4RlFVRkZMRVZCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEhRVUZGTEVsQlFVY3NSVUZCUlN4RlFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zUjBGQlJTeEpRVUZITEVWQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFZEJRVVVzU1VGQlJ5eEZRVUZGTEVWQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhIUVVGRkxFbEJRVWNzUlVGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1IwRkJSU3hKUVVGSExFVkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWRCUVVVc1NVRkJSeXhGUVVGRkxFVkJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SFFVRkZMRWxCUVVjc1NVRkJSU3hIUVVGSExFTkJRVU1zU1VGQlJTeEhRVUZGTzBGQlFVVXNaMEpCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVVVzWjBKQlFVVTdRVUZCUVN4alFVRkRMRTFCUVVzN1FVRkJRU3hqUVVGMVFpeE5RVUZMTzBGQlFVRXNZMEZCVnl4TlFVRkxPMEZCUVVFc1kwRkJWeXhOUVVGTE8wRkJRVUVzWTBGQlN5eE5RVUZMTzBGQlFVRXNZMEZCWXl4TlFVRkxPMEZCUVVFc1kwRkJVU3hOUVVGTE8wRkJRVUVzWTBGQlZ5eE5RVUZMTzBGQlFVRXNZMEZETVdVc1RVRkJTenRCUVVGQkxHTkJRVmNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVmNzVDBGQlRUdEJRVUZCTEdOQlFWY3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEdOQlFVc3NUMEZCVFR0QlFVRkJMR05CUVVzc1QwRkJUVHRCUVVGQkxHTkJRVXNzVDBGQlRUdEJRVUZCTEZsQlFVazdRVUZCUlN4eFFrRkJVU3hMUVVGTE8wRkJRVVVzYTBKQlFVVXNSVUZCUlN4UlFVRlJMRWxCUVVrc1QwRkJUeXhIUVVGRkxFZEJRVWNzUjBGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0QlFVRkZMR2RDUVVGSkxFdEJRVWNzTWtSQlFUSkVMRTFCUVUwc1IwRkJSeXhIUVVGRkxFdEJRVWNzZDBaQlFYZEdMRTFCUVUwc1IwRkJSenRCUVVGRkxHZENRVUZGTzBGQlFVRXNZMEZCUXl4TlFVRkxMRTlCUVVjc1IwRkJSeXhGUVVGRkxFVkJRVVVzUlVGQlJTeFZRVUZWTEVkQlFVVXNRMEZCUXp0QlFVRkJMR05CUTNKbUxFMUJRVXNzVDBGQlJ5eEhRVUZITEVWQlFVVXNSVUZCUlR0QlFVRkJMR05CUVVVc1RVRkJTeXhQUVVGSExFZEJRVWNzUlVGQlJTeEZRVUZGTEVWQlFVVXNWVUZCVlN4SFFVRkZMRU5CUVVNN1FVRkJRU3hqUVVGRkxFMUJRVXNzVDBGQlJ5eEhRVUZITEVWQlFVVXNSVUZCUlR0QlFVRkJMR05CUVVVc1RVRkJTeXhQUVVGSExFZEJRVWNzUlVGQlJTeExRVUZITEZGQlFVMHNUVUZCU1N4SFFVRkZMRU5CUVVNN1FVRkJRU3hqUVVGRkxFMUJRVXNzVDBGQlJ5eEZRVUZGTEVWQlFVVXNTVUZCUnl4RFFVRkRPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJTeEZRVUZGTEVsQlFVY3NSMEZCUlN4SFFVRkhPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNVMEZCVXl4RlFVRkZMRlZCUVZVc1EwRkJRenRCUVVGQkxHTkJRVVVzVFVGQlN5eFBRVUZITEVWQlFVVXNRMEZCUXp0QlFVRkJMR05CUVVVc1RVRkJTeXhQUVVGSExFVkJRVVVzUlVGQlJTeEpRVUZITEVOQlFVTTdRVUZCUVN4alFVRkZMRTFCUVVzc1QwRkJSenRCUVVGRExHOUNRVUZGTEVWQlFVVTdRVUZCUnl4eFFrRkJSeXhKUVVGRkxFbEJRVVVzUzBGQlJ5eExRVUZITEUxQlFVa3NTMEZCUnp0QlFVRkpMSFZDUVVGUExFVkJRVVVzUjBGQlJTeERRVUZETzBGQlFVRXNZMEZCUXp0QlFVRkJMR05CUVVVc1RVRkJTeXhQUVVGSE8wRkJRVU1zZVVKQlFWRXNTVUZCUlN4SFFVRkZMRWxCUVVVc1IwRkJSU3hMUVVGSExFVkJRVVVzUzBGQlJ5eEhRVUZGTEUxQlFVa3NSVUZCUlN4RlFVRkZMRXRCUVVjc1NVRkJTU3hKUVVGRkxFdEJRVWNzU1VGQlNTeEhRVUZITzBGQlFVVTdRVUZCUXl4MVFrRkJUeXhGUVVGRkxFVkJRVVVzUzBGQlJ5eEhRVUZGTEVOQlFVTTdRVUZCUVN4alFVRkRPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJTeEZRVUZGTEV0QlFVY3NSMEZCUlN4RFFVRkRPMEZCUVVFc1kwRkJSU3hOUVVGTExFOUJRVWNzUlVGQlJTeEZRVUZGTEVsQlFVY3NRMEZCUXp0QlFVRkJMR05CUVVVc1RVRkJTeXhOUVVGSk8wRkJRVUVzWTBGQlN5eE5RVUZMTEU5QlFVY3NTMEZCUnl4RlFVRkZMRTFCUVVrc1MwRkJSeXhGUVVGRkxFdEJRVWNzVDBGQlN6dEJRVUZCTEdOQlFVc3NUVUZCU3l4UFFVRkhMRVZCUVVVc1JVRkJSU3hKUVVGSExFTkJRVU03UVVGQlFTeGpRVUZGTEUxQlFVc3NUVUZCU1R0QlFVRkJMR05CUVVzc1RVRkJTeXhQUVVGSExFVkJRVVVzVFVGQlNUdEJRVUZCTEdOQlFVVXNUVUZCU3l4UFFVRkhMRVZCUVVVc1MwRkJTeXhQUVVGUExFVkJRVVVzUzBGRGVHWXNTVUZCUlN4RlFVRkZMRTFCUVVrc1EwRkJReXhIUVVGRkxFTkJRVU03UVVGQlFTeGpRVUZGTEUxQlFVc3NUMEZCUnp0QlFVRkRMRzlDUVVGSkxFbEJRVVVzUzBGQlN5eFBRVUZQTEVWQlFVVXNTMEZCUnl4TFFVRkhMRVZCUVVVc1MwRkJSeXhMUVVGSExFdEJRVWNzUTBGQlF6dEJRVUZGTEhOQ1FVRkpMRVZCUVVVc1MwRkJSeXhOUVVGSkxFVkJRVVVzUzBGQlJ5eExRVUZITEV0QlFVYzdRVUZCU1N4dlFrRkJSenRCUVVGRkxIZENRVUZKTEUxQlFVa3NTMEZCUnl4RlFVRkZMRXRCUVVjc1RVRkJTU3hGUVVGRkxFMUJRVWtzUjBGQlJTeExRVUZITEV0QlFVY3NTMEZCUnl4TFFVRkhMRVZCUVVVc1JVRkJSU3hGUVVGRkxFMUJRVWtzU1VGQlJUdEJRVUZCTEhGQ1FVRlJPMEZCUVVNc2MwSkJRVVU3UVVGQlJ5eHpRa0ZCU1N4TFFVRkhMRVZCUVVVc1MwRkJSeXhKUVVGRkxFVkJRVVVzUzBGQlJ5eExRVUZITzBGQlFVVXNiVUpCUVVNc1MwRkJSeXhMUVVGSExFdEJRVWNzUzBGQlJ5eEZRVUZGTEVWQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1RVRkJTVHRCUVVGQkxHZENRVUZITzBGQlFVTXNkVUpCUVU4c1JVRkJSU3hIUVVGRkxFTkJRVU03UVVGQlFTeGpRVUZETzBGQlFVRXNZMEZCUlN4TlFVRkxMRTlCUVVjc1JVRkJSVHRCUVVGQkxHTkJRVWNzVFVGQlN5eFBRVUZITEVWQlFVVXNTMEZCU3l4UFFVRlBMRVZCUVVVc1MwRkJSeXhMUVVGSExFVkJRVVVzUzBGQlJ5eExRVUZITEV0QlFVY3NRMEZCUXl4SFFVRkZMRU5CUVVNN1FVRkJRU3hqUVVGRkxFMUJRVXNzVVVGQlNTeEZRVUZGTEV0QlFVY3NUVUZCVFN4VFFVRlRMRVZCUVVVc1ZVRkJWU3hEUVVGRE8wRkJRVUVzWTBGQlJTeE5RVUZMTEU5QlFVY3NSVUZCUlN4TFFVRkhPMEZCUVVFc1kwRkJTeXhOUVVGTExFOUJRVWM3UVVGQlF5eHZRa0ZCUlN4RlFVRkZPMEZCUVVjc2IwSkJRVWtzU1VGQlJTeExRVUZITzBGQlFVVXNiMEpCUVVVc1MwRkJTeXhKUVVGSkxFTkJRVU1zU1VGQlJUdEJRVUZITEhkQ1FVRlBMRWxCUVVVc1RVRkJTU3hQUVVGTExFOUJRVThzVlVGQlVTeEpRVUZGTEV0QlFVY3NUVUZCU1N4SlFVRkZMRWRCUVVjc1JVRkJSU3hOUVVGTkxFVkJRVVU3UVVGQlFTeGpRVUZETzBGQlFVRXNZMEZCUlN4TlFVRkxMRTlCUVVjc1JVRkJSVHRCUVVGQkxHTkJRVWNzVFVGQlN5eE5RVUZKTzBGQlFVRXNXVUZCUnp0QlFVRkZMR2RDUVVGRkxFVkJRVVU3UVVGQlFTeGpRVUZSTzBGQlFVRXNZMEZEYm1ZN1FVRkJRU3haUVVGVk8wRkJRVVVzYVVKQlFVa3NTMEZCU3p0QlFVRkZMR2RDUVVGRkxGTkJRVk1zUTBGQlF5eE5RVUZKTEVsQlFVVXNSVUZCUlN4UlFVRlJMRWxCUVVrc1QwRkJUeXhIUVVGRkxFZEJRVWNzUjBGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkJSeXhuUWtGQlJTeEZRVUZGTEZGQlFWRXNVMEZCVVN4SFFVRkhPMEZCUVVVc1owSkJRVVVzUjBGQlJ5eERRVUZETzBGQlFVVXNaMEpCUVVjc1JVRkJSU3hUUVVGUE8wRkJRVVVzY1VKQlFVODdRVUZCUlN4bFFVRkhMRWRCUVVVc1EwRkJRenRCUVVGRkxHMUNRVUZQTEVWQlFVVXNVMEZCVHp0QlFVRkJMRlZCUVVNN1FVRkJReXhqUVVGSkxFbEJRVVVzVVVGQlR5eExRVUZITEVOQlFVTTdRVUZEYkV3c2JVSkJRVk1zUjBGQlJ5eEhRVUZGTEVkQlFVVTdRVUZCUXl4blFrRkJSeXhEUVVGRExFZEJRVVU3UVVGQlF5eHJRa0ZCUlN4dlFrRkJTVHRCUVVGUkxHdENRVUZKTEVsQlFVVXNSVUZCUlR0QlFVRlBMR3RDUVVGSE8wRkJRVVVzZVVKQlFWRXNTVUZCUlN4SFFVRkZMRWxCUVVVc1NVRkJSU3hIUVVGRkxFdEJRVWs3UVVGQlF5eHpRa0ZCU1N4SlFVRkZMRWRCUVVjc1EwRkJRenRCUVVGRkxIVkNRVUZITEVWQlFVVXNTVUZCU1N4SFFVRkZMRU5CUVVNN1FVRkJRU3huUWtGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUXl4blFrRkJSeXhKUVVGRkxFVkJRVVVzU1VGQlNTeERRVUZETEV0QlFVYzdRVUZCUlN4eFFrRkJUenRCUVVGRkxHZENRVUZITEVkQlFVYzdRVUZCVHl4clFrRkJSU3hIUVVGSExFbEJRVWs3UVVGQlFTeHBRa0ZCVFR0QlFVRkRMR3RDUVVGSE8wRkJRVU1zYTBKQlFVVXNTMEZCU3l4RFFVRkRPMEZCUVVFc1kwRkJReXhUUVVGUExFZEJRVVU3UVVGQlF5eHZRa0ZCUnl4RlFVRkZMR0ZCUVdFN1FVRkJXU3gzUWtGQlRUdEJRVUZGTEhOQ1FVRkxPMEZCUVVFc1kwRkJjVVE3UVVGQlF5eHJRa0ZCUlN4RlFVRkZMRk5CUVU4N1FVRkJRU3haUVVGRE8wRkJRVU1zWjBKQlFVYzdRVUZCUXl4clFrRkJSU3hIUVVGRkxFVkJRVVVzU1VGQlNTeEhRVUZGTEVOQlFVTXNSMEZCUlN4RlFVRkZMRU5CUVVNc1NVRkJSU3hGUVVGRkxFbEJRVWtzUTBGQlF6dEJRVUZCTEZsQlFVTXNVMEZCVHl4SFFVRkZPMEZCUVVNc2EwSkJRVWNzUlVGQlJTeGhRVUZoTzBGQlFWY3NjMEpCUVUwN1FVRkJSU3hyUWtGQlJ5eGpRVUZaTEU5QlFVOHNXVUZCV1N4VlFVRlRPMEZCUVVNc2IwSkJRVVVzV1VGQldUdEJRVUZUTEc5Q1FVRkZMRVZCUVVNc1IwRkJSU3hQUVVGTkxFZEJRVVVzVDBGQlRTeEhRVUZGTEU5QlFVMHNSMEZCUlN4UFFVRk5MRWRCUVVVc1RVRkJTenRCUVVGRkxIbENRVUZSTEVsQlFVVTdRVUZCUVN4clFrRkJReXhaUVVGWExFTkJRVU03UVVGQlFTeHJRa0ZETjJZc1UwRkJVU3hQUVVGTExFVkJRVVVzUTBGQlF5eEpRVUZGTEVOQlFVTXNTVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dEJRVUZCTEdkQ1FVRkRMRWRCUVVVc1NVRkJSU3hIUVVGRkxFbEJRVVVzUlVGQlJTeFJRVUZQTEVWQlFVVTdRVUZCUlN4dlFrRkJSU3hYUVVGWExFdEJRVXNzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMEZCUVVVc2IwSkJRVVVzU1VGQlNTeEZRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkJMR05CUVVNc1QwRkJTenRCUVVGRExHOUNRVUZGTEVOQlFVTXNRMEZCUXp0QlFVRkZMRzlDUVVGRkxFVkJRVVVzVFVGQlRTeEhRVUZGTEVOQlFVTTdRVUZCUlN4dlFrRkJSU3hGUVVGRkxFMUJRVTBzUTBGQlF6dEJRVUZGTEc5Q1FVRkZMRVZCUVVNc1IwRkJSU3hMUVVGSkxFZEJRVVVzUzBGQlNTeEhRVUZGTEV0QlFVa3NSMEZCUlN4TFFVRkpMRWRCUVVVc1NVRkJSenRCUVVGRkxHdENRVUZGTEV0QlFVc3NSVUZCUlR0QlFVRkZMRzlDUVVGRkxFVkJRVVU3UVVGQlR5eHpRa0ZCU1N4SlFVRkZMRVZCUVVVc1MwRkJTeXhEUVVGRExFbEJRVVVzUlVGQlJTeExRVUZMTEVsQlFVVXNUVUZCU1N4TFFVRkpMRXRCUVVjc1EwRkJRenRCUVVGRkxIRkNRVUZKTEVsQlFVVXNSMEZCUlN4SlFVRkZMRVZCUVVVc1VVRkJUeXhGUVVGRk8wRkJRVVVzYjBKQlFVVXNTMEZCU3l4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03UVVGQlJTeDFRa0ZCU3l4SlFVRkZMRVZCUVVVc1MwRkJTeXhEUVVGRExFbEJRVVVzUlVGQlJTeExRVUZMTEVkQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkJSU3h2UWtGQlJTeERRVUZETEVkQlFVVXNTVUZCUnl4TFFVRkpMRXRCUVVrc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeERRVUZETzBGQlFVVXNiMEpCUVVVc1JVRkJSVHRCUVVGUExITkNRVUZKTEVsQlFVVXNSVUZCUlN4TFFVRkxMRU5CUVVNc1NVRkJSU3hGUVVGRkxFdEJRVXNzU1VGQlJTeE5RVUZKTEV0QlFVa3NTMEZCUnl4RFFVRkRPMEZCUVVVc2EwSkJRVVVzUzBGQlN5eE5RVUZOTEVkQlFVVXNRMEZCUXp0QlFVRkZMR3RDUVVGRkxFdEJRVXNzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4TFFVRkpMRWRCUVVVc1MwRkJTU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4TFFVRkpMRWRCUVVVc1EwRkJRenRCUVVGRkxHOUNRVUZGTEVsQlFVa3NXVUZCV1N4UFFVRlBMRWxCUVVrc1YwRkJWeXhEUVVGRExFTkJRVU03UVVGQlJTeHZRa0ZCUnl4SlFVRkpMRmxCUVZrN1FVRkJRU3hyUWtGQlV6dEJRVUZCTEd0Q1FVTTNaaXhGUVVGRExFZEJRVVVzUlVGQlF5eEhRVUZGTEVWQlFVTXNSVUZCUXp0QlFVRkJMR2RDUVVGRExFVkJRVWNzVVVGQlVUdEJRVUZCTEdOQlFVTTdRVUZCUXl4clFrRkJSVHRCUVVGRkxHZENRVUZGTEVsQlFVa3NSMEZCUlN4RFFVRkRPMEZCUVVVc1owSkJRVVVzUTBGQlF5eEpRVUZGTEVWQlFVVXNTVUZCU1N4RFFVRkRPMEZCUVVFc1dVRkJRenRCUVVGRExHTkJRVVVzU1VGQlNTeEhRVUZGTEVOQlFVTTdRVUZCUlN4dFFrRkJUenRCUVVGQkxGVkJRVU03UVVGQlF5eFpRVUZGTEVkQlFVYzdRVUZETlVVc1kwRkJTU3hMUVVGSExFTkJRVU1zVFVGQlN5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1NVRkJSeXhKUVVGSExFbEJRVWNzU1VGQlJ5eEpRVUZITEVsQlFVY3NTVUZCUnl4SlFVRkhMRWxCUVVjc1JVRkJSU3hIUVVGRkxFdEJRVWM3UVVGQlFTeFpRVUZETEVkQlFVVXNVMEZCVXl4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExIRkNRVUZMTzBGQlFVVXNZMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhGUVVGSExFZEJRVWNzVFVGQlNTeEhRVUZGTEUxQlFVa3NRMEZCUXp0QlFVRkZMRzFDUVVGSE8wRkJRVVU3UVVGQlN5eHZRa0ZCVFR0QlFVRkJMRmxCUVVjN1FVRkJRU3haUVVGRkxFZEJRVVVzVTBGQlV5eEhRVUZGTzBGQlFVTXNhVUpCUVVjc1RVRkJTU3hIUVVGRkxFTkJRVU1zUjBGQlJTeEhRVUZGTEVOQlFVTXNTVUZCUnl4UlFVRlBMRXRCUVVVN1FVRkJSU3huUWtGQlJTeEhRVUZITzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hUUVVGVExFZEJRVVU3UVVGQlF5eHhRa0ZCU3p0QlFVRkZMR3RDUVVGRkxGbEJRVmtzUlVGQlF5eExRVUZKTEdsQ1FVRm5RaXhSUVVGUExFVkJRVU1zUTBGQlF5eEpRVUZGTEVkQlFVY3NRMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJRU3haUVVGRkxFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVTdRVUZCUVN4WlFVRkhMRWRCUVVVN1FVRkJRU3haUVVGSExFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVTdRVUZCUVN4WlFVRkhMRWRCUVVVN1FVRkJRU3haUVVGSExFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVTdRVUZCUVN4WlFVRkhMRWRCUVVVN1FVRkJRU3haUVVGSExFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVTdRVUZCUVN4WlFVRkhMRWRCUVVVN1FVRkJRU3haUVVGSExFZEJRVVU3UVVGQlFTeFpRVUZITEVkQlFVVTdRVUZCUVN4WlFVRkhMRWRCUVVVc1RVRkJTVHRCUVVGQkxGbEJRVWNzUjBGQlJTeFRRVUZUTEVkQlFVVXNSMEZCUlR0QlFVRkRMSEZDUVVGTE8wRkJRVVVzYlVKQlFVY3NUVUZCU1N4SlFVRkZMRmRCUVZjc1RVRkJTU3hIUVVGSExFTkJRVU1zU1VGQlJTeEpRVUZGTEZsQlFWa3NSVUZCUXl4alFVRmhMRWRCUVVVc1MwRkJTU3hsUVVGakxFTkJRVU1zUzBGQlJ5eEpRVUZGTEVWQlFVVXNSMEZCUnl4RFFVRkRMRTFCUVVrc1JVRkJSU3haUVVGWkxFVkJRVU1zUzBGQlNTeGxRVUZqTEVOQlFVTTdRVUZCUVN4WlFVRkRPMEZCUVVFc1dVRkRlR2RDTEVkQlFVVXNWMEZCVlR0QlFVRkRMSEZDUVVGTk8wRkJRVUVzV1VGQlJUdEJRVUZCTEZsQlFVVXNSMEZCUlR0QlFVRkJMRmxCUVVjc1IwRkJSU3hUUVVGVExFZEJRVVU3UVVGQlF5eHRRa0ZCUnl4RlFVRkZMRWRCUVVjc1RVRkJTU3hEUVVGRExFVkJRVVVzU1VGQlNUdEJRVUZCTEZsQlFVTTdRVUZCUVN4WlFVRkZMRWRCUVVVc1UwRkJVeXhIUVVGRkxFZEJRVVVzUjBGQlJUdEJRVUZETEd0Q1FVRkZMRWxCUVVVc1dVRkJWU3hKUVVGRkxGVkJRVkVzUTBGQlF5eERRVUZETEV0QlFVY3NUVUZCU1N4TFFVRkhMR0ZCUVZjc1NVRkJSVHRCUVVGSkxIRkNRVUZMTzBGQlFVVXNhMEpCUVVVc1NVRkJTU3hMUVVGTExFMUJRVWtzUTBGQlF6dEJRVUZGTEdkQ1FVRkZMRVZCUVVVc1MwRkJSeXhOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEdOQlFXTTdRVUZCUlN4blFrRkJSU3hGUVVGRkxFbEJRVVVzUzBGQlJ5eE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMR05CUVdNN1FVRkJSU3huUWtGQlJTeEZRVUZGTEVsQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxGbEJRVms3UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEZkQlFWYzdRVUZCUlN4blFrRkJSU3hGUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNTVUZCUlN4RlFVRkZMRmxCUVZrN1FVRkJSU3huUWtGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hGUVVGRkxHVkJRV1VzU1VGQlJUdEJRVUZMTEdkQ1FVRkZMRVZCUVVVc1NVRkJSU3hOUVVGSkxFMUJRVWtzUTBGQlF5eEpRVUZGTEVWQlFVVXNWVUZCVlR0QlFVRkZMRzFDUVVGSExFVkJRVVVzVVVGQlVTeEpRVUZGTEV0QlFVc3NTVUZCU1N4RlFVRkZMR1ZCUVdVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXl4TFFVRkhMRkZCUVUwN1FVRkJSU3huUWtGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSVHRCUVVGQkxGbEJRVU03UVVGQlFTeFpRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZMRWRCUVVVc1IwRkJSVHRCUVVGRExHdENRVUZGTEVsQlEzQm1MRmxCUVZVc1NVRkJSU3hWUVVGUkxFTkJRVU1zUTBGQlF5eExRVUZITEUxQlFVa3NTMEZCUnl4aFFVRlhMRWxCUVVVN1FVRkJTU3h4UWtGQlN6dEJRVUZGTEd0Q1FVRkZMRWxCUVVrc1MwRkJTeXhOUVVGSkxFTkJRVU03UVVGQlJTeG5Ra0ZCUlN4RlFVRkZMRXRCUVVjc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFhRVUZYTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFdEJRVWNzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4WFFVRlhPMEZCUVVVc1owSkJRVVVzUlVGQlJTeEpRVUZGTEV0QlFVY3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hUUVVGVE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFJRVUZSTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4VFFVRlRPMEZCUVVVc1owSkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3haUVVGWkxFbEJRVVU3UVVGQlN5eG5Ra0ZCUlN4RlFVRkZMRWxCUVVVc1RVRkJTU3hOUVVGSkxFTkJRVU1zU1VGQlJTeEZRVUZGTEU5QlFVODdRVUZCUlN4dFFrRkJSeXhGUVVGRkxFVkJRVVVzV1VGQldTeERRVUZETEVsQlFVVXNTMEZCUnl4SlFVRkpMRVZCUVVVc1UwRkJVeXhEUVVGRExFbEJRVVVzUlVGQlJTeFJRVUZSTEVsQlFVVXNTVUZCUlR0QlFVRkZMR2RDUVVGRkxFVkJRVVVzU1VGQlJTeE5RVUZKTEUxQlFVa3NRMEZCUXl4SlFVRkZPMEZCUVVVc1owSkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hMUVVGSExFVkJRVVVzYTBKQlFXdENPMEZCUVVjc2EwSkJRVWNzU1VGQlNTeExRVUZMTEVWQlFVVXNXVUZCV1N4SFFVRkZMRWRCUVVVc1EwRkJReXhGUVVGSExHdENRVUZyUWp0QlFVRkZMR3RDUVVGSkxFbEJRVWNzU1VGQlNTeExRVUZMTEVWQlFVVXNXVUZCV1N4SFFVRkZMRWRCUVVVc1EwRkJReXhGUVVGSExHdENRVUZyUWp0QlFVTjZaMElzYlVKQlFVY3NTMEZCUnl4TFFVRkhMRVZCUVVVc2EwSkJRV3RDTEV0QlFVY3NTMEZCU3l4SlFVRkpMRWRCUVVVc1EwRkJReXhMUVVGSE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVU3UVVGQlFTeFpRVUZETzBGQlFVRXNXVUZCUlN4SFFVRkZMRk5CUVZNc1IwRkJSVHRCUVVGRExIRkNRVUZMTzBGQlFVVXNhMEpCUVVrc1NVRkJSU3hKUVVGSkxFdEJRVXNzUlVGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1NVRkJSU3hOUVVGTExFVkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWRCUVVVc1JVRkJSU3hGUVVGRkxFbEJRVVVzVFVGQlNTeE5RVUZKTEVOQlFVTXNSMEZCUlN4RlFVRkZMRVZCUVVVc1NVRkJSU3hMUVVGSExFMUJRVWtzUTBGQlF5eEhRVUZGTEVWQlFVVXNSVUZCUlN4SlFVRkZMRXRCUVVjc1RVRkJTU3hEUVVGRExFZEJRVVVzUlVGQlJTeEZRVUZGTEV0QlFVY3NUVUZCU1N4RFFVRkRMRWRCUVVVc1EwRkJReXhIUVVGRkxFbEJRVVVzUlVGQlJTeEZRVUZGTEVsQlFVVXNUVUZCU1N4TlFVRkpMRU5CUVVNc1IwRkJSU3hKUVVGRkxFVkJRVVVzYTBKQlFXdENMRWRCUVVVc1NVRkJSeXhKUVVGSkxFdEJRVXNzUlVGQlJTeFpRVUZaTEVkQlFVVXNSMEZCUlN4RFFVRkRMRVZCUVVjc2EwSkJRV3RDTEVkQlFVVXNTVUZCUnl4SlFVRkpMRXRCUVVzc1JVRkJSU3haUVVGWkxFZEJRVVVzUjBGQlJTeERRVUZETEVWQlFVY3NhMEpCUVd0Q0xFZEJRVVVzU1VGQlJTeExRVUZMTEVsQlFVa3NSMEZCUlN4RFFVRkRPMEZCUVVVc2EwSkJRVVVzU1VGQlJTeEZRVUZGTEVWQlFVVXNTVUZCUlN4TlFVRkpMRTFCUVVrc1EwRkJReXhKUVVGRkxFOUJRVThzUzBGQlJ5eExRVUZITEV0QlFVY3NRMEZCUXl4SlFVRkZMRWxCUVVVc1RVRkJTU3hMUVVGSExFOUJRVXNzU1VGQlJTeExRVUZMTEVsQlFVa3NSMEZCUlN4RFFVRkRMRWRCUVVVc1JVRkJSU3hSUVVGUkxFVkJRVVVzVVVGQlVTeEpRVUZGTEZGQlFVMHNTVUZCUlN4SlFVRkZMRWxCUVVVc1MwRkJSeXhGUVVGRk8wRkJRVWNzWjBKQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkRibVlzUTBGQlF5eEpRVUZGTEVWQlFVVXNUMEZCVHp0QlFVRkZMRzFDUVVGSExFVkJRVVVzUlVGQlJTeFpRVUZaTEVOQlFVTXNTVUZCUlN4TFFVRkhMRWxCUVVrc1JVRkJSU3hUUVVGVExFTkJRVU1zU1VGQlJTeEZRVUZGTEZGQlFWRXNTVUZCUlN4SlFVRkZPMEZCUVVVc1owSkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVN1FVRkJSU3huUWtGQlJTeEZRVUZGTEV0QlFVY3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hYUVVGWE8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4SlFVRkZMRXRCUVVjc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFhRVUZYTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFdEJRVWNzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4VFFVRlRPMEZCUVVVc1owSkJRVVVzUlVGQlJTeEpRVUZGTEUxQlFVa3NUVUZCU1N4RFFVRkRMRWxCUVVVc1JVRkJSU3hSUVVGUk8wRkJRVVVzWjBKQlFVVXNSVUZCUlN4SlFVRkZMRTFCUVVrc1RVRkJTU3hEUVVGRExFbEJRVVVzUlVGQlJTeFRRVUZUTzBGQlFVVXNaMEpCUVVVc1JVRkJSU3hKUVVGRkxFMUJRVWtzVFVGQlNTeERRVUZETEVsQlFVVXNSVUZCUlN4UlFVRlJPMEZCUVVVc2EwSkJRVVVzUlVGQlJTeFJRVUZSTEVsQlFVVTdRVUZCU1N4eFFrRkJUeXhKUVVGSkxFbEJRVVVzUjBGQlJTeExRVUZITEVOQlFVTXNTMEZCU3l4SlFVRkpMRU5CUVVNc1NVRkJSU3hKUVVGRkxFbEJRVVVzUTBGQlF5eExRVUZMTEUxQlFVMHNTVUZCUlN4VlFVRlZMRTFCUVVrc1NVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEUxQlFVMHNTVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJReXhOUVVGSkxFMUJRVWtzVlVGQlZTeE5RVUZKTEVsQlFVVXNSVUZCUlN4SFFVRkZMRTFCUVVrN1FVRkJRU3haUVVGRE8wRkJRVUVzV1VGQlJTeEhRVUZGTzBGQlFVRXNXVUZCUnl4SFFVRkZPMEZCUVVFc1dVRkJSeXhIUVVGRkxGTkJRVk1zUjBGQlJTeEhRVUZGTEVkQlFVVTdRVUZCUXl4MVFrRkJVeXhGUVVGRkxFZEJRVVU3UVVGQlF5eDNRa0ZCVHl4SlFVRkZMRVZCUVVVc1lVRkJZU3hGUVVGRkxFMUJRVTBzYlVKQlFXMUNMRXRCUTNCbUxFVkJRVVVzUTBGQlF5eEpRVUZGTzBGQlFVRXNZMEZCU3p0QlFVRkRMSEZDUVVGTE8wRkJRVVVzY1VKQlFVczdRVUZCUlN4eFFrRkJTenRCUVVGRkxHdENRVUZKTEV0QlFVY3NiMEpCUVVrc1VVRkJUU3haUVVGWkxFZEJRVVVzU1VGQlJTeEpRVUZKTEV0QlFVc3NSMEZCUlN4SFFVRkZMRU5CUVVNc1IwRkJSU3hKUVVGRkxFbEJRVWtzUzBGQlN5eEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMR3RDUVVGRkxFVkJRVVVzYTBKQlFXdENPMEZCUVVVc2EwSkJRVWtzU1VGQlJTeEZRVUZGTEd0Q1FVRnJRaXhIUVVGRkxFbEJRVVVzUzBGQlN5eEpRVUZKTEVkQlFVVXNRMEZCUXp0QlFVRkZMR2RDUVVGRkxFVkJRVVVzUzBGQlJ5eE5RVUZKTEVOQlFVTXNTVUZCUlN4TFFVRkhPMEZCUVVVc1owSkJRVVVzUlVGQlJTeExRVUZITEUxQlFVa3NRMEZCUXl4SlFVRkZMRTlCUVU4c1MwRkJSeXhEUVVGRE8wRkJRVVVzYTBKQlFVVXNSVUZCUlN4RFFVRkRPMEZCUVVVc2EwSkJRVVVzUlVGQlJTeERRVUZETzBGQlFVVXNhMEpCUVVVc1IwRkJSeXhEUVVGRE8wRkJRVVVzYTBKQlFVVXNSMEZCUnl4RFFVRkRPMEZCUVVVc2EwSkJRVVVzUzBGQlJ5eEZRVUZGTEVWQlFVVXNTMEZCUnl4TlFVRkpMRU5CUVVNc1NVRkJSU3hIUVVGRkxFVkJRVVVzUlVGQlJTeEpRVUZGTEV0QlFVY3NUVUZCU1N4RFFVRkRMRWxCUVVVc1RVRkJTU3hGUVVGRkxFVkJRVVVzUzBGQlJ5eE5RVUZKTEVOQlFVTXNTVUZCUlN4SFFVRkZMRVZCUVVVc1JVRkJSU3hKUVVGRkxFdEJRVWNzVFVGQlNTeERRVUZETEVsQlFVVTdRVUZCUVN4WlFVRkZPMEZCUVVFc1dVRkJSU3hIUVVGRkxFMUJRVWs3UVVGQlF5eG5Ra0ZCUlN4RlFVRkZPMEZCUVVFc1dVRkJRenRCUVVGQkxGbEJRVVVzUjBGQlJTeFhRVUZWTzBGQlFVRXNXVUZCUXp0QlFVRkJMRmxCUVVVc1IwRkJSU3hYUVVGVk8wRkJRVU1zY1VKQlFVOHNTMEZCU3l4SlFVRkpPMEZCUVVFc1dVRkJRenRCUVVGQkxGbEJRVVVzUjBGQlJTeE5RVUZKTzBGQlFVTXNiMEpCUVVrN1FVRkJSU3h2UWtGQlN6dEJRVUZCTEZsQlFWTTdRVUZCUVN4WlFVRkZMRWRCUVVVc1YwRkJWVHRCUVVGRExIRkNRVUZQTzBGQlFVRXNXVUZCVlR0QlFVRkJMRmxCUVVVc1IwRkJSU3hOUVVGSkxGbEJRVmtzWVVGQlZ5eFpRVUZaTEVsQlFVazdRVUZCUVN4WlFVRkZMRWRCUVVVc1YwRkJWVHRCUVVGRExIRkNRVUZQTEVsQlF6ZG1MSE5EUVVGakxFdEJRVXNzUlVGQlJTeFRRVUZQTEZWQlFWVTdRVUZCUVN4WlFVRnRRanRCUVVGQkxGbEJRVVVzUjBGQlJTeFRRVUZUTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXhuUWtGQlJTeExRVUZITEUxQlFVazdRVUZCUlN4cFFrRkJSeXhUUVVGUE8wRkJRVVVzYTBKQlFVVXNUVUZCU1N4TFFVRkhPMEZCUVVVc2JVSkJRVWtzU1VGQlJTeEhRVUZGTEVsQlFVVXNSMEZCUlR0QlFVRkpMRzFDUVVGSExFTkJRVU1zU1VGQlJTeEhRVUZITEVWQlFVVXNTVUZCUlN4TlFVRkpMRU5CUVVNN1FVRkJSU3h4UWtGQlR5eEhRVUZITEVOQlFVTXNSVUZCUlN4TlFVRk5MRTFCUVVzc1JVRkJSVHRCUVVGQkxGbEJRVU03UVVGQlFTeFpRVUZGTEVkQlFVVXNVMEZCVXl4SFFVRkZPMEZCUVVNc2NVSkJRVXM3UVVGQlJTeHJRa0ZCU1N4SlFVRkZMRVZCUVVVc1JVRkJSVHRCUVVGUExHdENRVUZITEV0QlFVY3NTMEZCUnl4aFFVRlhPMEZCUVVVc2RVSkJRVTA3UVVGQlJ5eDFRa0ZCVVN4SlFVRkZMRWRCUVVVc1MwRkJSeXhIUVVGRkxFdEJRVWNzUjBGQlJUdEJRVUZETEc5Q1FVRkpMRWxCUVVVc1MwRkJSeXhKUVVGRkxFMUJRVWM3UVVGQlJ5eHZRa0ZCUlN4TFFVRkxMRWxCUVVrc1IwRkJSU3hKUVVGRkxGTkJRVk03UVVGQlJTeHZRa0ZCU1N4SlFVRkZPMEZCUVVzc2IwSkJRVVVzUzBGQlN5eEpRVUZKTEVkQlFVVXNRMEZCUXp0QlFVRkZMRzFDUVVGRk8wRkJRVU1zYzBKQlFVVXNSVUZCUlN4SlFVRkpMRXRCUVVzc1IwRkJSU3haUVVGWExFdEJRVWNzVVVGQlRTeEpRVUZGTEZOQlFVOHNTMEZCU3l4SlFVRkZMRVZCUVVVc1QwRkJUeXhoUVVGWExGVkJRVkU3UVVGQlJ5eHpRa0ZCUnp0QlFVRkRMSE5DUVVGRkxFdEJRVXNzUTBGQlF6dEJRVUZGTEhOQ1FVRkZPMEZCUVVVc2QwSkJRVWtzU1VGQlJUdEJRVUZGTERCQ1FVRk5PMEZCUVVFc2EwSkJRVU1zVTBGQlR5eEhRVUZGTzBGQlFVRXNhMEpCUVVNN1FVRkJReXh6UWtGQlJUdEJRVUZCTEdkQ1FVRk5PMEZCUVVNc2IwSkJRVWM3UVVGQlJTeDVRa0ZCVFR0QlFVRkJMR05CUVVVN1FVRkJReXh4UWtGQlRUdEJRVUZCTEZsQlFVVTdRVUZCUVN4WlFVTndaaXhIUVVGRk8wRkJRVUVzV1VGQlJ5eEhRVUZGTzBGQlFVRXNXVUZCUnl4SFFVRkZPMEZCUVVFc1dVRkJSeXhIUVVGRk8wRkJRVUVzV1VGQlJ5eEhRVUZGTzBGQlFVRXNXVUZCUnl4SFFVRkZPMEZCUVVFc1dVRkJSeXhIUVVGRk8wRkJRVUVzV1VGQlJ5eEhRVUZGTEV0QlFVY3NSVUZCUlR0QlFVRkJMRmxCUVZjc1IwRkJSVHRCUVVGQkxGbEJRVWNzUjBGQlJTeFRRVUZUTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVN1FVRkJReXh4UWtGQlR5eEhRVUZITEUxQlFVa3NSMEZCUlN4TlFVRkpMRWRCUVVVc1RVRkJTU3hIUVVGRkxFMUJRVWtzUTBGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUVN4WlFVRkZMRWRCUVVVc1UwRkJVeXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNiMEpCUVUwc1NVRkJSU3hGUVVGRk8wRkJRVThzYTBKQlFVVXNTVUZCU1N4WFFVRlhMRVZCUVVVc1JVRkJSU3hOUVVGTkxFbEJRVVVzUjBGQlJTeEpRVUZGTEVOQlFVTXNRMEZCUXp0QlFVRkZMR3RDUVVGSE8wRkJRVU1zYjBKQlFVa3NTVUZCUlN4SlFVRkpMRmxCUVZrc1QwRkJUeXhEUVVGRExFZEJRVVVzU1VGQlJTeEpRVUZKTEZsQlFWa3NVMEZCVXl4SFFVRkZMRVZCUVVNc1MwRkJTU3hGUVVGRExGRkJRVThzUlVGQlF5eEZRVUZETEVOQlFVTXNSMEZCUlR0QlFVRkZMSEZDUVVGSkxFdEJRVXNzUlVGQlJUdEJRVUZSTEhGQ1FVRkhMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU03UVVGQlJTeDFRa0ZCVHl4SlFVRkZMRVZCUVVVc1UwRkJUeXhKUVVGRk8wRkJRVUVzWTBGQlF5eFRRVUZQTEVkQlFVVTdRVUZCUXl4MVFrRkJUeXhSUVVGUkxFbEJRVWtzUTBGQlF5eEhRVUZGTzBGQlFVRXNZMEZCUXp0QlFVRkJMRmxCUVVNN1FVRkJRU3hWUVVGRE8wRkJRemRYTEZkQlFVTXNWMEZCVlR0QlFVRkRMSEZDUVVGVExFVkJRVVVzUjBGQlJTeEhRVUZGTzBGQlFVTXNhMEpCUVVVc1JVRkJSVHRCUVVGUkxHdENRVUZGTEVsQlFVVXNSMEZCUnl4RFFVRkRPMEZCUVVVc1owSkJRVVVzUjBGQlJ5eExRVUZMTEVWQlFVVXNSVUZCUlR0QlFVRkZMR3RDUVVGRkxFVkJRVVU3UVVGQlJ5eHBRa0ZCUnl4UlFVRlJMRVZCUVVVc1EwRkJRenRCUVVGRkxHMUNRVUZITzBGQlFVVXNhVUpCUVVjN1FVRkJSU3h4UWtGQlR6dEJRVUZCTEZsQlFVTTdRVUZCUXl4blFrRkJTU3hKUVVGRkxFVkJRVU1zUjBGQlJTeEhRVUZGTzBGQlFVVXNaVUZCUnp0QlFVRkZMR2RDUVVGSExFVkJRVVU3UVVGQlowSXNhMEpCUVVjN1FVRkJReXgxUWtGQlR5eEZRVUZGTEdkQ1FVRm5RaXhIUVVGRkxFTkJRVU03UVVGQlFTeGpRVUZETEZOQlFVOHNSMEZCUlR0QlFVRkRMR3RDUVVGRkxIZEVRVUZ6UkN4RFFVRkRMRWRCUVVVc1JVRkJSU3hEUVVGRE8wRkJRVUVzWTBGQlF6dEJRVUZETEdWQlFVY3NSMEZCUlN4VFFVRlRMRWRCUVVVN1FVRkJReXhuUWtGQlJTeEZRVUZGTEZWQlFWTXNSVUZCUlN4TlFVRk5PMEZCUVVFc1dVRkJReXhEUVVGRExFVkJRVVVzVFVGQlRTeERRVUZETzBGQlFVVXNiVUpCUVUwc1EwRkJRenRCUVVGQkxGVkJRVU1zUjBGQlJ6dEJRVUZGTEZsQlFVVXNWMEZCVXl4RFFVRkRMRWRCUVVVc1QwRkJTeXhGUVVGRkxGZEJRVk1zUlVGQlJTeEhRVUZITEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc2JVSkJRV2xDTEVOQlFVTXNSMEZCUlN4UFFVRkxMRVZCUVVVc2JVSkJRV2xDTEVWQlFVVXNSMEZCUnl4SFFVRkZMRU5CUVVNN1FVRkROVm9zV1VGQlJTd3lRa0ZCZVVJc1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzTWtKQlFYbENMRVZCUVVVc1IwRkJSeXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTdzRRa0ZCTkVJc1EwRkJReXhIUVVGRkxFOUJRVXNzUlVGQlJTdzRRa0ZCTkVJc1JVRkJSU3hIUVVGSExFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNLMEpCUVRaQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN3clFrRkJOa0lzUlVGQlJTeEhRVUZITEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3cwUWtGQk1FSXNRMEZCUXl4SFFVRkZMRWRCUVVVc1QwRkJTeXhGUVVGRkxEUkNRVUV3UWl4RlFVRkZMRWxCUVVrc1IwRkJSU3hIUVVGRkxFTkJRVU03UVVGQlJTeFpRVUZGTERSQ1FVRXdRaXhSUVVGSkxFVkJRVVVzTkVKQlFUQkNMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHZRa0ZCYTBJc1EwRkJReXhIUVVGRkxFZEJRVVVzVDBGQlN5eEZRVUZGTEc5Q1FVRnJRaXhGUVVGRkxFbEJRVWtzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZETTJRc1dVRkJSU3h4UWtGQmJVSXNVVUZCU1N4RlFVRkZMSEZDUVVGdFFpeEZRVUZGTEVsQlFVa3NRMEZCUXp0QlFVRkZMRmxCUVVVc01FSkJRWGRDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRTlCUVVzc1JVRkJSU3d3UWtGQmQwSXNSVUZCUlN4SlFVRkpMRWRCUVVVc1IwRkJSU3hEUVVGRE8wRkJRVVVzV1VGQlJTeHRRa0ZCYVVJc1EwRkJReXhIUVVGRkxFOUJRVXNzUlVGQlJTeHRRa0ZCYVVJc1JVRkJSU3hKUVVGSkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNiMEpCUVd0Q0xFTkJRVU1zUjBGQlJTeFBRVUZMTEVWQlFVVXNiMEpCUVd0Q0xFVkJRVVVzU1VGQlNTeEhRVUZGTEVOQlFVTTdRVUZCUlN4WlFVRkZMRmRCUVZNc1VVRkJTU3hGUVVGRkxGZEJRVk1zUlVGQlJTeEpRVUZKTEVOQlFVTTdRVUZCUlN4WlFVRkZMRzFDUVVGcFFpeERRVUZETEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzYlVKQlFXbENMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc2IwSkJRV3RDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hQUVVGTExFVkJRVVVzYjBKQlFXdENMRVZCUVVVc1NVRkJTU3hIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUlN4WlFVRkZMRzlDUVVGclFpeFJRVUZKTEVWQlFVVXNiMEpCUVd0Q0xFVkJRVVVzU1VGQlNTeERRVUZETzBGQlF6VmtMRmxCUVVVc2RVSkJRWEZDTEVOQlFVTXNSMEZCUlN4SFFVRkZMRWRCUVVVc1QwRkJTeXhGUVVGRkxIVkNRVUZ4UWl4RlFVRkZMRWxCUVVrc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNkMEpCUVhOQ0xFTkJRVU1zUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4M1FrRkJjMElzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3gzUWtGQmMwSXNVVUZCU1N4RlFVRkZMSGRDUVVGelFpeEZRVUZGTEVsQlFVa3NRMEZCUXp0QlFVRkZMRmxCUVVVc2IwSkJRV3RDTEZGQlFVa3NSVUZCUlN4dlFrRkJhMElzUlVGQlJTeEpRVUZKTEVOQlFVTTdRVUZCUlN4WlFVRkZMR2RDUVVGakxFTkJRVU1zUjBGQlJTeEhRVUZGTEU5QlFVc3NSVUZCUlN4blFrRkJZeXhGUVVGRkxFbEJRVWtzUjBGQlJTeEhRVUZGTEVOQlFVTTdRVUZCUlN4WlFVRkZMR2xDUVVGbExFTkJRVU1zUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4RlFVRkZMR2xDUVVGbExFVkJRVVVzU1VGQlNTeEhRVUZGTEVkQlFVVXNSMEZCUlN4RFFVRkRPMEZCUVVVc1dVRkJSU3gzUWtGQmMwSXNVVUZCU1N4RlFVRkZMSGRDUVVGelFpeEZRVUZGTEVsQlFVa3NRMEZCUXp0QlFVRkZMRmxCUVVVc2NVSkJRVzFDTEZGQlFVa3NSVUZCUlN4eFFrRkJiVUlzUlVGQlJTeEpRVUZKTEVOQlFVTTdRVUZEZUdVc1dVRkJSU3h4UWtGQmJVSXNRMEZCUXl4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFOUJRVXNzUlVGQlJTeHhRa0ZCYlVJc1JVRkJSU3hKUVVGSkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNRMEZCUXp0QlFVRkZMRmxCUVVVc1ZVRkJVU3hEUVVGRExFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1QwRkJTeXhGUVVGRkxGVkJRVkVzUlVGQlJTeEpRVUZKTEVkQlFVVXNSMEZCUlN4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVUZGTEZsQlFVVXNiVUpCUVdsQ0xGRkJRVWtzUlVGQlJTeHRRa0ZCYVVJc1JVRkJSU3hKUVVGSkxFTkJRVU03UVVGQlJTeGpRVUZKTEV0QlFVY3NSVUZCUlN4blFrRkJZeXhQUVVGTExFdEJRVWNzUlVGQlJTeG5Ra0ZCWXl4RlFVRkZMRWxCUVVrc1IwRkJSU3hMUVVGSExFVkJRVVVzVlVGQlVTeFJRVUZKTEV0QlFVY3NSVUZCUlN4VlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRVVVzV1VGQlJTeFJRVUZOTEZGQlFVa3NSVUZCUlN4UlFVRk5MRVZCUVVVc1NVRkJTU3hEUVVGRE8wRkJRVVVzV1VGQlJTeDNRa0ZCYzBJc1QwRkJTeXhGUVVGRkxIZENRVUZ6UWl4RlFVRkZMRWxCUVVrN1FVRkJSU3hqUVVGSkxFdEJRVWNzUlVGQlJTd3lRa0ZCZVVJc1EwRkJReXhIUVVGRkxFZEJRVVVzUjBGQlJTeEhRVUZGTEVkQlFVVXNUMEZCU3l4TFFVRkhMRVZCUVVVc01rSkJRWGxDTEVWQlFVVXNTVUZCU1N4SFFVRkZMRWRCUVVVc1IwRkJSU3hIUVVGRkxFZEJRVVVzUTBGQlF6dEJRVU53WkN4WlFVRkZMRGhDUVVFMFFpeFBRVUZMTEVWQlFVVXNPRUpCUVRSQ0xFVkJRVVVzU1VGQlNUdEJRVUZGTEdOQlFVa3NTMEZCUnl4RFFVRkRMRWRCUVVVc1IwRkJSU3hIUVVGRkxFOUJRVXNzUzBGQlJ5eEZRVUZGTEVsQlFVa3NSMEZCUlN4SFFVRkZMRWRCUVVVc1EwRkJReXhIUVVGRkxFdEJRVWNzVVVGQlNTeExRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRMRWRCUVVVc1MwRkJSeXhGUVVGRkxESkNRVUY1UWl4UlFVRkpMRXRCUVVjc1JVRkJSU3d5UWtGQmVVSXNSVUZCUlN4SlFVRkpMRU5CUVVNc1IwRkJSU3hMUVVGSExFVkJRVVVzTmtKQlFUSkNMRTlCUVVzc1MwRkJSeXhGUVVGRkxEWkNRVUV5UWl4RlFVRkZMRWxCUVVrc1IwRkJSU3hMUVVGSExGRkJRVWtzUzBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4SFFVRkZMRXRCUVVjc1EwRkJReXhIUVVGRkxFOUJRVXNzUzBGQlJ5eEZRVUZGTEVsQlFVa3NSMEZCUlN4RFFVRkRMRWRCUVVVc1MwRkJSeXhQUVVGTExFdEJRVWNzUlVGQlJTeEpRVUZKTEVkQlFVVXNTMEZCUnl4UlFVRkpMRXRCUVVjc1JVRkJSU3hKUVVGSkxFTkJRVU1zUjBGQlJTeExRVUZITEZGQlFVa3NTMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJRenRCUVVGRkxGbEJRVVVzYVVKQlFXVTdRVUZCVHl4WlFVRkZMR2RDUVVGak8wRkJRM0JoTEcxQ1FVRlRMRWRCUVVjc1IwRkJSVHRCUVVGRExHZENRVUZGTEU5QlFVOHNUMEZCVHl4RFFVRkRMRWRCUVVVc1EwRkJRenRCUVVGRkxHZENRVUZKTEVsQlFVVXNUMEZCUnl4TlFVRkpMRVZCUVVVc1RVRkJTU3hIUVVGRkxFbEJRVVVzVDBGQlJ5eFBRVUZITEVWQlFVVXNRMEZCUXl4TlFVRkpPMEZCUVVVc1kwRkJSU3h0UWtGQmFVSXNSVUZCUlN4RlFVRkZMR2RDUVVGblFqdEJRVUZGTEdOQlFVVXNaVUZCWVN4RlFVRkZMRVZCUVVVc1dVRkJXVHRCUVVGRkxHTkJRVVVzVTBGQlR5eEZRVUZGTEVWQlFVVXNUVUZCVFR0QlFVRkZMR05CUVVVc1dVRkJWU3hGUVVGRkxFVkJRVVVzVTBGQlV6dEJRVUZGTEdOQlFVVXNZVUZCVnl4RlFVRkZMRVZCUVVVc1ZVRkJWVHRCUVVGRkxHMUNRVUZQTzBGQlFVRXNWVUZCUXp0QlFVRkRMRmxCUVVVc2JVSkJRV2xDTzBGQlFVVXNXVUZCUlN4aFFVRlhPMEZCUVVVc1dVRkJSU3hoUVVGWE8wRkJRVWNzV1VGQlJTeFpRVUZWTzBGQlFVY3NXVUZCUlN4bFFVRmhPMEZCUVVjc1dVRkJSU3hqUVVGWk8wRkJRVWNzV1VGQlJTeGxRVUZoTzBGQlFVY3NXVUZCUlN4bFFVRmhPMEZCUVVjc1dVRkJSU3hyUWtGQlowSTdRVUZCUnl4WlFVRkZMR0ZCUVZjN1FVRkJSeXhaUVVGRkxGVkJRVkU3UVVGQlJTeGpRVUZKTzBGQlFVY3NZMEZCUlN4VFFVRlRMRXRCUVVrN1FVRkJReXhyUWtGQlNTeEhRVUZITzBGQlFVVXNiVUpCUVVzc1NVRkJSVHRCUVVGQkxGVkJRVWM3UVVGRGFHUXNiVUpCUVZNc1MwRkJTVHRCUVVGRExIRkNRVUZUTEVsQlFVYzdRVUZCUXl4clFrRkJSeXhEUVVGRExFOUJRVXNzUzBGQlJ5eE5RVUZITEVWQlFVVXNXVUZCVlN4TlFVRkhMRU5CUVVNc1NVRkJSenRCUVVGRExIRkNRVUZITEVkQlFVY3NSVUZCUlR0QlFVRkZMRzFDUVVGSExFTkJRVU03UVVGQlJTeHZRa0ZCUnl4RlFVRkZPMEZCUVhGQ0xHOUNRVUZGTEhGQ1FVRnhRanRCUVVGRkxHOUNRVUZITEVOQlFVTXNSMEZCUlR0QlFVRkRMSE5DUVVGSExFVkJRVVU3UVVGQlVTeDVRa0ZCU1N4alFVRlpMRTlCUVU4c1JVRkJSU3haUVVGVkxFVkJRVVVzVlVGQlVTeERRVUZETEVWQlFVVXNUMEZCVHl4SlFVRkhMRVZCUVVVc1VVRkJVU3hWUVVGUk8wRkJRVU1zTUVKQlFVa3NTVUZCUlN4RlFVRkZMRkZCUVZFc1RVRkJUVHRCUVVGRkxIbENRVUZITEZGQlFWRXNRMEZCUXp0QlFVRkJMRzlDUVVGRE8wRkJRVU1zY1VKQlFVY3NSVUZCUlR0QlFVRkJMR2RDUVVGRE8wRkJRVUVzWTBGQlF6dEJRVUZCTEZsQlFVTTdRVUZCUXl4blFrRkJSeXhGUVVGRkxFbEJRVVU3UVVGQlJ5eHJRa0ZCUnp0QlFVRkZMRzFDUVVGSExFTkJRVU1zUjBGQlJTeExRVUZITEVkQlFVY3NSVUZCUlN4SFFVRkZMRmxCUVZrc1EwRkJRenRCUVVGQkxHMUNRVUZOTzBGQlFVTXNiMEpCUVVjc1JVRkJSVHRCUVVGUExIVkNRVUZKTEdOQlFWa3NUMEZCVHl4RlFVRkZMRmRCUVZNc1JVRkJSU3hUUVVGUExFTkJRVU1zUlVGQlJTeE5RVUZOTEVsQlFVY3NSVUZCUlN4UFFVRlBPMEZCUVZFc2RVSkJRVWNzVVVGQlVTeEZRVUZGTEU5QlFVOHNUVUZCVFN4RFFVRkRPMEZCUVVVc2JVSkJRVWNzUlVGQlJUdEJRVUZGTEc5Q1FVRkZMRTFCUVVrc1JVRkJSU3hoUVVGWExFVkJRVVVzVlVGQlZTeFpRVUZaTEVkQlFVVXNWMEZCVnl4WFFVRlZPMEZCUVVNN1FVRkJRU3h2UWtGQlZ5eFhRVUZWTzBGQlFVTXNkMEpCUVVVc1ZVRkJWU3hGUVVGRk8wRkJRVUVzYjBKQlFVTTdRVUZCUVN4dlFrRkRjR2xDTzBGQlFVRXNhMEpCUVVNN1FVRkJSU3h2UWtGQlJUdEJRVUZCTEdkQ1FVRkRMRWRCUVVVc1EwRkJReXhMUVVGSExFVkJRVVU3UVVGQlFTeGpRVUZGTzBGQlFVRXNWVUZCUXp0QlFVRkRMR05CUVVjc1JVRkJSVHRCUVVGUkxHbENRVUZKTEdOQlFWa3NUMEZCVHl4RlFVRkZMRmxCUVZVc1JVRkJSU3hWUVVGUkxFTkJRVU1zUlVGQlJTeFBRVUZQTEVsQlFVY3NTVUZCUlN4RlFVRkZMRkZCUVZFN1FVRkJVU3huUWtGQlJTeFJRVUZSTEVsQlFVa3NSVUZCUlR0QlFVRkZMR0ZCUVVjN1FVRkhhRWtzYVVKQlFVOHNWVUZCVlR0QlFVRkJMRkZCUTI1Q08wRkJRVUVzVFVGSFFTeEhRVUZITzBGQlEwZ3NWVUZCU1N4UFFVRlBMRmxCUVZrc1dVRkJXU3hQUVVGUExGZEJRVmM3UVVGRGJrUXNaVUZCVHl4VlFVRlZPMEZCUVVFc1pVRkRWaXhQUVVGUExGZEJRVmNzWTBGQll5eFBRVUZQTEV0QlFVczdRVUZEYmtRc1pVRkJUeXhEUVVGRExFZEJRVWNzVFVGQlRTeGxRVUZsTzBGQlFVRTdRVUZCUVRzN08wRkRNMFZzUXp0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96czdRVU5CVHl4TlFVRk5MRTlCUVU4N096dEJRMVZ3UWl4TlFVRkpPMEZCUlVvc1RVRkJTU3hQUVVFNFFqdEJRVU5vUXl4eFFrRkJhVUk3UVVGQlFTeEZRVU51UWl4UFFVRlBPMEZCUTB3c2NVSkJRMGtzVDBGQk5FSXNjVUpCUVcxRE8wRkJRVUVzUlVGRGNrVTdRVUZGUVN4TlFVRk5MSGxDUVVGcFJTeFBRVU5zUlN4UFFVRTBRaXc0UWtGRFFTeFBRVU0zUWp0QlFVZEtMRTFCUVVrN1FVRkRTaXhOUVVGSkxHTkJRV003UVVGRGJFSXNUVUZCU1N4bFFVRmxPMEZCUTI1Q0xFMUJRVWtzVlVGQlZUdEJRVVZrTEUxQlFVMHNlVUpCUVhsQ0xFMUJRV1U3UVVGRE5VTXNVVUZCU1R0QlFVVkdMRlZCUVVrc1QwRkJUeXh6UWtGQmMwSXNZVUZCWVR0QlFVTTFReXhsUVVGUE8wRkJRVUVzVFVGRFZEdEJRVWxCTEZWQlFVa3NUMEZCVHl4dFFrRkJiVUlzWVVGQllUdEJRVU42UXl4WlFVRkpMR1ZCUVdVc1JVRkJSU3hOUVVGTkxGbEJRVmtzU1VGQlNTeHJRa0ZCYTBJc1EwRkJReXhEUVVGRE8wRkJRVUVzVFVGRGFrVTdRVUZKUVN4aFFVRlBMRmxCUVZrc1UwRkJVeXhKUVVGSkxGZEJRVmM3UVVGQlFTeFJRVU42UXp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSk8wRkJRVUVzVVVGQlN6dEJRVUZCTEZGQlFVczdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJTVHRCUVVGQkxGRkJRVWs3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSk8wRkJRVUVzVVVGQlNUdEJRVUZCTEZGQlFVczdRVUZCUVN4UlFVRkpPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZKTzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUTI1Rk8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkxPMEZCUVVFc1VVRkJTenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZKTzBGQlFVRXNVVUZCU1R0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkpPMEZCUVVFc1VVRkJTenRCUVVGQkxGRkJRVWs3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVrN1FVRkJRU3hOUVVOc1JTeERRVUZETEVOQlFVTTdRVUZCUVN4SlFVTktMRk5CUVZNc1IwRkJSenRCUVVOV0xHRkJRVTg3UVVGQlFTeEpRVU5VTzBGQlFVRXNSVUZEUmp0QlFVVkJMRTFCUVUwc2EwSkJRV3RDTEUxQlFXVTdRVUZEY2tNc1VVRkJTVHRCUVdWR0xHRkJRVThzV1VGQldTeFRRVUZUTEVsQlFVa3NWMEZCVnp0QlFVRkJMRkZCUTNwRE8wRkJRVUVzVVVGQlN6dEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkxPMEZCUVVFc1VVRkJTenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVYzdRVUZCUVN4UlFVRkpPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlNUdEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkxPMEZCUVVFc1VVRkJTenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZKTzBGQlFVRXNVVUZEZGtZN1FVRkJRU3hSUVVGTE8wRkJRVUVzVVVGQlNUdEJRVUZCTEZGQlFVczdRVUZCUVN4UlFVRkxPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSE8wRkJRVUVzVVVGQlJ6dEJRVUZCTEZGQlFVazdRVUZCUVN4UlFVRkhPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCUnp0QlFVRkJMRkZCUVVjN1FVRkJRU3hSUVVGSk8wRkJRVUVzVVVGQlNUdEJRVUZCTEZGQlFVczdRVUZCUVN4UlFVRkxPMEZCUVVFc1VVRkJSenRCUVVGQkxGRkJRVWs3UVVGQlFTeE5RVU42Uml4RFFVRkRMRU5CUVVNN1FVRkJRU3hKUVVOS0xGTkJRVk1zUjBGQlJ6dEJRVU5XTEdGQlFVODdRVUZCUVN4SlFVTlVPMEZCUVVFc1JVRkRSanRCUVVWQkxFMUJRVTBzYTBKQlFXdENMRU5CUVVNc1UwRkJhMElzWlVGQmQwSTdRVUZEYWtVc1VVRkJTU3hUUVVGVE8wRkJRMWdzVlVGQlNTeFBRVUU0UWp0QlFVTm9ReXhsUVVGUE8wRkJRVUVzVFVGRFZEdEJRVU5CTEdGQlFVOHNZVUZCWVN4blEwRkJaME03UVVGQlFTeEpRVU4wUkN4UFFVRlBPMEZCUTB3c1lVRkJUeXhoUVVGaExESkNRVUV5UWp0QlFVRkJMRWxCUTJwRU8wRkJRVUVzUlVGRFJqdEJRVVZQTEUxQlFVMHNkMEpCUVhkQ0xFOUJRVTBzVlVGQkswTTdRVUZEZUVZc1VVRkJTU3hoUVVGaE8wRkJRMllzWVVGQlR5eFJRVUZSTEZGQlFWRTdRVUZCUVN4SlFVTjZRanRCUVVOQkxGRkJRVWtzWTBGQll6dEJRVU5vUWl4WlFVRk5MRWxCUVVrc1RVRkJUU3gxUkVGQmVVUTdRVUZCUVN4SlFVTXpSVHRCUVVOQkxGRkJRVWtzVTBGQlV6dEJRVU5ZTEZsQlFVMHNTVUZCU1N4TlFVRk5MRzlFUVVGelJEdEJRVUZCTEVsQlEzaEZPMEZCUlVFc2JVSkJRV1U3UVVGSFppeFZRVUZOTEZWQlFWVXNUVUZCVFR0QlFVTjBRaXhWUVVGTkxHRkJRV0VzVFVGQlRUdEJRVU42UWl4VlFVRk5MRTlCUVU4c1RVRkJUVHRCUVVWdVFpeFZRVUZOTEdGQlFXRXNZVUZCWVN4TFFVRkxMSFZDUVVGMVFqdEJRVU0xUkN4VlFVRk5MRlZCUVZVc1VVRkJVU3huUWtGQlowSTdRVUZGZUVNc1ZVRkJUU3haUVVGWkxFMUJRVTA3UVVGRGVFSXNWVUZCVFN4eFFrRkJjVUlzVDBGQlR5eGpRVUZqTEZkQlFWY3NXVUZCV1R0QlFVTjJSU3hWUVVGTkxHVkJRV1VzWjBKQlFXZENMRk5CUVZNc1ZVRkJWVHRCUVVONFJDeFZRVUZOTEcxQ1FVRnRRaXhQUVVGUExHTkJRV01zVjBGQlZ5eFZRVUZWTEZsQlFWa3NTVUZCU1R0QlFVVnVSaXhSUVVGSkxGbEJRVms3UVVGRmFFSXNWVUZCVFN4UlFVRTRRaXhEUVVGRE8wRkJSM0pETEZGQlFVa3NWVUZCVlN4SFFVRkhPMEZCUTJZc1dVRkJUU3hMUVVGTExFbEJRVWtzVVVGQlVTeERRVUZETEZsQlFWazdRVUZEYkVNc2JVSkJRVmNzVFVGQlRUdEJRVU5tTEhOQ1FVRlpPMEZCUTFvc2EwSkJRVkU3UVVGQlFTeFJRVU5XTEVkQlFVY3NUMEZCVHp0QlFVRkJMRTFCUTFvc1EwRkJReXhEUVVGRE8wRkJRVUVzU1VGRFNqdEJRVWRCTEZWQlFVMHNTMEZCU3l4SlFVRkpMRkZCUVZFc1EwRkJReXhUUVVGVExGZEJRVmM3UVVGRE1VTXNXVUZCVFN4VlFVRlZMR0ZCUVdFc2VVSkJRWGxDTzBGQlEzUkVMRmxCUVUwc1UwRkJhVU03UVVGQlFTeFJRVU55UXl4WlFVRlpMRU5CUVVNc1ZVRkJhMElzYjBKQlFUUkNPMEZCUTNwRUxHTkJRWFZETEdOQlFXTXNVMEZCVXl4VFFVRlRMRmxCUVZrc1MwRkRMMFVzVDBGQlR5eFRRVUZUTEdGQlFXRTdRVUZETDBJc2JVSkJRVThzU1VGQlNTeG5Ra0ZCWjBJc1NVRkJTVHRCUVVGQkxHTkJRek5DTzBGQlFVRTdRVUZCUVR0QlFVRkJMR2RDUVVkRk8wRkJRVUVzWTBGRFJqdEJRVUZCTEdOQlEwRXNSVUZCUXl4TlFVRk5MR3RDUVVGcFFqdEJRVUZCTEZsQlFVTXNRMEZCUXp0QlFVRkJMRlZCUTJoRE8wRkJSVUVzWTBGQlNTeFRRVUZUTEZOQlFWTXNUMEZCVHl4SFFVRkhPMEZCUXpsQ0xHZENRVUZKTEd0Q1FVRnJRanRCUVVOd1FpeHhRa0ZCVHp0QlFVRkJMRmxCUTFRN1FVRkZRU3hyUWtGQlRTeFRRVUZUTEhOQ1FVRnpRanRCUVVWeVF5eG5Ra0ZCU1N4UFFVRTBRanRCUVVNNVFpeHJRa0ZCU1N4cFFrRkJhVUlzYzBKQlFYTkNPMEZCUTNwRExIVkNRVUZQTEZOQlFWTTdRVUZCUVN4alFVTnNRaXhYUVVGWExHbENRVUZwUWl3clFrRkJLMEk3UVVGRGVrUXNkVUpCUVU4c1UwRkJVenRCUVVGQkxHTkJRMnhDTzBGQlFVRXNXVUZEUmp0QlFVVkJMRzFDUVVGUExGTkJRVk03UVVGQlFTeFZRVU5zUWp0QlFVVkJMR2xDUVVGUExHdENRVUZyUWp0QlFVRkJMRkZCUXpOQ08wRkJRVUVzVFVGRFJqdEJRVVZCTEZWQlFYVkRMRmxCUVZrN1FVRkRha1FzV1VGQlNTeFBRVUZQTEZOQlFWTXNZVUZCWVR0QlFVTXZRaXhwUWtGQlR5eHpRa0ZCTWtJc1MwRkJTeXhYUVVGWExITkNRVUZ6UWp0QlFVRkJMRkZCUXpGRkxFOUJRVTg3UVVGRFRDeG5Ra0ZCVFN4dFFrRkJiVUlzZFVKQlFYVkNMRkZCUVZFc1UwRkJVeXhEUVVGRE8wRkJRMnhGTEdsQ1FVRlBMSE5DUVVGelFpeEpRVUZKTEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUjBGQlJ5eEZRVUZETEUxQlFVMHNhMEpCUVdsQ0xFTkJRVU03UVVGQlFTeFJRVU55Ump0QlFVRkJMRTFCUTBZN1FVRkZRU3hqUVVGUkxFMUJRVTBzUlVGQlJUdEJRVUZCTzBGQlFVRXNVVUZGV2l4WlFVRlZPMEZCUTFJc2VVSkJRV1U3UVVGRFppeDNRa0ZCWXp0QlFVTmtMR2xDUVVGUE8wRkJRMUFzYTBKQlFWRTdRVUZCUVN4UlFVTldPMEZCUVVFN1FVRkJRU3hSUVVWQkxFTkJRVU1zVTBGQlV6dEJRVU5TTEhsQ1FVRmxPMEZCUTJZc2IwSkJRVlU3UVVGRFZpeHBRa0ZCVHl4SlFVRkpPMEZCUVVFc1VVRkRZanRCUVVGQkxFMUJRVU03UVVGQlFTeEpRVU5RTEVOQlFVTXNRMEZCUXp0QlFVVkdMRlZCUVUwc1VVRkJVU3hMUVVGTExFdEJRVXM3UVVGRmVFSXNVVUZCU1N4WFFVRlhPMEZCUTJJc1dVRkJUU3hKUVVGSkxFMUJRVTBzTWtSQlFUSkVMRTlCUVU4c1NVRkJTVHRCUVVGQkxFbEJRM2hHTzBGQlFVRXNSVUZEUmp0QlFVVlBMRTFCUVUwc1kwRkJZeXhOUVVGeFFqdEJRVU01UXl4UlFVRkpMR1ZCUVdVc1RVRkJUVHRCUVVOMlFpeGhRVUZQTzBGQlFVRXNTVUZEVkR0QlFVVkJMRlZCUVUwc1NVRkJTU3hOUVVGTkxIRkRRVUZ4UXp0QlFVRkJMRVZCUTNaRU96czdRVU42VFU4c1RVRkJUU3hyUWtGQmEwSXNRMEZCUXl4TlFVRmpMRmRCUVRaQ08wRkJRM3BGTEZWQlFVMURMRkZCUVU4c1dVRkJXVHRCUVVWNlFpeFZRVUZOTEdGQlFXRkJMRTFCUVVzc1owSkJRV2RDTEVsQlFVa3NTVUZCU1R0QlFVTm9SQ3hWUVVGTkxHRkJRV0ZCTEUxQlFVc3NVVUZCVVN4VlFVRlZPMEZCUXpGRExFbEJRVUZCTEUxQlFVc3NZVUZCWVN4TlFVRk5MRmxCUVZrc1ZVRkJWVHRCUVVNNVF5eFhRVUZQTEV0QlFVc3NWVUZCVlR0QlFVVjBRaXhYUVVGUE8wRkJRVUVzUlVGRFZEdEJRVTFQTEUxQlFVMHNjMEpCUTFRc1EwRkJReXhUUVVGclF5eFJRVUZuUWl4TlFVTnNSQ3haUVVGMVF6dEJRVU4wUXl4UlFVRkpMRTlCUVU4c1YwRkJWeXhaUVVGWkxGbEJRVmtzVFVGQlRUdEJRVU5zUkN4VlFVRkpMRXRCUVVzc1NVRkJTU3hQUVVGUExFZEJRVWM3UVVGRGNrSXNZMEZCVFN4SlFVRkpMRTFCUVUwc0swSkJRU3RDTzBGQlFVRXNUVUZEYWtRc1QwRkJUenRCUVVOTUxHRkJRVXNzU1VGQlNTeFBRVUZQTzBGQlFVRXNUVUZEYkVJN1FVRkJRU3hKUVVOR08wRkJSVUVzVjBGQlR5eFJRVUZSTEU5QlFVOHNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJReXhMUVVGTExFdEJRVXNzVFVGQlRUdEJRVU5vUkN4WlFVRk5MRTlCUVZFc1UwRkJWU3hUUVVGVExFMUJRVTA3UVVGRGRrTXNWVUZCU1N4UFFVRlBMRlZCUVZVc1ZVRkJWVHRCUVVNM1FpdzBRa0ZCYjBJc1QwRkJhME1zVDBGQlR5eExRVUZMTEUxQlFVMHNUMEZCVHp0QlFVRkJMRTFCUTJwR0xGZEJRVmNzVDBGQlR5eFZRVUZWTEZsQlFWa3NUMEZCVHl4VlFVRlZMRlZCUVZVN1FVRkRha1VzWjBKQlFWRXNUVUZCVFN4TlFVRk5MRk5CUVZNc1EwRkJRenRCUVVGQkxFMUJRMmhETEZkQlFWY3NUMEZCVHl4VlFVRlZMRmRCUVZjN1FVRkRja01zWjBKQlFWRXNUVUZCVHl4UlFVRlRMRTFCUVUwc1IwRkJSenRCUVVGQkxFMUJRMjVETEU5QlFVODdRVUZEVEN4alFVRk5MRWxCUVVrc1RVRkJUU3h0UTBGQmJVTXNUMEZCVHl4TFFVRkxMRVZCUVVVN1FVRkJRU3hOUVVOdVJUdEJRVUZCTEVsQlEwWXNRMEZCUXp0QlFVRkJMRVZCUTBnN1FVRk5SeXhOUVVGTkxHbENRVUZwUWl4RFFVRkRMRmxCUVRCQ08wRkJRM1pFTEZWQlFVMUJMRkZCUVU4c1dVRkJXVHRCUVVWNlFpeFZRVUZOTEZGQlFWRkJMRTFCUVVzc1ZVRkJWVHRCUVVNM1FpeFJRVUZKTzBGQlEwWXNXVUZCVFN4bFFVRmxRU3hOUVVGTExGZEJRVmNzUTBGQlF6dEJRVU4wUXl4TlFVRkJRU3hOUVVGTExHbENRVUZwUWl4alFVRmpMR1ZCUVdVc1EwRkJRenRCUVVOd1JDeFpRVUZOTEZsQlFWbEJMRTFCUVVzc1QwRkJUeXhsUVVGbExFTkJRVU03UVVGRE9VTXNXVUZCVFN4elFrRkJjMEpCTEUxQlFVc3NVVUZCVVN4bFFVRmxMRWxCUVVrc1EwRkJRenRCUVVNM1JDeFpRVUZOTEdWQlFXVXNjMEpCUVhOQ1FTeE5RVUZMTEdGQlFXRXNiVUpCUVcxQ0xFbEJRVWs3UVVGRGNFWXNXVUZCVFN4SlFVRkpMRTFCUVUwc1IwRkJSeXhQUVVGUExHZENRVUZuUWl4VFFVRlRMRzlDUVVGdlFpeFpRVUZaTEVWQlFVVTdRVUZCUVN4SlFVTjJSaXhWUVVGRk8wRkJRMEVzVFVGQlFVRXNUVUZCU3l4aFFVRmhMRXRCUVVzN1FVRkJRU3hKUVVONlFqdEJRVUZCTEVWQlEwWTdPenRCUTNaRVR5eE5RVUZOTEdkQ1FVRm5RaXhEUVVGRExGbEJRVFpFTzBGQlEzcEdMRlZCUVUxRExGRkJRVThzV1VGQldUdEJRVU42UWl4UlFVRkpMRzFDUVVGdFFqdEJRVU4yUWl4VlFVRk5MRk5CUVcxQ0xFTkJRVU03UVVGRk1VSXNWVUZCVFN4aFFVRXdReXhYUVVGWExFTkJRVU03UVVGRk5VUXNVVUZCU1R0QlFVTkdMRlZCUVVrc1UwRkJVeXh4UWtGQmNVSXNVVUZCVnp0QlFVTXpReXh0UWtGQlZ5eHRRa0ZCYlVJN1FVRkJRU3hOUVVOb1F5eFhRVU5KTEU5QlFVOHNVVUZCVVN4eFFrRkJjVUlzV1VGQldTeERRVUZETEU5QlFVOHNWVUZCVlN4UlFVRlJMR2RDUVVGblFpeExRVU14Uml4UlFVRlJMRzFDUVVGdFFpeExRVUZMTEZGQlFWRXNiVUpCUVcxQ0xFZEJRVWM3UVVGRGFFVXNZMEZCVFN4SlFVRkpMRTFCUVUwc2NVTkJRWEZETEZGQlFWRXNaMEpCUVdkQ0xFVkJRVVU3UVVGQlFTeE5RVU5xUmp0QlFVVkJMRlZCUVVrc1UwRkJVeXh6UWtGQmMwSXNVVUZCVnp0QlFVTTFReXh0UWtGQlZ5eHZRa0ZCYjBJN1FVRkJRU3hOUVVOcVF5eFhRVUZYTEU5QlFVOHNVVUZCVVN4elFrRkJjMElzV1VGQldTeERRVUZETEU5QlFVOHNWVUZCVlN4UlFVRlJMR2xDUVVGcFFpeEhRVUZITzBGQlEzaEhMR05CUVUwc1NVRkJTU3hOUVVGTkxIRkRRVUZ4UXl4UlFVRlJMR2xDUVVGcFFpeEZRVUZGTzBGQlFVRXNUVUZEYkVZN1FVRkZRU3hWUVVGSkxGTkJRVk1zWTBGQll5eFJRVUZYTzBGQlEzQkRMRzFDUVVGWExGbEJRVms3UVVGQlFTeE5RVU42UWp0QlFVVkJMRlZCUVVrc1owSkJRV2RDTzBGQlEzQkNMRlZCUVVrc1UwRkJVeXhSUVVGUkxGRkJRVmM3UVVGRE9VSXNkMEpCUVdkQ0xHZENRVUZuUWl4UlFVRlJMRXRCUVVzc1RVRkJUVHRCUVVGQkxFMUJRM0pFTzBGQlJVRXNlVUpCUVcxQ1FTeE5RVUZMTzBGQlFVRXNVVUZEY0VJc1YwRkJWenRCUVVGQkxGRkJRVzFDTEZkQlFWYzdRVUZCUVN4UlFVRnZRaXhEUVVGRExFTkJRVU1zVjBGQlZ6dEJRVUZCTEZGQlFWazdRVUZCUVN4TlFVRmhPMEZCUTNaSExGVkJRVWtzY1VKQlFYRkNMRWRCUVVjN1FVRkRNVUlzZFVKQlFXVXNNa0pCUVRSQ08wRkJRVUVzVFVGRE4wTTdRVUZGUVN4VlFVRkpMRk5CUVZNc1ZVRkJWU3hSUVVGWE8wRkJRMmhETERSQ1FVRnZRaXhSUVVGUkxFOUJRVThzU1VGQlNTeHZRa0ZCU1N4UlFVRnBReXhIUVVGSExFTkJRVU1zUzBGQlN5eFZRVUZWTzBGQlF6ZEdMR2RDUVVGTkxHZENRVUZuUWl4blFrRkJaMElzUzBGQlN5eE5RVUZOTzBGQlEycEVMR2RDUVVGTkxHdENRVUZyUWl4blFrRkJaMElzVDBGQlR5eE5RVUZOTzBGQlJYSkVMR05CUVVsQkxFMUJRVXNzYzBKQlFYTkNMR3RDUVVGclFpeGxRVUZsTEdWQlFXVXNUVUZCVFN4SFFVRkhPMEZCUTNSR0xESkNRVUZsTEdsRFFVRnBReXhIUVVGSExFMUJRVTBzUzBGQlN5eEhRVUZITzBGQlFVRXNWVUZEYmtVN1FVRkJRU3hSUVVOR0xFTkJRVU03UVVGQlFTeE5RVU5JTzBGQlJVRXNZVUZCVHl4RFFVRkRMR3RDUVVGclFpeE5RVUZOTzBGQlFVRXNTVUZEYkVNc1UwRkJVeXhIUVVGSE8wRkJRMVlzVlVGQlNTeHhRa0ZCY1VJc1IwRkJSenRCUVVNeFFpeFJRVUZCUVN4TlFVRkxMSE5DUVVGelFpeG5Ra0ZCWjBJN1FVRkJRU3hOUVVNM1F6dEJRVU5CTEdGQlFVOHNVVUZCVVN4WFFVRlRRU3hOUVVGTExFMUJRVTBzUzBGQlN5eERRVUZETzBGQlEzcERMRmxCUVUwN1FVRkJRU3hKUVVOU08wRkJRVUVzUlVGRFJqczdPMEZEZUVSQkxFMUJRVTBzTWtKQlFUSkNMRU5CUVVNc01rSkJRVzFFTzBGQlEyNUdMRmxCUVZFc2QwSkJRWGRDTzBGQlFVRXNUVUZET1VJc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVU8wRkJRMFVzWTBGQlRTeEpRVUZKTEUxQlFVMHNlVU5CUVhsRExITkNRVUZ6UWl4RlFVRkZPMEZCUVVFc1NVRkRja1k3UVVGQlFTeEZRVU5HTzBGQlJVRXNUVUZCVFN4dFFrRkJiVUlzUTBGQlF5eHJRa0ZCYlVRN1FVRkRNMFVzV1VGQlVTeGxRVUZsTzBGQlFVRXNUVUZEY2tJc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWRHRCUVVORkxHTkJRVTBzU1VGQlNTeE5RVUZOTEN0Q1FVRXJRaXhoUVVGaExFVkJRVVU3UVVGQlFTeEpRVU5zUlR0QlFVRkJMRVZCUTBZN1FVRkZRU3hOUVVGTkxIVkNRVUYxUWl4RFFVRkRMRmxCUVcxRU8wRkJReTlGTEZGQlFVa3NRMEZCUXl4UlFVRlJMRTlCUVU4N1FVRkRiRUlzWTBGQlVTeFJRVUZSTEVOQlFVTTdRVUZCUVN4SlFVTnVRanRCUVVOQkxGRkJRVWtzUTBGQlF5eFJRVUZSTEUxQlFVMHNVMEZCVXp0QlFVTXhRaXhqUVVGUkxFMUJRVTBzVlVGQlZTeERRVUZETzBGQlFVRXNTVUZETTBJN1FVRkRRU3hWUVVGTkxGVkJRVlVzVVVGQlVTeE5RVUZOTzBGQlF6bENMRkZCUVVrc1EwRkJReXhSUVVGUkxEaENRVUU0UWp0QlFVVjZReXhqUVVGUkxDdENRVUVyUWp0QlFVRkJMRWxCUTNwRE8wRkJSMEVzVVVGQlNTeFJRVUZSTEhOQ1FVTlNMRkZCUVZFc2JVSkJRVzFDTEV0QlFVc3NVMEZCVHl4UFFVRlBMRTlCUVU4c1YwRkJWeXhMUVVGTExFZEJRVWNzVlVGQlZTeFJRVUZSTEVkQlFVYzdRVUZETDBZc1kwRkJVU3h0UWtGQmJVSTdRVUZCUVN4SlFVTTNRanRCUVVGQkxFVkJRMFk3UVVGRlFTeE5RVUZOTEhkQ1FVTkdMRU5CUVVNc2MwSkJRVGhDTEc5Q1FVTTVRaXhYUVVFeVFqdEJRVU14UWl4bFFVRlhMRTFCUVUwc2IwSkJRVzlDTzBGQlEyNURMRlZCUVVrc1UwRkJVeXhQUVVGUExFOUJRVThzVjBGQlZ5eExRVUZMTEVkQlFVYzdRVUZIT1VNc1kwRkJVU3hSUVVGUk8wRkJRVUVzVVVGRFpDeExRVUZMTzBGQlEwZ3NiVUpCUVZNN1FVRkRWRHRCUVVGQkxGRkJRMFlzUzBGQlN6dEJRVU5JTEcxQ1FVRlRPMEZCUTFRc1kwRkJTU3hQUVVGUExFOUJRVThzVlVGQlZUdEJRVU14UWl4clFrRkJUU3hsUVVGbE8wRkJRM0pDTEdkQ1FVRkpMR05CUVdNc1dVRkJXVHRCUVVNMVFpeHZRa0ZCVFN4blFrRkJaMElzWjBKQlFXZENMR05CUVdNc1RVRkJUVHRCUVVNeFJDeHZRa0ZCVFN4clFrRkJhMElzWjBKQlFXZENMR0ZCUVdFc1dVRkJXU3hOUVVGTk8wRkJRM1pGTEd0Q1FVRkpMRmxCUVZrc1JVRkJSU3d3UWtGQk1FSXNjMEpCUVhOQ0xHVkJRV1VzWlVGQlpTeE5RVU0xUml4SFFVRkhPMEZCUTB3c0swSkJRV1VzYjBSQlFXOUVMR0ZCUVdFc1ZVRkJWU3hIUVVGSE8wRkJRVUVzWTBGREwwWTdRVUZCUVN4WlFVTkdPMEZCUTBFc1owSkJRVWtzWTBGQll5eFpRVUZaTzBGQlF6VkNMR3RDUVVGSkxHRkJRV0VzWVVGQllUdEJRVVU1UWl4clFrRkJTU3hQUVVGUExHTkJRV01zV1VGQldTeERRVUZETEU5QlFVOHNWVUZCVlN4VlFVRlZMRXRCUVVzc1lVRkJZU3hIUVVGSE8wRkJRM0JHTERaQ1FVRmhPMEZCUVVFc1kwRkRaanRCUVVOQkxHOUNRVUZOTEdkQ1FVRm5RaXhuUWtGQlowSXNZMEZCWXl4TlFVRk5PMEZCUXpGRUxHOUNRVUZOTEd0Q1FVRnJRaXhuUWtGQlowSXNWMEZCVnl4VFFVRlRMRWRCUVVjc1RVRkJUVHRCUVVOeVJTeHJRa0ZCU1N4WlFVRlpMRVZCUVVVc01FSkJRVEJDTEhOQ1FVRnpRaXhsUVVGbExHVkJRV1VzVFVGRE5VWXNSMEZCUnp0QlFVTk1MQ3RDUVVGbExHOUVRVUZ2UkN4aFFVRmhMRlZCUVZVc1IwRkJSenRCUVVGQkxHTkJReTlHTzBGQlFVRXNXVUZEUmp0QlFVTkJMR2RDUVVGSkxHTkJRV01zYVVKQlFXbENPMEZCUTJwRExHOUNRVUZOTEdkQ1FVRm5RaXhuUWtGQlowSXNiVUpCUVcxQ0xFMUJRVTA3UVVGREwwUXNiMEpCUVUwc2EwSkJRV3RDTEdkQ1FVRm5RaXhoUVVGaExHbENRVUZwUWl4TlFVRk5PMEZCUXpWRkxHdENRVUZKTEZsQlFWa3NSVUZCUlN3d1FrRkJNRUlzYzBKQlFYTkNMR1ZCUVdVc1pVRkJaU3hOUVVNMVJpeEhRVUZITzBGQlEwdzdRVUZCUVN4clFrRkRTU3g1UkVGQmVVUXNZVUZCWVN4bFFVRmxPMEZCUVVFc1owSkJRVWM3UVVGQlFTeGpRVU01Ump0QlFVRkJMRmxCUTBZN1FVRkJRU3hWUVVOR08wRkJRMEU3UVVGQlFTeFJRVU5HTEV0QlFVczdRVUZEU0N4dFFrRkJVenRCUVVOVUxHTkJRVWtzVDBGQlR5eFBRVUZQTEZWQlFWVTdRVUZETVVJc2EwSkJRVTBzWjBKQlFXZENPMEZCUTNSQ0xHZENRVUZKTEdWQlFXVXNhVUpCUVdsQ08wRkJRMnhETEd0Q1FVRkpMR05CUVdNc2IwSkJRVzlDTEZWQlFWVXNZMEZCWXl4dlFrRkJiMElzVVVGQlVUdEJRVU40Uml4elFrRkJUU3hKUVVGSkxFMUJRVTBzYjBSQlFXOUVMR05CUVdNc1pVRkJaU3hGUVVGRk8wRkJRVUVzWTBGRGNrYzdRVUZEUVN4dlFrRkJUU3huUWtGQlowSXNaMEpCUVdkQ0xHMUNRVUZ0UWl4TlFVRk5PMEZCUXk5RUxHOUNRVUZOTEd0Q1FVRnJRaXhuUWtGQlowSXNZMEZCWXl4cFFrRkJhVUlzVFVGQlRUdEJRVU0zUlN4clFrRkJTU3haUVVGWkxFVkJRVVVzTUVKQlFUQkNMSE5DUVVGelFpeGxRVUZsTEdWQlFXVXNUVUZETlVZc1IwRkJSenRCUVVOTU8wRkJRVUVzYTBKQlEwa3NlVVJCUVhsRUxHTkJRV01zWlVGQlpUdEJRVUZCTEdkQ1FVRkhPMEZCUVVFc1kwRkRMMFk3UVVGQlFTeFpRVU5HTzBGQlFVRXNWVUZEUmp0QlFVTkJPMEZCUVVFc1VVRkRSaXhMUVVGTE8wRkJRVUVzVVVGRFRDeExRVUZMTzBGQlEwZzdRVUZCUVN4UlFVTkdPMEZCUTBVc1owSkJRVTBzU1VGQlNTeE5RVUZOTEhGRFFVRnhReXhOUVVGTkxFVkJRVVU3UVVGQlFTeE5RVU5xUlR0QlFVVkJMRmxCUVUwc2JVSkJRVzFDTEdkQ1FVRm5RaXhSUVVGUkxFMUJRVTA3UVVGRGRrUXNWVUZCU1N4WlFVRlpMRVZCUVVVc05FSkJRVFJDTEhOQ1FVRnpRaXhuUWtGQlowSXNUVUZCVFN4SFFVRkhPMEZCUXpOR0xIVkNRVUZsTEc5RFFVRnZReXhOUVVGTkxFZEJRVWM3UVVGQlFTeE5RVU01UkR0QlFVRkJMRWxCUTBZN1FVRkJRU3hGUVVOR08wRkJSVWNzVFVGQlRTeHZRa0ZCYjBJc1EwRkJReXhaUVVGclJUdEJRVU5zUnl4VlFVRk5ReXhSUVVGUExGbEJRVms3UVVGRGVrSXNVVUZCU1N4MVFrRkJkVUk3UVVGRE0wSXNWVUZCVFN4VFFVRnRRaXhEUVVGRE8wRkJSVEZDTEZWQlFVMHNhVUpCUVd0RUxGZEJRVmNzUTBGQlF6dEJRVU53UlN4NVFrRkJjVUlzWTBGQll6dEJRVVZ1UXl4UlFVRkpPMEZCUTBZc1dVRkJUU3g1UWtGQmVVSXNlVUpCUVhsQ0xHVkJRV1VzTUVKQlFUQkNMRXRCUVVzN1FVRkRkRWNzV1VGQlRTeG5Ra0ZCWjBJc2FVSkJRV2xDTEdWQlFXVXNhVUpCUVdsQ0xGbEJRVms3UVVGRGJrWXNXVUZCVFN4clFrRkRSaXhQUVVGUExHVkJRV1VzVlVGQlZTeFhRVUZYTEdkQ1FVRm5RaXhsUVVGbExFOUJRVThzVFVGQlRTeEpRVUZKTzBGQlJTOUdMRmxCUVUwc2JVSkJRVzFDTEdWQlFXVXNiMEpCUVc5Q08wRkJRelZFTEZWQlFVa3NRMEZCUXl4UFFVRlBMRlZCUVZVc1owSkJRV2RDTEV0QlFVc3NiVUpCUVcxQ0xFdEJRVXNzYlVKQlFXMUNMRWRCUVVjN1FVRkRka1lzWTBGQlRTeEpRVUZKTEUxQlFVMHNjVU5CUVhGRExHZENRVUZuUWl4RlFVRkZPMEZCUVVFc1RVRkRla1U3UVVGRlFTeFpRVUZOTEc5Q1FVRnZRaXhsUVVGbExIRkNRVUZ4UWp0QlFVTTVSQ3hWUVVGSkxFTkJRVU1zVDBGQlR5eFZRVUZWTEdsQ1FVRnBRaXhMUVVGTExHOUNRVUZ2UWl4TFFVRkxMRzlDUVVGdlFpeEhRVUZITzBGQlF6RkdMR05CUVUwc1NVRkJTU3hOUVVGTkxIRkRRVUZ4UXl4cFFrRkJhVUlzUlVGQlJUdEJRVUZCTEUxQlF6RkZPMEZCUlVFc1dVRkJUU3dyUWtGQkswSXNUMEZCVHl4bFFVRmxMREpDUVVFeVFpeFhRVU5zUml4blFrRkJaMElzWlVGQlpTeDNRa0ZCZDBJc1RVRkJUU3hKUVVNM1JEdEJRVVZLTERaQ1FVRjFRa0VzVFVGQlN6dEJRVUZCTEZGQlEzaENPMEZCUVVFc1VVRkJkMElzUTBGQlF5eERRVUZETEdWQlFXVTdRVUZCUVN4UlFVRnRRaXhEUVVGRExFTkJRVU1zWlVGQlpUdEJRVUZCTEZGQlFXdENPMEZCUVVFc1VVRkRMMFlzUTBGQlF5eERRVUZETEdWQlFXVTdRVUZCUVN4UlFVRnBRanRCUVVGQkxGRkJRVWM3UVVGQlFTeFJRVUZwUWp0QlFVRkJMRkZCUVd0Q08wRkJRVUVzVVVGRGVFVTdRVUZCUVN4TlFVRTBRanRCUVVOb1F5eFZRVUZKTEhsQ1FVRjVRaXhIUVVGSE8wRkJRemxDTEhWQ1FVRmxMQ3RDUVVGblF6dEJRVUZCTEUxQlEycEVPMEZCUlVFc1ZVRkJTU3hsUVVGbExHOUNRVUZ2UWp0QlFVTnlReXc0UWtGQmMwSXNjMEpCUVhOQ0xHVkJRV1VzYjBKQlFXOUNMRTFCUVUwN1FVRkJRU3hOUVVOMlJqdEJRVVZCTEZWQlFVa3NaVUZCWlN4M1FrRkJkMEk3UVVGRGVrTXNiVUpCUVZjc1EwRkJReXhOUVVGTkxFdEJRVXNzUzBGQlN5eFBRVUZQTEZGQlFWRXNaVUZCWlN4elFrRkJjMElzUjBGQlJ6dEJRVU5xUml4alFVRkpMRTlCUVU4c1UwRkJVeXhWUVVGVk8wRkJRelZDTEd0Q1FVRk5MRWxCUVVrc1RVRkJUU3hyUkVGQmEwUXNTVUZCU1N4RlFVRkZPMEZCUVVFc1ZVRkRNVVU3UVVGRFFTeGpRVUZKTEU5QlFVOHNWVUZCVlN4WlFVRlpMRU5CUVVNc1QwRkJUeXhWUVVGVkxFdEJRVXNzUzBGQlN5eFJRVUZSTEVkQlFVYzdRVUZEZEVVc2EwSkJRVTBzU1VGQlNTeE5RVUZOTEdsRlFVRnBSU3hMUVVGTExFVkJRVVU3UVVGQlFTeFZRVU14Ump0QlFVTkJMR2RDUVVGTkxHRkJRV0VzWjBKQlFXZENMRTFCUVUwc1RVRkJUVHRCUVVNdlF5eGpRVUZKUVN4TlFVRkxMRFpDUVVFMlFpeHpRa0ZCYzBJc1dVRkJXU3hMUVVGTExFMUJRVTBzUjBGQlJ6dEJRVU53Uml3eVFrRkJaU3gzUTBGQmQwTXNTVUZCU1N4TlFVRk5MRXRCUVVzc1IwRkJSenRCUVVGQkxGVkJRek5GTzBGQlFVRXNVVUZEUmp0QlFVRkJMRTFCUTBZN1FVRkZRU3hWUVVGSkxHVkJRV1VzVlVGQlZTeFJRVUZYTzBGQlEzUkRMRFJDUVVGdlFpeGxRVUZsTEU5QlFVOHNTVUZCU1N4dlFrRkJTU3hSUVVGcFF5eEhRVUZITEVOQlFVTXNTMEZCU3l4VlFVRlZPMEZCUTNCSExHZENRVUZOTEdkQ1FVRm5RaXhuUWtGQlowSXNTMEZCU3l4TlFVRk5PMEZCUTJwRUxHZENRVUZOTEd0Q1FVRnJRaXhuUWtGQlowSXNUMEZCVHl4TlFVRk5PMEZCUlhKRUxHTkJRVWxCTEUxQlFVc3NNRUpCUVRCQ0xITkNRVUZ6UWl4bFFVRmxMR1ZCUVdVc1RVRkJUU3hIUVVGSE8wRkJRemxHTERKQ1FVRmxMSEZEUVVGeFF5eEhRVUZITEUxQlFVMHNTMEZCU3l4SFFVRkhPMEZCUVVFc1ZVRkRka1U3UVVGQlFTeFJRVU5HTEVOQlFVTTdRVUZCUVN4TlFVTklPMEZCUlVFc1lVRkJUeXhEUVVGRExITkNRVUZ6UWl4TlFVRk5PMEZCUVVFc1NVRkRkRU1zVTBGQlV5eEhRVUZITzBGQlExWXNWVUZCU1N4NVFrRkJlVUlzUjBGQlJ6dEJRVU01UWl4UlFVRkJRU3hOUVVGTExEQkNRVUV3UWl4dlFrRkJiMEk3UVVGQlFTeE5RVU55UkR0QlFVTkJMR0ZCUVU4c1VVRkJVU3hYUVVGVFFTeE5RVUZMTEUxQlFVMHNTMEZCU3l4RFFVRkRPMEZCUTNwRExGbEJRVTA3UVVGQlFTeEpRVU5TTzBGQlFVRXNSVUZEUmpzN08wRkRPVXRQTEUxQlFVMHNOa0pCUVRaQ0xFTkJRVU1zVTBGQk1rSTdRVUZEY0VVc1dVRkJVU3hOUVVGTk8wRkJRVUVzVFVGRFdpeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlJWUTdRVUZEUlN4alFVRk5MRWxCUVVrc1RVRkJUU3d3UWtGQk1FSXNTVUZCU1N4RlFVRkZPMEZCUVVFc1NVRkRjRVE3UVVGQlFTeEZRVU5HTzBGQlMwOHNUVUZCVFN3MlFrRkJOa0lzUTBGQlF5eGpRVUZ4UXp0QlFVTTVSU3haUVVGUkxGZEJRVmM3UVVGQlFTeE5RVU5xUWl4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUlZRN1FVRkRSU3hqUVVGTkxFbEJRVWtzVFVGQlRTd3dRa0ZCTUVJc1UwRkJVeXhGUVVGRk8wRkJRVUVzU1VGRGVrUTdRVUZCUVN4RlFVTkdPMEZCVFU4c1RVRkJUU3gxUWtGQmRVSXNRMEZCUXl4aFFVTndRaXhEUVVGRExGRkJRVmNzUjBGQlJ5eEhRVUZITEVkQlFVY3NSMEZCUnl4SFFVRkhMRWRCUVVjc1IwRkJSeXhSUVVGWExFZEJRVWNzUjBGQlJ5eEhRVUZITEVkQlFVY3NSMEZCUnl4UlFVRlhMRkZCUVZjc1RVRkJVeXhGUVVGRkxGRkJRVkU3UVVGTE9VY3NUVUZCVFN4dlEwRkJiME1zUTBGQlF5eFRRVVZ2UkR0QlFVTm9SeXhaUVVGUkxFMUJRVTA3UVVGQlFTeE5RVU5hTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWQ3hMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVU8wRkJRMFVzWTBGQlRTeEpRVUZKTEUxQlFVMHNjVUpCUVhGQ0xFbEJRVWtzUlVGQlJUdEJRVUZCTEVsQlF5OURPMEZCUVVFc1JVRkRSanRCUVV0SExFMUJRVTBzZFVKQlFYVkNMRU5CUVVNc1lVRkJhMFU3UVVGRGNrY3NXVUZCVVN4VlFVRlZPMEZCUVVFc1RVRkRhRUlzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVMRXRCUVVzN1FVRkRTQ3hsUVVGUE8wRkJRVUVzVFVGRFZDeExRVUZMTzBGQlEwZ3NaVUZCVHp0QlFVRkJMRTFCUTFRc1MwRkJTenRCUVVOSUxHVkJRVTg3UVVGQlFTeE5RVU5VTEV0QlFVczdRVUZEU0N4bFFVRlBPMEZCUVVFc1RVRkRWRHRCUVVORkxHTkJRVTBzU1VGQlNTeE5RVUZOTERoQ1FVRTRRaXhSUVVGUkxFVkJRVVU3UVVGQlFTeEpRVU0xUkR0QlFVRkJMRVZCUTBZN1FVRkxUeXhOUVVGTkxESkNRVUV5UWl4RFFVRkRMRk5CUVhsRUxGTkJRVk1zWVVGRGRrY3NVMEZCVXl4WFFVRlhMRk5CUVZNc1YwRkJWeXhUUVVGVExGVkJRVlVzVTBGQlV5eGhRVUZoTEZOQlFWTTdRVUZMZGtZc1RVRkJUU3d5UWtGQk1rSXNRMEZCUXl4aFFVRXdRenRCUVVOcVJpeFpRVUZSTEZWQlFWVTdRVUZCUVN4TlFVTm9RaXhMUVVGTE8wRkJRMGdzWlVGQlR6dEJRVUZCTEUxQlExUXNTMEZCU3p0QlFVTklMR1ZCUVU4N1FVRkJRU3hOUVVOVUxFdEJRVXM3UVVGRFNDeGxRVUZQTzBGQlFVRXNUVUZEVkN4TFFVRkxPMEZCUTBnc1pVRkJUenRCUVVGQkxFMUJRMVFzUzBGQlN6dEJRVU5JTEdWQlFVODdRVUZCUVN4TlFVTlVPMEZCUTBVc1kwRkJUU3hKUVVGSkxFMUJRVTBzT0VKQlFUaENMRkZCUVZFc1JVRkJSVHRCUVVGQkxFbEJRelZFTzBGQlFVRXNSVUZEUmpzN08wRkRia3hCTEUxQlFVa3NiMEpCUVc5Q08wRkJUM2hDTEUxQlFVMHNOa0pCUVRaQ0xFTkJRVU1zYTBKQlFUUkRPMEZCUXpsRkxGVkJRVTFETEZGQlFVOHNXVUZCV1R0QlFVTjZRaXhWUVVGTkxGRkJRVkZCTEUxQlFVc3NWVUZCVlR0QlFVTTNRaXhSUVVGSk8wRkJRMFlzV1VGQlRTeGhRVUZoUVN4TlFVRkxMRmRCUVZjc1EwRkJRenRCUVVOd1F5eFpRVUZOTEZsQlFWbEJMRTFCUVVzc2QwSkJRWGRDTEdWQlFXVXNXVUZCV1N4aFFVRmhMRU5CUVVNN1FVRkRlRVlzVlVGQlNTeGpRVUZqTEVkQlFVYzdRVUZEYmtJc2RVSkJRV1VzZFVOQlFYZERPMEZCUVVFc1RVRkRla1E3UVVGRFFTeGhRVUZQTEVOQlFVTkJMRTFCUVVzc1QwRkJUeXhoUVVGaExFTkJRVU1zUjBGQlIwRXNUVUZCU3l4UFFVRlBMR0ZCUVdFc1NVRkJTU3hEUVVGRExFTkJRVU03UVVGQlFTeEpRVU4wUlN4VlFVRkZPMEZCUTBFc1RVRkJRVUVzVFVGQlN5eGhRVUZoTEV0QlFVczdRVUZCUVN4SlFVTjZRanRCUVVGQkxFVkJRMFk3UVVGUFFTeE5RVUZOTEZWQlFWVXNRMEZCUXl4WlFVRnZRaXhwUWtGQkswSTdRVUZEYkVVc1ZVRkJUU3haUVVGWkxGbEJRVmtzUlVGQlJTeFRRVUZUTEZsQlFWa3NXVUZCV1R0QlFVTnFSU3hSUVVGSkxHTkJRV01zUjBGQlJ6dEJRVU51UWl4eFFrRkJaU3dyUWtGQlowTTdRVUZCUVN4SlFVTnFSRHRCUVVGQkxFVkJRMFk3UVVGTlR5eE5RVUZOTEdOQlFXTXNUMEZCVFN4UlFVRTBRanRCUVVVelJDeFpRVUZSTEVsQlFVa3NTMEZCU3l4WlFVRmhMSEZDUVVGeFFpeEpRVUZKTEZGQlFWRXNRMEZCUXp0QlFVVm9SU3hSUVVGSkxFOUJRVFJDTzBGQlNUbENMRmxCUVUwc1YwRkJWeXhMUVVGMVFqdEJRVU40UXl4WlFVRk5MRk5CUVZNc1dVRkJXU3hIUVVGSExFZEJRVWM3UVVGQlFTeEpRVU51UXp0QlFVVkJMSGRDUVVGdlFqdEJRVUZCTEVWQlEzUkNPMEZCYTBOQkxFMUJRVTBzYVVKQlFXbENMRzlDUVVGSkxFbEJRVFpDTzBGQlJXcEVMRTFCUVUwc2MwSkJRWE5DTEUxQlFXVTdRVUZOTTBNc1RVRkJUU3gzUWtGQmQwSXNRMEZCUXl4VlFVRjNRenRCUVVNMVJTeFZRVUZOUVN4UlFVRlBMRmxCUVZrN1FVRkRla0lzVlVGQlRTeHJRa0ZCYTBKQkxFMUJRVXNzVVVGQlVTeE5RVUZOTEZWQlFWVTdRVUZEY2tRc1VVRkJTU3h2UWtGQmIwSXNSMEZCUnp0QlFVTjZRaXhaUVVGTkxFbEJRVWtzVFVGQlRTd3JSRUZCSzBRc1RVRkJUU3hWUVVGVkxFZEJRVWM3UVVGQlFTeEpRVU53Unp0QlFVTkJMRWxCUVVGQkxFMUJRVXNzVDBGQlR5eEpRVUZKTEU5QlFVOHNaVUZCWlR0QlFVTjBReXhYUVVGUExFTkJRVU1zYVVKQlFXbENMRTFCUVUwc1ZVRkJWVHRCUVVGQkxFVkJRek5ETzBGQlVVOHNUVUZCVFN4M1FrRkRWQ3hEUVVGRExGZEJRV3RETEZsQlFUSkZPMEZCUXpWSExGVkJRVTFCTEZGQlFVOHNXVUZCV1R0QlFVVjZRaXhSUVVGSkxHZENRVUZuUWp0QlFVTndRaXhSUVVGSkxIVkNRVUYxUWp0QlFVTXpRaXhSUVVGSkxHdENRVUZyUWp0QlFVTjBRaXhSUVVGSkxGTkJRVzFDTEVOQlFVTTdRVUZEZUVJc1ZVRkJUU3gzUWtGQmQwSXNRMEZCUXp0QlFVTXZRaXhWUVVGTkxIbENRVUY1UWl4RFFVRkRPMEZCUldoRExGRkJRVWs3UVVGRFJpeFBRVUZETEhOQ1FVRnpRaXhOUVVGTkxFbEJRVWtzYTBKQlFXdENMRTlCUVU4N1FVRkZNVVFzYzBKQlFXZENRU3hOUVVGTExHdENRVUZyUWl4VlFVRlZMRU5CUVVNc1IwRkJSeXhWUVVGVkxFTkJRVU1zUjBGQlJ5eHZRa0ZCYjBJN1FVRkRka1lzVlVGQlNTeHJRa0ZCYTBJc1IwRkJSenRCUVVOMlFpeDFRa0ZCWlN4NVFrRkJNRUk3UVVGQlFTeE5RVU16UXp0QlFVVkJMRmxCUVUwc1EwRkJReXhaUVVGWkxGZEJRVmNzU1VGQlNTd3lRa0ZCTWtJc1lVRkJZVHRCUVVVeFJTeFpRVUZOTEdGQlFXRXNRMEZCUXp0QlFVTndRaXhaUVVGTkxHTkJRV01zUTBGQlF6dEJRVU55UWl4WlFVRk5MREpDUVVGM1JTeERRVUZETzBGQlF5OUZMR1ZCUVZNc1NVRkJTU3hIUVVGSExFbEJRVWtzV1VGQldTeExRVUZMTzBGQlEyNURMR05CUVUwc1QwRkJUMEVzVFVGQlN5eHBRa0ZCYVVJc1pVRkJaU3hEUVVGRE8wRkJRMjVFTEZsQlFVa3NVMEZCVXl4SFFVRkhPMEZCUTJRc2VVSkJRV1VzTUVKQlFUSkNPMEZCUVVFc1VVRkROVU03UVVGRFFTdzRRa0ZCYzBJc1MwRkJTeXhKUVVGSk8wRkJReTlDTEcxQ1FVRlhMRXRCUVV0QkxFMUJRVXNzWVVGQllTeEpRVUZKTEVOQlFVTTdRVUZCUVN4TlFVTjZRenRCUVVOQkxHVkJRVk1zU1VGQlNTeEhRVUZITEVsQlFVa3NZVUZCWVN4TFFVRkxPMEZCUTNCRExHTkJRVTBzVDBGQlQwRXNUVUZCU3l4clFrRkJhMElzWlVGQlpTeERRVUZETzBGQlEzQkVMRmxCUVVrc1UwRkJVeXhIUVVGSE8wRkJRMlFzZVVKQlFXVXNNa0pCUVRSQ08wRkJRVUVzVVVGRE4wTTdRVUZEUVN3clFrRkJkVUlzUzBGQlN5eEpRVUZKTzBGQlEyaERMR05CUVUwc1lVRkJZVUVzVFVGQlN5eGhRVUZoTEVsQlFVazdRVUZEZWtNc2IwSkJRVmtzUzBGQlN5eFZRVUZWTzBGQlJUTkNMRmxCUVVrc1QwRkJORUk3UVVGRE9VSXNaMEpCUVUwc1YwRkJWeXhQUVVGUExGTkJRVk1zTkVKQlFUUkNMRmRCUTNwRUxGRkJRVkVzTUVKQlExSXNVMEZCVXl3d1FrRkJNRUlzVlVGQlZTeExRVUZMTzBGQlEzUkVMR05CUVVrc1lVRkJZU3hUUVVGVExHRkJRV0VzWjBKQlFXZENMR0ZCUVdFc1kwRkJZenRCUVVOb1JpeHJRa0ZCVFN4SlFVRkpMRTFCUVUwc05FTkJRVFJETEZGQlFWRXNSMEZCUnp0QlFVRkJMRlZCUTNwRk8wRkJRMEVzYlVOQlFYbENMRXRCUVVzc1VVRkJVVHRCUVVGQkxGRkJRM2hETzBGQlFVRXNUVUZEUmp0QlFVZEJMRlZCUVVrc1pVRkJiME03UVVGRGVFTXNWVUZCU1N4UFFVRnpSanRCUVVONFJpd3dRa0ZCYTBKQkxFMUJRVXNzYTBKQlFXdENMR0ZCUVdFN1FVRkRkRVFzV1VGQlNTeHZRa0ZCYjBJc1IwRkJSenRCUVVONlFpeDVRa0ZCWlN3d1FrRkJNa0k3UVVGQlFTeFJRVU0xUXp0QlFVVkJMSFZDUVVGbE8wRkJRVUVzVlVGRFlpeFJRVUZSTzBGQlFVRXNWVUZEVWp0QlFVRkJMRlZCUTBFc2FVTkJRV2xETEhsQ1FVRjVRaXhKUVVGSkxFOUJRVXNzZVVKQlFYbENMRU5CUVVNc1EwRkJRenRCUVVGQkxGRkJRMmhITzBGQlFVRXNUVUZEUmp0QlFVVkJMSEZDUVVGbExFbEJRVWtzWlVGQlpTeERRVUZETEdWQlFXVXNkVUpCUVhWQ0xIZENRVUYzUWl4WlFVRlpMRU5CUVVNN1FVRkRPVWNzWVVGQlR5eERRVUZETEdWQlFXVXNXVUZCV1N4WFFVRlhPMEZCUVVFc1NVRkRhRVFzVTBGQlV5eEhRVUZITzBGQlExWXNORUpCUVhOQ0xGRkJRVkVzVTBGQlQwRXNUVUZCU3l4VFFVRlRMRWRCUVVjc1EwRkJRenRCUVVOMlJDdzJRa0ZCZFVJc1VVRkJVU3hUUVVGUFFTeE5RVUZMTEZOQlFWTXNSMEZCUnl4RFFVRkRPMEZCUlhoRUxGVkJRVWtzYjBKQlFXOUNMRWRCUVVjN1FVRkRla0lzVVVGQlFVRXNUVUZCU3l4dFFrRkJiVUlzWlVGQlpUdEJRVUZCTEUxQlEzcERPMEZCUlVFc1ZVRkJTU3hyUWtGQmEwSXNSMEZCUnp0QlFVTjJRaXhSUVVGQlFTeE5RVUZMTEcxQ1FVRnRRaXhoUVVGaE8wRkJRVUVzVFVGRGRrTTdRVUZEUVN4WlFVRk5PMEZCUVVFc1NVRkRVaXhWUVVGRk8wRkJRMEVzVFVGQlFVRXNUVUZCU3l4TlFVRk5MRlZCUVZVc1EwRkJReXhEUVVGRE8wRkJRM1pDTEZWQlFVa3NlVUpCUVhsQ0xFZEJRVWM3UVVGRE9VSXNVVUZCUVVFc1RVRkJTeXd3UWtGQk1FSXNiMEpCUVc5Q08wRkJRVUVzVFVGRGNrUTdRVUZEUVN4aFFVRlBMRkZCUVZFc1YwRkJVMEVzVFVGQlN5eE5RVUZOTEV0QlFVc3NRMEZCUXp0QlFVRkJMRWxCUXpORE8wRkJRVUVzUlVGRFJqdEJRVTlITEUxQlFVMHNaMEpCUTFRc1EwRkJReXhQUVVGdFFpeFpRVUV5UlR0QlFVTTNSaXhWUVVGTkxGbEJRVzFETEhOQ1FVRnpRaXhMUVVGTE8wRkJRM0JGTEZkQlFVOHNjMEpCUVhOQ0xGZEJRVmNzVDBGQlR6dEJRVUZCTEVWQlEycEVPMEZCUlVjc1RVRkJUU3hwUWtGQmFVSXNRMEZCUXl4alFVRTBRanRCUVVONlJDeFZRVUZOUVN4UlFVRlBMRmxCUVZrN1FVRkRla0lzVlVGQlRTeFZRVUZWTEdWQlFXVXNTVUZCU1N4VFFVRlRPMEZCUXpWRExGRkJRVWtzUTBGQlF5eFRRVUZUTzBGQlExb3NXVUZCVFN4SlFVRkpMRTFCUVUwc0swTkJRU3RETEZOQlFWTXNSVUZCUlR0QlFVRkJMRWxCUXpWRk8wRkJRMEVzVlVGQlRTeERRVUZETEdWQlFXVXNkVUpCUVhWQ0xIZENRVUYzUWl4alFVRmpMRWxCUVVrN1FVRkZka1lzVVVGQlNTeG5Ra0ZCWjBJN1FVRkRiRUlzVFVGQlFVRXNUVUZCU3l4dFFrRkJiVUlzWlVGQlpTeE5RVUZOTzBGQlFVRXNTVUZETDBNN1FVRkZRU3hKUVVGQlFTeE5RVUZMTEhkQ1FVRjNRaXhUUVVGVE8wRkJSWFJETERCQ1FVRnpRaXhSUVVGUkxGTkJRVTlCTEUxQlFVc3NVMEZCVXl4SFFVRkhMRU5CUVVNN1FVRkRka1FzTWtKQlFYVkNMRkZCUVZFc1UwRkJUMEVzVFVGQlN5eFRRVUZUTEVkQlFVY3NRMEZCUXp0QlFVTjRSQ3hKUVVGQlFTeE5RVUZMTEcxQ1FVRnRRaXhoUVVGaE8wRkJRM0pETEcxQ1FVRmxMRTlCUVU4c1UwRkJVenRCUVVGQkxFVkJRMnBETzBGQlJVOHNUVUZCVFN3eVFrRkRWQ3hEUVVGRExGRkJRVFpDTEdWQlFYbENMRkZCUVd0Q0xGZEJRVzFDTEZWQlEyaEdPMEZCUTA0c1VVRkJTU3hEUVVGRExGRkJRVkU3UVVGRFdDeHZRa0ZCWXl4TFFVRkxMRU5CUVVNN1FVRkRjRUk3UVVGQlFTeEpRVU5HTzBGQlJVRXNWVUZCVFVFc1VVRkJUeXhaUVVGWk8wRkJSWHBDTEZWQlFVMHNWMEZCVnl4UFFVRlBMRU5CUVVNN1FVRkRla0lzVlVGQlRTeFBRVUZQTEU5QlFVOHNRMEZCUXp0QlFVTnlRaXhWUVVGTkxGZEJRVmNzVDBGQlR5eERRVUZETzBGQlJYcENMRkZCUVVrN1FVRkRTaXhSUVVGSk8wRkJSVW9zVVVGQlNTeGhRVUZoTEZsQlFWa3NZVUZCWVN4alFVRmpPMEZCUTNSRUxGbEJRVTBzU1VGQlNTeE5RVUZOTEhkRFFVRjNRenRCUVVGQkxFbEJRekZFTzBGQlJVRXNVVUZCU1N4aFFVRmhMR05CUVdNN1FVRkROMElzV1VGQlRTeFpRVUZaTEU5QlFVOHNRMEZCUXl4RlFVRkZPMEZCUXpWQ0xGbEJRVTBzY1VKQlFYRkNMSEZDUVVGeFFpd3lRa0ZCTWtJc1VVRkJVU3hEUVVGRE8wRkJRM0JHTEhWQ1FVRnBRaXhMUVVGTExFOUJRVThzUTBGQlF5eEhRVUZITEUxQlFVMHNTVUZCU1N4SFFVRkhMRU5CUVVNc1NVRkJTVHRCUVVOdVJDeG5Ra0ZCVlVFc1RVRkJTeXh0UWtGQmJVSXNWMEZCVnl4UFFVRlBMRmRCUVZjc1kwRkJZenRCUVVGQkxFbEJReTlGTEU5QlFVODdRVUZEVEN4WlFVRk5MRTlCUVU4c1QwRkJUeXhEUVVGRE8wRkJSWEpDTEZWQlFVa3NUVUZCVFN4UlFVRlJMRWxCUVVrc1IwRkJSenRCUVVWMlFpeDVRa0ZCYVVJc1NVRkJTU3hMUVVGTE8wRkJRekZDTEd0Q1FVRlZRU3hOUVVGTExGRkJRVkVzWTBGQll6dEJRVU55UXl4bFFVRlBMRXRCUVVzc1QwRkJUenRCUVVOdVFpeFpRVUZKTEZsQlFWa3NWVUZCVlR0QlFVTXhRaXhwUWtGQlV5eEpRVUZKTEVkQlFVY3NTVUZCU1N4TFFVRkxMRkZCUVZFc1MwRkJTenRCUVVOd1F5eGpRVUZKTEU5QlFVOHNTMEZCU3l4RFFVRkRMRTFCUVUwc1ZVRkJWVHRCUVVNdlFpeHJRa0ZCVFN4SlFVRkpMRlZCUVZVc2QwSkJRWGRDTEVOQlFVTXNhMEpCUVd0Q08wRkJRVUVzVlVGRGFrVTdRVUZEUVN4VlFVRkJRU3hOUVVGTExGRkJRVkVzVjBGQlZ5eEpRVUZKTEdkQ1FVRm5RaXhMUVVGTExFTkJRVU1zUjBGQlJ5eE5RVUZOTzBGQlFVRXNVVUZETjBRN1FVRkJRU3hOUVVOR0xFOUJRVTg3UVVGRFRDeDVRa0ZCYVVJc1MwRkJTenRCUVVOMFFpeHJRa0ZCVlVFc1RVRkJTeXhSUVVGUkxHTkJRV003UVVGRGNrTXNaVUZCVHl4TFFVRkxMRTlCUVU4N1FVRkRia0lzVVVGQlFVRXNUVUZCU3l4UFFVRlBMRWxCUVVrc1NVRkJTU3hYUVVGWExFdEJRVXNzVVVGQlVTeExRVUZMTEZsQlFWa3NZMEZCWXl4SFFVRkhMRTlCUVU4N1FVRkJRU3hOUVVOMlJqdEJRVUZCTEVsQlEwWTdRVUZGUVN4VlFVRk5MRkZCUVZGQkxFMUJRVXNzVlVGQlZUdEJRVU0zUWl4VlFVRk5MR0ZCUVdGQkxFMUJRVXNzVjBGQlZ5eEpRVUZKTEV0QlFVc3NUVUZCVFR0QlFVTnNSQ3hSUVVGSk8wRkJRMFlzVlVGQlNTeFhRVUZYTEdGQlFXRTdRVUZETlVJc1YwRkJTeXhSUVVGUkxFOUJRVXRCTEUxQlFVc3NUMEZCVHl4VlFVRlZMRWxCUVVrc1EwRkJRenRCUVVNM1F5eFpRVUZOUXl4VlFVRlRSQ3hOUVVGTE8wRkJRVUVzVVVGRGFFSXNNa0pCUVRKQ0xGRkJRVkU3UVVGQlFTeFJRVUZITzBGQlFVRXNVVUZCVXp0QlFVRkJMRkZCUVdkQ08wRkJRVUVzVVVGQldTeExRVUZMTzBGQlFVRXNVVUZEYUVZc2VVSkJRWGxDTEZGQlFWRTdRVUZCUVN4TlFVRkRPMEZCUTNSRExGVkJRVWxETEZsQlFWY3NSMEZCUnp0QlFVTm9RaXgxUWtGQlpTeHBSRUZCYVVRc1UwRkJVeXhYUVVGWExFdEJRVXNzUjBGQlJ6dEJRVUZCTEUxQlF6bEdPMEZCUTBFc2IwSkJRV01zUzBGQlMwRXNUMEZCVFR0QlFVRkJMRWxCUXpOQ0xGVkJRVVU3UVVGRFFTeE5RVUZCUkN4TlFVRkxMR0ZCUVdFc1MwRkJTenRCUVVGQkxFbEJRM3BDTzBGQlFVRXNSVUZEUmp0QlFVdEVMRTFCUVUwc1RVRkJUU3hQUVVObUxGZEJRVzFDTEdOQlFYZENMR05CUVdkRExHVkJRek5GTEdWQlFUSkRMRmxCUVc5Rk8wRkJRMnBJTEZWQlFVMUJMRkZCUVU4c1dVRkJXVHRCUVVONlFpeFZRVUZOTEZWQlFWVXNaVUZCWlN4SlFVRkpMRk5CUVZNN1FVRkROVU1zVVVGQlNTeERRVUZETEZOQlFWTTdRVUZEV2l4WlFVRk5MRWxCUVVrc1RVRkJUU3cyUTBGQk5rTXNVMEZCVXl4RlFVRkZPMEZCUVVFc1NVRkRNVVU3UVVGRFFTeFZRVUZOTEVOQlFVTXNaVUZCWlN4MVFrRkJkVUlzZDBKQlFYZENMR05CUVdNc1NVRkJTVHRCUVVWMlJpeFZRVUZOTEdGQlFXRXNZVUZCWVR0QlFVTm9ReXhWUVVGTkxHTkJRV01zWTBGQll6dEJRVVZzUXl4UlFVRkpMRzFDUVVGdFFqdEJRVU4yUWl4UlFVRkpMRzFDUVVFMlFpeERRVUZETzBGQlJXeERMRlZCUVUwc2NVSkJRU3RDTEVOQlFVTTdRVUZEZEVNc1ZVRkJUU3h6UWtGQlowTXNRMEZCUXp0QlFVTjJReXhWUVVGTkxHOUNRVUU0UWl4RFFVRkRPMEZCUlhKRExGVkJRVTBzYVVKQlFXbENRU3hOUVVGTExGVkJRVlU3UVVGRGRFTXNWVUZCVFN4dlFrRkJiMEpCTEUxQlFVc3NWMEZCVnl4aFFVRmhMRU5CUVVNN1FVRkRlRVFzVlVGQlRTeHRRa0ZCYlVKQkxFMUJRVXNzVjBGQlZ5eGhRVUZoTEVOQlFVTTdRVUZEZGtRc1ZVRkJUU3h4UWtGQmNVSkJMRTFCUVVzc1YwRkJWeXhqUVVGakxFTkJRVU03UVVGRE1VUXNWVUZCVFN4dlFrRkJiMEpCTEUxQlFVc3NWMEZCVnl4alFVRmpMRU5CUVVNN1FVRkZla1FzVVVGQlNUdEJRVU5HTEU5QlFVTXNhMEpCUVd0Q0xHZENRVUZuUWl4SlFVRkpMR05CUVdNc1QwRkJUenRCUVVjMVJDeGxRVUZUTEVsQlFVa3NSMEZCUnl4SlFVRkpMRmxCUVZrc1MwRkJTenRCUVVOdVF5eHBRMEZCZVVJc1lVRkJZU3hEUVVGRExFZEJRVWNzYjBKQlFXOUNMRzFDUVVGdFFpeFhRVUZYTEdGQlFXRXNRMEZCUXl4RFFVRkRPMEZCUVVFc1RVRkROMGM3UVVGSFFTeGxRVUZUTEVsQlFVa3NSMEZCUnl4SlFVRkpMR0ZCUVdFc1MwRkJTenRCUVVOd1F6dEJRVUZCTEZWQlEwa3NZMEZCWXl4RFFVRkRPMEZCUVVFc1ZVRkJSenRCUVVGQkxGVkJRWEZDTzBGQlFVRXNWVUZCYlVJN1FVRkJRU3hWUVVGWExHRkJRV0VzWTBGQll5eERRVUZETzBGQlFVRXNVVUZCUXp0QlFVRkJMRTFCUTNoSE8wRkJSVUVzVlVGQlNTeHRRa0ZCYlVJc2IwSkJRVzlDTzBGQlF6TkRMRlZCUVVrc2EwSkJRV3RDTEcxQ1FVRnRRanRCUVVONlF5eFZRVUZKTEc5Q1FVRnZRaXh4UWtGQmNVSTdRVUZETjBNc1ZVRkJTU3h0UWtGQmJVSXNiMEpCUVc5Q08wRkJRek5ETEdWQlFWTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1dVRkJXU3hMUVVGTE8wRkJRMjVETEZGQlFVRkJMRTFCUVVzc1VVRkJVU3hyUWtGQmEwSXNTVUZCU1N4dFFrRkJiVUlzUTBGQlF6dEJRVU4yUkN4UlFVRkJRU3hOUVVGTExGRkJRVkVzYVVKQlFXbENMRWxCUVVrc2MwSkJRWE5DTEdGQlFXRXNRMEZCUXl4RFFVRkRPMEZCUVVFc1RVRkRla1U3UVVGRFFTeGxRVUZUTEVsQlFVa3NSMEZCUnl4SlFVRkpMR0ZCUVdFc1MwRkJTenRCUVVOd1F5eFJRVUZCUVN4TlFVRkxMRkZCUVZFc2JVSkJRVzFDTEVsQlFVa3NiMEpCUVc5Q0xFTkJRVU03UVVGRGVrUXNVVUZCUVVFc1RVRkJTeXhSUVVGUkxHdENRVUZyUWl4SlFVRkpMSFZDUVVGMVFpeGpRVUZqTEVOQlFVTXNRMEZCUXp0QlFVRkJMRTFCUXpWRk8wRkJSVUVzVlVGQlNTeFBRVUU0UXp0QlFVTm9SQ3hqUVVGTkxFVkJRVU1zVVVGQlVTd3dRa0ZCTUVJc1owTkJRU3RDTEVsQlFVazdRVUZGTlVVc1dVRkJTU3h6UWtGQmMwSXNWMEZCVnl4WlFVRlpPMEZCUXk5RExHZENRVUZOTEVsQlFVa3NUVUZCVFN3eVFrRkRXaXhWUVVGVkxEUkVRVUUwUkN4elFrRkJjMElzVFVGQlRTeEpRVUZKTzBGQlFVRXNVVUZETlVjN1FVRkhRU3hwUWtGQlV5eEpRVUZKTEVkQlFVY3NTVUZCU1N4WlFVRlpMRXRCUVVzN1FVRkRia01zWjBKQlFVMHNVVUZCVVN4aFFVRmhMRU5CUVVNN1FVRkROVUlzWjBKQlFVMUZMR0ZCUVZrc1RVRkJUVVlzVFVGQlN5eGpRVUZqTEZGQlFWRXNjMEpCUVhOQ0xFdEJRVXNzUjBGQlJ5eHRRa0ZCYlVJc1EwRkJReXhEUVVGRE8wRkJRM1JITEdOQlFVbEZMR1ZCUVdNc1IwRkJSenRCUVVOdVFpd3lRa0ZCWlN4dlFrRkJiMElzUTBGQlF5eHBRa0ZCYVVJc1UwRkJVeXhIUVVGSE8wRkJRVUVzVlVGRGJrVTdRVUZCUVN4UlFVTkdPMEZCUjBFc2FVSkJRVk1zU1VGQlNTeEhRVUZITEVsQlFVa3NZVUZCWVN4TFFVRkxPMEZCUTNCRExHZENRVUZOTEZGQlFWRXNZMEZCWXl4RFFVRkRPMEZCUXpkQ0xHZENRVUZOTEZkQlFWY3NZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJRenRCUVVWeVF5eGpRVUZKTEZWQlFWVTdRVUZGV2l4clFrRkJUVUVzWVVGQldVWXNUVUZCU3l4bFFVRmxMRkZCUVZFc2RVSkJRWFZDTEV0QlFVc3NSMEZCUnl4dlFrRkJiMElzUTBGQlF5eEhRVUZITEVOQlFVTTdRVUZEZEVjc1owSkJRVWxGTEdWQlFXTXNSMEZCUnp0QlFVTnVRaXcyUWtGQlpTeHRRMEZCYlVNc1EwRkJReXhwUWtGQmFVSXNVMEZCVXl4SFFVRkhPMEZCUVVFc1dVRkRiRVk3UVVGQlFTeFZRVU5HTEU5QlFVODdRVUZGVEN4clFrRkJUVUVzWVVGRFJrWXNUVUZCU3l4bFFVRmxMRkZCUVZFc2RVSkJRWFZDTEV0QlFVc3NSMEZCUnl4SFFVRkhMR2REUVVGblF5eExRVUZMTEVOQlFVTTdRVUZEZUVjc1owSkJRVWxGTEdWQlFXTXNSMEZCUnp0QlFVTnVRaXcyUWtGQlpTeHhRa0ZCY1VJc1EwRkJReXhSUVVGUkxIbENRVUY1UWl4RFFVRkRMRU5CUVVNc1owSkJRV2RDTEZOQlFWTXNSMEZCUnp0QlFVRkJMRmxCUTNSSE8wRkJRVUVzVlVGRFJqdEJRVUZCTEZGQlEwWTdRVUZCUVN4TlFVTkdPMEZCUlVFc1ZVRkJTVHRCUVVWS0xGVkJRVWtzVDBGQk9FTTdRVUZEYUVRc2IwSkJRVmtzVFVGQlRVWXNUVUZCU3p0QlFVRkJMRlZCUTI1Q08wRkJRVUVzVlVGQlpTeGxRVUZsTzBGQlFVRXNWVUZCVVR0QlFVRkJMRlZCUVdFN1FVRkJRU3hWUVVGdlFqdEJRVUZCTEZGQlFXZENPMEZCUVVFc1RVRkROMFlzVDBGQlR6dEJRVU5NTEc5Q1FVRlpMRTFCUVUxQkxFMUJRVXM3UVVGQlFTeFZRVU51UWp0QlFVRkJMRlZCUVdVN1FVRkJRU3hWUVVGclFqdEJRVUZCTEZWQlFXMUNPMEZCUVVFc1ZVRkJXVHRCUVVGQkxGVkJRVzFDTzBGQlFVRXNWVUZEYmtZN1FVRkJRU3hWUVVGdlFqdEJRVUZCTEZGQlFXZENPMEZCUVVFc1RVRkRNVU03UVVGRlFTeFZRVUZKTEdOQlFXTXNSMEZCUnp0QlFVTnVRaXgxUWtGQlpTd3dRa0ZCTUVJN1FVRkJRU3hOUVVNelF6dEJRVVZCTEZsQlFVMHNVMEZCTWtJc1EwRkJRenRCUVVWc1F5eGxRVUZUTEVsQlFVa3NSMEZCUnl4SlFVRkpMR0ZCUVdFc1MwRkJTenRCUVVOd1F5eGpRVUZOTEZOQlFWTkJMRTFCUVVzc1VVRkJVU3h4UWtGQmNVSXNTVUZCU1N4RFFVRkRPMEZCUTNSRUxGbEJRVWtzVjBGQlZ5eHZRa0ZCYjBJc1EwRkJReXhIUVVGSE8wRkJSWEpETEdsQ1FVRlBMRXRCUVVzc1kwRkJZeXhEUVVGRExFTkJRVVU3UVVGRE4wSTdRVUZCUVN4UlFVTkdPMEZCUlVFc1kwRkJUU3d5UWtGQk1rSkJMRTFCUVVzc1ZVRkJWVHRCUVVWb1JDeGpRVUZOTEcxQ1FVRnRRa0VzVFVGQlN5eFhRVUZYTEVsQlFVa3NRMEZCUXp0QlFVVTVReXhaUVVGSkxHMUNRVUZ0UWp0QlFVTjJRaXhaUVVGSkxFMUJRVFpDTEdGQlFXRTdRVUZET1VNc1dVRkJTVHRCUVVOR0xHZENRVUZOUlN4aFFVRlpSaXhOUVVGTE8wRkJRVUVzV1VGRGJrSTdRVUZCUVN4WlFVRlJPMEZCUVVFc1dVRkJhMElzYlVKQlFXMUNPMEZCUVVFc1dVRkJSeXh0UWtGQmJVSTdRVUZCUVN4WlFVRkhMRzFDUVVGdFFqdEJRVUZCTEZWQlFVVTdRVUZETDBZc1kwRkJTVVVzWlVGQll5eEhRVUZITzBGQlEyNUNMREpDUVVGbExEUkRRVUUwUXl4RFFVRkRMRWRCUVVjN1FVRkJRU3hWUVVOcVJUdEJRVU5CTEdOQlFVa3NhMEpCUVd0Q0xHMUNRVUZ0UWp0QlFVTjZReXhuUWtGQlRTeFhRVUZYUml4TlFVRkxMRkZCUVZFc2FVSkJRV2xDTzBGQlF5OURMSFZDUVVGaFFTeE5RVUZMTEZGQlFWRXNhVUpCUVdsQ08wRkJRek5ETEdkQ1FVRk5MR0ZCUVdGQkxFMUJRVXNzVVVGQlVTeHBRa0ZCYVVJN1FVRkRha1FzWjBKQlFVMHNZVUZCWVVFc1RVRkJTeXhSUVVGUkxHbENRVUZwUWp0QlFVTnFSQ3huUWtGQlRTeFBRVUZQTEVOQlFVTTdRVUZEWkN4dFFrRkJVMGNzUzBGQlNTeEhRVUZIUVN4TFFVRkpMRmxCUVZsQkxFMUJRVXM3UVVGRGJrTXNhVUpCUVVzc1MwRkJTMGdzVFVGQlN5eFJRVUZSTEdGQlFXRXNTVUZCU1Vjc1JVRkJReXhEUVVGRE8wRkJRVUVzVlVGRE5VTTdRVUZEUVN4VlFVRkJTQ3hOUVVGTExGTkJRVk1zVlVGQlZUdEJRVVY0UWl4blFrRkJUU3hQUVVGUExFdEJRVXNzVDBGQlR5eERRVUZETEVkQlFVY3NUVUZCVFN4SlFVRkpMRWRCUVVjc1EwRkJRenRCUVVNelF5eHBRa0ZCVHl3eVFrRkJNa0lzVVVGQlVUdEJRVVV4UXl4blFrRkJUU3h2UWtGQmIwSXNaMEpCUVdkQ0xIbENRVUY1UWl4alFVRmpMRU5CUVVNc1EwRkJRenRCUVVWdVJpeGpRVUZKTEZOQlFWTXNWVUZCVlR0QlFVTnlRaXhuUWtGQlNTeHpRa0ZCYzBJc1kwRkJZenRCUVVOMFF5eHZRa0ZCVFN4SlFVRkpMRTFCUVUwc2QwTkJRWGRETzBGQlFVRXNXVUZETVVRN1FVRkRRU3hyUWtGQlRTeGhRVUYxUWl4RFFVRkRPMEZCUXpsQ0xHZENRVUZKTEZsQlFWa3NZVUZCWVR0QlFVTTNRaXh4UWtGQlUwY3NTMEZCU1N4SFFVRkhRU3hMUVVGSkxFMUJRVTFCTEUxQlFVczdRVUZETjBJc2IwSkJRVTBzVTBGQlUwZ3NUVUZCU3l4UlFVRlJMRmRCUVZjN1FVRkRka01zYjBKQlFVMHNhVUpCUVdsQ1J5eFBRVUZOTEU5QlFVOHNTVUZCU1N4VFFVRlpTQ3hOUVVGTExGRkJRVkVzVTBGQlV5eEpRVUZKTzBGQlF6bEZMSGxDUVVGWExFdEJRVXRCTEUxQlFVc3NZVUZCWVN4UlFVRlJMR05CUVdNc1EwRkJRenRCUVVGQkxGbEJRek5FTzBGQlEwRXNiVUpCUVU4c1MwRkJTeXhEUVVGRExFMUJRVTBzVFVGQlRTeFpRVUZaTEV0QlFVc3NRMEZCUXp0QlFVRkJMRlZCUXpkRExFOUJRVTg3UVVGSFRDeG5Ra0ZCU1N4elFrRkJjMElzWjBKQlFXZENMRTlCUVU4c1IwRkJSenRCUVVOc1JDeHZRa0ZCVFN4WlFVRlpRU3hOUVVGTExHTkJRV01zVlVGQlZUdEJRVU12UXl4dlFrRkJUU3hqUVVGakxIRkNRVUZ4UWl4UlFVRlJPMEZCUTJwRUxHdENRVUZKTEdkQ1FVRm5RaXhWUVVGaExFTkJRVU1zZVVKQlFYbENMRWxCUVVrc1IwRkJSenRCUVVOb1JTeHpRa0ZCVFN4SlFVRkpMRTFCUVUwc01FSkJRVEJDTEVsQlFVa3NSVUZCUlR0QlFVRkJMR05CUTJ4RU8wRkJSMEVzYVVOQlFXMUNPMEZCUlc1Q0xIRkNRVUZQTEV0QlFVczdRVUZCUVN4blFrRkRWanRCUVVGQkxHZENRVUZOTzBGQlFVRXNaMEpCUVUwN1FVRkJRU3hyUWtGRFZqdEJRVUZCTEd0Q1FVTkJMRlZCUVZWQkxFMUJRVXNzY1VKQlFYRkNMRmRCUVZjc1QwRkJUeXhoUVVGaExFbEJRVWs3UVVGQlFTeHJRa0ZEZGtVc1UwRkJVeXhOUVVGTk8wRkJRMklzYjBKQlFVRkJMRTFCUVVzc2EwSkJRV3RDTEUxQlFVMDdRVUZCUVN4clFrRkRMMEk3UVVGQlFTeG5Ra0ZEUmp0QlFVRkJMR2RDUVVOQk8wRkJRVUVzWTBGRFJpeERRVUZETzBGQlFVRXNXVUZEU0N4UFFVRlBPMEZCUTB3c2IwSkJRVTBzZDBKQlFYZENMR3REUVVGclF5eEpRVUZKTzBGQlEzQkZMRzlDUVVGTkxFOUJRVThzU1VGQlNTeHpRa0ZCYzBJc1NVRkJTVHRCUVVNelF5eHJRa0ZCU1N4WFFVRlhMRXRCUVVzc1VVRkJVU3hMUVVGTExGbEJRVmtzUzBGQlN5eFZRVUZWTEVWQlEzWkVMRWxCUVVsQkxFMUJRVXNzVDBGQlR5eFRRVUZUTEZsQlFWa3NZVUZCWVN4TFFVRkxMRlZCUVZVc1EwRkJRenRCUVVOMlJTeHhRa0ZCVHl4TFFVRkxMRU5CUVVNc1RVRkJUU3hOUVVGTkxFMUJRVTBzUzBGQlN5eERRVUZETzBGQlFVRXNXVUZEZGtNN1FVRkJRU3hWUVVOR08wRkJRVUVzVVVGRFJpeFZRVUZGTzBGQlEwRXNWVUZCUVVFc1RVRkJTeXhoUVVGaExIZENRVUYzUWp0QlFVTXhReXhqUVVGSkxGTkJRVk1zV1VGQldTeFpRVUZaTzBGQlEyNURMRmxCUVVGQkxFMUJRVXNzVFVGQlRTeFZRVUZWTzBGQlFVRXNWVUZEZGtJN1FVRkRRU3hqUVVGSkxFTkJRVU1zYTBKQlFXdENPMEZCUTNKQ0xGbEJRVUZCTEUxQlFVc3NhMEpCUVd0Q0xFMUJRVTA3UVVGQlFTeFZRVU12UWp0QlFVRkJMRkZCUTBZN1FVRkJRU3hOUVVOR08wRkJSVUVzVlVGQlNTeG5Ra0ZCWjBJN1FVRkRiRUlzVVVGQlFVRXNUVUZCU3l4elFrRkJjMElzWlVGQlpTeE5RVUZOTzBGQlFVRXNUVUZEYkVRN1FVRkZRU3hoUVVGUE8wRkJRVUVzU1VGRFZDeFZRVUZGTzBGQlEwRXNUVUZCUVVFc1RVRkJTeXhoUVVGaExHTkJRV003UVVGRmFFTXNlVUpCUVcxQ0xGRkJRVkVzVDBGQlMwRXNUVUZCU3l4clFrRkJhMElzUTBGQlF5eERRVUZETzBGQlEzcEVMREJDUVVGdlFpeFJRVUZSTEU5QlFVdEJMRTFCUVVzc2EwSkJRV3RDTEVOQlFVTXNRMEZCUXp0QlFVTXhSQ3gzUWtGQmEwSXNVVUZCVVN4UFFVRkxRU3hOUVVGTExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlJUVkRMRlZCUVVrc2NVSkJRWEZDTEVkQlFVYzdRVUZETVVJc1VVRkJRVUVzVFVGQlN5eHpRa0ZCYzBJc1owSkJRV2RDTzBGQlFVRXNUVUZETjBNN1FVRkRRU3gxUWtGQmFVSXNVVUZCVVN4UFFVRkxRU3hOUVVGTExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlFVRXNTVUZETjBNN1FVRkJRU3hGUVVOR08wRkJTMDhzVFVGQlRTeGxRVUZsTEVOQlFVTXNZMEZCTkVJN1FVRkRka1FzVlVGQlRVRXNVVUZCVHl4WlFVRlpPMEZCUTNwQ0xGVkJRVTBzVlVGQlZTeGxRVUZsTEVsQlFVa3NVMEZCVXp0QlFVTTFReXhSUVVGSkxFTkJRVU1zVTBGQlV6dEJRVU5hTEZsQlFVMHNTVUZCU1N4TlFVRk5MRzlDUVVGdlFqdEJRVUZCTEVsQlEzUkRPMEZCUTBFc1ZVRkJUU3huUWtGQlowSXNVVUZCVVN4RFFVRkRPMEZCUnk5Q0xGVkJRVTBzYTBKQlFXdENRU3hOUVVGTExHbENRVUZwUWl4aFFVRmhPMEZCUXpORUxGRkJRVWtzYjBKQlFXOUNMRWRCUVVjN1FVRkRla0lzY1VKQlFXVXNhVU5CUVd0RE8wRkJRVUVzU1VGRGJrUTdRVUZEUVN4SlFVRkJRU3hOUVVGTExGTkJRVk1zWlVGQlpUdEJRVUZCTEVWQlF5OUNPMEZCUlU4c1RVRkJUU3cyUWtGQk5rSXNRMEZCUXl4WlFVRnpSVHRCUVVNdlJ5eFZRVUZOTEZWQlFUWkNMRU5CUVVNN1FVRkRjRU1zWlVGQlZ5eFZRVUZWTEZOQlFWTTdRVUZETlVJc1dVRkJUU3hQUVVGUExFOUJRVThzUTBGQlF6dEJRVU55UWl4VlFVRkpMRU5CUVVNc1RVRkJUU3hSUVVGUkxFbEJRVWtzUzBGQlN5eFpRVUZaTEUxQlFVMDdRVUZETlVNc1owSkJRVkVzUzBGQlN5eExRVUZMTEUxQlFVMDdRVUZCUVN4TlFVTXhRanRCUVVGQkxFbEJRMFk3UVVGRFFTeFhRVUZQTzBGQlFVRXNSVUZEVkRzN08wRkRjR2xDUVN4UFFVRkxMRmxCUVZrc1EwRkJReXhQUVVFeVF6dEJRVU16UkN4WlFVRlJMRWRCUVVjc1MwRkJTeXhOUVVGTk8wRkJRVUVzVFVGRGNFSXNTMEZCU3p0QlFVTklMRmxCUVVrN1FVRkRSaXhuUTBGQmMwSXNSMEZCUnl4TFFVRkxMRVZCUVVVc1JVRkRNMEk3UVVGQlFTeFpRVU5ITEUxQlFVMHNXVUZCV1N4RlFVRkRMRTFCUVUwc1dVRkJWeXhEUVVGdFFqdEJRVUZCTEZsQlEzWkVMRk5CUVU4c1dVRkJXU3hGUVVGRExFMUJRVTBzWVVGQllTeEpRVUZITEVOQlFXMUNPMEZCUVVFc1ZVRkJRenRCUVVGQkxGRkJRM2hGTEZOQlFWTXNTMEZCU3p0QlFVTmFMSE5DUVVGWkxFVkJRVU1zVFVGQlRTeGhRVUZoTEVsQlFVY3NRMEZCYlVJN1FVRkJRU3hSUVVONFJEdEJRVU5CTzBGQlFVRXNUVUZEUml4TFFVRkxPMEZCUTBnc1dVRkJTVHRCUVVOR0xITkNRVUZaTEVkQlFVY3NTMEZCU3l4RlFVRkZMRVZCUVVVc1MwRkJTeXhOUVVGTkxGbEJRVmtzUlVGQlF5eE5RVUZOTEZkQlFWVXNRMEZCYlVJc1IwRkJSeXhUUVVGUExGbEJRVms3UVVGQlFTeFpRVU5xUWl4TlFVRk5PMEZCUVVFc1dVRkRUanRCUVVGQkxGVkJRMFlzUTBGQmJVSXNRMEZCUXp0QlFVRkJMRkZCUXpWSExGTkJRVk1zUzBGQlN6dEJRVU5hTEhOQ1FVRlpMRVZCUVVNc1RVRkJUU3haUVVGWkxFbEJRVWNzUTBGQmJVSTdRVUZCUVN4UlFVTjJSRHRCUVVOQk8wRkJRVUVzVFVGRFJpeExRVUZMTzBGQlEwZ3NXVUZCU1R0QlFVTkdMR2RDUVVGTkxFVkJRVU1zVFVGQlN5eEpRVUZKTEVkQlFVY3NTMEZCU3p0QlFVTjRRaXhuUWtGQlRTeFpRVUZaTEhOQ1FVRnpRaXhMUVVGTE8wRkJRemRETEhOQ1FVRlpMRVZCUVVNc1RVRkJUU3h0UWtGQmJVSXNTMEZCU3l4VlFVRlRMRU5CUVcxQ08wRkJRVUVzVVVGRGVrVXNVMEZCVXl4TFFVRkxPMEZCUTFvc2MwSkJRVmtzUlVGQlF5eE5RVUZOTEcxQ1FVRnRRaXhKUVVGSExFTkJRVzFDTzBGQlFVRXNVVUZET1VRN1FVRkRRVHRCUVVGQkxFMUJRMFlzUzBGQlN6dEJRVU5JTEZsQlFVazdRVUZEUml4blFrRkJUU3hGUVVGRExGZEJRVmNzVVVGQlR5eEpRVUZKTEVkQlFVY3NTMEZCU3p0QlFVTnlReXhuUWtGQlRTeHJRa0ZCYTBJc2MwSkJRWE5DTEZkQlFWY3NUMEZCVHp0QlFVTm9SU3h6UWtGQldTeEZRVUZETEUxQlFVMHNiVUpCUVcxQ0xFdEJRVXNzWjBKQlFXVXNRMEZCYlVJN1FVRkJRU3hSUVVNdlJTeFRRVUZUTEV0QlFVczdRVUZEV2l4elFrRkJXU3hGUVVGRExFMUJRVTBzYlVKQlFXMUNMRWxCUVVjc1EwRkJiVUk3UVVGQlFTeFJRVU01UkR0QlFVTkJPMEZCUVVFc1RVRkRSaXhMUVVGTE8wRkJRMGdzV1VGQlNUdEJRVU5HTEdkQ1FVRk5MRVZCUVVNc1QwRkJUeXhSUVVGUExFbEJRVWtzUjBGQlJ5eExRVUZMTzBGQlEycERMR2RDUVVGTkxHdENRVUZyUWl4alFVRmpMRTlCUVU4c1QwRkJUenRCUVVOd1JDeHpRa0ZCV1N4RlFVRkRMRTFCUVUwc1ZVRkJWU3hMUVVGTExHZENRVUZsTEVOQlFXMUNPMEZCUVVFc1VVRkRkRVVzVTBGQlV5eExRVUZMTzBGQlExb3NjMEpCUVZrc1JVRkJReXhOUVVGTkxGVkJRVlVzU1VGQlJ5eERRVUZ0UWp0QlFVRkJMRkZCUTNKRU8wRkJRMEU3UVVGQlFTeE5RVU5HTEV0QlFVczdRVUZEU0N4WlFVRkpPMEZCUTBZc1owSkJRVTBzVlVGQlZTeEhRVUZITEV0QlFVczdRVUZEZUVJc2VVSkJRV1VzVDBGQlR6dEJRVU4wUWl4elFrRkJXU3hGUVVGRExFMUJRVTBzVlVGQlV5eERRVUZ0UWp0QlFVRkJMRkZCUTJwRUxGTkJRVk1zUzBGQlN6dEJRVU5hTEhOQ1FVRlpMRVZCUVVNc1RVRkJUU3hYUVVGWExFbEJRVWNzUTBGQmJVSTdRVUZCUVN4UlFVTjBSRHRCUVVOQk8wRkJRVUVzVFVGRFJpeExRVUZMTzBGQlEwZ3NXVUZCU1R0QlFVTkdMR2RDUVVGTkxFVkJRVU1zVjBGQlZ5eGpRVUZqTEZGQlFWRXNaVUZCWlN4UlFVRlBMRWxCUVVrc1IwRkJSeXhMUVVGTE8wRkJRekZGTEdOQlFVa3NWMEZCVnl4alFVRmpMRkZCUVZFc1pVRkJaU3hQUVVGUExFVkJRM1JFTzBGQlFVRXNXVUZEUnl4aFFVRlhPMEZCUTFRc01FSkJRVmtzUlVGQlF5eE5RVUZOTEU5QlFVOHNTMEZCU3l4UlFVRlBMRWRCUVhGQ0xESkNRVUV5UWl4UFFVRlBMRU5CUVVNN1FVRkJRU3haUVVOb1J6dEJRVUZCTEZsQlEwRXNVMEZCVHp0QlFVTk1MREJDUVVGWkxFVkJRVU1zVFVGQlRTeFBRVUZQTEVsQlFVY3NRMEZCYlVJN1FVRkJRU3haUVVOc1JEdEJRVUZCTEZWQlFVTTdRVUZCUVN4UlFVTllMRk5CUVZNc1MwRkJTenRCUVVOYUxITkNRVUZaTEVWQlFVTXNUVUZCVFN4UFFVRlBMRWxCUVVjc1EwRkJiVUk3UVVGQlFTeFJRVU5zUkR0QlFVTkJPMEZCUVVFc1RVRkRSaXhMUVVGTE8wRkJRMGdzV1VGQlNUdEJRVU5HTEdkQ1FVRk5MRlZCUVZVc1IwRkJSeXhMUVVGTE8wRkJRM2hDTEhWQ1FVRmhMRTlCUVU4N1FVRkRjRUlzYzBKQlFWa3NSVUZCUXl4TlFVRk5MR2RDUVVGbExFTkJRVzFDTzBGQlFVRXNVVUZEZGtRc1UwRkJVeXhMUVVGTE8wRkJRMW9zYzBKQlFWa3NSVUZCUXl4TlFVRk5MR2xDUVVGcFFpeEpRVUZITEVOQlFXMUNPMEZCUVVFc1VVRkROVVE3UVVGRFFUdEJRVUZCTEUxQlEwWXNTMEZCU3p0QlFVTklMRmxCUVVrN1FVRkRSaXhuUWtGQlRVa3NjVUpCUVc5Q0xHOUNRVUZ2UWp0QlFVTTVReXh6UWtGQldTeEZRVUZETEUxQlFVMHNNRUpCUVRCQ0xFdEJRVXRCTEcxQ1FVRnBRaXhEUVVGdFFqdEJRVUZCTEZGQlEzaEdMRk5CUVZNc1MwRkJTenRCUVVOYUxITkNRVUZaTEVWQlFVTXNUVUZCVFN3d1FrRkJNRUlzU1VGQlJ5eERRVUZ0UWp0QlFVRkJMRkZCUTNKRk8wRkJRMEU3UVVGQlFTeE5RVU5HTzBGQlFVRXNTVUZEUmp0QlFVRkJMRVZCUTBZN0lpd0tJQ0FpYm1GdFpYTWlPaUJiSW1wdmFXNGlMQ0FpZDJGemJTSXNJQ0ozWVhOdElpd2dJbmRoYzIwaUxDQWlkMkZ6YlNJc0lDSjBaVzV6YjNJaUxDQWlaWEp5YjNKRGIyUmxJaXdnSW1raUxDQWliM0owUlc1MlNXNXBkR2xoYkdsNlpXUWlYUXA5Q2c9PVxuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge0VudiwgZW52LCBJbmZlcmVuY2VTZXNzaW9ufSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG5pbXBvcnQge09ydFdhc21NZXNzYWdlLCBTZXJpYWxpemFibGVNb2RlbGRhdGEsIFNlcmlhbGl6YWJsZVNlc3Npb25NZXRhZGF0YSwgU2VyaWFsaXphYmxlVGVuc29yTWV0YWRhdGEsIFRlbnNvck1ldGFkYXRhfSBmcm9tICcuL3Byb3h5LW1lc3NhZ2VzJztcbmltcG9ydCAqIGFzIGNvcmUgZnJvbSAnLi93YXNtLWNvcmUtaW1wbCc7XG5pbXBvcnQge2luaXRpYWxpemVXZWJBc3NlbWJseX0gZnJvbSAnLi93YXNtLWZhY3RvcnknO1xuXG5jb25zdCBpc1Byb3h5ID0gKCk6IGJvb2xlYW4gPT4gISFlbnYud2FzbS5wcm94eSAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xubGV0IHByb3h5V29ya2VyOiBXb3JrZXJ8dW5kZWZpbmVkO1xubGV0IGluaXRpYWxpemluZyA9IGZhbHNlO1xubGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG5sZXQgYWJvcnRlZCA9IGZhbHNlO1xuXG4vLyByZXNvbHZlOyByZWplY3RcbnR5cGUgUHJvbWlzZUNhbGxiYWNrczxUID0gdm9pZD4gPSBbKHJlc3VsdDogVCkgPT4gdm9pZCwgKHJlYXNvbjogdW5rbm93bikgPT4gdm9pZF07XG5cbmxldCBpbml0V2FzbUNhbGxiYWNrczogUHJvbWlzZUNhbGxiYWNrcztcbmxldCBpbml0T3J0Q2FsbGJhY2tzOiBQcm9taXNlQ2FsbGJhY2tzO1xuY29uc3QgY3JlYXRlU2Vzc2lvbkFsbG9jYXRlQ2FsbGJhY2tzOiBBcnJheTxQcm9taXNlQ2FsbGJhY2tzPFNlcmlhbGl6YWJsZU1vZGVsZGF0YT4+ID0gW107XG5jb25zdCBjcmVhdGVTZXNzaW9uRmluYWxpemVDYWxsYmFja3M6IEFycmF5PFByb21pc2VDYWxsYmFja3M8U2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhPj4gPSBbXTtcbmNvbnN0IGNyZWF0ZVNlc3Npb25DYWxsYmFja3M6IEFycmF5PFByb21pc2VDYWxsYmFja3M8U2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhPj4gPSBbXTtcbmNvbnN0IHJlbGVhc2VTZXNzaW9uQ2FsbGJhY2tzOiBBcnJheTxQcm9taXNlQ2FsbGJhY2tzPHZvaWQ+PiA9IFtdO1xuY29uc3QgcnVuQ2FsbGJhY2tzOiBBcnJheTxQcm9taXNlQ2FsbGJhY2tzPFNlcmlhbGl6YWJsZVRlbnNvck1ldGFkYXRhW10+PiA9IFtdO1xuY29uc3QgZW5kUHJvZmlsaW5nQ2FsbGJhY2tzOiBBcnJheTxQcm9taXNlQ2FsbGJhY2tzPHZvaWQ+PiA9IFtdO1xuY29uc3QgaXNPcnRFbnZJbml0aWFsaXplZENhbGxiYWNrczogQXJyYXk8UHJvbWlzZUNhbGxiYWNrczxib29sZWFuPj4gPSBbXTtcblxuY29uc3QgZW5zdXJlV29ya2VyID0gKCk6IHZvaWQgPT4ge1xuICBpZiAoaW5pdGlhbGl6aW5nIHx8ICFpbml0aWFsaXplZCB8fCBhYm9ydGVkIHx8ICFwcm94eVdvcmtlcikge1xuICAgIHRocm93IG5ldyBFcnJvcignd29ya2VyIG5vdCByZWFkeScpO1xuICB9XG59O1xuXG5jb25zdCBvblByb3h5V29ya2VyTWVzc2FnZSA9IChldjogTWVzc2FnZUV2ZW50PE9ydFdhc21NZXNzYWdlPik6IHZvaWQgPT4ge1xuICBzd2l0Y2ggKGV2LmRhdGEudHlwZSkge1xuICAgIGNhc2UgJ2luaXQtd2FzbSc6XG4gICAgICBpbml0aWFsaXppbmcgPSBmYWxzZTtcbiAgICAgIGlmIChldi5kYXRhLmVycikge1xuICAgICAgICBhYm9ydGVkID0gdHJ1ZTtcbiAgICAgICAgaW5pdFdhc21DYWxsYmFja3NbMV0oZXYuZGF0YS5lcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICBpbml0V2FzbUNhbGxiYWNrc1swXSgpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaW5pdC1vcnQnOlxuICAgICAgaWYgKGV2LmRhdGEuZXJyKSB7XG4gICAgICAgIGluaXRPcnRDYWxsYmFja3NbMV0oZXYuZGF0YS5lcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdE9ydENhbGxiYWNrc1swXSgpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnY3JlYXRlX2FsbG9jYXRlJzpcbiAgICAgIGlmIChldi5kYXRhLmVycikge1xuICAgICAgICBjcmVhdGVTZXNzaW9uQWxsb2NhdGVDYWxsYmFja3Muc2hpZnQoKSFbMV0oZXYuZGF0YS5lcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3JlYXRlU2Vzc2lvbkFsbG9jYXRlQ2FsbGJhY2tzLnNoaWZ0KCkhWzBdKGV2LmRhdGEub3V0ISk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjcmVhdGVfZmluYWxpemUnOlxuICAgICAgaWYgKGV2LmRhdGEuZXJyKSB7XG4gICAgICAgIGNyZWF0ZVNlc3Npb25GaW5hbGl6ZUNhbGxiYWNrcy5zaGlmdCgpIVsxXShldi5kYXRhLmVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjcmVhdGVTZXNzaW9uRmluYWxpemVDYWxsYmFja3Muc2hpZnQoKSFbMF0oZXYuZGF0YS5vdXQhKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2NyZWF0ZSc6XG4gICAgICBpZiAoZXYuZGF0YS5lcnIpIHtcbiAgICAgICAgY3JlYXRlU2Vzc2lvbkNhbGxiYWNrcy5zaGlmdCgpIVsxXShldi5kYXRhLmVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjcmVhdGVTZXNzaW9uQ2FsbGJhY2tzLnNoaWZ0KCkhWzBdKGV2LmRhdGEub3V0ISk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdyZWxlYXNlJzpcbiAgICAgIGlmIChldi5kYXRhLmVycikge1xuICAgICAgICByZWxlYXNlU2Vzc2lvbkNhbGxiYWNrcy5zaGlmdCgpIVsxXShldi5kYXRhLmVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWxlYXNlU2Vzc2lvbkNhbGxiYWNrcy5zaGlmdCgpIVswXSgpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAncnVuJzpcbiAgICAgIGlmIChldi5kYXRhLmVycikge1xuICAgICAgICBydW5DYWxsYmFja3Muc2hpZnQoKSFbMV0oZXYuZGF0YS5lcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcnVuQ2FsbGJhY2tzLnNoaWZ0KCkhWzBdKGV2LmRhdGEub3V0ISk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdlbmQtcHJvZmlsaW5nJzpcbiAgICAgIGlmIChldi5kYXRhLmVycikge1xuICAgICAgICBlbmRQcm9maWxpbmdDYWxsYmFja3Muc2hpZnQoKSFbMV0oZXYuZGF0YS5lcnIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kUHJvZmlsaW5nQ2FsbGJhY2tzLnNoaWZ0KCkhWzBdKCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlICdpcy1vcnQtZW52LWluaXRpYWxpemVkJzpcbiAgICAgIGlmIChldi5kYXRhLmVycikge1xuICAgICAgICBpc09ydEVudkluaXRpYWxpemVkQ2FsbGJhY2tzLnNoaWZ0KCkhWzFdKGV2LmRhdGEuZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlzT3J0RW52SW5pdGlhbGl6ZWRDYWxsYmFja3Muc2hpZnQoKSFbMF0oZXYuZGF0YS5vdXQhKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gIH1cbn07XG5cbmNvbnN0IHNjcmlwdFNyYyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyAoZG9jdW1lbnQ/LmN1cnJlbnRTY3JpcHQgYXMgSFRNTFNjcmlwdEVsZW1lbnQpPy5zcmMgOiB1bmRlZmluZWQ7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplV2ViQXNzZW1ibHlJbnN0YW5jZSA9IGFzeW5jKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1BST1hZICYmIGlzUHJveHkoKSkge1xuICAgIGlmIChpbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaW5pdGlhbGl6aW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ211bHRpcGxlIGNhbGxzIHRvIFxcJ2luaXRXYXNtKClcXCcgZGV0ZWN0ZWQuJyk7XG4gICAgfVxuICAgIGlmIChhYm9ydGVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3ByZXZpb3VzIGNhbGwgdG8gXFwnaW5pdFdhc20oKVxcJyBmYWlsZWQuJyk7XG4gICAgfVxuXG4gICAgaW5pdGlhbGl6aW5nID0gdHJ1ZTtcblxuICAgIC8vIG92ZXJ3cml0ZSB3YXNtIGZpbGVwYXRoc1xuICAgIGlmIChlbnYud2FzbS53YXNtUGF0aHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHNjcmlwdFNyYyAmJiBzY3JpcHRTcmMuaW5kZXhPZignYmxvYjonKSAhPT0gMCkge1xuICAgICAgICBlbnYud2FzbS53YXNtUGF0aHMgPSBzY3JpcHRTcmMuc3Vic3RyKDAsICsoc2NyaXB0U3JjKS5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHByb3h5V29ya2VyPy50ZXJtaW5hdGUoKTtcblxuICAgICAgY29uc3Qgd29ya2VyVXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihcbiAgICAgICAgICBbXG4gICAgICAgICAgICAvLyBUaGlzIHJlcXVpcmUoKSBmdW5jdGlvbiBpcyBoYW5kbGVkIGJ5IGVzYnVpbGQgcGx1Z2luIHRvIGxvYWQgZmlsZSBjb250ZW50IGFzIHN0cmluZy5cbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVxdWlyZS1pbXBvcnRzXG4gICAgICAgICAgICByZXF1aXJlKCcuL3Byb3h5LXdvcmtlci9tYWluJylcbiAgICAgICAgICBdLFxuICAgICAgICAgIHt0eXBlOiAndGV4dC9qYXZhc2NyaXB0J30pKTtcbiAgICAgIHByb3h5V29ya2VyID0gbmV3IFdvcmtlcih3b3JrZXJVcmwsIHtuYW1lOiAnb3J0LXdhc20tcHJveHktd29ya2VyJ30pO1xuICAgICAgcHJveHlXb3JrZXIub25lcnJvciA9IChldjogRXJyb3JFdmVudCkgPT4gcmVqZWN0KGV2KTtcbiAgICAgIHByb3h5V29ya2VyLm9ubWVzc2FnZSA9IG9uUHJveHlXb3JrZXJNZXNzYWdlO1xuICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh3b3JrZXJVcmwpO1xuICAgICAgaW5pdFdhc21DYWxsYmFja3MgPSBbcmVzb2x2ZSwgcmVqZWN0XTtcbiAgICAgIGNvbnN0IG1lc3NhZ2U6IE9ydFdhc21NZXNzYWdlID0ge3R5cGU6ICdpbml0LXdhc20nLCBpbiA6IGVudi53YXNtfTtcbiAgICAgIHByb3h5V29ya2VyLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH0pO1xuXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGluaXRpYWxpemVXZWJBc3NlbWJseShlbnYud2FzbSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsaXplUnVudGltZSA9IGFzeW5jKGVudjogRW52KTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fUFJPWFkgJiYgaXNQcm94eSgpKSB7XG4gICAgZW5zdXJlV29ya2VyKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGluaXRPcnRDYWxsYmFja3MgPSBbcmVzb2x2ZSwgcmVqZWN0XTtcbiAgICAgIGNvbnN0IG1lc3NhZ2U6IE9ydFdhc21NZXNzYWdlID0ge3R5cGU6ICdpbml0LW9ydCcsIGluIDogZW52fTtcbiAgICAgIHByb3h5V29ya2VyIS5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCBjb3JlLmluaXRSdW50aW1lKGVudik7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTZXNzaW9uQWxsb2NhdGUgPSBhc3luYyhtb2RlbDogVWludDhBcnJheSk6IFByb21pc2U8U2VyaWFsaXphYmxlTW9kZWxkYXRhPiA9PiB7XG4gIGlmICghQlVJTERfREVGUy5ESVNBQkxFX1dBU01fUFJPWFkgJiYgaXNQcm94eSgpKSB7XG4gICAgZW5zdXJlV29ya2VyKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFNlcmlhbGl6YWJsZU1vZGVsZGF0YT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY3JlYXRlU2Vzc2lvbkFsbG9jYXRlQ2FsbGJhY2tzLnB1c2goW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgY29uc3QgbWVzc2FnZTogT3J0V2FzbU1lc3NhZ2UgPSB7dHlwZTogJ2NyZWF0ZV9hbGxvY2F0ZScsIGluIDoge21vZGVsfX07XG4gICAgICBwcm94eVdvcmtlciEucG9zdE1lc3NhZ2UobWVzc2FnZSwgW21vZGVsLmJ1ZmZlcl0pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb3JlLmNyZWF0ZVNlc3Npb25BbGxvY2F0ZShtb2RlbCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTZXNzaW9uRmluYWxpemUgPSBhc3luYyhtb2RlbGRhdGE6IFNlcmlhbGl6YWJsZU1vZGVsZGF0YSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOlxuICAgIFByb21pc2U8U2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhPiA9PiB7XG4gICAgICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1BST1hZICYmIGlzUHJveHkoKSkge1xuICAgICAgICBlbnN1cmVXb3JrZXIoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPFNlcmlhbGl6YWJsZVNlc3Npb25NZXRhZGF0YT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIGNyZWF0ZVNlc3Npb25GaW5hbGl6ZUNhbGxiYWNrcy5wdXNoKFtyZXNvbHZlLCByZWplY3RdKTtcbiAgICAgICAgICBjb25zdCBtZXNzYWdlOiBPcnRXYXNtTWVzc2FnZSA9IHt0eXBlOiAnY3JlYXRlX2ZpbmFsaXplJywgaW4gOiB7bW9kZWxkYXRhLCBvcHRpb25zfX07XG4gICAgICAgICAgcHJveHlXb3JrZXIhLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjb3JlLmNyZWF0ZVNlc3Npb25GaW5hbGl6ZShtb2RlbGRhdGEsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTZXNzaW9uID1cbiAgICBhc3luYyhtb2RlbDogVWludDhBcnJheSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPFNlcmlhbGl6YWJsZVNlc3Npb25NZXRhZGF0YT4gPT4ge1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1BST1hZICYmIGlzUHJveHkoKSkge1xuICAgIC8vIGNoZWNrIHVuc3VwcG9ydGVkIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucz8ucHJlZmVycmVkT3V0cHV0TG9jYXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignc2Vzc2lvbiBvcHRpb24gXCJwcmVmZXJyZWRPdXRwdXRMb2NhdGlvblwiIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIHByb3h5LicpO1xuICAgIH1cbiAgICBlbnN1cmVXb3JrZXIoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8U2VyaWFsaXphYmxlU2Vzc2lvbk1ldGFkYXRhPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjcmVhdGVTZXNzaW9uQ2FsbGJhY2tzLnB1c2goW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgY29uc3QgbWVzc2FnZTogT3J0V2FzbU1lc3NhZ2UgPSB7dHlwZTogJ2NyZWF0ZScsIGluIDoge21vZGVsLCBvcHRpb25zfX07XG4gICAgICBwcm94eVdvcmtlciEucG9zdE1lc3NhZ2UobWVzc2FnZSwgW21vZGVsLmJ1ZmZlcl0pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb3JlLmNyZWF0ZVNlc3Npb24obW9kZWwsIG9wdGlvbnMpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmVsZWFzZVNlc3Npb24gPSBhc3luYyhzZXNzaW9uSWQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4gPT4ge1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XQVNNX1BST1hZICYmIGlzUHJveHkoKSkge1xuICAgIGVuc3VyZVdvcmtlcigpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICByZWxlYXNlU2Vzc2lvbkNhbGxiYWNrcy5wdXNoKFtyZXNvbHZlLCByZWplY3RdKTtcbiAgICAgIGNvbnN0IG1lc3NhZ2U6IE9ydFdhc21NZXNzYWdlID0ge3R5cGU6ICdyZWxlYXNlJywgaW4gOiBzZXNzaW9uSWR9O1xuICAgICAgcHJveHlXb3JrZXIhLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIGNvcmUucmVsZWFzZVNlc3Npb24oc2Vzc2lvbklkKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHJ1biA9IGFzeW5jKFxuICAgIHNlc3Npb25JZDogbnVtYmVyLCBpbnB1dEluZGljZXM6IG51bWJlcltdLCBpbnB1dHM6IFRlbnNvck1ldGFkYXRhW10sIG91dHB1dEluZGljZXM6IG51bWJlcltdLFxuICAgIG91dHB1dHM6IEFycmF5PFRlbnNvck1ldGFkYXRhfG51bGw+LCBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOiBQcm9taXNlPFRlbnNvck1ldGFkYXRhW10+ID0+IHtcbiAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0FTTV9QUk9YWSAmJiBpc1Byb3h5KCkpIHtcbiAgICAvLyBjaGVjayBpbnB1dHMgbG9jYXRpb25cbiAgICBpZiAoaW5wdXRzLnNvbWUodCA9PiB0WzNdICE9PSAnY3B1JykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW5wdXQgdGVuc29yIG9uIEdQVSBpcyBub3Qgc3VwcG9ydGVkIGZvciBwcm94eS4nKTtcbiAgICB9XG4gICAgLy8gY2hlY2sgb3V0cHV0cyBsb2NhdGlvblxuICAgIGlmIChvdXRwdXRzLnNvbWUodCA9PiB0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdwcmUtYWxsb2NhdGVkIG91dHB1dCB0ZW5zb3IgaXMgbm90IHN1cHBvcnRlZCBmb3IgcHJveHkuJyk7XG4gICAgfVxuICAgIGVuc3VyZVdvcmtlcigpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxTZXJpYWxpemFibGVUZW5zb3JNZXRhZGF0YVtdPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBydW5DYWxsYmFja3MucHVzaChbcmVzb2x2ZSwgcmVqZWN0XSk7XG4gICAgICBjb25zdCBzZXJpYWxpemFibGVJbnB1dHMgPSBpbnB1dHMgYXMgU2VyaWFsaXphYmxlVGVuc29yTWV0YWRhdGFbXTsgIC8vIGV2ZXJ5IGlucHV0IGlzIG9uIENQVS5cbiAgICAgIGNvbnN0IG1lc3NhZ2U6IE9ydFdhc21NZXNzYWdlID1cbiAgICAgICAgICB7dHlwZTogJ3J1bicsIGluIDoge3Nlc3Npb25JZCwgaW5wdXRJbmRpY2VzLCBpbnB1dHM6IHNlcmlhbGl6YWJsZUlucHV0cywgb3V0cHV0SW5kaWNlcywgb3B0aW9uc319O1xuICAgICAgcHJveHlXb3JrZXIhLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIGNvcmUuZXh0cmFjdFRyYW5zZmVyYWJsZUJ1ZmZlcnMoc2VyaWFsaXphYmxlSW5wdXRzKSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvcmUucnVuKHNlc3Npb25JZCwgaW5wdXRJbmRpY2VzLCBpbnB1dHMsIG91dHB1dEluZGljZXMsIG91dHB1dHMsIG9wdGlvbnMpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZW5kUHJvZmlsaW5nID0gYXN5bmMoc2Vzc2lvbklkOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0FTTV9QUk9YWSAmJiBpc1Byb3h5KCkpIHtcbiAgICBlbnN1cmVXb3JrZXIoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZW5kUHJvZmlsaW5nQ2FsbGJhY2tzLnB1c2goW3Jlc29sdmUsIHJlamVjdF0pO1xuICAgICAgY29uc3QgbWVzc2FnZTogT3J0V2FzbU1lc3NhZ2UgPSB7dHlwZTogJ2VuZC1wcm9maWxpbmcnLCBpbiA6IHNlc3Npb25JZH07XG4gICAgICBwcm94eVdvcmtlciEucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgY29yZS5lbmRQcm9maWxpbmcoc2Vzc2lvbklkKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGlzT3J0RW52SW5pdGlhbGl6ZWQgPSBhc3luYygpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0FTTV9QUk9YWSAmJiBpc1Byb3h5KCkpIHtcbiAgICBlbnN1cmVXb3JrZXIoKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8Ym9vbGVhbj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaXNPcnRFbnZJbml0aWFsaXplZENhbGxiYWNrcy5wdXNoKFtyZXNvbHZlLCByZWplY3RdKTtcbiAgICAgIGNvbnN0IG1lc3NhZ2U6IE9ydFdhc21NZXNzYWdlID0ge3R5cGU6ICdpcy1vcnQtZW52LWluaXRpYWxpemVkJ307XG4gICAgICBwcm94eVdvcmtlciEucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvcmUuaXNPcnRFbnZJbml0aWFsaXplZCgpO1xuICB9XG59O1xuIiwgImV4cG9ydCBjb25zdCByZWFkRmlsZSA9IHVuZGVmaW5lZDsiLCAiLy8gQ29weXJpZ2h0IChjKSBNaWNyb3NvZnQgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG5cbmltcG9ydCB7cmVhZEZpbGV9IGZyb20gJ25vZGU6ZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHtlbnYsIEluZmVyZW5jZVNlc3Npb24sIEluZmVyZW5jZVNlc3Npb25IYW5kbGVyLCBTZXNzaW9uSGFuZGxlciwgVGVuc29yfSBmcm9tICdvbm54cnVudGltZS1jb21tb24nO1xuXG5pbXBvcnQge1NlcmlhbGl6YWJsZU1vZGVsZGF0YSwgVGVuc29yTWV0YWRhdGF9IGZyb20gJy4vcHJveHktbWVzc2FnZXMnO1xuaW1wb3J0IHtjcmVhdGVTZXNzaW9uLCBjcmVhdGVTZXNzaW9uQWxsb2NhdGUsIGNyZWF0ZVNlc3Npb25GaW5hbGl6ZSwgZW5kUHJvZmlsaW5nLCBpbml0aWFsaXplUnVudGltZSwgaXNPcnRFbnZJbml0aWFsaXplZCwgcmVsZWFzZVNlc3Npb24sIHJ1bn0gZnJvbSAnLi9wcm94eS13cmFwcGVyJztcbmltcG9ydCB7aXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlfSBmcm9tICcuL3dhc20tY29tbW9uJztcblxubGV0IHJ1bnRpbWVJbml0aWFsaXphdGlvblByb21pc2U6IFByb21pc2U8dm9pZD58dW5kZWZpbmVkO1xuXG5leHBvcnQgY29uc3QgZW5jb2RlVGVuc29yTWV0YWRhdGEgPSAodGVuc29yOiBUZW5zb3IsIGdldE5hbWU6ICgpID0+IHN0cmluZyk6IFRlbnNvck1ldGFkYXRhID0+IHtcbiAgc3dpdGNoICh0ZW5zb3IubG9jYXRpb24pIHtcbiAgICBjYXNlICdjcHUnOlxuICAgICAgcmV0dXJuIFt0ZW5zb3IudHlwZSwgdGVuc29yLmRpbXMsIHRlbnNvci5kYXRhLCAnY3B1J107XG4gICAgY2FzZSAnZ3B1LWJ1ZmZlcic6XG4gICAgICByZXR1cm4gW3RlbnNvci50eXBlLCB0ZW5zb3IuZGltcywge2dwdUJ1ZmZlcjogdGVuc29yLmdwdUJ1ZmZlcn0sICdncHUtYnVmZmVyJ107XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBkYXRhIGxvY2F0aW9uOiAke3RlbnNvci5sb2NhdGlvbn0gZm9yICR7Z2V0TmFtZSgpfWApO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgZGVjb2RlVGVuc29yTWV0YWRhdGEgPSAodGVuc29yOiBUZW5zb3JNZXRhZGF0YSk6IFRlbnNvciA9PiB7XG4gIHN3aXRjaCAodGVuc29yWzNdKSB7XG4gICAgY2FzZSAnY3B1JzpcbiAgICAgIHJldHVybiBuZXcgVGVuc29yKHRlbnNvclswXSwgdGVuc29yWzJdLCB0ZW5zb3JbMV0pO1xuICAgIGNhc2UgJ2dwdS1idWZmZXInOiB7XG4gICAgICBjb25zdCBkYXRhVHlwZSA9IHRlbnNvclswXTtcbiAgICAgIGlmICghaXNHcHVCdWZmZXJTdXBwb3J0ZWRUeXBlKGRhdGFUeXBlKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG5vdCBzdXBwb3J0ZWQgZGF0YSB0eXBlOiAke2RhdGFUeXBlfSBmb3IgZGVzZXJpYWxpemluZyBHUFUgdGVuc29yYCk7XG4gICAgICB9XG4gICAgICBjb25zdCB7Z3B1QnVmZmVyLCBkb3dubG9hZCwgZGlzcG9zZX0gPSB0ZW5zb3JbMl07XG4gICAgICByZXR1cm4gVGVuc29yLmZyb21HcHVCdWZmZXIoZ3B1QnVmZmVyLCB7ZGF0YVR5cGUsIGRpbXM6IHRlbnNvclsxXSwgZG93bmxvYWQsIGRpc3Bvc2V9KTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBkYXRhIGxvY2F0aW9uOiAke3RlbnNvclszXX1gKTtcbiAgfVxufTtcblxuZXhwb3J0IGNsYXNzIE9ubnhydW50aW1lV2ViQXNzZW1ibHlTZXNzaW9uSGFuZGxlciBpbXBsZW1lbnRzIEluZmVyZW5jZVNlc3Npb25IYW5kbGVyIHtcbiAgcHJpdmF0ZSBzZXNzaW9uSWQ6IG51bWJlcjtcblxuICBpbnB1dE5hbWVzOiBzdHJpbmdbXTtcbiAgb3V0cHV0TmFtZXM6IHN0cmluZ1tdO1xuXG4gIGFzeW5jIGNyZWF0ZVNlc3Npb25BbGxvY2F0ZShwYXRoOiBzdHJpbmcpOiBQcm9taXNlPFNlcmlhbGl6YWJsZU1vZGVsZGF0YT4ge1xuICAgIC8vIGZldGNoIG1vZGVsIGZyb20gdXJsIGFuZCBtb3ZlIHRvIHdhc20gaGVhcC4gVGhlIGFycmF5YnVmZmZlciB0aGF0IGhlbGQgdGhlIGh0dHBcbiAgICAvLyByZXNwb25zZSBpcyBmcmVlZCBvbmNlIHdlIHJldHVyblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2gocGF0aCk7XG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYGZhaWxlZCB0byBsb2FkIG1vZGVsOiAke3BhdGh9YCk7XG4gICAgfVxuICAgIGNvbnN0IGFycmF5QnVmZmVyID0gYXdhaXQgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTtcbiAgICByZXR1cm4gY3JlYXRlU2Vzc2lvbkFsbG9jYXRlKG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIH1cblxuICBhc3luYyBsb2FkTW9kZWwocGF0aE9yQnVmZmVyOiBzdHJpbmd8VWludDhBcnJheSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIShhd2FpdCBpc09ydEVudkluaXRpYWxpemVkKCkpKSB7XG4gICAgICBpZiAoIXJ1bnRpbWVJbml0aWFsaXphdGlvblByb21pc2UpIHtcbiAgICAgICAgcnVudGltZUluaXRpYWxpemF0aW9uUHJvbWlzZSA9IGluaXRpYWxpemVSdW50aW1lKGVudik7XG4gICAgICB9XG4gICAgICBhd2FpdCBydW50aW1lSW5pdGlhbGl6YXRpb25Qcm9taXNlO1xuICAgICAgcnVudGltZUluaXRpYWxpemF0aW9uUHJvbWlzZSA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHBhdGhPckJ1ZmZlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy52ZXJzaW9ucyAmJiBwcm9jZXNzLnZlcnNpb25zLm5vZGUpIHtcbiAgICAgICAgLy8gbm9kZVxuICAgICAgICBjb25zdCBtb2RlbCA9IGF3YWl0IHJlYWRGaWxlKHBhdGhPckJ1ZmZlcik7XG4gICAgICAgIFt0aGlzLnNlc3Npb25JZCwgdGhpcy5pbnB1dE5hbWVzLCB0aGlzLm91dHB1dE5hbWVzXSA9IGF3YWl0IGNyZWF0ZVNlc3Npb24obW9kZWwsIG9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gYnJvd3NlclxuICAgICAgICAvLyBmZXRjaCBtb2RlbCBhbmQgbW92ZSB0byB3YXNtIGhlYXAuXG4gICAgICAgIGNvbnN0IG1vZGVsRGF0YTogU2VyaWFsaXphYmxlTW9kZWxkYXRhID0gYXdhaXQgdGhpcy5jcmVhdGVTZXNzaW9uQWxsb2NhdGUocGF0aE9yQnVmZmVyKTtcbiAgICAgICAgLy8gY3JlYXRlIHRoZSBzZXNzaW9uXG4gICAgICAgIFt0aGlzLnNlc3Npb25JZCwgdGhpcy5pbnB1dE5hbWVzLCB0aGlzLm91dHB1dE5hbWVzXSA9IGF3YWl0IGNyZWF0ZVNlc3Npb25GaW5hbGl6ZShtb2RlbERhdGEsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBbdGhpcy5zZXNzaW9uSWQsIHRoaXMuaW5wdXROYW1lcywgdGhpcy5vdXRwdXROYW1lc10gPSBhd2FpdCBjcmVhdGVTZXNzaW9uKHBhdGhPckJ1ZmZlciwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGlzcG9zZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gcmVsZWFzZVNlc3Npb24odGhpcy5zZXNzaW9uSWQpO1xuICB9XG5cbiAgYXN5bmMgcnVuKGZlZWRzOiBTZXNzaW9uSGFuZGxlci5GZWVkc1R5cGUsIGZldGNoZXM6IFNlc3Npb25IYW5kbGVyLkZldGNoZXNUeXBlLCBvcHRpb25zOiBJbmZlcmVuY2VTZXNzaW9uLlJ1bk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxTZXNzaW9uSGFuZGxlci5SZXR1cm5UeXBlPiB7XG4gICAgY29uc3QgaW5wdXRBcnJheTogVGVuc29yW10gPSBbXTtcbiAgICBjb25zdCBpbnB1dEluZGljZXM6IG51bWJlcltdID0gW107XG4gICAgT2JqZWN0LmVudHJpZXMoZmVlZHMpLmZvckVhY2goa3ZwID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSBrdnBbMF07XG4gICAgICBjb25zdCB0ZW5zb3IgPSBrdnBbMV07XG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMuaW5wdXROYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgaW5wdXQgJyR7bmFtZX0nYCk7XG4gICAgICB9XG4gICAgICBpbnB1dEFycmF5LnB1c2godGVuc29yKTtcbiAgICAgIGlucHV0SW5kaWNlcy5wdXNoKGluZGV4KTtcbiAgICB9KTtcblxuICAgIGNvbnN0IG91dHB1dEFycmF5OiBBcnJheTxUZW5zb3J8bnVsbD4gPSBbXTtcbiAgICBjb25zdCBvdXRwdXRJbmRpY2VzOiBudW1iZXJbXSA9IFtdO1xuICAgIE9iamVjdC5lbnRyaWVzKGZldGNoZXMpLmZvckVhY2goa3ZwID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSBrdnBbMF07XG4gICAgICBjb25zdCB0ZW5zb3IgPSBrdnBbMV07XG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMub3V0cHV0TmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIG91dHB1dCAnJHtuYW1lfSdgKTtcbiAgICAgIH1cbiAgICAgIG91dHB1dEFycmF5LnB1c2godGVuc29yKTtcbiAgICAgIG91dHB1dEluZGljZXMucHVzaChpbmRleCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBpbnB1dHMgPVxuICAgICAgICBpbnB1dEFycmF5Lm1hcCgodCwgaSkgPT4gZW5jb2RlVGVuc29yTWV0YWRhdGEodCwgKCkgPT4gYGlucHV0IFwiJHt0aGlzLmlucHV0TmFtZXNbaW5wdXRJbmRpY2VzW2ldXX1cImApKTtcbiAgICBjb25zdCBvdXRwdXRzID0gb3V0cHV0QXJyYXkubWFwKFxuICAgICAgICAodCwgaSkgPT4gdCA/IGVuY29kZVRlbnNvck1ldGFkYXRhKHQsICgpID0+IGBvdXRwdXQgXCIke3RoaXMub3V0cHV0TmFtZXNbb3V0cHV0SW5kaWNlc1tpXV19XCJgKSA6IG51bGwpO1xuXG4gICAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IHJ1bih0aGlzLnNlc3Npb25JZCwgaW5wdXRJbmRpY2VzLCBpbnB1dHMsIG91dHB1dEluZGljZXMsIG91dHB1dHMsIG9wdGlvbnMpO1xuXG4gICAgY29uc3QgcmVzdWx0TWFwOiBTZXNzaW9uSGFuZGxlci5SZXR1cm5UeXBlID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRNYXBbdGhpcy5vdXRwdXROYW1lc1tvdXRwdXRJbmRpY2VzW2ldXV0gPSBvdXRwdXRBcnJheVtpXSA/PyBkZWNvZGVUZW5zb3JNZXRhZGF0YShyZXN1bHRzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdE1hcDtcbiAgfVxuXG4gIHN0YXJ0UHJvZmlsaW5nKCk6IHZvaWQge1xuICAgIC8vIFRPRE86IGltcGxlbWVudCBwcm9maWxpbmdcbiAgfVxuXG4gIGVuZFByb2ZpbGluZygpOiB2b2lkIHtcbiAgICB2b2lkIGVuZFByb2ZpbGluZyh0aGlzLnNlc3Npb25JZCk7XG4gIH1cbn1cbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuaW1wb3J0IHtjcHVzfSBmcm9tICdub2RlOm9zJztcbmltcG9ydCB7QmFja2VuZCwgZW52LCBJbmZlcmVuY2VTZXNzaW9uLCBJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcblxuaW1wb3J0IHtpbml0aWFsaXplV2ViQXNzZW1ibHlJbnN0YW5jZX0gZnJvbSAnLi93YXNtL3Byb3h5LXdyYXBwZXInO1xuaW1wb3J0IHtPbm54cnVudGltZVdlYkFzc2VtYmx5U2Vzc2lvbkhhbmRsZXJ9IGZyb20gJy4vd2FzbS9zZXNzaW9uLWhhbmRsZXItaW5mZXJlbmNlJztcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGluaXRpYWxpemVzIGFsbCBmbGFncyBmb3IgV2ViQXNzZW1ibHkuXG4gKlxuICogVGhvc2UgZmxhZ3MgYXJlIGFjY2Vzc2libGUgZnJvbSBgb3J0LmVudi53YXNtYC4gVXNlcnMgYXJlIGFsbG93IHRvIHNldCB0aG9zZSBmbGFncyBiZWZvcmUgdGhlIGZpcnN0IGluZmVyZW5jZSBzZXNzaW9uXG4gKiBiZWluZyBjcmVhdGVkLCB0byBvdmVycmlkZSBkZWZhdWx0IHZhbHVlLlxuICovXG5leHBvcnQgY29uc3QgaW5pdGlhbGl6ZUZsYWdzID0gKCk6IHZvaWQgPT4ge1xuICBpZiAodHlwZW9mIGVudi53YXNtLmluaXRUaW1lb3V0ICE9PSAnbnVtYmVyJyB8fCBlbnYud2FzbS5pbml0VGltZW91dCA8IDApIHtcbiAgICBlbnYud2FzbS5pbml0VGltZW91dCA9IDA7XG4gIH1cblxuICBpZiAodHlwZW9mIGVudi53YXNtLnNpbWQgIT09ICdib29sZWFuJykge1xuICAgIGVudi53YXNtLnNpbWQgPSB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlbnYud2FzbS5wcm94eSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgZW52Lndhc20ucHJveHkgPSBmYWxzZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW52Lndhc20ubnVtVGhyZWFkcyAhPT0gJ251bWJlcicgfHwgIU51bWJlci5pc0ludGVnZXIoZW52Lndhc20ubnVtVGhyZWFkcykgfHwgZW52Lndhc20ubnVtVGhyZWFkcyA8PSAwKSB7XG4gICAgY29uc3QgbnVtQ3B1TG9naWNhbENvcmVzID0gdHlwZW9mIG5hdmlnYXRvciA9PT0gJ3VuZGVmaW5lZCcgPyBjcHVzKCkubGVuZ3RoIDogbmF2aWdhdG9yLmhhcmR3YXJlQ29uY3VycmVuY3k7XG4gICAgZW52Lndhc20ubnVtVGhyZWFkcyA9IE1hdGgubWluKDQsIE1hdGguY2VpbCgobnVtQ3B1TG9naWNhbENvcmVzIHx8IDEpIC8gMikpO1xuICB9XG59O1xuXG5leHBvcnQgY2xhc3MgT25ueHJ1bnRpbWVXZWJBc3NlbWJseUJhY2tlbmQgaW1wbGVtZW50cyBCYWNrZW5kIHtcbiAgYXN5bmMgaW5pdCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBwb3B1bGF0ZSB3YXNtIGZsYWdzXG4gICAgaW5pdGlhbGl6ZUZsYWdzKCk7XG5cbiAgICAvLyBpbml0IHdhc21cbiAgICBhd2FpdCBpbml0aWFsaXplV2ViQXNzZW1ibHlJbnN0YW5jZSgpO1xuICB9XG4gIGNyZWF0ZUluZmVyZW5jZVNlc3Npb25IYW5kbGVyKHBhdGg6IHN0cmluZywgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcj47XG4gIGNyZWF0ZUluZmVyZW5jZVNlc3Npb25IYW5kbGVyKGJ1ZmZlcjogVWludDhBcnJheSwgb3B0aW9ucz86IEluZmVyZW5jZVNlc3Npb24uU2Vzc2lvbk9wdGlvbnMpOlxuICAgICAgUHJvbWlzZTxJbmZlcmVuY2VTZXNzaW9uSGFuZGxlcj47XG4gIGFzeW5jIGNyZWF0ZUluZmVyZW5jZVNlc3Npb25IYW5kbGVyKHBhdGhPckJ1ZmZlcjogc3RyaW5nfFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBJbmZlcmVuY2VTZXNzaW9uLlNlc3Npb25PcHRpb25zKTpcbiAgICAgIFByb21pc2U8SW5mZXJlbmNlU2Vzc2lvbkhhbmRsZXI+IHtcbiAgICBjb25zdCBoYW5kbGVyID0gbmV3IE9ubnhydW50aW1lV2ViQXNzZW1ibHlTZXNzaW9uSGFuZGxlcigpO1xuICAgIGF3YWl0IGhhbmRsZXIubG9hZE1vZGVsKHBhdGhPckJ1ZmZlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShoYW5kbGVyKTtcbiAgfVxufVxuIiwgIi8vIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuXG5pbXBvcnQge09ubnhydW50aW1lV2ViQXNzZW1ibHlCYWNrZW5kfSBmcm9tICcuL2JhY2tlbmQtd2FzbSc7XG5leHBvcnQgY29uc3Qgd2FzbUJhY2tlbmQgPSBuZXcgT25ueHJ1bnRpbWVXZWJBc3NlbWJseUJhY2tlbmQoKTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlcXVpcmUtaW1wb3J0cyAqL1xuLy8gV2UgdXNlIFwicmVxdWlyZVwiIGluc3RlYWQgb2YgXCJpbXBvcnRcIiBoZXJlIGJlY2F1c2UgaW1wb3J0IHN0YXRlbWVudCBtdXN0IGJlIHB1dCBpbiB0b3AgbGV2ZWwuIE91ciBjdXJyZW50IGNvZGUgZG9lc1xuLy8gbm90IGFsbG93IGJ1bmRsZXIgdG8gdHJlZS1zaGFraW5nIGNvZGUgYXMgZXhwZWN0ZWQgYmVjYXVzZSBzb21lIGNvZGVzIGFyZSB0cmVhdGVkIGFzIGhhdmluZyBzaWRlIGVmZmVjdHMuXG4vLyBTbyB3ZSBpbXBvcnQgY29kZSBpbnNpZGUgdGhlIGlmLWNsYXVzZSB0byBhbGxvdyBidW5kbGVyIHJlbW92ZSB0aGUgY29kZSBzYWZlbHkuXG5cbmV4cG9ydCAqIGZyb20gJ29ubnhydW50aW1lLWNvbW1vbic7XG5pbXBvcnQgKiBhcyBvcnQgZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcbmV4cG9ydCBkZWZhdWx0IG9ydDtcblxuaW1wb3J0IHtyZWdpc3RlckJhY2tlbmQsIGVudn0gZnJvbSAnb25ueHJ1bnRpbWUtY29tbW9uJztcbmltcG9ydCB7dmVyc2lvbn0gZnJvbSAnLi92ZXJzaW9uJztcblxuaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0VCR0wpIHtcbiAgY29uc3Qgb25ueGpzQmFja2VuZCA9IHJlcXVpcmUoJy4vYmFja2VuZC1vbm54anMnKS5vbm54anNCYWNrZW5kO1xuICByZWdpc3RlckJhY2tlbmQoJ3dlYmdsJywgb25ueGpzQmFja2VuZCwgLTEwKTtcbn1cblxuaWYgKCFCVUlMRF9ERUZTLkRJU0FCTEVfV0FTTSkge1xuICBjb25zdCB3YXNtQmFja2VuZCA9IEJVSUxEX0RFRlMuRElTQUJMRV9UUkFJTklORyA/IHJlcXVpcmUoJy4vYmFja2VuZC13YXNtLWluZmVyZW5jZScpLndhc21CYWNrZW5kIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCcuL2JhY2tlbmQtd2FzbS10cmFpbmluZycpLndhc21CYWNrZW5kO1xuICBpZiAoIUJVSUxEX0RFRlMuRElTQUJMRV9XRUJHUFUgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLmdwdSkge1xuICAgIHJlZ2lzdGVyQmFja2VuZCgnd2ViZ3B1Jywgd2FzbUJhY2tlbmQsIDUpO1xuICB9XG4gIHJlZ2lzdGVyQmFja2VuZCgnY3B1Jywgd2FzbUJhY2tlbmQsIDEwKTtcbiAgcmVnaXN0ZXJCYWNrZW5kKCd3YXNtJywgd2FzbUJhY2tlbmQsIDEwKTtcbiAgaWYgKEJVSUxEX0RFRlMuRElTQUJMRV9UUkFJTklORykge1xuICAgIHJlZ2lzdGVyQmFja2VuZCgneG5ucGFjaycsIHdhc21CYWNrZW5kLCA5KTtcbiAgICByZWdpc3RlckJhY2tlbmQoJ3dlYm5uJywgd2FzbUJhY2tlbmQsIDkpO1xuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbnYudmVyc2lvbnMsICd3ZWInLCB7dmFsdWU6IHZlcnNpb24sIGVudW1lcmFibGU6IHRydWV9KTtcbiIsICIvLyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cblxuLy8gVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBieSAvanMvc2NyaXB0cy91cGRhdGUtdmVyc2lvbi50c1xuLy8gRG8gbm90IG1vZGlmeSBmaWxlIGNv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RUFBRSxDQUFDLElBQUUsRUFBRSxDQUFDO0FBQUUsa0JBQUksSUFBRSxDQUFDO0FBQUUsbUJBQUksS0FBSztBQUFFLGtCQUFFLEtBQUssR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRTtBQUFFLG1CQUFHO0FBQUEsWUFBQztBQUFDLG1CQUFPO0FBQUEsVUFBRSxHQUFFLElBQUcsS0FBRyxDQUFDLE1BQUssQ0FBQyxHQUFFLENBQUMsQ0FBQyxHQUFFLEtBQUcsQ0FBQyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsRUFBRSxHQUFFLEtBQUcsQ0FBQyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsRUFBRTtBQUFFLG1CQUFTLEdBQUcsR0FBRTtBQUFDLGdCQUFJLElBQUUsTUFBTSxFQUFFLENBQUMsSUFBRSxDQUFDO0FBQUUsY0FBRSxHQUFFLEdBQUUsR0FBRSxFQUFFLE1BQU07QUFBRSxtQkFBTztBQUFBLFVBQUM7QUFDblQsbUJBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRSxHQUFFO0FBQUMscUJBQVMsRUFBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLG1CQUFJLElBQUUsWUFBVSxPQUFPLElBQUUsRUFBRSxTQUFTLElBQUUsS0FBRyxJQUFHLEVBQUUsU0FBTztBQUFHLG9CQUFFLEVBQUUsQ0FBQyxJQUFFO0FBQUUscUJBQU87QUFBQSxZQUFDO0FBQUMscUJBQVMsRUFBRSxHQUFFLEdBQUU7QUFBQyxxQkFBTyxFQUFFLEdBQUUsR0FBRSxHQUFHO0FBQUEsWUFBQztBQUFDLHFCQUFTLEVBQUUsR0FBRSxHQUFFO0FBQUMsdUJBQVMsRUFBRSxJQUFHO0FBQUMsdUJBQU8sSUFBRSxLQUFHLEtBQUcsSUFBRSxLQUFHLElBQUU7QUFBQSxjQUFDO0FBQUMsa0JBQUk7QUFBRSxxQkFBSyxJQUFFLEVBQUUsRUFBRSxZQUFZLElBQUUsRUFBRSxZQUFZLENBQUMsTUFBSSxPQUFLLElBQUUsRUFBRSxFQUFFLFNBQVMsSUFBRSxFQUFFLFNBQVMsQ0FBQyxPQUFLLElBQUUsRUFBRSxFQUFFLFFBQVEsSUFBRSxFQUFFLFFBQVEsQ0FBQztBQUFHLHFCQUFPO0FBQUEsWUFBQztBQUFDLHFCQUFTLEVBQUUsR0FBRTtBQUFDLHNCQUFPLEVBQUUsT0FBTyxHQUFFO0FBQUEsZ0JBQUMsS0FBSztBQUFFLHlCQUFPLElBQUksS0FBSyxFQUFFLFlBQVksSUFBRSxHQUFFLElBQUcsRUFBRTtBQUFBLGdCQUFFLEtBQUs7QUFBRSx5QkFBTztBQUFBLGdCQUFFLEtBQUs7QUFBRSx5QkFBTyxJQUFJLEtBQUssRUFBRSxZQUFZLEdBQUUsR0FBRSxDQUFDO0FBQUEsZ0JBQUUsS0FBSztBQUFFLHlCQUFPLElBQUk7QUFBQSxvQkFBSyxFQUFFLFlBQVk7QUFBQSxvQkFDNWY7QUFBQSxvQkFBRTtBQUFBLGtCQUFDO0FBQUEsZ0JBQUUsS0FBSztBQUFFLHlCQUFPLElBQUksS0FBSyxFQUFFLFlBQVksR0FBRSxHQUFFLENBQUM7QUFBQSxnQkFBRSxLQUFLO0FBQUUseUJBQU8sSUFBSSxLQUFLLEVBQUUsWUFBWSxJQUFFLEdBQUUsSUFBRyxFQUFFO0FBQUEsZ0JBQUUsS0FBSztBQUFFLHlCQUFPLElBQUksS0FBSyxFQUFFLFlBQVksSUFBRSxHQUFFLElBQUcsRUFBRTtBQUFBLGNBQUM7QUFBQSxZQUFDO0FBQUMscUJBQVMsRUFBRSxHQUFFO0FBQUMsa0JBQUksSUFBRSxFQUFFO0FBQUcsbUJBQUksSUFBRSxJQUFJLEtBQU0sSUFBSSxLQUFLLEVBQUUsS0FBRyxNQUFLLEdBQUUsQ0FBQyxFQUFHLFFBQVEsQ0FBQyxHQUFFLElBQUUsS0FBRztBQUFDLG9CQUFJLElBQUUsRUFBRSxTQUFTLEdBQUUsS0FBRyxFQUFFLEVBQUUsWUFBWSxDQUFDLElBQUUsS0FBRyxJQUFJLENBQUM7QUFBRSxvQkFBRyxJQUFFLElBQUUsRUFBRSxRQUFRO0FBQUUsdUJBQUcsSUFBRSxFQUFFLFFBQVEsSUFBRSxHQUFFLEVBQUUsUUFBUSxDQUFDLEdBQUUsS0FBRyxJQUFFLEVBQUUsU0FBUyxJQUFFLENBQUMsS0FBRyxFQUFFLFNBQVMsQ0FBQyxHQUFFLEVBQUUsWUFBWSxFQUFFLFlBQVksSUFBRSxDQUFDO0FBQUEscUJBQU87QUFBQyxvQkFBRSxRQUFRLEVBQUUsUUFBUSxJQUFFLENBQUM7QUFBRTtBQUFBLGdCQUFLO0FBQUEsY0FBQztBQUFDLGtCQUFFLElBQUksS0FBSyxFQUFFLFlBQVksSUFBRSxHQUFFLEdBQUUsQ0FBQztBQUFFLGtCQUFFLEVBQUUsSUFBSTtBQUFBLGdCQUFLLEVBQUUsWUFBWTtBQUFBLGdCQUNuZjtBQUFBLGdCQUFFO0FBQUEsY0FBQyxDQUFDO0FBQUUsa0JBQUUsRUFBRSxDQUFDO0FBQUUscUJBQU8sS0FBRyxFQUFFLEdBQUUsQ0FBQyxJQUFFLEtBQUcsRUFBRSxHQUFFLENBQUMsSUFBRSxFQUFFLFlBQVksSUFBRSxJQUFFLEVBQUUsWUFBWSxJQUFFLEVBQUUsWUFBWSxJQUFFO0FBQUEsWUFBQztBQUFDLG1CQUFLO0FBQUUsbUJBQUs7QUFBRSxtQkFBSztBQUFFLG1CQUFLO0FBQUUsZ0JBQUksSUFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUM7QUFBRSxnQkFBRSxFQUFDLElBQUcsRUFBRSxLQUFHLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxJQUFFLEtBQUcsTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLElBQUUsS0FBRyxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxHQUFFLElBQUcsSUFBRSxFQUFFLENBQUMsSUFBRSxHQUFFO0FBQUUsZ0JBQUUsRUFBRSxDQUFDO0FBQUUsZ0JBQUU7QUFBQSxjQUFDLE1BQUs7QUFBQSxjQUF1QixNQUFLO0FBQUEsY0FBVyxNQUFLO0FBQUEsY0FBVyxNQUFLO0FBQUEsY0FBSyxNQUFLO0FBQUEsY0FBYyxNQUFLO0FBQUEsY0FBUSxNQUFLO0FBQUEsY0FBVyxNQUFLO0FBQUEsY0FBVyxNQUFLO0FBQUEsY0FBVyxPQUFNO0FBQUEsY0FDbmYsT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQVcsT0FBTTtBQUFBLGNBQVcsT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLGNBQUssT0FBTTtBQUFBLFlBQUk7QUFBRSxxQkFBUSxLQUFLO0FBQUUsa0JBQUUsRUFBRSxRQUFRLElBQUksT0FBTyxHQUFFLEdBQUcsR0FBRSxFQUFFLENBQUMsQ0FBQztBQUFFLGdCQUFJLEtBQUcsMkRBQTJELE1BQU0sR0FBRyxHQUFFLEtBQUcsd0ZBQXdGLE1BQU0sR0FBRztBQUFFLGdCQUFFLEVBQUMsTUFBSyxPQUFHLEdBQUcsRUFBRSxFQUFFLEVBQUUsVUFBVSxHQUFFLENBQUMsR0FBRSxNQUFLLE9BQUcsR0FBRyxFQUFFLEVBQUUsR0FBRSxNQUFLLE9BQ2xmLEdBQUcsRUFBRSxFQUFFLEVBQUUsVUFBVSxHQUFFLENBQUMsR0FBRSxNQUFLLE9BQUcsR0FBRyxFQUFFLEVBQUUsR0FBRSxNQUFLLE9BQUcsR0FBRyxFQUFFLEtBQUcsUUFBTSxNQUFJLEdBQUUsQ0FBQyxHQUFFLE1BQUssT0FBRyxFQUFFLEVBQUUsSUFBRyxDQUFDLEdBQUUsTUFBSyxPQUFHLEVBQUUsRUFBRSxJQUFHLEdBQUUsR0FBRyxHQUFFLE1BQUssT0FBRyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLEdBQUUsTUFBSyxPQUFHLEVBQUUsQ0FBQyxHQUFFLE1BQUssT0FBRyxFQUFFLEVBQUUsSUFBRyxDQUFDLEdBQUUsTUFBSyxPQUFHO0FBQUMsa0JBQUUsRUFBRTtBQUFHLG1CQUFHLElBQUUsSUFBRSxLQUFHLEtBQUcsTUFBSSxLQUFHO0FBQUkscUJBQU8sRUFBRSxHQUFFLENBQUM7QUFBQSxZQUFDLEdBQUUsTUFBSyxPQUFHO0FBQUMsdUJBQVEsSUFBRSxHQUFFLElBQUUsR0FBRSxLQUFHLEVBQUUsS0FBRyxHQUFFLE1BQUksRUFBRSxFQUFFLEtBQUcsSUFBSSxJQUFFLEtBQUcsSUFBSSxHQUFHO0FBQUU7QUFBQyxxQkFBTyxFQUFFLEVBQUUsS0FBRyxHQUFFLENBQUM7QUFBQSxZQUFDLEdBQUUsTUFBSyxPQUFHLEVBQUUsRUFBRSxLQUFHLEdBQUUsQ0FBQyxHQUFFLE1BQUssT0FBRyxFQUFFLEVBQUUsSUFBRyxDQUFDLEdBQUUsTUFBSyxNQUFJLE1BQUssTUFBSyxPQUFHLEtBQUcsRUFBRSxNQUFJLEtBQUcsRUFBRSxLQUFHLE9BQUssTUFBSyxNQUFLLE9BQUcsRUFBRSxFQUFFLElBQUcsQ0FBQyxHQUFFLE1BQUssTUFBSSxLQUFLLE1BQUssT0FBRyxFQUFFLE1BQUksR0FBRSxNQUFLLE9BQUcsRUFBRSxLQUFLLE9BQU8sRUFBRSxLQUFHLElBQUUsRUFBRSxNQUFJLENBQUMsR0FBRSxDQUFDLEdBQUUsTUFBSyxPQUNyZjtBQUFDLGtCQUFJLElBQUUsS0FBSyxPQUFPLEVBQUUsS0FBRyxLQUFHLEVBQUUsS0FBRyxLQUFHLEtBQUcsQ0FBQztBQUFFLG9CQUFJLEVBQUUsS0FBRyxNQUFJLEVBQUUsS0FBRyxLQUFHLEtBQUc7QUFBSSxrQkFBRztBQUFFLHNCQUFJLE1BQUksS0FBRyxFQUFFLEtBQUcsTUFBSSxFQUFFLE1BQUksR0FBRSxLQUFHLEtBQUcsS0FBRyxLQUFHLEVBQUUsRUFBRSxFQUFFLE1BQUksSUFBRTtB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QUM7QUFBRSxvQkFBRSxJQUFJLFlBQVksT0FBTyxJQUFJLFdBQVcsQ0FBQyxDQUFDO0FBQUUsb0JBQUcsSUFBSSxZQUFZLFNBQVMsR0FBRSxFQUFDLEdBQUUsRUFBQyxHQUFFLEVBQUMsRUFBQyxDQUFDLEVBQUcsUUFBUTtBQUFBLGNBQUM7QUFBQyxrQkFBRTtBQUFFLGdCQUFFLElBQUksR0FBRSxDQUFDO0FBQUUsZ0JBQUUsQ0FBQyxJQUFFLEVBQUUsSUFBSSxDQUFDO0FBQUEsWUFBQztBQUFDLGNBQUUsSUFBSSxHQUFFLENBQUM7QUFBRSxtQkFBTztBQUFBLFVBQUM7QUFDckosY0FBSSxLQUFHO0FBQUEsWUFBQyxHQUFFLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQyxxQkFBSztBQUFFLGNBQUMsSUFBSSxHQUFHLENBQUMsRUFBRyxHQUFHLE1BQUksR0FBRSxNQUFJLENBQUM7QUFBRSxtQkFBRztBQUFFO0FBQUssb0JBQU07QUFBQSxZQUFHO0FBQUEsWUFBRSxHQUFFLFdBQVU7QUFBQyxxQkFBTztBQUFBLFlBQUM7QUFBQSxZQUFFLEdBQUUsV0FBVTtBQUFBLFlBQUM7QUFBQSxZQUFFLEdBQUUsV0FBVTtBQUFBLFlBQUM7QUFBQSxZQUFFLEdBQUUsV0FBVTtBQUFBLFlBQUM7QUFBQSxZQUFFLEdBQUUsV0FBVTtBQUFDLHFCQUFPO0FBQUEsWUFBQztBQUFBLFlBQUUsR0FBRSxXQUFVO0FBQUEsWUFBQztBQUFBLFlBQUUsR0FBRSxXQUFVO0FBQUEsWUFBQztBQUFBLFlBQUUsR0FBRSxXQUFVO0FBQUEsWUFBQztBQUFBLFlBQUUsR0FBRSxXQUFVO0FBQUEsWUFBQztBQUFBLFlBQUUsR0FBRSxXQUFVO0FBQUEsWUFBQztBQUFBLFlBQUUsR0FBRSxXQUFVO0FBQUEsWUFBQztBQUFBLFlBQUUsR0FBRSxXQUFVO0FBQUEsWUFBQztBQUFBLFlBQUUsR0FBRSxXQUFVO0FBQUEsWUFBQztBQUFBLFlBQUUsR0FBRSxNQUFJO0FBQUEsWUFBRyxHQUFFLFNBQVMsR0FBRSxHQUFFLEdBQUU7QUFBQyxrQkFBRSxJQUFFLFlBQVUsSUFBRSxVQUFRLENBQUMsQ0FBQyxLQUFHLE1BQUksS0FBRyxhQUFXLElBQUU7QUFBSSxxQkFBSztBQUFFLGtCQUFFLElBQUksS0FBSyxNQUFJLENBQUM7QUFBRSxnQkFBRSxLQUFHLE1BQUksQ0FBQyxJQUFFLEVBQUUsY0FBYztBQUFFLGdCQUFFLElBQUUsS0FBRyxNQUFJLENBQUMsSUFBRSxFQUFFLGNBQWM7QUFBRSxnQkFBRSxJQUFFLEtBQUcsTUFBSSxDQUFDLElBQUUsRUFBRSxZQUFZO0FBQUUsZ0JBQUUsSUFBRSxNQUFJLE1BQ2xmLENBQUMsSUFBRSxFQUFFLFdBQVc7QUFBRSxnQkFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLElBQUUsRUFBRSxZQUFZO0FBQUUsZ0JBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxJQUFFLEVBQUUsZUFBZSxJQUFFO0FBQUssZ0JBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxJQUFFLEVBQUUsVUFBVTtBQUFFLGdCQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsS0FBRyxFQUFFLFFBQVEsSUFBRSxLQUFLLElBQUksRUFBRSxlQUFlLEdBQUUsR0FBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLENBQUMsS0FBRyxRQUFNO0FBQUEsWUFBQztBQUFBLFlBQUUsR0FBRSxTQUFTLEdBQUUsR0FBRSxHQUFFO0FBQUMsa0JBQUUsSUFBRSxZQUFVLElBQUUsVUFBUSxDQUFDLENBQUMsS0FBRyxNQUFJLEtBQUcsYUFBVyxJQUFFO0FBQUkscUJBQUs7QUFBRSxrQkFBRSxJQUFJLEtBQUssTUFBSSxDQUFDO0FBQUUsZ0JBQUUsS0FBRyxNQUFJLENBQUMsSUFBRSxFQUFFLFdBQVc7QUFBRSxnQkFBRSxJQUFFLEtBQUcsTUFBSSxDQUFDLElBQUUsRUFBRSxXQUFXO0FBQUUsZ0JBQUUsSUFBRSxLQUFHLE1BQUksQ0FBQyxJQUFFLEVBQUUsU0FBUztBQUFFLGdCQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsSUFBRSxFQUFFLFFBQVE7QUFBRSxnQkFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLElBQUUsRUFBRSxTQUFTO0FBQUUsZ0JBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxJQUFFLEVBQUUsWUFBWSxJQUFFO0FBQUssZ0JBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxJQUFFLEVBQUUsT0FBTztBQUFFLGdCQUFFLElBQUUsTUFBSSxNQUNwZixDQUFDLEtBQUcsRUFBRSxFQUFFLFlBQVksQ0FBQyxJQUFFLEtBQUcsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFFLEVBQUUsUUFBUSxJQUFFLElBQUU7QUFBRSxnQkFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLElBQUUsRUFBRSxLQUFHLEVBQUUsa0JBQWtCO0FBQUcsa0JBQUcsSUFBSSxLQUFLLEVBQUUsWUFBWSxHQUFFLEdBQUUsQ0FBQyxFQUFHLGtCQUFrQjtBQUFFLGtCQUFJLElBQUcsSUFBSSxLQUFLLEVBQUUsWUFBWSxHQUFFLEdBQUUsQ0FBQyxFQUFHLGtCQUFrQjtBQUFFLGdCQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsS0FBRyxLQUFHLEtBQUcsRUFBRSxrQkFBa0IsS0FBRyxLQUFLLElBQUksR0FBRSxDQUFDLEtBQUc7QUFBQSxZQUFDO0FBQUEsWUFBRSxHQUFFLFNBQVMsR0FBRTtBQUFDLHFCQUFLO0FBQUUsa0JBQUksSUFBRSxJQUFJLEtBQUssRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLElBQUUsTUFBSyxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsR0FBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsR0FBRSxFQUFFLElBQUUsS0FBRyxNQUFJLENBQUMsR0FBRSxFQUFFLElBQUUsS0FBRyxNQUFJLENBQUMsR0FBRSxFQUFFLEtBQUcsTUFBSSxDQUFDLEdBQUUsQ0FBQyxHQUFFLElBQUUsRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLEdBQUUsSUFBRSxFQUFFLGtCQUFrQixHQUFFLElBQUcsSUFBSSxLQUFLLEVBQUUsWUFBWSxHQUFFLEdBQUUsQ0FBQyxFQUFHLGtCQUFrQixHQUNwZixJQUFHLElBQUksS0FBSyxFQUFFLFlBQVksR0FBRSxHQUFFLENB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LEdBQUUsS0FBRyxHQUFHLENBQUM7QUFBQSxVQUFDO0FBQUMsbUJBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFDLG1CQUFPLElBQUUsRUFBRSxHQUFFLEdBQUUsR0FBRSxHQUFFLENBQUMsSUFBRTtBQUFBLFVBQUM7QUFBQyxtQkFBUyxHQUFHLEdBQUUsR0FBRTtBQUFDLGdCQUFHO0FBQUUscUJBQU8sRUFBRSxHQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUEsVUFBQztBQUM1WSxjQUFJLEtBQUcsT0FBRztBQUFDLHFCQUFRLElBQUUsR0FBRSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sRUFBRSxHQUFFO0FBQUMsa0JBQUksSUFBRSxFQUFFLFdBQVcsQ0FBQztBQUFFLHFCQUFLLElBQUUsTUFBSSxRQUFNLElBQUUsS0FBRyxJQUFFLFNBQU8sS0FBRyxTQUFPLEtBQUcsS0FBRyxHQUFFLEVBQUUsS0FBRyxLQUFHO0FBQUEsWUFBQztBQUFDLG1CQUFPO0FBQUEsVUFBQyxHQUFFLEtBQUcsQ0FBQyxHQUFFLEdBQUUsR0FBRSxNQUFJO0FBQUMsbUJBQUs7QUFBRSxnQkFBRyxFQUFFLElBQUU7QUFBRyxxQkFBTztBQUFFLGdCQUFJLElBQUU7QUFBRSxnQkFBRSxJQUFFLElBQUU7QUFBRSxxQkFBUSxJQUFFLEdBQUUsSUFBRSxFQUFFLFFBQU8sRUFBRSxHQUFFO0FBQUMsa0JBQUksSUFBRSxFQUFFLFdBQVcsQ0FBQztBQUFFLGtCQUFHLFNBQU8sS0FBRyxTQUFPLEdBQUU7QUFBQyxvQkFBSSxJQUFFLEVBQUUsV0FBVyxFQUFFLENBQUM7QUFBRSxvQkFBRSxVQUFRLElBQUUsU0FBTyxNQUFJLElBQUU7QUFBQSxjQUFJO0FBQUMsa0JBQUcsT0FBSyxHQUFFO0FBQUMsb0JBQUcsS0FBRztBQUFFO0FBQU0sa0JBQUUsUUFBTSxDQUFDLElBQUU7QUFBQSxjQUFDLE9BQUs7QUFBQyxvQkFBRyxRQUFNLEdBQUU7QUFBQyxzQkFBRyxJQUFFLEtBQUc7QUFBRTtBQUFNLG9CQUFFLFFBQU0sQ0FBQyxJQUFFLE1BQUksS0FBRztBQUFBLGdCQUFDLE9BQUs7QUFBQyxzQkFBRyxTQUFPLEdBQUU7QUFBQyx3QkFBRyxJQUFFLEtBQUc7QUFBRTtBQUFNLHNCQUFFLFFBQU0sQ0FBQyxJQUFFLE1BQUksS0FBRztBQUFBLGtCQUFFLE9BQUs7QUFBQyx3QkFBRyxJQUFFLEtBQUc7QUFBRTtBQUFNLHNCQUFFLFFBQU0sQ0FBQyxJQUFFLE1BQUksS0FDcGY7QUFBRyxzQkFBRSxRQUFNLENBQUMsSUFBRSxNQUFJLEtBQUcsS0FBRztBQUFBLGtCQUFFO0FBQUMsb0JBQUUsUUFBTSxDQUFDLElBQUUsTUFBSSxLQUFHLElBQUU7QUFBQSxnQkFBRTtBQUFDLGtCQUFFLFFBQU0sQ0FBQyxJQUFFLE1BQUksSUFBRTtBQUFBLGNBQUU7QUFBQSxZQUFDO0FBQUMsY0FBRSxNQUFJLENBQUMsSUFBRTtBQUFFLG1CQUFPLElBQUU7QUFBQSxVQUFDLEdBQUUsS0FBRyxDQUFDLEdBQUUsR0FBRSxNQUFJLEdBQUcsR0FBRSxFQUFFLEdBQUUsR0FBRSxDQUFDO0FBQUUsbUJBQVMsR0FBRyxHQUFFLEdBQUU7QUFBQyxnQkFBRztBQUFFLHFCQUFPLEVBQUUsR0FBRSxHQUFFLEdBQUUsQ0FBQztBQUFBLFVBQUM7QUFBQyxtQkFBUyxHQUFHLEdBQUUsR0FBRSxHQUFFO0FBQUMsZ0JBQUc7QUFBRSxxQkFBTyxFQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsQ0FBQztBQUFBLFVBQUM7QUFBQyxtQkFBUyxHQUFHLEdBQUUsR0FBRSxHQUFFO0FBQUMsbUJBQU8sSUFBRSxFQUFFLEdBQUUsR0FBRSxHQUFFLEdBQUUsQ0FBQyxJQUFFO0FBQUEsVUFBQztBQUFDLG1CQUFTLEdBQUcsR0FBRSxHQUFFO0FBQUMsZ0JBQUc7QUFBRSxxQkFBTyxFQUFFLEdBQUUsR0FBRSxHQUFFLENBQUM7QUFBQSxVQUFDO0FBQUMsbUJBQVMsR0FBRyxHQUFFLEdBQUUsR0FBRTtBQUFDLGdCQUFHO0FBQUUscUJBQU8sRUFBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLENBQUM7QUFBQSxVQUFDO0FBQUMs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Q0FBQyxHQUFFLENBQUMsQ0FBQztBQUFFLG1CQUFTLEdBQUcsR0FBRSxHQUFFLEdBQUUsR0FBRTtBQUFDLGdCQUFHO0FBQUUscUJBQU8sRUFBRSxJQUFHLEdBQUUsR0FBRSxHQUFFLEdBQUUsQ0FBQztBQUFFLG1CQUFLO0FBQUUsbUJBQUs7QUFBRSxtQkFBSztBQUFFLHFCQUFRLElBQUUsR0FBRSxJQUFFLEdBQUUsSUFBRSxHQUFFLEtBQUk7QUFBQyxrQkFBSSxJQUFFLEVBQUUsRUFBRSxLQUFHLE1BQUksQ0FBQyxHQUFFLElBQUUsRUFBRSxFQUFFLElBQUUsS0FBRyxNQUFJLENBQUM7QUFBRSxtQkFBRztBQUFFLHVCQUFRLElBQUUsR0FBRSxJQUFFLEdBQUUsS0FBSTtBQUFDLG9CQUFJLElBQUUsRUFBRSxFQUFFLElBQUUsTUFBSSxDQUFDLEdBQUUsSUFBRSxHQUFHLENBQUM7QUFBRSxzQkFBSSxLQUFHLE9BQUssTUFBSSxNQUFJLElBQUUsS0FBRyxHQUFHLEdBQUcsR0FBRSxDQUFDLENBQUMsR0FBRSxFQUFFLFNBQU8sS0FBRyxFQUFFLEtBQUssQ0FBQztBQUFBLGNBQUM7QUFBQyxtQkFBRztBQUFBLFlBQUM7QUFBQyxjQUFFLEVBQUUsS0FBRyxNQUFJLENBQUMsSUFBRTtBQUFFLG1CQUFPO0FBQUEsVUFBQztBQUFDLGNBQUksS0FBRyxDQUFDLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxFQUFFLEdBQUUsS0FBRyxDQUFDLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxJQUFHLElBQUcsSUFBRyxFQUFFO0FBQUUsbUJBQVMsR0FBRyxHQUFFO0FBQUMsZ0JBQUksSUFBRSxNQUFNLEdBQUcsQ0FBQyxJQUFFLENBQUM7QUFBRSxlQUFHLEdBQUUsR0FBRSxHQUFFLEVBQUUsTUFBTTtBQUFFLG1CQUFPO0FBQUEsVUFBQztBQUNqZixjQUFJLEtBQUcsQ0FBQyxHQUFFLE1BQUk7QUFBQyxlQUFHLEVBQUUsSUFBSSxHQUFFLE1B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RSxtQkFBSztBQUFFLG1CQUFLO0FBQUUsZ0JBQUksSUFBRSxFQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQztBQUFFLGdCQUFFLEVBQUMsSUFBRyxFQUFFLEVBQUUsS0FBRyxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsRUFBRSxJQUFFLEtBQUcsTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLEVBQUUsSUFBRSxLQUFHLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsR0FBRSxJQUFHLEVBQUUsRUFBRSxJQUFFLE1BQUksTUFBSSxDQUFDLEdBQUUsSUFBRyxFQUFFLEVBQUUsSUFBRSxNQUFJLE1BQUksQ0FBQyxHQUFFLElBQUcsRUFBRSxFQUFFLElBQUUsTUFBSSxNQUFJLENBQUMsR0FBRSxJQUFHLElBQUUsR0FBRyxDQUFDLElBQUUsR0FBRTtBQUFFLGdCQUFFLEdBQUcsQ0FBQztBQUFFLGdCQUFFO0FBQUEsY0FBQyxNQUFLO0FBQUEsY0FBdUIsTUFBSztBQUFBLGNBQVcsTUFBSztBQUFBLGNBQVcsTUFBSztBQUFBLGNBQUssTUFBSztBQUFBLGNBQWMsTUFBSztBQUFBLGNBQVEsTUFBSztBQUFBLGNBQVcsTUFBSztBQUFBLGNBQzFlLE1BQUs7QUFBQSxjQUFXLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFXLE9BQU07QUFBQSxjQUFXLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07QUFBQSxjQUFLLE9BQU07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QUFFQSxNQUFJLE1BQTBCO0FBQzVCLFVBQU1DLGVBQWMsT0FBOEIsOEVBQW9DLGNBQ3BDLEtBQW1DO0FBQ3JGLFFBQUksT0FBaUY7QUFDbkYsc0JBQWdCLFVBQVVBLGNBQWEsQ0FBQztBQUFBLElBQzFDO0FBQ0Esb0JBQWdCLE9BQU9BLGNBQWEsRUFBRTtBQUN0QyxvQkFBZ0IsUUFBUUEsY0FBYSxFQUFFO0FBQ3ZDLFFBQUksTUFBNkI7QUFDL0Isc0JBQWdCLFdBQVdBLGNBQWEsQ0FBQztBQUN6QyxzQkFBZ0IsU0FBU0EsY0FBYSxDQUFDO0FBQUEsSUFDekM7QUFBQSxFQUNGO0FBRUEsU0FBTyxlQUFlQyxLQUFJLFVBQVUsT0FBTyxFQUFDLE9BQU9DLFVBQVMsWUFBWSxLQUFJLENBQUM7IiwKICAibmFtZXMiOiBbImkiLCAiZW52IiwgIlRlbnNvciIsICJUZW5zb3IiLCAiSW5mZXJlbmNlU2Vzc2lvbiIsICJUZW5zb3IiLCAiVHJhaW5pbmdTZXNzaW9uIiwgIkluZmVyZW5jZVNlc3Npb24iLCAiVGVuc29yIiwgIlRyYWluaW5nU2Vzc2lvbiIsICJlbnYiLCAiam9pbiIsICJjcHVzIiwgIndhc20iLCAid2FzbSIsICJ3YXNtIiwgIndhc20iLCAiZW52IiwgInRlbnNvciIsICJlcnJvckNvZGUiLCAiaSIsICJpbml0aWFsaXppbmciLCAiaW5pdGlhbGl6ZWQiLCAiYWJvcnRlZCIsICJjcmVhdGVTZXNzaW9uQWxsb2NhdGUiLCAiY3JlYXRlU2Vzc2lvbkZpbmFsaXplIiwgImNyZWF0ZVNlc3Npb24iLCAicmVsZWFzZVNlc3Npb24iLCAicnVuIiwgImVuZFByb2ZpbGluZyIsICJpc09ydEVudkluaXRpYWxpemVkIiwgImVudiIsICJyZWFkRmlsZSIsICJUZW5zb3IiLCAiY3JlYXRlU2Vzc2lvbkFsbG9jYXRlIiwgImlzT3J0RW52SW5pdGlhbGl6ZWQiLCAiZW52IiwgInJlYWRGaWxlIiwgImNyZWF0ZVNlc3Npb24iLCAiY3JlYXRlU2Vzc2lvbkZpbmFsaXplIiwgInJlbGVhc2VTZXNzaW9uIiwgInJ1biIsICJlbmRQcm9maWxpbmciLCAiZW52IiwgIkluZmVyZW5jZVNlc3Npb24iLCAiVGVuc29yIiwgIlRyYWluaW5nU2Vzc2lvbiIsICJlbnYiLCAidmVyc2lvbiIsICJ3YXNtQmFja2VuZCIsICJlbnYiLCAidmVyc2lvbiJdCn0K
