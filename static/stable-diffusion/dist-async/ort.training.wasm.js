/*!
 * ONNX Runtime Web v1.17.0
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
"use strict";
var ort = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // common/dist/esm/backend-impl.js
  var backends, backendsSortedByPriority, registerBackend, resolveBackend;
  var init_backend_impl = __esm({
    "common/dist/esm/backend-impl.js"() {
      "use strict";
      backends = /* @__PURE__ */ new Map();
      backendsSortedByPriority = [];
      registerBackend = (name, backend, priority) => {
        if (backend && typeof backend.init === "function" && typeof backend.createInferenceSessionHandler === "function") {
          const currentBackend = backends.get(name);
          if (currentBackend === void 0) {
            backends.set(name, { backend, priority });
          } else if (currentBackend.priority > priority) {
            return;
          } else if (currentBackend.priority === priority) {
            if (currentBackend.backend !== backend) {
              throw new Error(`cannot register backend "${name}" using priority ${priority}`);
            }
          }
          if (priority >= 0) {
            const i = backendsSortedByPriority.indexOf(name);
            if (i !== -1) {
              backendsSortedByPriority.splice(i, 1);
            }
            for (let i2 = 0; i2 < backendsSortedByPriority.length; i2++) {
              if (backends.get(backendsSortedByPriority[i2]).priority <= priority) {
                backendsSortedByPriority.splice(i2, 0, name);
                return;
              }
            }
            backendsSortedByPriority.push(name);
          }
          return;
        }
        throw new TypeError("not a valid backend");
      };
      resolveBackend = async (backendHints) => {
        const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;
        const errors = [];
        for (const backendName of backendNames) {
          const backendInfo = backends.get(backendName);
          if (backendInfo) {
            if (backendInfo.initialized) {
              return backendInfo.backend;
            } else if (backendInfo.aborted) {
              continue;
            }
            const isInitializing = !!backendInfo.initPromise;
            try {
              if (!isInitializing) {
                backendInfo.initPromise = backendInfo.backend.init(backendName);
              }
              await backendInfo.initPromise;
              backendInfo.initialized = true;
              return backendInfo.backend;
            } catch (e) {
              if (!isInitializing) {
                errors.push({ name: backendName, err: e });
              }
              backendInfo.aborted = true;
            } finally {
              delete backendInfo.initPromise;
            }
          }
        }
        throw new Error(`no available backend found. ERR: ${errors.map((e) => `[${e.name}] ${e.err}`).join(", ")}`);
      };
    }
  });

  // common/dist/esm/backend.js
  var init_backend = __esm({
    "common/dist/esm/backend.js"() {
      "use strict";
      init_backend_impl();
    }
  });

  // common/dist/esm/version.js
  var version;
  var init_version = __esm({
    "common/dist/esm/version.js"() {
      "use strict";
      version = "1.17.0";
    }
  });

  // common/dist/esm/env-impl.js
  var logLevelValue, env;
  var init_env_impl = __esm({
    "common/dist/esm/env-impl.js"() {
      "use strict";
      init_version();
      logLevelValue = "warning";
      env = {
        wasm: {},
        webgl: {},
        webgpu: {},
        versions: { common: version },
        set logLevel(value) {
          if (value === void 0) {
            return;
          }
          if (typeof value !== "string" || ["verbose", "info", "warning", "error", "fatal"].indexOf(value) === -1) {
            throw new Error(`Unsupported logging level: ${value}`);
          }
          logLevelValue = value;
        },
        get logLevel() {
          return logLevelValue;
        }
      };
      Object.defineProperty(env, "logLevel", { enumerable: true });
    }
  });

  // common/dist/esm/env.js
  var env2;
  var init_env = __esm({
    "common/dist/esm/env.js"() {
      "use strict";
      init_env_impl();
      env2 = env;
    }
  });

  // common/dist/esm/tensor-conversion-impl.js
  var tensorToDataURL, tensorToImageData;
  var init_tensor_conversion_impl = __esm({
    "common/dist/esm/tensor-conversion-impl.js"() {
      "use strict";
      tensorToDataURL = (tensor, options) => {
        const canvas = typeof document !== "undefined" ? document.createElement("canvas") : new OffscreenCanvas(1, 1);
        canvas.width = tensor.dims[3];
        canvas.height = tensor.dims[2];
        const pixels2DContext = canvas.getContext("2d");
        if (pixels2DContext != null) {
          let width;
          let height;
          if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
            width = tensor.dims[2];
            height = tensor.dims[3];
          } else {
            width = tensor.dims[3];
            height = tensor.dims[2];
          }
          const inputformat = options?.format !== void 0 ? options.format : "RGB";
          const norm = options?.norm;
          let normMean;
          let normBias;
          if (norm === void 0 || norm.mean === void 0) {
            normMean = [255, 255, 255, 255];
          } else {
            if (typeof norm.mean === "number") {
              normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
            } else {
              normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];
              if (norm.mean[3] !== void 0) {
                normMean[3] = norm.mean[3];
              }
            }
          }
          if (norm === void 0 || norm.bias === void 0) {
            normBias = [0, 0, 0, 0];
          } else {
            if (typeof norm.bias === "number") {
              normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
            } else {
              normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
              if (norm.bias[3] !== void 0) {
                normBias[3] = norm.bias[3];
              }
            }
          }
          const stride = height * width;
          let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
          if (inputformat === "RGBA") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
            aTensorPointer = stride * 3;
          } else if (inputformat === "RGB") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
          } else if (inputformat === "RBG") {
            rTensorPointer = 0;
            bTensorPointer = stride;
            gTensorPointer = stride * 2;
          }
          for (let i = 0; i < height; i++) {
            for (let j = 0; j < width; j++) {
              const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
              const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
              const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
              const A = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
              pixels2DContext.fillStyle = "rgba(" + R + "," + G + "," + B + "," + A + ")";
              pixels2DContext.fillRect(j, i, 1, 1);
            }
          }
          if ("toDataURL" in canvas) {
            return canvas.toDataURL();
          } else {
            throw new Error("toDataURL is not supported");
          }
        } else {
          throw new Error("Can not access image data");
        }
      };
      tensorToImageData = (tensor, options) => {
        const pixels2DContext = typeof document !== "undefined" ? document.createElement("canvas").getContext("2d") : new OffscreenCanvas(1, 1).getContext("2d");
        let image;
        if (pixels2DContext != null) {
          let width;
          let height;
          let channels;
          if (options?.tensorLayout !== void 0 && options.tensorLayout === "NHWC") {
            width = tensor.dims[2];
            height = tensor.dims[1];
            channels = tensor.dims[3];
          } else {
            width = tensor.dims[3];
            height = tensor.dims[2];
            channels = tensor.dims[1];
          }
          const inputformat = options !== void 0 ? options.format !== void 0 ? options.format : "RGB" : "RGB";
          const norm = options?.norm;
          let normMean;
          let normBias;
          if (norm === void 0 || norm.mean === void 0) {
            normMean = [255, 255, 255, 255];
          } else {
            if (typeof norm.mean === "number") {
              normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
            } else {
              normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];
              if (norm.mean[3] !== void 0) {
                normMean[3] = norm.mean[3];
              }
            }
          }
          if (norm === void 0 || norm.bias === void 0) {
            normBias = [0, 0, 0, 0];
          } else {
            if (typeof norm.bias === "number") {
              normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
            } else {
              normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];
              if (norm.bias[3] !== void 0) {
                normBias[3] = norm.bias[3];
              }
            }
          }
          const stride = height * width;
          if (options !== void 0) {
            if (options.format !== void 0 && (channels === 4 && options.format !== "RGBA") || channels === 3 && (options.format !== "RGB" && options.format !== "BGR")) {
              throw new Error("Tensor format doesn't match input tensor dims");
            }
          }
          const step = 4;
          let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
          let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
          if (inputformat === "RGBA") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
            aTensorPointer = stride * 3;
          } else if (inputformat === "RGB") {
            rTensorPointer = 0;
            gTensorPointer = stride;
            bTensorPointer = stride * 2;
          } else if (inputformat === "RBG") {
            rTensorPointer = 0;
            bTensorPointer = stride;
            gTensorPointer = stride * 2;
          }
          image = pixels2DContext.createImageData(width, height);
          for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {
            image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0];
            image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1];
            image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2];
            image.data[aImagePointer] = aTensorPointer === -1 ? 255 : (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3];
          }
        } else {
          throw new Error("Can not access image data");
        }
        return image;
      };
    }
  });

  // common/dist/esm/tensor-factory-impl.js
  var bufferToTensor, tensorFromImage, tensorFromTexture, tensorFromGpuBuffer, tensorFromPinnedBuffer;
  var init_tensor_factory_impl = __esm({
    "common/dist/esm/tensor-factory-impl.js"() {
      "use strict";
      init_tensor_impl();
      bufferToTensor = (buffer, options) => {
        if (buffer === void 0) {
          throw new Error("Image buffer must be defined");
        }
        if (options.height === void 0 || options.width === void 0) {
          throw new Error("Image height and width must be defined");
        }
        if (options.tensorLayout === "NHWC") {
          throw new Error("NHWC Tensor layout is not supported yet");
        }
        const { height, width } = options;
        const norm = options.norm ?? { mean: 255, bias: 0 };
        let normMean;
        let normBias;
        if (typeof norm.mean === "number") {
          normMean = [norm.mean, norm.mean, norm.mean, norm.mean];
        } else {
          normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];
        }
        if (typeof norm.bias === "number") {
          normBias = [norm.bias, norm.bias, norm.bias, norm.bias];
        } else {
          normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];
        }
        const inputformat = options.format !== void 0 ? options.format : "RGBA";
        const outputformat = options.tensorFormat !== void 0 ? options.tensorFormat !== void 0 ? options.tensorFormat : "RGB" : "RGB";
        const stride = height * width;
        const float32Data = outputformat === "RGBA" ? new Float32Array(stride * 4) : new Float32Array(stride * 3);
        let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;
        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;
        if (inputformat === "RGB") {
          step = 3;
          rImagePointer = 0;
          gImagePointer = 1;
          bImagePointer = 2;
          aImagePointer = -1;
        }
        if (outputformat === "RGBA") {
          aTensorPointer = stride * 3;
        } else if (outputformat === "RBG") {
          rTensorPointer = 0;
          bTensorPointer = stride;
          gTensorPointer = stride * 2;
        } else if (outputformat === "BGR") {
          bTensorPointer = 0;
          gTensorPointer = stride;
          rTensorPointer = stride * 2;
        }
        for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {
          float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];
          float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];
          float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];
          if (aTensorPointer !== -1 && aImagePointer !== -1) {
            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];
          }
        }
        const outputTensor = outputformat === "RGBA" ? new Tensor("float32", float32Data, [1, 4, height, width]) : new Tensor("float32", float32Data, [1, 3, height, width]);
        return outputTensor;
      };
      tensorFromImage = async (image, options) => {
        const isHTMLImageEle = typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement;
        const isImageDataEle = typeof ImageData !== "undefined" && image instanceof ImageData;
        const isImageBitmap = typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap;
        const isString = typeof image === "string";
        let data;
        let bufferToTensorOptions = options ?? {};
        const createCanvas = () => {
          if (typeof document !== "undefined") {
            return document.createElement("canvas");
          } else if (typeof OffscreenCanvas !== "undefined") {
            return new OffscreenCanvas(1, 1);
          } else {
            throw new Error("Canvas is not supported");
          }
        };
        const createCanvasContext = (canvas) => {
          if (canvas instanceof HTMLCanvasElement) {
            return canvas.getContext("2d");
          } else if (canvas instanceof OffscreenCanvas) {
            return canvas.getContext("2d");
          } else {
            return null;
          }
        };
        if (isHTMLImageEle) {
          const canvas = createCanvas();
          canvas.width = image.width;
          canvas.height = image.height;
          const pixels2DContext = createCanvasContext(canvas);
          if (pixels2DContext != null) {
            let height = image.height;
            let width = image.width;
            if (options !== void 0 && options.resizedHeight !== void 0 && options.resizedWidth !== void 0) {
              height = options.resizedHeight;
              width = options.resizedWidth;
            }
            if (options !== void 0) {
              bufferToTensorOptions = options;
              if (options.tensorFormat !== void 0) {
                throw new Error("Image input config format must be RGBA for HTMLImageElement");
              } else {
                bufferToTensorOptions.tensorFormat = "RGBA";
              }
              bufferToTensorOptions.height = height;
              bufferToTensorOptions.width = width;
            } else {
              bufferToTensorOptions.tensorFormat = "RGBA";
              bufferToTensorOptions.height = height;
              bufferToTensorOptions.width = width;
            }
            pixels2DContext.drawImage(image, 0, 0);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
          } else {
            throw new Error("Can not access image data");
          }
        } else if (isImageDataEle) {
          let height;
          let width;
          if (options !== void 0 && options.resizedWidth !== void 0 && options.resizedHeight !== void 0) {
            height = options.resizedHeight;
            width = options.resizedWidth;
          } else {
            height = image.height;
            width = image.width;
          }
          if (options !== void 0) {
            bufferToTensorOptions = options;
          }
          bufferToTensorOptions.format = "RGBA";
          bufferToTensorOptions.height = height;
          bufferToTensorOptions.width = width;
          if (options !== void 0) {
            const tempCanvas = createCanvas();
            tempCanvas.width = width;
            tempCanvas.height = height;
            const pixels2DContext = createCanvasContext(tempCanvas);
            if (pixels2DContext != null) {
              pixels2DContext.putImageData(image, 0, 0);
              data = pixels2DContext.getImageData(0, 0, width, height).data;
            } else {
              throw new Error("Can not access image data");
            }
          } else {
            data = image.data;
          }
        } else if (isImageBitmap) {
          if (options === void 0) {
            throw new Error("Please provide image config with format for Imagebitmap");
          }
          const canvas = createCanvas();
          canvas.width = image.width;
          canvas.height = image.height;
          const pixels2DContext = createCanvasContext(canvas);
          if (pixels2DContext != null) {
            const height = image.height;
            const width = image.width;
            pixels2DContext.drawImage(image, 0, 0, width, height);
            data = pixels2DContext.getImageData(0, 0, width, height).data;
            bufferToTensorOptions.height = height;
            bufferToTensorOptions.width = width;
            return bufferToTensor(data, bufferToTensorOptions);
          } else {
            throw new Error("Can not access image data");
          }
        } else if (isString) {
          return new Promise((resolve, reject) => {
            const canvas = createCanvas();
            const context = createCanvasContext(canvas);
            if (!image || !context) {
              return reject();
            }
            const newImage = new Image();
            newImage.crossOrigin = "Anonymous";
            newImage.src = image;
            newImage.onload = () => {
              canvas.width = newImage.width;
              canvas.height = newImage.height;
              context.drawImage(newImage, 0, 0, canvas.width, canvas.height);
              const img = context.getImageData(0, 0, canvas.width, canvas.height);
              bufferToTensorOptions.height = canvas.height;
              bufferToTensorOptions.width = canvas.width;
              resolve(bufferToTensor(img.data, bufferToTensorOptions));
            };
          });
        } else {
          throw new Error("Input data provided is not supported - aborted tensor creation");
        }
        if (data !== void 0) {
          return bufferToTensor(data, bufferToTensorOptions);
        } else {
          throw new Error("Input data provided is not supported - aborted tensor creation");
        }
      };
      tensorFromTexture = (texture, options) => {
        const { width, height, download, dispose } = options;
        const dims = [1, height, width, 4];
        return new Tensor({ location: "texture", type: "float32", texture, dims, download, dispose });
      };
      tensorFromGpuBuffer = (gpuBuffer, options) => {
        const { dataType, dims, download, dispose } = options;
        return new Tensor({ location: "gpu-buffer", type: dataType ?? "float32", gpuBuffer, dims, download, dispose });
      };
      tensorFromPinnedBuffer = (type, buffer, dims) => new Tensor({ location: "cpu-pinned", type, data: buffer, dims: dims ?? [buffer.length] });
    }
  });

  // common/dist/esm/tensor-impl-type-mapping.js
  var NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP, NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, isBigIntChecked, checkBigInt;
  var init_tensor_impl_type_mapping = __esm({
    "common/dist/esm/tensor-impl-type-mapping.js"() {
      "use strict";
      NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = /* @__PURE__ */ new Map([
        ["float32", Float32Array],
        ["uint8", Uint8Array],
        ["int8", Int8Array],
        ["uint16", Uint16Array],
        ["float16", Uint16Array],
        ["int16", Int16Array],
        ["int32", Int32Array],
        ["bool", Uint8Array],
        ["float64", Float64Array],
        ["uint32", Uint32Array]
      ]);
      NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = /* @__PURE__ */ new Map([
        [Float32Array, "float32"],
        [Uint8Array, "uint8"],
        [Int8Array, "int8"],
        [Uint16Array, "uint16"],
        [Int16Array, "int16"],
        [Int32Array, "int32"],
        [Float64Array, "float64"],
        [Uint32Array, "uint32"]
      ]);
      isBigIntChecked = false;
      checkBigInt = () => {
        if (!isBigIntChecked) {
          isBigIntChecked = true;
          const isBigInt64ArrayAvailable = typeof BigInt64Array !== "undefined" && typeof BigInt64Array.from === "function";
          const isBigUint64ArrayAvailable = typeof BigUint64Array !== "undefined" && typeof BigUint64Array.from === "function";
          if (isBigInt64ArrayAvailable) {
            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("int64", BigInt64Array);
            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, "int64");
          }
          if (isBigUint64ArrayAvailable) {
            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("uint64", BigUint64Array);
            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, "uint64");
          }
        }
      };
    }
  });

  // common/dist/esm/tensor-utils-impl.js
  var calculateSize, tensorReshape;
  var init_tensor_utils_impl = __esm({
    "common/dist/esm/tensor-utils-impl.js"() {
      "use strict";
      init_tensor_impl();
      calculateSize = (dims) => {
        let size = 1;
        for (let i = 0; i < dims.length; i++) {
          const dim = dims[i];
          if (typeof dim !== "number" || !Number.isSafeInteger(dim)) {
            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);
          }
          if (dim < 0) {
            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);
          }
          size *= dim;
        }
        return size;
      };
      tensorReshape = (tensor, dims) => {
        switch (tensor.location) {
          case "cpu":
            return new Tensor(tensor.type, tensor.data, dims);
          case "cpu-pinned":
            return new Tensor({
              location: "cpu-pinned",
              data: tensor.data,
              type: tensor.type,
              dims
            });
          case "texture":
            return new Tensor({
              location: "texture",
              texture: tensor.texture,
              type: tensor.type,
              dims
            });
          case "gpu-buffer":
            return new Tensor({
              location: "gpu-buffer",
              gpuBuffer: tensor.gpuBuffer,
              type: tensor.type,
              dims
            });
          default:
            throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);
        }
      };
    }
  });

  // common/dist/esm/tensor-impl.js
  var Tensor;
  var init_tensor_impl = __esm({
    "common/dist/esm/tensor-impl.js"() {
      "use strict";
      init_tensor_conversion_impl();
      init_tensor_factory_impl();
      init_tensor_impl_type_mapping();
      init_tensor_utils_impl();
      Tensor = class {
        /**
         * implementation.
         */
        constructor(arg0, arg1, arg2) {
          checkBigInt();
          let type;
          let dims;
          if (typeof arg0 === "object" && "location" in arg0) {
            this.dataLocation = arg0.location;
            type = arg0.type;
            dims = arg0.dims;
            switch (arg0.location) {
              case "cpu-pinned": {
                const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);
                if (!expectedTypedArrayConstructor) {
                  throw new TypeError(`unsupported type "${type}" to create tensor from pinned buffer`);
                }
                if (!(arg0.data instanceof expectedTypedArrayConstructor)) {
                  throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);
                }
                this.cpuData = arg0.data;
                break;
              }
              case "texture": {
                if (type !== "float32") {
                  throw new TypeError(`unsupported type "${type}" to create tensor from texture`);
                }
                this.gpuTextureData = arg0.texture;
                this.downloader = arg0.download;
                this.disposer = arg0.dispose;
                break;
              }
              case "gpu-buffer": {
                if (type !== "float32" && type !== "float16" && type !== "int32" && type !== "int64" && type !== "uint32" && type !== "bool") {
                  throw new TypeError(`unsupported type "${type}" to create tensor from gpu buffer`);
                }
                this.gpuBufferData = arg0.gpuBuffer;
                this.downloader = arg0.download;
                this.disposer = arg0.dispose;
                break;
              }
              default:
                throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);
            }
          } else {
            let data;
            let maybeDims;
            if (typeof arg0 === "string") {
              type = arg0;
              maybeDims = arg2;
              if (arg0 === "string") {
                if (!Array.isArray(arg1)) {
                  throw new TypeError("A string tensor's data must be a string array.");
                }
                data = arg1;
              } else {
                const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);
                if (typedArrayConstructor === void 0) {
                  throw new TypeError(`Unsupported tensor type: ${arg0}.`);
                }
                if (Array.isArray(arg1)) {
                  if (arg0 === "float16") {
                    throw new TypeError("Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.");
                  } else if (arg0 === "uint64" || arg0 === "int64") {
                    data = typedArrayConstructor.from(arg1, BigInt);
                  } else {
                    data = typedArrayConstructor.from(arg1);
                  }
                } else if (arg1 instanceof typedArrayConstructor) {
                  data = arg1;
                } else {
                  throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);
                }
              }
            } else {
              maybeDims = arg1;
              if (Array.isArray(arg0)) {
                if (arg0.length === 0) {
                  throw new TypeError("Tensor type cannot be inferred from an empty array.");
                }
                const firstElementType = typeof arg0[0];
                if (firstElementType === "string") {
                  type = "string";
                  data = arg0;
                } else if (firstElementType === "boolean") {
                  type = "bool";
                  data = Uint8Array.from(arg0);
                } else {
                  throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);
                }
              } else {
                const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);
                if (mappedType === void 0) {
                  throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);
                }
                type = mappedType;
                data = arg0;
              }
            }
            if (maybeDims === void 0) {
              maybeDims = [data.length];
            } else if (!Array.isArray(maybeDims)) {
              throw new TypeError("A tensor's dims must be a number array");
            }
            dims = maybeDims;
            this.cpuData = data;
            this.dataLocation = "cpu";
          }
          const size = calculateSize(dims);
          if (this.cpuData && size !== this.cpuData.length) {
            throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);
          }
          this.type = type;
          this.dims = dims;
          this.size = size;
        }
        // #endregion
        // #region factory
        static async fromImage(image, options) {
          return tensorFromImage(image, options);
        }
        static fromTexture(texture, options) {
          return tensorFromTexture(texture, options);
        }
        static fromGpuBuffer(gpuBuffer, options) {
          return tensorFromGpuBuffer(gpuBuffer, options);
        }
        static fromPinnedBuffer(type, buffer, dims) {
          return tensorFromPinnedBuffer(type, buffer, dims);
        }
        // #endregion
        // #region conversions
        toDataURL(options) {
          return tensorToDataURL(this, options);
        }
        toImageData(options) {
          return tensorToImageData(this, options);
        }
        // #endregion
        // #region properties
        get data() {
          this.ensureValid();
          if (!this.cpuData) {
            throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");
          }
          return this.cpuData;
        }
        get location() {
          return this.dataLocation;
        }
        get texture() {
          this.ensureValid();
          if (!this.gpuTextureData) {
            throw new Error("The data is not stored as a WebGL texture.");
          }
          return this.gpuTextureData;
        }
        get gpuBuffer() {
          this.ensureValid();
          if (!this.gpuBufferData) {
            throw new Error("The data is not stored as a WebGPU buffer.");
          }
          return this.gpuBufferData;
        }
        // #endregion
        // #region methods
        async getData(releaseData) {
          this.ensureValid();
          switch (this.dataLocation) {
            case "cpu":
            case "cpu-pinned":
              return this.data;
            case "texture":
            case "gpu-buffer": {
              if (!this.downloader) {
                throw new Error("The current tensor is not created with a specified data downloader.");
              }
              if (this.isDownloading) {
                throw new Error("The current tensor is being downloaded.");
              }
              try {
                this.isDownloading = true;
                const data = await this.downloader();
                this.downloader = void 0;
                this.dataLocation = "cpu";
                this.cpuData = data;
                if (releaseData && this.disposer) {
                  this.disposer();
                  this.disposer = void 0;
                }
                return data;
              } finally {
                this.isDownloading = false;
              }
            }
            default:
              throw new Error(`cannot get data from location: ${this.dataLocation}`);
          }
        }
        dispose() {
          if (this.isDownloading) {
            throw new Error("The current tensor is being downloaded.");
          }
          if (this.disposer) {
            this.disposer();
            this.disposer = void 0;
          }
          this.cpuData = void 0;
          this.gpuTextureData = void 0;
          this.gpuBufferData = void 0;
          this.downloader = void 0;
          this.isDownloading = void 0;
          this.dataLocation = "none";
        }
        // #endregion
        // #region tensor utilities
        ensureValid() {
          if (this.dataLocation === "none") {
            throw new Error("The tensor is disposed.");
          }
        }
        reshape(dims) {
          this.ensureValid();
          if (this.downloader || this.disposer) {
            throw new Error("Cannot reshape a tensor that owns GPU resource.");
          }
          return tensorReshape(this, dims);
        }
      };
    }
  });

  // common/dist/esm/tensor.js
  var Tensor2;
  var init_tensor = __esm({
    "common/dist/esm/tensor.js"() {
      "use strict";
      init_tensor_impl();
      Tensor2 = Tensor;
    }
  });

  // common/dist/esm/trace.js
  var TRACE, TRACE_FUNC, TRACE_FUNC_BEGIN, TRACE_FUNC_END;
  var init_trace = __esm({
    "common/dist/esm/trace.js"() {
      "use strict";
      init_env_impl();
      TRACE = (deviceType, label) => {
        if (!env.wasm.trace) {
          return;
        }
        console.timeStamp(`${deviceType}::ORT::${label}`);
      };
      TRACE_FUNC = (msg, extraMsg) => {
        const stack = new Error().stack?.split(/\r\n|\r|\n/g) || [];
        let hasTraceFunc = false;
        for (let i = 0; i < stack.length; i++) {
          if (hasTraceFunc && !stack[i].includes("TRACE_FUNC")) {
            let label = `FUNC_${msg}::${stack[i].trim().split(" ")[1]}`;
            if (extraMsg) {
              label += `::${extraMsg}`;
            }
            TRACE("CPU", label);
            return;
          }
          if (stack[i].includes("TRACE_FUNC")) {
            hasTraceFunc = true;
          }
        }
      };
      TRACE_FUNC_BEGIN = (extraMsg) => {
        if (!env.wasm.trace) {
          return;
        }
        TRACE_FUNC("BEGIN", extraMsg);
      };
      TRACE_FUNC_END = (extraMsg) => {
        if (!env.wasm.trace) {
          return;
        }
        TRACE_FUNC("END", extraMsg);
      };
    }
  });

  // common/dist/esm/inference-session-impl.js
  var InferenceSession;
  var init_inference_session_impl = __esm({
    "common/dist/esm/inference-session-impl.js"() {
      "use strict";
      init_backend_impl();
      init_tensor();
      init_trace();
      InferenceSession = class _InferenceSession {
        constructor(handler) {
          this.handler = handler;
        }
        async run(feeds, arg1, arg2) {
          TRACE_FUNC_BEGIN();
          const fetches = {};
          let options = {};
          if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
            throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
          }
          let isFetchesEmpty = true;
          if (typeof arg1 === "object") {
            if (arg1 === null) {
              throw new TypeError("Unexpected argument[1]: cannot be null.");
            }
            if (arg1 instanceof Tensor2) {
              throw new TypeError("'fetches' cannot be a Tensor");
            }
            if (Array.isArray(arg1)) {
              if (arg1.length === 0) {
                throw new TypeError("'fetches' cannot be an empty array.");
              }
              isFetchesEmpty = false;
              for (const name of arg1) {
                if (typeof name !== "string") {
                  throw new TypeError("'fetches' must be a string array or an object.");
                }
                if (this.outputNames.indexOf(name) === -1) {
                  throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
                }
                fetches[name] = null;
              }
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              let isFetches = false;
              const arg1Keys = Object.getOwnPropertyNames(arg1);
              for (const name of this.outputNames) {
                if (arg1Keys.indexOf(name) !== -1) {
                  const v = arg1[name];
                  if (v === null || v instanceof Tensor2) {
                    isFetches = true;
                    isFetchesEmpty = false;
                    fetches[name] = v;
                  }
                }
              }
              if (isFetches) {
                if (typeof arg2 === "object" && arg2 !== null) {
                  options = arg2;
                } else if (typeof arg2 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else {
                options = arg1;
              }
            }
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
          }
          for (const name of this.inputNames) {
            if (typeof feeds[name] === "undefined") {
              throw new Error(`input '${name}' is missing in 'feeds'.`);
            }
          }
          if (isFetchesEmpty) {
            for (const name of this.outputNames) {
              fetches[name] = null;
            }
          }
          const results = await this.handler.run(feeds, fetches, options);
          const returnValue = {};
          for (const key in results) {
            if (Object.hasOwnProperty.call(results, key)) {
              const result = results[key];
              if (result instanceof Tensor2) {
                returnValue[key] = result;
              } else {
                returnValue[key] = new Tensor2(result.type, result.data, result.dims);
              }
            }
          }
          TRACE_FUNC_END();
          return returnValue;
        }
        async release() {
          return this.handler.dispose();
        }
        static async create(arg0, arg1, arg2, arg3) {
          TRACE_FUNC_BEGIN();
          let filePathOrUint8Array;
          let options = {};
          if (typeof arg0 === "string") {
            filePathOrUint8Array = arg0;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else if (arg0 instanceof Uint8Array) {
            filePathOrUint8Array = arg0;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
          } else if (arg0 instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && arg0 instanceof SharedArrayBuffer) {
            const buffer = arg0;
            let byteOffset = 0;
            let byteLength = arg0.byteLength;
            if (typeof arg1 === "object" && arg1 !== null) {
              options = arg1;
            } else if (typeof arg1 === "number") {
              byteOffset = arg1;
              if (!Number.isSafeInteger(byteOffset)) {
                throw new RangeError("'byteOffset' must be an integer.");
              }
              if (byteOffset < 0 || byteOffset >= buffer.byteLength) {
                throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);
              }
              byteLength = arg0.byteLength - byteOffset;
              if (typeof arg2 === "number") {
                byteLength = arg2;
                if (!Number.isSafeInteger(byteLength)) {
                  throw new RangeError("'byteLength' must be an integer.");
                }
                if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {
                  throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);
                }
                if (typeof arg3 === "object" && arg3 !== null) {
                  options = arg3;
                } else if (typeof arg3 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'byteLength' must be a number.");
              }
            } else if (typeof arg1 !== "undefined") {
              throw new TypeError("'options' must be an object.");
            }
            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);
          } else {
            throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
          }
          const eps = options.executionProviders || [];
          const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
          const backend = await resolveBackend(backendHints);
          const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, options);
          TRACE_FUNC_END();
          return new _InferenceSession(handler);
        }
        startProfiling() {
          this.handler.startProfiling();
        }
        endProfiling() {
          this.handler.endProfiling();
        }
        get inputNames() {
          return this.handler.inputNames;
        }
        get outputNames() {
          return this.handler.outputNames;
        }
      };
    }
  });

  // common/dist/esm/inference-session.js
  var InferenceSession2;
  var init_inference_session = __esm({
    "common/dist/esm/inference-session.js"() {
      "use strict";
      init_inference_session_impl();
      InferenceSession2 = InferenceSession;
    }
  });

  // common/dist/esm/onnx-value.js
  var init_onnx_value = __esm({
    "common/dist/esm/onnx-value.js"() {
      "use strict";
    }
  });

  // common/dist/esm/training-session-impl.js
  var noBackendErrMsg, TrainingSession;
  var init_training_session_impl = __esm({
    "common/dist/esm/training-session-impl.js"() {
      "use strict";
      init_backend_impl();
      init_tensor();
      noBackendErrMsg = "Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.";
      TrainingSession = class _TrainingSession {
        constructor(handler, hasOptimizerModel, hasEvalModel) {
          this.handler = handler;
          this.hasOptimizerModel = hasOptimizerModel;
          this.hasEvalModel = hasEvalModel;
        }
        get trainingInputNames() {
          return this.handler.inputNames;
        }
        get trainingOutputNames() {
          return this.handler.outputNames;
        }
        get evalInputNames() {
          if (this.hasEvalModel) {
            return this.handler.evalInputNames;
          } else {
            throw new Error("This training session has no evalModel loaded.");
          }
        }
        get evalOutputNames() {
          if (this.hasEvalModel) {
            return this.handler.evalOutputNames;
          } else {
            throw new Error("This training session has no evalModel loaded.");
          }
        }
        static async create(trainingOptions, sessionOptions) {
          const evalModel = trainingOptions.evalModel || "";
          const optimizerModel = trainingOptions.optimizerModel || "";
          const options = sessionOptions || {};
          const eps = options.executionProviders || [];
          const backendHints = eps.map((i) => typeof i === "string" ? i : i.name);
          const backend = await resolveBackend(backendHints);
          if (backend.createTrainingSessionHandler) {
            const handler = await backend.createTrainingSessionHandler(trainingOptions.checkpointState, trainingOptions.trainModel, evalModel, optimizerModel, options);
            return new _TrainingSession(handler, !!trainingOptions.optimizerModel, !!trainingOptions.evalModel);
          } else {
            throw new Error(noBackendErrMsg);
          }
        }
        /**
         * Helper function for runTrainStep and future runStep methods that handles the type-narrowing conversion from
         * the given parameters to SessionHandler.FetchesType and RunOptions.
         *
         * @param inputNames the feeds object is checked that they contain all input names in the provided list of input
         * names.
         * @param outputNames the fetches object is checked that their keys match up with valid names in the list of output
         * names.
         * @param feeds the required input
         * @param arg1 narrowed & converted into the SessionHandler.FetchesType or RunOptions object
         * @param arg2 optional RunOptions object.
         * @returns
         */
        typeNarrowingForRunStep(inputNames, outputNames, feeds, arg1, arg2) {
          const fetches = {};
          let options = {};
          if (typeof feeds !== "object" || feeds === null || feeds instanceof Tensor2 || Array.isArray(feeds)) {
            throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
          }
          let isFetchesEmpty = true;
          if (typeof arg1 === "object") {
            if (arg1 === null) {
              throw new TypeError("Unexpected argument[1]: cannot be null.");
            }
            if (arg1 instanceof Tensor2) {
              throw new TypeError("'fetches' cannot be a Tensor");
            }
            if (Array.isArray(arg1)) {
              if (arg1.length === 0) {
                throw new TypeError("'fetches' cannot be an empty array.");
              }
              isFetchesEmpty = false;
              for (const name of arg1) {
                if (typeof name !== "string") {
                  throw new TypeError("'fetches' must be a string array or an object.");
                }
                if (outputNames.indexOf(name) === -1) {
                  throw new RangeError(`'fetches' contains invalid output name: ${name}.`);
                }
                fetches[name] = null;
              }
              if (typeof arg2 === "object" && arg2 !== null) {
                options = arg2;
              } else if (typeof arg2 !== "undefined") {
                throw new TypeError("'options' must be an object.");
              }
            } else {
              let isFetches = false;
              const arg1Keys = Object.getOwnPropertyNames(arg1);
              for (const name of outputNames) {
                if (arg1Keys.indexOf(name) !== -1) {
                  const v = arg1[name];
                  if (v === null || v instanceof Tensor2) {
                    isFetches = true;
                    isFetchesEmpty = false;
                    fetches[name] = v;
                  }
                }
              }
              if (isFetches) {
                if (typeof arg2 === "object" && arg2 !== null) {
                  options = arg2;
                } else if (typeof arg2 !== "undefined") {
                  throw new TypeError("'options' must be an object.");
                }
              } else {
                options = arg1;
              }
            }
          } else if (typeof arg1 !== "undefined") {
            throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
          }
          for (const name of inputNames) {
            if (typeof feeds[name] === "undefined") {
              throw new Error(`input '${name}' is missing in 'feeds'.`);
            }
          }
          if (isFetchesEmpty) {
            for (const name of outputNames) {
              fetches[name] = null;
            }
          }
          return [fetches, options];
        }
        /**
         * Helper method for runTrainStep and any other runStep methods. Takes the ReturnType result from the SessionHandler
         * and changes it into a map of Tensors.
         *
         * @param results
         * @returns
         */
        convertHandlerReturnTypeToMapOfTensors(results) {
          const returnValue = {};
          for (const key in results) {
            if (Object.hasOwnProperty.call(results, key)) {
              const result = results[key];
              if (result instanceof Tensor2) {
                returnValue[key] = result;
              } else {
                returnValue[key] = new Tensor2(result.type, result.data, result.dims);
              }
            }
          }
          return returnValue;
        }
        async lazyResetGrad() {
          await this.handler.lazyResetGrad();
        }
        async runTrainStep(feeds, arg1, arg2) {
          const [fetches, options] = this.typeNarrowingForRunStep(this.trainingInputNames, this.trainingOutputNames, feeds, arg1, arg2);
          const results = await this.handler.runTrainStep(feeds, fetches, options);
          return this.convertHandlerReturnTypeToMapOfTensors(results);
        }
        async runOptimizerStep(options) {
          if (this.hasOptimizerModel) {
            await this.handler.runOptimizerStep(options || {});
          } else {
            throw new Error("This TrainingSession has no OptimizerModel loaded.");
          }
        }
        async runEvalStep(feeds, arg1, arg2) {
          if (this.hasEvalModel) {
            const [fetches, options] = this.typeNarrowingForRunStep(this.evalInputNames, this.evalOutputNames, feeds, arg1, arg2);
            const results = await this.handler.runEvalStep(feeds, fetches, options);
            return this.convertHandlerReturnTypeToMapOfTensors(results);
          } else {
            throw new Error("This TrainingSession has no EvalModel loaded.");
          }
        }
        async getParametersSize(trainableOnly = true) {
          return this.handler.getParametersSize(trainableOnly);
        }
        async loadParametersBuffer(array, trainableOnly = true) {
          const paramsSize = await this.getParametersSize(trainableOnly);
          if (array.length !== 4 * paramsSize) {
            throw new Error("Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.");
          }
          return this.handler.loadParametersBuffer(array, trainableOnly);
        }
        async getContiguousParameters(trainableOnly = true) {
          return this.handler.getContiguousParameters(trainableOnly);
        }
        async release() {
          return this.handler.dispose();
        }
      };
    }
  });

  // common/dist/esm/training-session.js
  var TrainingSession2;
  var init_training_session = __esm({
    "common/dist/esm/training-session.js"() {
      "use strict";
      init_training_session_impl();
      TrainingSession2 = TrainingSession;
    }
  });

  // common/dist/esm/index.js
  var esm_exports = {};
  __export(esm_exports, {
    InferenceSession: () => InferenceSession2,
    TRACE: () => TRACE,
    TRACE_FUNC_BEGIN: () => TRACE_FUNC_BEGIN,
    TRACE_FUNC_END: () => TRACE_FUNC_END,
    Tensor: () => Tensor2,
    TrainingSession: () => TrainingSession2,
    env: () => env2,
    registerBackend: () => registerBackend
  });
  var init_esm = __esm({
    "common/dist/esm/index.js"() {
      "use strict";
      init_backend();
      init_env();
      init_inference_session();
      init_tensor();
      init_trace();
      init_onnx_value();
      init_training_session();
    }
  });

  // nodejs-ignore:node:os
  var cpus;
  var init_node_os = __esm({
    "nodejs-ignore:node:os"() {
      cpus = void 0;
    }
  });

  // nodejs-ignore:node:path
  var join;
  var init_node_path = __esm({
    "nodejs-ignore:node:path"() {
      join = void 0;
    }
  });

  // nodejs-ignore:fs
  var fs_exports = {};
  __export(fs_exports, {
    createReadStream: () => createReadStream,
    readFile: () => readFile,
    readFileSync: () => readFileSync
  });
  var readFile, readFileSync, createReadStream;
  var init_fs = __esm({
    "nodejs-ignore:fs"() {
      readFile = void 0;
      readFileSync = void 0;
      createReadStream = void 0;
    }
  });

  // nodejs-ignore:path
  var path_exports = {};
  __export(path_exports, {
    join: () => join2
  });
  var join2;
  var init_path = __esm({
    "nodejs-ignore:path"() {
      join2 = void 0;
    }
  });

  // web/lib/wasm/binding/ort-training-wasm-simd.js
  var require_ort_training_wasm_simd = __commonJS({
    "web/lib/wasm/binding/ort-training-wasm-simd.js"(exports, module) {
      "use strict";
      var ortWasm = (() => {
        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
        if (typeof __filename !== "undefined")
          _scriptDir = _scriptDir || __filename;
        return function(moduleArg = {}) {
          var e = moduleArg, k, l;
          e.ready = new Promise((a, b) => {
            k = a;
            l = b;
          });
          var aa = Object.assign({}, e), ba = "./this.program", ca = "object" == typeof window, q = "function" == typeof importScripts, da = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, v = "", x, z, A;
          if (da) {
            var fs = (init_fs(), __toCommonJS(fs_exports)), B = (init_path(), __toCommonJS(path_exports));
            v = q ? B.dirname(v) + "/" : __dirname + "/";
            x = (a, b) => {
              a = C(a) ? new URL(a) : B.normalize(a);
              return fs.readFileSync(a, b ? void 0 : "utf8");
            };
            A = (a) => {
              a = x(a, true);
              a.buffer || (a = new Uint8Array(a));
              return a;
            };
            z = (a, b, c, d = true) => {
              a = C(a) ? new URL(a) : B.normalize(a);
              fs.readFile(a, d ? void 0 : "utf8", (g, h) => {
                g ? c(g) : b(d ? h.buffer : h);
              });
            };
            !e.thisProgram && 1 < process.argv.length && (ba = process.argv[1].replace(/\\/g, "/"));
            process.argv.slice(2);
            e.inspect = () => "[Emscripten Module object]";
          } else if (ca || q)
            q ? v = self.location.href : "undefined" != typeof document && document.currentScript && (v = document.currentScript.src), _scriptDir && (v = _scriptDir), 0 !== v.indexOf("blob:") ? v = v.substr(0, v.replace(/[?#].*/, "").lastIndexOf("/") + 1) : v = "", x = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.send(null);
              return b.responseText;
            }, q && (A = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.responseType = "arraybuffer";
              b.send(null);
              return new Uint8Array(b.response);
            }), z = (a, b, c) => {
              var d = new XMLHttpRequest();
              d.open("GET", a, true);
              d.responseType = "arraybuffer";
              d.onload = () => {
                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
              };
              d.onerror = c;
              d.send(null);
            };
          var ea = console.log.bind(console), D = console.error.bind(console);
          Object.assign(e, aa);
          aa = null;
          "object" != typeof WebAssembly && E("no native wasm support detected");
          var F, fa = false, G, H, I, J, ha;
          function ia() {
            var a = F.buffer;
            e.HEAP8 = G = new Int8Array(a);
            e.HEAP16 = new Int16Array(a);
            e.HEAPU8 = H = new Uint8Array(a);
            e.HEAPU16 = new Uint16Array(a);
            e.HEAP32 = I = new Int32Array(a);
            e.HEAPU32 = J = new Uint32Array(a);
            e.HEAPF32 = new Float32Array(a);
            e.HEAPF64 = ha = new Float64Array(a);
          }
          var K = [], L = [], ja = [], M = 0, N = null, O = null;
          function E(a) {
            a = "Aborted(" + a + ")";
            D(a);
            fa = true;
            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
            l(a);
            throw a;
          }
          var ka = (a) => a.startsWith("data:application/octet-stream;base64,"), C = (a) => a.startsWith("file://"), P;
          P = "ort-training-wasm-simd.wasm";
          if (!ka(P)) {
            var la = P;
            P = e.locateFile ? e.locateFile(la, v) : v + la;
          }
          function ma(a) {
            if (A)
              return A(a);
            throw "both async and sync fetching of the wasm failed";
          }
          function na(a) {
            if (ca || q) {
              if ("function" == typeof fetch && !C(a))
                return fetch(a, { credentials: "same-origin" }).then((b) => {
                  if (!b.ok)
                    throw "failed to load wasm binary file at '" + a + "'";
                  return b.arrayBuffer();
                }).catch(() => ma(a));
              if (z)
                return new Promise((b, c) => {
                  z(a, (d) => b(new Uint8Array(d)), c);
                });
            }
            return Promise.resolve().then(() => ma(a));
          }
          function oa(a, b, c) {
            return na(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {
              D(`failed to asynchronously prepare wasm: ${d}`);
              E(d);
            });
          }
          function pa(a, b) {
            var c = P;
            return "function" != typeof WebAssembly.instantiateStreaming || ka(c) || C(c) || da || "function" != typeof fetch ? oa(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(g) {
              D(`wasm streaming compile failed: ${g}`);
              D("falling back to ArrayBuffer instantiation");
              return oa(c, a, b);
            }));
          }
          var Q, qa = { 989232: (a, b, c, d) => {
            if ("undefined" == typeof e || !e.Qa)
              return 1;
            a = R(a >>> 0);
            a.startsWith("./") && (a = a.substring(2));
            a = e.Qa.get(a);
            if (!a)
              return 2;
            b >>>= 0;
            c >>>= 0;
            if (b + c > a.byteLength)
              return 3;
            try {
              return H.set(a.subarray(b, b + c), d >>> 0 >>> 0), 0;
            } catch {
              return 4;
            }
          } };
          function ra(a) {
            this.Ka = a - 24;
            this.Pa = function(b) {
              J[this.Ka + 4 >>> 2 >>> 0] = b;
            };
            this.Oa = function(b) {
              J[this.Ka + 8 >>> 2 >>> 0] = b;
            };
            this.Ma = function(b, c) {
              this.Na();
              this.Pa(b);
              this.Oa(c);
            };
            this.Na = function() {
              J[this.Ka + 16 >>> 2 >>> 0] = 0;
            };
          }
          var sa = 0, ta = 0, ua = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, va = (a, b, c) => {
            b >>>= 0;
            var d = b + c;
            for (c = b; a[c] && !(c >= d); )
              ++c;
            if (16 < c - b && a.buffer && ua)
              return ua.decode(a.subarray(b, c));
            for (d = ""; b < c; ) {
              var g = a[b++];
              if (g & 128) {
                var h = a[b++] & 63;
                if (192 == (g & 224))
                  d += String.fromCharCode((g & 31) << 6 | h);
                else {
                  var m = a[b++] & 63;
                  g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | m : (g & 7) << 18 | h << 12 | m << 6 | a[b++] & 63;
                  65536 > g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));
                }
              } else
                d += String.fromCharCode(g);
            }
            return d;
          }, R = (a, b) => (a >>>= 0) ? va(H, a, b) : "", S = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
            }
            return b;
          }, T = (a, b, c, d) => {
            c >>>= 0;
            if (!(0 < d))
              return 0;
            var g = c;
            d = c + d - 1;
            for (var h = 0; h < a.length; ++h) {
              var m = a.charCodeAt(h);
              if (55296 <= m && 57343 >= m) {
                var r = a.charCodeAt(++h);
                m = 65536 + ((m & 1023) << 10) | r & 1023;
              }
              if (127 >= m) {
                if (c >= d)
                  break;
                b[c++ >>> 0] = m;
              } else {
                if (2047 >= m) {
                  if (c + 1 >= d)
                    break;
                  b[c++ >>> 0] = 192 | m >> 6;
                } else {
                  if (65535 >= m) {
                    if (c + 2 >= d)
                      break;
                    b[c++ >>> 0] = 224 | m >> 12;
                  } else {
                    if (c + 3 >= d)
                      break;
                    b[c++ >>> 0] = 240 | m >> 18;
                    b[c++ >>> 0] = 128 | m >> 12 & 63;
                  }
                  b[c++ >>> 0] = 128 | m >> 6 & 63;
                }
                b[c++ >>> 0] = 128 | m & 63;
              }
            }
            b[c >>> 0] = 0;
            return c - g;
          }, U = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), wa = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], xa = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], Ca = (a) => {
            var b = S(a) + 1, c = Ba(b);
            c && T(a, H, c, b);
            return c;
          }, V = [], W = {}, Da = () => {
            if (!X) {
              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace(
                "-",
                "_"
              ) + ".UTF-8", _: ba || "./this.program" }, b;
              for (b in W)
                void 0 === W[b] ? delete a[b] : a[b] = W[b];
              var c = [];
              for (b in a)
                c.push(`${b}=${a[b]}`);
              X = c;
            }
            return X;
          }, X, Ea = [null, [], []], Fa = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Ga = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          function Ha(a) {
            var b = Array(S(a) + 1);
            T(a, b, 0, b.length);
            return b;
          }
          function Ia(a, b, c, d) {
            function g(f, n, p) {
              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < n; )
                f = p[0] + f;
              return f;
            }
            function h(f, n) {
              return g(f, n, "0");
            }
            function m(f, n) {
              function p(ya) {
                return 0 > ya ? -1 : 0 < ya ? 1 : 0;
              }
              var y;
              0 === (y = p(f.getFullYear() - n.getFullYear())) && 0 === (y = p(f.getMonth() - n.getMonth())) && (y = p(f.getDate() - n.getDate()));
              return y;
            }
            function r(f) {
              switch (f.getDay()) {
                case 0:
                  return new Date(f.getFullYear() - 1, 11, 29);
                case 1:
                  return f;
                case 2:
                  return new Date(f.getFullYear(), 0, 3);
                case 3:
                  return new Date(
                    f.getFullYear(),
                    0,
                    2
                  );
                case 4:
                  return new Date(f.getFullYear(), 0, 1);
                case 5:
                  return new Date(f.getFullYear() - 1, 11, 31);
                case 6:
                  return new Date(f.getFullYear() - 1, 11, 30);
              }
            }
            function w(f) {
              var n = f.Ga;
              for (f = new Date(new Date(f.Ha + 1900, 0, 1).getTime()); 0 < n; ) {
                var p = f.getMonth(), y = (U(f.getFullYear()) ? Fa : Ga)[p];
                if (n > y - f.getDate())
                  n -= y - f.getDate() + 1, f.setDate(1), 11 > p ? f.setMonth(p + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));
                else {
                  f.setDate(f.getDate() + n);
                  break;
                }
              }
              p = new Date(f.getFullYear() + 1, 0, 4);
              n = r(new Date(
                f.getFullYear(),
                0,
                4
              ));
              p = r(p);
              return 0 >= m(n, f) ? 0 >= m(p, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;
            }
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            var t = J[d + 40 >>> 2 >>> 0];
            d = { Ta: I[d >>> 2 >>> 0], Sa: I[d + 4 >>> 2 >>> 0], Ia: I[d + 8 >>> 2 >>> 0], La: I[d + 12 >>> 2 >>> 0], Ja: I[d + 16 >>> 2 >>> 0], Ha: I[d + 20 >>> 2 >>> 0], Ba: I[d + 24 >>> 2 >>> 0], Ga: I[d + 28 >>> 2 >>> 0], Va: I[d + 32 >>> 2 >>> 0], Ra: I[d + 36 >>> 2 >>> 0], Ua: t ? R(t) : "" };
            c = R(c);
            t = {
              "%c": "%a %b %d %H:%M:%S %Y",
              "%D": "%m/%d/%y",
              "%F": "%Y-%m-%d",
              "%h": "%b",
              "%r": "%I:%M:%S %p",
              "%R": "%H:%M",
              "%T": "%H:%M:%S",
              "%x": "%m/%d/%y",
              "%X": "%H:%M:%S",
              "%Ec": "%c",
              "%EC": "%C",
              "%Ex": "%m/%d/%y",
              "%EX": "%H:%M:%S",
              "%Ey": "%y",
              "%EY": "%Y",
              "%Od": "%d",
              "%Oe": "%e",
              "%OH": "%H",
              "%OI": "%I",
              "%Om": "%m",
              "%OM": "%M",
              "%OS": "%S",
              "%Ou": "%u",
              "%OU": "%U",
              "%OV": "%V",
              "%Ow": "%w",
              "%OW": "%W",
              "%Oy": "%y"
            };
            for (var u in t)
              c = c.replace(new RegExp(u, "g"), t[u]);
            var za = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Aa = "January February March April May June July August September October November December".split(" ");
            t = {
              "%a": (f) => za[f.Ba].substring(0, 3),
              "%A": (f) => za[f.Ba],
              "%b": (f) => Aa[f.Ja].substring(0, 3),
              "%B": (f) => Aa[f.Ja],
              "%C": (f) => h((f.Ha + 1900) / 100 | 0, 2),
              "%d": (f) => h(f.La, 2),
              "%e": (f) => g(f.La, 2, " "),
              "%g": (f) => w(f).toString().substring(2),
              "%G": (f) => w(f),
              "%H": (f) => h(f.Ia, 2),
              "%I": (f) => {
                f = f.Ia;
                0 == f ? f = 12 : 12 < f && (f -= 12);
                return h(f, 2);
              },
              "%j": (f) => {
                for (var n = 0, p = 0; p <= f.Ja - 1; n += (U(f.Ha + 1900) ? Fa : Ga)[p++])
                  ;
                return h(f.La + n, 3);
              },
              "%m": (f) => h(f.Ja + 1, 2),
              "%M": (f) => h(f.Sa, 2),
              "%n": () => "\n",
              "%p": (f) => 0 <= f.Ia && 12 > f.Ia ? "AM" : "PM",
              "%S": (f) => h(f.Ta, 2),
              "%t": () => "	",
              "%u": (f) => f.Ba || 7,
              "%U": (f) => h(
                Math.floor((f.Ga + 7 - f.Ba) / 7),
                2
              ),
              "%V": (f) => {
                var n = Math.floor((f.Ga + 7 - (f.Ba + 6) % 7) / 7);
                2 >= (f.Ba + 371 - f.Ga - 2) % 7 && n++;
                if (n)
                  53 == n && (p = (f.Ba + 371 - f.Ga) % 7, 4 == p || 3 == p && U(f.Ha) || (n = 1));
                else {
                  n = 52;
                  var p = (f.Ba + 7 - f.Ga - 1) % 7;
                  (4 == p || 5 == p && U(f.Ha % 400 - 1)) && n++;
                }
                return h(n, 2);
              },
              "%w": (f) => f.Ba,
              "%W": (f) => h(Math.floor((f.Ga + 7 - (f.Ba + 6) % 7) / 7), 2),
              "%y": (f) => (f.Ha + 1900).toString().substring(2),
              "%Y": (f) => f.Ha + 1900,
              "%z": (f) => {
                f = f.Ra;
                var n = 0 <= f;
                f = Math.abs(f) / 60;
                return (n ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);
              },
              "%Z": (f) => f.Ua,
              "%%": () => "%"
            };
            c = c.replace(/%%/g, "\0\0");
            for (u in t)
              c.includes(u) && (c = c.replace(new RegExp(u, "g"), t[u](d)));
            c = c.replace(/\0\0/g, "%");
            u = Ha(c);
            if (u.length > b)
              return 0;
            G.set(u, a >>> 0);
            return u.length - 1;
          }
          var La = { a: function(a, b, c) {
            a >>>= 0;
            new ra(a).Ma(b >>> 0, c >>> 0);
            sa = a;
            ta++;
            throw sa;
          }, e: function() {
            return 0;
          }, H: function() {
          }, x: function() {
          }, z: function() {
          }, J: function() {
            return 0;
          }, F: function() {
          }, A: function() {
          }, E: function() {
          }, g: function() {
          }, y: function() {
          }, v: function() {
          }, G: function() {
          }, w: function() {
          }, k: () => 1, n: function(a, b, c) {
            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
            c >>>= 0;
            a = new Date(1e3 * a);
            I[c >>> 2 >>> 0] = a.getUTCSeconds();
            I[c + 4 >>> 2 >>> 0] = a.getUTCMinutes();
            I[c + 8 >>> 2 >>> 0] = a.getUTCHours();
            I[c + 12 >>> 2 >>> 0] = a.getUTCDate();
            I[c + 16 >>> 2 >>> 0] = a.getUTCMonth();
            I[c + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;
            I[c + 24 >>> 2 >>> 0] = a.getUTCDay();
            I[c + 28 >>> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
          }, o: function(a, b, c) {
            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;
            c >>>= 0;
            a = new Date(1e3 * a);
            I[c >>> 2 >>> 0] = a.getSeconds();
            I[c + 4 >>> 2 >>> 0] = a.getMinutes();
            I[c + 8 >>> 2 >>> 0] = a.getHours();
            I[c + 12 >>> 2 >>> 0] = a.getDate();
            I[c + 16 >>> 2 >>> 0] = a.getMonth();
            I[c + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;
            I[c + 24 >>> 2 >>> 0] = a.getDay();
            I[c + 28 >>> 2 >>> 0] = (U(a.getFullYear()) ? wa : xa)[a.getMonth()] + a.getDate() - 1 | 0;
            I[c + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());
            b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();
            var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
            I[c + 32 >>> 2 >>> 0] = (b != d && a.getTimezoneOffset() == Math.min(d, b)) | 0;
          }, p: function(a) {
            a >>>= 0;
            var b = new Date(I[a + 20 >>> 2 >>> 0] + 1900, I[a + 16 >>> 2 >>> 0], I[a + 12 >>> 2 >>> 0], I[a + 8 >>> 2 >>> 0], I[a + 4 >>> 2 >>> 0], I[a >>> 2 >>> 0], 0), c = I[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), m = Math.min(h, g);
            0 > c ? I[a + 32 >>> 2 >>> 0] = Number(g != h && m == d) : 0 < c != (m == d) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? m : g) - d)));
            I[a + 24 >>> 2 >>> 0] = b.getDay();
            I[a + 28 >>> 2 >>> 0] = (U(b.getFullYear()) ? wa : xa)[b.getMonth()] + b.getDate() - 1 | 0;
            I[a >>> 2 >>> 0] = b.getSeconds();
            I[a + 4 >>> 2 >>> 0] = b.getMinutes();
            I[a + 8 >>> 2 >>> 0] = b.getHours();
            I[a + 12 >>> 2 >>> 0] = b.getDate();
            I[a + 16 >>> 2 >>> 0] = b.getMonth();
            I[a + 20 >>> 2 >>> 0] = b.getYear();
            a = b.getTime();
            isNaN(a) ? (I[Ja() >>> 2 >>> 0] = 61, a = -1) : a /= 1e3;
            return Ka((Q = a, 1 <= +Math.abs(Q) ? 0 < Q ? +Math.floor(Q / 4294967296) >>> 0 : ~~+Math.ceil((Q - +(~~Q >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;
          }, l: function() {
            return -52;
          }, m: function() {
          }, t: function(a, b, c) {
            function d(w) {
              return (w = w.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? w[1] : "GMT";
            }
            c >>>= 0;
            var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), m = new Date(g, 6, 1);
            g = h.getTimezoneOffset();
            var r = m.getTimezoneOffset();
            J[a >>> 0 >>> 2 >>> 0] = 60 * Math.max(g, r);
            I[b >>> 0 >>> 2 >>> 0] = Number(g != r);
            a = d(h);
            b = d(m);
            a = Ca(a);
            b = Ca(b);
            r < g ? (J[c >>> 2 >>> 0] = a, J[c + 4 >>> 2 >>> 0] = b) : (J[c >>> 2 >>> 0] = b, J[c + 4 >>> 2 >>> 0] = a);
          }, d: () => {
            E("");
          }, B: function(a, b, c) {
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            V.length = 0;
            for (var d; d = H[b++ >>> 0]; ) {
              var g = 105 != d;
              g &= 112 != d;
              c += g && c % 8 ? 4 : 0;
              V.push(112 == d ? J[c >>> 2 >>> 0] : 105 == d ? I[c >>> 2 >>> 0] : ha[c >>> 3 >>> 0]);
              c += g ? 8 : 4;
            }
            return qa[a].apply(null, V);
          }, h: () => Date.now(), u: function() {
            return 4294901760;
          }, b: () => performance.now(), I: function(a, b, c) {
            b >>>= 0;
            return H.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);
          }, s: function(a) {
            a >>>= 0;
            var b = H.length;
            if (4294901760 < a)
              return false;
            for (var c = 1; 4 >= c; c *= 2) {
              var d = b * (1 + 0.2 / c);
              d = Math.min(d, a + 100663296);
              var g = Math;
              d = Math.max(a, d);
              a: {
                g = (g.min.call(g, 4294901760, d + (65536 - d % 65536) % 65536) - F.buffer.byteLength + 65535) / 65536;
                try {
                  F.grow(g);
                  ia();
                  var h = 1;
                  break a;
                } catch (m) {
                }
                h = void 0;
              }
              if (h)
                return true;
            }
            return false;
          }, C: function(a, b) {
            a >>>= 0;
            b >>>= 0;
            var c = 0;
            Da().forEach((d, g) => {
              var h = b + c;
              g = J[a + 4 * g >>> 2 >>> 0] = h;
              for (h = 0; h < d.length; ++h)
                G[g++ >>> 0 >>> 0] = d.charCodeAt(h);
              G[g >>> 0 >>> 0] = 0;
              c += d.length + 1;
            });
            return 0;
          }, D: function(a, b) {
            a >>>= 0;
            b >>>= 0;
            var c = Da();
            J[a >>> 2 >>> 0] = c.length;
            var d = 0;
            c.forEach((g) => d += g.length + 1);
            J[b >>> 2 >>> 0] = d;
            return 0;
          }, f: () => 52, j: function() {
            return 52;
          }, q: function() {
            return 70;
          }, i: function(a, b, c, d) {
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            for (var g = 0, h = 0; h < c; h++) {
              var m = J[b >>> 2 >>> 0], r = J[b + 4 >>> 2 >>> 0];
              b += 8;
              for (var w = 0; w < r; w++) {
                var t = H[m + w >>> 0], u = Ea[a];
                0 === t || 10 === t ? ((1 === a ? ea : D)(va(u, 0)), u.length = 0) : u.push(t);
              }
              g += r;
            }
            J[d >>> 2 >>> 0] = g;
            return 0;
          }, r: Ia, c: function(a, b, c, d) {
            return Ia(a >>> 0, b >>> 0, c >>> 0, d >>> 0);
          } }, Y = function() {
            function a(c) {
              Y = c.exports;
              Y = Ma();
              F = Y.K;
              ia();
              L.unshift(Y.L);
              M--;
              0 == M && (null !== N && (clearInterval(N), N = null), O && (c = O, O = null, c()));
              return Y;
            }
            var b = { a: La };
            M++;
            if (e.instantiateWasm)
              try {
                return e.instantiateWasm(b, a);
              } catch (c) {
                D(`Module.instantiateWasm callback failed with error: ${c}`), l(c);
              }
            pa(b, function(c) {
              a(c.instance);
            }).catch(l);
            return {};
          }();
          e._OrtInit = (a, b) => (e._OrtInit = Y.M)(a, b);
          e._OrtGetLastError = (a, b) => (e._OrtGetLastError = Y.N)(a, b);
          e._OrtCreateSessionOptions = (a, b, c, d, g, h, m, r, w, t) => (e._OrtCreateSessionOptions = Y.O)(a, b, c, d, g, h, m, r, w, t);
          e._OrtAppendExecutionProvider = (a, b) => (e._OrtAppendExecutionProvider = Y.P)(a, b);
          e._OrtAddFreeDimensionOverride = (a, b, c) => (e._OrtAddFreeDimensionOverride = Y.Q)(a, b, c);
          e._OrtAddSessionConfigEntry = (a, b, c) => (e._OrtAddSessionConfigEntry = Y.R)(a, b, c);
          e._OrtReleaseSessionOptions = (a) => (e._OrtReleaseSessionOptions = Y.S)(a);
          e._OrtCreateSession = (a, b, c) => (e._OrtCreateSession = Y.T)(a, b, c);
          e._OrtReleaseSession = (a) => (e._OrtReleaseSession = Y.U)(a);
          e._OrtGetInputOutputCount = (a, b, c) => (e._OrtGetInputOutputCount = Y.V)(a, b, c);
          e._OrtGetInputName = (a, b) => (e._OrtGetInputName = Y.W)(a, b);
          e._OrtGetOutputName = (a, b) => (e._OrtGetOutputName = Y.X)(a, b);
          e._OrtFree = (a) => (e._OrtFree = Y.Y)(a);
          e._OrtCreateTensor = (a, b, c, d, g, h) => (e._OrtCreateTensor = Y.Z)(a, b, c, d, g, h);
          e._OrtGetTensorData = (a, b, c, d, g) => (e._OrtGetTensorData = Y._)(a, b, c, d, g);
          e._OrtReleaseTensor = (a) => (e._OrtReleaseTensor = Y.$)(a);
          e._OrtCreateRunOptions = (a, b, c, d) => (e._OrtCreateRunOptions = Y.aa)(a, b, c, d);
          e._OrtAddRunConfigEntry = (a, b, c) => (e._OrtAddRunConfigEntry = Y.ba)(a, b, c);
          e._OrtReleaseRunOptions = (a) => (e._OrtReleaseRunOptions = Y.ca)(a);
          e._OrtCreateBinding = (a) => (e._OrtCreateBinding = Y.da)(a);
          e._OrtBindInput = (a, b, c) => (e._OrtBindInput = Y.ea)(a, b, c);
          e._OrtBindOutput = (a, b, c, d) => (e._OrtBindOutput = Y.fa)(a, b, c, d);
          e._OrtClearBoundOutputs = (a) => (e._OrtClearBoundOutputs = Y.ga)(a);
          e._OrtReleaseBinding = (a) => (e._OrtReleaseBinding = Y.ha)(a);
          e._OrtRunWithBinding = (a, b, c, d, g) => (e._OrtRunWithBinding = Y.ia)(a, b, c, d, g);
          e._OrtRun = (a, b, c, d, g, h, m, r) => (e._OrtRun = Y.ja)(a, b, c, d, g, h, m, r);
          e._OrtEndProfiling = (a) => (e._OrtEndProfiling = Y.ka)(a);
          e._OrtTrainingLoadCheckpoint = (a, b) => (e._OrtTrainingLoadCheckpoint = Y.la)(a, b);
          e._OrtTrainingReleaseCheckpoint = (a) => (e._OrtTrainingReleaseCheckpoint = Y.ma)(a);
          e._OrtTrainingCreateSession = (a, b, c, d, g, h, m, r) => (e._OrtTrainingCreateSession = Y.na)(a, b, c, d, g, h, m, r);
          e._OrtTrainingLazyResetGrad = (a) => (e._OrtTrainingLazyResetGrad = Y.oa)(a);
          e._OrtTrainingRunTrainStep = (a, b, c, d, g, h) => (e._OrtTrainingRunTrainStep = Y.pa)(a, b, c, d, g, h);
          e._OrtTrainingOptimizerStep = (a, b) => (e._OrtTrainingOptimizerStep = Y.qa)(a, b);
          e._OrtTrainingEvalStep = (a, b, c, d, g, h) => (e._OrtTrainingEvalStep = Y.ra)(a, b, c, d, g, h);
          e._OrtTrainingGetParametersSize = (a, b, c) => (e._OrtTrainingGetParametersSize = Y.sa)(a, b, c);
          e._OrtTrainingCopyParametersToBuffer = (a, b, c, d) => (e._OrtTrainingCopyParametersToBuffer = Y.ta)(a, b, c, d);
          e._OrtTrainingCopyParametersFromBuffer = (a, b, c, d) => (e._OrtTrainingCopyParametersFromBuffer = Y.ua)(a, b, c, d);
          e._OrtTrainingGetModelInputOutputCount = (a, b, c, d) => (e._OrtTrainingGetModelInputOutputCount = Y.va)(a, b, c, d);
          e._OrtTrainingGetModelInputOutputName = (a, b, c, d) => (e._OrtTrainingGetModelInputOutputName = Y.wa)(a, b, c, d);
          e._OrtTrainingReleaseSession = (a) => (e._OrtTrainingReleaseSession = Y.xa)(a);
          var Ja = () => (Ja = Y.ya)(), Ba = e._malloc = (a) => (Ba = e._malloc = Y.za)(a);
          e._free = (a) => (e._free = Y.Aa)(a);
          var Ka = (a) => (Ka = Y.Ca)(a), Na = () => (Na = Y.Da)(), Oa = (a) => (Oa = Y.Ea)(a), Pa = (a) => (Pa = Y.Fa)(a);
          function Ma() {
            var a = Y;
            a = Object.assign({}, a);
            var b = (d) => () => d() >>> 0, c = (d) => (g) => d(g) >>> 0;
            a.ya = b(a.ya);
            a.za = c(a.za);
            a.Da = b(a.Da);
            a.Fa = c(a.Fa);
            return a;
          }
          e.stackAlloc = Pa;
          e.stackSave = Na;
          e.stackRestore = Oa;
          e.UTF8ToString = R;
          e.stringToUTF8 = (a, b, c) => T(a, H, b, c);
          e.lengthBytesUTF8 = S;
          var Z;
          O = function Qa() {
            Z || Ra();
            Z || (O = Qa);
          };
          function Ra() {
            if (!(0 < M)) {
              if (e.preRun)
                for ("function" == typeof e.preRun && (e.preRun = [e.preRun]); e.preRun.length; ) {
                  var a = e.preRun.shift();
                  K.unshift(a);
                }
              for (; 0 < K.length; )
                K.shift()(e);
              if (!(0 < M || Z || (Z = true, e.calledRun = true, fa))) {
                for (; 0 < L.length; )
                  L.shift()(e);
                for (k(e); 0 < ja.length; )
                  ja.shift()(e);
              }
            }
          }
          Ra();
          return moduleArg.ready;
        };
      })();
      if (typeof exports === "object" && typeof module === "object")
        module.exports = ortWasm;
      else if (typeof define === "function" && define["amd"])
        define([], () => ortWasm);
    }
  });

  // nodejs-ignore:worker_threads
  var require_worker_threads = __commonJS({
    "nodejs-ignore:worker_threads"() {
    }
  });

  // nodejs-ignore:perf_hooks
  var require_perf_hooks = __commonJS({
    "nodejs-ignore:perf_hooks"() {
    }
  });

  // nodejs-ignore:os
  var os_exports = {};
  __export(os_exports, {
    cpus: () => cpus2
  });
  var cpus2;
  var init_os = __esm({
    "nodejs-ignore:os"() {
      cpus2 = void 0;
    }
  });

  // web/lib/wasm/binding/ort-wasm-threaded.js
  var require_ort_wasm_threaded = __commonJS({
    "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {
      "use strict";
      var ortWasmThreaded = (() => {
        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;
        if (typeof __filename !== "undefined")
          _scriptDir = _scriptDir || __filename;
        return function(moduleArg = {}) {
          function g() {
            m.buffer != p.buffer && q();
            return p;
          }
          function t() {
            m.buffer != p.buffer && q();
            return aa;
          }
          function ba() {
            m.buffer != p.buffer && q();
            return ca;
          }
          function da() {
            m.buffer != p.buffer && q();
            return ea;
          }
          function v() {
            m.buffer != p.buffer && q();
            return fa;
          }
          function w() {
            m.buffer != p.buffer && q();
            return ha;
          }
          function ia() {
            m.buffer != p.buffer && q();
            return ja;
          }
          var z = moduleArg, ka, la;
          z.ready = new Promise((a, b) => {
            ka = a;
            la = b;
          });
          var ma = Object.assign({}, z), na = "./this.program", oa = (a, b) => {
            throw b;
          }, pa = "object" == typeof window, A = "function" == typeof importScripts, B = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, D = z.ENVIRONMENT_IS_PTHREAD || false, E = "";
          function qa(a) {
            return z.locateFile ? z.locateFile(a, E) : E + a;
          }
          var ra, sa, ta;
          if (B) {
            var fs = (init_fs(), __toCommonJS(fs_exports)), ua = (init_path(), __toCommonJS(path_exports));
            E = A ? ua.dirname(E) + "/" : __dirname + "/";
            ra = (b, c) => {
              b = va(b) ? new URL(b) : ua.normalize(b);
              return fs.readFileSync(b, c ? void 0 : "utf8");
            };
            ta = (b) => {
              b = ra(b, true);
              b.buffer || (b = new Uint8Array(b));
              return b;
            };
            sa = (b, c, d, e = true) => {
              b = va(b) ? new URL(b) : ua.normalize(b);
              fs.readFile(b, e ? void 0 : "utf8", (f, k) => {
                f ? d(f) : c(e ? k.buffer : k);
              });
            };
            !z.thisProgram && 1 < process.argv.length && (na = process.argv[1].replace(/\\/g, "/"));
            process.argv.slice(2);
            oa = (b, c) => {
              process.exitCode = b;
              throw c;
            };
            z.inspect = () => "[Emscripten Module object]";
            let a;
            try {
              a = require_worker_threads();
            } catch (b) {
              throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), b;
            }
            global.Worker = a.Worker;
          } else if (pa || A)
            A ? E = self.location.href : "undefined" != typeof document && document.currentScript && (E = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (E = _scriptDir), 0 !== E.indexOf("blob:") ? E = E.substr(0, E.replace(/[?#].*/, "").lastIndexOf("/") + 1) : E = "", B || (ra = (a) => {
              var b = new XMLHttpRequest();
              b.open(
                "GET",
                a,
                false
              );
              b.send(null);
              return b.responseText;
            }, A && (ta = (a) => {
              var b = new XMLHttpRequest();
              b.open("GET", a, false);
              b.responseType = "arraybuffer";
              b.send(null);
              return new Uint8Array(b.response);
            }), sa = (a, b, c) => {
              var d = new XMLHttpRequest();
              d.open("GET", a, true);
              d.responseType = "arraybuffer";
              d.onload = () => {
                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
              };
              d.onerror = c;
              d.send(null);
            });
          B && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);
          var wa = console.log.bind(console), xa = console.error.bind(console);
          B && (wa = (...a) => fs.writeSync(1, a.join(" ") + "\n"), xa = (...a) => fs.writeSync(2, a.join(" ") + "\n"));
          var ya = wa, F = xa;
          Object.assign(z, ma);
          ma = null;
          "object" != typeof WebAssembly && za("no native wasm support detected");
          var m, Aa, Ba = false, G, p, aa, ca, ea, fa, ha, Ca, H, Da, ja;
          function q() {
            var a = m.buffer;
            z.HEAP8 = p = new Int8Array(a);
            z.HEAP16 = ca = new Int16Array(a);
            z.HEAPU8 = aa = new Uint8Array(a);
            z.HEAPU16 = ea = new Uint16Array(a);
            z.HEAP32 = fa = new Int32Array(a);
            z.HEAPU32 = ha = new Uint32Array(a);
            z.HEAPF32 = Ca = new Float32Array(a);
            z.HEAPF64 = ja = new Float64Array(a);
            z.HEAP64 = H = new BigInt64Array(a);
            z.HEAPU64 = Da = new BigUint64Array(a);
          }
          var Ea = 16777216;
          if (D)
            m = z.wasmMemory;
          else if (z.wasmMemory)
            m = z.wasmMemory;
          else if (m = new WebAssembly.Memory({ initial: Ea / 65536, maximum: 65536, shared: true }), !(m.buffer instanceof SharedArrayBuffer))
            throw F("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), B && F("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");
          q();
          Ea = m.buffer.byteLength;
          var Fa = [], Ga = [], Ha = [], I = 0, Ia = null, J = null;
          function Ja() {
            I--;
            if (0 == I && (null !== Ia && (clearInterval(Ia), Ia = null), J)) {
              var a = J;
              J = null;
              a();
            }
          }
          function za(a) {
            a = "Aborted(" + a + ")";
            F(a);
            Ba = true;
            G = 1;
            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
            la(a);
            throw a;
          }
          var Ka = (a) => a.startsWith("data:application/octet-stream;base64,"), va = (a) => a.startsWith("file://"), K;
          K = "ort-wasm-threaded.wasm";
          Ka(K) || (K = qa(K));
          function La(a) {
            if (ta)
              return ta(a);
            throw "both async and sync fetching of the wasm failed";
          }
          function Ma(a) {
            if (pa || A) {
              if ("function" == typeof fetch && !va(a))
                return fetch(a, { credentials: "same-origin" }).then((b) => {
                  if (!b.ok)
                    throw "failed to load wasm binary file at '" + a + "'";
                  return b.arrayBuffer();
                }).catch(() => La(a));
              if (sa)
                return new Promise((b, c) => {
                  sa(a, (d) => b(new Uint8Array(d)), c);
                });
            }
            return Promise.resolve().then(() => La(a));
          }
          function Na(a, b, c) {
            return Ma(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {
              F(`failed to asynchronously prepare wasm: ${d}`);
              za(d);
            });
          }
          function Oa(a, b) {
            var c = K;
            return "function" != typeof WebAssembly.instantiateStreaming || Ka(c) || va(c) || B || "function" != typeof fetch ? Na(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(e) {
              F(`wasm streaming compile failed: ${e}`);
              F("falling back to ArrayBuffer instantiation");
              return Na(c, a, b);
            }));
          }
          var Pa = { 891868: (a, b, c, d) => {
            if ("undefined" == typeof z || !z.Hb)
              return 1;
            a = L(a >>> 0);
            a.startsWith("./") && (a = a.substring(2));
            a = z.Hb.get(a);
            if (!a)
              return 2;
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            if (b + c > a.byteLength)
              return 3;
            try {
              return t().set(a.subarray(b, b + c), d >>> 0), 0;
            } catch {
              return 4;
            }
          } };
          function Qa(a) {
            this.name = "ExitStatus";
            this.message = `Program terminated with exit(${a})`;
            this.status = a;
          }
          var Ra = (a) => {
            a.terminate();
            a.onmessage = () => {
            };
          }, Ta = (a) => {
            0 == M.ob.length && (Sa(), M.Bb(M.ob[0]));
            var b = M.ob.pop();
            if (!b)
              return 6;
            M.pb.push(b);
            M.kb[a.nb] = b;
            b.nb = a.nb;
            var c = { cmd: "run", start_routine: a.Ob, arg: a.Ib, pthread_ptr: a.nb };
            B && b.unref();
            b.postMessage(c, a.Ub);
            return 0;
          }, O = 0, Ua = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Va = (a, b, c) => {
            b >>>= 0;
            var d = b + c;
            for (c = b; a[c] && !(c >= d); )
              ++c;
            if (16 < c - b && a.buffer && Ua)
              return Ua.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));
            for (d = ""; b < c; ) {
              var e = a[b++];
              if (e & 128) {
                var f = a[b++] & 63;
                if (192 == (e & 224))
                  d += String.fromCharCode((e & 31) << 6 | f);
                else {
                  var k = a[b++] & 63;
                  e = 224 == (e & 240) ? (e & 15) << 12 | f << 6 | k : (e & 7) << 18 | f << 12 | k << 6 | a[b++] & 63;
                  65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));
                }
              } else
                d += String.fromCharCode(e);
            }
            return d;
          }, L = (a, b) => (a >>>= 0) ? Va(t(), a, b) : "", Ya = (a) => {
            var b = Wa();
            a = a();
            Xa(b);
            return a;
          };
          function P(a, b) {
            var c = arguments.length - 2, d = arguments;
            return Ya(() => {
              for (var e = 2 * c, f = Za(8 * e), k = f >>> 3, l = 0; l < c; l++) {
                var r = d[2 + l];
                "bigint" == typeof r ? (H[k + 2 * l] = 1n, H[k + 2 * l + 1] = r) : (H[k + 2 * l] = 0n, ia()[k + 2 * l + 1 >>> 0] = r);
              }
              return $a(a, e, f, b);
            });
          }
          function ab(a) {
            if (D)
              return P(0, 1, a);
            G = a;
            0 < O || (M.Pb(), z.onExit?.(a), Ba = true);
            oa(a, new Qa(a));
          }
          var cb = (a) => {
            G = a;
            if (D)
              throw bb(a), "unwind";
            ab(a);
          };
          function db() {
            for (var a = z.numThreads; a--; )
              Sa();
            Fa.unshift(() => {
              I++;
              eb(() => Ja());
            });
          }
          function Sa() {
            var a = qa("ort-wasm-threaded.worker.js");
            a = new Worker(a);
            M.ob.push(a);
          }
          function eb(a) {
            D ? a() : Promise.all(M.ob.map(M.Bb)).then(a);
          }
          var M = { ob: [], pb: [], Gb: [], kb: {}, wb() {
            D ? (M.receiveObjectTransfer = M.Nb, M.threadInitTLS = M.Fb, M.setExitStatus = M.Eb) : db();
          }, Eb: (a) => G = a, Xb: ["$terminateWorker"], Pb: () => {
            for (var a of M.pb)
              Ra(a);
            for (a of M.ob)
              Ra(a);
            M.ob = [];
            M.pb = [];
            M.kb = [];
          }, Db: (a) => {
            var b = a.nb;
            delete M.kb[b];
            M.ob.push(a);
            M.pb.splice(M.pb.indexOf(a), 1);
            a.nb = 0;
            fb(b);
          }, Nb() {
          }, Fb() {
            M.Gb.forEach((a) => a());
          }, Bb: (a) => new Promise((b) => {
            a.onmessage = (f) => {
              f = f.data;
              var k = f.cmd;
              if (f.targetThread && f.targetThread != gb()) {
                var l = M.kb[f.targetThread];
                l ? l.postMessage(f, f.transferList) : F(`Internal error! Worker sent a message "${k}" to target pthread ${f.targetThread}, but that thread no longer exists!`);
              } else if ("checkMailbox" === k)
                hb();
              else if ("spawnThread" === k)
                Ta(f);
              else if ("cleanupThread" === k)
                M.Db(M.kb[f.thread]);
              else if ("killThread" === k)
                f = f.thread, k = M.kb[f], delete M.kb[f], Ra(k), fb(f), M.pb.splice(M.pb.indexOf(k), 1), k.nb = 0;
              else if ("cancelThread" === k)
                M.kb[f.thread].postMessage({ cmd: "cancel" });
              else if ("loaded" === k)
                a.loaded = true, B && !a.nb && a.unref(), b(a);
              else if ("alert" === k)
                alert(`Thread ${f.threadId}: ${f.text}`);
              else if ("setimmediate" === f.target)
                a.postMessage(f);
              else if ("callHandler" === k)
                z[f.handler](...f.args);
              else
                k && F(`worker sent an unknown command ${k}`);
            };
            a.onerror = (f) => {
              F(`${"worker sent an error!"} ${f.filename}:${f.lineno}: ${f.message}`);
              throw f;
            };
            B && (a.on("message", (f) => a.onmessage({ data: f })), a.on("error", (f) => a.onerror(f)));
            var c = [], d = ["onExit"], e;
            for (e of d)
              z.hasOwnProperty(e) && c.push(e);
            a.postMessage({ cmd: "load", handlers: c, urlOrBlob: z.mainScriptUrlOrBlob || _scriptDir, wasmMemory: m, wasmModule: Aa });
          }) };
          z.PThread = M;
          var ib = (a) => {
            for (; 0 < a.length; )
              a.shift()(z);
          };
          z.establishStackSpace = () => {
            var a = gb(), b = w()[a + 52 >>> 2 >>> 0];
            a = w()[a + 56 >>> 2 >>> 0];
            jb(b, b - a);
            Xa(b);
          };
          function bb(a) {
            if (D)
              return P(1, 0, a);
            cb(a);
          }
          var kb = [], lb;
          z.invokeEntryPoint = (a, b) => {
            var c = kb[a];
            c || (a >= kb.length && (kb.length = a + 1), kb[a] = c = lb.get(a));
            a = c(b);
            0 < O ? M.Eb(a) : mb(a);
          };
          function nb(a) {
            this.tb = a - 24;
            this.Mb = function(b) {
              w()[this.tb + 4 >>> 2 >>> 0] = b;
            };
            this.yb = function(b) {
              w()[this.tb + 8 >>> 2 >>> 0] = b;
            };
            this.wb = function(b, c) {
              this.xb();
              this.Mb(b);
              this.yb(c);
            };
            this.xb = function() {
              w()[this.tb + 16 >>> 2 >>> 0] = 0;
            };
          }
          var ob = 0, pb = 0;
          function qb(a, b, c, d) {
            return D ? P(2, 1, a, b, c, d) : rb(a, b, c, d);
          }
          function rb(a, b, c, d) {
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            if ("undefined" == typeof SharedArrayBuffer)
              return F("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
            var e = [];
            if (D && 0 === e.length)
              return qb(a, b, c, d);
            a = { Ob: c, nb: a, Ib: d, Ub: e };
            return D ? (a.Wb = "spawnThread", postMessage(a, e), 0) : Ta(a);
          }
          function sb(a, b, c) {
            return D ? P(3, 1, a, b, c) : 0;
          }
          function tb(a, b) {
            if (D)
              return P(4, 1, a, b);
          }
          var ub = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
            }
            return b;
          }, vb = (a, b, c, d) => {
            c >>>= 0;
            if (!(0 < d))
              return 0;
            var e = c;
            d = c + d - 1;
            for (var f = 0; f < a.length; ++f) {
              var k = a.charCodeAt(f);
              if (55296 <= k && 57343 >= k) {
                var l = a.charCodeAt(++f);
                k = 65536 + ((k & 1023) << 10) | l & 1023;
              }
              if (127 >= k) {
                if (c >= d)
                  break;
                b[c++ >>> 0] = k;
              } else {
                if (2047 >= k) {
                  if (c + 1 >= d)
                    break;
                  b[c++ >>> 0] = 192 | k >> 6;
                } else {
                  if (65535 >= k) {
                    if (c + 2 >= d)
                      break;
                    b[c++ >>> 0] = 224 | k >> 12;
                  } else {
                    if (c + 3 >= d)
                      break;
                    b[c++ >>> 0] = 240 | k >> 18;
                    b[c++ >>> 0] = 128 | k >> 12 & 63;
                  }
                  b[c++ >>> 0] = 128 | k >> 6 & 63;
                }
                b[c++ >>> 0] = 128 | k & 63;
              }
            }
            b[c >>> 0] = 0;
            return c - e;
          }, wb = (a, b, c) => vb(a, t(), b, c);
          function xb(a, b) {
            if (D)
              return P(5, 1, a, b);
          }
          function yb(a, b, c) {
            if (D)
              return P(6, 1, a, b, c);
          }
          function zb(a, b, c) {
            return D ? P(7, 1, a, b, c) : 0;
          }
          function Ab(a, b) {
            if (D)
              return P(8, 1, a, b);
          }
          function Bb(a, b, c) {
            if (D)
              return P(9, 1, a, b, c);
          }
          function Cb(a, b, c, d) {
            if (D)
              return P(10, 1, a, b, c, d);
          }
          function Db(a, b, c, d) {
            if (D)
              return P(11, 1, a, b, c, d);
          }
          function Eb(a, b, c, d) {
            if (D)
              return P(12, 1, a, b, c, d);
          }
          function Fb(a) {
            if (D)
              return P(13, 1, a);
          }
          function Gb(a, b) {
            if (D)
              return P(14, 1, a, b);
          }
          function Hb(a, b, c) {
            if (D)
              return P(15, 1, a, b, c);
          }
          var Ib = (a) => {
            if (null === a)
              return "null";
            var b = typeof a;
            return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;
          }, Jb, R = (a) => {
            for (var b = ""; t()[a >>> 0]; )
              b += Jb[t()[a++ >>> 0]];
            return b;
          }, Kb = {}, Lb = {}, Mb = {}, S;
          function Nb(a, b, c = {}) {
            var d = b.name;
            if (!a)
              throw new S(`type "${d}" must have a positive integer typeid pointer`);
            if (Lb.hasOwnProperty(a)) {
              if (c.Kb)
                return;
              throw new S(`Cannot register type '${d}' twice`);
            }
            Lb[a] = b;
            delete Mb[a];
            Kb.hasOwnProperty(a) && (b = Kb[a], delete Kb[a], b.forEach((e) => e()));
          }
          function T(a, b, c = {}) {
            if (!("argPackAdvance" in b))
              throw new TypeError("registerType registeredInstance requires argPackAdvance");
            Nb(a, b, c);
          }
          var Ob = (a, b, c) => {
            switch (b) {
              case 1:
                return c ? (d) => g()[d >>> 0 >>> 0] : (d) => t()[d >>> 0 >>> 0];
              case 2:
                return c ? (d) => ba()[d >>> 1 >>> 0] : (d) => da()[d >>> 1 >>> 0];
              case 4:
                return c ? (d) => v()[d >>> 2 >>> 0] : (d) => w()[d >>> 2 >>> 0];
              case 8:
                return c ? (d) => H[d >>> 3] : (d) => Da[d >>> 3];
              default:
                throw new TypeError(`invalid integer width (${b}): ${a}`);
            }
          };
          function Pb() {
            this.mb = [void 0];
            this.Ab = [];
          }
          var U = new Pb();
          function Qb(a) {
            a >>>= 0;
            a >= U.tb && 0 === --U.get(a).Cb && U.yb(a);
          }
          var V = (a) => {
            if (!a)
              throw new S("Cannot use deleted val. handle = " + a);
            return U.get(a).value;
          }, W = (a) => {
            switch (a) {
              case void 0:
                return 1;
              case null:
                return 2;
              case true:
                return 3;
              case false:
                return 4;
              default:
                return U.xb({ Cb: 1, value: a });
            }
          };
          function Rb(a) {
            return this.fromWireType(v()[a >>> 2 >>> 0]);
          }
          var Sb = (a, b) => {
            switch (b) {
              case 4:
                return function(c) {
                  var d = this.fromWireType;
                  m.buffer != p.buffer && q();
                  return d.call(this, Ca[c >>> 2 >>> 0]);
                };
              case 8:
                return function(c) {
                  return this.fromWireType(ia()[c >>> 3 >>> 0]);
                };
              default:
                throw new TypeError(`invalid float width (${b}): ${a}`);
            }
          };
          function Tb(a) {
            return this.fromWireType(w()[a >>> 2 >>> 0]);
          }
          var Ub = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, Vb = (a, b) => {
            var c = a >> 1;
            for (var d = c + b / 2; !(c >= d) && da()[c >>> 0]; )
              ++c;
            c <<= 1;
            if (32 < c - a && Ub)
              return Ub.decode(t().slice(a, c));
            c = "";
            for (d = 0; !(d >= b / 2); ++d) {
              var e = ba()[a + 2 * d >>> 1 >>> 0];
              if (0 == e)
                break;
              c += String.fromCharCode(e);
            }
            return c;
          }, Wb = (a, b, c) => {
            c ??= 2147483647;
            if (2 > c)
              return 0;
            c -= 2;
            var d = b;
            c = c < 2 * a.length ? c / 2 : a.length;
            for (var e = 0; e < c; ++e) {
              var f = a.charCodeAt(e);
              ba()[b >>> 1 >>> 0] = f;
              b += 2;
            }
            ba()[b >>> 1 >>> 0] = 0;
            return b - d;
          }, Xb = (a) => 2 * a.length, Yb = (a, b) => {
            for (var c = 0, d = ""; !(c >= b / 4); ) {
              var e = v()[a + 4 * c >>> 2 >>> 0];
              if (0 == e)
                break;
              ++c;
              65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e);
            }
            return d;
          }, Zb = (a, b, c) => {
            b >>>= 0;
            c ??= 2147483647;
            if (4 > c)
              return 0;
            var d = b;
            c = d + c - 4;
            for (var e = 0; e < a.length; ++e) {
              var f = a.charCodeAt(e);
              if (55296 <= f && 57343 >= f) {
                var k = a.charCodeAt(++e);
                f = 65536 + ((f & 1023) << 10) | k & 1023;
              }
              v()[b >>> 2 >>> 0] = f;
              b += 4;
              if (b + 4 > c)
                break;
            }
            v()[b >>> 2 >>> 0] = 0;
            return b - d;
          }, $b = (a) => {
            for (var b = 0, c = 0; c < a.length; ++c) {
              var d = a.charCodeAt(c);
              55296 <= d && 57343 >= d && ++c;
              b += 4;
            }
            return b;
          };
          function ac(a) {
            a >>>= 0;
            "function" === typeof Atomics.Vb && (Atomics.Vb(v(), a >>> 2, a).value.then(hb), a += 128, Atomics.store(v(), a >>> 2, 1));
          }
          z.__emscripten_thread_mailbox_await = ac;
          var hb = () => {
            var a = gb();
            if (a && (ac(a), a = bc, !Ba))
              try {
                if (a(), !(0 < O))
                  try {
                    D ? mb(G) : cb(G);
                  } catch (b) {
                    b instanceof Qa || "unwind" == b || oa(1, b);
                  }
              } catch (b) {
                b instanceof Qa || "unwind" == b || oa(1, b);
              }
          };
          z.checkMailbox = hb;
          var cc = [], ec = (a, b) => {
            var c = Lb[a];
            if (void 0 === c)
              throw a = dc(a), c = R(a), X(a), new S(b + " has unknown type " + c);
            return c;
          }, fc = (a, b, c) => {
            var d = [];
            a = a.toWireType(d, c);
            d.length && (w()[b >>> 2 >>> 0] = W(d));
            return a;
          }, gc = [], hc = {}, ic = (a) => {
            var b = hc[a];
            return void 0 === b ? R(a) : b;
          }, jc = () => "object" == typeof globalThis ? globalThis : Function("return this")(), kc = (a) => {
            var b = gc.length;
            gc.push(a);
            return b;
          }, lc = (a, b) => {
            for (var c = Array(a), d = 0; d < a; ++d)
              c[d] = ec(w()[b + 4 * d >>> 2 >>> 0], "parameter " + d);
            return c;
          }, nc = (a, b) => Object.defineProperty(
            b,
            "name",
            { value: a }
          );
          function oc(a) {
            var b = Function;
            if (!(b instanceof Function))
              throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);
            var c = nc(b.name || "unknownFunctionName", function() {
            });
            c.prototype = b.prototype;
            c = new c();
            a = b.apply(c, a);
            return a instanceof Object ? a : c;
          }
          var Y = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), pc = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], qc = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
          function rc(a, b, c, d, e, f, k) {
            return D ? P(16, 1, a, b, c, d, e, f, k) : -52;
          }
          function sc(a, b, c, d, e, f) {
            if (D)
              return P(17, 1, a, b, c, d, e, f);
          }
          var uc = (a) => {
            var b = ub(a) + 1, c = tc(b);
            c && wb(a, c, b);
            return c;
          }, vc = [], wc = {}, yc = () => {
            if (!xc) {
              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: na || "./this.program" }, b;
              for (b in wc)
                void 0 === wc[b] ? delete a[b] : a[b] = wc[b];
              var c = [];
              for (b in a)
                c.push(`${b}=${a[b]}`);
              xc = c;
            }
            return xc;
          }, xc;
          function zc(a, b) {
            if (D)
              return P(18, 1, a, b);
            a >>>= 0;
            b >>>= 0;
            var c = 0;
            yc().forEach((d, e) => {
              var f = b + c;
              e = w()[a + 4 * e >>> 2 >>> 0] = f;
              for (f = 0; f < d.length; ++f)
                g()[e++ >>> 0 >>> 0] = d.charCodeAt(f);
              g()[e >>> 0 >>> 0] = 0;
              c += d.length + 1;
            });
            return 0;
          }
          function Ac(a, b) {
            if (D)
              return P(19, 1, a, b);
            a >>>= 0;
            b >>>= 0;
            var c = yc();
            w()[a >>> 2 >>> 0] = c.length;
            var d = 0;
            c.forEach((e) => d += e.length + 1);
            w()[b >>> 2 >>> 0] = d;
            return 0;
          }
          function Bc(a) {
            return D ? P(20, 1, a) : 52;
          }
          function Cc(a, b, c, d) {
            return D ? P(21, 1, a, b, c, d) : 52;
          }
          function Dc(a, b, c, d) {
            return D ? P(22, 1, a, b, c, d) : 70;
          }
          var Ec = [null, [], []];
          function Fc(a, b, c, d) {
            if (D)
              return P(23, 1, a, b, c, d);
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            for (var e = 0, f = 0; f < c; f++) {
              var k = w()[b >>> 2 >>> 0], l = w()[b + 4 >>> 2 >>> 0];
              b += 8;
              for (var r = 0; r < l; r++) {
                var n = t()[k + r >>> 0], x = Ec[a];
                0 === n || 10 === n ? ((1 === a ? ya : F)(Va(x, 0)), x.length = 0) : x.push(n);
              }
              e += l;
            }
            w()[d >>> 2 >>> 0] = e;
            return 0;
          }
          var Gc = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Hc = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
          function Ic(a) {
            var b = Array(ub(a) + 1);
            vb(a, b, 0, b.length);
            return b;
          }
          var Jc = (a, b) => {
            g().set(a, b >>> 0);
          };
          function Kc(a, b, c, d) {
            function e(h, u, y) {
              for (h = "number" == typeof h ? h.toString() : h || ""; h.length < u; )
                h = y[0] + h;
              return h;
            }
            function f(h, u) {
              return e(h, u, "0");
            }
            function k(h, u) {
              function y(mc) {
                return 0 > mc ? -1 : 0 < mc ? 1 : 0;
              }
              var Q;
              0 === (Q = y(h.getFullYear() - u.getFullYear())) && 0 === (Q = y(h.getMonth() - u.getMonth())) && (Q = y(h.getDate() - u.getDate()));
              return Q;
            }
            function l(h) {
              switch (h.getDay()) {
                case 0:
                  return new Date(h.getFullYear() - 1, 11, 29);
                case 1:
                  return h;
                case 2:
                  return new Date(h.getFullYear(), 0, 3);
                case 3:
                  return new Date(
                    h.getFullYear(),
                    0,
                    2
                  );
                case 4:
                  return new Date(h.getFullYear(), 0, 1);
                case 5:
                  return new Date(h.getFullYear() - 1, 11, 31);
                case 6:
                  return new Date(h.getFullYear() - 1, 11, 30);
              }
            }
            function r(h) {
              var u = h.qb;
              for (h = new Date(new Date(h.rb + 1900, 0, 1).getTime()); 0 < u; ) {
                var y = h.getMonth(), Q = (Y(h.getFullYear()) ? Gc : Hc)[y];
                if (u > Q - h.getDate())
                  u -= Q - h.getDate() + 1, h.setDate(1), 11 > y ? h.setMonth(y + 1) : (h.setMonth(0), h.setFullYear(h.getFullYear() + 1));
                else {
                  h.setDate(h.getDate() + u);
                  break;
                }
              }
              y = new Date(h.getFullYear() + 1, 0, 4);
              u = l(new Date(
                h.getFullYear(),
                0,
                4
              ));
              y = l(y);
              return 0 >= k(u, h) ? 0 >= k(y, h) ? h.getFullYear() + 1 : h.getFullYear() : h.getFullYear() - 1;
            }
            a >>>= 0;
            b >>>= 0;
            c >>>= 0;
            d >>>= 0;
            var n = w()[d + 40 >>> 2 >>> 0];
            d = { Sb: v()[d >>> 2 >>> 0], Rb: v()[d + 4 >>> 2 >>> 0], ub: v()[d + 8 >>> 2 >>> 0], zb: v()[d + 12 >>> 2 >>> 0], vb: v()[d + 16 >>> 2 >>> 0], rb: v()[d + 20 >>> 2 >>> 0], lb: v()[d + 24 >>> 2 >>> 0], qb: v()[d + 28 >>> 2 >>> 0], Yb: v()[d + 32 >>> 2 >>> 0], Qb: v()[d + 36 >>> 2 >>> 0], Tb: n ? L(n) : "" };
            c = L(c);
            n = {
              "%c": "%a %b %d %H:%M:%S %Y",
              "%D": "%m/%d/%y",
              "%F": "%Y-%m-%d",
              "%h": "%b",
              "%r": "%I:%M:%S %p",
              "%R": "%H:%M",
              "%T": "%H:%M:%S",
              "%x": "%m/%d/%y",
              "%X": "%H:%M:%S",
              "%Ec": "%c",
              "%EC": "%C",
              "%Ex": "%m/%d/%y",
              "%EX": "%H:%M:%S",
              "%Ey": "%y",
              "%EY": "%Y",
              "%Od": "%d",
              "%Oe": "%e",
              "%OH": "%H",
              "%OI": "%I",
              "%Om": "%m",
              "%OM": "%M",
              "%OS": "%S",
              "%Ou": "%u",
              "%OU": "%U",
              "%OV": "%V",
              "%Ow": "%w",
              "%OW": "%W",
              "%Oy": "%y"
            };
            for (var x in n)
              c = c.replace(new RegExp(x, "g"), n[x]);
            var C = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), N = "January February March April May June July August September October November December".split(" ");
            n = { "%a": (h) => C[h.lb].substring(0, 3), "%A": (h) => C[h.lb], "%b": (h) => N[h.vb].substring(0, 3), "%B": (h) => N[h.vb], "%C": (h) => f((h.rb + 1900) / 100 | 0, 2), "%d": (h) => f(h.zb, 2), "%e": (h) => e(h.zb, 2, " "), "%g": (h) => r(h).toString().substring(2), "%G": (h) => r(h), "%H": (h) => f(h.ub, 2), "%I": (h) => {
              h = h.ub;
              0 == h ? h = 12 : 12 < h && (h -= 12);
              return f(h, 2);
            }, "%j": (h) => {
              for (var u = 0, y = 0; y <= h.vb - 1; u += (Y(h.rb + 1900) ? Gc : Hc)[y++])
                ;
              return f(h.zb + u, 3);
            }, "%m": (h) => f(h.vb + 1, 2), "%M": (h) => f(h.Rb, 2), "%n": () => "\n", "%p": (h) => 0 <= h.ub && 12 > h.ub ? "AM" : "PM", "%S": (h) => f(h.Sb, 2), "%t": () => "	", "%u": (h) => h.lb || 7, "%U": (h) => f(Math.floor((h.qb + 7 - h.lb) / 7), 2), "%V": (h) => {
              var u = Math.floor((h.qb + 7 - (h.lb + 6) % 7) / 7);
              2 >= (h.lb + 371 - h.qb - 2) % 7 && u++;
              if (u)
                53 == u && (y = (h.lb + 371 - h.qb) % 7, 4 == y || 3 == y && Y(h.rb) || (u = 1));
              else {
                u = 52;
                var y = (h.lb + 7 - h.qb - 1) % 7;
                (4 == y || 5 == y && Y(h.rb % 400 - 1)) && u++;
              }
              return f(u, 2);
            }, "%w": (h) => h.lb, "%W": (h) => f(Math.floor((h.qb + 7 - (h.lb + 6) % 7) / 7), 2), "%y": (h) => (h.rb + 1900).toString().substring(2), "%Y": (h) => h.rb + 1900, "%z": (h) => {
              h = h.Qb;
              var u = 0 <= h;
              h = Math.abs(h) / 60;
              return (u ? "+" : "-") + String("0000" + (h / 60 * 100 + h % 60)).slice(-4);
            }, "%Z": (h) => h.Tb, "%%": () => "%" };
            c = c.replace(/%%/g, "\0\0");
            for (x in n)
              c.includes(x) && (c = c.replace(new RegExp(x, "g"), n[x](d)));
            c = c.replace(/\0\0/g, "%");
            x = Ic(c);
            if (x.length > b)
              return 0;
            Jc(x, a);
            return x.length - 1;
          }
          M.wb();
          for (var Lc = Array(256), Mc = 0; 256 > Mc; ++Mc)
            Lc[Mc] = String.fromCharCode(Mc);
          Jb = Lc;
          S = z.BindingError = class extends Error {
            constructor(a) {
              super(a);
              this.name = "BindingError";
            }
          };
          z.InternalError = class extends Error {
            constructor(a) {
              super(a);
              this.name = "InternalError";
            }
          };
          Object.assign(Pb.prototype, { get(a) {
            return this.mb[a];
          }, has(a) {
            return void 0 !== this.mb[a];
          }, xb(a) {
            var b = this.Ab.pop() || this.mb.length;
            this.mb[b] = a;
            return b;
          }, yb(a) {
            this.mb[a] = void 0;
            this.Ab.push(a);
          } });
          U.mb.push({ value: void 0 }, { value: null }, { value: true }, { value: false });
          U.tb = U.mb.length;
          z.count_emval_handles = () => {
            for (var a = 0, b = U.tb; b < U.mb.length; ++b)
              void 0 !== U.mb[b] && ++a;
            return a;
          };
          var Nc = [ab, bb, qb, sb, tb, xb, yb, zb, Ab, Bb, Cb, Db, Eb, Fb, Gb, Hb, rc, sc, zc, Ac, Bc, Cc, Dc, Fc], Qc = {
            b: function(a, b, c) {
              a >>>= 0;
              new nb(a).wb(b >>> 0, c >>> 0);
              ob = a;
              pb++;
              throw ob;
            },
            da: function(a) {
              Oc(a >>> 0, !A, 1, !pa, 131072, false);
              M.Fb();
            },
            D: function(a) {
              a >>>= 0;
              D ? postMessage({ cmd: "cleanupThread", thread: a }) : M.Db(M.kb[a]);
            },
            V: rb,
            x: sb,
            ka: tb,
            R: xb,
            T: yb,
            K: zb,
            ia: Ab,
            aa: Bb,
            ga: Cb,
            F: Db,
            S: Eb,
            P: Fb,
            ja: Gb,
            Q: Hb,
            I: function(a, b, c, d, e) {
              a >>>= 0;
              b >>>= 0;
              c >>>= 0;
              b = R(b);
              var f = -1 != b.indexOf("u");
              f && (e = (1n << 64n) - 1n);
              T(a, { name: b, fromWireType: (k) => k, toWireType: function(k, l) {
                if ("bigint" != typeof l && "number" != typeof l)
                  throw new TypeError(`Cannot convert "${Ib(l)}" to ${this.name}`);
                if (l < d || l > e)
                  throw new TypeError(`Passing a number "${Ib(l)}" from JS side to C/C++ side to an argument of type "${b}", which is outside the valid range [${d}, ${e}]!`);
                return l;
              }, argPackAdvance: 8, readValueFromPointer: Ob(b, c, !f), sb: null });
            },
            pa: function(a, b, c, d) {
              a >>>= 0;
              b = R(b >>> 0);
              T(a, { name: b, fromWireType: function(e) {
                return !!e;
              }, toWireType: function(e, f) {
                return f ? c : d;
              }, argPackAdvance: 8, readValueFromPointer: function(e) {
                return this.fromWireType(t()[e >>> 0]);
              }, sb: null });
            },
            oa: function(a, b) {
              a >>>= 0;
              b = R(b >>> 0);
              T(a, { name: b, fromWireType: (c) => {
                var d = V(c);
                Qb(c);
                return d;
              }, toWireType: (c, d) => W(d), argPackAdvance: 8, readValueFromPointer: Rb, sb: null });
            },
            H: function(a, b, c) {
              a >>>= 0;
              c >>>= 0;
              b = R(b >>> 0);
              T(a, { name: b, fromWireType: (d) => d, toWireType: (d, e) => e, argPackAdvance: 8, readValueFromPointer: Sb(b, c), sb: null });
            },
            u: function(a, b, c, d, e) {
              a >>>= 0;
              c >>>= 0;
              b = R(b >>> 0);
              -1 === e && (e = 4294967295);
              e = (l) => l;
              if (0 === d) {
                var f = 32 - 8 * c;
                e = (l) => l << f >>> f;
              }
              var k = b.includes("unsigned") ? function(l, r) {
                return r >>> 0;
              } : function(l, r) {
                return r;
              };
              T(a, { name: b, fromWireType: e, toWireType: k, argPackAdvance: 8, readValueFromPointer: Ob(b, c, 0 !== d), sb: null });
            },
            n: function(a, b, c) {
              function d(f) {
                var k = w()[f >>> 2 >>> 0];
                f = w()[f + 4 >>> 2 >>> 0];
                return new e(g().buffer, f, k);
              }
              a >>>= 0;
              var e = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][b];
              c = R(c >>> 0);
              T(a, { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d }, { Kb: true });
            },
            J: function(a, b) {
              a >>>= 0;
              b = R(b >>> 0);
              var c = "std::string" === b;
              T(a, { name: b, fromWireType: function(d) {
                var e = w()[d >>> 2 >>> 0], f = d + 4;
                if (c)
                  for (var k = f, l = 0; l <= e; ++l) {
                    var r = f + l;
                    if (l == e || 0 == t()[r >>> 0]) {
                      k = L(k, r - k);
                      if (void 0 === n)
                        var n = k;
                      else
                        n += String.fromCharCode(0), n += k;
                      k = r + 1;
                    }
                  }
                else {
                  n = Array(e);
                  for (l = 0; l < e; ++l)
                    n[l] = String.fromCharCode(t()[f + l >>> 0]);
                  n = n.join("");
                }
                X(d);
                return n;
              }, toWireType: function(d, e) {
                e instanceof ArrayBuffer && (e = new Uint8Array(e));
                var f = "string" == typeof e;
                if (!(f || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array))
                  throw new S("Cannot pass non-string to std::string");
                var k = c && f ? ub(e) : e.length;
                var l = tc(4 + k + 1), r = l + 4;
                w()[l >>> 2 >>> 0] = k;
                if (c && f)
                  wb(e, r, k + 1);
                else if (f)
                  for (f = 0; f < k; ++f) {
                    var n = e.charCodeAt(f);
                    if (255 < n)
                      throw X(r), new S("String has UTF-16 code units that do not fit in 8 bits");
                    t()[r + f >>> 0] = n;
                  }
                else
                  for (f = 0; f < k; ++f)
                    t()[r + f >>> 0] = e[f];
                null !== d && d.push(X, l);
                return l;
              }, argPackAdvance: 8, readValueFromPointer: Tb, sb(d) {
                X(d);
              } });
            },
            z: function(a, b, c) {
              a >>>= 0;
              b >>>= 0;
              c >>>= 0;
              c = R(c);
              if (2 === b) {
                var d = Vb;
                var e = Wb;
                var f = Xb;
                var k = () => da();
                var l = 1;
              } else
                4 === b && (d = Yb, e = Zb, f = $b, k = () => w(), l = 2);
              T(a, { name: c, fromWireType: (r) => {
                for (var n = w()[r >>> 2 >>> 0], x = k(), C, N = r + 4, h = 0; h <= n; ++h) {
                  var u = r + 4 + h * b;
                  if (h == n || 0 == x[u >>> l])
                    N = d(N, u - N), void 0 === C ? C = N : (C += String.fromCharCode(0), C += N), N = u + b;
                }
                X(r);
                return C;
              }, toWireType: (r, n) => {
                if ("string" != typeof n)
                  throw new S(`Cannot pass non-string to C++ string type ${c}`);
                var x = f(n), C = tc(4 + x + b);
                w()[C >>> 2] = x >> l;
                e(n, C + 4, x + b);
                null !== r && r.push(X, C);
                return C;
              }, argPackAdvance: 8, readValueFromPointer: Rb, sb(r) {
                X(r);
              } });
            },
            qa: function(a, b) {
              a >>>= 0;
              b = R(b >>> 0);
              T(a, {
                Lb: true,
                name: b,
                argPackAdvance: 0,
                fromWireType: () => {
                },
                toWireType: () => {
                }
              });
            },
            na: () => 1,
            N: function(a, b) {
              a >>>= 0;
              a == b >>> 0 ? setTimeout(() => hb()) : D ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = M.kb[a]) && a.postMessage({ cmd: "checkMailbox" });
            },
            W: function(a, b, c, d) {
              b >>>= 0;
              c /= 2;
              cc.length = c;
              d = d >>> 0 >>> 3;
              for (var e = 0; e < c; e++)
                cc[e] = H[d + 2 * e] ? H[d + 2 * e + 1] : ia()[d + 2 * e + 1 >>> 0];
              a = 0 > a ? Pa[-a - 1] : Nc[a];
              M.Jb = b;
              b = a.apply(null, cc);
              M.Jb = 0;
              return b;
            },
            ca: ac,
            ma: function(a) {
              B && M.kb[a >>> 0].ref();
            },
            s: function(a, b, c) {
              b >>>= 0;
              c >>>= 0;
              a = V(a >>> 0);
              b = ec(b, "emval::as");
              return fc(
                b,
                c,
                a
              );
            },
            o: function(a, b, c, d) {
              c >>>= 0;
              d >>>= 0;
              a = gc[a >>> 0];
              b = V(b >>> 0);
              return a(null, b, c, d);
            },
            j: function(a, b, c, d, e) {
              c >>>= 0;
              d >>>= 0;
              e >>>= 0;
              a = gc[a >>> 0];
              b = V(b >>> 0);
              c = ic(c);
              return a(b, b[c], d, e);
            },
            c: Qb,
            A: function(a, b) {
              b >>>= 0;
              a = V(a >>> 0);
              b = V(b);
              return a == b;
            },
            m: function(a) {
              a >>>= 0;
              if (0 === a)
                return W(jc());
              a = ic(a);
              return W(jc()[a]);
            },
            i: function(a, b, c) {
              b = lc(a, b >>> 0);
              var d = b.shift();
              a--;
              var e = "return function (obj, func, destructorsRef, args) {\n", f = 0, k = [];
              0 === c && k.push("obj");
              for (var l = ["retType"], r = [d], n = 0; n < a; ++n)
                k.push("arg" + n), l.push("argType" + n), r.push(b[n]), e += `  var arg${n} = argType${n}.readValueFromPointer(args${f ? "+" + f : ""});
`, f += b[n].argPackAdvance;
              e += `  var rv = ${1 === c ? "new func" : "func.call"}(${k.join(", ")});
`;
              for (n = 0; n < a; ++n)
                b[n].deleteObject && (e += `  argType${n}.deleteObject(arg${n});
`);
              d.Lb || (l.push("emval_returnValue"), r.push(fc), e += "  return emval_returnValue(retType, destructorsRef, rv);\n");
              l.push(e + "};\n");
              a = oc(l).apply(null, r);
              c = `methodCaller<(${b.map((x) => x.name).join(", ")}) => ${d.name}>`;
              return kc(nc(
                c,
                a
              ));
            },
            r: function(a, b) {
              b >>>= 0;
              a = V(a >>> 0);
              b = V(b);
              return W(a[b]);
            },
            d: function(a) {
              a >>>= 0;
              4 < a && (U.get(a).Cb += 1);
            },
            v: function() {
              return W([]);
            },
            l: function(a) {
              a = V(a >>> 0);
              for (var b = Array(a.length), c = 0; c < a.length; c++)
                b[c] = a[c];
              return W(b);
            },
            f: function(a) {
              return W(ic(a >>> 0));
            },
            k: function() {
              return W({});
            },
            h: function(a) {
              a >>>= 0;
              for (var b = V(a); b.length; ) {
                var c = b.pop();
                b.pop()(c);
              }
              Qb(a);
            },
            g: function(a, b, c) {
              b >>>= 0;
              c >>>= 0;
              a = V(a >>> 0);
              b = V(b);
              c = V(c);
              a[b] = c;
            },
            e: function(a, b) {
              b >>>= 0;
              a = ec(a >>> 0, "_emval_take_value");
              a = a.readValueFromPointer(b);
              return W(a);
            },
            Z: function(a, b) {
              a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
              b >>>= 0;
              a = new Date(1e3 * a);
              v()[b >>> 2 >>> 0] = a.getUTCSeconds();
              v()[b + 4 >>> 2 >>> 0] = a.getUTCMinutes();
              v()[b + 8 >>> 2 >>> 0] = a.getUTCHours();
              v()[b + 12 >>> 2 >>> 0] = a.getUTCDate();
              v()[b + 16 >>> 2 >>> 0] = a.getUTCMonth();
              v()[b + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;
              v()[b + 24 >>> 2 >>> 0] = a.getUTCDay();
              a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
              v()[b + 28 >>> 2 >>> 0] = a;
            },
            _: function(a, b) {
              a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
              b >>>= 0;
              a = new Date(1e3 * a);
              v()[b >>> 2 >>> 0] = a.getSeconds();
              v()[b + 4 >>> 2 >>> 0] = a.getMinutes();
              v()[b + 8 >>> 2 >>> 0] = a.getHours();
              v()[b + 12 >>> 2 >>> 0] = a.getDate();
              v()[b + 16 >>> 2 >>> 0] = a.getMonth();
              v()[b + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;
              v()[b + 24 >>> 2 >>> 0] = a.getDay();
              var c = (Y(a.getFullYear()) ? pc : qc)[a.getMonth()] + a.getDate() - 1 | 0;
              v()[b + 28 >>> 2 >>> 0] = c;
              v()[b + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());
              c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();
              var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
              a = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;
              v()[b + 32 >>> 2 >>> 0] = a;
            },
            $: function(a) {
              a >>>= 0;
              var b = new Date(v()[a + 20 >>> 2 >>> 0] + 1900, v()[a + 16 >>> 2 >>> 0], v()[a + 12 >>> 2 >>> 0], v()[a + 8 >>> 2 >>> 0], v()[a + 4 >>> 2 >>> 0], v()[a >>> 2 >>> 0], 0), c = v()[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), e = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), f = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), k = Math.min(f, e);
              0 > c ? v()[a + 32 >>> 2 >>> 0] = Number(e != f && k == d) : 0 < c != (k == d) && (e = Math.max(f, e), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : e) - d)));
              v()[a + 24 >>> 2 >>> 0] = b.getDay();
              c = (Y(b.getFullYear()) ? pc : qc)[b.getMonth()] + b.getDate() - 1 | 0;
              v()[a + 28 >>> 2 >>> 0] = c;
              v()[a >>> 2 >>> 0] = b.getSeconds();
              v()[a + 4 >>> 2 >>> 0] = b.getMinutes();
              v()[a + 8 >>> 2 >>> 0] = b.getHours();
              v()[a + 12 >>> 2 >>> 0] = b.getDate();
              v()[a + 16 >>> 2 >>> 0] = b.getMonth();
              v()[a + 20 >>> 2 >>> 0] = b.getYear();
              a = b.getTime();
              isNaN(a) ? (v()[Pc() >>> 2 >>> 0] = 61, a = -1) : a /= 1e3;
              return BigInt(a);
            },
            X: rc,
            Y: sc,
            M: function(a, b, c) {
              function d(n) {
                return (n = n.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? n[1] : "GMT";
              }
              a >>>= 0;
              b >>>= 0;
              c >>>= 0;
              var e = (/* @__PURE__ */ new Date()).getFullYear(), f = new Date(e, 0, 1), k = new Date(
                e,
                6,
                1
              );
              e = f.getTimezoneOffset();
              var l = k.getTimezoneOffset(), r = Math.max(e, l);
              w()[a >>> 2 >>> 0] = 60 * r;
              v()[b >>> 2 >>> 0] = Number(e != l);
              a = d(f);
              b = d(k);
              a = uc(a);
              b = uc(b);
              l < e ? (w()[c >>> 2 >>> 0] = a, w()[c + 4 >>> 2 >>> 0] = b) : (w()[c >>> 2 >>> 0] = b, w()[c + 4 >>> 2 >>> 0] = a);
            },
            p: () => {
              za("");
            },
            ra: function(a, b, c) {
              a >>>= 0;
              b >>>= 0;
              c >>>= 0;
              vc.length = 0;
              for (var d; d = t()[b++ >>> 0]; ) {
                var e = 105 != d;
                e &= 112 != d;
                c += e && c % 8 ? 4 : 0;
                vc.push(112 == d ? w()[c >>> 2 >>> 0] : 106 == d ? H[c >>> 3] : 105 == d ? v()[c >>> 2 >>> 0] : ia()[c >>> 3 >>> 0]);
                c += e ? 8 : 4;
              }
              return Pa[a].apply(null, vc);
            },
            E: () => {
            },
            G: () => Date.now(),
            la: () => {
              O += 1;
              throw "unwind";
            },
            O: function() {
              return 4294901760;
            },
            t: () => performance.timeOrigin + performance.now(),
            w: () => B ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency,
            L: function(a) {
              a >>>= 0;
              var b = t().length;
              if (a <= b || 4294901760 < a)
                return false;
              for (var c = 1; 4 >= c; c *= 2) {
                var d = b * (1 + 0.2 / c);
                d = Math.min(d, a + 100663296);
                var e = Math;
                d = Math.max(a, d);
                a: {
                  e = (e.min.call(e, 4294901760, d + (65536 - d % 65536) % 65536) - m.buffer.byteLength + 65535) / 65536;
                  try {
                    m.grow(e);
                    q();
                    var f = 1;
                    break a;
                  } catch (k) {
                  }
                  f = void 0;
                }
                if (f)
                  return true;
              }
              return false;
            },
            ea: zc,
            fa: Ac,
            U: cb,
            y: Bc,
            C: Cc,
            ba: Dc,
            B: Fc,
            a: m || z.wasmMemory,
            ha: Kc,
            q: function(a, b, c, d) {
              return Kc(a >>> 0, b >>> 0, c >>> 0, d >>> 0);
            }
          }, Z = function() {
            function a(c, d) {
              Z = c.exports;
              Z = Rc();
              M.Gb.push(Z.Ya);
              lb = Z.$a;
              Ga.unshift(Z.sa);
              Aa = d;
              Ja();
              return Z;
            }
            var b = { a: Qc };
            I++;
            if (z.instantiateWasm)
              try {
                return z.instantiateWasm(b, a);
              } catch (c) {
                F(`Module.instantiateWasm callback failed with error: ${c}`), la(c);
              }
            Oa(b, function(c) {
              a(c.instance, c.module);
            }).catch(la);
            return {};
          }();
          z._OrtInit = (a, b) => (z._OrtInit = Z.ta)(a, b);
          z._OrtGetLastError = (a, b) => (z._OrtGetLastError = Z.ua)(a, b);
          z._OrtCreateSessionOptions = (a, b, c, d, e, f, k, l, r, n) => (z._OrtCreateSessionOptions = Z.va)(a, b, c, d, e, f, k, l, r, n);
          z._OrtAppendExecutionProvider = (a, b) => (z._OrtAppendExecutionProvider = Z.wa)(a, b);
          z._OrtAddFreeDimensionOverride = (a, b, c) => (z._OrtAddFreeDimensionOverride = Z.xa)(a, b, c);
          z._OrtAddSessionConfigEntry = (a, b, c) => (z._OrtAddSessionConfigEntry = Z.ya)(a, b, c);
          z._OrtReleaseSessionOptions = (a) => (z._OrtReleaseSessionOptions = Z.za)(a);
          z._OrtCreateSession = (a, b, c) => (z._OrtCreateSession = Z.Aa)(a, b, c);
          z._OrtReleaseSession = (a) => (z._OrtReleaseSession = Z.Ba)(a);
          z._OrtGetInputOutputCount = (a, b, c) => (z._OrtGetInputOutputCount = Z.Ca)(a, b, c);
          z._OrtGetInputName = (a, b) => (z._OrtGetInputName = Z.Da)(a, b);
          z._OrtGetOutputName = (a, b) => (z._OrtGetOutputName = Z.Ea)(a, b);
          z._OrtFree = (a) => (z._OrtFree = Z.Fa)(a);
          z._OrtCreateTensor = (a, b, c, d, e, f) => (z._OrtCreateTensor = Z.Ga)(a, b, c, d, e, f);
          z._OrtGetTensorData = (a, b, c, d, e) => (z._OrtGetTensorData = Z.Ha)(a, b, c, d, e);
          z._OrtReleaseTensor = (a) => (z._OrtReleaseTensor = Z.Ia)(a);
          z._OrtCreateRunOptions = (a, b, c, d) => (z._OrtCreateRunOptions = Z.Ja)(a, b, c, d);
          z._OrtAddRunConfigEntry = (a, b, c) => (z._OrtAddRunConfigEntry = Z.Ka)(a, b, c);
          z._OrtReleaseRunOptions = (a) => (z._OrtReleaseRunOptions = Z.La)(a);
          z._OrtCreateBinding = (a) => (z._OrtCreateBinding = Z.Ma)(a);
          z._OrtBindInput = (a, b, c) => (z._OrtBindInput = Z.Na)(a, b, c);
          z._OrtBindOutput = (a, b, c, d) => (z._OrtBindOutput = Z.Oa)(a, b, c, d);
          z._OrtClearBoundOutputs = (a) => (z._OrtClearBoundOutputs = Z.Pa)(a);
          z._OrtReleaseBinding = (a) => (z._OrtReleaseBinding = Z.Qa)(a);
          z._OrtRunWithBinding = (a, b, c, d, e) => (z._OrtRunWithBinding = Z.Ra)(a, b, c, d, e);
          z._OrtRun = (a, b, c, d, e, f, k, l) => (z._OrtRun = Z.Sa)(a, b, c, d, e, f, k, l);
          z._OrtEndProfiling = (a) => (z._OrtEndProfiling = Z.Ta)(a);
          var Pc = () => (Pc = Z.Ua)(), gb = z._pthread_self = () => (gb = z._pthread_self = Z.Va)(), tc = z._malloc = (a) => (tc = z._malloc = Z.Wa)(a), X = z._free = (a) => (X = z._free = Z.Xa)(a);
          z.__emscripten_tls_init = () => (z.__emscripten_tls_init = Z.Ya)();
          var dc = (a) => (dc = Z.Za)(a);
          z.__embind_initialize_bindings = () => (z.__embind_initialize_bindings = Z._a)();
          var Oc = z.__emscripten_thread_init = (a, b, c, d, e, f) => (Oc = z.__emscripten_thread_init = Z.ab)(a, b, c, d, e, f);
          z.__emscripten_thread_crashed = () => (z.__emscripten_thread_crashed = Z.bb)();
          var $a = (a, b, c, d) => ($a = Z.cb)(a, b, c, d), fb = (a) => (fb = Z.db)(a), mb = z.__emscripten_thread_exit = (a) => (mb = z.__emscripten_thread_exit = Z.eb)(a), bc = () => (bc = Z.fb)(), jb = (a, b) => (jb = Z.gb)(a, b), Wa = () => (Wa = Z.hb)(), Xa = (a) => (Xa = Z.ib)(a), Za = (a) => (Za = Z.jb)(a);
          function Rc() {
            var a = Z;
            a = Object.assign({}, a);
            var b = (d) => () => d() >>> 0, c = (d) => (e) => d(e) >>> 0;
            a.Ua = b(a.Ua);
            a.Va = b(a.Va);
            a.Wa = c(a.Wa);
            a.Za = c(a.Za);
            a.emscripten_main_runtime_thread_id = b(a.emscripten_main_runtime_thread_id);
            a.hb = b(a.hb);
            a.jb = c(a.jb);
            return a;
          }
          z.wasmMemory = m;
          z.stackAlloc = Za;
          z.stackSave = Wa;
          z.stackRestore = Xa;
          z.keepRuntimeAlive = () => 0 < O;
          z.UTF8ToString = L;
          z.stringToUTF8 = wb;
          z.lengthBytesUTF8 = ub;
          z.ExitStatus = Qa;
          z.PThread = M;
          var Sc;
          J = function Tc() {
            Sc || Uc();
            Sc || (J = Tc);
          };
          function Uc() {
            if (!(0 < I))
              if (D)
                ka(z), D || ib(Ga), startWorker(z);
              else {
                if (z.preRun)
                  for ("function" == typeof z.preRun && (z.preRun = [z.preRun]); z.preRun.length; )
                    Fa.unshift(z.preRun.shift());
                ib(Fa);
                0 < I || Sc || (Sc = true, z.calledRun = true, Ba || (D || ib(Ga), ka(z), D || ib(Ha)));
              }
          }
          Uc();
          return moduleArg.ready;
        };
      })();
      if (typeof exports === "object" && typeof module === "object")
        module.exports = ortWasmThreaded;
      else if (typeof define === "function" && define["amd"])
        define([], () => ortWasmThreaded);
    }
  });

  // web/lib/wasm/binding/ort-wasm-threaded.worker.js
  var require_ort_wasm_threaded_worker = __commonJS({
    "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {
      module.exports = '"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");var vm=require("vm");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>vm.runInThisContext(fs.readFileSync(f,"utf8"),{filename:f}),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*is_main=*/0,/*is_runtime=*/0,/*can_block=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){Module["__embind_initialize_bindings"]();initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err(`worker.js received unknown command ${e.data.cmd}`);err(e.data)}}catch(ex){Module["__emscripten_thread_crashed"]?.();throw ex}}self.onmessage=handleMessage;\n';
    }
  });

  // web/lib/wasm/wasm-factory.ts
  var ortWasmFactory, ortWasmFactoryThreaded, wasm, initialized, initializing, aborted, isMultiThreadSupported, isSimdSupported, getWasmFileName, initializeWebAssembly, getInstance;
  var init_wasm_factory = __esm({
    "web/lib/wasm/wasm-factory.ts"() {
      "use strict";
      init_node_path();
      if (true) {
        ortWasmFactory = require_ort_training_wasm_simd();
      } else {
        ortWasmFactory = true ? null : null;
      }
      ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;
      initialized = false;
      initializing = false;
      aborted = false;
      isMultiThreadSupported = () => {
        try {
          if (typeof SharedArrayBuffer === "undefined") {
            return false;
          }
          if (typeof MessageChannel !== "undefined") {
            new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));
          }
          return WebAssembly.validate(new Uint8Array([
            0,
            97,
            115,
            109,
            1,
            0,
            0,
            0,
            1,
            4,
            1,
            96,
            0,
            0,
            3,
            2,
            1,
            0,
            5,
            4,
            1,
            3,
            1,
            1,
            10,
            11,
            1,
            9,
            0,
            65,
            0,
            254,
            16,
            2,
            0,
            26,
            11
          ]));
        } catch (e) {
          return false;
        }
      };
      isSimdSupported = () => {
        try {
          return WebAssembly.validate(new Uint8Array([
            0,
            97,
            115,
            109,
            1,
            0,
            0,
            0,
            1,
            4,
            1,
            96,
            0,
            0,
            3,
            2,
            1,
            0,
            10,
            30,
            1,
            28,
            0,
            65,
            0,
            253,
            15,
            253,
            12,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            253,
            186,
            1,
            26,
            11
          ]));
        } catch (e) {
          return false;
        }
      };
      getWasmFileName = (useSimd, useThreads) => {
        if (useSimd) {
          if (true) {
            return "ort-training-wasm-simd.wasm";
          }
          return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";
        } else {
          return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";
        }
      };
      initializeWebAssembly = async (flags) => {
        if (initialized) {
          return Promise.resolve();
        }
        if (initializing) {
          throw new Error("multiple calls to 'initializeWebAssembly()' detected.");
        }
        if (aborted) {
          throw new Error("previous call to 'initializeWebAssembly()' failed.");
        }
        initializing = true;
        const timeout = flags.initTimeout;
        const numThreads = flags.numThreads;
        const simd = flags.simd;
        const useThreads = numThreads > 1 && isMultiThreadSupported();
        const useSimd = simd && isSimdSupported();
        const wasmPaths = flags.wasmPaths;
        const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;
        const wasmFileName = getWasmFileName(useSimd, useThreads);
        const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;
        let isTimeout = false;
        const tasks = [];
        if (timeout > 0) {
          tasks.push(new Promise((resolve) => {
            setTimeout(() => {
              isTimeout = true;
              resolve();
            }, timeout);
          }));
        }
        tasks.push(new Promise((resolve, reject) => {
          const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;
          const config = {
            locateFile: (fileName, scriptDirectory) => {
              if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {
                return URL.createObjectURL(new Blob(
                  [
                    // This require() function is handled by esbuild plugin to load file content as string.
                    // eslint-disable-next-line @typescript-eslint/no-require-imports
                    require_ort_wasm_threaded_worker()
                  ],
                  { type: "text/javascript" }
                ));
              }
              if (fileName.endsWith(".wasm")) {
                if (wasmPathOverride) {
                  return wasmPathOverride;
                }
                const prefix = wasmPrefixOverride ?? scriptDirectory;
                if (false) {
                  if (wasmFileName === "ort-wasm-simd.wasm") {
                    return prefix + "ort-wasm-simd.jsep.wasm";
                  } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {
                    return prefix + "ort-wasm-simd-threaded.jsep.wasm";
                  }
                }
                return prefix + wasmFileName;
              }
              return scriptDirectory + fileName;
            }
          };
          if (useThreads) {
            config.numThreads = numThreads;
            if (typeof Blob === "undefined") {
              config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");
            } else {
              const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;
              config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });
            }
          }
          factory(config).then(
            // wasm module initialized successfully
            (module) => {
              initializing = false;
              initialized = true;
              wasm = module;
              resolve();
            },
            // wasm module failed to initialize
            (what) => {
              initializing = false;
              aborted = true;
              reject(what);
            }
          );
        }));
        await Promise.race(tasks);
        if (isTimeout) {
          throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);
        }
      };
      getInstance = () => {
        if (initialized && wasm) {
          return wasm;
        }
        throw new Error("WebAssembly is not initialized yet.");
      };
    }
  });

  // web/lib/wasm/wasm-utils.ts
  var allocWasmString, iterateExtraOptions, checkLastError;
  var init_wasm_utils = __esm({
    "web/lib/wasm/wasm-utils.ts"() {
      "use strict";
      init_wasm_factory();
      allocWasmString = (data, allocs) => {
        const wasm2 = getInstance();
        const dataLength = wasm2.lengthBytesUTF8(data) + 1;
        const dataOffset = wasm2._malloc(dataLength);
        wasm2.stringToUTF8(data, dataOffset, dataLength);
        allocs.push(dataOffset);
        return dataOffset;
      };
      iterateExtraOptions = (options, prefix, seen, handler) => {
        if (typeof options == "object" && options !== null) {
          if (seen.has(options)) {
            throw new Error("Circular reference in options");
          } else {
            seen.add(options);
          }
        }
        Object.entries(options).forEach(([key, value]) => {
          const name = prefix ? prefix + key : key;
          if (typeof value === "object") {
            iterateExtraOptions(value, name + ".", seen, handler);
          } else if (typeof value === "string" || typeof value === "number") {
            handler(name, value.toString());
          } else if (typeof value === "boolean") {
            handler(name, value ? "1" : "0");
          } else {
            throw new Error(`Can't handle extra config type: ${typeof value}`);
          }
        });
      };
      checkLastError = (message) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        try {
          const paramsOffset = wasm2.stackAlloc(8);
          wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);
          const errorCode = wasm2.HEAP32[paramsOffset / 4];
          const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];
          const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";
          throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);
        } finally {
          wasm2.stackRestore(stack);
        }
      };
    }
  });

  // web/lib/wasm/run-options.ts
  var setRunOptions;
  var init_run_options = __esm({
    "web/lib/wasm/run-options.ts"() {
      "use strict";
      init_wasm_factory();
      init_wasm_utils();
      setRunOptions = (options) => {
        const wasm2 = getInstance();
        let runOptionsHandle = 0;
        const allocs = [];
        const runOptions = options || {};
        try {
          if (options?.logSeverityLevel === void 0) {
            runOptions.logSeverityLevel = 2;
          } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {
            throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);
          }
          if (options?.logVerbosityLevel === void 0) {
            runOptions.logVerbosityLevel = 0;
          } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {
            throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);
          }
          if (options?.terminate === void 0) {
            runOptions.terminate = false;
          }
          let tagDataOffset = 0;
          if (options?.tag !== void 0) {
            tagDataOffset = allocWasmString(options.tag, allocs);
          }
          runOptionsHandle = wasm2._OrtCreateRunOptions(
            runOptions.logSeverityLevel,
            runOptions.logVerbosityLevel,
            !!runOptions.terminate,
            tagDataOffset
          );
          if (runOptionsHandle === 0) {
            checkLastError("Can't create run options.");
          }
          if (options?.extra !== void 0) {
            iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
              const keyDataOffset = allocWasmString(key, allocs);
              const valueDataOffset = allocWasmString(value, allocs);
              if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                checkLastError(`Can't set a run config entry: ${key} - ${value}.`);
              }
            });
          }
          return [runOptionsHandle, allocs];
        } catch (e) {
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
          throw e;
        }
      };
    }
  });

  // web/lib/wasm/session-options.ts
  var getGraphOptimzationLevel, getExecutionMode, appendDefaultOptions, setExecutionProviders, setSessionOptions;
  var init_session_options = __esm({
    "web/lib/wasm/session-options.ts"() {
      "use strict";
      init_wasm_factory();
      init_wasm_utils();
      getGraphOptimzationLevel = (graphOptimizationLevel) => {
        switch (graphOptimizationLevel) {
          case "disabled":
            return 0;
          case "basic":
            return 1;
          case "extended":
            return 2;
          case "all":
            return 99;
          default:
            throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);
        }
      };
      getExecutionMode = (executionMode) => {
        switch (executionMode) {
          case "sequential":
            return 0;
          case "parallel":
            return 1;
          default:
            throw new Error(`unsupported execution mode: ${executionMode}`);
        }
      };
      appendDefaultOptions = (options) => {
        if (!options.extra) {
          options.extra = {};
        }
        if (!options.extra.session) {
          options.extra.session = {};
        }
        const session = options.extra.session;
        if (!session.use_ort_model_bytes_directly) {
          session.use_ort_model_bytes_directly = "1";
        }
        if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {
          options.enableMemPattern = false;
        }
      };
      setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {
        for (const ep of executionProviders) {
          let epName = typeof ep === "string" ? ep : ep.name;
          switch (epName) {
            case "webnn":
              epName = "WEBNN";
              if (typeof ep !== "string") {
                const webnnOptions = ep;
                if (webnnOptions?.deviceType) {
                  const keyDataOffset = allocWasmString("deviceType", allocs);
                  const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);
                  }
                }
                if (webnnOptions?.numThreads) {
                  let numThreads = webnnOptions.numThreads;
                  if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {
                    numThreads = 0;
                  }
                  const keyDataOffset = allocWasmString("numThreads", allocs);
                  const valueDataOffset = allocWasmString(numThreads.toString(), allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(`Can't set a session config entry: 'numThreads' - ${webnnOptions.numThreads}.`);
                  }
                }
                if (webnnOptions?.powerPreference) {
                  const keyDataOffset = allocWasmString("powerPreference", allocs);
                  const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(
                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`
                    );
                  }
                }
              }
              break;
            case "webgpu":
              epName = "JS";
              if (typeof ep !== "string") {
                const webgpuOptions = ep;
                if (webgpuOptions?.preferredLayout) {
                  if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {
                    throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);
                  }
                  const keyDataOffset = allocWasmString("preferredLayout", allocs);
                  const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);
                  if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                    checkLastError(
                      `Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`
                    );
                  }
                }
              }
              break;
            case "wasm":
            case "cpu":
              continue;
            default:
              throw new Error(`not supported execution provider: ${epName}`);
          }
          const epNameDataOffset = allocWasmString(epName, allocs);
          if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {
            checkLastError(`Can't append execution provider: ${epName}.`);
          }
        }
      };
      setSessionOptions = (options) => {
        const wasm2 = getInstance();
        let sessionOptionsHandle = 0;
        const allocs = [];
        const sessionOptions = options || {};
        appendDefaultOptions(sessionOptions);
        try {
          const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");
          const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");
          const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;
          const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;
          if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {
            throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);
          }
          const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;
          if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {
            throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);
          }
          const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;
          sessionOptionsHandle = wasm2._OrtCreateSessionOptions(
            graphOptimizationLevel,
            !!sessionOptions.enableCpuMemArena,
            !!sessionOptions.enableMemPattern,
            executionMode,
            !!sessionOptions.enableProfiling,
            0,
            logIdDataOffset,
            logSeverityLevel,
            logVerbosityLevel,
            optimizedModelFilePathOffset
          );
          if (sessionOptionsHandle === 0) {
            checkLastError("Can't create session options.");
          }
          if (sessionOptions.executionProviders) {
            setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);
          }
          if (sessionOptions.freeDimensionOverrides) {
            for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {
              if (typeof name !== "string") {
                throw new Error(`free dimension override name must be a string: ${name}`);
              }
              if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {
                throw new Error(`free dimension override value must be a non-negative integer: ${value}`);
              }
              const nameOffset = allocWasmString(name, allocs);
              if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {
                checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);
              }
            }
          }
          if (sessionOptions.extra !== void 0) {
            iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {
              const keyDataOffset = allocWasmString(key, allocs);
              const valueDataOffset = allocWasmString(value, allocs);
              if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {
                checkLastError(`Can't set a session config entry: ${key} - ${value}.`);
              }
            });
          }
          return [sessionOptionsHandle, allocs];
        } catch (e) {
          if (sessionOptionsHandle !== 0) {
            wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
          throw e;
        }
      };
    }
  });

  // web/lib/wasm/wasm-common.ts
  var tensorDataTypeStringToEnum, tensorDataTypeEnumToString, getTensorElementSize, tensorTypeToTypedArrayConstructor, logLevelStringToEnum, isGpuBufferSupportedType, dataLocationStringToEnum;
  var init_wasm_common = __esm({
    "web/lib/wasm/wasm-common.ts"() {
      "use strict";
      tensorDataTypeStringToEnum = (type) => {
        switch (type) {
          case "int8":
            return 3 /* int8 */;
          case "uint8":
            return 2 /* uint8 */;
          case "bool":
            return 9 /* bool */;
          case "int16":
            return 5 /* int16 */;
          case "uint16":
            return 4 /* uint16 */;
          case "int32":
            return 6 /* int32 */;
          case "uint32":
            return 12 /* uint32 */;
          case "float16":
            return 10 /* float16 */;
          case "float32":
            return 1 /* float */;
          case "float64":
            return 11 /* double */;
          case "string":
            return 8 /* string */;
          case "int64":
            return 7 /* int64 */;
          case "uint64":
            return 13 /* uint64 */;
          default:
            throw new Error(`unsupported data type: ${type}`);
        }
      };
      tensorDataTypeEnumToString = (typeProto) => {
        switch (typeProto) {
          case 3 /* int8 */:
            return "int8";
          case 2 /* uint8 */:
            return "uint8";
          case 9 /* bool */:
            return "bool";
          case 5 /* int16 */:
            return "int16";
          case 4 /* uint16 */:
            return "uint16";
          case 6 /* int32 */:
            return "int32";
          case 12 /* uint32 */:
            return "uint32";
          case 10 /* float16 */:
            return "float16";
          case 1 /* float */:
            return "float32";
          case 11 /* double */:
            return "float64";
          case 8 /* string */:
            return "string";
          case 7 /* int64 */:
            return "int64";
          case 13 /* uint64 */:
            return "uint64";
          default:
            throw new Error(`unsupported data type: ${typeProto}`);
        }
      };
      getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];
      tensorTypeToTypedArrayConstructor = (type) => {
        switch (type) {
          case "float16":
            return Uint16Array;
          case "float32":
            return Float32Array;
          case "uint8":
            return Uint8Array;
          case "int8":
            return Int8Array;
          case "uint16":
            return Uint16Array;
          case "int16":
            return Int16Array;
          case "int32":
            return Int32Array;
          case "bool":
            return Uint8Array;
          case "float64":
            return Float64Array;
          case "uint32":
            return Uint32Array;
          case "int64":
            return BigInt64Array;
          case "uint64":
            return BigUint64Array;
          default:
            throw new Error(`unsupported type: ${type}`);
        }
      };
      logLevelStringToEnum = (logLevel) => {
        switch (logLevel) {
          case "verbose":
            return 0;
          case "info":
            return 1;
          case "warning":
            return 2;
          case "error":
            return 3;
          case "fatal":
            return 4;
          default:
            throw new Error(`unsupported logging level: ${logLevel}`);
        }
      };
      isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";
      dataLocationStringToEnum = (location) => {
        switch (location) {
          case "none":
            return 0;
          case "cpu":
            return 1;
          case "cpu-pinned":
            return 2;
          case "texture":
            return 3;
          case "gpu-buffer":
            return 4;
          default:
            throw new Error(`unsupported data location: ${location}`);
        }
      };
    }
  });

  // nodejs-ignore:node:fs/promises
  var readFile2;
  var init_promises = __esm({
    "nodejs-ignore:node:fs/promises"() {
      readFile2 = void 0;
    }
  });

  // web/lib/wasm/wasm-utils-load-file.ts
  var loadFile;
  var init_wasm_utils_load_file = __esm({
    "web/lib/wasm/wasm-utils-load-file.ts"() {
      "use strict";
      init_fs();
      init_promises();
      loadFile = async (file) => {
        if (typeof file === "string") {
          if (typeof process !== "undefined" && process.versions && process.versions.node) {
            try {
              return new Uint8Array(await readFile2(file));
            } catch (e) {
              if (e.code === "ERR_FS_FILE_TOO_LARGE") {
                const stream = createReadStream(file);
                const chunks = [];
                for await (const chunk of stream) {
                  chunks.push(chunk);
                }
                return new Uint8Array(Buffer.concat(chunks));
              }
              throw e;
            }
          } else {
            const response = await fetch(file);
            if (!response.ok) {
              throw new Error(`failed to load external data file: ${file}`);
            }
            const contentLengthHeader = response.headers.get("Content-Length");
            const fileSize = contentLengthHeader ? parseInt(contentLengthHeader, 10) : 0;
            if (fileSize < 1073741824) {
              return new Uint8Array(await response.arrayBuffer());
            } else {
              if (!response.body) {
                throw new Error(`failed to load external data file: ${file}, no response body.`);
              }
              const reader = response.body.getReader();
              const pages = Math.ceil(fileSize / 65536);
              const buffer = new WebAssembly.Memory({ initial: pages, maximum: pages }).buffer;
              let offset = 0;
              while (true) {
                const { done, value } = await reader.read();
                if (done) {
                  break;
                }
                const chunkSize = value.byteLength;
                const chunk = new Uint8Array(buffer, offset, chunkSize);
                chunk.set(value);
                offset += chunkSize;
              }
              return new Uint8Array(buffer, 0, fileSize);
            }
          }
        } else if (file instanceof Blob) {
          return new Uint8Array(await file.arrayBuffer());
        } else if (file instanceof Uint8Array) {
          return file;
        } else {
          return new Uint8Array(file);
        }
      };
    }
  });

  // web/lib/wasm/wasm-core-impl.ts
  var initOrt, initRuntime, initEp, activeSessions, getSessionInputOutputCount, copyFromExternalBuffer, createSession, releaseSession, prepareInputOutputTensor, run, endProfiling, extractTransferableBuffers;
  var init_wasm_core_impl = __esm({
    "web/lib/wasm/wasm-core-impl.ts"() {
      "use strict";
      init_run_options();
      init_session_options();
      init_wasm_common();
      init_wasm_factory();
      init_wasm_utils();
      init_wasm_utils_load_file();
      initOrt = (numThreads, loggingLevel) => {
        const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);
        if (errorCode !== 0) {
          checkLastError("Can't initialize onnxruntime.");
        }
      };
      initRuntime = async (env3) => {
        initOrt(env3.wasm.numThreads, logLevelStringToEnum(env3.logLevel));
      };
      initEp = async (env3, epName) => {
        if (false) {
          if (typeof navigator === "undefined" || !navigator.gpu) {
            throw new Error("WebGPU is not supported in current environment");
          }
          const adapter = await navigator.gpu.requestAdapter();
          if (!adapter) {
            throw new Error(
              'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.'
            );
          }
          if (!env3.wasm.simd) {
            throw new Error(
              "Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP"
            );
          }
          const initJsep = null.init;
          await initJsep(getInstance(), env3, adapter);
        }
      };
      activeSessions = /* @__PURE__ */ new Map();
      getSessionInputOutputCount = (sessionHandle) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        try {
          const dataOffset = wasm2.stackAlloc(8);
          const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);
          if (errorCode !== 0) {
            checkLastError("Can't get session input/output count.");
          }
          return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];
        } finally {
          wasm2.stackRestore(stack);
        }
      };
      copyFromExternalBuffer = (model) => {
        const wasm2 = getInstance();
        const modelDataOffset = wasm2._malloc(model.byteLength);
        if (modelDataOffset === 0) {
          throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);
        }
        wasm2.HEAPU8.set(model, modelDataOffset);
        return [modelDataOffset, model.byteLength];
      };
      createSession = async (modelData, options) => {
        let modelDataOffset, modelDataLength;
        const wasm2 = getInstance();
        if (Array.isArray(modelData)) {
          [modelDataOffset, modelDataLength] = modelData;
        } else if (modelData.buffer === wasm2.HEAPU8.buffer) {
          [modelDataOffset, modelDataLength] = [modelData.byteOffset, modelData.byteLength];
        } else {
          [modelDataOffset, modelDataLength] = copyFromExternalBuffer(modelData);
        }
        let sessionHandle = 0;
        let sessionOptionsHandle = 0;
        let ioBindingHandle = 0;
        let allocs = [];
        const inputNamesUTF8Encoded = [];
        const outputNamesUTF8Encoded = [];
        try {
          [sessionOptionsHandle, allocs] = setSessionOptions(options);
          if (options?.externalData && wasm2.mountExternalData) {
            const loadingPromises = [];
            for (const file of options.externalData) {
              const path = typeof file === "string" ? file : file.path;
              loadingPromises.push(loadFile(typeof file === "string" ? file : file.data).then((data) => {
                wasm2.mountExternalData(path, data);
              }));
            }
            await Promise.all(loadingPromises);
          }
          sessionHandle = await wasm2._OrtCreateSession(modelDataOffset, modelDataLength, sessionOptionsHandle);
          if (sessionHandle === 0) {
            checkLastError("Can't create a session.");
          }
          const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);
          const inputNames = [];
          const outputNames = [];
          const outputPreferredLocations = [];
          for (let i = 0; i < inputCount; i++) {
            const name = wasm2._OrtGetInputName(sessionHandle, i);
            if (name === 0) {
              checkLastError("Can't get an input name.");
            }
            inputNamesUTF8Encoded.push(name);
            inputNames.push(wasm2.UTF8ToString(name));
          }
          for (let i = 0; i < outputCount; i++) {
            const name = wasm2._OrtGetOutputName(sessionHandle, i);
            if (name === 0) {
              checkLastError("Can't get an output name.");
            }
            outputNamesUTF8Encoded.push(name);
            const nameString = wasm2.UTF8ToString(name);
            outputNames.push(nameString);
            if (false) {
              const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";
              if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {
                throw new Error(`Not supported preferred output location: ${location}.`);
              }
              outputPreferredLocations.push(location);
            }
          }
          let bindingState = null;
          if (false) {
            ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);
            if (ioBindingHandle === 0) {
              checkLastError("Can't create IO binding.");
            }
            bindingState = {
              handle: ioBindingHandle,
              outputPreferredLocations,
              outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))
            };
          }
          activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);
          return [sessionHandle, inputNames, outputNames];
        } catch (e) {
          inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
          outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
          if (ioBindingHandle !== 0) {
            wasm2._OrtReleaseBinding(ioBindingHandle);
          }
          if (sessionHandle !== 0) {
            wasm2._OrtReleaseSession(sessionHandle);
          }
          throw e;
        } finally {
          wasm2._free(modelDataOffset);
          if (sessionOptionsHandle !== 0) {
            wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
          wasm2.unmountExternalData?.();
        }
      };
      releaseSession = (sessionId) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error(`cannot release session. invalid session id: ${sessionId}`);
        }
        const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;
        if (ioBindingState) {
          wasm2._OrtReleaseBinding(ioBindingState.handle);
        }
        wasm2.jsepUnregisterBuffers?.(sessionId);
        inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));
        wasm2._OrtReleaseSession(sessionHandle);
        activeSessions.delete(sessionId);
      };
      prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {
        if (!tensor) {
          tensorHandles.push(0);
          return;
        }
        const wasm2 = getInstance();
        const dataType = tensor[0];
        const dims = tensor[1];
        const location = tensor[3];
        let rawData;
        let dataByteLength;
        if (dataType === "string" && location === "gpu-buffer") {
          throw new Error("String tensor is not supported on GPU.");
        }
        if (location === "gpu-buffer") {
          const gpuBuffer = tensor[2].gpuBuffer;
          const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));
          dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;
          rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);
        } else {
          const data = tensor[2];
          if (Array.isArray(data)) {
            dataByteLength = 4 * data.length;
            rawData = wasm2._malloc(dataByteLength);
            allocs.push(rawData);
            let dataIndex = rawData / 4;
            for (let i = 0; i < data.length; i++) {
              if (typeof data[i] !== "string") {
                throw new TypeError(`tensor data at index ${i} is not a string`);
              }
              wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);
            }
          } else {
            dataByteLength = data.byteLength;
            rawData = wasm2._malloc(dataByteLength);
            allocs.push(rawData);
            wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);
          }
        }
        const stack = wasm2.stackSave();
        const dimsOffset = wasm2.stackAlloc(4 * dims.length);
        try {
          let dimIndex = dimsOffset / 4;
          dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);
          const tensor2 = wasm2._OrtCreateTensor(
            tensorDataTypeStringToEnum(dataType),
            rawData,
            dataByteLength,
            dimsOffset,
            dims.length,
            dataLocationStringToEnum(location)
          );
          if (tensor2 === 0) {
            checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);
          }
          tensorHandles.push(tensor2);
        } finally {
          wasm2.stackRestore(stack);
        }
      };
      run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error(`cannot run inference. invalid session id: ${sessionId}`);
        }
        const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;
        const inputCount = inputIndices.length;
        const outputCount = outputIndices.length;
        let runOptionsHandle = 0;
        let runOptionsAllocs = [];
        const inputTensorHandles = [];
        const outputTensorHandles = [];
        const inputOutputAllocs = [];
        const beforeRunStack = wasm2.stackSave();
        const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);
        const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);
        const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);
        const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);
        try {
          [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
          for (let i = 0; i < inputCount; i++) {
            prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);
          }
          for (let i = 0; i < outputCount; i++) {
            prepareInputOutputTensor(
              outputTensors[i],
              outputTensorHandles,
              inputOutputAllocs,
              sessionId,
              inputCount + outputIndices[i]
            );
          }
          let inputValuesIndex = inputValuesOffset / 4;
          let inputNamesIndex = inputNamesOffset / 4;
          let outputValuesIndex = outputValuesOffset / 4;
          let outputNamesIndex = outputNamesOffset / 4;
          for (let i = 0; i < inputCount; i++) {
            wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];
            wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];
          }
          for (let i = 0; i < outputCount; i++) {
            wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];
            wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];
          }
          if (false) {
            const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;
            if (inputNamesUTF8Encoded.length !== inputCount) {
              throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`);
            }
            for (let i = 0; i < inputCount; i++) {
              const index = inputIndices[i];
              const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);
              if (errorCode2 !== 0) {
                checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);
              }
            }
            for (let i = 0; i < outputCount; i++) {
              const index = outputIndices[i];
              const location = outputTensors[i]?.[3];
              if (location) {
                const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);
                if (errorCode2 !== 0) {
                  checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);
                }
              } else {
                const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);
                if (errorCode2 !== 0) {
                  checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);
                }
              }
            }
          }
          let errorCode;
          if (false) {
            errorCode = await wasm2._OrtRunWithBinding(
              sessionHandle,
              ioBindingState.handle,
              outputCount,
              outputValuesOffset,
              runOptionsHandle
            );
          } else {
            errorCode = await wasm2._OrtRun(
              sessionHandle,
              inputNamesOffset,
              inputValuesOffset,
              inputCount,
              outputNamesOffset,
              outputCount,
              outputValuesOffset,
              runOptionsHandle
            );
          }
          if (errorCode !== 0) {
            checkLastError("failed to call OrtRun().");
          }
          const output = [];
          for (let i = 0; i < outputCount; i++) {
            const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];
            if (tensor === outputTensorHandles[i]) {
              output.push(outputTensors[i]);
              continue;
            }
            const beforeGetTensorDataStack = wasm2.stackSave();
            const tensorDataOffset = wasm2.stackAlloc(4 * 4);
            let keepOutputTensor = false;
            let type, dataOffset = 0;
            try {
              const errorCode2 = wasm2._OrtGetTensorData(
                tensor,
                tensorDataOffset,
                tensorDataOffset + 4,
                tensorDataOffset + 8,
                tensorDataOffset + 12
              );
              if (errorCode2 !== 0) {
                checkLastError(`Can't access output tensor data on index ${i}.`);
              }
              let tensorDataIndex = tensorDataOffset / 4;
              const dataType = wasm2.HEAPU32[tensorDataIndex++];
              dataOffset = wasm2.HEAPU32[tensorDataIndex++];
              const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];
              const dimsLength = wasm2.HEAPU32[tensorDataIndex++];
              const dims = [];
              for (let i2 = 0; i2 < dimsLength; i2++) {
                dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);
              }
              wasm2._OrtFree(dimsOffset);
              const size = dims.reduce((a, b) => a * b, 1);
              type = tensorDataTypeEnumToString(dataType);
              const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];
              if (type === "string") {
                if (preferredLocation === "gpu-buffer") {
                  throw new Error("String tensor is not supported on GPU.");
                }
                const stringData = [];
                let dataIndex = dataOffset / 4;
                for (let i2 = 0; i2 < size; i2++) {
                  const offset = wasm2.HEAPU32[dataIndex++];
                  const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;
                  stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));
                }
                output.push([type, dims, stringData, "cpu"]);
              } else {
                if (preferredLocation === "gpu-buffer" && size > 0) {
                  const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);
                  const elementSize = getTensorElementSize(dataType);
                  if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {
                    throw new Error(`Unsupported data type: ${type}`);
                  }
                  keepOutputTensor = true;
                  output.push([
                    type,
                    dims,
                    {
                      gpuBuffer,
                      download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),
                      dispose: () => {
                        wasm2._OrtReleaseTensor(tensor);
                      }
                    },
                    "gpu-buffer"
                  ]);
                } else {
                  const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);
                  const data = new typedArrayConstructor(size);
                  new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));
                  output.push([type, dims, data, "cpu"]);
                }
              }
            } finally {
              wasm2.stackRestore(beforeGetTensorDataStack);
              if (type === "string" && dataOffset) {
                wasm2._free(dataOffset);
              }
              if (!keepOutputTensor) {
                wasm2._OrtReleaseTensor(tensor);
              }
            }
          }
          if (ioBindingState) {
            wasm2._OrtClearBoundOutputs(ioBindingState.handle);
          }
          return output;
        } finally {
          wasm2.stackRestore(beforeRunStack);
          inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          inputOutputAllocs.forEach((p) => wasm2._free(p));
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          runOptionsAllocs.forEach((p) => wasm2._free(p));
        }
      };
      endProfiling = (sessionId) => {
        const wasm2 = getInstance();
        const session = activeSessions.get(sessionId);
        if (!session) {
          throw new Error("invalid session id");
        }
        const sessionHandle = session[0];
        const profileFileName = wasm2._OrtEndProfiling(sessionHandle);
        if (profileFileName === 0) {
          checkLastError("Can't get an profile file name.");
        }
        wasm2._OrtFree(profileFileName);
      };
      extractTransferableBuffers = (tensors) => {
        const buffers = [];
        for (const tensor of tensors) {
          const data = tensor[2];
          if (!Array.isArray(data) && "buffer" in data) {
            buffers.push(data.buffer);
          }
        }
        return buffers;
      };
    }
  });

  // proxy-worker:./proxy-worker/main
  var require_main = __commonJS({
    "proxy-worker:./proxy-worker/main"(exports, module) {
      module.exports = '/*!\n * ONNX Runtime Web v1.17.0\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n"use strict";\n(() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __esm = (fn, res) => function __init() {\n    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n  };\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === "object" || typeof from === "function") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);\n\n  // nodejs-ignore:fs\n  var fs_exports = {};\n  __export(fs_exports, {\n    createReadStream: () => createReadStream,\n    readFile: () => readFile,\n    readFileSync: () => readFileSync\n  });\n  var readFile, readFileSync, createReadStream;\n  var init_fs = __esm({\n    "nodejs-ignore:fs"() {\n      readFile = void 0;\n      readFileSync = void 0;\n      createReadStream = void 0;\n    }\n  });\n\n  // nodejs-ignore:path\n  var path_exports = {};\n  __export(path_exports, {\n    join: () => join2\n  });\n  var join2;\n  var init_path = __esm({\n    "nodejs-ignore:path"() {\n      join2 = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-training-wasm-simd.js\n  var require_ort_training_wasm_simd = __commonJS({\n    "web/lib/wasm/binding/ort-training-wasm-simd.js"(exports, module) {\n      "use strict";\n      var ortWasm = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          var e = moduleArg, k, l;\n          e.ready = new Promise((a, b) => {\n            k = a;\n            l = b;\n          });\n          var aa = Object.assign({}, e), ba = "./this.program", ca = "object" == typeof window, q = "function" == typeof importScripts, da = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, v = "", x, z, A;\n          if (da) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), B = (init_path(), __toCommonJS(path_exports));\n            v = q ? B.dirname(v) + "/" : __dirname + "/";\n            x = (a, b) => {\n              a = C(a) ? new URL(a) : B.normalize(a);\n              return fs.readFileSync(a, b ? void 0 : "utf8");\n            };\n            A = (a) => {\n              a = x(a, true);\n              a.buffer || (a = new Uint8Array(a));\n              return a;\n            };\n            z = (a, b, c, d = true) => {\n              a = C(a) ? new URL(a) : B.normalize(a);\n              fs.readFile(a, d ? void 0 : "utf8", (g, h) => {\n                g ? c(g) : b(d ? h.buffer : h);\n              });\n            };\n            !e.thisProgram && 1 < process.argv.length && (ba = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            e.inspect = () => "[Emscripten Module object]";\n          } else if (ca || q)\n            q ? v = self.location.href : "undefined" != typeof document && document.currentScript && (v = document.currentScript.src), _scriptDir && (v = _scriptDir), 0 !== v.indexOf("blob:") ? v = v.substr(0, v.replace(/[?#].*/, "").lastIndexOf("/") + 1) : v = "", x = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.send(null);\n              return b.responseText;\n            }, q && (A = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), z = (a, b, c) => {\n              var d = new XMLHttpRequest();\n              d.open("GET", a, true);\n              d.responseType = "arraybuffer";\n              d.onload = () => {\n                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();\n              };\n              d.onerror = c;\n              d.send(null);\n            };\n          var ea = console.log.bind(console), D = console.error.bind(console);\n          Object.assign(e, aa);\n          aa = null;\n          "object" != typeof WebAssembly && E("no native wasm support detected");\n          var F, fa = false, G, H, I, J, ha;\n          function ia() {\n            var a = F.buffer;\n            e.HEAP8 = G = new Int8Array(a);\n            e.HEAP16 = new Int16Array(a);\n            e.HEAPU8 = H = new Uint8Array(a);\n            e.HEAPU16 = new Uint16Array(a);\n            e.HEAP32 = I = new Int32Array(a);\n            e.HEAPU32 = J = new Uint32Array(a);\n            e.HEAPF32 = new Float32Array(a);\n            e.HEAPF64 = ha = new Float64Array(a);\n          }\n          var K = [], L = [], ja = [], M = 0, N = null, O = null;\n          function E(a) {\n            a = "Aborted(" + a + ")";\n            D(a);\n            fa = true;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            l(a);\n            throw a;\n          }\n          var ka = (a) => a.startsWith("data:application/octet-stream;base64,"), C = (a) => a.startsWith("file://"), P;\n          P = "ort-training-wasm-simd.wasm";\n          if (!ka(P)) {\n            var la = P;\n            P = e.locateFile ? e.locateFile(la, v) : v + la;\n          }\n          function ma(a) {\n            if (A)\n              return A(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function na(a) {\n            if (ca || q) {\n              if ("function" == typeof fetch && !C(a))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => ma(a));\n              if (z)\n                return new Promise((b, c) => {\n                  z(a, (d) => b(new Uint8Array(d)), c);\n                });\n            }\n            return Promise.resolve().then(() => ma(a));\n          }\n          function oa(a, b, c) {\n            return na(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {\n              D(`failed to asynchronously prepare wasm: ${d}`);\n              E(d);\n            });\n          }\n          function pa(a, b) {\n            var c = P;\n            return "function" != typeof WebAssembly.instantiateStreaming || ka(c) || C(c) || da || "function" != typeof fetch ? oa(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(g) {\n              D(`wasm streaming compile failed: ${g}`);\n              D("falling back to ArrayBuffer instantiation");\n              return oa(c, a, b);\n            }));\n          }\n          var Q, qa = { 989232: (a, b, c, d) => {\n            if ("undefined" == typeof e || !e.Qa)\n              return 1;\n            a = R(a >>> 0);\n            a.startsWith("./") && (a = a.substring(2));\n            a = e.Qa.get(a);\n            if (!a)\n              return 2;\n            b >>>= 0;\n            c >>>= 0;\n            if (b + c > a.byteLength)\n              return 3;\n            try {\n              return H.set(a.subarray(b, b + c), d >>> 0 >>> 0), 0;\n            } catch {\n              return 4;\n            }\n          } };\n          function ra(a) {\n            this.Ka = a - 24;\n            this.Pa = function(b) {\n              J[this.Ka + 4 >>> 2 >>> 0] = b;\n            };\n            this.Oa = function(b) {\n              J[this.Ka + 8 >>> 2 >>> 0] = b;\n            };\n            this.Ma = function(b, c) {\n              this.Na();\n              this.Pa(b);\n              this.Oa(c);\n            };\n            this.Na = function() {\n              J[this.Ka + 16 >>> 2 >>> 0] = 0;\n            };\n          }\n          var sa = 0, ta = 0, ua = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, va = (a, b, c) => {\n            b >>>= 0;\n            var d = b + c;\n            for (c = b; a[c] && !(c >= d); )\n              ++c;\n            if (16 < c - b && a.buffer && ua)\n              return ua.decode(a.subarray(b, c));\n            for (d = ""; b < c; ) {\n              var g = a[b++];\n              if (g & 128) {\n                var h = a[b++] & 63;\n                if (192 == (g & 224))\n                  d += String.fromCharCode((g & 31) << 6 | h);\n                else {\n                  var m = a[b++] & 63;\n                  g = 224 == (g & 240) ? (g & 15) << 12 | h << 6 | m : (g & 7) << 18 | h << 12 | m << 6 | a[b++] & 63;\n                  65536 > g ? d += String.fromCharCode(g) : (g -= 65536, d += String.fromCharCode(55296 | g >> 10, 56320 | g & 1023));\n                }\n              } else\n                d += String.fromCharCode(g);\n            }\n            return d;\n          }, R = (a, b) => (a >>>= 0) ? va(H, a, b) : "", S = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, T = (a, b, c, d) => {\n            c >>>= 0;\n            if (!(0 < d))\n              return 0;\n            var g = c;\n            d = c + d - 1;\n            for (var h = 0; h < a.length; ++h) {\n              var m = a.charCodeAt(h);\n              if (55296 <= m && 57343 >= m) {\n                var r = a.charCodeAt(++h);\n                m = 65536 + ((m & 1023) << 10) | r & 1023;\n              }\n              if (127 >= m) {\n                if (c >= d)\n                  break;\n                b[c++ >>> 0] = m;\n              } else {\n                if (2047 >= m) {\n                  if (c + 1 >= d)\n                    break;\n                  b[c++ >>> 0] = 192 | m >> 6;\n                } else {\n                  if (65535 >= m) {\n                    if (c + 2 >= d)\n                      break;\n                    b[c++ >>> 0] = 224 | m >> 12;\n                  } else {\n                    if (c + 3 >= d)\n                      break;\n                    b[c++ >>> 0] = 240 | m >> 18;\n                    b[c++ >>> 0] = 128 | m >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | m >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | m & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - g;\n          }, U = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), wa = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], xa = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], Ca = (a) => {\n            var b = S(a) + 1, c = Ba(b);\n            c && T(a, H, c, b);\n            return c;\n          }, V = [], W = {}, Da = () => {\n            if (!X) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace(\n                "-",\n                "_"\n              ) + ".UTF-8", _: ba || "./this.program" }, b;\n              for (b in W)\n                void 0 === W[b] ? delete a[b] : a[b] = W[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              X = c;\n            }\n            return X;\n          }, X, Ea = [null, [], []], Fa = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Ga = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Ha(a) {\n            var b = Array(S(a) + 1);\n            T(a, b, 0, b.length);\n            return b;\n          }\n          function Ia(a, b, c, d) {\n            function g(f, n, p) {\n              for (f = "number" == typeof f ? f.toString() : f || ""; f.length < n; )\n                f = p[0] + f;\n              return f;\n            }\n            function h(f, n) {\n              return g(f, n, "0");\n            }\n            function m(f, n) {\n              function p(ya) {\n                return 0 > ya ? -1 : 0 < ya ? 1 : 0;\n              }\n              var y;\n              0 === (y = p(f.getFullYear() - n.getFullYear())) && 0 === (y = p(f.getMonth() - n.getMonth())) && (y = p(f.getDate() - n.getDate()));\n              return y;\n            }\n            function r(f) {\n              switch (f.getDay()) {\n                case 0:\n                  return new Date(f.getFullYear() - 1, 11, 29);\n                case 1:\n                  return f;\n                case 2:\n                  return new Date(f.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    f.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(f.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(f.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(f.getFullYear() - 1, 11, 30);\n              }\n            }\n            function w(f) {\n              var n = f.Ga;\n              for (f = new Date(new Date(f.Ha + 1900, 0, 1).getTime()); 0 < n; ) {\n                var p = f.getMonth(), y = (U(f.getFullYear()) ? Fa : Ga)[p];\n                if (n > y - f.getDate())\n                  n -= y - f.getDate() + 1, f.setDate(1), 11 > p ? f.setMonth(p + 1) : (f.setMonth(0), f.setFullYear(f.getFullYear() + 1));\n                else {\n                  f.setDate(f.getDate() + n);\n                  break;\n                }\n              }\n              p = new Date(f.getFullYear() + 1, 0, 4);\n              n = r(new Date(\n                f.getFullYear(),\n                0,\n                4\n              ));\n              p = r(p);\n              return 0 >= m(n, f) ? 0 >= m(p, f) ? f.getFullYear() + 1 : f.getFullYear() : f.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            var t = J[d + 40 >>> 2 >>> 0];\n            d = { Ta: I[d >>> 2 >>> 0], Sa: I[d + 4 >>> 2 >>> 0], Ia: I[d + 8 >>> 2 >>> 0], La: I[d + 12 >>> 2 >>> 0], Ja: I[d + 16 >>> 2 >>> 0], Ha: I[d + 20 >>> 2 >>> 0], Ba: I[d + 24 >>> 2 >>> 0], Ga: I[d + 28 >>> 2 >>> 0], Va: I[d + 32 >>> 2 >>> 0], Ra: I[d + 36 >>> 2 >>> 0], Ua: t ? R(t) : "" };\n            c = R(c);\n            t = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var u in t)\n              c = c.replace(new RegExp(u, "g"), t[u]);\n            var za = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Aa = "January February March April May June July August September October November December".split(" ");\n            t = {\n              "%a": (f) => za[f.Ba].substring(0, 3),\n              "%A": (f) => za[f.Ba],\n              "%b": (f) => Aa[f.Ja].substring(0, 3),\n              "%B": (f) => Aa[f.Ja],\n              "%C": (f) => h((f.Ha + 1900) / 100 | 0, 2),\n              "%d": (f) => h(f.La, 2),\n              "%e": (f) => g(f.La, 2, " "),\n              "%g": (f) => w(f).toString().substring(2),\n              "%G": (f) => w(f),\n              "%H": (f) => h(f.Ia, 2),\n              "%I": (f) => {\n                f = f.Ia;\n                0 == f ? f = 12 : 12 < f && (f -= 12);\n                return h(f, 2);\n              },\n              "%j": (f) => {\n                for (var n = 0, p = 0; p <= f.Ja - 1; n += (U(f.Ha + 1900) ? Fa : Ga)[p++])\n                  ;\n                return h(f.La + n, 3);\n              },\n              "%m": (f) => h(f.Ja + 1, 2),\n              "%M": (f) => h(f.Sa, 2),\n              "%n": () => "\\n",\n              "%p": (f) => 0 <= f.Ia && 12 > f.Ia ? "AM" : "PM",\n              "%S": (f) => h(f.Ta, 2),\n              "%t": () => "	",\n              "%u": (f) => f.Ba || 7,\n              "%U": (f) => h(\n                Math.floor((f.Ga + 7 - f.Ba) / 7),\n                2\n              ),\n              "%V": (f) => {\n                var n = Math.floor((f.Ga + 7 - (f.Ba + 6) % 7) / 7);\n                2 >= (f.Ba + 371 - f.Ga - 2) % 7 && n++;\n                if (n)\n                  53 == n && (p = (f.Ba + 371 - f.Ga) % 7, 4 == p || 3 == p && U(f.Ha) || (n = 1));\n                else {\n                  n = 52;\n                  var p = (f.Ba + 7 - f.Ga - 1) % 7;\n                  (4 == p || 5 == p && U(f.Ha % 400 - 1)) && n++;\n                }\n                return h(n, 2);\n              },\n              "%w": (f) => f.Ba,\n              "%W": (f) => h(Math.floor((f.Ga + 7 - (f.Ba + 6) % 7) / 7), 2),\n              "%y": (f) => (f.Ha + 1900).toString().substring(2),\n              "%Y": (f) => f.Ha + 1900,\n              "%z": (f) => {\n                f = f.Ra;\n                var n = 0 <= f;\n                f = Math.abs(f) / 60;\n                return (n ? "+" : "-") + String("0000" + (f / 60 * 100 + f % 60)).slice(-4);\n              },\n              "%Z": (f) => f.Ua,\n              "%%": () => "%"\n            };\n            c = c.replace(/%%/g, "\\0\\0");\n            for (u in t)\n              c.includes(u) && (c = c.replace(new RegExp(u, "g"), t[u](d)));\n            c = c.replace(/\\0\\0/g, "%");\n            u = Ha(c);\n            if (u.length > b)\n              return 0;\n            G.set(u, a >>> 0);\n            return u.length - 1;\n          }\n          var La = { a: function(a, b, c) {\n            a >>>= 0;\n            new ra(a).Ma(b >>> 0, c >>> 0);\n            sa = a;\n            ta++;\n            throw sa;\n          }, e: function() {\n            return 0;\n          }, H: function() {\n          }, x: function() {\n          }, z: function() {\n          }, J: function() {\n            return 0;\n          }, F: function() {\n          }, A: function() {\n          }, E: function() {\n          }, g: function() {\n          }, y: function() {\n          }, v: function() {\n          }, G: function() {\n          }, w: function() {\n          }, k: () => 1, n: function(a, b, c) {\n            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n            c >>>= 0;\n            a = new Date(1e3 * a);\n            I[c >>> 2 >>> 0] = a.getUTCSeconds();\n            I[c + 4 >>> 2 >>> 0] = a.getUTCMinutes();\n            I[c + 8 >>> 2 >>> 0] = a.getUTCHours();\n            I[c + 12 >>> 2 >>> 0] = a.getUTCDate();\n            I[c + 16 >>> 2 >>> 0] = a.getUTCMonth();\n            I[c + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;\n            I[c + 24 >>> 2 >>> 0] = a.getUTCDay();\n            I[c + 28 >>> 2 >>> 0] = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n          }, o: function(a, b, c) {\n            a = b + 2097152 >>> 0 < 4194305 - !!a ? (a >>> 0) + 4294967296 * b : NaN;\n            c >>>= 0;\n            a = new Date(1e3 * a);\n            I[c >>> 2 >>> 0] = a.getSeconds();\n            I[c + 4 >>> 2 >>> 0] = a.getMinutes();\n            I[c + 8 >>> 2 >>> 0] = a.getHours();\n            I[c + 12 >>> 2 >>> 0] = a.getDate();\n            I[c + 16 >>> 2 >>> 0] = a.getMonth();\n            I[c + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;\n            I[c + 24 >>> 2 >>> 0] = a.getDay();\n            I[c + 28 >>> 2 >>> 0] = (U(a.getFullYear()) ? wa : xa)[a.getMonth()] + a.getDate() - 1 | 0;\n            I[c + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n            b = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n            var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n            I[c + 32 >>> 2 >>> 0] = (b != d && a.getTimezoneOffset() == Math.min(d, b)) | 0;\n          }, p: function(a) {\n            a >>>= 0;\n            var b = new Date(I[a + 20 >>> 2 >>> 0] + 1900, I[a + 16 >>> 2 >>> 0], I[a + 12 >>> 2 >>> 0], I[a + 8 >>> 2 >>> 0], I[a + 4 >>> 2 >>> 0], I[a >>> 2 >>> 0], 0), c = I[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), g = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), h = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), m = Math.min(h, g);\n            0 > c ? I[a + 32 >>> 2 >>> 0] = Number(g != h && m == d) : 0 < c != (m == d) && (g = Math.max(h, g), b.setTime(b.getTime() + 6e4 * ((0 < c ? m : g) - d)));\n            I[a + 24 >>> 2 >>> 0] = b.getDay();\n            I[a + 28 >>> 2 >>> 0] = (U(b.getFullYear()) ? wa : xa)[b.getMonth()] + b.getDate() - 1 | 0;\n            I[a >>> 2 >>> 0] = b.getSeconds();\n            I[a + 4 >>> 2 >>> 0] = b.getMinutes();\n            I[a + 8 >>> 2 >>> 0] = b.getHours();\n            I[a + 12 >>> 2 >>> 0] = b.getDate();\n            I[a + 16 >>> 2 >>> 0] = b.getMonth();\n            I[a + 20 >>> 2 >>> 0] = b.getYear();\n            a = b.getTime();\n            isNaN(a) ? (I[Ja() >>> 2 >>> 0] = 61, a = -1) : a /= 1e3;\n            return Ka((Q = a, 1 <= +Math.abs(Q) ? 0 < Q ? +Math.floor(Q / 4294967296) >>> 0 : ~~+Math.ceil((Q - +(~~Q >>> 0)) / 4294967296) >>> 0 : 0)), a >>> 0;\n          }, l: function() {\n            return -52;\n          }, m: function() {\n          }, t: function(a, b, c) {\n            function d(w) {\n              return (w = w.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? w[1] : "GMT";\n            }\n            c >>>= 0;\n            var g = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(g, 0, 1), m = new Date(g, 6, 1);\n            g = h.getTimezoneOffset();\n            var r = m.getTimezoneOffset();\n            J[a >>> 0 >>> 2 >>> 0] = 60 * Math.max(g, r);\n            I[b >>> 0 >>> 2 >>> 0] = Number(g != r);\n            a = d(h);\n            b = d(m);\n            a = Ca(a);\n            b = Ca(b);\n            r < g ? (J[c >>> 2 >>> 0] = a, J[c + 4 >>> 2 >>> 0] = b) : (J[c >>> 2 >>> 0] = b, J[c + 4 >>> 2 >>> 0] = a);\n          }, d: () => {\n            E("");\n          }, B: function(a, b, c) {\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            V.length = 0;\n            for (var d; d = H[b++ >>> 0]; ) {\n              var g = 105 != d;\n              g &= 112 != d;\n              c += g && c % 8 ? 4 : 0;\n              V.push(112 == d ? J[c >>> 2 >>> 0] : 105 == d ? I[c >>> 2 >>> 0] : ha[c >>> 3 >>> 0]);\n              c += g ? 8 : 4;\n            }\n            return qa[a].apply(null, V);\n          }, h: () => Date.now(), u: function() {\n            return 4294901760;\n          }, b: () => performance.now(), I: function(a, b, c) {\n            b >>>= 0;\n            return H.copyWithin(a >>> 0 >>> 0, b >>> 0, b + (c >>> 0) >>> 0);\n          }, s: function(a) {\n            a >>>= 0;\n            var b = H.length;\n            if (4294901760 < a)\n              return false;\n            for (var c = 1; 4 >= c; c *= 2) {\n              var d = b * (1 + 0.2 / c);\n              d = Math.min(d, a + 100663296);\n              var g = Math;\n              d = Math.max(a, d);\n              a: {\n                g = (g.min.call(g, 4294901760, d + (65536 - d % 65536) % 65536) - F.buffer.byteLength + 65535) / 65536;\n                try {\n                  F.grow(g);\n                  ia();\n                  var h = 1;\n                  break a;\n                } catch (m) {\n                }\n                h = void 0;\n              }\n              if (h)\n                return true;\n            }\n            return false;\n          }, C: function(a, b) {\n            a >>>= 0;\n            b >>>= 0;\n            var c = 0;\n            Da().forEach((d, g) => {\n              var h = b + c;\n              g = J[a + 4 * g >>> 2 >>> 0] = h;\n              for (h = 0; h < d.length; ++h)\n                G[g++ >>> 0 >>> 0] = d.charCodeAt(h);\n              G[g >>> 0 >>> 0] = 0;\n              c += d.length + 1;\n            });\n            return 0;\n          }, D: function(a, b) {\n            a >>>= 0;\n            b >>>= 0;\n            var c = Da();\n            J[a >>> 2 >>> 0] = c.length;\n            var d = 0;\n            c.forEach((g) => d += g.length + 1);\n            J[b >>> 2 >>> 0] = d;\n            return 0;\n          }, f: () => 52, j: function() {\n            return 52;\n          }, q: function() {\n            return 70;\n          }, i: function(a, b, c, d) {\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            for (var g = 0, h = 0; h < c; h++) {\n              var m = J[b >>> 2 >>> 0], r = J[b + 4 >>> 2 >>> 0];\n              b += 8;\n              for (var w = 0; w < r; w++) {\n                var t = H[m + w >>> 0], u = Ea[a];\n                0 === t || 10 === t ? ((1 === a ? ea : D)(va(u, 0)), u.length = 0) : u.push(t);\n              }\n              g += r;\n            }\n            J[d >>> 2 >>> 0] = g;\n            return 0;\n          }, r: Ia, c: function(a, b, c, d) {\n            return Ia(a >>> 0, b >>> 0, c >>> 0, d >>> 0);\n          } }, Y = function() {\n            function a(c) {\n              Y = c.exports;\n              Y = Ma();\n              F = Y.K;\n              ia();\n              L.unshift(Y.L);\n              M--;\n              0 == M && (null !== N && (clearInterval(N), N = null), O && (c = O, O = null, c()));\n              return Y;\n            }\n            var b = { a: La };\n            M++;\n            if (e.instantiateWasm)\n              try {\n                return e.instantiateWasm(b, a);\n              } catch (c) {\n                D(`Module.instantiateWasm callback failed with error: ${c}`), l(c);\n              }\n            pa(b, function(c) {\n              a(c.instance);\n            }).catch(l);\n            return {};\n          }();\n          e._OrtInit = (a, b) => (e._OrtInit = Y.M)(a, b);\n          e._OrtGetLastError = (a, b) => (e._OrtGetLastError = Y.N)(a, b);\n          e._OrtCreateSessionOptions = (a, b, c, d, g, h, m, r, w, t) => (e._OrtCreateSessionOptions = Y.O)(a, b, c, d, g, h, m, r, w, t);\n          e._OrtAppendExecutionProvider = (a, b) => (e._OrtAppendExecutionProvider = Y.P)(a, b);\n          e._OrtAddFreeDimensionOverride = (a, b, c) => (e._OrtAddFreeDimensionOverride = Y.Q)(a, b, c);\n          e._OrtAddSessionConfigEntry = (a, b, c) => (e._OrtAddSessionConfigEntry = Y.R)(a, b, c);\n          e._OrtReleaseSessionOptions = (a) => (e._OrtReleaseSessionOptions = Y.S)(a);\n          e._OrtCreateSession = (a, b, c) => (e._OrtCreateSession = Y.T)(a, b, c);\n          e._OrtReleaseSession = (a) => (e._OrtReleaseSession = Y.U)(a);\n          e._OrtGetInputOutputCount = (a, b, c) => (e._OrtGetInputOutputCount = Y.V)(a, b, c);\n          e._OrtGetInputName = (a, b) => (e._OrtGetInputName = Y.W)(a, b);\n          e._OrtGetOutputName = (a, b) => (e._OrtGetOutputName = Y.X)(a, b);\n          e._OrtFree = (a) => (e._OrtFree = Y.Y)(a);\n          e._OrtCreateTensor = (a, b, c, d, g, h) => (e._OrtCreateTensor = Y.Z)(a, b, c, d, g, h);\n          e._OrtGetTensorData = (a, b, c, d, g) => (e._OrtGetTensorData = Y._)(a, b, c, d, g);\n          e._OrtReleaseTensor = (a) => (e._OrtReleaseTensor = Y.$)(a);\n          e._OrtCreateRunOptions = (a, b, c, d) => (e._OrtCreateRunOptions = Y.aa)(a, b, c, d);\n          e._OrtAddRunConfigEntry = (a, b, c) => (e._OrtAddRunConfigEntry = Y.ba)(a, b, c);\n          e._OrtReleaseRunOptions = (a) => (e._OrtReleaseRunOptions = Y.ca)(a);\n          e._OrtCreateBinding = (a) => (e._OrtCreateBinding = Y.da)(a);\n          e._OrtBindInput = (a, b, c) => (e._OrtBindInput = Y.ea)(a, b, c);\n          e._OrtBindOutput = (a, b, c, d) => (e._OrtBindOutput = Y.fa)(a, b, c, d);\n          e._OrtClearBoundOutputs = (a) => (e._OrtClearBoundOutputs = Y.ga)(a);\n          e._OrtReleaseBinding = (a) => (e._OrtReleaseBinding = Y.ha)(a);\n          e._OrtRunWithBinding = (a, b, c, d, g) => (e._OrtRunWithBinding = Y.ia)(a, b, c, d, g);\n          e._OrtRun = (a, b, c, d, g, h, m, r) => (e._OrtRun = Y.ja)(a, b, c, d, g, h, m, r);\n          e._OrtEndProfiling = (a) => (e._OrtEndProfiling = Y.ka)(a);\n          e._OrtTrainingLoadCheckpoint = (a, b) => (e._OrtTrainingLoadCheckpoint = Y.la)(a, b);\n          e._OrtTrainingReleaseCheckpoint = (a) => (e._OrtTrainingReleaseCheckpoint = Y.ma)(a);\n          e._OrtTrainingCreateSession = (a, b, c, d, g, h, m, r) => (e._OrtTrainingCreateSession = Y.na)(a, b, c, d, g, h, m, r);\n          e._OrtTrainingLazyResetGrad = (a) => (e._OrtTrainingLazyResetGrad = Y.oa)(a);\n          e._OrtTrainingRunTrainStep = (a, b, c, d, g, h) => (e._OrtTrainingRunTrainStep = Y.pa)(a, b, c, d, g, h);\n          e._OrtTrainingOptimizerStep = (a, b) => (e._OrtTrainingOptimizerStep = Y.qa)(a, b);\n          e._OrtTrainingEvalStep = (a, b, c, d, g, h) => (e._OrtTrainingEvalStep = Y.ra)(a, b, c, d, g, h);\n          e._OrtTrainingGetParametersSize = (a, b, c) => (e._OrtTrainingGetParametersSize = Y.sa)(a, b, c);\n          e._OrtTrainingCopyParametersToBuffer = (a, b, c, d) => (e._OrtTrainingCopyParametersToBuffer = Y.ta)(a, b, c, d);\n          e._OrtTrainingCopyParametersFromBuffer = (a, b, c, d) => (e._OrtTrainingCopyParametersFromBuffer = Y.ua)(a, b, c, d);\n          e._OrtTrainingGetModelInputOutputCount = (a, b, c, d) => (e._OrtTrainingGetModelInputOutputCount = Y.va)(a, b, c, d);\n          e._OrtTrainingGetModelInputOutputName = (a, b, c, d) => (e._OrtTrainingGetModelInputOutputName = Y.wa)(a, b, c, d);\n          e._OrtTrainingReleaseSession = (a) => (e._OrtTrainingReleaseSession = Y.xa)(a);\n          var Ja = () => (Ja = Y.ya)(), Ba = e._malloc = (a) => (Ba = e._malloc = Y.za)(a);\n          e._free = (a) => (e._free = Y.Aa)(a);\n          var Ka = (a) => (Ka = Y.Ca)(a), Na = () => (Na = Y.Da)(), Oa = (a) => (Oa = Y.Ea)(a), Pa = (a) => (Pa = Y.Fa)(a);\n          function Ma() {\n            var a = Y;\n            a = Object.assign({}, a);\n            var b = (d) => () => d() >>> 0, c = (d) => (g) => d(g) >>> 0;\n            a.ya = b(a.ya);\n            a.za = c(a.za);\n            a.Da = b(a.Da);\n            a.Fa = c(a.Fa);\n            return a;\n          }\n          e.stackAlloc = Pa;\n          e.stackSave = Na;\n          e.stackRestore = Oa;\n          e.UTF8ToString = R;\n          e.stringToUTF8 = (a, b, c) => T(a, H, b, c);\n          e.lengthBytesUTF8 = S;\n          var Z;\n          O = function Qa() {\n            Z || Ra();\n            Z || (O = Qa);\n          };\n          function Ra() {\n            if (!(0 < M)) {\n              if (e.preRun)\n                for ("function" == typeof e.preRun && (e.preRun = [e.preRun]); e.preRun.length; ) {\n                  var a = e.preRun.shift();\n                  K.unshift(a);\n                }\n              for (; 0 < K.length; )\n                K.shift()(e);\n              if (!(0 < M || Z || (Z = true, e.calledRun = true, fa))) {\n                for (; 0 < L.length; )\n                  L.shift()(e);\n                for (k(e); 0 < ja.length; )\n                  ja.shift()(e);\n              }\n            }\n          }\n          Ra();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasm;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasm);\n    }\n  });\n\n  // nodejs-ignore:worker_threads\n  var require_worker_threads = __commonJS({\n    "nodejs-ignore:worker_threads"() {\n    }\n  });\n\n  // nodejs-ignore:perf_hooks\n  var require_perf_hooks = __commonJS({\n    "nodejs-ignore:perf_hooks"() {\n    }\n  });\n\n  // nodejs-ignore:os\n  var os_exports = {};\n  __export(os_exports, {\n    cpus: () => cpus\n  });\n  var cpus;\n  var init_os = __esm({\n    "nodejs-ignore:os"() {\n      cpus = void 0;\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.js\n  var require_ort_wasm_threaded = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.js"(exports, module) {\n      "use strict";\n      var ortWasmThreaded = (() => {\n        var _scriptDir = typeof document !== "undefined" && document.currentScript ? document.currentScript.src : void 0;\n        if (typeof __filename !== "undefined")\n          _scriptDir = _scriptDir || __filename;\n        return function(moduleArg = {}) {\n          function g() {\n            m.buffer != p.buffer && q();\n            return p;\n          }\n          function t() {\n            m.buffer != p.buffer && q();\n            return aa;\n          }\n          function ba() {\n            m.buffer != p.buffer && q();\n            return ca;\n          }\n          function da() {\n            m.buffer != p.buffer && q();\n            return ea;\n          }\n          function v() {\n            m.buffer != p.buffer && q();\n            return fa;\n          }\n          function w() {\n            m.buffer != p.buffer && q();\n            return ha;\n          }\n          function ia() {\n            m.buffer != p.buffer && q();\n            return ja;\n          }\n          var z = moduleArg, ka, la;\n          z.ready = new Promise((a, b) => {\n            ka = a;\n            la = b;\n          });\n          var ma = Object.assign({}, z), na = "./this.program", oa = (a, b) => {\n            throw b;\n          }, pa = "object" == typeof window, A = "function" == typeof importScripts, B = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, D = z.ENVIRONMENT_IS_PTHREAD || false, E = "";\n          function qa(a) {\n            return z.locateFile ? z.locateFile(a, E) : E + a;\n          }\n          var ra, sa, ta;\n          if (B) {\n            var fs = (init_fs(), __toCommonJS(fs_exports)), ua = (init_path(), __toCommonJS(path_exports));\n            E = A ? ua.dirname(E) + "/" : __dirname + "/";\n            ra = (b, c) => {\n              b = va(b) ? new URL(b) : ua.normalize(b);\n              return fs.readFileSync(b, c ? void 0 : "utf8");\n            };\n            ta = (b) => {\n              b = ra(b, true);\n              b.buffer || (b = new Uint8Array(b));\n              return b;\n            };\n            sa = (b, c, d, e = true) => {\n              b = va(b) ? new URL(b) : ua.normalize(b);\n              fs.readFile(b, e ? void 0 : "utf8", (f, k) => {\n                f ? d(f) : c(e ? k.buffer : k);\n              });\n            };\n            !z.thisProgram && 1 < process.argv.length && (na = process.argv[1].replace(/\\\\/g, "/"));\n            process.argv.slice(2);\n            oa = (b, c) => {\n              process.exitCode = b;\n              throw c;\n            };\n            z.inspect = () => "[Emscripten Module object]";\n            let a;\n            try {\n              a = require_worker_threads();\n            } catch (b) {\n              throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'), b;\n            }\n            global.Worker = a.Worker;\n          } else if (pa || A)\n            A ? E = self.location.href : "undefined" != typeof document && document.currentScript && (E = document.currentScript.src), typeof _scriptDir !== "undefined" && _scriptDir && (E = _scriptDir), 0 !== E.indexOf("blob:") ? E = E.substr(0, E.replace(/[?#].*/, "").lastIndexOf("/") + 1) : E = "", B || (ra = (a) => {\n              var b = new XMLHttpRequest();\n              b.open(\n                "GET",\n                a,\n                false\n              );\n              b.send(null);\n              return b.responseText;\n            }, A && (ta = (a) => {\n              var b = new XMLHttpRequest();\n              b.open("GET", a, false);\n              b.responseType = "arraybuffer";\n              b.send(null);\n              return new Uint8Array(b.response);\n            }), sa = (a, b, c) => {\n              var d = new XMLHttpRequest();\n              d.open("GET", a, true);\n              d.responseType = "arraybuffer";\n              d.onload = () => {\n                200 == d.status || 0 == d.status && d.response ? b(d.response) : c();\n              };\n              d.onerror = c;\n              d.send(null);\n            });\n          B && "undefined" == typeof performance && (global.performance = require_perf_hooks().performance);\n          var wa = console.log.bind(console), xa = console.error.bind(console);\n          B && (wa = (...a) => fs.writeSync(1, a.join(" ") + "\\n"), xa = (...a) => fs.writeSync(2, a.join(" ") + "\\n"));\n          var ya = wa, F = xa;\n          Object.assign(z, ma);\n          ma = null;\n          "object" != typeof WebAssembly && za("no native wasm support detected");\n          var m, Aa, Ba = false, G, p, aa, ca, ea, fa, ha, Ca, H, Da, ja;\n          function q() {\n            var a = m.buffer;\n            z.HEAP8 = p = new Int8Array(a);\n            z.HEAP16 = ca = new Int16Array(a);\n            z.HEAPU8 = aa = new Uint8Array(a);\n            z.HEAPU16 = ea = new Uint16Array(a);\n            z.HEAP32 = fa = new Int32Array(a);\n            z.HEAPU32 = ha = new Uint32Array(a);\n            z.HEAPF32 = Ca = new Float32Array(a);\n            z.HEAPF64 = ja = new Float64Array(a);\n            z.HEAP64 = H = new BigInt64Array(a);\n            z.HEAPU64 = Da = new BigUint64Array(a);\n          }\n          var Ea = 16777216;\n          if (D)\n            m = z.wasmMemory;\n          else if (z.wasmMemory)\n            m = z.wasmMemory;\n          else if (m = new WebAssembly.Memory({ initial: Ea / 65536, maximum: 65536, shared: true }), !(m.buffer instanceof SharedArrayBuffer))\n            throw F("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), B && F("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory");\n          q();\n          Ea = m.buffer.byteLength;\n          var Fa = [], Ga = [], Ha = [], I = 0, Ia = null, J = null;\n          function Ja() {\n            I--;\n            if (0 == I && (null !== Ia && (clearInterval(Ia), Ia = null), J)) {\n              var a = J;\n              J = null;\n              a();\n            }\n          }\n          function za(a) {\n            a = "Aborted(" + a + ")";\n            F(a);\n            Ba = true;\n            G = 1;\n            a = new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");\n            la(a);\n            throw a;\n          }\n          var Ka = (a) => a.startsWith("data:application/octet-stream;base64,"), va = (a) => a.startsWith("file://"), K;\n          K = "ort-wasm-threaded.wasm";\n          Ka(K) || (K = qa(K));\n          function La(a) {\n            if (ta)\n              return ta(a);\n            throw "both async and sync fetching of the wasm failed";\n          }\n          function Ma(a) {\n            if (pa || A) {\n              if ("function" == typeof fetch && !va(a))\n                return fetch(a, { credentials: "same-origin" }).then((b) => {\n                  if (!b.ok)\n                    throw "failed to load wasm binary file at \'" + a + "\'";\n                  return b.arrayBuffer();\n                }).catch(() => La(a));\n              if (sa)\n                return new Promise((b, c) => {\n                  sa(a, (d) => b(new Uint8Array(d)), c);\n                });\n            }\n            return Promise.resolve().then(() => La(a));\n          }\n          function Na(a, b, c) {\n            return Ma(a).then((d) => WebAssembly.instantiate(d, b)).then((d) => d).then(c, (d) => {\n              F(`failed to asynchronously prepare wasm: ${d}`);\n              za(d);\n            });\n          }\n          function Oa(a, b) {\n            var c = K;\n            return "function" != typeof WebAssembly.instantiateStreaming || Ka(c) || va(c) || B || "function" != typeof fetch ? Na(c, a, b) : fetch(c, { credentials: "same-origin" }).then((d) => WebAssembly.instantiateStreaming(d, a).then(b, function(e) {\n              F(`wasm streaming compile failed: ${e}`);\n              F("falling back to ArrayBuffer instantiation");\n              return Na(c, a, b);\n            }));\n          }\n          var Pa = { 891868: (a, b, c, d) => {\n            if ("undefined" == typeof z || !z.Hb)\n              return 1;\n            a = L(a >>> 0);\n            a.startsWith("./") && (a = a.substring(2));\n            a = z.Hb.get(a);\n            if (!a)\n              return 2;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            if (b + c > a.byteLength)\n              return 3;\n            try {\n              return t().set(a.subarray(b, b + c), d >>> 0), 0;\n            } catch {\n              return 4;\n            }\n          } };\n          function Qa(a) {\n            this.name = "ExitStatus";\n            this.message = `Program terminated with exit(${a})`;\n            this.status = a;\n          }\n          var Ra = (a) => {\n            a.terminate();\n            a.onmessage = () => {\n            };\n          }, Ta = (a) => {\n            0 == M.ob.length && (Sa(), M.Bb(M.ob[0]));\n            var b = M.ob.pop();\n            if (!b)\n              return 6;\n            M.pb.push(b);\n            M.kb[a.nb] = b;\n            b.nb = a.nb;\n            var c = { cmd: "run", start_routine: a.Ob, arg: a.Ib, pthread_ptr: a.nb };\n            B && b.unref();\n            b.postMessage(c, a.Ub);\n            return 0;\n          }, O = 0, Ua = "undefined" != typeof TextDecoder ? new TextDecoder("utf8") : void 0, Va = (a, b, c) => {\n            b >>>= 0;\n            var d = b + c;\n            for (c = b; a[c] && !(c >= d); )\n              ++c;\n            if (16 < c - b && a.buffer && Ua)\n              return Ua.decode(a.buffer instanceof SharedArrayBuffer ? a.slice(b, c) : a.subarray(b, c));\n            for (d = ""; b < c; ) {\n              var e = a[b++];\n              if (e & 128) {\n                var f = a[b++] & 63;\n                if (192 == (e & 224))\n                  d += String.fromCharCode((e & 31) << 6 | f);\n                else {\n                  var k = a[b++] & 63;\n                  e = 224 == (e & 240) ? (e & 15) << 12 | f << 6 | k : (e & 7) << 18 | f << 12 | k << 6 | a[b++] & 63;\n                  65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));\n                }\n              } else\n                d += String.fromCharCode(e);\n            }\n            return d;\n          }, L = (a, b) => (a >>>= 0) ? Va(t(), a, b) : "", Ya = (a) => {\n            var b = Wa();\n            a = a();\n            Xa(b);\n            return a;\n          };\n          function P(a, b) {\n            var c = arguments.length - 2, d = arguments;\n            return Ya(() => {\n              for (var e = 2 * c, f = Za(8 * e), k = f >>> 3, l = 0; l < c; l++) {\n                var r = d[2 + l];\n                "bigint" == typeof r ? (H[k + 2 * l] = 1n, H[k + 2 * l + 1] = r) : (H[k + 2 * l] = 0n, ia()[k + 2 * l + 1 >>> 0] = r);\n              }\n              return $a(a, e, f, b);\n            });\n          }\n          function ab(a) {\n            if (D)\n              return P(0, 1, a);\n            G = a;\n            0 < O || (M.Pb(), z.onExit?.(a), Ba = true);\n            oa(a, new Qa(a));\n          }\n          var cb = (a) => {\n            G = a;\n            if (D)\n              throw bb(a), "unwind";\n            ab(a);\n          };\n          function db() {\n            for (var a = z.numThreads; a--; )\n              Sa();\n            Fa.unshift(() => {\n              I++;\n              eb(() => Ja());\n            });\n          }\n          function Sa() {\n            var a = qa("ort-wasm-threaded.worker.js");\n            a = new Worker(a);\n            M.ob.push(a);\n          }\n          function eb(a) {\n            D ? a() : Promise.all(M.ob.map(M.Bb)).then(a);\n          }\n          var M = { ob: [], pb: [], Gb: [], kb: {}, wb() {\n            D ? (M.receiveObjectTransfer = M.Nb, M.threadInitTLS = M.Fb, M.setExitStatus = M.Eb) : db();\n          }, Eb: (a) => G = a, Xb: ["$terminateWorker"], Pb: () => {\n            for (var a of M.pb)\n              Ra(a);\n            for (a of M.ob)\n              Ra(a);\n            M.ob = [];\n            M.pb = [];\n            M.kb = [];\n          }, Db: (a) => {\n            var b = a.nb;\n            delete M.kb[b];\n            M.ob.push(a);\n            M.pb.splice(M.pb.indexOf(a), 1);\n            a.nb = 0;\n            fb(b);\n          }, Nb() {\n          }, Fb() {\n            M.Gb.forEach((a) => a());\n          }, Bb: (a) => new Promise((b) => {\n            a.onmessage = (f) => {\n              f = f.data;\n              var k = f.cmd;\n              if (f.targetThread && f.targetThread != gb()) {\n                var l = M.kb[f.targetThread];\n                l ? l.postMessage(f, f.transferList) : F(`Internal error! Worker sent a message "${k}" to target pthread ${f.targetThread}, but that thread no longer exists!`);\n              } else if ("checkMailbox" === k)\n                hb();\n              else if ("spawnThread" === k)\n                Ta(f);\n              else if ("cleanupThread" === k)\n                M.Db(M.kb[f.thread]);\n              else if ("killThread" === k)\n                f = f.thread, k = M.kb[f], delete M.kb[f], Ra(k), fb(f), M.pb.splice(M.pb.indexOf(k), 1), k.nb = 0;\n              else if ("cancelThread" === k)\n                M.kb[f.thread].postMessage({ cmd: "cancel" });\n              else if ("loaded" === k)\n                a.loaded = true, B && !a.nb && a.unref(), b(a);\n              else if ("alert" === k)\n                alert(`Thread ${f.threadId}: ${f.text}`);\n              else if ("setimmediate" === f.target)\n                a.postMessage(f);\n              else if ("callHandler" === k)\n                z[f.handler](...f.args);\n              else\n                k && F(`worker sent an unknown command ${k}`);\n            };\n            a.onerror = (f) => {\n              F(`${"worker sent an error!"} ${f.filename}:${f.lineno}: ${f.message}`);\n              throw f;\n            };\n            B && (a.on("message", (f) => a.onmessage({ data: f })), a.on("error", (f) => a.onerror(f)));\n            var c = [], d = ["onExit"], e;\n            for (e of d)\n              z.hasOwnProperty(e) && c.push(e);\n            a.postMessage({ cmd: "load", handlers: c, urlOrBlob: z.mainScriptUrlOrBlob || _scriptDir, wasmMemory: m, wasmModule: Aa });\n          }) };\n          z.PThread = M;\n          var ib = (a) => {\n            for (; 0 < a.length; )\n              a.shift()(z);\n          };\n          z.establishStackSpace = () => {\n            var a = gb(), b = w()[a + 52 >>> 2 >>> 0];\n            a = w()[a + 56 >>> 2 >>> 0];\n            jb(b, b - a);\n            Xa(b);\n          };\n          function bb(a) {\n            if (D)\n              return P(1, 0, a);\n            cb(a);\n          }\n          var kb = [], lb;\n          z.invokeEntryPoint = (a, b) => {\n            var c = kb[a];\n            c || (a >= kb.length && (kb.length = a + 1), kb[a] = c = lb.get(a));\n            a = c(b);\n            0 < O ? M.Eb(a) : mb(a);\n          };\n          function nb(a) {\n            this.tb = a - 24;\n            this.Mb = function(b) {\n              w()[this.tb + 4 >>> 2 >>> 0] = b;\n            };\n            this.yb = function(b) {\n              w()[this.tb + 8 >>> 2 >>> 0] = b;\n            };\n            this.wb = function(b, c) {\n              this.xb();\n              this.Mb(b);\n              this.yb(c);\n            };\n            this.xb = function() {\n              w()[this.tb + 16 >>> 2 >>> 0] = 0;\n            };\n          }\n          var ob = 0, pb = 0;\n          function qb(a, b, c, d) {\n            return D ? P(2, 1, a, b, c, d) : rb(a, b, c, d);\n          }\n          function rb(a, b, c, d) {\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            if ("undefined" == typeof SharedArrayBuffer)\n              return F("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;\n            var e = [];\n            if (D && 0 === e.length)\n              return qb(a, b, c, d);\n            a = { Ob: c, nb: a, Ib: d, Ub: e };\n            return D ? (a.Wb = "spawnThread", postMessage(a, e), 0) : Ta(a);\n          }\n          function sb(a, b, c) {\n            return D ? P(3, 1, a, b, c) : 0;\n          }\n          function tb(a, b) {\n            if (D)\n              return P(4, 1, a, b);\n          }\n          var ub = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;\n            }\n            return b;\n          }, vb = (a, b, c, d) => {\n            c >>>= 0;\n            if (!(0 < d))\n              return 0;\n            var e = c;\n            d = c + d - 1;\n            for (var f = 0; f < a.length; ++f) {\n              var k = a.charCodeAt(f);\n              if (55296 <= k && 57343 >= k) {\n                var l = a.charCodeAt(++f);\n                k = 65536 + ((k & 1023) << 10) | l & 1023;\n              }\n              if (127 >= k) {\n                if (c >= d)\n                  break;\n                b[c++ >>> 0] = k;\n              } else {\n                if (2047 >= k) {\n                  if (c + 1 >= d)\n                    break;\n                  b[c++ >>> 0] = 192 | k >> 6;\n                } else {\n                  if (65535 >= k) {\n                    if (c + 2 >= d)\n                      break;\n                    b[c++ >>> 0] = 224 | k >> 12;\n                  } else {\n                    if (c + 3 >= d)\n                      break;\n                    b[c++ >>> 0] = 240 | k >> 18;\n                    b[c++ >>> 0] = 128 | k >> 12 & 63;\n                  }\n                  b[c++ >>> 0] = 128 | k >> 6 & 63;\n                }\n                b[c++ >>> 0] = 128 | k & 63;\n              }\n            }\n            b[c >>> 0] = 0;\n            return c - e;\n          }, wb = (a, b, c) => vb(a, t(), b, c);\n          function xb(a, b) {\n            if (D)\n              return P(5, 1, a, b);\n          }\n          function yb(a, b, c) {\n            if (D)\n              return P(6, 1, a, b, c);\n          }\n          function zb(a, b, c) {\n            return D ? P(7, 1, a, b, c) : 0;\n          }\n          function Ab(a, b) {\n            if (D)\n              return P(8, 1, a, b);\n          }\n          function Bb(a, b, c) {\n            if (D)\n              return P(9, 1, a, b, c);\n          }\n          function Cb(a, b, c, d) {\n            if (D)\n              return P(10, 1, a, b, c, d);\n          }\n          function Db(a, b, c, d) {\n            if (D)\n              return P(11, 1, a, b, c, d);\n          }\n          function Eb(a, b, c, d) {\n            if (D)\n              return P(12, 1, a, b, c, d);\n          }\n          function Fb(a) {\n            if (D)\n              return P(13, 1, a);\n          }\n          function Gb(a, b) {\n            if (D)\n              return P(14, 1, a, b);\n          }\n          function Hb(a, b, c) {\n            if (D)\n              return P(15, 1, a, b, c);\n          }\n          var Ib = (a) => {\n            if (null === a)\n              return "null";\n            var b = typeof a;\n            return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a;\n          }, Jb, R = (a) => {\n            for (var b = ""; t()[a >>> 0]; )\n              b += Jb[t()[a++ >>> 0]];\n            return b;\n          }, Kb = {}, Lb = {}, Mb = {}, S;\n          function Nb(a, b, c = {}) {\n            var d = b.name;\n            if (!a)\n              throw new S(`type "${d}" must have a positive integer typeid pointer`);\n            if (Lb.hasOwnProperty(a)) {\n              if (c.Kb)\n                return;\n              throw new S(`Cannot register type \'${d}\' twice`);\n            }\n            Lb[a] = b;\n            delete Mb[a];\n            Kb.hasOwnProperty(a) && (b = Kb[a], delete Kb[a], b.forEach((e) => e()));\n          }\n          function T(a, b, c = {}) {\n            if (!("argPackAdvance" in b))\n              throw new TypeError("registerType registeredInstance requires argPackAdvance");\n            Nb(a, b, c);\n          }\n          var Ob = (a, b, c) => {\n            switch (b) {\n              case 1:\n                return c ? (d) => g()[d >>> 0 >>> 0] : (d) => t()[d >>> 0 >>> 0];\n              case 2:\n                return c ? (d) => ba()[d >>> 1 >>> 0] : (d) => da()[d >>> 1 >>> 0];\n              case 4:\n                return c ? (d) => v()[d >>> 2 >>> 0] : (d) => w()[d >>> 2 >>> 0];\n              case 8:\n                return c ? (d) => H[d >>> 3] : (d) => Da[d >>> 3];\n              default:\n                throw new TypeError(`invalid integer width (${b}): ${a}`);\n            }\n          };\n          function Pb() {\n            this.mb = [void 0];\n            this.Ab = [];\n          }\n          var U = new Pb();\n          function Qb(a) {\n            a >>>= 0;\n            a >= U.tb && 0 === --U.get(a).Cb && U.yb(a);\n          }\n          var V = (a) => {\n            if (!a)\n              throw new S("Cannot use deleted val. handle = " + a);\n            return U.get(a).value;\n          }, W = (a) => {\n            switch (a) {\n              case void 0:\n                return 1;\n              case null:\n                return 2;\n              case true:\n                return 3;\n              case false:\n                return 4;\n              default:\n                return U.xb({ Cb: 1, value: a });\n            }\n          };\n          function Rb(a) {\n            return this.fromWireType(v()[a >>> 2 >>> 0]);\n          }\n          var Sb = (a, b) => {\n            switch (b) {\n              case 4:\n                return function(c) {\n                  var d = this.fromWireType;\n                  m.buffer != p.buffer && q();\n                  return d.call(this, Ca[c >>> 2 >>> 0]);\n                };\n              case 8:\n                return function(c) {\n                  return this.fromWireType(ia()[c >>> 3 >>> 0]);\n                };\n              default:\n                throw new TypeError(`invalid float width (${b}): ${a}`);\n            }\n          };\n          function Tb(a) {\n            return this.fromWireType(w()[a >>> 2 >>> 0]);\n          }\n          var Ub = "undefined" != typeof TextDecoder ? new TextDecoder("utf-16le") : void 0, Vb = (a, b) => {\n            var c = a >> 1;\n            for (var d = c + b / 2; !(c >= d) && da()[c >>> 0]; )\n              ++c;\n            c <<= 1;\n            if (32 < c - a && Ub)\n              return Ub.decode(t().slice(a, c));\n            c = "";\n            for (d = 0; !(d >= b / 2); ++d) {\n              var e = ba()[a + 2 * d >>> 1 >>> 0];\n              if (0 == e)\n                break;\n              c += String.fromCharCode(e);\n            }\n            return c;\n          }, Wb = (a, b, c) => {\n            c ??= 2147483647;\n            if (2 > c)\n              return 0;\n            c -= 2;\n            var d = b;\n            c = c < 2 * a.length ? c / 2 : a.length;\n            for (var e = 0; e < c; ++e) {\n              var f = a.charCodeAt(e);\n              ba()[b >>> 1 >>> 0] = f;\n              b += 2;\n            }\n            ba()[b >>> 1 >>> 0] = 0;\n            return b - d;\n          }, Xb = (a) => 2 * a.length, Yb = (a, b) => {\n            for (var c = 0, d = ""; !(c >= b / 4); ) {\n              var e = v()[a + 4 * c >>> 2 >>> 0];\n              if (0 == e)\n                break;\n              ++c;\n              65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e);\n            }\n            return d;\n          }, Zb = (a, b, c) => {\n            b >>>= 0;\n            c ??= 2147483647;\n            if (4 > c)\n              return 0;\n            var d = b;\n            c = d + c - 4;\n            for (var e = 0; e < a.length; ++e) {\n              var f = a.charCodeAt(e);\n              if (55296 <= f && 57343 >= f) {\n                var k = a.charCodeAt(++e);\n                f = 65536 + ((f & 1023) << 10) | k & 1023;\n              }\n              v()[b >>> 2 >>> 0] = f;\n              b += 4;\n              if (b + 4 > c)\n                break;\n            }\n            v()[b >>> 2 >>> 0] = 0;\n            return b - d;\n          }, $b = (a) => {\n            for (var b = 0, c = 0; c < a.length; ++c) {\n              var d = a.charCodeAt(c);\n              55296 <= d && 57343 >= d && ++c;\n              b += 4;\n            }\n            return b;\n          };\n          function ac(a) {\n            a >>>= 0;\n            "function" === typeof Atomics.Vb && (Atomics.Vb(v(), a >>> 2, a).value.then(hb), a += 128, Atomics.store(v(), a >>> 2, 1));\n          }\n          z.__emscripten_thread_mailbox_await = ac;\n          var hb = () => {\n            var a = gb();\n            if (a && (ac(a), a = bc, !Ba))\n              try {\n                if (a(), !(0 < O))\n                  try {\n                    D ? mb(G) : cb(G);\n                  } catch (b) {\n                    b instanceof Qa || "unwind" == b || oa(1, b);\n                  }\n              } catch (b) {\n                b instanceof Qa || "unwind" == b || oa(1, b);\n              }\n          };\n          z.checkMailbox = hb;\n          var cc = [], ec = (a, b) => {\n            var c = Lb[a];\n            if (void 0 === c)\n              throw a = dc(a), c = R(a), X(a), new S(b + " has unknown type " + c);\n            return c;\n          }, fc = (a, b, c) => {\n            var d = [];\n            a = a.toWireType(d, c);\n            d.length && (w()[b >>> 2 >>> 0] = W(d));\n            return a;\n          }, gc = [], hc = {}, ic = (a) => {\n            var b = hc[a];\n            return void 0 === b ? R(a) : b;\n          }, jc = () => "object" == typeof globalThis ? globalThis : Function("return this")(), kc = (a) => {\n            var b = gc.length;\n            gc.push(a);\n            return b;\n          }, lc = (a, b) => {\n            for (var c = Array(a), d = 0; d < a; ++d)\n              c[d] = ec(w()[b + 4 * d >>> 2 >>> 0], "parameter " + d);\n            return c;\n          }, nc = (a, b) => Object.defineProperty(\n            b,\n            "name",\n            { value: a }\n          );\n          function oc(a) {\n            var b = Function;\n            if (!(b instanceof Function))\n              throw new TypeError(`new_ called with constructor type ${typeof b} which is not a function`);\n            var c = nc(b.name || "unknownFunctionName", function() {\n            });\n            c.prototype = b.prototype;\n            c = new c();\n            a = b.apply(c, a);\n            return a instanceof Object ? a : c;\n          }\n          var Y = (a) => 0 === a % 4 && (0 !== a % 100 || 0 === a % 400), pc = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], qc = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n          function rc(a, b, c, d, e, f, k) {\n            return D ? P(16, 1, a, b, c, d, e, f, k) : -52;\n          }\n          function sc(a, b, c, d, e, f) {\n            if (D)\n              return P(17, 1, a, b, c, d, e, f);\n          }\n          var uc = (a) => {\n            var b = ub(a) + 1, c = tc(b);\n            c && wb(a, c, b);\n            return c;\n          }, vc = [], wc = {}, yc = () => {\n            if (!xc) {\n              var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: na || "./this.program" }, b;\n              for (b in wc)\n                void 0 === wc[b] ? delete a[b] : a[b] = wc[b];\n              var c = [];\n              for (b in a)\n                c.push(`${b}=${a[b]}`);\n              xc = c;\n            }\n            return xc;\n          }, xc;\n          function zc(a, b) {\n            if (D)\n              return P(18, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = 0;\n            yc().forEach((d, e) => {\n              var f = b + c;\n              e = w()[a + 4 * e >>> 2 >>> 0] = f;\n              for (f = 0; f < d.length; ++f)\n                g()[e++ >>> 0 >>> 0] = d.charCodeAt(f);\n              g()[e >>> 0 >>> 0] = 0;\n              c += d.length + 1;\n            });\n            return 0;\n          }\n          function Ac(a, b) {\n            if (D)\n              return P(19, 1, a, b);\n            a >>>= 0;\n            b >>>= 0;\n            var c = yc();\n            w()[a >>> 2 >>> 0] = c.length;\n            var d = 0;\n            c.forEach((e) => d += e.length + 1);\n            w()[b >>> 2 >>> 0] = d;\n            return 0;\n          }\n          function Bc(a) {\n            return D ? P(20, 1, a) : 52;\n          }\n          function Cc(a, b, c, d) {\n            return D ? P(21, 1, a, b, c, d) : 52;\n          }\n          function Dc(a, b, c, d) {\n            return D ? P(22, 1, a, b, c, d) : 70;\n          }\n          var Ec = [null, [], []];\n          function Fc(a, b, c, d) {\n            if (D)\n              return P(23, 1, a, b, c, d);\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            for (var e = 0, f = 0; f < c; f++) {\n              var k = w()[b >>> 2 >>> 0], l = w()[b + 4 >>> 2 >>> 0];\n              b += 8;\n              for (var r = 0; r < l; r++) {\n                var n = t()[k + r >>> 0], x = Ec[a];\n                0 === n || 10 === n ? ((1 === a ? ya : F)(Va(x, 0)), x.length = 0) : x.push(n);\n              }\n              e += l;\n            }\n            w()[d >>> 2 >>> 0] = e;\n            return 0;\n          }\n          var Gc = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], Hc = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n          function Ic(a) {\n            var b = Array(ub(a) + 1);\n            vb(a, b, 0, b.length);\n            return b;\n          }\n          var Jc = (a, b) => {\n            g().set(a, b >>> 0);\n          };\n          function Kc(a, b, c, d) {\n            function e(h, u, y) {\n              for (h = "number" == typeof h ? h.toString() : h || ""; h.length < u; )\n                h = y[0] + h;\n              return h;\n            }\n            function f(h, u) {\n              return e(h, u, "0");\n            }\n            function k(h, u) {\n              function y(mc) {\n                return 0 > mc ? -1 : 0 < mc ? 1 : 0;\n              }\n              var Q;\n              0 === (Q = y(h.getFullYear() - u.getFullYear())) && 0 === (Q = y(h.getMonth() - u.getMonth())) && (Q = y(h.getDate() - u.getDate()));\n              return Q;\n            }\n            function l(h) {\n              switch (h.getDay()) {\n                case 0:\n                  return new Date(h.getFullYear() - 1, 11, 29);\n                case 1:\n                  return h;\n                case 2:\n                  return new Date(h.getFullYear(), 0, 3);\n                case 3:\n                  return new Date(\n                    h.getFullYear(),\n                    0,\n                    2\n                  );\n                case 4:\n                  return new Date(h.getFullYear(), 0, 1);\n                case 5:\n                  return new Date(h.getFullYear() - 1, 11, 31);\n                case 6:\n                  return new Date(h.getFullYear() - 1, 11, 30);\n              }\n            }\n            function r(h) {\n              var u = h.qb;\n              for (h = new Date(new Date(h.rb + 1900, 0, 1).getTime()); 0 < u; ) {\n                var y = h.getMonth(), Q = (Y(h.getFullYear()) ? Gc : Hc)[y];\n                if (u > Q - h.getDate())\n                  u -= Q - h.getDate() + 1, h.setDate(1), 11 > y ? h.setMonth(y + 1) : (h.setMonth(0), h.setFullYear(h.getFullYear() + 1));\n                else {\n                  h.setDate(h.getDate() + u);\n                  break;\n                }\n              }\n              y = new Date(h.getFullYear() + 1, 0, 4);\n              u = l(new Date(\n                h.getFullYear(),\n                0,\n                4\n              ));\n              y = l(y);\n              return 0 >= k(u, h) ? 0 >= k(y, h) ? h.getFullYear() + 1 : h.getFullYear() : h.getFullYear() - 1;\n            }\n            a >>>= 0;\n            b >>>= 0;\n            c >>>= 0;\n            d >>>= 0;\n            var n = w()[d + 40 >>> 2 >>> 0];\n            d = { Sb: v()[d >>> 2 >>> 0], Rb: v()[d + 4 >>> 2 >>> 0], ub: v()[d + 8 >>> 2 >>> 0], zb: v()[d + 12 >>> 2 >>> 0], vb: v()[d + 16 >>> 2 >>> 0], rb: v()[d + 20 >>> 2 >>> 0], lb: v()[d + 24 >>> 2 >>> 0], qb: v()[d + 28 >>> 2 >>> 0], Yb: v()[d + 32 >>> 2 >>> 0], Qb: v()[d + 36 >>> 2 >>> 0], Tb: n ? L(n) : "" };\n            c = L(c);\n            n = {\n              "%c": "%a %b %d %H:%M:%S %Y",\n              "%D": "%m/%d/%y",\n              "%F": "%Y-%m-%d",\n              "%h": "%b",\n              "%r": "%I:%M:%S %p",\n              "%R": "%H:%M",\n              "%T": "%H:%M:%S",\n              "%x": "%m/%d/%y",\n              "%X": "%H:%M:%S",\n              "%Ec": "%c",\n              "%EC": "%C",\n              "%Ex": "%m/%d/%y",\n              "%EX": "%H:%M:%S",\n              "%Ey": "%y",\n              "%EY": "%Y",\n              "%Od": "%d",\n              "%Oe": "%e",\n              "%OH": "%H",\n              "%OI": "%I",\n              "%Om": "%m",\n              "%OM": "%M",\n              "%OS": "%S",\n              "%Ou": "%u",\n              "%OU": "%U",\n              "%OV": "%V",\n              "%Ow": "%w",\n              "%OW": "%W",\n              "%Oy": "%y"\n            };\n            for (var x in n)\n              c = c.replace(new RegExp(x, "g"), n[x]);\n            var C = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), N = "January February March April May June July August September October November December".split(" ");\n            n = { "%a": (h) => C[h.lb].substring(0, 3), "%A": (h) => C[h.lb], "%b": (h) => N[h.vb].substring(0, 3), "%B": (h) => N[h.vb], "%C": (h) => f((h.rb + 1900) / 100 | 0, 2), "%d": (h) => f(h.zb, 2), "%e": (h) => e(h.zb, 2, " "), "%g": (h) => r(h).toString().substring(2), "%G": (h) => r(h), "%H": (h) => f(h.ub, 2), "%I": (h) => {\n              h = h.ub;\n              0 == h ? h = 12 : 12 < h && (h -= 12);\n              return f(h, 2);\n            }, "%j": (h) => {\n              for (var u = 0, y = 0; y <= h.vb - 1; u += (Y(h.rb + 1900) ? Gc : Hc)[y++])\n                ;\n              return f(h.zb + u, 3);\n            }, "%m": (h) => f(h.vb + 1, 2), "%M": (h) => f(h.Rb, 2), "%n": () => "\\n", "%p": (h) => 0 <= h.ub && 12 > h.ub ? "AM" : "PM", "%S": (h) => f(h.Sb, 2), "%t": () => "	", "%u": (h) => h.lb || 7, "%U": (h) => f(Math.floor((h.qb + 7 - h.lb) / 7), 2), "%V": (h) => {\n              var u = Math.floor((h.qb + 7 - (h.lb + 6) % 7) / 7);\n              2 >= (h.lb + 371 - h.qb - 2) % 7 && u++;\n              if (u)\n                53 == u && (y = (h.lb + 371 - h.qb) % 7, 4 == y || 3 == y && Y(h.rb) || (u = 1));\n              else {\n                u = 52;\n                var y = (h.lb + 7 - h.qb - 1) % 7;\n                (4 == y || 5 == y && Y(h.rb % 400 - 1)) && u++;\n              }\n              return f(u, 2);\n            }, "%w": (h) => h.lb, "%W": (h) => f(Math.floor((h.qb + 7 - (h.lb + 6) % 7) / 7), 2), "%y": (h) => (h.rb + 1900).toString().substring(2), "%Y": (h) => h.rb + 1900, "%z": (h) => {\n              h = h.Qb;\n              var u = 0 <= h;\n              h = Math.abs(h) / 60;\n              return (u ? "+" : "-") + String("0000" + (h / 60 * 100 + h % 60)).slice(-4);\n            }, "%Z": (h) => h.Tb, "%%": () => "%" };\n            c = c.replace(/%%/g, "\\0\\0");\n            for (x in n)\n              c.includes(x) && (c = c.replace(new RegExp(x, "g"), n[x](d)));\n            c = c.replace(/\\0\\0/g, "%");\n            x = Ic(c);\n            if (x.length > b)\n              return 0;\n            Jc(x, a);\n            return x.length - 1;\n          }\n          M.wb();\n          for (var Lc = Array(256), Mc = 0; 256 > Mc; ++Mc)\n            Lc[Mc] = String.fromCharCode(Mc);\n          Jb = Lc;\n          S = z.BindingError = class extends Error {\n            constructor(a) {\n              super(a);\n              this.name = "BindingError";\n            }\n          };\n          z.InternalError = class extends Error {\n            constructor(a) {\n              super(a);\n              this.name = "InternalError";\n            }\n          };\n          Object.assign(Pb.prototype, { get(a) {\n            return this.mb[a];\n          }, has(a) {\n            return void 0 !== this.mb[a];\n          }, xb(a) {\n            var b = this.Ab.pop() || this.mb.length;\n            this.mb[b] = a;\n            return b;\n          }, yb(a) {\n            this.mb[a] = void 0;\n            this.Ab.push(a);\n          } });\n          U.mb.push({ value: void 0 }, { value: null }, { value: true }, { value: false });\n          U.tb = U.mb.length;\n          z.count_emval_handles = () => {\n            for (var a = 0, b = U.tb; b < U.mb.length; ++b)\n              void 0 !== U.mb[b] && ++a;\n            return a;\n          };\n          var Nc = [ab, bb, qb, sb, tb, xb, yb, zb, Ab, Bb, Cb, Db, Eb, Fb, Gb, Hb, rc, sc, zc, Ac, Bc, Cc, Dc, Fc], Qc = {\n            b: function(a, b, c) {\n              a >>>= 0;\n              new nb(a).wb(b >>> 0, c >>> 0);\n              ob = a;\n              pb++;\n              throw ob;\n            },\n            da: function(a) {\n              Oc(a >>> 0, !A, 1, !pa, 131072, false);\n              M.Fb();\n            },\n            D: function(a) {\n              a >>>= 0;\n              D ? postMessage({ cmd: "cleanupThread", thread: a }) : M.Db(M.kb[a]);\n            },\n            V: rb,\n            x: sb,\n            ka: tb,\n            R: xb,\n            T: yb,\n            K: zb,\n            ia: Ab,\n            aa: Bb,\n            ga: Cb,\n            F: Db,\n            S: Eb,\n            P: Fb,\n            ja: Gb,\n            Q: Hb,\n            I: function(a, b, c, d, e) {\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              b = R(b);\n              var f = -1 != b.indexOf("u");\n              f && (e = (1n << 64n) - 1n);\n              T(a, { name: b, fromWireType: (k) => k, toWireType: function(k, l) {\n                if ("bigint" != typeof l && "number" != typeof l)\n                  throw new TypeError(`Cannot convert "${Ib(l)}" to ${this.name}`);\n                if (l < d || l > e)\n                  throw new TypeError(`Passing a number "${Ib(l)}" from JS side to C/C++ side to an argument of type "${b}", which is outside the valid range [${d}, ${e}]!`);\n                return l;\n              }, argPackAdvance: 8, readValueFromPointer: Ob(b, c, !f), sb: null });\n            },\n            pa: function(a, b, c, d) {\n              a >>>= 0;\n              b = R(b >>> 0);\n              T(a, { name: b, fromWireType: function(e) {\n                return !!e;\n              }, toWireType: function(e, f) {\n                return f ? c : d;\n              }, argPackAdvance: 8, readValueFromPointer: function(e) {\n                return this.fromWireType(t()[e >>> 0]);\n              }, sb: null });\n            },\n            oa: function(a, b) {\n              a >>>= 0;\n              b = R(b >>> 0);\n              T(a, { name: b, fromWireType: (c) => {\n                var d = V(c);\n                Qb(c);\n                return d;\n              }, toWireType: (c, d) => W(d), argPackAdvance: 8, readValueFromPointer: Rb, sb: null });\n            },\n            H: function(a, b, c) {\n              a >>>= 0;\n              c >>>= 0;\n              b = R(b >>> 0);\n              T(a, { name: b, fromWireType: (d) => d, toWireType: (d, e) => e, argPackAdvance: 8, readValueFromPointer: Sb(b, c), sb: null });\n            },\n            u: function(a, b, c, d, e) {\n              a >>>= 0;\n              c >>>= 0;\n              b = R(b >>> 0);\n              -1 === e && (e = 4294967295);\n              e = (l) => l;\n              if (0 === d) {\n                var f = 32 - 8 * c;\n                e = (l) => l << f >>> f;\n              }\n              var k = b.includes("unsigned") ? function(l, r) {\n                return r >>> 0;\n              } : function(l, r) {\n                return r;\n              };\n              T(a, { name: b, fromWireType: e, toWireType: k, argPackAdvance: 8, readValueFromPointer: Ob(b, c, 0 !== d), sb: null });\n            },\n            n: function(a, b, c) {\n              function d(f) {\n                var k = w()[f >>> 2 >>> 0];\n                f = w()[f + 4 >>> 2 >>> 0];\n                return new e(g().buffer, f, k);\n              }\n              a >>>= 0;\n              var e = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array, BigInt64Array, BigUint64Array][b];\n              c = R(c >>> 0);\n              T(a, { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d }, { Kb: true });\n            },\n            J: function(a, b) {\n              a >>>= 0;\n              b = R(b >>> 0);\n              var c = "std::string" === b;\n              T(a, { name: b, fromWireType: function(d) {\n                var e = w()[d >>> 2 >>> 0], f = d + 4;\n                if (c)\n                  for (var k = f, l = 0; l <= e; ++l) {\n                    var r = f + l;\n                    if (l == e || 0 == t()[r >>> 0]) {\n                      k = L(k, r - k);\n                      if (void 0 === n)\n                        var n = k;\n                      else\n                        n += String.fromCharCode(0), n += k;\n                      k = r + 1;\n                    }\n                  }\n                else {\n                  n = Array(e);\n                  for (l = 0; l < e; ++l)\n                    n[l] = String.fromCharCode(t()[f + l >>> 0]);\n                  n = n.join("");\n                }\n                X(d);\n                return n;\n              }, toWireType: function(d, e) {\n                e instanceof ArrayBuffer && (e = new Uint8Array(e));\n                var f = "string" == typeof e;\n                if (!(f || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array))\n                  throw new S("Cannot pass non-string to std::string");\n                var k = c && f ? ub(e) : e.length;\n                var l = tc(4 + k + 1), r = l + 4;\n                w()[l >>> 2 >>> 0] = k;\n                if (c && f)\n                  wb(e, r, k + 1);\n                else if (f)\n                  for (f = 0; f < k; ++f) {\n                    var n = e.charCodeAt(f);\n                    if (255 < n)\n                      throw X(r), new S("String has UTF-16 code units that do not fit in 8 bits");\n                    t()[r + f >>> 0] = n;\n                  }\n                else\n                  for (f = 0; f < k; ++f)\n                    t()[r + f >>> 0] = e[f];\n                null !== d && d.push(X, l);\n                return l;\n              }, argPackAdvance: 8, readValueFromPointer: Tb, sb(d) {\n                X(d);\n              } });\n            },\n            z: function(a, b, c) {\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              c = R(c);\n              if (2 === b) {\n                var d = Vb;\n                var e = Wb;\n                var f = Xb;\n                var k = () => da();\n                var l = 1;\n              } else\n                4 === b && (d = Yb, e = Zb, f = $b, k = () => w(), l = 2);\n              T(a, { name: c, fromWireType: (r) => {\n                for (var n = w()[r >>> 2 >>> 0], x = k(), C, N = r + 4, h = 0; h <= n; ++h) {\n                  var u = r + 4 + h * b;\n                  if (h == n || 0 == x[u >>> l])\n                    N = d(N, u - N), void 0 === C ? C = N : (C += String.fromCharCode(0), C += N), N = u + b;\n                }\n                X(r);\n                return C;\n              }, toWireType: (r, n) => {\n                if ("string" != typeof n)\n                  throw new S(`Cannot pass non-string to C++ string type ${c}`);\n                var x = f(n), C = tc(4 + x + b);\n                w()[C >>> 2] = x >> l;\n                e(n, C + 4, x + b);\n                null !== r && r.push(X, C);\n                return C;\n              }, argPackAdvance: 8, readValueFromPointer: Rb, sb(r) {\n                X(r);\n              } });\n            },\n            qa: function(a, b) {\n              a >>>= 0;\n              b = R(b >>> 0);\n              T(a, {\n                Lb: true,\n                name: b,\n                argPackAdvance: 0,\n                fromWireType: () => {\n                },\n                toWireType: () => {\n                }\n              });\n            },\n            na: () => 1,\n            N: function(a, b) {\n              a >>>= 0;\n              a == b >>> 0 ? setTimeout(() => hb()) : D ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = M.kb[a]) && a.postMessage({ cmd: "checkMailbox" });\n            },\n            W: function(a, b, c, d) {\n              b >>>= 0;\n              c /= 2;\n              cc.length = c;\n              d = d >>> 0 >>> 3;\n              for (var e = 0; e < c; e++)\n                cc[e] = H[d + 2 * e] ? H[d + 2 * e + 1] : ia()[d + 2 * e + 1 >>> 0];\n              a = 0 > a ? Pa[-a - 1] : Nc[a];\n              M.Jb = b;\n              b = a.apply(null, cc);\n              M.Jb = 0;\n              return b;\n            },\n            ca: ac,\n            ma: function(a) {\n              B && M.kb[a >>> 0].ref();\n            },\n            s: function(a, b, c) {\n              b >>>= 0;\n              c >>>= 0;\n              a = V(a >>> 0);\n              b = ec(b, "emval::as");\n              return fc(\n                b,\n                c,\n                a\n              );\n            },\n            o: function(a, b, c, d) {\n              c >>>= 0;\n              d >>>= 0;\n              a = gc[a >>> 0];\n              b = V(b >>> 0);\n              return a(null, b, c, d);\n            },\n            j: function(a, b, c, d, e) {\n              c >>>= 0;\n              d >>>= 0;\n              e >>>= 0;\n              a = gc[a >>> 0];\n              b = V(b >>> 0);\n              c = ic(c);\n              return a(b, b[c], d, e);\n            },\n            c: Qb,\n            A: function(a, b) {\n              b >>>= 0;\n              a = V(a >>> 0);\n              b = V(b);\n              return a == b;\n            },\n            m: function(a) {\n              a >>>= 0;\n              if (0 === a)\n                return W(jc());\n              a = ic(a);\n              return W(jc()[a]);\n            },\n            i: function(a, b, c) {\n              b = lc(a, b >>> 0);\n              var d = b.shift();\n              a--;\n              var e = "return function (obj, func, destructorsRef, args) {\\n", f = 0, k = [];\n              0 === c && k.push("obj");\n              for (var l = ["retType"], r = [d], n = 0; n < a; ++n)\n                k.push("arg" + n), l.push("argType" + n), r.push(b[n]), e += `  var arg${n} = argType${n}.readValueFromPointer(args${f ? "+" + f : ""});\n`, f += b[n].argPackAdvance;\n              e += `  var rv = ${1 === c ? "new func" : "func.call"}(${k.join(", ")});\n`;\n              for (n = 0; n < a; ++n)\n                b[n].deleteObject && (e += `  argType${n}.deleteObject(arg${n});\n`);\n              d.Lb || (l.push("emval_returnValue"), r.push(fc), e += "  return emval_returnValue(retType, destructorsRef, rv);\\n");\n              l.push(e + "};\\n");\n              a = oc(l).apply(null, r);\n              c = `methodCaller<(${b.map((x) => x.name).join(", ")}) => ${d.name}>`;\n              return kc(nc(\n                c,\n                a\n              ));\n            },\n            r: function(a, b) {\n              b >>>= 0;\n              a = V(a >>> 0);\n              b = V(b);\n              return W(a[b]);\n            },\n            d: function(a) {\n              a >>>= 0;\n              4 < a && (U.get(a).Cb += 1);\n            },\n            v: function() {\n              return W([]);\n            },\n            l: function(a) {\n              a = V(a >>> 0);\n              for (var b = Array(a.length), c = 0; c < a.length; c++)\n                b[c] = a[c];\n              return W(b);\n            },\n            f: function(a) {\n              return W(ic(a >>> 0));\n            },\n            k: function() {\n              return W({});\n            },\n            h: function(a) {\n              a >>>= 0;\n              for (var b = V(a); b.length; ) {\n                var c = b.pop();\n                b.pop()(c);\n              }\n              Qb(a);\n            },\n            g: function(a, b, c) {\n              b >>>= 0;\n              c >>>= 0;\n              a = V(a >>> 0);\n              b = V(b);\n              c = V(c);\n              a[b] = c;\n            },\n            e: function(a, b) {\n              b >>>= 0;\n              a = ec(a >>> 0, "_emval_take_value");\n              a = a.readValueFromPointer(b);\n              return W(a);\n            },\n            Z: function(a, b) {\n              a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);\n              b >>>= 0;\n              a = new Date(1e3 * a);\n              v()[b >>> 2 >>> 0] = a.getUTCSeconds();\n              v()[b + 4 >>> 2 >>> 0] = a.getUTCMinutes();\n              v()[b + 8 >>> 2 >>> 0] = a.getUTCHours();\n              v()[b + 12 >>> 2 >>> 0] = a.getUTCDate();\n              v()[b + 16 >>> 2 >>> 0] = a.getUTCMonth();\n              v()[b + 20 >>> 2 >>> 0] = a.getUTCFullYear() - 1900;\n              v()[b + 24 >>> 2 >>> 0] = a.getUTCDay();\n              a = (a.getTime() - Date.UTC(a.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;\n              v()[b + 28 >>> 2 >>> 0] = a;\n            },\n            _: function(a, b) {\n              a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);\n              b >>>= 0;\n              a = new Date(1e3 * a);\n              v()[b >>> 2 >>> 0] = a.getSeconds();\n              v()[b + 4 >>> 2 >>> 0] = a.getMinutes();\n              v()[b + 8 >>> 2 >>> 0] = a.getHours();\n              v()[b + 12 >>> 2 >>> 0] = a.getDate();\n              v()[b + 16 >>> 2 >>> 0] = a.getMonth();\n              v()[b + 20 >>> 2 >>> 0] = a.getFullYear() - 1900;\n              v()[b + 24 >>> 2 >>> 0] = a.getDay();\n              var c = (Y(a.getFullYear()) ? pc : qc)[a.getMonth()] + a.getDate() - 1 | 0;\n              v()[b + 28 >>> 2 >>> 0] = c;\n              v()[b + 36 >>> 2 >>> 0] = -(60 * a.getTimezoneOffset());\n              c = new Date(a.getFullYear(), 6, 1).getTimezoneOffset();\n              var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();\n              a = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;\n              v()[b + 32 >>> 2 >>> 0] = a;\n            },\n            $: function(a) {\n              a >>>= 0;\n              var b = new Date(v()[a + 20 >>> 2 >>> 0] + 1900, v()[a + 16 >>> 2 >>> 0], v()[a + 12 >>> 2 >>> 0], v()[a + 8 >>> 2 >>> 0], v()[a + 4 >>> 2 >>> 0], v()[a >>> 2 >>> 0], 0), c = v()[a + 32 >>> 2 >>> 0], d = b.getTimezoneOffset(), e = new Date(b.getFullYear(), 6, 1).getTimezoneOffset(), f = new Date(b.getFullYear(), 0, 1).getTimezoneOffset(), k = Math.min(f, e);\n              0 > c ? v()[a + 32 >>> 2 >>> 0] = Number(e != f && k == d) : 0 < c != (k == d) && (e = Math.max(f, e), b.setTime(b.getTime() + 6e4 * ((0 < c ? k : e) - d)));\n              v()[a + 24 >>> 2 >>> 0] = b.getDay();\n              c = (Y(b.getFullYear()) ? pc : qc)[b.getMonth()] + b.getDate() - 1 | 0;\n              v()[a + 28 >>> 2 >>> 0] = c;\n              v()[a >>> 2 >>> 0] = b.getSeconds();\n              v()[a + 4 >>> 2 >>> 0] = b.getMinutes();\n              v()[a + 8 >>> 2 >>> 0] = b.getHours();\n              v()[a + 12 >>> 2 >>> 0] = b.getDate();\n              v()[a + 16 >>> 2 >>> 0] = b.getMonth();\n              v()[a + 20 >>> 2 >>> 0] = b.getYear();\n              a = b.getTime();\n              isNaN(a) ? (v()[Pc() >>> 2 >>> 0] = 61, a = -1) : a /= 1e3;\n              return BigInt(a);\n            },\n            X: rc,\n            Y: sc,\n            M: function(a, b, c) {\n              function d(n) {\n                return (n = n.toTimeString().match(/\\(([A-Za-z ]+)\\)$/)) ? n[1] : "GMT";\n              }\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              var e = (/* @__PURE__ */ new Date()).getFullYear(), f = new Date(e, 0, 1), k = new Date(\n                e,\n                6,\n                1\n              );\n              e = f.getTimezoneOffset();\n              var l = k.getTimezoneOffset(), r = Math.max(e, l);\n              w()[a >>> 2 >>> 0] = 60 * r;\n              v()[b >>> 2 >>> 0] = Number(e != l);\n              a = d(f);\n              b = d(k);\n              a = uc(a);\n              b = uc(b);\n              l < e ? (w()[c >>> 2 >>> 0] = a, w()[c + 4 >>> 2 >>> 0] = b) : (w()[c >>> 2 >>> 0] = b, w()[c + 4 >>> 2 >>> 0] = a);\n            },\n            p: () => {\n              za("");\n            },\n            ra: function(a, b, c) {\n              a >>>= 0;\n              b >>>= 0;\n              c >>>= 0;\n              vc.length = 0;\n              for (var d; d = t()[b++ >>> 0]; ) {\n                var e = 105 != d;\n                e &= 112 != d;\n                c += e && c % 8 ? 4 : 0;\n                vc.push(112 == d ? w()[c >>> 2 >>> 0] : 106 == d ? H[c >>> 3] : 105 == d ? v()[c >>> 2 >>> 0] : ia()[c >>> 3 >>> 0]);\n                c += e ? 8 : 4;\n              }\n              return Pa[a].apply(null, vc);\n            },\n            E: () => {\n            },\n            G: () => Date.now(),\n            la: () => {\n              O += 1;\n              throw "unwind";\n            },\n            O: function() {\n              return 4294901760;\n            },\n            t: () => performance.timeOrigin + performance.now(),\n            w: () => B ? (init_os(), __toCommonJS(os_exports)).cpus().length : navigator.hardwareConcurrency,\n            L: function(a) {\n              a >>>= 0;\n              var b = t().length;\n              if (a <= b || 4294901760 < a)\n                return false;\n              for (var c = 1; 4 >= c; c *= 2) {\n                var d = b * (1 + 0.2 / c);\n                d = Math.min(d, a + 100663296);\n                var e = Math;\n                d = Math.max(a, d);\n                a: {\n                  e = (e.min.call(e, 4294901760, d + (65536 - d % 65536) % 65536) - m.buffer.byteLength + 65535) / 65536;\n                  try {\n                    m.grow(e);\n                    q();\n                    var f = 1;\n                    break a;\n                  } catch (k) {\n                  }\n                  f = void 0;\n                }\n                if (f)\n                  return true;\n              }\n              return false;\n            },\n            ea: zc,\n            fa: Ac,\n            U: cb,\n            y: Bc,\n            C: Cc,\n            ba: Dc,\n            B: Fc,\n            a: m || z.wasmMemory,\n            ha: Kc,\n            q: function(a, b, c, d) {\n              return Kc(a >>> 0, b >>> 0, c >>> 0, d >>> 0);\n            }\n          }, Z = function() {\n            function a(c, d) {\n              Z = c.exports;\n              Z = Rc();\n              M.Gb.push(Z.Ya);\n              lb = Z.$a;\n              Ga.unshift(Z.sa);\n              Aa = d;\n              Ja();\n              return Z;\n            }\n            var b = { a: Qc };\n            I++;\n            if (z.instantiateWasm)\n              try {\n                return z.instantiateWasm(b, a);\n              } catch (c) {\n                F(`Module.instantiateWasm callback failed with error: ${c}`), la(c);\n              }\n            Oa(b, function(c) {\n              a(c.instance, c.module);\n            }).catch(la);\n            return {};\n          }();\n          z._OrtInit = (a, b) => (z._OrtInit = Z.ta)(a, b);\n          z._OrtGetLastError = (a, b) => (z._OrtGetLastError = Z.ua)(a, b);\n          z._OrtCreateSessionOptions = (a, b, c, d, e, f, k, l, r, n) => (z._OrtCreateSessionOptions = Z.va)(a, b, c, d, e, f, k, l, r, n);\n          z._OrtAppendExecutionProvider = (a, b) => (z._OrtAppendExecutionProvider = Z.wa)(a, b);\n          z._OrtAddFreeDimensionOverride = (a, b, c) => (z._OrtAddFreeDimensionOverride = Z.xa)(a, b, c);\n          z._OrtAddSessionConfigEntry = (a, b, c) => (z._OrtAddSessionConfigEntry = Z.ya)(a, b, c);\n          z._OrtReleaseSessionOptions = (a) => (z._OrtReleaseSessionOptions = Z.za)(a);\n          z._OrtCreateSession = (a, b, c) => (z._OrtCreateSession = Z.Aa)(a, b, c);\n          z._OrtReleaseSession = (a) => (z._OrtReleaseSession = Z.Ba)(a);\n          z._OrtGetInputOutputCount = (a, b, c) => (z._OrtGetInputOutputCount = Z.Ca)(a, b, c);\n          z._OrtGetInputName = (a, b) => (z._OrtGetInputName = Z.Da)(a, b);\n          z._OrtGetOutputName = (a, b) => (z._OrtGetOutputName = Z.Ea)(a, b);\n          z._OrtFree = (a) => (z._OrtFree = Z.Fa)(a);\n          z._OrtCreateTensor = (a, b, c, d, e, f) => (z._OrtCreateTensor = Z.Ga)(a, b, c, d, e, f);\n          z._OrtGetTensorData = (a, b, c, d, e) => (z._OrtGetTensorData = Z.Ha)(a, b, c, d, e);\n          z._OrtReleaseTensor = (a) => (z._OrtReleaseTensor = Z.Ia)(a);\n          z._OrtCreateRunOptions = (a, b, c, d) => (z._OrtCreateRunOptions = Z.Ja)(a, b, c, d);\n          z._OrtAddRunConfigEntry = (a, b, c) => (z._OrtAddRunConfigEntry = Z.Ka)(a, b, c);\n          z._OrtReleaseRunOptions = (a) => (z._OrtReleaseRunOptions = Z.La)(a);\n          z._OrtCreateBinding = (a) => (z._OrtCreateBinding = Z.Ma)(a);\n          z._OrtBindInput = (a, b, c) => (z._OrtBindInput = Z.Na)(a, b, c);\n          z._OrtBindOutput = (a, b, c, d) => (z._OrtBindOutput = Z.Oa)(a, b, c, d);\n          z._OrtClearBoundOutputs = (a) => (z._OrtClearBoundOutputs = Z.Pa)(a);\n          z._OrtReleaseBinding = (a) => (z._OrtReleaseBinding = Z.Qa)(a);\n          z._OrtRunWithBinding = (a, b, c, d, e) => (z._OrtRunWithBinding = Z.Ra)(a, b, c, d, e);\n          z._OrtRun = (a, b, c, d, e, f, k, l) => (z._OrtRun = Z.Sa)(a, b, c, d, e, f, k, l);\n          z._OrtEndProfiling = (a) => (z._OrtEndProfiling = Z.Ta)(a);\n          var Pc = () => (Pc = Z.Ua)(), gb = z._pthread_self = () => (gb = z._pthread_self = Z.Va)(), tc = z._malloc = (a) => (tc = z._malloc = Z.Wa)(a), X = z._free = (a) => (X = z._free = Z.Xa)(a);\n          z.__emscripten_tls_init = () => (z.__emscripten_tls_init = Z.Ya)();\n          var dc = (a) => (dc = Z.Za)(a);\n          z.__embind_initialize_bindings = () => (z.__embind_initialize_bindings = Z._a)();\n          var Oc = z.__emscripten_thread_init = (a, b, c, d, e, f) => (Oc = z.__emscripten_thread_init = Z.ab)(a, b, c, d, e, f);\n          z.__emscripten_thread_crashed = () => (z.__emscripten_thread_crashed = Z.bb)();\n          var $a = (a, b, c, d) => ($a = Z.cb)(a, b, c, d), fb = (a) => (fb = Z.db)(a), mb = z.__emscripten_thread_exit = (a) => (mb = z.__emscripten_thread_exit = Z.eb)(a), bc = () => (bc = Z.fb)(), jb = (a, b) => (jb = Z.gb)(a, b), Wa = () => (Wa = Z.hb)(), Xa = (a) => (Xa = Z.ib)(a), Za = (a) => (Za = Z.jb)(a);\n          function Rc() {\n            var a = Z;\n            a = Object.assign({}, a);\n            var b = (d) => () => d() >>> 0, c = (d) => (e) => d(e) >>> 0;\n            a.Ua = b(a.Ua);\n            a.Va = b(a.Va);\n            a.Wa = c(a.Wa);\n            a.Za = c(a.Za);\n            a.emscripten_main_runtime_thread_id = b(a.emscripten_main_runtime_thread_id);\n            a.hb = b(a.hb);\n            a.jb = c(a.jb);\n            return a;\n          }\n          z.wasmMemory = m;\n          z.stackAlloc = Za;\n          z.stackSave = Wa;\n          z.stackRestore = Xa;\n          z.keepRuntimeAlive = () => 0 < O;\n          z.UTF8ToString = L;\n          z.stringToUTF8 = wb;\n          z.lengthBytesUTF8 = ub;\n          z.ExitStatus = Qa;\n          z.PThread = M;\n          var Sc;\n          J = function Tc() {\n            Sc || Uc();\n            Sc || (J = Tc);\n          };\n          function Uc() {\n            if (!(0 < I))\n              if (D)\n                ka(z), D || ib(Ga), startWorker(z);\n              else {\n                if (z.preRun)\n                  for ("function" == typeof z.preRun && (z.preRun = [z.preRun]); z.preRun.length; )\n                    Fa.unshift(z.preRun.shift());\n                ib(Fa);\n                0 < I || Sc || (Sc = true, z.calledRun = true, Ba || (D || ib(Ga), ka(z), D || ib(Ha)));\n              }\n          }\n          Uc();\n          return moduleArg.ready;\n        };\n      })();\n      if (typeof exports === "object" && typeof module === "object")\n        module.exports = ortWasmThreaded;\n      else if (typeof define === "function" && define["amd"])\n        define([], () => ortWasmThreaded);\n    }\n  });\n\n  // web/lib/wasm/binding/ort-wasm-threaded.worker.js\n  var require_ort_wasm_threaded_worker = __commonJS({\n    "web/lib/wasm/binding/ort-wasm-threaded.worker.js"(exports, module) {\n      module.exports = \'"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");var vm=require("vm");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:f=>vm.runInThisContext(fs.readFileSync(f,"utf8"),{filename:f}),postMessage:msg=>parentPort.postMessage(msg),performance:global.performance||{now:Date.now}})}var initializedJS=false;function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"\\\\n");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var module=Module["wasmModule"];Module["wasmModule"]=null;var instance=new WebAssembly.Instance(module,info);return receiveInstance(instance)};self.onunhandledrejection=e=>{throw e.reason||e};function handleMessage(e){try{if(e.data.cmd==="load"){let messageQueue=[];self.onmessage=e=>messageQueue.push(e);self.startWorker=instance=>{Module=instance;postMessage({"cmd":"loaded"});for(let msg of messageQueue){handleMessage(msg)}self.onmessage=handleMessage};Module["wasmModule"]=e.data.wasmModule;for(const handler of e.data.handlers){Module[handler]=(...args)=>{postMessage({cmd:"callHandler",handler:handler,args:args})}}Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}ortWasmThreaded(Module)}else if(e.data.cmd==="run"){Module["__emscripten_thread_init"](e.data.pthread_ptr,/*is_main=*/0,/*is_runtime=*/0,/*can_block=*/1);Module["__emscripten_thread_mailbox_await"](e.data.pthread_ptr);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){Module["__embind_initialize_bindings"]();initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){throw ex}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="checkMailbox"){if(initializedJS){Module["checkMailbox"]()}}else if(e.data.cmd){err(`worker.js received unknown command ${e.data.cmd}`);err(e.data)}}catch(ex){Module["__emscripten_thread_crashed"]?.();throw ex}}self.onmessage=handleMessage;\\n\';\n    }\n  });\n\n  // nodejs-ignore:node:path\n  var join = void 0;\n\n  // web/lib/wasm/wasm-factory.ts\n  var ortWasmFactory;\n  if (true) {\n    ortWasmFactory = require_ort_training_wasm_simd();\n  } else {\n    ortWasmFactory = true ? null : null;\n  }\n  var ortWasmFactoryThreaded = true ? true ? require_ort_wasm_threaded() : null : ortWasmFactory;\n  var wasm;\n  var initialized = false;\n  var initializing = false;\n  var aborted = false;\n  var isMultiThreadSupported = () => {\n    try {\n      if (typeof SharedArrayBuffer === "undefined") {\n        return false;\n      }\n      if (typeof MessageChannel !== "undefined") {\n        new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n      }\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        5,\n        4,\n        1,\n        3,\n        1,\n        1,\n        10,\n        11,\n        1,\n        9,\n        0,\n        65,\n        0,\n        254,\n        16,\n        2,\n        0,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var isSimdSupported = () => {\n    try {\n      return WebAssembly.validate(new Uint8Array([\n        0,\n        97,\n        115,\n        109,\n        1,\n        0,\n        0,\n        0,\n        1,\n        4,\n        1,\n        96,\n        0,\n        0,\n        3,\n        2,\n        1,\n        0,\n        10,\n        30,\n        1,\n        28,\n        0,\n        65,\n        0,\n        253,\n        15,\n        253,\n        12,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        253,\n        186,\n        1,\n        26,\n        11\n      ]));\n    } catch (e) {\n      return false;\n    }\n  };\n  var getWasmFileName = (useSimd, useThreads) => {\n    if (useSimd) {\n      if (true) {\n        return "ort-training-wasm-simd.wasm";\n      }\n      return useThreads ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-simd.wasm";\n    } else {\n      return useThreads ? "ort-wasm-threaded.wasm" : "ort-wasm.wasm";\n    }\n  };\n  var initializeWebAssembly = async (flags) => {\n    if (initialized) {\n      return Promise.resolve();\n    }\n    if (initializing) {\n      throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");\n    }\n    if (aborted) {\n      throw new Error("previous call to \'initializeWebAssembly()\' failed.");\n    }\n    initializing = true;\n    const timeout = flags.initTimeout;\n    const numThreads = flags.numThreads;\n    const simd = flags.simd;\n    const useThreads = numThreads > 1 && isMultiThreadSupported();\n    const useSimd = simd && isSimdSupported();\n    const wasmPaths = flags.wasmPaths;\n    const wasmPrefixOverride = typeof wasmPaths === "string" ? wasmPaths : void 0;\n    const wasmFileName = getWasmFileName(useSimd, useThreads);\n    const wasmPathOverride = typeof wasmPaths === "object" ? wasmPaths[wasmFileName] : void 0;\n    let isTimeout = false;\n    const tasks = [];\n    if (timeout > 0) {\n      tasks.push(new Promise((resolve) => {\n        setTimeout(() => {\n          isTimeout = true;\n          resolve();\n        }, timeout);\n      }));\n    }\n    tasks.push(new Promise((resolve, reject) => {\n      const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n      const config = {\n        locateFile: (fileName, scriptDirectory) => {\n          if (useThreads && fileName.endsWith(".worker.js") && typeof Blob !== "undefined") {\n            return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by esbuild plugin to load file content as string.\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require_ort_wasm_threaded_worker()\n              ],\n              { type: "text/javascript" }\n            ));\n          }\n          if (fileName.endsWith(".wasm")) {\n            if (wasmPathOverride) {\n              return wasmPathOverride;\n            }\n            const prefix = wasmPrefixOverride ?? scriptDirectory;\n            if (false) {\n              if (wasmFileName === "ort-wasm-simd.wasm") {\n                return prefix + "ort-wasm-simd.jsep.wasm";\n              } else if (wasmFileName === "ort-wasm-simd-threaded.wasm") {\n                return prefix + "ort-wasm-simd-threaded.jsep.wasm";\n              }\n            }\n            return prefix + wasmFileName;\n          }\n          return scriptDirectory + fileName;\n        }\n      };\n      if (useThreads) {\n        config.numThreads = numThreads;\n        if (typeof Blob === "undefined") {\n          config.mainScriptUrlOrBlob = join(__dirname, "ort-wasm-threaded.js");\n        } else {\n          const scriptSourceCode = `var ortWasmThreaded=${factory.toString()};`;\n          config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], { type: "text/javascript" });\n        }\n      }\n      factory(config).then(\n        // wasm module initialized successfully\n        (module) => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        }\n      );\n    }));\n    await Promise.race(tasks);\n    if (isTimeout) {\n      throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n    }\n  };\n  var getInstance = () => {\n    if (initialized && wasm) {\n      return wasm;\n    }\n    throw new Error("WebAssembly is not initialized yet.");\n  };\n\n  // web/lib/wasm/wasm-utils.ts\n  var allocWasmString = (data, allocs) => {\n    const wasm2 = getInstance();\n    const dataLength = wasm2.lengthBytesUTF8(data) + 1;\n    const dataOffset = wasm2._malloc(dataLength);\n    wasm2.stringToUTF8(data, dataOffset, dataLength);\n    allocs.push(dataOffset);\n    return dataOffset;\n  };\n  var iterateExtraOptions = (options, prefix, seen, handler) => {\n    if (typeof options == "object" && options !== null) {\n      if (seen.has(options)) {\n        throw new Error("Circular reference in options");\n      } else {\n        seen.add(options);\n      }\n    }\n    Object.entries(options).forEach(([key, value]) => {\n      const name = prefix ? prefix + key : key;\n      if (typeof value === "object") {\n        iterateExtraOptions(value, name + ".", seen, handler);\n      } else if (typeof value === "string" || typeof value === "number") {\n        handler(name, value.toString());\n      } else if (typeof value === "boolean") {\n        handler(name, value ? "1" : "0");\n      } else {\n        throw new Error(`Can\'t handle extra config type: ${typeof value}`);\n      }\n    });\n  };\n  var checkLastError = (message) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const paramsOffset = wasm2.stackAlloc(8);\n      wasm2._OrtGetLastError(paramsOffset, paramsOffset + 4);\n      const errorCode = wasm2.HEAP32[paramsOffset / 4];\n      const errorMessagePointer = wasm2.HEAPU32[paramsOffset / 4 + 1];\n      const errorMessage = errorMessagePointer ? wasm2.UTF8ToString(errorMessagePointer) : "";\n      throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n\n  // web/lib/wasm/run-options.ts\n  var setRunOptions = (options) => {\n    const wasm2 = getInstance();\n    let runOptionsHandle = 0;\n    const allocs = [];\n    const runOptions = options || {};\n    try {\n      if (options?.logSeverityLevel === void 0) {\n        runOptions.logSeverityLevel = 2;\n      } else if (typeof options.logSeverityLevel !== "number" || !Number.isInteger(options.logSeverityLevel) || options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n      }\n      if (options?.logVerbosityLevel === void 0) {\n        runOptions.logVerbosityLevel = 0;\n      } else if (typeof options.logVerbosityLevel !== "number" || !Number.isInteger(options.logVerbosityLevel)) {\n        throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n      }\n      if (options?.terminate === void 0) {\n        runOptions.terminate = false;\n      }\n      let tagDataOffset = 0;\n      if (options?.tag !== void 0) {\n        tagDataOffset = allocWasmString(options.tag, allocs);\n      }\n      runOptionsHandle = wasm2._OrtCreateRunOptions(\n        runOptions.logSeverityLevel,\n        runOptions.logVerbosityLevel,\n        !!runOptions.terminate,\n        tagDataOffset\n      );\n      if (runOptionsHandle === 0) {\n        checkLastError("Can\'t create run options.");\n      }\n      if (options?.extra !== void 0) {\n        iterateExtraOptions(options.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a run config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [runOptionsHandle, allocs];\n    } catch (e) {\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/session-options.ts\n  var getGraphOptimzationLevel = (graphOptimizationLevel) => {\n    switch (graphOptimizationLevel) {\n      case "disabled":\n        return 0;\n      case "basic":\n        return 1;\n      case "extended":\n        return 2;\n      case "all":\n        return 99;\n      default:\n        throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n    }\n  };\n  var getExecutionMode = (executionMode) => {\n    switch (executionMode) {\n      case "sequential":\n        return 0;\n      case "parallel":\n        return 1;\n      default:\n        throw new Error(`unsupported execution mode: ${executionMode}`);\n    }\n  };\n  var appendDefaultOptions = (options) => {\n    if (!options.extra) {\n      options.extra = {};\n    }\n    if (!options.extra.session) {\n      options.extra.session = {};\n    }\n    const session = options.extra.session;\n    if (!session.use_ort_model_bytes_directly) {\n      session.use_ort_model_bytes_directly = "1";\n    }\n    if (options.executionProviders && options.executionProviders.some((ep) => (typeof ep === "string" ? ep : ep.name) === "webgpu")) {\n      options.enableMemPattern = false;\n    }\n  };\n  var setExecutionProviders = (sessionOptionsHandle, executionProviders, allocs) => {\n    for (const ep of executionProviders) {\n      let epName = typeof ep === "string" ? ep : ep.name;\n      switch (epName) {\n        case "webnn":\n          epName = "WEBNN";\n          if (typeof ep !== "string") {\n            const webnnOptions = ep;\n            if (webnnOptions?.deviceType) {\n              const keyDataOffset = allocWasmString("deviceType", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'deviceType\' - ${webnnOptions.deviceType}.`);\n              }\n            }\n            if (webnnOptions?.numThreads) {\n              let numThreads = webnnOptions.numThreads;\n              if (typeof numThreads != "number" || !Number.isInteger(numThreads) || numThreads < 0) {\n                numThreads = 0;\n              }\n              const keyDataOffset = allocWasmString("numThreads", allocs);\n              const valueDataOffset = allocWasmString(numThreads.toString(), allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(`Can\'t set a session config entry: \'numThreads\' - ${webnnOptions.numThreads}.`);\n              }\n            }\n            if (webnnOptions?.powerPreference) {\n              const keyDataOffset = allocWasmString("powerPreference", allocs);\n              const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'powerPreference\' - ${webnnOptions.powerPreference}.`\n                );\n              }\n            }\n          }\n          break;\n        case "webgpu":\n          epName = "JS";\n          if (typeof ep !== "string") {\n            const webgpuOptions = ep;\n            if (webgpuOptions?.preferredLayout) {\n              if (webgpuOptions.preferredLayout !== "NCHW" && webgpuOptions.preferredLayout !== "NHWC") {\n                throw new Error(`preferredLayout must be either \'NCHW\' or \'NHWC\': ${webgpuOptions.preferredLayout}`);\n              }\n              const keyDataOffset = allocWasmString("preferredLayout", allocs);\n              const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n              if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n                checkLastError(\n                  `Can\'t set a session config entry: \'preferredLayout\' - ${webgpuOptions.preferredLayout}.`\n                );\n              }\n            }\n          }\n          break;\n        case "wasm":\n        case "cpu":\n          continue;\n        default:\n          throw new Error(`not supported execution provider: ${epName}`);\n      }\n      const epNameDataOffset = allocWasmString(epName, allocs);\n      if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n        checkLastError(`Can\'t append execution provider: ${epName}.`);\n      }\n    }\n  };\n  var setSessionOptions = (options) => {\n    const wasm2 = getInstance();\n    let sessionOptionsHandle = 0;\n    const allocs = [];\n    const sessionOptions = options || {};\n    appendDefaultOptions(sessionOptions);\n    try {\n      const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? "all");\n      const executionMode = getExecutionMode(sessionOptions.executionMode ?? "sequential");\n      const logIdDataOffset = typeof sessionOptions.logId === "string" ? allocWasmString(sessionOptions.logId, allocs) : 0;\n      const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;\n      if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n        throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n      }\n      const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;\n      if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n        throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n      }\n      const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === "string" ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs) : 0;\n      sessionOptionsHandle = wasm2._OrtCreateSessionOptions(\n        graphOptimizationLevel,\n        !!sessionOptions.enableCpuMemArena,\n        !!sessionOptions.enableMemPattern,\n        executionMode,\n        !!sessionOptions.enableProfiling,\n        0,\n        logIdDataOffset,\n        logSeverityLevel,\n        logVerbosityLevel,\n        optimizedModelFilePathOffset\n      );\n      if (sessionOptionsHandle === 0) {\n        checkLastError("Can\'t create session options.");\n      }\n      if (sessionOptions.executionProviders) {\n        setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n      }\n      if (sessionOptions.freeDimensionOverrides) {\n        for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n          if (typeof name !== "string") {\n            throw new Error(`free dimension override name must be a string: ${name}`);\n          }\n          if (typeof value !== "number" || !Number.isInteger(value) || value < 0) {\n            throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n          }\n          const nameOffset = allocWasmString(name, allocs);\n          if (wasm2._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n            checkLastError(`Can\'t set a free dimension override: ${name} - ${value}.`);\n          }\n        }\n      }\n      if (sessionOptions.extra !== void 0) {\n        iterateExtraOptions(sessionOptions.extra, "", /* @__PURE__ */ new WeakSet(), (key, value) => {\n          const keyDataOffset = allocWasmString(key, allocs);\n          const valueDataOffset = allocWasmString(value, allocs);\n          if (wasm2._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n            checkLastError(`Can\'t set a session config entry: ${key} - ${value}.`);\n          }\n        });\n      }\n      return [sessionOptionsHandle, allocs];\n    } catch (e) {\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      throw e;\n    }\n  };\n\n  // web/lib/wasm/wasm-common.ts\n  var tensorDataTypeStringToEnum = (type) => {\n    switch (type) {\n      case "int8":\n        return 3 /* int8 */;\n      case "uint8":\n        return 2 /* uint8 */;\n      case "bool":\n        return 9 /* bool */;\n      case "int16":\n        return 5 /* int16 */;\n      case "uint16":\n        return 4 /* uint16 */;\n      case "int32":\n        return 6 /* int32 */;\n      case "uint32":\n        return 12 /* uint32 */;\n      case "float16":\n        return 10 /* float16 */;\n      case "float32":\n        return 1 /* float */;\n      case "float64":\n        return 11 /* double */;\n      case "string":\n        return 8 /* string */;\n      case "int64":\n        return 7 /* int64 */;\n      case "uint64":\n        return 13 /* uint64 */;\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  };\n  var tensorDataTypeEnumToString = (typeProto) => {\n    switch (typeProto) {\n      case 3 /* int8 */:\n        return "int8";\n      case 2 /* uint8 */:\n        return "uint8";\n      case 9 /* bool */:\n        return "bool";\n      case 5 /* int16 */:\n        return "int16";\n      case 4 /* uint16 */:\n        return "uint16";\n      case 6 /* int32 */:\n        return "int32";\n      case 12 /* uint32 */:\n        return "uint32";\n      case 10 /* float16 */:\n        return "float16";\n      case 1 /* float */:\n        return "float32";\n      case 11 /* double */:\n        return "float64";\n      case 8 /* string */:\n        return "string";\n      case 7 /* int64 */:\n        return "int64";\n      case 13 /* uint64 */:\n        return "uint64";\n      default:\n        throw new Error(`unsupported data type: ${typeProto}`);\n    }\n  };\n  var getTensorElementSize = (dateType) => [void 0, 4, 1, 1, 2, 2, 4, 8, void 0, 1, 2, 8, 4, 8, void 0, void 0, void 0][dateType];\n  var tensorTypeToTypedArrayConstructor = (type) => {\n    switch (type) {\n      case "float16":\n        return Uint16Array;\n      case "float32":\n        return Float32Array;\n      case "uint8":\n        return Uint8Array;\n      case "int8":\n        return Int8Array;\n      case "uint16":\n        return Uint16Array;\n      case "int16":\n        return Int16Array;\n      case "int32":\n        return Int32Array;\n      case "bool":\n        return Uint8Array;\n      case "float64":\n        return Float64Array;\n      case "uint32":\n        return Uint32Array;\n      case "int64":\n        return BigInt64Array;\n      case "uint64":\n        return BigUint64Array;\n      default:\n        throw new Error(`unsupported type: ${type}`);\n    }\n  };\n  var logLevelStringToEnum = (logLevel) => {\n    switch (logLevel) {\n      case "verbose":\n        return 0;\n      case "info":\n        return 1;\n      case "warning":\n        return 2;\n      case "error":\n        return 3;\n      case "fatal":\n        return 4;\n      default:\n        throw new Error(`unsupported logging level: ${logLevel}`);\n    }\n  };\n  var isGpuBufferSupportedType = (type) => type === "float32" || type === "int32" || type === "int64" || type === "bool" || type === "float16" || type === "uint32";\n  var dataLocationStringToEnum = (location) => {\n    switch (location) {\n      case "none":\n        return 0;\n      case "cpu":\n        return 1;\n      case "cpu-pinned":\n        return 2;\n      case "texture":\n        return 3;\n      case "gpu-buffer":\n        return 4;\n      default:\n        throw new Error(`unsupported data location: ${location}`);\n    }\n  };\n\n  // web/lib/wasm/wasm-utils-load-file.ts\n  init_fs();\n\n  // nodejs-ignore:node:fs/promises\n  var readFile2 = void 0;\n\n  // web/lib/wasm/wasm-utils-load-file.ts\n  var loadFile = async (file) => {\n    if (typeof file === "string") {\n      if (typeof process !== "undefined" && process.versions && process.versions.node) {\n        try {\n          return new Uint8Array(await readFile2(file));\n        } catch (e) {\n          if (e.code === "ERR_FS_FILE_TOO_LARGE") {\n            const stream = createReadStream(file);\n            const chunks = [];\n            for await (const chunk of stream) {\n              chunks.push(chunk);\n            }\n            return new Uint8Array(Buffer.concat(chunks));\n          }\n          throw e;\n        }\n      } else {\n        const response = await fetch(file);\n        if (!response.ok) {\n          throw new Error(`failed to load external data file: ${file}`);\n        }\n        const contentLengthHeader = response.headers.get("Content-Length");\n        const fileSize = contentLengthHeader ? parseInt(contentLengthHeader, 10) : 0;\n        if (fileSize < 1073741824) {\n          return new Uint8Array(await response.arrayBuffer());\n        } else {\n          if (!response.body) {\n            throw new Error(`failed to load external data file: ${file}, no response body.`);\n          }\n          const reader = response.body.getReader();\n          const pages = Math.ceil(fileSize / 65536);\n          const buffer = new WebAssembly.Memory({ initial: pages, maximum: pages }).buffer;\n          let offset = 0;\n          while (true) {\n            const { done, value } = await reader.read();\n            if (done) {\n              break;\n            }\n            const chunkSize = value.byteLength;\n            const chunk = new Uint8Array(buffer, offset, chunkSize);\n            chunk.set(value);\n            offset += chunkSize;\n          }\n          return new Uint8Array(buffer, 0, fileSize);\n        }\n      }\n    } else if (file instanceof Blob) {\n      return new Uint8Array(await file.arrayBuffer());\n    } else if (file instanceof Uint8Array) {\n      return file;\n    } else {\n      return new Uint8Array(file);\n    }\n  };\n\n  // web/lib/wasm/wasm-core-impl.ts\n  var initOrt = (numThreads, loggingLevel) => {\n    const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n    if (errorCode !== 0) {\n      checkLastError("Can\'t initialize onnxruntime.");\n    }\n  };\n  var initRuntime = async (env) => {\n    initOrt(env.wasm.numThreads, logLevelStringToEnum(env.logLevel));\n  };\n  var initEp = async (env, epName) => {\n    if (false) {\n      if (typeof navigator === "undefined" || !navigator.gpu) {\n        throw new Error("WebGPU is not supported in current environment");\n      }\n      const adapter = await navigator.gpu.requestAdapter();\n      if (!adapter) {\n        throw new Error(\n          \'Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.\'\n        );\n      }\n      if (!env.wasm.simd) {\n        throw new Error(\n          "Not supported for WebGPU=ON and SIMD=OFF. Please set `env.wasm.simd` to true when using `webgpu` EP"\n        );\n      }\n      const initJsep = null.init;\n      await initJsep(getInstance(), env, adapter);\n    }\n  };\n  var activeSessions = /* @__PURE__ */ new Map();\n  var getSessionInputOutputCount = (sessionHandle) => {\n    const wasm2 = getInstance();\n    const stack = wasm2.stackSave();\n    try {\n      const dataOffset = wasm2.stackAlloc(8);\n      const errorCode = wasm2._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n      if (errorCode !== 0) {\n        checkLastError("Can\'t get session input/output count.");\n      }\n      return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var copyFromExternalBuffer = (model) => {\n    const wasm2 = getInstance();\n    const modelDataOffset = wasm2._malloc(model.byteLength);\n    if (modelDataOffset === 0) {\n      throw new Error(`Can\'t create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n    }\n    wasm2.HEAPU8.set(model, modelDataOffset);\n    return [modelDataOffset, model.byteLength];\n  };\n  var createSession = async (modelData, options) => {\n    let modelDataOffset, modelDataLength;\n    const wasm2 = getInstance();\n    if (Array.isArray(modelData)) {\n      [modelDataOffset, modelDataLength] = modelData;\n    } else if (modelData.buffer === wasm2.HEAPU8.buffer) {\n      [modelDataOffset, modelDataLength] = [modelData.byteOffset, modelData.byteLength];\n    } else {\n      [modelDataOffset, modelDataLength] = copyFromExternalBuffer(modelData);\n    }\n    let sessionHandle = 0;\n    let sessionOptionsHandle = 0;\n    let ioBindingHandle = 0;\n    let allocs = [];\n    const inputNamesUTF8Encoded = [];\n    const outputNamesUTF8Encoded = [];\n    try {\n      [sessionOptionsHandle, allocs] = setSessionOptions(options);\n      if (options?.externalData && wasm2.mountExternalData) {\n        const loadingPromises = [];\n        for (const file of options.externalData) {\n          const path = typeof file === "string" ? file : file.path;\n          loadingPromises.push(loadFile(typeof file === "string" ? file : file.data).then((data) => {\n            wasm2.mountExternalData(path, data);\n          }));\n        }\n        await Promise.all(loadingPromises);\n      }\n      sessionHandle = await wasm2._OrtCreateSession(modelDataOffset, modelDataLength, sessionOptionsHandle);\n      if (sessionHandle === 0) {\n        checkLastError("Can\'t create a session.");\n      }\n      const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n      const inputNames = [];\n      const outputNames = [];\n      const outputPreferredLocations = [];\n      for (let i = 0; i < inputCount; i++) {\n        const name = wasm2._OrtGetInputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an input name.");\n        }\n        inputNamesUTF8Encoded.push(name);\n        inputNames.push(wasm2.UTF8ToString(name));\n      }\n      for (let i = 0; i < outputCount; i++) {\n        const name = wasm2._OrtGetOutputName(sessionHandle, i);\n        if (name === 0) {\n          checkLastError("Can\'t get an output name.");\n        }\n        outputNamesUTF8Encoded.push(name);\n        const nameString = wasm2.UTF8ToString(name);\n        outputNames.push(nameString);\n        if (false) {\n          const location = typeof options?.preferredOutputLocation === "string" ? options.preferredOutputLocation : options?.preferredOutputLocation?.[nameString] ?? "cpu";\n          if (location !== "cpu" && location !== "cpu-pinned" && location !== "gpu-buffer") {\n            throw new Error(`Not supported preferred output location: ${location}.`);\n          }\n          outputPreferredLocations.push(location);\n        }\n      }\n      let bindingState = null;\n      if (false) {\n        ioBindingHandle = wasm2._OrtCreateBinding(sessionHandle);\n        if (ioBindingHandle === 0) {\n          checkLastError("Can\'t create IO binding.");\n        }\n        bindingState = {\n          handle: ioBindingHandle,\n          outputPreferredLocations,\n          outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l))\n        };\n      }\n      activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, bindingState]);\n      return [sessionHandle, inputNames, outputNames];\n    } catch (e) {\n      inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n      if (ioBindingHandle !== 0) {\n        wasm2._OrtReleaseBinding(ioBindingHandle);\n      }\n      if (sessionHandle !== 0) {\n        wasm2._OrtReleaseSession(sessionHandle);\n      }\n      throw e;\n    } finally {\n      wasm2._free(modelDataOffset);\n      if (sessionOptionsHandle !== 0) {\n        wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);\n      }\n      allocs.forEach((alloc) => wasm2._free(alloc));\n      wasm2.unmountExternalData?.();\n    }\n  };\n  var releaseSession = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    if (ioBindingState) {\n      wasm2._OrtReleaseBinding(ioBindingState.handle);\n    }\n    wasm2.jsepUnregisterBuffers?.(sessionId);\n    inputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach((buf) => wasm2._OrtFree(buf));\n    wasm2._OrtReleaseSession(sessionHandle);\n    activeSessions.delete(sessionId);\n  };\n  var prepareInputOutputTensor = (tensor, tensorHandles, allocs, sessionId, index) => {\n    if (!tensor) {\n      tensorHandles.push(0);\n      return;\n    }\n    const wasm2 = getInstance();\n    const dataType = tensor[0];\n    const dims = tensor[1];\n    const location = tensor[3];\n    let rawData;\n    let dataByteLength;\n    if (dataType === "string" && location === "gpu-buffer") {\n      throw new Error("String tensor is not supported on GPU.");\n    }\n    if (location === "gpu-buffer") {\n      const gpuBuffer = tensor[2].gpuBuffer;\n      const elementSizeInBytes = getTensorElementSize(tensorDataTypeStringToEnum(dataType));\n      dataByteLength = dims.reduce((a, b) => a * b, 1) * elementSizeInBytes;\n      rawData = wasm2.jsepRegisterBuffer(sessionId, index, gpuBuffer, dataByteLength);\n    } else {\n      const data = tensor[2];\n      if (Array.isArray(data)) {\n        dataByteLength = 4 * data.length;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        let dataIndex = rawData / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== "string") {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm2.HEAPU32[dataIndex++] = allocWasmString(data[i], allocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        rawData = wasm2._malloc(dataByteLength);\n        allocs.push(rawData);\n        wasm2.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n      }\n    }\n    const stack = wasm2.stackSave();\n    const dimsOffset = wasm2.stackAlloc(4 * dims.length);\n    try {\n      let dimIndex = dimsOffset / 4;\n      dims.forEach((d) => wasm2.HEAP32[dimIndex++] = d);\n      const tensor2 = wasm2._OrtCreateTensor(\n        tensorDataTypeStringToEnum(dataType),\n        rawData,\n        dataByteLength,\n        dimsOffset,\n        dims.length,\n        dataLocationStringToEnum(location)\n      );\n      if (tensor2 === 0) {\n        checkLastError(`Can\'t create tensor for input/output. session=${sessionId}, index=${index}.`);\n      }\n      tensorHandles.push(tensor2);\n    } finally {\n      wasm2.stackRestore(stack);\n    }\n  };\n  var run = async (sessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n    }\n    const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState] = session;\n    const inputCount = inputIndices.length;\n    const outputCount = outputIndices.length;\n    let runOptionsHandle = 0;\n    let runOptionsAllocs = [];\n    const inputTensorHandles = [];\n    const outputTensorHandles = [];\n    const inputOutputAllocs = [];\n    const beforeRunStack = wasm2.stackSave();\n    const inputValuesOffset = wasm2.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm2.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm2.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm2.stackAlloc(outputCount * 4);\n    try {\n      [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n      for (let i = 0; i < inputCount; i++) {\n        prepareInputOutputTensor(inputTensors[i], inputTensorHandles, inputOutputAllocs, sessionId, inputIndices[i]);\n      }\n      for (let i = 0; i < outputCount; i++) {\n        prepareInputOutputTensor(\n          outputTensors[i],\n          outputTensorHandles,\n          inputOutputAllocs,\n          sessionId,\n          inputCount + outputIndices[i]\n        );\n      }\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm2.HEAPU32[inputValuesIndex++] = inputTensorHandles[i];\n        wasm2.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm2.HEAPU32[outputValuesIndex++] = outputTensorHandles[i];\n        wasm2.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n      if (false) {\n        const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;\n        if (inputNamesUTF8Encoded.length !== inputCount) {\n          throw new Error(`input count from feeds (${inputCount}) is expected to be always equal to model\'s input count (${inputNamesUTF8Encoded.length}).`);\n        }\n        for (let i = 0; i < inputCount; i++) {\n          const index = inputIndices[i];\n          const errorCode2 = await wasm2._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t bind input[${i}] for session=${sessionId}.`);\n          }\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const index = outputIndices[i];\n          const location = outputTensors[i]?.[3];\n          if (location) {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind pre-allocated output[${i}] for session=${sessionId}.`);\n            }\n          } else {\n            const errorCode2 = wasm2._OrtBindOutput(handle, outputNamesUTF8Encoded[index], 0, outputPreferredLocationsEncoded[index]);\n            if (errorCode2 !== 0) {\n              checkLastError(`Can\'t bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n            }\n          }\n        }\n      }\n      let errorCode;\n      if (false) {\n        errorCode = await wasm2._OrtRunWithBinding(\n          sessionHandle,\n          ioBindingState.handle,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      } else {\n        errorCode = await wasm2._OrtRun(\n          sessionHandle,\n          inputNamesOffset,\n          inputValuesOffset,\n          inputCount,\n          outputNamesOffset,\n          outputCount,\n          outputValuesOffset,\n          runOptionsHandle\n        );\n      }\n      if (errorCode !== 0) {\n        checkLastError("failed to call OrtRun().");\n      }\n      const output = [];\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];\n        if (tensor === outputTensorHandles[i]) {\n          output.push(outputTensors[i]);\n          continue;\n        }\n        const beforeGetTensorDataStack = wasm2.stackSave();\n        const tensorDataOffset = wasm2.stackAlloc(4 * 4);\n        let keepOutputTensor = false;\n        let type, dataOffset = 0;\n        try {\n          const errorCode2 = wasm2._OrtGetTensorData(\n            tensor,\n            tensorDataOffset,\n            tensorDataOffset + 4,\n            tensorDataOffset + 8,\n            tensorDataOffset + 12\n          );\n          if (errorCode2 !== 0) {\n            checkLastError(`Can\'t access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm2.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm2.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i2 = 0; i2 < dimsLength; i2++) {\n            dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);\n          }\n          wasm2._OrtFree(dimsOffset);\n          const size = dims.reduce((a, b) => a * b, 1);\n          type = tensorDataTypeEnumToString(dataType);\n          const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n          if (type === "string") {\n            if (preferredLocation === "gpu-buffer") {\n              throw new Error("String tensor is not supported on GPU.");\n            }\n            const stringData = [];\n            let dataIndex = dataOffset / 4;\n            for (let i2 = 0; i2 < size; i2++) {\n              const offset = wasm2.HEAPU32[dataIndex++];\n              const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData, "cpu"]);\n          } else {\n            if (preferredLocation === "gpu-buffer" && size > 0) {\n              const gpuBuffer = wasm2.jsepGetBuffer(dataOffset);\n              const elementSize = getTensorElementSize(dataType);\n              if (elementSize === void 0 || !isGpuBufferSupportedType(type)) {\n                throw new Error(`Unsupported data type: ${type}`);\n              }\n              keepOutputTensor = true;\n              output.push([\n                type,\n                dims,\n                {\n                  gpuBuffer,\n                  download: wasm2.jsepCreateDownloader(gpuBuffer, size * elementSize, type),\n                  dispose: () => {\n                    wasm2._OrtReleaseTensor(tensor);\n                  }\n                },\n                "gpu-buffer"\n              ]);\n            } else {\n              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n              const data = new typedArrayConstructor(size);\n              new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n              output.push([type, dims, data, "cpu"]);\n            }\n          }\n        } finally {\n          wasm2.stackRestore(beforeGetTensorDataStack);\n          if (type === "string" && dataOffset) {\n            wasm2._free(dataOffset);\n          }\n          if (!keepOutputTensor) {\n            wasm2._OrtReleaseTensor(tensor);\n          }\n        }\n      }\n      if (ioBindingState) {\n        wasm2._OrtClearBoundOutputs(ioBindingState.handle);\n      }\n      return output;\n    } finally {\n      wasm2.stackRestore(beforeRunStack);\n      inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));\n      inputOutputAllocs.forEach((p) => wasm2._free(p));\n      if (runOptionsHandle !== 0) {\n        wasm2._OrtReleaseRunOptions(runOptionsHandle);\n      }\n      runOptionsAllocs.forEach((p) => wasm2._free(p));\n    }\n  };\n  var endProfiling = (sessionId) => {\n    const wasm2 = getInstance();\n    const session = activeSessions.get(sessionId);\n    if (!session) {\n      throw new Error("invalid session id");\n    }\n    const sessionHandle = session[0];\n    const profileFileName = wasm2._OrtEndProfiling(sessionHandle);\n    if (profileFileName === 0) {\n      checkLastError("Can\'t get an profile file name.");\n    }\n    wasm2._OrtFree(profileFileName);\n  };\n  var extractTransferableBuffers = (tensors) => {\n    const buffers = [];\n    for (const tensor of tensors) {\n      const data = tensor[2];\n      if (!Array.isArray(data) && "buffer" in data) {\n        buffers.push(data.buffer);\n      }\n    }\n    return buffers;\n  };\n\n  // web/lib/wasm/proxy-worker/main.ts\n  self.onmessage = (ev) => {\n    const { type, in: message } = ev.data;\n    try {\n      switch (type) {\n        case "init-wasm":\n          initializeWebAssembly(message.wasm).then(\n            () => {\n              initRuntime(message).then(\n                () => {\n                  postMessage({ type });\n                },\n                (err) => {\n                  postMessage({ type, err });\n                }\n              );\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        case "init-ep": {\n          const { epName, env } = message;\n          initEp(env, epName).then(\n            () => {\n              postMessage({ type });\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        }\n        case "copy-from": {\n          const { buffer } = message;\n          const bufferData = copyFromExternalBuffer(buffer);\n          postMessage({ type, out: bufferData });\n          break;\n        }\n        case "create": {\n          const { model, options } = message;\n          createSession(model, options).then(\n            (sessionMetadata) => {\n              postMessage({ type, out: sessionMetadata });\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        }\n        case "release":\n          releaseSession(message);\n          postMessage({ type });\n          break;\n        case "run": {\n          const { sessionId, inputIndices, inputs, outputIndices, options } = message;\n          run(sessionId, inputIndices, inputs, outputIndices, new Array(outputIndices.length).fill(null), options).then(\n            (outputs) => {\n              if (outputs.some((o) => o[3] !== "cpu")) {\n                postMessage({ type, err: "Proxy does not support non-cpu tensor location." });\n              } else {\n                postMessage(\n                  { type, out: outputs },\n                  extractTransferableBuffers(outputs)\n                );\n              }\n            },\n            (err) => {\n              postMessage({ type, err });\n            }\n          );\n          break;\n        }\n        case "end-profiling":\n          endProfiling(message);\n          postMessage({ type });\n          break;\n        default:\n      }\n    } catch (err) {\n      postMessage({ type, err });\n    }\n  };\n})();\n//# sourceMappingURL=data:application/json;base64,\n';
    }
  });

  // web/lib/wasm/proxy-wrapper.ts
  var isProxy, proxyWorker, initializing2, initialized2, aborted2, initWasmCallbacks, queuedCallbacks, enqueueCallbacks, ensureWorker, onProxyWorkerMessage, scriptSrc, initializeWebAssemblyAndOrtRuntime, initializeOrtEp, copyFromExternalBuffer2, createSession2, releaseSession2, run2, endProfiling2;
  var init_proxy_wrapper = __esm({
    "web/lib/wasm/proxy-wrapper.ts"() {
      "use strict";
      init_esm();
      init_wasm_core_impl();
      init_wasm_factory();
      isProxy = () => !!env2.wasm.proxy && typeof document !== "undefined";
      initializing2 = false;
      initialized2 = false;
      aborted2 = false;
      queuedCallbacks = /* @__PURE__ */ new Map();
      enqueueCallbacks = (type, callbacks) => {
        const queue = queuedCallbacks.get(type);
        if (queue) {
          queue.push(callbacks);
        } else {
          queuedCallbacks.set(type, [callbacks]);
        }
      };
      ensureWorker = () => {
        if (initializing2 || !initialized2 || aborted2 || !proxyWorker) {
          throw new Error("worker not ready");
        }
      };
      onProxyWorkerMessage = (ev) => {
        switch (ev.data.type) {
          case "init-wasm":
            initializing2 = false;
            if (ev.data.err) {
              aborted2 = true;
              initWasmCallbacks[1](ev.data.err);
            } else {
              initialized2 = true;
              initWasmCallbacks[0]();
            }
            break;
          case "init-ep":
          case "copy-from":
          case "create":
          case "release":
          case "run":
          case "end-profiling": {
            const callbacks = queuedCallbacks.get(ev.data.type);
            if (ev.data.err) {
              callbacks.shift()[1](ev.data.err);
            } else {
              callbacks.shift()[0](ev.data.out);
            }
            break;
          }
          default:
        }
      };
      scriptSrc = typeof document !== "undefined" ? document?.currentScript?.src : void 0;
      initializeWebAssemblyAndOrtRuntime = async () => {
        if (initialized2) {
          return;
        }
        if (initializing2) {
          throw new Error("multiple calls to 'initWasm()' detected.");
        }
        if (aborted2) {
          throw new Error("previous call to 'initWasm()' failed.");
        }
        initializing2 = true;
        if (isProxy()) {
          if (env2.wasm.wasmPaths === void 0) {
            if (scriptSrc && scriptSrc.indexOf("blob:") !== 0) {
              env2.wasm.wasmPaths = scriptSrc.substr(0, +scriptSrc.lastIndexOf("/") + 1);
            }
          }
          return new Promise((resolve, reject) => {
            proxyWorker?.terminate();
            const workerUrl = URL.createObjectURL(new Blob(
              [
                // This require() function is handled by esbuild plugin to load file content as string.
                // eslint-disable-next-line @typescript-eslint/no-require-imports
                require_main()
              ],
              { type: "text/javascript" }
            ));
            proxyWorker = new Worker(workerUrl, { name: "ort-wasm-proxy-worker" });
            proxyWorker.onerror = (ev) => reject(ev);
            proxyWorker.onmessage = onProxyWorkerMessage;
            URL.revokeObjectURL(workerUrl);
            initWasmCallbacks = [resolve, reject];
            const message = { type: "init-wasm", in: env2 };
            proxyWorker.postMessage(message);
          });
        } else {
          try {
            await initializeWebAssembly(env2.wasm);
            await initRuntime(env2);
            initialized2 = true;
          } catch (e) {
            aborted2 = true;
            throw e;
          } finally {
            initializing2 = false;
          }
        }
      };
      initializeOrtEp = async (epName) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            enqueueCallbacks("init-ep", [resolve, reject]);
            const message = { type: "init-ep", in: { epName, env: env2 } };
            proxyWorker.postMessage(message);
          });
        } else {
          await initEp(env2, epName);
        }
      };
      copyFromExternalBuffer2 = async (buffer) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            enqueueCallbacks("copy-from", [resolve, reject]);
            const message = { type: "copy-from", in: { buffer } };
            proxyWorker.postMessage(message, [buffer.buffer]);
          });
        } else {
          return copyFromExternalBuffer(buffer);
        }
      };
      createSession2 = async (model, options) => {
        if (isProxy()) {
          if (options?.preferredOutputLocation) {
            throw new Error('session option "preferredOutputLocation" is not supported for proxy.');
          }
          ensureWorker();
          return new Promise((resolve, reject) => {
            enqueueCallbacks("create", [resolve, reject]);
            const message = { type: "create", in: { model, options } };
            const transferable = [];
            if (model instanceof Uint8Array) {
              transferable.push(model.buffer);
            }
            proxyWorker.postMessage(message, transferable);
          });
        } else {
          return createSession(model, options);
        }
      };
      releaseSession2 = async (sessionId) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            enqueueCallbacks("release", [resolve, reject]);
            const message = { type: "release", in: sessionId };
            proxyWorker.postMessage(message);
          });
        } else {
          releaseSession(sessionId);
        }
      };
      run2 = async (sessionId, inputIndices, inputs, outputIndices, outputs, options) => {
        if (isProxy()) {
          if (inputs.some((t) => t[3] !== "cpu")) {
            throw new Error("input tensor on GPU is not supported for proxy.");
          }
          if (outputs.some((t) => t)) {
            throw new Error("pre-allocated output tensor is not supported for proxy.");
          }
          ensureWorker();
          return new Promise((resolve, reject) => {
            enqueueCallbacks("run", [resolve, reject]);
            const serializableInputs = inputs;
            const message = { type: "run", in: { sessionId, inputIndices, inputs: serializableInputs, outputIndices, options } };
            proxyWorker.postMessage(message, extractTransferableBuffers(serializableInputs));
          });
        } else {
          return run(sessionId, inputIndices, inputs, outputIndices, outputs, options);
        }
      };
      endProfiling2 = async (sessionId) => {
        if (isProxy()) {
          ensureWorker();
          return new Promise((resolve, reject) => {
            enqueueCallbacks("end-profiling", [resolve, reject]);
            const message = { type: "end-profiling", in: sessionId };
            proxyWorker.postMessage(message);
          });
        } else {
          endProfiling(sessionId);
        }
      };
    }
  });

  // web/lib/wasm/session-handler-inference.ts
  var encodeTensorMetadata, decodeTensorMetadata, OnnxruntimeWebAssemblySessionHandler;
  var init_session_handler_inference = __esm({
    "web/lib/wasm/session-handler-inference.ts"() {
      "use strict";
      init_esm();
      init_proxy_wrapper();
      init_wasm_common();
      init_wasm_utils_load_file();
      encodeTensorMetadata = (tensor, getName) => {
        switch (tensor.location) {
          case "cpu":
            return [tensor.type, tensor.dims, tensor.data, "cpu"];
          case "gpu-buffer":
            return [tensor.type, tensor.dims, { gpuBuffer: tensor.gpuBuffer }, "gpu-buffer"];
          default:
            throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);
        }
      };
      decodeTensorMetadata = (tensor) => {
        switch (tensor[3]) {
          case "cpu":
            return new Tensor2(tensor[0], tensor[2], tensor[1]);
          case "gpu-buffer": {
            const dataType = tensor[0];
            if (!isGpuBufferSupportedType(dataType)) {
              throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);
            }
            const { gpuBuffer, download, dispose } = tensor[2];
            return Tensor2.fromGpuBuffer(gpuBuffer, { dataType, dims: tensor[1], download, dispose });
          }
          default:
            throw new Error(`invalid data location: ${tensor[3]}`);
        }
      };
      OnnxruntimeWebAssemblySessionHandler = class {
        async fetchModelAndCopyToWasmMemory(path) {
          return copyFromExternalBuffer2(await loadFile(path));
        }
        async loadModel(pathOrBuffer, options) {
          TRACE_FUNC_BEGIN();
          let model;
          if (typeof pathOrBuffer === "string") {
            if (typeof process !== "undefined" && process.versions && process.versions.node) {
              model = await loadFile(pathOrBuffer);
            } else {
              model = await this.fetchModelAndCopyToWasmMemory(pathOrBuffer);
            }
          } else {
            model = pathOrBuffer;
          }
          [this.sessionId, this.inputNames, this.outputNames] = await createSession2(model, options);
          TRACE_FUNC_END();
        }
        async dispose() {
          return releaseSession2(this.sessionId);
        }
        async run(feeds, fetches, options) {
          TRACE_FUNC_BEGIN();
          const inputArray = [];
          const inputIndices = [];
          Object.entries(feeds).forEach((kvp) => {
            const name = kvp[0];
            const tensor = kvp[1];
            const index = this.inputNames.indexOf(name);
            if (index === -1) {
              throw new Error(`invalid input '${name}'`);
            }
            inputArray.push(tensor);
            inputIndices.push(index);
          });
          const outputArray = [];
          const outputIndices = [];
          Object.entries(fetches).forEach((kvp) => {
            const name = kvp[0];
            const tensor = kvp[1];
            const index = this.outputNames.indexOf(name);
            if (index === -1) {
              throw new Error(`invalid output '${name}'`);
            }
            outputArray.push(tensor);
            outputIndices.push(index);
          });
          const inputs = inputArray.map((t, i) => encodeTensorMetadata(t, () => `input "${this.inputNames[inputIndices[i]]}"`));
          const outputs = outputArray.map(
            (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.outputNames[outputIndices[i]]}"`) : null
          );
          const results = await run2(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
          const resultMap = {};
          for (let i = 0; i < results.length; i++) {
            resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);
          }
          TRACE_FUNC_END();
          return resultMap;
        }
        startProfiling() {
        }
        endProfiling() {
          void endProfiling2(this.sessionId);
        }
      };
    }
  });

  // web/lib/backend-wasm.ts
  var initializeFlags, OnnxruntimeWebAssemblyBackend;
  var init_backend_wasm = __esm({
    "web/lib/backend-wasm.ts"() {
      "use strict";
      init_node_os();
      init_esm();
      init_proxy_wrapper();
      init_session_handler_inference();
      initializeFlags = () => {
        if (typeof env2.wasm.initTimeout !== "number" || env2.wasm.initTimeout < 0) {
          env2.wasm.initTimeout = 0;
        }
        if (typeof env2.wasm.simd !== "boolean") {
          env2.wasm.simd = true;
        }
        if (typeof env2.wasm.proxy !== "boolean") {
          env2.wasm.proxy = false;
        }
        if (typeof env2.wasm.trace !== "boolean") {
          env2.wasm.trace = false;
        }
        if (typeof env2.wasm.numThreads !== "number" || !Number.isInteger(env2.wasm.numThreads) || env2.wasm.numThreads <= 0) {
          const numCpuLogicalCores = typeof navigator === "undefined" ? cpus().length : navigator.hardwareConcurrency;
          env2.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));
        }
      };
      OnnxruntimeWebAssemblyBackend = class {
        /**
         * This function initializes the WebAssembly backend.
         *
         * This function will be called only once for each backend name. It will be called the first time when
         * `ort.InferenceSession.create()` is called with a registered backend name.
         *
         * @param backendName - the registered backend name.
         */
        async init(backendName) {
          initializeFlags();
          await initializeWebAssemblyAndOrtRuntime();
          await initializeOrtEp(backendName);
        }
        async createInferenceSessionHandler(pathOrBuffer, options) {
          const handler = new OnnxruntimeWebAssemblySessionHandler();
          await handler.loadModel(pathOrBuffer, options);
          return Promise.resolve(handler);
        }
      };
    }
  });

  // web/lib/wasm/wasm-training-core-impl.ts
  var NO_TRAIN_FUNCS_MSG, ifErrCodeCheckLastError, createCheckpointHandle, getModelInputOutputCount, getModelInputOutputNamesLoop, getModelInputOutputNames, createTrainingSessionHandle, createAndAllocateTensors, moveOutputToTensorMetadataArr, lazyResetGrad, runTrainStep, runOptimizerStep, runEvalStep, getParametersSize, getContiguousParameters, loadParametersBuffer, releaseTrainingSessionAndCheckpoint;
  var init_wasm_training_core_impl = __esm({
    "web/lib/wasm/wasm-training-core-impl.ts"() {
      "use strict";
      init_run_options();
      init_session_options();
      init_wasm_common();
      init_wasm_core_impl();
      init_wasm_factory();
      init_wasm_utils();
      NO_TRAIN_FUNCS_MSG = "Built without training API's enabled. Use the onnxruntime-web/training import for training functionality, and make sure that all the correct artifacts are built & moved to the correct folder if using a custom build. Check https://onnxruntime.ai/docs/build/web.html for more information.";
      ifErrCodeCheckLastError = (errCode, message, checkNeqZero = true) => {
        if (checkNeqZero && errCode !== 0) {
          checkLastError(message);
        } else if (!checkNeqZero && errCode === 0) {
          checkLastError(message);
        }
      };
      createCheckpointHandle = (checkpointData) => {
        const wasm2 = getInstance();
        const [checkpointDataOffset, checkpointDataLength] = checkpointData;
        let checkpointHandle = 0;
        try {
          if (wasm2._OrtTrainingLoadCheckpoint) {
            checkpointHandle = wasm2._OrtTrainingLoadCheckpoint(checkpointDataOffset, checkpointDataLength);
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
          ifErrCodeCheckLastError(checkpointHandle, "Error occurred when trying to create a CheckpointState", false);
          return checkpointHandle;
        } catch (e) {
          if (wasm2._OrtTrainingReleaseCheckpoint && checkpointHandle !== 0) {
            wasm2._OrtTrainingReleaseCheckpoint(checkpointHandle);
          }
          throw e;
        } finally {
          wasm2._OrtFree(checkpointData[0]);
        }
      };
      getModelInputOutputCount = (trainingSessionId, isEvalModel) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        try {
          const dataOffset = wasm2.stackAlloc(8);
          if (wasm2._OrtTrainingGetModelInputOutputCount) {
            const errorCode = wasm2._OrtTrainingGetModelInputOutputCount(trainingSessionId, dataOffset, dataOffset + 4, isEvalModel);
            ifErrCodeCheckLastError(errorCode, "Can't get session input/output count.");
            return [wasm2.HEAP32[dataOffset / 4], wasm2.HEAP32[dataOffset / 4 + 1]];
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
        } finally {
          wasm2.stackRestore(stack);
        }
      };
      getModelInputOutputNamesLoop = (trainingSessionId, count, isInput, isEvalModel) => {
        const names = [];
        const wasm2 = getInstance();
        for (let i = 0; i < count; i++) {
          if (wasm2._OrtTrainingGetModelInputOutputName) {
            const name = wasm2._OrtTrainingGetModelInputOutputName(trainingSessionId, i, isInput, isEvalModel);
            ifErrCodeCheckLastError(name, `Can't get input or output name -- is input: ${isInput}, index ${i}`, false);
            names.push(wasm2.UTF8ToString(name));
            wasm2._free(name);
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
        }
        return names;
      };
      getModelInputOutputNames = (trainingSessionId, isEvalModel) => {
        let inputNames = [];
        let outputNames = [];
        const [inputCount, outputCount] = getModelInputOutputCount(trainingSessionId, isEvalModel);
        inputNames = getModelInputOutputNamesLoop(trainingSessionId, inputCount, true, isEvalModel);
        outputNames = getModelInputOutputNamesLoop(trainingSessionId, outputCount, false, isEvalModel);
        return [inputNames, outputNames];
      };
      createTrainingSessionHandle = (checkpointHandle, trainModelData, evalModelData, optimizerModelData, options) => {
        const wasm2 = getInstance();
        let trainingSessionHandle = 0;
        let sessionOptionsHandle = 0;
        let allocs = [];
        try {
          [sessionOptionsHandle, allocs] = setSessionOptions(options);
          if (wasm2._OrtTrainingCreateSession) {
            trainingSessionHandle = wasm2._OrtTrainingCreateSession(
              sessionOptionsHandle,
              checkpointHandle,
              trainModelData[0],
              trainModelData[1],
              evalModelData[0],
              evalModelData[1],
              optimizerModelData[0],
              optimizerModelData[1]
            );
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
          ifErrCodeCheckLastError(trainingSessionHandle, "Error occurred when trying to create a TrainingSession", false);
          return trainingSessionHandle;
        } catch (e) {
          if (wasm2._OrtTrainingReleaseSession && trainingSessionHandle !== 0) {
            wasm2._OrtTrainingReleaseSession(trainingSessionHandle);
          }
          throw e;
        } finally {
          wasm2._free(trainModelData[0]);
          wasm2._free(evalModelData[0]);
          wasm2._free(optimizerModelData[0]);
          if (sessionOptionsHandle !== 0) {
            wasm2._OrtReleaseSessionOptions(sessionOptionsHandle);
          }
          allocs.forEach((alloc) => wasm2._free(alloc));
        }
      };
      createAndAllocateTensors = (trainingSessionId, indices, tensors, tensorHandles, inputOutputAllocs, indexAdd) => {
        const count = indices.length;
        for (let i = 0; i < count; i++) {
          prepareInputOutputTensor(
            tensors[i],
            tensorHandles,
            inputOutputAllocs,
            trainingSessionId,
            indexAdd + indices[i]
          );
        }
        const wasm2 = getInstance();
        const valuesOffset = wasm2.stackAlloc(count * 4);
        let valuesIndex = valuesOffset / 4;
        for (let i = 0; i < count; i++) {
          wasm2.HEAPU32[valuesIndex++] = tensorHandles[i];
        }
        return valuesOffset;
      };
      moveOutputToTensorMetadataArr = (outputValuesOffset, outputCount, outputTensorHandles, outputTensors) => {
        const wasm2 = getInstance();
        const output = [];
        for (let i = 0; i < outputCount; i++) {
          const tensor = wasm2.HEAPU32[outputValuesOffset / 4 + i];
          if (tensor === outputTensorHandles[i]) {
            output.push(outputTensors[i]);
            continue;
          }
          const beforeGetTensorDataStack = wasm2.stackSave();
          const tensorDataOffset = wasm2.stackAlloc(4 * 4);
          let type, dataOffset = 0;
          try {
            const errorCode = wasm2._OrtGetTensorData(
              tensor,
              tensorDataOffset,
              tensorDataOffset + 4,
              tensorDataOffset + 8,
              tensorDataOffset + 12
            );
            ifErrCodeCheckLastError(errorCode, `Can't access output tensor data on index ${i}.`);
            let tensorDataIndex = tensorDataOffset / 4;
            const dataType = wasm2.HEAPU32[tensorDataIndex++];
            dataOffset = wasm2.HEAPU32[tensorDataIndex++];
            const dimsOffset = wasm2.HEAPU32[tensorDataIndex++];
            const dimsLength = wasm2.HEAPU32[tensorDataIndex++];
            const dims = [];
            for (let i2 = 0; i2 < dimsLength; i2++) {
              dims.push(wasm2.HEAPU32[dimsOffset / 4 + i2]);
            }
            wasm2._OrtFree(dimsOffset);
            const size = dims.reduce((a, b) => a * b, 1);
            type = tensorDataTypeEnumToString(dataType);
            if (type === "string") {
              const stringData = [];
              let dataIndex = dataOffset / 4;
              for (let i2 = 0; i2 < size; i2++) {
                const offset = wasm2.HEAPU32[dataIndex++];
                const maxBytesToRead = i2 === size - 1 ? void 0 : wasm2.HEAPU32[dataIndex] - offset;
                stringData.push(wasm2.UTF8ToString(offset, maxBytesToRead));
              }
              output.push([type, dims, stringData, "cpu"]);
            } else {
              const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);
              const data = new typedArrayConstructor(size);
              new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));
              output.push([type, dims, data, "cpu"]);
            }
          } finally {
            wasm2.stackRestore(beforeGetTensorDataStack);
            if (type === "string" && dataOffset) {
              wasm2._free(dataOffset);
            }
            wasm2._OrtReleaseTensor(tensor);
          }
        }
        return output;
      };
      lazyResetGrad = async (trainingSessionId) => {
        const wasm2 = getInstance();
        if (wasm2._OrtTrainingLazyResetGrad) {
          const errorCode = wasm2._OrtTrainingLazyResetGrad(trainingSessionId);
          ifErrCodeCheckLastError(errorCode, "Can't call lazyResetGrad.");
        } else {
          throw new Error(NO_TRAIN_FUNCS_MSG);
        }
      };
      runTrainStep = async (trainingSessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
        const wasm2 = getInstance();
        const inputCount = inputIndices.length;
        const outputCount = outputIndices.length;
        let runOptionsHandle = 0;
        let runOptionsAllocs = [];
        const inputTensorHandles = [];
        const outputTensorHandles = [];
        const inputOutputAllocs = [];
        const beforeRunStack = wasm2.stackSave();
        try {
          [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
          const inputValuesOffset = createAndAllocateTensors(
            trainingSessionId,
            inputIndices,
            inputTensors,
            inputTensorHandles,
            inputOutputAllocs,
            0
          );
          const outputValuesOffset = createAndAllocateTensors(
            trainingSessionId,
            outputIndices,
            outputTensors,
            outputTensorHandles,
            inputOutputAllocs,
            inputCount
          );
          if (wasm2._OrtTrainingRunTrainStep) {
            const errorCode = wasm2._OrtTrainingRunTrainStep(
              trainingSessionId,
              inputValuesOffset,
              inputCount,
              outputValuesOffset,
              outputCount,
              runOptionsHandle
            );
            ifErrCodeCheckLastError(errorCode, "failed to call OrtTrainingRunTrainStep in the WebAssembly layer");
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
          return moveOutputToTensorMetadataArr(outputValuesOffset, outputCount, outputTensorHandles, outputTensors);
        } finally {
          wasm2.stackRestore(beforeRunStack);
          inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          inputOutputAllocs.forEach((p) => wasm2._free(p));
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          runOptionsAllocs.forEach((p) => wasm2._free(p));
        }
      };
      runOptimizerStep = async (trainingSessionId, options) => {
        const wasm2 = getInstance();
        let runOptionsHandle = 0;
        let runOptionsAllocs = [];
        try {
          [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
          if (wasm2._OrtTrainingOptimizerStep) {
            const errCode = wasm2._OrtTrainingOptimizerStep(trainingSessionId, runOptionsHandle);
            ifErrCodeCheckLastError(errCode, "Failed to call OrtTrainingOptimizerStep in the WebAssembly layer");
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
        } finally {
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          runOptionsAllocs.forEach((p) => wasm2._free(p));
        }
      };
      runEvalStep = async (trainingSessionId, inputIndices, inputTensors, outputIndices, outputTensors, options) => {
        const wasm2 = getInstance();
        const inputCount = inputIndices.length;
        const outputCount = outputIndices.length;
        let runOptionsHandle = 0;
        let runOptionsAllocs = [];
        const inputTensorHandles = [];
        const outputTensorHandles = [];
        const inputOutputAllocs = [];
        const beforeRunStack = wasm2.stackSave();
        try {
          [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);
          const inputValuesOffset = createAndAllocateTensors(
            trainingSessionId,
            inputIndices,
            inputTensors,
            inputTensorHandles,
            inputOutputAllocs,
            0
          );
          const outputValuesOffset = createAndAllocateTensors(
            trainingSessionId,
            outputIndices,
            outputTensors,
            outputTensorHandles,
            inputOutputAllocs,
            inputCount
          );
          if (wasm2._OrtTrainingEvalStep) {
            const errorCode = wasm2._OrtTrainingEvalStep(
              trainingSessionId,
              inputValuesOffset,
              inputCount,
              outputValuesOffset,
              outputCount,
              runOptionsHandle
            );
            ifErrCodeCheckLastError(errorCode, "failed to call OrtTrainingEvalStep in the WebAssembly layer");
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
          return moveOutputToTensorMetadataArr(outputValuesOffset, outputCount, outputTensorHandles, outputTensors);
        } finally {
          wasm2.stackRestore(beforeRunStack);
          inputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          outputTensorHandles.forEach((v) => wasm2._OrtReleaseTensor(v));
          inputOutputAllocs.forEach((p) => wasm2._free(p));
          if (runOptionsHandle !== 0) {
            wasm2._OrtReleaseRunOptions(runOptionsHandle);
          }
          runOptionsAllocs.forEach((p) => wasm2._free(p));
        }
      };
      getParametersSize = (trainingSessionId, trainableOnly) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        try {
          const sizeOffset = wasm2.stackAlloc(4);
          if (wasm2._OrtTrainingGetParametersSize) {
            const errorCode = wasm2._OrtTrainingGetParametersSize(trainingSessionId, sizeOffset, trainableOnly);
            ifErrCodeCheckLastError(errorCode, "Can't get parameters size");
            return wasm2.HEAP32[sizeOffset / 4];
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
        } finally {
          wasm2.stackRestore(stack);
        }
      };
      getContiguousParameters = async (trainingSessionId, trainableOnly) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        const tensorTypeAsString = "float32";
        const locationAsString = "cpu";
        const parametersSize = getParametersSize(trainingSessionId, trainableOnly);
        let tensor = 0;
        const paramsByteLength = 4 * parametersSize;
        const paramsOffset = wasm2._malloc(paramsByteLength);
        const dims = [parametersSize];
        const dimsOffset = wasm2.stackAlloc(4);
        const dimsIndex = dimsOffset / 4;
        wasm2.HEAP32[dimsIndex] = parametersSize;
        try {
          tensor = wasm2._OrtCreateTensor(
            tensorDataTypeStringToEnum(tensorTypeAsString),
            paramsOffset,
            paramsByteLength,
            dimsOffset,
            dims.length,
            dataLocationStringToEnum(locationAsString)
          );
          ifErrCodeCheckLastError(
            tensor,
            `Can't create tensor for getContiguousParameters. session=${trainingSessionId}.`,
            false
          );
          if (wasm2._OrtTrainingCopyParametersToBuffer) {
            const errCode = wasm2._OrtTrainingCopyParametersToBuffer(trainingSessionId, tensor, parametersSize, trainableOnly);
            ifErrCodeCheckLastError(errCode, "Can't get contiguous parameters.");
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
          const typedArrayConstructor = tensorTypeToTypedArrayConstructor(tensorTypeAsString);
          const data = new typedArrayConstructor(parametersSize);
          const output = [];
          new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(wasm2.HEAPU8.subarray(paramsOffset, paramsOffset + paramsByteLength));
          output.push([tensorTypeAsString, dims, data, locationAsString]);
          if (output.length !== 1) {
            throw new Error(`something unexpected happened in the getContiguousParameters function. Expected output length of
     one, got ${output.length}`);
          } else {
            return output[0];
          }
        } finally {
          if (tensor !== 0) {
            wasm2._OrtReleaseTensor(tensor);
          }
          wasm2._free(paramsOffset);
          wasm2._free(dimsOffset);
          wasm2.stackRestore(stack);
        }
      };
      loadParametersBuffer = async (trainingSessionId, buffer, trainableOnly) => {
        const wasm2 = getInstance();
        const stack = wasm2.stackSave();
        const tensorTypeAsString = "float32";
        const locationAsString = "cpu";
        const bufferByteLength = buffer.length;
        const bufferCount = bufferByteLength / 4;
        const bufferOffset = wasm2._malloc(bufferByteLength);
        wasm2.HEAPU8.set(buffer, bufferOffset);
        const dimsOffset = wasm2.stackAlloc(4);
        wasm2.HEAP32[dimsOffset / 4] = bufferCount;
        const dimsLength = 1;
        let tensor = 0;
        try {
          tensor = wasm2._OrtCreateTensor(
            tensorDataTypeStringToEnum(tensorTypeAsString),
            bufferOffset,
            bufferByteLength,
            dimsOffset,
            dimsLength,
            dataLocationStringToEnum(locationAsString)
          );
          ifErrCodeCheckLastError(tensor, `Can't create tensor for input/output. session=${trainingSessionId}`, false);
          if (wasm2._OrtTrainingCopyParametersFromBuffer) {
            const errCode = wasm2._OrtTrainingCopyParametersFromBuffer(trainingSessionId, tensor, bufferCount, trainableOnly);
            ifErrCodeCheckLastError(errCode, "Can't copy buffer to parameters.");
          } else {
            throw new Error(NO_TRAIN_FUNCS_MSG);
          }
        } finally {
          if (tensor !== 0) {
            wasm2._OrtReleaseTensor(tensor);
          }
          wasm2.stackRestore(stack);
          wasm2._free(bufferOffset);
          wasm2._free(dimsOffset);
        }
      };
      releaseTrainingSessionAndCheckpoint = (checkpointId, sessionId) => {
        const wasm2 = getInstance();
        if (wasm2._OrtTrainingReleaseSession) {
          wasm2._OrtTrainingReleaseSession(sessionId);
        }
        if (wasm2._OrtTrainingReleaseCheckpoint) {
          wasm2._OrtTrainingReleaseCheckpoint(checkpointId);
        }
      };
    }
  });

  // web/lib/wasm/session-handler-training.ts
  var OnnxruntimeWebAssemblyTrainingSessionHandler;
  var init_session_handler_training = __esm({
    "web/lib/wasm/session-handler-training.ts"() {
      "use strict";
      init_session_handler_inference();
      init_wasm_core_impl();
      init_wasm_training_core_impl();
      OnnxruntimeWebAssemblyTrainingSessionHandler = class {
        constructor() {
          this.evalInputNames = [];
          this.evalOutputNames = [];
        }
        async uriOrBufferToHeap(uriOrBuffer) {
          let buffer;
          if (typeof uriOrBuffer === "string") {
            const response = await fetch(uriOrBuffer);
            const arrayBuffer = await response.arrayBuffer();
            buffer = new Uint8Array(arrayBuffer);
          } else {
            buffer = uriOrBuffer;
          }
          return copyFromExternalBuffer(buffer);
        }
        async createTrainingSession(checkpointStateUriOrBuffer, trainModelUriOrBuffer, evalModelUriOrBuffer, optimizerModelUriOrBuffer, options) {
          const checkpointData = await this.uriOrBufferToHeap(checkpointStateUriOrBuffer);
          const trainModelData = await this.uriOrBufferToHeap(trainModelUriOrBuffer);
          let evalModelData = [0, 0];
          let optimizerModelData = [0, 0];
          if (evalModelUriOrBuffer !== "") {
            evalModelData = await this.uriOrBufferToHeap(evalModelUriOrBuffer);
          }
          if (optimizerModelUriOrBuffer !== "") {
            optimizerModelData = await this.uriOrBufferToHeap(optimizerModelUriOrBuffer);
          }
          this.checkpointId = createCheckpointHandle(checkpointData);
          this.sessionId = createTrainingSessionHandle(this.checkpointId, trainModelData, evalModelData, optimizerModelData, options);
          [this.inputNames, this.outputNames] = getModelInputOutputNames(this.sessionId, false);
          if (evalModelUriOrBuffer !== "") {
            [this.evalInputNames, this.evalOutputNames] = getModelInputOutputNames(this.sessionId, true);
          }
        }
        /**
         * Helper method that converts a feeds or fetches datatype to two arrays, one of values and one that stores the
         * corresponding name as a number referring to the index in the list of names provided.
         *
         * @param feeds meant to match either SessionHandler.FeedsType or SessionHandler.FetchesType
         * @param names either inputNames or outputNames
         * @returns a tuple of a list of values and a list of indices.
         */
        convertMapIntoValuesArrayAndIndicesArray(feeds, names, mapFunc) {
          const values = [];
          const indices = [];
          Object.entries(feeds).forEach((kvp) => {
            const name = kvp[0];
            const tensor = kvp[1];
            const index = names.indexOf(name);
            if (index === -1) {
              throw new Error(`invalid input '${name}`);
            }
            values.push(tensor);
            indices.push(index);
          });
          const uList = values.map(mapFunc);
          return [values, indices, uList];
        }
        /**
         * Helper method that converts the TensorMetadata that the wasm-core functions return to the
         * SessionHandler.ReturnType. Any outputs in the provided outputArray that are falsy will be populated with the
         * corresponding result.
         *
         * @param results used to populate the resultMap if there is no value for that outputName already
         * @param outputArray used to populate the resultMap. If null or undefined, use the corresponding result from results
         * @param outputIndices specifies which outputName the corresponding value for outputArray refers to.
         * @returns a map of output names and OnnxValues.
         */
        convertTensorMetadataToReturnType(results, outputArray, outputIndices) {
          const resultMap = {};
          for (let i = 0; i < results.length; i++) {
            resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);
          }
          return resultMap;
        }
        async lazyResetGrad() {
          await lazyResetGrad(this.sessionId);
        }
        async runTrainStep(feeds, fetches, options) {
          const [, inputIndices, inputs] = this.convertMapIntoValuesArrayAndIndicesArray(
            feeds,
            this.inputNames,
            (t, i) => encodeTensorMetadata(t, () => `input "${this.inputNames[inputIndices[i]]}"`)
          );
          const [outputArray, outputIndices, outputs] = this.convertMapIntoValuesArrayAndIndicesArray(
            fetches,
            this.outputNames,
            (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.outputNames[outputIndices[i]]}"`) : null
          );
          const results = await runTrainStep(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
          return this.convertTensorMetadataToReturnType(results, outputArray, outputIndices);
        }
        async runOptimizerStep(options) {
          await runOptimizerStep(this.sessionId, options);
        }
        async runEvalStep(feeds, fetches, options) {
          const [, inputIndices, inputs] = this.convertMapIntoValuesArrayAndIndicesArray(
            feeds,
            this.evalInputNames,
            (t, i) => encodeTensorMetadata(t, () => `input "${this.evalInputNames[inputIndices[i]]}"`)
          );
          const [outputArray, outputIndices, outputs] = this.convertMapIntoValuesArrayAndIndicesArray(
            fetches,
            this.evalOutputNames,
            (t, i) => t ? encodeTensorMetadata(t, () => `output "${this.evalOutputNames[outputIndices[i]]}"`) : null
          );
          const results = await runEvalStep(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);
          return this.convertTensorMetadataToReturnType(results, outputArray, outputIndices);
        }
        async getParametersSize(trainableOnly) {
          return getParametersSize(this.sessionId, trainableOnly);
        }
        async loadParametersBuffer(array, trainableOnly) {
          await loadParametersBuffer(this.sessionId, array, trainableOnly);
        }
        async getContiguousParameters(trainableOnly) {
          const tensorResult = await getContiguousParameters(this.sessionId, trainableOnly);
          return decodeTensorMetadata(tensorResult);
        }
        async dispose() {
          return releaseTrainingSessionAndCheckpoint(this.checkpointId, this.sessionId);
        }
      };
    }
  });

  // web/lib/backend-wasm-training.ts
  var backend_wasm_training_exports = {};
  __export(backend_wasm_training_exports, {
    wasmBackend: () => wasmBackend
  });
  var OnnxruntimeTrainingWebAssemblyBackend, wasmBackend;
  var init_backend_wasm_training = __esm({
    "web/lib/backend-wasm-training.ts"() {
      "use strict";
      init_backend_wasm();
      init_session_handler_training();
      OnnxruntimeTrainingWebAssemblyBackend = class extends OnnxruntimeWebAssemblyBackend {
        async createTrainingSessionHandler(checkpointStateUriOrBuffer, trainModelUriOrBuffer, evalModelUriOrBuffer, optimizerModelUriOrBuffer, options) {
          const handler = new OnnxruntimeWebAssemblyTrainingSessionHandler();
          await handler.createTrainingSession(
            checkpointStateUriOrBuffer,
            trainModelUriOrBuffer,
            evalModelUriOrBuffer,
            optimizerModelUriOrBuffer,
            options
          );
          return Promise.resolve(handler);
        }
      };
      wasmBackend = new OnnxruntimeTrainingWebAssemblyBackend();
    }
  });

  // web/lib/index.ts
  var lib_exports = {};
  __export(lib_exports, {
    InferenceSession: () => InferenceSession2,
    TRACE: () => TRACE,
    TRACE_FUNC_BEGIN: () => TRACE_FUNC_BEGIN,
    TRACE_FUNC_END: () => TRACE_FUNC_END,
    Tensor: () => Tensor2,
    TrainingSession: () => TrainingSession2,
    default: () => lib_default,
    env: () => env2,
    registerBackend: () => registerBackend
  });
  init_esm();
  init_esm();
  init_esm();

  // web/lib/version.ts
  var version2 = "1.17.0";

  // web/lib/index.ts
  var lib_default = esm_exports;
  if (false) {
    const onnxjsBackend = null.onnxjsBackend;
    registerBackend("webgl", onnxjsBackend, -10);
  }
  if (true) {
    const wasmBackend2 = false ? null.wasmBackend : (init_backend_wasm_training(), __toCommonJS(backend_wasm_training_exports)).wasmBackend;
    if (false) {
      registerBackend("webgpu", wasmBackend2, 5);
      registerBackend("webnn", wasmBackend2, 5);
    }
    registerBackend("cpu", wasmBackend2, 10);
    registerBackend("wasm", wasmBackend2, 10);
  }
  Object.defineProperty(env2.versions, "web", { value: version2, enumerable: true });
  return __toCommonJS(lib_exports);
})();
//# sourceMappingURL=data:application/json;base64,
